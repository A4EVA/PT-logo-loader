
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x000214c4 vaddr 0x000214c4 paddr 0x000214c4 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x000214dc memsz 0x000214dc flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x000214dc align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x00021548 align 2**16
         filesz 0x00000000 memsz 0x0000e640 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              000194a4  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  000214c4  000214c4  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  000214c4  000214c4  000214c4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  000214dc  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000e640  20000148  00021548  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000e788  2000e788  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004a58e  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000894eb  00000000  00000000  0007a944  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ebd2  00000000  00000000  00103e2f  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005e20  00000000  00000000  00112a08  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005f67c  00000000  00000000  00118828  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  00177ea4  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a170  00000000  00000000  0018b3b7  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f3c0  00000000  00000000  001a5528  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000060  00000000  00000000  001b48e8  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018e47  00000000  00000000  001b4948  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00036175  00000000  00000000  001cd78f  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
000214c4 l    d  .ARM.extab	00000000 .ARM.extab
000214c4 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000e788 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 29v7ssp6j8vk2cgm
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
00057ea7 l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00032248 l       .debug_str	00000000 
0003223a l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00059989 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000f54e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
0005d5c1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ac9yj7x9inahmak
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0005b2b3 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0005c403 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0000161a l       .debug_str	00000000 
00001641 l       .debug_str	00000000 
00001649 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
0005aded l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0000168a l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
0000120a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00000e7a l       .debug_str	00000000 
00000eb1 l       .debug_str	00000000 
00000ebc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
0005e175 l       .debug_str	00000000 
00000edb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000ee5 l       .debug_str	00000000 
00001632 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00007576 l       .debug_str	00000000 
00000f25 l       .debug_str	00000000 
00000f53 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000103f l       .debug_str	00000000 
00001076 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0005dca9 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000107f l       .debug_str	00000000 
00001093 l       .debug_str	00000000 
000010c6 l       .debug_str	00000000 
000010d1 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000011c6 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000123f l       .debug_str	00000000 
00001282 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012da l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001377 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
200001f8 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8f3c7b5d2c207abfE
2000014c l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h64b26c24ec50591aE
2000014c l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h41aa62dc06660831E
200001e0 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h248d1b5995e7331aE
20000148 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc6437d039f5b5b2dE
00008bc8 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E
0000931a l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E
00008a8e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E
00008a42 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE
2000019e l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h7dd26ed30d22a01eE
200001f0 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h66f4f9260b49f5dfE
0001d5c0 l     O .text	00000021 str.0
0001d600 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3av1m1so5ua992q
0001bdc5 l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
0003b6cb l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000186c l       .debug_str	00000000 
000018ca l       .debug_str	00000000 
000018d3 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
0000199d l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a81 l       .debug_str	00000000 
00001a87 l       .debug_str	00000000 
00001ae1 l       .debug_str	00000000 
00001ae6 l       .debug_str	00000000 
00059970 l       .debug_str	00000000 
00001b41 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001b7e l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005ddf7 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00001c09 l       .debug_str	00000000 
00007827 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
0004aa57 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00059469 l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c13 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
0000230c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00001c20 l       .debug_str	00000000 
0003b6ca l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001eb98 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
00019dd0 l       .debug_str	00000000 
00001c3a l       .debug_str	00000000 
00001c43 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
0000d9d9 l       .debug_str	00000000 
0000d9df l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001693 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000169e l       .debug_str	00000000 
000016cc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000016dd l       .debug_str	00000000 
00001711 l       .debug_str	00000000 
0000171f l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001759 l       .debug_str	00000000 
00001784 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000178d l       .debug_str	00000000 
0002448b l       .debug_str	00000000 
000017b9 l       .debug_str	00000000 
000586ad l       .debug_str	00000000 
200001fc l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17he720e0e613659014E
2000624c l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17h6824cb449058aaa8E
2000024c l     O .bss	00006000 _ZN3app5chip816CHIP8_TASK_STACK17h96b2f7995bed9210E
000095cc l     F .text	00000084 _ZN3app5chip89task_func17h54bf83617eedf089E
0001de50 l     O .text	00000021 str.0
0001de90 l     O .text	0000001c str.1
0001df10 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3k1rew1y0sa9p4cs
00002147 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0000daad l       .debug_str	00000000 
0000232d l       .debug_str	00000000 
00002328 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00059e4f l       .debug_str	00000000 
000022fd l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00001ddd l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e61 l       .debug_str	00000000 
00001e7b l       .debug_str	00000000 
00001eb0 l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001f00 l       .debug_str	00000000 
00001f1b l       .debug_str	00000000 
00001f6f l       .debug_str	00000000 
00001f91 l       .debug_str	00000000 
00002003 l       .debug_str	00000000 
00002039 l       .debug_str	00000000 
00002054 l       .debug_str	00000000 
0000208a l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000022cf l       .debug_str	00000000 
000020a5 l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
00002277 l       .debug_str	00000000 
0000223e l       .debug_str	00000000 
000020db l       .debug_str	00000000 
00002222 l       .debug_str	00000000 
000021eb l       .debug_str	00000000 
000020f6 l       .debug_str	00000000 
000021cf l       .debug_str	00000000 
00002198 l       .debug_str	00000000 
0000217d l       .debug_str	00000000 
0000212c l       .debug_str	00000000 
0001eb26 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0000236d l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00001c09 l       .debug_str	00000000 
00007827 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
0004aa57 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00059469 l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000235b l       .debug_str	00000000 
00002355 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005aded l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000db92 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00002352 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
0000230c l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00001c5b l       .debug_str	00000000 
00001c81 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00001c9f l       .debug_str	00000000 
00001d2b l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000234e l       .debug_str	00000000 
000595a1 l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0001e060 l     O .text	0000001c str.0
0001e2e0 l     O .text	00000021 str.1
0001e5c0 l     O .text	00000039 str.2
0001e620 l     O .text	00000021 str.3
0001e660 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 4g2px1fyklyi5loj
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000023cf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0000237e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4li2bx5hst9qmla8
00001c1b l       .debug_str	00000000 
00002444 l       .debug_str	00000000 
00002480 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00002489 l       .debug_str	00000000 
00007b4c l       .debug_str	00000000 
000024b4 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
00002512 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001eb93 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000023dc l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4omwjvgyphguh48u
00002631 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
000025c2 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
00002672 l       .debug_str	00000000 
000026d5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00002725 l       .debug_str	00000000 
000027a5 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
000027fa l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
00002574 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 52x5s6n74aarru7s
00002ae6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
00002a52 l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b79 l       .debug_str	00000000 
00002bcc l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cbe l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00002d36 l       .debug_str	00000000 
00002da8 l       .debug_str	00000000 
00002e66 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00002938 l       .debug_str	00000000 
000029c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 ltoum6qebj303de
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00002e74 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2faay6g6bya59u
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00002f01 l       .debug_str	00000000 
00002f7d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xuw4v3fy8tiv1h2
00003131 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000030f6 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0000319a l       .debug_str	00000000 
00003205 l       .debug_str	00000000 
00003241 l       .debug_str	00000000 
0000328e l       .debug_str	00000000 
000032ca l       .debug_str	00000000 
000032d8 l       .debug_str	00000000 
00003343 l       .debug_str	00000000 
0000335e l       .debug_str	00000000 
000033ca l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00003421 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00002faa l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00002ffc l       .debug_str	00000000 
00003035 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0000305e l       .debug_str	00000000 
00003097 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00003ebc l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
00003571 l       .debug_str	00000000 
0000357a l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00003597 l       .debug_str	00000000 
000035a8 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
000035b9 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
000035e8 l       .debug_str	00000000 
000035ee l       .debug_str	00000000 
000035f9 l       .debug_str	00000000 
00003603 l       .debug_str	00000000 
0000360d l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
0000365e l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000036af l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00003700 l       .debug_str	00000000 
00003729 l       .debug_str	00000000 
00003732 l       .debug_str	00000000 
0000378f l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
000037b5 l       .debug_str	00000000 
000037dd l       .debug_str	00000000 
0000380f l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0000384b l       .debug_str	00000000 
000038a8 l       .debug_str	00000000 
00003905 l       .debug_str	00000000 
00003962 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00003994 l       .debug_str	00000000 
000039d9 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000039e5 l       .debug_str	00000000 
00057a27 l       .debug_str	00000000 
00003a21 l       .debug_str	00000000 
00003a65 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003ab7 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
00003b0c l       .debug_str	00000000 
00003b1a l       .debug_str	00000000 
00003b5a l       .debug_str	00000000 
00003b62 l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
00003b74 l       .debug_str	00000000 
00003baf l       .debug_str	00000000 
00003bed l       .debug_str	00000000 
00003c1d l       .debug_str	00000000 
00003c31 l       .debug_str	00000000 
00003c61 l       .debug_str	00000000 
00003c75 l       .debug_str	00000000 
00003ca5 l       .debug_str	00000000 
00003cb9 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
00003d04 l       .debug_str	00000000 
00003d5b l       .debug_str	00000000 
00003d6a l       .debug_str	00000000 
00003db5 l       .debug_str	00000000 
00006737 l       .debug_str	00000000 
00003e2c l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003fb8 l       .debug_str	00000000 
00003fc3 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000404c l       .debug_str	00000000 
00022012 l       .debug_str	00000000 
000040c3 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00004158 l       .debug_str	00000000 
000041ef l       .debug_str	00000000 
0000428a l       .debug_str	00000000 
0000431f l       .debug_str	00000000 
000043b6 l       .debug_str	00000000 
00004451 l       .debug_str	00000000 
00004519 l       .debug_str	00000000 
00004524 l       .debug_str	00000000 
000045f0 l       .debug_str	00000000 
00004680 l       .debug_str	00000000 
0000468c l       .debug_str	00000000 
00004732 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
000047e2 l       .debug_str	00000000 
00004884 l       .debug_str	00000000 
00004928 l       .debug_str	00000000 
0000497c l       .debug_str	00000000 
000049d1 l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00004aa9 l       .debug_str	00000000 
00004b2d l       .debug_str	00000000 
00004bb1 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00004bf8 l       .debug_str	00000000 
0000dedb l       .debug_str	00000000 
00004c3f l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00004c86 l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d83 l       .debug_str	00000000 
00004e1e l       .debug_str	00000000 
00004eb2 l       .debug_str	00000000 
00004eff l       .debug_str	00000000 
00004f0b l       .debug_str	00000000 
00004f6e l       .debug_str	00000000 
00004fb6 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00004fc2 l       .debug_str	00000000 
00005056 l       .debug_str	00000000 
000050bc l       .debug_str	00000000 
0000514d l       .debug_str	00000000 
000051ec l       .debug_str	00000000 
0000527d l       .debug_str	00000000 
0000531c l       .debug_str	00000000 
000053be l       .debug_str	00000000 
0000544f l       .debug_str	00000000 
000054fd l       .debug_str	00000000 
000055ad l       .debug_str	00000000 
00005661 l       .debug_str	00000000 
00005754 l       .debug_str	00000000 
0000575f l       .debug_str	00000000 
00005856 l       .debug_str	00000000 
00005902 l       .debug_str	00000000 
0000590c l       .debug_str	00000000 
0000597e l       .debug_str	00000000 
000059f3 l       .debug_str	00000000 
00005a66 l       .debug_str	00000000 
00005ad7 l       .debug_str	00000000 
00005b4a l       .debug_str	00000000 
00005bc1 l       .debug_str	00000000 
00005c36 l       .debug_str	00000000 
00005cab l       .debug_str	00000000 
00005d1b l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005dad l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00005dbe l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00005e12 l       .debug_str	00000000 
00005e1c l       .debug_str	00000000 
00005e26 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00005e30 l       .debug_str	00000000 
00005e61 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005e96 l       .debug_str	00000000 
00005ea0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005eaa l       .debug_str	00000000 
00005eb3 l       .debug_str	00000000 
00005ee2 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005ef2 l       .debug_str	00000000 
00005ef5 l       .debug_str	00000000 
00005ef8 l       .debug_str	00000000 
00005efb l       .debug_str	00000000 
00005efe l       .debug_str	00000000 
00005f01 l       .debug_str	00000000 
00005f4f l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00005fe2 l       .debug_str	00000000 
0000603b l       .debug_str	00000000 
00006016 l       .debug_str	00000000 
0000606c l       .debug_str	00000000 
00006048 l       .debug_str	00000000 
0000609d l       .debug_str	00000000 
00006078 l       .debug_str	00000000 
000060d1 l       .debug_str	00000000 
000060aa l       .debug_str	00000000 
00006106 l       .debug_str	00000000 
000060e0 l       .debug_str	00000000 
0000613a l       .debug_str	00000000 
00006114 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00003481 l       .debug_str	00000000 
000034e1 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0000e2d2 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000e3c6 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000e434 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000e46c l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00006dd5 l       .debug_str	00000000 
0000673b l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
000067a4 l       .debug_str	00000000 
000067da l       .debug_str	00000000 
000067f5 l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
0000684e l       .debug_str	00000000 
0000688a l       .debug_str	00000000 
000068b0 l       .debug_str	00000000 
000068bc l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
000068f0 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000693e l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
0000698f l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000069e1 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00006a36 l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
00006ad7 l       .debug_str	00000000 
00006b25 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00006b34 l       .debug_str	00000000 
00006b85 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00006b9d l       .debug_str	00000000 
00006bf2 l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
00006c16 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00006c64 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00006cb8 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00006d27 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00006d84 l       .debug_str	00000000 
00006de7 l       .debug_str	00000000 
00006e3f l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00006e55 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00006e60 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00006e89 l       .debug_str	00000000 
00006eec l       .debug_str	00000000 
00006f16 l       .debug_str	00000000 
00006f79 l       .debug_str	00000000 
00006f82 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00007001 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
00007088 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
000070e8 l       .debug_str	00000000 
0000711b l       .debug_str	00000000 
00007185 l       .debug_str	00000000 
000071b8 l       .debug_str	00000000 
000071bd l       .debug_str	00000000 
00007221 l       .debug_str	00000000 
0005c707 l       .debug_str	00000000 
0000727c l       .debug_str	00000000 
000072b8 l       .debug_str	00000000 
000072c6 l       .debug_str	00000000 
000072f5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00007438 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00033af9 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0000745c l       .debug_str	00000000 
00007474 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00007491 l       .debug_str	00000000 
000072c0 l       .debug_str	00000000 
000074aa l       .debug_str	00000000 
000074c6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00006148 l       .debug_str	00000000 
0000619d l       .debug_str	00000000 
000061e7 l       .debug_str	00000000 
000061ee l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00005fd4 l       .debug_str	00000000 
00005fdf l       .debug_str	00000000 
0000cd61 l       .debug_str	00000000 
0000cd6c l       .debug_str	00000000 
0000746e l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00006201 l       .debug_str	00000000 
0000622a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
00006257 l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000062d0 l       .debug_str	00000000 
000062e4 l       .debug_str	00000000 
000062f7 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00006363 l       .debug_str	00000000 
0000638c l       .debug_str	00000000 
00006399 l       .debug_str	00000000 
000063a3 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
000063a7 l       .debug_str	00000000 
00058985 l       .debug_str	00000000 
000074c0 l       .debug_str	00000000 
0000748a l       .debug_str	00000000 
000063b1 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
00006466 l       .debug_str	00000000 
000064a4 l       .debug_str	00000000 
000064bf l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
0000657b l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
000065ad l       .debug_str	00000000 
000065f2 l       .debug_str	00000000 
000065fe l       .debug_str	00000000 
00006644 l       .debug_str	00000000 
00006651 l       .debug_str	00000000 
00006697 l       .debug_str	00000000 
000066a4 l       .debug_str	00000000 
000066e2 l       .debug_str	00000000 
000066e8 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0000e61c l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000e686 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000e6b0 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000e6ee l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000e7be l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
00009741 l       .debug_str	00000000 
00007814 l       .debug_str	00000000 
0000781c l       .debug_str	00000000 
00007823 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000782a l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
0000782e l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
0005deab l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000078e5 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000791a l       .debug_str	00000000 
0000794c l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
0000795e l       .debug_str	00000000 
00007987 l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000079ac l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000079d5 l       .debug_str	00000000 
000079ff l       .debug_str	00000000 
00007a28 l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00007af0 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00059776 l       .debug_str	00000000 
0004c7c9 l       .debug_str	00000000 
0005a4db l       .debug_str	00000000 
0005bdf4 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0000c8bd l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0000cc16 l       .debug_str	00000000 
0000cb75 l       .debug_str	00000000 
00007b05 l       .debug_str	00000000 
00007b0f l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0000c82d l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0000cc4f l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000cc2e l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000c87e l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
00007b1e l       .debug_str	00000000 
00007b47 l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00007b8e l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00007ba3 l       .debug_str	00000000 
00007c1f l       .debug_str	00000000 
00007bb6 l       .debug_str	00000000 
00007bf8 l       .debug_str	00000000 
00007c0d l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
00007c2a l       .debug_str	00000000 
00007c34 l       .debug_str	00000000 
00007c66 l       .debug_str	00000000 
00007c7a l       .debug_str	00000000 
00007c8f l       .debug_str	00000000 
0000be28 l       .debug_str	00000000 
0000c031 l       .debug_str	00000000 
00007c96 l       .debug_str	00000000 
00007ca1 l       .debug_str	00000000 
00007d25 l       .debug_str	00000000 
00007d53 l       .debug_str	00000000 
00007dd9 l       .debug_str	00000000 
00040863 l       .debug_str	00000000 
00007e01 l       .debug_str	00000000 
00007e12 l       .debug_str	00000000 
00007e9c l       .debug_str	00000000 
00007eba l       .debug_str	00000000 
00007f48 l       .debug_str	00000000 
00007f6f l       .debug_str	00000000 
00007ffe l       .debug_str	00000000 
00008046 l       .debug_str	00000000 
00008075 l       .debug_str	00000000 
000080bd l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00008124 l       .debug_str	00000000 
00008134 l       .debug_str	00000000 
0000817c l       .debug_str	00000000 
0000818d l       .debug_str	00000000 
000081d5 l       .debug_str	00000000 
000081dd l       .debug_str	00000000 
00008225 l       .debug_str	00000000 
0000822f l       .debug_str	00000000 
00008277 l       .debug_str	00000000 
00008291 l       .debug_str	00000000 
000082d9 l       .debug_str	00000000 
000082f2 l       .debug_str	00000000 
0000833a l       .debug_str	00000000 
0000834d l       .debug_str	00000000 
00008395 l       .debug_str	00000000 
0000839e l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000083e6 l       .debug_str	00000000 
00008430 l       .debug_str	00000000 
0000847b l       .debug_str	00000000 
000084b9 l       .debug_str	00000000 
000084ea l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00008528 l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
0000855c l       .debug_str	00000000 
00008581 l       .debug_str	00000000 
000085e0 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00008647 l       .debug_str	00000000 
00008671 l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
000086d1 l       .debug_str	00000000 
00008702 l       .debug_str	00000000 
0000870c l       .debug_str	00000000 
00008769 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0000879b l       .debug_str	00000000 
000087c1 l       .debug_str	00000000 
000087e3 l       .debug_str	00000000 
00008809 l       .debug_str	00000000 
0000882b l       .debug_str	00000000 
00008854 l       .debug_str	00000000 
00008879 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
000088ce l       .debug_str	00000000 
000088d7 l       .debug_str	00000000 
00008961 l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
0000897e l       .debug_str	00000000 
00008a0a l       .debug_str	00000000 
00008a27 l       .debug_str	00000000 
00008a47 l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
00008a4e l       .debug_str	00000000 
00008a89 l       .debug_str	00000000 
00008abb l       .debug_str	00000000 
00008acc l       .debug_str	00000000 
00008b07 l       .debug_str	00000000 
00008b4d l       .debug_str	00000000 
00003ca5 l       .debug_str	00000000 
00008b7d l       .debug_str	00000000 
00008bad l       .debug_str	00000000 
00008bcb l       .debug_str	00000000 
00008bfb l       .debug_str	00000000 
00008c0e l       .debug_str	00000000 
00008c3e l       .debug_str	00000000 
00008c53 l       .debug_str	00000000 
00008c83 l       .debug_str	00000000 
00008c9f l       .debug_str	00000000 
00008ccf l       .debug_str	00000000 
00008ced l       .debug_str	00000000 
00008d1d l       .debug_str	00000000 
00008d38 l       .debug_str	00000000 
00008d68 l       .debug_str	00000000 
00008d8c l       .debug_str	00000000 
00008dbc l       .debug_str	00000000 
00008df6 l       .debug_str	00000000 
00008e26 l       .debug_str	00000000 
00008e4b l       .debug_str	00000000 
00008e7b l       .debug_str	00000000 
00008ea5 l       .debug_str	00000000 
00008edb l       .debug_str	00000000 
00008f0c l       .debug_str	00000000 
00008f46 l       .debug_str	00000000 
00008f7b l       .debug_str	00000000 
00008fb7 l       .debug_str	00000000 
00008fdd l       .debug_str	00000000 
00008fff l       .debug_str	00000000 
00009026 l       .debug_str	00000000 
00009049 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00009097 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
000090e8 l       .debug_str	00000000 
00009139 l       .debug_str	00000000 
00009146 l       .debug_str	00000000 
00009198 l       .debug_str	00000000 
000091a6 l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
00009203 l       .debug_str	00000000 
0000924e l       .debug_str	00000000 
00009262 l       .debug_str	00000000 
000092a5 l       .debug_str	00000000 
000092b2 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
000092f5 l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
00009362 l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
000093d5 l       .debug_str	00000000 
00009427 l       .debug_str	00000000 
00009479 l       .debug_str	00000000 
00009483 l       .debug_str	00000000 
000094d8 l       .debug_str	00000000 
0000952d l       .debug_str	00000000 
00009583 l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
00009621 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0000965f l       .debug_str	00000000 
0000969a l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
000096a5 l       .debug_str	00000000 
000096ec l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00009702 l       .debug_str	00000000 
00009793 l       .debug_str	00000000 
000097a9 l       .debug_str	00000000 
000097ee l       .debug_str	00000000 
00009808 l       .debug_str	00000000 
0000986b l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
000098ca l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0000992b l       .debug_str	00000000 
0000996a l       .debug_str	00000000 
0000ca50 l       .debug_str	00000000 
00009991 l       .debug_str	00000000 
000099d1 l       .debug_str	00000000 
00009a04 l       .debug_str	00000000 
00009a1b l       .debug_str	00000000 
00009a61 l       .debug_str	00000000 
00009a7d l       .debug_str	00000000 
00009ae1 l       .debug_str	00000000 
00009b03 l       .debug_str	00000000 
00009b45 l       .debug_str	00000000 
00009b66 l       .debug_str	00000000 
00009ba8 l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
00009bd8 l       .debug_str	00000000 
00009c1c l       .debug_str	00000000 
00009c71 l       .debug_str	00000000 
00009cb5 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
00009d4f l       .debug_str	00000000 
00009dc7 l       .debug_str	00000000 
00009e0b l       .debug_str	00000000 
00009e4b l       .debug_str	00000000 
00009e66 l       .debug_str	00000000 
00009ea7 l       .debug_str	00000000 
00009efd l       .debug_str	00000000 
00009f41 l       .debug_str	00000000 
00009f6e l       .debug_str	00000000 
00009fb3 l       .debug_str	00000000 
00009ffb l       .debug_str	00000000 
0000a00c l       .debug_str	00000000 
0000a054 l       .debug_str	00000000 
0000a065 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
0000a0a0 l       .debug_str	00000000 
0000a0dc l       .debug_str	00000000 
0000a0e2 l       .debug_str	00000000 
0000a118 l       .debug_str	00000000 
0000a12b l       .debug_str	00000000 
0000a162 l       .debug_str	00000000 
0000a176 l       .debug_str	00000000 
0000a1b8 l       .debug_str	00000000 
0000a1d7 l       .debug_str	00000000 
0000a21c l       .debug_str	00000000 
0000a237 l       .debug_str	00000000 
0000a29c l       .debug_str	00000000 
0000a303 l       .debug_str	00000000 
0000a30e l       .debug_str	00000000 
0000a354 l       .debug_str	00000000 
0000a39a l       .debug_str	00000000 
0000a3a4 l       .debug_str	00000000 
0000a3eb l       .debug_str	00000000 
0000a3f6 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
0000a43d l       .debug_str	00000000 
0000a486 l       .debug_str	00000000 
0000a4cf l       .debug_str	00000000 
0000a508 l       .debug_str	00000000 
0000a523 l       .debug_str	00000000 
0000a532 l       .debug_str	00000000 
0000a56b l       .debug_str	00000000 
0000a590 l       .debug_str	00000000 
0000a5c9 l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000a628 l       .debug_str	00000000 
0000a661 l       .debug_str	00000000 
0000a69f l       .debug_str	00000000 
0000a6d9 l       .debug_str	00000000 
0000a6e5 l       .debug_str	00000000 
0000a721 l       .debug_str	00000000 
0000a734 l       .debug_str	00000000 
0000a770 l       .debug_str	00000000 
0000a789 l       .debug_str	00000000 
0000a7c6 l       .debug_str	00000000 
0000a7d7 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
0000a828 l       .debug_str	00000000 
0000a879 l       .debug_str	00000000 
0000a882 l       .debug_str	00000000 
0000a8dd l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a95c l       .debug_str	00000000 
0000a9bc l       .debug_str	00000000 
0000aa1c l       .debug_str	00000000 
0000aa80 l       .debug_str	00000000 
0000aa9b l       .debug_str	00000000 
0000aaff l       .debug_str	00000000 
0000ab0a l       .debug_str	00000000 
0000ab74 l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
0000abf2 l       .debug_str	00000000 
0000ac0a l       .debug_str	00000000 
0000ac7a l       .debug_str	00000000 
0000ac93 l       .debug_str	00000000 
0000acfe l       .debug_str	00000000 
0000ad13 l       .debug_str	00000000 
0000ad83 l       .debug_str	00000000 
0000ad98 l       .debug_str	00000000 
0000ae08 l       .debug_str	00000000 
0000ae1a l       .debug_str	00000000 
0000ae8b l       .debug_str	00000000 
0000ae9e l       .debug_str	00000000 
0000af0f l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af37 l       .debug_str	00000000 
0000afa3 l       .debug_str	00000000 
0000afb5 l       .debug_str	00000000 
0000b021 l       .debug_str	00000000 
0000b030 l       .debug_str	00000000 
0000b098 l       .debug_str	00000000 
0000b0a2 l       .debug_str	00000000 
0000b116 l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
0000b121 l       .debug_str	00000000 
0000b199 l       .debug_str	00000000 
0000b1b2 l       .debug_str	00000000 
0000b22a l       .debug_str	00000000 
0000b2c0 l       .debug_str	00000000 
0000b2dc l       .debug_str	00000000 
0000b372 l       .debug_str	00000000 
0000b408 l       .debug_str	00000000 
0000b49e l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0000b513 l       .debug_str	00000000 
0000b587 l       .debug_str	00000000 
0000b600 l       .debug_str	00000000 
0000b67f l       .debug_str	00000000 
0000b690 l       .debug_str	00000000 
0000b710 l       .debug_str	00000000 
0000b772 l       .debug_str	00000000 
0000cd19 l       .debug_str	00000000 
0000b7c3 l       .debug_str	00000000 
0000b7e5 l       .debug_str	00000000 
0000b812 l       .debug_str	00000000 
0000b841 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
0000b88a l       .debug_str	00000000 
0000b8b3 l       .debug_str	00000000 
0000b8e5 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0000b935 l       .debug_str	00000000 
0000b97b l       .debug_str	00000000 
0000b98e l       .debug_str	00000000 
0000b9e2 l       .debug_str	00000000 
0000ba54 l       .debug_str	00000000 
0000bac6 l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb87 l       .debug_str	00000000 
0000bbb5 l       .debug_str	00000000 
0000bbc0 l       .debug_str	00000000 
0000bc1a l       .debug_str	00000000 
0000bc92 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000bd5f l       .debug_str	00000000 
0000bd94 l       .debug_str	00000000 
00005fa5 l       .debug_str	00000000 
0000bdbf l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0000bdee l       .debug_str	00000000 
0000be1e l       .debug_str	00000000 
0000be36 l       .debug_str	00000000 
0000be67 l       .debug_str	00000000 
0000be99 l       .debug_str	00000000 
0000bed8 l       .debug_str	00000000 
0000beeb l       .debug_str	00000000 
0000bf23 l       .debug_str	00000000 
0000bf2f l       .debug_str	00000000 
0000bf5f l       .debug_str	00000000 
0000bf90 l       .debug_str	00000000 
0000bf96 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0000bff4 l       .debug_str	00000000 
0000c027 l       .debug_str	00000000 
0000c041 l       .debug_str	00000000 
0000c075 l       .debug_str	00000000 
0000c0a8 l       .debug_str	00000000 
000579bf l       .debug_str	00000000 
0000c0f5 l       .debug_str	00000000 
0000c13e l       .debug_str	00000000 
000579a2 l       .debug_str	00000000 
0000c189 l       .debug_str	00000000 
0000c1b1 l       .debug_str	00000000 
0000c1f7 l       .debug_str	00000000 
0000c1fd l       .debug_str	00000000 
0000c22b l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c274 l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
0000c2dc l       .debug_str	00000000 
0000c335 l       .debug_str	00000000 
0000c358 l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
0000c399 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0000c3e2 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c482 l       .debug_str	00000000 
0000c4b5 l       .debug_str	00000000 
0000c4c5 l       .debug_str	00000000 
0000c51b l       .debug_str	00000000 
0000c575 l       .debug_str	00000000 
0000c5c3 l       .debug_str	00000000 
0000c615 l       .debug_str	00000000 
0000c66a l       .debug_str	00000000 
0000c6ba l       .debug_str	00000000 
0000c70e l       .debug_str	00000000 
0000c765 l       .debug_str	00000000 
0000c7bb l       .debug_str	00000000 
0000c812 l       .debug_str	00000000 
0000c85e l       .debug_str	00000000 
0000c8a6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000c8db l       .debug_str	00000000 
0000c907 l       .debug_str	00000000 
0000c923 l       .debug_str	00000000 
0000c930 l       .debug_str	00000000 
0000c93e l       .debug_str	00000000 
0000c943 l       .debug_str	00000000 
0000c94a l       .debug_str	00000000 
0000c961 l       .debug_str	00000000 
0000c977 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000c987 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
0000c9aa l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
0000c9cb l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
0000ca25 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000ca46 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0000ca4b l       .debug_str	00000000 
00005e26 l       .debug_str	00000000 
0000ca5f l       .debug_str	00000000 
0000ca73 l       .debug_str	00000000 
0000ca7c l       .debug_str	00000000 
0000ca87 l       .debug_str	00000000 
0000ca99 l       .debug_str	00000000 
0000caad l       .debug_str	00000000 
0000cabe l       .debug_str	00000000 
0000cad8 l       .debug_str	00000000 
0000cb08 l       .debug_str	00000000 
0000cb23 l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
0000cb43 l       .debug_str	00000000 
0000cb62 l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
0000cb85 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000cb8b l       .debug_str	00000000 
0000cbac l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
0000cbb4 l       .debug_str	00000000 
000597e3 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
0005a252 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
0000cbc5 l       .debug_str	00000000 
0000cbe4 l       .debug_str	00000000 
0000cbee l       .debug_str	00000000 
0000cbf9 l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
0000cc03 l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc34 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0005a0fd l       .debug_str	00000000 
00035201 l       .debug_str	00000000 
0000cca6 l       .debug_str	00000000 
000077f5 l       .debug_str	00000000 
0000ccb8 l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0000cccc l       .debug_str	00000000 
0000cce2 l       .debug_str	00000000 
0000ccf2 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cd04 l       .debug_str	00000000 
0000ccfe l       .debug_str	00000000 
0000cd13 l       .debug_str	00000000 
0000cd2a l       .debug_str	00000000 
0000cd29 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
0000cd64 l       .debug_str	00000000 
0000cd6f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000075a3 l       .debug_str	00000000 
000075f5 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0000763c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00007643 l       .debug_str	00000000 
00008a38 l       .debug_str	00000000 
0000cac3 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0000764c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0000c1f8 l       .debug_str	00000000 
00007653 l       .debug_str	00000000 
00007676 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
0000768d l       .debug_str	00000000 
000076af l       .debug_str	00000000 
000076c4 l       .debug_str	00000000 
000076f6 l       .debug_str	00000000 
00007706 l       .debug_str	00000000 
00007733 l       .debug_str	00000000 
00007744 l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007784 l       .debug_str	00000000 
0000ca69 l       .debug_str	00000000 
0000ccf7 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
000077b7 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
0000d42e l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
000077de l       .debug_str	00000000 
0000caa4 l       .debug_str	00000000 
0000ca9e l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000caec l       .debug_str	00000000 
0000cadd l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
0000cb28 l       .debug_str	00000000 
000077e5 l       .debug_str	00000000 
000077ee l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
0000ca92 l       .debug_str	00000000 
0000ca8c l       .debug_str	00000000 
0000cab2 l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00031886 l       .debug_str	00000000 
0005cada l       .debug_str	00000000 
000077fa l       .debug_str	00000000 
00007804 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ee62 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0000ee38 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0000ed5e l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
0000edfa l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0000ee8c l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0000ee9c l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0000ee1c l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0000ee28 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0000f050 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0000eeb6 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0000eede l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20006a4c l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000e8 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0000ed54 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001f130 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0000eeac l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
0000ed4a l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0000eae4 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0000eb1c l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0000eb32 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0000eb42 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
0000ebe8 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0000f076 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0000f120 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0000f062 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0000ecae l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000cecb l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f30e l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dcc0 l       .debug_str	00000000 
0000cd91 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000cdae l       .debug_str	00000000 
0000ce33 l       .debug_str	00000000 
0000ce49 l       .debug_str	00000000 
0005ab09 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0000ce98 l       .debug_str	00000000 
0000cec6 l       .debug_str	00000000 
0000ced0 l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
0000cf02 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000cf2a l       .debug_str	00000000 
0005f055 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000cf57 l       .debug_str	00000000 
0000cf83 l       .debug_str	00000000 
0000cf8b l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000cfc6 l       .debug_str	00000000 
0000cff3 l       .debug_str	00000000 
0000cffc l       .debug_str	00000000 
0000d032 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
0000ceca l       .debug_str	00000000 
00057a28 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000d06d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000e795 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000ec86 l       .debug_str	00000000 
0000ecc6 l       .debug_str	00000000 
0000ed14 l       .debug_str	00000000 
0000ed54 l       .debug_str	00000000 
0000ed7b l       .debug_str	00000000 
0000edbb l       .debug_str	00000000 
0000edc9 l       .debug_str	00000000 
0000ee38 l       .debug_str	00000000 
0000ee63 l       .debug_str	00000000 
0000ae8b l       .debug_str	00000000 
0000eed3 l       .debug_str	00000000 
0000ef43 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000ef6f l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7b2 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
0000ebeb l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000ec3a l       .debug_str	00000000 
0000ec79 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
0000f153 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f30e l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0000f0c8 l       .debug_str	00000000 
0000f12b l       .debug_str	00000000 
0000f1d1 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
0000f261 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
0000f2f7 l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ef91 l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0000f029 l       .debug_str	00000000 
0000f0be l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0000f374 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000f323 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
0001005b l       .debug_str	00000000 
00010088 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
000100df l       .debug_str	00000000 
000100f5 l       .debug_str	00000000 
0001015d l       .debug_str	00000000 
000101d5 l       .debug_str	00000000 
00010202 l       .debug_str	00000000 
0001021a l       .debug_str	00000000 
00010284 l       .debug_str	00000000 
0001028c l       .debug_str	00000000 
00010292 l       .debug_str	00000000 
0001029c l       .debug_str	00000000 
00010316 l       .debug_str	00000000 
00010382 l       .debug_str	00000000 
000103fb l       .debug_str	00000000 
00010474 l       .debug_str	00000000 
000104df l       .debug_str	00000000 
0001054e l       .debug_str	00000000 
00010555 l       .debug_str	00000000 
00010560 l       .debug_str	00000000 
00010588 l       .debug_str	00000000 
000105fd l       .debug_str	00000000 
0001067a l       .debug_str	00000000 
00010579 l       .debug_str	00000000 
00010686 l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
000106fd l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
00010766 l       .debug_str	00000000 
000107e4 l       .debug_str	00000000 
00010854 l       .debug_str	00000000 
000108ce l       .debug_str	00000000 
000108e8 l       .debug_str	00000000 
00010954 l       .debug_str	00000000 
0001095d l       .debug_str	00000000 
00010969 l       .debug_str	00000000 
000109df l       .debug_str	00000000 
00010a55 l       .debug_str	00000000 
00010acb l       .debug_str	00000000 
00010b33 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00010ba2 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00010c0f l       .debug_str	00000000 
00010c84 l       .debug_str	00000000 
00010c99 l       .debug_str	00000000 
00010d00 l       .debug_str	00000000 
00010d09 l       .debug_str	00000000 
00010d14 l       .debug_str	00000000 
00010d1b l       .debug_str	00000000 
00059991 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00010d50 l       .debug_str	00000000 
000593ca l       .debug_str	00000000 
00010d8a l       .debug_str	00000000 
00010dd2 l       .debug_str	00000000 
00059271 l       .debug_str	00000000 
0005e708 l       .debug_str	00000000 
00010e05 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00010e12 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
00010e33 l       .debug_str	00000000 
00010e38 l       .debug_str	00000000 
00010e3d l       .debug_str	00000000 
00010e42 l       .debug_str	00000000 
00010e47 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00010e57 l       .debug_str	00000000 
00010e62 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f396 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
0000f40a l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000f416 l       .debug_str	00000000 
0000f43c l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000f448 l       .debug_str	00000000 
0000f46f l       .debug_str	00000000 
0000f47a l       .debug_str	00000000 
0000f485 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000f53f l       .debug_str	00000000 
0000f496 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000f51d l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000f524 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000f553 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f5b0 l       .debug_str	00000000 
0000f615 l       .debug_str	00000000 
0000f61d l       .debug_str	00000000 
0000f63f l       .debug_str	00000000 
0000f626 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f67d l       .debug_str	00000000 
0000f6f5 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
0000f76c l       .debug_str	00000000 
0000f7d5 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000f84d l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0000f8b7 l       .debug_str	00000000 
0000f930 l       .debug_str	00000000 
0005e706 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0000f935 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
0000f95b l       .debug_str	00000000 
0000f942 l       .debug_str	00000000 
0000f93d l       .debug_str	00000000 
0000f966 l       .debug_str	00000000 
0000f97f l       .debug_str	00000000 
0000f9ea l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
0000fa5a l       .debug_str	00000000 
0000fa6a l       .debug_str	00000000 
0000fae2 l       .debug_str	00000000 
00058f21 l       .debug_str	00000000 
00058c7b l       .debug_str	00000000 
0000faec l       .debug_str	00000000 
0000faf3 l       .debug_str	00000000 
0000fb16 l       .debug_str	00000000 
0000fafd l       .debug_str	00000000 
0000faf8 l       .debug_str	00000000 
0000fb20 l       .debug_str	00000000 
0000fb38 l       .debug_str	00000000 
0000fba2 l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000fc17 l       .debug_str	00000000 
0000fc7e l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe55 l       .debug_str	00000000 
0000fec2 l       .debug_str	00000000 
0000ff3f l       .debug_str	00000000 
0000ff47 l       .debug_str	00000000 
000101f3 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
0000ff6e l       .debug_str	00000000 
0000ffdd l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000137fd l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
00014914 l       .debug_str	00000000 
00014944 l       .debug_str	00000000 
000149a7 l       .debug_str	00000000 
000149d7 l       .debug_str	00000000 
00014a02 l       .debug_str	00000000 
00014c08 l       .debug_str	00000000 
00014c12 l       .debug_str	00000000 
00014c6b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
0001456d l       .debug_str	00000000 
0001459d l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
000147ad l       .debug_str	00000000 
000147dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0001507a l       .debug_str	00000000 
00015083 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00014c8c l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00014cc3 l       .debug_str	00000000 
00014d16 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00014d2a l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00014d7e l       .debug_str	00000000 
00014dc5 l       .debug_str	00000000 
00014dce l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
00014e23 l       .debug_str	00000000 
00014e9f l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
00014ec9 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00014f74 l       .debug_str	00000000 
00014ffa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00015008 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00015072 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005adec l       .debug_str	00000000 
00015296 l       .debug_str	00000000 
000579a2 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0005f41a l       .debug_str	00000000 
0005f419 l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0001508a l       .debug_str	00000000 
000578c5 l       .debug_str	00000000 
0001508e l       .debug_str	00000000 
000150bf l       .debug_str	00000000 
000150c5 l       .debug_str	00000000 
00015106 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001511b l       .debug_str	00000000 
00015152 l       .debug_str	00000000 
0001515d l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
0001518f l       .debug_str	00000000 
00057a09 l       .debug_str	00000000 
000151c3 l       .debug_str	00000000 
000579f8 l       .debug_str	00000000 
000151f7 l       .debug_str	00000000 
000579b0 l       .debug_str	00000000 
0001522e l       .debug_str	00000000 
00057a42 l       .debug_str	00000000 
00015266 l       .debug_str	00000000 
00057873 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000f463 l       .debug_str	00000000 
000155d0 l       .debug_str	00000000 
000155f7 l       .debug_str	00000000 
00015602 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015633 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000152c7 l       .debug_str	00000000 
0000638c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000152f0 l       .debug_str	00000000 
00015302 l       .debug_str	00000000 
00015313 l       .debug_str	00000000 
0001535f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0001536b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
0001536f l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7b2 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0005872e l       .debug_str	00000000 
0001537c l       .debug_str	00000000 
00015434 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00015498 l       .debug_str	00000000 
000154ce l       .debug_str	00000000 
000154e7 l       .debug_str	00000000 
00015521 l       .debug_str	00000000 
0001553e l       .debug_str	00000000 
00015579 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00015596 l       .debug_str	00000000 
000155a0 l       .debug_str	00000000 
000155c6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005d45a l       .debug_str	00000000 
000156b0 l       .debug_str	00000000 
000156ec l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00015a53 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00015a59 l       .debug_str	00000000 
00015a70 l       .debug_str	00000000 
0005b799 l       .debug_str	00000000 
0005968b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00015733 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0001575e l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0001578a l       .debug_str	00000000 
0005f12d l       .debug_str	00000000 
000157fb l       .debug_str	00000000 
00015827 l       .debug_str	00000000 
00015854 l       .debug_str	00000000 
000158c0 l       .debug_str	00000000 
000158c8 l       .debug_str	00000000 
00015935 l       .debug_str	00000000 
0001593e l       .debug_str	00000000 
0001596b l       .debug_str	00000000 
000159e5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000159ee l       .debug_str	00000000 
00015a46 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00015a2c l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f410 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000e7b2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
00015e27 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000cbe4 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0000cbee l       .debug_str	00000000 
00015633 l       .debug_str	00000000 
0000cbf9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00015a88 l       .debug_str	00000000 
00015ad0 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00015aef l       .debug_str	00000000 
00015b2a l       .debug_str	00000000 
00015b4f l       .debug_str	00000000 
00015b76 l       .debug_str	00000000 
00015bd6 l       .debug_str	00000000 
00015bdf l       .debug_str	00000000 
00015c4a l       .debug_str	00000000 
00015c5a l       .debug_str	00000000 
00015cc6 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015cd9 l       .debug_str	00000000 
00015d3c l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00015dbc l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00016143 l       .debug_str	00000000 
00016174 l       .debug_str	00000000 
000163fb l       .debug_str	00000000 
0001618e l       .debug_str	00000000 
000161bf l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
000161ef l       .debug_str	00000000 
00016220 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001622a l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00016230 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00016236 l       .debug_str	00000000 
00016288 l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
000162db l       .debug_str	00000000 
00016344 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00016397 l       .debug_str	00000000 
000163fa l       .debug_str	00000000 
00016426 l       .debug_str	00000000 
0001649f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dcc0 l       .debug_str	00000000 
0000cd91 l       .debug_str	00000000 
0000110c l       .debug_str	00000000 
00015eba l       .debug_str	00000000 
0001641c l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00015ec9 l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
00015f11 l       .debug_str	00000000 
00015f59 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00015f61 l       .debug_str	00000000 
00015bd6 l       .debug_str	00000000 
00015fa9 l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00015ff1 l       .debug_str	00000000 
00016039 l       .debug_str	00000000 
00016042 l       .debug_str	00000000 
00016073 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
0001607c l       .debug_str	00000000 
000160ad l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
000160b7 l       .debug_str	00000000 
000160e8 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00016108 l       .debug_str	00000000 
00016139 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0001662a l       .debug_str	00000000 
00016537 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
0001658c l       .debug_str	00000000 
000165d3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
000165df l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000164f2 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
000101d4 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00017a16 l       .debug_str	00000000 
00016c17 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00016c5a l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
00016cb6 l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
00016d15 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00016d67 l       .debug_str	00000000 
00016dbc l       .debug_str	00000000 
00016e12 l       .debug_str	00000000 
00016e40 l       .debug_str	00000000 
00016e4c l       .debug_str	00000000 
00016e7e l       .debug_str	00000000 
00016ea5 l       .debug_str	00000000 
00016ed7 l       .debug_str	00000000 
00016ee7 l       .debug_str	00000000 
00016f1c l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00016f65 l       .debug_str	00000000 
00016f79 l       .debug_str	00000000 
00016fc3 l       .debug_str	00000000 
00016fd4 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00017010 l       .debug_str	00000000 
00057d0d l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0001704e l       .debug_str	00000000 
0001708c l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000170ac l       .debug_str	00000000 
000170d4 l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
00017113 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
00017148 l       .debug_str	00000000 
000171eb l       .debug_str	00000000 
000171f9 l       .debug_str	00000000 
0003ebee l       .debug_str	00000000 
00017291 l       .debug_str	00000000 
0001732b l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000173e3 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
00017457 l       .debug_str	00000000 
000174c9 l       .debug_str	00000000 
000174f3 l       .debug_str	00000000 
00017531 l       .debug_str	00000000 
00017544 l       .debug_str	00000000 
0001758f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00017598 l       .debug_str	00000000 
000175da l       .debug_str	00000000 
000188dd l       .debug_str	00000000 
00017614 l       .debug_str	00000000 
00017659 l       .debug_str	00000000 
00017675 l       .debug_str	00000000 
000176b8 l       .debug_str	00000000 
000176ce l       .debug_str	00000000 
00017733 l       .debug_str	00000000 
00017798 l       .debug_str	00000000 
000177d3 l       .debug_str	00000000 
000177e0 l       .debug_str	00000000 
00016b0a l       .debug_str	00000000 
00017813 l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
00017859 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
0001789f l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
000178e6 l       .debug_str	00000000 
0001792f l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
000179b2 l       .debug_str	00000000 
000179f7 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00017a4f l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
00017a67 l       .debug_str	00000000 
00017aa2 l       .debug_str	00000000 
00017ac6 l       .debug_str	00000000 
00017aec l       .debug_str	00000000 
00017b27 l       .debug_str	00000000 
00017b4a l       .debug_str	00000000 
00017b6f l       .debug_str	00000000 
00017bac l       .debug_str	00000000 
00017bc3 l       .debug_str	00000000 
00017c00 l       .debug_str	00000000 
00017c17 l       .debug_str	00000000 
00017c68 l       .debug_str	00000000 
00017c86 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00017ce1 l       .debug_str	00000000 
00017d44 l       .debug_str	00000000 
00017d86 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
00017df4 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00017e61 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
00017ec3 l       .debug_str	00000000 
00017ed1 l       .debug_str	00000000 
00017f3c l       .debug_str	00000000 
00017f56 l       .debug_str	00000000 
00017f6c l       .debug_str	00000000 
00017fd7 l       .debug_str	00000000 
00017fe7 l       .debug_str	00000000 
00018053 l       .debug_str	00000000 
00018065 l       .debug_str	00000000 
000180d1 l       .debug_str	00000000 
000180e2 l       .debug_str	00000000 
00018149 l       .debug_str	00000000 
00018181 l       .debug_str	00000000 
000181eb l       .debug_str	00000000 
00018273 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
000182f0 l       .debug_str	00000000 
00018372 l       .debug_str	00000000 
00018389 l       .debug_str	00000000 
000183c7 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
000183da l       .debug_str	00000000 
000183e9 l       .debug_str	00000000 
00018427 l       .debug_str	00000000 
0001843a l       .debug_str	00000000 
00018466 l       .debug_str	00000000 
0001846f l       .debug_str	00000000 
0001849b l       .debug_str	00000000 
000184a4 l       .debug_str	00000000 
00018504 l       .debug_str	00000000 
00031747 l       .debug_str	00000000 
00018555 l       .debug_str	00000000 
000185a6 l       .debug_str	00000000 
00018603 l       .debug_str	00000000 
00018661 l       .debug_str	00000000 
0001894d l       .debug_str	00000000 
000186b2 l       .debug_str	00000000 
000186db l       .debug_str	00000000 
0001873e l       .debug_str	00000000 
0001874f l       .debug_str	00000000 
0001875c l       .debug_str	00000000 
00018771 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000187eb l       .debug_str	00000000 
0001884e l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
00018872 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
000579e1 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00018893 l       .debug_str	00000000 
0000db92 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00018897 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00016867 l       .debug_str	00000000 
000188a9 l       .debug_str	00000000 
000188ae l       .debug_str	00000000 
000188b3 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
000188d8 l       .debug_str	00000000 
00018914 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0003baad l       .debug_str	00000000 
0001892a l       .debug_str	00000000 
00018933 l       .debug_str	00000000 
000350b2 l       .debug_str	00000000 
00058a7d l       .debug_str	00000000 
0004acc4 l       .debug_str	00000000 
0001893c l       .debug_str	00000000 
00018940 l       .debug_str	00000000 
00035378 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00018962 l       .debug_str	00000000 
0001895d l       .debug_str	00000000 
000587fe l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
00036e4f l       .debug_str	00000000 
0001896f l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00039909 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001663a l       .debug_str	00000000 
00016694 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000319b1 l       .debug_str	00000000 
000166ee l       .debug_str	00000000 
00018884 l       .debug_str	00000000 
00018877 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000166f6 l       .debug_str	00000000 
00016703 l       .debug_str	00000000 
0001670c l       .debug_str	00000000 
000578fb l       .debug_str	00000000 
00031d7d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00018924 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005aa26 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
000188f8 l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001671c l       .debug_str	00000000 
0001675a l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
0005deab l       .debug_str	00000000 
00016769 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
00016792 l       .debug_str	00000000 
0000794c l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
000167d1 l       .debug_str	00000000 
000188c2 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000167df l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00016834 l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00057a96 l       .debug_str	00000000 
0001684f l       .debug_str	00000000 
00016853 l       .debug_str	00000000 
0001685e l       .debug_str	00000000 
0001686d l       .debug_str	00000000 
000168b5 l       .debug_str	00000000 
000168d5 l       .debug_str	00000000 
00037b9b l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
00016920 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0001696b l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000169ea l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
00016a2a l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
00016a72 l       .debug_str	00000000 
00016aa2 l       .debug_str	00000000 
00016acd l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
00016b1d l       .debug_str	00000000 
00016b29 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
00016b7a l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
00016bcc l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
000189c7 l       .debug_str	00000000 
00018a10 l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
00018cac l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018cb9 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00018cbf l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
00018cff l       .debug_str	00000000 
00018d6e l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
00018a84 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00018a91 l       .debug_str	00000000 
00018ad7 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
00018afb l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
00018afe l       .debug_str	00000000 
00018b3e l       .debug_str	00000000 
00018b4d l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00018b95 l       .debug_str	00000000 
00018bdc l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018bea l       .debug_str	00000000 
00018c2e l       .debug_str	00000000 
00018c39 l       .debug_str	00000000 
00018c42 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0005a5d3 l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018c53 l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
00018c6f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018c72 l       .debug_str	00000000 
00018c89 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001d567 l       .debug_str	00000000 
00018c9f l       .debug_str	00000000 
00018ca5 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
0005db53 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
200000f0 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20006a6c l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
00018afb l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
0001ac0f l       .debug_str	00000000 
00059d79 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0001ac5f l       .debug_str	00000000 
0001ac6b l       .debug_str	00000000 
0001ad07 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0001a630 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0001adaa l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
00018d75 l       .debug_str	00000000 
00018d7b l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
00018d80 l       .debug_str	00000000 
00018d87 l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
00019dca l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001ac8f l       .debug_str	00000000 
00019dd6 l       .debug_str	00000000 
00019ddc l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
0001a62a l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
0001adce l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0001a634 l       .debug_str	00000000 
0001a697 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
0001a767 l       .debug_str	00000000 
0001a7aa l       .debug_str	00000000 
0001a84f l       .debug_str	00000000 
0001a88d l       .debug_str	00000000 
0001a901 l       .debug_str	00000000 
0001a941 l       .debug_str	00000000 
0001a9e3 l       .debug_str	00000000 
0001aa71 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001cedb l       .debug_str	00000000 
0001cef7 l       .debug_str	00000000 
0001aae2 l       .debug_str	00000000 
0001ab72 l       .debug_str	00000000 
0001d5ee l       .debug_str	00000000 
0001d590 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
0001f510 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0001b87b l       .debug_str	00000000 
0001b7df l       .debug_str	00000000 
0001b825 l       .debug_str	00000000 
0001b8c4 l       .debug_str	00000000 
0001b90a l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00000e74 l       .debug_str	00000000 
0001b944 l       .debug_str	00000000 
0001b98b l       .debug_str	00000000 
0001b9d9 l       .debug_str	00000000 
0001ba25 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00018cac l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
0005db53 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018cb9 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00018cbf l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
00018cff l       .debug_str	00000000 
0001ba65 l       .debug_str	00000000 
0001bb11 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bbe3 l       .debug_str	00000000 
0001ac0f l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
0001bbfc l       .debug_str	00000000 
0003eb1c l       .debug_str	00000000 
00007471 l       .debug_str	00000000 
0003b6cc l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
000244e5 l       .debug_str	00000000 
0001bbff l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0001bc06 l       .debug_str	00000000 
0005b3bc l       .debug_str	00000000 
00018aeb l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
0005a5d3 l       .debug_str	00000000 
00015a70 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001bc12 l       .debug_str	00000000 
0001bc1e l       .debug_str	00000000 
0001bc2a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0001bc37 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ac5f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001ae7d l       .debug_str	00000000 
0001ae86 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001bbf0 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
0001afb2 l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
00018afb l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001afbe l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001afc9 l       .debug_str	00000000 
0001b005 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001b024 l       .debug_str	00000000 
0001b072 l       .debug_str	00000000 
0001b0b3 l       .debug_str	00000000 
0001b11f l       .debug_str	00000000 
0001b161 l       .debug_str	00000000 
0001b1cd l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001b239 l       .debug_str	00000000 
0001b287 l       .debug_str	00000000 
0001b407 l       .debug_str	00000000 
0001b455 l       .debug_str	00000000 
0001b496 l       .debug_str	00000000 
0001b4e4 l       .debug_str	00000000 
0001b525 l       .debug_str	00000000 
0001b575 l       .debug_str	00000000 
0001b6f7 l       .debug_str	00000000 
0001b748 l       .debug_str	00000000 
0001b78c l       .debug_str	00000000 
0001f690 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0001afb2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bd16 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001bcae l       .debug_str	00000000 
0001bcea l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0001bd80 l       .debug_str	00000000 
00003a65 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001bdbe l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001bd3c l       .debug_str	00000000 
00011d4a l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0001c444 l       .debug_str	00000000 
0001ca68 l       .debug_str	00000000 
0001cbbb l       .debug_str	00000000 
0001cbeb l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
00018c6f l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018c72 l       .debug_str	00000000 
00018c89 l       .debug_str	00000000 
0001d567 l       .debug_str	00000000 
0001d54a l       .debug_str	00000000 
0001cd12 l       .debug_str	00000000 
0001cd42 l       .debug_str	00000000 
0001d5ee l       .debug_str	00000000 
0001d590 l       .debug_str	00000000 
0001cd84 l       .debug_str	00000000 
0001cdb4 l       .debug_str	00000000 
0001ce03 l       .debug_str	00000000 
0001ce33 l       .debug_str	00000000 
0001ce45 l       .debug_str	00000000 
0001ce75 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0001ceb7 l       .debug_str	00000000 
0001cee4 l       .debug_str	00000000 
0001cf27 l       .debug_str	00000000 
0001cf3d l       .debug_str	00000000 
0001d081 l       .debug_str	00000000 
0001d11d l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0001d200 l       .debug_str	00000000 
0001d2df l       .debug_str	00000000 
0001d428 l       .debug_str	00000000 
0001d545 l       .debug_str	00000000 
0001d57d l       .debug_str	00000000 
0001d5c2 l       .debug_str	00000000 
0001d5ca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
0001bdc9 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001bdee l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
0001bdf5 l       .debug_str	00000000 
0001be30 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001be67 l       .debug_str	00000000 
0001be97 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
00018d75 l       .debug_str	00000000 
00018d80 l       .debug_str	00000000 
00018d87 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
0001cedb l       .debug_str	00000000 
0001beaa l       .debug_str	00000000 
0001beda l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001cef7 l       .debug_str	00000000 
0001bf11 l       .debug_str	00000000 
0001bf41 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
0001bf8e l       .debug_str	00000000 
0001bfbe l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
0001bfde l       .debug_str	00000000 
0001c00e l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
00019dca l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001ac8f l       .debug_str	00000000 
0001c15c l       .debug_str	00000000 
0001c18c l       .debug_str	00000000 
00018d7b l       .debug_str	00000000 
00019dd6 l       .debug_str	00000000 
00019ddc l       .debug_str	00000000 
0001a62a l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
0001adce l       .debug_str	00000000 
0001c232 l       .debug_str	00000000 
0001c262 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c33c l       .debug_str	00000000 
0001c36c l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00026d74 l       .debug_str	00000000 
0001c91f l       .debug_str	00000000 
0001c94f l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
0001ca38 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00058593 l       .debug_str	00000000 
0001d5f9 l       .debug_str	00000000 
0001d62a l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0001d633 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0001dbfe l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0001da7a l       .debug_str	00000000 
0001db37 l       .debug_str	00000000 
0001db72 l       .debug_str	00000000 
0001dbcb l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001dcb6 l       .debug_str	00000000 
0001dd1a l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
00019dd0 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
0001dd8d l       .debug_str	00000000 
00024e1d l       .debug_str	00000000 
00057c0c l       .debug_str	00000000 
0005f52c l       .debug_str	00000000 
0001ddc7 l       .debug_str	00000000 
0001ddca l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005e30 l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
0001ddd7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
0001d685 l       .debug_str	00000000 
0001d722 l       .debug_str	00000000 
0001d75b l       .debug_str	00000000 
0001d7fa l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
0001d833 l       .debug_str	00000000 
0001d8d0 l       .debug_str	00000000 
0001d904 l       .debug_str	00000000 
0001d9a7 l       .debug_str	00000000 
0001da46 l       .debug_str	00000000 
0001f7f0 l     O .text	0000001c str.0
0001f820 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0001ddd7 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0001de96 l       .debug_str	00000000 
0001df0b l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
0001df42 l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001de27 l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
0001eddf l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0001e0a5 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bd16 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001dfd1 l       .debug_str	00000000 
0001e092 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00024de5 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bbe3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001ae7d l       .debug_str	00000000 
0001ae86 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001bbf0 l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e193 l       .debug_str	00000000 
0001e092 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0001e23a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001c1b l       .debug_str	00000000 
0001e331 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0001e2e1 l       .debug_str	00000000 
0001e31a l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000d9da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0001e36a l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1dj5xwzbw170pcth
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e449 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1h94gy75t1lfyk2m
00000f66 l       .debug_str	00000000 
0001e4b8 l       .debug_str	00000000 
0001e4f8 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00010d8a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 21g9i1epq5ht4p79
0000c9cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0000cca6 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e53f l       .debug_str	00000000 
000066e5 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000cab2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 22m4u7gnp4iz6z75
0000cb8b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007804 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
00007814 l       .debug_str	00000000 
0000781c l       .debug_str	00000000 
00007823 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
0001e5a8 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jghko95f1fcw2kw
0001e7a8 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001e627 l       .debug_str	00000000 
00006644 l       .debug_str	00000000 
0001e66c l       .debug_str	00000000 
0001e6b1 l       .debug_str	00000000 
0001e6be l       .debug_str	00000000 
0001e703 l       .debug_str	00000000 
0001e710 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
0001e755 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001e79d l       .debug_str	00000000 
0001662a l       .debug_str	00000000 
0001e7f0 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001e836 l       .debug_str	00000000 
0001e87c l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e5e3 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2t4h7x9pofzwxo58
0001e957 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0001e996 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
0001ea09 l       .debug_str	00000000 
0001ea48 l       .debug_str	00000000 
0001eb26 l       .debug_str	00000000 
0001ea85 l       .debug_str	00000000 
0001eae8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001eb0f l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001e8c2 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31djkeejljxsexfi
00005fcc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001eb30 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001eb93 l       .debug_str	00000000 
0001eb87 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0001eb9a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44vzahdamekpfupi
0000730b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001eba5 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 48kp7dqlhcnw98ww
000149d7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
00014c6b l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ebf7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4jc7ajwyicjft5df
00006c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ec27 l       .debug_str	00000000 
0001ec4d l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xzrg48g93icjbc1
0005a0fd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
0001ec56 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001ec69 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001ecf5 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0001ecfe l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0001ed0e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00020146 l       .debug_str	00000000 
0001f23a l       .debug_str	00000000 
0001f264 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0001f2b2 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
0001f2ff l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001f367 l       .debug_str	00000000 
0001f3ba l       .debug_str	00000000 
0001f3c2 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0001f417 l       .debug_str	00000000 
000064a4 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
0001f4b4 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001f519 l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0001f54a l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0001f57c l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
0001f5aa l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
0001f5d0 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0001f617 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
0001f662 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001f668 l       .debug_str	00000000 
0001f6f4 l       .debug_str	00000000 
0001f70f l       .debug_str	00000000 
0001f73f l       .debug_str	00000000 
0001f774 l       .debug_str	00000000 
0001f7a4 l       .debug_str	00000000 
0001f7ba l       .debug_str	00000000 
000067da l       .debug_str	00000000 
0001f7f0 l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
0001f82a l       .debug_str	00000000 
0001f866 l       .debug_str	00000000 
000068b0 l       .debug_str	00000000 
0001f88c l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
0001f8b3 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
0001f901 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
0001f952 l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
0001f9ef l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
0001fa32 l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
0001fa8e l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
0001faed l       .debug_str	00000000 
0001fb43 l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0001fbd8 l       .debug_str	00000000 
0001fc72 l       .debug_str	00000000 
0001fc83 l       .debug_str	00000000 
0001fca8 l       .debug_str	00000000 
0001fd51 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0001fd62 l       .debug_str	00000000 
0001fdea l       .debug_str	00000000 
0001fda1 l       .debug_str	00000000 
0001fde5 l       .debug_str	00000000 
0001fe2f l       .debug_str	00000000 
0001fe70 l       .debug_str	00000000 
0001fe95 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
0001ff2b l       .debug_str	00000000 
0001ff7e l       .debug_str	00000000 
0001ffdf l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
0002008d l       .debug_str	00000000 
000200d8 l       .debug_str	00000000 
000200e5 l       .debug_str	00000000 
000201bf l       .debug_str	00000000 
000201b7 l       .debug_str	00000000 
000201c7 l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
000201e3 l       .debug_str	00000000 
00020258 l       .debug_str	00000000 
00020283 l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
000202fc l       .debug_str	00000000 
00020322 l       .debug_str	00000000 
0002035b l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00020373 l       .debug_str	00000000 
000203ac l       .debug_str	00000000 
000203e4 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0002041d l       .debug_str	00000000 
00020458 l       .debug_str	00000000 
0002049c l       .debug_str	00000000 
000204e2 l       .debug_str	00000000 
0002051e l       .debug_str	00000000 
00020546 l       .debug_str	00000000 
00020582 l       .debug_str	00000000 
000205a6 l       .debug_str	00000000 
00020603 l       .debug_str	00000000 
00020617 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00020668 l       .debug_str	00000000 
000206b9 l       .debug_str	00000000 
000206d0 l       .debug_str	00000000 
00017c68 l       .debug_str	00000000 
00020721 l       .debug_str	00000000 
00006dd5 l       .debug_str	00000000 
00020772 l       .debug_str	00000000 
00006e3f l       .debug_str	00000000 
000207ca l       .debug_str	00000000 
0002082d l       .debug_str	00000000 
00020858 l       .debug_str	00000000 
000208bb l       .debug_str	00000000 
00020930 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
00020994 l       .debug_str	00000000 
000209ff l       .debug_str	00000000 
00020a0e l       .debug_str	00000000 
00020a7a l       .debug_str	00000000 
00020aac l       .debug_str	00000000 
00020ad2 l       .debug_str	00000000 
00020b41 l       .debug_str	00000000 
00020b61 l       .debug_str	00000000 
00020bd1 l       .debug_str	00000000 
00020bf2 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
00020c66 l       .debug_str	00000000 
00020ce6 l       .debug_str	00000000 
00020d2c l       .debug_str	00000000 
00020d55 l       .debug_str	00000000 
00020d5c l       .debug_str	00000000 
00020d94 l       .debug_str	00000000 
00020dd3 l       .debug_str	00000000 
00020dda l       .debug_str	00000000 
00020e53 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
00020eea l       .debug_str	00000000 
00020f68 l       .debug_str	00000000 
00020f72 l       .debug_str	00000000 
00021000 l       .debug_str	00000000 
000210ac l       .debug_str	00000000 
000210f3 l       .debug_str	00000000 
00021100 l       .debug_str	00000000 
0002114d l       .debug_str	00000000 
00021160 l       .debug_str	00000000 
000211b2 l       .debug_str	00000000 
00021222 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00021282 l       .debug_str	00000000 
00021293 l       .debug_str	00000000 
000212f8 l       .debug_str	00000000 
00021328 l       .debug_str	00000000 
00021331 l       .debug_str	00000000 
0002136d l       .debug_str	00000000 
00021381 l       .debug_str	00000000 
000213bc l       .debug_str	00000000 
00021402 l       .debug_str	00000000 
00021420 l       .debug_str	00000000 
00021450 l       .debug_str	00000000 
00021459 l       .debug_str	00000000 
00021493 l       .debug_str	00000000 
000214a5 l       .debug_str	00000000 
000214d3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000214da l       .debug_str	00000000 
000214e6 l       .debug_str	00000000 
000214f0 l       .debug_str	00000000 
000214fa l       .debug_str	00000000 
0002151d l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00021572 l       .debug_str	00000000 
000215d2 l       .debug_str	00000000 
000215de l       .debug_str	00000000 
0002162e l       .debug_str	00000000 
00021691 l       .debug_str	00000000 
000216f8 l       .debug_str	00000000 
00021767 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e66 l       .debug_str	00000000 
000217f7 l       .debug_str	00000000 
00059cc7 l       .debug_str	00000000 
0004e226 l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00005dbe l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
0002181e l       .debug_str	00000000 
00021849 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00007438 l       .debug_str	00000000 
00021855 l       .debug_str	00000000 
00020f6d l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00021875 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
000218b0 l       .debug_str	00000000 
000218b7 l       .debug_str	00000000 
00035201 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000218f8 l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
00021919 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0002193b l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0001ed8d l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001edda l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001ede4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001edf0 l       .debug_str	00000000 
0002182f l       .debug_str	00000000 
00021823 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001ee01 l       .debug_str	00000000 
0000622a l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
0001ee2a l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000062d0 l       .debug_str	00000000 
000062e4 l       .debug_str	00000000 
0001ee53 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
000218d2 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0001ee9f l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00020314 l       .debug_str	00000000 
00021888 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0002178b l       .debug_str	00000000 
0002171c l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001eea5 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
000202fd l       .debug_str	00000000 
0001eece l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00006e55 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00006e60 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
0001ef02 l       .debug_str	00000000 
0001ef2c l       .debug_str	00000000 
0002288e l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0001ef39 l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00016834 l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
0001ef7b l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0001ef8a l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
00021925 l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0001ef94 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
0001f024 l       .debug_str	00000000 
0001f0b6 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001f0fc l       .debug_str	00000000 
0001f190 l       .debug_str	00000000 
0001f1f2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
000219b5 l       .debug_str	00000000 
000219b3 l       .debug_str	00000000 
00021a06 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021943 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021962 l       .debug_str	00000000 
0000a879 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00022061 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
00005eaa l       .debug_str	00000000 
00021aad l       .debug_str	00000000 
00021ae2 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00021aee l       .debug_str	00000000 
00021b26 l       .debug_str	00000000 
00021b40 l       .debug_str	00000000 
00021b4a l       .debug_str	00000000 
00021b52 l       .debug_str	00000000 
00021b5a l       .debug_str	00000000 
00021b96 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00021ba9 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00021bb1 l       .debug_str	00000000 
00021be9 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00021bf1 l       .debug_str	00000000 
00021c29 l       .debug_str	00000000 
00021c31 l       .debug_str	00000000 
00021c69 l       .debug_str	00000000 
00021c83 l       .debug_str	00000000 
00021c8c l       .debug_str	00000000 
00021cc4 l       .debug_str	00000000 
00021ccd l       .debug_str	00000000 
00021d05 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00021d8d l       .debug_str	00000000 
00021dd5 l       .debug_str	00000000 
00021de0 l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00021e1e l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
00021e47 l       .debug_str	00000000 
00021e6c l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00008647 l       .debug_str	00000000 
00021ecb l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
00021ef3 l       .debug_str	00000000 
00021f24 l       .debug_str	00000000 
00021f30 l       .debug_str	00000000 
00021f8f l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00021fc1 l       .debug_str	00000000 
00022009 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00022016 l       .debug_str	00000000 
00022071 l       .debug_str	00000000 
0002207f l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
00008abb l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
000220c7 l       .debug_str	00000000 
00008b07 l       .debug_str	00000000 
00022102 l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
00016b1d l       .debug_str	00000000 
00022139 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
0002218b l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
000221e0 l       .debug_str	00000000 
00016b0a l       .debug_str	00000000 
00022213 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00022259 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
000222a2 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
00022344 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
000223d0 l       .debug_str	00000000 
00022453 l       .debug_str	00000000 
00022482 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000224cf l       .debug_str	00000000 
000224ff l       .debug_str	00000000 
0002254d l       .debug_str	00000000 
0002257d l       .debug_str	00000000 
000225cb l       .debug_str	00000000 
000225fb l       .debug_str	00000000 
00022649 l       .debug_str	00000000 
0002267a l       .debug_str	00000000 
000226c9 l       .debug_str	00000000 
000226fa l       .debug_str	00000000 
00022749 l       .debug_str	00000000 
00022779 l       .debug_str	00000000 
00022781 l       .debug_str	00000000 
000227b1 l       .debug_str	00000000 
000227b9 l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
0002280c l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00015072 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
00022838 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0002288e l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
0002288d l       .debug_str	00000000 
00022891 l       .debug_str	00000000 
0002289b l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000228a1 l       .debug_str	00000000 
000228a5 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
000228aa l       .debug_str	00000000 
000228a9 l       .debug_str	00000000 
000228ad l       .debug_str	00000000 
000228b1 l       .debug_str	00000000 
000228b6 l       .debug_str	00000000 
000228b5 l       .debug_str	00000000 
000228b9 l       .debug_str	00000000 
000228bd l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021a0e l       .debug_str	00000000 
00021a63 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00013258 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000228c1 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00022946 l       .debug_str	00000000 
000229b3 l       .debug_str	00000000 
00022a25 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00022a83 l       .debug_str	00000000 
0004c805 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000c9cc l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00022aa0 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00022b01 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022b64 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
000230c9 l       .debug_str	00000000 
00023134 l       .debug_str	00000000 
0002317a l       .debug_str	00000000 
000231ec l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000233e3 l       .debug_str	00000000 
00023455 l       .debug_str	00000000 
0002349f l       .debug_str	00000000 
000234e9 l       .debug_str	00000000 
000236e8 l       .debug_str	00000000 
00023724 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
00023769 l       .debug_str	00000000 
000237a6 l       .debug_str	00000000 
00023999 l       .debug_str	00000000 
000239d6 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00023a1c l       .debug_str	00000000 
00023c22 l       .debug_str	00000000 
00023c7b l       .debug_str	00000000 
00023e7d l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
00022bcc l       .debug_str	00000000 
00022dbe l       .debug_str	00000000 
00022e26 l       .debug_str	00000000 
00022e6b l       .debug_str	00000000 
00022ed6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00023ed2 l       .debug_str	00000000 
00023f2e l       .debug_str	00000000 
00023f8b l       .debug_str	00000000 
00023fe8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0000ca81 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00024045 l       .debug_str	00000000 
000240b6 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000240c2 l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
00024133 l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
0002465b l       .debug_str	00000000 
00024600 l       .debug_str	00000000 
00024613 l       .debug_str	00000000 
00024652 l       .debug_str	00000000 
0002466d l       .debug_str	00000000 
000246a5 l       .debug_str	00000000 
000246b9 l       .debug_str	00000000 
000159e5 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005ddf7 l       .debug_str	00000000 
000246e5 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
000246e9 l       .debug_str	00000000 
0005d325 l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
0001005b l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
000100df l       .debug_str	00000000 
00010088 l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
0005c403 l       .debug_str	00000000 
0004aa50 l       .debug_str	00000000 
00016edc l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00059c15 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000246f1 l       .debug_str	00000000 
0005d459 l       .debug_str	00000000 
0005b799 l       .debug_str	00000000 
0005968b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b3bc l       .debug_str	00000000 
00018a84 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
000241a4 l       .debug_str	00000000 
000241d5 l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
000241e1 l       .debug_str	00000000 
00024211 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
0002421e l       .debug_str	00000000 
0002424f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00010d00 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00010c84 l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
00010d09 l       .debug_str	00000000 
00010d14 l       .debug_str	00000000 
00024257 l       .debug_str	00000000 
00024282 l       .debug_str	00000000 
00024293 l       .debug_str	00000000 
000242c8 l       .debug_str	00000000 
00010284 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000ff3f l       .debug_str	00000000 
0000ff47 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
000101f3 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000101d5 l       .debug_str	00000000 
00010202 l       .debug_str	00000000 
0001028c l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
00010292 l       .debug_str	00000000 
000242d7 l       .debug_str	00000000 
0002430a l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0002431a l       .debug_str	00000000 
0002434e l       .debug_str	00000000 
00024357 l       .debug_str	00000000 
00024383 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00024392 l       .debug_str	00000000 
000243c5 l       .debug_str	00000000 
000243d2 l       .debug_str	00000000 
000243de l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002440f l       .debug_str	00000000 
00024444 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00024455 l       .debug_str	00000000 
00024487 l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244d3 l       .debug_str	00000000 
000244ed l       .debug_str	00000000 
00024528 l       .debug_str	00000000 
0002453f l       .debug_str	00000000 
0002457b l       .debug_str	00000000 
00024593 l       .debug_str	00000000 
000245c9 l       .debug_str	00000000 
20006a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20006a78 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
20007704 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013ff0 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000728c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20007304 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
200072a4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20007284 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00014284 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001446e l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
00014a8c l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00014756 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000727c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
200072b4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014bb4 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001fae0 l     O .text	00000021 str.0
0001fb20 l     O .text	0000001c str.1
0001fb70 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00010088 l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000246fc l       .debug_str	00000000 
0002474e l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001005b l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
000100df l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0001bdc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024773 l       .debug_str	00000000 
0002479c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0002482d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000247a9 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000247d2 l       .debug_str	00000000 
00024827 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00024b0e l       .debug_str	00000000 
00024976 l       .debug_str	00000000 
000249b2 l       .debug_str	00000000 
000249ce l       .debug_str	00000000 
00024a0a l       .debug_str	00000000 
00024a40 l       .debug_str	00000000 
00024a7c l       .debug_str	00000000 
00024a87 l       .debug_str	00000000 
00024ac3 l       .debug_str	00000000 
00024ad1 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00024b45 l       .debug_str	00000000 
00024b82 l       .debug_str	00000000 
00024b91 l       .debug_str	00000000 
00024bce l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00024c4e l       .debug_str	00000000 
0001bdc9 l       .debug_str	00000000 
00024c85 l       .debug_str	00000000 
00024cc3 l       .debug_str	00000000 
00024cfa l       .debug_str	00000000 
00024d39 l       .debug_str	00000000 
00024d72 l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00024dd6 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001df42 l       .debug_str	00000000 
00024df1 l       .debug_str	00000000 
00024e0e l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00005eb3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001dd8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024e1d l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
0002484d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0002485a l       .debug_str	00000000 
00024893 l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0002492e l       .debug_str	00000000 
0002496a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005c73b l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
000258fe l       .debug_str	00000000 
00025969 l       .debug_str	00000000 
00025a9a l       .debug_str	00000000 
00025b07 l       .debug_str	00000000 
00025b79 l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
00025c92 l       .debug_str	00000000 
00025d04 l       .debug_str	00000000 
00025e39 l       .debug_str	00000000 
00025eab l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00025f96 l       .debug_str	00000000 
00025fe0 l       .debug_str	00000000 
0002611d l       .debug_str	00000000 
00026158 l       .debug_str	00000000 
00026260 l       .debug_str	00000000 
0002629b l       .debug_str	00000000 
000263ca l       .debug_str	00000000 
00026405 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
000264cf l       .debug_str	00000000 
0002650b l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
000265f6 l       .debug_str	00000000 
00026632 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
0002673b l       .debug_str	00000000 
00026778 l       .debug_str	00000000 
00026882 l       .debug_str	00000000 
000268bf l       .debug_str	00000000 
000269f0 l       .debug_str	00000000 
00026a71 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
00026ba6 l       .debug_str	00000000 
00026c24 l       .debug_str	00000000 
00026d54 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00026d60 l       .debug_str	00000000 
00026e3f l       .debug_str	00000000 
00026f58 l       .debug_str	00000000 
00027098 l       .debug_str	00000000 
000271b5 l       .debug_str	00000000 
000272f9 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c444 l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00026d74 l       .debug_str	00000000 
00024e5f l       .debug_str	00000000 
00024eed l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00024ff5 l       .debug_str	00000000 
0002500e l       .debug_str	00000000 
0002d4e9 l       .debug_str	00000000 
00025034 l       .debug_str	00000000 
0002509a l       .debug_str	00000000 
000251a4 l       .debug_str	00000000 
0002520a l       .debug_str	00000000 
0002533b l       .debug_str	00000000 
000253a3 l       .debug_str	00000000 
0002546e l       .debug_str	00000000 
000254d6 l       .debug_str	00000000 
000255df l       .debug_str	00000000 
00025647 l       .debug_str	00000000 
00025777 l       .debug_str	00000000 
000257e2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0001fcd0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00027442 l       .debug_str	00000000 
0002748d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00025fe0 l       .debug_str	00000000 
00029749 l       .debug_str	00000000 
000297d2 l       .debug_str	00000000 
0002990c l       .debug_str	00000000 
00029995 l       .debug_str	00000000 
00029aa8 l       .debug_str	00000000 
00029b34 l       .debug_str	00000000 
00029bc0 l       .debug_str	00000000 
00029cd6 l       .debug_str	00000000 
00029d62 l       .debug_str	00000000 
00029e50 l       .debug_str	00000000 
0002650b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
00029ece l       .debug_str	00000000 
00026632 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
00029f4c l       .debug_str	00000000 
00026778 l       .debug_str	00000000 
00029fcb l       .debug_str	00000000 
000268bf l       .debug_str	00000000 
0002a04a l       .debug_str	00000000 
0002509a l       .debug_str	00000000 
0002a0c9 l       .debug_str	00000000 
0002520a l       .debug_str	00000000 
0002a148 l       .debug_str	00000000 
0002a1ca l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
0002a2d7 l       .debug_str	00000000 
0002a359 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002a43e l       .debug_str	00000000 
0002a4c0 l       .debug_str	00000000 
0002a58f l       .debug_str	00000000 
0002a5a6 l       .debug_str	00000000 
0002a628 l       .debug_str	00000000 
0002a75c l       .debug_str	00000000 
0002a7de l       .debug_str	00000000 
0002a8c3 l       .debug_str	00000000 
0002a945 l       .debug_str	00000000 
0002aa52 l       .debug_str	00000000 
0002aad4 l       .debug_str	00000000 
0002ac08 l       .debug_str	00000000 
0002ac8a l       .debug_str	00000000 
0002ad59 l       .debug_str	00000000 
0002addb l       .debug_str	00000000 
0002af0f l       .debug_str	00000000 
0002af91 l       .debug_str	00000000 
0002b09e l       .debug_str	00000000 
0002b0fa l       .debug_str	00000000 
0002b1f4 l       .debug_str	00000000 
0002b32c l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0002b48b l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002b5a8 l       .debug_str	00000000 
0002d41e l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b5ba l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0002b5bf l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0002b6f3 l       .debug_str	00000000 
0002b84e l       .debug_str	00000000 
0002b95a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
000274bf l       .debug_str	00000000 
0002752c l       .debug_str	00000000 
000275c2 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00027681 l       .debug_str	00000000 
00027746 l       .debug_str	00000000 
00027818 l       .debug_str	00000000 
000278e1 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
00027ad2 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b49d l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c444 l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027bd8 l       .debug_str	00000000 
00027c5a l       .debug_str	00000000 
00027d48 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00027e30 l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
00027f40 l       .debug_str	00000000 
00027f91 l       .debug_str	00000000 
00028080 l       .debug_str	00000000 
00028168 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00028276 l       .debug_str	00000000 
000282f1 l       .debug_str	00000000 
000283db l       .debug_str	00000000 
000284bf l       .debug_str	00000000 
000285cb l       .debug_str	00000000 
00028617 l       .debug_str	00000000 
00028702 l       .debug_str	00000000 
000287ec l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
000288f6 l       .debug_str	00000000 
000289f7 l       .debug_str	00000000 
00028a4d l       .debug_str	00000000 
00028b4b l       .debug_str	00000000 
00028ba1 l       .debug_str	00000000 
00028cee l       .debug_str	00000000 
00028d44 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028e6a l       .debug_str	00000000 
00028ef1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00028fc4 l       .debug_str	00000000 
0002904b l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0002915c l       .debug_str	00000000 
000291e3 l       .debug_str	00000000 
0002931b l       .debug_str	00000000 
000293a3 l       .debug_str	00000000 
00029477 l       .debug_str	00000000 
00029500 l       .debug_str	00000000 
000295d5 l       .debug_str	00000000 
0002965e l       .debug_str	00000000 
0001fd50 l     O .text	00000021 str.0
0001fd90 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
00009a16 l       .debug_str	00000000 
0002bd55 l       .debug_str	00000000 
0002bd62 l       .debug_str	00000000 
0002bda2 l       .debug_str	00000000 
0002be9f l       .debug_str	00000000 
0002bedf l       .debug_str	00000000 
0002beee l       .debug_str	00000000 
0002bf2e l       .debug_str	00000000 
0002bf4d l       .debug_str	00000000 
0002bf8d l       .debug_str	00000000 
0002bfa9 l       .debug_str	00000000 
0002bfe9 l       .debug_str	00000000 
0002bff7 l       .debug_str	00000000 
0002c037 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001afbe l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c045 l       .debug_str	00000000 
0002c086 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
0002c0bb l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0002c0c5 l       .debug_str	00000000 
0002c106 l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
0002c153 l       .debug_str	00000000 
0002c194 l       .debug_str	00000000 
0002c1c9 l       .debug_str	00000000 
0002c1d4 l       .debug_str	00000000 
0002c215 l       .debug_str	00000000 
0002c262 l       .debug_str	00000000 
0002c2a3 l       .debug_str	00000000 
0002c2d8 l       .debug_str	00000000 
0002c347 l       .debug_str	00000000 
0002c448 l       .debug_str	00000000 
0000ae08 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002c4b7 l       .debug_str	00000000 
0002c4d6 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00058869 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
0005e8d4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
000274bf l       .debug_str	00000000 
0002752c l       .debug_str	00000000 
000275c2 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00027681 l       .debug_str	00000000 
00027746 l       .debug_str	00000000 
00027818 l       .debug_str	00000000 
000278e1 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
00027ad2 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b49d l       .debug_str	00000000 
000288f6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002ba50 l       .debug_str	00000000 
0002bb30 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
0002bc2e l       .debug_str	00000000 
0002bc35 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002bc3d l       .debug_str	00000000 
0002bc51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002bc83 l       .debug_str	00000000 
0002bc97 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002bcc9 l       .debug_str	00000000 
0002bd08 l       .debug_str	00000000 
0002bd16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0001c5be l       .debug_str	00000000 
0002c662 l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
0002c755 l       .debug_str	00000000 
0002c7cd l       .debug_str	00000000 
0002c8e7 l       .debug_str	00000000 
0002c95f l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
0002ca2b l       .debug_str	00000000 
0002caa3 l       .debug_str	00000000 
0002cb6f l       .debug_str	00000000 
0002cbe7 l       .debug_str	00000000 
0002cc8c l       .debug_str	00000000 
0002cd04 l       .debug_str	00000000 
0002cd82 l       .debug_str	00000000 
0002cdfa l       .debug_str	00000000 
0002ce51 l       .debug_str	00000000 
0002cec9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0002c4f4 l       .debug_str	00000000 
0002c56c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
0002c5ea l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001c1b l       .debug_str	00000000 
0002d037 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002cf6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cfd2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002d1b5 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0002d1d4 l       .debug_str	00000000 
0002d252 l       .debug_str	00000000 
0002d2e2 l       .debug_str	00000000 
0002d2f9 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d09c l       .debug_str	00000000 
0002d128 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0002d137 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002d749 l       .debug_str	00000000 
0002d68d l       .debug_str	00000000 
0002d6aa l       .debug_str	00000000 
0002d6b3 l       .debug_str	00000000 
0002d6f9 l       .debug_str	00000000 
0002d702 l       .debug_str	00000000 
0002d97e l       .debug_str	00000000 
0002d792 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0002d79e l       .debug_str	00000000 
0002d81a l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
0002d845 l       .debug_str	00000000 
0002d8c1 l       .debug_str	00000000 
0002d8f3 l       .debug_str	00000000 
0002d979 l       .debug_str	00000000 
0002d988 l       .debug_str	00000000 
0002d2e2 l       .debug_str	00000000 
0002d9f9 l       .debug_str	00000000 
0002da6d l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002da77 l       .debug_str	00000000 
0002da84 l       .debug_str	00000000 
0002dafb l       .debug_str	00000000 
0002db15 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d380 l       .debug_str	00000000 
0002d3a9 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002b5a8 l       .debug_str	00000000 
0002d41e l       .debug_str	00000000 
0002d3b6 l       .debug_str	00000000 
0002d3f8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002d40c l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0002d428 l       .debug_str	00000000 
0002d451 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00024ff5 l       .debug_str	00000000 
0002500e l       .debug_str	00000000 
0002d4e9 l       .debug_str	00000000 
0002d46e l       .debug_str	00000000 
0002d4b3 l       .debug_str	00000000 
0002d4d7 l       .debug_str	00000000 
0002d506 l       .debug_str	00000000 
00030f3f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
0002d539 l       .debug_str	00000000 
00030f9d l       .debug_str	00000000 
0002a58f l       .debug_str	00000000 
0002d56c l       .debug_str	00000000 
0003101f l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0002d5a3 l       .debug_str	00000000 
000310a3 l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0002d5da l       .debug_str	00000000 
0002d628 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0002d638 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001c1b l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002db36 l       .debug_str	00000000 
0002db84 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0002db8d l       .debug_str	00000000 
0002dbdd l       .debug_str	00000000 
0002dbe8 l       .debug_str	00000000 
0002dc39 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002ddb3 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0002dca4 l       .debug_str	00000000 
0002dcef l       .debug_str	00000000 
0002dd02 l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
0002dd70 l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0002ddcf l       .debug_str	00000000 
0002d792 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
00016232 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0002de12 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bp05xqc1vzz7bvb
00014c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0002ded7 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4fx9oaepmfmbf8wt
000589b1 l       .debug_str	00000000 
0002e062 l       .debug_str	00000000 
0002e07e l       .debug_str	00000000 
0002e0a4 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df39 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
0002df62 l       .debug_str	00000000 
0002df73 l       .debug_str	00000000 
0002df83 l       .debug_str	00000000 
0002dfcf l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
0002e010 l       .debug_str	00000000 
0002e028 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
000234e9 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
0002e869 l       .debug_str	00000000 
000239d6 l       .debug_str	00000000 
0002e8e8 l       .debug_str	00000000 
000237a6 l       .debug_str	00000000 
0002e967 l       .debug_str	00000000 
0002e9e9 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002ebdf l       .debug_str	00000000 
0002ec61 l       .debug_str	00000000 
0002ecaa l       .debug_str	00000000 
0002ed2c l       .debug_str	00000000 
0002ef22 l       .debug_str	00000000 
0002efa4 l       .debug_str	00000000 
0002efed l       .debug_str	00000000 
0002f06f l       .debug_str	00000000 
0002f265 l       .debug_str	00000000 
0002f2e7 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002f330 l       .debug_str	00000000 
0002f3a4 l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b5ba l       .debug_str	00000000 
0002f5c5 l       .debug_str	00000000 
0002f7e2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002e0ad l       .debug_str	00000000 
0002e134 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0002e181 l       .debug_str	00000000 
0002e208 l       .debug_str	00000000 
0002e402 l       .debug_str	00000000 
0002e48b l       .debug_str	00000000 
0002e687 l       .debug_str	00000000 
0002e710 l       .debug_str	00000000 
0002e75f l       .debug_str	00000000 
0002e7eb l       .debug_str	00000000 
00023724 l       .debug_str	00000000 
0001fe90 l     O .text	0000001c str.0
0001fed0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f852 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002f8a2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002ff4e l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
0002fb67 l       .debug_str	00000000 
0002fbdf l       .debug_str	00000000 
0002fd6e l       .debug_str	00000000 
0002fde6 l       .debug_str	00000000 
0002ffc6 l       .debug_str	00000000 
00030044 l       .debug_str	00000000 
000300bc l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000301af l       .debug_str	00000000 
00030227 l       .debug_str	00000000 
00030404 l       .debug_str	00000000 
0003047c l       .debug_str	00000000 
00030548 l       .debug_str	00000000 
000305c0 l       .debug_str	00000000 
000305f0 l       .debug_str	00000000 
00030668 l       .debug_str	00000000 
0003070d l       .debug_str	00000000 
00030785 l       .debug_str	00000000 
000308c6 l       .debug_str	00000000 
0003093e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
0002f906 l       .debug_str	00000000 
0002f97e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
0002f9d5 l       .debug_str	00000000 
0002fa4d l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024827 l       .debug_str	00000000 
00030af4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00030b54 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
00009a16 l       .debug_str	00000000 
0002dc39 l       .debug_str	00000000 
00030cb8 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030bb4 l       .debug_str	00000000 
0002db84 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00030c06 l       .debug_str	00000000 
00030c59 l       .debug_str	00000000 
00030c63 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
00058593 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00030d0e l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00030d6b l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
000310bb l       .debug_str	00000000 
00030fc1 l       .debug_str	00000000 
00030fde l       .debug_str	00000000 
00031019 l       .debug_str	00000000 
00031047 l       .debug_str	00000000 
00031062 l       .debug_str	00000000 
0003109d l       .debug_str	00000000 
000310c6 l       .debug_str	00000000 
00030c59 l       .debug_str	00000000 
000310ec l       .debug_str	00000000 
00031112 l       .debug_str	00000000 
0003112c l       .debug_str	00000000 
0002dbdd l       .debug_str	00000000 
00031153 l       .debug_str	00000000 
0003117a l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030ddc l       .debug_str	00000000 
00030dee l       .debug_str	00000000 
00030dff l       .debug_str	00000000 
00030e4b l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00030e57 l       .debug_str	00000000 
00030e79 l       .debug_str	00000000 
00030e9a l       .debug_str	00000000 
00030ee6 l       .debug_str	00000000 
00030f02 l       .debug_str	00000000 
00030f39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00030f53 l       .debug_str	00000000 
00030f60 l       .debug_str	00000000 
00030f97 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 27tt2oece7npu1p2
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031195 l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000311be l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024827 l       .debug_str	00000000 
000311fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003125a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00031326 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000312ba l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0003132f l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0000730b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000313a0 l       .debug_str	00000000 
000313de l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
000313f7 l       .debug_str	00000000 
00031435 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0003145e l       .debug_str	00000000 
00031471 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000314a2 l       .debug_str	00000000 
000314aa l       .debug_str	00000000 
000314b3 l       .debug_str	00000000 
000314fc l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000314ba l       .debug_str	00000000 
000314f9 l       .debug_str	00000000 
00031502 l       .debug_str	00000000 
00031544 l       .debug_str	00000000 
0003154e l       .debug_str	00000000 
00031591 l       .debug_str	00000000 
0003159b l       .debug_str	00000000 
000315de l       .debug_str	00000000 
000315e8 l       .debug_str	00000000 
0003162b l       .debug_str	00000000 
00031636 l       .debug_str	00000000 
0003167b l       .debug_str	00000000 
00031686 l       .debug_str	00000000 
000316cb l       .debug_str	00000000 
000316d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000316de l       .debug_str	00000000 
000316ee l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00018924 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0003210a l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00058985 l       .debug_str	00000000 
00031746 l       .debug_str	00000000 
0003174b l       .debug_str	00000000 
0005eaa5 l       .debug_str	00000000 
00031756 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00031760 l       .debug_str	00000000 
00031dd4 l       .debug_str	00000000 
0003176a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00031e14 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0003214d l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00031778 l       .debug_str	00000000 
000317ec l       .debug_str	00000000 
0003202e l       .debug_str	00000000 
000317fe l       .debug_str	00000000 
00031e1a l       .debug_str	00000000 
00031df4 l       .debug_str	00000000 
00020314 l       .debug_str	00000000 
00032071 l       .debug_str	00000000 
00031803 l       .debug_str	00000000 
00031877 l       .debug_str	00000000 
00032186 l       .debug_str	00000000 
000321cd l       .debug_str	00000000 
000320d3 l       .debug_str	00000000 
0003188f l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
000321e8 l       .debug_str	00000000 
000320a2 l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0003195f l       .debug_str	00000000 
00031964 l       .debug_str	00000000 
00031976 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0003197f l       .debug_str	00000000 
00007b05 l       .debug_str	00000000 
000319a7 l       .debug_str	00000000 
000319b7 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00031a10 l       .debug_str	00000000 
00031a18 l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
000218b0 l       .debug_str	00000000 
00031a2c l       .debug_str	00000000 
00031a36 l       .debug_str	00000000 
00031a43 l       .debug_str	00000000 
00031a50 l       .debug_str	00000000 
00031a65 l       .debug_str	00000000 
00031a79 l       .debug_str	00000000 
00031a8f l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00031aa4 l       .debug_str	00000000 
00031ab1 l       .debug_str	00000000 
000323ba l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00031abe l       .debug_str	00000000 
00031aeb l       .debug_str	00000000 
00031b1a l       .debug_str	00000000 
00031b41 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00031b60 l       .debug_str	00000000 
00031b75 l       .debug_str	00000000 
000219b3 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00031b7f l       .debug_str	00000000 
00031ba4 l       .debug_str	00000000 
00031b8a l       .debug_str	00000000 
00031c23 l       .debug_str	00000000 
00031bb4 l       .debug_str	00000000 
00031bba l       .debug_str	00000000 
00031bc9 l       .debug_str	00000000 
00031bd4 l       .debug_str	00000000 
00031c09 l       .debug_str	00000000 
00031c2e l       .debug_str	00000000 
00031c3e l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00031c70 l       .debug_str	00000000 
00031c75 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000334d3 l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
00033501 l       .debug_str	00000000 
00033535 l       .debug_str	00000000 
00031c7b l       .debug_str	00000000 
000062cb l       .debug_str	00000000 
00031cb9 l       .debug_str	00000000 
000334de l       .debug_str	00000000 
0003352b l       .debug_str	00000000 
00031c9a l       .debug_str	00000000 
00031c87 l       .debug_str	00000000 
00031ca0 l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
00031cc8 l       .debug_str	00000000 
00031cd0 l       .debug_str	00000000 
0003d199 l       .debug_str	00000000 
00031cd6 l       .debug_str	00000000 
0004acc4 l       .debug_str	00000000 
00031cfd l       .debug_str	00000000 
00031ce1 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
00031d05 l       .debug_str	00000000 
000319b1 l       .debug_str	00000000 
000166ee l       .debug_str	00000000 
00018884 l       .debug_str	00000000 
00031d0a l       .debug_str	00000000 
00031d2e l       .debug_str	00000000 
00031d34 l       .debug_str	00000000 
00031d3c l       .debug_str	00000000 
0004d32f l       .debug_str	00000000 
0003cd95 l       .debug_str	00000000 
00031d41 l       .debug_str	00000000 
00031d69 l       .debug_str	00000000 
00031d4b l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
000166f6 l       .debug_str	00000000 
00016703 l       .debug_str	00000000 
0001670c l       .debug_str	00000000 
000578fb l       .debug_str	00000000 
00031d7d l       .debug_str	00000000 
00031d71 l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00031d8a l       .debug_str	00000000 
00031d96 l       .debug_str	00000000 
00031db9 l       .debug_str	00000000 
00031da3 l       .debug_str	00000000 
00031dc7 l       .debug_str	00000000 
00031de7 l       .debug_str	00000000 
00031e07 l       .debug_str	00000000 
00031e22 l       .debug_str	00000000 
00031e3d l       .debug_str	00000000 
00031e43 l       .debug_str	00000000 
00031e47 l       .debug_str	00000000 
00031e58 l       .debug_str	00000000 
00031e4b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00031e6d l       .debug_str	00000000 
00031e68 l       .debug_str	00000000 
00031e80 l       .debug_str	00000000 
00031ecc l       .debug_str	00000000 
00031ea5 l       .debug_str	00000000 
00031ebc l       .debug_str	00000000 
00031ee6 l       .debug_str	00000000 
00031ed7 l       .debug_str	00000000 
00031f2e l       .debug_str	00000000 
00031f0e l       .debug_str	00000000 
00031f87 l       .debug_str	00000000 
00031f67 l       .debug_str	00000000 
000578ed l       .debug_str	00000000 
00031fde l       .debug_str	00000000 
00031fe3 l       .debug_str	00000000 
00031fe9 l       .debug_str	00000000 
0003200c l       .debug_str	00000000 
00031fee l       .debug_str	00000000 
00032017 l       .debug_str	00000000 
00032062 l       .debug_str	00000000 
00032093 l       .debug_str	00000000 
000320c4 l       .debug_str	00000000 
000320f3 l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
0003216f l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000c94a l       .debug_str	00000000 
000321c0 l       .debug_str	00000000 
000321d9 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
00032206 l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
0003220c l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00032248 l       .debug_str	00000000 
0003223a l       .debug_str	00000000 
00032239 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0005f41a l       .debug_str	00000000 
00032251 l       .debug_str	00000000 
00032255 l       .debug_str	00000000 
00032258 l       .debug_str	00000000 
0005df0a l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
0003225b l       .debug_str	00000000 
000074c0 l       .debug_str	00000000 
0003225f l       .debug_str	00000000 
0003225e l       .debug_str	00000000 
00032264 l       .debug_str	00000000 
00032336 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00032282 l       .debug_str	00000000 
00032270 l       .debug_str	00000000 
000322a7 l       .debug_str	00000000 
0003236f l       .debug_str	00000000 
000322c5 l       .debug_str	00000000 
000322b3 l       .debug_str	00000000 
000322ea l       .debug_str	00000000 
00032303 l       .debug_str	00000000 
000322f1 l       .debug_str	00000000 
0003230f l       .debug_str	00000000 
00032327 l       .debug_str	00000000 
00032360 l       .debug_str	00000000 
000074c6 l       .debug_str	00000000 
00032399 l       .debug_str	00000000 
000323a6 l       .debug_str	00000000 
000323a5 l       .debug_str	00000000 
000323ae l       .debug_str	00000000 
000323db l       .debug_str	00000000 
000323c6 l       .debug_str	00000000 
000323f8 l       .debug_str	00000000 
00032404 l       .debug_str	00000000 
000324ae l       .debug_str	00000000 
00032410 l       .debug_str	00000000 
00032417 l       .debug_str	00000000 
00032420 l       .debug_str	00000000 
0003242e l       .debug_str	00000000 
00032435 l       .debug_str	00000000 
0003243d l       .debug_str	00000000 
00032444 l       .debug_str	00000000 
0003248a l       .debug_str	00000000 
00032465 l       .debug_str	00000000 
00032450 l       .debug_str	00000000 
00032475 l       .debug_str	00000000 
00032499 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
000324ba l       .debug_str	00000000 
00018897 l       .debug_str	00000000 
0005bdf4 l       .debug_str	00000000 
0000c8bd l       .debug_str	00000000 
0000c8a6 l       .debug_str	00000000 
000324d4 l       .debug_str	00000000 
000324f7 l       .debug_str	00000000 
000324e0 l       .debug_str	00000000 
00032541 l       .debug_str	00000000 
00032535 l       .debug_str	00000000 
000319ac l       .debug_str	00000000 
0003255e l       .debug_str	00000000 
00032547 l       .debug_str	00000000 
000325a7 l       .debug_str	00000000 
000325cf l       .debug_str	00000000 
000325b8 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0003267e l       .debug_str	00000000 
00032660 l       .debug_str	00000000 
00032774 l       .debug_str	00000000 
00032754 l       .debug_str	00000000 
000327e7 l       .debug_str	00000000 
000327c7 l       .debug_str	00000000 
00048ded l       .debug_str	00000000 
0003283a l       .debug_str	00000000 
00032847 l       .debug_str	00000000 
00032852 l       .debug_str	00000000 
00032868 l       .debug_str	00000000 
00032872 l       .debug_str	00000000 
000328c8 l       .debug_str	00000000 
000328da l       .debug_str	00000000 
0003292c l       .debug_str	00000000 
00032940 l       .debug_str	00000000 
00032994 l       .debug_str	00000000 
0003299b l       .debug_str	00000000 
000329e1 l       .debug_str	00000000 
000329f0 l       .debug_str	00000000 
00032a4a l       .debug_str	00000000 
00032aa0 l       .debug_str	00000000 
00032af8 l       .debug_str	00000000 
00032b42 l       .debug_str	00000000 
00032b48 l       .debug_str	00000000 
00032b98 l       .debug_str	00000000 
00032be4 l       .debug_str	00000000 
00032c32 l       .debug_str	00000000 
0001893d l       .debug_str	00000000 
00032c72 l       .debug_str	00000000 
00032cbf l       .debug_str	00000000 
00032d08 l       .debug_str	00000000 
00032d53 l       .debug_str	00000000 
00032d90 l       .debug_str	00000000 
00032da0 l       .debug_str	00000000 
00032dfb l       .debug_str	00000000 
00032e52 l       .debug_str	00000000 
00032eab l       .debug_str	00000000 
00040181 l       .debug_str	00000000 
00032ef6 l       .debug_str	00000000 
00032f4a l       .debug_str	00000000 
00032f9a l       .debug_str	00000000 
00032fec l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00033030 l       .debug_str	00000000 
0003307c l       .debug_str	00000000 
000330c4 l       .debug_str	00000000 
0003310e l       .debug_str	00000000 
0003ffb7 l       .debug_str	00000000 
0003314a l       .debug_str	00000000 
0003319e l       .debug_str	00000000 
000331ee l       .debug_str	00000000 
00033240 l       .debug_str	00000000 
00033284 l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332e7 l       .debug_str	00000000 
0003333a l       .debug_str	00000000 
0003338f l       .debug_str	00000000 
000333d6 l       .debug_str	00000000 
000333e2 l       .debug_str	00000000 
000333f9 l       .debug_str	00000000 
000333f2 l       .debug_str	00000000 
0003340b l       .debug_str	00000000 
00033420 l       .debug_str	00000000 
00033471 l       .debug_str	00000000 
00033481 l       .debug_str	00000000 
000334d2 l       .debug_str	00000000 
000334dd l       .debug_str	00000000 
00033500 l       .debug_str	00000000 
00033534 l       .debug_str	00000000 
0003354a l       .debug_str	00000000 
00033578 l       .debug_str	00000000 
0003356c l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00033585 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
000188a9 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
000188ae l       .debug_str	00000000 
00033589 l       .debug_str	00000000 
000335c9 l       .debug_str	00000000 
000335d1 l       .debug_str	00000000 
00033611 l       .debug_str	00000000 
0003361b l       .debug_str	00000000 
00057a27 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033657 l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0003367f l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
000336a8 l       .debug_str	00000000 
000336cd l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
00058a7d l       .debug_str	00000000 
000336d4 l       .debug_str	00000000 
000336dd l       .debug_str	00000000 
00033716 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0003371e l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
000337b3 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
000337fe l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
00033845 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0003389a l       .debug_str	00000000 
000338d7 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
000338e2 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
00033937 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00033989 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
000339d0 l       .debug_str	00000000 
00014ffa l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00033a56 l       .debug_str	00000000 
00033a97 l       .debug_str	00000000 
00033aba l       .debug_str	00000000 
00033af5 l       .debug_str	00000000 
00033aff l       .debug_str	00000000 
00033b89 l       .debug_str	00000000 
00033bbb l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00033c2f l       .debug_str	00000000 
00033c80 l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00033cc2 l       .debug_str	00000000 
00033d49 l       .debug_str	00000000 
00033d58 l       .debug_str	00000000 
00033de2 l       .debug_str	00000000 
00033e5e l       .debug_str	00000000 
00033e8e l       .debug_str	00000000 
00033ec9 l       .debug_str	00000000 
00033ed3 l       .debug_str	00000000 
0000f0be l       .debug_str	00000000 
00033f4a l       .debug_str	00000000 
00033f9f l       .debug_str	00000000 
00033fa8 l       .debug_str	00000000 
00033ff9 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00034005 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
00034012 l       .debug_str	00000000 
0003401b l       .debug_str	00000000 
00034031 l       .debug_str	00000000 
0003403e l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000340ec l       .debug_str	00000000 
000340f5 l       .debug_str	00000000 
0004b2a4 l       .debug_str	00000000 
0003412d l       .debug_str	00000000 
0003416a l       .debug_str	00000000 
00034175 l       .debug_str	00000000 
000341f8 l       .debug_str	00000000 
00034203 l       .debug_str	00000000 
00034289 l       .debug_str	00000000 
000342fe l       .debug_str	00000000 
0003432a l       .debug_str	00000000 
000343b3 l       .debug_str	00000000 
000343c2 l       .debug_str	00000000 
000343cf l       .debug_str	00000000 
000343e3 l       .debug_str	00000000 
00034439 l       .debug_str	00000000 
000344a8 l       .debug_str	00000000 
00034528 l       .debug_str	00000000 
00034596 l       .debug_str	00000000 
00034621 l       .debug_str	00000000 
00034696 l       .debug_str	00000000 
000346d6 l       .debug_str	00000000 
00034759 l       .debug_str	00000000 
0003479a l       .debug_str	00000000 
00048caf l       .debug_str	00000000 
0004c7c9 l       .debug_str	00000000 
000347ff l       .debug_str	00000000 
000348ae l       .debug_str	00000000 
000348f9 l       .debug_str	00000000 
0001fd51 l       .debug_str	00000000 
000349a2 l       .debug_str	00000000 
00034a1e l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
00034a43 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00034a90 l       .debug_str	00000000 
0001f3ba l       .debug_str	00000000 
00034ae3 l       .debug_str	00000000 
00034b1e l       .debug_str	00000000 
00034b29 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00034bb5 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
00034c38 l       .debug_str	00000000 
00034cc0 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
00034d35 l       .debug_str	00000000 
00034dbb l       .debug_str	00000000 
00020258 l       .debug_str	00000000 
00034e30 l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
00034e93 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
00034ef5 l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
00034f3b l       .debug_str	00000000 
00034f83 l       .debug_str	00000000 
00034f8d l       .debug_str	00000000 
00034fce l       .debug_str	00000000 
00034fe8 l       .debug_str	00000000 
00018962 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00034fee l       .debug_str	00000000 
00034ff7 l       .debug_str	00000000 
0003505c l       .debug_str	00000000 
0003506b l       .debug_str	00000000 
000350ad l       .debug_str	00000000 
000350b7 l       .debug_str	00000000 
0003511c l       .debug_str	00000000 
0003515e l       .debug_str	00000000 
000351a8 l       .debug_str	00000000 
000351b7 l       .debug_str	00000000 
000351ed l       .debug_str	00000000 
000351f6 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00035200 l       .debug_str	00000000 
00035203 l       .debug_str	00000000 
0003523b l       .debug_str	00000000 
00035245 l       .debug_str	00000000 
00035289 l       .debug_str	00000000 
0003529f l       .debug_str	00000000 
000352e8 l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
0001894d l       .debug_str	00000000 
0003532d l       .debug_str	00000000 
00035376 l       .debug_str	00000000 
00035384 l       .debug_str	00000000 
000353cc l       .debug_str	00000000 
00016fc3 l       .debug_str	00000000 
00035416 l       .debug_str	00000000 
0003ebee l       .debug_str	00000000 
000354ae l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00035548 l       .debug_str	00000000 
000174c9 l       .debug_str	00000000 
000355ba l       .debug_str	00000000 
000171eb l       .debug_str	00000000 
0003565d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0003568f l       .debug_str	00000000 
000356d6 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000356ee l       .debug_str	00000000 
0003573c l       .debug_str	00000000 
0003574c l       .debug_str	00000000 
00035797 l       .debug_str	00000000 
000357a5 l       .debug_str	00000000 
00035833 l       .debug_str	00000000 
00035842 l       .debug_str	00000000 
0001662a l       .debug_str	00000000 
0003588b l       .debug_str	00000000 
000165d3 l       .debug_str	00000000 
000358d0 l       .debug_str	00000000 
0003590a l       .debug_str	00000000 
00035913 l       .debug_str	00000000 
0003595f l       .debug_str	00000000 
00035977 l       .debug_str	00000000 
000359d9 l       .debug_str	00000000 
00006737 l       .debug_str	00000000 
00035a0e l       .debug_str	00000000 
00035a36 l       .debug_str	00000000 
00035a6e l       .debug_str	00000000 
00035a97 l       .debug_str	00000000 
00035aa2 l       .debug_str	00000000 
0000782a l       .debug_str	00000000 
00035ac7 l       .debug_str	00000000 
00035b56 l       .debug_str	00000000 
00035b8d l       .debug_str	00000000 
00035c13 l       .debug_str	00000000 
00035c61 l       .debug_str	00000000 
00035c6a l       .debug_str	00000000 
00035cf0 l       .debug_str	00000000 
00035d03 l       .debug_str	00000000 
00035d8c l       .debug_str	00000000 
00035de8 l       .debug_str	00000000 
00035e2a l       .debug_str	00000000 
00035edc l       .debug_str	00000000 
00035f1b l       .debug_str	00000000 
00035fc0 l       .debug_str	00000000 
00036054 l       .debug_str	00000000 
0003607a l       .debug_str	00000000 
000360f6 l       .debug_str	00000000 
00036131 l       .debug_str	00000000 
0003613e l       .debug_str	00000000 
00036177 l       .debug_str	00000000 
0003618f l       .debug_str	00000000 
000361cf l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
000361db l       .debug_str	00000000 
00036238 l       .debug_str	00000000 
00036295 l       .debug_str	00000000 
00036342 l       .debug_str	00000000 
0003639f l       .debug_str	00000000 
000215d2 l       .debug_str	00000000 
0003640c l       .debug_str	00000000 
00036470 l       .debug_str	00000000 
0003647b l       .debug_str	00000000 
000364ab l       .debug_str	00000000 
000364d7 l       .debug_str	00000000 
00036543 l       .debug_str	00000000 
00036573 l       .debug_str	00000000 
000365af l       .debug_str	00000000 
000365f9 l       .debug_str	00000000 
00036609 l       .debug_str	00000000 
0003663e l       .debug_str	00000000 
00036683 l       .debug_str	00000000 
0003668e l       .debug_str	00000000 
000366ce l       .debug_str	00000000 
000366dc l       .debug_str	00000000 
00036768 l       .debug_str	00000000 
000367e4 l       .debug_str	00000000 
00036804 l       .debug_str	00000000 
0003685e l       .debug_str	00000000 
0003686b l       .debug_str	00000000 
000368a4 l       .debug_str	00000000 
000368ac l       .debug_str	00000000 
00036901 l       .debug_str	00000000 
00036953 l       .debug_str	00000000 
00035838 l       .debug_str	00000000 
0003699a l       .debug_str	00000000 
00036a0e l       .debug_str	00000000 
00036a52 l       .debug_str	00000000 
00036a9e l       .debug_str	00000000 
00036add l       .debug_str	00000000 
00036b03 l       .debug_str	00000000 
00036b15 l       .debug_str	00000000 
00036b1f l       .debug_str	00000000 
00036b61 l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
00036be8 l       .debug_str	00000000 
00002f7d l       .debug_str	00000000 
00036c64 l       .debug_str	00000000 
00036cdb l       .debug_str	00000000 
00036d29 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
00036db9 l       .debug_str	00000000 
00036df5 l       .debug_str	00000000 
00036e02 l       .debug_str	00000000 
00036e48 l       .debug_str	00000000 
00036e55 l       .debug_str	00000000 
00037b9b l       .debug_str	00000000 
00036e87 l       .debug_str	00000000 
00036ed7 l       .debug_str	00000000 
00036eee l       .debug_str	00000000 
00036f78 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00036ff4 l       .debug_str	00000000 
00037008 l       .debug_str	00000000 
00037065 l       .debug_str	00000000 
00037074 l       .debug_str	00000000 
00037085 l       .debug_str	00000000 
000370df l       .debug_str	00000000 
000370ee l       .debug_str	00000000 
00037177 l       .debug_str	00000000 
00037185 l       .debug_str	00000000 
000371db l       .debug_str	00000000 
0003722f l       .debug_str	00000000 
000372a8 l       .debug_str	00000000 
000372c0 l       .debug_str	00000000 
000372ca l       .debug_str	00000000 
00037361 l       .debug_str	00000000 
0003737b l       .debug_str	00000000 
0000a508 l       .debug_str	00000000 
000373b4 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00037419 l       .debug_str	00000000 
000374b0 l       .debug_str	00000000 
000374b4 l       .debug_str	00000000 
000377a9 l       .debug_str	00000000 
000374b9 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
000374eb l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
00037529 l       .debug_str	00000000 
00014d16 l       .debug_str	00000000 
0003757c l       .debug_str	00000000 
00037608 l       .debug_str	00000000 
00037684 l       .debug_str	00000000 
000376a3 l       .debug_str	00000000 
000376ee l       .debug_str	00000000 
000376fb l       .debug_str	00000000 
0003776f l       .debug_str	00000000 
0003baad l       .debug_str	00000000 
0004d1e8 l       .debug_str	00000000 
0003778e l       .debug_str	00000000 
000377ae l       .debug_str	00000000 
000377ca l       .debug_str	00000000 
000377d4 l       .debug_str	00000000 
00037860 l       .debug_str	00000000 
000378dc l       .debug_str	00000000 
0003790d l       .debug_str	00000000 
00037990 l       .debug_str	00000000 
000379b0 l       .debug_str	00000000 
00037a36 l       .debug_str	00000000 
00037aab l       .debug_str	00000000 
0001ecfe l       .debug_str	00000000 
0005aa26 l       .debug_str	00000000 
00037aec l       .debug_str	00000000 
0001758f l       .debug_str	00000000 
00037b37 l       .debug_str	00000000 
00037b93 l       .debug_str	00000000 
00037b9f l       .debug_str	00000000 
00037be8 l       .debug_str	00000000 
00037bf8 l       .debug_str	00000000 
00037c3d l       .debug_str	00000000 
00037c86 l       .debug_str	00000000 
00037ccb l       .debug_str	00000000 
00037d27 l       .debug_str	00000000 
00037d72 l       .debug_str	00000000 
00037db9 l       .debug_str	00000000 
00037e17 l       .debug_str	00000000 
00037e62 l       .debug_str	00000000 
00037ea9 l       .debug_str	00000000 
00037f07 l       .debug_str	00000000 
00037f52 l       .debug_str	00000000 
00037f99 l       .debug_str	00000000 
00037ff7 l       .debug_str	00000000 
00038040 l       .debug_str	00000000 
00038085 l       .debug_str	00000000 
000380e1 l       .debug_str	00000000 
0003812a l       .debug_str	00000000 
0003816f l       .debug_str	00000000 
000381cb l       .debug_str	00000000 
00038215 l       .debug_str	00000000 
0003825b l       .debug_str	00000000 
000382b8 l       .debug_str	00000000 
00038302 l       .debug_str	00000000 
00038348 l       .debug_str	00000000 
000383a5 l       .debug_str	00000000 
00038400 l       .debug_str	00000000 
00038448 l       .debug_str	00000000 
0003848c l       .debug_str	00000000 
000384d4 l       .debug_str	00000000 
00038518 l       .debug_str	00000000 
00038573 l       .debug_str	00000000 
000385bc l       .debug_str	00000000 
00038601 l       .debug_str	00000000 
0003865d l       .debug_str	00000000 
000386a6 l       .debug_str	00000000 
000386eb l       .debug_str	00000000 
00038747 l       .debug_str	00000000 
00038790 l       .debug_str	00000000 
000387d5 l       .debug_str	00000000 
00038831 l       .debug_str	00000000 
0003887b l       .debug_str	00000000 
000388c1 l       .debug_str	00000000 
0003891e l       .debug_str	00000000 
00038968 l       .debug_str	00000000 
000389ae l       .debug_str	00000000 
00038a0b l       .debug_str	00000000 
00038a55 l       .debug_str	00000000 
00038a9b l       .debug_str	00000000 
00038af8 l       .debug_str	00000000 
00038b53 l       .debug_str	00000000 
00038b9b l       .debug_str	00000000 
00038bdf l       .debug_str	00000000 
00038c27 l       .debug_str	00000000 
00038c6b l       .debug_str	00000000 
00038cc6 l       .debug_str	00000000 
00038d21 l       .debug_str	00000000 
00038d69 l       .debug_str	00000000 
00038dad l       .debug_str	00000000 
00038df6 l       .debug_str	00000000 
00038e3b l       .debug_str	00000000 
00038e97 l       .debug_str	00000000 
00038ef3 l       .debug_str	00000000 
00038f3c l       .debug_str	00000000 
00038f81 l       .debug_str	00000000 
00038fdd l       .debug_str	00000000 
00039026 l       .debug_str	00000000 
0003906b l       .debug_str	00000000 
000390c7 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
00039155 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
000391b1 l       .debug_str	00000000 
000391f0 l       .debug_str	00000000 
00039225 l       .debug_str	00000000 
00010e78 l       .debug_str	00000000 
0001ee9f l       .debug_str	00000000 
0001ef7b l       .debug_str	00000000 
0003922f l       .debug_str	00000000 
00020dd3 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00039269 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000392fb l       .debug_str	00000000 
0002035b l       .debug_str	00000000 
00039334 l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
0003935b l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00039395 l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
000393bb l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00039415 l       .debug_str	00000000 
0001fc72 l       .debug_str	00000000 
000394af l       .debug_str	00000000 
0001ef8a l       .debug_str	00000000 
00039538 l       .debug_str	00000000 
000395df l       .debug_str	00000000 
00039618 l       .debug_str	00000000 
0003968d l       .debug_str	00000000 
000396b6 l       .debug_str	00000000 
0002c0bb l       .debug_str	00000000 
000396eb l       .debug_str	00000000 
00039727 l       .debug_str	00000000 
00039738 l       .debug_str	00000000 
00039771 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0003977e l       .debug_str	00000000 
0003978d l       .debug_str	00000000 
00035064 l       .debug_str	00000000 
000397d6 l       .debug_str	00000000 
00039809 l       .debug_str	00000000 
00039816 l       .debug_str	00000000 
0005e719 l       .debug_str	00000000 
00039861 l       .debug_str	00000000 
000398b9 l       .debug_str	00000000 
000398ce l       .debug_str	00000000 
00039904 l       .debug_str	00000000 
0003990f l       .debug_str	00000000 
0002c1c9 l       .debug_str	00000000 
0003996e l       .debug_str	00000000 
000399e1 l       .debug_str	00000000 
00039a48 l       .debug_str	00000000 
00039a68 l       .debug_str	00000000 
00039aa7 l       .debug_str	00000000 
00039ac6 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00039b39 l       .debug_str	00000000 
00039bb6 l       .debug_str	00000000 
00039c1b l       .debug_str	00000000 
00039c7b l       .debug_str	00000000 
00039cee l       .debug_str	00000000 
00039d6b l       .debug_str	00000000 
00020f68 l       .debug_str	00000000 
00039de3 l       .debug_str	00000000 
00039e58 l       .debug_str	00000000 
00039ed2 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00039f32 l       .debug_str	00000000 
0005c707 l       .debug_str	00000000 
00039f70 l       .debug_str	00000000 
00039fb2 l       .debug_str	00000000 
00039fdd l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
0003a028 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005d5c1 l       .debug_str	00000000 
00057ea7 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003a084 l       .debug_str	00000000 
00002480 l       .debug_str	00000000 
0003a0c0 l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
0003a107 l       .debug_str	00000000 
0003a165 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
0003a1bc l       .debug_str	00000000 
0003a216 l       .debug_str	00000000 
0003a220 l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
0003a263 l       .debug_str	00000000 
0003a299 l       .debug_str	00000000 
0003a2a9 l       .debug_str	00000000 
0003a2b8 l       .debug_str	00000000 
0003a2c3 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
0003a2fd l       .debug_str	00000000 
0003a346 l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0003a38d l       .debug_str	00000000 
0003a3c8 l       .debug_str	00000000 
0003a3ed l       .debug_str	00000000 
0003a459 l       .debug_str	00000000 
0003a46c l       .debug_str	00000000 
0003a4e3 l       .debug_str	00000000 
0003a4ee l       .debug_str	00000000 
0003a52b l       .debug_str	00000000 
0003a536 l       .debug_str	00000000 
0003a5b7 l       .debug_str	00000000 
0003a5fd l       .debug_str	00000000 
0003a624 l       .debug_str	00000000 
0003a653 l       .debug_str	00000000 
0003a664 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
0003a6c0 l       .debug_str	00000000 
0003a6f1 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
0003a739 l       .debug_str	00000000 
00021b96 l       .debug_str	00000000 
0003a777 l       .debug_str	00000000 
0003a7bb l       .debug_str	00000000 
0003a80e l       .debug_str	00000000 
000372a9 l       .debug_str	00000000 
0003a886 l       .debug_str	00000000 
0003a8d5 l       .debug_str	00000000 
0003a96b l       .debug_str	00000000 
0003a9af l       .debug_str	00000000 
0003e6ed l       .debug_str	00000000 
0003aa27 l       .debug_str	00000000 
0003aa76 l       .debug_str	00000000 
0003ab0c l       .debug_str	00000000 
0003ab26 l       .debug_str	00000000 
0003ab75 l       .debug_str	00000000 
0003abae l       .debug_str	00000000 
0003abc9 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
0003ac2d l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
0003aca6 l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
0003ad17 l       .debug_str	00000000 
0003adad l       .debug_str	00000000 
0003ae45 l       .debug_str	00000000 
0003aeb7 l       .debug_str	00000000 
0003aedf l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
0003af97 l       .debug_str	00000000 
000179f7 l       .debug_str	00000000 
0003afdc l       .debug_str	00000000 
0003b092 l       .debug_str	00000000 
0003b0d7 l       .debug_str	00000000 
0000e1d4 l       .debug_str	00000000 
0003b119 l       .debug_str	00000000 
0003b174 l       .debug_str	00000000 
0003b179 l       .debug_str	00000000 
0003b1d2 l       .debug_str	00000000 
0003b206 l       .debug_str	00000000 
0003b21a l       .debug_str	00000000 
0003b255 l       .debug_str	00000000 
0003b297 l       .debug_str	00000000 
0003b2ad l       .debug_str	00000000 
0003b319 l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0003b35b l       .debug_str	00000000 
0003b39b l       .debug_str	00000000 
0003b3f5 l       .debug_str	00000000 
0003b437 l       .debug_str	00000000 
0003b492 l       .debug_str	00000000 
0003b4d4 l       .debug_str	00000000 
0003b4df l       .debug_str	00000000 
0003b51f l       .debug_str	00000000 
0003b525 l       .debug_str	00000000 
0003b57f l       .debug_str	00000000 
0003b588 l       .debug_str	00000000 
0003b5ca l       .debug_str	00000000 
0003b622 l       .debug_str	00000000 
0003b664 l       .debug_str	00000000 
0003b6bd l       .debug_str	00000000 
0003b6c7 l       .debug_str	00000000 
0003b6cf l       .debug_str	00000000 
0003b6d8 l       .debug_str	00000000 
0003b6cb l       .debug_str	00000000 
0003b71a l       .debug_str	00000000 
0003b76f l       .debug_str	00000000 
0003b7ac l       .debug_str	00000000 
0003b7ee l       .debug_str	00000000 
0003b845 l       .debug_str	00000000 
0003b887 l       .debug_str	00000000 
0003b8df l       .debug_str	00000000 
0003b917 l       .debug_str	00000000 
0003b923 l       .debug_str	00000000 
0003b960 l       .debug_str	00000000 
0003b9c2 l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
0003ba0c l       .debug_str	00000000 
0003ba6a l       .debug_str	00000000 
0003baa3 l       .debug_str	00000000 
0003bab2 l       .debug_str	00000000 
0003baf1 l       .debug_str	00000000 
0003bb06 l       .debug_str	00000000 
0003bb4c l       .debug_str	00000000 
0003bb59 l       .debug_str	00000000 
0003bb5f l       .debug_str	00000000 
0003bb98 l       .debug_str	00000000 
0003bc24 l       .debug_str	00000000 
0003bc60 l       .debug_str	00000000 
00057a96 l       .debug_str	00000000 
0003bc72 l       .debug_str	00000000 
0003bcaa l       .debug_str	00000000 
0003bcb6 l       .debug_str	00000000 
0003bcf3 l       .debug_str	00000000 
0003bd55 l       .debug_str	00000000 
0003bd96 l       .debug_str	00000000 
0003bdf4 l       .debug_str	00000000 
0003be2e l       .debug_str	00000000 
0003be88 l       .debug_str	00000000 
0003bed1 l       .debug_str	00000000 
0003bee1 l       .debug_str	00000000 
0003bf1a l       .debug_str	00000000 
0003bf9c l       .debug_str	00000000 
0003bfd6 l       .debug_str	00000000 
0003c030 l       .debug_str	00000000 
0003c06b l       .debug_str	00000000 
0003c0cb l       .debug_str	00000000 
0003c106 l       .debug_str	00000000 
0003c166 l       .debug_str	00000000 
0003c1a4 l       .debug_str	00000000 
0003c202 l       .debug_str	00000000 
0003c240 l       .debug_str	00000000 
0003c29e l       .debug_str	00000000 
0003c2e9 l       .debug_str	00000000 
0003c2f2 l       .debug_str	00000000 
0003c341 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003c34d l       .debug_str	00000000 
0003c37e l       .debug_str	00000000 
0003c3a9 l       .debug_str	00000000 
0003c3f7 l       .debug_str	00000000 
0001ef2c l       .debug_str	00000000 
0003c3fe l       .debug_str	00000000 
0003c463 l       .debug_str	00000000 
0003c494 l       .debug_str	00000000 
0003c49c l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0003c4cd l       .debug_str	00000000 
0003c526 l       .debug_str	00000000 
0003c5b4 l       .debug_str	00000000 
0003c600 l       .debug_str	00000000 
0003c625 l       .debug_str	00000000 
0003c642 l       .debug_str	00000000 
0003c66c l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00007ba3 l       .debug_str	00000000 
00007c1f l       .debug_str	00000000 
0003c68e l       .debug_str	00000000 
0003c6db l       .debug_str	00000000 
0003c720 l       .debug_str	00000000 
0003c75f l       .debug_str	00000000 
0003c7ab l       .debug_str	00000000 
0003c83a l       .debug_str	00000000 
0003c887 l       .debug_str	00000000 
0003c90d l       .debug_str	00000000 
00059998 l       .debug_str	00000000 
0003c932 l       .debug_str	00000000 
0003c95c l       .debug_str	00000000 
0003c965 l       .debug_str	00000000 
0003c99b l       .debug_str	00000000 
0003c9a4 l       .debug_str	00000000 
0003ca32 l       .debug_str	00000000 
0003ca78 l       .debug_str	00000000 
0003ca97 l       .debug_str	00000000 
0003caae l       .debug_str	00000000 
0003cad2 l       .debug_str	00000000 
0003caee l       .debug_str	00000000 
0003cb35 l       .debug_str	00000000 
0003cb7a l       .debug_str	00000000 
0003cbb9 l       .debug_str	00000000 
0003cbff l       .debug_str	00000000 
0003cc8e l       .debug_str	00000000 
0003ccd5 l       .debug_str	00000000 
0003cd5b l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cd9a l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0003ce05 l       .debug_str	00000000 
0003ce3a l       .debug_str	00000000 
0003ce44 l       .debug_str	00000000 
0003ce77 l       .debug_str	00000000 
0003ce7f l       .debug_str	00000000 
0003ceb3 l       .debug_str	00000000 
0003cec5 l       .debug_str	00000000 
0003ceff l       .debug_str	00000000 
0003cf1d l       .debug_str	00000000 
0003cf43 l       .debug_str	00000000 
0003cf4e l       .debug_str	00000000 
0003cf77 l       .debug_str	00000000 
0003cf85 l       .debug_str	00000000 
0003cfbf l       .debug_str	00000000 
0003cff5 l       .debug_str	00000000 
0003d01b l       .debug_str	00000000 
0003d03e l       .debug_str	00000000 
0003d067 l       .debug_str	00000000 
0003d08d l       .debug_str	00000000 
0003d0cb l       .debug_str	00000000 
0003d0e5 l       .debug_str	00000000 
0003d123 l       .debug_str	00000000 
0003d155 l       .debug_str	00000000 
0003d161 l       .debug_str	00000000 
0005f12d l       .debug_str	00000000 
0003d195 l       .debug_str	00000000 
0003d1a2 l       .debug_str	00000000 
00016e7e l       .debug_str	00000000 
0003d1d4 l       .debug_str	00000000 
0003d23e l       .debug_str	00000000 
0003d2ae l       .debug_str	00000000 
0003d315 l       .debug_str	00000000 
0003d332 l       .debug_str	00000000 
0003d371 l       .debug_str	00000000 
0003d38d l       .debug_str	00000000 
00016e40 l       .debug_str	00000000 
0003d3bb l       .debug_str	00000000 
00016f1c l       .debug_str	00000000 
0003d3f0 l       .debug_str	00000000 
0003d42c l       .debug_str	00000000 
0003d452 l       .debug_str	00000000 
0003d491 l       .debug_str	00000000 
0003d4a1 l       .debug_str	00000000 
0003d505 l       .debug_str	00000000 
0003d53c l       .debug_str	00000000 
0003d552 l       .debug_str	00000000 
0003d5a1 l       .debug_str	00000000 
0003d5ad l       .debug_str	00000000 
0003d67f l       .debug_str	00000000 
0003d5f4 l       .debug_str	00000000 
0003d67a l       .debug_str	00000000 
0003d69e l       .debug_str	00000000 
0003d6d9 l       .debug_str	00000000 
0003d6e9 l       .debug_str	00000000 
0005f055 l       .debug_str	00000000 
0003d72a l       .debug_str	00000000 
0003d764 l       .debug_str	00000000 
0003d773 l       .debug_str	00000000 
0003d7ac l       .debug_str	00000000 
0003d7ba l       .debug_str	00000000 
0003d7f3 l       .debug_str	00000000 
0003d801 l       .debug_str	00000000 
0003d851 l       .debug_str	00000000 
0003d85e l       .debug_str	00000000 
0003d8d4 l       .debug_str	00000000 
0003d8df l       .debug_str	00000000 
0003d8f1 l       .debug_str	00000000 
0003d93d l       .debug_str	00000000 
0003d95a l       .debug_str	00000000 
0003d9ee l       .debug_str	00000000 
0003da84 l       .debug_str	00000000 
0003daf6 l       .debug_str	00000000 
0003db1c l       .debug_str	00000000 
0003dbbb l       .debug_str	00000000 
0003dc2c l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0003dc71 l       .debug_str	00000000 
0003dcd4 l       .debug_str	00000000 
0003dcf7 l       .debug_str	00000000 
0003dd4b l       .debug_str	00000000 
0003dd62 l       .debug_str	00000000 
00024827 l       .debug_str	00000000 
0003ddaf l       .debug_str	00000000 
0003ddbc l       .debug_str	00000000 
0003ddf7 l       .debug_str	00000000 
0003de1f l       .debug_str	00000000 
0003de81 l       .debug_str	00000000 
00039909 l       .debug_str	00000000 
0003deea l       .debug_str	00000000 
00040718 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
0002df62 l       .debug_str	00000000 
0002df73 l       .debug_str	00000000 
0003df37 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
0003df82 l       .debug_str	00000000 
0003e005 l       .debug_str	00000000 
0003e035 l       .debug_str	00000000 
0003e0bd l       .debug_str	00000000 
0003e132 l       .debug_str	00000000 
0003e185 l       .debug_str	00000000 
0003e211 l       .debug_str	00000000 
0003e249 l       .debug_str	00000000 
0003e29e l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
0003e321 l       .debug_str	00000000 
0003e34f l       .debug_str	00000000 
0003e3a3 l       .debug_str	00000000 
0003e3c9 l       .debug_str	00000000 
00021ae2 l       .debug_str	00000000 
0003e400 l       .debug_str	00000000 
0003e44b l       .debug_str	00000000 
0003e467 l       .debug_str	00000000 
0003e4bd l       .debug_str	00000000 
00021c29 l       .debug_str	00000000 
0003e536 l       .debug_str	00000000 
0003e586 l       .debug_str	00000000 
0003e61d l       .debug_str	00000000 
0003e673 l       .debug_str	00000000 
0003e6ec l       .debug_str	00000000 
0003e704 l       .debug_str	00000000 
0003e79b l       .debug_str	00000000 
0003e7d4 l       .debug_str	00000000 
0003ea04 l       .debug_str	00000000 
0003e81d l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0003e85a l       .debug_str	00000000 
0003e89e l       .debug_str	00000000 
0003e8e9 l       .debug_str	00000000 
0003e929 l       .debug_str	00000000 
0003e953 l       .debug_str	00000000 
0003e99c l       .debug_str	00000000 
0003e9ab l       .debug_str	00000000 
0003e9fc l       .debug_str	00000000 
0003ea13 l       .debug_str	00000000 
00048cb3 l       .debug_str	00000000 
0005a252 l       .debug_str	00000000 
0003ea7a l       .debug_str	00000000 
0003eadb l       .debug_str	00000000 
0003eafa l       .debug_str	00000000 
0003eb03 l       .debug_str	00000000 
0003eb0f l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0003eb15 l       .debug_str	00000000 
0003eb1f l       .debug_str	00000000 
0003eb51 l       .debug_str	00000000 
0003eb61 l       .debug_str	00000000 
0003ebe9 l       .debug_str	00000000 
0003ebf2 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0003ec5f l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
000214da l       .debug_str	00000000 
000214e6 l       .debug_str	00000000 
000214f0 l       .debug_str	00000000 
0003ecad l       .debug_str	00000000 
0003ed1d l       .debug_str	00000000 
0003ed42 l       .debug_str	00000000 
0003edb1 l       .debug_str	00000000 
0003edd7 l       .debug_str	00000000 
0003ee46 l       .debug_str	00000000 
0003ee70 l       .debug_str	00000000 
0003eea7 l       .debug_str	00000000 
0003eeb2 l       .debug_str	00000000 
0003eeee l       .debug_str	00000000 
0003ef0d l       .debug_str	00000000 
0003ef47 l       .debug_str	00000000 
0003ef82 l       .debug_str	00000000 
0003efbe l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0003efd8 l       .debug_str	00000000 
0003f014 l       .debug_str	00000000 
0003f021 l       .debug_str	00000000 
00057d0d l       .debug_str	00000000 
0003f05f l       .debug_str	00000000 
0003f0a5 l       .debug_str	00000000 
0003f12d l       .debug_str	00000000 
0003f146 l       .debug_str	00000000 
0003f1a0 l       .debug_str	00000000 
0003f1e6 l       .debug_str	00000000 
0003f1fe l       .debug_str	00000000 
0003f27e l       .debug_str	00000000 
0003f752 l       .debug_str	00000000 
0003f28e l       .debug_str	00000000 
0003f2cd l       .debug_str	00000000 
0003f30d l       .debug_str	00000000 
0003f397 l       .debug_str	00000000 
0003f3ae l       .debug_str	00000000 
0003f3ff l       .debug_str	00000000 
0003f40d l       .debug_str	00000000 
0003f412 l       .debug_str	00000000 
0003f46d l       .debug_str	00000000 
0003fe27 l       .debug_str	00000000 
0003f4c4 l       .debug_str	00000000 
0003f4f7 l       .debug_str	00000000 
0003f53e l       .debug_str	00000000 
0003f578 l       .debug_str	00000000 
0003f5a7 l       .debug_str	00000000 
0003f625 l       .debug_str	00000000 
0003f6a9 l       .debug_str	00000000 
0003f736 l       .debug_str	00000000 
0003f74b l       .debug_str	00000000 
0003f75b l       .debug_str	00000000 
0003f7a7 l       .debug_str	00000000 
0003f7ec l       .debug_str	00000000 
0003f883 l       .debug_str	00000000 
0003f89f l       .debug_str	00000000 
0003f8e6 l       .debug_str	00000000 
0003f914 l       .debug_str	00000000 
0003f94d l       .debug_str	00000000 
0003f96f l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
0003f9ed l       .debug_str	00000000 
0003fa6d l       .debug_str	00000000 
0003faac l       .debug_str	00000000 
0003fb36 l       .debug_str	00000000 
0003fb82 l       .debug_str	00000000 
0003fba0 l       .debug_str	00000000 
0003fbab l       .debug_str	00000000 
0003fc0d l       .debug_str	00000000 
0003fc64 l       .debug_str	00000000 
0003fcf1 l       .debug_str	00000000 
0003fd3d l       .debug_str	00000000 
0003fdd4 l       .debug_str	00000000 
0003fe1e l       .debug_str	00000000 
0003fe3a l       .debug_str	00000000 
0003fe94 l       .debug_str	00000000 
0003fe9d l       .debug_str	00000000 
0003fefc l       .debug_str	00000000 
0003ff53 l       .debug_str	00000000 
0003ffac l       .debug_str	00000000 
0003ffc1 l       .debug_str	00000000 
0004000e l       .debug_str	00000000 
00040059 l       .debug_str	00000000 
0004006c l       .debug_str	00000000 
0000b97b l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
000400b7 l       .debug_str	00000000 
000400cc l       .debug_str	00000000 
000400d8 l       .debug_str	00000000 
0004011d l       .debug_str	00000000 
00040176 l       .debug_str	00000000 
0004018b l       .debug_str	00000000 
000401d8 l       .debug_str	00000000 
00040223 l       .debug_str	00000000 
00040236 l       .debug_str	00000000 
00040281 l       .debug_str	00000000 
00040294 l       .debug_str	00000000 
000402f8 l       .debug_str	00000000 
00040331 l       .debug_str	00000000 
0004035d l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
00059147 l       .debug_str	00000000 
000403dc l       .debug_str	00000000 
000403e2 l       .debug_str	00000000 
000403eb l       .debug_str	00000000 
00040423 l       .debug_str	00000000 
00040440 l       .debug_str	00000000 
0004047c l       .debug_str	00000000 
00040499 l       .debug_str	00000000 
000404f5 l       .debug_str	00000000 
0004052d l       .debug_str	00000000 
00040589 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
000405c1 l       .debug_str	00000000 
000405ff l       .debug_str	00000000 
0004061b l       .debug_str	00000000 
00040671 l       .debug_str	00000000 
000406d8 l       .debug_str	00000000 
00040710 l       .debug_str	00000000 
0004071c l       .debug_str	00000000 
00040783 l       .debug_str	00000000 
000407c2 l       .debug_str	00000000 
000407d3 l       .debug_str	00000000 
0004080c l       .debug_str	00000000 
0004e7b4 l       .debug_str	00000000 
00040827 l       .debug_str	00000000 
00040863 l       .debug_str	00000000 
0004085c l       .debug_str	00000000 
0004086c l       .debug_str	00000000 
0004087e l       .debug_str	00000000 
000408c9 l       .debug_str	00000000 
000408e1 l       .debug_str	00000000 
000408eb l       .debug_str	00000000 
00040902 l       .debug_str	00000000 
00040911 l       .debug_str	00000000 
00040953 l       .debug_str	00000000 
0004096c l       .debug_str	00000000 
000409e0 l       .debug_str	00000000 
000409ef l       .debug_str	00000000 
00040a28 l       .debug_str	00000000 
00040a3e l       .debug_str	00000000 
00040a7e l       .debug_str	00000000 
00040a89 l       .debug_str	00000000 
00040b08 l       .debug_str	00000000 
000588c0 l       .debug_str	00000000 
00040b27 l       .debug_str	00000000 
00040b3c l       .debug_str	00000000 
00040b46 l       .debug_str	00000000 
00007471 l       .debug_str	00000000 
00040b4b l       .debug_str	00000000 
00040b7c l       .debug_str	00000000 
00040b8f l       .debug_str	00000000 
00040b99 l       .debug_str	00000000 
00040bb6 l       .debug_str	00000000 
00040bf1 l       .debug_str	00000000 
00040c26 l       .debug_str	00000000 
00040c57 l       .debug_str	00000000 
00040c6b l       .debug_str	00000000 
00040c76 l       .debug_str	00000000 
00040c94 l       .debug_str	00000000 
00040ccf l       .debug_str	00000000 
00040d05 l       .debug_str	00000000 
00040d36 l       .debug_str	00000000 
00040d4a l       .debug_str	00000000 
00040d55 l       .debug_str	00000000 
00040d73 l       .debug_str	00000000 
00040dae l       .debug_str	00000000 
00040de4 l       .debug_str	00000000 
00040e15 l       .debug_str	00000000 
00040e29 l       .debug_str	00000000 
00040e34 l       .debug_str	00000000 
00040e52 l       .debug_str	00000000 
00040e8d l       .debug_str	00000000 
00040ec3 l       .debug_str	00000000 
00040ef4 l       .debug_str	00000000 
00045741 l       .debug_str	00000000 
00040f09 l       .debug_str	00000000 
00040f15 l       .debug_str	00000000 
00040f34 l       .debug_str	00000000 
00040f6f l       .debug_str	00000000 
00040fa6 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00040fea l       .debug_str	00000000 
00040ff4 l       .debug_str	00000000 
00041011 l       .debug_str	00000000 
0004104c l       .debug_str	00000000 
00041081 l       .debug_str	00000000 
000410b2 l       .debug_str	00000000 
000410c6 l       .debug_str	00000000 
000410d1 l       .debug_str	00000000 
000410ef l       .debug_str	00000000 
0004112a l       .debug_str	00000000 
00041160 l       .debug_str	00000000 
00041191 l       .debug_str	00000000 
000411a5 l       .debug_str	00000000 
00041214 l       .debug_str	00000000 
0004124f l       .debug_str	00000000 
00041298 l       .debug_str	00000000 
000412dd l       .debug_str	00000000 
00041339 l       .debug_str	00000000 
00041382 l       .debug_str	00000000 
000413c7 l       .debug_str	00000000 
00041423 l       .debug_str	00000000 
0004146c l       .debug_str	00000000 
000414b1 l       .debug_str	00000000 
0004150d l       .debug_str	00000000 
00041518 l       .debug_str	00000000 
00041536 l       .debug_str	00000000 
00041571 l       .debug_str	00000000 
000415a7 l       .debug_str	00000000 
000415d8 l       .debug_str	00000000 
000415ec l       .debug_str	00000000 
000415f7 l       .debug_str	00000000 
00041615 l       .debug_str	00000000 
00041650 l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
000416f5 l       .debug_str	00000000 
00041730 l       .debug_str	00000000 
00041761 l       .debug_str	00000000 
00041776 l       .debug_str	00000000 
0004177b l       .debug_str	00000000 
00041787 l       .debug_str	00000000 
000417a6 l       .debug_str	00000000 
000417e1 l       .debug_str	00000000 
00041818 l       .debug_str	00000000 
00041887 l       .debug_str	00000000 
000418c3 l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
0004190c l       .debug_str	00000000 
00041917 l       .debug_str	00000000 
0004195e l       .debug_str	00000000 
00041968 l       .debug_str	00000000 
000419ea l       .debug_str	00000000 
00041a07 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00041a62 l       .debug_str	00000000 
00041abc l       .debug_str	00000000 
00041ac9 l       .debug_str	00000000 
00041b3b l       .debug_str	00000000 
00041b9f l       .debug_str	00000000 
00041baa l       .debug_str	00000000 
00041c23 l       .debug_str	00000000 
00041c2f l       .debug_str	00000000 
00041cab l       .debug_str	00000000 
00041cb1 l       .debug_str	00000000 
00041cb8 l       .debug_str	00000000 
00041cf4 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00041d3d l       .debug_str	00000000 
00041d81 l       .debug_str	00000000 
00041dcc l       .debug_str	00000000 
00041e0b l       .debug_str	00000000 
00041e30 l       .debug_str	00000000 
00041e86 l       .debug_str	00000000 
00041ef4 l       .debug_str	00000000 
00041f74 l       .debug_str	00000000 
00041fe1 l       .debug_str	00000000 
0004206c l       .debug_str	00000000 
000420e0 l       .debug_str	00000000 
00042120 l       .debug_str	00000000 
000421a1 l       .debug_str	00000000 
000421e2 l       .debug_str	00000000 
00042246 l       .debug_str	00000000 
000422f5 l       .debug_str	00000000 
0004233f l       .debug_str	00000000 
0004238c l       .debug_str	00000000 
000423d2 l       .debug_str	00000000 
000423dc l       .debug_str	00000000 
00042415 l       .debug_str	00000000 
00042444 l       .debug_str	00000000 
000424a5 l       .debug_str	00000000 
000424d4 l       .debug_str	00000000 
00042511 l       .debug_str	00000000 
000425a0 l       .debug_str	00000000 
000425d5 l       .debug_str	00000000 
0004265b l       .debug_str	00000000 
000426e1 l       .debug_str	00000000 
00042735 l       .debug_str	00000000 
000427be l       .debug_str	00000000 
00006b25 l       .debug_str	00000000 
0004280c l       .debug_str	00000000 
0004289a l       .debug_str	00000000 
000428ee l       .debug_str	00000000 
0004292d l       .debug_str	00000000 
00042978 l       .debug_str	00000000 
000429fa l       .debug_str	00000000 
00042a16 l       .debug_str	00000000 
00042a6f l       .debug_str	00000000 
00042ac8 l       .debug_str	00000000 
00042b05 l       .debug_str	00000000 
00042b46 l       .debug_str	00000000 
00042ba7 l       .debug_str	00000000 
00042c18 l       .debug_str	00000000 
00042c48 l       .debug_str	00000000 
00042c8e l       .debug_str	00000000 
00042d00 l       .debug_str	00000000 
00042d94 l       .debug_str	00000000 
00042db8 l       .debug_str	00000000 
00042e34 l       .debug_str	00000000 
00042e6e l       .debug_str	00000000 
00042eb0 l       .debug_str	00000000 
00042f60 l       .debug_str	00000000 
00042f9f l       .debug_str	00000000 
00043042 l       .debug_str	00000000 
0004309e l       .debug_str	00000000 
000430fb l       .debug_str	00000000 
000431a6 l       .debug_str	00000000 
000431df l       .debug_str	00000000 
0004325b l       .debug_str	00000000 
00043293 l       .debug_str	00000000 
0004329f l       .debug_str	00000000 
000432dc l       .debug_str	00000000 
00043334 l       .debug_str	00000000 
00043354 l       .debug_str	00000000 
000433ad l       .debug_str	00000000 
00043406 l       .debug_str	00000000 
0004345f l       .debug_str	00000000 
000434b9 l       .debug_str	00000000 
000434ef l       .debug_str	00000000 
000434ff l       .debug_str	00000000 
0004350e l       .debug_str	00000000 
00043517 l       .debug_str	00000000 
0004354e l       .debug_str	00000000 
0004358a l       .debug_str	00000000 
0004359a l       .debug_str	00000000 
000435f6 l       .debug_str	00000000 
00043658 l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
000436a2 l       .debug_str	00000000 
000436dd l       .debug_str	00000000 
00043702 l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437ab l       .debug_str	00000000 
000437e6 l       .debug_str	00000000 
0004380b l       .debug_str	00000000 
0004386a l       .debug_str	00000000 
000438d3 l       .debug_str	00000000 
000438dc l       .debug_str	00000000 
00043913 l       .debug_str	00000000 
0004396f l       .debug_str	00000000 
000439d1 l       .debug_str	00000000 
00043a30 l       .debug_str	00000000 
00043a8f l       .debug_str	00000000 
00043ac5 l       .debug_str	00000000 
00043ad6 l       .debug_str	00000000 
00043ae6 l       .debug_str	00000000 
00043af0 l       .debug_str	00000000 
00043b28 l       .debug_str	00000000 
00043b85 l       .debug_str	00000000 
00043be8 l       .debug_str	00000000 
00043c33 l       .debug_str	00000000 
00043c6e l       .debug_str	00000000 
00043c94 l       .debug_str	00000000 
00043cf4 l       .debug_str	00000000 
00043d3f l       .debug_str	00000000 
00043d7a l       .debug_str	00000000 
00043da0 l       .debug_str	00000000 
00043e00 l       .debug_str	00000000 
00043e36 l       .debug_str	00000000 
00043e47 l       .debug_str	00000000 
00043e57 l       .debug_str	00000000 
00043e61 l       .debug_str	00000000 
00043e99 l       .debug_str	00000000 
00043ef6 l       .debug_str	00000000 
00043f59 l       .debug_str	00000000 
00043fb9 l       .debug_str	00000000 
00044019 l       .debug_str	00000000 
0004404f l       .debug_str	00000000 
00044060 l       .debug_str	00000000 
00044070 l       .debug_str	00000000 
0004407a l       .debug_str	00000000 
000440b2 l       .debug_str	00000000 
0004410f l       .debug_str	00000000 
00044172 l       .debug_str	00000000 
000441bd l       .debug_str	00000000 
000441f8 l       .debug_str	00000000 
0004421e l       .debug_str	00000000 
0004427e l       .debug_str	00000000 
000442c9 l       .debug_str	00000000 
00044304 l       .debug_str	00000000 
0004432a l       .debug_str	00000000 
0004438a l       .debug_str	00000000 
000443c0 l       .debug_str	00000000 
000443d1 l       .debug_str	00000000 
000443e1 l       .debug_str	00000000 
000443eb l       .debug_str	00000000 
00044423 l       .debug_str	00000000 
00044480 l       .debug_str	00000000 
000444e3 l       .debug_str	00000000 
00044543 l       .debug_str	00000000 
000445a3 l       .debug_str	00000000 
000445d9 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
000445ec l       .debug_str	00000000 
000445fe l       .debug_str	00000000 
0004460a l       .debug_str	00000000 
00044645 l       .debug_str	00000000 
000446a4 l       .debug_str	00000000 
00044709 l       .debug_str	00000000 
0004476b l       .debug_str	00000000 
000447a6 l       .debug_str	00000000 
000447ce l       .debug_str	00000000 
00044830 l       .debug_str	00000000 
0000a118 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
00044866 l       .debug_str	00000000 
000448a1 l       .debug_str	00000000 
000448e1 l       .debug_str	00000000 
000448fe l       .debug_str	00000000 
00044942 l       .debug_str	00000000 
00044963 l       .debug_str	00000000 
000449a3 l       .debug_str	00000000 
000449c0 l       .debug_str	00000000 
00044a04 l       .debug_str	00000000 
00044a25 l       .debug_str	00000000 
00044a87 l       .debug_str	00000000 
00044aee l       .debug_str	00000000 
00044b29 l       .debug_str	00000000 
00044b4c l       .debug_str	00000000 
00044bb2 l       .debug_str	00000000 
00044bed l       .debug_str	00000000 
00044c0f l       .debug_str	00000000 
00044c4a l       .debug_str	00000000 
00044c6e l       .debug_str	00000000 
00044ca9 l       .debug_str	00000000 
00044ccc l       .debug_str	00000000 
00044d07 l       .debug_str	00000000 
00044d2b l       .debug_str	00000000 
00044d66 l       .debug_str	00000000 
00044d89 l       .debug_str	00000000 
00044dc4 l       .debug_str	00000000 
00044de8 l       .debug_str	00000000 
00044e33 l       .debug_str	00000000 
00044e95 l       .debug_str	00000000 
00044ed0 l       .debug_str	00000000 
00044ef3 l       .debug_str	00000000 
00044f3e l       .debug_str	00000000 
00044f79 l       .debug_str	00000000 
00044f9f l       .debug_str	00000000 
00044fda l       .debug_str	00000000 
00045000 l       .debug_str	00000000 
00045051 l       .debug_str	00000000 
0004509f l       .debug_str	00000000 
000450ea l       .debug_str	00000000 
0004511d l       .debug_str	00000000 
00045158 l       .debug_str	00000000 
0004517d l       .debug_str	00000000 
00045209 l       .debug_str	00000000 
0004523d l       .debug_str	00000000 
000452b9 l       .debug_str	00000000 
000452fe l       .debug_str	00000000 
0004534a l       .debug_str	00000000 
000453ad l       .debug_str	00000000 
000453e8 l       .debug_str	00000000 
0004540c l       .debug_str	00000000 
00045447 l       .debug_str	00000000 
0004546e l       .debug_str	00000000 
000454ba l       .debug_str	00000000 
000454f5 l       .debug_str	00000000 
0004551c l       .debug_str	00000000 
00045567 l       .debug_str	00000000 
000455b3 l       .debug_str	00000000 
000455ff l       .debug_str	00000000 
00045630 l       .debug_str	00000000 
00045638 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00045684 l       .debug_str	00000000 
000456b9 l       .debug_str	00000000 
000456e7 l       .debug_str	00000000 
000456f0 l       .debug_str	00000000 
0004573e l       .debug_str	00000000 
00045746 l       .debug_str	00000000 
000457ab l       .debug_str	00000000 
000457fe l       .debug_str	00000000 
0004585e l       .debug_str	00000000 
0004587d l       .debug_str	00000000 
000458e0 l       .debug_str	00000000 
00045902 l       .debug_str	00000000 
0004594d l       .debug_str	00000000 
000459b2 l       .debug_str	00000000 
000459d4 l       .debug_str	00000000 
00045a3d l       .debug_str	00000000 
00045a7a l       .debug_str	00000000 
00045ae3 l       .debug_str	00000000 
00045b73 l       .debug_str	00000000 
00015f59 l       .debug_str	00000000 
00045bd3 l       .debug_str	00000000 
00045c36 l       .debug_str	00000000 
00045c9f l       .debug_str	00000000 
00045cd2 l       .debug_str	00000000 
00045d1a l       .debug_str	00000000 
00045d94 l       .debug_str	00000000 
00045de5 l       .debug_str	00000000 
00045e3c l       .debug_str	00000000 
00008277 l       .debug_str	00000000 
00045e84 l       .debug_str	00000000 
00045ee2 l       .debug_str	00000000 
00045eff l       .debug_str	00000000 
00045f6b l       .debug_str	00000000 
00045fb0 l       .debug_str	00000000 
00045ffe l       .debug_str	00000000 
00046046 l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
000460be l       .debug_str	00000000 
000460fa l       .debug_str	00000000 
0004611d l       .debug_str	00000000 
0004618d l       .debug_str	00000000 
000461d5 l       .debug_str	00000000 
000461de l       .debug_str	00000000 
0004623b l       .debug_str	00000000 
0004629e l       .debug_str	00000000 
000462fe l       .debug_str	00000000 
0004635e l       .debug_str	00000000 
000463ba l       .debug_str	00000000 
00046419 l       .debug_str	00000000 
00046479 l       .debug_str	00000000 
00046494 l       .debug_str	00000000 
000081d5 l       .debug_str	00000000 
000464e8 l       .debug_str	00000000 
00046566 l       .debug_str	00000000 
00046590 l       .debug_str	00000000 
000465f2 l       .debug_str	00000000 
00046653 l       .debug_str	00000000 
000466ad l       .debug_str	00000000 
00046712 l       .debug_str	00000000 
00046764 l       .debug_str	00000000 
000467ac l       .debug_str	00000000 
000467c7 l       .debug_str	00000000 
00046841 l       .debug_str	00000000 
0004688e l       .debug_str	00000000 
00046908 l       .debug_str	00000000 
00046955 l       .debug_str	00000000 
000469a9 l       .debug_str	00000000 
000469fb l       .debug_str	00000000 
00046a63 l       .debug_str	00000000 
00046ac3 l       .debug_str	00000000 
00046b1d l       .debug_str	00000000 
00046b7c l       .debug_str	00000000 
00046bd6 l       .debug_str	00000000 
00046c33 l       .debug_str	00000000 
0001675a l       .debug_str	00000000 
00046c71 l       .debug_str	00000000 
000177d3 l       .debug_str	00000000 
00046cac l       .debug_str	00000000 
00046d1e l       .debug_str	00000000 
00046df1 l       .debug_str	00000000 
00008395 l       .debug_str	00000000 
00046e39 l       .debug_str	00000000 
00046e87 l       .debug_str	00000000 
00046e91 l       .debug_str	00000000 
00046ed9 l       .debug_str	00000000 
00046ee5 l       .debug_str	00000000 
00046f59 l       .debug_str	00000000 
00046f64 l       .debug_str	00000000 
00046fa0 l       .debug_str	00000000 
00046fc7 l       .debug_str	00000000 
00047018 l       .debug_str	00000000 
00047025 l       .debug_str	00000000 
00047033 l       .debug_str	00000000 
00047046 l       .debug_str	00000000 
00047051 l       .debug_str	00000000 
00047093 l       .debug_str	00000000 
000470a8 l       .debug_str	00000000 
00047112 l       .debug_str	00000000 
0004716f l       .debug_str	00000000 
000471cf l       .debug_str	00000000 
0004722f l       .debug_str	00000000 
000472a1 l       .debug_str	00000000 
000472ee l       .debug_str	00000000 
0004734d l       .debug_str	00000000 
000473a7 l       .debug_str	00000000 
0004741a l       .debug_str	00000000 
00047427 l       .debug_str	00000000 
00047487 l       .debug_str	00000000 
000474a6 l       .debug_str	00000000 
0004750e l       .debug_str	00000000 
00047529 l       .debug_str	00000000 
00047581 l       .debug_str	00000000 
000475cb l       .debug_str	00000000 
0004762f l       .debug_str	00000000 
0004764e l       .debug_str	00000000 
000476b0 l       .debug_str	00000000 
00047716 l       .debug_str	00000000 
00047796 l       .debug_str	00000000 
000477e5 l       .debug_str	00000000 
0004785b l       .debug_str	00000000 
000478d1 l       .debug_str	00000000 
000479a6 l       .debug_str	00000000 
00047a03 l       .debug_str	00000000 
00047a61 l       .debug_str	00000000 
00047ae1 l       .debug_str	00000000 
00047b50 l       .debug_str	00000000 
00047bce l       .debug_str	00000000 
00047c21 l       .debug_str	00000000 
00047c86 l       .debug_str	00000000 
00047ce6 l       .debug_str	00000000 
00047d54 l       .debug_str	00000000 
00047dec l       .debug_str	00000000 
00047e7b l       .debug_str	00000000 
00047f09 l       .debug_str	00000000 
00047f97 l       .debug_str	00000000 
000480a7 l       .debug_str	00000000 
0004811b l       .debug_str	00000000 
0004815d l       .debug_str	00000000 
000481a6 l       .debug_str	00000000 
00048200 l       .debug_str	00000000 
00048279 l       .debug_str	00000000 
00048286 l       .debug_str	00000000 
0004828b l       .debug_str	00000000 
000482f7 l       .debug_str	00000000 
0004833e l       .debug_str	00000000 
000483c8 l       .debug_str	00000000 
000483e7 l       .debug_str	00000000 
00048471 l       .debug_str	00000000 
00048495 l       .debug_str	00000000 
000484d9 l       .debug_str	00000000 
0004853d l       .debug_str	00000000 
00048581 l       .debug_str	00000000 
000485f3 l       .debug_str	00000000 
000486b1 l       .debug_str	00000000 
00048713 l       .debug_str	00000000 
000487ab l       .debug_str	00000000 
0004885a l       .debug_str	00000000 
000488f0 l       .debug_str	00000000 
00048983 l       .debug_str	00000000 
000489c7 l       .debug_str	00000000 
00048a1a l       .debug_str	00000000 
00048a9e l       .debug_str	00000000 
00048b2c l       .debug_str	00000000 
00048b80 l       .debug_str	00000000 
00048b91 l       .debug_str	00000000 
00048c16 l       .debug_str	00000000 
00048ca2 l       .debug_str	00000000 
00048cab l       .debug_str	00000000 
00048cb8 l       .debug_str	00000000 
00048d0f l       .debug_str	00000000 
00048d94 l       .debug_str	00000000 
00048de6 l       .debug_str	00000000 
00048df5 l       .debug_str	00000000 
00048e3c l       .debug_str	00000000 
00048ea0 l       .debug_str	00000000 
00048ec1 l       .debug_str	00000000 
00048f41 l       .debug_str	00000000 
00048fac l       .debug_str	00000000 
0004902a l       .debug_str	00000000 
00049079 l       .debug_str	00000000 
000490d8 l       .debug_str	00000000 
00049170 l       .debug_str	00000000 
00049216 l       .debug_str	00000000 
000492ac l       .debug_str	00000000 
00049336 l       .debug_str	00000000 
000493ac l       .debug_str	00000000 
000493f5 l       .debug_str	00000000 
00049451 l       .debug_str	00000000 
000494cc l       .debug_str	00000000 
00049538 l       .debug_str	00000000 
000495c2 l       .debug_str	00000000 
00049606 l       .debug_str	00000000 
00049667 l       .debug_str	00000000 
000496ab l       .debug_str	00000000 
0004972f l       .debug_str	00000000 
000497b9 l       .debug_str	00000000 
0004980b l       .debug_str	00000000 
00049889 l       .debug_str	00000000 
0004990e l       .debug_str	00000000 
00049965 l       .debug_str	00000000 
000499e6 l       .debug_str	00000000 
00049aa4 l       .debug_str	00000000 
00049b03 l       .debug_str	00000000 
00049b66 l       .debug_str	00000000 
00049b8b l       .debug_str	00000000 
00049bef l       .debug_str	00000000 
00049c10 l       .debug_str	00000000 
00049c90 l       .debug_str	00000000 
00049cfb l       .debug_str	00000000 
00049d79 l       .debug_str	00000000 
00049dc8 l       .debug_str	00000000 
00049e27 l       .debug_str	00000000 
00049ebf l       .debug_str	00000000 
00049f65 l       .debug_str	00000000 
00049ffb l       .debug_str	00000000 
0004a085 l       .debug_str	00000000 
0004a0fb l       .debug_str	00000000 
0004a144 l       .debug_str	00000000 
0004a1a0 l       .debug_str	00000000 
0004a21b l       .debug_str	00000000 
0004a287 l       .debug_str	00000000 
0004a311 l       .debug_str	00000000 
0004a355 l       .debug_str	00000000 
0004a3b6 l       .debug_str	00000000 
0004a3fa l       .debug_str	00000000 
0004a47e l       .debug_str	00000000 
0004a508 l       .debug_str	00000000 
0004a586 l       .debug_str	00000000 
0004a60b l       .debug_str	00000000 
0004a662 l       .debug_str	00000000 
0004a6e3 l       .debug_str	00000000 
0004a7a1 l       .debug_str	00000000 
0004a800 l       .debug_str	00000000 
0004a833 l       .debug_str	00000000 
0004a866 l       .debug_str	00000000 
0004a899 l       .debug_str	00000000 
0004a8cc l       .debug_str	00000000 
0004a8ff l       .debug_str	00000000 
0004a932 l       .debug_str	00000000 
0004a965 l       .debug_str	00000000 
0004a9b9 l       .debug_str	00000000 
0004a9e7 l       .debug_str	00000000 
0004aa3b l       .debug_str	00000000 
0005d418 l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
0004aa4e l       .debug_str	00000000 
0004aa52 l       .debug_str	00000000 
0004aa56 l       .debug_str	00000000 
0004aa5a l       .debug_str	00000000 
0004aa61 l       .debug_str	00000000 
0004aa66 l       .debug_str	00000000 
0004aa96 l       .debug_str	00000000 
0004aae8 l       .debug_str	00000000 
0004ab29 l       .debug_str	00000000 
0004ab36 l       .debug_str	00000000 
0004ab75 l       .debug_str	00000000 
0004ab80 l       .debug_str	00000000 
0004abbc l       .debug_str	00000000 
0004abca l       .debug_str	00000000 
0004abfe l       .debug_str	00000000 
0004ac39 l       .debug_str	00000000 
0004ac77 l       .debug_str	00000000 
0004ac85 l       .debug_str	00000000 
0004acbe l       .debug_str	00000000 
0004acc8 l       .debug_str	00000000 
0004ad04 l       .debug_str	00000000 
0004ad60 l       .debug_str	00000000 
0004ad67 l       .debug_str	00000000 
0004adc5 l       .debug_str	00000000 
0004adce l       .debug_str	00000000 
0004ae35 l       .debug_str	00000000 
0004ae46 l       .debug_str	00000000 
0004aea3 l       .debug_str	00000000 
0004af02 l       .debug_str	00000000 
0004af5e l       .debug_str	00000000 
0004afbc l       .debug_str	00000000 
0004b023 l       .debug_str	00000000 
0004b080 l       .debug_str	00000000 
0004b0df l       .debug_str	00000000 
0004b118 l       .debug_str	00000000 
0004b122 l       .debug_str	00000000 
0004b18a l       .debug_str	00000000 
0004b1bd l       .debug_str	00000000 
0004b1c7 l       .debug_str	00000000 
0004b1fd l       .debug_str	00000000 
0004b209 l       .debug_str	00000000 
0004b240 l       .debug_str	00000000 
0004b24d l       .debug_str	00000000 
0004b291 l       .debug_str	00000000 
0004b2ab l       .debug_str	00000000 
0004b31c l       .debug_str	00000000 
0004b32f l       .debug_str	00000000 
0004b3a0 l       .debug_str	00000000 
0004b3e3 l       .debug_str	00000000 
0004b3ed l       .debug_str	00000000 
0004b437 l       .debug_str	00000000 
0004b47e l       .debug_str	00000000 
0004b4cb l       .debug_str	00000000 
0004b515 l       .debug_str	00000000 
0004b547 l       .debug_str	00000000 
0004b550 l       .debug_str	00000000 
0004b584 l       .debug_str	00000000 
0004b5bd l       .debug_str	00000000 
0004b5f9 l       .debug_str	00000000 
0004b60b l       .debug_str	00000000 
0004b64c l       .debug_str	00000000 
0004b6ab l       .debug_str	00000000 
0004b6dc l       .debug_str	00000000 
0004b6f2 l       .debug_str	00000000 
0004b727 l       .debug_str	00000000 
0004b784 l       .debug_str	00000000 
0004b7e8 l       .debug_str	00000000 
0004b847 l       .debug_str	00000000 
0004b8a7 l       .debug_str	00000000 
0004b905 l       .debug_str	00000000 
00021dd5 l       .debug_str	00000000 
0004b96a l       .debug_str	00000000 
0004b9b0 l       .debug_str	00000000 
0004b9f0 l       .debug_str	00000000 
0004ba78 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0004baff l       .debug_str	00000000 
0004bb32 l       .debug_str	00000000 
0004bba6 l       .debug_str	00000000 
0004bc1f l       .debug_str	00000000 
0004bc93 l       .debug_str	00000000 
0004bcf2 l       .debug_str	00000000 
0004bd4f l       .debug_str	00000000 
0004bda9 l       .debug_str	00000000 
0004be05 l       .debug_str	00000000 
0004be62 l       .debug_str	00000000 
0004bec1 l       .debug_str	00000000 
0004bf29 l       .debug_str	00000000 
0004bf93 l       .debug_str	00000000 
0004bffc l       .debug_str	00000000 
0004c05a l       .debug_str	00000000 
0004c0cc l       .debug_str	00000000 
0004c0d0 l       .debug_str	00000000 
0004c143 l       .debug_str	00000000 
0004c1a1 l       .debug_str	00000000 
0004c1fd l       .debug_str	00000000 
0004c26e l       .debug_str	00000000 
0004c2e4 l       .debug_str	00000000 
0004c31b l       .debug_str	00000000 
0004c377 l       .debug_str	00000000 
0004c3cb l       .debug_str	00000000 
0004c429 l       .debug_str	00000000 
0004c495 l       .debug_str	00000000 
0004c4ea l       .debug_str	00000000 
0004c51d l       .debug_str	00000000 
0004c52b l       .debug_str	00000000 
0004c563 l       .debug_str	00000000 
0004c576 l       .debug_str	00000000 
0004c5ab l       .debug_str	00000000 
0004c5e1 l       .debug_str	00000000 
0004c63c l       .debug_str	00000000 
0004c66f l       .debug_str	00000000 
0004c676 l       .debug_str	00000000 
0004c6b8 l       .debug_str	00000000 
0004c6e9 l       .debug_str	00000000 
0004c71a l       .debug_str	00000000 
0004c74d l       .debug_str	00000000 
0004c754 l       .debug_str	00000000 
0004c781 l       .debug_str	00000000 
0004c7bc l       .debug_str	00000000 
0004c7cf l       .debug_str	00000000 
0004c800 l       .debug_str	00000000 
0004c80a l       .debug_str	00000000 
0004c86b l       .debug_str	00000000 
0004c8d3 l       .debug_str	00000000 
0004c910 l       .debug_str	00000000 
0004c95e l       .debug_str	00000000 
0004c99a l       .debug_str	00000000 
0004c9d6 l       .debug_str	00000000 
0004ca0f l       .debug_str	00000000 
0004ca49 l       .debug_str	00000000 
0004ca82 l       .debug_str	00000000 
0004cab9 l       .debug_str	00000000 
0004caf2 l       .debug_str	00000000 
0004cb2c l       .debug_str	00000000 
0004cb72 l       .debug_str	00000000 
0004cb95 l       .debug_str	00000000 
0004cbdb l       .debug_str	00000000 
0004cbfe l       .debug_str	00000000 
0004cc47 l       .debug_str	00000000 
0004cc6d l       .debug_str	00000000 
0004ccb6 l       .debug_str	00000000 
0004ccdc l       .debug_str	00000000 
0004cd26 l       .debug_str	00000000 
0004cd4d l       .debug_str	00000000 
0004cd97 l       .debug_str	00000000 
0004cdbe l       .debug_str	00000000 
0004ce0b l       .debug_str	00000000 
0004ce35 l       .debug_str	00000000 
0004ce82 l       .debug_str	00000000 
0004ceac l       .debug_str	00000000 
0004cedf l       .debug_str	00000000 
0004cf0b l       .debug_str	00000000 
0004cf61 l       .debug_str	00000000 
0004cf8c l       .debug_str	00000000 
0004cfe4 l       .debug_str	00000000 
0004d03a l       .debug_str	00000000 
0004d073 l       .debug_str	00000000 
0004d07e l       .debug_str	00000000 
0000bbb5 l       .debug_str	00000000 
0004d0b7 l       .debug_str	00000000 
0004d0de l       .debug_str	00000000 
0004d117 l       .debug_str	00000000 
0004d15e l       .debug_str	00000000 
0004d16b l       .debug_str	00000000 
0004d385 l       .debug_str	00000000 
0004d19a l       .debug_str	00000000 
0004d1da l       .debug_str	00000000 
0004d1ee l       .debug_str	00000000 
0004d230 l       .debug_str	00000000 
0004d261 l       .debug_str	00000000 
0004d291 l       .debug_str	00000000 
0004d2c2 l       .debug_str	00000000 
0004d2f3 l       .debug_str	00000000 
0004d32a l       .debug_str	00000000 
0004d335 l       .debug_str	00000000 
0004d375 l       .debug_str	00000000 
0004d389 l       .debug_str	00000000 
0004d3c5 l       .debug_str	00000000 
0004d3d5 l       .debug_str	00000000 
0004d40a l       .debug_str	00000000 
0004d414 l       .debug_str	00000000 
0004d449 l       .debug_str	00000000 
0004d453 l       .debug_str	00000000 
0004d4a8 l       .debug_str	00000000 
0004d4f0 l       .debug_str	00000000 
0004d536 l       .debug_str	00000000 
0004d57d l       .debug_str	00000000 
0004d5c6 l       .debug_str	00000000 
0004d618 l       .debug_str	00000000 
0004d66a l       .debug_str	00000000 
0004d708 l       .debug_str	00000000 
0004d73a l       .debug_str	00000000 
0004d773 l       .debug_str	00000000 
0004d788 l       .debug_str	00000000 
0004d7c3 l       .debug_str	00000000 
0004d7da l       .debug_str	00000000 
0004d818 l       .debug_str	00000000 
0004d832 l       .debug_str	00000000 
0004d894 l       .debug_str	00000000 
0004d8b9 l       .debug_str	00000000 
0004d914 l       .debug_str	00000000 
0004d923 l       .debug_str	00000000 
0004d998 l       .debug_str	00000000 
0004d9b5 l       .debug_str	00000000 
0004d9ef l       .debug_str	00000000 
0004da2c l       .debug_str	00000000 
0004da37 l       .debug_str	00000000 
0004da6f l       .debug_str	00000000 
0004da76 l       .debug_str	00000000 
0004daf5 l       .debug_str	00000000 
0004db55 l       .debug_str	00000000 
0004dbb3 l       .debug_str	00000000 
0004dc11 l       .debug_str	00000000 
0004dc49 l       .debug_str	00000000 
0004dc7e l       .debug_str	00000000 
0004dca9 l       .debug_str	00000000 
0004dcb3 l       .debug_str	00000000 
0004dce3 l       .debug_str	00000000 
0004dcf1 l       .debug_str	00000000 
0004dd4a l       .debug_str	00000000 
0004dd9d l       .debug_str	00000000 
0004de19 l       .debug_str	00000000 
0004de7d l       .debug_str	00000000 
0004dee1 l       .debug_str	00000000 
0004df17 l       .debug_str	00000000 
0004df2b l       .debug_str	00000000 
0004df6c l       .debug_str	00000000 
0004df84 l       .debug_str	00000000 
0004e038 l       .debug_str	00000000 
0004e06b l       .debug_str	00000000 
0004e07c l       .debug_str	00000000 
0004e0c2 l       .debug_str	00000000 
0004e0cf l       .debug_str	00000000 
0004e10c l       .debug_str	00000000 
0004e150 l       .debug_str	00000000 
0004e191 l       .debug_str	00000000 
0004e1d3 l       .debug_str	00000000 
0004e1dd l       .debug_str	00000000 
0004e221 l       .debug_str	00000000 
0004e22c l       .debug_str	00000000 
0004e27a l       .debug_str	00000000 
0004e2c8 l       .debug_str	00000000 
0004e30e l       .debug_str	00000000 
0004e356 l       .debug_str	00000000 
0004e39e l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
0004e405 l       .debug_str	00000000 
0004e45e l       .debug_str	00000000 
0004e4c8 l       .debug_str	00000000 
00003fb8 l       .debug_str	00000000 
0004e532 l       .debug_str	00000000 
0004e5ad l       .debug_str	00000000 
0004e622 l       .debug_str	00000000 
0004e62d l       .debug_str	00000000 
0004e6a2 l       .debug_str	00000000 
0004e6ad l       .debug_str	00000000 
0004e704 l       .debug_str	00000000 
0004e768 l       .debug_str	00000000 
0004e774 l       .debug_str	00000000 
0004e7b1 l       .debug_str	00000000 
0004e7be l       .debug_str	00000000 
0004e7f2 l       .debug_str	00000000 
0004e82d l       .debug_str	00000000 
0004e889 l       .debug_str	00000000 
0004e8e4 l       .debug_str	00000000 
0004e93e l       .debug_str	00000000 
00035378 l       .debug_str	00000000 
0004e984 l       .debug_str	00000000 
0004e9ea l       .debug_str	00000000 
0004ea21 l       .debug_str	00000000 
0004ea29 l       .debug_str	00000000 
0004ea61 l       .debug_str	00000000 
0004ea6a l       .debug_str	00000000 
0004eaa2 l       .debug_str	00000000 
0004eaab l       .debug_str	00000000 
0004eae2 l       .debug_str	00000000 
0004eaea l       .debug_str	00000000 
0004eb22 l       .debug_str	00000000 
0004eb2b l       .debug_str	00000000 
0004eb63 l       .debug_str	00000000 
0004eb6c l       .debug_str	00000000 
0004eba3 l       .debug_str	00000000 
0004ebab l       .debug_str	00000000 
0004ec25 l       .debug_str	00000000 
0004ec9f l       .debug_str	00000000 
0004ed19 l       .debug_str	00000000 
0004ed95 l       .debug_str	00000000 
00007b0f l       .debug_str	00000000 
0004edf3 l       .debug_str	00000000 
0004ee52 l       .debug_str	00000000 
0004eeb1 l       .debug_str	00000000 
0004ef10 l       .debug_str	00000000 
0004ef70 l       .debug_str	00000000 
0004efce l       .debug_str	00000000 
0004f02d l       .debug_str	00000000 
0004f08c l       .debug_str	00000000 
0004f0eb l       .debug_str	00000000 
0004f14b l       .debug_str	00000000 
0004f1a0 l       .debug_str	00000000 
0004f1f5 l       .debug_str	00000000 
0004f24f l       .debug_str	00000000 
0004f2a9 l       .debug_str	00000000 
0004f2e3 l       .debug_str	00000000 
0004f2ec l       .debug_str	00000000 
0004f326 l       .debug_str	00000000 
0004f32f l       .debug_str	00000000 
0004f36c l       .debug_str	00000000 
00036863 l       .debug_str	00000000 
0004f3a5 l       .debug_str	00000000 
0004f406 l       .debug_str	00000000 
0004f464 l       .debug_str	00000000 
0004f4a5 l       .debug_str	00000000 
0004f4e3 l       .debug_str	00000000 
0004f51c l       .debug_str	00000000 
0004f55b l       .debug_str	00000000 
0004f599 l       .debug_str	00000000 
0004f5d7 l       .debug_str	00000000 
0004f618 l       .debug_str	00000000 
0004f65c l       .debug_str	00000000 
0004f699 l       .debug_str	00000000 
0004f6ff l       .debug_str	00000000 
0004f766 l       .debug_str	00000000 
0004f7c9 l       .debug_str	00000000 
0004f82b l       .debug_str	00000000 
0004f890 l       .debug_str	00000000 
0004f8f9 l       .debug_str	00000000 
0004f95f l       .debug_str	00000000 
0004f9c5 l       .debug_str	00000000 
0004fa20 l       .debug_str	00000000 
0004fa87 l       .debug_str	00000000 
0004faf2 l       .debug_str	00000000 
0004fb4d l       .debug_str	00000000 
0004fba8 l       .debug_str	00000000 
0001685e l       .debug_str	00000000 
0004fbef l       .debug_str	00000000 
0004fc37 l       .debug_str	00000000 
0004fc7f l       .debug_str	00000000 
0004fcc7 l       .debug_str	00000000 
0004fd10 l       .debug_str	00000000 
0004fd5a l       .debug_str	00000000 
0004fda1 l       .debug_str	00000000 
0004fdf4 l       .debug_str	00000000 
0004fe0f l       .debug_str	00000000 
0004fe57 l       .debug_str	00000000 
0004feab l       .debug_str	00000000 
0004fef3 l       .debug_str	00000000 
0004ff47 l       .debug_str	00000000 
0004ff8f l       .debug_str	00000000 
0004ffe3 l       .debug_str	00000000 
0005002c l       .debug_str	00000000 
00050081 l       .debug_str	00000000 
000500cb l       .debug_str	00000000 
00050123 l       .debug_str	00000000 
00050185 l       .debug_str	00000000 
000501e4 l       .debug_str	00000000 
00050244 l       .debug_str	00000000 
000502a4 l       .debug_str	00000000 
00050304 l       .debug_str	00000000 
00050365 l       .debug_str	00000000 
000503c4 l       .debug_str	00000000 
00050424 l       .debug_str	00000000 
00050484 l       .debug_str	00000000 
000504e4 l       .debug_str	00000000 
00050545 l       .debug_str	00000000 
000505a2 l       .debug_str	00000000 
000505fd l       .debug_str	00000000 
00050653 l       .debug_str	00000000 
000506b1 l       .debug_str	00000000 
00050705 l       .debug_str	00000000 
00050766 l       .debug_str	00000000 
000507cc l       .debug_str	00000000 
00050834 l       .debug_str	00000000 
0005089b l       .debug_str	00000000 
000508f7 l       .debug_str	00000000 
00050958 l       .debug_str	00000000 
000509b2 l       .debug_str	00000000 
00050a0c l       .debug_str	00000000 
00050a6a l       .debug_str	00000000 
00050abe l       .debug_str	00000000 
00050b3a l       .debug_str	00000000 
00050ba3 l       .debug_str	00000000 
00050c1f l       .debug_str	00000000 
00050c9b l       .debug_str	00000000 
00050d04 l       .debug_str	00000000 
00050d80 l       .debug_str	00000000 
00050ded l       .debug_str	00000000 
00050e47 l       .debug_str	00000000 
00050ea0 l       .debug_str	00000000 
00050ef8 l       .debug_str	00000000 
00050f57 l       .debug_str	00000000 
00050fb6 l       .debug_str	00000000 
00051015 l       .debug_str	00000000 
00051075 l       .debug_str	00000000 
000510d5 l       .debug_str	00000000 
00051135 l       .debug_str	00000000 
00051195 l       .debug_str	00000000 
000511f7 l       .debug_str	00000000 
00051259 l       .debug_str	00000000 
000512ba l       .debug_str	00000000 
0005131c l       .debug_str	00000000 
0005137e l       .debug_str	00000000 
000513df l       .debug_str	00000000 
00051441 l       .debug_str	00000000 
000514a3 l       .debug_str	00000000 
000368a7 l       .debug_str	00000000 
000514ec l       .debug_str	00000000 
00051538 l       .debug_str	00000000 
00051540 l       .debug_str	00000000 
0005158a l       .debug_str	00000000 
000515d5 l       .debug_str	00000000 
000515dc l       .debug_str	00000000 
00051627 l       .debug_str	00000000 
00051672 l       .debug_str	00000000 
000516be l       .debug_str	00000000 
00051708 l       .debug_str	00000000 
00051755 l       .debug_str	00000000 
000517a0 l       .debug_str	00000000 
000517ec l       .debug_str	00000000 
00051838 l       .debug_str	00000000 
00051884 l       .debug_str	00000000 
000518d1 l       .debug_str	00000000 
0005191b l       .debug_str	00000000 
00051968 l       .debug_str	00000000 
000519b3 l       .debug_str	00000000 
000519ff l       .debug_str	00000000 
00051a4b l       .debug_str	00000000 
00051a97 l       .debug_str	00000000 
00051ae4 l       .debug_str	00000000 
00051b2e l       .debug_str	00000000 
00051b7b l       .debug_str	00000000 
00051bc6 l       .debug_str	00000000 
00051c12 l       .debug_str	00000000 
00051c5e l       .debug_str	00000000 
00051caa l       .debug_str	00000000 
00051cf7 l       .debug_str	00000000 
00051d42 l       .debug_str	00000000 
00051d90 l       .debug_str	00000000 
00051ddc l       .debug_str	00000000 
00051e29 l       .debug_str	00000000 
00051e76 l       .debug_str	00000000 
00051ec3 l       .debug_str	00000000 
00051f11 l       .debug_str	00000000 
00051f5c l       .debug_str	00000000 
00051fa7 l       .debug_str	00000000 
00051ff3 l       .debug_str	00000000 
0005203f l       .debug_str	00000000 
0005208c l       .debug_str	00000000 
000520d8 l       .debug_str	00000000 
00052125 l       .debug_str	00000000 
00052172 l       .debug_str	00000000 
000521d1 l       .debug_str	00000000 
0005222e l       .debug_str	00000000 
0005228a l       .debug_str	00000000 
000522e8 l       .debug_str	00000000 
00052345 l       .debug_str	00000000 
000523a3 l       .debug_str	00000000 
00052400 l       .debug_str	00000000 
0005245e l       .debug_str	00000000 
000524bb l       .debug_str	00000000 
0005251a l       .debug_str	00000000 
00052578 l       .debug_str	00000000 
000525d9 l       .debug_str	00000000 
0005263a l       .debug_str	00000000 
0005269d l       .debug_str	00000000 
000526ce l       .debug_str	00000000 
000526d6 l       .debug_str	00000000 
00052739 l       .debug_str	00000000 
0005279c l       .debug_str	00000000 
00052800 l       .debug_str	00000000 
00052864 l       .debug_str	00000000 
000528c8 l       .debug_str	00000000 
0005292c l       .debug_str	00000000 
0005298f l       .debug_str	00000000 
000529f2 l       .debug_str	00000000 
00052a56 l       .debug_str	00000000 
00052aba l       .debug_str	00000000 
00052b1e l       .debug_str	00000000 
00052b82 l       .debug_str	00000000 
00052bb3 l       .debug_str	00000000 
00052bbb l       .debug_str	00000000 
00052c1f l       .debug_str	00000000 
00052c83 l       .debug_str	00000000 
00052ce7 l       .debug_str	00000000 
00052d4b l       .debug_str	00000000 
00052dab l       .debug_str	00000000 
00052e0b l       .debug_str	00000000 
00052e39 l       .debug_str	00000000 
00052e42 l       .debug_str	00000000 
00052ea3 l       .debug_str	00000000 
00052f04 l       .debug_str	00000000 
00052f65 l       .debug_str	00000000 
00052fc6 l       .debug_str	00000000 
0005301d l       .debug_str	00000000 
00053070 l       .debug_str	00000000 
000530b8 l       .debug_str	00000000 
000530e0 l       .debug_str	00000000 
00053128 l       .debug_str	00000000 
0005313e l       .debug_str	00000000 
00053186 l       .debug_str	00000000 
000531bb l       .debug_str	00000000 
00053203 l       .debug_str	00000000 
0005323e l       .debug_str	00000000 
00053286 l       .debug_str	00000000 
000532ce l       .debug_str	00000000 
000532ef l       .debug_str	00000000 
00053337 l       .debug_str	00000000 
00053342 l       .debug_str	00000000 
0005338a l       .debug_str	00000000 
000533c7 l       .debug_str	00000000 
0005340f l       .debug_str	00000000 
00053468 l       .debug_str	00000000 
000534b0 l       .debug_str	00000000 
000534cc l       .debug_str	00000000 
00053514 l       .debug_str	00000000 
000535c0 l       .debug_str	00000000 
00053608 l       .debug_str	00000000 
00053626 l       .debug_str	00000000 
0005366e l       .debug_str	00000000 
00053678 l       .debug_str	00000000 
000536c0 l       .debug_str	00000000 
000536fb l       .debug_str	00000000 
00053743 l       .debug_str	00000000 
00053792 l       .debug_str	00000000 
000537da l       .debug_str	00000000 
00053801 l       .debug_str	00000000 
00053849 l       .debug_str	00000000 
00053873 l       .debug_str	00000000 
000538bb l       .debug_str	00000000 
00053936 l       .debug_str	00000000 
0005397e l       .debug_str	00000000 
000539c6 l       .debug_str	00000000 
000539dc l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00053a24 l       .debug_str	00000000 
00053a6c l       .debug_str	00000000 
00053ab4 l       .debug_str	00000000 
00053ae5 l       .debug_str	00000000 
00053b2d l       .debug_str	00000000 
00053b91 l       .debug_str	00000000 
00053bd9 l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
00053c21 l       .debug_str	00000000 
00053c69 l       .debug_str	00000000 
00053c76 l       .debug_str	00000000 
00053cbe l       .debug_str	00000000 
00053cc8 l       .debug_str	00000000 
00053d10 l       .debug_str	00000000 
00053d19 l       .debug_str	00000000 
00053d61 l       .debug_str	00000000 
00053d89 l       .debug_str	00000000 
00053dd1 l       .debug_str	00000000 
00053e19 l       .debug_str	00000000 
00053e3b l       .debug_str	00000000 
00053e83 l       .debug_str	00000000 
00053eb4 l       .debug_str	00000000 
00053efc l       .debug_str	00000000 
00053f44 l       .debug_str	00000000 
00053f7c l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ff9 l       .debug_str	00000000 
00054041 l       .debug_str	00000000 
0005406a l       .debug_str	00000000 
000540b2 l       .debug_str	00000000 
000540d6 l       .debug_str	00000000 
0005411e l       .debug_str	00000000 
00054143 l       .debug_str	00000000 
0005418b l       .debug_str	00000000 
000541a8 l       .debug_str	00000000 
000541f0 l       .debug_str	00000000 
000541fb l       .debug_str	00000000 
00054243 l       .debug_str	00000000 
0005426b l       .debug_str	00000000 
000542b3 l       .debug_str	00000000 
000542c2 l       .debug_str	00000000 
0005430a l       .debug_str	00000000 
00054352 l       .debug_str	00000000 
0005436e l       .debug_str	00000000 
000543b6 l       .debug_str	00000000 
0005442d l       .debug_str	00000000 
00054475 l       .debug_str	00000000 
000544ec l       .debug_str	00000000 
00054534 l       .debug_str	00000000 
0005453d l       .debug_str	00000000 
00054585 l       .debug_str	00000000 
000545ab l       .debug_str	00000000 
000545f3 l       .debug_str	00000000 
00054626 l       .debug_str	00000000 
0005466e l       .debug_str	00000000 
0005468b l       .debug_str	00000000 
000546d3 l       .debug_str	00000000 
000546dc l       .debug_str	00000000 
00054724 l       .debug_str	00000000 
0005476c l       .debug_str	00000000 
00054790 l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000547d8 l       .debug_str	00000000 
00054820 l       .debug_str	00000000 
00054868 l       .debug_str	00000000 
00054960 l       .debug_str	00000000 
00008225 l       .debug_str	00000000 
000549a8 l       .debug_str	00000000 
000549f0 l       .debug_str	00000000 
00054a38 l       .debug_str	00000000 
00054a65 l       .debug_str	00000000 
00016039 l       .debug_str	00000000 
00054aad l       .debug_str	00000000 
00054af5 l       .debug_str	00000000 
00054b52 l       .debug_str	00000000 
00054b9a l       .debug_str	00000000 
00054ba3 l       .debug_str	00000000 
00054beb l       .debug_str	00000000 
00054c08 l       .debug_str	00000000 
00054c50 l       .debug_str	00000000 
00054c86 l       .debug_str	00000000 
00054cce l       .debug_str	00000000 
00054d03 l       .debug_str	00000000 
00054d4b l       .debug_str	00000000 
00054d84 l       .debug_str	00000000 
00054dcc l       .debug_str	00000000 
00054de8 l       .debug_str	00000000 
00054e30 l       .debug_str	00000000 
00054e38 l       .debug_str	00000000 
00054e80 l       .debug_str	00000000 
00054e9b l       .debug_str	00000000 
00054ee3 l       .debug_str	00000000 
00054f0b l       .debug_str	00000000 
00054f55 l       .debug_str	00000000 
00054f9f l       .debug_str	00000000 
00054ffe l       .debug_str	00000000 
0005505b l       .debug_str	00000000 
000550b4 l       .debug_str	00000000 
00055113 l       .debug_str	00000000 
00055172 l       .debug_str	00000000 
000551d3 l       .debug_str	00000000 
00055236 l       .debug_str	00000000 
0005529e l       .debug_str	00000000 
00055300 l       .debug_str	00000000 
00055366 l       .debug_str	00000000 
000553c8 l       .debug_str	00000000 
0005542d l       .debug_str	00000000 
00055490 l       .debug_str	00000000 
000554ec l       .debug_str	00000000 
00055543 l       .debug_str	00000000 
0005559c l       .debug_str	00000000 
000555ef l       .debug_str	00000000 
0005564b l       .debug_str	00000000 
000556b1 l       .debug_str	00000000 
00055707 l       .debug_str	00000000 
00055764 l       .debug_str	00000000 
000557c6 l       .debug_str	00000000 
0005581f l       .debug_str	00000000 
0005587a l       .debug_str	00000000 
000558d5 l       .debug_str	00000000 
00055930 l       .debug_str	00000000 
0005598d l       .debug_str	00000000 
000559ea l       .debug_str	00000000 
00055a30 l       .debug_str	00000000 
00055a7a l       .debug_str	00000000 
00055aba l       .debug_str	00000000 
00055af7 l       .debug_str	00000000 
00055b3b l       .debug_str	00000000 
00055b77 l       .debug_str	00000000 
00055bbb l       .debug_str	00000000 
00055c04 l       .debug_str	00000000 
00055c0d l       .debug_str	00000000 
00055c56 l       .debug_str	00000000 
00055c5f l       .debug_str	00000000 
00055cc8 l       .debug_str	00000000 
00055d25 l       .debug_str	00000000 
00055d88 l       .debug_str	00000000 
00055dde l       .debug_str	00000000 
00055e34 l       .debug_str	00000000 
00055e8d l       .debug_str	00000000 
00055ee5 l       .debug_str	00000000 
00055f49 l       .debug_str	00000000 
00055fcf l       .debug_str	00000000 
00055fd5 l       .debug_str	00000000 
0005605b l       .debug_str	00000000 
00056061 l       .debug_str	00000000 
000560e3 l       .debug_str	00000000 
00056165 l       .debug_str	00000000 
000561e8 l       .debug_str	00000000 
000561ef l       .debug_str	00000000 
00056272 l       .debug_str	00000000 
00056279 l       .debug_str	00000000 
000562ff l       .debug_str	00000000 
00056385 l       .debug_str	00000000 
00056408 l       .debug_str	00000000 
0005648b l       .debug_str	00000000 
0005650d l       .debug_str	00000000 
00056593 l       .debug_str	00000000 
00056619 l       .debug_str	00000000 
000566a3 l       .debug_str	00000000 
0005672b l       .debug_str	00000000 
000567b3 l       .debug_str	00000000 
0005681b l       .debug_str	00000000 
00056884 l       .debug_str	00000000 
000568ee l       .debug_str	00000000 
00056959 l       .debug_str	00000000 
000569b7 l       .debug_str	00000000 
00056a15 l       .debug_str	00000000 
00056a73 l       .debug_str	00000000 
00056ad2 l       .debug_str	00000000 
00056b30 l       .debug_str	00000000 
00056b8f l       .debug_str	00000000 
00056bed l       .debug_str	00000000 
00056c4c l       .debug_str	00000000 
00056cab l       .debug_str	00000000 
00056d0a l       .debug_str	00000000 
00056d68 l       .debug_str	00000000 
00056dc7 l       .debug_str	00000000 
00056e26 l       .debug_str	00000000 
00056e85 l       .debug_str	00000000 
00056ee4 l       .debug_str	00000000 
00056f43 l       .debug_str	00000000 
00056fa2 l       .debug_str	00000000 
00057001 l       .debug_str	00000000 
00057060 l       .debug_str	00000000 
000570bf l       .debug_str	00000000 
0005711e l       .debug_str	00000000 
0005717d l       .debug_str	00000000 
000571dc l       .debug_str	00000000 
0005723b l       .debug_str	00000000 
0005729a l       .debug_str	00000000 
000572f9 l       .debug_str	00000000 
00057358 l       .debug_str	00000000 
000573b7 l       .debug_str	00000000 
00057416 l       .debug_str	00000000 
00057475 l       .debug_str	00000000 
000574d5 l       .debug_str	00000000 
00057534 l       .debug_str	00000000 
00057593 l       .debug_str	00000000 
000575f2 l       .debug_str	00000000 
00057652 l       .debug_str	00000000 
000576b1 l       .debug_str	00000000 
00057710 l       .debug_str	00000000 
0005776f l       .debug_str	00000000 
000577cf l       .debug_str	00000000 
000169c8 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
000189e8 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
000189f2 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
0001706e l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00018096 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016f68 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00017018 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00017590 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00016978 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
000169dc l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
00020a2c l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00020aa7 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00020c98 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
00020000 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00017042 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00017048 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
0001703c l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
0001697a l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00018a00 l     F .text	00000024 __semihost
00018a24 l     F .text	00000010 debugger_connected
00018a34 l     F .text	0000002e semihost_write
00018b08 l     F .text	0000001c semihosting_console_write_ch
20007704 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20007708 l     O .bss	00000010 avail_queue
20007718 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20007724 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00018cd8 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00018d2c l     F .text	00000050 hal_gpio_irq_handler
00018d7c l     F .text	0000002c hal_gpio_irq_setup
00018da8 l     F .text	0000001c hal_gpio_find_empty_slot
00018dc4 l     F .text	00000038 hal_gpio_find_pin
20007728 l     O .bss	00000040 hal_gpio_irqs
20007768 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00018f58 l     F .text	0000007a hal_i2c_delay_us
00018fd4 l     F .text	00000024 hal_i2c_resolve
00018ff8 l     F .text	0000001c hal_i2c_convert_status
00019014 l     F .text	00000012 read_gpio_inbuffer
00019026 l     F .text	000000a2 hal_i2c_clear_bus
00021100 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
000193c4 l     F .text	0000006e nrf52_irqm_handler
0001944c l     F .text	00000014 hal_spi_stop_transfer
00019460 l     F .text	0000004c hal_spi_config_slave
000194ac l     F .text	000000b8 hal_spi_init_master
00019564 l     F .text	000000e0 hal_spi_config_master
00021108 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00019948 l     F .text	0000000e nrf52_hal_wdt_default_handler
00019958 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00019b70 l     F .text	00000016 os_main
20007870 l     O .bss	00002000 g_os_main_stack
20007770 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00019e80 l     F .text	0000005c os_dev_add
00019edc l     F .text	00000026 os_dev_initialize
00019f02 l     F .text	00000020 os_dev_init
20009870 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20009878 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001a42c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001a540 l     F .text	00000010 os_msys_find_biggest_pool
0001a550 l     F .text	0000002c os_msys_find_pool
0001a5c8 l     F .text	00000044 os_msys_init_once
20009888 l     O .bss	00004900 os_msys_1_data
2000e188 l     O .bss	0000000c os_msys_1_mbuf_pool
2000e194 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001a824 l     F .text	00000020 os_sanity_check_list_lock
0001a844 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001acb8 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001ada8 l     F .text	0000004c os_deltatime
0001adf4 l     F .text	0000005c os_time_tick
2000e1b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001b110 l       .text	00000000 SVC_User
0001b12e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001b1d0 l       .text	00000000 test1
0001b1c4 l       .text	00000000 loop1
0001b1d6 l       .text	00000000 res1
0001b1f2 l       .text	00000000 test2
0001b1fa l       .text	00000000 done
0001b1e6 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b206 l       .text	00000000 test1
0001b202 l       .text	00000000 loop1
0001b214 l       .text	00000000 test2
0001b210 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b27e l     F .text	000000c0 ui2a
0001b33e l     F .text	00000020 i2a
0001b35e l     F .text	00000030 a2d
0001b38e l     F .text	00000036 a2i
0001b3c4 l     F .text	0000002a putf
0001b3f0 l     F .text	0000011c putchw
0001b50c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b890 l     F .text	00000004 stdin_read
0001b894 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b944 l     F .text	00000028 nrf52k_flash_wait_ready
0001b96c l     F .text	00000054 nrf52k_flash_erase_sector
0001b9c0 l     F .text	00000004 nrf52k_flash_init
0001b9c4 l     F .text	00000020 nrf52k_flash_sector_info
0001b9e4 l     F .text	000000d0 nrf52k_flash_write
0001bab4 l     F .text	0000000e nrf52k_flash_read
000212c0 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001bac4 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001bcd0 l     F .text	0000000a nrf_read_timer_cntr
0001bcdc l     F .text	000000b4 nrf_timer_set_ocmp
0001bd90 l     F .text	0000000a nrf_timer_disable_ocmp
0001bd9a l     F .text	0000000a nrf_rtc_disable_ocmp
0001bda4 l     F .text	00000054 hal_timer_read_bsptimer
0001bdf8 l     F .text	00000076 hal_timer_chk_queue
0001be6e l     F .text	0000002c hal_timer_irq_handler
000212dc l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001c034 l     F .text	00000034 nrf52_periph_create_timers
0001c068 l     F .text	00000020 nrf52_periph_create_i2c
0001c088 l     F .text	00000020 nrf52_periph_create_spi
000212f4 l     O .text	0000000c hal_i2c1_cfg
00021300 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001c0bc l     F .text	00000028 sensor_mgr_remove
0001c0e4 l     F .text	00000060 sensor_mgr_insert
0001c144 l     F .text	0000000a sensor_type_traits_empty
0001c150 l     F .text	0000000c sensor_mgr_evq_set
0001c18a l     F .text	0000005c sensor_read_data_func
0001c1e8 l     F .text	00000048 sensor_base_ts_update_event
0001c230 l     F .text	00000050 sensor_up_timestamp
0001c2b8 l     F .text	000000a0 sensor_mgr_init
0001c524 l     F .text	0000007c sensor_mgr_wakeup_event
0001c382 l     F .text	00000032 sensor_update_nextrun
0001c3b4 l     F .text	0000001e sensor_calc_nextrun_delta
0001c3d4 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001c4ac l     F .text	0000004a sensor_mgr_poll_bytype
0001c4f6 l     F .text	0000002e sensor_poll_per_type_trait
2000e1ec l     O .bss	00000078 sensor_notify_evt_area
2000e264 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000e280 l     O .bss	00000008 oc_sem
2000e288 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000e28c l     O .bss	0000000c hw_id
2000e298 l     O .bss	00000004 hw_id_len
2000e2a0 l     O .bss	00000008 sensor_node_address
2000e2a8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
00021318 l     O .text	0000000c COLLECTOR_NODE_HW_ID
00021324 l     O .text	0000003c SENSOR_NODE_HW_IDS
000213c0 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c748 l     F .text	00000050 config_device
2000e2e0 l     O .bss	00000014 adc_1_itf_temp_stub
2000e2f8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c7f4 l     F .text	00000004 temp_stub_close
0001c7f8 l     F .text	0000001c temp_stub_sensor_get_config
0001c814 l     F .text	00000026 temp_stub_open
0001c8f0 l     F .text	0000007c temp_stub_sensor_read
00021404 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001c994 l     F .text	00000030 oc_buffer_tx
0001c9c4 l     F .text	0000002c oc_buffer_rx
2000e3b8 l     O .bss	00000018 oc_inq
2000e3d0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000e3e8 l     O .bss	000000c8 oc_client_cb_area
2000e4b0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000e4cc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000e4d0 l     O .bss	0000001c oc_rep_objects
2000e4ec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001cb18 l     F .text	00000078 flash_map_read_mfg
2000e51c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001cc6c l     F .text	00000094 mfg_seek_next_aux
0001cd00 l     F .text	00000070 mfg_read_mmr
0001cd70 l     F .text	00000054 mfg_read_next_mmr
0001cdc4 l     F .text	0000003c mfg_open_flash_area
0001ce00 l     F .text	00000044 mfg_read_tlv_body
0001cecc l     F .text	0000004e mfg_read_mmr_refs
2000e594 l     O .bss	00000001 mfg_initialized
2000e598 l     O .bss	00000018 mfg_mmrs
2000e5b0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001cf32 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
000074cf l       .debug_str	00000000 
00007526 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00007572 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000757a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00009aa2 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE
00016b80 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015ba2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
000152ce g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009bee g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E
0001160a g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001a150 g     F .text	00000040 os_eventq_remove
00011da0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0000db5e g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E
00009bac g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17hb422a4f740ac0e1bE
0001af9c g     F .text	00000018 os_arch_init
0001b1b8 g     F .text	00000048 memcmp
0000ebf2 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00016724 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00011ea8 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
0001303e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014eb2 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0000ef62 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00016464 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
000162ec g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00010218 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000fe22 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00016bb0 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
00011d82 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0000f8fe g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014d7e g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00018810 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000e6d0 g     O .bss	0000001c nrf52_hal_timer0
0001511a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000f8e4 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014f90 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001c378 g     F .text	0000000a sensor_unlock
00012996 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
000150be g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00010e92 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00013092 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
000150a2 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00015fba g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
0000f750 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001a870 g     F .text	00000024 os_sanity_check_register
0001c848 g     F .text	0000007c temp_stub_init
0001a910 g     F .text	00000054 os_sched_insert
2000e5b4 g     O .bss	00000001 g_silence_console
000155e8 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00010766 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
000156a0 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
00013336 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001cfd0 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
0001694a g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00009978 g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE
00014e76 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
0001101c g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015d62 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
0000e19c g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E
00012cce g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE
0000f4bc g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00015a28 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
0001845c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
0001695c g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00015332 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
0001578c g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000e316 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
0000f2f2 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001024a g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001ca54 g     F .text	00000020 oc_send_buffer
0001b044 g     F .text	00000030 os_arch_start
00015b12 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
00011e14 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001c66c g     F .text	0000001a is_standalone_node
0001a03c g     F .text	00000010 os_eventq_init
00017a6e g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
000133fe g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017152 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001307c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
0000f5b2 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00016636 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001c5a0 g     F .text	00000028 init_sensor_coap
0001ca74 g     F .text	0000004c oc_send_multicast_message
00015d72 g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012f4a g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE
0000e918 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00017a2a g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000e6f0 g     O .bss	00000034 sensor_mgr
00018ba4 g     F .text	0000002c console_dump
0001aa3c g     F .text	00000078 os_sched_wakeup
000132c6 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
000185f0 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
0000f32a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001cf30 g     F .text	00000002 _fini
00019e74 g     F .text	0000000a os_cputime_get32
00013142 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000fcc4 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000e5b5 g     O .bss	00000001 g_console_input_ignore
00009b7a g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE
0001af2c g     F .text	00000014 os_arch_ctx_sw
0001330c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00012e08 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E
0001545c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001b17a g     F .text	0000000c SysTick_Handler
0001c5e0 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000ed0e g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
000130a8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0001016c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
0000dd6a g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E
00013340 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b252 g     F .text	0000001c strcmp
00015d3e g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000e5e8 g     O .bss	00000050 g_idle_task
0001a02c g     F .text	00000010 os_dev_reset
00016816 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
00010294 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001ab8c g     F .text	00000010 os_sem_init
0000e004 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E
0001337e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
00018b24 g     F .text	00000070 console_printhex
00010244 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
000214c4 g       .text	00000000 __exidx_start
0001c650 g     F .text	0000001c is_collector_node
00010716 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0000dca2 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE
0001b21a g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00018340 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
000133ee g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
00018ab4 g     F .text	00000054 console_buffer
0001a04c g     F .text	0000000a os_eventq_inited
00018cec g     F .text	0000000c sysinit_end
0001629a g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00016b28 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000e788 g       .bss	00000000 __HeapBase
00015638 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
00015586 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00010118 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00011de6 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000fdf6 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014efa g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001cbd0 g     F .text	00000026 flash_area_read
000132f6 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001cae6 g     F .text	00000002 oc_register_ip4
0000f808 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001cae8 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00012d5a g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE
0001cf50 g     F .text	00000028 hal_flash_init
00019ff4 g     F .text	00000036 os_dev_close
0002145c g     O .text	00000048 sysflash_map_dflt
00009c0a g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E
0001b938 g     F .text	0000000c hal_bsp_init
0000da72 g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E
0000f3d6 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011f54 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000ea14 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00015fe8 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E
00012db0 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E
00011234 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000e8da g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001d32c g     F .text	00000004 __aeabi_memcpy4
00015e8e g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
00019790 g     F .text	0000002c hal_spi_set_txrx_cb
0001d324 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000e5b8 g     O .bss	00000004 console_is_midline
0001d324 g     F .text	00000006 __aeabi_memclr4
000094b4 g     F .text	00000118 .hidden _ZN3app5chip88on_start17hf865f4cce3d1fe15E
00011dd6 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
00019288 g     F .text	0000013c hal_i2c_master_read
00015720 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001b570 g     F .text	0000025c tfp_format
00016606 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001c444 g     F .text	00000068 sensor_read
00012d12 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E
0000f8ca g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001512a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015c96 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001d32c g     F .text	00000004 __aeabi_memcpy
0001d32c g     F .text	00000004 __aeabi_memcpy8
2000e724 g     O .bss	00000020 st_up_osco
0001b074 g     F .text	0000005c os_arch_os_start
0001c426 g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
0001ae9c g     F .text	00000026 os_time_delay
0001513a g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001cae4 g     F .text	00000002 oc_register_gatt
00012f5e g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E
20006a50 g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001cfcc g     F .text	00000004 hal_bsp_hw_id_len
00019e34 g     F .text	00000034 os_callout_wakeup_ticks
00012ff2 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h8a25dee97102e103E
0001a1aa g     F .text	00000026 os_mqueue_get
000190c8 g     F .text	00000098 hal_i2c_init
000178fc g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00018340 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001eff8 g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0000e498 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00012f36 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E
00012534 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000165d6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001ab3c g     F .text	00000022 os_sched
0000f4ce g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000e39c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000ea5a g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
00011e64 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001c15c g     F .text	0000002e sensor_mgr_match_bytype
0000e92e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00015040 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
00012b18 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001a678 g     F .text	00000014 os_mutex_init
0000f7bc g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
000115c6 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000e5c0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
000157b0 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0000eb3a g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00016546 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000ffa8 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
000100ee g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
0000f3ce g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
000134ea g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001a61c g     F .text	00000028 os_msys_get_pkthdr
0001c8c4 g     F .text	0000002c temp_stub_get_raw_temperature
0001aab4 g     F .text	0000003c os_sched_os_timer_exp
00019f24 g     F .text	00000040 os_dev_create
00011df8 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000167a0 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
0001638c g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001a860 g     F .text	00000010 os_sanity_check_init
00016c12 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00019e68 g     F .text	0000000c os_cputime_init
0001a138 g     F .text	00000018 os_eventq_run
0000eeee g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001a644 g     F .text	00000034 os_msys_init
00015fc2 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016310 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
00016170 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001af22 g     F .text	0000000a timer_handler
0000e2a0 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
0001694e g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
0001007e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f408 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00015072 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00016946 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00016bf0 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
000125d4 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
000185f0 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00015214 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001b7cc g     F .text	00000008 vfprintf
00014c08 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000ea86 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001320c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a24a g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000165a6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00017dfe g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011ecc g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00016b84 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001af52 g     F .text	0000000a os_arch_in_critical
0000dfca g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E
0001568c g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001a900 g     F .text	00000010 os_sanity_init
00012c38 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE
00015fae g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
0001523e g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
000185f0 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
000150dc g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
00019a14 g     F .text	0000004c __assert_func
00016378 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
0001597e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0001525c g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001a4ea g     F .text	0000001e os_memblock_put_from_cb
0001b0d4 g     F .text	00000014 os_set_env
2000e6ac g     O .bss	00000004 g_os_last_ctx_sw_time
00013352 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00018c84 g     F .text	00000048 console_printf
00013368 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
00012a68 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000e95a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00013212 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
000164e6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001b0e8 g     F .text	00000006 os_arch_init_task_stack
0001cebc g     F .text	00000010 mfg_open
000185f0 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00009b82 g     F .text	0000002a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE
0001ca18 g     F .text	00000030 oc_ri_mem_init
00010d82 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001b928 g     F .text	00000010 hal_bsp_flash_dev
0001cbf8 g     F .text	00000070 flash_map_init
2000e6c0 g     O .bss	00000004 g_os_time
00015028 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
000109f0 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001b186 g     F .text	0000001e os_default_irq_asm
00019a60 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
000196c8 g     F .text	00000068 hal_spi_disable
00015e64 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000f89c g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001caea g     F .text	00000002 oc_register_lora
0001845c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001a2cc g     F .text	000000a8 os_mbuf_append
0001c798 g     F .text	0000005c temp_stub_create
0001cf78 g     F .text	00000054 hal_flash_read
00018a64 g     F .text	00000048 console_flush
000166f8 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
0001508a g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00019cb4 g     F .text	0000001a os_start
0001beac g     F .text	00000060 hal_timer_init
000130bc g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001b8a4 g     F .text	00000010 rust_sysinit
0000e218 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE
00008164  w    F .text	00000002 I2S_IRQHandler
00018b94 g     F .text	00000010 console_printint
0001ab60 g     F .text	0000002c os_sched_resort
0002129c g     O .text	00000008 MemFile_methods
0001b878 g     F .text	00000018 fmemopen_w
0001415e g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00019644 g     F .text	00000038 hal_spi_config
0001d320  w    F .text	00000002 .hidden __aeabi_ldiv0
0001a530 g     F .text	00000010 os_mempool_module_init
0001ab30 g     F .text	0000000c os_sched_next_task
00015e08 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
00011e2e g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00018e82 g     F .text	00000034 hal_gpio_read
00019d08 g     F .text	0000001a os_callout_init
0001a60c g     F .text	00000010 os_msys_reset
00009a48 g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E
0001b7d4 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001d024 g     F .text	00000000 .hidden __aeabi_uldivmod
0000ddb8 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E
0001aec4 g     F .text	00000038 os_gettimeofday
00018c10 g     F .text	0000001e console_write
00016696 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000178c6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
0000dde4 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E
00010e7e g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00019b94 g     F .text	00000070 os_init_idle_task
0001afb4 g     F .text	0000008c os_arch_os_init
00010502 g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
000100b6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00019c04 g     F .text	000000b0 os_init
2000e698 g     O .bss	00000008 g_os_mempool_list
00010e74 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011e3e g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000e970 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000df32 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E
00018c0c g     F .text	00000004 semihosting_console_init
0001ce56 g     F .text	0000001a mfg_seek_next_with_type
0001a744 g     F .text	000000e0 os_mutex_pend
000133ae g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00018e60 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0000de10 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE
0000ea52 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000eaba g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001cf1c g     F .text	00000014 __wrap_coap_receive
00016516 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000e5bc g     O .bss	00000001 sysinit_active
0001340e g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014d54 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001b848 g     F .text	0000002e memfile_write
0001d320  w    F .text	00000002 .hidden __aeabi_idiv0
00015f82 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
00019b88 g     F .text	0000000c os_started
00015c02 g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001c9f0 g     F .text	00000028 oc_buffer_init
0000fe24 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0001009a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000e6a0 g     O .bss	0000000c g_os_sanity_check_mu
0000f90e g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000e03c g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE
0001d324 g     F .text	00000006 __aeabi_memclr
000087d2 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E
0001d330 g     F .text	0000009a __aeabi_memset4
00013576 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000178ce g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00016710 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000dfb6 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E
0001ae5c g     F .text	00000040 os_time_advance
0001967c g     F .text	0000004c hal_spi_enable
0000e282 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE
0001ce84 g     F .text	00000038 mfg_init
0000f944 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000e638 g     O .bss	00000050 g_os_main_task
0000dd24 g     F .text	00000030 _ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E
0001d330 g     F .text	0000009a __aeabi_memset8
0001839e g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f3c2 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
000214dc g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20006a54 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00016f10 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
0000f350 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00018904 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00018cf8 g     F .text	00000034 NVIC_Relocate
00018ce0 g     F .text	0000000c sysinit_start
00015f6a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00015f9a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
000212a8 g     O .text	00000018 nrf52k_flash_dev
0001601e g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E
0001bf0c g     F .text	000000f8 hal_timer_config
00015010 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014e2a g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001b834 g     F .text	00000014 vprintf
0000f7ee g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00018aac g     F .text	00000008 disable_buffer
0000dcea g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE
2000e688 g     O .bss	00000004 g_os_started
00016b78 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014fd0 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
00019f90 g     F .text	00000020 os_dev_lookup
00015b72 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
0000ff9c g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0000e100 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE
000199f0 g     F .text	00000010 hal_watchdog_enable
2000e6c4 g     O .bss	0000000c g_hal_os_tick
0001af4c g     F .text	00000006 os_arch_restore_sr
00019d60 g     F .text	00000078 os_callout_reset
00010e88 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001ce70 g     F .text	0000000a mfg_read_tlv_flash_area
000133ca g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016826 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E
00015f54 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001a198 g     F .text	00000012 os_mqueue_init
0000e52a g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00016576 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00012ffa g     F .text	00000012 _ZN4core3mem4swap17h9f9b2c00c891c39bE
00015838 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000dd54 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE
0001c83a g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00019d24 g     F .text	0000003c os_callout_stop
000157d6 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a294 g     F .text	00000024 os_mbuf_free_chain
00009ab6 g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E
0000f93a g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001b8b4 g     F .text	00000030 mem_init_mbuf_pool
0000f4b4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0001335c g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00019160 g     F .text	00000128 hal_i2c_master_write
00015bd2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00013558 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000e72e g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000d896 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E
00015d00 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001a190 g     F .text	00000008 os_eventq_dflt_get
0001c360 g     F .text	00000018 sensor_lock
00013054 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00012e2a g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E
00018c38 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001a2b8 g     F .text	00000014 os_mbuf_len
0001a280 g     F .text	00000014 os_mbuf_free
000106b8 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00015166 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000e944 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
0000eefa g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00018c2e g     F .text	00000008 console_blocking_mode
000104f6 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
00015fd0 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE
00011e74 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00011360 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00013068 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001c0a8 g     F .text	00000010 nrf52_periph_create
00015c54 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001a894 g     F .text	0000006c os_sanity_run
00009d84 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E
0000dd86 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00016076 g     F .text	00000042 _ZN4core3ptr4read17h10ae8fa070723038E
00014c1c g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014e8e g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
000167ba g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0001a4a4 g     F .text	00000014 os_mempool_init
000212a4 g     O .text	00000004 stdout
00012bc8 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00019f64 g     F .text	0000002c os_dev_initialize_all
0000f4ee g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014fb0 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
0001633a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00012be4 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E
00012d38 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE
00019af8 g     F .text	00000078 os_idle_task
0000f5a2 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0001647c g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00011db8 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
000166e4 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
0001117e g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000d97a g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE
000175c4 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001cb90 g     F .text	00000040 flash_area_open
00015e22 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015c4a g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014ed6 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
0000d8de g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E
00008164 g     F .text	00000002 Default_Handler
00016b76 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000ffc2 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001a57c g     F .text	0000004c os_msys_register
00015e4a g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
0000fe7a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000e1b0 g     O .bss	00000004 g_os_sanity_check_list
000129cc g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000ea90 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000de20 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E
0000e66a g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00019730 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c29c g     F .text	00000010 sensor_mgr_unlock
2000e780 g     O .bss	00000004 flash_map_entries
000182e2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0000dcbc g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E
00016486 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
00015598 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001caec g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
000162fe g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
00015ad2 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
00012600 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
0001022e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
0001527a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000ec04 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001ce44 g     F .text	00000012 mfg_seek_next
0000d9d0 g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E
0001588a g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015b42 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000ef04 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
000152a4 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00017334 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001a20e g     F .text	0000000a os_mbuf_pool_init
2000e690 g     O .bss	00000008 g_callout_list
0001a9a0 g     F .text	0000000c os_sched_set_current_task
00019dd8 g     F .text	0000005c os_callout_tick
0000e28c g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E
0000fe96 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0000eb6c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000166ce g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00019978 g     F .text	00000078 hal_watchdog_init
2000e6b4 g     O .bss	00000001 g_task_id
000186c6 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
00011e5c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00019fb0 g     F .text	00000044 os_dev_open
2000e6b0 g     O .bss	00000004 g_current_task
00016942 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000163f8 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
0000f3b6 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000e240 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E
0000965a g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E
00019434 g     F .text	00000018 nrf52_spi0_irq_handler
0001c358 g     F .text	00000008 sensor_pkg_init
0000dd98 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E
0001c96c g     F .text	00000028 temp_stub_config
0001a1d0 g     F .text	0000003e os_mqueue_put
00018904 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
000197bc g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001a994 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001322e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001cc68 g     F .text	00000002 modlog_init
00012f94 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E
00015522 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015c0c g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00019868 g     F .text	000000e0 hal_spi_txrx_noblock
00016af0 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
000178d6 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000f8da g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0000f72c g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001a964 g     F .text	00000030 os_sched_ctx_sw_hook
00009cdc g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E
0001c3f8 g     F .text	0000002e sensor_mgr_register
00016b28 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00012e7c g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E
00017174 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000fe0c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000ff12 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00016792 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
0000f5aa g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000e90c g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001a218 g     F .text	00000032 os_mbuf_get
0000966a g     F .text	0000030e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E
2000e6b8 g     O .bss	00000008 g_os_task_list
0000f1a6 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00016e3e g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001b7f8 g     F .text	0000003a vsnprintf
0000ddaa g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E
0001402a g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00012c78 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E
0001a68c g     F .text	000000b8 os_mutex_release
0000ef0c g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00012c50 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E
0000ecc0 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c2ac g     F .text	0000000c sensor_mgr_evq_get
00012f70 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E
0000d8ba g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E
0001257c g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000ea6e g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
000156b4 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
0000dbd8 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E
2000e68c g     O .bss	00000004 g_os_idle_ctr
00018dfc g     F .text	0000002c hal_gpio_init_in
0000ea0a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010faa g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001c0b8 g     F .text	00000002 sensor_dev_create
0000e57c g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000f15a g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00018e28 g     F .text	00000038 hal_gpio_init_out
0000f5cc g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0000e69e g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000166c6 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00015dfe g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
00010196 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001ae50 g     F .text	0000000c os_time_get
00016b78 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
00011d14 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001a508 g     F .text	00000026 os_memblock_put
000140ba g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001a9ac g     F .text	00000090 os_sched_sleep
0000ea48 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c280 g     F .text	0000001c sensor_mgr_lock
0001d054 g     F .text	000002cc .hidden __udivmoddi4
00013074 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001bc30 g     F .text	000000a0 os_tick_init
00014dd8 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00016b72 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
0000f84e g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001aaf0 g     F .text	00000040 os_sched_wakeup_ticks
00016364 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
0000dc92 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE
000100d2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001c004 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00018f30 g     F .text	00000028 hal_gpio_irq_enable
0001300c g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE
0001ca48 g     F .text	0000000c oc_evq_set
0001c5c8 g     F .text	00000018 is_sensor_node
00009d32 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E
000182e2 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001cac0 g     F .text	00000024 oc_init
0001851a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001851a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00010db8 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
00017ab2 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
000160e2 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000e748 g     O .bss	00000018 sensor_base_ts
00018810 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
000214dc g       .ARM.exidx	00000000 __etext
00012cf0 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E
0001839e g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00018ccc g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000f892 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00015396 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001acd0 g     F .text	000000d8 os_task_init
00011e9e g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000f7c6 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0000e650 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000ea38 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000167d4 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00016666 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0000df6a g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E
0001ab9c g     F .text	00000064 os_sem_release
0001d330 g     F .text	0000009a __aeabi_memset
0001a374 g     F .text	000000b8 os_mbuf_dup
0001b134 g     F .text	00000046 PendSV_Handler
0001b0ee g     F .text	00000046 SVC_Handler
0001af40 g     F .text	0000000c os_arch_save_sr
00014ff0 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
00009650 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E
0000815c  w    F .text	00000002 UsageFault_Handler
0001be9c g     F .text	00000010 nrf52_timer0_irq_handler
0001af5c g     F .text	00000040 os_arch_task_stack_init
0000d954 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE
2000e788 g       .bss	00000000 __bss_end__
0001a4b8 g     F .text	00000032 os_memblock_get
2000e784 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
000161d4 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
0000e768 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00013148 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00019a00 g     F .text	00000014 hal_watchdog_tickle
00011da8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015ae2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
0001a0be g     F .text	0000007a os_eventq_get
0001d004 g     F .text	00000020 sprintf
0001aefc g     F .text	00000026 os_time_ms_to_ticks
0000f16a g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00009bda g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E
000166ca g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
00012a32 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000e1e8 g     O .bss	00000004 os_flags
0001caf0 g     F .text	00000028 oc_rep_init
0001b200 g     F .text	0000001a memcpy
0000e066 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E
0001b8e4 g     F .text	00000044 sysinit_app
00015d34 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
0001610c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
000164b6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00018740 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000f954 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
000132e0 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00018bd0 g     F .text	0000003c console_out_nolock
2000e760 g     O .bss	00000020 oc_transports
00018eb8 g     F .text	00000078 hal_gpio_irq_init
000150fa g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b26e g     F .text	00000010 strlen
0001ac00 g     F .text	000000b8 os_sem_pend
0000e2bc g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001bb98 g     F .text	00000098 os_tick_idle
00013326 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
0001347c g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015d1a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
00019cd0 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
00010142 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000e60a g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
00011d68 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
000158d4 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000fcc0 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001851a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014c9a g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0000d8ce g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE
0001a056 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015662 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00010fe0 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000e486 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00015574 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001ce7a g     F .text	0000000a mfg_read_tlv_mmr_ref
0000f39e g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
00012e4c g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E
0001c688 g     F .text	000000c0 sensor_network_init
0001851a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00012bd6 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE
000160b8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000f44a g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
00013396 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001b0ef 	.word	0x0001b0ef
	...
    8058:	0001b135 	.word	0x0001b135
    805c:	0001b17b 	.word	0x0001b17b
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000e788 	.word	0x2000e788
    ldr    r1, =__etext
    8138:	000214dc 	.word	0x000214dc
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000e788 	.word	0x2000e788
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 fbc3 	bl	18cf8 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fafe 	bl	19c04 <os_init>
    os_start();
    8608:	f011 fb54 	bl	19cb4 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f006 fd9f 	bl	f15a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f007 fe39 	bl	10294 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24d 31ca 	movw	r1, #54218	; 0xd3ca
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24d 4300 	movw	r3, #54272	; 0xd400
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f006 fe89 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f000 f8c7 	bl	87d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24d 31d2 	movw	r1, #54226	; 0xd3d2
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24d 4310 	movw	r3, #54288	; 0xd410
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f006 fe78 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f000 ff27 	bl	94b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24d 4120 	movw	r1, #54304	; 0xd420
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24d 432c 	movw	r3, #54316	; 0xd42c
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f006 fe67 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f006 ff21 	bl	f4ce <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24d 31da 	movw	r1, #54234	; 0xd3da
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24d 433c 	movw	r3, #54332	; 0xd43c
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f00a fa9f 	bl	12be4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f006 ff06 	bl	f4bc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24d 31e2 	movw	r1, #54242	; 0xd3e2
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24d 434c 	movw	r3, #54348	; 0xd44c
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f006 fe42 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24d 415c 	movw	r1, #54364	; 0xd45c
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f007 f8b3 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e fa41 	bl	16b72 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24d 4062 	movw	r0, #54370	; 0xd462
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f007 f8a2 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e fa31 	bl	16b78 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e fa2f 	bl	16b80 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24d 4069 	movw	r0, #54377	; 0xd469
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f007 f88b 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f007 f8ad 	bl	f89c <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24d 406c 	movw	r0, #54380	; 0xd46c
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f007 f87e 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f007 f8b8 	bl	f8ca <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24d 4072 	movw	r0, #54386	; 0xd472
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f007 f872 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f007 f8b5 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f007 f8b1 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e f9f9 	bl	16b78 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f005 fae0 	bl	dd54 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24d 4174 	movw	r1, #54388	; 0xd474
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f005 fd4d 	bl	e240 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f007 f84c 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24d 4072 	movw	r0, #54386	; 0xd472
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f007 f844 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f007 f887 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    87d2:	b5b0      	push	{r4, r5, r7, lr}
    87d4:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    87d6:	f24d 4084 	movw	r0, #54404	; 0xd484
    87da:	f2c0 0001 	movt	r0, #1
    87de:	2112      	movs	r1, #18
    87e0:	f007 f835 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    87e6:	f240 1048 	movw	r0, #328	; 0x148
    87ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    87ee:	210a      	movs	r1, #10
    87f0:	f007 fa68 	bl	fcc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    87f4:	9012      	str	r0, [sp, #72]	; 0x48
    87f6:	e7ff      	b.n	87f8 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x26>
    87f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    87fa:	f006 fde8 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    87fe:	9014      	str	r0, [sp, #80]	; 0x50
    8800:	e7ff      	b.n	8802 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x30>
    8802:	9814      	ldr	r0, [sp, #80]	; 0x50
    8804:	1e41      	subs	r1, r0, #1
    8806:	bf18      	it	ne
    8808:	2101      	movne	r1, #1
    880a:	2801      	cmp	r0, #1
    880c:	d001      	beq.n	8812 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x40>
    880e:	e7ff      	b.n	8810 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x3e>
    8810:	e008      	b.n	8824 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    8812:	f240 1048 	movw	r0, #328	; 0x148
    8816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    881a:	f007 faec 	bl	fdf6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    881e:	9011      	str	r0, [sp, #68]	; 0x44
    8820:	e00f      	b.n	8842 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8822:	defe      	udf	#254	; 0xfe
    8824:	9814      	ldr	r0, [sp, #80]	; 0x50
    8826:	9036      	str	r0, [sp, #216]	; 0xd8
    8828:	f006 fe44 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    882c:	9010      	str	r0, [sp, #64]	; 0x40
    882e:	e002      	b.n	8836 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    8830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8832:	b03e      	add	sp, #248	; 0xf8
    8834:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8836:	9810      	ldr	r0, [sp, #64]	; 0x40
    8838:	f006 fdbd 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    883c:	9013      	str	r0, [sp, #76]	; 0x4c
    883e:	e7ff      	b.n	8840 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x6e>
    8840:	e7f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_low() ? ;
    8842:	9811      	ldr	r0, [sp, #68]	; 0x44
    8844:	f006 fdc3 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    8848:	9015      	str	r0, [sp, #84]	; 0x54
    884a:	e7ff      	b.n	884c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x7a>
    884c:	9815      	ldr	r0, [sp, #84]	; 0x54
    884e:	1e41      	subs	r1, r0, #1
    8850:	bf18      	it	ne
    8852:	2101      	movne	r1, #1
    8854:	2801      	cmp	r0, #1
    8856:	d001      	beq.n	885c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x8a>
    8858:	e7ff      	b.n	885a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x88>
    885a:	e008      	b.n	886e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    885c:	f240 104c 	movw	r0, #332	; 0x14c
    8860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8864:	2114      	movs	r1, #20
    8866:	f007 fadd 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    886a:	e00d      	b.n	8888 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb6>
        TOUCH_RESET.set_low() ? ;
    886c:	defe      	udf	#254	; 0xfe
    886e:	9815      	ldr	r0, [sp, #84]	; 0x54
    8870:	9037      	str	r0, [sp, #220]	; 0xdc
    8872:	f006 fe1f 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    8876:	900f      	str	r0, [sp, #60]	; 0x3c
    8878:	e7ff      	b.n	887a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xa8>
    887a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    887c:	f006 fd9b 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    8880:	9013      	str	r0, [sp, #76]	; 0x4c
    8882:	e7ff      	b.n	8884 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb2>
    8884:	e7ff      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
    8886:	e7d3      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_high() ? ;
    8888:	f240 1048 	movw	r0, #328	; 0x148
    888c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8890:	f007 fabc 	bl	fe0c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    8894:	900e      	str	r0, [sp, #56]	; 0x38
    8896:	e7ff      	b.n	8898 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xc6>
    8898:	980e      	ldr	r0, [sp, #56]	; 0x38
    889a:	f006 fd98 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    889e:	9016      	str	r0, [sp, #88]	; 0x58
    88a0:	e7ff      	b.n	88a2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xd0>
    88a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    88a4:	1e41      	subs	r1, r0, #1
    88a6:	bf18      	it	ne
    88a8:	2101      	movne	r1, #1
    88aa:	2801      	cmp	r0, #1
    88ac:	d001      	beq.n	88b2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xe0>
    88ae:	e7ff      	b.n	88b0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xde>
    88b0:	e008      	b.n	88c4 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88b2:	f240 104c 	movw	r0, #332	; 0x14c
    88b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88ba:	21c8      	movs	r1, #200	; 0xc8
    88bc:	f007 fab2 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88c0:	e00c      	b.n	88dc <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x10a>
        TOUCH_RESET.set_high() ? ;
    88c2:	defe      	udf	#254	; 0xfe
    88c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    88c6:	9038      	str	r0, [sp, #224]	; 0xe0
    88c8:	f006 fdf4 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    88cc:	900d      	str	r0, [sp, #52]	; 0x34
    88ce:	e7ff      	b.n	88d0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xfe>
    88d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88d2:	f006 fd70 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    88d6:	9013      	str	r0, [sp, #76]	; 0x4c
    88d8:	e7ff      	b.n	88da <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x108>
    88da:	e7d4      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88dc:	f240 104c 	movw	r0, #332	; 0x14c
    88e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88e4:	21c8      	movs	r1, #200	; 0xc8
    88e6:	f007 fa9d 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88ea:	e7ff      	b.n	88ec <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    88ec:	f648 208f 	movw	r0, #35471	; 0x8a8f
    88f0:	f2c0 0000 	movt	r0, #0
    88f4:	9017      	str	r0, [sp, #92]	; 0x5c
    88f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    88f8:	f240 11e0 	movw	r1, #480	; 0x1e0
    88fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8900:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    8902:	f648 2043 	movw	r0, #35395	; 0x8a43
    8906:	f2c0 0000 	movt	r0, #0
    890a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    890c:	e7ff      	b.n	890e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    890e:	9919      	ldr	r1, [sp, #100]	; 0x64
    8910:	4668      	mov	r0, sp
    8912:	2201      	movs	r2, #1
    8914:	6002      	str	r2, [r0, #0]
    8916:	201c      	movs	r0, #28
    8918:	2200      	movs	r2, #0
    891a:	2302      	movs	r3, #2
    891c:	f010 facc 	bl	18eb8 <hal_gpio_irq_init>
    8920:	9018      	str	r0, [sp, #96]	; 0x60
    8922:	e7ff      	b.n	8924 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    8924:	f24d 409c 	movw	r0, #54428	; 0xd49c
    8928:	f2c0 0001 	movt	r0, #1
    892c:	6800      	ldr	r0, [r0, #0]
    892e:	a918      	add	r1, sp, #96	; 0x60
    8930:	911a      	str	r1, [sp, #104]	; 0x68
    8932:	901b      	str	r0, [sp, #108]	; 0x6c
    8934:	981a      	ldr	r0, [sp, #104]	; 0x68
    8936:	9039      	str	r0, [sp, #228]	; 0xe4
    8938:	991b      	ldr	r1, [sp, #108]	; 0x6c
    893a:	913a      	str	r1, [sp, #232]	; 0xe8
    893c:	6802      	ldr	r2, [r0, #0]
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	429a      	cmp	r2, r3
    8942:	900c      	str	r0, [sp, #48]	; 0x30
    8944:	910b      	str	r1, [sp, #44]	; 0x2c
    8946:	d104      	bne.n	8952 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x180>
    8948:	e7ff      	b.n	894a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x178>
    894a:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    894c:	f010 faf0 	bl	18f30 <hal_gpio_irq_enable>
    8950:	e072      	b.n	8a38 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    8952:	f24d 40f4 	movw	r0, #54516	; 0xd4f4
    8956:	f2c0 0001 	movt	r0, #1
    895a:	6801      	ldr	r1, [r0, #0]
    895c:	980c      	ldr	r0, [sp, #48]	; 0x30
    895e:	902b      	str	r0, [sp, #172]	; 0xac
    8960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8962:	922c      	str	r2, [sp, #176]	; 0xb0
    8964:	f24d 5310 	movw	r3, #54544	; 0xd510
    8968:	f2c0 0301 	movt	r3, #1
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	f24d 5c14 	movw	ip, #54548	; 0xd514
    8972:	f2c0 0c01 	movt	ip, #1
    8976:	f8dc c000 	ldr.w	ip, [ip]
    897a:	46ee      	mov	lr, sp
    897c:	2400      	movs	r4, #0
    897e:	f8ce 4000 	str.w	r4, [lr]
    8982:	a82d      	add	r0, sp, #180	; 0xb4
    8984:	2201      	movs	r2, #1
    8986:	910a      	str	r1, [sp, #40]	; 0x28
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	f005 fb3a 	bl	e004 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8990:	e7ff      	b.n	8992 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1c0>
    8992:	a82b      	add	r0, sp, #172	; 0xac
    8994:	9028      	str	r0, [sp, #160]	; 0xa0
    8996:	a82c      	add	r0, sp, #176	; 0xb0
    8998:	9029      	str	r0, [sp, #164]	; 0xa4
    899a:	a82d      	add	r0, sp, #180	; 0xb4
    899c:	902a      	str	r0, [sp, #168]	; 0xa8
    899e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    89a0:	903b      	str	r0, [sp, #236]	; 0xec
    89a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    89a4:	913c      	str	r1, [sp, #240]	; 0xf0
    89a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    89a8:	923d      	str	r2, [sp, #244]	; 0xf4
    89aa:	f24e 23a1 	movw	r3, #58017	; 0xe2a1
    89ae:	f2c0 0300 	movt	r3, #0
    89b2:	9109      	str	r1, [sp, #36]	; 0x24
    89b4:	4619      	mov	r1, r3
    89b6:	9208      	str	r2, [sp, #32]
    89b8:	f007 fb99 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89bc:	9007      	str	r0, [sp, #28]
    89be:	9106      	str	r1, [sp, #24]
    89c0:	e7ff      	b.n	89c2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1f0>
    89c2:	f24e 21a1 	movw	r1, #58017	; 0xe2a1
    89c6:	f2c0 0100 	movt	r1, #0
    89ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    89cc:	f007 fb8f 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89d0:	9005      	str	r0, [sp, #20]
    89d2:	9104      	str	r1, [sp, #16]
    89d4:	e7ff      	b.n	89d6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x204>
    89d6:	f247 1153 	movw	r1, #29011	; 0x7153
    89da:	f2c0 0101 	movt	r1, #1
    89de:	9808      	ldr	r0, [sp, #32]
    89e0:	f007 fbc4 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    89e4:	9003      	str	r0, [sp, #12]
    89e6:	9102      	str	r1, [sp, #8]
    89e8:	e7ff      	b.n	89ea <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x218>
    89ea:	9807      	ldr	r0, [sp, #28]
    89ec:	9022      	str	r0, [sp, #136]	; 0x88
    89ee:	9906      	ldr	r1, [sp, #24]
    89f0:	9123      	str	r1, [sp, #140]	; 0x8c
    89f2:	9a05      	ldr	r2, [sp, #20]
    89f4:	9224      	str	r2, [sp, #144]	; 0x90
    89f6:	9b04      	ldr	r3, [sp, #16]
    89f8:	9325      	str	r3, [sp, #148]	; 0x94
    89fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
    89fe:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    8a02:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a06:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    8a0a:	466c      	mov	r4, sp
    8a0c:	2503      	movs	r5, #3
    8a0e:	6025      	str	r5, [r4, #0]
    8a10:	a81c      	add	r0, sp, #112	; 0x70
    8a12:	ab22      	add	r3, sp, #136	; 0x88
    8a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a16:	462a      	mov	r2, r5
    8a18:	f005 faf4 	bl	e004 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8a1c:	e7ff      	b.n	8a1e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x24c>
    8a1e:	f24d 5034 	movw	r0, #54580	; 0xd534
    8a22:	f2c0 0001 	movt	r0, #1
    8a26:	f00e f8a6 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a2a:	9001      	str	r0, [sp, #4]
    8a2c:	e7ff      	b.n	8a2e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x25c>
    8a2e:	a81c      	add	r0, sp, #112	; 0x70
    8a30:	9901      	ldr	r1, [sp, #4]
    8a32:	f00e f8dd 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a36:	defe      	udf	#254	; 0xfe
    8a38:	2000      	movs	r0, #0
    Ok(())
    8a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    8a3c:	2001      	movs	r0, #1
    8a3e:	9013      	str	r0, [sp, #76]	; 0x4c
}
    8a40:	e6f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>

00008a42 <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    8a42:	b580      	push	{r7, lr}
    8a44:	b086      	sub	sp, #24
    8a46:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    8a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a50:	6088      	str	r0, [r1, #8]
    8a52:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    8a54:	f006 fd3b 	bl	f4ce <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    8a58:	e7ff      	b.n	8a5a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x18>
    8a5a:	f24d 31da 	movw	r1, #54234	; 0xd3da
    8a5e:	f2c0 0101 	movt	r1, #1
    8a62:	f24d 534c 	movw	r3, #54604	; 0xd54c
    8a66:	f2c0 0301 	movt	r3, #1
    8a6a:	a802      	add	r0, sp, #8
    8a6c:	2208      	movs	r2, #8
    8a6e:	f00a f8b9 	bl	12be4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    8a72:	4601      	mov	r1, r0
    8a74:	9005      	str	r0, [sp, #20]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	e7ff      	b.n	8a7a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    8a7a:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	f011 fae7 	bl	1a056 <os_eventq_put>
    8a88:	e7ff      	b.n	8a8a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x48>
    //console::print("touch\n"); ////
}
    8a8a:	b006      	add	sp, #24
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b094      	sub	sp, #80	; 0x50
    8a92:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    8a94:	f240 104c 	movw	r0, #332	; 0x14c
    8a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a9c:	f000 f894 	bl	8bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>
    8aa0:	9006      	str	r0, [sp, #24]
    8aa2:	e7ff      	b.n	8aa4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x16>
    8aa4:	f24d 515c 	movw	r1, #54620	; 0xd55c
    8aa8:	f2c0 0101 	movt	r1, #1
    8aac:	f24d 536c 	movw	r3, #54636	; 0xd56c
    8ab0:	f2c0 0301 	movt	r3, #1
    8ab4:	220e      	movs	r2, #14
    8ab6:	9806      	ldr	r0, [sp, #24]
    8ab8:	f006 fc4a 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8abc:	e7ff      	b.n	8abe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    8abe:	f240 104c 	movw	r0, #332	; 0x14c
    8ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ac6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8aca:	2100      	movs	r1, #0
    8acc:	9107      	str	r1, [sp, #28]
    8ace:	9008      	str	r0, [sp, #32]
    8ad0:	9807      	ldr	r0, [sp, #28]
    8ad2:	9908      	ldr	r1, [sp, #32]
    8ad4:	f005 ffd7 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8ad8:	9005      	str	r0, [sp, #20]
    8ada:	9104      	str	r1, [sp, #16]
    8adc:	e7ff      	b.n	8ade <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x50>
    8ade:	9805      	ldr	r0, [sp, #20]
    8ae0:	9009      	str	r0, [sp, #36]	; 0x24
    8ae2:	9904      	ldr	r1, [sp, #16]
    8ae4:	910a      	str	r1, [sp, #40]	; 0x28
    8ae6:	e7ff      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8ae8:	a809      	add	r0, sp, #36	; 0x24
    8aea:	f005 ff41 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8aee:	910c      	str	r1, [sp, #48]	; 0x30
    8af0:	900b      	str	r0, [sp, #44]	; 0x2c
    8af2:	e7ff      	b.n	8af4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x66>
    8af4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8af6:	2800      	cmp	r0, #0
    8af8:	d001      	beq.n	8afe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x70>
    8afa:	e7ff      	b.n	8afc <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x6e>
    8afc:	e002      	b.n	8b04 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    8afe:	b014      	add	sp, #80	; 0x50
    8b00:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    8b02:	defe      	udf	#254	; 0xfe
    8b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b06:	900f      	str	r0, [sp, #60]	; 0x3c
    8b08:	9010      	str	r0, [sp, #64]	; 0x40
    8b0a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8b0c:	2809      	cmp	r0, #9
    8b0e:	9003      	str	r0, [sp, #12]
    8b10:	d851      	bhi.n	8bb6 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x128>
    8b12:	e7ff      	b.n	8b14 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x86>
    8b14:	f240 104c 	movw	r0, #332	; 0x14c
    8b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8b1c:	9903      	ldr	r1, [sp, #12]
    8b1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8b22:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    8b26:	4603      	mov	r3, r0
    8b28:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    8b2c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    8b30:	46e6      	mov	lr, ip
    8b32:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    8b36:	7912      	ldrb	r2, [r2, #4]
    8b38:	4694      	mov	ip, r2
    8b3a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    8b3e:	2800      	cmp	r0, #0
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	f8cd e004 	str.w	lr, [sp, #4]
    8b46:	f8cd c000 	str.w	ip, [sp]
    8b4a:	d008      	beq.n	8b5e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xd0>
    8b4c:	e003      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b4e:	2001      	movs	r0, #1
    8b50:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b54:	e008      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b56:	2000      	movs	r0, #0
    8b58:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b5c:	e004      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b5e:	9801      	ldr	r0, [sp, #4]
    8b60:	0401      	lsls	r1, r0, #16
    8b62:	2900      	cmp	r1, #0
    8b64:	d0f3      	beq.n	8b4e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc0>
    8b66:	e7f6      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b68:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    8b6c:	07c0      	lsls	r0, r0, #31
    8b6e:	2800      	cmp	r0, #0
    8b70:	d105      	bne.n	8b7e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf0>
    8b72:	e7ff      	b.n	8b74 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xe6>
            if action != 0 && action != 2 { continue; }
    8b74:	9800      	ldr	r0, [sp, #0]
    8b76:	0601      	lsls	r1, r0, #24
    8b78:	2900      	cmp	r1, #0
    8b7a:	d10a      	bne.n	8b92 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x104>
    8b7c:	e005      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
            if x == 0 && y == 0 { continue; }
    8b7e:	e7ff      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
    8b80:	e7b2      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8b82:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    8b84:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b88:	e008      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b90:	e004      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	b2c1      	uxtb	r1, r0
    8b96:	2902      	cmp	r1, #2
    8b98:	d1f3      	bne.n	8b82 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf4>
    8b9a:	e7f6      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
    8b9c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    8ba0:	07c0      	lsls	r0, r0, #31
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d105      	bne.n	8bb2 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x124>
    8ba6:	e7ff      	b.n	8ba8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x11a>
            super::handle_touch(x, y);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f000 fffe 	bl	9bac <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>
    8bb0:	e000      	b.n	8bb4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x126>
            if action != 0 && action != 2 { continue; }
    8bb2:	e7e5      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    8bb4:	e798      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8bb6:	f24d 507c 	movw	r0, #54652	; 0xd57c
    8bba:	f2c0 0001 	movt	r0, #1
    8bbe:	220a      	movs	r2, #10
    8bc0:	9903      	ldr	r1, [sp, #12]
    8bc2:	f00d fff5 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    8bc6:	defe      	udf	#254	; 0xfe

00008bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    8bc8:	b580      	push	{r7, lr}
    8bca:	b0de      	sub	sp, #376	; 0x178
    8bcc:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    8bce:	4669      	mov	r1, sp
    8bd0:	223f      	movs	r2, #63	; 0x3f
    8bd2:	600a      	str	r2, [r1, #0]
    8bd4:	f240 139e 	movw	r3, #414	; 0x19e
    8bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bdc:	2115      	movs	r1, #21
    8bde:	f04f 0c00 	mov.w	ip, #0
    8be2:	9026      	str	r0, [sp, #152]	; 0x98
    8be4:	4608      	mov	r0, r1
    8be6:	4661      	mov	r1, ip
    8be8:	f000 fb97 	bl	931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>
    8bec:	9025      	str	r0, [sp, #148]	; 0x94
    8bee:	e7ff      	b.n	8bf0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x28>
    8bf0:	f24d 518c 	movw	r1, #54668	; 0xd58c
    8bf4:	f2c0 0101 	movt	r1, #1
    8bf8:	f24d 53a0 	movw	r3, #54688	; 0xd5a0
    8bfc:	f2c0 0301 	movt	r3, #1
    8c00:	2213      	movs	r2, #19
    8c02:	9825      	ldr	r0, [sp, #148]	; 0x94
    8c04:	f006 fba4 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8c08:	e7ff      	b.n	8c0a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x42>
    8c0a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    8c0e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    8c10:	9024      	str	r0, [sp, #144]	; 0x90
    8c12:	9123      	str	r1, [sp, #140]	; 0x8c
    8c14:	f014 fb86 	bl	1d324 <__aeabi_memclr>
    8c18:	a827      	add	r0, sp, #156	; 0x9c
    8c1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8c1e:	f014 fb85 	bl	1d32c <__aeabi_memcpy>
    8c22:	e7ff      	b.n	8c24 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5c>
    8c24:	a927      	add	r1, sp, #156	; 0x9c
    8c26:	2252      	movs	r2, #82	; 0x52
    8c28:	9826      	ldr	r0, [sp, #152]	; 0x98
    8c2a:	f014 fb7f 	bl	1d32c <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    8c2e:	f240 119e 	movw	r1, #414	; 0x19e
    8c32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8c36:	7889      	ldrb	r1, [r1, #2]
    8c38:	f001 010f 	and.w	r1, r1, #15
    8c3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c3e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    8c42:	2100      	movs	r1, #0
    data.count     = 0;
    8c44:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    8c48:	9150      	str	r1, [sp, #320]	; 0x140
    8c4a:	2105      	movs	r1, #5
    8c4c:	9151      	str	r1, [sp, #324]	; 0x144
    8c4e:	9950      	ldr	r1, [sp, #320]	; 0x140
    8c50:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8c52:	9022      	str	r0, [sp, #136]	; 0x88
    8c54:	4608      	mov	r0, r1
    8c56:	4619      	mov	r1, r3
    8c58:	f005 ff15 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8c5c:	9021      	str	r0, [sp, #132]	; 0x84
    8c5e:	9120      	str	r1, [sp, #128]	; 0x80
    8c60:	e7ff      	b.n	8c62 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x9a>
    8c62:	9821      	ldr	r0, [sp, #132]	; 0x84
    8c64:	9052      	str	r0, [sp, #328]	; 0x148
    8c66:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c68:	9153      	str	r1, [sp, #332]	; 0x14c
    8c6a:	e7ff      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
    8c6c:	a852      	add	r0, sp, #328	; 0x148
    8c6e:	f005 fe7f 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8c72:	9155      	str	r1, [sp, #340]	; 0x154
    8c74:	9054      	str	r0, [sp, #336]	; 0x150
    8c76:	e7ff      	b.n	8c78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb0>
    8c78:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d001      	beq.n	8c82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xba>
    8c7e:	e7ff      	b.n	8c80 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb8>
    8c80:	e001      	b.n	8c86 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xbe>
    8c82:	e00d      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
    8c84:	defe      	udf	#254	; 0xfe
    8c86:	9855      	ldr	r0, [sp, #340]	; 0x154
    8c88:	9058      	str	r0, [sp, #352]	; 0x160
    8c8a:	9059      	str	r0, [sp, #356]	; 0x164
    8c8c:	905a      	str	r0, [sp, #360]	; 0x168
    8c8e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8c90:	fba1 1200 	umull	r1, r2, r1, r0
    8c94:	2a00      	cmp	r2, #0
    8c96:	901f      	str	r0, [sp, #124]	; 0x7c
    8c98:	911e      	str	r1, [sp, #120]	; 0x78
    8c9a:	f040 81c1 	bne.w	9020 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x458>
    8c9e:	e002      	b.n	8ca6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xde>
    8ca0:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    8ca2:	b05e      	add	sp, #376	; 0x178
    8ca4:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8ca6:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ca8:	1d41      	adds	r1, r0, #5
    8caa:	460a      	mov	r2, r1
    8cac:	4281      	cmp	r1, r0
    8cae:	921d      	str	r2, [sp, #116]	; 0x74
    8cb0:	f0c0 81c2 	bcc.w	9038 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x470>
    8cb4:	e7ff      	b.n	8cb6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xee>
    8cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cb8:	283e      	cmp	r0, #62	; 0x3e
    8cba:	f200 81c9 	bhi.w	9050 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x488>
    8cbe:	e7ff      	b.n	8cc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xf8>
    8cc0:	f240 109e 	movw	r0, #414	; 0x19e
    8cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8cc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    8cca:	5c40      	ldrb	r0, [r0, r1]
    8ccc:	0900      	lsrs	r0, r0, #4
    8cce:	901c      	str	r0, [sp, #112]	; 0x70
    8cd0:	e7ff      	b.n	8cd2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x10a>
    8cd2:	981c      	ldr	r0, [sp, #112]	; 0x70
    8cd4:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    8cd8:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    8cda:	290e      	cmp	r1, #14
    8cdc:	d80b      	bhi.n	8cf6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x12e>
    8cde:	e7ff      	b.n	8ce0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x118>
        data.count += 1;
    8ce0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ce2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    8ce6:	3101      	adds	r1, #1
    8ce8:	b2ca      	uxtb	r2, r1
    8cea:	460b      	mov	r3, r1
    8cec:	428a      	cmp	r2, r1
    8cee:	931b      	str	r3, [sp, #108]	; 0x6c
    8cf0:	f040 81b7 	bne.w	9062 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x49a>
    8cf4:	e001      	b.n	8cfa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    8cf6:	e7ff      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
    8cf8:	e7d2      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
        data.count += 1;
    8cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8cfc:	9926      	ldr	r1, [sp, #152]	; 0x98
    8cfe:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    8d02:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d06:	fba2 2c03 	umull	r2, ip, r2, r3
    8d0a:	f1bc 0f00 	cmp.w	ip, #0
    8d0e:	921a      	str	r2, [sp, #104]	; 0x68
    8d10:	f040 81b3 	bne.w	907a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4b2>
    8d14:	e7ff      	b.n	8d16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x14e>
    8d16:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d18:	1cc1      	adds	r1, r0, #3
    8d1a:	460a      	mov	r2, r1
    8d1c:	4281      	cmp	r1, r0
    8d1e:	9219      	str	r2, [sp, #100]	; 0x64
    8d20:	f0c0 81b7 	bcc.w	9092 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4ca>
    8d24:	e7ff      	b.n	8d26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x15e>
    8d26:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d28:	283e      	cmp	r0, #62	; 0x3e
    8d2a:	f200 81be 	bhi.w	90aa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4e2>
    8d2e:	e7ff      	b.n	8d30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x168>
    8d30:	f240 109e 	movw	r0, #414	; 0x19e
    8d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d38:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d3a:	5c40      	ldrb	r0, [r0, r1]
    8d3c:	f000 000f 	and.w	r0, r0, #15
    8d40:	4602      	mov	r2, r0
    8d42:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    8d46:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d4a:	fba0 0c03 	umull	r0, ip, r0, r3
    8d4e:	f1bc 0f00 	cmp.w	ip, #0
    8d52:	9218      	str	r2, [sp, #96]	; 0x60
    8d54:	9017      	str	r0, [sp, #92]	; 0x5c
    8d56:	f040 81b1 	bne.w	90bc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4f4>
    8d5a:	e7ff      	b.n	8d5c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x194>
    8d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d5e:	1d01      	adds	r1, r0, #4
    8d60:	460a      	mov	r2, r1
    8d62:	4281      	cmp	r1, r0
    8d64:	9216      	str	r2, [sp, #88]	; 0x58
    8d66:	f0c0 81b5 	bcc.w	90d4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x50c>
    8d6a:	e7ff      	b.n	8d6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1a4>
    8d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d6e:	283e      	cmp	r0, #62	; 0x3e
    8d70:	f200 81bc 	bhi.w	90ec <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x524>
    8d74:	e7ff      	b.n	8d76 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ae>
    8d76:	f240 109e 	movw	r0, #414	; 0x19e
    8d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d80:	5c40      	ldrb	r0, [r0, r1]
    8d82:	4602      	mov	r2, r0
    8d84:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    8d88:	9818      	ldr	r0, [sp, #96]	; 0x60
    8d8a:	0203      	lsls	r3, r0, #8
    8d8c:	9215      	str	r2, [sp, #84]	; 0x54
    8d8e:	9314      	str	r3, [sp, #80]	; 0x50
    8d90:	e7ff      	b.n	8d92 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ca>
    8d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d94:	2809      	cmp	r0, #9
    8d96:	f200 81b2 	bhi.w	90fe <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x536>
    8d9a:	e7ff      	b.n	8d9c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1d4>
    8d9c:	9814      	ldr	r0, [sp, #80]	; 0x50
    8d9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da0:	ea40 0201 	orr.w	r2, r0, r1
    8da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8da6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    8daa:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    8dae:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8db0:	fba2 2e0c 	umull	r2, lr, r2, ip
    8db4:	f1be 0f00 	cmp.w	lr, #0
    8db8:	9213      	str	r2, [sp, #76]	; 0x4c
    8dba:	f040 81a9 	bne.w	9110 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x548>
    8dbe:	e7ff      	b.n	8dc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1f8>
    8dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dc2:	1d41      	adds	r1, r0, #5
    8dc4:	460a      	mov	r2, r1
    8dc6:	4281      	cmp	r1, r0
    8dc8:	9212      	str	r2, [sp, #72]	; 0x48
    8dca:	f0c0 81ad 	bcc.w	9128 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x560>
    8dce:	e7ff      	b.n	8dd0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x208>
    8dd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dd2:	283e      	cmp	r0, #62	; 0x3e
    8dd4:	f200 81b4 	bhi.w	9140 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x578>
    8dd8:	e7ff      	b.n	8dda <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x212>
    8dda:	f240 109e 	movw	r0, #414	; 0x19e
    8dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8de4:	5c40      	ldrb	r0, [r0, r1]
    8de6:	f000 000f 	and.w	r0, r0, #15
    8dea:	4602      	mov	r2, r0
    8dec:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    8df0:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df4:	fba0 0c03 	umull	r0, ip, r0, r3
    8df8:	f1bc 0f00 	cmp.w	ip, #0
    8dfc:	9211      	str	r2, [sp, #68]	; 0x44
    8dfe:	9010      	str	r0, [sp, #64]	; 0x40
    8e00:	f040 81a7 	bne.w	9152 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x58a>
    8e04:	e7ff      	b.n	8e06 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x23e>
    8e06:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e08:	1d81      	adds	r1, r0, #6
    8e0a:	460a      	mov	r2, r1
    8e0c:	4281      	cmp	r1, r0
    8e0e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e10:	f0c0 81ab 	bcc.w	916a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5a2>
    8e14:	e7ff      	b.n	8e16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x24e>
    8e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e18:	283e      	cmp	r0, #62	; 0x3e
    8e1a:	f200 81b2 	bhi.w	9182 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5ba>
    8e1e:	e7ff      	b.n	8e20 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x258>
    8e20:	f240 109e 	movw	r0, #414	; 0x19e
    8e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8e2a:	5c40      	ldrb	r0, [r0, r1]
    8e2c:	4602      	mov	r2, r0
    8e2e:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    8e32:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e34:	0203      	lsls	r3, r0, #8
    8e36:	920e      	str	r2, [sp, #56]	; 0x38
    8e38:	930d      	str	r3, [sp, #52]	; 0x34
    8e3a:	e7ff      	b.n	8e3c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x274>
    8e3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e3e:	2809      	cmp	r0, #9
    8e40:	f200 81a8 	bhi.w	9194 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5cc>
    8e44:	e7ff      	b.n	8e46 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x27e>
    8e46:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8e4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8e54:	ea43 0e0c 	orr.w	lr, r3, ip
    8e58:	f8a2 e002 	strh.w	lr, [r2, #2]
    8e5c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    8e5e:	fba2 2e01 	umull	r2, lr, r2, r1
    8e62:	f1be 0f00 	cmp.w	lr, #0
    8e66:	920c      	str	r2, [sp, #48]	; 0x30
    8e68:	f040 819d 	bne.w	91a6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5de>
    8e6c:	e7ff      	b.n	8e6e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2a6>
    8e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e70:	1cc1      	adds	r1, r0, #3
    8e72:	460a      	mov	r2, r1
    8e74:	4281      	cmp	r1, r0
    8e76:	920b      	str	r2, [sp, #44]	; 0x2c
    8e78:	f0c0 81a1 	bcc.w	91be <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5f6>
    8e7c:	e7ff      	b.n	8e7e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2b6>
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	283e      	cmp	r0, #62	; 0x3e
    8e82:	f200 81a8 	bhi.w	91d6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x60e>
    8e86:	e7ff      	b.n	8e88 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2c0>
    8e88:	f240 109e 	movw	r0, #414	; 0x19e
    8e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e92:	5c40      	ldrb	r0, [r0, r1]
    8e94:	0980      	lsrs	r0, r0, #6
    8e96:	900a      	str	r0, [sp, #40]	; 0x28
    8e98:	e7ff      	b.n	8e9a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2d2>
        data.touches[i].action =
    8e9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e9c:	2809      	cmp	r0, #9
    8e9e:	f200 81a3 	bhi.w	91e8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x620>
    8ea2:	e7ff      	b.n	8ea4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2dc>
    8ea4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ea6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ea8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eae:	7113      	strb	r3, [r2, #4]
    8eb0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    8eb2:	fba2 2c01 	umull	r2, ip, r2, r1
    8eb6:	f1bc 0f00 	cmp.w	ip, #0
    8eba:	9209      	str	r2, [sp, #36]	; 0x24
    8ebc:	f040 819d 	bne.w	91fa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x632>
    8ec0:	e7ff      	b.n	8ec2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2fa>
    8ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ec4:	1d41      	adds	r1, r0, #5
    8ec6:	460a      	mov	r2, r1
    8ec8:	4281      	cmp	r1, r0
    8eca:	9208      	str	r2, [sp, #32]
    8ecc:	f0c0 81a1 	bcc.w	9212 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x64a>
    8ed0:	e7ff      	b.n	8ed2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x30a>
    8ed2:	9808      	ldr	r0, [sp, #32]
    8ed4:	283e      	cmp	r0, #62	; 0x3e
    8ed6:	f200 81a8 	bhi.w	922a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x662>
    8eda:	e7ff      	b.n	8edc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x314>
    8edc:	f240 109e 	movw	r0, #414	; 0x19e
    8ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ee4:	9908      	ldr	r1, [sp, #32]
    8ee6:	5c40      	ldrb	r0, [r0, r1]
    8ee8:	0900      	lsrs	r0, r0, #4
    8eea:	9007      	str	r0, [sp, #28]
    8eec:	e7ff      	b.n	8eee <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x326>
        data.touches[i].finger =
    8eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8ef0:	2809      	cmp	r0, #9
    8ef2:	f200 81a3 	bhi.w	923c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x674>
    8ef6:	e7ff      	b.n	8ef8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x330>
    8ef8:	9826      	ldr	r0, [sp, #152]	; 0x98
    8efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8efc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f00:	9b07      	ldr	r3, [sp, #28]
    8f02:	7153      	strb	r3, [r2, #5]
    8f04:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    8f06:	fba2 2c01 	umull	r2, ip, r2, r1
    8f0a:	f1bc 0f00 	cmp.w	ip, #0
    8f0e:	9206      	str	r2, [sp, #24]
    8f10:	f040 819d 	bne.w	924e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x686>
    8f14:	e7ff      	b.n	8f16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x34e>
    8f16:	9806      	ldr	r0, [sp, #24]
    8f18:	1dc1      	adds	r1, r0, #7
    8f1a:	460a      	mov	r2, r1
    8f1c:	4281      	cmp	r1, r0
    8f1e:	9205      	str	r2, [sp, #20]
    8f20:	f0c0 81a1 	bcc.w	9266 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x69e>
    8f24:	e7ff      	b.n	8f26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x35e>
    8f26:	9805      	ldr	r0, [sp, #20]
    8f28:	283e      	cmp	r0, #62	; 0x3e
    8f2a:	f200 81a8 	bhi.w	927e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6b6>
    8f2e:	e7ff      	b.n	8f30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x368>
    8f30:	f240 109e 	movw	r0, #414	; 0x19e
    8f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f38:	9905      	ldr	r1, [sp, #20]
    8f3a:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    8f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f3e:	2a09      	cmp	r2, #9
    8f40:	9004      	str	r0, [sp, #16]
    8f42:	f200 81a5 	bhi.w	9290 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6c8>
    8f46:	e7ff      	b.n	8f48 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x380>
    8f48:	9826      	ldr	r0, [sp, #152]	; 0x98
    8f4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8f4c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f50:	9b04      	ldr	r3, [sp, #16]
    8f52:	7193      	strb	r3, [r2, #6]
    8f54:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    8f56:	fba2 2c01 	umull	r2, ip, r2, r1
    8f5a:	f1bc 0f00 	cmp.w	ip, #0
    8f5e:	9203      	str	r2, [sp, #12]
    8f60:	f040 819f 	bne.w	92a2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6da>
    8f64:	e7ff      	b.n	8f66 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x39e>
    8f66:	9803      	ldr	r0, [sp, #12]
    8f68:	f100 0108 	add.w	r1, r0, #8
    8f6c:	460a      	mov	r2, r1
    8f6e:	4281      	cmp	r1, r0
    8f70:	9202      	str	r2, [sp, #8]
    8f72:	f0c0 81a2 	bcc.w	92ba <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6f2>
    8f76:	e7ff      	b.n	8f78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3b0>
    8f78:	9802      	ldr	r0, [sp, #8]
    8f7a:	283e      	cmp	r0, #62	; 0x3e
    8f7c:	f200 81a9 	bhi.w	92d2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x70a>
    8f80:	e7ff      	b.n	8f82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3ba>
    8f82:	f240 109e 	movw	r0, #414	; 0x19e
    8f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f8a:	9902      	ldr	r1, [sp, #8]
    8f8c:	5c40      	ldrb	r0, [r0, r1]
    8f8e:	0900      	lsrs	r0, r0, #4
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	e7ff      	b.n	8f94 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3cc>
        data.touches[i].area =
    8f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f96:	2809      	cmp	r0, #9
    8f98:	f200 81a4 	bhi.w	92e4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x71c>
    8f9c:	e7ff      	b.n	8f9e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3d6>
    8f9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8fa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8faa:	290a      	cmp	r1, #10
    8fac:	d326      	bcc.n	8ffc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x434>
    8fae:	e1a2      	b.n	92f6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x72e>
    8fb0:	2001      	movs	r0, #1
    8fb2:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fb6:	e009      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
    8fb8:	2000      	movs	r0, #0
    8fba:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fbe:	e005      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
            && (data.point_num == 0) {
    8fc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fc2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8fc6:	2900      	cmp	r1, #0
    8fc8:	d0f2      	beq.n	8fb0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3e8>
    8fca:	e7f5      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8fcc:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    8fd0:	07c0      	lsls	r0, r0, #31
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d123      	bne.n	901e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x456>
    8fd6:	e021      	b.n	901c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x454>
    8fd8:	2001      	movs	r0, #1
    8fda:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fde:	e007      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fe6:	e003      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fea:	280a      	cmp	r0, #10
    8fec:	d30e      	bcc.n	900c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x444>
    8fee:	e18b      	b.n	9308 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x740>
    8ff0:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d1e2      	bne.n	8fc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f8>
    8ffa:	e7dd      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8ffc:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ffe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9004:	7912      	ldrb	r2, [r2, #4]
    9006:	2a00      	cmp	r2, #0
    9008:	d0e6      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    900a:	e7ed      	b.n	8fe8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x420>
    900c:	9826      	ldr	r0, [sp, #152]	; 0x98
    900e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9010:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9014:	7912      	ldrb	r2, [r2, #4]
    9016:	2a02      	cmp	r2, #2
    9018:	d0de      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    901a:	e7e1      	b.n	8fe0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    901c:	e626      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
            break;
    901e:	e66b      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    9020:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    9024:	f2c0 0001 	movt	r0, #1
    9028:	f24d 52b0 	movw	r2, #54704	; 0xd5b0
    902c:	f2c0 0201 	movt	r2, #1
    9030:	2121      	movs	r1, #33	; 0x21
    9032:	f00d fda7 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9036:	defe      	udf	#254	; 0xfe
    9038:	f24d 6000 	movw	r0, #54784	; 0xd600
    903c:	f2c0 0001 	movt	r0, #1
    9040:	f24d 52e4 	movw	r2, #54756	; 0xd5e4
    9044:	f2c0 0201 	movt	r2, #1
    9048:	211c      	movs	r1, #28
    904a:	f00d fd9b 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    904e:	defe      	udf	#254	; 0xfe
    9050:	f24d 601c 	movw	r0, #54812	; 0xd61c
    9054:	f2c0 0001 	movt	r0, #1
    9058:	223f      	movs	r2, #63	; 0x3f
    905a:	991d      	ldr	r1, [sp, #116]	; 0x74
    905c:	f00d fda8 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9060:	defe      	udf	#254	; 0xfe
        data.count += 1;
    9062:	f24d 6000 	movw	r0, #54784	; 0xd600
    9066:	f2c0 0001 	movt	r0, #1
    906a:	f24d 622c 	movw	r2, #54828	; 0xd62c
    906e:	f2c0 0201 	movt	r2, #1
    9072:	211c      	movs	r1, #28
    9074:	f00d fd86 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9078:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    907a:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    907e:	f2c0 0001 	movt	r0, #1
    9082:	f24d 623c 	movw	r2, #54844	; 0xd63c
    9086:	f2c0 0201 	movt	r2, #1
    908a:	2121      	movs	r1, #33	; 0x21
    908c:	f00d fd7a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9090:	defe      	udf	#254	; 0xfe
    9092:	f24d 6000 	movw	r0, #54784	; 0xd600
    9096:	f2c0 0001 	movt	r0, #1
    909a:	f24d 624c 	movw	r2, #54860	; 0xd64c
    909e:	f2c0 0201 	movt	r2, #1
    90a2:	211c      	movs	r1, #28
    90a4:	f00d fd6e 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90a8:	defe      	udf	#254	; 0xfe
    90aa:	f24d 605c 	movw	r0, #54876	; 0xd65c
    90ae:	f2c0 0001 	movt	r0, #1
    90b2:	223f      	movs	r2, #63	; 0x3f
    90b4:	9919      	ldr	r1, [sp, #100]	; 0x64
    90b6:	f00d fd7b 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90ba:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    90bc:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    90c0:	f2c0 0001 	movt	r0, #1
    90c4:	f24d 626c 	movw	r2, #54892	; 0xd66c
    90c8:	f2c0 0201 	movt	r2, #1
    90cc:	2121      	movs	r1, #33	; 0x21
    90ce:	f00d fd59 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90d2:	defe      	udf	#254	; 0xfe
    90d4:	f24d 6000 	movw	r0, #54784	; 0xd600
    90d8:	f2c0 0001 	movt	r0, #1
    90dc:	f24d 627c 	movw	r2, #54908	; 0xd67c
    90e0:	f2c0 0201 	movt	r2, #1
    90e4:	211c      	movs	r1, #28
    90e6:	f00d fd4d 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90ea:	defe      	udf	#254	; 0xfe
    90ec:	f24d 608c 	movw	r0, #54924	; 0xd68c
    90f0:	f2c0 0001 	movt	r0, #1
    90f4:	223f      	movs	r2, #63	; 0x3f
    90f6:	9916      	ldr	r1, [sp, #88]	; 0x58
    90f8:	f00d fd5a 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90fc:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    90fe:	f24d 609c 	movw	r0, #54940	; 0xd69c
    9102:	f2c0 0001 	movt	r0, #1
    9106:	220a      	movs	r2, #10
    9108:	991f      	ldr	r1, [sp, #124]	; 0x7c
    910a:	f00d fd51 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    910e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    9110:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    9114:	f2c0 0001 	movt	r0, #1
    9118:	f24d 62ac 	movw	r2, #54956	; 0xd6ac
    911c:	f2c0 0201 	movt	r2, #1
    9120:	2121      	movs	r1, #33	; 0x21
    9122:	f00d fd2f 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9126:	defe      	udf	#254	; 0xfe
    9128:	f24d 6000 	movw	r0, #54784	; 0xd600
    912c:	f2c0 0001 	movt	r0, #1
    9130:	f24d 62bc 	movw	r2, #54972	; 0xd6bc
    9134:	f2c0 0201 	movt	r2, #1
    9138:	211c      	movs	r1, #28
    913a:	f00d fd23 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    913e:	defe      	udf	#254	; 0xfe
    9140:	f24d 60cc 	movw	r0, #54988	; 0xd6cc
    9144:	f2c0 0001 	movt	r0, #1
    9148:	223f      	movs	r2, #63	; 0x3f
    914a:	9912      	ldr	r1, [sp, #72]	; 0x48
    914c:	f00d fd30 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9150:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    9152:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    9156:	f2c0 0001 	movt	r0, #1
    915a:	f24d 62dc 	movw	r2, #55004	; 0xd6dc
    915e:	f2c0 0201 	movt	r2, #1
    9162:	2121      	movs	r1, #33	; 0x21
    9164:	f00d fd0e 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9168:	defe      	udf	#254	; 0xfe
    916a:	f24d 6000 	movw	r0, #54784	; 0xd600
    916e:	f2c0 0001 	movt	r0, #1
    9172:	f24d 62ec 	movw	r2, #55020	; 0xd6ec
    9176:	f2c0 0201 	movt	r2, #1
    917a:	211c      	movs	r1, #28
    917c:	f00d fd02 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9180:	defe      	udf	#254	; 0xfe
    9182:	f24d 60fc 	movw	r0, #55036	; 0xd6fc
    9186:	f2c0 0001 	movt	r0, #1
    918a:	223f      	movs	r2, #63	; 0x3f
    918c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    918e:	f00d fd0f 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9192:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    9194:	f24d 700c 	movw	r0, #55052	; 0xd70c
    9198:	f2c0 0001 	movt	r0, #1
    919c:	220a      	movs	r2, #10
    919e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91a0:	f00d fd06 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    91a6:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    91aa:	f2c0 0001 	movt	r0, #1
    91ae:	f24d 721c 	movw	r2, #55068	; 0xd71c
    91b2:	f2c0 0201 	movt	r2, #1
    91b6:	2121      	movs	r1, #33	; 0x21
    91b8:	f00d fce4 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91bc:	defe      	udf	#254	; 0xfe
    91be:	f24d 6000 	movw	r0, #54784	; 0xd600
    91c2:	f2c0 0001 	movt	r0, #1
    91c6:	f24d 722c 	movw	r2, #55084	; 0xd72c
    91ca:	f2c0 0201 	movt	r2, #1
    91ce:	211c      	movs	r1, #28
    91d0:	f00d fcd8 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91d4:	defe      	udf	#254	; 0xfe
    91d6:	f24d 703c 	movw	r0, #55100	; 0xd73c
    91da:	f2c0 0001 	movt	r0, #1
    91de:	223f      	movs	r2, #63	; 0x3f
    91e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91e2:	f00d fce5 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91e6:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    91e8:	f24d 704c 	movw	r0, #55116	; 0xd74c
    91ec:	f2c0 0001 	movt	r0, #1
    91f0:	220a      	movs	r2, #10
    91f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91f4:	f00d fcdc 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    91fa:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    91fe:	f2c0 0001 	movt	r0, #1
    9202:	f24d 725c 	movw	r2, #55132	; 0xd75c
    9206:	f2c0 0201 	movt	r2, #1
    920a:	2121      	movs	r1, #33	; 0x21
    920c:	f00d fcba 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9210:	defe      	udf	#254	; 0xfe
    9212:	f24d 6000 	movw	r0, #54784	; 0xd600
    9216:	f2c0 0001 	movt	r0, #1
    921a:	f24d 726c 	movw	r2, #55148	; 0xd76c
    921e:	f2c0 0201 	movt	r2, #1
    9222:	211c      	movs	r1, #28
    9224:	f00d fcae 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9228:	defe      	udf	#254	; 0xfe
    922a:	f24d 707c 	movw	r0, #55164	; 0xd77c
    922e:	f2c0 0001 	movt	r0, #1
    9232:	223f      	movs	r2, #63	; 0x3f
    9234:	9908      	ldr	r1, [sp, #32]
    9236:	f00d fcbb 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    923a:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    923c:	f24d 708c 	movw	r0, #55180	; 0xd78c
    9240:	f2c0 0001 	movt	r0, #1
    9244:	220a      	movs	r2, #10
    9246:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9248:	f00d fcb2 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    924c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    924e:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    9252:	f2c0 0001 	movt	r0, #1
    9256:	f24d 729c 	movw	r2, #55196	; 0xd79c
    925a:	f2c0 0201 	movt	r2, #1
    925e:	2121      	movs	r1, #33	; 0x21
    9260:	f00d fc90 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9264:	defe      	udf	#254	; 0xfe
    9266:	f24d 6000 	movw	r0, #54784	; 0xd600
    926a:	f2c0 0001 	movt	r0, #1
    926e:	f24d 72ac 	movw	r2, #55212	; 0xd7ac
    9272:	f2c0 0201 	movt	r2, #1
    9276:	211c      	movs	r1, #28
    9278:	f00d fc84 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    927c:	defe      	udf	#254	; 0xfe
    927e:	f24d 70bc 	movw	r0, #55228	; 0xd7bc
    9282:	f2c0 0001 	movt	r0, #1
    9286:	223f      	movs	r2, #63	; 0x3f
    9288:	9905      	ldr	r1, [sp, #20]
    928a:	f00d fc91 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    928e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    9290:	f24d 70cc 	movw	r0, #55244	; 0xd7cc
    9294:	f2c0 0001 	movt	r0, #1
    9298:	220a      	movs	r2, #10
    929a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    929c:	f00d fc88 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    92a2:	f24d 50c0 	movw	r0, #54720	; 0xd5c0
    92a6:	f2c0 0001 	movt	r0, #1
    92aa:	f24d 72dc 	movw	r2, #55260	; 0xd7dc
    92ae:	f2c0 0201 	movt	r2, #1
    92b2:	2121      	movs	r1, #33	; 0x21
    92b4:	f00d fc66 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92b8:	defe      	udf	#254	; 0xfe
    92ba:	f24d 6000 	movw	r0, #54784	; 0xd600
    92be:	f2c0 0001 	movt	r0, #1
    92c2:	f24d 72ec 	movw	r2, #55276	; 0xd7ec
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	211c      	movs	r1, #28
    92cc:	f00d fc5a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92d0:	defe      	udf	#254	; 0xfe
    92d2:	f24d 70fc 	movw	r0, #55292	; 0xd7fc
    92d6:	f2c0 0001 	movt	r0, #1
    92da:	223f      	movs	r2, #63	; 0x3f
    92dc:	9902      	ldr	r1, [sp, #8]
    92de:	f00d fc67 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92e2:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    92e4:	f64d 000c 	movw	r0, #55308	; 0xd80c
    92e8:	f2c0 0001 	movt	r0, #1
    92ec:	220a      	movs	r2, #10
    92ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    92f0:	f00d fc5e 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92f4:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    92f6:	f64d 001c 	movw	r0, #55324	; 0xd81c
    92fa:	f2c0 0001 	movt	r0, #1
    92fe:	220a      	movs	r2, #10
    9300:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9302:	f00d fc55 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9306:	defe      	udf	#254	; 0xfe
    9308:	f64d 002c 	movw	r0, #55340	; 0xd82c
    930c:	f2c0 0001 	movt	r0, #1
    9310:	220a      	movs	r2, #10
    9312:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9314:	f00d fc4c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9318:	defe      	udf	#254	; 0xfe

0000931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    931a:	b5b0      	push	{r4, r5, r7, lr}
    931c:	b094      	sub	sp, #80	; 0x50
    931e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    9322:	4696      	mov	lr, r2
    9324:	460c      	mov	r4, r1
    9326:	4605      	mov	r5, r0
    9328:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    932c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9330:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    9334:	9310      	str	r3, [sp, #64]	; 0x40
    9336:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    933a:	4618      	mov	r0, r3
    933c:	4661      	mov	r1, ip
    933e:	930d      	str	r3, [sp, #52]	; 0x34
    9340:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9344:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9348:	940a      	str	r4, [sp, #40]	; 0x28
    934a:	9509      	str	r5, [sp, #36]	; 0x24
    934c:	f005 fb74 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9350:	9008      	str	r0, [sp, #32]
    9352:	e7ff      	b.n	9354 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x3a>
    9354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9356:	b2c1      	uxtb	r1, r0
    9358:	9a08      	ldr	r2, [sp, #32]
    935a:	428a      	cmp	r2, r1
    935c:	d30d      	bcc.n	937a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x60>
    935e:	e7ff      	b.n	9360 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9360:	980a      	ldr	r0, [sp, #40]	; 0x28
    9362:	b2c1      	uxtb	r1, r0
    9364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9366:	fa51 f182 	uxtab	r1, r1, r2
    936a:	b2cb      	uxtb	r3, r1
    936c:	468c      	mov	ip, r1
    936e:	428b      	cmp	r3, r1
    9370:	f8cd c01c 	str.w	ip, [sp, #28]
    9374:	f040 8092 	bne.w	949c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x182>
    9378:	e00b      	b.n	9392 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    937a:	f64d 003c 	movw	r0, #55356	; 0xd83c
    937e:	f2c0 0001 	movt	r0, #1
    9382:	f64d 0244 	movw	r2, #55364	; 0xd844
    9386:	f2c0 0201 	movt	r2, #1
    938a:	2107      	movs	r1, #7
    938c:	f00d fbfa 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9390:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	b241      	sxtb	r1, r0
    9396:	2900      	cmp	r1, #0
    9398:	d411      	bmi.n	93be <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xa4>
    939a:	e7ff      	b.n	939c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    939c:	f240 10f8 	movw	r0, #504	; 0x1f8
    93a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    93a8:	f240 12f0 	movw	r2, #496	; 0x1f0
    93ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b2:	7013      	strb	r3, [r2, #0]
    93b4:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93b6:	f005 fb3f 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    93ba:	9006      	str	r0, [sp, #24]
    93bc:	e00b      	b.n	93d6 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    93be:	f24d 5044 	movw	r0, #54596	; 0xd544
    93c2:	f2c0 0001 	movt	r0, #1
    93c6:	f64d 0264 	movw	r2, #55396	; 0xd864
    93ca:	f2c0 0201 	movt	r2, #1
    93ce:	2108      	movs	r1, #8
    93d0:	f00d fbd8 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    93d4:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93d6:	f240 10f0 	movw	r0, #496	; 0x1f0
    93da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93de:	9906      	ldr	r1, [sp, #24]
    93e0:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    93e2:	f240 10f8 	movw	r0, #504	; 0x1f8
    93e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93ea:	2101      	movs	r1, #1
    93ec:	f005 fb0d 	bl	ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    93f0:	9005      	str	r0, [sp, #20]
    93f2:	e7ff      	b.n	93f4 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xda>
    93f4:	f240 10f0 	movw	r0, #496	; 0x1f0
    93f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93fc:	9905      	ldr	r1, [sp, #20]
    93fe:	6041      	str	r1, [r0, #4]
    9400:	2201      	movs	r2, #1
    9402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9406:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    940a:	9004      	str	r0, [sp, #16]
    940c:	4610      	mov	r0, r2
    940e:	9904      	ldr	r1, [sp, #16]
    9410:	461a      	mov	r2, r3
    9412:	4663      	mov	r3, ip
    9414:	f00f fea4 	bl	19160 <hal_i2c_master_write>
    9418:	9012      	str	r0, [sp, #72]	; 0x48
    941a:	e7ff      	b.n	941c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    941c:	f240 10f8 	movw	r0, #504	; 0x1f8
    9420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9424:	2100      	movs	r1, #0
    9426:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    9428:	f240 10f0 	movw	r0, #496	; 0x1f0
    942c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    9434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9436:	b2d3      	uxtb	r3, r2
    9438:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    943a:	980d      	ldr	r0, [sp, #52]	; 0x34
    943c:	990c      	ldr	r1, [sp, #48]	; 0x30
    943e:	f005 fae4 	bl	ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9442:	9003      	str	r0, [sp, #12]
    9444:	e7ff      	b.n	9446 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x12c>
    9446:	f240 10f0 	movw	r0, #496	; 0x1f0
    944a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    944e:	9903      	ldr	r1, [sp, #12]
    9450:	6041      	str	r1, [r0, #4]
    9452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9456:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    9458:	9002      	str	r0, [sp, #8]
    945a:	4618      	mov	r0, r3
    945c:	9902      	ldr	r1, [sp, #8]
    945e:	f00f ff13 	bl	19288 <hal_i2c_master_read>
    9462:	4601      	mov	r1, r0
    9464:	9013      	str	r0, [sp, #76]	; 0x4c
    9466:	9101      	str	r1, [sp, #4]
    9468:	e7ff      	b.n	946a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    946a:	9801      	ldr	r0, [sp, #4]
    946c:	2804      	cmp	r0, #4
    946e:	d005      	beq.n	947c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x162>
    9470:	e7ff      	b.n	9472 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x158>
    9472:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    9474:	900e      	str	r0, [sp, #56]	; 0x38
    9476:	2001      	movs	r0, #1
    9478:	900e      	str	r0, [sp, #56]	; 0x38
}
    947a:	e00c      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
        console::print("i2c fail\n"); ////
    947c:	f64d 0074 	movw	r0, #55412	; 0xd874
    9480:	f2c0 0001 	movt	r0, #1
    9484:	2109      	movs	r1, #9
    9486:	f006 f9e2 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    948a:	e7ff      	b.n	948c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x172>
    948c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    948e:	900e      	str	r0, [sp, #56]	; 0x38
    9490:	2001      	movs	r0, #1
    9492:	900e      	str	r0, [sp, #56]	; 0x38
    9494:	e7ff      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
}
    9496:	980e      	ldr	r0, [sp, #56]	; 0x38
    9498:	b014      	add	sp, #80	; 0x50
    949a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    949c:	f24d 6000 	movw	r0, #54784	; 0xd600
    94a0:	f2c0 0001 	movt	r0, #1
    94a4:	f64d 0254 	movw	r2, #55380	; 0xd854
    94a8:	f2c0 0201 	movt	r2, #1
    94ac:	211c      	movs	r1, #28
    94ae:	f00d fb69 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    94b2:	defe      	udf	#254	; 0xfe

000094b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 6144;  //  Must be 3072 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    94b4:	b580      	push	{r7, lr}
    94b6:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    94b8:	f64d 007d 	movw	r0, #55421	; 0xd87d
    94bc:	f2c0 0001 	movt	r0, #1
    94c0:	210b      	movs	r1, #11
    94c2:	f006 f9c4 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    94c6:	e7ff      	b.n	94c8 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x14>
    94c8:	f006 fa07 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    94cc:	e7ff      	b.n	94ce <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x1a>
    94ce:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    94d0:	900e      	str	r0, [sp, #56]	; 0x38
    94d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    94d4:	f004 ffd7 	bl	e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94d8:	900d      	str	r0, [sp, #52]	; 0x34
    94da:	910c      	str	r1, [sp, #48]	; 0x30
    94dc:	e7ff      	b.n	94de <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x2a>
    94de:	20ef      	movs	r0, #239	; 0xef
    94e0:	900b      	str	r0, [sp, #44]	; 0x2c
    94e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    94e4:	f004 ffcf 	bl	e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94e8:	900a      	str	r0, [sp, #40]	; 0x28
    94ea:	9109      	str	r1, [sp, #36]	; 0x24
    94ec:	e7ff      	b.n	94ee <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x3a>
    let background = Rectangle::<Rgb565>
    94ee:	4668      	mov	r0, sp
    94f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    94f2:	6001      	str	r1, [r0, #0]
    94f4:	a817      	add	r0, sp, #92	; 0x5c
    94f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    94f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    94fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94fc:	f009 f83e 	bl	1257c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9500:	e7ff      	b.n	9502 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x4e>
    9502:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    9504:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    9508:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    950c:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    9510:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    9514:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    9518:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    951c:	f005 f82e 	bl	e57c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9520:	9008      	str	r0, [sp, #32]
    9522:	e7ff      	b.n	9524 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x70>
    9524:	9808      	ldr	r0, [sp, #32]
    9526:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    952a:	2101      	movs	r1, #1
    952c:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    9530:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    9534:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    9538:	a810      	add	r0, sp, #64	; 0x40
    953a:	a917      	add	r1, sp, #92	; 0x5c
    953c:	f008 fcb4 	bl	11ea8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9540:	e7ff      	b.n	9542 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x8e>
    //  druid::draw_to_display(background);

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    9542:	f64d 009c 	movw	r0, #55452	; 0xd89c
    9546:	f2c0 0001 	movt	r0, #1
    954a:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    954c:	f249 50cd 	movw	r0, #38349	; 0x95cd
    9550:	f2c0 0000 	movt	r0, #0
    9554:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    9556:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9558:	4668      	mov	r0, sp
    955a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    955e:	6103      	str	r3, [r0, #16]
    9560:	60c3      	str	r3, [r0, #12]
    9562:	f240 234c 	movw	r3, #588	; 0x24c
    9566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956a:	6083      	str	r3, [r0, #8]
    956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9570:	6043      	str	r3, [r0, #4]
    9572:	2380      	movs	r3, #128	; 0x80
    9574:	6003      	str	r3, [r0, #0]
    9576:	f240 10fc 	movw	r0, #508	; 0x1fc
    957a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    957e:	2300      	movs	r3, #0
    9580:	f005 ffb5 	bl	f4ee <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    9584:	9007      	str	r0, [sp, #28]
    9586:	e7ff      	b.n	9588 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xd4>
    9588:	9807      	ldr	r0, [sp, #28]
    958a:	f005 ff20 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    958e:	9020      	str	r0, [sp, #128]	; 0x80
    9590:	e7ff      	b.n	9592 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xde>
        NULL,  //  Argument to be passed to above function
        128,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
    9592:	9820      	ldr	r0, [sp, #128]	; 0x80
    9594:	1e41      	subs	r1, r0, #1
    9596:	bf18      	it	ne
    9598:	2101      	movne	r1, #1
    959a:	2801      	cmp	r0, #1
    959c:	d001      	beq.n	95a2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xee>
    959e:	e7ff      	b.n	95a0 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xec>
    95a0:	e005      	b.n	95ae <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xfa>
    95a2:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    95a4:	900f      	str	r0, [sp, #60]	; 0x3c
    95a6:	2001      	movs	r0, #1
    95a8:	900f      	str	r0, [sp, #60]	; 0x3c
}
    95aa:	e006      	b.n	95ba <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x106>
    os::task_init(                  //  Create a new task and start it...
    95ac:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
    95ae:	9820      	ldr	r0, [sp, #128]	; 0x80
    95b0:	9023      	str	r0, [sp, #140]	; 0x8c
    95b2:	f005 ff7f 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95b6:	9006      	str	r0, [sp, #24]
    95b8:	e002      	b.n	95c0 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x10c>
}
    95ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
    95bc:	b024      	add	sp, #144	; 0x90
    95be:	bd80      	pop	{r7, pc}
    ) ? ;                               //  `?` means check for error
    95c0:	9806      	ldr	r0, [sp, #24]
    95c2:	f005 fef8 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95c6:	900f      	str	r0, [sp, #60]	; 0x3c
    95c8:	e7ff      	b.n	95ca <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x116>
    95ca:	e7f6      	b.n	95ba <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x106>

000095cc <_ZN3app5chip89task_func17h54bf83617eedf089E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    95cc:	b580      	push	{r7, lr}
    95ce:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
    95d2:	b088      	sub	sp, #32
    95d4:	f50d 5e00 	add.w	lr, sp, #8192	; 0x2000
    95d8:	f8ce 009c 	str.w	r0, [lr, #156]	; 0x9c
    95dc:	a802      	add	r0, sp, #8
    //  Create the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    95de:	f000 fb14 	bl	9c0a <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>
    95e2:	e7ff      	b.n	95e4 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x18>

    //  This will block until emulator terminates
    console::print("CHIP8 started\n"); console::flush();
    95e4:	f64d 00a0 	movw	r0, #55456	; 0xd8a0
    95e8:	f2c0 0001 	movt	r0, #1
    95ec:	210e      	movs	r1, #14
    95ee:	f006 f92e 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    95f2:	e7ff      	b.n	95f4 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x28>
    95f4:	f006 f971 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    95f8:	e7ff      	b.n	95fa <_ZN3app5chip89task_func17h54bf83617eedf089E+0x2e>
    95fa:	f10d 0e10 	add.w	lr, sp, #16
    95fe:	f50e 5082 	add.w	r0, lr, #4160	; 0x1040
    9602:	a902      	add	r1, sp, #8
    9604:	f241 0248 	movw	r2, #4168	; 0x1048
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    9608:	9001      	str	r0, [sp, #4]
    960a:	f013 fe8f 	bl	1d32c <__aeabi_memcpy>
    960e:	f64d 01ae 	movw	r1, #55470	; 0xd8ae
    9612:	f2c0 0101 	movt	r1, #1
    9616:	f240 5215 	movw	r2, #1301	; 0x515
    961a:	9801      	ldr	r0, [sp, #4]
    961c:	f000 fb89 	bl	9d32 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>
    9620:	e7ff      	b.n	9622 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x56>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    9622:	f64d 50c3 	movw	r0, #56771	; 0xddc3
    9626:	f2c0 0001 	movt	r0, #1
    962a:	210b      	movs	r1, #11
    962c:	f006 f90f 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9630:	e7ff      	b.n	9632 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x66>
    9632:	f006 f952 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9636:	e7ff      	b.n	9638 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x6c>
    assert!(false, "CHIP8 should not end");
    9638:	f64d 50ce 	movw	r0, #56782	; 0xddce
    963c:	f2c0 0001 	movt	r0, #1
    9640:	f64d 52f8 	movw	r2, #56824	; 0xddf8
    9644:	f2c0 0201 	movt	r2, #1
    9648:	2114      	movs	r1, #20
    964a:	f00d fa9b 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    964e:	defe      	udf	#254	; 0xfe

00009650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>:
static mut SCREEN_BUFFER: [u8; SCREEN_WIDTH * SCREEN_HEIGHT] = [0; SCREEN_WIDTH * SCREEN_HEIGHT];

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    9650:	b081      	sub	sp, #4
    9652:	9000      	str	r0, [sp, #0]
    9654:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    9656:	b001      	add	sp, #4
    9658:	4770      	bx	lr

0000965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>:

    fn key(&mut self, _key: u8) -> bool {
    965a:	b082      	sub	sp, #8
    965c:	460a      	mov	r2, r1
    965e:	9000      	str	r0, [sp, #0]
    9660:	f88d 1007 	strb.w	r1, [sp, #7]
    9664:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    9666:	b002      	add	sp, #8
    9668:	4770      	bx	lr

0000966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    966a:	b510      	push	{r4, lr}
    966c:	b0b0      	sub	sp, #192	; 0xc0
    966e:	469c      	mov	ip, r3
    9670:	9029      	str	r0, [sp, #164]	; 0xa4
    9672:	912a      	str	r1, [sp, #168]	; 0xa8
    9674:	922b      	str	r2, [sp, #172]	; 0xac
    9676:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    967a:	293f      	cmp	r1, #63	; 0x3f
    967c:	920f      	str	r2, [sp, #60]	; 0x3c
    967e:	910e      	str	r1, [sp, #56]	; 0x38
    9680:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    9684:	d804      	bhi.n	9690 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x26>
    9686:	e7ff      	b.n	9688 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1e>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    9688:	980f      	ldr	r0, [sp, #60]	; 0x3c
    968a:	281f      	cmp	r0, #31
    968c:	d814      	bhi.n	96b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x4e>
    968e:	e00b      	b.n	96a8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x3e>
        assert!(x < SCREEN_WIDTH, "x overflow");
    9690:	f64d 6008 	movw	r0, #56840	; 0xde08
    9694:	f2c0 0001 	movt	r0, #1
    9698:	f64d 6214 	movw	r2, #56852	; 0xde14
    969c:	f2c0 0201 	movt	r2, #1
    96a0:	210a      	movs	r1, #10
    96a2:	f00d fa6f 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    96a6:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    96a8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    96aa:	0181      	lsls	r1, r0, #6
    96ac:	0e82      	lsrs	r2, r0, #26
    96ae:	2a00      	cmp	r2, #0
    96b0:	910c      	str	r1, [sp, #48]	; 0x30
    96b2:	f040 80f7 	bne.w	98a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x23a>
    96b6:	e00b      	b.n	96d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x66>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    96b8:	f64d 6024 	movw	r0, #56868	; 0xde24
    96bc:	f2c0 0001 	movt	r0, #1
    96c0:	f64d 6230 	movw	r2, #56880	; 0xde30
    96c4:	f2c0 0201 	movt	r2, #1
    96c8:	210a      	movs	r1, #10
    96ca:	f00d fa5b 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    96ce:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    96d0:	980e      	ldr	r0, [sp, #56]	; 0x38
    96d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    96d4:	1842      	adds	r2, r0, r1
    96d6:	4613      	mov	r3, r2
    96d8:	4282      	cmp	r2, r0
    96da:	930b      	str	r3, [sp, #44]	; 0x2c
    96dc:	f0c0 80ee 	bcc.w	98bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x252>
    96e0:	e7ff      	b.n	96e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x78>
    96e2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    96e4:	902d      	str	r0, [sp, #180]	; 0xb4
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    96e6:	990d      	ldr	r1, [sp, #52]	; 0x34
    96e8:	07ca      	lsls	r2, r1, #31
    96ea:	2a00      	cmp	r2, #0
    96ec:	d104      	bne.n	96f8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x8e>
    96ee:	e7ff      	b.n	96f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x86>
    96f0:	2000      	movs	r0, #0
    96f2:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    96f6:	e003      	b.n	9700 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x96>
    96f8:	2001      	movs	r0, #1
    96fa:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    96fe:	e7ff      	b.n	9700 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x96>
    9700:	2000      	movs	r0, #0
    9702:	990b      	ldr	r1, [sp, #44]	; 0x2c
    9704:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    9708:	f040 80e4 	bne.w	98d4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x26a>
    970c:	e7ff      	b.n	970e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa4>
    970e:	f246 204c 	movw	r0, #25164	; 0x624c
    9712:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9716:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    971a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    971c:	5481      	strb	r1, [r0, r2]
    971e:	2003      	movs	r0, #3
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    9720:	990e      	ldr	r1, [sp, #56]	; 0x38
    9722:	fb81 0300 	smull	r0, r3, r1, r0
    9726:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    972a:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
    972e:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    9732:	f040 80d9 	bne.w	98e8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x27e>
    9736:	e7ff      	b.n	9738 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xce>
    9738:	980a      	ldr	r0, [sp, #40]	; 0x28
    973a:	902e      	str	r0, [sp, #184]	; 0xb8
    973c:	2103      	movs	r1, #3
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    973e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9740:	fb82 1301 	smull	r1, r3, r2, r1
    9744:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    9748:	ebb3 7fe1 	cmp.w	r3, r1, asr #31
    974c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    9750:	f040 80d6 	bne.w	9900 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x296>
    9754:	e7ff      	b.n	9756 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xec>
    9756:	9809      	ldr	r0, [sp, #36]	; 0x24
    9758:	902f      	str	r0, [sp, #188]	; 0xbc
        assert!(x_scaled < 240 - PIXEL_SIZE, "x overflow");
    975a:	990a      	ldr	r1, [sp, #40]	; 0x28
    975c:	29ec      	cmp	r1, #236	; 0xec
    975e:	dc04      	bgt.n	976a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x100>
    9760:	e7ff      	b.n	9762 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xf8>
        assert!(y_scaled < 240 - PIXEL_SIZE, "y overflow");
    9762:	9809      	ldr	r0, [sp, #36]	; 0x24
    9764:	28ec      	cmp	r0, #236	; 0xec
    9766:	dc11      	bgt.n	978c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x122>
    9768:	e00b      	b.n	9782 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x118>
        assert!(x_scaled < 240 - PIXEL_SIZE, "x overflow");
    976a:	f64d 6008 	movw	r0, #56840	; 0xde08
    976e:	f2c0 0001 	movt	r0, #1
    9772:	f64d 62dc 	movw	r2, #57052	; 0xdedc
    9776:	f2c0 0201 	movt	r2, #1
    977a:	210a      	movs	r1, #10
    977c:	f00d fa02 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9780:	defe      	udf	#254	; 0xfe
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    9782:	980d      	ldr	r0, [sp, #52]	; 0x34
    9784:	07c1      	lsls	r1, r0, #31
    9786:	2900      	cmp	r1, #0
    9788:	d11e      	bne.n	97c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x15e>
    978a:	e00b      	b.n	97a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x13a>
        assert!(y_scaled < 240 - PIXEL_SIZE, "y overflow");
    978c:	f64d 6024 	movw	r0, #56868	; 0xde24
    9790:	f2c0 0001 	movt	r0, #1
    9794:	f64d 62ec 	movw	r2, #57068	; 0xdeec
    9798:	f2c0 0201 	movt	r2, #1
    979c:	210a      	movs	r1, #10
    979e:	f00d f9f1 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    97a2:	defe      	udf	#254	; 0xfe
    97a4:	2000      	movs	r0, #0
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    97a6:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
    97aa:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    97ae:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    97b2:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    97b6:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    97ba:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    97be:	f004 fedd 	bl	e57c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    97c2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    97c6:	e013      	b.n	97f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x186>
    97c8:	2000      	movs	r0, #0
    97ca:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    97ce:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    97d2:	20ff      	movs	r0, #255	; 0xff
    97d4:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    97d8:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    97dc:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    97e0:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    97e4:	f004 feca 	bl	e57c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    97e8:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    97ec:	e7ff      	b.n	97ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x184>
    97ee:	e000      	b.n	97f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x188>
    97f0:	e7ff      	b.n	97f2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x188>
        let pixel = Rectangle::<Rgb565>
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    97f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    97f4:	9909      	ldr	r1, [sp, #36]	; 0x24
    97f6:	f004 fe46 	bl	e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    97fa:	9008      	str	r0, [sp, #32]
    97fc:	9107      	str	r1, [sp, #28]
    97fe:	e7ff      	b.n	9800 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x196>
    9800:	980a      	ldr	r0, [sp, #40]	; 0x28
    9802:	1cc1      	adds	r1, r0, #3
    9804:	460a      	mov	r2, r1
    9806:	4281      	cmp	r1, r0
    9808:	9206      	str	r2, [sp, #24]
    980a:	f180 8085 	bvs.w	9918 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2ae>
    980e:	e7ff      	b.n	9810 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1a6>
    9810:	9806      	ldr	r0, [sp, #24]
    9812:	1e41      	subs	r1, r0, #1
    9814:	460a      	mov	r2, r1
    9816:	4281      	cmp	r1, r0
    9818:	9205      	str	r2, [sp, #20]
    981a:	f180 8089 	bvs.w	9930 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2c6>
    981e:	e7ff      	b.n	9820 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1b6>
    9820:	9809      	ldr	r0, [sp, #36]	; 0x24
    9822:	1cc1      	adds	r1, r0, #3
    9824:	460a      	mov	r2, r1
    9826:	4281      	cmp	r1, r0
    9828:	9204      	str	r2, [sp, #16]
    982a:	f180 808d 	bvs.w	9948 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2de>
    982e:	e7ff      	b.n	9830 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1c6>
    9830:	9804      	ldr	r0, [sp, #16]
    9832:	1e41      	subs	r1, r0, #1
    9834:	460a      	mov	r2, r1
    9836:	4281      	cmp	r1, r0
    9838:	9203      	str	r2, [sp, #12]
    983a:	f180 8091 	bvs.w	9960 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2f6>
    983e:	e7ff      	b.n	9840 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1d6>
    9840:	9805      	ldr	r0, [sp, #20]
    9842:	9903      	ldr	r1, [sp, #12]
    9844:	f004 fe1f 	bl	e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    9848:	9002      	str	r0, [sp, #8]
    984a:	9101      	str	r1, [sp, #4]
    984c:	e7ff      	b.n	984e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1e4>
        let pixel = Rectangle::<Rgb565>
    984e:	4668      	mov	r0, sp
    9850:	9901      	ldr	r1, [sp, #4]
    9852:	6001      	str	r1, [r0, #0]
    9854:	a81a      	add	r0, sp, #104	; 0x68
    9856:	9908      	ldr	r1, [sp, #32]
    9858:	9a07      	ldr	r2, [sp, #28]
    985a:	9b02      	ldr	r3, [sp, #8]
    985c:	f008 fe8e 	bl	1257c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9860:	e7ff      	b.n	9862 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1f8>
            .fill( Some( color ) );
    9862:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
    9866:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    986a:	2001      	movs	r0, #1
    986c:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        let pixel = Rectangle::<Rgb565>
    9870:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
    9874:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    9878:	a813      	add	r0, sp, #76	; 0x4c
    987a:	a91a      	add	r1, sp, #104	; 0x68
    987c:	f008 fb14 	bl	11ea8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9880:	e7ff      	b.n	9882 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x218>
    9882:	a813      	add	r0, sp, #76	; 0x4c
    9884:	a922      	add	r1, sp, #136	; 0x88
        druid::draw_to_display(pixel);
    9886:	460a      	mov	r2, r1
    9888:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    988c:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    9890:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    9894:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    9898:	4608      	mov	r0, r1
    989a:	f006 fcd6 	bl	1024a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    989e:	e7ff      	b.n	98a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x236>

        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    98a0:	b030      	add	sp, #192	; 0xc0
    98a2:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    98a4:	f64d 6050 	movw	r0, #56912	; 0xde50
    98a8:	f2c0 0001 	movt	r0, #1
    98ac:	f64d 6240 	movw	r2, #56896	; 0xde40
    98b0:	f2c0 0201 	movt	r2, #1
    98b4:	2121      	movs	r1, #33	; 0x21
    98b6:	f00d f965 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98ba:	defe      	udf	#254	; 0xfe
    98bc:	f64d 6090 	movw	r0, #56976	; 0xde90
    98c0:	f2c0 0001 	movt	r0, #1
    98c4:	f64d 6274 	movw	r2, #56948	; 0xde74
    98c8:	f2c0 0201 	movt	r2, #1
    98cc:	211c      	movs	r1, #28
    98ce:	f00d f959 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98d2:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    98d4:	f64d 60ac 	movw	r0, #57004	; 0xdeac
    98d8:	f2c0 0001 	movt	r0, #1
    98dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    98e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    98e2:	f00d f965 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    98e6:	defe      	udf	#254	; 0xfe
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    98e8:	f64d 6050 	movw	r0, #56912	; 0xde50
    98ec:	f2c0 0001 	movt	r0, #1
    98f0:	f64d 62bc 	movw	r2, #57020	; 0xdebc
    98f4:	f2c0 0201 	movt	r2, #1
    98f8:	2121      	movs	r1, #33	; 0x21
    98fa:	f00d f943 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98fe:	defe      	udf	#254	; 0xfe
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    9900:	f64d 6050 	movw	r0, #56912	; 0xde50
    9904:	f2c0 0001 	movt	r0, #1
    9908:	f64d 62cc 	movw	r2, #57036	; 0xdecc
    990c:	f2c0 0201 	movt	r2, #1
    9910:	2121      	movs	r1, #33	; 0x21
    9912:	f00d f937 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9916:	defe      	udf	#254	; 0xfe
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    9918:	f64d 6090 	movw	r0, #56976	; 0xde90
    991c:	f2c0 0001 	movt	r0, #1
    9920:	f64d 62fc 	movw	r2, #57084	; 0xdefc
    9924:	f2c0 0201 	movt	r2, #1
    9928:	211c      	movs	r1, #28
    992a:	f00d f92b 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    992e:	defe      	udf	#254	; 0xfe
    9930:	f64d 7010 	movw	r0, #57104	; 0xdf10
    9934:	f2c0 0001 	movt	r0, #1
    9938:	f64d 62fc 	movw	r2, #57084	; 0xdefc
    993c:	f2c0 0201 	movt	r2, #1
    9940:	2121      	movs	r1, #33	; 0x21
    9942:	f00d f91f 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9946:	defe      	udf	#254	; 0xfe
    9948:	f64d 6090 	movw	r0, #56976	; 0xde90
    994c:	f2c0 0001 	movt	r0, #1
    9950:	f64d 7234 	movw	r2, #57140	; 0xdf34
    9954:	f2c0 0201 	movt	r2, #1
    9958:	211c      	movs	r1, #28
    995a:	f00d f913 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    995e:	defe      	udf	#254	; 0xfe
    9960:	f64d 7010 	movw	r0, #57104	; 0xdf10
    9964:	f2c0 0001 	movt	r0, #1
    9968:	f64d 7234 	movw	r2, #57140	; 0xdf34
    996c:	f2c0 0201 	movt	r2, #1
    9970:	2121      	movs	r1, #33	; 0x21
    9972:	f00d f907 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9976:	defe      	udf	#254	; 0xfe

00009978 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    9978:	b088      	sub	sp, #32
    997a:	9004      	str	r0, [sp, #16]
    997c:	9105      	str	r1, [sp, #20]
    997e:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    9980:	293f      	cmp	r1, #63	; 0x3f
    9982:	9203      	str	r2, [sp, #12]
    9984:	9102      	str	r1, [sp, #8]
    9986:	d804      	bhi.n	9992 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x1a>
    9988:	e7ff      	b.n	998a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    998a:	9803      	ldr	r0, [sp, #12]
    998c:	281f      	cmp	r0, #31
    998e:	d813      	bhi.n	99b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x40>
    9990:	e00b      	b.n	99aa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    9992:	f64d 6008 	movw	r0, #56840	; 0xde08
    9996:	f2c0 0001 	movt	r0, #1
    999a:	f64d 7244 	movw	r2, #57156	; 0xdf44
    999e:	f2c0 0201 	movt	r2, #1
    99a2:	210a      	movs	r1, #10
    99a4:	f00d f8ee 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99a8:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    99aa:	9803      	ldr	r0, [sp, #12]
    99ac:	0181      	lsls	r1, r0, #6
    99ae:	0e82      	lsrs	r2, r0, #26
    99b0:	2a00      	cmp	r2, #0
    99b2:	9101      	str	r1, [sp, #4]
    99b4:	d126      	bne.n	9a04 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x8c>
    99b6:	e00b      	b.n	99d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    99b8:	f64d 6024 	movw	r0, #56868	; 0xde24
    99bc:	f2c0 0001 	movt	r0, #1
    99c0:	f64d 7254 	movw	r2, #57172	; 0xdf54
    99c4:	f2c0 0201 	movt	r2, #1
    99c8:	210a      	movs	r1, #10
    99ca:	f00d f8db 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99ce:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    99d0:	9802      	ldr	r0, [sp, #8]
    99d2:	9901      	ldr	r1, [sp, #4]
    99d4:	1842      	adds	r2, r0, r1
    99d6:	4613      	mov	r3, r2
    99d8:	4282      	cmp	r2, r0
    99da:	9300      	str	r3, [sp, #0]
    99dc:	d31e      	bcc.n	9a1c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0xa4>
    99de:	e7ff      	b.n	99e0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x68>
    99e0:	9800      	ldr	r0, [sp, #0]
    99e2:	9007      	str	r0, [sp, #28]
    99e4:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    99e6:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    99ea:	d123      	bne.n	9a34 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0xbc>
    99ec:	e7ff      	b.n	99ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x76>
    99ee:	f246 204c 	movw	r0, #25164	; 0x624c
    99f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    99f6:	9900      	ldr	r1, [sp, #0]
    99f8:	5c40      	ldrb	r0, [r0, r1]
    99fa:	2800      	cmp	r0, #0
    99fc:	bf18      	it	ne
    99fe:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    9a00:	b008      	add	sp, #32
    9a02:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    9a04:	f64d 6050 	movw	r0, #56912	; 0xde50
    9a08:	f2c0 0001 	movt	r0, #1
    9a0c:	f64d 7264 	movw	r2, #57188	; 0xdf64
    9a10:	f2c0 0201 	movt	r2, #1
    9a14:	2121      	movs	r1, #33	; 0x21
    9a16:	f00d f8b5 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9a1a:	defe      	udf	#254	; 0xfe
    9a1c:	f64d 6090 	movw	r0, #56976	; 0xde90
    9a20:	f2c0 0001 	movt	r0, #1
    9a24:	f64d 7274 	movw	r2, #57204	; 0xdf74
    9a28:	f2c0 0201 	movt	r2, #1
    9a2c:	211c      	movs	r1, #28
    9a2e:	f00d f8a9 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9a32:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    9a34:	f64d 7084 	movw	r0, #57220	; 0xdf84
    9a38:	f2c0 0001 	movt	r0, #1
    9a3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9a40:	9900      	ldr	r1, [sp, #0]
    9a42:	f00d f8b5 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9a46:	defe      	udf	#254	; 0xfe

00009a48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    9a48:	b580      	push	{r7, lr}
    9a4a:	b086      	sub	sp, #24
    9a4c:	9003      	str	r0, [sp, #12]
    9a4e:	9104      	str	r1, [sp, #16]
    9a50:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    9a52:	f64d 7094 	movw	r0, #57236	; 0xdf94
    9a56:	f2c0 0001 	movt	r0, #1
    9a5a:	2308      	movs	r3, #8
    9a5c:	9102      	str	r1, [sp, #8]
    9a5e:	4619      	mov	r1, r3
    9a60:	9201      	str	r2, [sp, #4]
    9a62:	f005 fef4 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9a66:	e7ff      	b.n	9a68 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x20>
    9a68:	9802      	ldr	r0, [sp, #8]
    9a6a:	f005 ff2e 	bl	f8ca <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    9a6e:	e7ff      	b.n	9a70 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x28>
    9a70:	f64d 709c 	movw	r0, #57244	; 0xdf9c
    9a74:	f2c0 0001 	movt	r0, #1
    9a78:	2102      	movs	r1, #2
    9a7a:	f005 fee8 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9a7e:	e7ff      	b.n	9a80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x38>
    9a80:	9801      	ldr	r0, [sp, #4]
    9a82:	f005 ff22 	bl	f8ca <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    9a86:	e7ff      	b.n	9a88 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x40>
    9a88:	f64d 709e 	movw	r0, #57246	; 0xdf9e
    9a8c:	f2c0 0001 	movt	r0, #1
    9a90:	2101      	movs	r1, #1
    9a92:	f005 fedc 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9a96:	e7ff      	b.n	9a98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x50>
    9a98:	f005 ff1f 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9a9c:	e7ff      	b.n	9a9e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E+0x56>
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    9a9e:	b006      	add	sp, #24
    9aa0:	bd80      	pop	{r7, pc}

00009aa2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>:

    fn vram_size(&mut self) -> (usize, usize) {
    9aa2:	b083      	sub	sp, #12
    9aa4:	9002      	str	r0, [sp, #8]
    9aa6:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    9aa8:	9000      	str	r0, [sp, #0]
    9aaa:	2020      	movs	r0, #32
    9aac:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    9aae:	9800      	ldr	r0, [sp, #0]
    9ab0:	9901      	ldr	r1, [sp, #4]
    9ab2:	b003      	add	sp, #12
    9ab4:	4770      	bx	lr

00009ab6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>:

    fn clock(&mut self) -> u64 {
    9ab6:	b5b0      	push	{r4, r5, r7, lr}
    9ab8:	b086      	sub	sp, #24
    9aba:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 1000_u64 }
    9abc:	f011 f9c8 	bl	1ae50 <os_time_get>
    9ac0:	9004      	str	r0, [sp, #16]
    9ac2:	e7ff      	b.n	9ac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xe>
    9ac4:	2000      	movs	r0, #0
    9ac6:	9904      	ldr	r1, [sp, #16]
    9ac8:	fba0 2301 	umull	r2, r3, r0, r1
    9acc:	2b00      	cmp	r3, #0
    9ace:	bf18      	it	ne
    9ad0:	2301      	movne	r3, #1
    9ad2:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9ad6:	fba0 e40c 	umull	lr, r4, r0, ip
    9ada:	2c00      	cmp	r4, #0
    9adc:	bf18      	it	ne
    9ade:	2401      	movne	r4, #1
    9ae0:	ea43 0304 	orr.w	r3, r3, r4
    9ae4:	4472      	add	r2, lr
    9ae6:	fba1 ce0c 	umull	ip, lr, r1, ip
    9aea:	eb12 020e 	adds.w	r2, r2, lr
    9aee:	f140 0000 	adc.w	r0, r0, #0
    9af2:	ea40 0003 	orr.w	r0, r0, r3
    9af6:	2800      	cmp	r0, #0
    9af8:	f8cd c00c 	str.w	ip, [sp, #12]
    9afc:	9202      	str	r2, [sp, #8]
    9afe:	d124      	bne.n	9b4a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x94>
    9b00:	e7ff      	b.n	9b02 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x4c>
    9b02:	2000      	movs	r0, #0
    9b04:	9903      	ldr	r1, [sp, #12]
    9b06:	fba0 2301 	umull	r2, r3, r0, r1
    9b0a:	2b00      	cmp	r3, #0
    9b0c:	bf18      	it	ne
    9b0e:	2301      	movne	r3, #1
    9b10:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9b14:	f8dd e008 	ldr.w	lr, [sp, #8]
    9b18:	fbae 450c 	umull	r4, r5, lr, ip
    9b1c:	2d00      	cmp	r5, #0
    9b1e:	bf18      	it	ne
    9b20:	2501      	movne	r5, #1
    9b22:	ea43 0305 	orr.w	r3, r3, r5
    9b26:	4422      	add	r2, r4
    9b28:	fba1 c40c 	umull	ip, r4, r1, ip
    9b2c:	1912      	adds	r2, r2, r4
    9b2e:	f140 0000 	adc.w	r0, r0, #0
    9b32:	ea40 0003 	orr.w	r0, r0, r3
    9b36:	2800      	cmp	r0, #0
    9b38:	f8cd c004 	str.w	ip, [sp, #4]
    9b3c:	9200      	str	r2, [sp, #0]
    9b3e:	d110      	bne.n	9b62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xac>
    9b40:	e7ff      	b.n	9b42 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x8c>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    9b42:	9801      	ldr	r0, [sp, #4]
    9b44:	9900      	ldr	r1, [sp, #0]
    9b46:	b006      	add	sp, #24
    9b48:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 1000_u64 }
    9b4a:	f64d 6050 	movw	r0, #56912	; 0xde50
    9b4e:	f2c0 0001 	movt	r0, #1
    9b52:	f64d 72a0 	movw	r2, #57248	; 0xdfa0
    9b56:	f2c0 0201 	movt	r2, #1
    9b5a:	2121      	movs	r1, #33	; 0x21
    9b5c:	f00d f812 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b60:	defe      	udf	#254	; 0xfe
    9b62:	f64d 6050 	movw	r0, #56912	; 0xde50
    9b66:	f2c0 0001 	movt	r0, #1
    9b6a:	f64d 72a0 	movw	r2, #57248	; 0xdfa0
    9b6e:	f2c0 0201 	movt	r2, #1
    9b72:	2121      	movs	r1, #33	; 0x21
    9b74:	f00d f806 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b78:	defe      	udf	#254	; 0xfe

00009b7a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>:

    fn beep(&mut self) {
    9b7a:	b081      	sub	sp, #4
    9b7c:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    9b7e:	b001      	add	sp, #4
    9b80:	4770      	bx	lr

00009b82 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>:

    fn sched(&mut self) -> bool {
    9b82:	b580      	push	{r7, lr}
    9b84:	b082      	sub	sp, #8
    9b86:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        console::print("sched\n"); // console::flush(); ////
    9b88:	f64d 70b0 	movw	r0, #57264	; 0xdfb0
    9b8c:	f2c0 0001 	movt	r0, #1
    9b90:	2106      	movs	r1, #6
    9b92:	f005 fe5c 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9b96:	e7ff      	b.n	9b98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x16>
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    9b98:	f00f ff32 	bl	19a00 <hal_watchdog_tickle>
    9b9c:	e7ff      	b.n	9b9e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x1c>
    9b9e:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    9ba0:	f011 f97c 	bl	1ae9c <os_time_delay>
    9ba4:	e7ff      	b.n	9ba6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0x24>
    9ba6:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    9ba8:	b002      	add	sp, #8
    9baa:	bd80      	pop	{r7, pc}

00009bac <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    9bac:	b580      	push	{r7, lr}
    9bae:	b084      	sub	sp, #16
    9bb0:	460a      	mov	r2, r1
    9bb2:	4603      	mov	r3, r0
    9bb4:	f8ad 000c 	strh.w	r0, [sp, #12]
    9bb8:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    9bbc:	f64d 70b6 	movw	r0, #57270	; 0xdfb6
    9bc0:	f2c0 0001 	movt	r0, #1
    9bc4:	2118      	movs	r1, #24
    9bc6:	9202      	str	r2, [sp, #8]
    9bc8:	9301      	str	r3, [sp, #4]
    9bca:	f005 fe40 	bl	f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9bce:	e7ff      	b.n	9bd0 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x24>
    9bd0:	f005 fe83 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9bd4:	e7ff      	b.n	9bd6 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x2a>
}
    9bd6:	b004      	add	sp, #16
    9bd8:	bd80      	pop	{r7, pc}

00009bda <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>:
    9bda:	b580      	push	{r7, lr}
    9bdc:	b082      	sub	sp, #8
    9bde:	9200      	str	r2, [sp, #0]
    9be0:	9101      	str	r1, [sp, #4]
    9be2:	9a00      	ldr	r2, [sp, #0]
    9be4:	f003 fe57 	bl	d896 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>
    9be8:	e7ff      	b.n	9bea <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E+0x10>
    9bea:	b002      	add	sp, #8
    9bec:	bd80      	pop	{r7, pc}

00009bee <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>:
    9bee:	b580      	push	{r7, lr}
    9bf0:	b084      	sub	sp, #16
    9bf2:	9102      	str	r1, [sp, #8]
    9bf4:	9003      	str	r0, [sp, #12]
    9bf6:	9902      	ldr	r1, [sp, #8]
    9bf8:	f003 fe5f 	bl	d8ba <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>
    9bfc:	9001      	str	r0, [sp, #4]
    9bfe:	9100      	str	r1, [sp, #0]
    9c00:	e7ff      	b.n	9c02 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E+0x14>
    9c02:	9801      	ldr	r0, [sp, #4]
    9c04:	9900      	ldr	r1, [sp, #0]
    9c06:	b004      	add	sp, #16
    9c08:	bd80      	pop	{r7, pc}

00009c0a <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    9c0a:	b570      	push	{r4, r5, r6, lr}
    9c0c:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    9c10:	f10d 0e04 	add.w	lr, sp, #4
    9c14:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    9c18:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    9c1a:	9209      	str	r2, [sp, #36]	; 0x24
    9c1c:	9208      	str	r2, [sp, #32]
    9c1e:	9207      	str	r2, [sp, #28]
    9c20:	9206      	str	r2, [sp, #24]
    9c22:	ab0a      	add	r3, sp, #40	; 0x28
    9c24:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    9c28:	9005      	str	r0, [sp, #20]
    9c2a:	4618      	mov	r0, r3
    9c2c:	9104      	str	r1, [sp, #16]
    9c2e:	4661      	mov	r1, ip
    9c30:	9203      	str	r2, [sp, #12]
    9c32:	9302      	str	r3, [sp, #8]
    9c34:	f8cd c004 	str.w	ip, [sp, #4]
    9c38:	f013 fb74 	bl	1d324 <__aeabi_memclr>
            stack: [0; STACKS],
    9c3c:	9803      	ldr	r0, [sp, #12]
    9c3e:	9904      	ldr	r1, [sp, #16]
    9c40:	6008      	str	r0, [r1, #0]
    9c42:	f841 0c04 	str.w	r0, [r1, #-4]
    9c46:	f841 0c08 	str.w	r0, [r1, #-8]
    9c4a:	f841 0c0c 	str.w	r0, [r1, #-12]
    9c4e:	f841 0c10 	str.w	r0, [r1, #-16]
    9c52:	f841 0c14 	str.w	r0, [r1, #-20]
    9c56:	f841 0c18 	str.w	r0, [r1, #-24]
    9c5a:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    9c5e:	6088      	str	r0, [r1, #8]
    9c60:	6048      	str	r0, [r1, #4]
        Self {
    9c62:	9a06      	ldr	r2, [sp, #24]
    9c64:	9b07      	ldr	r3, [sp, #28]
    9c66:	f8dd c020 	ldr.w	ip, [sp, #32]
    9c6a:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9c6e:	9c05      	ldr	r4, [sp, #20]
    9c70:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    9c74:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    9c78:	63a3      	str	r3, [r4, #56]	; 0x38
    9c7a:	6362      	str	r2, [r4, #52]	; 0x34
    9c7c:	8220      	strh	r0, [r4, #16]
    9c7e:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    9c82:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    9c86:	8260      	strh	r0, [r4, #18]
    9c88:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    9c8c:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9c90:	9902      	ldr	r1, [sp, #8]
    9c92:	9a01      	ldr	r2, [sp, #4]
    9c94:	f013 fb4a 	bl	1d32c <__aeabi_memcpy>
    9c98:	9905      	ldr	r1, [sp, #20]
    9c9a:	f101 0214 	add.w	r2, r1, #20
    9c9e:	f10d 0e08 	add.w	lr, sp, #8
    9ca2:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    9ca6:	2320      	movs	r3, #32
    9ca8:	9000      	str	r0, [sp, #0]
    9caa:	4610      	mov	r0, r2
    9cac:	461a      	mov	r2, r3
    9cae:	f013 fb3d 	bl	1d32c <__aeabi_memcpy>
    9cb2:	9904      	ldr	r1, [sp, #16]
    9cb4:	684a      	ldr	r2, [r1, #4]
    9cb6:	688b      	ldr	r3, [r1, #8]
    9cb8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9cbc:	f8d1 e010 	ldr.w	lr, [r1, #16]
    9cc0:	9c05      	ldr	r4, [sp, #20]
    9cc2:	6063      	str	r3, [r4, #4]
    9cc4:	6022      	str	r2, [r4, #0]
    9cc6:	f8c4 e00c 	str.w	lr, [r4, #12]
    9cca:	f8c4 c008 	str.w	ip, [r4, #8]
    9cce:	f241 0247 	movw	r2, #4167	; 0x1047
    9cd2:	9b03      	ldr	r3, [sp, #12]
    9cd4:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    9cd6:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    9cda:	bd70      	pop	{r4, r5, r6, pc}

00009cdc <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    9cdc:	b580      	push	{r7, lr}
    9cde:	b086      	sub	sp, #24
    9ce0:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    9ce2:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    9ce6:	2201      	movs	r2, #1
    9ce8:	9003      	str	r0, [sp, #12]
    9cea:	4608      	mov	r0, r1
    9cec:	4611      	mov	r1, r2
    9cee:	f009 f823 	bl	12d38 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>
    9cf2:	9002      	str	r0, [sp, #8]
    9cf4:	e7ff      	b.n	9cf6 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x1a>
    9cf6:	9802      	ldr	r0, [sp, #8]
    9cf8:	9903      	ldr	r1, [sp, #12]
    9cfa:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    9cfe:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    9d02:	4613      	mov	r3, r2
    9d04:	2a0f      	cmp	r2, #15
    9d06:	9301      	str	r3, [sp, #4]
    9d08:	d80a      	bhi.n	9d20 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x44>
    9d0a:	e7ff      	b.n	9d0c <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x30>
    9d0c:	9803      	ldr	r0, [sp, #12]
    9d0e:	9901      	ldr	r1, [sp, #4]
    9d10:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    9d14:	8a92      	ldrh	r2, [r2, #20]
    9d16:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    9d1a:	4610      	mov	r0, r2
    9d1c:	b006      	add	sp, #24
    9d1e:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    9d20:	f24e 0024 	movw	r0, #57380	; 0xe024
    9d24:	f2c0 0001 	movt	r0, #1
    9d28:	2210      	movs	r2, #16
    9d2a:	9901      	ldr	r1, [sp, #4]
    9d2c:	f00c ff40 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9d30:	defe      	udf	#254	; 0xfe

00009d32 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>:
    pub fn run(mut self, rom: &[u8]) {
    9d32:	b580      	push	{r7, lr}
    9d34:	b086      	sub	sp, #24
    9d36:	9104      	str	r1, [sp, #16]
    9d38:	9205      	str	r2, [sp, #20]
        self.setup();
    9d3a:	9003      	str	r0, [sp, #12]
    9d3c:	9202      	str	r2, [sp, #8]
    9d3e:	9101      	str	r1, [sp, #4]
    9d40:	f003 ff0d 	bl	db5e <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>
    9d44:	e7ff      	b.n	9d46 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x14>
        self.load(rom);
    9d46:	9803      	ldr	r0, [sp, #12]
    9d48:	9901      	ldr	r1, [sp, #4]
    9d4a:	9a02      	ldr	r2, [sp, #8]
    9d4c:	f003 fdc7 	bl	d8de <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>
    9d50:	e7ff      	b.n	9d52 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x20>
        while self.running {
    9d52:	e7ff      	b.n	9d54 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    9d54:	f241 0047 	movw	r0, #4167	; 0x1047
    9d58:	9903      	ldr	r1, [sp, #12]
    9d5a:	5c08      	ldrb	r0, [r1, r0]
    9d5c:	07c0      	lsls	r0, r0, #31
    9d5e:	2800      	cmp	r0, #0
    9d60:	d101      	bne.n	9d66 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x34>
    9d62:	e7ff      	b.n	9d64 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x32>
    }
    9d64:	e00c      	b.n	9d80 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4e>
            self.sched();
    9d66:	9803      	ldr	r0, [sp, #12]
    9d68:	f003 fe83 	bl	da72 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    9d6c:	e7ff      	b.n	9d6e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x3c>
            self.eval();
    9d6e:	9803      	ldr	r0, [sp, #12]
    9d70:	f000 f808 	bl	9d84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>
    9d74:	e7ff      	b.n	9d76 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x44>
            self.next();
    9d76:	9803      	ldr	r0, [sp, #12]
    9d78:	f003 fdec 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    9d7c:	e7ff      	b.n	9d7e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4c>
        while self.running {
    9d7e:	e7e9      	b.n	9d54 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    }
    9d80:	b006      	add	sp, #24
    9d82:	bd80      	pop	{r7, pc}

00009d84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    9d84:	b570      	push	{r4, r5, r6, lr}
    9d86:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    9d8a:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    9d8e:	8a41      	ldrh	r1, [r0, #18]
    9d90:	460a      	mov	r2, r1
    9d92:	2300      	movs	r3, #0
    9d94:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9d98:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    9d9c:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    9da0:	f043 82a9 	bne.w	d2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3572>
    9da4:	e7ff      	b.n	9da6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22>
    9da6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9daa:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    9dae:	1842      	adds	r2, r0, r1
    9db0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9db4:	4613      	mov	r3, r2
    9db6:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    9dba:	8a42      	ldrh	r2, [r0, #18]
    9dbc:	3201      	adds	r2, #1
    9dbe:	fa1f fc82 	uxth.w	ip, r2
    9dc2:	4696      	mov	lr, r2
    9dc4:	4594      	cmp	ip, r2
    9dc6:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    9dca:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    9dce:	f043 829d 	bne.w	d30c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3588>
    9dd2:	e7ff      	b.n	9dd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50>
    9dd4:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    9dd8:	b281      	uxth	r1, r0
    9dda:	460a      	mov	r2, r1
    9ddc:	2300      	movs	r3, #0
    9dde:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9de2:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    9de6:	f043 829d 	bne.w	d324 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35a0>
    9dea:	e7ff      	b.n	9dec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x68>
    9dec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9df0:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    9df4:	1842      	adds	r2, r0, r1
    9df6:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9dfa:	4613      	mov	r3, r2
    9dfc:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    9e00:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    9e04:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    9e08:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    9e0c:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    9e10:	e7ff      	b.n	9e12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e>
    9e12:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    9e16:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    9e1a:	ea40 0201 	orr.w	r2, r0, r1
    9e1e:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    9e22:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9e26:	f36f 321f 	bfc	r2, #12, #20
    9e2a:	4613      	mov	r3, r2
    9e2c:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    9e30:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9e34:	f002 020f 	and.w	r2, r2, #15
    9e38:	4694      	mov	ip, r2
    9e3a:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    9e3e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9e42:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    9e46:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    9e4a:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    9e4e:	e7ff      	b.n	9e50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcc>
    9e50:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    9e54:	f000 010f 	and.w	r1, r0, #15
    9e58:	460a      	mov	r2, r1
    9e5a:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    9e5e:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9e62:	0909      	lsrs	r1, r1, #4
    9e64:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    9e68:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    9e6c:	e7ff      	b.n	9e6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xea>
    9e6e:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    9e72:	f000 010f 	and.w	r1, r0, #15
    9e76:	460a      	mov	r2, r1
    9e78:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    9e7c:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9e80:	b2cb      	uxtb	r3, r1
    9e82:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    9e86:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9e8a:	0b09      	lsrs	r1, r1, #12
    9e8c:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    9e90:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    9e94:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    9e98:	e7ff      	b.n	9e9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x116>
    9e9a:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    9e9e:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    9ea2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9ea6:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    9eaa:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    9eae:	e7ff      	b.n	9eb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12c>
    9eb0:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    9eb4:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    9eb8:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9ebc:	0912      	lsrs	r2, r2, #4
    9ebe:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    9ec2:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    9ec6:	e7ff      	b.n	9ec8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144>
    9ec8:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    9ecc:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    9ed0:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9ed4:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    9ed8:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    9edc:	e7ff      	b.n	9ede <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15a>
    9ede:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    9ee2:	f000 010f 	and.w	r1, r0, #15
        match (
    9ee6:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    9eea:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    9eee:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    9ef2:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    9ef6:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    9efa:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    9efe:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    9f02:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    9f06:	468e      	mov	lr, r1
    9f08:	290f      	cmp	r1, #15
    9f0a:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    9f0e:	d84f      	bhi.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f10:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    9f14:	e8df f011 	tbh	[pc, r1, lsl #1]
    9f18:	03010010 	.word	0x03010010
    9f1c:	042d0394 	.word	0x042d0394
    9f20:	002c04cd 	.word	0x002c04cd
    9f24:	06af061a 	.word	0x06af061a
    9f28:	00750032 	.word	0x00750032
    9f2c:	0edf0e54 	.word	0x0edf0e54
    9f30:	101e0f80 	.word	0x101e0f80
    9f34:	0095007b 	.word	0x0095007b
    9f38:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    9f3c:	2800      	cmp	r0, #0
    9f3e:	f040 825c 	bne.w	a3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9f42:	e7ff      	b.n	9f44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c0>
    9f44:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9f48:	280e      	cmp	r0, #14
    9f4a:	f040 8256 	bne.w	a3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9f4e:	e7ff      	b.n	9f50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc>
    9f50:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f54:	4601      	mov	r1, r0
    9f56:	2800      	cmp	r0, #0
    9f58:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    9f5c:	f000 80c0 	beq.w	a0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35c>
    9f60:	e7ff      	b.n	9f62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de>
    9f62:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    9f66:	b281      	uxth	r1, r0
    9f68:	290e      	cmp	r1, #14
    9f6a:	f000 81b1 	beq.w	a2d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54c>
    9f6e:	e244      	b.n	a3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    9f70:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f74:	2800      	cmp	r0, #0
    9f76:	f000 853c 	beq.w	a9f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6e>
    9f7a:	e019      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    9f7c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f80:	4601      	mov	r1, r0
    9f82:	280e      	cmp	r0, #14
    9f84:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    9f88:	d812      	bhi.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f8a:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    9f8e:	e8df f011 	tbh	[pc, r1, lsl #1]
    9f92:	0719      	.short	0x0719
    9f94:	086207bb 	.word	0x086207bb
    9f98:	09b00909 	.word	0x09b00909
    9f9c:	0b360a72 	.word	0x0b360a72
    9fa0:	000f0beb 	.word	0x000f0beb
    9fa4:	000f000f 	.word	0x000f000f
    9fa8:	000f000f 	.word	0x000f000f
    9fac:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    9fb0:	f64e 4038 	movw	r0, #60472	; 0xec38
    9fb4:	f2c0 0001 	movt	r0, #1
    9fb8:	6801      	ldr	r1, [r0, #0]
    9fba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9fbe:	f100 0212 	add.w	r2, r0, #18
    9fc2:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    9fc6:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    9fca:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    9fce:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    9fd2:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    9fd6:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    9fda:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    9fde:	f248 3c9f 	movw	ip, #33695	; 0x839f
    9fe2:	f2c0 0c01 	movt	ip, #1
    9fe6:	4610      	mov	r0, r2
    9fe8:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    9fec:	4661      	mov	r1, ip
    9fee:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    9ff2:	f007 ff3f 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9ff6:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    9ffa:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    9ffe:	f003 b938 	b.w	d272 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34ee>
            (9, _, _, 0) => {
    a002:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a006:	2800      	cmp	r0, #0
    a008:	f001 852d 	beq.w	ba66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ce2>
    a00c:	e7d0      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 9, 0xe) => {
    a00e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    a012:	4601      	mov	r1, r0
    a014:	2809      	cmp	r0, #9
    a016:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    a01a:	d006      	beq.n	a02a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6>
    a01c:	e7ff      	b.n	a01e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29a>
    a01e:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    a022:	b281      	uxth	r1, r0
    a024:	290a      	cmp	r1, #10
    a026:	d006      	beq.n	a036 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b2>
    a028:	e7c2      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    a02a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a02e:	280e      	cmp	r0, #14
    a030:	f002 814a 	beq.w	c2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2544>
    a034:	e7bc      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    a036:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a03a:	2801      	cmp	r0, #1
    a03c:	f002 81ea 	beq.w	c414 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2690>
    a040:	e7b6      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 0, 7) => {
    a042:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    a046:	4601      	mov	r1, r0
    a048:	2806      	cmp	r0, #6
    a04a:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    a04e:	d8af      	bhi.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    a050:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    a054:	e8df f001 	tbb	[pc, r1]
    a058:	322c1505 	.word	0x322c1505
    a05c:	003e3804 	.word	0x003e3804
    a060:	e7a6      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    a062:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a066:	4601      	mov	r1, r0
    a068:	2807      	cmp	r0, #7
    a06a:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    a06e:	f002 8277 	beq.w	c560 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27dc>
    a072:	e7ff      	b.n	a074 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f0>
    a074:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    a078:	b281      	uxth	r1, r0
    a07a:	290a      	cmp	r1, #10
    a07c:	f002 8309 	beq.w	c692 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x290e>
    a080:	e796      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 1, 5) => {
    a082:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a086:	4601      	mov	r1, r0
    a088:	2805      	cmp	r0, #5
    a08a:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    a08e:	f002 839a 	beq.w	c7c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a42>
    a092:	e7ff      	b.n	a094 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x310>
    a094:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    a098:	b281      	uxth	r1, r0
    a09a:	2908      	cmp	r1, #8
    a09c:	f002 8428 	beq.w	c8f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b6c>
    a0a0:	e7ff      	b.n	a0a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31e>
    a0a2:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    a0a6:	b281      	uxth	r1, r0
    a0a8:	290e      	cmp	r1, #14
    a0aa:	f002 84b6 	beq.w	ca1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c96>
    a0ae:	e77f      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 2, 9) => {
    a0b0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a0b4:	2809      	cmp	r0, #9
    a0b6:	f002 8554 	beq.w	cb62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dde>
    a0ba:	e779      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 3, 3) => {
    a0bc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a0c0:	2803      	cmp	r0, #3
    a0c2:	f002 85ff 	beq.w	ccc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f40>
    a0c6:	e773      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 5, 5) => {
    a0c8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a0cc:	2805      	cmp	r0, #5
    a0ce:	f002 8708 	beq.w	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x315e>
    a0d2:	e76d      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 6, 5) => {
    a0d4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    a0d8:	2805      	cmp	r0, #5
    a0da:	f002 87e5 	beq.w	d0a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3324>
    a0de:	e767      	b.n	9fb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    a0e0:	2005      	movs	r0, #5
    a0e2:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    a0e6:	f24e 0090 	movw	r0, #57488	; 0xe090
    a0ea:	f2c0 0001 	movt	r0, #1
    a0ee:	6801      	ldr	r1, [r0, #0]
    a0f0:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    a0f4:	f008 fda0 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a0f8:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    a0fc:	e01f      	b.n	a13e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ba>
    a0fe:	2001      	movs	r0, #1
    a100:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    a104:	e015      	b.n	a132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    a106:	2000      	movs	r0, #0
    a108:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    a10c:	e011      	b.n	a132 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    a10e:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    a110:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    a114:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    a118:	f646 2050 	movw	r0, #27216	; 0x6a50
    a11c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a120:	f008 fd96 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a124:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    a128:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    a12c:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    a130:	e00b      	b.n	a14a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3c6>
    a132:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    a136:	07c0      	lsls	r0, r0, #31
    a138:	2800      	cmp	r0, #0
    a13a:	d115      	bne.n	a168 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3e4>
    a13c:	e05e      	b.n	a1fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
    a13e:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    a142:	07c1      	lsls	r1, r0, #31
    a144:	2900      	cmp	r1, #0
    a146:	d1e2      	bne.n	a10e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a>
    a148:	e7dd      	b.n	a106 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
    a14a:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    a14e:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    a152:	f008 fd71 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a156:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    a15a:	e7ff      	b.n	a15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3d8>
    a15c:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    a160:	07c1      	lsls	r1, r0, #31
    a162:	2900      	cmp	r1, #0
    a164:	d1cb      	bne.n	a0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37a>
    a166:	e7ce      	b.n	a106 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    a168:	f64e 60d8 	movw	r0, #61144	; 0xeed8
    a16c:	f2c0 0001 	movt	r0, #1
    a170:	6801      	ldr	r1, [r0, #0]
    a172:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a176:	f100 0212 	add.w	r2, r0, #18
    a17a:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    a17e:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    a182:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    a186:	f248 339f 	movw	r3, #33695	; 0x839f
    a18a:	f2c0 0301 	movt	r3, #1
    a18e:	4610      	mov	r0, r2
    a190:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    a194:	4619      	mov	r1, r3
    a196:	f007 fe6d 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a19a:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    a19e:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    a1a2:	e7ff      	b.n	a1a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x420>
    a1a4:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    a1a8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    a1ac:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    a1b0:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    a1b4:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a1b8:	f2c0 0201 	movt	r2, #1
    a1bc:	6812      	ldr	r2, [r2, #0]
    a1be:	466b      	mov	r3, sp
    a1c0:	f04f 0c01 	mov.w	ip, #1
    a1c4:	f8c3 c008 	str.w	ip, [r3, #8]
    a1c8:	605a      	str	r2, [r3, #4]
    a1ca:	f8c3 c000 	str.w	ip, [r3]
    a1ce:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a1d2:	2202      	movs	r2, #2
    a1d4:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    a1d8:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    a1dc:	f003 fef5 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a1e0:	e7ff      	b.n	a1e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x45e>
    a1e2:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    a1e6:	f64e 60f8 	movw	r0, #61176	; 0xeef8
    a1ea:	f2c0 0001 	movt	r0, #1
    a1ee:	6802      	ldr	r2, [r0, #0]
    a1f0:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a1f4:	f004 feb5 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a1f8:	e7ff      	b.n	a1fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x476>
    a1fa:	e7ff      	b.n	a1fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
                let (w, h) = self.hw.vram_size();
    a1fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a200:	f7ff fc4f 	bl	9aa2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    a204:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    a206:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    a208:	e7ff      	b.n	a20a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x486>
    a20a:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    a20c:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    a210:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    a212:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    a216:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a218:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    a21c:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    a220:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    a224:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    a228:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    a22c:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    a230:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    a234:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    a238:	f008 fe7d 	bl	12f36 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>
    a23c:	e7ff      	b.n	a23e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4ba>
    a23e:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    a242:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    a246:	f003 fd90 	bl	dd6a <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>
    a24a:	e7ff      	b.n	a24c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4c8>
    a24c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a250:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    a254:	f003 feaf 	bl	dfb6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>
    a258:	e7ff      	b.n	a25a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4d6>
    a25a:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a25e:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a262:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    a266:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    a26a:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    a26e:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a272:	e7ff      	b.n	a274 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a274:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    a278:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a27c:	f003 fdc8 	bl	de10 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>
    a280:	e7ff      	b.n	a282 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4fe>
    a282:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    a286:	2800      	cmp	r0, #0
    a288:	d001      	beq.n	a28e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50a>
    a28a:	e7ff      	b.n	a28c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x508>
    a28c:	e002      	b.n	a294 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x510>
        match (
    a28e:	f003 b82f 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a292:	defe      	udf	#254	; 0xfe
    a294:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    a298:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    a29c:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    a2a0:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    a2a4:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    a2a8:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    a2ac:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    a2b0:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    a2b4:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    a2b6:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    a2ba:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    a2bc:	4610      	mov	r0, r2
    a2be:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    a2c2:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    a2c4:	4661      	mov	r1, ip
    a2c6:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    a2c8:	f7ff f9cf 	bl	966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    a2cc:	e7ff      	b.n	a2ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a2ce:	e7d1      	b.n	a274 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a2d0:	2005      	movs	r0, #5
    a2d2:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    a2d6:	f24e 0090 	movw	r0, #57488	; 0xe090
    a2da:	f2c0 0001 	movt	r0, #1
    a2de:	6801      	ldr	r1, [r0, #0]
    a2e0:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a2e4:	f008 fca8 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a2e8:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    a2ea:	e01f      	b.n	a32c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5a8>
    a2ec:	2001      	movs	r0, #1
    a2ee:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a2f2:	e015      	b.n	a320 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a2f4:	2000      	movs	r0, #0
    a2f6:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a2fa:	e011      	b.n	a320 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a2fc:	2000      	movs	r0, #0
    a2fe:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    a302:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    a306:	f646 2050 	movw	r0, #27216	; 0x6a50
    a30a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a30e:	f008 fc9f 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a312:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    a316:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    a31a:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    a31e:	e00a      	b.n	a336 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5b2>
    a320:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    a324:	07c0      	lsls	r0, r0, #31
    a326:	2800      	cmp	r0, #0
    a328:	d112      	bne.n	a350 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5cc>
    a32a:	e055      	b.n	a3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
    a32c:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    a32e:	07c1      	lsls	r1, r0, #31
    a330:	2900      	cmp	r1, #0
    a332:	d1e3      	bne.n	a2fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x578>
    a334:	e7de      	b.n	a2f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
    a336:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a33a:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    a33e:	f008 fc7b 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a342:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    a344:	e7ff      	b.n	a346 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5c2>
    a346:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    a348:	07c1      	lsls	r1, r0, #31
    a34a:	2900      	cmp	r1, #0
    a34c:	d1ce      	bne.n	a2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x568>
    a34e:	e7d1      	b.n	a2f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
                trace!("[{:04x}] RET", self.pc);
    a350:	f64e 609c 	movw	r0, #61084	; 0xee9c
    a354:	f2c0 0001 	movt	r0, #1
    a358:	6801      	ldr	r1, [r0, #0]
    a35a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a35e:	f100 0212 	add.w	r2, r0, #18
    a362:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    a366:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    a36a:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    a36e:	f248 339f 	movw	r3, #33695	; 0x839f
    a372:	f2c0 0301 	movt	r3, #1
    a376:	4610      	mov	r0, r2
    a378:	91f9      	str	r1, [sp, #996]	; 0x3e4
    a37a:	4619      	mov	r1, r3
    a37c:	f007 fd7a 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a380:	90f8      	str	r0, [sp, #992]	; 0x3e0
    a382:	91f7      	str	r1, [sp, #988]	; 0x3dc
    a384:	e7ff      	b.n	a386 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x602>
    a386:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    a388:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    a38c:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    a38e:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    a392:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a396:	f2c0 0201 	movt	r2, #1
    a39a:	6812      	ldr	r2, [r2, #0]
    a39c:	466b      	mov	r3, sp
    a39e:	f04f 0c01 	mov.w	ip, #1
    a3a2:	f8c3 c008 	str.w	ip, [r3, #8]
    a3a6:	605a      	str	r2, [r3, #4]
    a3a8:	f8c3 c000 	str.w	ip, [r3]
    a3ac:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a3b0:	2202      	movs	r2, #2
    a3b2:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    a3b6:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    a3b8:	f003 fe07 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a3bc:	e7ff      	b.n	a3be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x63a>
    a3be:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    a3c2:	f64e 60bc 	movw	r0, #61116	; 0xeebc
    a3c6:	f2c0 0001 	movt	r0, #1
    a3ca:	6802      	ldr	r2, [r0, #0]
    a3cc:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a3d0:	f004 fdc7 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a3d4:	e7ff      	b.n	a3d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x652>
    a3d6:	e7ff      	b.n	a3d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
                let addr = self.pop();
    a3d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a3dc:	f7ff fc7e 	bl	9cdc <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>
    a3e0:	4601      	mov	r1, r0
    a3e2:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    a3e6:	91f6      	str	r1, [sp, #984]	; 0x3d8
    a3e8:	e7ff      	b.n	a3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x666>
                self.jump(addr);
    a3ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a3ee:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    a3f0:	f003 fa6d 	bl	d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a3f4:	e7ff      	b.n	a3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x672>
        match (
    a3f6:	f002 bf7b 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a3fa:	2005      	movs	r0, #5
    a3fc:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    a400:	f24e 0090 	movw	r0, #57488	; 0xe090
    a404:	f2c0 0001 	movt	r0, #1
    a408:	6801      	ldr	r1, [r0, #0]
    a40a:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a40e:	f008 fc13 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a412:	90f5      	str	r0, [sp, #980]	; 0x3d4
    a414:	e01f      	b.n	a456 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6d2>
    a416:	2001      	movs	r0, #1
    a418:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a41c:	e015      	b.n	a44a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a41e:	2000      	movs	r0, #0
    a420:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a424:	e011      	b.n	a44a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a426:	2000      	movs	r0, #0
    a428:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    a42c:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    a430:	f646 2050 	movw	r0, #27216	; 0x6a50
    a434:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a438:	f008 fc0a 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a43c:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    a440:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    a444:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    a448:	e00a      	b.n	a460 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6dc>
    a44a:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    a44e:	07c0      	lsls	r0, r0, #31
    a450:	2800      	cmp	r0, #0
    a452:	d112      	bne.n	a47a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6f6>
    a454:	e055      	b.n	a502 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a456:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    a458:	07c1      	lsls	r1, r0, #31
    a45a:	2900      	cmp	r1, #0
    a45c:	d1e3      	bne.n	a426 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6a2>
    a45e:	e7de      	b.n	a41e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
    a460:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a464:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    a468:	f008 fbe6 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a46c:	90f4      	str	r0, [sp, #976]	; 0x3d0
    a46e:	e7ff      	b.n	a470 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6ec>
    a470:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    a472:	07c1      	lsls	r1, r0, #31
    a474:	2900      	cmp	r1, #0
    a476:	d1ce      	bne.n	a416 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x692>
    a478:	e7d1      	b.n	a41e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    a47a:	f64e 6040 	movw	r0, #60992	; 0xee40
    a47e:	f2c0 0001 	movt	r0, #1
    a482:	6801      	ldr	r1, [r0, #0]
    a484:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a488:	f100 0212 	add.w	r2, r0, #18
    a48c:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    a490:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    a494:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    a498:	f248 339f 	movw	r3, #33695	; 0x839f
    a49c:	f2c0 0301 	movt	r3, #1
    a4a0:	4610      	mov	r0, r2
    a4a2:	91f3      	str	r1, [sp, #972]	; 0x3cc
    a4a4:	4619      	mov	r1, r3
    a4a6:	f007 fce5 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a4aa:	90f2      	str	r0, [sp, #968]	; 0x3c8
    a4ac:	91f1      	str	r1, [sp, #964]	; 0x3c4
    a4ae:	e7ff      	b.n	a4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x72c>
    a4b0:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    a4b2:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    a4b6:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    a4b8:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    a4bc:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a4c0:	f2c0 0201 	movt	r2, #1
    a4c4:	6812      	ldr	r2, [r2, #0]
    a4c6:	466b      	mov	r3, sp
    a4c8:	f04f 0c01 	mov.w	ip, #1
    a4cc:	f8c3 c008 	str.w	ip, [r3, #8]
    a4d0:	605a      	str	r2, [r3, #4]
    a4d2:	f8c3 c000 	str.w	ip, [r3]
    a4d6:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a4da:	2202      	movs	r2, #2
    a4dc:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    a4e0:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    a4e2:	f003 fd72 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a4e6:	e7ff      	b.n	a4e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x764>
    a4e8:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    a4ec:	f64e 6060 	movw	r0, #61024	; 0xee60
    a4f0:	f2c0 0001 	movt	r0, #1
    a4f4:	6802      	ldr	r2, [r0, #0]
    a4f6:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a4fa:	f004 fd32 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a4fe:	e7ff      	b.n	a500 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77c>
    a500:	e7ff      	b.n	a502 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a502:	f64e 6064 	movw	r0, #61028	; 0xee64
    a506:	f2c0 0001 	movt	r0, #1
    a50a:	f64e 6274 	movw	r2, #61044	; 0xee74
    a50e:	f2c0 0201 	movt	r2, #1
    a512:	210f      	movs	r1, #15
    a514:	f00c fb36 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a518:	defe      	udf	#254	; 0xfe
    a51a:	2005      	movs	r0, #5
    a51c:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    a520:	f24e 0090 	movw	r0, #57488	; 0xe090
    a524:	f2c0 0001 	movt	r0, #1
    a528:	6801      	ldr	r1, [r0, #0]
    a52a:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a52e:	f008 fb83 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a532:	90f0      	str	r0, [sp, #960]	; 0x3c0
    a534:	e01f      	b.n	a576 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7f2>
    a536:	2001      	movs	r0, #1
    a538:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a53c:	e015      	b.n	a56a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a53e:	2000      	movs	r0, #0
    a540:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a544:	e011      	b.n	a56a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a546:	2000      	movs	r0, #0
    a548:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    a54c:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    a550:	f646 2050 	movw	r0, #27216	; 0x6a50
    a554:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a558:	f008 fb7a 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a55c:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    a560:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    a564:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    a568:	e00a      	b.n	a580 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7fc>
    a56a:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    a56e:	07c0      	lsls	r0, r0, #31
    a570:	2800      	cmp	r0, #0
    a572:	d112      	bne.n	a59a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x816>
    a574:	e055      	b.n	a622 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a576:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    a578:	07c1      	lsls	r1, r0, #31
    a57a:	2900      	cmp	r1, #0
    a57c:	d1e3      	bne.n	a546 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7c2>
    a57e:	e7de      	b.n	a53e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
    a580:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a584:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    a588:	f008 fb56 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a58c:	90ef      	str	r0, [sp, #956]	; 0x3bc
    a58e:	e7ff      	b.n	a590 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x80c>
    a590:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    a592:	07c1      	lsls	r1, r0, #31
    a594:	2900      	cmp	r1, #0
    a596:	d1ce      	bne.n	a536 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7b2>
    a598:	e7d1      	b.n	a53e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    a59a:	f64e 6000 	movw	r0, #60928	; 0xee00
    a59e:	f2c0 0001 	movt	r0, #1
    a5a2:	6801      	ldr	r1, [r0, #0]
    a5a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a5a8:	f100 0212 	add.w	r2, r0, #18
    a5ac:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    a5b0:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    a5b4:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    a5b8:	f248 339f 	movw	r3, #33695	; 0x839f
    a5bc:	f2c0 0301 	movt	r3, #1
    a5c0:	4610      	mov	r0, r2
    a5c2:	91ee      	str	r1, [sp, #952]	; 0x3b8
    a5c4:	4619      	mov	r1, r3
    a5c6:	f007 fc55 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a5ca:	90ed      	str	r0, [sp, #948]	; 0x3b4
    a5cc:	91ec      	str	r1, [sp, #944]	; 0x3b0
    a5ce:	e7ff      	b.n	a5d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x84c>
    a5d0:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    a5d2:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    a5d6:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    a5d8:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    a5dc:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a5e0:	f2c0 0201 	movt	r2, #1
    a5e4:	6812      	ldr	r2, [r2, #0]
    a5e6:	466b      	mov	r3, sp
    a5e8:	f04f 0c01 	mov.w	ip, #1
    a5ec:	f8c3 c008 	str.w	ip, [r3, #8]
    a5f0:	605a      	str	r2, [r3, #4]
    a5f2:	f8c3 c000 	str.w	ip, [r3]
    a5f6:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a5fa:	2202      	movs	r2, #2
    a5fc:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    a600:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    a602:	f003 fce2 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a606:	e7ff      	b.n	a608 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x884>
    a608:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    a60c:	f64e 6020 	movw	r0, #60960	; 0xee20
    a610:	f2c0 0001 	movt	r0, #1
    a614:	6802      	ldr	r2, [r0, #0]
    a616:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a61a:	f004 fca2 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a61e:	e7ff      	b.n	a620 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89c>
    a620:	e7ff      	b.n	a622 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a622:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a624:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a628:	f008 fbff 	bl	12e2a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a62c:	90eb      	str	r0, [sp, #940]	; 0x3ac
    a62e:	e7ff      	b.n	a630 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8ac>
    a630:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a634:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    a636:	f003 f94a 	bl	d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a63a:	e7ff      	b.n	a63c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8b8>
        match (
    a63c:	f002 be58 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a640:	2005      	movs	r0, #5
    a642:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    a646:	f24e 0090 	movw	r0, #57488	; 0xe090
    a64a:	f2c0 0001 	movt	r0, #1
    a64e:	6801      	ldr	r1, [r0, #0]
    a650:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a654:	f008 faf0 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a658:	90ea      	str	r0, [sp, #936]	; 0x3a8
    a65a:	e01f      	b.n	a69c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x918>
    a65c:	2001      	movs	r0, #1
    a65e:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a662:	e015      	b.n	a690 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a664:	2000      	movs	r0, #0
    a666:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a66a:	e011      	b.n	a690 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a66c:	2000      	movs	r0, #0
    a66e:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    a672:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    a676:	f646 2050 	movw	r0, #27216	; 0x6a50
    a67a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a67e:	f008 fae7 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a682:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    a686:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    a68a:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    a68e:	e00a      	b.n	a6a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x922>
    a690:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    a694:	07c0      	lsls	r0, r0, #31
    a696:	2800      	cmp	r0, #0
    a698:	d112      	bne.n	a6c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x93c>
    a69a:	e055      	b.n	a748 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
    a69c:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    a69e:	07c1      	lsls	r1, r0, #31
    a6a0:	2900      	cmp	r1, #0
    a6a2:	d1e3      	bne.n	a66c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e8>
    a6a4:	e7de      	b.n	a664 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
    a6a6:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a6aa:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    a6ae:	f008 fac3 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a6b2:	90e9      	str	r0, [sp, #932]	; 0x3a4
    a6b4:	e7ff      	b.n	a6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x932>
    a6b6:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    a6b8:	07c1      	lsls	r1, r0, #31
    a6ba:	2900      	cmp	r1, #0
    a6bc:	d1ce      	bne.n	a65c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8d8>
    a6be:	e7d1      	b.n	a664 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    a6c0:	f64e 50cc 	movw	r0, #60876	; 0xedcc
    a6c4:	f2c0 0001 	movt	r0, #1
    a6c8:	6801      	ldr	r1, [r0, #0]
    a6ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a6ce:	f100 0212 	add.w	r2, r0, #18
    a6d2:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    a6d6:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    a6da:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    a6de:	f248 339f 	movw	r3, #33695	; 0x839f
    a6e2:	f2c0 0301 	movt	r3, #1
    a6e6:	4610      	mov	r0, r2
    a6e8:	91e8      	str	r1, [sp, #928]	; 0x3a0
    a6ea:	4619      	mov	r1, r3
    a6ec:	f007 fbc2 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a6f0:	90e7      	str	r0, [sp, #924]	; 0x39c
    a6f2:	91e6      	str	r1, [sp, #920]	; 0x398
    a6f4:	e7ff      	b.n	a6f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x972>
    a6f6:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    a6f8:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    a6fc:	99e6      	ldr	r1, [sp, #920]	; 0x398
    a6fe:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    a702:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a706:	f2c0 0201 	movt	r2, #1
    a70a:	6812      	ldr	r2, [r2, #0]
    a70c:	466b      	mov	r3, sp
    a70e:	f04f 0c01 	mov.w	ip, #1
    a712:	f8c3 c008 	str.w	ip, [r3, #8]
    a716:	605a      	str	r2, [r3, #4]
    a718:	f8c3 c000 	str.w	ip, [r3]
    a71c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a720:	2202      	movs	r2, #2
    a722:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    a726:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    a728:	f003 fc4f 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a72c:	e7ff      	b.n	a72e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9aa>
    a72e:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    a732:	f64e 50ec 	movw	r0, #60908	; 0xedec
    a736:	f2c0 0001 	movt	r0, #1
    a73a:	6802      	ldr	r2, [r0, #0]
    a73c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a740:	f004 fc0f 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a744:	e7ff      	b.n	a746 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c2>
    a746:	e7ff      	b.n	a748 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
                self.push(self.pc);
    a748:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a74c:	8a41      	ldrh	r1, [r0, #18]
    a74e:	f003 f914 	bl	d97a <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>
    a752:	e7ff      	b.n	a754 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9d0>
    a754:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a756:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a75a:	f008 fb66 	bl	12e2a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a75e:	90e5      	str	r0, [sp, #916]	; 0x394
    a760:	e7ff      	b.n	a762 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9de>
    a762:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a766:	99e5      	ldr	r1, [sp, #916]	; 0x394
    a768:	f003 f8b1 	bl	d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a76c:	e7ff      	b.n	a76e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9ea>
        match (
    a76e:	f002 bdbf 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a772:	2005      	movs	r0, #5
    a774:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    a778:	f24e 0090 	movw	r0, #57488	; 0xe090
    a77c:	f2c0 0001 	movt	r0, #1
    a780:	6801      	ldr	r1, [r0, #0]
    a782:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a786:	f008 fa57 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a78a:	90e4      	str	r0, [sp, #912]	; 0x390
    a78c:	e01f      	b.n	a7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa4a>
    a78e:	2001      	movs	r0, #1
    a790:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a794:	e015      	b.n	a7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a796:	2000      	movs	r0, #0
    a798:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a79c:	e011      	b.n	a7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a79e:	2000      	movs	r0, #0
    a7a0:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    a7a4:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    a7a8:	f646 2050 	movw	r0, #27216	; 0x6a50
    a7ac:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a7b0:	f008 fa4e 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a7b4:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    a7b8:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    a7bc:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    a7c0:	e00a      	b.n	a7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa54>
    a7c2:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    a7c6:	07c0      	lsls	r0, r0, #31
    a7c8:	2800      	cmp	r0, #0
    a7ca:	d112      	bne.n	a7f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa6e>
    a7cc:	e055      	b.n	a87a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
    a7ce:	98e4      	ldr	r0, [sp, #912]	; 0x390
    a7d0:	07c1      	lsls	r1, r0, #31
    a7d2:	2900      	cmp	r1, #0
    a7d4:	d1e3      	bne.n	a79e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa1a>
    a7d6:	e7de      	b.n	a796 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
    a7d8:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a7dc:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    a7e0:	f008 fa2a 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a7e4:	90e3      	str	r0, [sp, #908]	; 0x38c
    a7e6:	e7ff      	b.n	a7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa64>
    a7e8:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    a7ea:	07c1      	lsls	r1, r0, #31
    a7ec:	2900      	cmp	r1, #0
    a7ee:	d1ce      	bne.n	a78e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa0a>
    a7f0:	e7d1      	b.n	a796 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    a7f2:	f64e 507c 	movw	r0, #60796	; 0xed7c
    a7f6:	f2c0 0001 	movt	r0, #1
    a7fa:	6801      	ldr	r1, [r0, #0]
    a7fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a800:	f100 0212 	add.w	r2, r0, #18
    a804:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    a808:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    a80c:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    a810:	f248 339f 	movw	r3, #33695	; 0x839f
    a814:	f2c0 0301 	movt	r3, #1
    a818:	4610      	mov	r0, r2
    a81a:	91e2      	str	r1, [sp, #904]	; 0x388
    a81c:	4619      	mov	r1, r3
    a81e:	f007 fb29 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a822:	90e1      	str	r0, [sp, #900]	; 0x384
    a824:	91e0      	str	r1, [sp, #896]	; 0x380
    a826:	e7ff      	b.n	a828 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaa4>
    a828:	98e1      	ldr	r0, [sp, #900]	; 0x384
    a82a:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    a82e:	99e0      	ldr	r1, [sp, #896]	; 0x380
    a830:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    a834:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a838:	f2c0 0201 	movt	r2, #1
    a83c:	6812      	ldr	r2, [r2, #0]
    a83e:	466b      	mov	r3, sp
    a840:	f04f 0c01 	mov.w	ip, #1
    a844:	f8c3 c008 	str.w	ip, [r3, #8]
    a848:	605a      	str	r2, [r3, #4]
    a84a:	f8c3 c000 	str.w	ip, [r3]
    a84e:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a852:	2202      	movs	r2, #2
    a854:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    a858:	99e2      	ldr	r1, [sp, #904]	; 0x388
    a85a:	f003 fbb6 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a85e:	e7ff      	b.n	a860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xadc>
    a860:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    a864:	f64e 509c 	movw	r0, #60828	; 0xed9c
    a868:	f2c0 0001 	movt	r0, #1
    a86c:	6802      	ldr	r2, [r0, #0]
    a86e:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a872:	f004 fb76 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a876:	e7ff      	b.n	a878 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf4>
    a878:	e7ff      	b.n	a87a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
                if self.v[x] == kk {
    a87a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a87e:	280f      	cmp	r0, #15
    a880:	f202 87ff 	bhi.w	d882 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3afe>
    a884:	e7ff      	b.n	a886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb02>
    a886:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a88a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a88e:	1842      	adds	r2, r0, r1
    a890:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a894:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a898:	fa5f fc83 	uxtb.w	ip, r3
    a89c:	4562      	cmp	r2, ip
    a89e:	d106      	bne.n	a8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
    a8a0:	e7ff      	b.n	a8a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb1e>
                    self.next();
    a8a2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a8a6:	f003 f855 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a8aa:	e7ff      	b.n	a8ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb28>
                if self.v[x] == kk {
    a8ac:	e7ff      	b.n	a8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
        match (
    a8ae:	f002 bd1f 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a8b2:	2005      	movs	r0, #5
    a8b4:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    a8b8:	f24e 0090 	movw	r0, #57488	; 0xe090
    a8bc:	f2c0 0001 	movt	r0, #1
    a8c0:	6801      	ldr	r1, [r0, #0]
    a8c2:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a8c6:	f008 f9b7 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a8ca:	90df      	str	r0, [sp, #892]	; 0x37c
    a8cc:	e01f      	b.n	a90e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb8a>
    a8ce:	2001      	movs	r0, #1
    a8d0:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a8d4:	e015      	b.n	a902 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a8d6:	2000      	movs	r0, #0
    a8d8:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a8dc:	e011      	b.n	a902 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a8de:	2000      	movs	r0, #0
    a8e0:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    a8e4:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    a8e8:	f646 2050 	movw	r0, #27216	; 0x6a50
    a8ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a8f0:	f008 f9ae 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a8f4:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    a8f8:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    a8fc:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    a900:	e00a      	b.n	a918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb94>
    a902:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    a906:	07c0      	lsls	r0, r0, #31
    a908:	2800      	cmp	r0, #0
    a90a:	d112      	bne.n	a932 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbae>
    a90c:	e055      	b.n	a9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
    a90e:	98df      	ldr	r0, [sp, #892]	; 0x37c
    a910:	07c1      	lsls	r1, r0, #31
    a912:	2900      	cmp	r1, #0
    a914:	d1e3      	bne.n	a8de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb5a>
    a916:	e7de      	b.n	a8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
    a918:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a91c:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    a920:	f008 f98a 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a924:	90de      	str	r0, [sp, #888]	; 0x378
    a926:	e7ff      	b.n	a928 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xba4>
    a928:	98de      	ldr	r0, [sp, #888]	; 0x378
    a92a:	07c1      	lsls	r1, r0, #31
    a92c:	2900      	cmp	r1, #0
    a92e:	d1ce      	bne.n	a8ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb4a>
    a930:	e7d1      	b.n	a8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    a932:	f64e 502c 	movw	r0, #60716	; 0xed2c
    a936:	f2c0 0001 	movt	r0, #1
    a93a:	6801      	ldr	r1, [r0, #0]
    a93c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a940:	f100 0212 	add.w	r2, r0, #18
    a944:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    a948:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    a94c:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    a950:	f248 339f 	movw	r3, #33695	; 0x839f
    a954:	f2c0 0301 	movt	r3, #1
    a958:	4610      	mov	r0, r2
    a95a:	91dd      	str	r1, [sp, #884]	; 0x374
    a95c:	4619      	mov	r1, r3
    a95e:	f007 fa89 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a962:	90dc      	str	r0, [sp, #880]	; 0x370
    a964:	91db      	str	r1, [sp, #876]	; 0x36c
    a966:	e7ff      	b.n	a968 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbe4>
    a968:	98dc      	ldr	r0, [sp, #880]	; 0x370
    a96a:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    a96e:	99db      	ldr	r1, [sp, #876]	; 0x36c
    a970:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    a974:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    a978:	f2c0 0201 	movt	r2, #1
    a97c:	6812      	ldr	r2, [r2, #0]
    a97e:	466b      	mov	r3, sp
    a980:	f04f 0c01 	mov.w	ip, #1
    a984:	f8c3 c008 	str.w	ip, [r3, #8]
    a988:	605a      	str	r2, [r3, #4]
    a98a:	f8c3 c000 	str.w	ip, [r3]
    a98e:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a992:	2202      	movs	r2, #2
    a994:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    a998:	99dd      	ldr	r1, [sp, #884]	; 0x374
    a99a:	f003 fb16 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a99e:	e7ff      	b.n	a9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc1c>
    a9a0:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    a9a4:	f64e 504c 	movw	r0, #60748	; 0xed4c
    a9a8:	f2c0 0001 	movt	r0, #1
    a9ac:	6802      	ldr	r2, [r0, #0]
    a9ae:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a9b2:	f004 fad6 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a9b6:	e7ff      	b.n	a9b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc34>
    a9b8:	e7ff      	b.n	a9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
                if self.v[x] != kk {
    a9ba:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a9be:	280f      	cmp	r0, #15
    a9c0:	f202 8755 	bhi.w	d86e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aea>
    a9c4:	e7ff      	b.n	a9c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc42>
    a9c6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a9ce:	1842      	adds	r2, r0, r1
    a9d0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a9d4:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a9d8:	fa5f fc83 	uxtb.w	ip, r3
    a9dc:	4562      	cmp	r2, ip
    a9de:	d006      	beq.n	a9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
    a9e0:	e7ff      	b.n	a9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc5e>
                    self.next();
    a9e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9e6:	f002 ffb5 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a9ea:	e7ff      	b.n	a9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc68>
                if self.v[x] != kk {
    a9ec:	e7ff      	b.n	a9ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
        match (
    a9ee:	f002 bc7f 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a9f2:	2005      	movs	r0, #5
    a9f4:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    a9f8:	f24e 0090 	movw	r0, #57488	; 0xe090
    a9fc:	f2c0 0001 	movt	r0, #1
    aa00:	6801      	ldr	r1, [r0, #0]
    aa02:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    aa06:	f008 f917 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa0a:	90da      	str	r0, [sp, #872]	; 0x368
    aa0c:	e01f      	b.n	aa4e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcca>
    aa0e:	2001      	movs	r0, #1
    aa10:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    aa14:	e015      	b.n	aa42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    aa16:	2000      	movs	r0, #0
    aa18:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    aa1c:	e011      	b.n	aa42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    aa1e:	2000      	movs	r0, #0
    aa20:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    aa24:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    aa28:	f646 2050 	movw	r0, #27216	; 0x6a50
    aa2c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aa30:	f008 f90e 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    aa34:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    aa38:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    aa3c:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    aa40:	e00a      	b.n	aa58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcd4>
    aa42:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    aa46:	07c0      	lsls	r0, r0, #31
    aa48:	2800      	cmp	r0, #0
    aa4a:	d112      	bne.n	aa72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcee>
    aa4c:	e055      	b.n	aafa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
    aa4e:	98da      	ldr	r0, [sp, #872]	; 0x368
    aa50:	07c1      	lsls	r1, r0, #31
    aa52:	2900      	cmp	r1, #0
    aa54:	d1e3      	bne.n	aa1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc9a>
    aa56:	e7de      	b.n	aa16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
    aa58:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    aa5c:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    aa60:	f008 f8ea 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa64:	90d9      	str	r0, [sp, #868]	; 0x364
    aa66:	e7ff      	b.n	aa68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xce4>
    aa68:	98d9      	ldr	r0, [sp, #868]	; 0x364
    aa6a:	07c1      	lsls	r1, r0, #31
    aa6c:	2900      	cmp	r1, #0
    aa6e:	d1ce      	bne.n	aa0e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc8a>
    aa70:	e7d1      	b.n	aa16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    aa72:	f64e 40cc 	movw	r0, #60620	; 0xeccc
    aa76:	f2c0 0001 	movt	r0, #1
    aa7a:	6801      	ldr	r1, [r0, #0]
    aa7c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa80:	f100 0212 	add.w	r2, r0, #18
    aa84:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    aa88:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    aa8c:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    aa90:	f248 339f 	movw	r3, #33695	; 0x839f
    aa94:	f2c0 0301 	movt	r3, #1
    aa98:	4610      	mov	r0, r2
    aa9a:	91d8      	str	r1, [sp, #864]	; 0x360
    aa9c:	4619      	mov	r1, r3
    aa9e:	f007 f9e9 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    aaa2:	90d7      	str	r0, [sp, #860]	; 0x35c
    aaa4:	91d6      	str	r1, [sp, #856]	; 0x358
    aaa6:	e7ff      	b.n	aaa8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd24>
    aaa8:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    aaaa:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    aaae:	99d6      	ldr	r1, [sp, #856]	; 0x358
    aab0:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    aab4:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    aab8:	f2c0 0201 	movt	r2, #1
    aabc:	6812      	ldr	r2, [r2, #0]
    aabe:	466b      	mov	r3, sp
    aac0:	f04f 0c01 	mov.w	ip, #1
    aac4:	f8c3 c008 	str.w	ip, [r3, #8]
    aac8:	605a      	str	r2, [r3, #4]
    aaca:	f8c3 c000 	str.w	ip, [r3]
    aace:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    aad2:	2202      	movs	r2, #2
    aad4:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    aad8:	99d8      	ldr	r1, [sp, #864]	; 0x360
    aada:	f003 fa76 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aade:	e7ff      	b.n	aae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd5c>
    aae0:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    aae4:	f64e 40ec 	movw	r0, #60652	; 0xecec
    aae8:	f2c0 0001 	movt	r0, #1
    aaec:	6802      	ldr	r2, [r0, #0]
    aaee:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    aaf2:	f004 fa36 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aaf6:	e7ff      	b.n	aaf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd74>
    aaf8:	e7ff      	b.n	aafa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
                if self.v[x] == self.v[y] {
    aafa:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    aafe:	280f      	cmp	r0, #15
    ab00:	f202 86a1 	bhi.w	d846 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ac2>
    ab04:	e7ff      	b.n	ab06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd82>
    ab06:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab0a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ab0e:	1842      	adds	r2, r0, r1
    ab10:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ab14:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    ab18:	2b0f      	cmp	r3, #15
    ab1a:	92d5      	str	r2, [sp, #852]	; 0x354
    ab1c:	f202 869d 	bhi.w	d85a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ad6>
    ab20:	e7ff      	b.n	ab22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd9e>
    ab22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab26:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ab2a:	1842      	adds	r2, r0, r1
    ab2c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ab30:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    ab32:	fa5f fc83 	uxtb.w	ip, r3
    ab36:	4594      	cmp	ip, r2
    ab38:	d106      	bne.n	ab48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
    ab3a:	e7ff      	b.n	ab3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdb8>
                    self.next();
    ab3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab40:	f002 ff08 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    ab44:	e7ff      	b.n	ab46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc2>
                if self.v[x] == self.v[y] {
    ab46:	e7ff      	b.n	ab48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
        match (
    ab48:	f002 bbd2 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ab4c:	2005      	movs	r0, #5
    ab4e:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    ab52:	f24e 0090 	movw	r0, #57488	; 0xe090
    ab56:	f2c0 0001 	movt	r0, #1
    ab5a:	6801      	ldr	r1, [r0, #0]
    ab5c:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    ab60:	f008 f86a 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ab64:	90d4      	str	r0, [sp, #848]	; 0x350
    ab66:	e01f      	b.n	aba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe24>
    ab68:	2001      	movs	r0, #1
    ab6a:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    ab6e:	e015      	b.n	ab9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    ab70:	2000      	movs	r0, #0
    ab72:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    ab76:	e011      	b.n	ab9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    ab78:	2000      	movs	r0, #0
    ab7a:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    ab7e:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    ab82:	f646 2050 	movw	r0, #27216	; 0x6a50
    ab86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ab8a:	f008 f861 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ab8e:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    ab92:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    ab96:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    ab9a:	e00a      	b.n	abb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe2e>
    ab9c:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    aba0:	07c0      	lsls	r0, r0, #31
    aba2:	2800      	cmp	r0, #0
    aba4:	d112      	bne.n	abcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe48>
    aba6:	e055      	b.n	ac54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
    aba8:	98d4      	ldr	r0, [sp, #848]	; 0x350
    abaa:	07c1      	lsls	r1, r0, #31
    abac:	2900      	cmp	r1, #0
    abae:	d1e3      	bne.n	ab78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdf4>
    abb0:	e7de      	b.n	ab70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
    abb2:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    abb6:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    abba:	f008 f83d 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    abbe:	90d3      	str	r0, [sp, #844]	; 0x34c
    abc0:	e7ff      	b.n	abc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe3e>
    abc2:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    abc4:	07c1      	lsls	r1, r0, #31
    abc6:	2900      	cmp	r1, #0
    abc8:	d1ce      	bne.n	ab68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xde4>
    abca:	e7d1      	b.n	ab70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    abcc:	f64e 30e4 	movw	r0, #60388	; 0xebe4
    abd0:	f2c0 0001 	movt	r0, #1
    abd4:	6801      	ldr	r1, [r0, #0]
    abd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    abda:	f100 0212 	add.w	r2, r0, #18
    abde:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    abe2:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    abe6:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    abea:	f248 339f 	movw	r3, #33695	; 0x839f
    abee:	f2c0 0301 	movt	r3, #1
    abf2:	4610      	mov	r0, r2
    abf4:	91d2      	str	r1, [sp, #840]	; 0x348
    abf6:	4619      	mov	r1, r3
    abf8:	f007 f93c 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    abfc:	90d1      	str	r0, [sp, #836]	; 0x344
    abfe:	91d0      	str	r1, [sp, #832]	; 0x340
    ac00:	e7ff      	b.n	ac02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe7e>
    ac02:	98d1      	ldr	r0, [sp, #836]	; 0x344
    ac04:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    ac08:	99d0      	ldr	r1, [sp, #832]	; 0x340
    ac0a:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    ac0e:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    ac12:	f2c0 0201 	movt	r2, #1
    ac16:	6812      	ldr	r2, [r2, #0]
    ac18:	466b      	mov	r3, sp
    ac1a:	f04f 0c01 	mov.w	ip, #1
    ac1e:	f8c3 c008 	str.w	ip, [r3, #8]
    ac22:	605a      	str	r2, [r3, #4]
    ac24:	f8c3 c000 	str.w	ip, [r3]
    ac28:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    ac2c:	2202      	movs	r2, #2
    ac2e:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    ac32:	99d2      	ldr	r1, [sp, #840]	; 0x348
    ac34:	f003 f9c9 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ac38:	e7ff      	b.n	ac3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xeb6>
    ac3a:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    ac3e:	f64e 4004 	movw	r0, #60420	; 0xec04
    ac42:	f2c0 0001 	movt	r0, #1
    ac46:	6802      	ldr	r2, [r0, #0]
    ac48:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    ac4c:	f004 f989 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ac50:	e7ff      	b.n	ac52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xece>
    ac52:	e7ff      	b.n	ac54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
                self.v[x] = kk;
    ac54:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ac58:	280f      	cmp	r0, #15
    ac5a:	f202 85ea 	bhi.w	d832 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aae>
    ac5e:	e7ff      	b.n	ac60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xedc>
    ac60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac64:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ac68:	1842      	adds	r2, r0, r1
    ac6a:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ac6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ac72:	f002 bb3d 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ac76:	2005      	movs	r0, #5
    ac78:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    ac7c:	f24e 0090 	movw	r0, #57488	; 0xe090
    ac80:	f2c0 0001 	movt	r0, #1
    ac84:	6801      	ldr	r1, [r0, #0]
    ac86:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ac8a:	f007 ffd5 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ac8e:	90cf      	str	r0, [sp, #828]	; 0x33c
    ac90:	e01f      	b.n	acd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf4e>
    ac92:	2001      	movs	r0, #1
    ac94:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    ac98:	e015      	b.n	acc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    ac9a:	2000      	movs	r0, #0
    ac9c:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    aca0:	e011      	b.n	acc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    aca2:	2000      	movs	r0, #0
    aca4:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    aca8:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    acac:	f646 2050 	movw	r0, #27216	; 0x6a50
    acb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    acb4:	f007 ffcc 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    acb8:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    acbc:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    acc0:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    acc4:	e00a      	b.n	acdc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf58>
    acc6:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    acca:	07c0      	lsls	r0, r0, #31
    accc:	2800      	cmp	r0, #0
    acce:	d112      	bne.n	acf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf72>
    acd0:	e055      	b.n	ad7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
    acd2:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    acd4:	07c1      	lsls	r1, r0, #31
    acd6:	2900      	cmp	r1, #0
    acd8:	d1e3      	bne.n	aca2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf1e>
    acda:	e7de      	b.n	ac9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
    acdc:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ace0:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    ace4:	f007 ffa8 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ace8:	90ce      	str	r0, [sp, #824]	; 0x338
    acea:	e7ff      	b.n	acec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf68>
    acec:	98ce      	ldr	r0, [sp, #824]	; 0x338
    acee:	07c1      	lsls	r1, r0, #31
    acf0:	2900      	cmp	r1, #0
    acf2:	d1ce      	bne.n	ac92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf0e>
    acf4:	e7d1      	b.n	ac9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    acf6:	f64e 3084 	movw	r0, #60292	; 0xeb84
    acfa:	f2c0 0001 	movt	r0, #1
    acfe:	6801      	ldr	r1, [r0, #0]
    ad00:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad04:	f100 0212 	add.w	r2, r0, #18
    ad08:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    ad0c:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    ad10:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    ad14:	f248 339f 	movw	r3, #33695	; 0x839f
    ad18:	f2c0 0301 	movt	r3, #1
    ad1c:	4610      	mov	r0, r2
    ad1e:	91cd      	str	r1, [sp, #820]	; 0x334
    ad20:	4619      	mov	r1, r3
    ad22:	f007 f8a7 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ad26:	90cc      	str	r0, [sp, #816]	; 0x330
    ad28:	91cb      	str	r1, [sp, #812]	; 0x32c
    ad2a:	e7ff      	b.n	ad2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfa8>
    ad2c:	98cc      	ldr	r0, [sp, #816]	; 0x330
    ad2e:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    ad32:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    ad34:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    ad38:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    ad3c:	f2c0 0201 	movt	r2, #1
    ad40:	6812      	ldr	r2, [r2, #0]
    ad42:	466b      	mov	r3, sp
    ad44:	f04f 0c01 	mov.w	ip, #1
    ad48:	f8c3 c008 	str.w	ip, [r3, #8]
    ad4c:	605a      	str	r2, [r3, #4]
    ad4e:	f8c3 c000 	str.w	ip, [r3]
    ad52:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ad56:	2202      	movs	r2, #2
    ad58:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    ad5c:	99cd      	ldr	r1, [sp, #820]	; 0x334
    ad5e:	f003 f934 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ad62:	e7ff      	b.n	ad64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfe0>
    ad64:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    ad68:	f64e 30a4 	movw	r0, #60324	; 0xeba4
    ad6c:	f2c0 0001 	movt	r0, #1
    ad70:	6802      	ldr	r2, [r0, #0]
    ad72:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ad76:	f004 f8f4 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ad7a:	e7ff      	b.n	ad7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xff8>
    ad7c:	e7ff      	b.n	ad7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    ad7e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ad82:	280f      	cmp	r0, #15
    ad84:	f202 8541 	bhi.w	d80a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a86>
    ad88:	e7ff      	b.n	ad8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1006>
    ad8a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad8e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ad92:	1842      	adds	r2, r0, r1
    ad94:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ad98:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    ad9c:	f007 ff97 	bl	12cce <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    ada0:	90ca      	str	r0, [sp, #808]	; 0x328
    ada2:	e7ff      	b.n	ada4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1020>
    ada4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ada8:	280f      	cmp	r0, #15
    adaa:	f202 8538 	bhi.w	d81e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a9a>
    adae:	e7ff      	b.n	adb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x102c>
    adb0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    adb4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    adb8:	1842      	adds	r2, r0, r1
    adba:	9bca      	ldr	r3, [sp, #808]	; 0x328
    adbc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    adc0:	f002 ba96 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    adc4:	2005      	movs	r0, #5
    adc6:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    adca:	f24e 0090 	movw	r0, #57488	; 0xe090
    adce:	f2c0 0001 	movt	r0, #1
    add2:	6801      	ldr	r1, [r0, #0]
    add4:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    add8:	f007 ff2e 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    addc:	90c9      	str	r0, [sp, #804]	; 0x324
    adde:	e01f      	b.n	ae20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x109c>
    ade0:	2001      	movs	r0, #1
    ade2:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ade6:	e015      	b.n	ae14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ade8:	2000      	movs	r0, #0
    adea:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    adee:	e011      	b.n	ae14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    adf0:	2000      	movs	r0, #0
    adf2:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    adf6:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    adfa:	f646 2050 	movw	r0, #27216	; 0x6a50
    adfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae02:	f007 ff25 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ae06:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    ae0a:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    ae0e:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    ae12:	e00a      	b.n	ae2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10a6>
    ae14:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    ae18:	07c0      	lsls	r0, r0, #31
    ae1a:	2800      	cmp	r0, #0
    ae1c:	d112      	bne.n	ae44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10c0>
    ae1e:	e055      	b.n	aecc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
    ae20:	98c9      	ldr	r0, [sp, #804]	; 0x324
    ae22:	07c1      	lsls	r1, r0, #31
    ae24:	2900      	cmp	r1, #0
    ae26:	d1e3      	bne.n	adf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x106c>
    ae28:	e7de      	b.n	ade8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
    ae2a:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ae2e:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    ae32:	f007 ff01 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ae36:	90c8      	str	r0, [sp, #800]	; 0x320
    ae38:	e7ff      	b.n	ae3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10b6>
    ae3a:	98c8      	ldr	r0, [sp, #800]	; 0x320
    ae3c:	07c1      	lsls	r1, r0, #31
    ae3e:	2900      	cmp	r1, #0
    ae40:	d1ce      	bne.n	ade0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x105c>
    ae42:	e7d1      	b.n	ade8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    ae44:	f64e 3024 	movw	r0, #60196	; 0xeb24
    ae48:	f2c0 0001 	movt	r0, #1
    ae4c:	6801      	ldr	r1, [r0, #0]
    ae4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae52:	f100 0212 	add.w	r2, r0, #18
    ae56:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    ae5a:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    ae5e:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    ae62:	f248 339f 	movw	r3, #33695	; 0x839f
    ae66:	f2c0 0301 	movt	r3, #1
    ae6a:	4610      	mov	r0, r2
    ae6c:	91c7      	str	r1, [sp, #796]	; 0x31c
    ae6e:	4619      	mov	r1, r3
    ae70:	f007 f800 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ae74:	90c6      	str	r0, [sp, #792]	; 0x318
    ae76:	91c5      	str	r1, [sp, #788]	; 0x314
    ae78:	e7ff      	b.n	ae7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10f6>
    ae7a:	98c6      	ldr	r0, [sp, #792]	; 0x318
    ae7c:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    ae80:	99c5      	ldr	r1, [sp, #788]	; 0x314
    ae82:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    ae86:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    ae8a:	f2c0 0201 	movt	r2, #1
    ae8e:	6812      	ldr	r2, [r2, #0]
    ae90:	466b      	mov	r3, sp
    ae92:	f04f 0c01 	mov.w	ip, #1
    ae96:	f8c3 c008 	str.w	ip, [r3, #8]
    ae9a:	605a      	str	r2, [r3, #4]
    ae9c:	f8c3 c000 	str.w	ip, [r3]
    aea0:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    aea4:	2202      	movs	r2, #2
    aea6:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    aeaa:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    aeac:	f003 f88d 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aeb0:	e7ff      	b.n	aeb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x112e>
    aeb2:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    aeb6:	f64e 3044 	movw	r0, #60228	; 0xeb44
    aeba:	f2c0 0001 	movt	r0, #1
    aebe:	6802      	ldr	r2, [r0, #0]
    aec0:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    aec4:	f004 f84d 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aec8:	e7ff      	b.n	aeca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1146>
    aeca:	e7ff      	b.n	aecc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
                self.v[x] = self.v[y];
    aecc:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    aed0:	280f      	cmp	r0, #15
    aed2:	f202 8486 	bhi.w	d7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a5e>
    aed6:	e7ff      	b.n	aed8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1154>
    aed8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aedc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    aee0:	1842      	adds	r2, r0, r1
    aee2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    aee6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    aeea:	2b0f      	cmp	r3, #15
    aeec:	92c4      	str	r2, [sp, #784]	; 0x310
    aeee:	f202 8482 	bhi.w	d7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a72>
    aef2:	e7ff      	b.n	aef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1170>
    aef4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aef8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aefc:	1842      	adds	r2, r0, r1
    aefe:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    af00:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    af04:	f002 b9f4 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    af08:	2005      	movs	r0, #5
    af0a:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    af0e:	f24e 0090 	movw	r0, #57488	; 0xe090
    af12:	f2c0 0001 	movt	r0, #1
    af16:	6801      	ldr	r1, [r0, #0]
    af18:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    af1c:	f007 fe8c 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af20:	90c3      	str	r0, [sp, #780]	; 0x30c
    af22:	e01f      	b.n	af64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11e0>
    af24:	2001      	movs	r0, #1
    af26:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    af2a:	e015      	b.n	af58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    af2c:	2000      	movs	r0, #0
    af2e:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    af32:	e011      	b.n	af58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    af34:	2000      	movs	r0, #0
    af36:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    af3a:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    af3e:	f646 2050 	movw	r0, #27216	; 0x6a50
    af42:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af46:	f007 fe83 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    af4a:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    af4e:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    af52:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    af56:	e00a      	b.n	af6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11ea>
    af58:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    af5c:	07c0      	lsls	r0, r0, #31
    af5e:	2800      	cmp	r0, #0
    af60:	d112      	bne.n	af88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1204>
    af62:	e055      	b.n	b010 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
    af64:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    af66:	07c1      	lsls	r1, r0, #31
    af68:	2900      	cmp	r1, #0
    af6a:	d1e3      	bne.n	af34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11b0>
    af6c:	e7de      	b.n	af2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
    af6e:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    af72:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    af76:	f007 fe5f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af7a:	90c2      	str	r0, [sp, #776]	; 0x308
    af7c:	e7ff      	b.n	af7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11fa>
    af7e:	98c2      	ldr	r0, [sp, #776]	; 0x308
    af80:	07c1      	lsls	r1, r0, #31
    af82:	2900      	cmp	r1, #0
    af84:	d1ce      	bne.n	af24 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a0>
    af86:	e7d1      	b.n	af2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    af88:	f64e 20c4 	movw	r0, #60100	; 0xeac4
    af8c:	f2c0 0001 	movt	r0, #1
    af90:	6801      	ldr	r1, [r0, #0]
    af92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af96:	f100 0212 	add.w	r2, r0, #18
    af9a:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    af9e:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    afa2:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    afa6:	f248 339f 	movw	r3, #33695	; 0x839f
    afaa:	f2c0 0301 	movt	r3, #1
    afae:	4610      	mov	r0, r2
    afb0:	91c1      	str	r1, [sp, #772]	; 0x304
    afb2:	4619      	mov	r1, r3
    afb4:	f006 ff5e 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    afb8:	90c0      	str	r0, [sp, #768]	; 0x300
    afba:	91bf      	str	r1, [sp, #764]	; 0x2fc
    afbc:	e7ff      	b.n	afbe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x123a>
    afbe:	98c0      	ldr	r0, [sp, #768]	; 0x300
    afc0:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    afc4:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    afc6:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    afca:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    afce:	f2c0 0201 	movt	r2, #1
    afd2:	6812      	ldr	r2, [r2, #0]
    afd4:	466b      	mov	r3, sp
    afd6:	f04f 0c01 	mov.w	ip, #1
    afda:	f8c3 c008 	str.w	ip, [r3, #8]
    afde:	605a      	str	r2, [r3, #4]
    afe0:	f8c3 c000 	str.w	ip, [r3]
    afe4:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    afe8:	2202      	movs	r2, #2
    afea:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    afee:	99c1      	ldr	r1, [sp, #772]	; 0x304
    aff0:	f002 ffeb 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    aff4:	e7ff      	b.n	aff6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1272>
    aff6:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    affa:	f64e 20e4 	movw	r0, #60132	; 0xeae4
    affe:	f2c0 0001 	movt	r0, #1
    b002:	6802      	ldr	r2, [r0, #0]
    b004:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    b008:	f003 ffab 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b00c:	e7ff      	b.n	b00e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128a>
    b00e:	e7ff      	b.n	b010 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
                self.v[x] |= self.v[y];
    b010:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b014:	280f      	cmp	r0, #15
    b016:	f202 83d0 	bhi.w	d7ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a36>
    b01a:	e7ff      	b.n	b01c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1298>
    b01c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b020:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b024:	1842      	adds	r2, r0, r1
    b026:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b02a:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b02e:	2b0f      	cmp	r3, #15
    b030:	92be      	str	r2, [sp, #760]	; 0x2f8
    b032:	f202 83cc 	bhi.w	d7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a4a>
    b036:	e7ff      	b.n	b038 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12b4>
    b038:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b03c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b040:	1842      	adds	r2, r0, r1
    b042:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b046:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    b04a:	ea43 030c 	orr.w	r3, r3, ip
    b04e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b052:	f002 b94d 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b056:	2005      	movs	r0, #5
    b058:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    b05c:	f24e 0090 	movw	r0, #57488	; 0xe090
    b060:	f2c0 0001 	movt	r0, #1
    b064:	6801      	ldr	r1, [r0, #0]
    b066:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    b06a:	f007 fde5 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b06e:	90bd      	str	r0, [sp, #756]	; 0x2f4
    b070:	e01f      	b.n	b0b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x132e>
    b072:	2001      	movs	r0, #1
    b074:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    b078:	e015      	b.n	b0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    b07a:	2000      	movs	r0, #0
    b07c:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    b080:	e011      	b.n	b0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    b082:	2000      	movs	r0, #0
    b084:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    b088:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    b08c:	f646 2050 	movw	r0, #27216	; 0x6a50
    b090:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b094:	f007 fddc 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b098:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    b09c:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    b0a0:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    b0a4:	e00a      	b.n	b0bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1338>
    b0a6:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    b0aa:	07c0      	lsls	r0, r0, #31
    b0ac:	2800      	cmp	r0, #0
    b0ae:	d112      	bne.n	b0d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1352>
    b0b0:	e055      	b.n	b15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
    b0b2:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    b0b4:	07c1      	lsls	r1, r0, #31
    b0b6:	2900      	cmp	r1, #0
    b0b8:	d1e3      	bne.n	b082 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12fe>
    b0ba:	e7de      	b.n	b07a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
    b0bc:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    b0c0:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    b0c4:	f007 fdb8 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b0c8:	90bc      	str	r0, [sp, #752]	; 0x2f0
    b0ca:	e7ff      	b.n	b0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1348>
    b0cc:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    b0ce:	07c1      	lsls	r1, r0, #31
    b0d0:	2900      	cmp	r1, #0
    b0d2:	d1ce      	bne.n	b072 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12ee>
    b0d4:	e7d1      	b.n	b07a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    b0d6:	f64e 2064 	movw	r0, #60004	; 0xea64
    b0da:	f2c0 0001 	movt	r0, #1
    b0de:	6801      	ldr	r1, [r0, #0]
    b0e0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0e4:	f100 0212 	add.w	r2, r0, #18
    b0e8:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    b0ec:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    b0f0:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    b0f4:	f248 339f 	movw	r3, #33695	; 0x839f
    b0f8:	f2c0 0301 	movt	r3, #1
    b0fc:	4610      	mov	r0, r2
    b0fe:	91bb      	str	r1, [sp, #748]	; 0x2ec
    b100:	4619      	mov	r1, r3
    b102:	f006 feb7 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b106:	90ba      	str	r0, [sp, #744]	; 0x2e8
    b108:	91b9      	str	r1, [sp, #740]	; 0x2e4
    b10a:	e7ff      	b.n	b10c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1388>
    b10c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    b10e:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    b112:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    b114:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    b118:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b11c:	f2c0 0201 	movt	r2, #1
    b120:	6812      	ldr	r2, [r2, #0]
    b122:	466b      	mov	r3, sp
    b124:	f04f 0c01 	mov.w	ip, #1
    b128:	f8c3 c008 	str.w	ip, [r3, #8]
    b12c:	605a      	str	r2, [r3, #4]
    b12e:	f8c3 c000 	str.w	ip, [r3]
    b132:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    b136:	2202      	movs	r2, #2
    b138:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    b13c:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    b13e:	f002 ff44 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b142:	e7ff      	b.n	b144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13c0>
    b144:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    b148:	f64e 2084 	movw	r0, #60036	; 0xea84
    b14c:	f2c0 0001 	movt	r0, #1
    b150:	6802      	ldr	r2, [r0, #0]
    b152:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    b156:	f003 ff04 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b15a:	e7ff      	b.n	b15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13d8>
    b15c:	e7ff      	b.n	b15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
                self.v[x] &= self.v[y];
    b15e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b162:	280f      	cmp	r0, #15
    b164:	f202 8315 	bhi.w	d792 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a0e>
    b168:	e7ff      	b.n	b16a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13e6>
    b16a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b16e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b172:	1842      	adds	r2, r0, r1
    b174:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b178:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b17c:	2b0f      	cmp	r3, #15
    b17e:	92b8      	str	r2, [sp, #736]	; 0x2e0
    b180:	f202 8311 	bhi.w	d7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a22>
    b184:	e7ff      	b.n	b186 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1402>
    b186:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b18a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b18e:	1842      	adds	r2, r0, r1
    b190:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b194:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    b198:	ea03 030c 	and.w	r3, r3, ip
    b19c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b1a0:	f002 b8a6 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b1a4:	2005      	movs	r0, #5
    b1a6:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    b1aa:	f24e 0090 	movw	r0, #57488	; 0xe090
    b1ae:	f2c0 0001 	movt	r0, #1
    b1b2:	6801      	ldr	r1, [r0, #0]
    b1b4:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b1b8:	f007 fd3e 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b1bc:	90b7      	str	r0, [sp, #732]	; 0x2dc
    b1be:	e01f      	b.n	b200 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x147c>
    b1c0:	2001      	movs	r0, #1
    b1c2:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b1c6:	e015      	b.n	b1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b1c8:	2000      	movs	r0, #0
    b1ca:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b1ce:	e011      	b.n	b1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b1d0:	2000      	movs	r0, #0
    b1d2:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    b1d6:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    b1da:	f646 2050 	movw	r0, #27216	; 0x6a50
    b1de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b1e2:	f007 fd35 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b1e6:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    b1ea:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    b1ee:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    b1f2:	e00a      	b.n	b20a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1486>
    b1f4:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    b1f8:	07c0      	lsls	r0, r0, #31
    b1fa:	2800      	cmp	r0, #0
    b1fc:	d112      	bne.n	b224 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14a0>
    b1fe:	e055      	b.n	b2ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
    b200:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    b202:	07c1      	lsls	r1, r0, #31
    b204:	2900      	cmp	r1, #0
    b206:	d1e3      	bne.n	b1d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144c>
    b208:	e7de      	b.n	b1c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
    b20a:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b20e:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    b212:	f007 fd11 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b216:	90b6      	str	r0, [sp, #728]	; 0x2d8
    b218:	e7ff      	b.n	b21a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1496>
    b21a:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    b21c:	07c1      	lsls	r1, r0, #31
    b21e:	2900      	cmp	r1, #0
    b220:	d1ce      	bne.n	b1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x143c>
    b222:	e7d1      	b.n	b1c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    b224:	f64e 2004 	movw	r0, #59908	; 0xea04
    b228:	f2c0 0001 	movt	r0, #1
    b22c:	6801      	ldr	r1, [r0, #0]
    b22e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b232:	f100 0212 	add.w	r2, r0, #18
    b236:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    b23a:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    b23e:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    b242:	f248 339f 	movw	r3, #33695	; 0x839f
    b246:	f2c0 0301 	movt	r3, #1
    b24a:	4610      	mov	r0, r2
    b24c:	91b5      	str	r1, [sp, #724]	; 0x2d4
    b24e:	4619      	mov	r1, r3
    b250:	f006 fe10 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b254:	90b4      	str	r0, [sp, #720]	; 0x2d0
    b256:	91b3      	str	r1, [sp, #716]	; 0x2cc
    b258:	e7ff      	b.n	b25a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14d6>
    b25a:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    b25c:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    b260:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    b262:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    b266:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b26a:	f2c0 0201 	movt	r2, #1
    b26e:	6812      	ldr	r2, [r2, #0]
    b270:	466b      	mov	r3, sp
    b272:	f04f 0c01 	mov.w	ip, #1
    b276:	f8c3 c008 	str.w	ip, [r3, #8]
    b27a:	605a      	str	r2, [r3, #4]
    b27c:	f8c3 c000 	str.w	ip, [r3]
    b280:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b284:	2202      	movs	r2, #2
    b286:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    b28a:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    b28c:	f002 fe9d 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b290:	e7ff      	b.n	b292 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x150e>
    b292:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    b296:	f64e 2024 	movw	r0, #59940	; 0xea24
    b29a:	f2c0 0001 	movt	r0, #1
    b29e:	6802      	ldr	r2, [r0, #0]
    b2a0:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b2a4:	f003 fe5d 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b2a8:	e7ff      	b.n	b2aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1526>
    b2aa:	e7ff      	b.n	b2ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
                self.v[x] ^= self.v[y];
    b2ac:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b2b0:	280f      	cmp	r0, #15
    b2b2:	f202 825a 	bhi.w	d76a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39e6>
    b2b6:	e7ff      	b.n	b2b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1534>
    b2b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2bc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b2c0:	1842      	adds	r2, r0, r1
    b2c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b2c6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b2ca:	2b0f      	cmp	r3, #15
    b2cc:	92b2      	str	r2, [sp, #712]	; 0x2c8
    b2ce:	f202 8256 	bhi.w	d77e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39fa>
    b2d2:	e7ff      	b.n	b2d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1550>
    b2d4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2d8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b2dc:	1842      	adds	r2, r0, r1
    b2de:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b2e2:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    b2e6:	ea83 030c 	eor.w	r3, r3, ip
    b2ea:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b2ee:	f001 bfff 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b2f2:	2005      	movs	r0, #5
    b2f4:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    b2f8:	f24e 0090 	movw	r0, #57488	; 0xe090
    b2fc:	f2c0 0001 	movt	r0, #1
    b300:	6801      	ldr	r1, [r0, #0]
    b302:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b306:	f007 fc97 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b30a:	90b1      	str	r0, [sp, #708]	; 0x2c4
    b30c:	e01f      	b.n	b34e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ca>
    b30e:	2001      	movs	r0, #1
    b310:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b314:	e015      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b316:	2000      	movs	r0, #0
    b318:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b31c:	e011      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b31e:	2000      	movs	r0, #0
    b320:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    b324:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    b328:	f646 2050 	movw	r0, #27216	; 0x6a50
    b32c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b330:	f007 fc8e 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b334:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    b338:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    b33c:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    b340:	e00a      	b.n	b358 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15d4>
    b342:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    b346:	07c0      	lsls	r0, r0, #31
    b348:	2800      	cmp	r0, #0
    b34a:	d112      	bne.n	b372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ee>
    b34c:	e055      	b.n	b3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
    b34e:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    b350:	07c1      	lsls	r1, r0, #31
    b352:	2900      	cmp	r1, #0
    b354:	d1e3      	bne.n	b31e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x159a>
    b356:	e7de      	b.n	b316 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
    b358:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b35c:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    b360:	f007 fc6a 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b364:	90b0      	str	r0, [sp, #704]	; 0x2c0
    b366:	e7ff      	b.n	b368 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15e4>
    b368:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    b36a:	07c1      	lsls	r1, r0, #31
    b36c:	2900      	cmp	r1, #0
    b36e:	d1ce      	bne.n	b30e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x158a>
    b370:	e7d1      	b.n	b316 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    b372:	f64e 1094 	movw	r0, #59796	; 0xe994
    b376:	f2c0 0001 	movt	r0, #1
    b37a:	6801      	ldr	r1, [r0, #0]
    b37c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b380:	f100 0212 	add.w	r2, r0, #18
    b384:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    b388:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    b38c:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    b390:	f248 339f 	movw	r3, #33695	; 0x839f
    b394:	f2c0 0301 	movt	r3, #1
    b398:	4610      	mov	r0, r2
    b39a:	91af      	str	r1, [sp, #700]	; 0x2bc
    b39c:	4619      	mov	r1, r3
    b39e:	f006 fd69 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b3a2:	90ae      	str	r0, [sp, #696]	; 0x2b8
    b3a4:	91ad      	str	r1, [sp, #692]	; 0x2b4
    b3a6:	e7ff      	b.n	b3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1624>
    b3a8:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    b3aa:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    b3ae:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    b3b0:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    b3b4:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b3b8:	f2c0 0201 	movt	r2, #1
    b3bc:	6812      	ldr	r2, [r2, #0]
    b3be:	466b      	mov	r3, sp
    b3c0:	f04f 0c01 	mov.w	ip, #1
    b3c4:	f8c3 c008 	str.w	ip, [r3, #8]
    b3c8:	605a      	str	r2, [r3, #4]
    b3ca:	f8c3 c000 	str.w	ip, [r3]
    b3ce:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b3d2:	2202      	movs	r2, #2
    b3d4:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    b3d8:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    b3da:	f002 fdf6 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b3de:	e7ff      	b.n	b3e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x165c>
    b3e0:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    b3e4:	f64e 10b4 	movw	r0, #59828	; 0xe9b4
    b3e8:	f2c0 0001 	movt	r0, #1
    b3ec:	6802      	ldr	r2, [r0, #0]
    b3ee:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b3f2:	f003 fdb6 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b3f6:	e7ff      	b.n	b3f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1674>
    b3f8:	e7ff      	b.n	b3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    b3fa:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b3fe:	280f      	cmp	r0, #15
    b400:	f202 8195 	bhi.w	d72e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39aa>
    b404:	e7ff      	b.n	b406 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1682>
    b406:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b40a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b40e:	1842      	adds	r2, r0, r1
    b410:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b414:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b418:	2b0f      	cmp	r3, #15
    b41a:	92ac      	str	r2, [sp, #688]	; 0x2b0
    b41c:	f202 8191 	bhi.w	d742 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39be>
    b420:	e7ff      	b.n	b422 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x169e>
    b422:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b426:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b42a:	1842      	adds	r2, r0, r1
    b42c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b430:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    b432:	f007 fc92 	bl	12d5a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
    b436:	90ab      	str	r0, [sp, #684]	; 0x2ac
    b438:	91aa      	str	r1, [sp, #680]	; 0x2a8
    b43a:	e7ff      	b.n	b43c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16b8>
    b43c:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    b43e:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    b442:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    b444:	f001 0201 	and.w	r2, r1, #1
    b448:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    b44c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b450:	2a0f      	cmp	r2, #15
    b452:	f202 8180 	bhi.w	d756 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39d2>
    b456:	e7ff      	b.n	b458 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16d4>
    b458:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b45c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b460:	1842      	adds	r2, r0, r1
    b462:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    b464:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    b468:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    b46a:	f002 0c01 	and.w	ip, r2, #1
    b46e:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    b472:	f001 bf3d 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b476:	2005      	movs	r0, #5
    b478:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    b47c:	f24e 0090 	movw	r0, #57488	; 0xe090
    b480:	f2c0 0001 	movt	r0, #1
    b484:	6801      	ldr	r1, [r0, #0]
    b486:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b48a:	f007 fbd5 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b48e:	90a9      	str	r0, [sp, #676]	; 0x2a4
    b490:	e01f      	b.n	b4d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x174e>
    b492:	2001      	movs	r0, #1
    b494:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b498:	e015      	b.n	b4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b49a:	2000      	movs	r0, #0
    b49c:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b4a0:	e011      	b.n	b4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b4a2:	2000      	movs	r0, #0
    b4a4:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    b4a8:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    b4ac:	f646 2050 	movw	r0, #27216	; 0x6a50
    b4b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4b4:	f007 fbcc 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b4b8:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    b4bc:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    b4c0:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    b4c4:	e00a      	b.n	b4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1758>
    b4c6:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    b4ca:	07c0      	lsls	r0, r0, #31
    b4cc:	2800      	cmp	r0, #0
    b4ce:	d112      	bne.n	b4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1772>
    b4d0:	e055      	b.n	b57e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
    b4d2:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    b4d4:	07c1      	lsls	r1, r0, #31
    b4d6:	2900      	cmp	r1, #0
    b4d8:	d1e3      	bne.n	b4a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x171e>
    b4da:	e7de      	b.n	b49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
    b4dc:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b4e0:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    b4e4:	f007 fba8 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b4e8:	90a8      	str	r0, [sp, #672]	; 0x2a0
    b4ea:	e7ff      	b.n	b4ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1768>
    b4ec:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    b4ee:	07c1      	lsls	r1, r0, #31
    b4f0:	2900      	cmp	r1, #0
    b4f2:	d1ce      	bne.n	b492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x170e>
    b4f4:	e7d1      	b.n	b49a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    b4f6:	f64e 1024 	movw	r0, #59684	; 0xe924
    b4fa:	f2c0 0001 	movt	r0, #1
    b4fe:	6801      	ldr	r1, [r0, #0]
    b500:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b504:	f100 0212 	add.w	r2, r0, #18
    b508:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    b50c:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    b510:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    b514:	f248 339f 	movw	r3, #33695	; 0x839f
    b518:	f2c0 0301 	movt	r3, #1
    b51c:	4610      	mov	r0, r2
    b51e:	91a7      	str	r1, [sp, #668]	; 0x29c
    b520:	4619      	mov	r1, r3
    b522:	f006 fca7 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b526:	90a6      	str	r0, [sp, #664]	; 0x298
    b528:	91a5      	str	r1, [sp, #660]	; 0x294
    b52a:	e7ff      	b.n	b52c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17a8>
    b52c:	98a6      	ldr	r0, [sp, #664]	; 0x298
    b52e:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    b532:	99a5      	ldr	r1, [sp, #660]	; 0x294
    b534:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    b538:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b53c:	f2c0 0201 	movt	r2, #1
    b540:	6812      	ldr	r2, [r2, #0]
    b542:	466b      	mov	r3, sp
    b544:	f04f 0c01 	mov.w	ip, #1
    b548:	f8c3 c008 	str.w	ip, [r3, #8]
    b54c:	605a      	str	r2, [r3, #4]
    b54e:	f8c3 c000 	str.w	ip, [r3]
    b552:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b556:	2202      	movs	r2, #2
    b558:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    b55c:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    b55e:	f002 fd34 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b562:	e7ff      	b.n	b564 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17e0>
    b564:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    b568:	f64e 1044 	movw	r0, #59716	; 0xe944
    b56c:	f2c0 0001 	movt	r0, #1
    b570:	6802      	ldr	r2, [r0, #0]
    b572:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b576:	f003 fcf4 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b57a:	e7ff      	b.n	b57c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17f8>
    b57c:	e7ff      	b.n	b57e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    b57e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b582:	280f      	cmp	r0, #15
    b584:	f202 80b5 	bhi.w	d6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x396e>
    b588:	e7ff      	b.n	b58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1806>
    b58a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b58e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b592:	1842      	adds	r2, r0, r1
    b594:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b598:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b59c:	2b0f      	cmp	r3, #15
    b59e:	92a4      	str	r2, [sp, #656]	; 0x290
    b5a0:	f202 80b1 	bhi.w	d706 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3982>
    b5a4:	e7ff      	b.n	b5a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1822>
    b5a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5aa:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b5ae:	1842      	adds	r2, r0, r1
    b5b0:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b5b4:	98a4      	ldr	r0, [sp, #656]	; 0x290
    b5b6:	f007 fbfb 	bl	12db0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b5ba:	90a3      	str	r0, [sp, #652]	; 0x28c
    b5bc:	91a2      	str	r1, [sp, #648]	; 0x288
    b5be:	e7ff      	b.n	b5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x183c>
    b5c0:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    b5c2:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    b5c6:	99a2      	ldr	r1, [sp, #648]	; 0x288
    b5c8:	f001 0201 	and.w	r2, r1, #1
    b5cc:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    b5d0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b5d4:	2a0f      	cmp	r2, #15
    b5d6:	f202 80a0 	bhi.w	d71a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3996>
    b5da:	e7ff      	b.n	b5dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1858>
    b5dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b5e4:	1842      	adds	r2, r0, r1
    b5e6:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b5e8:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b5ec:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b5ee:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    b5f2:	ea22 020c 	bic.w	r2, r2, ip
    b5f6:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b5fa:	f001 be79 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b5fe:	2005      	movs	r0, #5
    b600:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    b604:	f24e 0090 	movw	r0, #57488	; 0xe090
    b608:	f2c0 0001 	movt	r0, #1
    b60c:	6801      	ldr	r1, [r0, #0]
    b60e:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b612:	f007 fb11 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b616:	90a1      	str	r0, [sp, #644]	; 0x284
    b618:	e01f      	b.n	b65a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18d6>
    b61a:	2001      	movs	r0, #1
    b61c:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b620:	e015      	b.n	b64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b622:	2000      	movs	r0, #0
    b624:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b628:	e011      	b.n	b64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b62a:	2000      	movs	r0, #0
    b62c:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    b630:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    b634:	f646 2050 	movw	r0, #27216	; 0x6a50
    b638:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b63c:	f007 fb08 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b640:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    b644:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    b648:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    b64c:	e00a      	b.n	b664 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18e0>
    b64e:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    b652:	07c0      	lsls	r0, r0, #31
    b654:	2800      	cmp	r0, #0
    b656:	d112      	bne.n	b67e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18fa>
    b658:	e055      	b.n	b706 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
    b65a:	98a1      	ldr	r0, [sp, #644]	; 0x284
    b65c:	07c1      	lsls	r1, r0, #31
    b65e:	2900      	cmp	r1, #0
    b660:	d1e3      	bne.n	b62a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18a6>
    b662:	e7de      	b.n	b622 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
    b664:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b668:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    b66c:	f007 fae4 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b670:	90a0      	str	r0, [sp, #640]	; 0x280
    b672:	e7ff      	b.n	b674 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18f0>
    b674:	98a0      	ldr	r0, [sp, #640]	; 0x280
    b676:	07c1      	lsls	r1, r0, #31
    b678:	2900      	cmp	r1, #0
    b67a:	d1ce      	bne.n	b61a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1896>
    b67c:	e7d1      	b.n	b622 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    b67e:	f64e 00b4 	movw	r0, #59572	; 0xe8b4
    b682:	f2c0 0001 	movt	r0, #1
    b686:	6801      	ldr	r1, [r0, #0]
    b688:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b68c:	f100 0212 	add.w	r2, r0, #18
    b690:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    b694:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    b698:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    b69c:	f248 339f 	movw	r3, #33695	; 0x839f
    b6a0:	f2c0 0301 	movt	r3, #1
    b6a4:	4610      	mov	r0, r2
    b6a6:	919f      	str	r1, [sp, #636]	; 0x27c
    b6a8:	4619      	mov	r1, r3
    b6aa:	f006 fbe3 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b6ae:	909e      	str	r0, [sp, #632]	; 0x278
    b6b0:	919d      	str	r1, [sp, #628]	; 0x274
    b6b2:	e7ff      	b.n	b6b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1930>
    b6b4:	989e      	ldr	r0, [sp, #632]	; 0x278
    b6b6:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    b6ba:	999d      	ldr	r1, [sp, #628]	; 0x274
    b6bc:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    b6c0:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b6c4:	f2c0 0201 	movt	r2, #1
    b6c8:	6812      	ldr	r2, [r2, #0]
    b6ca:	466b      	mov	r3, sp
    b6cc:	f04f 0c01 	mov.w	ip, #1
    b6d0:	f8c3 c008 	str.w	ip, [r3, #8]
    b6d4:	605a      	str	r2, [r3, #4]
    b6d6:	f8c3 c000 	str.w	ip, [r3]
    b6da:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b6de:	2202      	movs	r2, #2
    b6e0:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    b6e4:	999f      	ldr	r1, [sp, #636]	; 0x27c
    b6e6:	f002 fc70 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b6ea:	e7ff      	b.n	b6ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1968>
    b6ec:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    b6f0:	f64e 00d4 	movw	r0, #59604	; 0xe8d4
    b6f4:	f2c0 0001 	movt	r0, #1
    b6f8:	6802      	ldr	r2, [r0, #0]
    b6fa:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b6fe:	f003 fc30 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b702:	e7ff      	b.n	b704 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1980>
    b704:	e7ff      	b.n	b706 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    b706:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b70a:	280f      	cmp	r0, #15
    b70c:	f201 87d3 	bhi.w	d6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3932>
    b710:	e7ff      	b.n	b712 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x198e>
    b712:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b716:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b71a:	1842      	adds	r2, r0, r1
    b71c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b720:	f002 0201 	and.w	r2, r2, #1
    b724:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    b728:	290f      	cmp	r1, #15
    b72a:	f201 87ce 	bhi.w	d6ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3946>
    b72e:	e7ff      	b.n	b730 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19ac>
    b730:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b734:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b738:	1842      	adds	r2, r0, r1
    b73a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b73e:	2101      	movs	r1, #1
    b740:	f007 fae7 	bl	12d12 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>
    b744:	909c      	str	r0, [sp, #624]	; 0x270
    b746:	e7ff      	b.n	b748 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19c4>
    b748:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b74c:	280f      	cmp	r0, #15
    b74e:	f201 87c6 	bhi.w	d6de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x395a>
    b752:	e7ff      	b.n	b754 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19d0>
    b754:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b758:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b75c:	1842      	adds	r2, r0, r1
    b75e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    b760:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b764:	f001 bdc4 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b768:	2005      	movs	r0, #5
    b76a:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    b76e:	f24e 0090 	movw	r0, #57488	; 0xe090
    b772:	f2c0 0001 	movt	r0, #1
    b776:	6801      	ldr	r1, [r0, #0]
    b778:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b77c:	f007 fa5c 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b780:	909b      	str	r0, [sp, #620]	; 0x26c
    b782:	e01f      	b.n	b7c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a40>
    b784:	2001      	movs	r0, #1
    b786:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b78a:	e015      	b.n	b7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b78c:	2000      	movs	r0, #0
    b78e:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b792:	e011      	b.n	b7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b794:	2000      	movs	r0, #0
    b796:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    b79a:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    b79e:	f646 2050 	movw	r0, #27216	; 0x6a50
    b7a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b7a6:	f007 fa53 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b7aa:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    b7ae:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    b7b2:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    b7b6:	e00a      	b.n	b7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a4a>
    b7b8:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    b7bc:	07c0      	lsls	r0, r0, #31
    b7be:	2800      	cmp	r0, #0
    b7c0:	d112      	bne.n	b7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a64>
    b7c2:	e055      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
    b7c4:	989b      	ldr	r0, [sp, #620]	; 0x26c
    b7c6:	07c1      	lsls	r1, r0, #31
    b7c8:	2900      	cmp	r1, #0
    b7ca:	d1e3      	bne.n	b794 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a10>
    b7cc:	e7de      	b.n	b78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
    b7ce:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b7d2:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    b7d6:	f007 fa2f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b7da:	909a      	str	r0, [sp, #616]	; 0x268
    b7dc:	e7ff      	b.n	b7de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a5a>
    b7de:	989a      	ldr	r0, [sp, #616]	; 0x268
    b7e0:	07c1      	lsls	r1, r0, #31
    b7e2:	2900      	cmp	r1, #0
    b7e4:	d1ce      	bne.n	b784 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a00>
    b7e6:	e7d1      	b.n	b78c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    b7e8:	f64e 0044 	movw	r0, #59460	; 0xe844
    b7ec:	f2c0 0001 	movt	r0, #1
    b7f0:	6801      	ldr	r1, [r0, #0]
    b7f2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7f6:	f100 0212 	add.w	r2, r0, #18
    b7fa:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    b7fe:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    b802:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    b806:	f248 339f 	movw	r3, #33695	; 0x839f
    b80a:	f2c0 0301 	movt	r3, #1
    b80e:	4610      	mov	r0, r2
    b810:	9199      	str	r1, [sp, #612]	; 0x264
    b812:	4619      	mov	r1, r3
    b814:	f006 fb2e 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b818:	9098      	str	r0, [sp, #608]	; 0x260
    b81a:	9197      	str	r1, [sp, #604]	; 0x25c
    b81c:	e7ff      	b.n	b81e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a9a>
    b81e:	9898      	ldr	r0, [sp, #608]	; 0x260
    b820:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    b824:	9997      	ldr	r1, [sp, #604]	; 0x25c
    b826:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    b82a:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b82e:	f2c0 0201 	movt	r2, #1
    b832:	6812      	ldr	r2, [r2, #0]
    b834:	466b      	mov	r3, sp
    b836:	f04f 0c01 	mov.w	ip, #1
    b83a:	f8c3 c008 	str.w	ip, [r3, #8]
    b83e:	605a      	str	r2, [r3, #4]
    b840:	f8c3 c000 	str.w	ip, [r3]
    b844:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b848:	2202      	movs	r2, #2
    b84a:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    b84e:	9999      	ldr	r1, [sp, #612]	; 0x264
    b850:	f002 fbbb 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b854:	e7ff      	b.n	b856 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ad2>
    b856:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    b85a:	f64e 0064 	movw	r0, #59492	; 0xe864
    b85e:	f2c0 0001 	movt	r0, #1
    b862:	6802      	ldr	r2, [r0, #0]
    b864:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b868:	f003 fb7b 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b86c:	e7ff      	b.n	b86e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aea>
    b86e:	e7ff      	b.n	b870 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    b870:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b874:	280f      	cmp	r0, #15
    b876:	f201 8700 	bhi.w	d67a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38f6>
    b87a:	e7ff      	b.n	b87c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1af8>
    b87c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b880:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b884:	1842      	adds	r2, r0, r1
    b886:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b88a:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b88e:	2b0f      	cmp	r3, #15
    b890:	9296      	str	r2, [sp, #600]	; 0x258
    b892:	f201 86fc 	bhi.w	d68e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x390a>
    b896:	e7ff      	b.n	b898 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b14>
    b898:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b89c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8a0:	1842      	adds	r2, r0, r1
    b8a2:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b8a6:	9896      	ldr	r0, [sp, #600]	; 0x258
    b8a8:	f007 fa82 	bl	12db0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b8ac:	9095      	str	r0, [sp, #596]	; 0x254
    b8ae:	9194      	str	r1, [sp, #592]	; 0x250
    b8b0:	e7ff      	b.n	b8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b2e>
    b8b2:	9895      	ldr	r0, [sp, #596]	; 0x254
    b8b4:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    b8b8:	9994      	ldr	r1, [sp, #592]	; 0x250
    b8ba:	f001 0201 	and.w	r2, r1, #1
    b8be:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    b8c2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b8c6:	2a0f      	cmp	r2, #15
    b8c8:	f201 86eb 	bhi.w	d6a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x391e>
    b8cc:	e7ff      	b.n	b8ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b4a>
    b8ce:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b8d2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b8d6:	1842      	adds	r2, r0, r1
    b8d8:	9b95      	ldr	r3, [sp, #596]	; 0x254
    b8da:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b8de:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b8e0:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    b8e4:	ea22 020c 	bic.w	r2, r2, ip
    b8e8:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b8ec:	f001 bd00 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b8f0:	2005      	movs	r0, #5
    b8f2:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    b8f6:	f24e 0090 	movw	r0, #57488	; 0xe090
    b8fa:	f2c0 0001 	movt	r0, #1
    b8fe:	6801      	ldr	r1, [r0, #0]
    b900:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b904:	f007 f998 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b908:	9093      	str	r0, [sp, #588]	; 0x24c
    b90a:	e01f      	b.n	b94c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bc8>
    b90c:	2001      	movs	r0, #1
    b90e:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b912:	e015      	b.n	b940 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b914:	2000      	movs	r0, #0
    b916:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b91a:	e011      	b.n	b940 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b91c:	2000      	movs	r0, #0
    b91e:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    b922:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    b926:	f646 2050 	movw	r0, #27216	; 0x6a50
    b92a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b92e:	f007 f98f 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b932:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    b936:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    b93a:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    b93e:	e00a      	b.n	b956 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bd2>
    b940:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    b944:	07c0      	lsls	r0, r0, #31
    b946:	2800      	cmp	r0, #0
    b948:	d112      	bne.n	b970 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bec>
    b94a:	e055      	b.n	b9f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
    b94c:	9893      	ldr	r0, [sp, #588]	; 0x24c
    b94e:	07c1      	lsls	r1, r0, #31
    b950:	2900      	cmp	r1, #0
    b952:	d1e3      	bne.n	b91c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b98>
    b954:	e7de      	b.n	b914 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
    b956:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b95a:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    b95e:	f007 f96b 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b962:	9092      	str	r0, [sp, #584]	; 0x248
    b964:	e7ff      	b.n	b966 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1be2>
    b966:	9892      	ldr	r0, [sp, #584]	; 0x248
    b968:	07c1      	lsls	r1, r0, #31
    b96a:	2900      	cmp	r1, #0
    b96c:	d1ce      	bne.n	b90c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b88>
    b96e:	e7d1      	b.n	b914 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    b970:	f24e 70d0 	movw	r0, #59344	; 0xe7d0
    b974:	f2c0 0001 	movt	r0, #1
    b978:	6801      	ldr	r1, [r0, #0]
    b97a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b97e:	f100 0212 	add.w	r2, r0, #18
    b982:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    b986:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    b98a:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    b98e:	f248 339f 	movw	r3, #33695	; 0x839f
    b992:	f2c0 0301 	movt	r3, #1
    b996:	4610      	mov	r0, r2
    b998:	9191      	str	r1, [sp, #580]	; 0x244
    b99a:	4619      	mov	r1, r3
    b99c:	f006 fa6a 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b9a0:	9090      	str	r0, [sp, #576]	; 0x240
    b9a2:	918f      	str	r1, [sp, #572]	; 0x23c
    b9a4:	e7ff      	b.n	b9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c22>
    b9a6:	9890      	ldr	r0, [sp, #576]	; 0x240
    b9a8:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    b9ac:	998f      	ldr	r1, [sp, #572]	; 0x23c
    b9ae:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    b9b2:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    b9b6:	f2c0 0201 	movt	r2, #1
    b9ba:	6812      	ldr	r2, [r2, #0]
    b9bc:	466b      	mov	r3, sp
    b9be:	f04f 0c01 	mov.w	ip, #1
    b9c2:	f8c3 c008 	str.w	ip, [r3, #8]
    b9c6:	605a      	str	r2, [r3, #4]
    b9c8:	f8c3 c000 	str.w	ip, [r3]
    b9cc:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b9d0:	2202      	movs	r2, #2
    b9d2:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    b9d6:	9991      	ldr	r1, [sp, #580]	; 0x244
    b9d8:	f002 faf7 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b9dc:	e7ff      	b.n	b9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c5a>
    b9de:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    b9e2:	f24e 70f0 	movw	r0, #59376	; 0xe7f0
    b9e6:	f2c0 0001 	movt	r0, #1
    b9ea:	6802      	ldr	r2, [r0, #0]
    b9ec:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b9f0:	f003 fab7 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b9f4:	e7ff      	b.n	b9f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c72>
    b9f6:	e7ff      	b.n	b9f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    b9f8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b9fc:	280f      	cmp	r0, #15
    b9fe:	f201 861e 	bhi.w	d63e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ba>
    ba02:	e7ff      	b.n	ba04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c80>
    ba04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba08:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba0c:	1842      	adds	r2, r0, r1
    ba0e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ba12:	09d2      	lsrs	r2, r2, #7
    ba14:	928e      	str	r2, [sp, #568]	; 0x238
    ba16:	e7ff      	b.n	ba18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c94>
    ba18:	988e      	ldr	r0, [sp, #568]	; 0x238
    ba1a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ba1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    ba22:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ba26:	2a0f      	cmp	r2, #15
    ba28:	f201 8613 	bhi.w	d652 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ce>
    ba2c:	e7ff      	b.n	ba2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1caa>
    ba2e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba32:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba36:	1842      	adds	r2, r0, r1
    ba38:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ba3c:	2101      	movs	r1, #1
    ba3e:	f007 f957 	bl	12cf0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>
    ba42:	908d      	str	r0, [sp, #564]	; 0x234
    ba44:	e7ff      	b.n	ba46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc2>
    ba46:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba4a:	280f      	cmp	r0, #15
    ba4c:	f201 860b 	bhi.w	d666 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38e2>
    ba50:	e7ff      	b.n	ba52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cce>
    ba52:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba56:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ba5a:	1842      	adds	r2, r0, r1
    ba5c:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    ba5e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ba62:	f001 bc45 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ba66:	2005      	movs	r0, #5
    ba68:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    ba6c:	f24e 0090 	movw	r0, #57488	; 0xe090
    ba70:	f2c0 0001 	movt	r0, #1
    ba74:	6801      	ldr	r1, [r0, #0]
    ba76:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    ba7a:	f007 f8dd 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ba7e:	908c      	str	r0, [sp, #560]	; 0x230
    ba80:	e01f      	b.n	bac2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d3e>
    ba82:	2001      	movs	r0, #1
    ba84:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ba88:	e015      	b.n	bab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    ba8a:	2000      	movs	r0, #0
    ba8c:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    ba90:	e011      	b.n	bab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    ba92:	2000      	movs	r0, #0
    ba94:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    ba98:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    ba9c:	f646 2050 	movw	r0, #27216	; 0x6a50
    baa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    baa4:	f007 f8d4 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    baa8:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    baac:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    bab0:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    bab4:	e00a      	b.n	bacc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d48>
    bab6:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    baba:	07c0      	lsls	r0, r0, #31
    babc:	2800      	cmp	r0, #0
    babe:	d112      	bne.n	bae6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d62>
    bac0:	e055      	b.n	bb6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
    bac2:	988c      	ldr	r0, [sp, #560]	; 0x230
    bac4:	07c1      	lsls	r1, r0, #31
    bac6:	2900      	cmp	r1, #0
    bac8:	d1e3      	bne.n	ba92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d0e>
    baca:	e7de      	b.n	ba8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
    bacc:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    bad0:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    bad4:	f007 f8b0 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bad8:	908b      	str	r0, [sp, #556]	; 0x22c
    bada:	e7ff      	b.n	badc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d58>
    badc:	988b      	ldr	r0, [sp, #556]	; 0x22c
    bade:	07c1      	lsls	r1, r0, #31
    bae0:	2900      	cmp	r1, #0
    bae2:	d1ce      	bne.n	ba82 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cfe>
    bae4:	e7d1      	b.n	ba8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    bae6:	f24e 7070 	movw	r0, #59248	; 0xe770
    baea:	f2c0 0001 	movt	r0, #1
    baee:	6801      	ldr	r1, [r0, #0]
    baf0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    baf4:	f100 0212 	add.w	r2, r0, #18
    baf8:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    bafc:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    bb00:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    bb04:	f248 339f 	movw	r3, #33695	; 0x839f
    bb08:	f2c0 0301 	movt	r3, #1
    bb0c:	4610      	mov	r0, r2
    bb0e:	918a      	str	r1, [sp, #552]	; 0x228
    bb10:	4619      	mov	r1, r3
    bb12:	f006 f9af 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb16:	9089      	str	r0, [sp, #548]	; 0x224
    bb18:	9188      	str	r1, [sp, #544]	; 0x220
    bb1a:	e7ff      	b.n	bb1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d98>
    bb1c:	9889      	ldr	r0, [sp, #548]	; 0x224
    bb1e:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    bb22:	9988      	ldr	r1, [sp, #544]	; 0x220
    bb24:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    bb28:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    bb2c:	f2c0 0201 	movt	r2, #1
    bb30:	6812      	ldr	r2, [r2, #0]
    bb32:	466b      	mov	r3, sp
    bb34:	f04f 0c01 	mov.w	ip, #1
    bb38:	f8c3 c008 	str.w	ip, [r3, #8]
    bb3c:	605a      	str	r2, [r3, #4]
    bb3e:	f8c3 c000 	str.w	ip, [r3]
    bb42:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    bb46:	2202      	movs	r2, #2
    bb48:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    bb4c:	998a      	ldr	r1, [sp, #552]	; 0x228
    bb4e:	f002 fa3c 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bb52:	e7ff      	b.n	bb54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dd0>
    bb54:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    bb58:	f24e 7090 	movw	r0, #59280	; 0xe790
    bb5c:	f2c0 0001 	movt	r0, #1
    bb60:	6802      	ldr	r2, [r0, #0]
    bb62:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    bb66:	f003 f9fc 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bb6a:	e7ff      	b.n	bb6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de8>
    bb6c:	e7ff      	b.n	bb6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
                if self.v[x] != self.v[y] {
    bb6e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bb72:	280f      	cmp	r0, #15
    bb74:	f201 854f 	bhi.w	d616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3892>
    bb78:	e7ff      	b.n	bb7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1df6>
    bb7a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb7e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bb82:	1842      	adds	r2, r0, r1
    bb84:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bb88:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    bb8c:	2b0f      	cmp	r3, #15
    bb8e:	9287      	str	r2, [sp, #540]	; 0x21c
    bb90:	f201 854b 	bhi.w	d62a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a6>
    bb94:	e7ff      	b.n	bb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e12>
    bb96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb9a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bb9e:	1842      	adds	r2, r0, r1
    bba0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bba4:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    bba6:	fa5f fc83 	uxtb.w	ip, r3
    bbaa:	4594      	cmp	ip, r2
    bbac:	d006      	beq.n	bbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
    bbae:	e7ff      	b.n	bbb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e2c>
                    self.next();
    bbb0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bbb4:	f001 fece 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    bbb8:	e7ff      	b.n	bbba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e36>
                if self.v[x] != self.v[y] {
    bbba:	e7ff      	b.n	bbbc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
        match (
    bbbc:	f001 bb98 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bbc0:	2005      	movs	r0, #5
    bbc2:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    bbc6:	f24e 0090 	movw	r0, #57488	; 0xe090
    bbca:	f2c0 0001 	movt	r0, #1
    bbce:	6801      	ldr	r1, [r0, #0]
    bbd0:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    bbd4:	f007 f830 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bbd8:	9086      	str	r0, [sp, #536]	; 0x218
    bbda:	e01f      	b.n	bc1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e98>
    bbdc:	2001      	movs	r0, #1
    bbde:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    bbe2:	e015      	b.n	bc10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    bbe4:	2000      	movs	r0, #0
    bbe6:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    bbea:	e011      	b.n	bc10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    bbec:	2000      	movs	r0, #0
    bbee:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    bbf2:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    bbf6:	f646 2050 	movw	r0, #27216	; 0x6a50
    bbfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bbfe:	f007 f827 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bc02:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    bc06:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    bc0a:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    bc0e:	e00a      	b.n	bc26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ea2>
    bc10:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    bc14:	07c0      	lsls	r0, r0, #31
    bc16:	2800      	cmp	r0, #0
    bc18:	d112      	bne.n	bc40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ebc>
    bc1a:	e055      	b.n	bcc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
    bc1c:	9886      	ldr	r0, [sp, #536]	; 0x218
    bc1e:	07c1      	lsls	r1, r0, #31
    bc20:	2900      	cmp	r1, #0
    bc22:	d1e3      	bne.n	bbec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e68>
    bc24:	e7de      	b.n	bbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
    bc26:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    bc2a:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    bc2e:	f007 f803 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bc32:	9085      	str	r0, [sp, #532]	; 0x214
    bc34:	e7ff      	b.n	bc36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1eb2>
    bc36:	9885      	ldr	r0, [sp, #532]	; 0x214
    bc38:	07c1      	lsls	r1, r0, #31
    bc3a:	2900      	cmp	r1, #0
    bc3c:	d1ce      	bne.n	bbdc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e58>
    bc3e:	e7d1      	b.n	bbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    bc40:	f24e 7030 	movw	r0, #59184	; 0xe730
    bc44:	f2c0 0001 	movt	r0, #1
    bc48:	6801      	ldr	r1, [r0, #0]
    bc4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc4e:	f100 0212 	add.w	r2, r0, #18
    bc52:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    bc56:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    bc5a:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    bc5e:	f248 339f 	movw	r3, #33695	; 0x839f
    bc62:	f2c0 0301 	movt	r3, #1
    bc66:	4610      	mov	r0, r2
    bc68:	9184      	str	r1, [sp, #528]	; 0x210
    bc6a:	4619      	mov	r1, r3
    bc6c:	f006 f902 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bc70:	9083      	str	r0, [sp, #524]	; 0x20c
    bc72:	9182      	str	r1, [sp, #520]	; 0x208
    bc74:	e7ff      	b.n	bc76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ef2>
    bc76:	9883      	ldr	r0, [sp, #524]	; 0x20c
    bc78:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    bc7c:	9982      	ldr	r1, [sp, #520]	; 0x208
    bc7e:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    bc82:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    bc86:	f2c0 0201 	movt	r2, #1
    bc8a:	6812      	ldr	r2, [r2, #0]
    bc8c:	466b      	mov	r3, sp
    bc8e:	f04f 0c01 	mov.w	ip, #1
    bc92:	f8c3 c008 	str.w	ip, [r3, #8]
    bc96:	605a      	str	r2, [r3, #4]
    bc98:	f8c3 c000 	str.w	ip, [r3]
    bc9c:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bca0:	2202      	movs	r2, #2
    bca2:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    bca6:	9984      	ldr	r1, [sp, #528]	; 0x210
    bca8:	f002 f98f 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bcac:	e7ff      	b.n	bcae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f2a>
    bcae:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    bcb2:	f24e 7050 	movw	r0, #59216	; 0xe750
    bcb6:	f2c0 0001 	movt	r0, #1
    bcba:	6802      	ldr	r2, [r0, #0]
    bcbc:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bcc0:	f003 f94f 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bcc4:	e7ff      	b.n	bcc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f42>
    bcc6:	e7ff      	b.n	bcc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
                self.i = nnn;
    bcc8:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bccc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bcd0:	8208      	strh	r0, [r1, #16]
        match (
    bcd2:	f001 bb0d 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bcd6:	2005      	movs	r0, #5
    bcd8:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    bcdc:	f24e 0090 	movw	r0, #57488	; 0xe090
    bce0:	f2c0 0001 	movt	r0, #1
    bce4:	6801      	ldr	r1, [r0, #0]
    bce6:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bcea:	f006 ffa5 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bcee:	9081      	str	r0, [sp, #516]	; 0x204
    bcf0:	e01f      	b.n	bd32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fae>
    bcf2:	2001      	movs	r0, #1
    bcf4:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bcf8:	e015      	b.n	bd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bcfa:	2000      	movs	r0, #0
    bcfc:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bd00:	e011      	b.n	bd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bd02:	2000      	movs	r0, #0
    bd04:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    bd08:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    bd0c:	f646 2050 	movw	r0, #27216	; 0x6a50
    bd10:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd14:	f006 ff9c 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bd18:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    bd1c:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    bd20:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    bd24:	e00a      	b.n	bd3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fb8>
    bd26:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    bd2a:	07c0      	lsls	r0, r0, #31
    bd2c:	2800      	cmp	r0, #0
    bd2e:	d112      	bne.n	bd56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fd2>
    bd30:	e055      	b.n	bdde <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
    bd32:	9881      	ldr	r0, [sp, #516]	; 0x204
    bd34:	07c1      	lsls	r1, r0, #31
    bd36:	2900      	cmp	r1, #0
    bd38:	d1e3      	bne.n	bd02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f7e>
    bd3a:	e7de      	b.n	bcfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
    bd3c:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bd40:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    bd44:	f006 ff78 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bd48:	9080      	str	r0, [sp, #512]	; 0x200
    bd4a:	e7ff      	b.n	bd4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fc8>
    bd4c:	9880      	ldr	r0, [sp, #512]	; 0x200
    bd4e:	07c1      	lsls	r1, r0, #31
    bd50:	2900      	cmp	r1, #0
    bd52:	d1ce      	bne.n	bcf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f6e>
    bd54:	e7d1      	b.n	bcfa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    bd56:	f24e 60f0 	movw	r0, #59120	; 0xe6f0
    bd5a:	f2c0 0001 	movt	r0, #1
    bd5e:	6801      	ldr	r1, [r0, #0]
    bd60:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd64:	f100 0212 	add.w	r2, r0, #18
    bd68:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    bd6c:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    bd70:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    bd74:	f248 339f 	movw	r3, #33695	; 0x839f
    bd78:	f2c0 0301 	movt	r3, #1
    bd7c:	4610      	mov	r0, r2
    bd7e:	917f      	str	r1, [sp, #508]	; 0x1fc
    bd80:	4619      	mov	r1, r3
    bd82:	f006 f877 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bd86:	907e      	str	r0, [sp, #504]	; 0x1f8
    bd88:	917d      	str	r1, [sp, #500]	; 0x1f4
    bd8a:	e7ff      	b.n	bd8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2008>
    bd8c:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    bd8e:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    bd92:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    bd94:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    bd98:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    bd9c:	f2c0 0201 	movt	r2, #1
    bda0:	6812      	ldr	r2, [r2, #0]
    bda2:	466b      	mov	r3, sp
    bda4:	f04f 0c01 	mov.w	ip, #1
    bda8:	f8c3 c008 	str.w	ip, [r3, #8]
    bdac:	605a      	str	r2, [r3, #4]
    bdae:	f8c3 c000 	str.w	ip, [r3]
    bdb2:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bdb6:	2202      	movs	r2, #2
    bdb8:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    bdbc:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    bdbe:	f002 f904 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bdc2:	e7ff      	b.n	bdc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2040>
    bdc4:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    bdc8:	f24e 7010 	movw	r0, #59152	; 0xe710
    bdcc:	f2c0 0001 	movt	r0, #1
    bdd0:	6802      	ldr	r2, [r0, #0]
    bdd2:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bdd6:	f003 f8c4 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bdda:	e7ff      	b.n	bddc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2058>
    bddc:	e7ff      	b.n	bdde <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    bdde:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bde2:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bde6:	f001 ff5c 	bl	dca2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    bdea:	907c      	str	r0, [sp, #496]	; 0x1f0
    bdec:	e7ff      	b.n	bdee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x206a>
    bdee:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bdf2:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    bdf4:	f007 f808 	bl	12e08 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    bdf8:	907b      	str	r0, [sp, #492]	; 0x1ec
    bdfa:	e7ff      	b.n	bdfc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2078>
    bdfc:	2102      	movs	r1, #2
    bdfe:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    be00:	f007 f813 	bl	12e2a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    be04:	907a      	str	r0, [sp, #488]	; 0x1e8
    be06:	e7ff      	b.n	be08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2084>
    be08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be0c:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    be0e:	f001 fd5e 	bl	d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    be12:	e7ff      	b.n	be14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2090>
        match (
    be14:	f001 ba6c 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    be18:	2005      	movs	r0, #5
    be1a:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    be1e:	f24e 0090 	movw	r0, #57488	; 0xe090
    be22:	f2c0 0001 	movt	r0, #1
    be26:	6801      	ldr	r1, [r0, #0]
    be28:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    be2c:	f006 ff04 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be30:	9079      	str	r0, [sp, #484]	; 0x1e4
    be32:	e01f      	b.n	be74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20f0>
    be34:	2001      	movs	r0, #1
    be36:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    be3a:	e015      	b.n	be68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    be3c:	2000      	movs	r0, #0
    be3e:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    be42:	e011      	b.n	be68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    be44:	2000      	movs	r0, #0
    be46:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    be4a:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    be4e:	f646 2050 	movw	r0, #27216	; 0x6a50
    be52:	f2c2 0000 	movt	r0, #8192	; 0x2000
    be56:	f006 fefb 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    be5a:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    be5e:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    be62:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    be66:	e00a      	b.n	be7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20fa>
    be68:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    be6c:	07c0      	lsls	r0, r0, #31
    be6e:	2800      	cmp	r0, #0
    be70:	d112      	bne.n	be98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2114>
    be72:	e055      	b.n	bf20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
    be74:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    be76:	07c1      	lsls	r1, r0, #31
    be78:	2900      	cmp	r1, #0
    be7a:	d1e3      	bne.n	be44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20c0>
    be7c:	e7de      	b.n	be3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
    be7e:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    be82:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    be86:	f006 fed7 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be8a:	9078      	str	r0, [sp, #480]	; 0x1e0
    be8c:	e7ff      	b.n	be8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x210a>
    be8e:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    be90:	07c1      	lsls	r1, r0, #31
    be92:	2900      	cmp	r1, #0
    be94:	d1ce      	bne.n	be34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b0>
    be96:	e7d1      	b.n	be3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    be98:	f24e 60a0 	movw	r0, #59040	; 0xe6a0
    be9c:	f2c0 0001 	movt	r0, #1
    bea0:	6801      	ldr	r1, [r0, #0]
    bea2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bea6:	f100 0212 	add.w	r2, r0, #18
    beaa:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    beae:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    beb2:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    beb6:	f248 339f 	movw	r3, #33695	; 0x839f
    beba:	f2c0 0301 	movt	r3, #1
    bebe:	4610      	mov	r0, r2
    bec0:	9177      	str	r1, [sp, #476]	; 0x1dc
    bec2:	4619      	mov	r1, r3
    bec4:	f005 ffd6 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bec8:	9076      	str	r0, [sp, #472]	; 0x1d8
    beca:	9175      	str	r1, [sp, #468]	; 0x1d4
    becc:	e7ff      	b.n	bece <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x214a>
    bece:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bed0:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    bed4:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    bed6:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    beda:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    bede:	f2c0 0201 	movt	r2, #1
    bee2:	6812      	ldr	r2, [r2, #0]
    bee4:	466b      	mov	r3, sp
    bee6:	f04f 0c01 	mov.w	ip, #1
    beea:	f8c3 c008 	str.w	ip, [r3, #8]
    beee:	605a      	str	r2, [r3, #4]
    bef0:	f8c3 c000 	str.w	ip, [r3]
    bef4:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bef8:	2202      	movs	r2, #2
    befa:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    befe:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    bf00:	f002 f863 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bf04:	e7ff      	b.n	bf06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2182>
    bf06:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    bf0a:	f24e 60c0 	movw	r0, #59072	; 0xe6c0
    bf0e:	f2c0 0001 	movt	r0, #1
    bf12:	6802      	ldr	r2, [r0, #0]
    bf14:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    bf18:	f003 f823 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf1c:	e7ff      	b.n	bf1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219a>
    bf1e:	e7ff      	b.n	bf20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    bf20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf24:	f7fd fb94 	bl	9650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>
    bf28:	9074      	str	r0, [sp, #464]	; 0x1d0
    bf2a:	e7ff      	b.n	bf2c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21a8>
    bf2c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bf30:	280f      	cmp	r0, #15
    bf32:	f201 8366 	bhi.w	d602 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x387e>
    bf36:	e7ff      	b.n	bf38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21b4>
    bf38:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf3c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bf40:	1842      	adds	r2, r0, r1
    bf42:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    bf44:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    bf48:	ea03 0e0c 	and.w	lr, r3, ip
    bf4c:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    bf50:	f001 b9ce 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bf54:	2005      	movs	r0, #5
    bf56:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    bf5a:	f24e 0090 	movw	r0, #57488	; 0xe090
    bf5e:	f2c0 0001 	movt	r0, #1
    bf62:	6801      	ldr	r1, [r0, #0]
    bf64:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bf68:	f006 fe66 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bf6c:	9073      	str	r0, [sp, #460]	; 0x1cc
    bf6e:	e01f      	b.n	bfb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x222c>
    bf70:	2001      	movs	r0, #1
    bf72:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bf76:	e015      	b.n	bfa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bf78:	2000      	movs	r0, #0
    bf7a:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    bf7e:	e011      	b.n	bfa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bf80:	2000      	movs	r0, #0
    bf82:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    bf86:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    bf8a:	f646 2050 	movw	r0, #27216	; 0x6a50
    bf8e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bf92:	f006 fe5d 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bf96:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    bf9a:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    bf9e:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    bfa2:	e00a      	b.n	bfba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2236>
    bfa4:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    bfa8:	07c0      	lsls	r0, r0, #31
    bfaa:	2800      	cmp	r0, #0
    bfac:	d112      	bne.n	bfd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2250>
    bfae:	e055      	b.n	c05c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
    bfb0:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    bfb2:	07c1      	lsls	r1, r0, #31
    bfb4:	2900      	cmp	r1, #0
    bfb6:	d1e3      	bne.n	bf80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21fc>
    bfb8:	e7de      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
    bfba:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bfbe:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    bfc2:	f006 fe39 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bfc6:	9072      	str	r0, [sp, #456]	; 0x1c8
    bfc8:	e7ff      	b.n	bfca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2246>
    bfca:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    bfcc:	07c1      	lsls	r1, r0, #31
    bfce:	2900      	cmp	r1, #0
    bfd0:	d1ce      	bne.n	bf70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21ec>
    bfd2:	e7d1      	b.n	bf78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    bfd4:	f24e 5044 	movw	r0, #58692	; 0xe544
    bfd8:	f2c0 0001 	movt	r0, #1
    bfdc:	6801      	ldr	r1, [r0, #0]
    bfde:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfe2:	f100 0212 	add.w	r2, r0, #18
    bfe6:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    bfea:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    bfee:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    bff2:	f248 339f 	movw	r3, #33695	; 0x839f
    bff6:	f2c0 0301 	movt	r3, #1
    bffa:	4610      	mov	r0, r2
    bffc:	9171      	str	r1, [sp, #452]	; 0x1c4
    bffe:	4619      	mov	r1, r3
    c000:	f005 ff38 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c004:	9070      	str	r0, [sp, #448]	; 0x1c0
    c006:	916f      	str	r1, [sp, #444]	; 0x1bc
    c008:	e7ff      	b.n	c00a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2286>
    c00a:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    c00c:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    c010:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    c012:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    c016:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c01a:	f2c0 0201 	movt	r2, #1
    c01e:	6812      	ldr	r2, [r2, #0]
    c020:	466b      	mov	r3, sp
    c022:	f04f 0c01 	mov.w	ip, #1
    c026:	f8c3 c008 	str.w	ip, [r3, #8]
    c02a:	605a      	str	r2, [r3, #4]
    c02c:	f8c3 c000 	str.w	ip, [r3]
    c030:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    c034:	2202      	movs	r2, #2
    c036:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    c03a:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    c03c:	f001 ffc5 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c040:	e7ff      	b.n	c042 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22be>
    c042:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    c046:	f24e 5064 	movw	r0, #58724	; 0xe564
    c04a:	f2c0 0001 	movt	r0, #1
    c04e:	6802      	ldr	r2, [r0, #0]
    c050:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    c054:	f002 ff85 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c058:	e7ff      	b.n	c05a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d6>
    c05a:	e7ff      	b.n	c05c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
                let basex = self.v[x] as usize;
    c05c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c060:	280f      	cmp	r0, #15
    c062:	f201 825c 	bhi.w	d51e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x379a>
    c066:	e7ff      	b.n	c068 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22e4>
    c068:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c06c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c070:	1842      	adds	r2, r0, r1
    c072:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c076:	4613      	mov	r3, r2
    c078:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    c07c:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    c080:	2a0f      	cmp	r2, #15
    c082:	936e      	str	r3, [sp, #440]	; 0x1b8
    c084:	f201 8255 	bhi.w	d532 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ae>
    c088:	e7ff      	b.n	c08a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2306>
    c08a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c08e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    c092:	1842      	adds	r2, r0, r1
    c094:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c098:	4613      	mov	r3, r2
    c09a:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    c09e:	936d      	str	r3, [sp, #436]	; 0x1b4
    c0a0:	f7fd fcff 	bl	9aa2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    c0a4:	906c      	str	r0, [sp, #432]	; 0x1b0
    c0a6:	916b      	str	r1, [sp, #428]	; 0x1ac
    c0a8:	e7ff      	b.n	c0aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2326>
    c0aa:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c0ac:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    c0b0:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    c0b2:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    c0b6:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    c0b8:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    c0bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    c0c0:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    c0c4:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    c0c8:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    c0cc:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    c0d0:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    c0d4:	f002 fcd7 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    c0d8:	906a      	str	r0, [sp, #424]	; 0x1a8
    c0da:	9169      	str	r1, [sp, #420]	; 0x1a4
    c0dc:	e7ff      	b.n	c0de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x235a>
    c0de:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    c0e0:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    c0e4:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    c0e6:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    c0ea:	e7ff      	b.n	c0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
    c0ec:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    c0f0:	f002 fc3e 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c0f4:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    c0f8:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    c0fc:	e7ff      	b.n	c0fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x237a>
    c0fe:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    c102:	2800      	cmp	r0, #0
    c104:	d001      	beq.n	c10a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2386>
    c106:	e7ff      	b.n	c108 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2384>
    c108:	e002      	b.n	c110 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x238c>
        match (
    c10a:	f001 b8f1 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for y in 0..n {
    c10e:	defe      	udf	#254	; 0xfe
    c110:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    c114:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    c118:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    c11c:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    c120:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c124:	8a0a      	ldrh	r2, [r1, #16]
    c126:	1813      	adds	r3, r2, r0
    c128:	469c      	mov	ip, r3
    c12a:	4293      	cmp	r3, r2
    c12c:	9068      	str	r0, [sp, #416]	; 0x1a0
    c12e:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    c132:	f0c1 8208 	bcc.w	d546 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37c2>
    c136:	e7ff      	b.n	c138 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23b4>
    c138:	2000      	movs	r0, #0
    c13a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    c13c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    c140:	f041 820d 	bne.w	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37da>
    c144:	e7ff      	b.n	c146 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23c2>
    c146:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c14a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    c14c:	1842      	adds	r2, r0, r1
    c14e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    c152:	4613      	mov	r3, r2
    c154:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    c158:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    c15a:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    c15e:	eb02 0e0c 	add.w	lr, r2, ip
    c162:	4674      	mov	r4, lr
    c164:	4596      	cmp	lr, r2
    c166:	9366      	str	r3, [sp, #408]	; 0x198
    c168:	9465      	str	r4, [sp, #404]	; 0x194
    c16a:	f0c1 8202 	bcc.w	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ee>
    c16e:	e7ff      	b.n	c170 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23ec>
    c170:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    c172:	2800      	cmp	r0, #0
    c174:	f001 8209 	beq.w	d58a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3806>
    c178:	e7ff      	b.n	c17a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23f6>
    c17a:	9865      	ldr	r0, [sp, #404]	; 0x194
    c17c:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    c17e:	fbb0 f2f1 	udiv	r2, r0, r1
    c182:	fb02 0211 	mls	r2, r2, r1, r0
    c186:	4613      	mov	r3, r2
    c188:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    c18c:	2200      	movs	r2, #0
                    for x in 0..8 {
    c18e:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    c192:	2208      	movs	r2, #8
    c194:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    c198:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    c19c:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    c1a0:	9364      	str	r3, [sp, #400]	; 0x190
    c1a2:	f002 fc70 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    c1a6:	9063      	str	r0, [sp, #396]	; 0x18c
    c1a8:	9162      	str	r1, [sp, #392]	; 0x188
    c1aa:	e7ff      	b.n	c1ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2428>
    c1ac:	9863      	ldr	r0, [sp, #396]	; 0x18c
    c1ae:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    c1b2:	9962      	ldr	r1, [sp, #392]	; 0x188
    c1b4:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    c1b8:	e7ff      	b.n	c1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c1ba:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    c1be:	f002 fbd7 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c1c2:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    c1c6:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    c1ca:	e7ff      	b.n	c1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2448>
    c1cc:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    c1d0:	2800      	cmp	r0, #0
    c1d2:	d001      	beq.n	c1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2454>
    c1d4:	e7ff      	b.n	c1d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2452>
    c1d6:	e001      	b.n	c1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2458>
                for y in 0..n {
    c1d8:	e788      	b.n	c0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
                    for x in 0..8 {
    c1da:	defe      	udf	#254	; 0xfe
    c1dc:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    c1e0:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    c1e4:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    c1e8:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    c1ec:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    c1ee:	1842      	adds	r2, r0, r1
    c1f0:	4613      	mov	r3, r2
    c1f2:	4282      	cmp	r2, r0
    c1f4:	9061      	str	r0, [sp, #388]	; 0x184
    c1f6:	9360      	str	r3, [sp, #384]	; 0x180
    c1f8:	f0c1 81d3 	bcc.w	d5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x381e>
    c1fc:	e7ff      	b.n	c1fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x247a>
    c1fe:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c200:	2800      	cmp	r0, #0
    c202:	f001 81da 	beq.w	d5ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3836>
    c206:	e7ff      	b.n	c208 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2484>
    c208:	9860      	ldr	r0, [sp, #384]	; 0x180
    c20a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    c20c:	fbb0 f2f1 	udiv	r2, r0, r1
    c210:	fb02 0211 	mls	r2, r2, r1, r0
    c214:	4613      	mov	r3, r2
    c216:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    c21a:	9a61      	ldr	r2, [sp, #388]	; 0x184
    c21c:	f1c2 0c07 	rsb	ip, r2, #7
    c220:	f04f 0e07 	mov.w	lr, #7
    c224:	4596      	cmp	lr, r2
    c226:	935f      	str	r3, [sp, #380]	; 0x17c
    c228:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    c22c:	f0c1 81d1 	bcc.w	d5d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x384e>
    c230:	e7ff      	b.n	c232 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24ae>
    c232:	985e      	ldr	r0, [sp, #376]	; 0x178
    c234:	f000 0107 	and.w	r1, r0, #7
    c238:	2201      	movs	r2, #1
    c23a:	fa02 f101 	lsl.w	r1, r2, r1
    c23e:	08c2      	lsrs	r2, r0, #3
    c240:	2a00      	cmp	r2, #0
    c242:	915d      	str	r1, [sp, #372]	; 0x174
    c244:	f041 81d1 	bne.w	d5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3866>
    c248:	e7ff      	b.n	c24a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24c6>
    c24a:	9866      	ldr	r0, [sp, #408]	; 0x198
    c24c:	995d      	ldr	r1, [sp, #372]	; 0x174
    c24e:	ea00 0201 	and.w	r2, r0, r1
    c252:	b2d2      	uxtb	r2, r2
    c254:	2a00      	cmp	r2, #0
    c256:	bf18      	it	ne
    c258:	2201      	movne	r2, #1
    c25a:	4613      	mov	r3, r2
    c25c:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    c260:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c264:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c266:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c268:	935c      	str	r3, [sp, #368]	; 0x170
    c26a:	f7fd fb85 	bl	9978 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>
    c26e:	4601      	mov	r1, r0
    c270:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    c274:	915b      	str	r1, [sp, #364]	; 0x16c
    c276:	e7ff      	b.n	c278 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    c278:	985c      	ldr	r0, [sp, #368]	; 0x170
    c27a:	07c1      	lsls	r1, r0, #31
    c27c:	2900      	cmp	r1, #0
    c27e:	d108      	bne.n	c292 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x250e>
    c280:	e003      	b.n	c28a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c282:	2001      	movs	r0, #1
    c284:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c288:	e008      	b.n	c29c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c28a:	2000      	movs	r0, #0
    c28c:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c290:	e004      	b.n	c29c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c292:	985b      	ldr	r0, [sp, #364]	; 0x16c
    c294:	07c1      	lsls	r1, r0, #31
    c296:	2900      	cmp	r1, #0
    c298:	d1f3      	bne.n	c282 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24fe>
    c29a:	e7f6      	b.n	c28a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c29c:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    c2a0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c2a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c2a8:	4310      	orrs	r0, r2
    c2aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    c2ae:	985c      	ldr	r0, [sp, #368]	; 0x170
    c2b0:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    c2b2:	ea80 0302 	eor.w	r3, r0, r2
    c2b6:	f003 0301 	and.w	r3, r3, #1
    c2ba:	4608      	mov	r0, r1
    c2bc:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c2be:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c2c0:	f7fd f9d3 	bl	966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    c2c4:	e7ff      	b.n	c2c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2542>
                    for x in 0..8 {
    c2c6:	e778      	b.n	c1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c2c8:	2005      	movs	r0, #5
    c2ca:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    c2ce:	f24e 0090 	movw	r0, #57488	; 0xe090
    c2d2:	f2c0 0001 	movt	r0, #1
    c2d6:	6801      	ldr	r1, [r0, #0]
    c2d8:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c2dc:	f006 fcac 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c2e0:	905a      	str	r0, [sp, #360]	; 0x168
    c2e2:	e01f      	b.n	c324 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25a0>
    c2e4:	2001      	movs	r0, #1
    c2e6:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c2ea:	e015      	b.n	c318 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c2ec:	2000      	movs	r0, #0
    c2ee:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c2f2:	e011      	b.n	c318 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c2f4:	2000      	movs	r0, #0
    c2f6:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    c2fa:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    c2fe:	f646 2050 	movw	r0, #27216	; 0x6a50
    c302:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c306:	f006 fca3 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c30a:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    c30e:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    c312:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    c316:	e00a      	b.n	c32e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25aa>
    c318:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    c31c:	07c0      	lsls	r0, r0, #31
    c31e:	2800      	cmp	r0, #0
    c320:	d112      	bne.n	c348 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25c4>
    c322:	e055      	b.n	c3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
    c324:	985a      	ldr	r0, [sp, #360]	; 0x168
    c326:	07c1      	lsls	r1, r0, #31
    c328:	2900      	cmp	r1, #0
    c32a:	d1e3      	bne.n	c2f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2570>
    c32c:	e7de      	b.n	c2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
    c32e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c332:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    c336:	f006 fc7f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c33a:	9059      	str	r0, [sp, #356]	; 0x164
    c33c:	e7ff      	b.n	c33e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25ba>
    c33e:	9859      	ldr	r0, [sp, #356]	; 0x164
    c340:	07c1      	lsls	r1, r0, #31
    c342:	2900      	cmp	r1, #0
    c344:	d1ce      	bne.n	c2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2560>
    c346:	e7d1      	b.n	c2ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    c348:	f24e 40f0 	movw	r0, #58608	; 0xe4f0
    c34c:	f2c0 0001 	movt	r0, #1
    c350:	6801      	ldr	r1, [r0, #0]
    c352:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c356:	f100 0212 	add.w	r2, r0, #18
    c35a:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    c35e:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    c362:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    c366:	f248 339f 	movw	r3, #33695	; 0x839f
    c36a:	f2c0 0301 	movt	r3, #1
    c36e:	4610      	mov	r0, r2
    c370:	9158      	str	r1, [sp, #352]	; 0x160
    c372:	4619      	mov	r1, r3
    c374:	f005 fd7e 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c378:	9057      	str	r0, [sp, #348]	; 0x15c
    c37a:	9156      	str	r1, [sp, #344]	; 0x158
    c37c:	e7ff      	b.n	c37e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25fa>
    c37e:	9857      	ldr	r0, [sp, #348]	; 0x15c
    c380:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    c384:	9956      	ldr	r1, [sp, #344]	; 0x158
    c386:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    c38a:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c38e:	f2c0 0201 	movt	r2, #1
    c392:	6812      	ldr	r2, [r2, #0]
    c394:	466b      	mov	r3, sp
    c396:	f04f 0c01 	mov.w	ip, #1
    c39a:	f8c3 c008 	str.w	ip, [r3, #8]
    c39e:	605a      	str	r2, [r3, #4]
    c3a0:	f8c3 c000 	str.w	ip, [r3]
    c3a4:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c3a8:	2202      	movs	r2, #2
    c3aa:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    c3ae:	9958      	ldr	r1, [sp, #352]	; 0x160
    c3b0:	f001 fe0b 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c3b4:	e7ff      	b.n	c3b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2632>
    c3b6:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    c3ba:	f24e 5010 	movw	r0, #58640	; 0xe510
    c3be:	f2c0 0001 	movt	r0, #1
    c3c2:	6802      	ldr	r2, [r0, #0]
    c3c4:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c3c8:	f002 fdcb 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c3cc:	e7ff      	b.n	c3ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264a>
    c3ce:	e7ff      	b.n	c3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
                if self.hw.key(self.v[x]) {
    c3d0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3d4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c3d8:	290f      	cmp	r1, #15
    c3da:	9055      	str	r0, [sp, #340]	; 0x154
    c3dc:	f201 8095 	bhi.w	d50a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3786>
    c3e0:	e7ff      	b.n	c3e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x265e>
    c3e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c3ea:	1842      	adds	r2, r0, r1
    c3ec:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c3f0:	9855      	ldr	r0, [sp, #340]	; 0x154
    c3f2:	f7fd f932 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c3f6:	9054      	str	r0, [sp, #336]	; 0x150
    c3f8:	e7ff      	b.n	c3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2676>
    c3fa:	9854      	ldr	r0, [sp, #336]	; 0x150
    c3fc:	07c1      	lsls	r1, r0, #31
    c3fe:	2900      	cmp	r1, #0
    c400:	d006      	beq.n	c410 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
    c402:	e7ff      	b.n	c404 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2680>
                    self.next();
    c404:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c408:	f001 faa4 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c40c:	e7ff      	b.n	c40e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268a>
                if self.hw.key(self.v[x]) {
    c40e:	e7ff      	b.n	c410 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
        match (
    c410:	f000 bf6e 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c414:	2005      	movs	r0, #5
    c416:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    c41a:	f24e 0090 	movw	r0, #57488	; 0xe090
    c41e:	f2c0 0001 	movt	r0, #1
    c422:	6801      	ldr	r1, [r0, #0]
    c424:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c428:	f006 fc06 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c42c:	9053      	str	r0, [sp, #332]	; 0x14c
    c42e:	e01f      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ec>
    c430:	2001      	movs	r0, #1
    c432:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c436:	e015      	b.n	c464 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c438:	2000      	movs	r0, #0
    c43a:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c43e:	e011      	b.n	c464 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c440:	2000      	movs	r0, #0
    c442:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    c446:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    c44a:	f646 2050 	movw	r0, #27216	; 0x6a50
    c44e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c452:	f006 fbfd 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c456:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    c45a:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    c45e:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    c462:	e00a      	b.n	c47a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26f6>
    c464:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    c468:	07c0      	lsls	r0, r0, #31
    c46a:	2800      	cmp	r0, #0
    c46c:	d112      	bne.n	c494 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2710>
    c46e:	e055      	b.n	c51c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
    c470:	9853      	ldr	r0, [sp, #332]	; 0x14c
    c472:	07c1      	lsls	r1, r0, #31
    c474:	2900      	cmp	r1, #0
    c476:	d1e3      	bne.n	c440 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26bc>
    c478:	e7de      	b.n	c438 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
    c47a:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c47e:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    c482:	f006 fbd9 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c486:	9052      	str	r0, [sp, #328]	; 0x148
    c488:	e7ff      	b.n	c48a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2706>
    c48a:	9852      	ldr	r0, [sp, #328]	; 0x148
    c48c:	07c1      	lsls	r1, r0, #31
    c48e:	2900      	cmp	r1, #0
    c490:	d1ce      	bne.n	c430 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ac>
    c492:	e7d1      	b.n	c438 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    c494:	f24e 40ac 	movw	r0, #58540	; 0xe4ac
    c498:	f2c0 0001 	movt	r0, #1
    c49c:	6801      	ldr	r1, [r0, #0]
    c49e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c4a2:	f100 0212 	add.w	r2, r0, #18
    c4a6:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    c4aa:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    c4ae:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    c4b2:	f248 339f 	movw	r3, #33695	; 0x839f
    c4b6:	f2c0 0301 	movt	r3, #1
    c4ba:	4610      	mov	r0, r2
    c4bc:	9151      	str	r1, [sp, #324]	; 0x144
    c4be:	4619      	mov	r1, r3
    c4c0:	f005 fcd8 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c4c4:	9050      	str	r0, [sp, #320]	; 0x140
    c4c6:	914f      	str	r1, [sp, #316]	; 0x13c
    c4c8:	e7ff      	b.n	c4ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2746>
    c4ca:	9850      	ldr	r0, [sp, #320]	; 0x140
    c4cc:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    c4d0:	994f      	ldr	r1, [sp, #316]	; 0x13c
    c4d2:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    c4d6:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c4da:	f2c0 0201 	movt	r2, #1
    c4de:	6812      	ldr	r2, [r2, #0]
    c4e0:	466b      	mov	r3, sp
    c4e2:	f04f 0c01 	mov.w	ip, #1
    c4e6:	f8c3 c008 	str.w	ip, [r3, #8]
    c4ea:	605a      	str	r2, [r3, #4]
    c4ec:	f8c3 c000 	str.w	ip, [r3]
    c4f0:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c4f4:	2202      	movs	r2, #2
    c4f6:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    c4fa:	9951      	ldr	r1, [sp, #324]	; 0x144
    c4fc:	f001 fd65 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c500:	e7ff      	b.n	c502 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x277e>
    c502:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    c506:	f24e 40cc 	movw	r0, #58572	; 0xe4cc
    c50a:	f2c0 0001 	movt	r0, #1
    c50e:	6802      	ldr	r2, [r0, #0]
    c510:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c514:	f002 fd25 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c518:	e7ff      	b.n	c51a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2796>
    c51a:	e7ff      	b.n	c51c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
                if !self.hw.key(self.v[x]) {
    c51c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c520:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c524:	290f      	cmp	r1, #15
    c526:	904e      	str	r0, [sp, #312]	; 0x138
    c528:	f200 87e5 	bhi.w	d4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3772>
    c52c:	e7ff      	b.n	c52e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27aa>
    c52e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c532:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c536:	1842      	adds	r2, r0, r1
    c538:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c53c:	984e      	ldr	r0, [sp, #312]	; 0x138
    c53e:	f7fd f88c 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c542:	904d      	str	r0, [sp, #308]	; 0x134
    c544:	e7ff      	b.n	c546 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27c2>
    c546:	984d      	ldr	r0, [sp, #308]	; 0x134
    c548:	07c1      	lsls	r1, r0, #31
    c54a:	2900      	cmp	r1, #0
    c54c:	d106      	bne.n	c55c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
    c54e:	e7ff      	b.n	c550 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27cc>
                    self.next();
    c550:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c554:	f001 f9fe 	bl	d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c558:	e7ff      	b.n	c55a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d6>
                if !self.hw.key(self.v[x]) {
    c55a:	e7ff      	b.n	c55c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
        match (
    c55c:	f000 bec8 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c560:	2005      	movs	r0, #5
    c562:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    c566:	f24e 0090 	movw	r0, #57488	; 0xe090
    c56a:	f2c0 0001 	movt	r0, #1
    c56e:	6801      	ldr	r1, [r0, #0]
    c570:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c574:	f006 fb60 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c578:	904c      	str	r0, [sp, #304]	; 0x130
    c57a:	e01f      	b.n	c5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2838>
    c57c:	2001      	movs	r0, #1
    c57e:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c582:	e015      	b.n	c5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c584:	2000      	movs	r0, #0
    c586:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c58a:	e011      	b.n	c5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c58c:	2000      	movs	r0, #0
    c58e:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    c592:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    c596:	f646 2050 	movw	r0, #27216	; 0x6a50
    c59a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c59e:	f006 fb57 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c5a2:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    c5a6:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    c5aa:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    c5ae:	e00a      	b.n	c5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2842>
    c5b0:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    c5b4:	07c0      	lsls	r0, r0, #31
    c5b6:	2800      	cmp	r0, #0
    c5b8:	d112      	bne.n	c5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x285c>
    c5ba:	e055      	b.n	c668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
    c5bc:	984c      	ldr	r0, [sp, #304]	; 0x130
    c5be:	07c1      	lsls	r1, r0, #31
    c5c0:	2900      	cmp	r1, #0
    c5c2:	d1e3      	bne.n	c58c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2808>
    c5c4:	e7de      	b.n	c584 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
    c5c6:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c5ca:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    c5ce:	f006 fb33 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c5d2:	904b      	str	r0, [sp, #300]	; 0x12c
    c5d4:	e7ff      	b.n	c5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2852>
    c5d6:	984b      	ldr	r0, [sp, #300]	; 0x12c
    c5d8:	07c1      	lsls	r1, r0, #31
    c5da:	2900      	cmp	r1, #0
    c5dc:	d1ce      	bne.n	c57c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27f8>
    c5de:	e7d1      	b.n	c584 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    c5e0:	f24e 405c 	movw	r0, #58460	; 0xe45c
    c5e4:	f2c0 0001 	movt	r0, #1
    c5e8:	6801      	ldr	r1, [r0, #0]
    c5ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5ee:	f100 0212 	add.w	r2, r0, #18
    c5f2:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    c5f6:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    c5fa:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    c5fe:	f248 339f 	movw	r3, #33695	; 0x839f
    c602:	f2c0 0301 	movt	r3, #1
    c606:	4610      	mov	r0, r2
    c608:	914a      	str	r1, [sp, #296]	; 0x128
    c60a:	4619      	mov	r1, r3
    c60c:	f005 fc32 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c610:	9049      	str	r0, [sp, #292]	; 0x124
    c612:	9148      	str	r1, [sp, #288]	; 0x120
    c614:	e7ff      	b.n	c616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2892>
    c616:	9849      	ldr	r0, [sp, #292]	; 0x124
    c618:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    c61c:	9948      	ldr	r1, [sp, #288]	; 0x120
    c61e:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    c622:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c626:	f2c0 0201 	movt	r2, #1
    c62a:	6812      	ldr	r2, [r2, #0]
    c62c:	466b      	mov	r3, sp
    c62e:	f04f 0c01 	mov.w	ip, #1
    c632:	f8c3 c008 	str.w	ip, [r3, #8]
    c636:	605a      	str	r2, [r3, #4]
    c638:	f8c3 c000 	str.w	ip, [r3]
    c63c:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c640:	2202      	movs	r2, #2
    c642:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    c646:	994a      	ldr	r1, [sp, #296]	; 0x128
    c648:	f001 fcbf 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c64c:	e7ff      	b.n	c64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28ca>
    c64e:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    c652:	f24e 407c 	movw	r0, #58492	; 0xe47c
    c656:	f2c0 0001 	movt	r0, #1
    c65a:	6802      	ldr	r2, [r0, #0]
    c65c:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c660:	f002 fc7f 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c664:	e7ff      	b.n	c666 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e2>
    c666:	e7ff      	b.n	c668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
                self.v[x] = self.dt;
    c668:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c66c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    c670:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c674:	2a0f      	cmp	r2, #15
    c676:	9147      	str	r1, [sp, #284]	; 0x11c
    c678:	f200 8733 	bhi.w	d4e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x375e>
    c67c:	e7ff      	b.n	c67e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28fa>
    c67e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c682:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c686:	1842      	adds	r2, r0, r1
    c688:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c68a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c68e:	f000 be2f 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c692:	2005      	movs	r0, #5
    c694:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    c698:	f24e 0090 	movw	r0, #57488	; 0xe090
    c69c:	f2c0 0001 	movt	r0, #1
    c6a0:	6801      	ldr	r1, [r0, #0]
    c6a2:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c6a6:	f006 fac7 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c6aa:	9046      	str	r0, [sp, #280]	; 0x118
    c6ac:	e01f      	b.n	c6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x296a>
    c6ae:	2001      	movs	r0, #1
    c6b0:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c6b4:	e015      	b.n	c6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c6b6:	2000      	movs	r0, #0
    c6b8:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c6bc:	e011      	b.n	c6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c6be:	2000      	movs	r0, #0
    c6c0:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    c6c4:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    c6c8:	f646 2050 	movw	r0, #27216	; 0x6a50
    c6cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c6d0:	f006 fabe 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c6d4:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    c6d8:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    c6dc:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    c6e0:	e00a      	b.n	c6f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2974>
    c6e2:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    c6e6:	07c0      	lsls	r0, r0, #31
    c6e8:	2800      	cmp	r0, #0
    c6ea:	d112      	bne.n	c712 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x298e>
    c6ec:	e055      	b.n	c79a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
    c6ee:	9846      	ldr	r0, [sp, #280]	; 0x118
    c6f0:	07c1      	lsls	r1, r0, #31
    c6f2:	2900      	cmp	r1, #0
    c6f4:	d1e3      	bne.n	c6be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x293a>
    c6f6:	e7de      	b.n	c6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
    c6f8:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c6fc:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    c700:	f006 fa9a 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c704:	9045      	str	r0, [sp, #276]	; 0x114
    c706:	e7ff      	b.n	c708 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2984>
    c708:	9845      	ldr	r0, [sp, #276]	; 0x114
    c70a:	07c1      	lsls	r1, r0, #31
    c70c:	2900      	cmp	r1, #0
    c70e:	d1ce      	bne.n	c6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x292a>
    c710:	e7d1      	b.n	c6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    c712:	f24e 400c 	movw	r0, #58380	; 0xe40c
    c716:	f2c0 0001 	movt	r0, #1
    c71a:	6801      	ldr	r1, [r0, #0]
    c71c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c720:	f100 0212 	add.w	r2, r0, #18
    c724:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    c728:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    c72c:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    c730:	f248 339f 	movw	r3, #33695	; 0x839f
    c734:	f2c0 0301 	movt	r3, #1
    c738:	4610      	mov	r0, r2
    c73a:	9144      	str	r1, [sp, #272]	; 0x110
    c73c:	4619      	mov	r1, r3
    c73e:	f005 fb99 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c742:	9043      	str	r0, [sp, #268]	; 0x10c
    c744:	9142      	str	r1, [sp, #264]	; 0x108
    c746:	e7ff      	b.n	c748 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29c4>
    c748:	9843      	ldr	r0, [sp, #268]	; 0x10c
    c74a:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    c74e:	9942      	ldr	r1, [sp, #264]	; 0x108
    c750:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    c754:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c758:	f2c0 0201 	movt	r2, #1
    c75c:	6812      	ldr	r2, [r2, #0]
    c75e:	466b      	mov	r3, sp
    c760:	f04f 0c01 	mov.w	ip, #1
    c764:	f8c3 c008 	str.w	ip, [r3, #8]
    c768:	605a      	str	r2, [r3, #4]
    c76a:	f8c3 c000 	str.w	ip, [r3]
    c76e:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c772:	2202      	movs	r2, #2
    c774:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    c778:	9944      	ldr	r1, [sp, #272]	; 0x110
    c77a:	f001 fc26 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c77e:	e7ff      	b.n	c780 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29fc>
    c780:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    c784:	f24e 402c 	movw	r0, #58412	; 0xe42c
    c788:	f2c0 0001 	movt	r0, #1
    c78c:	6802      	ldr	r2, [r0, #0]
    c78e:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c792:	f002 fbe6 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c796:	e7ff      	b.n	c798 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a14>
    c798:	e7ff      	b.n	c79a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
                self.v[x] = self.waitkey();
    c79a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c79e:	f001 fa1b 	bl	dbd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>
    c7a2:	9041      	str	r0, [sp, #260]	; 0x104
    c7a4:	e7ff      	b.n	c7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a22>
    c7a6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7aa:	280f      	cmp	r0, #15
    c7ac:	f200 868f 	bhi.w	d4ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x374a>
    c7b0:	e7ff      	b.n	c7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a2e>
    c7b2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7b6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c7ba:	1842      	adds	r2, r0, r1
    c7bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c7be:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c7c2:	f000 bd95 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c7c6:	2005      	movs	r0, #5
    c7c8:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    c7cc:	f24e 0090 	movw	r0, #57488	; 0xe090
    c7d0:	f2c0 0001 	movt	r0, #1
    c7d4:	6801      	ldr	r1, [r0, #0]
    c7d6:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c7da:	f006 fa2d 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c7de:	9040      	str	r0, [sp, #256]	; 0x100
    c7e0:	e01f      	b.n	c822 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a9e>
    c7e2:	2001      	movs	r0, #1
    c7e4:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c7e8:	e015      	b.n	c816 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c7ea:	2000      	movs	r0, #0
    c7ec:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c7f0:	e011      	b.n	c816 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c7f2:	2000      	movs	r0, #0
    c7f4:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    c7f8:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    c7fc:	f646 2050 	movw	r0, #27216	; 0x6a50
    c800:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c804:	f006 fa24 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c808:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    c80c:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    c810:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    c814:	e00a      	b.n	c82c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2aa8>
    c816:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    c81a:	07c0      	lsls	r0, r0, #31
    c81c:	2800      	cmp	r0, #0
    c81e:	d112      	bne.n	c846 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ac2>
    c820:	e055      	b.n	c8ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
    c822:	9840      	ldr	r0, [sp, #256]	; 0x100
    c824:	07c1      	lsls	r1, r0, #31
    c826:	2900      	cmp	r1, #0
    c828:	d1e3      	bne.n	c7f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6e>
    c82a:	e7de      	b.n	c7ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
    c82c:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c830:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    c834:	f006 fa00 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c838:	903f      	str	r0, [sp, #252]	; 0xfc
    c83a:	e7ff      	b.n	c83c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ab8>
    c83c:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c83e:	07c1      	lsls	r1, r0, #31
    c840:	2900      	cmp	r1, #0
    c842:	d1ce      	bne.n	c7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a5e>
    c844:	e7d1      	b.n	c7ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    c846:	f24e 30bc 	movw	r0, #58300	; 0xe3bc
    c84a:	f2c0 0001 	movt	r0, #1
    c84e:	6801      	ldr	r1, [r0, #0]
    c850:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c854:	f100 0212 	add.w	r2, r0, #18
    c858:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    c85c:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    c860:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    c864:	f248 339f 	movw	r3, #33695	; 0x839f
    c868:	f2c0 0301 	movt	r3, #1
    c86c:	4610      	mov	r0, r2
    c86e:	913e      	str	r1, [sp, #248]	; 0xf8
    c870:	4619      	mov	r1, r3
    c872:	f005 faff 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c876:	903d      	str	r0, [sp, #244]	; 0xf4
    c878:	913c      	str	r1, [sp, #240]	; 0xf0
    c87a:	e7ff      	b.n	c87c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2af8>
    c87c:	983d      	ldr	r0, [sp, #244]	; 0xf4
    c87e:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    c882:	993c      	ldr	r1, [sp, #240]	; 0xf0
    c884:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    c888:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c88c:	f2c0 0201 	movt	r2, #1
    c890:	6812      	ldr	r2, [r2, #0]
    c892:	466b      	mov	r3, sp
    c894:	f04f 0c01 	mov.w	ip, #1
    c898:	f8c3 c008 	str.w	ip, [r3, #8]
    c89c:	605a      	str	r2, [r3, #4]
    c89e:	f8c3 c000 	str.w	ip, [r3]
    c8a2:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c8a6:	2202      	movs	r2, #2
    c8a8:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    c8ac:	993e      	ldr	r1, [sp, #248]	; 0xf8
    c8ae:	f001 fb8c 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c8b2:	e7ff      	b.n	c8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b30>
    c8b4:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    c8b8:	f24e 30dc 	movw	r0, #58332	; 0xe3dc
    c8bc:	f2c0 0001 	movt	r0, #1
    c8c0:	6802      	ldr	r2, [r0, #0]
    c8c2:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c8c6:	f002 fb4c 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c8ca:	e7ff      	b.n	c8cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b48>
    c8cc:	e7ff      	b.n	c8ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
                self.dt = self.v[x];
    c8ce:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c8d2:	280f      	cmp	r0, #15
    c8d4:	f200 85f1 	bhi.w	d4ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3736>
    c8d8:	e7ff      	b.n	c8da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b56>
    c8da:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c8de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c8e2:	1842      	adds	r2, r0, r1
    c8e4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c8e8:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    c8ec:	f000 bd00 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c8f0:	2005      	movs	r0, #5
    c8f2:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    c8f6:	f24e 0090 	movw	r0, #57488	; 0xe090
    c8fa:	f2c0 0001 	movt	r0, #1
    c8fe:	6801      	ldr	r1, [r0, #0]
    c900:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c904:	f006 f998 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c908:	903b      	str	r0, [sp, #236]	; 0xec
    c90a:	e01f      	b.n	c94c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bc8>
    c90c:	2001      	movs	r0, #1
    c90e:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c912:	e015      	b.n	c940 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c914:	2000      	movs	r0, #0
    c916:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c91a:	e011      	b.n	c940 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c91c:	2000      	movs	r0, #0
    c91e:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    c922:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    c926:	f646 2050 	movw	r0, #27216	; 0x6a50
    c92a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c92e:	f006 f98f 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c932:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    c936:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    c93a:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    c93e:	e00a      	b.n	c956 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bd2>
    c940:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    c944:	07c0      	lsls	r0, r0, #31
    c946:	2800      	cmp	r0, #0
    c948:	d112      	bne.n	c970 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bec>
    c94a:	e055      	b.n	c9f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
    c94c:	983b      	ldr	r0, [sp, #236]	; 0xec
    c94e:	07c1      	lsls	r1, r0, #31
    c950:	2900      	cmp	r1, #0
    c952:	d1e3      	bne.n	c91c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b98>
    c954:	e7de      	b.n	c914 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
    c956:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c95a:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    c95e:	f006 f96b 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c962:	903a      	str	r0, [sp, #232]	; 0xe8
    c964:	e7ff      	b.n	c966 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2be2>
    c966:	983a      	ldr	r0, [sp, #232]	; 0xe8
    c968:	07c1      	lsls	r1, r0, #31
    c96a:	2900      	cmp	r1, #0
    c96c:	d1ce      	bne.n	c90c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b88>
    c96e:	e7d1      	b.n	c914 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    c970:	f24e 306c 	movw	r0, #58220	; 0xe36c
    c974:	f2c0 0001 	movt	r0, #1
    c978:	6801      	ldr	r1, [r0, #0]
    c97a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c97e:	f100 0212 	add.w	r2, r0, #18
    c982:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    c986:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    c98a:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    c98e:	f248 339f 	movw	r3, #33695	; 0x839f
    c992:	f2c0 0301 	movt	r3, #1
    c996:	4610      	mov	r0, r2
    c998:	9139      	str	r1, [sp, #228]	; 0xe4
    c99a:	4619      	mov	r1, r3
    c99c:	f005 fa6a 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c9a0:	9038      	str	r0, [sp, #224]	; 0xe0
    c9a2:	9137      	str	r1, [sp, #220]	; 0xdc
    c9a4:	e7ff      	b.n	c9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c22>
    c9a6:	9838      	ldr	r0, [sp, #224]	; 0xe0
    c9a8:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    c9ac:	9937      	ldr	r1, [sp, #220]	; 0xdc
    c9ae:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    c9b2:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    c9b6:	f2c0 0201 	movt	r2, #1
    c9ba:	6812      	ldr	r2, [r2, #0]
    c9bc:	466b      	mov	r3, sp
    c9be:	f04f 0c01 	mov.w	ip, #1
    c9c2:	f8c3 c008 	str.w	ip, [r3, #8]
    c9c6:	605a      	str	r2, [r3, #4]
    c9c8:	f8c3 c000 	str.w	ip, [r3]
    c9cc:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c9d0:	2202      	movs	r2, #2
    c9d2:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    c9d6:	9939      	ldr	r1, [sp, #228]	; 0xe4
    c9d8:	f001 faf7 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c9dc:	e7ff      	b.n	c9de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c5a>
    c9de:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    c9e2:	f24e 308c 	movw	r0, #58252	; 0xe38c
    c9e6:	f2c0 0001 	movt	r0, #1
    c9ea:	6802      	ldr	r2, [r0, #0]
    c9ec:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c9f0:	f002 fab7 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c9f4:	e7ff      	b.n	c9f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c72>
    c9f6:	e7ff      	b.n	c9f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
                self.st = self.v[x];
    c9f8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c9fc:	280f      	cmp	r0, #15
    c9fe:	f200 8552 	bhi.w	d4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3722>
    ca02:	e7ff      	b.n	ca04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c80>
    ca04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca08:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ca0c:	1842      	adds	r2, r0, r1
    ca0e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ca12:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    ca16:	f000 bc6b 	b.w	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ca1a:	2005      	movs	r0, #5
    ca1c:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    ca20:	f24e 0090 	movw	r0, #57488	; 0xe090
    ca24:	f2c0 0001 	movt	r0, #1
    ca28:	6801      	ldr	r1, [r0, #0]
    ca2a:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ca2e:	f006 f903 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca32:	9036      	str	r0, [sp, #216]	; 0xd8
    ca34:	e01f      	b.n	ca76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cf2>
    ca36:	2001      	movs	r0, #1
    ca38:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ca3c:	e015      	b.n	ca6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    ca3e:	2000      	movs	r0, #0
    ca40:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    ca44:	e011      	b.n	ca6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    ca46:	2000      	movs	r0, #0
    ca48:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    ca4c:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    ca50:	f646 2050 	movw	r0, #27216	; 0x6a50
    ca54:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ca58:	f006 f8fa 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ca5c:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    ca60:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    ca64:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    ca68:	e00a      	b.n	ca80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cfc>
    ca6a:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    ca6e:	07c0      	lsls	r0, r0, #31
    ca70:	2800      	cmp	r0, #0
    ca72:	d112      	bne.n	ca9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d16>
    ca74:	e055      	b.n	cb22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
    ca76:	9836      	ldr	r0, [sp, #216]	; 0xd8
    ca78:	07c1      	lsls	r1, r0, #31
    ca7a:	2900      	cmp	r1, #0
    ca7c:	d1e3      	bne.n	ca46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cc2>
    ca7e:	e7de      	b.n	ca3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
    ca80:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    ca84:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    ca88:	f006 f8d6 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca8c:	9035      	str	r0, [sp, #212]	; 0xd4
    ca8e:	e7ff      	b.n	ca90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d0c>
    ca90:	9835      	ldr	r0, [sp, #212]	; 0xd4
    ca92:	07c1      	lsls	r1, r0, #31
    ca94:	2900      	cmp	r1, #0
    ca96:	d1ce      	bne.n	ca36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cb2>
    ca98:	e7d1      	b.n	ca3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    ca9a:	f24e 301c 	movw	r0, #58140	; 0xe31c
    ca9e:	f2c0 0001 	movt	r0, #1
    caa2:	6801      	ldr	r1, [r0, #0]
    caa4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    caa8:	f100 0212 	add.w	r2, r0, #18
    caac:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    cab0:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    cab4:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    cab8:	f248 339f 	movw	r3, #33695	; 0x839f
    cabc:	f2c0 0301 	movt	r3, #1
    cac0:	4610      	mov	r0, r2
    cac2:	9134      	str	r1, [sp, #208]	; 0xd0
    cac4:	4619      	mov	r1, r3
    cac6:	f005 f9d5 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    caca:	9033      	str	r0, [sp, #204]	; 0xcc
    cacc:	9132      	str	r1, [sp, #200]	; 0xc8
    cace:	e7ff      	b.n	cad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d4c>
    cad0:	9833      	ldr	r0, [sp, #204]	; 0xcc
    cad2:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    cad6:	9932      	ldr	r1, [sp, #200]	; 0xc8
    cad8:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    cadc:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    cae0:	f2c0 0201 	movt	r2, #1
    cae4:	6812      	ldr	r2, [r2, #0]
    cae6:	466b      	mov	r3, sp
    cae8:	f04f 0c01 	mov.w	ip, #1
    caec:	f8c3 c008 	str.w	ip, [r3, #8]
    caf0:	605a      	str	r2, [r3, #4]
    caf2:	f8c3 c000 	str.w	ip, [r3]
    caf6:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    cafa:	2202      	movs	r2, #2
    cafc:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    cb00:	9934      	ldr	r1, [sp, #208]	; 0xd0
    cb02:	f001 fa62 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cb06:	e7ff      	b.n	cb08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d84>
    cb08:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    cb0c:	f24e 303c 	movw	r0, #58172	; 0xe33c
    cb10:	f2c0 0001 	movt	r0, #1
    cb14:	6802      	ldr	r2, [r0, #0]
    cb16:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    cb1a:	f002 fa22 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cb1e:	e7ff      	b.n	cb20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9c>
    cb20:	e7ff      	b.n	cb22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    cb22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb26:	8a01      	ldrh	r1, [r0, #16]
    cb28:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    cb2c:	2a0f      	cmp	r2, #15
    cb2e:	9131      	str	r1, [sp, #196]	; 0xc4
    cb30:	f200 84af 	bhi.w	d492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x370e>
    cb34:	e7ff      	b.n	cb36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2db2>
    cb36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb3a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb3e:	1842      	adds	r2, r0, r1
    cb40:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    cb44:	f001 f8ad 	bl	dca2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    cb48:	9030      	str	r0, [sp, #192]	; 0xc0
    cb4a:	e7ff      	b.n	cb4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dc8>
    cb4c:	9831      	ldr	r0, [sp, #196]	; 0xc4
    cb4e:	9930      	ldr	r1, [sp, #192]	; 0xc0
    cb50:	f006 f95a 	bl	12e08 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    cb54:	902f      	str	r0, [sp, #188]	; 0xbc
    cb56:	e7ff      	b.n	cb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dd4>
    cb58:	982f      	ldr	r0, [sp, #188]	; 0xbc
    cb5a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cb5e:	8208      	strh	r0, [r1, #16]
        match (
    cb60:	e3c6      	b.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cb62:	2005      	movs	r0, #5
    cb64:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    cb68:	f24e 0090 	movw	r0, #57488	; 0xe090
    cb6c:	f2c0 0001 	movt	r0, #1
    cb70:	6801      	ldr	r1, [r0, #0]
    cb72:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    cb76:	f006 f85f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cb7a:	902e      	str	r0, [sp, #184]	; 0xb8
    cb7c:	e01f      	b.n	cbbe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e3a>
    cb7e:	2001      	movs	r0, #1
    cb80:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    cb84:	e015      	b.n	cbb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    cb86:	2000      	movs	r0, #0
    cb88:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    cb8c:	e011      	b.n	cbb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    cb8e:	2000      	movs	r0, #0
    cb90:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    cb94:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    cb98:	f646 2050 	movw	r0, #27216	; 0x6a50
    cb9c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cba0:	f006 f856 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cba4:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    cba8:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    cbac:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    cbb0:	e00a      	b.n	cbc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e44>
    cbb2:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    cbb6:	07c0      	lsls	r0, r0, #31
    cbb8:	2800      	cmp	r0, #0
    cbba:	d112      	bne.n	cbe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e5e>
    cbbc:	e055      	b.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
    cbbe:	982e      	ldr	r0, [sp, #184]	; 0xb8
    cbc0:	07c1      	lsls	r1, r0, #31
    cbc2:	2900      	cmp	r1, #0
    cbc4:	d1e3      	bne.n	cb8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e0a>
    cbc6:	e7de      	b.n	cb86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
    cbc8:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    cbcc:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    cbd0:	f006 f832 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cbd4:	902d      	str	r0, [sp, #180]	; 0xb4
    cbd6:	e7ff      	b.n	cbd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e54>
    cbd8:	982d      	ldr	r0, [sp, #180]	; 0xb4
    cbda:	07c1      	lsls	r1, r0, #31
    cbdc:	2900      	cmp	r1, #0
    cbde:	d1ce      	bne.n	cb7e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dfa>
    cbe0:	e7d1      	b.n	cb86 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    cbe2:	f24e 2098 	movw	r0, #58008	; 0xe298
    cbe6:	f2c0 0001 	movt	r0, #1
    cbea:	6801      	ldr	r1, [r0, #0]
    cbec:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cbf0:	f100 0212 	add.w	r2, r0, #18
    cbf4:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    cbf8:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    cbfc:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    cc00:	f248 339f 	movw	r3, #33695	; 0x839f
    cc04:	f2c0 0301 	movt	r3, #1
    cc08:	4610      	mov	r0, r2
    cc0a:	912c      	str	r1, [sp, #176]	; 0xb0
    cc0c:	4619      	mov	r1, r3
    cc0e:	f005 f931 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cc12:	902b      	str	r0, [sp, #172]	; 0xac
    cc14:	912a      	str	r1, [sp, #168]	; 0xa8
    cc16:	e7ff      	b.n	cc18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e94>
    cc18:	982b      	ldr	r0, [sp, #172]	; 0xac
    cc1a:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    cc1e:	992a      	ldr	r1, [sp, #168]	; 0xa8
    cc20:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    cc24:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    cc28:	f2c0 0201 	movt	r2, #1
    cc2c:	6812      	ldr	r2, [r2, #0]
    cc2e:	466b      	mov	r3, sp
    cc30:	f04f 0c01 	mov.w	ip, #1
    cc34:	f8c3 c008 	str.w	ip, [r3, #8]
    cc38:	605a      	str	r2, [r3, #4]
    cc3a:	f8c3 c000 	str.w	ip, [r3]
    cc3e:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cc42:	2202      	movs	r2, #2
    cc44:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    cc48:	992c      	ldr	r1, [sp, #176]	; 0xb0
    cc4a:	f001 f9be 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cc4e:	e7ff      	b.n	cc50 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ecc>
    cc50:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    cc54:	f24e 20b8 	movw	r0, #58040	; 0xe2b8
    cc58:	f2c0 0001 	movt	r0, #1
    cc5c:	6802      	ldr	r2, [r0, #0]
    cc5e:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cc62:	f002 f97e 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cc66:	e7ff      	b.n	cc68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee4>
    cc68:	e7ff      	b.n	cc6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    cc6a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cc6e:	280f      	cmp	r0, #15
    cc70:	f200 83f9 	bhi.w	d466 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36e2>
    cc74:	e7ff      	b.n	cc76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ef2>
    cc76:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc7a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cc7e:	1842      	adds	r2, r0, r1
    cc80:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cc84:	2305      	movs	r3, #5
    cc86:	fba2 2303 	umull	r2, r3, r2, r3
    cc8a:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    cc8e:	f04f 0e00 	mov.w	lr, #0
    cc92:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    cc96:	bf18      	it	ne
    cc98:	f04f 0c01 	movne.w	ip, #1
    cc9c:	2b00      	cmp	r3, #0
    cc9e:	bf18      	it	ne
    cca0:	2301      	movne	r3, #1
    cca2:	ea43 030c 	orr.w	r3, r3, ip
    cca6:	2b00      	cmp	r3, #0
    cca8:	9229      	str	r2, [sp, #164]	; 0xa4
    ccaa:	f040 83e6 	bne.w	d47a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36f6>
    ccae:	e7ff      	b.n	ccb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f2c>
    ccb0:	9829      	ldr	r0, [sp, #164]	; 0xa4
    ccb2:	f000 fff6 	bl	dca2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    ccb6:	9028      	str	r0, [sp, #160]	; 0xa0
    ccb8:	e7ff      	b.n	ccba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f36>
    ccba:	9828      	ldr	r0, [sp, #160]	; 0xa0
    ccbc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ccc0:	8208      	strh	r0, [r1, #16]
        match (
    ccc2:	e315      	b.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ccc4:	2005      	movs	r0, #5
    ccc6:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    ccca:	f24e 0090 	movw	r0, #57488	; 0xe090
    ccce:	f2c0 0001 	movt	r0, #1
    ccd2:	6801      	ldr	r1, [r0, #0]
    ccd4:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    ccd8:	f005 ffae 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ccdc:	9027      	str	r0, [sp, #156]	; 0x9c
    ccde:	e01f      	b.n	cd20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f9c>
    cce0:	2001      	movs	r0, #1
    cce2:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cce6:	e015      	b.n	cd14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cce8:	2000      	movs	r0, #0
    ccea:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    ccee:	e011      	b.n	cd14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    ccf0:	2000      	movs	r0, #0
    ccf2:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    ccf6:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    ccfa:	f646 2050 	movw	r0, #27216	; 0x6a50
    ccfe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cd02:	f005 ffa5 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cd06:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    cd0a:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    cd0e:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    cd12:	e00a      	b.n	cd2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fa6>
    cd14:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    cd18:	07c0      	lsls	r0, r0, #31
    cd1a:	2800      	cmp	r0, #0
    cd1c:	d112      	bne.n	cd44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fc0>
    cd1e:	e055      	b.n	cdcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
    cd20:	9827      	ldr	r0, [sp, #156]	; 0x9c
    cd22:	07c1      	lsls	r1, r0, #31
    cd24:	2900      	cmp	r1, #0
    cd26:	d1e3      	bne.n	ccf0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f6c>
    cd28:	e7de      	b.n	cce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
    cd2a:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cd2e:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    cd32:	f005 ff81 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cd36:	9026      	str	r0, [sp, #152]	; 0x98
    cd38:	e7ff      	b.n	cd3a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fb6>
    cd3a:	9826      	ldr	r0, [sp, #152]	; 0x98
    cd3c:	07c1      	lsls	r1, r0, #31
    cd3e:	2900      	cmp	r1, #0
    cd40:	d1ce      	bne.n	cce0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f5c>
    cd42:	e7d1      	b.n	cce8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    cd44:	f24e 10f8 	movw	r0, #57848	; 0xe1f8
    cd48:	f2c0 0001 	movt	r0, #1
    cd4c:	6801      	ldr	r1, [r0, #0]
    cd4e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd52:	f100 0212 	add.w	r2, r0, #18
    cd56:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    cd5a:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    cd5e:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    cd62:	f248 339f 	movw	r3, #33695	; 0x839f
    cd66:	f2c0 0301 	movt	r3, #1
    cd6a:	4610      	mov	r0, r2
    cd6c:	9125      	str	r1, [sp, #148]	; 0x94
    cd6e:	4619      	mov	r1, r3
    cd70:	f005 f880 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cd74:	9024      	str	r0, [sp, #144]	; 0x90
    cd76:	9123      	str	r1, [sp, #140]	; 0x8c
    cd78:	e7ff      	b.n	cd7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ff6>
    cd7a:	9824      	ldr	r0, [sp, #144]	; 0x90
    cd7c:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    cd80:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cd82:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    cd86:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    cd8a:	f2c0 0201 	movt	r2, #1
    cd8e:	6812      	ldr	r2, [r2, #0]
    cd90:	466b      	mov	r3, sp
    cd92:	f04f 0c01 	mov.w	ip, #1
    cd96:	f8c3 c008 	str.w	ip, [r3, #8]
    cd9a:	605a      	str	r2, [r3, #4]
    cd9c:	f8c3 c000 	str.w	ip, [r3]
    cda0:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cda4:	2202      	movs	r2, #2
    cda6:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    cdaa:	9925      	ldr	r1, [sp, #148]	; 0x94
    cdac:	f001 f90d 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cdb0:	e7ff      	b.n	cdb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x302e>
    cdb2:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    cdb6:	f24e 2018 	movw	r0, #57880	; 0xe218
    cdba:	f2c0 0001 	movt	r0, #1
    cdbe:	6802      	ldr	r2, [r0, #0]
    cdc0:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cdc4:	f002 f8cd 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cdc8:	e7ff      	b.n	cdca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3046>
    cdca:	e7ff      	b.n	cdcc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
                let bcd = self.v[x];
    cdcc:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cdd0:	280f      	cmp	r0, #15
    cdd2:	f200 8308 	bhi.w	d3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3662>
    cdd6:	e7ff      	b.n	cdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3054>
    cdd8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cddc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cde0:	1842      	adds	r2, r0, r1
    cde2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cde6:	4613      	mov	r3, r2
    cde8:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    cdec:	f248 5c1f 	movw	ip, #34079	; 0x851f
    cdf0:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    cdf4:	fba2 2c0c 	umull	r2, ip, r2, ip
    cdf8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    cdfc:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    ce00:	4674      	mov	r4, lr
    ce02:	2500      	movs	r5, #0
    ce04:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    ce08:	9322      	str	r3, [sp, #136]	; 0x88
    ce0a:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    ce0e:	9420      	str	r4, [sp, #128]	; 0x80
    ce10:	f040 82f3 	bne.w	d3fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3676>
    ce14:	e7ff      	b.n	ce16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3092>
    ce16:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce1a:	9920      	ldr	r1, [sp, #128]	; 0x80
    ce1c:	1842      	adds	r2, r0, r1
    ce1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    ce20:	fa5f fc83 	uxtb.w	ip, r3
    ce24:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    ce28:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    ce2c:	fbac 450e 	umull	r4, r5, ip, lr
    ce30:	08ed      	lsrs	r5, r5, #3
    ce32:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    ce36:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    ce3a:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    ce3e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    ce40:	fa5f fc82 	uxtb.w	ip, r2
    ce44:	fbac ce0e 	umull	ip, lr, ip, lr
    ce48:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    ce4c:	8a05      	ldrh	r5, [r0, #16]
    ce4e:	3501      	adds	r5, #1
    ce50:	2600      	movs	r6, #0
    ce52:	2e00      	cmp	r6, #0
    ce54:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    ce58:	951e      	str	r5, [sp, #120]	; 0x78
    ce5a:	f040 82d8 	bne.w	d40e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x368a>
    ce5e:	e7ff      	b.n	ce60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30dc>
    ce60:	2000      	movs	r0, #0
    ce62:	991e      	ldr	r1, [sp, #120]	; 0x78
    ce64:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ce68:	f040 82dd 	bne.w	d426 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36a2>
    ce6c:	e7ff      	b.n	ce6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30ea>
    ce6e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce72:	991e      	ldr	r1, [sp, #120]	; 0x78
    ce74:	1842      	adds	r2, r0, r1
    ce76:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ce78:	fa5f fc83 	uxtb.w	ip, r3
    ce7c:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    ce80:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    ce84:	fbac e40e 	umull	lr, r4, ip, lr
    ce88:	08e4      	lsrs	r4, r4, #3
    ce8a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ce8e:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    ce92:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    ce96:	8a02      	ldrh	r2, [r0, #16]
    ce98:	3202      	adds	r2, #2
    ce9a:	f04f 0c00 	mov.w	ip, #0
    ce9e:	f1bc 0f00 	cmp.w	ip, #0
    cea2:	921d      	str	r2, [sp, #116]	; 0x74
    cea4:	f040 82c9 	bne.w	d43a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36b6>
    cea8:	e7ff      	b.n	ceaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3126>
    ceaa:	2000      	movs	r0, #0
    ceac:	991d      	ldr	r1, [sp, #116]	; 0x74
    ceae:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ceb2:	f040 82ce 	bne.w	d452 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36ce>
    ceb6:	e7ff      	b.n	ceb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3134>
    ceb8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cebc:	991d      	ldr	r1, [sp, #116]	; 0x74
    cebe:	1842      	adds	r2, r0, r1
    cec0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cec2:	fa5f fc83 	uxtb.w	ip, r3
    cec6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    ceca:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cece:	fbac e40e 	umull	lr, r4, ip, lr
    ced2:	08e4      	lsrs	r4, r4, #3
    ced4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    ced8:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cedc:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    cee0:	e206      	b.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cee2:	2005      	movs	r0, #5
    cee4:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    cee8:	f24e 0090 	movw	r0, #57488	; 0xe090
    ceec:	f2c0 0001 	movt	r0, #1
    cef0:	6801      	ldr	r1, [r0, #0]
    cef2:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cef6:	f005 fe9f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cefa:	901c      	str	r0, [sp, #112]	; 0x70
    cefc:	e01f      	b.n	cf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ba>
    cefe:	2001      	movs	r0, #1
    cf00:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cf04:	e015      	b.n	cf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cf06:	2000      	movs	r0, #0
    cf08:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    cf0c:	e011      	b.n	cf32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    cf0e:	2000      	movs	r0, #0
    cf10:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    cf14:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    cf18:	f646 2050 	movw	r0, #27216	; 0x6a50
    cf1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cf20:	f005 fe96 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cf24:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    cf28:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    cf2c:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    cf30:	e00a      	b.n	cf48 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31c4>
    cf32:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    cf36:	07c0      	lsls	r0, r0, #31
    cf38:	2800      	cmp	r0, #0
    cf3a:	d112      	bne.n	cf62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31de>
    cf3c:	e055      	b.n	cfea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
    cf3e:	981c      	ldr	r0, [sp, #112]	; 0x70
    cf40:	07c1      	lsls	r1, r0, #31
    cf42:	2900      	cmp	r1, #0
    cf44:	d1e3      	bne.n	cf0e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x318a>
    cf46:	e7de      	b.n	cf06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
    cf48:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    cf4c:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    cf50:	f005 fe72 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cf54:	901b      	str	r0, [sp, #108]	; 0x6c
    cf56:	e7ff      	b.n	cf58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31d4>
    cf58:	981b      	ldr	r0, [sp, #108]	; 0x6c
    cf5a:	07c1      	lsls	r1, r0, #31
    cf5c:	2900      	cmp	r1, #0
    cf5e:	d1ce      	bne.n	cefe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x317a>
    cf60:	e7d1      	b.n	cf06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    cf62:	f24e 1078 	movw	r0, #57720	; 0xe178
    cf66:	f2c0 0001 	movt	r0, #1
    cf6a:	6801      	ldr	r1, [r0, #0]
    cf6c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf70:	f100 0212 	add.w	r2, r0, #18
    cf74:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    cf78:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    cf7c:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    cf80:	f248 339f 	movw	r3, #33695	; 0x839f
    cf84:	f2c0 0301 	movt	r3, #1
    cf88:	4610      	mov	r0, r2
    cf8a:	911a      	str	r1, [sp, #104]	; 0x68
    cf8c:	4619      	mov	r1, r3
    cf8e:	f004 ff71 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf92:	9019      	str	r0, [sp, #100]	; 0x64
    cf94:	9118      	str	r1, [sp, #96]	; 0x60
    cf96:	e7ff      	b.n	cf98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3214>
    cf98:	9819      	ldr	r0, [sp, #100]	; 0x64
    cf9a:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    cf9e:	9918      	ldr	r1, [sp, #96]	; 0x60
    cfa0:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    cfa4:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    cfa8:	f2c0 0201 	movt	r2, #1
    cfac:	6812      	ldr	r2, [r2, #0]
    cfae:	466b      	mov	r3, sp
    cfb0:	f04f 0c01 	mov.w	ip, #1
    cfb4:	f8c3 c008 	str.w	ip, [r3, #8]
    cfb8:	605a      	str	r2, [r3, #4]
    cfba:	f8c3 c000 	str.w	ip, [r3]
    cfbe:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cfc2:	2202      	movs	r2, #2
    cfc4:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    cfc8:	991a      	ldr	r1, [sp, #104]	; 0x68
    cfca:	f000 fffe 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cfce:	e7ff      	b.n	cfd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x324c>
    cfd0:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    cfd4:	f24e 1098 	movw	r0, #57752	; 0xe198
    cfd8:	f2c0 0001 	movt	r0, #1
    cfdc:	6802      	ldr	r2, [r0, #0]
    cfde:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cfe2:	f001 ffbe 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfe6:	e7ff      	b.n	cfe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3264>
    cfe8:	e7ff      	b.n	cfea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
                let x = x as usize;
    cfea:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cfee:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    cff2:	1c41      	adds	r1, r0, #1
    cff4:	460a      	mov	r2, r1
    cff6:	4281      	cmp	r1, r0
    cff8:	9217      	str	r2, [sp, #92]	; 0x5c
    cffa:	f0c0 81c9 	bcc.w	d390 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x360c>
    cffe:	e7ff      	b.n	d000 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x327c>
    d000:	2000      	movs	r0, #0
    d002:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    d006:	9817      	ldr	r0, [sp, #92]	; 0x5c
    d008:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    d00c:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    d010:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    d014:	f001 fd37 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d018:	9016      	str	r0, [sp, #88]	; 0x58
    d01a:	9115      	str	r1, [sp, #84]	; 0x54
    d01c:	e7ff      	b.n	d01e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x329a>
    d01e:	9816      	ldr	r0, [sp, #88]	; 0x58
    d020:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    d024:	9915      	ldr	r1, [sp, #84]	; 0x54
    d026:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    d02a:	e7ff      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    d02c:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    d030:	f001 fc9e 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d034:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    d038:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    d03c:	e7ff      	b.n	d03e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ba>
    d03e:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    d042:	2800      	cmp	r0, #0
    d044:	d001      	beq.n	d04a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c6>
    d046:	e7ff      	b.n	d048 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c4>
    d048:	e001      	b.n	d04e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ca>
        match (
    d04a:	e151      	b.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d04c:	defe      	udf	#254	; 0xfe
    d04e:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    d052:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    d056:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    d05a:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    d05e:	280f      	cmp	r0, #15
    d060:	9014      	str	r0, [sp, #80]	; 0x50
    d062:	f200 81a1 	bhi.w	d3a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3624>
    d066:	e7ff      	b.n	d068 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32e4>
    d068:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d06c:	9914      	ldr	r1, [sp, #80]	; 0x50
    d06e:	1842      	adds	r2, r0, r1
    d070:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d074:	8a03      	ldrh	r3, [r0, #16]
    d076:	eb03 0c01 	add.w	ip, r3, r1
    d07a:	46e6      	mov	lr, ip
    d07c:	459c      	cmp	ip, r3
    d07e:	9213      	str	r2, [sp, #76]	; 0x4c
    d080:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    d084:	f0c0 8199 	bcc.w	d3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3636>
    d088:	e7ff      	b.n	d08a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3306>
    d08a:	2000      	movs	r0, #0
    d08c:	9912      	ldr	r1, [sp, #72]	; 0x48
    d08e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d092:	f040 819e 	bne.w	d3d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x364e>
    d096:	e7ff      	b.n	d098 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3314>
    d098:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d09c:	9912      	ldr	r1, [sp, #72]	; 0x48
    d09e:	1842      	adds	r2, r0, r1
    d0a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d0a2:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    d0a6:	e7c1      	b.n	d02c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    d0a8:	2005      	movs	r0, #5
    d0aa:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    d0ae:	f24e 0090 	movw	r0, #57488	; 0xe090
    d0b2:	f2c0 0001 	movt	r0, #1
    d0b6:	6801      	ldr	r1, [r0, #0]
    d0b8:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    d0bc:	f005 fdbc 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    d0c0:	9011      	str	r0, [sp, #68]	; 0x44
    d0c2:	e01f      	b.n	d104 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3380>
    d0c4:	2001      	movs	r0, #1
    d0c6:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    d0ca:	e015      	b.n	d0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    d0cc:	2000      	movs	r0, #0
    d0ce:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    d0d2:	e011      	b.n	d0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    d0d4:	2000      	movs	r0, #0
    d0d6:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    d0da:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    d0de:	f646 2050 	movw	r0, #27216	; 0x6a50
    d0e2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d0e6:	f005 fdb3 	bl	12c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    d0ea:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    d0ee:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    d0f2:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    d0f6:	e00a      	b.n	d10e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x338a>
    d0f8:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    d0fc:	07c0      	lsls	r0, r0, #31
    d0fe:	2800      	cmp	r0, #0
    d100:	d112      	bne.n	d128 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33a4>
    d102:	e055      	b.n	d1b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
    d104:	9811      	ldr	r0, [sp, #68]	; 0x44
    d106:	07c1      	lsls	r1, r0, #31
    d108:	2900      	cmp	r1, #0
    d10a:	d1e3      	bne.n	d0d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3350>
    d10c:	e7de      	b.n	d0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
    d10e:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    d112:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    d116:	f005 fd8f 	bl	12c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    d11a:	9010      	str	r0, [sp, #64]	; 0x40
    d11c:	e7ff      	b.n	d11e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x339a>
    d11e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d120:	07c1      	lsls	r1, r0, #31
    d122:	2900      	cmp	r1, #0
    d124:	d1ce      	bne.n	d0c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3340>
    d126:	e7d1      	b.n	d0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    d128:	f24e 00b4 	movw	r0, #57524	; 0xe0b4
    d12c:	f2c0 0001 	movt	r0, #1
    d130:	6801      	ldr	r1, [r0, #0]
    d132:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d136:	f100 0212 	add.w	r2, r0, #18
    d13a:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    d13e:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    d142:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    d146:	f248 339f 	movw	r3, #33695	; 0x839f
    d14a:	f2c0 0301 	movt	r3, #1
    d14e:	4610      	mov	r0, r2
    d150:	910f      	str	r1, [sp, #60]	; 0x3c
    d152:	4619      	mov	r1, r3
    d154:	f004 fe8e 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d158:	900e      	str	r0, [sp, #56]	; 0x38
    d15a:	910d      	str	r1, [sp, #52]	; 0x34
    d15c:	e7ff      	b.n	d15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33da>
    d15e:	980e      	ldr	r0, [sp, #56]	; 0x38
    d160:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    d164:	990d      	ldr	r1, [sp, #52]	; 0x34
    d166:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    d16a:	f24e 02d8 	movw	r2, #57560	; 0xe0d8
    d16e:	f2c0 0201 	movt	r2, #1
    d172:	6812      	ldr	r2, [r2, #0]
    d174:	466b      	mov	r3, sp
    d176:	f04f 0c01 	mov.w	ip, #1
    d17a:	f8c3 c008 	str.w	ip, [r3, #8]
    d17e:	605a      	str	r2, [r3, #4]
    d180:	f8c3 c000 	str.w	ip, [r3]
    d184:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d188:	2202      	movs	r2, #2
    d18a:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    d18e:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d190:	f000 ff1b 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d194:	e7ff      	b.n	d196 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3412>
    d196:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    d19a:	f24e 1018 	movw	r0, #57624	; 0xe118
    d19e:	f2c0 0001 	movt	r0, #1
    d1a2:	6802      	ldr	r2, [r0, #0]
    d1a4:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d1a8:	f001 fedb 	bl	ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d1ac:	e7ff      	b.n	d1ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342a>
    d1ae:	e7ff      	b.n	d1b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
                let x = x as usize;
    d1b0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d1b4:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    d1b8:	1c41      	adds	r1, r0, #1
    d1ba:	460a      	mov	r2, r1
    d1bc:	4281      	cmp	r1, r0
    d1be:	920c      	str	r2, [sp, #48]	; 0x30
    d1c0:	f0c0 80bb 	bcc.w	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35b6>
    d1c4:	e7ff      	b.n	d1c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3442>
    d1c6:	2000      	movs	r0, #0
    d1c8:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    d1cc:	980c      	ldr	r0, [sp, #48]	; 0x30
    d1ce:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    d1d2:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    d1d6:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    d1da:	f001 fc54 	bl	ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d1de:	900b      	str	r0, [sp, #44]	; 0x2c
    d1e0:	910a      	str	r1, [sp, #40]	; 0x28
    d1e2:	e7ff      	b.n	d1e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3460>
    d1e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d1e6:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    d1ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    d1ec:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    d1f0:	e7ff      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d1f2:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    d1f6:	f001 fbbb 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d1fa:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    d1fe:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    d202:	e7ff      	b.n	d204 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3480>
    d204:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    d208:	2800      	cmp	r0, #0
    d20a:	d001      	beq.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348c>
    d20c:	e7ff      	b.n	d20e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348a>
    d20e:	e001      	b.n	d214 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3490>
        match (
    d210:	e06e      	b.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d212:	defe      	udf	#254	; 0xfe
    d214:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    d218:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    d21c:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    d220:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    d224:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d228:	8a0a      	ldrh	r2, [r1, #16]
    d22a:	1813      	adds	r3, r2, r0
    d22c:	469c      	mov	ip, r3
    d22e:	4293      	cmp	r3, r2
    d230:	9009      	str	r0, [sp, #36]	; 0x24
    d232:	f8cd c020 	str.w	ip, [sp, #32]
    d236:	f0c0 808c 	bcc.w	d352 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35ce>
    d23a:	e7ff      	b.n	d23c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34b8>
    d23c:	2000      	movs	r0, #0
    d23e:	9908      	ldr	r1, [sp, #32]
    d240:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d244:	f040 8091 	bne.w	d36a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35e6>
    d248:	e7ff      	b.n	d24a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34c6>
    d24a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d24e:	9908      	ldr	r1, [sp, #32]
    d250:	1842      	adds	r2, r0, r1
    d252:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d256:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d258:	2b0f      	cmp	r3, #15
    d25a:	9207      	str	r2, [sp, #28]
    d25c:	f200 808f 	bhi.w	d37e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35fa>
    d260:	e7ff      	b.n	d262 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34de>
    d262:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d266:	9909      	ldr	r1, [sp, #36]	; 0x24
    d268:	1842      	adds	r2, r0, r1
    d26a:	9b07      	ldr	r3, [sp, #28]
    d26c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    d270:	e7bf      	b.n	d1f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d272:	f248 319f 	movw	r1, #33695	; 0x839f
    d276:	f2c0 0101 	movt	r1, #1
    d27a:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    d27e:	f004 fdf9 	bl	11e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d282:	9006      	str	r0, [sp, #24]
    d284:	9105      	str	r1, [sp, #20]
    d286:	e7ff      	b.n	d288 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3504>
    d288:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    d28c:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    d290:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d294:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    d298:	9a06      	ldr	r2, [sp, #24]
    d29a:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    d29e:	9b05      	ldr	r3, [sp, #20]
    d2a0:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    d2a4:	f64e 4c7c 	movw	ip, #60540	; 0xec7c
    d2a8:	f2c0 0c01 	movt	ip, #1
    d2ac:	f8dc c000 	ldr.w	ip, [ip]
    d2b0:	46ee      	mov	lr, sp
    d2b2:	2402      	movs	r4, #2
    d2b4:	f8ce 4008 	str.w	r4, [lr, #8]
    d2b8:	f8ce c004 	str.w	ip, [lr, #4]
    d2bc:	f8ce 4000 	str.w	r4, [lr]
    d2c0:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d2c4:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    d2c8:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    d2cc:	4622      	mov	r2, r4
    d2ce:	f000 fe7c 	bl	dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d2d2:	e7ff      	b.n	d2d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3550>
    d2d4:	f64e 40a0 	movw	r0, #60576	; 0xeca0
    d2d8:	f2c0 0001 	movt	r0, #1
    d2dc:	f009 fc4b 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d2e0:	9004      	str	r0, [sp, #16]
    d2e2:	e7ff      	b.n	d2e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3560>
    d2e4:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d2e8:	9904      	ldr	r1, [sp, #16]
    d2ea:	f009 fc81 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d2ee:	defe      	udf	#254	; 0xfe
        }
    }
    d2f0:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    d2f4:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    d2f6:	f24e 0034 	movw	r0, #57396	; 0xe034
    d2fa:	f2c0 0001 	movt	r0, #1
    d2fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d302:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d306:	f009 fc53 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d30a:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d30c:	f24e 0060 	movw	r0, #57440	; 0xe060
    d310:	f2c0 0001 	movt	r0, #1
    d314:	f24e 0244 	movw	r2, #57412	; 0xe044
    d318:	f2c0 0201 	movt	r2, #1
    d31c:	211c      	movs	r1, #28
    d31e:	f009 fc31 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d322:	defe      	udf	#254	; 0xfe
    d324:	f24e 007c 	movw	r0, #57468	; 0xe07c
    d328:	f2c0 0001 	movt	r0, #1
    d32c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d330:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d334:	f009 fc3c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d338:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d33a:	f24e 0060 	movw	r0, #57440	; 0xe060
    d33e:	f2c0 0001 	movt	r0, #1
    d342:	f24e 121c 	movw	r2, #57628	; 0xe11c
    d346:	f2c0 0201 	movt	r2, #1
    d34a:	211c      	movs	r1, #28
    d34c:	f009 fc1a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d350:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    d352:	f24e 0060 	movw	r0, #57440	; 0xe060
    d356:	f2c0 0001 	movt	r0, #1
    d35a:	f24e 122c 	movw	r2, #57644	; 0xe12c
    d35e:	f2c0 0201 	movt	r2, #1
    d362:	211c      	movs	r1, #28
    d364:	f009 fc0e 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d368:	defe      	udf	#254	; 0xfe
    d36a:	f24e 103c 	movw	r0, #57660	; 0xe13c
    d36e:	f2c0 0001 	movt	r0, #1
    d372:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d376:	9908      	ldr	r1, [sp, #32]
    d378:	f009 fc1a 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d37c:	defe      	udf	#254	; 0xfe
    d37e:	f24e 104c 	movw	r0, #57676	; 0xe14c
    d382:	f2c0 0001 	movt	r0, #1
    d386:	2210      	movs	r2, #16
    d388:	9909      	ldr	r1, [sp, #36]	; 0x24
    d38a:	f009 fc11 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d38e:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d390:	f24e 0060 	movw	r0, #57440	; 0xe060
    d394:	f2c0 0001 	movt	r0, #1
    d398:	f24e 129c 	movw	r2, #57756	; 0xe19c
    d39c:	f2c0 0201 	movt	r2, #1
    d3a0:	211c      	movs	r1, #28
    d3a2:	f009 fbef 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3a6:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    d3a8:	f24e 10ac 	movw	r0, #57772	; 0xe1ac
    d3ac:	f2c0 0001 	movt	r0, #1
    d3b0:	2210      	movs	r2, #16
    d3b2:	9914      	ldr	r1, [sp, #80]	; 0x50
    d3b4:	f009 fbfc 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3b8:	defe      	udf	#254	; 0xfe
    d3ba:	f24e 0060 	movw	r0, #57440	; 0xe060
    d3be:	f2c0 0001 	movt	r0, #1
    d3c2:	f24e 12bc 	movw	r2, #57788	; 0xe1bc
    d3c6:	f2c0 0201 	movt	r2, #1
    d3ca:	211c      	movs	r1, #28
    d3cc:	f009 fbda 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3d0:	defe      	udf	#254	; 0xfe
    d3d2:	f24e 10cc 	movw	r0, #57804	; 0xe1cc
    d3d6:	f2c0 0001 	movt	r0, #1
    d3da:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d3de:	9912      	ldr	r1, [sp, #72]	; 0x48
    d3e0:	f009 fbe6 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3e4:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    d3e6:	f24e 201c 	movw	r0, #57884	; 0xe21c
    d3ea:	f2c0 0001 	movt	r0, #1
    d3ee:	2210      	movs	r2, #16
    d3f0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3f4:	f009 fbdc 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3f8:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    d3fa:	f24e 202c 	movw	r0, #57900	; 0xe22c
    d3fe:	f2c0 0001 	movt	r0, #1
    d402:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d406:	9920      	ldr	r1, [sp, #128]	; 0x80
    d408:	f009 fbd2 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d40c:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    d40e:	f24e 0060 	movw	r0, #57440	; 0xe060
    d412:	f2c0 0001 	movt	r0, #1
    d416:	f24e 223c 	movw	r2, #57916	; 0xe23c
    d41a:	f2c0 0201 	movt	r2, #1
    d41e:	211c      	movs	r1, #28
    d420:	f009 fbb0 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d424:	defe      	udf	#254	; 0xfe
    d426:	f24e 204c 	movw	r0, #57932	; 0xe24c
    d42a:	f2c0 0001 	movt	r0, #1
    d42e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d432:	991e      	ldr	r1, [sp, #120]	; 0x78
    d434:	f009 fbbc 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d438:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    d43a:	f24e 0060 	movw	r0, #57440	; 0xe060
    d43e:	f2c0 0001 	movt	r0, #1
    d442:	f24e 225c 	movw	r2, #57948	; 0xe25c
    d446:	f2c0 0201 	movt	r2, #1
    d44a:	211c      	movs	r1, #28
    d44c:	f009 fb9a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d450:	defe      	udf	#254	; 0xfe
    d452:	f24e 206c 	movw	r0, #57964	; 0xe26c
    d456:	f2c0 0001 	movt	r0, #1
    d45a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d45e:	991d      	ldr	r1, [sp, #116]	; 0x74
    d460:	f009 fba6 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d464:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    d466:	f24e 20bc 	movw	r0, #58044	; 0xe2bc
    d46a:	f2c0 0001 	movt	r0, #1
    d46e:	2210      	movs	r2, #16
    d470:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d474:	f009 fb9c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d478:	defe      	udf	#254	; 0xfe
    d47a:	f24e 20e0 	movw	r0, #58080	; 0xe2e0
    d47e:	f2c0 0001 	movt	r0, #1
    d482:	f24e 22cc 	movw	r2, #58060	; 0xe2cc
    d486:	f2c0 0201 	movt	r2, #1
    d48a:	2121      	movs	r1, #33	; 0x21
    d48c:	f009 fb7a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d490:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    d492:	f24e 3040 	movw	r0, #58176	; 0xe340
    d496:	f2c0 0001 	movt	r0, #1
    d49a:	2210      	movs	r2, #16
    d49c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4a0:	f009 fb86 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4a4:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    d4a6:	f24e 3090 	movw	r0, #58256	; 0xe390
    d4aa:	f2c0 0001 	movt	r0, #1
    d4ae:	2210      	movs	r2, #16
    d4b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4b4:	f009 fb7c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4b8:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    d4ba:	f24e 30e0 	movw	r0, #58336	; 0xe3e0
    d4be:	f2c0 0001 	movt	r0, #1
    d4c2:	2210      	movs	r2, #16
    d4c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4c8:	f009 fb72 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4cc:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    d4ce:	f24e 4030 	movw	r0, #58416	; 0xe430
    d4d2:	f2c0 0001 	movt	r0, #1
    d4d6:	2210      	movs	r2, #16
    d4d8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4dc:	f009 fb68 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4e0:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    d4e2:	f24e 4080 	movw	r0, #58496	; 0xe480
    d4e6:	f2c0 0001 	movt	r0, #1
    d4ea:	2210      	movs	r2, #16
    d4ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d4f0:	f009 fb5e 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d4f4:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    d4f6:	f24e 40d0 	movw	r0, #58576	; 0xe4d0
    d4fa:	f2c0 0001 	movt	r0, #1
    d4fe:	2210      	movs	r2, #16
    d500:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d504:	f009 fb54 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d508:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    d50a:	f24e 5014 	movw	r0, #58644	; 0xe514
    d50e:	f2c0 0001 	movt	r0, #1
    d512:	2210      	movs	r2, #16
    d514:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d518:	f009 fb4a 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d51c:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    d51e:	f24e 5068 	movw	r0, #58728	; 0xe568
    d522:	f2c0 0001 	movt	r0, #1
    d526:	2210      	movs	r2, #16
    d528:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d52c:	f009 fb40 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d530:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    d532:	f24e 5078 	movw	r0, #58744	; 0xe578
    d536:	f2c0 0001 	movt	r0, #1
    d53a:	2210      	movs	r2, #16
    d53c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d540:	f009 fb36 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d544:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    d546:	f24e 0060 	movw	r0, #57440	; 0xe060
    d54a:	f2c0 0001 	movt	r0, #1
    d54e:	f24e 5288 	movw	r2, #58760	; 0xe588
    d552:	f2c0 0201 	movt	r2, #1
    d556:	211c      	movs	r1, #28
    d558:	f009 fb14 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d55c:	defe      	udf	#254	; 0xfe
    d55e:	f24e 5098 	movw	r0, #58776	; 0xe598
    d562:	f2c0 0001 	movt	r0, #1
    d566:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d56a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d56c:	f009 fb20 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d570:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    d572:	f24e 0060 	movw	r0, #57440	; 0xe060
    d576:	f2c0 0001 	movt	r0, #1
    d57a:	f24e 52a8 	movw	r2, #58792	; 0xe5a8
    d57e:	f2c0 0201 	movt	r2, #1
    d582:	211c      	movs	r1, #28
    d584:	f009 fafe 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d588:	defe      	udf	#254	; 0xfe
    d58a:	f24e 50c0 	movw	r0, #58816	; 0xe5c0
    d58e:	f2c0 0001 	movt	r0, #1
    d592:	f24e 52a8 	movw	r2, #58792	; 0xe5a8
    d596:	f2c0 0201 	movt	r2, #1
    d59a:	2139      	movs	r1, #57	; 0x39
    d59c:	f009 faf2 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d5a0:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    d5a2:	f24e 0060 	movw	r0, #57440	; 0xe060
    d5a6:	f2c0 0001 	movt	r0, #1
    d5aa:	f24e 52fc 	movw	r2, #58876	; 0xe5fc
    d5ae:	f2c0 0201 	movt	r2, #1
    d5b2:	211c      	movs	r1, #28
    d5b4:	f009 fae6 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d5b8:	defe      	udf	#254	; 0xfe
    d5ba:	f24e 50c0 	movw	r0, #58816	; 0xe5c0
    d5be:	f2c0 0001 	movt	r0, #1
    d5c2:	f24e 52fc 	movw	r2, #58876	; 0xe5fc
    d5c6:	f2c0 0201 	movt	r2, #1
    d5ca:	2139      	movs	r1, #57	; 0x39
    d5cc:	f009 fada 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d5d0:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    d5d2:	f24e 6020 	movw	r0, #58912	; 0xe620
    d5d6:	f2c0 0001 	movt	r0, #1
    d5da:	f24e 620c 	movw	r2, #58892	; 0xe60c
    d5de:	f2c0 0201 	movt	r2, #1
    d5e2:	2121      	movs	r1, #33	; 0x21
    d5e4:	f009 face 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d5e8:	defe      	udf	#254	; 0xfe
    d5ea:	f24e 6060 	movw	r0, #58976	; 0xe660
    d5ee:	f2c0 0001 	movt	r0, #1
    d5f2:	f24e 6244 	movw	r2, #58948	; 0xe644
    d5f6:	f2c0 0201 	movt	r2, #1
    d5fa:	2123      	movs	r1, #35	; 0x23
    d5fc:	f009 fac2 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d600:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    d602:	f24e 60c4 	movw	r0, #59076	; 0xe6c4
    d606:	f2c0 0001 	movt	r0, #1
    d60a:	2210      	movs	r2, #16
    d60c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d610:	f009 face 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d614:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    d616:	f24e 7094 	movw	r0, #59284	; 0xe794
    d61a:	f2c0 0001 	movt	r0, #1
    d61e:	2210      	movs	r2, #16
    d620:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d624:	f009 fac4 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d628:	defe      	udf	#254	; 0xfe
    d62a:	f24e 70a4 	movw	r0, #59300	; 0xe7a4
    d62e:	f2c0 0001 	movt	r0, #1
    d632:	2210      	movs	r2, #16
    d634:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d638:	f009 faba 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d63c:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    d63e:	f24e 70f4 	movw	r0, #59380	; 0xe7f4
    d642:	f2c0 0001 	movt	r0, #1
    d646:	2210      	movs	r2, #16
    d648:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d64c:	f009 fab0 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d650:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    d652:	f64e 0004 	movw	r0, #59396	; 0xe804
    d656:	f2c0 0001 	movt	r0, #1
    d65a:	2210      	movs	r2, #16
    d65c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d660:	f009 faa6 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d664:	defe      	udf	#254	; 0xfe
    d666:	f64e 0014 	movw	r0, #59412	; 0xe814
    d66a:	f2c0 0001 	movt	r0, #1
    d66e:	2210      	movs	r2, #16
    d670:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d674:	f009 fa9c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d678:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    d67a:	f64e 0068 	movw	r0, #59496	; 0xe868
    d67e:	f2c0 0001 	movt	r0, #1
    d682:	2210      	movs	r2, #16
    d684:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d688:	f009 fa92 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d68c:	defe      	udf	#254	; 0xfe
    d68e:	f64e 0078 	movw	r0, #59512	; 0xe878
    d692:	f2c0 0001 	movt	r0, #1
    d696:	2210      	movs	r2, #16
    d698:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d69c:	f009 fa88 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6a0:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d6a2:	f64e 0088 	movw	r0, #59528	; 0xe888
    d6a6:	f2c0 0001 	movt	r0, #1
    d6aa:	2210      	movs	r2, #16
    d6ac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6b0:	f009 fa7e 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6b4:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    d6b6:	f64e 00d8 	movw	r0, #59608	; 0xe8d8
    d6ba:	f2c0 0001 	movt	r0, #1
    d6be:	2210      	movs	r2, #16
    d6c0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6c4:	f009 fa74 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6c8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    d6ca:	f64e 00e8 	movw	r0, #59624	; 0xe8e8
    d6ce:	f2c0 0001 	movt	r0, #1
    d6d2:	2210      	movs	r2, #16
    d6d4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6d8:	f009 fa6a 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6dc:	defe      	udf	#254	; 0xfe
    d6de:	f64e 00f8 	movw	r0, #59640	; 0xe8f8
    d6e2:	f2c0 0001 	movt	r0, #1
    d6e6:	2210      	movs	r2, #16
    d6e8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6ec:	f009 fa60 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6f0:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    d6f2:	f64e 1048 	movw	r0, #59720	; 0xe948
    d6f6:	f2c0 0001 	movt	r0, #1
    d6fa:	2210      	movs	r2, #16
    d6fc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d700:	f009 fa56 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d704:	defe      	udf	#254	; 0xfe
    d706:	f64e 1058 	movw	r0, #59736	; 0xe958
    d70a:	f2c0 0001 	movt	r0, #1
    d70e:	2210      	movs	r2, #16
    d710:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d714:	f009 fa4c 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d718:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d71a:	f64e 1068 	movw	r0, #59752	; 0xe968
    d71e:	f2c0 0001 	movt	r0, #1
    d722:	2210      	movs	r2, #16
    d724:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d728:	f009 fa42 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d72c:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    d72e:	f64e 10b8 	movw	r0, #59832	; 0xe9b8
    d732:	f2c0 0001 	movt	r0, #1
    d736:	2210      	movs	r2, #16
    d738:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d73c:	f009 fa38 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d740:	defe      	udf	#254	; 0xfe
    d742:	f64e 10c8 	movw	r0, #59848	; 0xe9c8
    d746:	f2c0 0001 	movt	r0, #1
    d74a:	2210      	movs	r2, #16
    d74c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d750:	f009 fa2e 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d754:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d756:	f64e 10d8 	movw	r0, #59864	; 0xe9d8
    d75a:	f2c0 0001 	movt	r0, #1
    d75e:	2210      	movs	r2, #16
    d760:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d764:	f009 fa24 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d768:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    d76a:	f64e 2028 	movw	r0, #59944	; 0xea28
    d76e:	f2c0 0001 	movt	r0, #1
    d772:	2210      	movs	r2, #16
    d774:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d778:	f009 fa1a 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d77c:	defe      	udf	#254	; 0xfe
    d77e:	f64e 2038 	movw	r0, #59960	; 0xea38
    d782:	f2c0 0001 	movt	r0, #1
    d786:	2210      	movs	r2, #16
    d788:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d78c:	f009 fa10 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d790:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    d792:	f64e 2088 	movw	r0, #60040	; 0xea88
    d796:	f2c0 0001 	movt	r0, #1
    d79a:	2210      	movs	r2, #16
    d79c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d7a0:	f009 fa06 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7a4:	defe      	udf	#254	; 0xfe
    d7a6:	f64e 2098 	movw	r0, #60056	; 0xea98
    d7aa:	f2c0 0001 	movt	r0, #1
    d7ae:	2210      	movs	r2, #16
    d7b0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7b4:	f009 f9fc 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7b8:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    d7ba:	f64e 20e8 	movw	r0, #60136	; 0xeae8
    d7be:	f2c0 0001 	movt	r0, #1
    d7c2:	2210      	movs	r2, #16
    d7c4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d7c8:	f009 f9f2 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7cc:	defe      	udf	#254	; 0xfe
    d7ce:	f64e 20f8 	movw	r0, #60152	; 0xeaf8
    d7d2:	f2c0 0001 	movt	r0, #1
    d7d6:	2210      	movs	r2, #16
    d7d8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7dc:	f009 f9e8 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7e0:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    d7e2:	f64e 3048 	movw	r0, #60232	; 0xeb48
    d7e6:	f2c0 0001 	movt	r0, #1
    d7ea:	2210      	movs	r2, #16
    d7ec:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d7f0:	f009 f9de 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7f4:	defe      	udf	#254	; 0xfe
    d7f6:	f64e 3058 	movw	r0, #60248	; 0xeb58
    d7fa:	f2c0 0001 	movt	r0, #1
    d7fe:	2210      	movs	r2, #16
    d800:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d804:	f009 f9d4 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d808:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    d80a:	f64e 30a8 	movw	r0, #60328	; 0xeba8
    d80e:	f2c0 0001 	movt	r0, #1
    d812:	2210      	movs	r2, #16
    d814:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d818:	f009 f9ca 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d81c:	defe      	udf	#254	; 0xfe
    d81e:	f64e 30b8 	movw	r0, #60344	; 0xebb8
    d822:	f2c0 0001 	movt	r0, #1
    d826:	2210      	movs	r2, #16
    d828:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d82c:	f009 f9c0 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d830:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    d832:	f64e 4008 	movw	r0, #60424	; 0xec08
    d836:	f2c0 0001 	movt	r0, #1
    d83a:	2210      	movs	r2, #16
    d83c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d840:	f009 f9b6 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d844:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    d846:	f64e 40f0 	movw	r0, #60656	; 0xecf0
    d84a:	f2c0 0001 	movt	r0, #1
    d84e:	2210      	movs	r2, #16
    d850:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d854:	f009 f9ac 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d858:	defe      	udf	#254	; 0xfe
    d85a:	f64e 5000 	movw	r0, #60672	; 0xed00
    d85e:	f2c0 0001 	movt	r0, #1
    d862:	2210      	movs	r2, #16
    d864:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d868:	f009 f9a2 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d86c:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    d86e:	f64e 5050 	movw	r0, #60752	; 0xed50
    d872:	f2c0 0001 	movt	r0, #1
    d876:	2210      	movs	r2, #16
    d878:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d87c:	f009 f998 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d880:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    d882:	f64e 50a0 	movw	r0, #60832	; 0xeda0
    d886:	f2c0 0001 	movt	r0, #1
    d88a:	2210      	movs	r2, #16
    d88c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d890:	f009 f98e 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d894:	defe      	udf	#254	; 0xfe

0000d896 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d896:	b580      	push	{r7, lr}
    d898:	b086      	sub	sp, #24
    d89a:	9104      	str	r1, [sp, #16]
    d89c:	9205      	str	r2, [sp, #20]
    d89e:	6809      	ldr	r1, [r1, #0]
    d8a0:	6809      	ldr	r1, [r1, #0]
    d8a2:	2300      	movs	r3, #0
    d8a4:	9301      	str	r3, [sp, #4]
    d8a6:	9102      	str	r1, [sp, #8]
    d8a8:	9203      	str	r2, [sp, #12]
    d8aa:	9901      	ldr	r1, [sp, #4]
    d8ac:	9a02      	ldr	r2, [sp, #8]
    d8ae:	9b03      	ldr	r3, [sp, #12]
    d8b0:	f005 fb4b 	bl	12f4a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>
    d8b4:	e7ff      	b.n	d8b6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E+0x20>
    d8b6:	b006      	add	sp, #24
    d8b8:	bd80      	pop	{r7, pc}

0000d8ba <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>:
    d8ba:	b084      	sub	sp, #16
    d8bc:	9002      	str	r0, [sp, #8]
    d8be:	9103      	str	r1, [sp, #12]
    d8c0:	6800      	ldr	r0, [r0, #0]
    d8c2:	9000      	str	r0, [sp, #0]
    d8c4:	9101      	str	r1, [sp, #4]
    d8c6:	9800      	ldr	r0, [sp, #0]
    d8c8:	9901      	ldr	r1, [sp, #4]
    d8ca:	b004      	add	sp, #16
    d8cc:	4770      	bx	lr

0000d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>:
    fn jump(&mut self, pc: u16) {
    d8ce:	b082      	sub	sp, #8
    d8d0:	460a      	mov	r2, r1
    d8d2:	9000      	str	r0, [sp, #0]
    d8d4:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    d8d8:	8241      	strh	r1, [r0, #18]
    }
    d8da:	b002      	add	sp, #8
    d8dc:	4770      	bx	lr

0000d8de <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>:
    fn load(&mut self, rom: &[u8]) {
    d8de:	b580      	push	{r7, lr}
    d8e0:	b08a      	sub	sp, #40	; 0x28
    d8e2:	9105      	str	r1, [sp, #20]
    d8e4:	9206      	str	r2, [sp, #24]
    d8e6:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d8e8:	3047      	adds	r0, #71	; 0x47
    d8ea:	9905      	ldr	r1, [sp, #20]
    d8ec:	9a06      	ldr	r2, [sp, #24]
    d8ee:	9004      	str	r0, [sp, #16]
    d8f0:	4608      	mov	r0, r1
    d8f2:	4611      	mov	r1, r2
    d8f4:	f001 f8a0 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d8f8:	9003      	str	r0, [sp, #12]
    d8fa:	e7ff      	b.n	d8fc <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x1e>
    d8fc:	9803      	ldr	r0, [sp, #12]
    d8fe:	f500 7100 	add.w	r1, r0, #512	; 0x200
    d902:	460a      	mov	r2, r1
    d904:	4281      	cmp	r1, r0
    d906:	9202      	str	r2, [sp, #8]
    d908:	d318      	bcc.n	d93c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5e>
    d90a:	e7ff      	b.n	d90c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x2e>
    d90c:	f44f 7000 	mov.w	r0, #512	; 0x200
    d910:	9007      	str	r0, [sp, #28]
    d912:	9802      	ldr	r0, [sp, #8]
    d914:	9008      	str	r0, [sp, #32]
    d916:	9a07      	ldr	r2, [sp, #28]
    d918:	9b08      	ldr	r3, [sp, #32]
    d91a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d91e:	9804      	ldr	r0, [sp, #16]
    d920:	f000 fb8c 	bl	e03c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>
    d924:	9001      	str	r0, [sp, #4]
    d926:	9100      	str	r1, [sp, #0]
    d928:	e7ff      	b.n	d92a <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x4c>
    d92a:	9a05      	ldr	r2, [sp, #20]
    d92c:	9b06      	ldr	r3, [sp, #24]
    d92e:	9801      	ldr	r0, [sp, #4]
    d930:	9900      	ldr	r1, [sp, #0]
    d932:	f001 fe4b 	bl	f5cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d936:	e7ff      	b.n	d938 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5a>
    }
    d938:	b00a      	add	sp, #40	; 0x28
    d93a:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d93c:	f24e 0060 	movw	r0, #57440	; 0xe060
    d940:	f2c0 0001 	movt	r0, #1
    d944:	f64e 62fc 	movw	r2, #61180	; 0xeefc
    d948:	f2c0 0201 	movt	r2, #1
    d94c:	211c      	movs	r1, #28
    d94e:	f009 f919 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d952:	defe      	udf	#254	; 0xfe

0000d954 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>:
    fn next(&mut self) {
    d954:	b580      	push	{r7, lr}
    d956:	b084      	sub	sp, #16
    d958:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    d95a:	8a41      	ldrh	r1, [r0, #18]
    d95c:	2202      	movs	r2, #2
    d95e:	9002      	str	r0, [sp, #8]
    d960:	4608      	mov	r0, r1
    d962:	4611      	mov	r1, r2
    d964:	f005 fa50 	bl	12e08 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    d968:	9001      	str	r0, [sp, #4]
    d96a:	e7ff      	b.n	d96c <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x18>
    d96c:	9802      	ldr	r0, [sp, #8]
    d96e:	9901      	ldr	r1, [sp, #4]
    d970:	f7ff ffad 	bl	d8ce <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    d974:	e7ff      	b.n	d976 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x22>
    }
    d976:	b004      	add	sp, #16
    d978:	bd80      	pop	{r7, pc}

0000d97a <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>:
    fn push(&mut self, item: u16) {
    d97a:	b580      	push	{r7, lr}
    d97c:	b086      	sub	sp, #24
    d97e:	460a      	mov	r2, r1
    d980:	9004      	str	r0, [sp, #16]
    d982:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    d986:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d98a:	460b      	mov	r3, r1
    d98c:	290f      	cmp	r1, #15
    d98e:	9003      	str	r0, [sp, #12]
    d990:	9202      	str	r2, [sp, #8]
    d992:	9301      	str	r3, [sp, #4]
    d994:	d813      	bhi.n	d9be <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x44>
    d996:	e7ff      	b.n	d998 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x1e>
    d998:	9803      	ldr	r0, [sp, #12]
    d99a:	9901      	ldr	r1, [sp, #4]
    d99c:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d9a0:	9b02      	ldr	r3, [sp, #8]
    d9a2:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    d9a4:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d9a8:	2101      	movs	r1, #1
    d9aa:	f005 f990 	bl	12cce <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    d9ae:	9000      	str	r0, [sp, #0]
    d9b0:	e7ff      	b.n	d9b2 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x38>
    d9b2:	9800      	ldr	r0, [sp, #0]
    d9b4:	9903      	ldr	r1, [sp, #12]
    d9b6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    d9ba:	b006      	add	sp, #24
    d9bc:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    d9be:	f64e 700c 	movw	r0, #61196	; 0xef0c
    d9c2:	f2c0 0001 	movt	r0, #1
    d9c6:	2210      	movs	r2, #16
    d9c8:	9901      	ldr	r1, [sp, #4]
    d9ca:	f009 f8f1 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d9ce:	defe      	udf	#254	; 0xfe

0000d9d0 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>:
    fn tick(&mut self) {
    d9d0:	b580      	push	{r7, lr}
    d9d2:	b084      	sub	sp, #16
    d9d4:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    d9d6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d9da:	2900      	cmp	r1, #0
    d9dc:	9002      	str	r0, [sp, #8]
    d9de:	d00f      	beq.n	da00 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
    d9e0:	e7ff      	b.n	d9e2 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x12>
            self.dt -= 1;
    d9e2:	9802      	ldr	r0, [sp, #8]
    d9e4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d9e8:	3901      	subs	r1, #1
    d9ea:	b2ca      	uxtb	r2, r1
    d9ec:	460b      	mov	r3, r1
    d9ee:	428a      	cmp	r2, r1
    d9f0:	9301      	str	r3, [sp, #4]
    d9f2:	d126      	bne.n	da42 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x72>
    d9f4:	e7ff      	b.n	d9f6 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x26>
    d9f6:	9801      	ldr	r0, [sp, #4]
    d9f8:	9902      	ldr	r1, [sp, #8]
    d9fa:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    d9fe:	e7ff      	b.n	da00 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
        if self.st > 0 {
    da00:	9802      	ldr	r0, [sp, #8]
    da02:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    da06:	2900      	cmp	r1, #0
    da08:	d019      	beq.n	da3e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    da0a:	e7ff      	b.n	da0c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x3c>
            self.st -= 1;
    da0c:	9802      	ldr	r0, [sp, #8]
    da0e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    da12:	3901      	subs	r1, #1
    da14:	b2ca      	uxtb	r2, r1
    da16:	460b      	mov	r3, r1
    da18:	428a      	cmp	r2, r1
    da1a:	9300      	str	r3, [sp, #0]
    da1c:	d11d      	bne.n	da5a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x8a>
    da1e:	e7ff      	b.n	da20 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x50>
    da20:	9800      	ldr	r0, [sp, #0]
    da22:	9902      	ldr	r1, [sp, #8]
    da24:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    da28:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    da2c:	2a00      	cmp	r2, #0
    da2e:	d105      	bne.n	da3c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
    da30:	e7ff      	b.n	da32 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x62>
                self.hw.beep();
    da32:	9802      	ldr	r0, [sp, #8]
    da34:	f7fc f8a1 	bl	9b7a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>
    da38:	e7ff      	b.n	da3a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6a>
            if self.st == 0 {
    da3a:	e7ff      	b.n	da3c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
        if self.st > 0 {
    da3c:	e7ff      	b.n	da3e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    }
    da3e:	b004      	add	sp, #16
    da40:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    da42:	f24e 6020 	movw	r0, #58912	; 0xe620
    da46:	f2c0 0001 	movt	r0, #1
    da4a:	f64e 721c 	movw	r2, #61212	; 0xef1c
    da4e:	f2c0 0201 	movt	r2, #1
    da52:	2121      	movs	r1, #33	; 0x21
    da54:	f009 f896 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da58:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    da5a:	f24e 6020 	movw	r0, #58912	; 0xe620
    da5e:	f2c0 0001 	movt	r0, #1
    da62:	f64e 722c 	movw	r2, #61228	; 0xef2c
    da66:	f2c0 0201 	movt	r2, #1
    da6a:	2121      	movs	r1, #33	; 0x21
    da6c:	f009 f88a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    da70:	defe      	udf	#254	; 0xfe

0000da72 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>:
    fn sched(&mut self) {
    da72:	b510      	push	{r4, lr}
    da74:	b098      	sub	sp, #96	; 0x60
    da76:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
    da78:	900b      	str	r0, [sp, #44]	; 0x2c
    da7a:	f7fc f882 	bl	9b82 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>
    da7e:	900a      	str	r0, [sp, #40]	; 0x28
    da80:	e7ff      	b.n	da82 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x10>
    da82:	980a      	ldr	r0, [sp, #40]	; 0x28
    da84:	07c1      	lsls	r1, r0, #31
    da86:	2900      	cmp	r1, #0
    da88:	d005      	beq.n	da96 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
    da8a:	e7ff      	b.n	da8c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x1a>
            self.shutdown();
    da8c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    da8e:	f000 f900 	bl	dc92 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>
    da92:	e7ff      	b.n	da94 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x22>
        if self.hw.sched() {
    da94:	e7ff      	b.n	da96 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
        if let Some(t) = self.time {
    da96:	980b      	ldr	r0, [sp, #44]	; 0x2c
    da98:	6801      	ldr	r1, [r0, #0]
    da9a:	2901      	cmp	r1, #1
    da9c:	d006      	beq.n	daac <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x3a>
    da9e:	e7ff      	b.n	daa0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x2e>
            self.time = Some(self.hw.clock());
    daa0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    daa2:	f7fc f808 	bl	9ab6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    daa6:	9109      	str	r1, [sp, #36]	; 0x24
    daa8:	9008      	str	r0, [sp, #32]
    daaa:	e040      	b.n	db2e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xbc>
        if let Some(t) = self.time {
    daac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    daae:	6881      	ldr	r1, [r0, #8]
    dab0:	68c2      	ldr	r2, [r0, #12]
    dab2:	9217      	str	r2, [sp, #92]	; 0x5c
    dab4:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    dab6:	9107      	str	r1, [sp, #28]
    dab8:	9206      	str	r2, [sp, #24]
    daba:	f7fb fffc 	bl	9ab6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    dabe:	9105      	str	r1, [sp, #20]
    dac0:	9004      	str	r0, [sp, #16]
    dac2:	e7ff      	b.n	dac4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x52>
    dac4:	9804      	ldr	r0, [sp, #16]
    dac6:	9905      	ldr	r1, [sp, #20]
    dac8:	9a07      	ldr	r2, [sp, #28]
    daca:	9b06      	ldr	r3, [sp, #24]
    dacc:	f005 f9be 	bl	12e4c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>
    dad0:	9103      	str	r1, [sp, #12]
    dad2:	9002      	str	r0, [sp, #8]
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x64>
    dad6:	f245 002b 	movw	r0, #20523	; 0x502b
    dada:	f2c0 00fe 	movt	r0, #254	; 0xfe
    dade:	9902      	ldr	r1, [sp, #8]
    dae0:	1a08      	subs	r0, r1, r0
    dae2:	9a03      	ldr	r2, [sp, #12]
    dae4:	f172 0300 	sbcs.w	r3, r2, #0
    dae8:	d320      	bcc.n	db2c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
    daea:	e7ff      	b.n	daec <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x7a>
                self.tick();
    daec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    daee:	f7ff ff6f 	bl	d9d0 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>
    daf2:	e7ff      	b.n	daf4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x82>
                self.time = Some(self.hw.clock());
    daf4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    daf6:	f7fb ffde 	bl	9ab6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    dafa:	9101      	str	r1, [sp, #4]
    dafc:	9000      	str	r0, [sp, #0]
    dafe:	e7ff      	b.n	db00 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x8e>
    db00:	9800      	ldr	r0, [sp, #0]
    db02:	900e      	str	r0, [sp, #56]	; 0x38
    db04:	9901      	ldr	r1, [sp, #4]
    db06:	910f      	str	r1, [sp, #60]	; 0x3c
    db08:	2200      	movs	r2, #0
    db0a:	920d      	str	r2, [sp, #52]	; 0x34
    db0c:	2201      	movs	r2, #1
    db0e:	920c      	str	r2, [sp, #48]	; 0x30
    db10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    db12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    db14:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    db18:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    db1c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db1e:	6063      	str	r3, [r4, #4]
    db20:	6022      	str	r2, [r4, #0]
    db22:	f8c4 e00c 	str.w	lr, [r4, #12]
    db26:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    db2a:	e7ff      	b.n	db2c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
        if let Some(t) = self.time {
    db2c:	e015      	b.n	db5a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
            self.time = Some(self.hw.clock());
    db2e:	9808      	ldr	r0, [sp, #32]
    db30:	9012      	str	r0, [sp, #72]	; 0x48
    db32:	9909      	ldr	r1, [sp, #36]	; 0x24
    db34:	9113      	str	r1, [sp, #76]	; 0x4c
    db36:	2200      	movs	r2, #0
    db38:	9211      	str	r2, [sp, #68]	; 0x44
    db3a:	2201      	movs	r2, #1
    db3c:	9210      	str	r2, [sp, #64]	; 0x40
    db3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    db40:	9b11      	ldr	r3, [sp, #68]	; 0x44
    db42:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    db46:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    db4a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    db4c:	6063      	str	r3, [r4, #4]
    db4e:	6022      	str	r2, [r4, #0]
    db50:	f8c4 e00c 	str.w	lr, [r4, #12]
    db54:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    db58:	e7ff      	b.n	db5a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
    }
    db5a:	b018      	add	sp, #96	; 0x60
    db5c:	bd10      	pop	{r4, pc}

0000db5e <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>:
    fn setup(&mut self) {
    db5e:	b580      	push	{r7, lr}
    db60:	b088      	sub	sp, #32
    db62:	9007      	str	r0, [sp, #28]
    db64:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    db68:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
    db6a:	f24e 01f4 	movw	r1, #57588	; 0xe0f4
    db6e:	f2c0 0101 	movt	r1, #1
    db72:	680a      	ldr	r2, [r1, #0]
    db74:	6849      	ldr	r1, [r1, #4]
    db76:	9005      	str	r0, [sp, #20]
    db78:	9104      	str	r1, [sp, #16]
    db7a:	4611      	mov	r1, r2
    db7c:	9a04      	ldr	r2, [sp, #16]
    db7e:	f7fb ff63 	bl	9a48 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>
    db82:	e7ff      	b.n	db84 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    db84:	9805      	ldr	r0, [sp, #20]
    db86:	f100 0147 	add.w	r1, r0, #71	; 0x47
    db8a:	f64e 70f8 	movw	r0, #61432	; 0xeff8
    db8e:	f2c0 0001 	movt	r0, #1
    db92:	2250      	movs	r2, #80	; 0x50
    db94:	9103      	str	r1, [sp, #12]
    db96:	4611      	mov	r1, r2
    db98:	f000 ff4e 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    db9c:	9002      	str	r0, [sp, #8]
    db9e:	e7ff      	b.n	dba0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x42>
    dba0:	9802      	ldr	r0, [sp, #8]
    dba2:	9006      	str	r0, [sp, #24]
    dba4:	9a06      	ldr	r2, [sp, #24]
    dba6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    dbaa:	9803      	ldr	r0, [sp, #12]
    dbac:	f001 fe0b 	bl	f7c6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    dbb0:	9001      	str	r0, [sp, #4]
    dbb2:	9100      	str	r1, [sp, #0]
    dbb4:	e7ff      	b.n	dbb6 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x58>
    dbb6:	f64e 72f8 	movw	r2, #61432	; 0xeff8
    dbba:	f2c0 0201 	movt	r2, #1
    dbbe:	2350      	movs	r3, #80	; 0x50
    dbc0:	9801      	ldr	r0, [sp, #4]
    dbc2:	9900      	ldr	r1, [sp, #0]
    dbc4:	f001 fd02 	bl	f5cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    dbc8:	e7ff      	b.n	dbca <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x6c>
    dbca:	f241 0047 	movw	r0, #4167	; 0x1047
    dbce:	2101      	movs	r1, #1
        self.running = true;
    dbd0:	9a05      	ldr	r2, [sp, #20]
    dbd2:	5411      	strb	r1, [r2, r0]
    }
    dbd4:	b008      	add	sp, #32
    dbd6:	bd80      	pop	{r7, pc}

0000dbd8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>:
    fn waitkey(&mut self) -> u8 {
    dbd8:	b580      	push	{r7, lr}
    dbda:	b08c      	sub	sp, #48	; 0x30
    dbdc:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    dbde:	9005      	str	r0, [sp, #20]
    dbe0:	e7ff      	b.n	dbe2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
    dbe2:	f241 0047 	movw	r0, #4167	; 0x1047
    dbe6:	9905      	ldr	r1, [sp, #20]
    dbe8:	5c08      	ldrb	r0, [r1, r0]
    dbea:	07c0      	lsls	r0, r0, #31
    dbec:	2800      	cmp	r0, #0
    dbee:	d104      	bne.n	dbfa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x22>
    dbf0:	e7ff      	b.n	dbf2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x1a>
    dbf2:	2020      	movs	r0, #32
        return b' ';
    dbf4:	f88d 001b 	strb.w	r0, [sp, #27]
    dbf8:	e047      	b.n	dc8a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
            self.sched();
    dbfa:	9805      	ldr	r0, [sp, #20]
    dbfc:	f7ff ff39 	bl	da72 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    dc00:	e7ff      	b.n	dc02 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x2a>
    dc02:	2000      	movs	r0, #0
            for i in 0..0xf {
    dc04:	f88d 001c 	strb.w	r0, [sp, #28]
    dc08:	200f      	movs	r0, #15
    dc0a:	f88d 001d 	strb.w	r0, [sp, #29]
    dc0e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    dc12:	f89d 101d 	ldrb.w	r1, [sp, #29]
    dc16:	f005 f9a2 	bl	12f5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>
    dc1a:	9004      	str	r0, [sp, #16]
    dc1c:	9103      	str	r1, [sp, #12]
    dc1e:	e7ff      	b.n	dc20 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x48>
    dc20:	9804      	ldr	r0, [sp, #16]
    dc22:	f88d 0020 	strb.w	r0, [sp, #32]
    dc26:	9903      	ldr	r1, [sp, #12]
    dc28:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    dc2c:	e7ff      	b.n	dc2e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
    dc2e:	a808      	add	r0, sp, #32
    dc30:	f005 f924 	bl	12e7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>
    dc34:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    dc38:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    dc3c:	e7ff      	b.n	dc3e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x66>
    dc3e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    dc42:	07c1      	lsls	r1, r0, #31
    dc44:	2900      	cmp	r1, #0
    dc46:	d001      	beq.n	dc4c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x74>
    dc48:	e7ff      	b.n	dc4a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x72>
    dc4a:	e001      	b.n	dc50 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x78>
        while self.running {
    dc4c:	e7c9      	b.n	dbe2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
            for i in 0..0xf {
    dc4e:	defe      	udf	#254	; 0xfe
    dc50:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    dc54:	4601      	mov	r1, r0
    dc56:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    dc5a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    dc5e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
    dc62:	9a05      	ldr	r2, [sp, #20]
    dc64:	9002      	str	r0, [sp, #8]
    dc66:	4610      	mov	r0, r2
    dc68:	9b02      	ldr	r3, [sp, #8]
    dc6a:	9101      	str	r1, [sp, #4]
    dc6c:	4619      	mov	r1, r3
    dc6e:	f7fb fcf4 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    dc72:	9000      	str	r0, [sp, #0]
    dc74:	e7ff      	b.n	dc76 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x9e>
    dc76:	9800      	ldr	r0, [sp, #0]
    dc78:	07c1      	lsls	r1, r0, #31
    dc7a:	2900      	cmp	r1, #0
    dc7c:	d101      	bne.n	dc82 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xaa>
    dc7e:	e7ff      	b.n	dc80 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa8>
            for i in 0..0xf {
    dc80:	e7d5      	b.n	dc2e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
                    return i;
    dc82:	9801      	ldr	r0, [sp, #4]
    dc84:	f88d 001b 	strb.w	r0, [sp, #27]
    dc88:	e7ff      	b.n	dc8a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
    }
    dc8a:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dc8e:	b00c      	add	sp, #48	; 0x30
    dc90:	bd80      	pop	{r7, pc}

0000dc92 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>:
    fn shutdown(&mut self) {
    dc92:	b081      	sub	sp, #4
    dc94:	9000      	str	r0, [sp, #0]
    dc96:	f241 0147 	movw	r1, #4167	; 0x1047
    dc9a:	2200      	movs	r2, #0
        self.running = false;
    dc9c:	5442      	strb	r2, [r0, r1]
    }
    dc9e:	b001      	add	sp, #4
    dca0:	4770      	bx	lr

0000dca2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>:
    dca2:	b580      	push	{r7, lr}
    dca4:	b084      	sub	sp, #16
    dca6:	4601      	mov	r1, r0
    dca8:	f88d 000f 	strb.w	r0, [sp, #15]
    dcac:	9102      	str	r1, [sp, #8]
    dcae:	f004 ff92 	bl	12bd6 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>
    dcb2:	9001      	str	r0, [sp, #4]
    dcb4:	e7ff      	b.n	dcb6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE+0x14>
    dcb6:	9801      	ldr	r0, [sp, #4]
    dcb8:	b004      	add	sp, #16
    dcba:	bd80      	pop	{r7, pc}

0000dcbc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>:
    dcbc:	b580      	push	{r7, lr}
    dcbe:	b086      	sub	sp, #24
    dcc0:	9004      	str	r0, [sp, #16]
    dcc2:	9105      	str	r1, [sp, #20]
    dcc4:	9002      	str	r0, [sp, #8]
    dcc6:	f000 f810 	bl	dcea <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>
    dcca:	9001      	str	r0, [sp, #4]
    dccc:	e7ff      	b.n	dcce <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x12>
    dcce:	9801      	ldr	r0, [sp, #4]
    dcd0:	07c1      	lsls	r1, r0, #31
    dcd2:	2900      	cmp	r1, #0
    dcd4:	d103      	bne.n	dcde <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x22>
    dcd6:	e7ff      	b.n	dcd8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x1c>
    dcd8:	2000      	movs	r0, #0
    dcda:	9003      	str	r0, [sp, #12]
    dcdc:	e002      	b.n	dce4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    dcde:	9802      	ldr	r0, [sp, #8]
    dce0:	9003      	str	r0, [sp, #12]
    dce2:	e7ff      	b.n	dce4 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    dce4:	9803      	ldr	r0, [sp, #12]
    dce6:	b006      	add	sp, #24
    dce8:	bd80      	pop	{r7, pc}

0000dcea <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>:
    dcea:	b580      	push	{r7, lr}
    dcec:	b08a      	sub	sp, #40	; 0x28
    dcee:	9008      	str	r0, [sp, #32]
    dcf0:	9109      	str	r1, [sp, #36]	; 0x24
    dcf2:	9103      	str	r1, [sp, #12]
    dcf4:	9002      	str	r0, [sp, #8]
    dcf6:	f000 f815 	bl	dd24 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>
    dcfa:	9105      	str	r1, [sp, #20]
    dcfc:	9004      	str	r0, [sp, #16]
    dcfe:	e7ff      	b.n	dd00 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x16>
    dd00:	9803      	ldr	r0, [sp, #12]
    dd02:	68c1      	ldr	r1, [r0, #12]
    dd04:	9802      	ldr	r0, [sp, #8]
    dd06:	4788      	blx	r1
    dd08:	9107      	str	r1, [sp, #28]
    dd0a:	9006      	str	r0, [sp, #24]
    dd0c:	e7ff      	b.n	dd0e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x24>
    dd0e:	a804      	add	r0, sp, #16
    dd10:	a906      	add	r1, sp, #24
    dd12:	f005 f92d 	bl	12f70 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>
    dd16:	9001      	str	r0, [sp, #4]
    dd18:	e7ff      	b.n	dd1a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x30>
    dd1a:	9801      	ldr	r0, [sp, #4]
    dd1c:	f000 0001 	and.w	r0, r0, #1
    dd20:	b00a      	add	sp, #40	; 0x28
    dd22:	bd80      	pop	{r7, pc}

0000dd24 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>:
    dd24:	b086      	sub	sp, #24
    dd26:	f249 40d9 	movw	r0, #38105	; 0x94d9
    dd2a:	f2c1 1010 	movt	r0, #4368	; 0x1110
    dd2e:	9005      	str	r0, [sp, #20]
    dd30:	f249 7064 	movw	r0, #38756	; 0x9764
    dd34:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    dd38:	9004      	str	r0, [sp, #16]
    dd3a:	9804      	ldr	r0, [sp, #16]
    dd3c:	9905      	ldr	r1, [sp, #20]
    dd3e:	9001      	str	r0, [sp, #4]
    dd40:	9100      	str	r1, [sp, #0]
    dd42:	e7ff      	b.n	dd44 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E+0x20>
    dd44:	9801      	ldr	r0, [sp, #4]
    dd46:	9002      	str	r0, [sp, #8]
    dd48:	9900      	ldr	r1, [sp, #0]
    dd4a:	9103      	str	r1, [sp, #12]
    dd4c:	9802      	ldr	r0, [sp, #8]
    dd4e:	9903      	ldr	r1, [sp, #12]
    dd50:	b006      	add	sp, #24
    dd52:	4770      	bx	lr

0000dd54 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>:
    dd54:	b580      	push	{r7, lr}
    dd56:	b084      	sub	sp, #16
    dd58:	9002      	str	r0, [sp, #8]
    dd5a:	9103      	str	r1, [sp, #12]
    dd5c:	f7ff ffae 	bl	dcbc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>
    dd60:	9001      	str	r0, [sp, #4]
    dd62:	e7ff      	b.n	dd64 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE+0x10>
    dd64:	9801      	ldr	r0, [sp, #4]
    dd66:	b004      	add	sp, #16
    dd68:	bd80      	pop	{r7, pc}

0000dd6a <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>:
    dd6a:	b580      	push	{r7, lr}
    dd6c:	b084      	sub	sp, #16
    dd6e:	680a      	ldr	r2, [r1, #0]
    dd70:	684b      	ldr	r3, [r1, #4]
    dd72:	6889      	ldr	r1, [r1, #8]
    dd74:	9103      	str	r1, [sp, #12]
    dd76:	9302      	str	r3, [sp, #8]
    dd78:	9201      	str	r2, [sp, #4]
    dd7a:	a901      	add	r1, sp, #4
    dd7c:	f000 f8d9 	bl	df32 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>
    dd80:	e7ff      	b.n	dd82 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E+0x18>
    dd82:	b004      	add	sp, #16
    dd84:	bd80      	pop	{r7, pc}

0000dd86 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>:
    dd86:	b083      	sub	sp, #12
    dd88:	9100      	str	r1, [sp, #0]
    dd8a:	9201      	str	r2, [sp, #4]
    dd8c:	9302      	str	r3, [sp, #8]
    dd8e:	6001      	str	r1, [r0, #0]
    dd90:	6042      	str	r2, [r0, #4]
    dd92:	6083      	str	r3, [r0, #8]
    dd94:	b003      	add	sp, #12
    dd96:	4770      	bx	lr

0000dd98 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>:
    dd98:	b083      	sub	sp, #12
    dd9a:	9100      	str	r1, [sp, #0]
    dd9c:	9201      	str	r2, [sp, #4]
    dd9e:	9302      	str	r3, [sp, #8]
    dda0:	6001      	str	r1, [r0, #0]
    dda2:	6042      	str	r2, [r0, #4]
    dda4:	6083      	str	r3, [r0, #8]
    dda6:	b003      	add	sp, #12
    dda8:	4770      	bx	lr

0000ddaa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>:
    ddaa:	680a      	ldr	r2, [r1, #0]
    ddac:	684b      	ldr	r3, [r1, #4]
    ddae:	6889      	ldr	r1, [r1, #8]
    ddb0:	6081      	str	r1, [r0, #8]
    ddb2:	6043      	str	r3, [r0, #4]
    ddb4:	6002      	str	r2, [r0, #0]
    ddb6:	4770      	bx	lr

0000ddb8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>:
    ddb8:	b580      	push	{r7, lr}
    ddba:	b086      	sub	sp, #24
    ddbc:	9105      	str	r1, [sp, #20]
    ddbe:	9004      	str	r0, [sp, #16]
    ddc0:	4608      	mov	r0, r1
    ddc2:	9103      	str	r1, [sp, #12]
    ddc4:	f000 fdd4 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ddc8:	9002      	str	r0, [sp, #8]
    ddca:	9101      	str	r1, [sp, #4]
    ddcc:	e7ff      	b.n	ddce <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x16>
    ddce:	9803      	ldr	r0, [sp, #12]
    ddd0:	f100 0308 	add.w	r3, r0, #8
    ddd4:	9804      	ldr	r0, [sp, #16]
    ddd6:	9902      	ldr	r1, [sp, #8]
    ddd8:	9a01      	ldr	r2, [sp, #4]
    ddda:	f000 f944 	bl	e066 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>
    ddde:	e7ff      	b.n	dde0 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x28>
    dde0:	b006      	add	sp, #24
    dde2:	bd80      	pop	{r7, pc}

0000dde4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>:
    dde4:	b580      	push	{r7, lr}
    dde6:	b086      	sub	sp, #24
    dde8:	9105      	str	r1, [sp, #20]
    ddea:	9004      	str	r0, [sp, #16]
    ddec:	4608      	mov	r0, r1
    ddee:	9103      	str	r1, [sp, #12]
    ddf0:	f000 fdbe 	bl	e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ddf4:	9002      	str	r0, [sp, #8]
    ddf6:	9101      	str	r1, [sp, #4]
    ddf8:	e7ff      	b.n	ddfa <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x16>
    ddfa:	9803      	ldr	r0, [sp, #12]
    ddfc:	f100 0308 	add.w	r3, r0, #8
    de00:	9804      	ldr	r0, [sp, #16]
    de02:	9902      	ldr	r1, [sp, #8]
    de04:	9a01      	ldr	r2, [sp, #4]
    de06:	f000 f97b 	bl	e100 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>
    de0a:	e7ff      	b.n	de0c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x28>
    de0c:	b006      	add	sp, #24
    de0e:	bd80      	pop	{r7, pc}

0000de10 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>:
    de10:	b580      	push	{r7, lr}
    de12:	b082      	sub	sp, #8
    de14:	9101      	str	r1, [sp, #4]
    de16:	f000 f803 	bl	de20 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>
    de1a:	e7ff      	b.n	de1c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE+0xc>
    de1c:	b002      	add	sp, #8
    de1e:	bd80      	pop	{r7, pc}

0000de20 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>:
    de20:	b580      	push	{r7, lr}
    de22:	b0a0      	sub	sp, #128	; 0x80
    de24:	911c      	str	r1, [sp, #112]	; 0x70
    de26:	9103      	str	r1, [sp, #12]
    de28:	9002      	str	r0, [sp, #8]
    de2a:	e7ff      	b.n	de2c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    de2c:	9803      	ldr	r0, [sp, #12]
    de2e:	68c1      	ldr	r1, [r0, #12]
    de30:	2901      	cmp	r1, #1
    de32:	d11e      	bne.n	de72 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    de34:	e7ff      	b.n	de36 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x16>
    de36:	9803      	ldr	r0, [sp, #12]
    de38:	f100 0110 	add.w	r1, r0, #16
    de3c:	911e      	str	r1, [sp, #120]	; 0x78
    de3e:	a804      	add	r0, sp, #16
    de40:	f7ff ffba 	bl	ddb8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    de44:	e7ff      	b.n	de46 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x26>
    de46:	9804      	ldr	r0, [sp, #16]
    de48:	2801      	cmp	r0, #1
    de4a:	d001      	beq.n	de50 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x30>
    de4c:	e7ff      	b.n	de4e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x2e>
    de4e:	e00f      	b.n	de70 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x50>
    de50:	9804      	ldr	r0, [sp, #16]
    de52:	9905      	ldr	r1, [sp, #20]
    de54:	9a06      	ldr	r2, [sp, #24]
    de56:	9209      	str	r2, [sp, #36]	; 0x24
    de58:	9108      	str	r1, [sp, #32]
    de5a:	9007      	str	r0, [sp, #28]
    de5c:	9807      	ldr	r0, [sp, #28]
    de5e:	9908      	ldr	r1, [sp, #32]
    de60:	9a09      	ldr	r2, [sp, #36]	; 0x24
    de62:	9b02      	ldr	r3, [sp, #8]
    de64:	609a      	str	r2, [r3, #8]
    de66:	6059      	str	r1, [r3, #4]
    de68:	6018      	str	r0, [r3, #0]
    de6a:	e7ff      	b.n	de6c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    de6c:	b020      	add	sp, #128	; 0x80
    de6e:	bd80      	pop	{r7, pc}
    de70:	e7ff      	b.n	de72 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    de72:	a80a      	add	r0, sp, #40	; 0x28
    de74:	9903      	ldr	r1, [sp, #12]
    de76:	f7ff ffb5 	bl	dde4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>
    de7a:	e7ff      	b.n	de7c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x5c>
    de7c:	980a      	ldr	r0, [sp, #40]	; 0x28
    de7e:	2800      	cmp	r0, #0
    de80:	d012      	beq.n	dea8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x88>
    de82:	e7ff      	b.n	de84 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x64>
    de84:	980b      	ldr	r0, [sp, #44]	; 0x2c
    de86:	990c      	ldr	r1, [sp, #48]	; 0x30
    de88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    de8a:	9211      	str	r2, [sp, #68]	; 0x44
    de8c:	9110      	str	r1, [sp, #64]	; 0x40
    de8e:	900f      	str	r0, [sp, #60]	; 0x3c
    de90:	980f      	ldr	r0, [sp, #60]	; 0x3c
    de92:	9910      	ldr	r1, [sp, #64]	; 0x40
    de94:	9a11      	ldr	r2, [sp, #68]	; 0x44
    de96:	921b      	str	r2, [sp, #108]	; 0x6c
    de98:	911a      	str	r1, [sp, #104]	; 0x68
    de9a:	9019      	str	r0, [sp, #100]	; 0x64
    de9c:	a816      	add	r0, sp, #88	; 0x58
    de9e:	a919      	add	r1, sp, #100	; 0x64
    dea0:	f7ff ff83 	bl	ddaa <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>
    dea4:	e028      	b.n	def8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd8>
    dea6:	defe      	udf	#254	; 0xfe
    dea8:	9803      	ldr	r0, [sp, #12]
    deaa:	301c      	adds	r0, #28
    deac:	f000 f9b4 	bl	e218 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>
    deb0:	9001      	str	r0, [sp, #4]
    deb2:	e7ff      	b.n	deb4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x94>
    deb4:	9801      	ldr	r0, [sp, #4]
    deb6:	f000 f9e9 	bl	e28c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>
    deba:	900e      	str	r0, [sp, #56]	; 0x38
    debc:	e7ff      	b.n	debe <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x9e>
    debe:	980e      	ldr	r0, [sp, #56]	; 0x38
    dec0:	fab0 f180 	clz	r1, r0
    dec4:	0949      	lsrs	r1, r1, #5
    dec6:	2800      	cmp	r0, #0
    dec8:	d101      	bne.n	dece <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xae>
    deca:	e7ff      	b.n	decc <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xac>
    decc:	e009      	b.n	dee2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc2>
    dece:	980e      	ldr	r0, [sp, #56]	; 0x38
    ded0:	901f      	str	r0, [sp, #124]	; 0x7c
    ded2:	9902      	ldr	r1, [sp, #8]
    ded4:	9000      	str	r0, [sp, #0]
    ded6:	4608      	mov	r0, r1
    ded8:	9900      	ldr	r1, [sp, #0]
    deda:	f7ff ff6d 	bl	ddb8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dede:	e00a      	b.n	def6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd6>
    dee0:	defe      	udf	#254	; 0xfe
    dee2:	f002 f9af 	bl	10244 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    dee6:	e7ff      	b.n	dee8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc8>
    dee8:	9802      	ldr	r0, [sp, #8]
    deea:	f000 f9ca 	bl	e282 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>
    deee:	e7ff      	b.n	def0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd0>
    def0:	e7ff      	b.n	def2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    def2:	e7ff      	b.n	def4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd4>
    def4:	e7ba      	b.n	de6c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    def6:	e7fc      	b.n	def2 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    def8:	9816      	ldr	r0, [sp, #88]	; 0x58
    defa:	9917      	ldr	r1, [sp, #92]	; 0x5c
    defc:	9a18      	ldr	r2, [sp, #96]	; 0x60
    defe:	9215      	str	r2, [sp, #84]	; 0x54
    df00:	9114      	str	r1, [sp, #80]	; 0x50
    df02:	9013      	str	r0, [sp, #76]	; 0x4c
    df04:	2001      	movs	r0, #1
    df06:	9012      	str	r0, [sp, #72]	; 0x48
    df08:	e7ff      	b.n	df0a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xea>
    df0a:	9812      	ldr	r0, [sp, #72]	; 0x48
    df0c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    df0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    df10:	9b15      	ldr	r3, [sp, #84]	; 0x54
    df12:	f8dd c00c 	ldr.w	ip, [sp, #12]
    df16:	f8cc 3018 	str.w	r3, [ip, #24]
    df1a:	f8cc 2014 	str.w	r2, [ip, #20]
    df1e:	f8cc 1010 	str.w	r1, [ip, #16]
    df22:	f8cc 000c 	str.w	r0, [ip, #12]
    df26:	980a      	ldr	r0, [sp, #40]	; 0x28
    df28:	2801      	cmp	r0, #1
    df2a:	d101      	bne.n	df30 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x110>
    df2c:	e7ff      	b.n	df2e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>
    df2e:	e77d      	b.n	de2c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    df30:	e7fd      	b.n	df2e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>

0000df32 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>:
    df32:	b5b0      	push	{r4, r5, r7, lr}
    df34:	b090      	sub	sp, #64	; 0x40
    df36:	680a      	ldr	r2, [r1, #0]
    df38:	684b      	ldr	r3, [r1, #4]
    df3a:	6889      	ldr	r1, [r1, #8]
    df3c:	910f      	str	r1, [sp, #60]	; 0x3c
    df3e:	930e      	str	r3, [sp, #56]	; 0x38
    df40:	920d      	str	r2, [sp, #52]	; 0x34
    df42:	a902      	add	r1, sp, #8
    df44:	aa0d      	add	r2, sp, #52	; 0x34
    df46:	9001      	str	r0, [sp, #4]
    df48:	4608      	mov	r0, r1
    df4a:	4611      	mov	r1, r2
    df4c:	f000 f80d 	bl	df6a <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>
    df50:	e7ff      	b.n	df52 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E+0x20>
    df52:	a802      	add	r0, sp, #8
    df54:	9901      	ldr	r1, [sp, #4]
    df56:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    df5a:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    df5e:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    df62:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    df66:	b010      	add	sp, #64	; 0x40
    df68:	bdb0      	pop	{r4, r5, r7, pc}

0000df6a <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>:
    df6a:	b08b      	sub	sp, #44	; 0x2c
    df6c:	680a      	ldr	r2, [r1, #0]
    df6e:	684b      	ldr	r3, [r1, #4]
    df70:	6889      	ldr	r1, [r1, #8]
    df72:	9102      	str	r1, [sp, #8]
    df74:	9301      	str	r3, [sp, #4]
    df76:	9200      	str	r2, [sp, #0]
    df78:	2100      	movs	r1, #0
    df7a:	9103      	str	r1, [sp, #12]
    df7c:	9107      	str	r1, [sp, #28]
    df7e:	9900      	ldr	r1, [sp, #0]
    df80:	9a01      	ldr	r2, [sp, #4]
    df82:	9b02      	ldr	r3, [sp, #8]
    df84:	6083      	str	r3, [r0, #8]
    df86:	6042      	str	r2, [r0, #4]
    df88:	6001      	str	r1, [r0, #0]
    df8a:	9903      	ldr	r1, [sp, #12]
    df8c:	9a04      	ldr	r2, [sp, #16]
    df8e:	9b05      	ldr	r3, [sp, #20]
    df90:	f8dd c018 	ldr.w	ip, [sp, #24]
    df94:	f8c0 c018 	str.w	ip, [r0, #24]
    df98:	6143      	str	r3, [r0, #20]
    df9a:	6102      	str	r2, [r0, #16]
    df9c:	60c1      	str	r1, [r0, #12]
    df9e:	9907      	ldr	r1, [sp, #28]
    dfa0:	9a08      	ldr	r2, [sp, #32]
    dfa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dfa4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    dfa8:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    dfac:	6243      	str	r3, [r0, #36]	; 0x24
    dfae:	6202      	str	r2, [r0, #32]
    dfb0:	61c1      	str	r1, [r0, #28]
    dfb2:	b00b      	add	sp, #44	; 0x2c
    dfb4:	4770      	bx	lr

0000dfb6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>:
    dfb6:	b5b0      	push	{r4, r5, r7, lr}
    dfb8:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    dfbc:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    dfc0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    dfc4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    dfc8:	bdb0      	pop	{r4, r5, r7, pc}

0000dfca <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>:
    dfca:	b510      	push	{r4, lr}
    dfcc:	b088      	sub	sp, #32
    dfce:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    dfd2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    dfd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    dfd8:	9102      	str	r1, [sp, #8]
    dfda:	9203      	str	r2, [sp, #12]
    dfdc:	9304      	str	r3, [sp, #16]
    dfde:	9405      	str	r4, [sp, #20]
    dfe0:	f8cd e018 	str.w	lr, [sp, #24]
    dfe4:	f8cd c01c 	str.w	ip, [sp, #28]
    dfe8:	f8cd e000 	str.w	lr, [sp]
    dfec:	f8cd c004 	str.w	ip, [sp, #4]
    dff0:	6001      	str	r1, [r0, #0]
    dff2:	6042      	str	r2, [r0, #4]
    dff4:	9900      	ldr	r1, [sp, #0]
    dff6:	9a01      	ldr	r2, [sp, #4]
    dff8:	6081      	str	r1, [r0, #8]
    dffa:	60c2      	str	r2, [r0, #12]
    dffc:	6103      	str	r3, [r0, #16]
    dffe:	6144      	str	r4, [r0, #20]
    e000:	b008      	add	sp, #32
    e002:	bd10      	pop	{r4, pc}

0000e004 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>:
    e004:	b580      	push	{r7, lr}
    e006:	b086      	sub	sp, #24
    e008:	f8dd c020 	ldr.w	ip, [sp, #32]
    e00c:	9102      	str	r1, [sp, #8]
    e00e:	9203      	str	r2, [sp, #12]
    e010:	9304      	str	r3, [sp, #16]
    e012:	f8cd c014 	str.w	ip, [sp, #20]
    e016:	f04f 0e00 	mov.w	lr, #0
    e01a:	f8cd e004 	str.w	lr, [sp, #4]
    e01e:	f8cd e000 	str.w	lr, [sp]
    e022:	f8cd e000 	str.w	lr, [sp]
    e026:	6001      	str	r1, [r0, #0]
    e028:	6042      	str	r2, [r0, #4]
    e02a:	9900      	ldr	r1, [sp, #0]
    e02c:	9a01      	ldr	r2, [sp, #4]
    e02e:	6081      	str	r1, [r0, #8]
    e030:	60c2      	str	r2, [r0, #12]
    e032:	6103      	str	r3, [r0, #16]
    e034:	f8c0 c014 	str.w	ip, [r0, #20]
    e038:	b006      	add	sp, #24
    e03a:	bd80      	pop	{r7, pc}

0000e03c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>:
    e03c:	b580      	push	{r7, lr}
    e03e:	b088      	sub	sp, #32
    e040:	9004      	str	r0, [sp, #16]
    e042:	9105      	str	r1, [sp, #20]
    e044:	9206      	str	r2, [sp, #24]
    e046:	9307      	str	r3, [sp, #28]
    e048:	9003      	str	r0, [sp, #12]
    e04a:	4610      	mov	r0, r2
    e04c:	9102      	str	r1, [sp, #8]
    e04e:	4619      	mov	r1, r3
    e050:	9a03      	ldr	r2, [sp, #12]
    e052:	9b02      	ldr	r3, [sp, #8]
    e054:	f001 f9f9 	bl	f44a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    e058:	9001      	str	r0, [sp, #4]
    e05a:	9100      	str	r1, [sp, #0]
    e05c:	e7ff      	b.n	e05e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE+0x22>
    e05e:	9801      	ldr	r0, [sp, #4]
    e060:	9900      	ldr	r1, [sp, #0]
    e062:	b008      	add	sp, #32
    e064:	bd80      	pop	{r7, pc}

0000e066 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>:
    e066:	b580      	push	{r7, lr}
    e068:	b08a      	sub	sp, #40	; 0x28
    e06a:	9104      	str	r1, [sp, #16]
    e06c:	9205      	str	r2, [sp, #20]
    e06e:	9308      	str	r3, [sp, #32]
    e070:	2100      	movs	r1, #0
    e072:	f88d 101e 	strb.w	r1, [sp, #30]
    e076:	f88d 101f 	strb.w	r1, [sp, #31]
    e07a:	2101      	movs	r1, #1
    e07c:	f88d 101f 	strb.w	r1, [sp, #31]
    e080:	f88d 101e 	strb.w	r1, [sp, #30]
    e084:	9904      	ldr	r1, [sp, #16]
    e086:	2900      	cmp	r1, #0
    e088:	9303      	str	r3, [sp, #12]
    e08a:	9002      	str	r0, [sp, #8]
    e08c:	d001      	beq.n	e092 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2c>
    e08e:	e7ff      	b.n	e090 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2a>
    e090:	e004      	b.n	e09c <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x36>
    e092:	2000      	movs	r0, #0
    e094:	9902      	ldr	r1, [sp, #8]
    e096:	6008      	str	r0, [r1, #0]
    e098:	e01f      	b.n	e0da <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    e09a:	defe      	udf	#254	; 0xfe
    e09c:	2000      	movs	r0, #0
    e09e:	f88d 001f 	strb.w	r0, [sp, #31]
    e0a2:	9905      	ldr	r1, [sp, #20]
    e0a4:	9109      	str	r1, [sp, #36]	; 0x24
    e0a6:	f88d 001e 	strb.w	r0, [sp, #30]
    e0aa:	9106      	str	r1, [sp, #24]
    e0ac:	9906      	ldr	r1, [sp, #24]
    e0ae:	9803      	ldr	r0, [sp, #12]
    e0b0:	f7fb fd9d 	bl	9bee <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>
    e0b4:	9001      	str	r0, [sp, #4]
    e0b6:	9100      	str	r1, [sp, #0]
    e0b8:	e7ff      	b.n	e0ba <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x54>
    e0ba:	9801      	ldr	r0, [sp, #4]
    e0bc:	9902      	ldr	r1, [sp, #8]
    e0be:	6048      	str	r0, [r1, #4]
    e0c0:	9a00      	ldr	r2, [sp, #0]
    e0c2:	608a      	str	r2, [r1, #8]
    e0c4:	2301      	movs	r3, #1
    e0c6:	600b      	str	r3, [r1, #0]
    e0c8:	e007      	b.n	e0da <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    e0ca:	9804      	ldr	r0, [sp, #16]
    e0cc:	2801      	cmp	r0, #1
    e0ce:	d00c      	beq.n	e0ea <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x84>
    e0d0:	e015      	b.n	e0fe <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x98>
    e0d2:	2000      	movs	r0, #0
    e0d4:	f88d 001e 	strb.w	r0, [sp, #30]
    e0d8:	e7f7      	b.n	e0ca <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    e0da:	f89d 001e 	ldrb.w	r0, [sp, #30]
    e0de:	07c0      	lsls	r0, r0, #31
    e0e0:	2800      	cmp	r0, #0
    e0e2:	d1f6      	bne.n	e0d2 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x6c>
    e0e4:	e7f1      	b.n	e0ca <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    e0e6:	b00a      	add	sp, #40	; 0x28
    e0e8:	bd80      	pop	{r7, pc}
    e0ea:	f89d 001f 	ldrb.w	r0, [sp, #31]
    e0ee:	07c0      	lsls	r0, r0, #31
    e0f0:	2800      	cmp	r0, #0
    e0f2:	d0f8      	beq.n	e0e6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    e0f4:	e7ff      	b.n	e0f6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x90>
    e0f6:	2000      	movs	r0, #0
    e0f8:	f88d 001f 	strb.w	r0, [sp, #31]
    e0fc:	e7f3      	b.n	e0e6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    e0fe:	e7f2      	b.n	e0e6 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>

0000e100 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>:
    e100:	b580      	push	{r7, lr}
    e102:	b08c      	sub	sp, #48	; 0x30
    e104:	9103      	str	r1, [sp, #12]
    e106:	9204      	str	r2, [sp, #16]
    e108:	930a      	str	r3, [sp, #40]	; 0x28
    e10a:	2100      	movs	r1, #0
    e10c:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    e110:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    e114:	2101      	movs	r1, #1
    e116:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    e11a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    e11e:	9903      	ldr	r1, [sp, #12]
    e120:	2900      	cmp	r1, #0
    e122:	9302      	str	r3, [sp, #8]
    e124:	9001      	str	r0, [sp, #4]
    e126:	d001      	beq.n	e12c <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2c>
    e128:	e7ff      	b.n	e12a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2a>
    e12a:	e004      	b.n	e136 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x36>
    e12c:	2000      	movs	r0, #0
    e12e:	9901      	ldr	r1, [sp, #4]
    e130:	6008      	str	r0, [r1, #0]
    e132:	e020      	b.n	e176 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    e134:	defe      	udf	#254	; 0xfe
    e136:	2000      	movs	r0, #0
    e138:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e13c:	9904      	ldr	r1, [sp, #16]
    e13e:	910b      	str	r1, [sp, #44]	; 0x2c
    e140:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e144:	9108      	str	r1, [sp, #32]
    e146:	9a08      	ldr	r2, [sp, #32]
    e148:	a805      	add	r0, sp, #20
    e14a:	9902      	ldr	r1, [sp, #8]
    e14c:	f7fb fd45 	bl	9bda <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>
    e150:	e7ff      	b.n	e152 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x52>
    e152:	9805      	ldr	r0, [sp, #20]
    e154:	9906      	ldr	r1, [sp, #24]
    e156:	9a07      	ldr	r2, [sp, #28]
    e158:	9b01      	ldr	r3, [sp, #4]
    e15a:	60da      	str	r2, [r3, #12]
    e15c:	6099      	str	r1, [r3, #8]
    e15e:	6058      	str	r0, [r3, #4]
    e160:	2001      	movs	r0, #1
    e162:	6018      	str	r0, [r3, #0]
    e164:	e007      	b.n	e176 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    e166:	9803      	ldr	r0, [sp, #12]
    e168:	2801      	cmp	r0, #1
    e16a:	d00c      	beq.n	e186 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x86>
    e16c:	e015      	b.n	e19a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x9a>
    e16e:	2000      	movs	r0, #0
    e170:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e174:	e7f7      	b.n	e166 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e176:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    e17a:	07c0      	lsls	r0, r0, #31
    e17c:	2800      	cmp	r0, #0
    e17e:	d1f6      	bne.n	e16e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x6e>
    e180:	e7f1      	b.n	e166 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e182:	b00c      	add	sp, #48	; 0x30
    e184:	bd80      	pop	{r7, pc}
    e186:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    e18a:	07c0      	lsls	r0, r0, #31
    e18c:	2800      	cmp	r0, #0
    e18e:	d0f8      	beq.n	e182 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e190:	e7ff      	b.n	e192 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x92>
    e192:	2000      	movs	r0, #0
    e194:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e198:	e7f3      	b.n	e182 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e19a:	e7f2      	b.n	e182 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>

0000e19c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>:
    e19c:	b085      	sub	sp, #20
    e19e:	9000      	str	r0, [sp, #0]
    e1a0:	2000      	movs	r0, #0
    e1a2:	f88d 000b 	strb.w	r0, [sp, #11]
    e1a6:	f88d 000a 	strb.w	r0, [sp, #10]
    e1aa:	2001      	movs	r0, #1
    e1ac:	f88d 000b 	strb.w	r0, [sp, #11]
    e1b0:	f88d 000a 	strb.w	r0, [sp, #10]
    e1b4:	9800      	ldr	r0, [sp, #0]
    e1b6:	2800      	cmp	r0, #0
    e1b8:	4601      	mov	r1, r0
    e1ba:	bf18      	it	ne
    e1bc:	2101      	movne	r1, #1
    e1be:	2800      	cmp	r0, #0
    e1c0:	d001      	beq.n	e1c6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x2a>
    e1c2:	e7ff      	b.n	e1c4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x28>
    e1c4:	e005      	b.n	e1d2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x36>
    e1c6:	2000      	movs	r0, #0
    e1c8:	f88d 000a 	strb.w	r0, [sp, #10]
    e1cc:	9001      	str	r0, [sp, #4]
    e1ce:	e007      	b.n	e1e0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e1d0:	defe      	udf	#254	; 0xfe
    e1d2:	2000      	movs	r0, #0
    e1d4:	f88d 000b 	strb.w	r0, [sp, #11]
    e1d8:	9800      	ldr	r0, [sp, #0]
    e1da:	9004      	str	r0, [sp, #16]
    e1dc:	9001      	str	r0, [sp, #4]
    e1de:	e7ff      	b.n	e1e0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e1e0:	f89d 000a 	ldrb.w	r0, [sp, #10]
    e1e4:	07c0      	lsls	r0, r0, #31
    e1e6:	2800      	cmp	r0, #0
    e1e8:	d104      	bne.n	e1f4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x58>
    e1ea:	e7ff      	b.n	e1ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e1ec:	9800      	ldr	r0, [sp, #0]
    e1ee:	2800      	cmp	r0, #0
    e1f0:	d107      	bne.n	e202 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x66>
    e1f2:	e010      	b.n	e216 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x7a>
    e1f4:	2000      	movs	r0, #0
    e1f6:	f88d 000a 	strb.w	r0, [sp, #10]
    e1fa:	e7f7      	b.n	e1ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e1fc:	9801      	ldr	r0, [sp, #4]
    e1fe:	b005      	add	sp, #20
    e200:	4770      	bx	lr
    e202:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e206:	07c0      	lsls	r0, r0, #31
    e208:	2800      	cmp	r0, #0
    e20a:	d0f7      	beq.n	e1fc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e20c:	e7ff      	b.n	e20e <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x72>
    e20e:	2000      	movs	r0, #0
    e210:	f88d 000b 	strb.w	r0, [sp, #11]
    e214:	e7f2      	b.n	e1fc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e216:	e7f1      	b.n	e1fc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>

0000e218 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>:
    e218:	b084      	sub	sp, #16
    e21a:	9002      	str	r0, [sp, #8]
    e21c:	6801      	ldr	r1, [r0, #0]
    e21e:	2900      	cmp	r1, #0
    e220:	9000      	str	r0, [sp, #0]
    e222:	d001      	beq.n	e228 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x10>
    e224:	e7ff      	b.n	e226 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0xe>
    e226:	e003      	b.n	e230 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x18>
    e228:	2000      	movs	r0, #0
    e22a:	9001      	str	r0, [sp, #4]
    e22c:	e005      	b.n	e23a <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e22e:	defe      	udf	#254	; 0xfe
    e230:	9800      	ldr	r0, [sp, #0]
    e232:	1d01      	adds	r1, r0, #4
    e234:	9103      	str	r1, [sp, #12]
    e236:	9101      	str	r1, [sp, #4]
    e238:	e7ff      	b.n	e23a <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e23a:	9801      	ldr	r0, [sp, #4]
    e23c:	b004      	add	sp, #16
    e23e:	4770      	bx	lr

0000e240 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>:
    e240:	b084      	sub	sp, #16
    e242:	9002      	str	r0, [sp, #8]
    e244:	9802      	ldr	r0, [sp, #8]
    e246:	2800      	cmp	r0, #0
    e248:	4602      	mov	r2, r0
    e24a:	bf18      	it	ne
    e24c:	2201      	movne	r2, #1
    e24e:	2800      	cmp	r0, #0
    e250:	9101      	str	r1, [sp, #4]
    e252:	d001      	beq.n	e258 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x18>
    e254:	e7ff      	b.n	e256 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x16>
    e256:	e009      	b.n	e26c <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x2c>
    e258:	f64e 703c 	movw	r0, #61244	; 0xef3c
    e25c:	f2c0 0001 	movt	r0, #1
    e260:	212b      	movs	r1, #43	; 0x2b
    e262:	9a01      	ldr	r2, [sp, #4]
    e264:	f008 fc8e 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e268:	defe      	udf	#254	; 0xfe
    e26a:	defe      	udf	#254	; 0xfe
    e26c:	9802      	ldr	r0, [sp, #8]
    e26e:	9003      	str	r0, [sp, #12]
    e270:	9902      	ldr	r1, [sp, #8]
    e272:	2900      	cmp	r1, #0
    e274:	9000      	str	r0, [sp, #0]
    e276:	d003      	beq.n	e280 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x40>
    e278:	e7ff      	b.n	e27a <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>
    e27a:	9800      	ldr	r0, [sp, #0]
    e27c:	b004      	add	sp, #16
    e27e:	4770      	bx	lr
    e280:	e7fb      	b.n	e27a <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>

0000e282 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>:
    e282:	b081      	sub	sp, #4
    e284:	2100      	movs	r1, #0
    e286:	6001      	str	r1, [r0, #0]
    e288:	b001      	add	sp, #4
    e28a:	4770      	bx	lr

0000e28c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>:
    e28c:	b580      	push	{r7, lr}
    e28e:	b082      	sub	sp, #8
    e290:	9001      	str	r0, [sp, #4]
    e292:	f7ff ff83 	bl	e19c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>
    e296:	9000      	str	r0, [sp, #0]
    e298:	e7ff      	b.n	e29a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E+0xe>
    e29a:	9800      	ldr	r0, [sp, #0]
    e29c:	b002      	add	sp, #8
    e29e:	bd80      	pop	{r7, pc}

0000e2a0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    e2a0:	b580      	push	{r7, lr}
    e2a2:	b084      	sub	sp, #16
    e2a4:	9002      	str	r0, [sp, #8]
    e2a6:	9103      	str	r1, [sp, #12]
    e2a8:	6800      	ldr	r0, [r0, #0]
    e2aa:	f000 f88c 	bl	e3c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    e2ae:	9001      	str	r0, [sp, #4]
    e2b0:	e7ff      	b.n	e2b2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    e2b2:	9801      	ldr	r0, [sp, #4]
    e2b4:	f000 0001 	and.w	r0, r0, #1
    e2b8:	b004      	add	sp, #16
    e2ba:	bd80      	pop	{r7, pc}

0000e2bc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    e2bc:	b580      	push	{r7, lr}
    e2be:	b084      	sub	sp, #16
    e2c0:	9002      	str	r0, [sp, #8]
    e2c2:	9103      	str	r1, [sp, #12]
    e2c4:	f000 f827 	bl	e316 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    e2c8:	9001      	str	r0, [sp, #4]
    e2ca:	e7ff      	b.n	e2cc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    e2cc:	9801      	ldr	r0, [sp, #4]
    e2ce:	b004      	add	sp, #16
    e2d0:	bd80      	pop	{r7, pc}

0000e2d2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    e2d2:	b085      	sub	sp, #20
    e2d4:	9003      	str	r0, [sp, #12]
    e2d6:	9104      	str	r1, [sp, #16]
    e2d8:	6802      	ldr	r2, [r0, #0]
    e2da:	680b      	ldr	r3, [r1, #0]
    e2dc:	429a      	cmp	r2, r3
    e2de:	9101      	str	r1, [sp, #4]
    e2e0:	9000      	str	r0, [sp, #0]
    e2e2:	db07      	blt.n	e2f4 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    e2e4:	e7ff      	b.n	e2e6 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    e2e6:	9800      	ldr	r0, [sp, #0]
    e2e8:	6801      	ldr	r1, [r0, #0]
    e2ea:	9a01      	ldr	r2, [sp, #4]
    e2ec:	6813      	ldr	r3, [r2, #0]
    e2ee:	4299      	cmp	r1, r3
    e2f0:	d008      	beq.n	e304 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    e2f2:	e003      	b.n	e2fc <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    e2f4:	20ff      	movs	r0, #255	; 0xff
    e2f6:	f88d 000b 	strb.w	r0, [sp, #11]
    e2fa:	e008      	b.n	e30e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e2fc:	2001      	movs	r0, #1
    e2fe:	f88d 000b 	strb.w	r0, [sp, #11]
    e302:	e003      	b.n	e30c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e304:	2000      	movs	r0, #0
    e306:	f88d 000b 	strb.w	r0, [sp, #11]
    e30a:	e7ff      	b.n	e30c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e30c:	e7ff      	b.n	e30e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e30e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e312:	b005      	add	sp, #20
    e314:	4770      	bx	lr

0000e316 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    e316:	b580      	push	{r7, lr}
    e318:	b088      	sub	sp, #32
    e31a:	9000      	str	r0, [sp, #0]
    e31c:	9101      	str	r1, [sp, #4]
    e31e:	2000      	movs	r0, #0
    e320:	f88d 001b 	strb.w	r0, [sp, #27]
    e324:	f88d 001a 	strb.w	r0, [sp, #26]
    e328:	2001      	movs	r0, #1
    e32a:	f88d 001b 	strb.w	r0, [sp, #27]
    e32e:	f88d 001a 	strb.w	r0, [sp, #26]
    e332:	4668      	mov	r0, sp
    e334:	9004      	str	r0, [sp, #16]
    e336:	a801      	add	r0, sp, #4
    e338:	9005      	str	r0, [sp, #20]
    e33a:	9804      	ldr	r0, [sp, #16]
    e33c:	9905      	ldr	r1, [sp, #20]
    e33e:	f000 f895 	bl	e46c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    e342:	f88d 000f 	strb.w	r0, [sp, #15]
    e346:	e7ff      	b.n	e348 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    e348:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    e34c:	1c41      	adds	r1, r0, #1
    e34e:	2902      	cmp	r1, #2
    e350:	d307      	bcc.n	e362 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    e352:	e7ff      	b.n	e354 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    e354:	2000      	movs	r0, #0
    e356:	f88d 001b 	strb.w	r0, [sp, #27]
    e35a:	9800      	ldr	r0, [sp, #0]
    e35c:	9002      	str	r0, [sp, #8]
    e35e:	e006      	b.n	e36e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e360:	defe      	udf	#254	; 0xfe
    e362:	2000      	movs	r0, #0
    e364:	f88d 001a 	strb.w	r0, [sp, #26]
    e368:	9801      	ldr	r0, [sp, #4]
    e36a:	9002      	str	r0, [sp, #8]
    e36c:	e7ff      	b.n	e36e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e36e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    e372:	07c0      	lsls	r0, r0, #31
    e374:	2800      	cmp	r0, #0
    e376:	d109      	bne.n	e38c <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    e378:	e7ff      	b.n	e37a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e37a:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e37e:	07c0      	lsls	r0, r0, #31
    e380:	2800      	cmp	r0, #0
    e382:	d107      	bne.n	e394 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    e384:	e7ff      	b.n	e386 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    e386:	9802      	ldr	r0, [sp, #8]
    e388:	b008      	add	sp, #32
    e38a:	bd80      	pop	{r7, pc}
    e38c:	2000      	movs	r0, #0
    e38e:	f88d 001a 	strb.w	r0, [sp, #26]
    e392:	e7f2      	b.n	e37a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e394:	2000      	movs	r0, #0
    e396:	f88d 001b 	strb.w	r0, [sp, #27]
    e39a:	e7f4      	b.n	e386 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000e39c <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    e39c:	b089      	sub	sp, #36	; 0x24
    e39e:	9005      	str	r0, [sp, #20]
    e3a0:	9106      	str	r1, [sp, #24]
    e3a2:	9107      	str	r1, [sp, #28]
    e3a4:	9907      	ldr	r1, [sp, #28]
    e3a6:	9002      	str	r0, [sp, #8]
    e3a8:	9101      	str	r1, [sp, #4]
    e3aa:	e7ff      	b.n	e3ac <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    e3ac:	9802      	ldr	r0, [sp, #8]
    e3ae:	9008      	str	r0, [sp, #32]
    e3b0:	9908      	ldr	r1, [sp, #32]
    e3b2:	9100      	str	r1, [sp, #0]
    e3b4:	e7ff      	b.n	e3b6 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    e3b6:	9800      	ldr	r0, [sp, #0]
    e3b8:	9003      	str	r0, [sp, #12]
    e3ba:	9901      	ldr	r1, [sp, #4]
    e3bc:	9104      	str	r1, [sp, #16]
    e3be:	9803      	ldr	r0, [sp, #12]
    e3c0:	9904      	ldr	r1, [sp, #16]
    e3c2:	b009      	add	sp, #36	; 0x24
    e3c4:	4770      	bx	lr

0000e3c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    e3c6:	b580      	push	{r7, lr}
    e3c8:	b088      	sub	sp, #32
    e3ca:	9006      	str	r0, [sp, #24]
    e3cc:	9107      	str	r1, [sp, #28]
    e3ce:	9004      	str	r0, [sp, #16]
    e3d0:	4608      	mov	r0, r1
    e3d2:	9103      	str	r1, [sp, #12]
    e3d4:	f009 fa77 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    e3d8:	9002      	str	r0, [sp, #8]
    e3da:	e7ff      	b.n	e3dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    e3dc:	9802      	ldr	r0, [sp, #8]
    e3de:	07c1      	lsls	r1, r0, #31
    e3e0:	2900      	cmp	r1, #0
    e3e2:	d105      	bne.n	e3f0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    e3e4:	e7ff      	b.n	e3e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    e3e6:	9803      	ldr	r0, [sp, #12]
    e3e8:	f009 fa71 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    e3ec:	9001      	str	r0, [sp, #4]
    e3ee:	e007      	b.n	e400 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    e3f0:	9804      	ldr	r0, [sp, #16]
    e3f2:	9903      	ldr	r1, [sp, #12]
    e3f4:	f00a f891 	bl	1851a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    e3f8:	f88d 0017 	strb.w	r0, [sp, #23]
    e3fc:	e7ff      	b.n	e3fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    e3fe:	e015      	b.n	e42c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e400:	9801      	ldr	r0, [sp, #4]
    e402:	07c1      	lsls	r1, r0, #31
    e404:	2900      	cmp	r1, #0
    e406:	d107      	bne.n	e418 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    e408:	e7ff      	b.n	e40a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    e40a:	9804      	ldr	r0, [sp, #16]
    e40c:	9903      	ldr	r1, [sp, #12]
    e40e:	f00a f9ff 	bl	18810 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    e412:	f88d 0017 	strb.w	r0, [sp, #23]
    e416:	e007      	b.n	e428 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    e418:	9804      	ldr	r0, [sp, #16]
    e41a:	9903      	ldr	r1, [sp, #12]
    e41c:	f00a f8e8 	bl	185f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    e420:	f88d 0017 	strb.w	r0, [sp, #23]
    e424:	e7ff      	b.n	e426 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    e426:	e000      	b.n	e42a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e428:	e7ff      	b.n	e42a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e42a:	e7ff      	b.n	e42c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e42c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e430:	b008      	add	sp, #32
    e432:	bd80      	pop	{r7, pc}

0000e434 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    e434:	b580      	push	{r7, lr}
    e436:	b086      	sub	sp, #24
    e438:	f8dd c020 	ldr.w	ip, [sp, #32]
    e43c:	9102      	str	r1, [sp, #8]
    e43e:	9203      	str	r2, [sp, #12]
    e440:	9304      	str	r3, [sp, #16]
    e442:	f8cd c014 	str.w	ip, [sp, #20]
    e446:	f04f 0e00 	mov.w	lr, #0
    e44a:	f8cd e004 	str.w	lr, [sp, #4]
    e44e:	f8cd e000 	str.w	lr, [sp]
    e452:	f8cd e000 	str.w	lr, [sp]
    e456:	6001      	str	r1, [r0, #0]
    e458:	6042      	str	r2, [r0, #4]
    e45a:	9900      	ldr	r1, [sp, #0]
    e45c:	9a01      	ldr	r2, [sp, #4]
    e45e:	6081      	str	r1, [r0, #8]
    e460:	60c2      	str	r2, [r0, #12]
    e462:	6103      	str	r3, [r0, #16]
    e464:	f8c0 c014 	str.w	ip, [r0, #20]
    e468:	b006      	add	sp, #24
    e46a:	bd80      	pop	{r7, pc}

0000e46c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    e46c:	b580      	push	{r7, lr}
    e46e:	b084      	sub	sp, #16
    e470:	9001      	str	r0, [sp, #4]
    e472:	9102      	str	r1, [sp, #8]
    e474:	9801      	ldr	r0, [sp, #4]
    e476:	9902      	ldr	r1, [sp, #8]
    e478:	f7ff ff2b 	bl	e2d2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    e47c:	9000      	str	r0, [sp, #0]
    e47e:	e7ff      	b.n	e480 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    e480:	9800      	ldr	r0, [sp, #0]
    e482:	b004      	add	sp, #16
    e484:	bd80      	pop	{r7, pc}

0000e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    e486:	b084      	sub	sp, #16
    e488:	9002      	str	r0, [sp, #8]
    e48a:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    e48c:	9000      	str	r0, [sp, #0]
    e48e:	9101      	str	r1, [sp, #4]
        }
    e490:	9800      	ldr	r0, [sp, #0]
    e492:	9901      	ldr	r1, [sp, #4]
    e494:	b004      	add	sp, #16
    e496:	4770      	bx	lr

0000e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    e498:	b580      	push	{r7, lr}
    e49a:	b096      	sub	sp, #88	; 0x58
    e49c:	9109      	str	r1, [sp, #36]	; 0x24
    e49e:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    e4a0:	9909      	ldr	r1, [sp, #36]	; 0x24
    e4a2:	2900      	cmp	r1, #0
    e4a4:	9008      	str	r0, [sp, #32]
    e4a6:	9107      	str	r1, [sp, #28]
    e4a8:	d018      	beq.n	e4dc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    e4aa:	e7ff      	b.n	e4ac <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    e4ac:	9807      	ldr	r0, [sp, #28]
    e4ae:	2801      	cmp	r0, #1
    e4b0:	d017      	beq.n	e4e2 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    e4b2:	e7ff      	b.n	e4b4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    e4b4:	f64e 70e4 	movw	r0, #61412	; 0xefe4
    e4b8:	f2c0 0001 	movt	r0, #1
    e4bc:	6801      	ldr	r1, [r0, #0]
    e4be:	a809      	add	r0, sp, #36	; 0x24
    e4c0:	9013      	str	r0, [sp, #76]	; 0x4c
    e4c2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e4c4:	9015      	str	r0, [sp, #84]	; 0x54
    e4c6:	f648 1205 	movw	r2, #35077	; 0x8905
    e4ca:	f2c0 0201 	movt	r2, #1
    e4ce:	9106      	str	r1, [sp, #24]
    e4d0:	4611      	mov	r1, r2
    e4d2:	f7ff ff63 	bl	e39c <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    e4d6:	9005      	str	r0, [sp, #20]
    e4d8:	9104      	str	r1, [sp, #16]
    e4da:	e006      	b.n	e4ea <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    e4dc:	9808      	ldr	r0, [sp, #32]
    e4de:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    e4e0:	e020      	b.n	e524 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    e4e2:	9808      	ldr	r0, [sp, #32]
    e4e4:	1d01      	adds	r1, r0, #4
    e4e6:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    e4e8:	e01c      	b.n	e524 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    e4ea:	9805      	ldr	r0, [sp, #20]
    e4ec:	9011      	str	r0, [sp, #68]	; 0x44
    e4ee:	9904      	ldr	r1, [sp, #16]
    e4f0:	9112      	str	r1, [sp, #72]	; 0x48
    e4f2:	466a      	mov	r2, sp
    e4f4:	2301      	movs	r3, #1
    e4f6:	6013      	str	r3, [r2, #0]
    e4f8:	a80b      	add	r0, sp, #44	; 0x2c
    e4fa:	aa11      	add	r2, sp, #68	; 0x44
    e4fc:	9906      	ldr	r1, [sp, #24]
    e4fe:	9203      	str	r2, [sp, #12]
    e500:	461a      	mov	r2, r3
    e502:	9b03      	ldr	r3, [sp, #12]
    e504:	f7ff ff96 	bl	e434 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    e508:	e7ff      	b.n	e50a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    e50a:	f64e 70e8 	movw	r0, #61416	; 0xefe8
    e50e:	f2c0 0001 	movt	r0, #1
    e512:	f008 fb30 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e516:	9002      	str	r0, [sp, #8]
    e518:	e7ff      	b.n	e51a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    e51a:	a80b      	add	r0, sp, #44	; 0x2c
    e51c:	9902      	ldr	r1, [sp, #8]
    e51e:	f008 fb67 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e522:	defe      	udf	#254	; 0xfe
            match idx {
    e524:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    e526:	b016      	add	sp, #88	; 0x58
    e528:	bd80      	pop	{r7, pc}

0000e52a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    e52a:	b580      	push	{r7, lr}
    e52c:	b088      	sub	sp, #32
    e52e:	9006      	str	r0, [sp, #24]
    e530:	9107      	str	r1, [sp, #28]
    e532:	a806      	add	r0, sp, #24
    e534:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    e536:	f7ff ffaf 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e53a:	9005      	str	r0, [sp, #20]
    e53c:	e7ff      	b.n	e53e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    e53e:	9805      	ldr	r0, [sp, #20]
    e540:	6800      	ldr	r0, [r0, #0]
    e542:	2100      	movs	r1, #0
    e544:	f7ff feba 	bl	e2bc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e548:	9004      	str	r0, [sp, #16]
    e54a:	e7ff      	b.n	e54c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    e54c:	a806      	add	r0, sp, #24
    e54e:	2101      	movs	r1, #1
    e550:	f7ff ffa2 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e554:	9003      	str	r0, [sp, #12]
    e556:	e7ff      	b.n	e558 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    e558:	9803      	ldr	r0, [sp, #12]
    e55a:	6800      	ldr	r0, [r0, #0]
    e55c:	2100      	movs	r1, #0
    e55e:	f7ff fead 	bl	e2bc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e562:	9002      	str	r0, [sp, #8]
    e564:	e7ff      	b.n	e566 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    e566:	9804      	ldr	r0, [sp, #16]
    e568:	9902      	ldr	r1, [sp, #8]
    e56a:	f000 f84e 	bl	e60a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    e56e:	9001      	str	r0, [sp, #4]
    e570:	9100      	str	r1, [sp, #0]
    e572:	e7ff      	b.n	e574 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    e574:	9801      	ldr	r0, [sp, #4]
    e576:	9900      	ldr	r1, [sp, #0]
    e578:	b008      	add	sp, #32
    e57a:	bd80      	pop	{r7, pc}

0000e57c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    e57c:	b08b      	sub	sp, #44	; 0x2c
    e57e:	4601      	mov	r1, r0
    e580:	f8ad 0020 	strh.w	r0, [sp, #32]
    e584:	0c00      	lsrs	r0, r0, #16
    e586:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    e58a:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    e58e:	f88d 001e 	strb.w	r0, [sp, #30]
    e592:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    e596:	f8ad 001c 	strh.w	r0, [sp, #28]
    e59a:	f89d 001c 	ldrb.w	r0, [sp, #28]
    e59e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e5a2:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e5a6:	4613      	mov	r3, r2
    e5a8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    e5ac:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e5b0:	4694      	mov	ip, r2
    e5b2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    e5b6:	0200      	lsls	r0, r0, #8
    e5b8:	9306      	str	r3, [sp, #24]
    e5ba:	f8cd c014 	str.w	ip, [sp, #20]
    e5be:	9004      	str	r0, [sp, #16]
    e5c0:	e7ff      	b.n	e5c2 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    e5c2:	9804      	ldr	r0, [sp, #16]
    e5c4:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    e5c8:	9a06      	ldr	r2, [sp, #24]
    e5ca:	b2d3      	uxtb	r3, r2
    e5cc:	00db      	lsls	r3, r3, #3
    e5ce:	9103      	str	r1, [sp, #12]
    e5d0:	9302      	str	r3, [sp, #8]
    e5d2:	e7ff      	b.n	e5d4 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    e5d4:	9802      	ldr	r0, [sp, #8]
    e5d6:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    e5da:	9a03      	ldr	r2, [sp, #12]
    e5dc:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    e5de:	9b05      	ldr	r3, [sp, #20]
    e5e0:	fa5f fc83 	uxtb.w	ip, r3
    e5e4:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    e5e8:	9101      	str	r1, [sp, #4]
    e5ea:	f8cd c000 	str.w	ip, [sp]
    e5ee:	e7ff      	b.n	e5f0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    e5f0:	9800      	ldr	r0, [sp, #0]
    e5f2:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    e5f6:	9a01      	ldr	r2, [sp, #4]
    e5f8:	4311      	orrs	r1, r2
    e5fa:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    e5fe:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    e602:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    e606:	b00b      	add	sp, #44	; 0x2c
    e608:	4770      	bx	lr

0000e60a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    e60a:	b084      	sub	sp, #16
    e60c:	9002      	str	r0, [sp, #8]
    e60e:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    e610:	9000      	str	r0, [sp, #0]
    e612:	9101      	str	r1, [sp, #4]
        }
    e614:	9800      	ldr	r0, [sp, #0]
    e616:	9901      	ldr	r1, [sp, #4]
    e618:	b004      	add	sp, #16
    e61a:	4770      	bx	lr

0000e61c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    e61c:	b580      	push	{r7, lr}
    e61e:	b088      	sub	sp, #32
    e620:	9005      	str	r0, [sp, #20]
    e622:	9106      	str	r1, [sp, #24]
    e624:	9003      	str	r0, [sp, #12]
    e626:	4608      	mov	r0, r1
    e628:	f000 fa21 	bl	ea6e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    e62c:	9004      	str	r0, [sp, #16]
    e62e:	e7ff      	b.n	e630 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    e630:	9804      	ldr	r0, [sp, #16]
    e632:	9007      	str	r0, [sp, #28]
    e634:	9903      	ldr	r1, [sp, #12]
    e636:	680a      	ldr	r2, [r1, #0]
    e638:	9002      	str	r0, [sp, #8]
    e63a:	4610      	mov	r0, r2
    e63c:	9902      	ldr	r1, [sp, #8]
    e63e:	f000 f837 	bl	e6b0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    e642:	9001      	str	r0, [sp, #4]
    e644:	9100      	str	r1, [sp, #0]
    e646:	e7ff      	b.n	e648 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    e648:	9801      	ldr	r0, [sp, #4]
    e64a:	9900      	ldr	r1, [sp, #0]
    e64c:	b008      	add	sp, #32
    e64e:	bd80      	pop	{r7, pc}

0000e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    e650:	b580      	push	{r7, lr}
    e652:	b084      	sub	sp, #16
    e654:	9001      	str	r0, [sp, #4]
    e656:	9102      	str	r1, [sp, #8]
    e658:	9203      	str	r2, [sp, #12]
    e65a:	9000      	str	r0, [sp, #0]
    e65c:	4608      	mov	r0, r1
    e65e:	9900      	ldr	r1, [sp, #0]
    e660:	f00e fe64 	bl	1d32c <__aeabi_memcpy>
    e664:	e7ff      	b.n	e666 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    e666:	b004      	add	sp, #16
    e668:	bd80      	pop	{r7, pc}

0000e66a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    e66a:	b580      	push	{r7, lr}
    e66c:	b084      	sub	sp, #16
    e66e:	9001      	str	r0, [sp, #4]
    e670:	9102      	str	r1, [sp, #8]
    e672:	9203      	str	r2, [sp, #12]
    e674:	0092      	lsls	r2, r2, #2
    e676:	9000      	str	r0, [sp, #0]
    e678:	4608      	mov	r0, r1
    e67a:	9900      	ldr	r1, [sp, #0]
    e67c:	f00e fe56 	bl	1d32c <__aeabi_memcpy>
    e680:	e7ff      	b.n	e682 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    e682:	b004      	add	sp, #16
    e684:	bd80      	pop	{r7, pc}

0000e686 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    e686:	b082      	sub	sp, #8
    e688:	9000      	str	r0, [sp, #0]
    e68a:	9101      	str	r1, [sp, #4]
    e68c:	6800      	ldr	r0, [r0, #0]
    e68e:	6809      	ldr	r1, [r1, #0]
    e690:	2200      	movs	r2, #0
    e692:	4288      	cmp	r0, r1
    e694:	bf38      	it	cc
    e696:	2201      	movcc	r2, #1
    e698:	4610      	mov	r0, r2
    e69a:	b002      	add	sp, #8
    e69c:	4770      	bx	lr

0000e69e <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    e69e:	b580      	push	{r7, lr}
    e6a0:	b082      	sub	sp, #8
    e6a2:	9000      	str	r0, [sp, #0]
    e6a4:	9101      	str	r1, [sp, #4]
    e6a6:	f000 f85f 	bl	e768 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    e6aa:	e7ff      	b.n	e6ac <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    e6ac:	b002      	add	sp, #8
    e6ae:	bd80      	pop	{r7, pc}

0000e6b0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    e6b0:	b580      	push	{r7, lr}
    e6b2:	b088      	sub	sp, #32
    e6b4:	9004      	str	r0, [sp, #16]
    e6b6:	9105      	str	r1, [sp, #20]
    e6b8:	f000 f819 	bl	e6ee <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    e6bc:	9001      	str	r0, [sp, #4]
    e6be:	9100      	str	r1, [sp, #0]
    e6c0:	e7ff      	b.n	e6c2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    e6c2:	9801      	ldr	r0, [sp, #4]
    e6c4:	9006      	str	r0, [sp, #24]
    e6c6:	9900      	ldr	r1, [sp, #0]
    e6c8:	f001 0201 	and.w	r2, r1, #1
    e6cc:	f88d 201f 	strb.w	r2, [sp, #31]
    e6d0:	2a00      	cmp	r2, #0
    e6d2:	d105      	bne.n	e6e0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    e6d4:	e7ff      	b.n	e6d6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    e6d6:	9801      	ldr	r0, [sp, #4]
    e6d8:	9003      	str	r0, [sp, #12]
    e6da:	2101      	movs	r1, #1
    e6dc:	9102      	str	r1, [sp, #8]
    e6de:	e002      	b.n	e6e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e6e0:	2000      	movs	r0, #0
    e6e2:	9002      	str	r0, [sp, #8]
    e6e4:	e7ff      	b.n	e6e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e6e6:	9802      	ldr	r0, [sp, #8]
    e6e8:	9903      	ldr	r1, [sp, #12]
    e6ea:	b008      	add	sp, #32
    e6ec:	bd80      	pop	{r7, pc}

0000e6ee <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    e6ee:	b08a      	sub	sp, #40	; 0x28
    e6f0:	9004      	str	r0, [sp, #16]
    e6f2:	9105      	str	r1, [sp, #20]
    e6f4:	1840      	adds	r0, r0, r1
    e6f6:	f04f 0100 	mov.w	r1, #0
    e6fa:	f141 0100 	adc.w	r1, r1, #0
    e6fe:	9006      	str	r0, [sp, #24]
    e700:	f88d 101c 	strb.w	r1, [sp, #28]
    e704:	9806      	ldr	r0, [sp, #24]
    e706:	f89d 101c 	ldrb.w	r1, [sp, #28]
    e70a:	9001      	str	r0, [sp, #4]
    e70c:	9100      	str	r1, [sp, #0]
    e70e:	e7ff      	b.n	e710 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    e710:	9801      	ldr	r0, [sp, #4]
    e712:	9008      	str	r0, [sp, #32]
    e714:	9900      	ldr	r1, [sp, #0]
    e716:	f001 0201 	and.w	r2, r1, #1
    e71a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    e71e:	9002      	str	r0, [sp, #8]
    e720:	f88d 200c 	strb.w	r2, [sp, #12]
    e724:	9802      	ldr	r0, [sp, #8]
    e726:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e72a:	b00a      	add	sp, #40	; 0x28
    e72c:	4770      	bx	lr

0000e72e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    e72e:	b580      	push	{r7, lr}
    e730:	b08c      	sub	sp, #48	; 0x30
    e732:	9005      	str	r0, [sp, #20]
    e734:	9106      	str	r1, [sp, #24]
    e736:	9207      	str	r2, [sp, #28]
    e738:	4603      	mov	r3, r0
    e73a:	9008      	str	r0, [sp, #32]
    e73c:	4608      	mov	r0, r1
    e73e:	9109      	str	r1, [sp, #36]	; 0x24
    e740:	2104      	movs	r1, #4
    e742:	910b      	str	r1, [sp, #44]	; 0x2c
    e744:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e746:	9204      	str	r2, [sp, #16]
    e748:	9303      	str	r3, [sp, #12]
    e74a:	9002      	str	r0, [sp, #8]
    e74c:	9101      	str	r1, [sp, #4]
    e74e:	e7ff      	b.n	e750 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    e750:	9801      	ldr	r0, [sp, #4]
    e752:	9904      	ldr	r1, [sp, #16]
    e754:	fb00 f201 	mul.w	r2, r0, r1
    e758:	920a      	str	r2, [sp, #40]	; 0x28
    e75a:	9803      	ldr	r0, [sp, #12]
    e75c:	9902      	ldr	r1, [sp, #8]
    e75e:	f000 f82e 	bl	e7be <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    e762:	e7ff      	b.n	e764 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    e764:	b00c      	add	sp, #48	; 0x30
    e766:	bd80      	pop	{r7, pc}

0000e768 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    e768:	b580      	push	{r7, lr}
    e76a:	b088      	sub	sp, #32
    e76c:	9004      	str	r0, [sp, #16]
    e76e:	9105      	str	r1, [sp, #20]
    e770:	2204      	movs	r2, #4
    e772:	9207      	str	r2, [sp, #28]
    e774:	9a07      	ldr	r2, [sp, #28]
    e776:	9103      	str	r1, [sp, #12]
    e778:	9002      	str	r0, [sp, #8]
    e77a:	9201      	str	r2, [sp, #4]
    e77c:	e7ff      	b.n	e77e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    e77e:	9801      	ldr	r0, [sp, #4]
    e780:	2820      	cmp	r0, #32
    e782:	d306      	bcc.n	e792 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    e784:	e7ff      	b.n	e786 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    e786:	2201      	movs	r2, #1
    e788:	9802      	ldr	r0, [sp, #8]
    e78a:	9903      	ldr	r1, [sp, #12]
    e78c:	f7ff ffcf 	bl	e72e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    e790:	e012      	b.n	e7b8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    e792:	9802      	ldr	r0, [sp, #8]
    e794:	f000 f8a1 	bl	e8da <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    e798:	4601      	mov	r1, r0
    e79a:	9006      	str	r0, [sp, #24]
    e79c:	9100      	str	r1, [sp, #0]
    e79e:	e7ff      	b.n	e7a0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    e7a0:	2201      	movs	r2, #1
    e7a2:	9803      	ldr	r0, [sp, #12]
    e7a4:	9902      	ldr	r1, [sp, #8]
    e7a6:	f7ff ff60 	bl	e66a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e7aa:	e7ff      	b.n	e7ac <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    e7ac:	9803      	ldr	r0, [sp, #12]
    e7ae:	9900      	ldr	r1, [sp, #0]
    e7b0:	f000 f8ac 	bl	e90c <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    e7b4:	e7ff      	b.n	e7b6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    e7b6:	e000      	b.n	e7ba <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e7b8:	e7ff      	b.n	e7ba <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e7ba:	b008      	add	sp, #32
    e7bc:	bd80      	pop	{r7, pc}

0000e7be <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    e7be:	b5d0      	push	{r4, r6, r7, lr}
    e7c0:	af02      	add	r7, sp, #8
    e7c2:	b0b4      	sub	sp, #208	; 0xd0
    e7c4:	466c      	mov	r4, sp
    e7c6:	f36f 0404 	bfc	r4, #0, #5
    e7ca:	46a5      	mov	sp, r4
    e7cc:	9024      	str	r0, [sp, #144]	; 0x90
    e7ce:	9125      	str	r1, [sp, #148]	; 0x94
    e7d0:	9226      	str	r2, [sp, #152]	; 0x98
    e7d2:	2320      	movs	r3, #32
    e7d4:	932f      	str	r3, [sp, #188]	; 0xbc
    e7d6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    e7d8:	9327      	str	r3, [sp, #156]	; 0x9c
    e7da:	920e      	str	r2, [sp, #56]	; 0x38
    e7dc:	910d      	str	r1, [sp, #52]	; 0x34
    e7de:	900c      	str	r0, [sp, #48]	; 0x30
    e7e0:	930b      	str	r3, [sp, #44]	; 0x2c
    e7e2:	e7ff      	b.n	e7e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    e7e4:	2000      	movs	r0, #0
    e7e6:	900f      	str	r0, [sp, #60]	; 0x3c
    e7e8:	e7ff      	b.n	e7ea <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e7ea:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e7ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e7ee:	4408      	add	r0, r1
    e7f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e7f2:	4290      	cmp	r0, r2
    e7f4:	d905      	bls.n	e802 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    e7f6:	e7ff      	b.n	e7f8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    e7f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e7fa:	990e      	ldr	r1, [sp, #56]	; 0x38
    e7fc:	4288      	cmp	r0, r1
    e7fe:	d334      	bcc.n	e86a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    e800:	e067      	b.n	e8d2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e802:	e7ff      	b.n	e804 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    e804:	a810      	add	r0, sp, #64	; 0x40
    e806:	9030      	str	r0, [sp, #192]	; 0xc0
    e808:	9031      	str	r0, [sp, #196]	; 0xc4
    e80a:	e7ff      	b.n	e80c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    e80c:	a810      	add	r0, sp, #64	; 0x40
    e80e:	4601      	mov	r1, r0
    e810:	9028      	str	r0, [sp, #160]	; 0xa0
    e812:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e814:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e816:	900a      	str	r0, [sp, #40]	; 0x28
    e818:	4610      	mov	r0, r2
    e81a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e81c:	9109      	str	r1, [sp, #36]	; 0x24
    e81e:	4619      	mov	r1, r3
    e820:	f000 f87a 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e824:	4601      	mov	r1, r0
    e826:	9029      	str	r0, [sp, #164]	; 0xa4
    e828:	9108      	str	r1, [sp, #32]
    e82a:	e7ff      	b.n	e82c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    e82c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e82e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e830:	f000 f872 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e834:	4601      	mov	r1, r0
    e836:	902a      	str	r0, [sp, #168]	; 0xa8
    e838:	9107      	str	r1, [sp, #28]
    e83a:	e7ff      	b.n	e83c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    e83c:	9808      	ldr	r0, [sp, #32]
    e83e:	9909      	ldr	r1, [sp, #36]	; 0x24
    e840:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e842:	f7ff ff05 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e846:	e7ff      	b.n	e848 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    e848:	9807      	ldr	r0, [sp, #28]
    e84a:	9908      	ldr	r1, [sp, #32]
    e84c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e84e:	f7ff feff 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e852:	e7ff      	b.n	e854 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    e854:	9809      	ldr	r0, [sp, #36]	; 0x24
    e856:	9907      	ldr	r1, [sp, #28]
    e858:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e85a:	f7ff fef9 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e85e:	e7ff      	b.n	e860 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    e860:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e862:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e864:	4408      	add	r0, r1
    e866:	900f      	str	r0, [sp, #60]	; 0x3c
    e868:	e7bf      	b.n	e7ea <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e86a:	e7ff      	b.n	e86c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    e86c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e86e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e870:	1a08      	subs	r0, r1, r0
    e872:	4602      	mov	r2, r0
    e874:	902b      	str	r0, [sp, #172]	; 0xac
    e876:	a81c      	add	r0, sp, #112	; 0x70
    e878:	9032      	str	r0, [sp, #200]	; 0xc8
    e87a:	9033      	str	r0, [sp, #204]	; 0xcc
    e87c:	9206      	str	r2, [sp, #24]
    e87e:	9005      	str	r0, [sp, #20]
    e880:	e7ff      	b.n	e882 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    e882:	9805      	ldr	r0, [sp, #20]
    e884:	9905      	ldr	r1, [sp, #20]
    e886:	912c      	str	r1, [sp, #176]	; 0xb0
    e888:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e88a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e88c:	9004      	str	r0, [sp, #16]
    e88e:	4610      	mov	r0, r2
    e890:	f000 f842 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e894:	4601      	mov	r1, r0
    e896:	902d      	str	r0, [sp, #180]	; 0xb4
    e898:	9103      	str	r1, [sp, #12]
    e89a:	e7ff      	b.n	e89c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    e89c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e89e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e8a0:	f000 f83a 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e8a4:	4601      	mov	r1, r0
    e8a6:	902e      	str	r0, [sp, #184]	; 0xb8
    e8a8:	9102      	str	r1, [sp, #8]
    e8aa:	e7ff      	b.n	e8ac <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    e8ac:	9803      	ldr	r0, [sp, #12]
    e8ae:	9904      	ldr	r1, [sp, #16]
    e8b0:	9a06      	ldr	r2, [sp, #24]
    e8b2:	f7ff fecd 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e8b6:	e7ff      	b.n	e8b8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    e8b8:	9802      	ldr	r0, [sp, #8]
    e8ba:	9903      	ldr	r1, [sp, #12]
    e8bc:	9a06      	ldr	r2, [sp, #24]
    e8be:	f7ff fec7 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e8c2:	e7ff      	b.n	e8c4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    e8c4:	9804      	ldr	r0, [sp, #16]
    e8c6:	9902      	ldr	r1, [sp, #8]
    e8c8:	9a06      	ldr	r2, [sp, #24]
    e8ca:	f7ff fec1 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e8ce:	e7ff      	b.n	e8d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    e8d0:	e7ff      	b.n	e8d2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e8d2:	f1a7 0408 	sub.w	r4, r7, #8
    e8d6:	46a5      	mov	sp, r4
    e8d8:	bdd0      	pop	{r4, r6, r7, pc}

0000e8da <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    e8da:	b580      	push	{r7, lr}
    e8dc:	b08a      	sub	sp, #40	; 0x28
    e8de:	9004      	str	r0, [sp, #16]
    e8e0:	9905      	ldr	r1, [sp, #20]
    e8e2:	9103      	str	r1, [sp, #12]
    e8e4:	9002      	str	r0, [sp, #8]
    e8e6:	e7ff      	b.n	e8e8 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    e8e8:	a803      	add	r0, sp, #12
    e8ea:	9008      	str	r0, [sp, #32]
    e8ec:	9009      	str	r0, [sp, #36]	; 0x24
    e8ee:	e7ff      	b.n	e8f0 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    e8f0:	a903      	add	r1, sp, #12
    e8f2:	2201      	movs	r2, #1
    e8f4:	9802      	ldr	r0, [sp, #8]
    e8f6:	f7ff feb8 	bl	e66a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e8fa:	e7ff      	b.n	e8fc <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    e8fc:	9803      	ldr	r0, [sp, #12]
    e8fe:	9006      	str	r0, [sp, #24]
    e900:	9007      	str	r0, [sp, #28]
    e902:	9001      	str	r0, [sp, #4]
    e904:	e7ff      	b.n	e906 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    e906:	9801      	ldr	r0, [sp, #4]
    e908:	b00a      	add	sp, #40	; 0x28
    e90a:	bd80      	pop	{r7, pc}

0000e90c <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    e90c:	b082      	sub	sp, #8
    e90e:	9000      	str	r0, [sp, #0]
    e910:	9101      	str	r1, [sp, #4]
    e912:	6001      	str	r1, [r0, #0]
    e914:	b002      	add	sp, #8
    e916:	4770      	bx	lr

0000e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    e918:	b580      	push	{r7, lr}
    e91a:	b084      	sub	sp, #16
    e91c:	9002      	str	r0, [sp, #8]
    e91e:	9103      	str	r1, [sp, #12]
    e920:	f000 f805 	bl	e92e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    e924:	9001      	str	r0, [sp, #4]
    e926:	e7ff      	b.n	e928 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    e928:	9801      	ldr	r0, [sp, #4]
    e92a:	b004      	add	sp, #16
    e92c:	bd80      	pop	{r7, pc}

0000e92e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    e92e:	b084      	sub	sp, #16
    e930:	9001      	str	r0, [sp, #4]
    e932:	9102      	str	r1, [sp, #8]
    e934:	4408      	add	r0, r1
    e936:	9003      	str	r0, [sp, #12]
    e938:	9803      	ldr	r0, [sp, #12]
    e93a:	9000      	str	r0, [sp, #0]
    e93c:	e7ff      	b.n	e93e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    e93e:	9800      	ldr	r0, [sp, #0]
    e940:	b004      	add	sp, #16
    e942:	4770      	bx	lr

0000e944 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    e944:	b580      	push	{r7, lr}
    e946:	b084      	sub	sp, #16
    e948:	9002      	str	r0, [sp, #8]
    e94a:	9103      	str	r1, [sp, #12]
    e94c:	f000 f805 	bl	e95a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    e950:	9001      	str	r0, [sp, #4]
    e952:	e7ff      	b.n	e954 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    e954:	9801      	ldr	r0, [sp, #4]
    e956:	b004      	add	sp, #16
    e958:	bd80      	pop	{r7, pc}

0000e95a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    e95a:	b084      	sub	sp, #16
    e95c:	9001      	str	r0, [sp, #4]
    e95e:	9102      	str	r1, [sp, #8]
    e960:	4408      	add	r0, r1
    e962:	9003      	str	r0, [sp, #12]
    e964:	9803      	ldr	r0, [sp, #12]
    e966:	9000      	str	r0, [sp, #0]
    e968:	e7ff      	b.n	e96a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    e96a:	9800      	ldr	r0, [sp, #0]
    e96c:	b004      	add	sp, #16
    e96e:	4770      	bx	lr

0000e970 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    e970:	b580      	push	{r7, lr}
    e972:	b08a      	sub	sp, #40	; 0x28
    e974:	9009      	str	r0, [sp, #36]	; 0x24
    e976:	2100      	movs	r1, #0
    e978:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    e97c:	1d01      	adds	r1, r0, #4
    e97e:	9002      	str	r0, [sp, #8]
    e980:	f7ff fe81 	bl	e686 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    e984:	9001      	str	r0, [sp, #4]
    e986:	e7ff      	b.n	e988 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    e988:	9801      	ldr	r0, [sp, #4]
    e98a:	07c1      	lsls	r1, r0, #31
    e98c:	2900      	cmp	r1, #0
    e98e:	d103      	bne.n	e998 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    e990:	e7ff      	b.n	e992 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    e992:	2000      	movs	r0, #0
    e994:	9003      	str	r0, [sp, #12]
    e996:	e021      	b.n	e9dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e998:	2001      	movs	r0, #1
    e99a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e99e:	9902      	ldr	r1, [sp, #8]
    e9a0:	9000      	str	r0, [sp, #0]
    e9a2:	4608      	mov	r0, r1
    e9a4:	9900      	ldr	r1, [sp, #0]
    e9a6:	f7ff fe39 	bl	e61c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    e9aa:	9106      	str	r1, [sp, #24]
    e9ac:	9005      	str	r0, [sp, #20]
    e9ae:	e7ff      	b.n	e9b0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    e9b0:	9805      	ldr	r0, [sp, #20]
    e9b2:	2801      	cmp	r0, #1
    e9b4:	d003      	beq.n	e9be <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    e9b6:	e7ff      	b.n	e9b8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    e9b8:	2000      	movs	r0, #0
    e9ba:	9003      	str	r0, [sp, #12]
    e9bc:	e021      	b.n	ea02 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e9be:	2000      	movs	r0, #0
    e9c0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e9c4:	9806      	ldr	r0, [sp, #24]
    e9c6:	9007      	str	r0, [sp, #28]
    e9c8:	a807      	add	r0, sp, #28
    e9ca:	9902      	ldr	r1, [sp, #8]
    e9cc:	f7ff fe67 	bl	e69e <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    e9d0:	e7ff      	b.n	e9d2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    e9d2:	9807      	ldr	r0, [sp, #28]
    e9d4:	9004      	str	r0, [sp, #16]
    e9d6:	2001      	movs	r0, #1
    e9d8:	9003      	str	r0, [sp, #12]
    e9da:	e012      	b.n	ea02 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e9dc:	9803      	ldr	r0, [sp, #12]
    e9de:	9904      	ldr	r1, [sp, #16]
    e9e0:	b00a      	add	sp, #40	; 0x28
    e9e2:	bd80      	pop	{r7, pc}
    e9e4:	2000      	movs	r0, #0
    e9e6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e9ea:	e7f7      	b.n	e9dc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e9ec:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e9f0:	07c0      	lsls	r0, r0, #31
    e9f2:	2800      	cmp	r0, #0
    e9f4:	d0f6      	beq.n	e9e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e9f6:	e7ff      	b.n	e9f8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    e9f8:	2000      	movs	r0, #0
    e9fa:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e9fe:	e7f1      	b.n	e9e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    ea00:	e7f0      	b.n	e9e4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    ea02:	9805      	ldr	r0, [sp, #20]
    ea04:	2801      	cmp	r0, #1
    ea06:	d0f1      	beq.n	e9ec <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    ea08:	e7fa      	b.n	ea00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    ea0a:	b082      	sub	sp, #8
    ea0c:	9000      	str	r0, [sp, #0]
    ea0e:	9101      	str	r1, [sp, #4]
    ea10:	b002      	add	sp, #8
    ea12:	4770      	bx	lr

0000ea14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    ea14:	b580      	push	{r7, lr}
    ea16:	b086      	sub	sp, #24
    ea18:	9003      	str	r0, [sp, #12]
    ea1a:	9104      	str	r1, [sp, #16]
    ea1c:	9205      	str	r2, [sp, #20]
    ea1e:	9002      	str	r0, [sp, #8]
    ea20:	4610      	mov	r0, r2
    ea22:	9a02      	ldr	r2, [sp, #8]
    ea24:	9101      	str	r1, [sp, #4]
    ea26:	4611      	mov	r1, r2
    ea28:	9a01      	ldr	r2, [sp, #4]
    ea2a:	f000 f846 	bl	eaba <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    ea2e:	9000      	str	r0, [sp, #0]
    ea30:	e7ff      	b.n	ea32 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    ea32:	9800      	ldr	r0, [sp, #0]
    ea34:	b006      	add	sp, #24
    ea36:	bd80      	pop	{r7, pc}

0000ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    ea38:	b084      	sub	sp, #16
    ea3a:	9002      	str	r0, [sp, #8]
    ea3c:	9103      	str	r1, [sp, #12]
    ea3e:	9000      	str	r0, [sp, #0]
    ea40:	9101      	str	r1, [sp, #4]
    ea42:	9801      	ldr	r0, [sp, #4]
    ea44:	b004      	add	sp, #16
    ea46:	4770      	bx	lr

0000ea48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    ea48:	b082      	sub	sp, #8
    ea4a:	9000      	str	r0, [sp, #0]
    ea4c:	9101      	str	r1, [sp, #4]
    ea4e:	b002      	add	sp, #8
    ea50:	4770      	bx	lr

0000ea52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    ea52:	b081      	sub	sp, #4
    ea54:	9000      	str	r0, [sp, #0]
    ea56:	b001      	add	sp, #4
    ea58:	4770      	bx	lr

0000ea5a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    ea5a:	b580      	push	{r7, lr}
    ea5c:	b082      	sub	sp, #8
    ea5e:	9001      	str	r0, [sp, #4]
    ea60:	f7ff fff7 	bl	ea52 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    ea64:	9000      	str	r0, [sp, #0]
    ea66:	e7ff      	b.n	ea68 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    ea68:	9800      	ldr	r0, [sp, #0]
    ea6a:	b002      	add	sp, #8
    ea6c:	bd80      	pop	{r7, pc}

0000ea6e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    ea6e:	b580      	push	{r7, lr}
    ea70:	b084      	sub	sp, #16
    ea72:	9003      	str	r0, [sp, #12]
    ea74:	f7ff fff1 	bl	ea5a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    ea78:	9001      	str	r0, [sp, #4]
    ea7a:	e7ff      	b.n	ea7c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    ea7c:	9801      	ldr	r0, [sp, #4]
    ea7e:	9002      	str	r0, [sp, #8]
    ea80:	9802      	ldr	r0, [sp, #8]
    ea82:	b004      	add	sp, #16
    ea84:	bd80      	pop	{r7, pc}

0000ea86 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    ea86:	b082      	sub	sp, #8
    ea88:	9000      	str	r0, [sp, #0]
    ea8a:	9101      	str	r1, [sp, #4]
    ea8c:	b002      	add	sp, #8
    ea8e:	4770      	bx	lr

0000ea90 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    ea90:	b580      	push	{r7, lr}
    ea92:	b086      	sub	sp, #24
    ea94:	9003      	str	r0, [sp, #12]
    ea96:	9104      	str	r1, [sp, #16]
    ea98:	9205      	str	r2, [sp, #20]
    ea9a:	9002      	str	r0, [sp, #8]
    ea9c:	4608      	mov	r0, r1
    ea9e:	4611      	mov	r1, r2
    eaa0:	f7ff ffd2 	bl	ea48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    eaa4:	9001      	str	r0, [sp, #4]
    eaa6:	e7ff      	b.n	eaa8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    eaa8:	9801      	ldr	r0, [sp, #4]
    eaaa:	9902      	ldr	r1, [sp, #8]
    eaac:	f7ff ff4a 	bl	e944 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    eab0:	9000      	str	r0, [sp, #0]
    eab2:	e7ff      	b.n	eab4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    eab4:	9800      	ldr	r0, [sp, #0]
    eab6:	b006      	add	sp, #24
    eab8:	bd80      	pop	{r7, pc}

0000eaba <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    eaba:	b580      	push	{r7, lr}
    eabc:	b086      	sub	sp, #24
    eabe:	9003      	str	r0, [sp, #12]
    eac0:	9104      	str	r1, [sp, #16]
    eac2:	9205      	str	r2, [sp, #20]
    eac4:	9002      	str	r0, [sp, #8]
    eac6:	4608      	mov	r0, r1
    eac8:	4611      	mov	r1, r2
    eaca:	f7ff ff9e 	bl	ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    eace:	9001      	str	r0, [sp, #4]
    ead0:	e7ff      	b.n	ead2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    ead2:	9801      	ldr	r0, [sp, #4]
    ead4:	9902      	ldr	r1, [sp, #8]
    ead6:	f7ff ff1f 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    eada:	9000      	str	r0, [sp, #0]
    eadc:	e7ff      	b.n	eade <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    eade:	9800      	ldr	r0, [sp, #0]
    eae0:	b006      	add	sp, #24
    eae2:	bd80      	pop	{r7, pc}

0000eae4 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
    eae4:	b580      	push	{r7, lr}
    eae6:	b086      	sub	sp, #24
    eae8:	f8dd c020 	ldr.w	ip, [sp, #32]
    eaec:	9102      	str	r1, [sp, #8]
    eaee:	9203      	str	r2, [sp, #12]
    eaf0:	9304      	str	r3, [sp, #16]
    eaf2:	f8cd c014 	str.w	ip, [sp, #20]
    eaf6:	f04f 0e00 	mov.w	lr, #0
    eafa:	f8cd e004 	str.w	lr, [sp, #4]
    eafe:	f8cd e000 	str.w	lr, [sp]
    eb02:	f8cd e000 	str.w	lr, [sp]
    eb06:	6001      	str	r1, [r0, #0]
    eb08:	6042      	str	r2, [r0, #4]
    eb0a:	9900      	ldr	r1, [sp, #0]
    eb0c:	9a01      	ldr	r2, [sp, #4]
    eb0e:	6081      	str	r1, [r0, #8]
    eb10:	60c2      	str	r2, [r0, #12]
    eb12:	6103      	str	r3, [r0, #16]
    eb14:	f8c0 c014 	str.w	ip, [r0, #20]
    eb18:	b006      	add	sp, #24
    eb1a:	bd80      	pop	{r7, pc}

0000eb1c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
    eb1c:	b580      	push	{r7, lr}
    eb1e:	b084      	sub	sp, #16
    eb20:	9101      	str	r1, [sp, #4]
    eb22:	9202      	str	r2, [sp, #8]
    eb24:	9901      	ldr	r1, [sp, #4]
    eb26:	9a02      	ldr	r2, [sp, #8]
    eb28:	f000 fa92 	bl	f050 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
    eb2c:	e7ff      	b.n	eb2e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
    eb2e:	b004      	add	sp, #16
    eb30:	bd80      	pop	{r7, pc}

0000eb32 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
    eb32:	b081      	sub	sp, #4
    eb34:	9000      	str	r0, [sp, #0]
    eb36:	b001      	add	sp, #4
    eb38:	4770      	bx	lr

0000eb3a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
    eb3a:	b081      	sub	sp, #4
    eb3c:	9000      	str	r0, [sp, #0]
    eb3e:	b001      	add	sp, #4
    eb40:	4770      	bx	lr

0000eb42 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
    eb42:	b580      	push	{r7, lr}
    eb44:	b086      	sub	sp, #24
    eb46:	460a      	mov	r2, r1
    eb48:	9004      	str	r0, [sp, #16]
    eb4a:	f88d 1017 	strb.w	r1, [sp, #23]
    eb4e:	9203      	str	r2, [sp, #12]
    eb50:	f7ff fff3 	bl	eb3a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
    eb54:	9002      	str	r0, [sp, #8]
    eb56:	e7ff      	b.n	eb58 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
    eb58:	9802      	ldr	r0, [sp, #8]
    eb5a:	9903      	ldr	r1, [sp, #12]
    eb5c:	f000 f806 	bl	eb6c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
    eb60:	9001      	str	r0, [sp, #4]
    eb62:	e7ff      	b.n	eb64 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
    eb64:	9801      	ldr	r0, [sp, #4]
    eb66:	b006      	add	sp, #24
    eb68:	bd80      	pop	{r7, pc}
	...

0000eb6c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
    eb6c:	b086      	sub	sp, #24
    eb6e:	460a      	mov	r2, r1
    eb70:	f88d 100f 	strb.w	r1, [sp, #15]
    eb74:	9005      	str	r0, [sp, #20]
    eb76:	f89d 100f 	ldrb.w	r1, [sp, #15]
    eb7a:	9002      	str	r0, [sp, #8]
    eb7c:	9101      	str	r1, [sp, #4]
    eb7e:	9901      	ldr	r1, [sp, #4]
    eb80:	e8df f001 	tbb	[pc, r1]
    eb84:	03102317 	.word	0x03102317
    eb88:	001c      	.short	0x001c
    eb8a:	f24f 0048 	movw	r0, #61512	; 0xf048
    eb8e:	f2c0 0001 	movt	r0, #1
    eb92:	f24f 02c4 	movw	r2, #61636	; 0xf0c4
    eb96:	f2c0 0201 	movt	r2, #1
    eb9a:	2131      	movs	r1, #49	; 0x31
    eb9c:	f007 fff2 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eba0:	defe      	udf	#254	; 0xfe
    eba2:	defe      	udf	#254	; 0xfe
    eba4:	9802      	ldr	r0, [sp, #8]
    eba6:	6801      	ldr	r1, [r0, #0]
    eba8:	f3bf 8f5f 	dmb	sy
    ebac:	9104      	str	r1, [sp, #16]
    ebae:	e7ff      	b.n	ebb0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
    ebb0:	e017      	b.n	ebe2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ebb2:	9802      	ldr	r0, [sp, #8]
    ebb4:	6801      	ldr	r1, [r0, #0]
    ebb6:	9104      	str	r1, [sp, #16]
    ebb8:	e7ff      	b.n	ebba <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
    ebba:	e012      	b.n	ebe2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ebbc:	9802      	ldr	r0, [sp, #8]
    ebbe:	6801      	ldr	r1, [r0, #0]
    ebc0:	f3bf 8f5f 	dmb	sy
    ebc4:	9104      	str	r1, [sp, #16]
    ebc6:	e7ff      	b.n	ebc8 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
    ebc8:	e00b      	b.n	ebe2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ebca:	f24f 00d4 	movw	r0, #61652	; 0xf0d4
    ebce:	f2c0 0001 	movt	r0, #1
    ebd2:	f24f 02c4 	movw	r2, #61636	; 0xf0c4
    ebd6:	f2c0 0201 	movt	r2, #1
    ebda:	2128      	movs	r1, #40	; 0x28
    ebdc:	f007 ffd2 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    ebe0:	defe      	udf	#254	; 0xfe
    ebe2:	9804      	ldr	r0, [sp, #16]
    ebe4:	b006      	add	sp, #24
    ebe6:	4770      	bx	lr

0000ebe8 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
    ebe8:	b081      	sub	sp, #4
    ebea:	9000      	str	r0, [sp, #0]
    ebec:	6800      	ldr	r0, [r0, #0]
    ebee:	b001      	add	sp, #4
    ebf0:	4770      	bx	lr

0000ebf2 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
    ebf2:	b082      	sub	sp, #8
    ebf4:	9001      	str	r0, [sp, #4]
    ebf6:	6801      	ldr	r1, [r0, #0]
    ebf8:	6840      	ldr	r0, [r0, #4]
    ebfa:	9000      	str	r0, [sp, #0]
    ebfc:	4608      	mov	r0, r1
    ebfe:	9900      	ldr	r1, [sp, #0]
    ec00:	b002      	add	sp, #8
    ec02:	4770      	bx	lr

0000ec04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
    ec04:	b580      	push	{r7, lr}
    ec06:	b08c      	sub	sp, #48	; 0x30
    ec08:	9101      	str	r1, [sp, #4]
    ec0a:	9202      	str	r2, [sp, #8]
    ec0c:	2100      	movs	r1, #0
    ec0e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ec12:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ec16:	2101      	movs	r1, #1
    ec18:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    ec1c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    ec20:	9901      	ldr	r1, [sp, #4]
    ec22:	2900      	cmp	r1, #0
    ec24:	460a      	mov	r2, r1
    ec26:	bf18      	it	ne
    ec28:	2201      	movne	r2, #1
    ec2a:	2900      	cmp	r1, #0
    ec2c:	9000      	str	r0, [sp, #0]
    ec2e:	d001      	beq.n	ec34 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
    ec30:	e7ff      	b.n	ec32 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
    ec32:	e008      	b.n	ec46 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
    ec34:	2000      	movs	r0, #0
    ec36:	9900      	ldr	r1, [sp, #0]
    ec38:	6088      	str	r0, [r1, #8]
    ec3a:	6048      	str	r0, [r1, #4]
    ec3c:	6008      	str	r0, [r1, #0]
    ec3e:	2002      	movs	r0, #2
    ec40:	6008      	str	r0, [r1, #0]
    ec42:	e021      	b.n	ec88 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    ec44:	defe      	udf	#254	; 0xfe
    ec46:	2000      	movs	r0, #0
    ec48:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    ec4c:	9901      	ldr	r1, [sp, #4]
    ec4e:	9a02      	ldr	r2, [sp, #8]
    ec50:	910a      	str	r1, [sp, #40]	; 0x28
    ec52:	920b      	str	r2, [sp, #44]	; 0x2c
    ec54:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    ec58:	9106      	str	r1, [sp, #24]
    ec5a:	9207      	str	r2, [sp, #28]
    ec5c:	9906      	ldr	r1, [sp, #24]
    ec5e:	9a07      	ldr	r2, [sp, #28]
    ec60:	a803      	add	r0, sp, #12
    ec62:	f7ff ff5b 	bl	eb1c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
    ec66:	e7ff      	b.n	ec68 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
    ec68:	9803      	ldr	r0, [sp, #12]
    ec6a:	9904      	ldr	r1, [sp, #16]
    ec6c:	9a05      	ldr	r2, [sp, #20]
    ec6e:	9b00      	ldr	r3, [sp, #0]
    ec70:	609a      	str	r2, [r3, #8]
    ec72:	6059      	str	r1, [r3, #4]
    ec74:	6018      	str	r0, [r3, #0]
    ec76:	e007      	b.n	ec88 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    ec78:	9801      	ldr	r0, [sp, #4]
    ec7a:	2800      	cmp	r0, #0
    ec7c:	d10c      	bne.n	ec98 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
    ec7e:	e015      	b.n	ecac <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
    ec80:	2000      	movs	r0, #0
    ec82:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    ec86:	e7f7      	b.n	ec78 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    ec88:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    ec8c:	07c0      	lsls	r0, r0, #31
    ec8e:	2800      	cmp	r0, #0
    ec90:	d1f6      	bne.n	ec80 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
    ec92:	e7f1      	b.n	ec78 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    ec94:	b00c      	add	sp, #48	; 0x30
    ec96:	bd80      	pop	{r7, pc}
    ec98:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    ec9c:	07c0      	lsls	r0, r0, #31
    ec9e:	2800      	cmp	r0, #0
    eca0:	d0f8      	beq.n	ec94 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    eca2:	e7ff      	b.n	eca4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
    eca4:	2000      	movs	r0, #0
    eca6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    ecaa:	e7f3      	b.n	ec94 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    ecac:	e7f2      	b.n	ec94 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0000ecae <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
    ecae:	b5b0      	push	{r4, r5, r7, lr}
    ecb0:	b081      	sub	sp, #4
    ecb2:	9100      	str	r1, [sp, #0]
    ecb4:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    ecb8:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    ecbc:	b001      	add	sp, #4
    ecbe:	bdb0      	pop	{r4, r5, r7, pc}

0000ecc0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
    ecc0:	b580      	push	{r7, lr}
    ecc2:	b088      	sub	sp, #32
    ecc4:	9106      	str	r1, [sp, #24]
    ecc6:	680a      	ldr	r2, [r1, #0]
    ecc8:	1e93      	subs	r3, r2, #2
    ecca:	bf18      	it	ne
    eccc:	2301      	movne	r3, #1
    ecce:	2a02      	cmp	r2, #2
    ecd0:	9102      	str	r1, [sp, #8]
    ecd2:	9001      	str	r0, [sp, #4]
    ecd4:	d001      	beq.n	ecda <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
    ecd6:	e7ff      	b.n	ecd8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
    ecd8:	e008      	b.n	ecec <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
    ecda:	2000      	movs	r0, #0
    ecdc:	9901      	ldr	r1, [sp, #4]
    ecde:	6088      	str	r0, [r1, #8]
    ece0:	6048      	str	r0, [r1, #4]
    ece2:	6008      	str	r0, [r1, #0]
    ece4:	2002      	movs	r0, #2
    ece6:	6008      	str	r0, [r1, #0]
    ece8:	e00f      	b.n	ed0a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    ecea:	defe      	udf	#254	; 0xfe
    ecec:	9802      	ldr	r0, [sp, #8]
    ecee:	9007      	str	r0, [sp, #28]
    ecf0:	a803      	add	r0, sp, #12
    ecf2:	9902      	ldr	r1, [sp, #8]
    ecf4:	f000 f9b5 	bl	f062 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
    ecf8:	e7ff      	b.n	ecfa <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
    ecfa:	9803      	ldr	r0, [sp, #12]
    ecfc:	9904      	ldr	r1, [sp, #16]
    ecfe:	9a05      	ldr	r2, [sp, #20]
    ed00:	9b01      	ldr	r3, [sp, #4]
    ed02:	609a      	str	r2, [r3, #8]
    ed04:	6059      	str	r1, [r3, #4]
    ed06:	6018      	str	r0, [r3, #0]
    ed08:	e7ff      	b.n	ed0a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    ed0a:	b008      	add	sp, #32
    ed0c:	bd80      	pop	{r7, pc}

0000ed0e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
    ed0e:	b580      	push	{r7, lr}
    ed10:	b086      	sub	sp, #24
    ed12:	9004      	str	r0, [sp, #16]
    ed14:	6801      	ldr	r1, [r0, #0]
    ed16:	2900      	cmp	r1, #0
    ed18:	9001      	str	r0, [sp, #4]
    ed1a:	d001      	beq.n	ed20 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
    ed1c:	e7ff      	b.n	ed1e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
    ed1e:	e003      	b.n	ed28 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
    ed20:	2000      	movs	r0, #0
    ed22:	9002      	str	r0, [sp, #8]
    ed24:	e00d      	b.n	ed42 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ed26:	defe      	udf	#254	; 0xfe
    ed28:	9801      	ldr	r0, [sp, #4]
    ed2a:	1d01      	adds	r1, r0, #4
    ed2c:	9105      	str	r1, [sp, #20]
    ed2e:	4608      	mov	r0, r1
    ed30:	f7ff ff5a 	bl	ebe8 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
    ed34:	9000      	str	r0, [sp, #0]
    ed36:	e7ff      	b.n	ed38 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
    ed38:	9800      	ldr	r0, [sp, #0]
    ed3a:	9003      	str	r0, [sp, #12]
    ed3c:	2101      	movs	r1, #1
    ed3e:	9102      	str	r1, [sp, #8]
    ed40:	e7ff      	b.n	ed42 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ed42:	9802      	ldr	r0, [sp, #8]
    ed44:	9903      	ldr	r1, [sp, #12]
    ed46:	b006      	add	sp, #24
    ed48:	bd80      	pop	{r7, pc}

0000ed4a <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
    ed4a:	b081      	sub	sp, #4
    ed4c:	9000      	str	r0, [sp, #0]
        *self
    ed4e:	6800      	ldr	r0, [r0, #0]
    }
    ed50:	b001      	add	sp, #4
    ed52:	4770      	bx	lr

0000ed54 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
    ed54:	b580      	push	{r7, lr}
        RecordBuilder::new()
    ed56:	f000 f802 	bl	ed5e <_ZN3log13RecordBuilder3new17haca8312579858419E>
    ed5a:	e7ff      	b.n	ed5c <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
    ed5c:	bd80      	pop	{r7, pc}

0000ed5e <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
    ed5e:	b570      	push	{r4, r5, r6, lr}
    ed60:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
    ed62:	f24f 1114 	movw	r1, #61716	; 0xf114
    ed66:	f2c0 0101 	movt	r1, #1
    ed6a:	6809      	ldr	r1, [r1, #0]
    ed6c:	466a      	mov	r2, sp
    ed6e:	2300      	movs	r3, #0
    ed70:	6013      	str	r3, [r2, #0]
    ed72:	aa16      	add	r2, sp, #88	; 0x58
    ed74:	9004      	str	r0, [sp, #16]
    ed76:	4610      	mov	r0, r2
    ed78:	9103      	str	r1, [sp, #12]
    ed7a:	461a      	mov	r2, r3
    ed7c:	9b03      	ldr	r3, [sp, #12]
    ed7e:	f7ff feb1 	bl	eae4 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
    ed82:	e7ff      	b.n	ed84 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
    ed84:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
    ed86:	f000 f891 	bl	eeac <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
    ed8a:	e7ff      	b.n	ed8c <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
    ed8c:	a81c      	add	r0, sp, #112	; 0x70
    ed8e:	a91f      	add	r1, sp, #124	; 0x7c
    ed90:	f000 f8a5 	bl	eede <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
    ed94:	e7ff      	b.n	ed96 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
    ed96:	2000      	movs	r0, #0
                module_path: None,
    ed98:	9024      	str	r0, [sp, #144]	; 0x90
    ed9a:	9023      	str	r0, [sp, #140]	; 0x8c
    ed9c:	9022      	str	r0, [sp, #136]	; 0x88
    ed9e:	2102      	movs	r1, #2
    eda0:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
    eda2:	9027      	str	r0, [sp, #156]	; 0x9c
    eda4:	9026      	str	r0, [sp, #152]	; 0x98
    eda6:	9025      	str	r0, [sp, #148]	; 0x94
    eda8:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
    edaa:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
    edac:	981c      	ldr	r0, [sp, #112]	; 0x70
    edae:	991d      	ldr	r1, [sp, #116]	; 0x74
    edb0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    edb2:	9207      	str	r2, [sp, #28]
    edb4:	9106      	str	r1, [sp, #24]
    edb6:	9005      	str	r0, [sp, #20]
    edb8:	a805      	add	r0, sp, #20
    edba:	f100 010c 	add.w	r1, r0, #12
    edbe:	aa16      	add	r2, sp, #88	; 0x58
    edc0:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    edc4:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    edc8:	9922      	ldr	r1, [sp, #136]	; 0x88
    edca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    edcc:	9b24      	ldr	r3, [sp, #144]	; 0x90
    edce:	9310      	str	r3, [sp, #64]	; 0x40
    edd0:	920f      	str	r2, [sp, #60]	; 0x3c
    edd2:	910e      	str	r1, [sp, #56]	; 0x38
    edd4:	9925      	ldr	r1, [sp, #148]	; 0x94
    edd6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    edd8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    edda:	9313      	str	r3, [sp, #76]	; 0x4c
    eddc:	9212      	str	r2, [sp, #72]	; 0x48
    edde:	9111      	str	r1, [sp, #68]	; 0x44
    ede0:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ede2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ede4:	9114      	str	r1, [sp, #80]	; 0x50
    ede6:	9215      	str	r2, [sp, #84]	; 0x54
    ede8:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
    edea:	9904      	ldr	r1, [sp, #16]
    edec:	9002      	str	r0, [sp, #8]
    edee:	4608      	mov	r0, r1
    edf0:	9902      	ldr	r1, [sp, #8]
    edf2:	f00e fa9b 	bl	1d32c <__aeabi_memcpy>
    }
    edf6:	b02a      	add	sp, #168	; 0xa8
    edf8:	bd70      	pop	{r4, r5, r6, pc}

0000edfa <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
    edfa:	b5f0      	push	{r4, r5, r6, r7, lr}
    edfc:	b087      	sub	sp, #28
    edfe:	9006      	str	r0, [sp, #24]
    ee00:	466a      	mov	r2, sp
        self.record.args = args;
    ee02:	4613      	mov	r3, r2
    ee04:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
    ee08:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    ee0c:	f100 010c 	add.w	r1, r0, #12
    ee10:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ee14:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
    ee18:	b007      	add	sp, #28
    ee1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ee1c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
    ee1c:	b082      	sub	sp, #8
    ee1e:	9000      	str	r0, [sp, #0]
    ee20:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
    ee22:	6001      	str	r1, [r0, #0]
    }
    ee24:	b002      	add	sp, #8
    ee26:	4770      	bx	lr

0000ee28 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
    ee28:	b083      	sub	sp, #12
    ee2a:	9000      	str	r0, [sp, #0]
    ee2c:	9101      	str	r1, [sp, #4]
    ee2e:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
    ee30:	6041      	str	r1, [r0, #4]
    ee32:	6082      	str	r2, [r0, #8]
    }
    ee34:	b003      	add	sp, #12
    ee36:	4770      	bx	lr

0000ee38 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ee38:	b580      	push	{r7, lr}
    ee3a:	b088      	sub	sp, #32
    ee3c:	9005      	str	r0, [sp, #20]
    ee3e:	9106      	str	r1, [sp, #24]
    ee40:	9207      	str	r2, [sp, #28]
    ee42:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
    ee44:	9001      	str	r0, [sp, #4]
    ee46:	4618      	mov	r0, r3
    ee48:	f7ff fedc 	bl	ec04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ee4c:	e7ff      	b.n	ee4e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
    ee4e:	9802      	ldr	r0, [sp, #8]
    ee50:	9903      	ldr	r1, [sp, #12]
    ee52:	9a04      	ldr	r2, [sp, #16]
    ee54:	9b01      	ldr	r3, [sp, #4]
    ee56:	62da      	str	r2, [r3, #44]	; 0x2c
    ee58:	6299      	str	r1, [r3, #40]	; 0x28
    ee5a:	6258      	str	r0, [r3, #36]	; 0x24
    }
    ee5c:	4618      	mov	r0, r3
    ee5e:	b008      	add	sp, #32
    ee60:	bd80      	pop	{r7, pc}

0000ee62 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ee62:	b580      	push	{r7, lr}
    ee64:	b088      	sub	sp, #32
    ee66:	9005      	str	r0, [sp, #20]
    ee68:	9106      	str	r1, [sp, #24]
    ee6a:	9207      	str	r2, [sp, #28]
    ee6c:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
    ee6e:	9001      	str	r0, [sp, #4]
    ee70:	4618      	mov	r0, r3
    ee72:	f7ff fec7 	bl	ec04 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ee76:	e7ff      	b.n	ee78 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
    ee78:	9802      	ldr	r0, [sp, #8]
    ee7a:	9903      	ldr	r1, [sp, #12]
    ee7c:	9a04      	ldr	r2, [sp, #16]
    ee7e:	9b01      	ldr	r3, [sp, #4]
    ee80:	639a      	str	r2, [r3, #56]	; 0x38
    ee82:	6359      	str	r1, [r3, #52]	; 0x34
    ee84:	6318      	str	r0, [r3, #48]	; 0x30
    }
    ee86:	4618      	mov	r0, r3
    ee88:	b008      	add	sp, #32
    ee8a:	bd80      	pop	{r7, pc}

0000ee8c <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
    ee8c:	b083      	sub	sp, #12
    ee8e:	9000      	str	r0, [sp, #0]
    ee90:	9101      	str	r1, [sp, #4]
    ee92:	9202      	str	r2, [sp, #8]
        self.record.line = line;
    ee94:	63c1      	str	r1, [r0, #60]	; 0x3c
    ee96:	6402      	str	r2, [r0, #64]	; 0x40
    }
    ee98:	b003      	add	sp, #12
    ee9a:	4770      	bx	lr

0000ee9c <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
    ee9c:	b580      	push	{r7, lr}
    ee9e:	b082      	sub	sp, #8
    eea0:	9101      	str	r1, [sp, #4]
        self.record.clone()
    eea2:	f000 f8e8 	bl	f076 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
    eea6:	e7ff      	b.n	eea8 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
    eea8:	b002      	add	sp, #8
    eeaa:	bd80      	pop	{r7, pc}

0000eeac <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
    eeac:	b580      	push	{r7, lr}
        MetadataBuilder::new()
    eeae:	f000 f802 	bl	eeb6 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
    eeb2:	e7ff      	b.n	eeb4 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
    eeb4:	bd80      	pop	{r7, pc}

0000eeb6 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
    eeb6:	b084      	sub	sp, #16
    eeb8:	2103      	movs	r1, #3
                level: Level::Info,
    eeba:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
    eebc:	9903      	ldr	r1, [sp, #12]
    eebe:	9100      	str	r1, [sp, #0]
    eec0:	f24f 01fc 	movw	r1, #61692	; 0xf0fc
    eec4:	f2c0 0101 	movt	r1, #1
    eec8:	9101      	str	r1, [sp, #4]
    eeca:	2100      	movs	r1, #0
    eecc:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
    eece:	9900      	ldr	r1, [sp, #0]
    eed0:	9a01      	ldr	r2, [sp, #4]
    eed2:	9b02      	ldr	r3, [sp, #8]
    eed4:	6083      	str	r3, [r0, #8]
    eed6:	6042      	str	r2, [r0, #4]
    eed8:	6001      	str	r1, [r0, #0]
    }
    eeda:	b004      	add	sp, #16
    eedc:	4770      	bx	lr

0000eede <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
    eede:	b580      	push	{r7, lr}
    eee0:	b082      	sub	sp, #8
    eee2:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
    eee4:	f000 f91c 	bl	f120 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    eee8:	e7ff      	b.n	eeea <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
    eeea:	b002      	add	sp, #8
    eeec:	bd80      	pop	{r7, pc}

0000eeee <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
    eeee:	b082      	sub	sp, #8
    eef0:	9000      	str	r0, [sp, #0]
    eef2:	9101      	str	r1, [sp, #4]
    eef4:	2000      	movs	r0, #0
    }
    eef6:	b002      	add	sp, #8
    eef8:	4770      	bx	lr

0000eefa <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
    eefa:	b082      	sub	sp, #8
    eefc:	9000      	str	r0, [sp, #0]
    eefe:	9101      	str	r1, [sp, #4]
    ef00:	b002      	add	sp, #8
    ef02:	4770      	bx	lr

0000ef04 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
    ef04:	b081      	sub	sp, #4
    ef06:	9000      	str	r0, [sp, #0]
    ef08:	b001      	add	sp, #4
    ef0a:	4770      	bx	lr

0000ef0c <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
    ef0c:	b580      	push	{r7, lr}
    ef0e:	b084      	sub	sp, #16
    ef10:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ef12:	f88d 000f 	strb.w	r0, [sp, #15]
    ef16:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ef1a:	f646 204c 	movw	r0, #27212	; 0x6a4c
    ef1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ef22:	f7ff fe0e 	bl	eb42 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
    ef26:	9000      	str	r0, [sp, #0]
    ef28:	e7ff      	b.n	ef2a <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
    ef2a:	9800      	ldr	r0, [sp, #0]
    ef2c:	2802      	cmp	r0, #2
    ef2e:	d109      	bne.n	ef44 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
    ef30:	e7ff      	b.n	ef32 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
    ef32:	f240 00e8 	movw	r0, #232	; 0xe8
    ef36:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ef3a:	6801      	ldr	r1, [r0, #0]
    ef3c:	6840      	ldr	r0, [r0, #4]
    ef3e:	9101      	str	r1, [sp, #4]
    ef40:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ef42:	e00a      	b.n	ef5a <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
    ef44:	f24f 1030 	movw	r0, #61744	; 0xf130
    ef48:	f2c0 0001 	movt	r0, #1
    ef4c:	9001      	str	r0, [sp, #4]
    ef4e:	f24f 1018 	movw	r0, #61720	; 0xf118
    ef52:	f2c0 0001 	movt	r0, #1
    ef56:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ef58:	e7ff      	b.n	ef5a <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
    ef5a:	9801      	ldr	r0, [sp, #4]
    ef5c:	9902      	ldr	r1, [sp, #8]
        }
    }
}
    ef5e:	b004      	add	sp, #16
    ef60:	bd80      	pop	{r7, pc}

0000ef62 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
    ef62:	b570      	push	{r4, r5, r6, lr}
    ef64:	b0ca      	sub	sp, #296	; 0x128
    ef66:	9141      	str	r1, [sp, #260]	; 0x104
    ef68:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
    ef6a:	6813      	ldr	r3, [r2, #0]
    ef6c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ef70:	9343      	str	r3, [sp, #268]	; 0x10c
    ef72:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
    ef76:	f8d2 e008 	ldr.w	lr, [r2, #8]
    ef7a:	68d4      	ldr	r4, [r2, #12]
    ef7c:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
    ef80:	9446      	str	r4, [sp, #280]	; 0x118
    ef82:	6915      	ldr	r5, [r2, #16]
    ef84:	6956      	ldr	r6, [r2, #20]
    ef86:	9547      	str	r5, [sp, #284]	; 0x11c
    ef88:	9648      	str	r6, [sp, #288]	; 0x120
    ef8a:	6992      	ldr	r2, [r2, #24]
    ef8c:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
    ef8e:	9112      	str	r1, [sp, #72]	; 0x48
    ef90:	9011      	str	r0, [sp, #68]	; 0x44
    ef92:	9310      	str	r3, [sp, #64]	; 0x40
    ef94:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    ef98:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    ef9c:	940d      	str	r4, [sp, #52]	; 0x34
    ef9e:	950c      	str	r5, [sp, #48]	; 0x30
    efa0:	960b      	str	r6, [sp, #44]	; 0x2c
    efa2:	920a      	str	r2, [sp, #40]	; 0x28
    efa4:	f7ff ffb2 	bl	ef0c <_ZN3log6logger17hf609e7cc1c031552E>
    efa8:	9009      	str	r0, [sp, #36]	; 0x24
    efaa:	9108      	str	r1, [sp, #32]
    efac:	e7ff      	b.n	efae <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
    efae:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
    efb0:	f7ff fed0 	bl	ed54 <_ZN3log6Record7builder17hde62ab0132265febE>
    efb4:	e7ff      	b.n	efb6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
    efb6:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
    efb8:	4601      	mov	r1, r0
    efba:	9a11      	ldr	r2, [sp, #68]	; 0x44
    efbc:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    efc0:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    efc4:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
    efc6:	9007      	str	r0, [sp, #28]
    efc8:	4608      	mov	r0, r1
    efca:	9907      	ldr	r1, [sp, #28]
    efcc:	f7ff ff15 	bl	edfa <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
    efd0:	9006      	str	r0, [sp, #24]
    efd2:	e7ff      	b.n	efd4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
    efd4:	9806      	ldr	r0, [sp, #24]
    efd6:	9912      	ldr	r1, [sp, #72]	; 0x48
    efd8:	f7ff ff20 	bl	ee1c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
    efdc:	9005      	str	r0, [sp, #20]
    efde:	e7ff      	b.n	efe0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
    efe0:	9805      	ldr	r0, [sp, #20]
    efe2:	9910      	ldr	r1, [sp, #64]	; 0x40
    efe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    efe6:	f7ff ff1f 	bl	ee28 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
    efea:	9004      	str	r0, [sp, #16]
    efec:	e7ff      	b.n	efee <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
    efee:	980e      	ldr	r0, [sp, #56]	; 0x38
    eff0:	903b      	str	r0, [sp, #236]	; 0xec
    eff2:	990d      	ldr	r1, [sp, #52]	; 0x34
    eff4:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
    eff6:	993b      	ldr	r1, [sp, #236]	; 0xec
    eff8:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    effa:	9804      	ldr	r0, [sp, #16]
    effc:	f7ff ff1c 	bl	ee38 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
    f000:	9003      	str	r0, [sp, #12]
    f002:	e7ff      	b.n	f004 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
    f004:	980c      	ldr	r0, [sp, #48]	; 0x30
    f006:	903d      	str	r0, [sp, #244]	; 0xf4
    f008:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f00a:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
    f00c:	993d      	ldr	r1, [sp, #244]	; 0xf4
    f00e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    f010:	9803      	ldr	r0, [sp, #12]
    f012:	f7ff ff26 	bl	ee62 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
    f016:	9002      	str	r0, [sp, #8]
    f018:	e7ff      	b.n	f01a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
    f01a:	980a      	ldr	r0, [sp, #40]	; 0x28
    f01c:	9040      	str	r0, [sp, #256]	; 0x100
    f01e:	2101      	movs	r1, #1
    f020:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
    f022:	993f      	ldr	r1, [sp, #252]	; 0xfc
    f024:	9a40      	ldr	r2, [sp, #256]	; 0x100
    f026:	9802      	ldr	r0, [sp, #8]
    f028:	f7ff ff30 	bl	ee8c <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
    f02c:	9001      	str	r0, [sp, #4]
    f02e:	e7ff      	b.n	f030 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
    f030:	a813      	add	r0, sp, #76	; 0x4c
    f032:	9901      	ldr	r1, [sp, #4]
    f034:	f7ff ff32 	bl	ee9c <_ZN3log13RecordBuilder5build17h83529556a009112eE>
    f038:	e7ff      	b.n	f03a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
    f03a:	9808      	ldr	r0, [sp, #32]
    f03c:	6901      	ldr	r1, [r0, #16]
    f03e:	aa13      	add	r2, sp, #76	; 0x4c
    f040:	9809      	ldr	r0, [sp, #36]	; 0x24
    f042:	9100      	str	r1, [sp, #0]
    f044:	4611      	mov	r1, r2
    f046:	9a00      	ldr	r2, [sp, #0]
    f048:	4790      	blx	r2
    f04a:	e7ff      	b.n	f04c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
    f04c:	b04a      	add	sp, #296	; 0x128
    f04e:	bd70      	pop	{r4, r5, r6, pc}

0000f050 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
    f050:	b082      	sub	sp, #8
    f052:	9100      	str	r1, [sp, #0]
    f054:	9201      	str	r2, [sp, #4]
    f056:	6041      	str	r1, [r0, #4]
    f058:	6082      	str	r2, [r0, #8]
    f05a:	2100      	movs	r1, #0
    f05c:	6001      	str	r1, [r0, #0]
    f05e:	b002      	add	sp, #8
    f060:	4770      	bx	lr

0000f062 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    f062:	b081      	sub	sp, #4
    f064:	9100      	str	r1, [sp, #0]
    f066:	680a      	ldr	r2, [r1, #0]
    f068:	684b      	ldr	r3, [r1, #4]
    f06a:	6889      	ldr	r1, [r1, #8]
    f06c:	6081      	str	r1, [r0, #8]
    f06e:	6043      	str	r3, [r0, #4]
    f070:	6002      	str	r2, [r0, #0]
    f072:	b001      	add	sp, #4
    f074:	4770      	bx	lr

0000f076 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
    f076:	b570      	push	{r4, r5, r6, lr}
    f078:	b09c      	sub	sp, #112	; 0x70
    f07a:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
    f07c:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
    f07e:	f101 020c 	add.w	r2, r1, #12
    f082:	4613      	mov	r3, r2
    f084:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
    f086:	f101 0224 	add.w	r2, r1, #36	; 0x24
    f08a:	4694      	mov	ip, r2
    f08c:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
    f08e:	f101 0230 	add.w	r2, r1, #48	; 0x30
    f092:	4696      	mov	lr, r2
    f094:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
    f096:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    f09a:	4614      	mov	r4, r2
    f09c:	921b      	str	r2, [sp, #108]	; 0x6c
    f09e:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
    f0a0:	9006      	str	r0, [sp, #24]
    f0a2:	4610      	mov	r0, r2
    f0a4:	9305      	str	r3, [sp, #20]
    f0a6:	f8cd c010 	str.w	ip, [sp, #16]
    f0aa:	f8cd e00c 	str.w	lr, [sp, #12]
    f0ae:	9402      	str	r4, [sp, #8]
    f0b0:	f000 f836 	bl	f120 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    f0b4:	e7ff      	b.n	f0b6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
    f0b6:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
    f0b8:	9905      	ldr	r1, [sp, #20]
    f0ba:	f7ff fdf8 	bl	ecae <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
    f0be:	e7ff      	b.n	f0c0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
    f0c0:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
    f0c2:	9904      	ldr	r1, [sp, #16]
    f0c4:	f7ff fdfc 	bl	ecc0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    f0c8:	e7ff      	b.n	f0ca <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
    f0ca:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
    f0cc:	9903      	ldr	r1, [sp, #12]
    f0ce:	f7ff fdf7 	bl	ecc0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    f0d2:	e7ff      	b.n	f0d4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
    f0d4:	9802      	ldr	r0, [sp, #8]
    f0d6:	f7ff fe1a 	bl	ed0e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
    f0da:	9001      	str	r0, [sp, #4]
    f0dc:	9100      	str	r1, [sp, #0]
    f0de:	e7ff      	b.n	f0e0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
    f0e0:	9807      	ldr	r0, [sp, #28]
    f0e2:	9908      	ldr	r1, [sp, #32]
    f0e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f0e6:	9b06      	ldr	r3, [sp, #24]
    f0e8:	609a      	str	r2, [r3, #8]
    f0ea:	6059      	str	r1, [r3, #4]
    f0ec:	6018      	str	r0, [r3, #0]
    f0ee:	f103 000c 	add.w	r0, r3, #12
    f0f2:	a90a      	add	r1, sp, #40	; 0x28
    f0f4:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
    f0f8:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
    f0fc:	9810      	ldr	r0, [sp, #64]	; 0x40
    f0fe:	9911      	ldr	r1, [sp, #68]	; 0x44
    f100:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f102:	62da      	str	r2, [r3, #44]	; 0x2c
    f104:	6299      	str	r1, [r3, #40]	; 0x28
    f106:	6258      	str	r0, [r3, #36]	; 0x24
    f108:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f10a:	9914      	ldr	r1, [sp, #80]	; 0x50
    f10c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f10e:	639a      	str	r2, [r3, #56]	; 0x38
    f110:	6359      	str	r1, [r3, #52]	; 0x34
    f112:	6318      	str	r0, [r3, #48]	; 0x30
    f114:	9801      	ldr	r0, [sp, #4]
    f116:	63d8      	str	r0, [r3, #60]	; 0x3c
    f118:	9900      	ldr	r1, [sp, #0]
    f11a:	6419      	str	r1, [r3, #64]	; 0x40
    f11c:	b01c      	add	sp, #112	; 0x70
    f11e:	bd70      	pop	{r4, r5, r6, pc}

0000f120 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    f120:	b580      	push	{r7, lr}
    f122:	b088      	sub	sp, #32
    f124:	9105      	str	r1, [sp, #20]
    level: Level,
    f126:	9106      	str	r1, [sp, #24]
    target: &'a str,
    f128:	1d0a      	adds	r2, r1, #4
    f12a:	4613      	mov	r3, r2
    f12c:	9207      	str	r2, [sp, #28]
    level: Level,
    f12e:	9004      	str	r0, [sp, #16]
    f130:	4608      	mov	r0, r1
    f132:	9303      	str	r3, [sp, #12]
    f134:	f7ff fe09 	bl	ed4a <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
    f138:	9002      	str	r0, [sp, #8]
    f13a:	e7ff      	b.n	f13c <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
    f13c:	9803      	ldr	r0, [sp, #12]
    f13e:	f7ff fd58 	bl	ebf2 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
    f142:	9001      	str	r0, [sp, #4]
    f144:	9100      	str	r1, [sp, #0]
    f146:	e7ff      	b.n	f148 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    f148:	9802      	ldr	r0, [sp, #8]
    f14a:	9904      	ldr	r1, [sp, #16]
    f14c:	6008      	str	r0, [r1, #0]
    f14e:	9a01      	ldr	r2, [sp, #4]
    f150:	604a      	str	r2, [r1, #4]
    f152:	9b00      	ldr	r3, [sp, #0]
    f154:	608b      	str	r3, [r1, #8]
    f156:	b008      	add	sp, #32
    f158:	bd80      	pop	{r7, pc}

0000f15a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    f15a:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    f15c:	f00c fba2 	bl	1b8a4 <rust_sysinit>
    f160:	e7ff      	b.n	f162 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    f162:	f000 fbba 	bl	f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f166:	e7ff      	b.n	f168 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    f168:	bd80      	pop	{r7, pc}

0000f16a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    f16a:	b580      	push	{r7, lr}
    f16c:	b086      	sub	sp, #24
    f16e:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f170:	7801      	ldrb	r1, [r0, #0]
    f172:	07ca      	lsls	r2, r1, #31
    f174:	2a00      	cmp	r2, #0
    f176:	9000      	str	r0, [sp, #0]
    f178:	d006      	beq.n	f188 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    f17a:	e7ff      	b.n	f17c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    f17c:	9800      	ldr	r0, [sp, #0]
    f17e:	6841      	ldr	r1, [r0, #4]
    f180:	9103      	str	r1, [sp, #12]
    f182:	9101      	str	r1, [sp, #4]
        match self.rep {
    f184:	e00c      	b.n	f1a0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    f186:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f188:	9800      	ldr	r0, [sp, #0]
    f18a:	6841      	ldr	r1, [r0, #4]
    f18c:	6882      	ldr	r2, [r0, #8]
    f18e:	9104      	str	r1, [sp, #16]
    f190:	9205      	str	r2, [sp, #20]
    f192:	4608      	mov	r0, r1
    f194:	4611      	mov	r1, r2
    f196:	f7ff fc57 	bl	ea48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f19a:	9001      	str	r0, [sp, #4]
    f19c:	e7ff      	b.n	f19e <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    f19e:	e7ff      	b.n	f1a0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    f1a0:	9801      	ldr	r0, [sp, #4]
    f1a2:	b006      	add	sp, #24
    f1a4:	bd80      	pop	{r7, pc}

0000f1a6 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    f1a6:	b5b0      	push	{r4, r5, r7, lr}
    f1a8:	b0b2      	sub	sp, #200	; 0xc8
    f1aa:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    f1ac:	7801      	ldrb	r1, [r0, #0]
    f1ae:	07ca      	lsls	r2, r1, #31
    f1b0:	2a00      	cmp	r2, #0
    f1b2:	900e      	str	r0, [sp, #56]	; 0x38
    f1b4:	d005      	beq.n	f1c2 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    f1b6:	e7ff      	b.n	f1b8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    f1b8:	980e      	ldr	r0, [sp, #56]	; 0x38
    f1ba:	6841      	ldr	r1, [r0, #4]
    f1bc:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    f1be:	e096      	b.n	f2ee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    f1c0:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    f1c2:	980e      	ldr	r0, [sp, #56]	; 0x38
    f1c4:	6841      	ldr	r1, [r0, #4]
    f1c6:	6882      	ldr	r2, [r0, #8]
    f1c8:	912b      	str	r1, [sp, #172]	; 0xac
    f1ca:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f1cc:	4608      	mov	r0, r1
    f1ce:	4611      	mov	r1, r2
    f1d0:	f000 fabe 	bl	f750 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    f1d4:	9011      	str	r0, [sp, #68]	; 0x44
    f1d6:	e7ff      	b.n	f1d8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    f1d8:	f24f 1038 	movw	r0, #61752	; 0xf138
    f1dc:	f2c0 0001 	movt	r0, #1
    f1e0:	6800      	ldr	r0, [r0, #0]
    f1e2:	a911      	add	r1, sp, #68	; 0x44
    f1e4:	910f      	str	r1, [sp, #60]	; 0x3c
    f1e6:	9010      	str	r0, [sp, #64]	; 0x40
    f1e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f1ea:	902d      	str	r0, [sp, #180]	; 0xb4
    f1ec:	9910      	ldr	r1, [sp, #64]	; 0x40
    f1ee:	912e      	str	r1, [sp, #184]	; 0xb8
    f1f0:	900d      	str	r0, [sp, #52]	; 0x34
    f1f2:	910c      	str	r1, [sp, #48]	; 0x30
    f1f4:	f000 fee5 	bl	ffc2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    f1f8:	900b      	str	r0, [sp, #44]	; 0x2c
    f1fa:	e7ff      	b.n	f1fc <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    f1fc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f1fe:	07c1      	lsls	r1, r0, #31
    f200:	2900      	cmp	r1, #0
    f202:	d001      	beq.n	f208 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    f204:	e7ff      	b.n	f206 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    f206:	e072      	b.n	f2ee <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f208:	f24f 1090 	movw	r0, #61840	; 0xf190
    f20c:	f2c0 0001 	movt	r0, #1
    f210:	6801      	ldr	r1, [r0, #0]
    f212:	980d      	ldr	r0, [sp, #52]	; 0x34
    f214:	9021      	str	r0, [sp, #132]	; 0x84
    f216:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f218:	9222      	str	r2, [sp, #136]	; 0x88
    f21a:	f24f 13a4 	movw	r3, #61860	; 0xf1a4
    f21e:	f2c0 0301 	movt	r3, #1
    f222:	681b      	ldr	r3, [r3, #0]
    f224:	f24f 1ca8 	movw	ip, #61864	; 0xf1a8
    f228:	f2c0 0c01 	movt	ip, #1
    f22c:	f8dc c000 	ldr.w	ip, [ip]
    f230:	46ee      	mov	lr, sp
    f232:	2400      	movs	r4, #0
    f234:	f8ce 4000 	str.w	r4, [lr]
    f238:	a823      	add	r0, sp, #140	; 0x8c
    f23a:	2201      	movs	r2, #1
    f23c:	910a      	str	r1, [sp, #40]	; 0x28
    f23e:	4619      	mov	r1, r3
    f240:	4663      	mov	r3, ip
    f242:	f000 f856 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f246:	e7ff      	b.n	f248 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    f248:	a821      	add	r0, sp, #132	; 0x84
    f24a:	901e      	str	r0, [sp, #120]	; 0x78
    f24c:	a822      	add	r0, sp, #136	; 0x88
    f24e:	901f      	str	r0, [sp, #124]	; 0x7c
    f250:	a823      	add	r0, sp, #140	; 0x8c
    f252:	9020      	str	r0, [sp, #128]	; 0x80
    f254:	981e      	ldr	r0, [sp, #120]	; 0x78
    f256:	902f      	str	r0, [sp, #188]	; 0xbc
    f258:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f25a:	9130      	str	r1, [sp, #192]	; 0xc0
    f25c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f25e:	9231      	str	r2, [sp, #196]	; 0xc4
    f260:	f64f 637b 	movw	r3, #65147	; 0xfe7b
    f264:	f2c0 0300 	movt	r3, #0
    f268:	9109      	str	r1, [sp, #36]	; 0x24
    f26a:	4619      	mov	r1, r3
    f26c:	9208      	str	r2, [sp, #32]
    f26e:	f000 ff53 	bl	10118 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f272:	9007      	str	r0, [sp, #28]
    f274:	9106      	str	r1, [sp, #24]
    f276:	e7ff      	b.n	f278 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    f278:	f64f 617b 	movw	r1, #65147	; 0xfe7b
    f27c:	f2c0 0100 	movt	r1, #0
    f280:	9809      	ldr	r0, [sp, #36]	; 0x24
    f282:	f000 ff49 	bl	10118 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f286:	9005      	str	r0, [sp, #20]
    f288:	9104      	str	r1, [sp, #16]
    f28a:	e7ff      	b.n	f28c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    f28c:	f247 1153 	movw	r1, #29011	; 0x7153
    f290:	f2c0 0101 	movt	r1, #1
    f294:	9808      	ldr	r0, [sp, #32]
    f296:	f000 ff69 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f29a:	9003      	str	r0, [sp, #12]
    f29c:	9102      	str	r1, [sp, #8]
    f29e:	e7ff      	b.n	f2a0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    f2a0:	9807      	ldr	r0, [sp, #28]
    f2a2:	9018      	str	r0, [sp, #96]	; 0x60
    f2a4:	9906      	ldr	r1, [sp, #24]
    f2a6:	9119      	str	r1, [sp, #100]	; 0x64
    f2a8:	9a05      	ldr	r2, [sp, #20]
    f2aa:	921a      	str	r2, [sp, #104]	; 0x68
    f2ac:	9b04      	ldr	r3, [sp, #16]
    f2ae:	931b      	str	r3, [sp, #108]	; 0x6c
    f2b0:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f2b4:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    f2b8:	f8dd e008 	ldr.w	lr, [sp, #8]
    f2bc:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    f2c0:	466c      	mov	r4, sp
    f2c2:	2503      	movs	r5, #3
    f2c4:	6025      	str	r5, [r4, #0]
    f2c6:	a812      	add	r0, sp, #72	; 0x48
    f2c8:	ab18      	add	r3, sp, #96	; 0x60
    f2ca:	990a      	ldr	r1, [sp, #40]	; 0x28
    f2cc:	462a      	mov	r2, r5
    f2ce:	f000 f810 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f2d2:	e7ff      	b.n	f2d4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    f2d4:	f24f 10c4 	movw	r0, #61892	; 0xf1c4
    f2d8:	f2c0 0001 	movt	r0, #1
    f2dc:	f007 fc4b 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f2e0:	9001      	str	r0, [sp, #4]
    f2e2:	e7ff      	b.n	f2e4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    f2e4:	a812      	add	r0, sp, #72	; 0x48
    f2e6:	9901      	ldr	r1, [sp, #4]
    f2e8:	f007 fc82 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f2ec:	defe      	udf	#254	; 0xfe
    }
    f2ee:	b032      	add	sp, #200	; 0xc8
    f2f0:	bdb0      	pop	{r4, r5, r7, pc}

0000f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    f2f2:	b580      	push	{r7, lr}
    f2f4:	b086      	sub	sp, #24
    f2f6:	f8dd c020 	ldr.w	ip, [sp, #32]
    f2fa:	9102      	str	r1, [sp, #8]
    f2fc:	9203      	str	r2, [sp, #12]
    f2fe:	9304      	str	r3, [sp, #16]
    f300:	f8cd c014 	str.w	ip, [sp, #20]
    f304:	f04f 0e00 	mov.w	lr, #0
    f308:	f8cd e004 	str.w	lr, [sp, #4]
    f30c:	f8cd e000 	str.w	lr, [sp]
    f310:	f8cd e000 	str.w	lr, [sp]
    f314:	6001      	str	r1, [r0, #0]
    f316:	6042      	str	r2, [r0, #4]
    f318:	9900      	ldr	r1, [sp, #0]
    f31a:	9a01      	ldr	r2, [sp, #4]
    f31c:	6081      	str	r1, [r0, #8]
    f31e:	60c2      	str	r2, [r0, #12]
    f320:	6103      	str	r3, [r0, #16]
    f322:	f8c0 c014 	str.w	ip, [r0, #20]
    f326:	b006      	add	sp, #24
    f328:	bd80      	pop	{r7, pc}

0000f32a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    f32a:	b082      	sub	sp, #8
    f32c:	9001      	str	r0, [sp, #4]
    f32e:	7800      	ldrb	r0, [r0, #0]
    f330:	07c0      	lsls	r0, r0, #31
    f332:	2800      	cmp	r0, #0
    f334:	d004      	beq.n	f340 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    f336:	e7ff      	b.n	f338 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    f338:	2000      	movs	r0, #0
    f33a:	f88d 0003 	strb.w	r0, [sp, #3]
    f33e:	e003      	b.n	f348 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f340:	2001      	movs	r0, #1
    f342:	f88d 0003 	strb.w	r0, [sp, #3]
    f346:	e7ff      	b.n	f348 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f348:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f34c:	b002      	add	sp, #8
    f34e:	4770      	bx	lr

0000f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    f350:	b08a      	sub	sp, #40	; 0x28
    f352:	9005      	str	r0, [sp, #20]
    f354:	9107      	str	r1, [sp, #28]
    f356:	9208      	str	r2, [sp, #32]
    f358:	9805      	ldr	r0, [sp, #20]
    f35a:	f1b0 0c01 	subs.w	ip, r0, #1
    f35e:	bf18      	it	ne
    f360:	f04f 0c01 	movne.w	ip, #1
    f364:	2801      	cmp	r0, #1
    f366:	9304      	str	r3, [sp, #16]
    f368:	9203      	str	r2, [sp, #12]
    f36a:	9102      	str	r1, [sp, #8]
    f36c:	d010      	beq.n	f390 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    f36e:	e7ff      	b.n	f370 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    f370:	9805      	ldr	r0, [sp, #20]
    f372:	9006      	str	r0, [sp, #24]
    f374:	4668      	mov	r0, sp
    f376:	9904      	ldr	r1, [sp, #16]
    f378:	6001      	str	r1, [r0, #0]
    f37a:	f24f 13d4 	movw	r3, #61908	; 0xf1d4
    f37e:	f2c0 0301 	movt	r3, #1
    f382:	aa06      	add	r2, sp, #24
    f384:	9802      	ldr	r0, [sp, #8]
    f386:	9903      	ldr	r1, [sp, #12]
    f388:	f007 fbce 	bl	16b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f38c:	defe      	udf	#254	; 0xfe
    f38e:	defe      	udf	#254	; 0xfe
    f390:	9805      	ldr	r0, [sp, #20]
    f392:	2801      	cmp	r0, #1
    f394:	d102      	bne.n	f39c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    f396:	e7ff      	b.n	f398 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    f398:	b00a      	add	sp, #40	; 0x28
    f39a:	4770      	bx	lr
    f39c:	e7fc      	b.n	f398 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

0000f39e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    f39e:	b580      	push	{r7, lr}
    f3a0:	b082      	sub	sp, #8
    f3a2:	9001      	str	r0, [sp, #4]
    f3a4:	f7ff ffc1 	bl	f32a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    f3a8:	9000      	str	r0, [sp, #0]
    f3aa:	e7ff      	b.n	f3ac <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    f3ac:	2001      	movs	r0, #1
    f3ae:	9900      	ldr	r1, [sp, #0]
    f3b0:	4388      	bics	r0, r1
    f3b2:	b002      	add	sp, #8
    f3b4:	bd80      	pop	{r7, pc}

0000f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    f3b6:	b082      	sub	sp, #8
    f3b8:	9001      	str	r0, [sp, #4]
    f3ba:	9000      	str	r0, [sp, #0]
    f3bc:	9800      	ldr	r0, [sp, #0]
    f3be:	b002      	add	sp, #8
    f3c0:	4770      	bx	lr

0000f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    f3c2:	b081      	sub	sp, #4
    f3c4:	4601      	mov	r1, r0
    f3c6:	f88d 0003 	strb.w	r0, [sp, #3]
    f3ca:	b001      	add	sp, #4
    f3cc:	4770      	bx	lr

0000f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    f3ce:	b081      	sub	sp, #4
    f3d0:	9000      	str	r0, [sp, #0]
    f3d2:	b001      	add	sp, #4
    f3d4:	4770      	bx	lr

0000f3d6 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    f3d6:	b580      	push	{r7, lr}
    f3d8:	b08a      	sub	sp, #40	; 0x28
    f3da:	9007      	str	r0, [sp, #28]
    f3dc:	9108      	str	r1, [sp, #32]
    f3de:	9209      	str	r2, [sp, #36]	; 0x24
    f3e0:	2300      	movs	r3, #0
    f3e2:	9305      	str	r3, [sp, #20]
    f3e4:	9006      	str	r0, [sp, #24]
    f3e6:	9805      	ldr	r0, [sp, #20]
    f3e8:	9b06      	ldr	r3, [sp, #24]
    f3ea:	9104      	str	r1, [sp, #16]
    f3ec:	4619      	mov	r1, r3
    f3ee:	9b04      	ldr	r3, [sp, #16]
    f3f0:	9203      	str	r2, [sp, #12]
    f3f2:	461a      	mov	r2, r3
    f3f4:	9b03      	ldr	r3, [sp, #12]
    f3f6:	f000 f828 	bl	f44a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f3fa:	9002      	str	r0, [sp, #8]
    f3fc:	9101      	str	r1, [sp, #4]
    f3fe:	e7ff      	b.n	f400 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    f400:	9802      	ldr	r0, [sp, #8]
    f402:	9901      	ldr	r1, [sp, #4]
    f404:	b00a      	add	sp, #40	; 0x28
    f406:	bd80      	pop	{r7, pc}

0000f408 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    f408:	b580      	push	{r7, lr}
    f40a:	b08a      	sub	sp, #40	; 0x28
    f40c:	9006      	str	r0, [sp, #24]
    f40e:	9107      	str	r1, [sp, #28]
    f410:	9208      	str	r2, [sp, #32]
    f412:	9309      	str	r3, [sp, #36]	; 0x24
    f414:	9005      	str	r0, [sp, #20]
    f416:	4610      	mov	r0, r2
    f418:	9104      	str	r1, [sp, #16]
    f41a:	4619      	mov	r1, r3
    f41c:	f7ff faf5 	bl	ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f420:	9003      	str	r0, [sp, #12]
    f422:	e7ff      	b.n	f424 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    f424:	9803      	ldr	r0, [sp, #12]
    f426:	9905      	ldr	r1, [sp, #20]
    f428:	f7ff fa76 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    f42c:	9002      	str	r0, [sp, #8]
    f42e:	e7ff      	b.n	f430 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    f430:	9804      	ldr	r0, [sp, #16]
    f432:	9905      	ldr	r1, [sp, #20]
    f434:	1a41      	subs	r1, r0, r1
    f436:	9802      	ldr	r0, [sp, #8]
    f438:	f000 f8bb 	bl	f5b2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    f43c:	9001      	str	r0, [sp, #4]
    f43e:	9100      	str	r1, [sp, #0]
    f440:	e7ff      	b.n	f442 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    f442:	9801      	ldr	r0, [sp, #4]
    f444:	9900      	ldr	r1, [sp, #0]
    f446:	b00a      	add	sp, #40	; 0x28
    f448:	bd80      	pop	{r7, pc}

0000f44a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    f44a:	b580      	push	{r7, lr}
    f44c:	b08c      	sub	sp, #48	; 0x30
    f44e:	9008      	str	r0, [sp, #32]
    f450:	9109      	str	r1, [sp, #36]	; 0x24
    f452:	920a      	str	r2, [sp, #40]	; 0x28
    f454:	930b      	str	r3, [sp, #44]	; 0x2c
    f456:	4288      	cmp	r0, r1
    f458:	9307      	str	r3, [sp, #28]
    f45a:	9206      	str	r2, [sp, #24]
    f45c:	9105      	str	r1, [sp, #20]
    f45e:	9004      	str	r0, [sp, #16]
    f460:	d806      	bhi.n	f470 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    f462:	e7ff      	b.n	f464 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    f464:	9806      	ldr	r0, [sp, #24]
    f466:	9907      	ldr	r1, [sp, #28]
    f468:	f7ff fae6 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f46c:	9003      	str	r0, [sp, #12]
    f46e:	e004      	b.n	f47a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    f470:	9804      	ldr	r0, [sp, #16]
    f472:	9905      	ldr	r1, [sp, #20]
    f474:	f008 fafb 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    f478:	defe      	udf	#254	; 0xfe
    f47a:	9805      	ldr	r0, [sp, #20]
    f47c:	9903      	ldr	r1, [sp, #12]
    f47e:	4288      	cmp	r0, r1
    f480:	d809      	bhi.n	f496 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    f482:	e7ff      	b.n	f484 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    f484:	9804      	ldr	r0, [sp, #16]
    f486:	9905      	ldr	r1, [sp, #20]
    f488:	9a06      	ldr	r2, [sp, #24]
    f48a:	9b07      	ldr	r3, [sp, #28]
    f48c:	f7ff ffbc 	bl	f408 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    f490:	9002      	str	r0, [sp, #8]
    f492:	9101      	str	r1, [sp, #4]
    f494:	e00a      	b.n	f4ac <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    f496:	9806      	ldr	r0, [sp, #24]
    f498:	9907      	ldr	r1, [sp, #28]
    f49a:	f7ff facd 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f49e:	9000      	str	r0, [sp, #0]
    f4a0:	e7ff      	b.n	f4a2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    f4a2:	9805      	ldr	r0, [sp, #20]
    f4a4:	9900      	ldr	r1, [sp, #0]
    f4a6:	f008 fac0 	bl	17a2a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    f4aa:	defe      	udf	#254	; 0xfe
    f4ac:	9802      	ldr	r0, [sp, #8]
    f4ae:	9901      	ldr	r1, [sp, #4]
    f4b0:	b00c      	add	sp, #48	; 0x30
    f4b2:	bd80      	pop	{r7, pc}

0000f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    f4b4:	b081      	sub	sp, #4
    f4b6:	9000      	str	r0, [sp, #0]
    f4b8:	b001      	add	sp, #4
    f4ba:	4770      	bx	lr

0000f4bc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f4bc:	b580      	push	{r7, lr}
    f4be:	b082      	sub	sp, #8
    f4c0:	9001      	str	r0, [sp, #4]
    f4c2:	f00a fe39 	bl	1a138 <os_eventq_run>
    f4c6:	e7ff      	b.n	f4c8 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    f4c8:	2001      	movs	r0, #1
    f4ca:	b002      	add	sp, #8
    f4cc:	bd80      	pop	{r7, pc}

0000f4ce <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f4ce:	b580      	push	{r7, lr}
    f4d0:	b084      	sub	sp, #16
    f4d2:	9002      	str	r0, [sp, #8]
    f4d4:	f00a fe5c 	bl	1a190 <os_eventq_dflt_get>
    f4d8:	4601      	mov	r1, r0
    f4da:	9003      	str	r0, [sp, #12]
    f4dc:	9101      	str	r1, [sp, #4]
    f4de:	e7ff      	b.n	f4e0 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    f4e0:	9801      	ldr	r0, [sp, #4]
    f4e2:	9902      	ldr	r1, [sp, #8]
    f4e4:	6048      	str	r0, [r1, #4]
    f4e6:	2200      	movs	r2, #0
    f4e8:	600a      	str	r2, [r1, #0]
    f4ea:	b004      	add	sp, #16
    f4ec:	bd80      	pop	{r7, pc}

0000f4ee <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f4ee:	b570      	push	{r4, r5, r6, lr}
    f4f0:	b09c      	sub	sp, #112	; 0x70
    f4f2:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    f4f6:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    f4fa:	9c22      	ldr	r4, [sp, #136]	; 0x88
    f4fc:	9d21      	ldr	r5, [sp, #132]	; 0x84
    f4fe:	9e20      	ldr	r6, [sp, #128]	; 0x80
    f500:	9013      	str	r0, [sp, #76]	; 0x4c
    f502:	9114      	str	r1, [sp, #80]	; 0x50
    f504:	9215      	str	r2, [sp, #84]	; 0x54
    f506:	9316      	str	r3, [sp, #88]	; 0x58
    f508:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    f50c:	9418      	str	r4, [sp, #96]	; 0x60
    f50e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    f512:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    f516:	9011      	str	r0, [sp, #68]	; 0x44
    f518:	4608      	mov	r0, r1
    f51a:	9310      	str	r3, [sp, #64]	; 0x40
    f51c:	920f      	str	r2, [sp, #60]	; 0x3c
    f51e:	910e      	str	r1, [sp, #56]	; 0x38
    f520:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    f524:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    f528:	940b      	str	r4, [sp, #44]	; 0x2c
    f52a:	950a      	str	r5, [sp, #40]	; 0x28
    f52c:	9609      	str	r6, [sp, #36]	; 0x24
    f52e:	f7ff fe3a 	bl	f1a6 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    f532:	e7ff      	b.n	f534 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    f534:	980e      	ldr	r0, [sp, #56]	; 0x38
    f536:	f7ff fe18 	bl	f16a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    f53a:	9008      	str	r0, [sp, #32]
    f53c:	e7ff      	b.n	f53e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    f53e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f540:	990c      	ldr	r1, [sp, #48]	; 0x30
    f542:	f000 f93b 	bl	f7bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    f546:	9007      	str	r0, [sp, #28]
    f548:	e7ff      	b.n	f54a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    f54a:	980d      	ldr	r0, [sp, #52]	; 0x34
    f54c:	b281      	uxth	r1, r0
    f54e:	466a      	mov	r2, sp
    f550:	60d1      	str	r1, [r2, #12]
    f552:	9907      	ldr	r1, [sp, #28]
    f554:	6091      	str	r1, [r2, #8]
    f556:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f558:	6053      	str	r3, [r2, #4]
    f55a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f55e:	fa5f fe8c 	uxtb.w	lr, ip
    f562:	f8c2 e000 	str.w	lr, [r2]
    f566:	9811      	ldr	r0, [sp, #68]	; 0x44
    f568:	9908      	ldr	r1, [sp, #32]
    f56a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f56c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f56e:	f00b fbaf 	bl	1acd0 <os_task_init>
    f572:	4601      	mov	r1, r0
    f574:	901b      	str	r0, [sp, #108]	; 0x6c
    f576:	9106      	str	r1, [sp, #24]
    f578:	e7ff      	b.n	f57a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    f57a:	9806      	ldr	r0, [sp, #24]
    f57c:	2800      	cmp	r0, #0
    f57e:	d005      	beq.n	f58c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    f580:	e7ff      	b.n	f582 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    f582:	9806      	ldr	r0, [sp, #24]
    f584:	f003 fedc 	bl	13340 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    f588:	9005      	str	r0, [sp, #20]
    f58a:	e004      	b.n	f596 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    f58c:	2000      	movs	r0, #0
    f58e:	9012      	str	r0, [sp, #72]	; 0x48
    f590:	2001      	movs	r0, #1
    f592:	9012      	str	r0, [sp, #72]	; 0x48
    f594:	e002      	b.n	f59c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f596:	9805      	ldr	r0, [sp, #20]
    f598:	9012      	str	r0, [sp, #72]	; 0x48
    f59a:	e7ff      	b.n	f59c <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f59c:	9812      	ldr	r0, [sp, #72]	; 0x48
    f59e:	b01c      	add	sp, #112	; 0x70
    f5a0:	bd70      	pop	{r4, r5, r6, pc}

0000f5a2 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    f5a2:	b081      	sub	sp, #4
    f5a4:	9000      	str	r0, [sp, #0]
    f5a6:	b001      	add	sp, #4
    f5a8:	4770      	bx	lr

0000f5aa <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    f5aa:	b081      	sub	sp, #4
    f5ac:	9000      	str	r0, [sp, #0]
    f5ae:	b001      	add	sp, #4
    f5b0:	4770      	bx	lr

0000f5b2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    f5b2:	b580      	push	{r7, lr}
    f5b4:	b084      	sub	sp, #16
    f5b6:	9002      	str	r0, [sp, #8]
    f5b8:	9103      	str	r1, [sp, #12]
    f5ba:	f000 f993 	bl	f8e4 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    f5be:	9001      	str	r0, [sp, #4]
    f5c0:	9100      	str	r1, [sp, #0]
    f5c2:	e7ff      	b.n	f5c4 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    f5c4:	9801      	ldr	r0, [sp, #4]
    f5c6:	9900      	ldr	r1, [sp, #0]
    f5c8:	b004      	add	sp, #16
    f5ca:	bd80      	pop	{r7, pc}

0000f5cc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    f5cc:	b5b0      	push	{r4, r5, r7, lr}
    f5ce:	b0b8      	sub	sp, #224	; 0xe0
    f5d0:	902f      	str	r0, [sp, #188]	; 0xbc
    f5d2:	9130      	str	r1, [sp, #192]	; 0xc0
    f5d4:	9231      	str	r2, [sp, #196]	; 0xc4
    f5d6:	9332      	str	r3, [sp, #200]	; 0xc8
    f5d8:	9013      	str	r0, [sp, #76]	; 0x4c
    f5da:	9112      	str	r1, [sp, #72]	; 0x48
    f5dc:	9311      	str	r3, [sp, #68]	; 0x44
    f5de:	9210      	str	r2, [sp, #64]	; 0x40
    f5e0:	f7ff fa2a 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f5e4:	9016      	str	r0, [sp, #88]	; 0x58
    f5e6:	e7ff      	b.n	f5e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    f5e8:	9810      	ldr	r0, [sp, #64]	; 0x40
    f5ea:	9911      	ldr	r1, [sp, #68]	; 0x44
    f5ec:	f7ff fa24 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f5f0:	9017      	str	r0, [sp, #92]	; 0x5c
    f5f2:	e7ff      	b.n	f5f4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    f5f4:	a816      	add	r0, sp, #88	; 0x58
    f5f6:	9014      	str	r0, [sp, #80]	; 0x50
    f5f8:	a817      	add	r0, sp, #92	; 0x5c
    f5fa:	9015      	str	r0, [sp, #84]	; 0x54
    f5fc:	9814      	ldr	r0, [sp, #80]	; 0x50
    f5fe:	9033      	str	r0, [sp, #204]	; 0xcc
    f600:	9915      	ldr	r1, [sp, #84]	; 0x54
    f602:	9134      	str	r1, [sp, #208]	; 0xd0
    f604:	6802      	ldr	r2, [r0, #0]
    f606:	680b      	ldr	r3, [r1, #0]
    f608:	429a      	cmp	r2, r3
    f60a:	900f      	str	r0, [sp, #60]	; 0x3c
    f60c:	910e      	str	r1, [sp, #56]	; 0x38
    f60e:	d106      	bne.n	f61e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    f610:	e7ff      	b.n	f612 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    f612:	9810      	ldr	r0, [sp, #64]	; 0x40
    f614:	9911      	ldr	r1, [sp, #68]	; 0x44
    f616:	f7ff fa17 	bl	ea48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f61a:	900d      	str	r0, [sp, #52]	; 0x34
    f61c:	e072      	b.n	f704 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    f61e:	f24f 2038 	movw	r0, #62008	; 0xf238
    f622:	f2c0 0001 	movt	r0, #1
    f626:	6801      	ldr	r1, [r0, #0]
    f628:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f62a:	9027      	str	r0, [sp, #156]	; 0x9c
    f62c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f62e:	9228      	str	r2, [sp, #160]	; 0xa0
    f630:	f24f 2378 	movw	r3, #62072	; 0xf278
    f634:	f2c0 0301 	movt	r3, #1
    f638:	681b      	ldr	r3, [r3, #0]
    f63a:	f24f 2c7c 	movw	ip, #62076	; 0xf27c
    f63e:	f2c0 0c01 	movt	ip, #1
    f642:	f8dc c000 	ldr.w	ip, [ip]
    f646:	46ee      	mov	lr, sp
    f648:	2400      	movs	r4, #0
    f64a:	f8ce 4000 	str.w	r4, [lr]
    f64e:	a829      	add	r0, sp, #164	; 0xa4
    f650:	2201      	movs	r2, #1
    f652:	910c      	str	r1, [sp, #48]	; 0x30
    f654:	4619      	mov	r1, r3
    f656:	4663      	mov	r3, ip
    f658:	f7ff fe4b 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f65c:	e7ff      	b.n	f65e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    f65e:	a827      	add	r0, sp, #156	; 0x9c
    f660:	9024      	str	r0, [sp, #144]	; 0x90
    f662:	a828      	add	r0, sp, #160	; 0xa0
    f664:	9025      	str	r0, [sp, #148]	; 0x94
    f666:	a829      	add	r0, sp, #164	; 0xa4
    f668:	9026      	str	r0, [sp, #152]	; 0x98
    f66a:	9824      	ldr	r0, [sp, #144]	; 0x90
    f66c:	9035      	str	r0, [sp, #212]	; 0xd4
    f66e:	9925      	ldr	r1, [sp, #148]	; 0x94
    f670:	9136      	str	r1, [sp, #216]	; 0xd8
    f672:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f674:	9237      	str	r2, [sp, #220]	; 0xdc
    f676:	f243 2313 	movw	r3, #12819	; 0x3213
    f67a:	f2c0 0301 	movt	r3, #1
    f67e:	910b      	str	r1, [sp, #44]	; 0x2c
    f680:	4619      	mov	r1, r3
    f682:	920a      	str	r2, [sp, #40]	; 0x28
    f684:	f003 fdd3 	bl	1322e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f688:	9009      	str	r0, [sp, #36]	; 0x24
    f68a:	9108      	str	r1, [sp, #32]
    f68c:	e7ff      	b.n	f68e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    f68e:	f243 2113 	movw	r1, #12819	; 0x3213
    f692:	f2c0 0101 	movt	r1, #1
    f696:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f698:	f003 fdc9 	bl	1322e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f69c:	9007      	str	r0, [sp, #28]
    f69e:	9106      	str	r1, [sp, #24]
    f6a0:	e7ff      	b.n	f6a2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    f6a2:	f247 1153 	movw	r1, #29011	; 0x7153
    f6a6:	f2c0 0101 	movt	r1, #1
    f6aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    f6ac:	f000 fd5e 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f6b0:	9005      	str	r0, [sp, #20]
    f6b2:	9104      	str	r1, [sp, #16]
    f6b4:	e7ff      	b.n	f6b6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    f6b6:	9809      	ldr	r0, [sp, #36]	; 0x24
    f6b8:	901e      	str	r0, [sp, #120]	; 0x78
    f6ba:	9908      	ldr	r1, [sp, #32]
    f6bc:	911f      	str	r1, [sp, #124]	; 0x7c
    f6be:	9a07      	ldr	r2, [sp, #28]
    f6c0:	9220      	str	r2, [sp, #128]	; 0x80
    f6c2:	9b06      	ldr	r3, [sp, #24]
    f6c4:	9321      	str	r3, [sp, #132]	; 0x84
    f6c6:	f8dd c014 	ldr.w	ip, [sp, #20]
    f6ca:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f6ce:	f8dd e010 	ldr.w	lr, [sp, #16]
    f6d2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    f6d6:	466c      	mov	r4, sp
    f6d8:	2503      	movs	r5, #3
    f6da:	6025      	str	r5, [r4, #0]
    f6dc:	a818      	add	r0, sp, #96	; 0x60
    f6de:	ab1e      	add	r3, sp, #120	; 0x78
    f6e0:	990c      	ldr	r1, [sp, #48]	; 0x30
    f6e2:	462a      	mov	r2, r5
    f6e4:	f7ff fe05 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f6e8:	e7ff      	b.n	f6ea <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    f6ea:	f24f 20cc 	movw	r0, #62156	; 0xf2cc
    f6ee:	f2c0 0001 	movt	r0, #1
    f6f2:	f007 fa40 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f6f6:	9003      	str	r0, [sp, #12]
    f6f8:	e7ff      	b.n	f6fa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    f6fa:	a818      	add	r0, sp, #96	; 0x60
    f6fc:	9903      	ldr	r1, [sp, #12]
    f6fe:	f007 fa77 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f702:	defe      	udf	#254	; 0xfe
    f704:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f706:	9912      	ldr	r1, [sp, #72]	; 0x48
    f708:	f7ff f97f 	bl	ea0a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f70c:	9002      	str	r0, [sp, #8]
    f70e:	e7ff      	b.n	f710 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    f710:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f712:	9912      	ldr	r1, [sp, #72]	; 0x48
    f714:	f7ff f990 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f718:	9001      	str	r0, [sp, #4]
    f71a:	e7ff      	b.n	f71c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    f71c:	980d      	ldr	r0, [sp, #52]	; 0x34
    f71e:	9902      	ldr	r1, [sp, #8]
    f720:	9a01      	ldr	r2, [sp, #4]
    f722:	f7fe ff95 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    f726:	e7ff      	b.n	f728 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    f728:	b038      	add	sp, #224	; 0xe0
    f72a:	bdb0      	pop	{r4, r5, r7, pc}

0000f72c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    f72c:	b580      	push	{r7, lr}
    f72e:	b086      	sub	sp, #24
    f730:	9003      	str	r0, [sp, #12]
    f732:	9104      	str	r1, [sp, #16]
    f734:	9205      	str	r2, [sp, #20]
    f736:	9002      	str	r0, [sp, #8]
    f738:	4610      	mov	r0, r2
    f73a:	9a02      	ldr	r2, [sp, #8]
    f73c:	9101      	str	r1, [sp, #4]
    f73e:	4611      	mov	r1, r2
    f740:	9a01      	ldr	r2, [sp, #4]
    f742:	f000 f861 	bl	f808 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    f746:	9000      	str	r0, [sp, #0]
    f748:	e7ff      	b.n	f74a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    f74a:	9800      	ldr	r0, [sp, #0]
    f74c:	b006      	add	sp, #24
    f74e:	bd80      	pop	{r7, pc}

0000f750 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    f750:	b580      	push	{r7, lr}
    f752:	b08e      	sub	sp, #56	; 0x38
    f754:	9009      	str	r0, [sp, #36]	; 0x24
    f756:	910a      	str	r1, [sp, #40]	; 0x28
    f758:	9005      	str	r0, [sp, #20]
    f75a:	9104      	str	r1, [sp, #16]
    f75c:	f7ff f96c 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f760:	9003      	str	r0, [sp, #12]
    f762:	e7ff      	b.n	f764 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    f764:	2101      	movs	r1, #1
    f766:	9803      	ldr	r0, [sp, #12]
    f768:	f000 fd15 	bl	10196 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    f76c:	9002      	str	r0, [sp, #8]
    f76e:	9101      	str	r1, [sp, #4]
    f770:	e7ff      	b.n	f772 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    f772:	9802      	ldr	r0, [sp, #8]
    f774:	9901      	ldr	r1, [sp, #4]
    f776:	f000 fc17 	bl	ffa8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    f77a:	9108      	str	r1, [sp, #32]
    f77c:	9007      	str	r0, [sp, #28]
    f77e:	e7ff      	b.n	f780 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    f780:	9807      	ldr	r0, [sp, #28]
    f782:	2800      	cmp	r0, #0
    f784:	d001      	beq.n	f78a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    f786:	e7ff      	b.n	f788 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    f788:	e00c      	b.n	f7a4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    f78a:	9808      	ldr	r0, [sp, #32]
    f78c:	900c      	str	r0, [sp, #48]	; 0x30
    f78e:	900d      	str	r0, [sp, #52]	; 0x34
    f790:	9905      	ldr	r1, [sp, #20]
    f792:	9000      	str	r0, [sp, #0]
    f794:	4608      	mov	r0, r1
    f796:	9904      	ldr	r1, [sp, #16]
    f798:	9a00      	ldr	r2, [sp, #0]
    f79a:	f7ff ffc7 	bl	f72c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    f79e:	9006      	str	r0, [sp, #24]
    f7a0:	e00b      	b.n	f7ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    f7a2:	defe      	udf	#254	; 0xfe
    f7a4:	f003 fccd 	bl	13142 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    f7a8:	e002      	b.n	f7b0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    f7aa:	9806      	ldr	r0, [sp, #24]
    f7ac:	b00e      	add	sp, #56	; 0x38
    f7ae:	bd80      	pop	{r7, pc}
    f7b0:	f000 fbf4 	bl	ff9c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    f7b4:	9006      	str	r0, [sp, #24]
    f7b6:	e7ff      	b.n	f7b8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    f7b8:	e7f7      	b.n	f7aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    f7ba:	e7f6      	b.n	f7aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

0000f7bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    f7bc:	b082      	sub	sp, #8
    f7be:	9000      	str	r0, [sp, #0]
    f7c0:	9101      	str	r1, [sp, #4]
    f7c2:	b002      	add	sp, #8
    f7c4:	4770      	bx	lr

0000f7c6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    f7c6:	b580      	push	{r7, lr}
    f7c8:	b088      	sub	sp, #32
    f7ca:	9005      	str	r0, [sp, #20]
    f7cc:	9106      	str	r1, [sp, #24]
    f7ce:	9207      	str	r2, [sp, #28]
    f7d0:	9004      	str	r0, [sp, #16]
    f7d2:	4610      	mov	r0, r2
    f7d4:	9a04      	ldr	r2, [sp, #16]
    f7d6:	9103      	str	r1, [sp, #12]
    f7d8:	4611      	mov	r1, r2
    f7da:	9a03      	ldr	r2, [sp, #12]
    f7dc:	f7ff fdfb 	bl	f3d6 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    f7e0:	9002      	str	r0, [sp, #8]
    f7e2:	9101      	str	r1, [sp, #4]
    f7e4:	e7ff      	b.n	f7e6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    f7e6:	9802      	ldr	r0, [sp, #8]
    f7e8:	9901      	ldr	r1, [sp, #4]
    f7ea:	b008      	add	sp, #32
    f7ec:	bd80      	pop	{r7, pc}

0000f7ee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    f7ee:	b580      	push	{r7, lr}
    f7f0:	b084      	sub	sp, #16
    f7f2:	9002      	str	r0, [sp, #8]
    f7f4:	9103      	str	r1, [sp, #12]
    f7f6:	f003 fc61 	bl	130bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    f7fa:	9001      	str	r0, [sp, #4]
    f7fc:	9100      	str	r1, [sp, #0]
    f7fe:	e7ff      	b.n	f800 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    f800:	9801      	ldr	r0, [sp, #4]
    f802:	9900      	ldr	r1, [sp, #0]
    f804:	b004      	add	sp, #16
    f806:	bd80      	pop	{r7, pc}

0000f808 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    f808:	b580      	push	{r7, lr}
    f80a:	b08a      	sub	sp, #40	; 0x28
    f80c:	9007      	str	r0, [sp, #28]
    f80e:	9108      	str	r1, [sp, #32]
    f810:	9209      	str	r2, [sp, #36]	; 0x24
    f812:	9005      	str	r0, [sp, #20]
    f814:	4608      	mov	r0, r1
    f816:	9104      	str	r1, [sp, #16]
    f818:	4611      	mov	r1, r2
    f81a:	9203      	str	r2, [sp, #12]
    f81c:	f7ff f90c 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f820:	9002      	str	r0, [sp, #8]
    f822:	e7ff      	b.n	f824 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    f824:	9805      	ldr	r0, [sp, #20]
    f826:	9902      	ldr	r1, [sp, #8]
    f828:	4288      	cmp	r0, r1
    f82a:	d303      	bcc.n	f834 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    f82c:	e7ff      	b.n	f82e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    f82e:	2000      	movs	r0, #0
    f830:	9006      	str	r0, [sp, #24]
    f832:	e009      	b.n	f848 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f834:	9805      	ldr	r0, [sp, #20]
    f836:	9904      	ldr	r1, [sp, #16]
    f838:	9a03      	ldr	r2, [sp, #12]
    f83a:	f7ff f929 	bl	ea90 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    f83e:	9001      	str	r0, [sp, #4]
    f840:	e7ff      	b.n	f842 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    f842:	9801      	ldr	r0, [sp, #4]
    f844:	9006      	str	r0, [sp, #24]
    f846:	e7ff      	b.n	f848 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f848:	9806      	ldr	r0, [sp, #24]
    f84a:	b00a      	add	sp, #40	; 0x28
    f84c:	bd80      	pop	{r7, pc}

0000f84e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    f84e:	b580      	push	{r7, lr}
    f850:	b08a      	sub	sp, #40	; 0x28
    f852:	9004      	str	r0, [sp, #16]
    f854:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    f856:	9003      	str	r0, [sp, #12]
    f858:	9102      	str	r1, [sp, #8]
    f85a:	f000 f86e 	bl	f93a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f85e:	4601      	mov	r1, r0
    f860:	9006      	str	r0, [sp, #24]
    f862:	9101      	str	r1, [sp, #4]
    f864:	e7ff      	b.n	f866 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    f866:	9803      	ldr	r0, [sp, #12]
    f868:	9902      	ldr	r1, [sp, #8]
    f86a:	f000 f850 	bl	f90e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f86e:	9000      	str	r0, [sp, #0]
    f870:	e7ff      	b.n	f872 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    f872:	9800      	ldr	r0, [sp, #0]
    f874:	9007      	str	r0, [sp, #28]
    f876:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    f878:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    f87a:	4608      	mov	r0, r1
    f87c:	f000 f809 	bl	f892 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    f880:	9009      	str	r0, [sp, #36]	; 0x24
    f882:	e7ff      	b.n	f884 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    f884:	9801      	ldr	r0, [sp, #4]
    f886:	9900      	ldr	r1, [sp, #0]
    f888:	f009 f914 	bl	18ab4 <console_buffer>
    f88c:	e7ff      	b.n	f88e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    f88e:	b00a      	add	sp, #40	; 0x28
    f890:	bd80      	pop	{r7, pc}

0000f892 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    f892:	b081      	sub	sp, #4
    f894:	9000      	str	r0, [sp, #0]
    f896:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    f898:	b001      	add	sp, #4
    f89a:	4770      	bx	lr

0000f89c <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    f89c:	b580      	push	{r7, lr}
    f89e:	b086      	sub	sp, #24
    f8a0:	9004      	str	r0, [sp, #16]
    f8a2:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    f8a4:	9003      	str	r0, [sp, #12]
    f8a6:	9102      	str	r1, [sp, #8]
    f8a8:	f000 f847 	bl	f93a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f8ac:	9001      	str	r0, [sp, #4]
    f8ae:	e7ff      	b.n	f8b0 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    f8b0:	9803      	ldr	r0, [sp, #12]
    f8b2:	9902      	ldr	r1, [sp, #8]
    f8b4:	f000 f82b 	bl	f90e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f8b8:	9000      	str	r0, [sp, #0]
    f8ba:	e7ff      	b.n	f8bc <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    f8bc:	9801      	ldr	r0, [sp, #4]
    f8be:	9900      	ldr	r1, [sp, #0]
    f8c0:	f009 f8f8 	bl	18ab4 <console_buffer>
    f8c4:	e7ff      	b.n	f8c6 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    f8c6:	b006      	add	sp, #24
    f8c8:	bd80      	pop	{r7, pc}

0000f8ca <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    f8ca:	b580      	push	{r7, lr}
    f8cc:	b082      	sub	sp, #8
    f8ce:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    f8d0:	f009 f960 	bl	18b94 <console_printint>
    f8d4:	e7ff      	b.n	f8d6 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    f8d6:	b002      	add	sp, #8
    f8d8:	bd80      	pop	{r7, pc}

0000f8da <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    f8da:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    f8dc:	f009 f8c2 	bl	18a64 <console_flush>
    f8e0:	e7ff      	b.n	f8e2 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    f8e2:	bd80      	pop	{r7, pc}

0000f8e4 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    f8e4:	b086      	sub	sp, #24
    f8e6:	9004      	str	r0, [sp, #16]
    f8e8:	9105      	str	r1, [sp, #20]
    f8ea:	9002      	str	r0, [sp, #8]
    f8ec:	9103      	str	r1, [sp, #12]
    f8ee:	9802      	ldr	r0, [sp, #8]
    f8f0:	9903      	ldr	r1, [sp, #12]
    f8f2:	9000      	str	r0, [sp, #0]
    f8f4:	9101      	str	r1, [sp, #4]
    f8f6:	9800      	ldr	r0, [sp, #0]
    f8f8:	9901      	ldr	r1, [sp, #4]
    f8fa:	b006      	add	sp, #24
    f8fc:	4770      	bx	lr

0000f8fe <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    f8fe:	b082      	sub	sp, #8
    f900:	460a      	mov	r2, r1
    f902:	9000      	str	r0, [sp, #0]
    f904:	f88d 1007 	strb.w	r1, [sp, #7]
    f908:	7001      	strb	r1, [r0, #0]
    f90a:	b002      	add	sp, #8
    f90c:	4770      	bx	lr

0000f90e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    f90e:	b580      	push	{r7, lr}
    f910:	b08a      	sub	sp, #40	; 0x28
    f912:	9004      	str	r0, [sp, #16]
    f914:	9105      	str	r1, [sp, #20]
    f916:	9008      	str	r0, [sp, #32]
    f918:	9109      	str	r1, [sp, #36]	; 0x24
    f91a:	9006      	str	r0, [sp, #24]
    f91c:	9107      	str	r1, [sp, #28]
    f91e:	9806      	ldr	r0, [sp, #24]
    f920:	9907      	ldr	r1, [sp, #28]
    f922:	9003      	str	r0, [sp, #12]
    f924:	9102      	str	r1, [sp, #8]
    f926:	e7ff      	b.n	f928 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    f928:	9803      	ldr	r0, [sp, #12]
    f92a:	9902      	ldr	r1, [sp, #8]
    f92c:	f7ff f884 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f930:	9001      	str	r0, [sp, #4]
    f932:	e7ff      	b.n	f934 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    f934:	9801      	ldr	r0, [sp, #4]
    f936:	b00a      	add	sp, #40	; 0x28
    f938:	bd80      	pop	{r7, pc}

0000f93a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    f93a:	b082      	sub	sp, #8
    f93c:	9000      	str	r0, [sp, #0]
    f93e:	9101      	str	r1, [sp, #4]
    f940:	b002      	add	sp, #8
    f942:	4770      	bx	lr

0000f944 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    f944:	b082      	sub	sp, #8
    f946:	2000      	movs	r0, #0
        SPI {
    f948:	9000      	str	r0, [sp, #0]
    f94a:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    f94c:	9800      	ldr	r0, [sp, #0]
    f94e:	9901      	ldr	r1, [sp, #4]
    f950:	b002      	add	sp, #8
    f952:	4770      	bx	lr

0000f954 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    f954:	b5b0      	push	{r4, r5, r7, lr}
    f956:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    f95a:	9077      	str	r0, [sp, #476]	; 0x1dc
    f95c:	9178      	str	r1, [sp, #480]	; 0x1e0
    f95e:	9279      	str	r2, [sp, #484]	; 0x1e4
    f960:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    f962:	9028      	str	r0, [sp, #160]	; 0xa0
    f964:	4608      	mov	r0, r1
    f966:	9127      	str	r1, [sp, #156]	; 0x9c
    f968:	4619      	mov	r1, r3
    f96a:	9226      	str	r2, [sp, #152]	; 0x98
    f96c:	f009 fe6a 	bl	19644 <hal_spi_config>
    f970:	9029      	str	r0, [sp, #164]	; 0xa4
    f972:	e7ff      	b.n	f974 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    f974:	f24f 20dc 	movw	r0, #62172	; 0xf2dc
    f978:	f2c0 0001 	movt	r0, #1
    f97c:	6800      	ldr	r0, [r0, #0]
    f97e:	a929      	add	r1, sp, #164	; 0xa4
    f980:	912a      	str	r1, [sp, #168]	; 0xa8
    f982:	902b      	str	r0, [sp, #172]	; 0xac
    f984:	982a      	ldr	r0, [sp, #168]	; 0xa8
    f986:	907b      	str	r0, [sp, #492]	; 0x1ec
    f988:	992b      	ldr	r1, [sp, #172]	; 0xac
    f98a:	917c      	str	r1, [sp, #496]	; 0x1f0
    f98c:	6802      	ldr	r2, [r0, #0]
    f98e:	680b      	ldr	r3, [r1, #0]
    f990:	429a      	cmp	r2, r3
    f992:	9025      	str	r0, [sp, #148]	; 0x94
    f994:	9124      	str	r1, [sp, #144]	; 0x90
    f996:	d105      	bne.n	f9a4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    f998:	e7ff      	b.n	f99a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    f99a:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f99c:	f009 fe6e 	bl	1967c <hal_spi_enable>
    f9a0:	9043      	str	r0, [sp, #268]	; 0x10c
    f9a2:	e072      	b.n	fa8a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    f9a4:	f24f 3034 	movw	r0, #62260	; 0xf334
    f9a8:	f2c0 0001 	movt	r0, #1
    f9ac:	6801      	ldr	r1, [r0, #0]
    f9ae:	9825      	ldr	r0, [sp, #148]	; 0x94
    f9b0:	903b      	str	r0, [sp, #236]	; 0xec
    f9b2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f9b4:	923c      	str	r2, [sp, #240]	; 0xf0
    f9b6:	f24f 3350 	movw	r3, #62288	; 0xf350
    f9ba:	f2c0 0301 	movt	r3, #1
    f9be:	681b      	ldr	r3, [r3, #0]
    f9c0:	f24f 3c54 	movw	ip, #62292	; 0xf354
    f9c4:	f2c0 0c01 	movt	ip, #1
    f9c8:	f8dc c000 	ldr.w	ip, [ip]
    f9cc:	46ee      	mov	lr, sp
    f9ce:	2400      	movs	r4, #0
    f9d0:	f8ce 4000 	str.w	r4, [lr]
    f9d4:	a83d      	add	r0, sp, #244	; 0xf4
    f9d6:	2201      	movs	r2, #1
    f9d8:	9123      	str	r1, [sp, #140]	; 0x8c
    f9da:	4619      	mov	r1, r3
    f9dc:	4663      	mov	r3, ip
    f9de:	f7ff fc88 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f9e2:	e7ff      	b.n	f9e4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    f9e4:	a83b      	add	r0, sp, #236	; 0xec
    f9e6:	9038      	str	r0, [sp, #224]	; 0xe0
    f9e8:	a83c      	add	r0, sp, #240	; 0xf0
    f9ea:	9039      	str	r0, [sp, #228]	; 0xe4
    f9ec:	a83d      	add	r0, sp, #244	; 0xf4
    f9ee:	903a      	str	r0, [sp, #232]	; 0xe8
    f9f0:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f9f2:	907d      	str	r0, [sp, #500]	; 0x1f4
    f9f4:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f9f6:	917e      	str	r1, [sp, #504]	; 0x1f8
    f9f8:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    f9fa:	927f      	str	r2, [sp, #508]	; 0x1fc
    f9fc:	f240 037f 	movw	r3, #127	; 0x7f
    fa00:	f2c0 0301 	movt	r3, #1
    fa04:	9122      	str	r1, [sp, #136]	; 0x88
    fa06:	4619      	mov	r1, r3
    fa08:	9221      	str	r2, [sp, #132]	; 0x84
    fa0a:	f000 fb70 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa0e:	9020      	str	r0, [sp, #128]	; 0x80
    fa10:	911f      	str	r1, [sp, #124]	; 0x7c
    fa12:	e7ff      	b.n	fa14 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    fa14:	f240 017f 	movw	r1, #127	; 0x7f
    fa18:	f2c0 0101 	movt	r1, #1
    fa1c:	9822      	ldr	r0, [sp, #136]	; 0x88
    fa1e:	f000 fb66 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa22:	901e      	str	r0, [sp, #120]	; 0x78
    fa24:	911d      	str	r1, [sp, #116]	; 0x74
    fa26:	e7ff      	b.n	fa28 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    fa28:	f247 1153 	movw	r1, #29011	; 0x7153
    fa2c:	f2c0 0101 	movt	r1, #1
    fa30:	9821      	ldr	r0, [sp, #132]	; 0x84
    fa32:	f000 fb9b 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fa36:	901c      	str	r0, [sp, #112]	; 0x70
    fa38:	911b      	str	r1, [sp, #108]	; 0x6c
    fa3a:	e7ff      	b.n	fa3c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    fa3c:	9820      	ldr	r0, [sp, #128]	; 0x80
    fa3e:	9032      	str	r0, [sp, #200]	; 0xc8
    fa40:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fa42:	9133      	str	r1, [sp, #204]	; 0xcc
    fa44:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    fa46:	9234      	str	r2, [sp, #208]	; 0xd0
    fa48:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    fa4a:	9335      	str	r3, [sp, #212]	; 0xd4
    fa4c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    fa50:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    fa54:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    fa58:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    fa5c:	466c      	mov	r4, sp
    fa5e:	2503      	movs	r5, #3
    fa60:	6025      	str	r5, [r4, #0]
    fa62:	a82c      	add	r0, sp, #176	; 0xb0
    fa64:	ab32      	add	r3, sp, #200	; 0xc8
    fa66:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fa68:	462a      	mov	r2, r5
    fa6a:	f7ff fc42 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fa6e:	e7ff      	b.n	fa70 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    fa70:	f24f 3070 	movw	r0, #62320	; 0xf370
    fa74:	f2c0 0001 	movt	r0, #1
    fa78:	f007 f87d 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fa7c:	901a      	str	r0, [sp, #104]	; 0x68
    fa7e:	e7ff      	b.n	fa80 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    fa80:	a82c      	add	r0, sp, #176	; 0xb0
    fa82:	991a      	ldr	r1, [sp, #104]	; 0x68
    fa84:	f007 f8b4 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fa88:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    fa8a:	f24f 20dc 	movw	r0, #62172	; 0xf2dc
    fa8e:	f2c0 0001 	movt	r0, #1
    fa92:	6800      	ldr	r0, [r0, #0]
    fa94:	a943      	add	r1, sp, #268	; 0x10c
    fa96:	9144      	str	r1, [sp, #272]	; 0x110
    fa98:	9045      	str	r0, [sp, #276]	; 0x114
    fa9a:	9844      	ldr	r0, [sp, #272]	; 0x110
    fa9c:	9080      	str	r0, [sp, #512]	; 0x200
    fa9e:	9945      	ldr	r1, [sp, #276]	; 0x114
    faa0:	9181      	str	r1, [sp, #516]	; 0x204
    faa2:	6802      	ldr	r2, [r0, #0]
    faa4:	680b      	ldr	r3, [r1, #0]
    faa6:	429a      	cmp	r2, r3
    faa8:	9019      	str	r0, [sp, #100]	; 0x64
    faaa:	9118      	str	r1, [sp, #96]	; 0x60
    faac:	d106      	bne.n	fabc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    faae:	e7ff      	b.n	fab0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    fab0:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    fab2:	9826      	ldr	r0, [sp, #152]	; 0x98
    fab4:	f009 f9b8 	bl	18e28 <hal_gpio_init_out>
    fab8:	905d      	str	r0, [sp, #372]	; 0x174
    faba:	e072      	b.n	fba2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    fabc:	f24f 3034 	movw	r0, #62260	; 0xf334
    fac0:	f2c0 0001 	movt	r0, #1
    fac4:	6801      	ldr	r1, [r0, #0]
    fac6:	9819      	ldr	r0, [sp, #100]	; 0x64
    fac8:	9055      	str	r0, [sp, #340]	; 0x154
    faca:	9a18      	ldr	r2, [sp, #96]	; 0x60
    facc:	9256      	str	r2, [sp, #344]	; 0x158
    face:	f24f 3398 	movw	r3, #62360	; 0xf398
    fad2:	f2c0 0301 	movt	r3, #1
    fad6:	681b      	ldr	r3, [r3, #0]
    fad8:	f24f 3c54 	movw	ip, #62292	; 0xf354
    fadc:	f2c0 0c01 	movt	ip, #1
    fae0:	f8dc c000 	ldr.w	ip, [ip]
    fae4:	46ee      	mov	lr, sp
    fae6:	2400      	movs	r4, #0
    fae8:	f8ce 4000 	str.w	r4, [lr]
    faec:	a857      	add	r0, sp, #348	; 0x15c
    faee:	2201      	movs	r2, #1
    faf0:	9117      	str	r1, [sp, #92]	; 0x5c
    faf2:	4619      	mov	r1, r3
    faf4:	4663      	mov	r3, ip
    faf6:	f7ff fbfc 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fafa:	e7ff      	b.n	fafc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    fafc:	a855      	add	r0, sp, #340	; 0x154
    fafe:	9052      	str	r0, [sp, #328]	; 0x148
    fb00:	a856      	add	r0, sp, #344	; 0x158
    fb02:	9053      	str	r0, [sp, #332]	; 0x14c
    fb04:	a857      	add	r0, sp, #348	; 0x15c
    fb06:	9054      	str	r0, [sp, #336]	; 0x150
    fb08:	9852      	ldr	r0, [sp, #328]	; 0x148
    fb0a:	9082      	str	r0, [sp, #520]	; 0x208
    fb0c:	9953      	ldr	r1, [sp, #332]	; 0x14c
    fb0e:	9183      	str	r1, [sp, #524]	; 0x20c
    fb10:	9a54      	ldr	r2, [sp, #336]	; 0x150
    fb12:	9284      	str	r2, [sp, #528]	; 0x210
    fb14:	f240 037f 	movw	r3, #127	; 0x7f
    fb18:	f2c0 0301 	movt	r3, #1
    fb1c:	9116      	str	r1, [sp, #88]	; 0x58
    fb1e:	4619      	mov	r1, r3
    fb20:	9215      	str	r2, [sp, #84]	; 0x54
    fb22:	f000 fae4 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb26:	9014      	str	r0, [sp, #80]	; 0x50
    fb28:	9113      	str	r1, [sp, #76]	; 0x4c
    fb2a:	e7ff      	b.n	fb2c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    fb2c:	f240 017f 	movw	r1, #127	; 0x7f
    fb30:	f2c0 0101 	movt	r1, #1
    fb34:	9816      	ldr	r0, [sp, #88]	; 0x58
    fb36:	f000 fada 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb3a:	9012      	str	r0, [sp, #72]	; 0x48
    fb3c:	9111      	str	r1, [sp, #68]	; 0x44
    fb3e:	e7ff      	b.n	fb40 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    fb40:	f247 1153 	movw	r1, #29011	; 0x7153
    fb44:	f2c0 0101 	movt	r1, #1
    fb48:	9815      	ldr	r0, [sp, #84]	; 0x54
    fb4a:	f000 fb0f 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fb4e:	9010      	str	r0, [sp, #64]	; 0x40
    fb50:	910f      	str	r1, [sp, #60]	; 0x3c
    fb52:	e7ff      	b.n	fb54 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    fb54:	9814      	ldr	r0, [sp, #80]	; 0x50
    fb56:	904c      	str	r0, [sp, #304]	; 0x130
    fb58:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fb5a:	914d      	str	r1, [sp, #308]	; 0x134
    fb5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fb5e:	924e      	str	r2, [sp, #312]	; 0x138
    fb60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fb62:	934f      	str	r3, [sp, #316]	; 0x13c
    fb64:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fb68:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    fb6c:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    fb70:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    fb74:	466c      	mov	r4, sp
    fb76:	2503      	movs	r5, #3
    fb78:	6025      	str	r5, [r4, #0]
    fb7a:	a846      	add	r0, sp, #280	; 0x118
    fb7c:	ab4c      	add	r3, sp, #304	; 0x130
    fb7e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    fb80:	462a      	mov	r2, r5
    fb82:	f7ff fbb6 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fb86:	e7ff      	b.n	fb88 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    fb88:	f24f 309c 	movw	r0, #62364	; 0xf39c
    fb8c:	f2c0 0001 	movt	r0, #1
    fb90:	f006 fff1 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fb94:	900e      	str	r0, [sp, #56]	; 0x38
    fb96:	e7ff      	b.n	fb98 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    fb98:	a846      	add	r0, sp, #280	; 0x118
    fb9a:	990e      	ldr	r1, [sp, #56]	; 0x38
    fb9c:	f007 f828 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fba0:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    fba2:	f24f 20dc 	movw	r0, #62172	; 0xf2dc
    fba6:	f2c0 0001 	movt	r0, #1
    fbaa:	6800      	ldr	r0, [r0, #0]
    fbac:	a95d      	add	r1, sp, #372	; 0x174
    fbae:	915e      	str	r1, [sp, #376]	; 0x178
    fbb0:	905f      	str	r0, [sp, #380]	; 0x17c
    fbb2:	985e      	ldr	r0, [sp, #376]	; 0x178
    fbb4:	9085      	str	r0, [sp, #532]	; 0x214
    fbb6:	995f      	ldr	r1, [sp, #380]	; 0x17c
    fbb8:	9186      	str	r1, [sp, #536]	; 0x218
    fbba:	6802      	ldr	r2, [r0, #0]
    fbbc:	680b      	ldr	r3, [r1, #0]
    fbbe:	429a      	cmp	r2, r3
    fbc0:	900d      	str	r0, [sp, #52]	; 0x34
    fbc2:	910c      	str	r1, [sp, #48]	; 0x30
    fbc4:	d109      	bne.n	fbda <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    fbc6:	e7ff      	b.n	fbc8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    fbc8:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fbca:	9928      	ldr	r1, [sp, #160]	; 0xa0
    fbcc:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    fbce:	9a26      	ldr	r2, [sp, #152]	; 0x98
    fbd0:	604a      	str	r2, [r1, #4]
    fbd2:	2001      	movs	r0, #1
        Ok(())
    }
    fbd4:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    fbd8:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    fbda:	f24f 3034 	movw	r0, #62260	; 0xf334
    fbde:	f2c0 0001 	movt	r0, #1
    fbe2:	6801      	ldr	r1, [r0, #0]
    fbe4:	980d      	ldr	r0, [sp, #52]	; 0x34
    fbe6:	906f      	str	r0, [sp, #444]	; 0x1bc
    fbe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fbea:	9270      	str	r2, [sp, #448]	; 0x1c0
    fbec:	f24f 33c4 	movw	r3, #62404	; 0xf3c4
    fbf0:	f2c0 0301 	movt	r3, #1
    fbf4:	681b      	ldr	r3, [r3, #0]
    fbf6:	f24f 3c54 	movw	ip, #62292	; 0xf354
    fbfa:	f2c0 0c01 	movt	ip, #1
    fbfe:	f8dc c000 	ldr.w	ip, [ip]
    fc02:	46ee      	mov	lr, sp
    fc04:	2400      	movs	r4, #0
    fc06:	f8ce 4000 	str.w	r4, [lr]
    fc0a:	a871      	add	r0, sp, #452	; 0x1c4
    fc0c:	2201      	movs	r2, #1
    fc0e:	910b      	str	r1, [sp, #44]	; 0x2c
    fc10:	4619      	mov	r1, r3
    fc12:	4663      	mov	r3, ip
    fc14:	f7ff fb6d 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fc18:	e7ff      	b.n	fc1a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    fc1a:	a86f      	add	r0, sp, #444	; 0x1bc
    fc1c:	906c      	str	r0, [sp, #432]	; 0x1b0
    fc1e:	a870      	add	r0, sp, #448	; 0x1c0
    fc20:	906d      	str	r0, [sp, #436]	; 0x1b4
    fc22:	a871      	add	r0, sp, #452	; 0x1c4
    fc24:	906e      	str	r0, [sp, #440]	; 0x1b8
    fc26:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    fc28:	9087      	str	r0, [sp, #540]	; 0x21c
    fc2a:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    fc2c:	9188      	str	r1, [sp, #544]	; 0x220
    fc2e:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    fc30:	9289      	str	r2, [sp, #548]	; 0x224
    fc32:	f240 037f 	movw	r3, #127	; 0x7f
    fc36:	f2c0 0301 	movt	r3, #1
    fc3a:	910a      	str	r1, [sp, #40]	; 0x28
    fc3c:	4619      	mov	r1, r3
    fc3e:	9209      	str	r2, [sp, #36]	; 0x24
    fc40:	f000 fa55 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fc44:	9008      	str	r0, [sp, #32]
    fc46:	9107      	str	r1, [sp, #28]
    fc48:	e7ff      	b.n	fc4a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    fc4a:	f240 017f 	movw	r1, #127	; 0x7f
    fc4e:	f2c0 0101 	movt	r1, #1
    fc52:	980a      	ldr	r0, [sp, #40]	; 0x28
    fc54:	f000 fa4b 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fc58:	9006      	str	r0, [sp, #24]
    fc5a:	9105      	str	r1, [sp, #20]
    fc5c:	e7ff      	b.n	fc5e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    fc5e:	f247 1153 	movw	r1, #29011	; 0x7153
    fc62:	f2c0 0101 	movt	r1, #1
    fc66:	9809      	ldr	r0, [sp, #36]	; 0x24
    fc68:	f000 fa80 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fc6c:	9004      	str	r0, [sp, #16]
    fc6e:	9103      	str	r1, [sp, #12]
    fc70:	e7ff      	b.n	fc72 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    fc72:	9808      	ldr	r0, [sp, #32]
    fc74:	9066      	str	r0, [sp, #408]	; 0x198
    fc76:	9907      	ldr	r1, [sp, #28]
    fc78:	9167      	str	r1, [sp, #412]	; 0x19c
    fc7a:	9a06      	ldr	r2, [sp, #24]
    fc7c:	9268      	str	r2, [sp, #416]	; 0x1a0
    fc7e:	9b05      	ldr	r3, [sp, #20]
    fc80:	9369      	str	r3, [sp, #420]	; 0x1a4
    fc82:	f8dd c010 	ldr.w	ip, [sp, #16]
    fc86:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    fc8a:	f8dd e00c 	ldr.w	lr, [sp, #12]
    fc8e:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    fc92:	466c      	mov	r4, sp
    fc94:	2503      	movs	r5, #3
    fc96:	6025      	str	r5, [r4, #0]
    fc98:	a860      	add	r0, sp, #384	; 0x180
    fc9a:	ab66      	add	r3, sp, #408	; 0x198
    fc9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fc9e:	462a      	mov	r2, r5
    fca0:	f7ff fb27 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fca4:	e7ff      	b.n	fca6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    fca6:	f24f 30c8 	movw	r0, #62408	; 0xf3c8
    fcaa:	f2c0 0001 	movt	r0, #1
    fcae:	f006 ff62 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fcb2:	9002      	str	r0, [sp, #8]
    fcb4:	e7ff      	b.n	fcb6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    fcb6:	a860      	add	r0, sp, #384	; 0x180
    fcb8:	9902      	ldr	r1, [sp, #8]
    fcba:	f006 ff99 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fcbe:	defe      	udf	#254	; 0xfe

0000fcc0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    fcc0:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    fcc2:	4770      	bx	lr

0000fcc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    fcc4:	b5b0      	push	{r4, r5, r7, lr}
    fcc6:	b0b0      	sub	sp, #192	; 0xc0
    fcc8:	9029      	str	r0, [sp, #164]	; 0xa4
    fcca:	912a      	str	r1, [sp, #168]	; 0xa8
    fccc:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    fcce:	900e      	str	r0, [sp, #56]	; 0x38
    fcd0:	4608      	mov	r0, r1
    fcd2:	910d      	str	r1, [sp, #52]	; 0x34
    fcd4:	4611      	mov	r1, r2
    fcd6:	f009 f8a7 	bl	18e28 <hal_gpio_init_out>
    fcda:	900f      	str	r0, [sp, #60]	; 0x3c
    fcdc:	e7ff      	b.n	fcde <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    fcde:	f24f 20dc 	movw	r0, #62172	; 0xf2dc
    fce2:	f2c0 0001 	movt	r0, #1
    fce6:	6800      	ldr	r0, [r0, #0]
    fce8:	a90f      	add	r1, sp, #60	; 0x3c
    fcea:	9110      	str	r1, [sp, #64]	; 0x40
    fcec:	9011      	str	r0, [sp, #68]	; 0x44
    fcee:	9810      	ldr	r0, [sp, #64]	; 0x40
    fcf0:	902b      	str	r0, [sp, #172]	; 0xac
    fcf2:	9911      	ldr	r1, [sp, #68]	; 0x44
    fcf4:	912c      	str	r1, [sp, #176]	; 0xb0
    fcf6:	6802      	ldr	r2, [r0, #0]
    fcf8:	680b      	ldr	r3, [r1, #0]
    fcfa:	429a      	cmp	r2, r3
    fcfc:	900c      	str	r0, [sp, #48]	; 0x30
    fcfe:	910b      	str	r1, [sp, #44]	; 0x2c
    fd00:	d106      	bne.n	fd10 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    fd02:	e7ff      	b.n	fd04 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    fd04:	980d      	ldr	r0, [sp, #52]	; 0x34
    fd06:	990e      	ldr	r1, [sp, #56]	; 0x38
    fd08:	6008      	str	r0, [r1, #0]
    fd0a:	2001      	movs	r0, #1
        Ok(())
    }
    fd0c:	b030      	add	sp, #192	; 0xc0
    fd0e:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    fd10:	f24f 3034 	movw	r0, #62260	; 0xf334
    fd14:	f2c0 0001 	movt	r0, #1
    fd18:	6801      	ldr	r1, [r0, #0]
    fd1a:	980c      	ldr	r0, [sp, #48]	; 0x30
    fd1c:	9021      	str	r0, [sp, #132]	; 0x84
    fd1e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fd20:	9222      	str	r2, [sp, #136]	; 0x88
    fd22:	f24f 33ec 	movw	r3, #62444	; 0xf3ec
    fd26:	f2c0 0301 	movt	r3, #1
    fd2a:	681b      	ldr	r3, [r3, #0]
    fd2c:	f24f 3c54 	movw	ip, #62292	; 0xf354
    fd30:	f2c0 0c01 	movt	ip, #1
    fd34:	f8dc c000 	ldr.w	ip, [ip]
    fd38:	46ee      	mov	lr, sp
    fd3a:	2400      	movs	r4, #0
    fd3c:	f8ce 4000 	str.w	r4, [lr]
    fd40:	a823      	add	r0, sp, #140	; 0x8c
    fd42:	2201      	movs	r2, #1
    fd44:	910a      	str	r1, [sp, #40]	; 0x28
    fd46:	4619      	mov	r1, r3
    fd48:	4663      	mov	r3, ip
    fd4a:	f7ff fad2 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fd4e:	e7ff      	b.n	fd50 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    fd50:	a821      	add	r0, sp, #132	; 0x84
    fd52:	901e      	str	r0, [sp, #120]	; 0x78
    fd54:	a822      	add	r0, sp, #136	; 0x88
    fd56:	901f      	str	r0, [sp, #124]	; 0x7c
    fd58:	a823      	add	r0, sp, #140	; 0x8c
    fd5a:	9020      	str	r0, [sp, #128]	; 0x80
    fd5c:	981e      	ldr	r0, [sp, #120]	; 0x78
    fd5e:	902d      	str	r0, [sp, #180]	; 0xb4
    fd60:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fd62:	912e      	str	r1, [sp, #184]	; 0xb8
    fd64:	9a20      	ldr	r2, [sp, #128]	; 0x80
    fd66:	922f      	str	r2, [sp, #188]	; 0xbc
    fd68:	f240 037f 	movw	r3, #127	; 0x7f
    fd6c:	f2c0 0301 	movt	r3, #1
    fd70:	9109      	str	r1, [sp, #36]	; 0x24
    fd72:	4619      	mov	r1, r3
    fd74:	9208      	str	r2, [sp, #32]
    fd76:	f000 f9ba 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fd7a:	9007      	str	r0, [sp, #28]
    fd7c:	9106      	str	r1, [sp, #24]
    fd7e:	e7ff      	b.n	fd80 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    fd80:	f240 017f 	movw	r1, #127	; 0x7f
    fd84:	f2c0 0101 	movt	r1, #1
    fd88:	9809      	ldr	r0, [sp, #36]	; 0x24
    fd8a:	f000 f9b0 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fd8e:	9005      	str	r0, [sp, #20]
    fd90:	9104      	str	r1, [sp, #16]
    fd92:	e7ff      	b.n	fd94 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    fd94:	f247 1153 	movw	r1, #29011	; 0x7153
    fd98:	f2c0 0101 	movt	r1, #1
    fd9c:	9808      	ldr	r0, [sp, #32]
    fd9e:	f000 f9e5 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fda2:	9003      	str	r0, [sp, #12]
    fda4:	9102      	str	r1, [sp, #8]
    fda6:	e7ff      	b.n	fda8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    fda8:	9807      	ldr	r0, [sp, #28]
    fdaa:	9018      	str	r0, [sp, #96]	; 0x60
    fdac:	9906      	ldr	r1, [sp, #24]
    fdae:	9119      	str	r1, [sp, #100]	; 0x64
    fdb0:	9a05      	ldr	r2, [sp, #20]
    fdb2:	921a      	str	r2, [sp, #104]	; 0x68
    fdb4:	9b04      	ldr	r3, [sp, #16]
    fdb6:	931b      	str	r3, [sp, #108]	; 0x6c
    fdb8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fdbc:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    fdc0:	f8dd e008 	ldr.w	lr, [sp, #8]
    fdc4:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    fdc8:	466c      	mov	r4, sp
    fdca:	2503      	movs	r5, #3
    fdcc:	6025      	str	r5, [r4, #0]
    fdce:	a812      	add	r0, sp, #72	; 0x48
    fdd0:	ab18      	add	r3, sp, #96	; 0x60
    fdd2:	990a      	ldr	r1, [sp, #40]	; 0x28
    fdd4:	462a      	mov	r2, r5
    fdd6:	f7ff fa8c 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fdda:	e7ff      	b.n	fddc <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    fddc:	f24f 30f0 	movw	r0, #62448	; 0xf3f0
    fde0:	f2c0 0001 	movt	r0, #1
    fde4:	f006 fec7 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fde8:	9001      	str	r0, [sp, #4]
    fdea:	e7ff      	b.n	fdec <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    fdec:	a812      	add	r0, sp, #72	; 0x48
    fdee:	9901      	ldr	r1, [sp, #4]
    fdf0:	f006 fefe 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fdf4:	defe      	udf	#254	; 0xfe

0000fdf6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    fdf6:	b580      	push	{r7, lr}
    fdf8:	b082      	sub	sp, #8
    fdfa:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    fdfc:	6800      	ldr	r0, [r0, #0]
    fdfe:	2100      	movs	r1, #0
    fe00:	f009 f82e 	bl	18e60 <hal_gpio_write>
    fe04:	e7ff      	b.n	fe06 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    fe06:	2001      	movs	r0, #1
        Ok(())
    }
    fe08:	b002      	add	sp, #8
    fe0a:	bd80      	pop	{r7, pc}

0000fe0c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    fe0c:	b580      	push	{r7, lr}
    fe0e:	b082      	sub	sp, #8
    fe10:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    fe12:	6800      	ldr	r0, [r0, #0]
    fe14:	2101      	movs	r1, #1
    fe16:	f009 f823 	bl	18e60 <hal_gpio_write>
    fe1a:	e7ff      	b.n	fe1c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    fe1c:	2001      	movs	r0, #1
        Ok(())
    }
    fe1e:	b002      	add	sp, #8
    fe20:	bd80      	pop	{r7, pc}

0000fe22 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    fe22:	4770      	bx	lr

0000fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    fe24:	b580      	push	{r7, lr}
    fe26:	b086      	sub	sp, #24
    fe28:	460a      	mov	r2, r1
    fe2a:	9003      	str	r0, [sp, #12]
    fe2c:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fe30:	b2c8      	uxtb	r0, r1
    fe32:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fe36:	fba0 0101 	umull	r0, r1, r0, r1
    fe3a:	2900      	cmp	r1, #0
    fe3c:	9002      	str	r0, [sp, #8]
    fe3e:	d110      	bne.n	fe62 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    fe40:	e7ff      	b.n	fe42 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    fe42:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    fe46:	f2c1 0062 	movt	r0, #4194	; 0x1062
    fe4a:	9902      	ldr	r1, [sp, #8]
    fe4c:	fba1 0200 	umull	r0, r2, r1, r0
    fe50:	0992      	lsrs	r2, r2, #6
    fe52:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    fe54:	9001      	str	r0, [sp, #4]
    fe56:	4610      	mov	r0, r2
    fe58:	f00b f820 	bl	1ae9c <os_time_delay>
    fe5c:	e7ff      	b.n	fe5e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    fe5e:	b006      	add	sp, #24
    fe60:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fe62:	f24f 4010 	movw	r0, #62480	; 0xf410
    fe66:	f2c0 0001 	movt	r0, #1
    fe6a:	f24f 4200 	movw	r2, #62464	; 0xf400
    fe6e:	f2c0 0201 	movt	r2, #1
    fe72:	2121      	movs	r1, #33	; 0x21
    fe74:	f006 fe86 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fe78:	defe      	udf	#254	; 0xfe

0000fe7a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    fe7a:	b580      	push	{r7, lr}
    fe7c:	b084      	sub	sp, #16
    fe7e:	9002      	str	r0, [sp, #8]
    fe80:	9103      	str	r1, [sp, #12]
    fe82:	6800      	ldr	r0, [r0, #0]
    fe84:	f000 f845 	bl	ff12 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    fe88:	9001      	str	r0, [sp, #4]
    fe8a:	e7ff      	b.n	fe8c <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    fe8c:	9801      	ldr	r0, [sp, #4]
    fe8e:	f000 0001 	and.w	r0, r0, #1
    fe92:	b004      	add	sp, #16
    fe94:	bd80      	pop	{r7, pc}

0000fe96 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    fe96:	b087      	sub	sp, #28
    fe98:	9000      	str	r0, [sp, #0]
    fe9a:	9101      	str	r1, [sp, #4]
    fe9c:	2000      	movs	r0, #0
    fe9e:	f88d 0013 	strb.w	r0, [sp, #19]
    fea2:	f88d 0012 	strb.w	r0, [sp, #18]
    fea6:	2001      	movs	r0, #1
    fea8:	f88d 0013 	strb.w	r0, [sp, #19]
    feac:	f88d 0012 	strb.w	r0, [sp, #18]
    feb0:	9800      	ldr	r0, [sp, #0]
    feb2:	2800      	cmp	r0, #0
    feb4:	d001      	beq.n	feba <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    feb6:	e7ff      	b.n	feb8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    feb8:	e006      	b.n	fec8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    feba:	2000      	movs	r0, #0
    febc:	f88d 0012 	strb.w	r0, [sp, #18]
    fec0:	2001      	movs	r0, #1
    fec2:	9002      	str	r0, [sp, #8]
    fec4:	e008      	b.n	fed8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fec6:	defe      	udf	#254	; 0xfe
    fec8:	2000      	movs	r0, #0
    feca:	f88d 0013 	strb.w	r0, [sp, #19]
    fece:	9901      	ldr	r1, [sp, #4]
    fed0:	9106      	str	r1, [sp, #24]
    fed2:	9103      	str	r1, [sp, #12]
    fed4:	9002      	str	r0, [sp, #8]
    fed6:	e7ff      	b.n	fed8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fed8:	f89d 0012 	ldrb.w	r0, [sp, #18]
    fedc:	07c0      	lsls	r0, r0, #31
    fede:	2800      	cmp	r0, #0
    fee0:	d104      	bne.n	feec <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    fee2:	e7ff      	b.n	fee4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fee4:	9800      	ldr	r0, [sp, #0]
    fee6:	2801      	cmp	r0, #1
    fee8:	d008      	beq.n	fefc <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    feea:	e011      	b.n	ff10 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    feec:	2000      	movs	r0, #0
    feee:	f88d 0012 	strb.w	r0, [sp, #18]
    fef2:	e7f7      	b.n	fee4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fef4:	9802      	ldr	r0, [sp, #8]
    fef6:	9903      	ldr	r1, [sp, #12]
    fef8:	b007      	add	sp, #28
    fefa:	4770      	bx	lr
    fefc:	f89d 0013 	ldrb.w	r0, [sp, #19]
    ff00:	07c0      	lsls	r0, r0, #31
    ff02:	2800      	cmp	r0, #0
    ff04:	d0f6      	beq.n	fef4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    ff06:	e7ff      	b.n	ff08 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    ff08:	2000      	movs	r0, #0
    ff0a:	f88d 0013 	strb.w	r0, [sp, #19]
    ff0e:	e7f1      	b.n	fef4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    ff10:	e7f0      	b.n	fef4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000ff12 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    ff12:	b580      	push	{r7, lr}
    ff14:	b08e      	sub	sp, #56	; 0x38
    ff16:	900b      	str	r0, [sp, #44]	; 0x2c
    ff18:	910c      	str	r1, [sp, #48]	; 0x30
    ff1a:	9003      	str	r0, [sp, #12]
    ff1c:	9803      	ldr	r0, [sp, #12]
    ff1e:	6800      	ldr	r0, [r0, #0]
    ff20:	2800      	cmp	r0, #0
    ff22:	4602      	mov	r2, r0
    ff24:	bf18      	it	ne
    ff26:	2201      	movne	r2, #1
    ff28:	2800      	cmp	r0, #0
    ff2a:	9101      	str	r1, [sp, #4]
    ff2c:	d00f      	beq.n	ff4e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    ff2e:	e7ff      	b.n	ff30 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    ff30:	9803      	ldr	r0, [sp, #12]
    ff32:	900d      	str	r0, [sp, #52]	; 0x34
    ff34:	f24f 4231 	movw	r2, #62513	; 0xf431
    ff38:	f2c0 0201 	movt	r2, #1
    ff3c:	a907      	add	r1, sp, #28
    ff3e:	2304      	movs	r3, #4
    ff40:	9000      	str	r0, [sp, #0]
    ff42:	4608      	mov	r0, r1
    ff44:	9901      	ldr	r1, [sp, #4]
    ff46:	f007 fcc6 	bl	178d6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    ff4a:	e011      	b.n	ff70 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    ff4c:	defe      	udf	#254	; 0xfe
    ff4e:	f24f 4235 	movw	r2, #62517	; 0xf435
    ff52:	f2c0 0201 	movt	r2, #1
    ff56:	a804      	add	r0, sp, #16
    ff58:	2304      	movs	r3, #4
    ff5a:	9901      	ldr	r1, [sp, #4]
    ff5c:	f007 fcbb 	bl	178d6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    ff60:	e7ff      	b.n	ff62 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    ff62:	a804      	add	r0, sp, #16
    ff64:	f006 ffd4 	bl	16f10 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    ff68:	f88d 000b 	strb.w	r0, [sp, #11]
    ff6c:	e7ff      	b.n	ff6e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    ff6e:	e011      	b.n	ff94 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    ff70:	9800      	ldr	r0, [sp, #0]
    ff72:	900a      	str	r0, [sp, #40]	; 0x28
    ff74:	f24f 423c 	movw	r2, #62524	; 0xf43c
    ff78:	f2c0 0201 	movt	r2, #1
    ff7c:	a807      	add	r0, sp, #28
    ff7e:	a90a      	add	r1, sp, #40	; 0x28
    ff80:	f006 ff5d 	bl	16e3e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    ff84:	e7ff      	b.n	ff86 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    ff86:	a807      	add	r0, sp, #28
    ff88:	f006 ffc2 	bl	16f10 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    ff8c:	f88d 000b 	strb.w	r0, [sp, #11]
    ff90:	e7ff      	b.n	ff92 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    ff92:	e7ff      	b.n	ff94 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    ff94:	f89d 000b 	ldrb.w	r0, [sp, #11]
    ff98:	b00e      	add	sp, #56	; 0x38
    ff9a:	bd80      	pop	{r7, pc}

0000ff9c <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    ff9c:	b082      	sub	sp, #8
    ff9e:	2000      	movs	r0, #0
    ffa0:	9000      	str	r0, [sp, #0]
    ffa2:	9800      	ldr	r0, [sp, #0]
    ffa4:	b002      	add	sp, #8
    ffa6:	4770      	bx	lr

0000ffa8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    ffa8:	b580      	push	{r7, lr}
    ffaa:	b084      	sub	sp, #16
    ffac:	9002      	str	r0, [sp, #8]
    ffae:	9103      	str	r1, [sp, #12]
    ffb0:	f7ff ff71 	bl	fe96 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    ffb4:	9001      	str	r0, [sp, #4]
    ffb6:	9100      	str	r1, [sp, #0]
    ffb8:	e7ff      	b.n	ffba <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    ffba:	9801      	ldr	r0, [sp, #4]
    ffbc:	9900      	ldr	r1, [sp, #0]
    ffbe:	b004      	add	sp, #16
    ffc0:	bd80      	pop	{r7, pc}

0000ffc2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    ffc2:	b580      	push	{r7, lr}
    ffc4:	b094      	sub	sp, #80	; 0x50
    ffc6:	9008      	str	r0, [sp, #32]
    ffc8:	9109      	str	r1, [sp, #36]	; 0x24
    ffca:	6802      	ldr	r2, [r0, #0]
    ffcc:	2a00      	cmp	r2, #0
    ffce:	bf18      	it	ne
    ffd0:	2201      	movne	r2, #1
    ffd2:	f04f 0300 	mov.w	r3, #0
    ffd6:	930b      	str	r3, [sp, #44]	; 0x2c
    ffd8:	920a      	str	r2, [sp, #40]	; 0x28
    ffda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    ffdc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ffde:	9104      	str	r1, [sp, #16]
    ffe0:	9003      	str	r0, [sp, #12]
    ffe2:	9202      	str	r2, [sp, #8]
    ffe4:	e7ff      	b.n	ffe6 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    ffe6:	9802      	ldr	r0, [sp, #8]
    ffe8:	9902      	ldr	r1, [sp, #8]
    ffea:	910d      	str	r1, [sp, #52]	; 0x34
    ffec:	9a04      	ldr	r2, [sp, #16]
    ffee:	6813      	ldr	r3, [r2, #0]
    fff0:	2b00      	cmp	r3, #0
    fff2:	bf18      	it	ne
    fff4:	2301      	movne	r3, #1
    fff6:	f04f 0c00 	mov.w	ip, #0
    fffa:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    fffe:	930e      	str	r3, [sp, #56]	; 0x38
   10000:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10002:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
   10006:	9001      	str	r0, [sp, #4]
   10008:	9300      	str	r3, [sp, #0]
   1000a:	e7ff      	b.n	1000c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
   1000c:	9800      	ldr	r0, [sp, #0]
   1000e:	9011      	str	r0, [sp, #68]	; 0x44
   10010:	9901      	ldr	r1, [sp, #4]
   10012:	4281      	cmp	r1, r0
   10014:	d104      	bne.n	10020 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
   10016:	e7ff      	b.n	10018 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
   10018:	2001      	movs	r0, #1
   1001a:	f88d 0017 	strb.w	r0, [sp, #23]
   1001e:	e003      	b.n	10028 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
   10020:	2000      	movs	r0, #0
   10022:	f88d 0017 	strb.w	r0, [sp, #23]
   10026:	e7ff      	b.n	10028 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
   10028:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1002c:	07c0      	lsls	r0, r0, #31
   1002e:	2800      	cmp	r0, #0
   10030:	d104      	bne.n	1003c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
   10032:	e7ff      	b.n	10034 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
   10034:	2000      	movs	r0, #0
   10036:	f88d 0016 	strb.w	r0, [sp, #22]
   1003a:	e01c      	b.n	10076 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
   1003c:	9803      	ldr	r0, [sp, #12]
   1003e:	9006      	str	r0, [sp, #24]
   10040:	9904      	ldr	r1, [sp, #16]
   10042:	9107      	str	r1, [sp, #28]
   10044:	9a06      	ldr	r2, [sp, #24]
   10046:	6812      	ldr	r2, [r2, #0]
   10048:	2a00      	cmp	r2, #0
   1004a:	d104      	bne.n	10056 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
   1004c:	e7ff      	b.n	1004e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
   1004e:	2001      	movs	r0, #1
   10050:	f88d 0016 	strb.w	r0, [sp, #22]
   10054:	e00e      	b.n	10074 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
   10056:	9807      	ldr	r0, [sp, #28]
   10058:	6800      	ldr	r0, [r0, #0]
   1005a:	2800      	cmp	r0, #0
   1005c:	d0f7      	beq.n	1004e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
   1005e:	e7ff      	b.n	10060 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
   10060:	9806      	ldr	r0, [sp, #24]
   10062:	9012      	str	r0, [sp, #72]	; 0x48
   10064:	9907      	ldr	r1, [sp, #28]
   10066:	9113      	str	r1, [sp, #76]	; 0x4c
   10068:	f003 fa76 	bl	13558 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
   1006c:	f88d 0016 	strb.w	r0, [sp, #22]
   10070:	e7ff      	b.n	10072 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
   10072:	e7ff      	b.n	10074 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
   10074:	e7ff      	b.n	10076 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
   10076:	f89d 0016 	ldrb.w	r0, [sp, #22]
   1007a:	b014      	add	sp, #80	; 0x50
   1007c:	bd80      	pop	{r7, pc}

0001007e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
   1007e:	b580      	push	{r7, lr}
   10080:	b084      	sub	sp, #16
   10082:	9002      	str	r0, [sp, #8]
   10084:	9103      	str	r1, [sp, #12]
   10086:	6800      	ldr	r0, [r0, #0]
   10088:	f003 f9f8 	bl	1347c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
   1008c:	9001      	str	r0, [sp, #4]
   1008e:	e7ff      	b.n	10090 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
   10090:	9801      	ldr	r0, [sp, #4]
   10092:	f000 0001 	and.w	r0, r0, #1
   10096:	b004      	add	sp, #16
   10098:	bd80      	pop	{r7, pc}

0001009a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
   1009a:	b580      	push	{r7, lr}
   1009c:	b084      	sub	sp, #16
   1009e:	9002      	str	r0, [sp, #8]
   100a0:	9103      	str	r1, [sp, #12]
   100a2:	6800      	ldr	r0, [r0, #0]
   100a4:	f003 f9b3 	bl	1340e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
   100a8:	9001      	str	r0, [sp, #4]
   100aa:	e7ff      	b.n	100ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
   100ac:	9801      	ldr	r0, [sp, #4]
   100ae:	f000 0001 	and.w	r0, r0, #1
   100b2:	b004      	add	sp, #16
   100b4:	bd80      	pop	{r7, pc}

000100b6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
   100b6:	b580      	push	{r7, lr}
   100b8:	b084      	sub	sp, #16
   100ba:	9002      	str	r0, [sp, #8]
   100bc:	9103      	str	r1, [sp, #12]
   100be:	6800      	ldr	r0, [r0, #0]
   100c0:	f7ff ffeb 	bl	1009a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
   100c4:	9001      	str	r0, [sp, #4]
   100c6:	e7ff      	b.n	100c8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
   100c8:	9801      	ldr	r0, [sp, #4]
   100ca:	f000 0001 	and.w	r0, r0, #1
   100ce:	b004      	add	sp, #16
   100d0:	bd80      	pop	{r7, pc}

000100d2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
   100d2:	b580      	push	{r7, lr}
   100d4:	b084      	sub	sp, #16
   100d6:	9002      	str	r0, [sp, #8]
   100d8:	9103      	str	r1, [sp, #12]
   100da:	6800      	ldr	r0, [r0, #0]
   100dc:	f003 fa05 	bl	134ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
   100e0:	9001      	str	r0, [sp, #4]
   100e2:	e7ff      	b.n	100e4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
   100e4:	9801      	ldr	r0, [sp, #4]
   100e6:	f000 0001 	and.w	r0, r0, #1
   100ea:	b004      	add	sp, #16
   100ec:	bd80      	pop	{r7, pc}

000100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
   100ee:	b089      	sub	sp, #36	; 0x24
   100f0:	9005      	str	r0, [sp, #20]
   100f2:	9106      	str	r1, [sp, #24]
   100f4:	9107      	str	r1, [sp, #28]
   100f6:	9907      	ldr	r1, [sp, #28]
   100f8:	9002      	str	r0, [sp, #8]
   100fa:	9101      	str	r1, [sp, #4]
   100fc:	e7ff      	b.n	100fe <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
   100fe:	9802      	ldr	r0, [sp, #8]
   10100:	9008      	str	r0, [sp, #32]
   10102:	9908      	ldr	r1, [sp, #32]
   10104:	9100      	str	r1, [sp, #0]
   10106:	e7ff      	b.n	10108 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
   10108:	9800      	ldr	r0, [sp, #0]
   1010a:	9003      	str	r0, [sp, #12]
   1010c:	9901      	ldr	r1, [sp, #4]
   1010e:	9104      	str	r1, [sp, #16]
   10110:	9803      	ldr	r0, [sp, #12]
   10112:	9904      	ldr	r1, [sp, #16]
   10114:	b009      	add	sp, #36	; 0x24
   10116:	4770      	bx	lr

00010118 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
   10118:	b089      	sub	sp, #36	; 0x24
   1011a:	9005      	str	r0, [sp, #20]
   1011c:	9106      	str	r1, [sp, #24]
   1011e:	9107      	str	r1, [sp, #28]
   10120:	9907      	ldr	r1, [sp, #28]
   10122:	9002      	str	r0, [sp, #8]
   10124:	9101      	str	r1, [sp, #4]
   10126:	e7ff      	b.n	10128 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
   10128:	9802      	ldr	r0, [sp, #8]
   1012a:	9008      	str	r0, [sp, #32]
   1012c:	9908      	ldr	r1, [sp, #32]
   1012e:	9100      	str	r1, [sp, #0]
   10130:	e7ff      	b.n	10132 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
   10132:	9800      	ldr	r0, [sp, #0]
   10134:	9003      	str	r0, [sp, #12]
   10136:	9901      	ldr	r1, [sp, #4]
   10138:	9104      	str	r1, [sp, #16]
   1013a:	9803      	ldr	r0, [sp, #12]
   1013c:	9904      	ldr	r1, [sp, #16]
   1013e:	b009      	add	sp, #36	; 0x24
   10140:	4770      	bx	lr

00010142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
   10142:	b089      	sub	sp, #36	; 0x24
   10144:	9005      	str	r0, [sp, #20]
   10146:	9106      	str	r1, [sp, #24]
   10148:	9107      	str	r1, [sp, #28]
   1014a:	9907      	ldr	r1, [sp, #28]
   1014c:	9002      	str	r0, [sp, #8]
   1014e:	9101      	str	r1, [sp, #4]
   10150:	e7ff      	b.n	10152 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
   10152:	9802      	ldr	r0, [sp, #8]
   10154:	9008      	str	r0, [sp, #32]
   10156:	9908      	ldr	r1, [sp, #32]
   10158:	9100      	str	r1, [sp, #0]
   1015a:	e7ff      	b.n	1015c <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
   1015c:	9800      	ldr	r0, [sp, #0]
   1015e:	9003      	str	r0, [sp, #12]
   10160:	9901      	ldr	r1, [sp, #4]
   10162:	9104      	str	r1, [sp, #16]
   10164:	9803      	ldr	r0, [sp, #12]
   10166:	9904      	ldr	r1, [sp, #16]
   10168:	b009      	add	sp, #36	; 0x24
   1016a:	4770      	bx	lr

0001016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
   1016c:	b089      	sub	sp, #36	; 0x24
   1016e:	9005      	str	r0, [sp, #20]
   10170:	9106      	str	r1, [sp, #24]
   10172:	9107      	str	r1, [sp, #28]
   10174:	9907      	ldr	r1, [sp, #28]
   10176:	9002      	str	r0, [sp, #8]
   10178:	9101      	str	r1, [sp, #4]
   1017a:	e7ff      	b.n	1017c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
   1017c:	9802      	ldr	r0, [sp, #8]
   1017e:	9008      	str	r0, [sp, #32]
   10180:	9908      	ldr	r1, [sp, #32]
   10182:	9100      	str	r1, [sp, #0]
   10184:	e7ff      	b.n	10186 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
   10186:	9800      	ldr	r0, [sp, #0]
   10188:	9003      	str	r0, [sp, #12]
   1018a:	9901      	ldr	r1, [sp, #4]
   1018c:	9104      	str	r1, [sp, #16]
   1018e:	9803      	ldr	r0, [sp, #12]
   10190:	9904      	ldr	r1, [sp, #16]
   10192:	b009      	add	sp, #36	; 0x24
   10194:	4770      	bx	lr

00010196 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
   10196:	b580      	push	{r7, lr}
   10198:	b088      	sub	sp, #32
   1019a:	9004      	str	r0, [sp, #16]
   1019c:	9105      	str	r1, [sp, #20]
   1019e:	f000 f819 	bl	101d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
   101a2:	9001      	str	r0, [sp, #4]
   101a4:	9100      	str	r1, [sp, #0]
   101a6:	e7ff      	b.n	101a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
   101a8:	9801      	ldr	r0, [sp, #4]
   101aa:	9006      	str	r0, [sp, #24]
   101ac:	9900      	ldr	r1, [sp, #0]
   101ae:	f001 0201 	and.w	r2, r1, #1
   101b2:	f88d 201f 	strb.w	r2, [sp, #31]
   101b6:	2a00      	cmp	r2, #0
   101b8:	d105      	bne.n	101c6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
   101ba:	e7ff      	b.n	101bc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
   101bc:	9801      	ldr	r0, [sp, #4]
   101be:	9003      	str	r0, [sp, #12]
   101c0:	2101      	movs	r1, #1
   101c2:	9102      	str	r1, [sp, #8]
   101c4:	e002      	b.n	101cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   101c6:	2000      	movs	r0, #0
   101c8:	9002      	str	r0, [sp, #8]
   101ca:	e7ff      	b.n	101cc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   101cc:	9802      	ldr	r0, [sp, #8]
   101ce:	9903      	ldr	r1, [sp, #12]
   101d0:	b008      	add	sp, #32
   101d2:	bd80      	pop	{r7, pc}

000101d4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
   101d4:	b08a      	sub	sp, #40	; 0x28
   101d6:	9004      	str	r0, [sp, #16]
   101d8:	9105      	str	r1, [sp, #20]
   101da:	1a40      	subs	r0, r0, r1
   101dc:	f04f 0100 	mov.w	r1, #0
   101e0:	f141 0100 	adc.w	r1, r1, #0
   101e4:	f1c1 0101 	rsb	r1, r1, #1
   101e8:	9006      	str	r0, [sp, #24]
   101ea:	f88d 101c 	strb.w	r1, [sp, #28]
   101ee:	9806      	ldr	r0, [sp, #24]
   101f0:	f89d 101c 	ldrb.w	r1, [sp, #28]
   101f4:	9001      	str	r0, [sp, #4]
   101f6:	9100      	str	r1, [sp, #0]
   101f8:	e7ff      	b.n	101fa <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
   101fa:	9801      	ldr	r0, [sp, #4]
   101fc:	9008      	str	r0, [sp, #32]
   101fe:	9900      	ldr	r1, [sp, #0]
   10200:	f001 0201 	and.w	r2, r1, #1
   10204:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   10208:	9002      	str	r0, [sp, #8]
   1020a:	f88d 200c 	strb.w	r2, [sp, #12]
   1020e:	9802      	ldr	r0, [sp, #8]
   10210:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10214:	b00a      	add	sp, #40	; 0x28
   10216:	4770      	bx	lr

00010218 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   10218:	b580      	push	{r7, lr}
   1021a:	b084      	sub	sp, #16
   1021c:	9002      	str	r0, [sp, #8]
   1021e:	9103      	str	r1, [sp, #12]
   10220:	f000 f805 	bl	1022e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   10224:	9001      	str	r0, [sp, #4]
   10226:	e7ff      	b.n	10228 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   10228:	9801      	ldr	r0, [sp, #4]
   1022a:	b004      	add	sp, #16
   1022c:	bd80      	pop	{r7, pc}

0001022e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   1022e:	b084      	sub	sp, #16
   10230:	9001      	str	r0, [sp, #4]
   10232:	9102      	str	r1, [sp, #8]
   10234:	4408      	add	r0, r1
   10236:	9003      	str	r0, [sp, #12]
   10238:	9803      	ldr	r0, [sp, #12]
   1023a:	9000      	str	r0, [sp, #0]
   1023c:	e7ff      	b.n	1023e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   1023e:	9800      	ldr	r0, [sp, #0]
   10240:	b004      	add	sp, #16
   10242:	4770      	bx	lr

00010244 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   10244:	b081      	sub	sp, #4
   10246:	b001      	add	sp, #4
   10248:	4770      	bx	lr

0001024a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   1024a:	b510      	push	{r4, lr}
   1024c:	b088      	sub	sp, #32
   1024e:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   10250:	460a      	mov	r2, r1
   10252:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   10256:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   1025a:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1025e:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   10262:	f646 2054 	movw	r0, #27220	; 0x6a54
   10266:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1026a:	f000 f94a 	bl	10502 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1026e:	9000      	str	r0, [sp, #0]
   10270:	e7ff      	b.n	10272 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   10272:	9800      	ldr	r0, [sp, #0]
   10274:	f000 0001 	and.w	r0, r0, #1
   10278:	f24f 414c 	movw	r1, #62540	; 0xf44c
   1027c:	f2c0 0101 	movt	r1, #1
   10280:	f24f 4394 	movw	r3, #62612	; 0xf494
   10284:	f2c0 0301 	movt	r3, #1
   10288:	2210      	movs	r2, #16
   1028a:	f005 fad5 	bl	15838 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   1028e:	e7ff      	b.n	10290 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   10290:	b008      	add	sp, #32
   10292:	bd10      	pop	{r4, pc}

00010294 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
pub fn start_display() -> MynewtResult<()> {
   10294:	b5b0      	push	{r4, r5, r7, lr}
   10296:	b0b2      	sub	sp, #200	; 0xc8
    let mut spi_port = mynewt::SPI::new();
   10298:	f7ff fb54 	bl	f944 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
   1029c:	9115      	str	r1, [sp, #84]	; 0x54
   1029e:	9014      	str	r0, [sp, #80]	; 0x50
   102a0:	e7ff      	b.n	102a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
   102a2:	f7ff fd0d 	bl	fcc0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   102a6:	9016      	str	r0, [sp, #88]	; 0x58
   102a8:	e7ff      	b.n	102aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
   102aa:	f7ff fd09 	bl	fcc0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   102ae:	9017      	str	r0, [sp, #92]	; 0x5c
   102b0:	e7ff      	b.n	102b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>
    spi_port.init(
   102b2:	f240 03f0 	movw	r3, #240	; 0xf0
   102b6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   102ba:	a814      	add	r0, sp, #80	; 0x50
   102bc:	2100      	movs	r1, #0
   102be:	2219      	movs	r2, #25
   102c0:	f7ff fb48 	bl	f954 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
   102c4:	9012      	str	r0, [sp, #72]	; 0x48
   102c6:	e7ff      	b.n	102c8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
   102c8:	9812      	ldr	r0, [sp, #72]	; 0x48
   102ca:	f7ff f880 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   102ce:	9018      	str	r0, [sp, #96]	; 0x60
   102d0:	e7ff      	b.n	102d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
    ) ? ;
   102d2:	9818      	ldr	r0, [sp, #96]	; 0x60
   102d4:	1e41      	subs	r1, r0, #1
   102d6:	bf18      	it	ne
   102d8:	2101      	movne	r1, #1
   102da:	2801      	cmp	r0, #1
   102dc:	d001      	beq.n	102e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
   102de:	e7ff      	b.n	102e0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
   102e0:	e006      	b.n	102f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
   102e2:	a816      	add	r0, sp, #88	; 0x58
   102e4:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   102e6:	f7ff fced 	bl	fcc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   102ea:	9011      	str	r0, [sp, #68]	; 0x44
   102ec:	e010      	b.n	10310 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
   102ee:	defe      	udf	#254	; 0xfe
    ) ? ;
   102f0:	9818      	ldr	r0, [sp, #96]	; 0x60
   102f2:	902d      	str	r0, [sp, #180]	; 0xb4
   102f4:	f7ff f8de 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   102f8:	9010      	str	r0, [sp, #64]	; 0x40
   102fa:	e002      	b.n	10302 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
}
   102fc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   102fe:	b032      	add	sp, #200	; 0xc8
   10300:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
   10302:	9810      	ldr	r0, [sp, #64]	; 0x40
   10304:	f7ff f857 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10308:	9013      	str	r0, [sp, #76]	; 0x4c
   1030a:	e7ff      	b.n	1030c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
   1030c:	e7ff      	b.n	1030e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
   1030e:	e7f5      	b.n	102fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10310:	9811      	ldr	r0, [sp, #68]	; 0x44
   10312:	f7ff f85c 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10316:	9019      	str	r0, [sp, #100]	; 0x64
   10318:	e7ff      	b.n	1031a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
   1031a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1031c:	1e41      	subs	r1, r0, #1
   1031e:	bf18      	it	ne
   10320:	2101      	movne	r1, #1
   10322:	2801      	cmp	r0, #1
   10324:	d001      	beq.n	1032a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
   10326:	e7ff      	b.n	10328 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
   10328:	e006      	b.n	10338 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
   1032a:	a817      	add	r0, sp, #92	; 0x5c
   1032c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1032e:	f7ff fcc9 	bl	fcc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10332:	900f      	str	r0, [sp, #60]	; 0x3c
   10334:	e00c      	b.n	10350 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10336:	defe      	udf	#254	; 0xfe
   10338:	9819      	ldr	r0, [sp, #100]	; 0x64
   1033a:	902e      	str	r0, [sp, #184]	; 0xb8
   1033c:	f7ff f8ba 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10340:	900e      	str	r0, [sp, #56]	; 0x38
   10342:	e7ff      	b.n	10344 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
   10344:	980e      	ldr	r0, [sp, #56]	; 0x38
   10346:	f7ff f836 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1034a:	9013      	str	r0, [sp, #76]	; 0x4c
   1034c:	e7ff      	b.n	1034e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
   1034e:	e7de      	b.n	1030e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   10350:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10352:	f7ff f83c 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10356:	901a      	str	r0, [sp, #104]	; 0x68
   10358:	e7ff      	b.n	1035a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
   1035a:	981a      	ldr	r0, [sp, #104]	; 0x68
   1035c:	1e41      	subs	r1, r0, #1
   1035e:	bf18      	it	ne
   10360:	2101      	movne	r1, #1
   10362:	2801      	cmp	r0, #1
   10364:	d001      	beq.n	1036a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
   10366:	e7ff      	b.n	10368 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
   10368:	e004      	b.n	10374 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   1036a:	f7ff fca9 	bl	fcc0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   1036e:	900d      	str	r0, [sp, #52]	; 0x34
   10370:	e00c      	b.n	1038c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   10372:	defe      	udf	#254	; 0xfe
   10374:	981a      	ldr	r0, [sp, #104]	; 0x68
   10376:	902f      	str	r0, [sp, #188]	; 0xbc
   10378:	f7ff f89c 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1037c:	900c      	str	r0, [sp, #48]	; 0x30
   1037e:	e7ff      	b.n	10380 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
   10380:	980c      	ldr	r0, [sp, #48]	; 0x30
   10382:	f7ff f818 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10386:	9013      	str	r0, [sp, #76]	; 0x4c
   10388:	e7ff      	b.n	1038a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
   1038a:	e7c0      	b.n	1030e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   1038c:	f646 206c 	movw	r0, #27244	; 0x6a6c
   10390:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10394:	990d      	ldr	r1, [sp, #52]	; 0x34
   10396:	6001      	str	r1, [r0, #0]
   10398:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   1039a:	f7ff fc93 	bl	fcc4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1039e:	900b      	str	r0, [sp, #44]	; 0x2c
   103a0:	e7ff      	b.n	103a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
   103a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   103a4:	f7ff f813 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   103a8:	901b      	str	r0, [sp, #108]	; 0x6c
   103aa:	e7ff      	b.n	103ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
   103ac:	981b      	ldr	r0, [sp, #108]	; 0x6c
   103ae:	1e41      	subs	r1, r0, #1
   103b0:	bf18      	it	ne
   103b2:	2101      	movne	r1, #1
   103b4:	2801      	cmp	r0, #1
   103b6:	d001      	beq.n	103bc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
   103b8:	e7ff      	b.n	103ba <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
   103ba:	e008      	b.n	103ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
   103bc:	f646 206c 	movw	r0, #27244	; 0x6a6c
   103c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   103c4:	f7ff fd17 	bl	fdf6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   103c8:	900a      	str	r0, [sp, #40]	; 0x28
   103ca:	e00d      	b.n	103e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   103cc:	defe      	udf	#254	; 0xfe
   103ce:	981b      	ldr	r0, [sp, #108]	; 0x6c
   103d0:	9030      	str	r0, [sp, #192]	; 0xc0
   103d2:	f7ff f86f 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   103d6:	9009      	str	r0, [sp, #36]	; 0x24
   103d8:	e7ff      	b.n	103da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
   103da:	9809      	ldr	r0, [sp, #36]	; 0x24
   103dc:	f7fe ffeb 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   103e0:	9013      	str	r0, [sp, #76]	; 0x4c
   103e2:	e7ff      	b.n	103e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
   103e4:	e7ff      	b.n	103e6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
   103e6:	e792      	b.n	1030e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
   103e8:	980a      	ldr	r0, [sp, #40]	; 0x28
   103ea:	f7fe fff0 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   103ee:	901c      	str	r0, [sp, #112]	; 0x70
   103f0:	e7ff      	b.n	103f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
   103f2:	981c      	ldr	r0, [sp, #112]	; 0x70
   103f4:	1e41      	subs	r1, r0, #1
   103f6:	bf18      	it	ne
   103f8:	2101      	movne	r1, #1
   103fa:	2801      	cmp	r0, #1
   103fc:	d001      	beq.n	10402 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
   103fe:	e7ff      	b.n	10400 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
   10400:	e011      	b.n	10426 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
   10402:	9914      	ldr	r1, [sp, #80]	; 0x50
   10404:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
   10406:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
   10408:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1040a:	46ec      	mov	ip, sp
   1040c:	f04f 0e01 	mov.w	lr, #1
   10410:	f8cc e008 	str.w	lr, [ip, #8]
   10414:	f8cc e004 	str.w	lr, [ip, #4]
   10418:	f8cc 0000 	str.w	r0, [ip]
   1041c:	a81d      	add	r0, sp, #116	; 0x74
   1041e:	f001 f8d2 	bl	115c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
   10422:	e00c      	b.n	1043e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
   10424:	defe      	udf	#254	; 0xfe
   10426:	981c      	ldr	r0, [sp, #112]	; 0x70
   10428:	9031      	str	r0, [sp, #196]	; 0xc4
   1042a:	f7ff f843 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1042e:	9008      	str	r0, [sp, #32]
   10430:	e7ff      	b.n	10432 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
   10432:	9808      	ldr	r0, [sp, #32]
   10434:	f7fe ffbf 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10438:	9013      	str	r0, [sp, #76]	; 0x4c
   1043a:	e7ff      	b.n	1043c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
   1043c:	e7d3      	b.n	103e6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1043e:	f646 2054 	movw	r0, #27220	; 0x6a54
   10442:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10446:	a91d      	add	r1, sp, #116	; 0x74
   10448:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1044c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
   10450:	f7ff fce7 	bl	fe22 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
   10454:	e7ff      	b.n	10456 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
   10456:	f646 2054 	movw	r0, #27220	; 0x6a54
   1045a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1045e:	a923      	add	r1, sp, #140	; 0x8c
   10460:	f001 f8d3 	bl	1160a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
   10464:	9007      	str	r0, [sp, #28]
   10466:	e7ff      	b.n	10468 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
   10468:	9807      	ldr	r0, [sp, #28]
   1046a:	f000 0001 	and.w	r0, r0, #1
   1046e:	f7fe ffa8 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10472:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
   10476:	e7ff      	b.n	10478 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
   10478:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
   1047c:	07c1      	lsls	r1, r0, #31
   1047e:	2900      	cmp	r1, #0
   10480:	d001      	beq.n	10486 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
   10482:	e7ff      	b.n	10484 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
   10484:	e00d      	b.n	104a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10486:	f24f 40a8 	movw	r0, #62632	; 0xf4a8
   1048a:	f2c0 0001 	movt	r0, #1
   1048e:	6801      	ldr	r1, [r0, #0]
   10490:	f646 2054 	movw	r0, #27220	; 0x6a54
   10494:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10498:	f000 fecc 	bl	11234 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
   1049c:	9006      	str	r0, [sp, #24]
   1049e:	e00b      	b.n	104b8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
   104a0:	defe      	udf	#254	; 0xfe
   104a2:	f002 ff56 	bl	13352 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   104a6:	9005      	str	r0, [sp, #20]
   104a8:	e7ff      	b.n	104aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
   104aa:	9805      	ldr	r0, [sp, #20]
   104ac:	f7fe ff83 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   104b0:	9013      	str	r0, [sp, #76]	; 0x4c
   104b2:	e7ff      	b.n	104b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
   104b4:	e7ff      	b.n	104b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
   104b6:	e72a      	b.n	1030e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   104b8:	9806      	ldr	r0, [sp, #24]
   104ba:	f000 0001 	and.w	r0, r0, #1
   104be:	f7fe ff80 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   104c2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
   104c6:	e7ff      	b.n	104c8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
   104c8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
   104cc:	07c1      	lsls	r1, r0, #31
   104ce:	2900      	cmp	r1, #0
   104d0:	d001      	beq.n	104d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
   104d2:	e7ff      	b.n	104d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
   104d4:	e005      	b.n	104e2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
   104d6:	2000      	movs	r0, #0
    Ok(())
   104d8:	9013      	str	r0, [sp, #76]	; 0x4c
   104da:	2001      	movs	r0, #1
   104dc:	9013      	str	r0, [sp, #76]	; 0x4c
}
   104de:	e70d      	b.n	102fc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   104e0:	defe      	udf	#254	; 0xfe
   104e2:	f002 ff36 	bl	13352 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   104e6:	9004      	str	r0, [sp, #16]
   104e8:	e7ff      	b.n	104ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
   104ea:	9804      	ldr	r0, [sp, #16]
   104ec:	f7fe ff63 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   104f0:	9013      	str	r0, [sp, #76]	; 0x4c
   104f2:	e7ff      	b.n	104f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
   104f4:	e7df      	b.n	104b6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

000104f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   104f6:	b580      	push	{r7, lr}
   104f8:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   104fc:	f00c ff16 	bl	1d32c <__aeabi_memcpy>
   10500:	bd80      	pop	{r7, pc}

00010502 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   10502:	b5b0      	push	{r4, r5, r7, lr}
   10504:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   10508:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   1050c:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1050e:	4613      	mov	r3, r2
   10510:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   10514:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   10518:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   1051c:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   10520:	a910      	add	r1, sp, #64	; 0x40
   10522:	900e      	str	r0, [sp, #56]	; 0x38
   10524:	4608      	mov	r0, r1
   10526:	4611      	mov	r1, r2
   10528:	f001 fcb9 	bl	11e9e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   1052c:	e7ff      	b.n	1052e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1052e:	a810      	add	r0, sp, #64	; 0x40
   10530:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   10532:	460a      	mov	r2, r1
   10534:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   10538:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1053c:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   10540:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10544:	a820      	add	r0, sp, #128	; 0x80
   10546:	f000 f8b7 	bl	106b8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   1054a:	e7ff      	b.n	1054c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   1054c:	a8a9      	add	r0, sp, #676	; 0x2a4
   1054e:	a920      	add	r1, sp, #128	; 0x80
   10550:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   10552:	900d      	str	r0, [sp, #52]	; 0x34
   10554:	f00c feea 	bl	1d32c <__aeabi_memcpy>
   10558:	a84e      	add	r0, sp, #312	; 0x138
   1055a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1055c:	f000 f8db 	bl	10716 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   10560:	e7ff      	b.n	10562 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   10562:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   10566:	a94e      	add	r1, sp, #312	; 0x138
   10568:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1056c:	900c      	str	r0, [sp, #48]	; 0x30
   1056e:	f00c fedd 	bl	1d32c <__aeabi_memcpy>
   10572:	a8ce      	add	r0, sp, #824	; 0x338
   10574:	990c      	ldr	r1, [sp, #48]	; 0x30
   10576:	f7ff ffbe 	bl	104f6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   1057a:	e7ff      	b.n	1057c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   1057c:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   10580:	a9ce      	add	r1, sp, #824	; 0x338
   10582:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   10586:	f00c fed1 	bl	1d32c <__aeabi_memcpy>
   1058a:	e7ff      	b.n	1058c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   1058c:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   10590:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   10594:	f000 fa2c 	bl	109f0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   10598:	e7ff      	b.n	1059a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   1059a:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   1059e:	2800      	cmp	r0, #0
   105a0:	d001      	beq.n	105a6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   105a2:	e7ff      	b.n	105a4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   105a4:	e005      	b.n	105b2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   105a6:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   105aa:	f001 fc48 	bl	11e3e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   105ae:	e01c      	b.n	105ea <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   105b0:	defe      	udf	#254	; 0xfe
   105b2:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   105b6:	1d01      	adds	r1, r0, #4
   105b8:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   105bc:	22d4      	movs	r2, #212	; 0xd4
   105be:	900b      	str	r0, [sp, #44]	; 0x2c
   105c0:	920a      	str	r2, [sp, #40]	; 0x28
   105c2:	f00c feb3 	bl	1d32c <__aeabi_memcpy>
   105c6:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   105ca:	9009      	str	r0, [sp, #36]	; 0x24
   105cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   105ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   105d0:	f00c feac 	bl	1d32c <__aeabi_memcpy>
   105d4:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   105d8:	9909      	ldr	r1, [sp, #36]	; 0x24
   105da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   105dc:	f00c fea6 	bl	1d32c <__aeabi_memcpy>
   105e0:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   105e4:	2801      	cmp	r0, #1
   105e6:	d02c      	beq.n	10642 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   105e8:	e061      	b.n	106ae <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   105ea:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   105ee:	f001 fc03 	bl	11df8 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   105f2:	e022      	b.n	1063a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   105f4:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   105f8:	f7fe fee3 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   105fc:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   10600:	e7ff      	b.n	10602 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   10602:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   10606:	07c1      	lsls	r1, r0, #31
   10608:	2900      	cmp	r1, #0
   1060a:	d001      	beq.n	10610 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   1060c:	e7ff      	b.n	1060e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1060e:	e001      	b.n	10614 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10610:	e7bc      	b.n	1058c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   10612:	defe      	udf	#254	; 0xfe
            colors) ? ;
   10614:	f002 fdfa 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10618:	e004      	b.n	10624 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   1061a:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1061e:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   10622:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   10624:	f005 fa55 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10628:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1062c:	e7ff      	b.n	1062e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1062e:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   10632:	f001 fbe1 	bl	11df8 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10636:	e7ff      	b.n	10638 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   10638:	e7ef      	b.n	1061a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   1063a:	2000      	movs	r0, #0
    Ok(())
   1063c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   10640:	e7eb      	b.n	1061a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10642:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   10646:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   1064a:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1064e:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   10652:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   10656:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   1065a:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1065e:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   10662:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   10666:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   1066a:	24cc      	movs	r4, #204	; 0xcc
   1066c:	9008      	str	r0, [sp, #32]
   1066e:	4660      	mov	r0, ip
   10670:	9107      	str	r1, [sp, #28]
   10672:	4671      	mov	r1, lr
   10674:	9206      	str	r2, [sp, #24]
   10676:	4622      	mov	r2, r4
   10678:	9305      	str	r3, [sp, #20]
   1067a:	f8cd c010 	str.w	ip, [sp, #16]
   1067e:	9403      	str	r4, [sp, #12]
   10680:	f00c fe54 	bl	1d32c <__aeabi_memcpy>
   10684:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   10688:	9002      	str	r0, [sp, #8]
   1068a:	9904      	ldr	r1, [sp, #16]
   1068c:	9a03      	ldr	r2, [sp, #12]
   1068e:	f00c fe4d 	bl	1d32c <__aeabi_memcpy>
        display.set_pixels(
   10692:	4668      	mov	r0, sp
   10694:	9902      	ldr	r1, [sp, #8]
   10696:	6041      	str	r1, [r0, #4]
   10698:	9a05      	ldr	r2, [sp, #20]
   1069a:	6002      	str	r2, [r0, #0]
   1069c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1069e:	9908      	ldr	r1, [sp, #32]
   106a0:	9a06      	ldr	r2, [sp, #24]
   106a2:	9b07      	ldr	r3, [sp, #28]
   106a4:	f000 fbf5 	bl	10e92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   106a8:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   106ac:	e7a2      	b.n	105f4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   106ae:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   106b2:	f001 fbc4 	bl	11e3e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   106b6:	e7c4      	b.n	10642 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

000106b8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   106b8:	b5b0      	push	{r4, r5, r7, lr}
   106ba:	b0a4      	sub	sp, #144	; 0x90
   106bc:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   106be:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   106c2:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   106c6:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   106ca:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   106ce:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   106d0:	9000      	str	r0, [sp, #0]
   106d2:	4608      	mov	r0, r1
   106d4:	f004 fcf3 	bl	150be <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   106d8:	e7ff      	b.n	106da <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   106da:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   106dc:	9900      	ldr	r1, [sp, #0]
   106de:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   106e2:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   106e6:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   106ea:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   106ee:	2000      	movs	r0, #0
   106f0:	9900      	ldr	r1, [sp, #0]
   106f2:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   106f6:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   106fa:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   106fe:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10702:	a90a      	add	r1, sp, #40	; 0x28
   10704:	2268      	movs	r2, #104	; 0x68
   10706:	f00c fe11 	bl	1d32c <__aeabi_memcpy>
   1070a:	2001      	movs	r0, #1
   1070c:	9900      	ldr	r1, [sp, #0]
   1070e:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   10712:	b024      	add	sp, #144	; 0x90
   10714:	bdb0      	pop	{r4, r5, r7, pc}

00010716 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   10716:	b580      	push	{r7, lr}
   10718:	b0da      	sub	sp, #360	; 0x168
   1071a:	aa02      	add	r2, sp, #8
   1071c:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1071e:	9001      	str	r0, [sp, #4]
   10720:	4610      	mov	r0, r2
   10722:	461a      	mov	r2, r3
   10724:	f00c fe02 	bl	1d32c <__aeabi_memcpy>
   10728:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   1072a:	f004 fcd7 	bl	150dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1072e:	e7ff      	b.n	10730 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   10730:	a902      	add	r1, sp, #8
   10732:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   10734:	9801      	ldr	r0, [sp, #4]
   10736:	f00c fdf9 	bl	1d32c <__aeabi_memcpy>
   1073a:	2000      	movs	r0, #0
   1073c:	9901      	ldr	r1, [sp, #4]
   1073e:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   10742:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   10746:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   1074a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1074e:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10752:	a927      	add	r1, sp, #156	; 0x9c
   10754:	22cc      	movs	r2, #204	; 0xcc
   10756:	f00c fde9 	bl	1d32c <__aeabi_memcpy>
   1075a:	2001      	movs	r0, #1
   1075c:	9901      	ldr	r1, [sp, #4]
   1075e:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   10762:	b05a      	add	sp, #360	; 0x168
   10764:	bd80      	pop	{r7, pc}

00010766 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   10766:	b580      	push	{r7, lr}
   10768:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   1076c:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1076e:	9116      	str	r1, [sp, #88]	; 0x58
   10770:	9015      	str	r0, [sp, #84]	; 0x54
   10772:	e7ff      	b.n	10774 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   10774:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   10776:	9916      	ldr	r1, [sp, #88]	; 0x58
   10778:	f001 fbec 	bl	11f54 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   1077c:	e7ff      	b.n	1077e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1077e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   10780:	2800      	cmp	r0, #0
   10782:	d01c      	beq.n	107be <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   10784:	e7ff      	b.n	10786 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   10786:	9818      	ldr	r0, [sp, #96]	; 0x60
   10788:	9919      	ldr	r1, [sp, #100]	; 0x64
   1078a:	90c2      	str	r0, [sp, #776]	; 0x308
   1078c:	91c3      	str	r1, [sp, #780]	; 0x30c
   1078e:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   10792:	4613      	mov	r3, r2
   10794:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   10798:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   1079c:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   107a0:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   107a4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   107a6:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   107aa:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   107ae:	f1bc 0f00 	cmp.w	ip, #0
   107b2:	9014      	str	r0, [sp, #80]	; 0x50
   107b4:	9113      	str	r1, [sp, #76]	; 0x4c
   107b6:	9312      	str	r3, [sp, #72]	; 0x48
   107b8:	d156      	bne.n	10868 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   107ba:	e04a      	b.n	10852 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   107bc:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   107be:	9816      	ldr	r0, [sp, #88]	; 0x58
   107c0:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   107c4:	07c9      	lsls	r1, r1, #31
   107c6:	2900      	cmp	r1, #0
   107c8:	d111      	bne.n	107ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   107ca:	e7ff      	b.n	107cc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   107cc:	9816      	ldr	r0, [sp, #88]	; 0x58
   107ce:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   107d2:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   107d6:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   107da:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   107de:	a837      	add	r0, sp, #220	; 0xdc
   107e0:	9111      	str	r1, [sp, #68]	; 0x44
   107e2:	4661      	mov	r1, ip
   107e4:	9210      	str	r2, [sp, #64]	; 0x40
   107e6:	930f      	str	r3, [sp, #60]	; 0x3c
   107e8:	f004 fbd2 	bl	14f90 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   107ec:	e006      	b.n	107fc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   107ee:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   107f0:	9915      	ldr	r1, [sp, #84]	; 0x54
   107f2:	6008      	str	r0, [r1, #0]
   107f4:	e7ff      	b.n	107f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   107f6:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   107fa:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   107fc:	9811      	ldr	r0, [sp, #68]	; 0x44
   107fe:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   10802:	9910      	ldr	r1, [sp, #64]	; 0x40
   10804:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   10808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1080a:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1080e:	a81b      	add	r0, sp, #108	; 0x6c
   10810:	a937      	add	r1, sp, #220	; 0xdc
   10812:	2268      	movs	r2, #104	; 0x68
   10814:	f00c fd8a 	bl	1d32c <__aeabi_memcpy>
                    self.colors.clear();
   10818:	9816      	ldr	r0, [sp, #88]	; 0x58
   1081a:	3024      	adds	r0, #36	; 0x24
   1081c:	f004 fc7d 	bl	1511a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10820:	e7ff      	b.n	10822 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   10822:	2001      	movs	r0, #1
                    self.first_pixel = true;
   10824:	9916      	ldr	r1, [sp, #88]	; 0x58
   10826:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   1082a:	aa51      	add	r2, sp, #324	; 0x144
   1082c:	a91b      	add	r1, sp, #108	; 0x6c
   1082e:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   10830:	900e      	str	r0, [sp, #56]	; 0x38
   10832:	4610      	mov	r0, r2
   10834:	920d      	str	r2, [sp, #52]	; 0x34
   10836:	461a      	mov	r2, r3
   10838:	930c      	str	r3, [sp, #48]	; 0x30
   1083a:	f00c fd77 	bl	1d32c <__aeabi_memcpy>
   1083e:	9815      	ldr	r0, [sp, #84]	; 0x54
   10840:	3004      	adds	r0, #4
   10842:	990d      	ldr	r1, [sp, #52]	; 0x34
   10844:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10846:	f00c fd71 	bl	1d32c <__aeabi_memcpy>
   1084a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1084c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1084e:	6008      	str	r0, [r1, #0]
   10850:	e7d1      	b.n	107f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10852:	9816      	ldr	r0, [sp, #88]	; 0x58
   10854:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   10858:	3101      	adds	r1, #1
   1085a:	b28a      	uxth	r2, r1
   1085c:	460b      	mov	r3, r1
   1085e:	428a      	cmp	r2, r1
   10860:	930b      	str	r3, [sp, #44]	; 0x2c
   10862:	f040 80b9 	bne.w	109d8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   10866:	e040      	b.n	108ea <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   10868:	2000      	movs	r0, #0
                        self.first_pixel = false;
   1086a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1086c:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   10870:	9814      	ldr	r0, [sp, #80]	; 0x50
   10872:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   10876:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   1087a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1087c:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   10880:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10884:	f004 fc49 	bl	1511a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10888:	e7ff      	b.n	1088a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   1088a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1088c:	3024      	adds	r0, #36	; 0x24
   1088e:	9912      	ldr	r1, [sp, #72]	; 0x48
   10890:	f004 fc33 	bl	150fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10894:	900a      	str	r0, [sp, #40]	; 0x28
   10896:	9109      	str	r1, [sp, #36]	; 0x24
   10898:	e7ff      	b.n	1089a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   1089a:	f24f 40e8 	movw	r0, #62696	; 0xf4e8
   1089e:	f2c0 0001 	movt	r0, #1
   108a2:	4669      	mov	r1, sp
   108a4:	6008      	str	r0, [r1, #0]
   108a6:	f24f 42ac 	movw	r2, #62636	; 0xf4ac
   108aa:	f2c0 0201 	movt	r2, #1
   108ae:	2305      	movs	r3, #5
   108b0:	980a      	ldr	r0, [sp, #40]	; 0x28
   108b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   108b4:	f004 ff8f 	bl	157d6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   108b8:	e7ff      	b.n	108ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   108ba:	e7ff      	b.n	108bc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   108bc:	e75a      	b.n	10774 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   108be:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   108c0:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   108c4:	e00b      	b.n	108de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   108c6:	2000      	movs	r0, #0
   108c8:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   108cc:	e007      	b.n	108de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   108ce:	9816      	ldr	r0, [sp, #88]	; 0x58
   108d0:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   108d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   108d6:	b293      	uxth	r3, r2
   108d8:	428b      	cmp	r3, r1
   108da:	d0f0      	beq.n	108be <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   108dc:	e7f3      	b.n	108c6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   108de:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   108e2:	07c0      	lsls	r0, r0, #31
   108e4:	2800      	cmp	r0, #0
   108e6:	d107      	bne.n	108f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   108e8:	e020      	b.n	1092c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   108ea:	980b      	ldr	r0, [sp, #44]	; 0x2c
   108ec:	b281      	uxth	r1, r0
   108ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
   108f0:	b293      	uxth	r3, r2
   108f2:	428b      	cmp	r3, r1
   108f4:	d0eb      	beq.n	108ce <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   108f6:	e7e6      	b.n	108c6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   108f8:	9816      	ldr	r0, [sp, #88]	; 0x58
   108fa:	3024      	adds	r0, #36	; 0x24
   108fc:	9912      	ldr	r1, [sp, #72]	; 0x48
   108fe:	f004 fbfc 	bl	150fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10902:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   10906:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   1090a:	e7ff      	b.n	1090c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   1090c:	a86e      	add	r0, sp, #440	; 0x1b8
   1090e:	f004 ff3d 	bl	1578c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   10912:	9008      	str	r0, [sp, #32]
   10914:	e7ff      	b.n	10916 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   10916:	9808      	ldr	r0, [sp, #32]
   10918:	07c1      	lsls	r1, r0, #31
   1091a:	2900      	cmp	r1, #0
   1091c:	d101      	bne.n	10922 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   1091e:	e7ff      	b.n	10920 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   10920:	e004      	b.n	1092c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   10922:	9814      	ldr	r0, [sp, #80]	; 0x50
   10924:	9916      	ldr	r1, [sp, #88]	; 0x58
   10926:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   1092a:	e7c7      	b.n	108bc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   1092c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1092e:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   10932:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   10936:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   1093a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1093e:	a88b      	add	r0, sp, #556	; 0x22c
   10940:	9107      	str	r1, [sp, #28]
   10942:	4661      	mov	r1, ip
   10944:	9206      	str	r2, [sp, #24]
   10946:	9305      	str	r3, [sp, #20]
   10948:	f004 fb22 	bl	14f90 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1094c:	e7ff      	b.n	1094e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   1094e:	9807      	ldr	r0, [sp, #28]
   10950:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   10954:	9906      	ldr	r1, [sp, #24]
   10956:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   1095a:	9a05      	ldr	r2, [sp, #20]
   1095c:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   10960:	a86f      	add	r0, sp, #444	; 0x1bc
   10962:	a98b      	add	r1, sp, #556	; 0x22c
   10964:	2268      	movs	r2, #104	; 0x68
   10966:	f00c fce1 	bl	1d32c <__aeabi_memcpy>
                    self.x_left = x;
   1096a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1096c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1096e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   10972:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   10976:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10978:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   1097c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10980:	f004 fbcb 	bl	1511a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10984:	e7ff      	b.n	10986 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   10986:	9816      	ldr	r0, [sp, #88]	; 0x58
   10988:	3024      	adds	r0, #36	; 0x24
   1098a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1098c:	f004 fbb5 	bl	150fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10990:	9004      	str	r0, [sp, #16]
   10992:	9103      	str	r1, [sp, #12]
   10994:	e7ff      	b.n	10996 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   10996:	f24f 502c 	movw	r0, #62764	; 0xf52c
   1099a:	f2c0 0001 	movt	r0, #1
   1099e:	4669      	mov	r1, sp
   109a0:	6008      	str	r0, [r1, #0]
   109a2:	f24f 42ac 	movw	r2, #62636	; 0xf4ac
   109a6:	f2c0 0201 	movt	r2, #1
   109aa:	2305      	movs	r3, #5
   109ac:	9804      	ldr	r0, [sp, #16]
   109ae:	9903      	ldr	r1, [sp, #12]
   109b0:	f004 ff11 	bl	157d6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   109b4:	e7ff      	b.n	109b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   109b6:	a8a5      	add	r0, sp, #660	; 0x294
   109b8:	a96f      	add	r1, sp, #444	; 0x1bc
   109ba:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   109bc:	9002      	str	r0, [sp, #8]
   109be:	9201      	str	r2, [sp, #4]
   109c0:	f00c fcb4 	bl	1d32c <__aeabi_memcpy>
   109c4:	9815      	ldr	r0, [sp, #84]	; 0x54
   109c6:	3004      	adds	r0, #4
   109c8:	9902      	ldr	r1, [sp, #8]
   109ca:	9a01      	ldr	r2, [sp, #4]
   109cc:	f00c fcae 	bl	1d32c <__aeabi_memcpy>
   109d0:	2001      	movs	r0, #1
   109d2:	9915      	ldr	r1, [sp, #84]	; 0x54
   109d4:	6008      	str	r0, [r1, #0]
   109d6:	e70e      	b.n	107f6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   109d8:	f24f 5010 	movw	r0, #62736	; 0xf510
   109dc:	f2c0 0001 	movt	r0, #1
   109e0:	f24f 42f8 	movw	r2, #62712	; 0xf4f8
   109e4:	f2c0 0201 	movt	r2, #1
   109e8:	211c      	movs	r1, #28
   109ea:	f006 f8cb 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   109ee:	defe      	udf	#254	; 0xfe

000109f0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   109f0:	b580      	push	{r7, lr}
   109f2:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   109f6:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   109fa:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   109fc:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   10a00:	911f      	str	r1, [sp, #124]	; 0x7c
   10a02:	901e      	str	r0, [sp, #120]	; 0x78
   10a04:	e7ff      	b.n	10a06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10a06:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   10a08:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10a0c:	a820      	add	r0, sp, #128	; 0x80
   10a0e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10a10:	f7ff fea9 	bl	10766 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   10a14:	e7ff      	b.n	10a16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   10a16:	9820      	ldr	r0, [sp, #128]	; 0x80
   10a18:	2800      	cmp	r0, #0
   10a1a:	d026      	beq.n	10a6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   10a1c:	e7ff      	b.n	10a1e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   10a1e:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   10a20:	1d01      	adds	r1, r0, #4
   10a22:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   10a26:	4602      	mov	r2, r0
   10a28:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   10a2c:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   10a30:	4603      	mov	r3, r0
   10a32:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   10a36:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   10a3a:	4684      	mov	ip, r0
   10a3c:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   10a40:	2000      	movs	r0, #0
   10a42:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10a46:	a8da      	add	r0, sp, #872	; 0x368
   10a48:	f04f 0e68 	mov.w	lr, #104	; 0x68
   10a4c:	921d      	str	r2, [sp, #116]	; 0x74
   10a4e:	4672      	mov	r2, lr
   10a50:	931c      	str	r3, [sp, #112]	; 0x70
   10a52:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   10a56:	f00c fc69 	bl	1d32c <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   10a5a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a5c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10a60:	07c9      	lsls	r1, r1, #31
   10a62:	2900      	cmp	r1, #0
   10a64:	d15a      	bne.n	10b1c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   10a66:	e04e      	b.n	10b06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   10a68:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   10a6a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a6c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10a70:	07c9      	lsls	r1, r1, #31
   10a72:	2900      	cmp	r1, #0
   10a74:	d115      	bne.n	10aa2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   10a76:	e7ff      	b.n	10a78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   10a78:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a7a:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10a7e:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10a82:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10a86:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10a8a:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10a8e:	a872      	add	r0, sp, #456	; 0x1c8
   10a90:	911a      	str	r1, [sp, #104]	; 0x68
   10a92:	4671      	mov	r1, lr
   10a94:	9219      	str	r2, [sp, #100]	; 0x64
   10a96:	9318      	str	r3, [sp, #96]	; 0x60
   10a98:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   10a9c:	f004 fa88 	bl	14fb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10aa0:	e003      	b.n	10aaa <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   10aa2:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   10aa4:	991e      	ldr	r1, [sp, #120]	; 0x78
   10aa6:	6008      	str	r0, [r1, #0]
   10aa8:	e153      	b.n	10d52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   10aaa:	981a      	ldr	r0, [sp, #104]	; 0x68
   10aac:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   10ab0:	9919      	ldr	r1, [sp, #100]	; 0x64
   10ab2:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   10ab6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10ab8:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   10abc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10abe:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   10ac2:	a83d      	add	r0, sp, #244	; 0xf4
   10ac4:	a972      	add	r1, sp, #456	; 0x1c8
   10ac6:	22cc      	movs	r2, #204	; 0xcc
   10ac8:	f00c fc30 	bl	1d32c <__aeabi_memcpy>
                    self.colors.clear();
   10acc:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10ace:	3094      	adds	r0, #148	; 0x94
   10ad0:	f004 fb2b 	bl	1512a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10ad4:	e7ff      	b.n	10ad6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   10ad6:	2001      	movs	r0, #1
                    self.first_row = true;
   10ad8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10ada:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   10ade:	aaa5      	add	r2, sp, #660	; 0x294
   10ae0:	a93d      	add	r1, sp, #244	; 0xf4
   10ae2:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   10ae4:	9016      	str	r0, [sp, #88]	; 0x58
   10ae6:	4610      	mov	r0, r2
   10ae8:	9215      	str	r2, [sp, #84]	; 0x54
   10aea:	461a      	mov	r2, r3
   10aec:	9314      	str	r3, [sp, #80]	; 0x50
   10aee:	f00c fc1d 	bl	1d32c <__aeabi_memcpy>
   10af2:	981e      	ldr	r0, [sp, #120]	; 0x78
   10af4:	3004      	adds	r0, #4
   10af6:	9915      	ldr	r1, [sp, #84]	; 0x54
   10af8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10afa:	f00c fc17 	bl	1d32c <__aeabi_memcpy>
   10afe:	9816      	ldr	r0, [sp, #88]	; 0x58
   10b00:	991e      	ldr	r1, [sp, #120]	; 0x78
   10b02:	6008      	str	r0, [r1, #0]
   10b04:	e125      	b.n	10d52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10b06:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b08:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   10b0c:	3101      	adds	r1, #1
   10b0e:	b28a      	uxth	r2, r1
   10b10:	460b      	mov	r3, r1
   10b12:	428a      	cmp	r2, r1
   10b14:	9313      	str	r3, [sp, #76]	; 0x4c
   10b16:	f040 8128 	bne.w	10d6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   10b1a:	e069      	b.n	10bf0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   10b1c:	2000      	movs	r0, #0
                        self.first_row = false;
   10b1e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b20:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   10b24:	981d      	ldr	r0, [sp, #116]	; 0x74
   10b26:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   10b2a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10b2c:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   10b30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10b32:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   10b36:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   10b3a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10b3e:	f004 faf4 	bl	1512a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10b42:	e7ff      	b.n	10b44 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   10b44:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b46:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10b4a:	a8da      	add	r0, sp, #872	; 0x368
   10b4c:	9112      	str	r1, [sp, #72]	; 0x48
   10b4e:	f004 fa5f 	bl	15010 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10b52:	9011      	str	r0, [sp, #68]	; 0x44
   10b54:	9110      	str	r1, [sp, #64]	; 0x40
   10b56:	e7ff      	b.n	10b58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   10b58:	9812      	ldr	r0, [sp, #72]	; 0x48
   10b5a:	9911      	ldr	r1, [sp, #68]	; 0x44
   10b5c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10b5e:	f004 faa0 	bl	150a2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10b62:	900f      	str	r0, [sp, #60]	; 0x3c
   10b64:	e7ff      	b.n	10b66 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   10b66:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10b68:	f000 0001 	and.w	r0, r0, #1
   10b6c:	f24f 41ac 	movw	r1, #62636	; 0xf4ac
   10b70:	f2c0 0101 	movt	r1, #1
   10b74:	f24f 533c 	movw	r3, #62780	; 0xf53c
   10b78:	f2c0 0301 	movt	r3, #1
   10b7c:	2205      	movs	r2, #5
   10b7e:	f004 fe5b 	bl	15838 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10b82:	e7ff      	b.n	10b84 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   10b84:	e7ff      	b.n	10b86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   10b86:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   10b88:	f001 f951 	bl	11e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10b8c:	e7ff      	b.n	10b8e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   10b8e:	9820      	ldr	r0, [sp, #128]	; 0x80
   10b90:	2801      	cmp	r0, #1
   10b92:	f000 80e2 	beq.w	10d5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   10b96:	e0e4      	b.n	10d62 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   10b98:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10b9a:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10b9e:	e00b      	b.n	10bb8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10ba0:	2000      	movs	r0, #0
   10ba2:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10ba6:	e007      	b.n	10bb8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10ba8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10baa:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   10bae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10bb0:	b293      	uxth	r3, r2
   10bb2:	428b      	cmp	r3, r1
   10bb4:	d0f0      	beq.n	10b98 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   10bb6:	e7f3      	b.n	10ba0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10bb8:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   10bbc:	07c0      	lsls	r0, r0, #31
   10bbe:	2800      	cmp	r0, #0
   10bc0:	d11d      	bne.n	10bfe <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   10bc2:	e03f      	b.n	10c44 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   10bc4:	2001      	movs	r0, #1
   10bc6:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10bca:	e00b      	b.n	10be4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10bcc:	2000      	movs	r0, #0
   10bce:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10bd2:	e007      	b.n	10be4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10bd4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10bd6:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   10bda:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10bdc:	b293      	uxth	r3, r2
   10bde:	428b      	cmp	r3, r1
   10be0:	d0f0      	beq.n	10bc4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   10be2:	e7f3      	b.n	10bcc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10be4:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   10be8:	07c0      	lsls	r0, r0, #31
   10bea:	2800      	cmp	r0, #0
   10bec:	d1dc      	bne.n	10ba8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10bee:	e7d7      	b.n	10ba0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10bf0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10bf2:	b281      	uxth	r1, r0
   10bf4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10bf6:	b293      	uxth	r3, r2
   10bf8:	428b      	cmp	r3, r1
   10bfa:	d0eb      	beq.n	10bd4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10bfc:	e7e6      	b.n	10bcc <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10bfe:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c00:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10c04:	a8da      	add	r0, sp, #872	; 0x368
   10c06:	910e      	str	r1, [sp, #56]	; 0x38
   10c08:	f004 fa02 	bl	15010 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10c0c:	900d      	str	r0, [sp, #52]	; 0x34
   10c0e:	910c      	str	r1, [sp, #48]	; 0x30
   10c10:	e7ff      	b.n	10c12 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10c12:	980e      	ldr	r0, [sp, #56]	; 0x38
   10c14:	990d      	ldr	r1, [sp, #52]	; 0x34
   10c16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10c18:	f004 fa43 	bl	150a2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10c1c:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   10c20:	e7ff      	b.n	10c22 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10c22:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   10c26:	f004 fdc3 	bl	157b0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10c2a:	900b      	str	r0, [sp, #44]	; 0x2c
   10c2c:	e7ff      	b.n	10c2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10c2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10c30:	07c1      	lsls	r1, r0, #31
   10c32:	2900      	cmp	r1, #0
   10c34:	d101      	bne.n	10c3a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10c36:	e7ff      	b.n	10c38 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10c38:	e004      	b.n	10c44 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10c3a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10c3c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c3e:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   10c42:	e7a0      	b.n	10b86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10c44:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10c46:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10c4a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10c4e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10c52:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10c56:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10c5a:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   10c5e:	910a      	str	r1, [sp, #40]	; 0x28
   10c60:	4671      	mov	r1, lr
   10c62:	9209      	str	r2, [sp, #36]	; 0x24
   10c64:	9308      	str	r3, [sp, #32]
   10c66:	f8cd c01c 	str.w	ip, [sp, #28]
   10c6a:	f004 f9a1 	bl	14fb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10c6e:	e7ff      	b.n	10c70 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10c70:	980a      	ldr	r0, [sp, #40]	; 0x28
   10c72:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   10c76:	9909      	ldr	r1, [sp, #36]	; 0x24
   10c78:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   10c7c:	9a08      	ldr	r2, [sp, #32]
   10c7e:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   10c82:	9b07      	ldr	r3, [sp, #28]
   10c84:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   10c88:	a8f5      	add	r0, sp, #980	; 0x3d4
   10c8a:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   10c8e:	22cc      	movs	r2, #204	; 0xcc
   10c90:	f00c fb4c 	bl	1d32c <__aeabi_memcpy>
                    self.x_left = x_left;
   10c94:	981d      	ldr	r0, [sp, #116]	; 0x74
   10c96:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10c98:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   10c9c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10c9e:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   10ca2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10ca4:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   10ca8:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   10cac:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10cb0:	f004 fa3b 	bl	1512a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10cb4:	e7ff      	b.n	10cb6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10cb6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10cb8:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10cbc:	a8da      	add	r0, sp, #872	; 0x368
   10cbe:	9106      	str	r1, [sp, #24]
   10cc0:	f004 f9a6 	bl	15010 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10cc4:	9005      	str	r0, [sp, #20]
   10cc6:	9104      	str	r1, [sp, #16]
   10cc8:	e7ff      	b.n	10cca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10cca:	9806      	ldr	r0, [sp, #24]
   10ccc:	9905      	ldr	r1, [sp, #20]
   10cce:	9a04      	ldr	r2, [sp, #16]
   10cd0:	f004 f9e7 	bl	150a2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10cd4:	9003      	str	r0, [sp, #12]
   10cd6:	e7ff      	b.n	10cd8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10cd8:	9803      	ldr	r0, [sp, #12]
   10cda:	f000 0001 	and.w	r0, r0, #1
   10cde:	f24f 41ac 	movw	r1, #62636	; 0xf4ac
   10ce2:	f2c0 0101 	movt	r1, #1
   10ce6:	f24f 535c 	movw	r3, #62812	; 0xf55c
   10cea:	f2c0 0301 	movt	r3, #1
   10cee:	2205      	movs	r2, #5
   10cf0:	f004 fda2 	bl	15838 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10cf4:	e7ff      	b.n	10cf6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10cf6:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   10cfa:	a9f5      	add	r1, sp, #980	; 0x3d4
   10cfc:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   10cfe:	9002      	str	r0, [sp, #8]
   10d00:	9201      	str	r2, [sp, #4]
   10d02:	f00c fb13 	bl	1d32c <__aeabi_memcpy>
   10d06:	981e      	ldr	r0, [sp, #120]	; 0x78
   10d08:	3004      	adds	r0, #4
   10d0a:	9902      	ldr	r1, [sp, #8]
   10d0c:	9a01      	ldr	r2, [sp, #4]
   10d0e:	f00c fb0d 	bl	1d32c <__aeabi_memcpy>
   10d12:	2001      	movs	r0, #1
   10d14:	991e      	ldr	r1, [sp, #120]	; 0x78
   10d16:	6008      	str	r0, [r1, #0]
   10d18:	a8da      	add	r0, sp, #872	; 0x368
            }
   10d1a:	f001 f888 	bl	11e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10d1e:	e7ff      	b.n	10d20 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10d20:	e017      	b.n	10d52 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10d22:	2000      	movs	r0, #0
        }
   10d24:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   10d28:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   10d2c:	bd80      	pop	{r7, pc}
        }
   10d2e:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   10d32:	07c0      	lsls	r0, r0, #31
   10d34:	2800      	cmp	r0, #0
   10d36:	d0f4      	beq.n	10d22 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d38:	e7ff      	b.n	10d3a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10d3a:	2000      	movs	r0, #0
   10d3c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10d40:	a820      	add	r0, sp, #128	; 0x80
   10d42:	3004      	adds	r0, #4
   10d44:	f001 f873 	bl	11e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10d48:	e7eb      	b.n	10d22 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d4a:	a820      	add	r0, sp, #128	; 0x80
   10d4c:	f001 f834 	bl	11db8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10d50:	e7e7      	b.n	10d22 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10d52:	9820      	ldr	r0, [sp, #128]	; 0x80
   10d54:	2801      	cmp	r0, #1
   10d56:	d0ea      	beq.n	10d2e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10d58:	e7f7      	b.n	10d4a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10d5a:	2000      	movs	r0, #0
   10d5c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   10d60:	e651      	b.n	10a06 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10d62:	a820      	add	r0, sp, #128	; 0x80
        }
   10d64:	f001 f828 	bl	11db8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10d68:	e7f7      	b.n	10d5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10d6a:	f24f 5010 	movw	r0, #62736	; 0xf510
   10d6e:	f2c0 0001 	movt	r0, #1
   10d72:	f24f 524c 	movw	r2, #62796	; 0xf54c
   10d76:	f2c0 0201 	movt	r2, #1
   10d7a:	211c      	movs	r1, #28
   10d7c:	f005 ff02 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10d80:	defe      	udf	#254	; 0xfe

00010d82 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
   10d82:	b580      	push	{r7, lr}
   10d84:	b08a      	sub	sp, #40	; 0x28
   10d86:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   10d88:	f001 fe53 	bl	12a32 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
   10d8c:	9307      	str	r3, [sp, #28]
   10d8e:	9206      	str	r2, [sp, #24]
   10d90:	9105      	str	r1, [sp, #20]
   10d92:	9004      	str	r0, [sp, #16]
   10d94:	e7ff      	b.n	10d96 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
   10d96:	a804      	add	r0, sp, #16
   10d98:	f003 ffdc 	bl	14d54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   10d9c:	9003      	str	r0, [sp, #12]
   10d9e:	e7ff      	b.n	10da0 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
   10da0:	9803      	ldr	r0, [sp, #12]
   10da2:	f004 f8aa 	bl	14efa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   10da6:	9002      	str	r0, [sp, #8]
   10da8:	9101      	str	r1, [sp, #4]
   10daa:	e7ff      	b.n	10dac <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
   10dac:	9802      	ldr	r0, [sp, #8]
   10dae:	f000 0001 	and.w	r0, r0, #1
   10db2:	9901      	ldr	r1, [sp, #4]
   10db4:	b00a      	add	sp, #40	; 0x28
   10db6:	bd80      	pop	{r7, pc}

00010db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
   10db8:	b580      	push	{r7, lr}
   10dba:	b090      	sub	sp, #64	; 0x40
   10dbc:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
   10dbe:	f100 010c 	add.w	r1, r0, #12
   10dc2:	9006      	str	r0, [sp, #24]
   10dc4:	4608      	mov	r0, r1
   10dc6:	f7ff f821 	bl	fe0c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10dca:	9005      	str	r0, [sp, #20]
   10dcc:	e7ff      	b.n	10dce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
   10dce:	9805      	ldr	r0, [sp, #20]
   10dd0:	f004 fe2a 	bl	15a28 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
   10dd4:	9004      	str	r0, [sp, #16]
   10dd6:	e7ff      	b.n	10dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
   10dd8:	9804      	ldr	r0, [sp, #16]
   10dda:	f000 0001 	and.w	r0, r0, #1
   10dde:	f7fe faf0 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10de2:	f88d 001f 	strb.w	r0, [sp, #31]
   10de6:	e7ff      	b.n	10de8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
   10de8:	f89d 001f 	ldrb.w	r0, [sp, #31]
   10dec:	07c1      	lsls	r1, r0, #31
   10dee:	2900      	cmp	r1, #0
   10df0:	d001      	beq.n	10df6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
   10df2:	e7ff      	b.n	10df4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
   10df4:	e006      	b.n	10e04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
   10df6:	9806      	ldr	r0, [sp, #24]
   10df8:	300c      	adds	r0, #12
   10dfa:	f7fe fffc 	bl	fdf6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10dfe:	9003      	str	r0, [sp, #12]
   10e00:	e00d      	b.n	10e1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
   10e02:	defe      	udf	#254	; 0xfe
   10e04:	f002 fa02 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10e08:	e003      	b.n	10e12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
   10e0a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   10e0e:	b010      	add	sp, #64	; 0x40
   10e10:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
   10e12:	f004 fe5e 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10e16:	f88d 001e 	strb.w	r0, [sp, #30]
   10e1a:	e7ff      	b.n	10e1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
   10e1c:	e7f5      	b.n	10e0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
   10e1e:	9803      	ldr	r0, [sp, #12]
   10e20:	f004 fdad 	bl	1597e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
   10e24:	9002      	str	r0, [sp, #8]
   10e26:	e7ff      	b.n	10e28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
   10e28:	9802      	ldr	r0, [sp, #8]
   10e2a:	f000 0001 	and.w	r0, r0, #1
   10e2e:	f7fe fac8 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10e32:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   10e36:	e7ff      	b.n	10e38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
   10e38:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10e3c:	07c1      	lsls	r1, r0, #31
   10e3e:	2900      	cmp	r1, #0
   10e40:	d001      	beq.n	10e46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
   10e42:	e7ff      	b.n	10e44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
   10e44:	e006      	b.n	10e54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
   10e46:	9806      	ldr	r0, [sp, #24]
   10e48:	300c      	adds	r0, #12
   10e4a:	f7fe ffdf 	bl	fe0c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10e4e:	9001      	str	r0, [sp, #4]
   10e50:	e009      	b.n	10e66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
   10e52:	defe      	udf	#254	; 0xfe
   10e54:	f002 f9da 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10e58:	e7ff      	b.n	10e5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
   10e5a:	f004 fe3a 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10e5e:	f88d 001e 	strb.w	r0, [sp, #30]
   10e62:	e7ff      	b.n	10e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
   10e64:	e7d1      	b.n	10e0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
   10e66:	9801      	ldr	r0, [sp, #4]
   10e68:	f004 fd34 	bl	158d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
   10e6c:	f88d 001e 	strb.w	r0, [sp, #30]
   10e70:	e7ff      	b.n	10e72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
   10e72:	e7ca      	b.n	10e0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00010e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
   10e74:	b082      	sub	sp, #8
   10e76:	9001      	str	r0, [sp, #4]
   10e78:	e7ff      	b.n	10e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
   10e7a:	b002      	add	sp, #8
   10e7c:	4770      	bx	lr

00010e7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
   10e7e:	b082      	sub	sp, #8
   10e80:	9001      	str	r0, [sp, #4]
   10e82:	e7ff      	b.n	10e84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
   10e84:	b002      	add	sp, #8
   10e86:	4770      	bx	lr

00010e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
   10e88:	b082      	sub	sp, #8
   10e8a:	9001      	str	r0, [sp, #4]
   10e8c:	e7ff      	b.n	10e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
   10e8e:	b002      	add	sp, #8
   10e90:	4770      	bx	lr

00010e92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   10e92:	b5f0      	push	{r4, r5, r6, r7, lr}
   10e94:	b0c7      	sub	sp, #284	; 0x11c
   10e96:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
   10e9a:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
   10e9e:	461c      	mov	r4, r3
   10ea0:	4615      	mov	r5, r2
   10ea2:	460e      	mov	r6, r1
   10ea4:	9040      	str	r0, [sp, #256]	; 0x100
   10ea6:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
   10eaa:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
   10eae:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
   10eb2:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
   10eb6:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   10eb8:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10ebc:	2701      	movs	r7, #1
   10ebe:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10ec2:	466f      	mov	r7, sp
   10ec4:	f8c7 e000 	str.w	lr, [r7]
   10ec8:	900a      	str	r0, [sp, #40]	; 0x28
   10eca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10ece:	9408      	str	r4, [sp, #32]
   10ed0:	9507      	str	r5, [sp, #28]
   10ed2:	9606      	str	r6, [sp, #24]
   10ed4:	f000 fa44 	bl	11360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   10ed8:	9005      	str	r0, [sp, #20]
   10eda:	e7ff      	b.n	10edc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
   10edc:	9805      	ldr	r0, [sp, #20]
   10ede:	f000 0001 	and.w	r0, r0, #1
   10ee2:	f7fe fa6e 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10ee6:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10eea:	e7ff      	b.n	10eec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
   10eec:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   10ef0:	07c1      	lsls	r1, r0, #31
   10ef2:	2900      	cmp	r1, #0
   10ef4:	d001      	beq.n	10efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
   10ef6:	e7ff      	b.n	10ef8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
   10ef8:	e00f      	b.n	10f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
   10efa:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   10efc:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10f00:	a80c      	add	r0, sp, #48	; 0x30
   10f02:	22cc      	movs	r2, #204	; 0xcc
   10f04:	9004      	str	r0, [sp, #16]
   10f06:	9909      	ldr	r1, [sp, #36]	; 0x24
   10f08:	f00c fa10 	bl	1d32c <__aeabi_memcpy>
   10f0c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10f0e:	9904      	ldr	r1, [sp, #16]
   10f10:	f000 f884 	bl	1101c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
   10f14:	9003      	str	r0, [sp, #12]
   10f16:	e00d      	b.n	10f34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
   10f18:	defe      	udf	#254	; 0xfe
   10f1a:	f002 f977 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f1e:	e003      	b.n	10f28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   10f20:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   10f24:	b047      	add	sp, #284	; 0x11c
   10f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   10f28:	f004 fdd3 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f2c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10f30:	e7ff      	b.n	10f32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
   10f32:	e034      	b.n	10f9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
   10f34:	9803      	ldr	r0, [sp, #12]
   10f36:	f000 0001 	and.w	r0, r0, #1
   10f3a:	f7fe fa42 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10f3e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10f42:	e7ff      	b.n	10f44 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
   10f44:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10f48:	07c1      	lsls	r1, r0, #31
   10f4a:	2900      	cmp	r1, #0
   10f4c:	d001      	beq.n	10f52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
   10f4e:	e7ff      	b.n	10f50 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
   10f50:	e004      	b.n	10f5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10f52:	f003 f904 	bl	1415e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10f56:	9002      	str	r0, [sp, #8]
   10f58:	e009      	b.n	10f6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
   10f5a:	defe      	udf	#254	; 0xfe
   10f5c:	f002 f956 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10f60:	e7ff      	b.n	10f62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
   10f62:	f004 fdb6 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10f66:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10f6a:	e7ff      	b.n	10f6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
   10f6c:	e017      	b.n	10f9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10f6e:	f24f 516c 	movw	r1, #62828	; 0xf56c
   10f72:	f2c0 0101 	movt	r1, #1
   10f76:	f24f 53c8 	movw	r3, #62920	; 0xf5c8
   10f7a:	f2c0 0301 	movt	r3, #1
   10f7e:	220e      	movs	r2, #14
   10f80:	9802      	ldr	r0, [sp, #8]
   10f82:	f7fe f9e5 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10f86:	e7ff      	b.n	10f88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
   10f88:	2000      	movs	r0, #0
        Ok(())
   10f8a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   10f8e:	e7c7      	b.n	10f20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10f90:	2000      	movs	r0, #0
   10f92:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10f96:	9809      	ldr	r0, [sp, #36]	; 0x24
   10f98:	f000 ff1d 	bl	11dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10f9c:	e7c0      	b.n	10f20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10f9e:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
   10fa2:	07c0      	lsls	r0, r0, #31
   10fa4:	2800      	cmp	r0, #0
   10fa6:	d1f3      	bne.n	10f90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
   10fa8:	e7ba      	b.n	10f20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00010faa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
   10faa:	b580      	push	{r7, lr}
   10fac:	b084      	sub	sp, #16
   10fae:	9001      	str	r0, [sp, #4]
   10fb0:	9102      	str	r1, [sp, #8]
   10fb2:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
   10fb4:	4608      	mov	r0, r1
   10fb6:	4611      	mov	r1, r2
   10fb8:	f003 f87f 	bl	140ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   10fbc:	9000      	str	r0, [sp, #0]
   10fbe:	e7ff      	b.n	10fc0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
   10fc0:	f24f 51d8 	movw	r1, #62936	; 0xf5d8
   10fc4:	f2c0 0101 	movt	r1, #1
   10fc8:	f24f 53e8 	movw	r3, #62952	; 0xf5e8
   10fcc:	f2c0 0301 	movt	r3, #1
   10fd0:	220d      	movs	r2, #13
   10fd2:	9800      	ldr	r0, [sp, #0]
   10fd4:	f7fe f9bc 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10fd8:	e7ff      	b.n	10fda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
   10fda:	2000      	movs	r0, #0
    }
   10fdc:	b004      	add	sp, #16
   10fde:	bd80      	pop	{r7, pc}

00010fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
   10fe0:	b580      	push	{r7, lr}
   10fe2:	b088      	sub	sp, #32
   10fe4:	460a      	mov	r2, r1
   10fe6:	9006      	str	r0, [sp, #24]
   10fe8:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
   10fec:	9004      	str	r0, [sp, #16]
   10fee:	4608      	mov	r0, r1
   10ff0:	9203      	str	r2, [sp, #12]
   10ff2:	f000 feb9 	bl	11d68 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
   10ff6:	9002      	str	r0, [sp, #8]
   10ff8:	e7ff      	b.n	10ffa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
   10ffa:	9802      	ldr	r0, [sp, #8]
   10ffc:	f8ad 0016 	strh.w	r0, [sp, #22]
   11000:	e7ff      	b.n	11002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
   11002:	f10d 0116 	add.w	r1, sp, #22
   11006:	2202      	movs	r2, #2
        self.write_data(&bytes)
   11008:	9804      	ldr	r0, [sp, #16]
   1100a:	f7ff ffce 	bl	10faa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
   1100e:	9001      	str	r0, [sp, #4]
   11010:	e7ff      	b.n	11012 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
   11012:	9801      	ldr	r0, [sp, #4]
   11014:	f000 0001 	and.w	r0, r0, #1
   11018:	b008      	add	sp, #32
   1101a:	bd80      	pop	{r7, pc}

0001101c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   1101c:	b580      	push	{r7, lr}
   1101e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
   11022:	90a8      	str	r0, [sp, #672]	; 0x2a0
   11024:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   11026:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
   1102a:	2301      	movs	r3, #1
   1102c:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
   11030:	232c      	movs	r3, #44	; 0x2c
   11032:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   11036:	920a      	str	r2, [sp, #40]	; 0x28
   11038:	9209      	str	r2, [sp, #36]	; 0x24
   1103a:	9209      	str	r2, [sp, #36]	; 0x24
   1103c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1103e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11040:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
   11044:	9007      	str	r0, [sp, #28]
   11046:	9106      	str	r1, [sp, #24]
   11048:	4661      	mov	r1, ip
   1104a:	f000 f898 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1104e:	9005      	str	r0, [sp, #20]
   11050:	e7ff      	b.n	11052 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
   11052:	9805      	ldr	r0, [sp, #20]
   11054:	f000 0001 	and.w	r0, r0, #1
   11058:	f7fe f9b3 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1105c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11060:	e7ff      	b.n	11062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
   11062:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11066:	07c1      	lsls	r1, r0, #31
   11068:	2900      	cmp	r1, #0
   1106a:	d001      	beq.n	11070 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
   1106c:	e7ff      	b.n	1106e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
   1106e:	e00e      	b.n	1108e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
   11070:	2000      	movs	r0, #0
        for color in colors {
   11072:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   11076:	a83f      	add	r0, sp, #252	; 0xfc
   11078:	22cc      	movs	r2, #204	; 0xcc
   1107a:	9004      	str	r0, [sp, #16]
   1107c:	9906      	ldr	r1, [sp, #24]
   1107e:	f00c f955 	bl	1d32c <__aeabi_memcpy>
   11082:	a80b      	add	r0, sp, #44	; 0x2c
   11084:	9904      	ldr	r1, [sp, #16]
   11086:	f004 f858 	bl	1513a <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
   1108a:	e00e      	b.n	110aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
   1108c:	defe      	udf	#254	; 0xfe
   1108e:	f002 f8bd 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11092:	e004      	b.n	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
   11094:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   11098:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
   1109c:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   1109e:	f004 fd18 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   110a2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   110a6:	e7ff      	b.n	110a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
   110a8:	e063      	b.n	11172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
   110aa:	a872      	add	r0, sp, #456	; 0x1c8
   110ac:	a90b      	add	r1, sp, #44	; 0x2c
   110ae:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
   110b0:	f00c f93c 	bl	1d32c <__aeabi_memcpy>
   110b4:	e7ff      	b.n	110b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
   110b6:	a872      	add	r0, sp, #456	; 0x1c8
   110b8:	f004 f855 	bl	15166 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
   110bc:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
   110c0:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
   110c4:	e7ff      	b.n	110c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
   110c6:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
   110ca:	4601      	mov	r1, r0
   110cc:	2800      	cmp	r0, #0
   110ce:	d001      	beq.n	110d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
   110d0:	e7ff      	b.n	110d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
   110d2:	e004      	b.n	110de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
   110d4:	a872      	add	r0, sp, #456	; 0x1c8
        }
   110d6:	f000 fe9d 	bl	11e14 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   110da:	e02e      	b.n	1113a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
   110dc:	defe      	udf	#254	; 0xfe
   110de:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
   110e2:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
   110e6:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
   110ea:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
   110ee:	9907      	ldr	r1, [sp, #28]
   110f0:	9003      	str	r0, [sp, #12]
   110f2:	4608      	mov	r0, r1
   110f4:	9903      	ldr	r1, [sp, #12]
   110f6:	f7ff ff73 	bl	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   110fa:	9002      	str	r0, [sp, #8]
   110fc:	e7ff      	b.n	110fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
   110fe:	9802      	ldr	r0, [sp, #8]
   11100:	f000 0001 	and.w	r0, r0, #1
   11104:	f7fe f95d 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11108:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
   1110c:	e7ff      	b.n	1110e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
   1110e:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
   11112:	07c1      	lsls	r1, r0, #31
   11114:	2900      	cmp	r1, #0
   11116:	d001      	beq.n	1111c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
   11118:	e7ff      	b.n	1111a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
   1111a:	e001      	b.n	11120 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
   1111c:	e7cb      	b.n	110b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
   1111e:	defe      	udf	#254	; 0xfe
   11120:	f002 f874 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11124:	e7ff      	b.n	11126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
   11126:	f004 fcd4 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1112a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   1112e:	e7ff      	b.n	11130 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
   11130:	a872      	add	r0, sp, #456	; 0x1c8
        }
   11132:	f000 fe6f 	bl	11e14 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   11136:	e7ff      	b.n	11138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
   11138:	e01b      	b.n	11172 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   1113a:	f003 f810 	bl	1415e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1113e:	9001      	str	r0, [sp, #4]
   11140:	e7ff      	b.n	11142 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
   11142:	f24f 516c 	movw	r1, #62828	; 0xf56c
   11146:	f2c0 0101 	movt	r1, #1
   1114a:	f24f 53f8 	movw	r3, #62968	; 0xf5f8
   1114e:	f2c0 0301 	movt	r3, #1
   11152:	220e      	movs	r2, #14
   11154:	9801      	ldr	r0, [sp, #4]
   11156:	f7fe f8fb 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1115a:	e7ff      	b.n	1115c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
   1115c:	2000      	movs	r0, #0
        Ok(())
   1115e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
   11162:	e797      	b.n	11094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   11164:	2000      	movs	r0, #0
   11166:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   1116a:	9806      	ldr	r0, [sp, #24]
   1116c:	f000 fe33 	bl	11dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11170:	e790      	b.n	11094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   11172:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
   11176:	07c0      	lsls	r0, r0, #31
   11178:	2800      	cmp	r0, #0
   1117a:	d1f3      	bne.n	11164 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
   1117c:	e78a      	b.n	11094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

0001117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
   1117e:	b580      	push	{r7, lr}
   11180:	b08e      	sub	sp, #56	; 0x38
   11182:	468c      	mov	ip, r1
   11184:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
   11188:	920b      	str	r2, [sp, #44]	; 0x2c
   1118a:	930c      	str	r3, [sp, #48]	; 0x30
   1118c:	900d      	str	r0, [sp, #52]	; 0x34
   1118e:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
   11192:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   11196:	f000 fdbd 	bl	11d14 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
   1119a:	9008      	str	r0, [sp, #32]
   1119c:	9107      	str	r1, [sp, #28]
   1119e:	e7ff      	b.n	111a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
   111a0:	9808      	ldr	r0, [sp, #32]
   111a2:	f000 0001 	and.w	r0, r0, #1
   111a6:	f24f 6208 	movw	r2, #62984	; 0xf608
   111aa:	f2c0 0201 	movt	r2, #1
   111ae:	9907      	ldr	r1, [sp, #28]
   111b0:	f003 fe12 	bl	14dd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   111b4:	9006      	str	r0, [sp, #24]
   111b6:	e7ff      	b.n	111b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
   111b8:	9806      	ldr	r0, [sp, #24]
   111ba:	f002 ff36 	bl	1402a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
   111be:	9005      	str	r0, [sp, #20]
   111c0:	e7ff      	b.n	111c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
   111c2:	f24f 6118 	movw	r1, #63000	; 0xf618
   111c6:	f2c0 0101 	movt	r1, #1
   111ca:	f24f 6324 	movw	r3, #63012	; 0xf624
   111ce:	f2c0 0301 	movt	r3, #1
   111d2:	220c      	movs	r2, #12
   111d4:	9805      	ldr	r0, [sp, #20]
   111d6:	f7fe f8bb 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   111da:	e7ff      	b.n	111dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
   111dc:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
   111de:	f003 fe56 	bl	14e8e <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
   111e2:	9004      	str	r0, [sp, #16]
   111e4:	e7ff      	b.n	111e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
   111e6:	9804      	ldr	r0, [sp, #16]
   111e8:	07c1      	lsls	r1, r0, #31
   111ea:	2900      	cmp	r1, #0
   111ec:	d01f      	beq.n	1122e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   111ee:	e7ff      	b.n	111f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
   111f0:	980b      	ldr	r0, [sp, #44]	; 0x2c
   111f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   111f4:	f24f 6234 	movw	r2, #63028	; 0xf634
   111f8:	f2c0 0201 	movt	r2, #1
   111fc:	f003 fe15 	bl	14e2a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
   11200:	9003      	str	r0, [sp, #12]
   11202:	9102      	str	r1, [sp, #8]
   11204:	e7ff      	b.n	11206 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
   11206:	9803      	ldr	r0, [sp, #12]
   11208:	9902      	ldr	r1, [sp, #8]
   1120a:	f002 ff56 	bl	140ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   1120e:	9001      	str	r0, [sp, #4]
   11210:	e7ff      	b.n	11212 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
   11212:	f24f 51d8 	movw	r1, #62936	; 0xf5d8
   11216:	f2c0 0101 	movt	r1, #1
   1121a:	f24f 6344 	movw	r3, #63044	; 0xf644
   1121e:	f2c0 0301 	movt	r3, #1
   11222:	220d      	movs	r2, #13
   11224:	9801      	ldr	r0, [sp, #4]
   11226:	f7fe f893 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1122a:	e7ff      	b.n	1122c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
   1122c:	e7ff      	b.n	1122e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1122e:	2000      	movs	r0, #0
    }
   11230:	b00e      	add	sp, #56	; 0x38
   11232:	bd80      	pop	{r7, pc}

00011234 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
   11234:	b580      	push	{r7, lr}
   11236:	b098      	sub	sp, #96	; 0x60
   11238:	9012      	str	r0, [sp, #72]	; 0x48
   1123a:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
   1123c:	7d02      	ldrb	r2, [r0, #20]
   1123e:	07d2      	lsls	r2, r2, #31
   11240:	2a00      	cmp	r2, #0
   11242:	910a      	str	r1, [sp, #40]	; 0x28
   11244:	9009      	str	r0, [sp, #36]	; 0x24
   11246:	d109      	bne.n	1125c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
   11248:	e7ff      	b.n	1124a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
   1124a:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   1124c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   11250:	980a      	ldr	r0, [sp, #40]	; 0x28
   11252:	f7ff fd96 	bl	10d82 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11256:	9008      	str	r0, [sp, #32]
   11258:	9107      	str	r1, [sp, #28]
   1125a:	e044      	b.n	112e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
   1125c:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
   1125e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   11262:	980a      	ldr	r0, [sp, #40]	; 0x28
   11264:	f7ff fd8d 	bl	10d82 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11268:	9006      	str	r0, [sp, #24]
   1126a:	9105      	str	r1, [sp, #20]
   1126c:	e7ff      	b.n	1126e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
   1126e:	9806      	ldr	r0, [sp, #24]
   11270:	f000 0001 	and.w	r0, r0, #1
   11274:	f24f 6254 	movw	r2, #63060	; 0xf654
   11278:	f2c0 0201 	movt	r2, #1
   1127c:	9905      	ldr	r1, [sp, #20]
   1127e:	f003 fdab 	bl	14dd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   11282:	9004      	str	r0, [sp, #16]
   11284:	e7ff      	b.n	11286 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
   11286:	9804      	ldr	r0, [sp, #16]
   11288:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1128c:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   11290:	910c      	str	r1, [sp, #48]	; 0x30
   11292:	2101      	movs	r1, #1
   11294:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
   11296:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11298:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1129a:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   1129e:	9809      	ldr	r0, [sp, #36]	; 0x24
   112a0:	f7ff ff6d 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   112a4:	9003      	str	r0, [sp, #12]
   112a6:	e7ff      	b.n	112a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
   112a8:	9803      	ldr	r0, [sp, #12]
   112aa:	f000 0001 	and.w	r0, r0, #1
   112ae:	f7fe f888 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   112b2:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   112b6:	e7ff      	b.n	112b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
   112b8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   112bc:	07c1      	lsls	r1, r0, #31
   112be:	2900      	cmp	r1, #0
   112c0:	d001      	beq.n	112c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
   112c2:	e7ff      	b.n	112c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
   112c4:	e001      	b.n	112ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
   112c6:	e047      	b.n	11358 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   112c8:	defe      	udf	#254	; 0xfe
            ))?;
   112ca:	f001 ff9f 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   112ce:	e003      	b.n	112d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
   112d0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   112d4:	b018      	add	sp, #96	; 0x60
   112d6:	bd80      	pop	{r7, pc}
            ))?;
   112d8:	f004 fbfb 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   112dc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   112e0:	e7ff      	b.n	112e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
   112e2:	e7ff      	b.n	112e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   112e4:	e7f4      	b.n	112d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   112e6:	9808      	ldr	r0, [sp, #32]
   112e8:	f000 0001 	and.w	r0, r0, #1
   112ec:	f24f 6264 	movw	r2, #63076	; 0xf664
   112f0:	f2c0 0201 	movt	r2, #1
   112f4:	9907      	ldr	r1, [sp, #28]
   112f6:	f003 fd6f 	bl	14dd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   112fa:	9002      	str	r0, [sp, #8]
   112fc:	e7ff      	b.n	112fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
   112fe:	9802      	ldr	r0, [sp, #8]
   11300:	f040 0108 	orr.w	r1, r0, #8
   11304:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   11308:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   1130c:	910f      	str	r1, [sp, #60]	; 0x3c
   1130e:	2101      	movs	r1, #1
   11310:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
   11312:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11314:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11316:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   1131a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1131c:	f7ff ff2f 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11320:	9001      	str	r0, [sp, #4]
   11322:	e7ff      	b.n	11324 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
   11324:	9801      	ldr	r0, [sp, #4]
   11326:	f000 0001 	and.w	r0, r0, #1
   1132a:	f7fe f84a 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1132e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   11332:	e7ff      	b.n	11334 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
   11334:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   11338:	07c1      	lsls	r1, r0, #31
   1133a:	2900      	cmp	r1, #0
   1133c:	d001      	beq.n	11342 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
   1133e:	e7ff      	b.n	11340 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
   11340:	e001      	b.n	11346 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
   11342:	e009      	b.n	11358 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   11344:	defe      	udf	#254	; 0xfe
            ))?;
   11346:	f001 ff61 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1134a:	e7ff      	b.n	1134c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
   1134c:	f004 fbc1 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11350:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11354:	e7ff      	b.n	11356 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
   11356:	e7c5      	b.n	112e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11358:	2000      	movs	r0, #0
        Ok(())
   1135a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   1135e:	e7b7      	b.n	112d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00011360 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
   11360:	b5b0      	push	{r4, r5, r7, lr}
   11362:	b0a2      	sub	sp, #136	; 0x88
   11364:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
   11368:	469e      	mov	lr, r3
   1136a:	4614      	mov	r4, r2
   1136c:	460d      	mov	r5, r1
   1136e:	9015      	str	r0, [sp, #84]	; 0x54
   11370:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
   11374:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
   11378:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   1137c:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
   11380:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
   11382:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   11386:	2100      	movs	r1, #0
   11388:	9110      	str	r1, [sp, #64]	; 0x40
   1138a:	910f      	str	r1, [sp, #60]	; 0x3c
   1138c:	910f      	str	r1, [sp, #60]	; 0x3c
   1138e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11390:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11392:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   11396:	900d      	str	r0, [sp, #52]	; 0x34
   11398:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   1139c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   113a0:	940a      	str	r4, [sp, #40]	; 0x28
   113a2:	9509      	str	r5, [sp, #36]	; 0x24
   113a4:	f7ff feeb 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   113a8:	9008      	str	r0, [sp, #32]
   113aa:	e7ff      	b.n	113ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
   113ac:	9808      	ldr	r0, [sp, #32]
   113ae:	f000 0001 	and.w	r0, r0, #1
   113b2:	f7fe f806 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   113b6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   113ba:	e7ff      	b.n	113bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
   113bc:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   113c0:	07c1      	lsls	r1, r0, #31
   113c2:	2900      	cmp	r1, #0
   113c4:	d001      	beq.n	113ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
   113c6:	e7ff      	b.n	113c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
   113c8:	e00d      	b.n	113e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
   113ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   113cc:	8a01      	ldrh	r1, [r0, #16]
   113ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113d0:	fa11 f182 	uxtah	r1, r1, r2
   113d4:	b28b      	uxth	r3, r1
   113d6:	468c      	mov	ip, r1
   113d8:	428b      	cmp	r3, r1
   113da:	f8cd c01c 	str.w	ip, [sp, #28]
   113de:	f040 80c2 	bne.w	11566 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
   113e2:	e00d      	b.n	11400 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
   113e4:	defe      	udf	#254	; 0xfe
   113e6:	f001 ff11 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   113ea:	e003      	b.n	113f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
   113ec:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   113f0:	b022      	add	sp, #136	; 0x88
   113f2:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
   113f4:	f004 fb6d 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   113f8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113fc:	e7ff      	b.n	113fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
   113fe:	e7f5      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11400:	980d      	ldr	r0, [sp, #52]	; 0x34
   11402:	9907      	ldr	r1, [sp, #28]
   11404:	f7ff fdec 	bl	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11408:	9006      	str	r0, [sp, #24]
   1140a:	e7ff      	b.n	1140c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
   1140c:	9806      	ldr	r0, [sp, #24]
   1140e:	f000 0001 	and.w	r0, r0, #1
   11412:	f7fd ffd6 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11416:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1141a:	e7ff      	b.n	1141c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
   1141c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   11420:	07c1      	lsls	r1, r0, #31
   11422:	2900      	cmp	r1, #0
   11424:	d001      	beq.n	1142a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
   11426:	e7ff      	b.n	11428 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
   11428:	e00d      	b.n	11446 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
   1142a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1142c:	8a01      	ldrh	r1, [r0, #16]
   1142e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11430:	fa11 f182 	uxtah	r1, r1, r2
   11434:	b28b      	uxth	r3, r1
   11436:	468c      	mov	ip, r1
   11438:	428b      	cmp	r3, r1
   1143a:	f8cd c014 	str.w	ip, [sp, #20]
   1143e:	f040 809e 	bne.w	1157e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
   11442:	e009      	b.n	11458 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
   11444:	defe      	udf	#254	; 0xfe
   11446:	f001 fee1 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1144a:	e7ff      	b.n	1144c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
   1144c:	f004 fb41 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11450:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11454:	e7ff      	b.n	11456 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
   11456:	e7c9      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
   11458:	980d      	ldr	r0, [sp, #52]	; 0x34
   1145a:	9905      	ldr	r1, [sp, #20]
   1145c:	f7ff fdc0 	bl	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11460:	9004      	str	r0, [sp, #16]
   11462:	e7ff      	b.n	11464 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
   11464:	9804      	ldr	r0, [sp, #16]
   11466:	f000 0001 	and.w	r0, r0, #1
   1146a:	f7fd ffaa 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1146e:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   11472:	e7ff      	b.n	11474 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
   11474:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   11478:	07c1      	lsls	r1, r0, #31
   1147a:	2900      	cmp	r1, #0
   1147c:	d001      	beq.n	11482 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
   1147e:	e7ff      	b.n	11480 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
   11480:	e010      	b.n	114a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
   11482:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
   11484:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   11488:	2000      	movs	r0, #0
   1148a:	9013      	str	r0, [sp, #76]	; 0x4c
   1148c:	9012      	str	r0, [sp, #72]	; 0x48
   1148e:	9012      	str	r0, [sp, #72]	; 0x48
   11490:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11492:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   11494:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   11498:	980d      	ldr	r0, [sp, #52]	; 0x34
   1149a:	f7ff fe70 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1149e:	9003      	str	r0, [sp, #12]
   114a0:	e009      	b.n	114b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
   114a2:	defe      	udf	#254	; 0xfe
   114a4:	f001 feb2 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   114a8:	e7ff      	b.n	114aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
   114aa:	f004 fb12 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   114ae:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   114b2:	e7ff      	b.n	114b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
   114b4:	e79a      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
   114b6:	9803      	ldr	r0, [sp, #12]
   114b8:	f000 0001 	and.w	r0, r0, #1
   114bc:	f7fd ff81 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   114c0:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   114c4:	e7ff      	b.n	114c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
   114c6:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   114ca:	07c1      	lsls	r1, r0, #31
   114cc:	2900      	cmp	r1, #0
   114ce:	d001      	beq.n	114d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
   114d0:	e7ff      	b.n	114d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
   114d2:	e00c      	b.n	114ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
   114d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   114d6:	8a41      	ldrh	r1, [r0, #18]
   114d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   114da:	fa11 f182 	uxtah	r1, r1, r2
   114de:	b28b      	uxth	r3, r1
   114e0:	468c      	mov	ip, r1
   114e2:	428b      	cmp	r3, r1
   114e4:	f8cd c008 	str.w	ip, [sp, #8]
   114e8:	d155      	bne.n	11596 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
   114ea:	e009      	b.n	11500 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
   114ec:	defe      	udf	#254	; 0xfe
   114ee:	f001 fe8d 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   114f2:	e7ff      	b.n	114f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
   114f4:	f004 faed 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   114f8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   114fc:	e7ff      	b.n	114fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
   114fe:	e775      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
   11500:	980d      	ldr	r0, [sp, #52]	; 0x34
   11502:	9902      	ldr	r1, [sp, #8]
   11504:	f7ff fd6c 	bl	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11508:	9001      	str	r0, [sp, #4]
   1150a:	e7ff      	b.n	1150c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
   1150c:	9801      	ldr	r0, [sp, #4]
   1150e:	f000 0001 	and.w	r0, r0, #1
   11512:	f7fd ff56 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11516:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   1151a:	e7ff      	b.n	1151c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
   1151c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
   11520:	07c1      	lsls	r1, r0, #31
   11522:	2900      	cmp	r1, #0
   11524:	d001      	beq.n	1152a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
   11526:	e7ff      	b.n	11528 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
   11528:	e00c      	b.n	11544 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
   1152a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1152c:	8a41      	ldrh	r1, [r0, #18]
   1152e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11530:	fa11 f182 	uxtah	r1, r1, r2
   11534:	b28b      	uxth	r3, r1
   11536:	468c      	mov	ip, r1
   11538:	428b      	cmp	r3, r1
   1153a:	f8cd c000 	str.w	ip, [sp]
   1153e:	d136      	bne.n	115ae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
   11540:	e009      	b.n	11556 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
   11542:	defe      	udf	#254	; 0xfe
   11544:	f001 fe62 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11548:	e7ff      	b.n	1154a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
   1154a:	f004 fac2 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1154e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11552:	e7ff      	b.n	11554 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
   11554:	e74a      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
   11556:	980d      	ldr	r0, [sp, #52]	; 0x34
   11558:	9900      	ldr	r1, [sp, #0]
   1155a:	f7ff fd41 	bl	10fe0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1155e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11562:	e7ff      	b.n	11564 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
   11564:	e742      	b.n	113ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11566:	f24f 6090 	movw	r0, #63120	; 0xf690
   1156a:	f2c0 0001 	movt	r0, #1
   1156e:	f24f 6274 	movw	r2, #63092	; 0xf674
   11572:	f2c0 0201 	movt	r2, #1
   11576:	211c      	movs	r1, #28
   11578:	f005 fb04 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1157c:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
   1157e:	f24f 6090 	movw	r0, #63120	; 0xf690
   11582:	f2c0 0001 	movt	r0, #1
   11586:	f24f 62ac 	movw	r2, #63148	; 0xf6ac
   1158a:	f2c0 0201 	movt	r2, #1
   1158e:	211c      	movs	r1, #28
   11590:	f005 faf8 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11594:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
   11596:	f24f 6090 	movw	r0, #63120	; 0xf690
   1159a:	f2c0 0001 	movt	r0, #1
   1159e:	f24f 62bc 	movw	r2, #63164	; 0xf6bc
   115a2:	f2c0 0201 	movt	r2, #1
   115a6:	211c      	movs	r1, #28
   115a8:	f005 faec 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   115ac:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
   115ae:	f24f 6090 	movw	r0, #63120	; 0xf690
   115b2:	f2c0 0001 	movt	r0, #1
   115b6:	f24f 62cc 	movw	r2, #63180	; 0xf6cc
   115ba:	f2c0 0201 	movt	r2, #1
   115be:	211c      	movs	r1, #28
   115c0:	f005 fae0 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   115c4:	defe      	udf	#254	; 0xfe

000115c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
   115c6:	b5b0      	push	{r4, r5, r7, lr}
   115c8:	b08a      	sub	sp, #40	; 0x28
   115ca:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   115ce:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   115d2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   115d4:	9106      	str	r1, [sp, #24]
   115d6:	9207      	str	r2, [sp, #28]
   115d8:	9308      	str	r3, [sp, #32]
   115da:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
   115de:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
   115e2:	9100      	str	r1, [sp, #0]
   115e4:	9201      	str	r2, [sp, #4]
   115e6:	9302      	str	r3, [sp, #8]
   115e8:	9403      	str	r4, [sp, #12]
   115ea:	f88d e014 	strb.w	lr, [sp, #20]
   115ee:	f88d c015 	strb.w	ip, [sp, #21]
   115f2:	2100      	movs	r1, #0
   115f4:	f8ad 1010 	strh.w	r1, [sp, #16]
   115f8:	f8ad 1012 	strh.w	r1, [sp, #18]
   115fc:	4669      	mov	r1, sp
        display
   115fe:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11602:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
   11606:	b00a      	add	sp, #40	; 0x28
   11608:	bdb0      	pop	{r4, r5, r7, pc}

0001160a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
   1160a:	b580      	push	{r7, lr}
   1160c:	b0f6      	sub	sp, #472	; 0x1d8
   1160e:	904e      	str	r0, [sp, #312]	; 0x138
   11610:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
   11612:	9117      	str	r1, [sp, #92]	; 0x5c
   11614:	9016      	str	r0, [sp, #88]	; 0x58
   11616:	f001 ffae 	bl	13576 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
   1161a:	9015      	str	r0, [sp, #84]	; 0x54
   1161c:	e7ff      	b.n	1161e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
   1161e:	f24f 61dc 	movw	r1, #63196	; 0xf6dc
   11622:	f2c0 0101 	movt	r1, #1
   11626:	f24f 63ec 	movw	r3, #63212	; 0xf6ec
   1162a:	f2c0 0301 	movt	r3, #1
   1162e:	220d      	movs	r2, #13
   11630:	9815      	ldr	r0, [sp, #84]	; 0x54
   11632:	f7fd fe8d 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11636:	e7ff      	b.n	11638 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
   11638:	9816      	ldr	r0, [sp, #88]	; 0x58
   1163a:	f7ff fbbd 	bl	10db8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
   1163e:	9014      	str	r0, [sp, #80]	; 0x50
   11640:	e7ff      	b.n	11642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
   11642:	9814      	ldr	r0, [sp, #80]	; 0x50
   11644:	f000 0001 	and.w	r0, r0, #1
   11648:	f7fd febb 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1164c:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   11650:	e7ff      	b.n	11652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
   11652:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   11656:	07c1      	lsls	r1, r0, #31
   11658:	2900      	cmp	r1, #0
   1165a:	d001      	beq.n	11660 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
   1165c:	e7ff      	b.n	1165e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
   1165e:	e010      	b.n	11682 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
   11660:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
   11662:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   11666:	2000      	movs	r0, #0
   11668:	901a      	str	r0, [sp, #104]	; 0x68
   1166a:	9019      	str	r0, [sp, #100]	; 0x64
   1166c:	9019      	str	r0, [sp, #100]	; 0x64
   1166e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   11670:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11672:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   11676:	9816      	ldr	r0, [sp, #88]	; 0x58
   11678:	f7ff fd81 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1167c:	9013      	str	r0, [sp, #76]	; 0x4c
   1167e:	e00d      	b.n	1169c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
   11680:	defe      	udf	#254	; 0xfe
   11682:	f001 fdc3 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11686:	e003      	b.n	11690 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
   11688:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   1168c:	b076      	add	sp, #472	; 0x1d8
   1168e:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
   11690:	f004 fa1f 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11694:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11698:	e7ff      	b.n	1169a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
   1169a:	e7f5      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
   1169c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1169e:	f000 0001 	and.w	r0, r0, #1
   116a2:	f7fd fe8e 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   116a6:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   116aa:	e7ff      	b.n	116ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
   116ac:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   116b0:	07c1      	lsls	r1, r0, #31
   116b2:	2900      	cmp	r1, #0
   116b4:	d001      	beq.n	116ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
   116b6:	e7ff      	b.n	116b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
   116b8:	e005      	b.n	116c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
   116ba:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   116bc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   116be:	f7fe fbb1 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   116c2:	e009      	b.n	116d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
   116c4:	defe      	udf	#254	; 0xfe
   116c6:	f001 fda1 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   116ca:	e7ff      	b.n	116cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
   116cc:	f004 fa01 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   116d0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   116d4:	e7ff      	b.n	116d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
   116d6:	e7d7      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   116d8:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
   116da:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   116de:	2000      	movs	r0, #0
   116e0:	901d      	str	r0, [sp, #116]	; 0x74
   116e2:	901c      	str	r0, [sp, #112]	; 0x70
   116e4:	901c      	str	r0, [sp, #112]	; 0x70
   116e6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   116e8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   116ea:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
   116ee:	9816      	ldr	r0, [sp, #88]	; 0x58
   116f0:	f7ff fd45 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116f4:	9012      	str	r0, [sp, #72]	; 0x48
   116f6:	e7ff      	b.n	116f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
   116f8:	9812      	ldr	r0, [sp, #72]	; 0x48
   116fa:	f000 0001 	and.w	r0, r0, #1
   116fe:	f7fd fe60 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11702:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   11706:	e7ff      	b.n	11708 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
   11708:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   1170c:	07c1      	lsls	r1, r0, #31
   1170e:	2900      	cmp	r1, #0
   11710:	d001      	beq.n	11716 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
   11712:	e7ff      	b.n	11714 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
   11714:	e005      	b.n	11722 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
   11716:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11718:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1171a:	f7fe fb83 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1171e:	e009      	b.n	11734 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
   11720:	defe      	udf	#254	; 0xfe
   11722:	f001 fd73 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11726:	e7ff      	b.n	11728 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
   11728:	f004 f9d3 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1172c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11730:	e7ff      	b.n	11732 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
   11732:	e7a9      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11734:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   11736:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
   1173a:	f24f 7000 	movw	r0, #63232	; 0xf700
   1173e:	f2c0 0001 	movt	r0, #1
   11742:	6800      	ldr	r0, [r0, #0]
   11744:	901f      	str	r0, [sp, #124]	; 0x7c
   11746:	2003      	movs	r0, #3
   11748:	9020      	str	r0, [sp, #128]	; 0x80
   1174a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1174c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1174e:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
   11752:	9816      	ldr	r0, [sp, #88]	; 0x58
   11754:	f7ff fd13 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11758:	9011      	str	r0, [sp, #68]	; 0x44
   1175a:	e7ff      	b.n	1175c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
   1175c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1175e:	f000 0001 	and.w	r0, r0, #1
   11762:	f7fd fe2e 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11766:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   1176a:	e7ff      	b.n	1176c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
   1176c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
   11770:	07c1      	lsls	r1, r0, #31
   11772:	2900      	cmp	r1, #0
   11774:	d001      	beq.n	1177a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
   11776:	e7ff      	b.n	11778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
   11778:	e014      	b.n	117a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
   1177a:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   1177c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   11780:	f24f 7000 	movw	r0, #63232	; 0xf700
   11784:	f2c0 0001 	movt	r0, #1
   11788:	6800      	ldr	r0, [r0, #0]
   1178a:	9022      	str	r0, [sp, #136]	; 0x88
   1178c:	2003      	movs	r0, #3
   1178e:	9023      	str	r0, [sp, #140]	; 0x8c
   11790:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11792:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11794:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
   11798:	9816      	ldr	r0, [sp, #88]	; 0x58
   1179a:	f7ff fcf0 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1179e:	9010      	str	r0, [sp, #64]	; 0x40
   117a0:	e009      	b.n	117b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   117a2:	defe      	udf	#254	; 0xfe
   117a4:	f001 fd32 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   117a8:	e7ff      	b.n	117aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
   117aa:	f004 f992 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   117ae:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   117b2:	e7ff      	b.n	117b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
   117b4:	e768      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   117b6:	9810      	ldr	r0, [sp, #64]	; 0x40
   117b8:	f000 0001 	and.w	r0, r0, #1
   117bc:	f7fd fe01 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   117c0:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
   117c4:	e7ff      	b.n	117c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
   117c6:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
   117ca:	07c1      	lsls	r1, r0, #31
   117cc:	2900      	cmp	r1, #0
   117ce:	d001      	beq.n	117d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
   117d0:	e7ff      	b.n	117d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
   117d2:	e014      	b.n	117fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
   117d4:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
   117d6:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   117da:	f24f 700c 	movw	r0, #63244	; 0xf70c
   117de:	f2c0 0001 	movt	r0, #1
   117e2:	6800      	ldr	r0, [r0, #0]
   117e4:	9025      	str	r0, [sp, #148]	; 0x94
   117e6:	2006      	movs	r0, #6
   117e8:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
   117ea:	9a25      	ldr	r2, [sp, #148]	; 0x94
   117ec:	9b26      	ldr	r3, [sp, #152]	; 0x98
   117ee:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   117f2:	9816      	ldr	r0, [sp, #88]	; 0x58
   117f4:	f7ff fcc3 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   117f8:	900f      	str	r0, [sp, #60]	; 0x3c
   117fa:	e009      	b.n	11810 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   117fc:	defe      	udf	#254	; 0xfe
   117fe:	f001 fd05 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11802:	e7ff      	b.n	11804 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
   11804:	f004 f965 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11808:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1180c:	e7ff      	b.n	1180e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
   1180e:	e73b      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
   11810:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11812:	f000 0001 	and.w	r0, r0, #1
   11816:	f7fd fdd4 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1181a:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
   1181e:	e7ff      	b.n	11820 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11820:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   11824:	07c1      	lsls	r1, r0, #31
   11826:	2900      	cmp	r1, #0
   11828:	d001      	beq.n	1182e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
   1182a:	e7ff      	b.n	1182c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
   1182c:	e014      	b.n	11858 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
   1182e:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11830:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   11834:	f24f 7014 	movw	r0, #63252	; 0xf714
   11838:	f2c0 0001 	movt	r0, #1
   1183c:	6800      	ldr	r0, [r0, #0]
   1183e:	9028      	str	r0, [sp, #160]	; 0xa0
   11840:	2001      	movs	r0, #1
   11842:	9029      	str	r0, [sp, #164]	; 0xa4
   11844:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   11846:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   11848:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
   1184c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1184e:	f7ff fc96 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11852:	900e      	str	r0, [sp, #56]	; 0x38
   11854:	e009      	b.n	1186a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
   11856:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11858:	f001 fcd8 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1185c:	e7ff      	b.n	1185e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
   1185e:	f004 f938 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11862:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11866:	e7ff      	b.n	11868 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
   11868:	e70e      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   1186a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1186c:	f000 0001 	and.w	r0, r0, #1
   11870:	f7fd fda7 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11874:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
   11878:	e7ff      	b.n	1187a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
   1187a:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
   1187e:	07c1      	lsls	r1, r0, #31
   11880:	2900      	cmp	r1, #0
   11882:	d001      	beq.n	11888 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
   11884:	e7ff      	b.n	11886 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
   11886:	e014      	b.n	118b2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
   11888:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   1188a:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
   1188e:	f24f 701c 	movw	r0, #63260	; 0xf71c
   11892:	f2c0 0001 	movt	r0, #1
   11896:	6800      	ldr	r0, [r0, #0]
   11898:	902b      	str	r0, [sp, #172]	; 0xac
   1189a:	2003      	movs	r0, #3
   1189c:	902c      	str	r0, [sp, #176]	; 0xb0
   1189e:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   118a0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   118a2:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
   118a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   118a8:	f7ff fc69 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   118ac:	900d      	str	r0, [sp, #52]	; 0x34
   118ae:	e009      	b.n	118c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   118b0:	defe      	udf	#254	; 0xfe
   118b2:	f001 fcab 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   118b6:	e7ff      	b.n	118b8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
   118b8:	f004 f90b 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   118bc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   118c0:	e7ff      	b.n	118c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
   118c2:	e6e1      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   118c4:	980d      	ldr	r0, [sp, #52]	; 0x34
   118c6:	f000 0001 	and.w	r0, r0, #1
   118ca:	f7fd fd7a 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118ce:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
   118d2:	e7ff      	b.n	118d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
   118d4:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
   118d8:	07c1      	lsls	r1, r0, #31
   118da:	2900      	cmp	r1, #0
   118dc:	d001      	beq.n	118e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
   118de:	e7ff      	b.n	118e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
   118e0:	e014      	b.n	1190c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
   118e2:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   118e4:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
   118e8:	f24f 7024 	movw	r0, #63268	; 0xf724
   118ec:	f2c0 0001 	movt	r0, #1
   118f0:	6800      	ldr	r0, [r0, #0]
   118f2:	902e      	str	r0, [sp, #184]	; 0xb8
   118f4:	2001      	movs	r0, #1
   118f6:	902f      	str	r0, [sp, #188]	; 0xbc
   118f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   118fa:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   118fc:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   11900:	9816      	ldr	r0, [sp, #88]	; 0x58
   11902:	f7ff fc3c 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11906:	900c      	str	r0, [sp, #48]	; 0x30
   11908:	e009      	b.n	1191e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   1190a:	defe      	udf	#254	; 0xfe
   1190c:	f001 fc7e 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11910:	e7ff      	b.n	11912 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
   11912:	f004 f8de 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11916:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1191a:	e7ff      	b.n	1191c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
   1191c:	e6b4      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1191e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11920:	f000 0001 	and.w	r0, r0, #1
   11924:	f7fd fd4d 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11928:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
   1192c:	e7ff      	b.n	1192e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
   1192e:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
   11932:	07c1      	lsls	r1, r0, #31
   11934:	2900      	cmp	r1, #0
   11936:	d001      	beq.n	1193c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
   11938:	e7ff      	b.n	1193a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
   1193a:	e014      	b.n	11966 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
   1193c:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   1193e:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   11942:	f24f 702c 	movw	r0, #63276	; 0xf72c
   11946:	f2c0 0001 	movt	r0, #1
   1194a:	6800      	ldr	r0, [r0, #0]
   1194c:	9031      	str	r0, [sp, #196]	; 0xc4
   1194e:	2002      	movs	r0, #2
   11950:	9032      	str	r0, [sp, #200]	; 0xc8
   11952:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   11954:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   11956:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
   1195a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1195c:	f7ff fc0f 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11960:	900b      	str	r0, [sp, #44]	; 0x2c
   11962:	e009      	b.n	11978 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11964:	defe      	udf	#254	; 0xfe
   11966:	f001 fc51 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1196a:	e7ff      	b.n	1196c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
   1196c:	f004 f8b1 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11970:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11974:	e7ff      	b.n	11976 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
   11976:	e687      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   11978:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1197a:	f000 0001 	and.w	r0, r0, #1
   1197e:	f7fd fd20 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11982:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
   11986:	e7ff      	b.n	11988 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
   11988:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
   1198c:	07c1      	lsls	r1, r0, #31
   1198e:	2900      	cmp	r1, #0
   11990:	d001      	beq.n	11996 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
   11992:	e7ff      	b.n	11994 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
   11994:	e014      	b.n	119c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
   11996:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11998:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
   1199c:	f24f 7034 	movw	r0, #63284	; 0xf734
   119a0:	f2c0 0001 	movt	r0, #1
   119a4:	6800      	ldr	r0, [r0, #0]
   119a6:	9034      	str	r0, [sp, #208]	; 0xd0
   119a8:	2002      	movs	r0, #2
   119aa:	9035      	str	r0, [sp, #212]	; 0xd4
   119ac:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   119ae:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   119b0:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
   119b4:	9816      	ldr	r0, [sp, #88]	; 0x58
   119b6:	f7ff fbe2 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   119ba:	900a      	str	r0, [sp, #40]	; 0x28
   119bc:	e009      	b.n	119d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   119be:	defe      	udf	#254	; 0xfe
   119c0:	f001 fc24 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   119c4:	e7ff      	b.n	119c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
   119c6:	f004 f884 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   119ca:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119ce:	e7ff      	b.n	119d0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
   119d0:	e65a      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   119d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   119d4:	f000 0001 	and.w	r0, r0, #1
   119d8:	f7fd fcf3 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119dc:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
   119e0:	e7ff      	b.n	119e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
   119e2:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   119e6:	07c1      	lsls	r1, r0, #31
   119e8:	2900      	cmp	r1, #0
   119ea:	d001      	beq.n	119f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
   119ec:	e7ff      	b.n	119ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
   119ee:	e014      	b.n	11a1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
   119f0:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   119f2:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
   119f6:	f24f 703c 	movw	r0, #63292	; 0xf73c
   119fa:	f2c0 0001 	movt	r0, #1
   119fe:	6800      	ldr	r0, [r0, #0]
   11a00:	9037      	str	r0, [sp, #220]	; 0xdc
   11a02:	2002      	movs	r0, #2
   11a04:	9038      	str	r0, [sp, #224]	; 0xe0
   11a06:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   11a08:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   11a0a:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
   11a0e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a10:	f7ff fbb5 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a14:	9009      	str	r0, [sp, #36]	; 0x24
   11a16:	e009      	b.n	11a2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11a18:	defe      	udf	#254	; 0xfe
   11a1a:	f001 fbf7 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a1e:	e7ff      	b.n	11a20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
   11a20:	f004 f857 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a24:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a28:	e7ff      	b.n	11a2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
   11a2a:	e62d      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
   11a2e:	f000 0001 	and.w	r0, r0, #1
   11a32:	f7fd fcc6 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a36:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
   11a3a:	e7ff      	b.n	11a3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
   11a3c:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
   11a40:	07c1      	lsls	r1, r0, #31
   11a42:	2900      	cmp	r1, #0
   11a44:	d001      	beq.n	11a4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
   11a46:	e7ff      	b.n	11a48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
   11a48:	e014      	b.n	11a74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
   11a4a:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11a4c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11a50:	f24f 7044 	movw	r0, #63300	; 0xf744
   11a54:	f2c0 0001 	movt	r0, #1
   11a58:	6800      	ldr	r0, [r0, #0]
   11a5a:	903a      	str	r0, [sp, #232]	; 0xe8
   11a5c:	2001      	movs	r0, #1
   11a5e:	903b      	str	r0, [sp, #236]	; 0xec
   11a60:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   11a62:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   11a64:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
   11a68:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a6a:	f7ff fb88 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a6e:	9008      	str	r0, [sp, #32]
   11a70:	e009      	b.n	11a86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11a72:	defe      	udf	#254	; 0xfe
   11a74:	f001 fbca 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a78:	e7ff      	b.n	11a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
   11a7a:	f004 f82a 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a7e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a82:	e7ff      	b.n	11a84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
   11a84:	e600      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11a86:	9808      	ldr	r0, [sp, #32]
   11a88:	f000 0001 	and.w	r0, r0, #1
   11a8c:	f7fd fc99 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a90:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
   11a94:	e7ff      	b.n	11a96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
   11a96:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
   11a9a:	07c1      	lsls	r1, r0, #31
   11a9c:	2900      	cmp	r1, #0
   11a9e:	d001      	beq.n	11aa4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
   11aa0:	e7ff      	b.n	11aa2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
   11aa2:	e006      	b.n	11ab2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
   11aa4:	9816      	ldr	r0, [sp, #88]	; 0x58
   11aa6:	7d41      	ldrb	r1, [r0, #21]
   11aa8:	07c9      	lsls	r1, r1, #31
   11aaa:	2900      	cmp	r1, #0
   11aac:	d11a      	bne.n	11ae4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
   11aae:	e009      	b.n	11ac4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   11ab0:	defe      	udf	#254	; 0xfe
   11ab2:	f001 fbab 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11ab6:	e7ff      	b.n	11ab8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
   11ab8:	f004 f80b 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11abc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11ac0:	e7ff      	b.n	11ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
   11ac2:	e5e1      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11ac4:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
   11ac6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   11aca:	2000      	movs	r0, #0
   11acc:	9041      	str	r0, [sp, #260]	; 0x104
   11ace:	9040      	str	r0, [sp, #256]	; 0x100
   11ad0:	9040      	str	r0, [sp, #256]	; 0x100
   11ad2:	9a40      	ldr	r2, [sp, #256]	; 0x100
   11ad4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   11ad6:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
   11ada:	9816      	ldr	r0, [sp, #88]	; 0x58
   11adc:	f7ff fb4f 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11ae0:	9007      	str	r0, [sp, #28]
   11ae2:	e02a      	b.n	11b3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
   11ae4:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
   11ae6:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
   11aea:	2000      	movs	r0, #0
   11aec:	903e      	str	r0, [sp, #248]	; 0xf8
   11aee:	903d      	str	r0, [sp, #244]	; 0xf4
   11af0:	903d      	str	r0, [sp, #244]	; 0xf4
   11af2:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
   11af4:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   11af6:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
   11afa:	9816      	ldr	r0, [sp, #88]	; 0x58
   11afc:	f7ff fb3f 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b00:	9006      	str	r0, [sp, #24]
   11b02:	e7ff      	b.n	11b04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
   11b04:	9806      	ldr	r0, [sp, #24]
   11b06:	f000 0001 	and.w	r0, r0, #1
   11b0a:	f7fd fc5a 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b0e:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
   11b12:	e7ff      	b.n	11b14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
   11b14:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
   11b18:	07c1      	lsls	r1, r0, #31
   11b1a:	2900      	cmp	r1, #0
   11b1c:	d001      	beq.n	11b22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
   11b1e:	e7ff      	b.n	11b20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
   11b20:	e001      	b.n	11b26 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
   11b22:	e024      	b.n	11b6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
   11b24:	defe      	udf	#254	; 0xfe
   11b26:	f001 fb71 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b2a:	e7ff      	b.n	11b2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
   11b2c:	f003 ffd1 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b30:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b34:	e7ff      	b.n	11b36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
   11b36:	e7ff      	b.n	11b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
   11b38:	e5a6      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
   11b3a:	9807      	ldr	r0, [sp, #28]
   11b3c:	f000 0001 	and.w	r0, r0, #1
   11b40:	f7fd fc3f 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b44:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
   11b48:	e7ff      	b.n	11b4a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
   11b4a:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
   11b4e:	07c1      	lsls	r1, r0, #31
   11b50:	2900      	cmp	r1, #0
   11b52:	d001      	beq.n	11b58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
   11b54:	e7ff      	b.n	11b56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
   11b56:	e001      	b.n	11b5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
   11b58:	e009      	b.n	11b6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
   11b5a:	defe      	udf	#254	; 0xfe
   11b5c:	f001 fb56 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b60:	e7ff      	b.n	11b62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
   11b62:	f003 ffb6 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b66:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b6a:	e7ff      	b.n	11b6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
   11b6c:	e7e4      	b.n	11b38 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
   11b6e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b70:	7d01      	ldrb	r1, [r0, #20]
   11b72:	07c9      	lsls	r1, r1, #31
   11b74:	2900      	cmp	r1, #0
   11b76:	d114      	bne.n	11ba2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
   11b78:	e7ff      	b.n	11b7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
   11b7a:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11b7c:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
   11b80:	f24f 7054 	movw	r0, #63316	; 0xf754
   11b84:	f2c0 0001 	movt	r0, #1
   11b88:	6800      	ldr	r0, [r0, #0]
   11b8a:	9046      	str	r0, [sp, #280]	; 0x118
   11b8c:	2001      	movs	r0, #1
   11b8e:	9047      	str	r0, [sp, #284]	; 0x11c
   11b90:	9a46      	ldr	r2, [sp, #280]	; 0x118
   11b92:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   11b94:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
   11b98:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b9a:	f7ff faf0 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b9e:	9005      	str	r0, [sp, #20]
   11ba0:	e02e      	b.n	11c00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
   11ba2:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11ba4:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
   11ba8:	f24f 704c 	movw	r0, #63308	; 0xf74c
   11bac:	f2c0 0001 	movt	r0, #1
   11bb0:	6800      	ldr	r0, [r0, #0]
   11bb2:	9043      	str	r0, [sp, #268]	; 0x10c
   11bb4:	2001      	movs	r0, #1
   11bb6:	9044      	str	r0, [sp, #272]	; 0x110
   11bb8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   11bba:	9b44      	ldr	r3, [sp, #272]	; 0x110
   11bbc:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
   11bc0:	9816      	ldr	r0, [sp, #88]	; 0x58
   11bc2:	f7ff fadc 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11bc6:	9004      	str	r0, [sp, #16]
   11bc8:	e7ff      	b.n	11bca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
   11bca:	9804      	ldr	r0, [sp, #16]
   11bcc:	f000 0001 	and.w	r0, r0, #1
   11bd0:	f7fd fbf7 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11bd4:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
   11bd8:	e7ff      	b.n	11bda <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
   11bda:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
   11bde:	07c1      	lsls	r1, r0, #31
   11be0:	2900      	cmp	r1, #0
   11be2:	d001      	beq.n	11be8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
   11be4:	e7ff      	b.n	11be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
   11be6:	e001      	b.n	11bec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
   11be8:	e024      	b.n	11c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11bea:	defe      	udf	#254	; 0xfe
   11bec:	f001 fb0e 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11bf0:	e7ff      	b.n	11bf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
   11bf2:	f003 ff6e 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11bf6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11bfa:	e7ff      	b.n	11bfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
   11bfc:	e7ff      	b.n	11bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11bfe:	e543      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11c00:	9805      	ldr	r0, [sp, #20]
   11c02:	f000 0001 	and.w	r0, r0, #1
   11c06:	f7fd fbdc 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11c0a:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
   11c0e:	e7ff      	b.n	11c10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
   11c10:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
   11c14:	07c1      	lsls	r1, r0, #31
   11c16:	2900      	cmp	r1, #0
   11c18:	d001      	beq.n	11c1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
   11c1a:	e7ff      	b.n	11c1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
   11c1c:	e001      	b.n	11c22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
   11c1e:	e009      	b.n	11c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11c20:	defe      	udf	#254	; 0xfe
   11c22:	f001 faf3 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11c26:	e7ff      	b.n	11c28 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
   11c28:	f003 ff53 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11c2c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11c30:	e7ff      	b.n	11c32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
   11c32:	e7e4      	b.n	11bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11c34:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11c36:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
   11c3a:	f24f 705c 	movw	r0, #63324	; 0xf75c
   11c3e:	f2c0 0001 	movt	r0, #1
   11c42:	6800      	ldr	r0, [r0, #0]
   11c44:	9049      	str	r0, [sp, #292]	; 0x124
   11c46:	2001      	movs	r0, #1
   11c48:	904a      	str	r0, [sp, #296]	; 0x128
   11c4a:	9a49      	ldr	r2, [sp, #292]	; 0x124
   11c4c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   11c4e:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
   11c52:	9816      	ldr	r0, [sp, #88]	; 0x58
   11c54:	f7ff fa93 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11c58:	9003      	str	r0, [sp, #12]
   11c5a:	e7ff      	b.n	11c5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
   11c5c:	9803      	ldr	r0, [sp, #12]
   11c5e:	f000 0001 	and.w	r0, r0, #1
   11c62:	f7fd fbae 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11c66:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
   11c6a:	e7ff      	b.n	11c6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
   11c6c:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
   11c70:	07c1      	lsls	r1, r0, #31
   11c72:	2900      	cmp	r1, #0
   11c74:	d001      	beq.n	11c7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
   11c76:	e7ff      	b.n	11c78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
   11c78:	e010      	b.n	11c9c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
   11c7a:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
   11c7c:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
   11c80:	2000      	movs	r0, #0
   11c82:	904d      	str	r0, [sp, #308]	; 0x134
   11c84:	904c      	str	r0, [sp, #304]	; 0x130
   11c86:	904c      	str	r0, [sp, #304]	; 0x130
   11c88:	9a4c      	ldr	r2, [sp, #304]	; 0x130
   11c8a:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   11c8c:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
   11c90:	9816      	ldr	r0, [sp, #88]	; 0x58
   11c92:	f7ff fa74 	bl	1117e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11c96:	9002      	str	r0, [sp, #8]
   11c98:	e009      	b.n	11cae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11c9a:	defe      	udf	#254	; 0xfe
   11c9c:	f001 fab6 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11ca0:	e7ff      	b.n	11ca2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
   11ca2:	f003 ff16 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11ca6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11caa:	e7ff      	b.n	11cac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
   11cac:	e4ec      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
   11cae:	9802      	ldr	r0, [sp, #8]
   11cb0:	f000 0001 	and.w	r0, r0, #1
   11cb4:	f7fd fb85 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11cb8:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
   11cbc:	e7ff      	b.n	11cbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
   11cbe:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
   11cc2:	07c1      	lsls	r1, r0, #31
   11cc4:	2900      	cmp	r1, #0
   11cc6:	d001      	beq.n	11ccc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
   11cc8:	e7ff      	b.n	11cca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
   11cca:	e005      	b.n	11cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
   11ccc:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11cce:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11cd0:	f7fe f8a8 	bl	fe24 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11cd4:	e009      	b.n	11cea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
   11cd6:	defe      	udf	#254	; 0xfe
   11cd8:	f001 fa98 	bl	1320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11cdc:	e7ff      	b.n	11cde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
   11cde:	f003 fef8 	bl	15ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11ce2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11ce6:	e7ff      	b.n	11ce8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
   11ce8:	e4ce      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   11cea:	f002 fa38 	bl	1415e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   11cee:	9001      	str	r0, [sp, #4]
   11cf0:	e7ff      	b.n	11cf2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
   11cf2:	f24f 516c 	movw	r1, #62828	; 0xf56c
   11cf6:	f2c0 0101 	movt	r1, #1
   11cfa:	f24f 7360 	movw	r3, #63328	; 0xf760
   11cfe:	f2c0 0301 	movt	r3, #1
   11d02:	220e      	movs	r2, #14
   11d04:	9801      	ldr	r0, [sp, #4]
   11d06:	f7fd fb23 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11d0a:	e7ff      	b.n	11d0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
   11d0c:	2000      	movs	r0, #0
        Ok(())
   11d0e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
   11d12:	e4b9      	b.n	11688 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

00011d14 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
   11d14:	b580      	push	{r7, lr}
   11d16:	b08a      	sub	sp, #40	; 0x28
   11d18:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   11d1a:	f000 fe3c 	bl	12996 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
   11d1e:	9307      	str	r3, [sp, #28]
   11d20:	9206      	str	r2, [sp, #24]
   11d22:	9105      	str	r1, [sp, #20]
   11d24:	9004      	str	r0, [sp, #16]
   11d26:	e7ff      	b.n	11d28 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
   11d28:	a804      	add	r0, sp, #16
   11d2a:	f003 f813 	bl	14d54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   11d2e:	9003      	str	r0, [sp, #12]
   11d30:	e7ff      	b.n	11d32 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
   11d32:	9803      	ldr	r0, [sp, #12]
   11d34:	f003 f8e1 	bl	14efa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   11d38:	9002      	str	r0, [sp, #8]
   11d3a:	9101      	str	r1, [sp, #4]
   11d3c:	e7ff      	b.n	11d3e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
   11d3e:	9802      	ldr	r0, [sp, #8]
   11d40:	f000 0001 	and.w	r0, r0, #1
   11d44:	9901      	ldr	r1, [sp, #4]
   11d46:	b00a      	add	sp, #40	; 0x28
   11d48:	bd80      	pop	{r7, pc}

00011d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
   11d4a:	b082      	sub	sp, #8
   11d4c:	4601      	mov	r1, r0
   11d4e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11d52:	ba00      	rev	r0, r0
   11d54:	0c00      	lsrs	r0, r0, #16
   11d56:	f8ad 0006 	strh.w	r0, [sp, #6]
   11d5a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11d5e:	9000      	str	r0, [sp, #0]
   11d60:	e7ff      	b.n	11d62 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
   11d62:	9800      	ldr	r0, [sp, #0]
   11d64:	b002      	add	sp, #8
   11d66:	4770      	bx	lr

00011d68 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
   11d68:	b580      	push	{r7, lr}
   11d6a:	b084      	sub	sp, #16
   11d6c:	4601      	mov	r1, r0
   11d6e:	f8ad 000e 	strh.w	r0, [sp, #14]
   11d72:	9102      	str	r1, [sp, #8]
   11d74:	f7ff ffe9 	bl	11d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
   11d78:	9001      	str	r0, [sp, #4]
   11d7a:	e7ff      	b.n	11d7c <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
   11d7c:	9801      	ldr	r0, [sp, #4]
   11d7e:	b004      	add	sp, #16
   11d80:	bd80      	pop	{r7, pc}

00011d82 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
   11d82:	b580      	push	{r7, lr}
   11d84:	b084      	sub	sp, #16
   11d86:	9002      	str	r0, [sp, #8]
   11d88:	9802      	ldr	r0, [sp, #8]
   11d8a:	f002 ff47 	bl	14c1c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
   11d8e:	9001      	str	r0, [sp, #4]
   11d90:	9100      	str	r1, [sp, #0]
   11d92:	e7ff      	b.n	11d94 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
   11d94:	9801      	ldr	r0, [sp, #4]
   11d96:	f000 0001 	and.w	r0, r0, #1
   11d9a:	9900      	ldr	r1, [sp, #0]
   11d9c:	b004      	add	sp, #16
   11d9e:	bd80      	pop	{r7, pc}

00011da0 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
   11da0:	b081      	sub	sp, #4
   11da2:	9000      	str	r0, [sp, #0]
   11da4:	b001      	add	sp, #4
   11da6:	4770      	bx	lr

00011da8 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
   11da8:	b580      	push	{r7, lr}
   11daa:	b082      	sub	sp, #8
   11dac:	9001      	str	r0, [sp, #4]
   11dae:	f000 f83e 	bl	11e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11db2:	e7ff      	b.n	11db4 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
   11db4:	b002      	add	sp, #8
   11db6:	bd80      	pop	{r7, pc}

00011db8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
   11db8:	b580      	push	{r7, lr}
   11dba:	b082      	sub	sp, #8
   11dbc:	9001      	str	r0, [sp, #4]
   11dbe:	6801      	ldr	r1, [r0, #0]
   11dc0:	2900      	cmp	r1, #0
   11dc2:	9000      	str	r0, [sp, #0]
   11dc4:	d102      	bne.n	11dcc <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
   11dc6:	e7ff      	b.n	11dc8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
   11dc8:	b002      	add	sp, #8
   11dca:	bd80      	pop	{r7, pc}
   11dcc:	9800      	ldr	r0, [sp, #0]
   11dce:	3004      	adds	r0, #4
   11dd0:	f7ff ffea 	bl	11da8 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
   11dd4:	e7f8      	b.n	11dc8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

00011dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
   11dd6:	b580      	push	{r7, lr}
   11dd8:	b082      	sub	sp, #8
   11dda:	9001      	str	r0, [sp, #4]
   11ddc:	f003 f908 	bl	14ff0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
   11de0:	e7ff      	b.n	11de2 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
   11de2:	b002      	add	sp, #8
   11de4:	bd80      	pop	{r7, pc}

00011de6 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
   11de6:	b580      	push	{r7, lr}
   11de8:	b082      	sub	sp, #8
   11dea:	9001      	str	r0, [sp, #4]
   11dec:	3024      	adds	r0, #36	; 0x24
   11dee:	f000 f81e 	bl	11e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11df2:	e7ff      	b.n	11df4 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
   11df4:	b002      	add	sp, #8
   11df6:	bd80      	pop	{r7, pc}

00011df8 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
   11df8:	b580      	push	{r7, lr}
   11dfa:	b082      	sub	sp, #8
   11dfc:	9001      	str	r0, [sp, #4]
   11dfe:	9000      	str	r0, [sp, #0]
   11e00:	f7ff fff1 	bl	11de6 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
   11e04:	e001      	b.n	11e0a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
   11e06:	b002      	add	sp, #8
   11e08:	bd80      	pop	{r7, pc}
   11e0a:	9800      	ldr	r0, [sp, #0]
   11e0c:	3094      	adds	r0, #148	; 0x94
   11e0e:	f7ff ffe2 	bl	11dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11e12:	e7f8      	b.n	11e06 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

00011e14 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
   11e14:	b580      	push	{r7, lr}
   11e16:	b082      	sub	sp, #8
   11e18:	9001      	str	r0, [sp, #4]
   11e1a:	9000      	str	r0, [sp, #0]
   11e1c:	f003 f910 	bl	15040 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
   11e20:	e001      	b.n	11e26 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
   11e22:	b002      	add	sp, #8
   11e24:	bd80      	pop	{r7, pc}
   11e26:	9800      	ldr	r0, [sp, #0]
   11e28:	f7ff ffd5 	bl	11dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11e2c:	e7f9      	b.n	11e22 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

00011e2e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
   11e2e:	b580      	push	{r7, lr}
   11e30:	b082      	sub	sp, #8
   11e32:	9001      	str	r0, [sp, #4]
   11e34:	f003 f8cc 	bl	14fd0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
   11e38:	e7ff      	b.n	11e3a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
   11e3a:	b002      	add	sp, #8
   11e3c:	bd80      	pop	{r7, pc}

00011e3e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
   11e3e:	b580      	push	{r7, lr}
   11e40:	b082      	sub	sp, #8
   11e42:	9001      	str	r0, [sp, #4]
   11e44:	6801      	ldr	r1, [r0, #0]
   11e46:	2900      	cmp	r1, #0
   11e48:	9000      	str	r0, [sp, #0]
   11e4a:	d102      	bne.n	11e52 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
   11e4c:	e7ff      	b.n	11e4e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
   11e4e:	b002      	add	sp, #8
   11e50:	bd80      	pop	{r7, pc}
   11e52:	9800      	ldr	r0, [sp, #0]
   11e54:	3004      	adds	r0, #4
   11e56:	f000 f805 	bl	11e64 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
   11e5a:	e7f8      	b.n	11e4e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

00011e5c <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
   11e5c:	b081      	sub	sp, #4
   11e5e:	9000      	str	r0, [sp, #0]
   11e60:	b001      	add	sp, #4
   11e62:	4770      	bx	lr

00011e64 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
   11e64:	b580      	push	{r7, lr}
   11e66:	b082      	sub	sp, #8
   11e68:	9001      	str	r0, [sp, #4]
   11e6a:	f7ff ffb4 	bl	11dd6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11e6e:	e7ff      	b.n	11e70 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
   11e70:	b002      	add	sp, #8
   11e72:	bd80      	pop	{r7, pc}

00011e74 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
   11e74:	b089      	sub	sp, #36	; 0x24
   11e76:	9005      	str	r0, [sp, #20]
   11e78:	9106      	str	r1, [sp, #24]
   11e7a:	9107      	str	r1, [sp, #28]
   11e7c:	9907      	ldr	r1, [sp, #28]
   11e7e:	9002      	str	r0, [sp, #8]
   11e80:	9101      	str	r1, [sp, #4]
   11e82:	e7ff      	b.n	11e84 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
   11e84:	9802      	ldr	r0, [sp, #8]
   11e86:	9008      	str	r0, [sp, #32]
   11e88:	9908      	ldr	r1, [sp, #32]
   11e8a:	9100      	str	r1, [sp, #0]
   11e8c:	e7ff      	b.n	11e8e <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
   11e8e:	9800      	ldr	r0, [sp, #0]
   11e90:	9003      	str	r0, [sp, #12]
   11e92:	9901      	ldr	r1, [sp, #4]
   11e94:	9104      	str	r1, [sp, #16]
   11e96:	9803      	ldr	r0, [sp, #12]
   11e98:	9904      	ldr	r1, [sp, #16]
   11e9a:	b009      	add	sp, #36	; 0x24
   11e9c:	4770      	bx	lr

00011e9e <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11e9e:	b580      	push	{r7, lr}
        (&self).into_iter()
   11ea0:	f000 f814 	bl	11ecc <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   11ea4:	e7ff      	b.n	11ea6 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   11ea6:	bd80      	pop	{r7, pc}

00011ea8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11ea8:	b5b0      	push	{r4, r5, r7, lr}
   11eaa:	b081      	sub	sp, #4
   11eac:	469c      	mov	ip, r3
   11eae:	4696      	mov	lr, r2
   11eb0:	f8ad 2000 	strh.w	r2, [sp]
   11eb4:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11eb8:	820a      	strh	r2, [r1, #16]
   11eba:	824b      	strh	r3, [r1, #18]
        self
   11ebc:	c91c      	ldmia	r1!, {r2, r3, r4}
   11ebe:	c01c      	stmia	r0!, {r2, r3, r4}
   11ec0:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   11ec4:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   11ec8:	b001      	add	sp, #4
   11eca:	bdb0      	pop	{r4, r5, r7, pc}

00011ecc <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11ecc:	b570      	push	{r4, r5, r6, lr}
   11ece:	b08e      	sub	sp, #56	; 0x38
   11ed0:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11ed2:	680a      	ldr	r2, [r1, #0]
   11ed4:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   11ed6:	f8d1 c008 	ldr.w	ip, [r1, #8]
   11eda:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   11ede:	8b0c      	ldrh	r4, [r1, #24]
   11ee0:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   11ee4:	690c      	ldr	r4, [r1, #16]
   11ee6:	694d      	ldr	r5, [r1, #20]
   11ee8:	950b      	str	r5, [sp, #44]	; 0x2c
   11eea:	940a      	str	r4, [sp, #40]	; 0x28
   11eec:	2400      	movs	r4, #0
            x: self.top_left[0],
   11eee:	9009      	str	r0, [sp, #36]	; 0x24
   11ef0:	4608      	mov	r0, r1
   11ef2:	9108      	str	r1, [sp, #32]
   11ef4:	4621      	mov	r1, r4
   11ef6:	9207      	str	r2, [sp, #28]
   11ef8:	9306      	str	r3, [sp, #24]
   11efa:	f8cd c014 	str.w	ip, [sp, #20]
   11efe:	f8cd e010 	str.w	lr, [sp, #16]
   11f02:	f7fc fac9 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f06:	9003      	str	r0, [sp, #12]
   11f08:	e7ff      	b.n	11f0a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   11f0a:	9803      	ldr	r0, [sp, #12]
   11f0c:	6801      	ldr	r1, [r0, #0]
   11f0e:	2201      	movs	r2, #1
            y: self.top_left[1],
   11f10:	9808      	ldr	r0, [sp, #32]
   11f12:	9102      	str	r1, [sp, #8]
   11f14:	4611      	mov	r1, r2
   11f16:	f7fc fabf 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f1a:	9001      	str	r0, [sp, #4]
   11f1c:	e7ff      	b.n	11f1e <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   11f1e:	9801      	ldr	r0, [sp, #4]
   11f20:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   11f22:	9a07      	ldr	r2, [sp, #28]
   11f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11f26:	601a      	str	r2, [r3, #0]
   11f28:	f8dd c018 	ldr.w	ip, [sp, #24]
   11f2c:	f8c3 c004 	str.w	ip, [r3, #4]
   11f30:	f8dd e014 	ldr.w	lr, [sp, #20]
   11f34:	f8c3 e008 	str.w	lr, [r3, #8]
   11f38:	9c04      	ldr	r4, [sp, #16]
   11f3a:	60dc      	str	r4, [r3, #12]
   11f3c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11f40:	841d      	strh	r5, [r3, #32]
   11f42:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11f44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11f46:	61de      	str	r6, [r3, #28]
   11f48:	619d      	str	r5, [r3, #24]
   11f4a:	9d02      	ldr	r5, [sp, #8]
   11f4c:	611d      	str	r5, [r3, #16]
   11f4e:	6159      	str	r1, [r3, #20]
        }
    }
   11f50:	b00e      	add	sp, #56	; 0x38
   11f52:	bd70      	pop	{r4, r5, r6, pc}

00011f54 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   11f54:	b510      	push	{r4, lr}
   11f56:	b0d2      	sub	sp, #328	; 0x148
   11f58:	914f      	str	r1, [sp, #316]	; 0x13c
   11f5a:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11f5c:	902a      	str	r0, [sp, #168]	; 0xa8
   11f5e:	4608      	mov	r0, r1
   11f60:	9129      	str	r1, [sp, #164]	; 0xa4
   11f62:	4611      	mov	r1, r2
   11f64:	f7fc fa98 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f68:	9028      	str	r0, [sp, #160]	; 0xa0
   11f6a:	e03c      	b.n	11fe6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11f6c:	2001      	movs	r0, #1
   11f6e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11f72:	e009      	b.n	11f88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   11f74:	2000      	movs	r0, #0
   11f76:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11f7a:	e005      	b.n	11f88 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11f7c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f7e:	301c      	adds	r0, #28
   11f80:	f002 ff79 	bl	14e76 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11f84:	9027      	str	r0, [sp, #156]	; 0x9c
   11f86:	e06c      	b.n	12062 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11f88:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11f8c:	07c0      	lsls	r0, r0, #31
   11f8e:	2800      	cmp	r0, #0
   11f90:	d172      	bne.n	12078 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11f92:	e070      	b.n	12076 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   11f94:	2001      	movs	r0, #1
   11f96:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11f9a:	e00a      	b.n	11fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11f9c:	2000      	movs	r0, #0
   11f9e:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11fa2:	e006      	b.n	11fb2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11fa4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fa6:	3008      	adds	r0, #8
   11fa8:	2100      	movs	r1, #0
   11faa:	f7fc fa75 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fae:	9026      	str	r0, [sp, #152]	; 0x98
   11fb0:	e038      	b.n	12024 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11fb2:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   11fb6:	07c0      	lsls	r0, r0, #31
   11fb8:	2800      	cmp	r0, #0
   11fba:	d1d7      	bne.n	11f6c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11fbc:	e7de      	b.n	11f7c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11fbe:	2001      	movs	r0, #1
   11fc0:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11fc4:	e009      	b.n	11fda <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11fc6:	2000      	movs	r0, #0
   11fc8:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11fcc:	e005      	b.n	11fda <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11fce:	2101      	movs	r1, #1
   11fd0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fd2:	f7fc fa61 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fd6:	9025      	str	r0, [sp, #148]	; 0x94
   11fd8:	e00a      	b.n	11ff0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   11fda:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   11fde:	07c0      	lsls	r0, r0, #31
   11fe0:	2800      	cmp	r0, #0
   11fe2:	d1df      	bne.n	11fa4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   11fe4:	e7da      	b.n	11f9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   11fe6:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11fe8:	6801      	ldr	r1, [r0, #0]
   11fea:	2900      	cmp	r1, #0
   11fec:	d4e7      	bmi.n	11fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11fee:	e7ee      	b.n	11fce <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   11ff0:	9825      	ldr	r0, [sp, #148]	; 0x94
   11ff2:	6801      	ldr	r1, [r0, #0]
   11ff4:	2900      	cmp	r1, #0
   11ff6:	d4e2      	bmi.n	11fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11ff8:	e7e5      	b.n	11fc6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   11ffa:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11ffc:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   12000:	e00a      	b.n	12018 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   12002:	2000      	movs	r0, #0
   12004:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   12008:	e006      	b.n	12018 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   1200a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1200c:	3008      	adds	r0, #8
   1200e:	2101      	movs	r1, #1
   12010:	f7fc fa42 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12014:	9024      	str	r0, [sp, #144]	; 0x90
   12016:	e00a      	b.n	1202e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   12018:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   1201c:	07c0      	lsls	r0, r0, #31
   1201e:	2800      	cmp	r0, #0
   12020:	d1b8      	bne.n	11f94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   12022:	e7bb      	b.n	11f9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   12024:	9826      	ldr	r0, [sp, #152]	; 0x98
   12026:	6801      	ldr	r1, [r0, #0]
   12028:	2900      	cmp	r1, #0
   1202a:	d4e6      	bmi.n	11ffa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   1202c:	e7ed      	b.n	1200a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   1202e:	9824      	ldr	r0, [sp, #144]	; 0x90
   12030:	6801      	ldr	r1, [r0, #0]
   12032:	2900      	cmp	r1, #0
   12034:	d4e1      	bmi.n	11ffa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   12036:	e7e4      	b.n	12002 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   12038:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   1203a:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   1203e:	e009      	b.n	12054 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   12040:	2000      	movs	r0, #0
   12042:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   12046:	e005      	b.n	12054 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   12048:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1204a:	3018      	adds	r0, #24
   1204c:	f002 ff13 	bl	14e76 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   12050:	9023      	str	r0, [sp, #140]	; 0x8c
   12052:	e00b      	b.n	1206c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   12054:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   12058:	07c0      	lsls	r0, r0, #31
   1205a:	2800      	cmp	r0, #0
   1205c:	f47f af86 	bne.w	11f6c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   12060:	e788      	b.n	11f74 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   12062:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12064:	07c1      	lsls	r1, r0, #31
   12066:	2900      	cmp	r1, #0
   12068:	d1ee      	bne.n	12048 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   1206a:	e7e9      	b.n	12040 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   1206c:	9823      	ldr	r0, [sp, #140]	; 0x8c
   1206e:	07c1      	lsls	r1, r0, #31
   12070:	2900      	cmp	r1, #0
   12072:	d1e1      	bne.n	12038 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   12074:	e7e4      	b.n	12040 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   12076:	e012      	b.n	1209e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   12078:	2000      	movs	r0, #0
            return None;
   1207a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   1207c:	6008      	str	r0, [r1, #0]
   1207e:	e7ff      	b.n	12080 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   12080:	b052      	add	sp, #328	; 0x148
   12082:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   12084:	982d      	ldr	r0, [sp, #180]	; 0xb4
   12086:	992e      	ldr	r1, [sp, #184]	; 0xb8
   12088:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   1208a:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   1208c:	934d      	str	r3, [sp, #308]	; 0x134
   1208e:	924c      	str	r2, [sp, #304]	; 0x130
   12090:	914b      	str	r1, [sp, #300]	; 0x12c
   12092:	904a      	str	r0, [sp, #296]	; 0x128
   12094:	a94a      	add	r1, sp, #296	; 0x128
   12096:	982a      	ldr	r0, [sp, #168]	; 0xa8
   12098:	f002 fdff 	bl	14c9a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   1209c:	e201      	b.n	124a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   1209e:	2000      	movs	r0, #0
            let mut out = None;
   120a0:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   120a2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120a4:	6941      	ldr	r1, [r0, #20]
   120a6:	3008      	adds	r0, #8
   120a8:	2201      	movs	r2, #1
   120aa:	9122      	str	r1, [sp, #136]	; 0x88
   120ac:	4611      	mov	r1, r2
   120ae:	f7fc f9f3 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120b2:	9021      	str	r0, [sp, #132]	; 0x84
   120b4:	e7ff      	b.n	120b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   120b6:	9821      	ldr	r0, [sp, #132]	; 0x84
   120b8:	6801      	ldr	r1, [r0, #0]
   120ba:	9a22      	ldr	r2, [sp, #136]	; 0x88
   120bc:	428a      	cmp	r2, r1
   120be:	dc13      	bgt.n	120e8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   120c0:	e7ff      	b.n	120c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   120c2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120c4:	f890 1020 	ldrb.w	r1, [r0, #32]
   120c8:	460a      	mov	r2, r1
   120ca:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   120cc:	6801      	ldr	r1, [r0, #0]
   120ce:	6843      	ldr	r3, [r0, #4]
   120d0:	9135      	str	r1, [sp, #212]	; 0xd4
   120d2:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   120d4:	6881      	ldr	r1, [r0, #8]
   120d6:	68c3      	ldr	r3, [r0, #12]
   120d8:	9137      	str	r1, [sp, #220]	; 0xdc
   120da:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   120dc:	6901      	ldr	r1, [r0, #16]
   120de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   120e2:	9220      	str	r2, [sp, #128]	; 0x80
   120e4:	dc0b      	bgt.n	120fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   120e6:	e006      	b.n	120f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   120e8:	2000      	movs	r0, #0
                break None;
   120ea:	902d      	str	r0, [sp, #180]	; 0xb4
   120ec:	e7ca      	b.n	12084 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   120ee:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   120f0:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   120f4:	e009      	b.n	1210a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   120f6:	2000      	movs	r0, #0
   120f8:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   120fc:	e005      	b.n	1210a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   120fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12100:	6941      	ldr	r1, [r0, #20]
   12102:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   12106:	dcf2      	bgt.n	120ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   12108:	e7f5      	b.n	120f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   1210a:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   1210e:	07c0      	lsls	r0, r0, #31
   12110:	2800      	cmp	r0, #0
   12112:	f000 8182 	beq.w	1241a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   12116:	e7ff      	b.n	12118 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12118:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1211a:	6941      	ldr	r1, [r0, #20]
   1211c:	a835      	add	r0, sp, #212	; 0xd4
   1211e:	2201      	movs	r2, #1
   12120:	911f      	str	r1, [sp, #124]	; 0x7c
   12122:	4611      	mov	r1, r2
   12124:	f7fc f9b8 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12128:	901e      	str	r0, [sp, #120]	; 0x78
   1212a:	e074      	b.n	12216 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   1212c:	2001      	movs	r0, #1
                if (
   1212e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   12132:	e009      	b.n	12148 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   12134:	2000      	movs	r0, #0
   12136:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1213a:	e005      	b.n	12148 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   1213c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1213e:	301c      	adds	r0, #28
   12140:	f002 fec9 	bl	14ed6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   12144:	901d      	str	r0, [sp, #116]	; 0x74
   12146:	e104      	b.n	12352 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   12148:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   1214c:	07c0      	lsls	r0, r0, #31
   1214e:	2800      	cmp	r0, #0
   12150:	f040 810a 	bne.w	12368 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   12154:	e103      	b.n	1235e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   12156:	2001      	movs	r0, #1
   12158:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1215c:	e00d      	b.n	1217a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   1215e:	2000      	movs	r0, #0
   12160:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   12164:	e009      	b.n	1217a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12166:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12168:	6901      	ldr	r1, [r0, #16]
   1216a:	a837      	add	r0, sp, #220	; 0xdc
   1216c:	2200      	movs	r2, #0
   1216e:	911c      	str	r1, [sp, #112]	; 0x70
   12170:	4611      	mov	r1, r2
   12172:	f7fc f991 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12176:	901b      	str	r0, [sp, #108]	; 0x6c
   12178:	e0d7      	b.n	1232a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   1217a:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   1217e:	07c0      	lsls	r0, r0, #31
   12180:	2800      	cmp	r0, #0
   12182:	d1db      	bne.n	1213c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   12184:	e7d6      	b.n	12134 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   12186:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12188:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   1218c:	e00d      	b.n	121aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   1218e:	2000      	movs	r0, #0
   12190:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   12194:	e009      	b.n	121aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   12196:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12198:	6901      	ldr	r1, [r0, #16]
   1219a:	a835      	add	r0, sp, #212	; 0xd4
   1219c:	2200      	movs	r2, #0
   1219e:	911a      	str	r1, [sp, #104]	; 0x68
   121a0:	4611      	mov	r1, r2
   121a2:	f7fc f979 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   121a6:	9019      	str	r0, [sp, #100]	; 0x64
   121a8:	e090      	b.n	122cc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   121aa:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   121ae:	07c0      	lsls	r0, r0, #31
   121b0:	2800      	cmp	r0, #0
   121b2:	d1d0      	bne.n	12156 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   121b4:	e7d7      	b.n	12166 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   121b6:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   121b8:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   121bc:	e00d      	b.n	121da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   121be:	2000      	movs	r0, #0
   121c0:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   121c4:	e009      	b.n	121da <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   121c6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121c8:	6941      	ldr	r1, [r0, #20]
   121ca:	a837      	add	r0, sp, #220	; 0xdc
   121cc:	2201      	movs	r2, #1
   121ce:	9118      	str	r1, [sp, #96]	; 0x60
   121d0:	4611      	mov	r1, r2
   121d2:	f7fc f961 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   121d6:	9017      	str	r0, [sp, #92]	; 0x5c
   121d8:	e04b      	b.n	12272 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   121da:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   121de:	07c0      	lsls	r0, r0, #31
   121e0:	2800      	cmp	r0, #0
   121e2:	d1d0      	bne.n	12186 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   121e4:	e7d7      	b.n	12196 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   121e6:	2001      	movs	r0, #1
   121e8:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   121ec:	e00d      	b.n	1220a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   121ee:	2000      	movs	r0, #0
   121f0:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   121f4:	e009      	b.n	1220a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   121f6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121f8:	6941      	ldr	r1, [r0, #20]
   121fa:	a835      	add	r0, sp, #212	; 0xd4
   121fc:	2201      	movs	r2, #1
   121fe:	9116      	str	r1, [sp, #88]	; 0x58
   12200:	4611      	mov	r1, r2
   12202:	f7fc f949 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12206:	9015      	str	r0, [sp, #84]	; 0x54
   12208:	e00b      	b.n	12222 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   1220a:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1220e:	07c0      	lsls	r0, r0, #31
   12210:	2800      	cmp	r0, #0
   12212:	d1d0      	bne.n	121b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12214:	e7d7      	b.n	121c6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   12216:	981e      	ldr	r0, [sp, #120]	; 0x78
   12218:	6801      	ldr	r1, [r0, #0]
   1221a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1221c:	428a      	cmp	r2, r1
   1221e:	daea      	bge.n	121f6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   12220:	e7e5      	b.n	121ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   12222:	9815      	ldr	r0, [sp, #84]	; 0x54
   12224:	6801      	ldr	r1, [r0, #0]
   12226:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12228:	188b      	adds	r3, r1, r2
   1222a:	469c      	mov	ip, r3
   1222c:	428b      	cmp	r3, r1
   1222e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   12232:	f180 8137 	bvs.w	124a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   12236:	e7ff      	b.n	12238 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   12238:	9816      	ldr	r0, [sp, #88]	; 0x58
   1223a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1223c:	4288      	cmp	r0, r1
   1223e:	dbd2      	blt.n	121e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   12240:	e7d5      	b.n	121ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   12242:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12244:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   12248:	e00d      	b.n	12266 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1224a:	2000      	movs	r0, #0
   1224c:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   12250:	e009      	b.n	12266 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   12252:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12254:	6941      	ldr	r1, [r0, #20]
   12256:	a837      	add	r0, sp, #220	; 0xdc
   12258:	2201      	movs	r2, #1
   1225a:	9113      	str	r1, [sp, #76]	; 0x4c
   1225c:	4611      	mov	r1, r2
   1225e:	f7fc f91b 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12262:	9012      	str	r0, [sp, #72]	; 0x48
   12264:	e00b      	b.n	1227e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12266:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   1226a:	07c0      	lsls	r0, r0, #31
   1226c:	2800      	cmp	r0, #0
   1226e:	d1a2      	bne.n	121b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12270:	e7a5      	b.n	121be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12272:	9817      	ldr	r0, [sp, #92]	; 0x5c
   12274:	6801      	ldr	r1, [r0, #0]
   12276:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12278:	428a      	cmp	r2, r1
   1227a:	ddea      	ble.n	12252 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   1227c:	e7e5      	b.n	1224a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1227e:	9812      	ldr	r0, [sp, #72]	; 0x48
   12280:	6801      	ldr	r1, [r0, #0]
   12282:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12284:	1a8b      	subs	r3, r1, r2
   12286:	4291      	cmp	r1, r2
   12288:	9311      	str	r3, [sp, #68]	; 0x44
   1228a:	f180 8117 	bvs.w	124bc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   1228e:	e7ff      	b.n	12290 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   12290:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12292:	9911      	ldr	r1, [sp, #68]	; 0x44
   12294:	4288      	cmp	r0, r1
   12296:	dcd4      	bgt.n	12242 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   12298:	e7d7      	b.n	1224a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1229a:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   1229c:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   122a0:	e00d      	b.n	122be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   122a2:	2000      	movs	r0, #0
   122a4:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   122a8:	e009      	b.n	122be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   122aa:	9829      	ldr	r0, [sp, #164]	; 0xa4
   122ac:	6901      	ldr	r1, [r0, #16]
   122ae:	a835      	add	r0, sp, #212	; 0xd4
   122b0:	2200      	movs	r2, #0
   122b2:	9110      	str	r1, [sp, #64]	; 0x40
   122b4:	4611      	mov	r1, r2
   122b6:	f7fc f8ef 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   122ba:	900f      	str	r0, [sp, #60]	; 0x3c
   122bc:	e00c      	b.n	122d8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   122be:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   122c2:	07c0      	lsls	r0, r0, #31
   122c4:	2800      	cmp	r0, #0
   122c6:	f47f af5e 	bne.w	12186 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   122ca:	e760      	b.n	1218e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   122cc:	9819      	ldr	r0, [sp, #100]	; 0x64
   122ce:	6801      	ldr	r1, [r0, #0]
   122d0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   122d2:	428a      	cmp	r2, r1
   122d4:	dae9      	bge.n	122aa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   122d6:	e7e4      	b.n	122a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   122d8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   122da:	6801      	ldr	r1, [r0, #0]
   122dc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   122de:	188b      	adds	r3, r1, r2
   122e0:	469c      	mov	ip, r3
   122e2:	428b      	cmp	r3, r1
   122e4:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   122e8:	f180 80f4 	bvs.w	124d4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   122ec:	e7ff      	b.n	122ee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   122ee:	9810      	ldr	r0, [sp, #64]	; 0x40
   122f0:	990e      	ldr	r1, [sp, #56]	; 0x38
   122f2:	4288      	cmp	r0, r1
   122f4:	dbd1      	blt.n	1229a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   122f6:	e7d4      	b.n	122a2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   122f8:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   122fa:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   122fe:	e00d      	b.n	1231c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12300:	2000      	movs	r0, #0
   12302:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   12306:	e009      	b.n	1231c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12308:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1230a:	6901      	ldr	r1, [r0, #16]
   1230c:	a837      	add	r0, sp, #220	; 0xdc
   1230e:	2200      	movs	r2, #0
   12310:	910d      	str	r1, [sp, #52]	; 0x34
   12312:	4611      	mov	r1, r2
   12314:	f7fc f8c0 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12318:	900c      	str	r0, [sp, #48]	; 0x30
   1231a:	e00c      	b.n	12336 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   1231c:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   12320:	07c0      	lsls	r0, r0, #31
   12322:	2800      	cmp	r0, #0
   12324:	f47f af17 	bne.w	12156 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   12328:	e719      	b.n	1215e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1232a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1232c:	6801      	ldr	r1, [r0, #0]
   1232e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12330:	428a      	cmp	r2, r1
   12332:	dde9      	ble.n	12308 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   12334:	e7e4      	b.n	12300 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   12336:	980c      	ldr	r0, [sp, #48]	; 0x30
   12338:	6801      	ldr	r1, [r0, #0]
   1233a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1233c:	1a8b      	subs	r3, r1, r2
   1233e:	4291      	cmp	r1, r2
   12340:	930b      	str	r3, [sp, #44]	; 0x2c
   12342:	f180 80d3 	bvs.w	124ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   12346:	e7ff      	b.n	12348 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   12348:	980d      	ldr	r0, [sp, #52]	; 0x34
   1234a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1234c:	4288      	cmp	r0, r1
   1234e:	dcd3      	bgt.n	122f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   12350:	e7d6      	b.n	12300 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   12352:	981d      	ldr	r0, [sp, #116]	; 0x74
   12354:	07c1      	lsls	r1, r0, #31
   12356:	2900      	cmp	r1, #0
   12358:	f47f aee8 	bne.w	1212c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   1235c:	e6ea      	b.n	12134 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1235e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12360:	8b01      	ldrh	r1, [r0, #24]
   12362:	2901      	cmp	r1, #1
   12364:	d03b      	beq.n	123de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   12366:	e057      	b.n	12418 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   12368:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1236a:	6901      	ldr	r1, [r0, #16]
                        self.y,
   1236c:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   1236e:	8bc3      	ldrh	r3, [r0, #30]
   12370:	8b80      	ldrh	r0, [r0, #28]
   12372:	f64f 0c74 	movw	ip, #63604	; 0xf874
   12376:	f2c0 0c01 	movt	ip, #1
   1237a:	46ee      	mov	lr, sp
   1237c:	f8ce c000 	str.w	ip, [lr]
   12380:	f64f 0c64 	movw	ip, #63588	; 0xf864
   12384:	f2c0 0c01 	movt	ip, #1
   12388:	f04f 0e0f 	mov.w	lr, #15
   1238c:	910a      	str	r1, [sp, #40]	; 0x28
   1238e:	4619      	mov	r1, r3
   12390:	9209      	str	r2, [sp, #36]	; 0x24
   12392:	4662      	mov	r2, ip
   12394:	4673      	mov	r3, lr
   12396:	f002 fcf2 	bl	14d7e <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   1239a:	9008      	str	r0, [sp, #32]
   1239c:	e7ff      	b.n	1239e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   1239e:	980a      	ldr	r0, [sp, #40]	; 0x28
   123a0:	9040      	str	r0, [sp, #256]	; 0x100
   123a2:	9909      	ldr	r1, [sp, #36]	; 0x24
   123a4:	9141      	str	r1, [sp, #260]	; 0x104
   123a6:	9a08      	ldr	r2, [sp, #32]
   123a8:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   123ac:	9b40      	ldr	r3, [sp, #256]	; 0x100
   123ae:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   123b2:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   123b6:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   123ba:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   123be:	933d      	str	r3, [sp, #244]	; 0xf4
   123c0:	2301      	movs	r3, #1
   123c2:	933c      	str	r3, [sp, #240]	; 0xf0
   123c4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   123c6:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   123ca:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   123ce:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   123d0:	9434      	str	r4, [sp, #208]	; 0xd0
   123d2:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   123d6:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   123da:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   123dc:	e01c      	b.n	12418 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   123de:	9829      	ldr	r0, [sp, #164]	; 0xa4
   123e0:	8b41      	ldrh	r1, [r0, #26]
   123e2:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   123e6:	6902      	ldr	r2, [r0, #16]
   123e8:	6943      	ldr	r3, [r0, #20]
   123ea:	9247      	str	r2, [sp, #284]	; 0x11c
   123ec:	9348      	str	r3, [sp, #288]	; 0x120
   123ee:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   123f2:	9947      	ldr	r1, [sp, #284]	; 0x11c
   123f4:	9a48      	ldr	r2, [sp, #288]	; 0x120
   123f6:	9b49      	ldr	r3, [sp, #292]	; 0x124
   123f8:	9346      	str	r3, [sp, #280]	; 0x118
   123fa:	9245      	str	r2, [sp, #276]	; 0x114
   123fc:	9144      	str	r1, [sp, #272]	; 0x110
   123fe:	2101      	movs	r1, #1
   12400:	9143      	str	r1, [sp, #268]	; 0x10c
   12402:	9943      	ldr	r1, [sp, #268]	; 0x10c
   12404:	9a44      	ldr	r2, [sp, #272]	; 0x110
   12406:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12408:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1240c:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   12410:	9333      	str	r3, [sp, #204]	; 0xcc
   12412:	9232      	str	r2, [sp, #200]	; 0xc8
   12414:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   12416:	e7ff      	b.n	12418 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   12418:	e7ff      	b.n	1241a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   1241a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1241c:	6901      	ldr	r1, [r0, #16]
   1241e:	1c4a      	adds	r2, r1, #1
   12420:	4613      	mov	r3, r2
   12422:	428a      	cmp	r2, r1
   12424:	9307      	str	r3, [sp, #28]
   12426:	d66d      	bvs.n	12504 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   12428:	e7ff      	b.n	1242a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   1242a:	9807      	ldr	r0, [sp, #28]
   1242c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1242e:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   12430:	690a      	ldr	r2, [r1, #16]
   12432:	f101 0008 	add.w	r0, r1, #8
   12436:	2100      	movs	r1, #0
   12438:	9206      	str	r2, [sp, #24]
   1243a:	f7fc f82d 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1243e:	9005      	str	r0, [sp, #20]
   12440:	e7ff      	b.n	12442 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   12442:	9805      	ldr	r0, [sp, #20]
   12444:	6801      	ldr	r1, [r0, #0]
   12446:	9a06      	ldr	r2, [sp, #24]
   12448:	428a      	cmp	r2, r1
   1244a:	dd16      	ble.n	1247a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   1244c:	e7ff      	b.n	1244e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   1244e:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   12450:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12452:	f7fc f821 	bl	e498 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12456:	9004      	str	r0, [sp, #16]
   12458:	e7ff      	b.n	1245a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   1245a:	9804      	ldr	r0, [sp, #16]
   1245c:	6801      	ldr	r1, [r0, #0]
   1245e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12460:	6111      	str	r1, [r2, #16]
                self.y += 1;
   12462:	6951      	ldr	r1, [r2, #20]
   12464:	1c4b      	adds	r3, r1, #1
   12466:	469c      	mov	ip, r3
   12468:	428b      	cmp	r3, r1
   1246a:	f8cd c00c 	str.w	ip, [sp, #12]
   1246e:	d655      	bvs.n	1251c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   12470:	e7ff      	b.n	12472 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   12472:	9803      	ldr	r0, [sp, #12]
   12474:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12476:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   12478:	e7ff      	b.n	1247a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   1247a:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   1247c:	f002 fd19 	bl	14eb2 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   12480:	9002      	str	r0, [sp, #8]
   12482:	e7ff      	b.n	12484 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   12484:	9802      	ldr	r0, [sp, #8]
   12486:	07c1      	lsls	r1, r0, #31
   12488:	2900      	cmp	r1, #0
   1248a:	d101      	bne.n	12490 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   1248c:	e7ff      	b.n	1248e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   1248e:	e606      	b.n	1209e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   12490:	9831      	ldr	r0, [sp, #196]	; 0xc4
   12492:	9932      	ldr	r1, [sp, #200]	; 0xc8
   12494:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   12496:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   12498:	9330      	str	r3, [sp, #192]	; 0xc0
   1249a:	922f      	str	r2, [sp, #188]	; 0xbc
   1249c:	912e      	str	r1, [sp, #184]	; 0xb8
   1249e:	902d      	str	r0, [sp, #180]	; 0xb4
   124a0:	e5f0      	b.n	12084 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   124a2:	e5ed      	b.n	12080 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   124a4:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
   124a8:	f2c0 0001 	movt	r0, #1
   124ac:	f24f 72e0 	movw	r2, #63456	; 0xf7e0
   124b0:	f2c0 0201 	movt	r2, #1
   124b4:	211c      	movs	r1, #28
   124b6:	f004 fb65 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   124ba:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   124bc:	f64f 0020 	movw	r0, #63520	; 0xf820
   124c0:	f2c0 0001 	movt	r0, #1
   124c4:	f64f 020c 	movw	r2, #63500	; 0xf80c
   124c8:	f2c0 0201 	movt	r2, #1
   124cc:	2121      	movs	r1, #33	; 0x21
   124ce:	f004 fb59 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   124d2:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   124d4:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
   124d8:	f2c0 0001 	movt	r0, #1
   124dc:	f64f 0244 	movw	r2, #63556	; 0xf844
   124e0:	f2c0 0201 	movt	r2, #1
   124e4:	211c      	movs	r1, #28
   124e6:	f004 fb4d 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   124ea:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   124ec:	f64f 0020 	movw	r0, #63520	; 0xf820
   124f0:	f2c0 0001 	movt	r0, #1
   124f4:	f64f 0254 	movw	r2, #63572	; 0xf854
   124f8:	f2c0 0201 	movt	r2, #1
   124fc:	2121      	movs	r1, #33	; 0x21
   124fe:	f004 fb41 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12502:	defe      	udf	#254	; 0xfe
            self.x += 1;
   12504:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
   12508:	f2c0 0001 	movt	r0, #1
   1250c:	f64f 0284 	movw	r2, #63620	; 0xf884
   12510:	f2c0 0201 	movt	r2, #1
   12514:	211c      	movs	r1, #28
   12516:	f004 fb35 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1251a:	defe      	udf	#254	; 0xfe
                self.y += 1;
   1251c:	f24f 70f0 	movw	r0, #63472	; 0xf7f0
   12520:	f2c0 0001 	movt	r0, #1
   12524:	f64f 0294 	movw	r2, #63636	; 0xf894
   12528:	f2c0 0201 	movt	r2, #1
   1252c:	211c      	movs	r1, #28
   1252e:	f004 fb29 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12532:	defe      	udf	#254	; 0xfe

00012534 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   12534:	b580      	push	{r7, lr}
   12536:	b08a      	sub	sp, #40	; 0x28
   12538:	680a      	ldr	r2, [r1, #0]
   1253a:	9207      	str	r2, [sp, #28]
   1253c:	684b      	ldr	r3, [r1, #4]
   1253e:	9308      	str	r3, [sp, #32]
   12540:	8909      	ldrh	r1, [r1, #8]
   12542:	468c      	mov	ip, r1
   12544:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   12548:	9005      	str	r0, [sp, #20]
   1254a:	4610      	mov	r0, r2
   1254c:	4619      	mov	r1, r3
   1254e:	f8cd c010 	str.w	ip, [sp, #16]
   12552:	f7fb ff98 	bl	e486 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   12556:	9003      	str	r0, [sp, #12]
   12558:	9102      	str	r1, [sp, #8]
   1255a:	e7ff      	b.n	1255c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   1255c:	9803      	ldr	r0, [sp, #12]
   1255e:	9902      	ldr	r1, [sp, #8]
   12560:	f7fb ffe3 	bl	e52a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   12564:	9001      	str	r0, [sp, #4]
   12566:	9100      	str	r1, [sp, #0]
   12568:	e7ff      	b.n	1256a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   1256a:	9801      	ldr	r0, [sp, #4]
   1256c:	9905      	ldr	r1, [sp, #20]
   1256e:	6008      	str	r0, [r1, #0]
   12570:	9a00      	ldr	r2, [sp, #0]
   12572:	604a      	str	r2, [r1, #4]
   12574:	9b04      	ldr	r3, [sp, #16]
   12576:	810b      	strh	r3, [r1, #8]
   12578:	b00a      	add	sp, #40	; 0x28
   1257a:	bd80      	pop	{r7, pc}

0001257c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   1257c:	b510      	push	{r4, lr}
   1257e:	b08c      	sub	sp, #48	; 0x30
   12580:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   12584:	9108      	str	r1, [sp, #32]
   12586:	9209      	str	r2, [sp, #36]	; 0x24
   12588:	930a      	str	r3, [sp, #40]	; 0x28
   1258a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   1258e:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   12592:	9004      	str	r0, [sp, #16]
   12594:	4670      	mov	r0, lr
   12596:	9303      	str	r3, [sp, #12]
   12598:	9202      	str	r2, [sp, #8]
   1259a:	9101      	str	r1, [sp, #4]
   1259c:	f8cd c000 	str.w	ip, [sp]
   125a0:	f000 f818 	bl	125d4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   125a4:	e7ff      	b.n	125a6 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   125a6:	9801      	ldr	r0, [sp, #4]
   125a8:	9904      	ldr	r1, [sp, #16]
   125aa:	6008      	str	r0, [r1, #0]
   125ac:	9a02      	ldr	r2, [sp, #8]
   125ae:	604a      	str	r2, [r1, #4]
   125b0:	9b03      	ldr	r3, [sp, #12]
   125b2:	608b      	str	r3, [r1, #8]
   125b4:	f8dd c000 	ldr.w	ip, [sp]
   125b8:	f8c1 c00c 	str.w	ip, [r1, #12]
   125bc:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   125c0:	f8a1 e018 	strh.w	lr, [r1, #24]
   125c4:	f8dd e014 	ldr.w	lr, [sp, #20]
   125c8:	9c06      	ldr	r4, [sp, #24]
   125ca:	614c      	str	r4, [r1, #20]
   125cc:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   125d0:	b00c      	add	sp, #48	; 0x30
   125d2:	bd10      	pop	{r4, pc}

000125d4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   125d4:	b082      	sub	sp, #8
   125d6:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   125d8:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   125dc:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   125e0:	f8bd 1000 	ldrh.w	r1, [sp]
   125e4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   125e8:	8001      	strh	r1, [r0, #0]
   125ea:	8042      	strh	r2, [r0, #2]
   125ec:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   125f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   125f4:	8081      	strh	r1, [r0, #4]
   125f6:	80c2      	strh	r2, [r0, #6]
   125f8:	2101      	movs	r1, #1
   125fa:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   125fc:	b002      	add	sp, #8
   125fe:	4770      	bx	lr

00012600 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
   12600:	b08a      	sub	sp, #40	; 0x28
   12602:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
   12604:	7800      	ldrb	r0, [r0, #0]
   12606:	9001      	str	r0, [sp, #4]
   12608:	9901      	ldr	r1, [sp, #4]
   1260a:	e8df f011 	tbh	[pc, r1, lsl #1]
   1260e:	0103      	.short	0x0103
   12610:	01020107 	.word	0x01020107
   12614:	010c0102 	.word	0x010c0102
   12618:	01020102 	.word	0x01020102
   1261c:	01020102 	.word	0x01020102
   12620:	01020111 	.word	0x01020111
   12624:	01020102 	.word	0x01020102
   12628:	01020102 	.word	0x01020102
   1262c:	01160102 	.word	0x01160102
   12630:	0120011b 	.word	0x0120011b
   12634:	01020125 	.word	0x01020125
   12638:	01020102 	.word	0x01020102
   1263c:	01020102 	.word	0x01020102
   12640:	01020102 	.word	0x01020102
   12644:	01020102 	.word	0x01020102
   12648:	01020102 	.word	0x01020102
   1264c:	012a0102 	.word	0x012a0102
   12650:	0102012f 	.word	0x0102012f
   12654:	01020102 	.word	0x01020102
   12658:	01020102 	.word	0x01020102
   1265c:	01340102 	.word	0x01340102
   12660:	013e0139 	.word	0x013e0139
   12664:	01480143 	.word	0x01480143
   12668:	014d0102 	.word	0x014d0102
   1266c:	01520102 	.word	0x01520102
   12670:	01020102 	.word	0x01020102
   12674:	01020102 	.word	0x01020102
   12678:	015c0102 	.word	0x015c0102
   1267c:	01020102 	.word	0x01020102
   12680:	01570102 	.word	0x01570102
   12684:	01020102 	.word	0x01020102
   12688:	01020102 	.word	0x01020102
   1268c:	01020102 	.word	0x01020102
   12690:	01020102 	.word	0x01020102
   12694:	01020102 	.word	0x01020102
   12698:	01020102 	.word	0x01020102
   1269c:	01020102 	.word	0x01020102
   126a0:	01020102 	.word	0x01020102
   126a4:	01020102 	.word	0x01020102
   126a8:	01020102 	.word	0x01020102
   126ac:	01020102 	.word	0x01020102
   126b0:	01020102 	.word	0x01020102
   126b4:	01020102 	.word	0x01020102
   126b8:	01020102 	.word	0x01020102
   126bc:	01020102 	.word	0x01020102
   126c0:	01020102 	.word	0x01020102
   126c4:	01020102 	.word	0x01020102
   126c8:	01020102 	.word	0x01020102
   126cc:	01020102 	.word	0x01020102
   126d0:	01020102 	.word	0x01020102
   126d4:	01020102 	.word	0x01020102
   126d8:	01020102 	.word	0x01020102
   126dc:	01020102 	.word	0x01020102
   126e0:	01020102 	.word	0x01020102
   126e4:	01020102 	.word	0x01020102
   126e8:	01020102 	.word	0x01020102
   126ec:	01020102 	.word	0x01020102
   126f0:	01020102 	.word	0x01020102
   126f4:	01020102 	.word	0x01020102
   126f8:	01020102 	.word	0x01020102
   126fc:	01020102 	.word	0x01020102
   12700:	01020102 	.word	0x01020102
   12704:	01020102 	.word	0x01020102
   12708:	01020102 	.word	0x01020102
   1270c:	01020102 	.word	0x01020102
   12710:	01020102 	.word	0x01020102
   12714:	01020102 	.word	0x01020102
   12718:	01020102 	.word	0x01020102
   1271c:	01020102 	.word	0x01020102
   12720:	01020102 	.word	0x01020102
   12724:	01020102 	.word	0x01020102
   12728:	01020102 	.word	0x01020102
   1272c:	01020102 	.word	0x01020102
   12730:	01020102 	.word	0x01020102
   12734:	01020102 	.word	0x01020102
   12738:	01020102 	.word	0x01020102
   1273c:	01020102 	.word	0x01020102
   12740:	01020102 	.word	0x01020102
   12744:	01020102 	.word	0x01020102
   12748:	01020102 	.word	0x01020102
   1274c:	01020102 	.word	0x01020102
   12750:	01020102 	.word	0x01020102
   12754:	01020102 	.word	0x01020102
   12758:	01020102 	.word	0x01020102
   1275c:	01020102 	.word	0x01020102
   12760:	01020102 	.word	0x01020102
   12764:	01020102 	.word	0x01020102
   12768:	01020102 	.word	0x01020102
   1276c:	01020102 	.word	0x01020102
   12770:	01660161 	.word	0x01660161
   12774:	0170016b 	.word	0x0170016b
   12778:	01750102 	.word	0x01750102
   1277c:	01020102 	.word	0x01020102
   12780:	01020102 	.word	0x01020102
   12784:	01020102 	.word	0x01020102
   12788:	01020102 	.word	0x01020102
   1278c:	017a0102 	.word	0x017a0102
   12790:	0184017f 	.word	0x0184017f
   12794:	018e0189 	.word	0x018e0189
   12798:	01020193 	.word	0x01020193
   1279c:	01020102 	.word	0x01020102
   127a0:	01020102 	.word	0x01020102
   127a4:	01020102 	.word	0x01020102
   127a8:	01020102 	.word	0x01020102
   127ac:	01020102 	.word	0x01020102
   127b0:	01020102 	.word	0x01020102
   127b4:	01020102 	.word	0x01020102
   127b8:	01020102 	.word	0x01020102
   127bc:	01020102 	.word	0x01020102
   127c0:	01980102 	.word	0x01980102
   127c4:	01a2019d 	.word	0x01a2019d
   127c8:	010201a7 	.word	0x010201a7
   127cc:	01b10102 	.word	0x01b10102
   127d0:	010200fd 	.word	0x010200fd
   127d4:	01020102 	.word	0x01020102
   127d8:	01020102 	.word	0x01020102
   127dc:	01020102 	.word	0x01020102
   127e0:	01020102 	.word	0x01020102
   127e4:	01020102 	.word	0x01020102
   127e8:	01020102 	.word	0x01020102
   127ec:	01020102 	.word	0x01020102
   127f0:	01020102 	.word	0x01020102
   127f4:	01020102 	.word	0x01020102
   127f8:	01020102 	.word	0x01020102
   127fc:	01020102 	.word	0x01020102
   12800:	01020102 	.word	0x01020102
   12804:	01ac0102 	.word	0x01ac0102
   12808:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   1280a:	9007      	str	r0, [sp, #28]
   1280c:	20e1      	movs	r0, #225	; 0xe1
   1280e:	9006      	str	r0, [sp, #24]
   12810:	e0b3      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12812:	defe      	udf	#254	; 0xfe
   12814:	2000      	movs	r0, #0
   12816:	9007      	str	r0, [sp, #28]
   12818:	9006      	str	r0, [sp, #24]
   1281a:	e0ae      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1281c:	2000      	movs	r0, #0
   1281e:	9007      	str	r0, [sp, #28]
   12820:	2001      	movs	r0, #1
   12822:	9006      	str	r0, [sp, #24]
   12824:	e0a9      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12826:	2000      	movs	r0, #0
   12828:	9007      	str	r0, [sp, #28]
   1282a:	2004      	movs	r0, #4
   1282c:	9006      	str	r0, [sp, #24]
   1282e:	e0a4      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12830:	2000      	movs	r0, #0
   12832:	9007      	str	r0, [sp, #28]
   12834:	2009      	movs	r0, #9
   12836:	9006      	str	r0, [sp, #24]
   12838:	e09f      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1283a:	2000      	movs	r0, #0
   1283c:	9007      	str	r0, [sp, #28]
   1283e:	2010      	movs	r0, #16
   12840:	9006      	str	r0, [sp, #24]
   12842:	e09a      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12844:	2000      	movs	r0, #0
   12846:	9007      	str	r0, [sp, #28]
   12848:	2011      	movs	r0, #17
   1284a:	9006      	str	r0, [sp, #24]
   1284c:	e095      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1284e:	2000      	movs	r0, #0
   12850:	9007      	str	r0, [sp, #28]
   12852:	2012      	movs	r0, #18
   12854:	9006      	str	r0, [sp, #24]
   12856:	e090      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12858:	2000      	movs	r0, #0
   1285a:	9007      	str	r0, [sp, #28]
   1285c:	2013      	movs	r0, #19
   1285e:	9006      	str	r0, [sp, #24]
   12860:	e08b      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12862:	2000      	movs	r0, #0
   12864:	9007      	str	r0, [sp, #28]
   12866:	2020      	movs	r0, #32
   12868:	9006      	str	r0, [sp, #24]
   1286a:	e086      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1286c:	2000      	movs	r0, #0
   1286e:	9007      	str	r0, [sp, #28]
   12870:	2021      	movs	r0, #33	; 0x21
   12872:	9006      	str	r0, [sp, #24]
   12874:	e081      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12876:	2000      	movs	r0, #0
   12878:	9007      	str	r0, [sp, #28]
   1287a:	2028      	movs	r0, #40	; 0x28
   1287c:	9006      	str	r0, [sp, #24]
   1287e:	e07c      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12880:	2000      	movs	r0, #0
   12882:	9007      	str	r0, [sp, #28]
   12884:	2029      	movs	r0, #41	; 0x29
   12886:	9006      	str	r0, [sp, #24]
   12888:	e077      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1288a:	2000      	movs	r0, #0
   1288c:	9007      	str	r0, [sp, #28]
   1288e:	202a      	movs	r0, #42	; 0x2a
   12890:	9006      	str	r0, [sp, #24]
   12892:	e072      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12894:	2000      	movs	r0, #0
   12896:	9007      	str	r0, [sp, #28]
   12898:	202b      	movs	r0, #43	; 0x2b
   1289a:	9006      	str	r0, [sp, #24]
   1289c:	e06d      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1289e:	2000      	movs	r0, #0
   128a0:	9007      	str	r0, [sp, #28]
   128a2:	202c      	movs	r0, #44	; 0x2c
   128a4:	9006      	str	r0, [sp, #24]
   128a6:	e068      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128a8:	2000      	movs	r0, #0
   128aa:	9007      	str	r0, [sp, #28]
   128ac:	202e      	movs	r0, #46	; 0x2e
   128ae:	9006      	str	r0, [sp, #24]
   128b0:	e063      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128b2:	2000      	movs	r0, #0
   128b4:	9007      	str	r0, [sp, #28]
   128b6:	2030      	movs	r0, #48	; 0x30
   128b8:	9006      	str	r0, [sp, #24]
   128ba:	e05e      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128bc:	2000      	movs	r0, #0
   128be:	9007      	str	r0, [sp, #28]
   128c0:	203a      	movs	r0, #58	; 0x3a
   128c2:	9006      	str	r0, [sp, #24]
   128c4:	e059      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128c6:	2000      	movs	r0, #0
   128c8:	9007      	str	r0, [sp, #28]
   128ca:	2036      	movs	r0, #54	; 0x36
   128cc:	9006      	str	r0, [sp, #24]
   128ce:	e054      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128d0:	2000      	movs	r0, #0
   128d2:	9007      	str	r0, [sp, #28]
   128d4:	20b1      	movs	r0, #177	; 0xb1
   128d6:	9006      	str	r0, [sp, #24]
   128d8:	e04f      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128da:	2000      	movs	r0, #0
   128dc:	9007      	str	r0, [sp, #28]
   128de:	20b2      	movs	r0, #178	; 0xb2
   128e0:	9006      	str	r0, [sp, #24]
   128e2:	e04a      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128e4:	2000      	movs	r0, #0
   128e6:	9007      	str	r0, [sp, #28]
   128e8:	20b3      	movs	r0, #179	; 0xb3
   128ea:	9006      	str	r0, [sp, #24]
   128ec:	e045      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128ee:	2000      	movs	r0, #0
   128f0:	9007      	str	r0, [sp, #28]
   128f2:	20b4      	movs	r0, #180	; 0xb4
   128f4:	9006      	str	r0, [sp, #24]
   128f6:	e040      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   128f8:	2000      	movs	r0, #0
   128fa:	9007      	str	r0, [sp, #28]
   128fc:	20b6      	movs	r0, #182	; 0xb6
   128fe:	9006      	str	r0, [sp, #24]
   12900:	e03b      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12902:	2000      	movs	r0, #0
   12904:	9007      	str	r0, [sp, #28]
   12906:	20c0      	movs	r0, #192	; 0xc0
   12908:	9006      	str	r0, [sp, #24]
   1290a:	e036      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1290c:	2000      	movs	r0, #0
   1290e:	9007      	str	r0, [sp, #28]
   12910:	20c1      	movs	r0, #193	; 0xc1
   12912:	9006      	str	r0, [sp, #24]
   12914:	e031      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12916:	2000      	movs	r0, #0
   12918:	9007      	str	r0, [sp, #28]
   1291a:	20c2      	movs	r0, #194	; 0xc2
   1291c:	9006      	str	r0, [sp, #24]
   1291e:	e02c      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12920:	2000      	movs	r0, #0
   12922:	9007      	str	r0, [sp, #28]
   12924:	20c3      	movs	r0, #195	; 0xc3
   12926:	9006      	str	r0, [sp, #24]
   12928:	e027      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1292a:	2000      	movs	r0, #0
   1292c:	9007      	str	r0, [sp, #28]
   1292e:	20c4      	movs	r0, #196	; 0xc4
   12930:	9006      	str	r0, [sp, #24]
   12932:	e022      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12934:	2000      	movs	r0, #0
   12936:	9007      	str	r0, [sp, #28]
   12938:	20c5      	movs	r0, #197	; 0xc5
   1293a:	9006      	str	r0, [sp, #24]
   1293c:	e01d      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1293e:	2000      	movs	r0, #0
   12940:	9007      	str	r0, [sp, #28]
   12942:	20da      	movs	r0, #218	; 0xda
   12944:	9006      	str	r0, [sp, #24]
   12946:	e018      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12948:	2000      	movs	r0, #0
   1294a:	9007      	str	r0, [sp, #28]
   1294c:	20db      	movs	r0, #219	; 0xdb
   1294e:	9006      	str	r0, [sp, #24]
   12950:	e013      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12952:	2000      	movs	r0, #0
   12954:	9007      	str	r0, [sp, #28]
   12956:	20dc      	movs	r0, #220	; 0xdc
   12958:	9006      	str	r0, [sp, #24]
   1295a:	e00e      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1295c:	2000      	movs	r0, #0
   1295e:	9007      	str	r0, [sp, #28]
   12960:	20dd      	movs	r0, #221	; 0xdd
   12962:	9006      	str	r0, [sp, #24]
   12964:	e009      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12966:	2000      	movs	r0, #0
   12968:	9007      	str	r0, [sp, #28]
   1296a:	20fc      	movs	r0, #252	; 0xfc
   1296c:	9006      	str	r0, [sp, #24]
   1296e:	e004      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12970:	2000      	movs	r0, #0
   12972:	9007      	str	r0, [sp, #28]
   12974:	20e0      	movs	r0, #224	; 0xe0
   12976:	9006      	str	r0, [sp, #24]
   12978:	e7ff      	b.n	1297a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1297a:	9806      	ldr	r0, [sp, #24]
   1297c:	9907      	ldr	r1, [sp, #28]
   1297e:	9105      	str	r1, [sp, #20]
   12980:	9004      	str	r0, [sp, #16]
   12982:	2000      	movs	r0, #0
   12984:	9003      	str	r0, [sp, #12]
   12986:	2001      	movs	r0, #1
   12988:	9002      	str	r0, [sp, #8]
   1298a:	9802      	ldr	r0, [sp, #8]
   1298c:	9903      	ldr	r1, [sp, #12]
   1298e:	9a04      	ldr	r2, [sp, #16]
   12990:	9b05      	ldr	r3, [sp, #20]
   12992:	b00a      	add	sp, #40	; 0x28
   12994:	4770      	bx	lr

00012996 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
   12996:	b580      	push	{r7, lr}
   12998:	b08a      	sub	sp, #40	; 0x28
   1299a:	9009      	str	r0, [sp, #36]	; 0x24
   1299c:	f7ff fe30 	bl	12600 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
   129a0:	9108      	str	r1, [sp, #32]
   129a2:	9007      	str	r0, [sp, #28]
   129a4:	9306      	str	r3, [sp, #24]
   129a6:	9205      	str	r2, [sp, #20]
   129a8:	e7ff      	b.n	129aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
   129aa:	9807      	ldr	r0, [sp, #28]
   129ac:	9908      	ldr	r1, [sp, #32]
   129ae:	9a05      	ldr	r2, [sp, #20]
   129b0:	9b06      	ldr	r3, [sp, #24]
   129b2:	f000 f859 	bl	12a68 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
   129b6:	9104      	str	r1, [sp, #16]
   129b8:	9003      	str	r0, [sp, #12]
   129ba:	9302      	str	r3, [sp, #8]
   129bc:	9201      	str	r2, [sp, #4]
   129be:	e7ff      	b.n	129c0 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
   129c0:	9803      	ldr	r0, [sp, #12]
   129c2:	9904      	ldr	r1, [sp, #16]
   129c4:	9a01      	ldr	r2, [sp, #4]
   129c6:	9b02      	ldr	r3, [sp, #8]
   129c8:	b00a      	add	sp, #40	; 0x28
   129ca:	bd80      	pop	{r7, pc}

000129cc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
   129cc:	b08a      	sub	sp, #40	; 0x28
   129ce:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
   129d0:	7800      	ldrb	r0, [r0, #0]
   129d2:	4601      	mov	r1, r0
   129d4:	2800      	cmp	r0, #0
   129d6:	9101      	str	r1, [sp, #4]
   129d8:	d00f      	beq.n	129fa <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
   129da:	e7ff      	b.n	129dc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
   129dc:	9801      	ldr	r0, [sp, #4]
   129de:	2860      	cmp	r0, #96	; 0x60
   129e0:	d00f      	beq.n	12a02 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
   129e2:	e7ff      	b.n	129e4 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
   129e4:	9801      	ldr	r0, [sp, #4]
   129e6:	28a0      	cmp	r0, #160	; 0xa0
   129e8:	d001      	beq.n	129ee <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
   129ea:	e7ff      	b.n	129ec <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
   129ec:	e00e      	b.n	12a0c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
   129ee:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   129f0:	9007      	str	r0, [sp, #28]
   129f2:	20a0      	movs	r0, #160	; 0xa0
   129f4:	9006      	str	r0, [sp, #24]
   129f6:	e00e      	b.n	12a16 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   129f8:	defe      	udf	#254	; 0xfe
   129fa:	2000      	movs	r0, #0
   129fc:	9007      	str	r0, [sp, #28]
   129fe:	9006      	str	r0, [sp, #24]
   12a00:	e009      	b.n	12a16 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12a02:	2000      	movs	r0, #0
   12a04:	9007      	str	r0, [sp, #28]
   12a06:	2060      	movs	r0, #96	; 0x60
   12a08:	9006      	str	r0, [sp, #24]
   12a0a:	e004      	b.n	12a16 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12a0c:	2000      	movs	r0, #0
   12a0e:	9007      	str	r0, [sp, #28]
   12a10:	20c0      	movs	r0, #192	; 0xc0
   12a12:	9006      	str	r0, [sp, #24]
   12a14:	e7ff      	b.n	12a16 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12a16:	9806      	ldr	r0, [sp, #24]
   12a18:	9907      	ldr	r1, [sp, #28]
   12a1a:	9105      	str	r1, [sp, #20]
   12a1c:	9004      	str	r0, [sp, #16]
   12a1e:	2000      	movs	r0, #0
   12a20:	9003      	str	r0, [sp, #12]
   12a22:	2001      	movs	r0, #1
   12a24:	9002      	str	r0, [sp, #8]
   12a26:	9802      	ldr	r0, [sp, #8]
   12a28:	9903      	ldr	r1, [sp, #12]
   12a2a:	9a04      	ldr	r2, [sp, #16]
   12a2c:	9b05      	ldr	r3, [sp, #20]
   12a2e:	b00a      	add	sp, #40	; 0x28
   12a30:	4770      	bx	lr

00012a32 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
   12a32:	b580      	push	{r7, lr}
   12a34:	b08a      	sub	sp, #40	; 0x28
   12a36:	9009      	str	r0, [sp, #36]	; 0x24
   12a38:	f7ff ffc8 	bl	129cc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
   12a3c:	9108      	str	r1, [sp, #32]
   12a3e:	9007      	str	r0, [sp, #28]
   12a40:	9306      	str	r3, [sp, #24]
   12a42:	9205      	str	r2, [sp, #20]
   12a44:	e7ff      	b.n	12a46 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
   12a46:	9807      	ldr	r0, [sp, #28]
   12a48:	9908      	ldr	r1, [sp, #32]
   12a4a:	9a05      	ldr	r2, [sp, #20]
   12a4c:	9b06      	ldr	r3, [sp, #24]
   12a4e:	f000 f863 	bl	12b18 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
   12a52:	9104      	str	r1, [sp, #16]
   12a54:	9003      	str	r0, [sp, #12]
   12a56:	9302      	str	r3, [sp, #8]
   12a58:	9201      	str	r2, [sp, #4]
   12a5a:	e7ff      	b.n	12a5c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
   12a5c:	9803      	ldr	r0, [sp, #12]
   12a5e:	9904      	ldr	r1, [sp, #16]
   12a60:	9a01      	ldr	r2, [sp, #4]
   12a62:	9b02      	ldr	r3, [sp, #8]
   12a64:	b00a      	add	sp, #40	; 0x28
   12a66:	bd80      	pop	{r7, pc}

00012a68 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
   12a68:	b5b0      	push	{r4, r5, r7, lr}
   12a6a:	b090      	sub	sp, #64	; 0x40
   12a6c:	469c      	mov	ip, r3
   12a6e:	4696      	mov	lr, r2
   12a70:	460c      	mov	r4, r1
   12a72:	4605      	mov	r5, r0
   12a74:	9103      	str	r1, [sp, #12]
   12a76:	9002      	str	r0, [sp, #8]
   12a78:	9305      	str	r3, [sp, #20]
   12a7a:	9204      	str	r2, [sp, #16]
   12a7c:	2000      	movs	r0, #0
   12a7e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a82:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a86:	2001      	movs	r0, #1
   12a88:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a8c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a90:	9802      	ldr	r0, [sp, #8]
   12a92:	2800      	cmp	r0, #0
   12a94:	d001      	beq.n	12a9a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
   12a96:	e7ff      	b.n	12a98 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
   12a98:	e004      	b.n	12aa4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
   12a9a:	2000      	movs	r0, #0
   12a9c:	9007      	str	r0, [sp, #28]
   12a9e:	9006      	str	r0, [sp, #24]
   12aa0:	e023      	b.n	12aea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   12aa2:	defe      	udf	#254	; 0xfe
   12aa4:	2000      	movs	r0, #0
   12aa6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12aaa:	9904      	ldr	r1, [sp, #16]
   12aac:	9a05      	ldr	r2, [sp, #20]
   12aae:	920f      	str	r2, [sp, #60]	; 0x3c
   12ab0:	910e      	str	r1, [sp, #56]	; 0x38
   12ab2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12ab6:	920b      	str	r2, [sp, #44]	; 0x2c
   12ab8:	910a      	str	r1, [sp, #40]	; 0x28
   12aba:	980a      	ldr	r0, [sp, #40]	; 0x28
   12abc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12abe:	f000 f883 	bl	12bc8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
   12ac2:	9101      	str	r1, [sp, #4]
   12ac4:	9000      	str	r0, [sp, #0]
   12ac6:	e7ff      	b.n	12ac8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
   12ac8:	9800      	ldr	r0, [sp, #0]
   12aca:	9008      	str	r0, [sp, #32]
   12acc:	9901      	ldr	r1, [sp, #4]
   12ace:	9109      	str	r1, [sp, #36]	; 0x24
   12ad0:	2200      	movs	r2, #0
   12ad2:	9207      	str	r2, [sp, #28]
   12ad4:	2201      	movs	r2, #1
   12ad6:	9206      	str	r2, [sp, #24]
   12ad8:	e007      	b.n	12aea <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   12ada:	9802      	ldr	r0, [sp, #8]
   12adc:	2801      	cmp	r0, #1
   12ade:	d010      	beq.n	12b02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
   12ae0:	e019      	b.n	12b16 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
   12ae2:	2000      	movs	r0, #0
   12ae4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12ae8:	e7f7      	b.n	12ada <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12aea:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12aee:	07c0      	lsls	r0, r0, #31
   12af0:	2800      	cmp	r0, #0
   12af2:	d1f6      	bne.n	12ae2 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
   12af4:	e7f1      	b.n	12ada <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12af6:	9806      	ldr	r0, [sp, #24]
   12af8:	9907      	ldr	r1, [sp, #28]
   12afa:	9a08      	ldr	r2, [sp, #32]
   12afc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12afe:	b010      	add	sp, #64	; 0x40
   12b00:	bdb0      	pop	{r4, r5, r7, pc}
   12b02:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12b06:	07c0      	lsls	r0, r0, #31
   12b08:	2800      	cmp	r0, #0
   12b0a:	d0f4      	beq.n	12af6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12b0c:	e7ff      	b.n	12b0e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
   12b0e:	2000      	movs	r0, #0
   12b10:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12b14:	e7ef      	b.n	12af6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12b16:	e7ee      	b.n	12af6 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

00012b18 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
   12b18:	b5b0      	push	{r4, r5, r7, lr}
   12b1a:	b090      	sub	sp, #64	; 0x40
   12b1c:	469c      	mov	ip, r3
   12b1e:	4696      	mov	lr, r2
   12b20:	460c      	mov	r4, r1
   12b22:	4605      	mov	r5, r0
   12b24:	9103      	str	r1, [sp, #12]
   12b26:	9002      	str	r0, [sp, #8]
   12b28:	9305      	str	r3, [sp, #20]
   12b2a:	9204      	str	r2, [sp, #16]
   12b2c:	2000      	movs	r0, #0
   12b2e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12b32:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12b36:	2001      	movs	r0, #1
   12b38:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12b3c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12b40:	9802      	ldr	r0, [sp, #8]
   12b42:	2800      	cmp	r0, #0
   12b44:	d001      	beq.n	12b4a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
   12b46:	e7ff      	b.n	12b48 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
   12b48:	e004      	b.n	12b54 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
   12b4a:	2000      	movs	r0, #0
   12b4c:	9007      	str	r0, [sp, #28]
   12b4e:	9006      	str	r0, [sp, #24]
   12b50:	e023      	b.n	12b9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   12b52:	defe      	udf	#254	; 0xfe
   12b54:	2000      	movs	r0, #0
   12b56:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12b5a:	9904      	ldr	r1, [sp, #16]
   12b5c:	9a05      	ldr	r2, [sp, #20]
   12b5e:	920f      	str	r2, [sp, #60]	; 0x3c
   12b60:	910e      	str	r1, [sp, #56]	; 0x38
   12b62:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12b66:	920b      	str	r2, [sp, #44]	; 0x2c
   12b68:	910a      	str	r1, [sp, #40]	; 0x28
   12b6a:	980a      	ldr	r0, [sp, #40]	; 0x28
   12b6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12b6e:	f003 fa28 	bl	15fc2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
   12b72:	9101      	str	r1, [sp, #4]
   12b74:	9000      	str	r0, [sp, #0]
   12b76:	e7ff      	b.n	12b78 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
   12b78:	9800      	ldr	r0, [sp, #0]
   12b7a:	9008      	str	r0, [sp, #32]
   12b7c:	9901      	ldr	r1, [sp, #4]
   12b7e:	9109      	str	r1, [sp, #36]	; 0x24
   12b80:	2200      	movs	r2, #0
   12b82:	9207      	str	r2, [sp, #28]
   12b84:	2201      	movs	r2, #1
   12b86:	9206      	str	r2, [sp, #24]
   12b88:	e007      	b.n	12b9a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   12b8a:	9802      	ldr	r0, [sp, #8]
   12b8c:	2801      	cmp	r0, #1
   12b8e:	d010      	beq.n	12bb2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
   12b90:	e019      	b.n	12bc6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
   12b92:	2000      	movs	r0, #0
   12b94:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12b98:	e7f7      	b.n	12b8a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12b9a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12b9e:	07c0      	lsls	r0, r0, #31
   12ba0:	2800      	cmp	r0, #0
   12ba2:	d1f6      	bne.n	12b92 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
   12ba4:	e7f1      	b.n	12b8a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12ba6:	9806      	ldr	r0, [sp, #24]
   12ba8:	9907      	ldr	r1, [sp, #28]
   12baa:	9a08      	ldr	r2, [sp, #32]
   12bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12bae:	b010      	add	sp, #64	; 0x40
   12bb0:	bdb0      	pop	{r4, r5, r7, pc}
   12bb2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12bb6:	07c0      	lsls	r0, r0, #31
   12bb8:	2800      	cmp	r0, #0
   12bba:	d0f4      	beq.n	12ba6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12bbc:	e7ff      	b.n	12bbe <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
   12bbe:	2000      	movs	r0, #0
   12bc0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12bc4:	e7ef      	b.n	12ba6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12bc6:	e7ee      	b.n	12ba6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

00012bc8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
   12bc8:	b084      	sub	sp, #16
   12bca:	460a      	mov	r2, r1
   12bcc:	4603      	mov	r3, r0
   12bce:	9103      	str	r1, [sp, #12]
   12bd0:	9002      	str	r0, [sp, #8]
   12bd2:	b004      	add	sp, #16
   12bd4:	4770      	bx	lr

00012bd6 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>:
   12bd6:	b081      	sub	sp, #4
   12bd8:	4601      	mov	r1, r0
   12bda:	f88d 0003 	strb.w	r0, [sp, #3]
   12bde:	b2c0      	uxtb	r0, r0
   12be0:	b001      	add	sp, #4
   12be2:	4770      	bx	lr

00012be4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>:
   12be4:	b08a      	sub	sp, #40	; 0x28
   12be6:	9107      	str	r1, [sp, #28]
   12be8:	9208      	str	r2, [sp, #32]
   12bea:	f8d0 c000 	ldr.w	ip, [r0]
   12bee:	f1bc 0f00 	cmp.w	ip, #0
   12bf2:	9305      	str	r3, [sp, #20]
   12bf4:	9204      	str	r2, [sp, #16]
   12bf6:	9103      	str	r1, [sp, #12]
   12bf8:	9002      	str	r0, [sp, #8]
   12bfa:	d011      	beq.n	12c20 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x3c>
   12bfc:	e7ff      	b.n	12bfe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x1a>
   12bfe:	9802      	ldr	r0, [sp, #8]
   12c00:	6841      	ldr	r1, [r0, #4]
   12c02:	9106      	str	r1, [sp, #24]
   12c04:	4669      	mov	r1, sp
   12c06:	9a05      	ldr	r2, [sp, #20]
   12c08:	600a      	str	r2, [r1, #0]
   12c0a:	f64f 03a4 	movw	r3, #63652	; 0xf8a4
   12c0e:	f2c0 0301 	movt	r3, #1
   12c12:	aa06      	add	r2, sp, #24
   12c14:	9803      	ldr	r0, [sp, #12]
   12c16:	9904      	ldr	r1, [sp, #16]
   12c18:	f003 ff86 	bl	16b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   12c1c:	defe      	udf	#254	; 0xfe
   12c1e:	defe      	udf	#254	; 0xfe
   12c20:	9802      	ldr	r0, [sp, #8]
   12c22:	6841      	ldr	r1, [r0, #4]
   12c24:	9109      	str	r1, [sp, #36]	; 0x24
   12c26:	6802      	ldr	r2, [r0, #0]
   12c28:	2a00      	cmp	r2, #0
   12c2a:	9101      	str	r1, [sp, #4]
   12c2c:	d103      	bne.n	12c36 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x52>
   12c2e:	e7ff      	b.n	12c30 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>
   12c30:	9801      	ldr	r0, [sp, #4]
   12c32:	b00a      	add	sp, #40	; 0x28
   12c34:	4770      	bx	lr
   12c36:	e7fb      	b.n	12c30 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>

00012c38 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>:
    fn le(&self, other: &LevelFilter) -> bool {
   12c38:	b082      	sub	sp, #8
   12c3a:	9000      	str	r0, [sp, #0]
   12c3c:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   12c3e:	6800      	ldr	r0, [r0, #0]
   12c40:	6809      	ldr	r1, [r1, #0]
   12c42:	2200      	movs	r2, #0
   12c44:	4288      	cmp	r0, r1
   12c46:	bf98      	it	ls
   12c48:	2201      	movls	r2, #1
    }
   12c4a:	4610      	mov	r0, r2
   12c4c:	b002      	add	sp, #8
   12c4e:	4770      	bx	lr

00012c50 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>:
   12c50:	b580      	push	{r7, lr}
   12c52:	b086      	sub	sp, #24
   12c54:	460a      	mov	r2, r1
   12c56:	9004      	str	r0, [sp, #16]
   12c58:	f88d 1017 	strb.w	r1, [sp, #23]
   12c5c:	9203      	str	r2, [sp, #12]
   12c5e:	f7fb ff6c 	bl	eb3a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12c62:	9002      	str	r0, [sp, #8]
   12c64:	e7ff      	b.n	12c66 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x16>
   12c66:	9802      	ldr	r0, [sp, #8]
   12c68:	9903      	ldr	r1, [sp, #12]
   12c6a:	f7fb ff7f 	bl	eb6c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12c6e:	9001      	str	r0, [sp, #4]
   12c70:	e7ff      	b.n	12c72 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x22>
   12c72:	9801      	ldr	r0, [sp, #4]
   12c74:	b006      	add	sp, #24
   12c76:	bd80      	pop	{r7, pc}

00012c78 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>:
   12c78:	b580      	push	{r7, lr}
   12c7a:	b086      	sub	sp, #24
   12c7c:	460a      	mov	r2, r1
   12c7e:	4603      	mov	r3, r0
   12c80:	f88d 0014 	strb.w	r0, [sp, #20]
   12c84:	f88d 1015 	strb.w	r1, [sp, #21]
   12c88:	9203      	str	r2, [sp, #12]
   12c8a:	9302      	str	r3, [sp, #8]
   12c8c:	f000 f865 	bl	12d5a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
   12c90:	9001      	str	r0, [sp, #4]
   12c92:	9100      	str	r1, [sp, #0]
   12c94:	e7ff      	b.n	12c96 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x1e>
   12c96:	9801      	ldr	r0, [sp, #4]
   12c98:	f88d 0016 	strb.w	r0, [sp, #22]
   12c9c:	9900      	ldr	r1, [sp, #0]
   12c9e:	f001 0201 	and.w	r2, r1, #1
   12ca2:	f88d 2017 	strb.w	r2, [sp, #23]
   12ca6:	2a00      	cmp	r2, #0
   12ca8:	d107      	bne.n	12cba <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x42>
   12caa:	e7ff      	b.n	12cac <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x34>
   12cac:	9801      	ldr	r0, [sp, #4]
   12cae:	f88d 0011 	strb.w	r0, [sp, #17]
   12cb2:	2101      	movs	r1, #1
   12cb4:	f88d 1010 	strb.w	r1, [sp, #16]
   12cb8:	e003      	b.n	12cc2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12cba:	2000      	movs	r0, #0
   12cbc:	f88d 0010 	strb.w	r0, [sp, #16]
   12cc0:	e7ff      	b.n	12cc2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12cc2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12cc6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12cca:	b006      	add	sp, #24
   12ccc:	bd80      	pop	{r7, pc}

00012cce <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>:
   12cce:	b082      	sub	sp, #8
   12cd0:	460a      	mov	r2, r1
   12cd2:	4603      	mov	r3, r0
   12cd4:	f88d 0005 	strb.w	r0, [sp, #5]
   12cd8:	f88d 1006 	strb.w	r1, [sp, #6]
   12cdc:	4408      	add	r0, r1
   12cde:	f88d 0007 	strb.w	r0, [sp, #7]
   12ce2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12ce6:	9000      	str	r0, [sp, #0]
   12ce8:	e7ff      	b.n	12cea <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE+0x1c>
   12cea:	9800      	ldr	r0, [sp, #0]
   12cec:	b002      	add	sp, #8
   12cee:	4770      	bx	lr

00012cf0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>:
   12cf0:	b084      	sub	sp, #16
   12cf2:	4602      	mov	r2, r0
   12cf4:	f88d 0007 	strb.w	r0, [sp, #7]
   12cf8:	9102      	str	r1, [sp, #8]
   12cfa:	f001 0107 	and.w	r1, r1, #7
   12cfe:	4088      	lsls	r0, r1
   12d00:	f88d 000f 	strb.w	r0, [sp, #15]
   12d04:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12d08:	9000      	str	r0, [sp, #0]
   12d0a:	e7ff      	b.n	12d0c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E+0x1c>
   12d0c:	9800      	ldr	r0, [sp, #0]
   12d0e:	b004      	add	sp, #16
   12d10:	4770      	bx	lr

00012d12 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>:
   12d12:	b084      	sub	sp, #16
   12d14:	b2c2      	uxtb	r2, r0
   12d16:	4603      	mov	r3, r0
   12d18:	f88d 0007 	strb.w	r0, [sp, #7]
   12d1c:	9102      	str	r1, [sp, #8]
   12d1e:	f001 0007 	and.w	r0, r1, #7
   12d22:	fa22 f000 	lsr.w	r0, r2, r0
   12d26:	f88d 000f 	strb.w	r0, [sp, #15]
   12d2a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12d2e:	9000      	str	r0, [sp, #0]
   12d30:	e7ff      	b.n	12d32 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E+0x20>
   12d32:	9800      	ldr	r0, [sp, #0]
   12d34:	b004      	add	sp, #16
   12d36:	4770      	bx	lr

00012d38 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>:
   12d38:	b082      	sub	sp, #8
   12d3a:	460a      	mov	r2, r1
   12d3c:	4603      	mov	r3, r0
   12d3e:	f88d 0005 	strb.w	r0, [sp, #5]
   12d42:	f88d 1006 	strb.w	r1, [sp, #6]
   12d46:	1a40      	subs	r0, r0, r1
   12d48:	f88d 0007 	strb.w	r0, [sp, #7]
   12d4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12d50:	9000      	str	r0, [sp, #0]
   12d52:	e7ff      	b.n	12d54 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE+0x1c>
   12d54:	9800      	ldr	r0, [sp, #0]
   12d56:	b002      	add	sp, #8
   12d58:	4770      	bx	lr

00012d5a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>:
   12d5a:	b084      	sub	sp, #16
   12d5c:	b2c2      	uxtb	r2, r0
   12d5e:	460b      	mov	r3, r1
   12d60:	4684      	mov	ip, r0
   12d62:	f88d 000a 	strb.w	r0, [sp, #10]
   12d66:	f88d 100b 	strb.w	r1, [sp, #11]
   12d6a:	fa52 f081 	uxtab	r0, r2, r1
   12d6e:	b2c1      	uxtb	r1, r0
   12d70:	1a09      	subs	r1, r1, r0
   12d72:	bf18      	it	ne
   12d74:	2101      	movne	r1, #1
   12d76:	f88d 000c 	strb.w	r0, [sp, #12]
   12d7a:	f88d 100d 	strb.w	r1, [sp, #13]
   12d7e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12d82:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12d86:	9001      	str	r0, [sp, #4]
   12d88:	9100      	str	r1, [sp, #0]
   12d8a:	e7ff      	b.n	12d8c <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE+0x32>
   12d8c:	9801      	ldr	r0, [sp, #4]
   12d8e:	f88d 000e 	strb.w	r0, [sp, #14]
   12d92:	9900      	ldr	r1, [sp, #0]
   12d94:	f001 0201 	and.w	r2, r1, #1
   12d98:	f88d 200f 	strb.w	r2, [sp, #15]
   12d9c:	f88d 0008 	strb.w	r0, [sp, #8]
   12da0:	f88d 2009 	strb.w	r2, [sp, #9]
   12da4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12da8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12dac:	b004      	add	sp, #16
   12dae:	4770      	bx	lr

00012db0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>:
   12db0:	b580      	push	{r7, lr}
   12db2:	b084      	sub	sp, #16
   12db4:	b2ca      	uxtb	r2, r1
   12db6:	b2c3      	uxtb	r3, r0
   12db8:	468c      	mov	ip, r1
   12dba:	4686      	mov	lr, r0
   12dbc:	f88d 000a 	strb.w	r0, [sp, #10]
   12dc0:	f88d 100b 	strb.w	r1, [sp, #11]
   12dc4:	1a98      	subs	r0, r3, r2
   12dc6:	b2c1      	uxtb	r1, r0
   12dc8:	1a09      	subs	r1, r1, r0
   12dca:	bf18      	it	ne
   12dcc:	2101      	movne	r1, #1
   12dce:	f88d 000c 	strb.w	r0, [sp, #12]
   12dd2:	f88d 100d 	strb.w	r1, [sp, #13]
   12dd6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12dda:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12dde:	9001      	str	r0, [sp, #4]
   12de0:	9100      	str	r1, [sp, #0]
   12de2:	e7ff      	b.n	12de4 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E+0x34>
   12de4:	9801      	ldr	r0, [sp, #4]
   12de6:	f88d 000e 	strb.w	r0, [sp, #14]
   12dea:	9900      	ldr	r1, [sp, #0]
   12dec:	f001 0201 	and.w	r2, r1, #1
   12df0:	f88d 200f 	strb.w	r2, [sp, #15]
   12df4:	f88d 0008 	strb.w	r0, [sp, #8]
   12df8:	f88d 2009 	strb.w	r2, [sp, #9]
   12dfc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12e00:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12e04:	b004      	add	sp, #16
   12e06:	bd80      	pop	{r7, pc}

00012e08 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>:
   12e08:	b083      	sub	sp, #12
   12e0a:	460a      	mov	r2, r1
   12e0c:	4603      	mov	r3, r0
   12e0e:	f8ad 0006 	strh.w	r0, [sp, #6]
   12e12:	f8ad 1008 	strh.w	r1, [sp, #8]
   12e16:	4408      	add	r0, r1
   12e18:	f8ad 000a 	strh.w	r0, [sp, #10]
   12e1c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12e20:	9000      	str	r0, [sp, #0]
   12e22:	e7ff      	b.n	12e24 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E+0x1c>
   12e24:	9800      	ldr	r0, [sp, #0]
   12e26:	b003      	add	sp, #12
   12e28:	4770      	bx	lr

00012e2a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>:
   12e2a:	b083      	sub	sp, #12
   12e2c:	460a      	mov	r2, r1
   12e2e:	4603      	mov	r3, r0
   12e30:	f8ad 0006 	strh.w	r0, [sp, #6]
   12e34:	f8ad 1008 	strh.w	r1, [sp, #8]
   12e38:	1a40      	subs	r0, r0, r1
   12e3a:	f8ad 000a 	strh.w	r0, [sp, #10]
   12e3e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12e42:	9000      	str	r0, [sp, #0]
   12e44:	e7ff      	b.n	12e46 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E+0x1c>
   12e46:	9800      	ldr	r0, [sp, #0]
   12e48:	b003      	add	sp, #12
   12e4a:	4770      	bx	lr

00012e4c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>:
   12e4c:	b5b0      	push	{r4, r5, r7, lr}
   12e4e:	b088      	sub	sp, #32
   12e50:	469c      	mov	ip, r3
   12e52:	4696      	mov	lr, r2
   12e54:	460c      	mov	r4, r1
   12e56:	4605      	mov	r5, r0
   12e58:	9103      	str	r1, [sp, #12]
   12e5a:	9002      	str	r0, [sp, #8]
   12e5c:	9305      	str	r3, [sp, #20]
   12e5e:	9204      	str	r2, [sp, #16]
   12e60:	1a80      	subs	r0, r0, r2
   12e62:	eb61 0103 	sbc.w	r1, r1, r3
   12e66:	9107      	str	r1, [sp, #28]
   12e68:	9006      	str	r0, [sp, #24]
   12e6a:	9806      	ldr	r0, [sp, #24]
   12e6c:	9907      	ldr	r1, [sp, #28]
   12e6e:	9001      	str	r0, [sp, #4]
   12e70:	9100      	str	r1, [sp, #0]
   12e72:	e7ff      	b.n	12e74 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E+0x28>
   12e74:	9801      	ldr	r0, [sp, #4]
   12e76:	9900      	ldr	r1, [sp, #0]
   12e78:	b008      	add	sp, #32
   12e7a:	bdb0      	pop	{r4, r5, r7, pc}

00012e7c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>:
   12e7c:	b580      	push	{r7, lr}
   12e7e:	b086      	sub	sp, #24
   12e80:	9005      	str	r0, [sp, #20]
   12e82:	2100      	movs	r1, #0
   12e84:	f88d 1013 	strb.w	r1, [sp, #19]
   12e88:	1c41      	adds	r1, r0, #1
   12e8a:	9002      	str	r0, [sp, #8]
   12e8c:	f003 f8a0 	bl	15fd0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>
   12e90:	9001      	str	r0, [sp, #4]
   12e92:	e7ff      	b.n	12e94 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x18>
   12e94:	9801      	ldr	r0, [sp, #4]
   12e96:	07c1      	lsls	r1, r0, #31
   12e98:	2900      	cmp	r1, #0
   12e9a:	d104      	bne.n	12ea6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x2a>
   12e9c:	e7ff      	b.n	12e9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x22>
   12e9e:	2000      	movs	r0, #0
   12ea0:	f88d 000c 	strb.w	r0, [sp, #12]
   12ea4:	e02c      	b.n	12f00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12ea6:	2001      	movs	r0, #1
   12ea8:	f88d 0013 	strb.w	r0, [sp, #19]
   12eac:	9902      	ldr	r1, [sp, #8]
   12eae:	9000      	str	r0, [sp, #0]
   12eb0:	4608      	mov	r0, r1
   12eb2:	9900      	ldr	r1, [sp, #0]
   12eb4:	f000 f86e 	bl	12f94 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>
   12eb8:	f88d 1011 	strb.w	r1, [sp, #17]
   12ebc:	f88d 0010 	strb.w	r0, [sp, #16]
   12ec0:	e7ff      	b.n	12ec2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x46>
   12ec2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ec6:	07c0      	lsls	r0, r0, #31
   12ec8:	2800      	cmp	r0, #0
   12eca:	d104      	bne.n	12ed6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x5a>
   12ecc:	e7ff      	b.n	12ece <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x52>
   12ece:	2000      	movs	r0, #0
   12ed0:	f88d 000c 	strb.w	r0, [sp, #12]
   12ed4:	e029      	b.n	12f2a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12ed6:	2000      	movs	r0, #0
   12ed8:	f88d 0013 	strb.w	r0, [sp, #19]
   12edc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12ee0:	f88d 0012 	strb.w	r0, [sp, #18]
   12ee4:	f10d 0012 	add.w	r0, sp, #18
   12ee8:	9902      	ldr	r1, [sp, #8]
   12eea:	f000 f886 	bl	12ffa <_ZN4core3mem4swap17h9f9b2c00c891c39bE>
   12eee:	e7ff      	b.n	12ef0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x74>
   12ef0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12ef4:	f88d 000d 	strb.w	r0, [sp, #13]
   12ef8:	2001      	movs	r0, #1
   12efa:	f88d 000c 	strb.w	r0, [sp, #12]
   12efe:	e014      	b.n	12f2a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12f00:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12f04:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12f08:	b006      	add	sp, #24
   12f0a:	bd80      	pop	{r7, pc}
   12f0c:	2000      	movs	r0, #0
   12f0e:	f88d 0013 	strb.w	r0, [sp, #19]
   12f12:	e7f5      	b.n	12f00 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12f14:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12f18:	07c0      	lsls	r0, r0, #31
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d0f6      	beq.n	12f0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12f1e:	e7ff      	b.n	12f20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xa4>
   12f20:	2000      	movs	r0, #0
   12f22:	f88d 0013 	strb.w	r0, [sp, #19]
   12f26:	e7f1      	b.n	12f0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12f28:	e7f0      	b.n	12f0c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12f2a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12f2e:	07c0      	lsls	r0, r0, #31
   12f30:	2800      	cmp	r0, #0
   12f32:	d1ef      	bne.n	12f14 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x98>
   12f34:	e7f8      	b.n	12f28 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xac>

00012f36 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>:
   12f36:	b580      	push	{r7, lr}
   12f38:	b084      	sub	sp, #16
   12f3a:	9101      	str	r1, [sp, #4]
   12f3c:	9202      	str	r2, [sp, #8]
   12f3e:	9303      	str	r3, [sp, #12]
   12f40:	f7fa ff2a 	bl	dd98 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>
   12f44:	e7ff      	b.n	12f46 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E+0x10>
   12f46:	b004      	add	sp, #16
   12f48:	bd80      	pop	{r7, pc}

00012f4a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>:
   12f4a:	b580      	push	{r7, lr}
   12f4c:	b084      	sub	sp, #16
   12f4e:	9101      	str	r1, [sp, #4]
   12f50:	9202      	str	r2, [sp, #8]
   12f52:	9303      	str	r3, [sp, #12]
   12f54:	f7fa ff17 	bl	dd86 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>
   12f58:	e7ff      	b.n	12f5a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE+0x10>
   12f5a:	b004      	add	sp, #16
   12f5c:	bd80      	pop	{r7, pc}

00012f5e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>:
   12f5e:	b081      	sub	sp, #4
   12f60:	460a      	mov	r2, r1
   12f62:	4603      	mov	r3, r0
   12f64:	f88d 0000 	strb.w	r0, [sp]
   12f68:	f88d 1001 	strb.w	r1, [sp, #1]
   12f6c:	b001      	add	sp, #4
   12f6e:	4770      	bx	lr

00012f70 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>:
   12f70:	b084      	sub	sp, #16
   12f72:	9000      	str	r0, [sp, #0]
   12f74:	9101      	str	r1, [sp, #4]
   12f76:	9102      	str	r1, [sp, #8]
   12f78:	9003      	str	r0, [sp, #12]
   12f7a:	6802      	ldr	r2, [r0, #0]
   12f7c:	6840      	ldr	r0, [r0, #4]
   12f7e:	680b      	ldr	r3, [r1, #0]
   12f80:	6849      	ldr	r1, [r1, #4]
   12f82:	4048      	eors	r0, r1
   12f84:	ea82 0103 	eor.w	r1, r2, r3
   12f88:	4308      	orrs	r0, r1
   12f8a:	fab0 f080 	clz	r0, r0
   12f8e:	0940      	lsrs	r0, r0, #5
   12f90:	b004      	add	sp, #16
   12f92:	4770      	bx	lr

00012f94 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>:
   12f94:	b580      	push	{r7, lr}
   12f96:	b088      	sub	sp, #32
   12f98:	9005      	str	r0, [sp, #20]
   12f9a:	9106      	str	r1, [sp, #24]
   12f9c:	9002      	str	r0, [sp, #8]
   12f9e:	4608      	mov	r0, r1
   12fa0:	f000 f834 	bl	1300c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>
   12fa4:	f88d 1011 	strb.w	r1, [sp, #17]
   12fa8:	f88d 0010 	strb.w	r0, [sp, #16]
   12fac:	e7ff      	b.n	12fae <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x1a>
   12fae:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12fb2:	07c1      	lsls	r1, r0, #31
   12fb4:	2900      	cmp	r1, #0
   12fb6:	d005      	beq.n	12fc4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x30>
   12fb8:	e7ff      	b.n	12fba <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x26>
   12fba:	2000      	movs	r0, #0
   12fbc:	f88d 000c 	strb.w	r0, [sp, #12]
   12fc0:	e011      	b.n	12fe6 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12fc2:	defe      	udf	#254	; 0xfe
   12fc4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12fc8:	f88d 001f 	strb.w	r0, [sp, #31]
   12fcc:	9902      	ldr	r1, [sp, #8]
   12fce:	780a      	ldrb	r2, [r1, #0]
   12fd0:	9001      	str	r0, [sp, #4]
   12fd2:	4610      	mov	r0, r2
   12fd4:	9901      	ldr	r1, [sp, #4]
   12fd6:	f7ff fe4f 	bl	12c78 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>
   12fda:	f88d 100d 	strb.w	r1, [sp, #13]
   12fde:	f88d 000c 	strb.w	r0, [sp, #12]
   12fe2:	e7ff      	b.n	12fe4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x50>
   12fe4:	e7ff      	b.n	12fe6 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12fe6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12fea:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12fee:	b008      	add	sp, #32
   12ff0:	bd80      	pop	{r7, pc}

00012ff2 <_ZN4core3ptr13drop_in_place17h8a25dee97102e103E>:
   12ff2:	b081      	sub	sp, #4
   12ff4:	9000      	str	r0, [sp, #0]
   12ff6:	b001      	add	sp, #4
   12ff8:	4770      	bx	lr

00012ffa <_ZN4core3mem4swap17h9f9b2c00c891c39bE>:
   12ffa:	b580      	push	{r7, lr}
   12ffc:	b082      	sub	sp, #8
   12ffe:	9000      	str	r0, [sp, #0]
   13000:	9101      	str	r1, [sp, #4]
   13002:	f003 f80c 	bl	1601e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>
   13006:	e7ff      	b.n	13008 <_ZN4core3mem4swap17h9f9b2c00c891c39bE+0xe>
   13008:	b002      	add	sp, #8
   1300a:	bd80      	pop	{r7, pc}

0001300c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>:
   1300c:	b083      	sub	sp, #12
   1300e:	9002      	str	r0, [sp, #8]
   13010:	9000      	str	r0, [sp, #0]
   13012:	e7ff      	b.n	13014 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x8>
   13014:	9800      	ldr	r0, [sp, #0]
   13016:	28ff      	cmp	r0, #255	; 0xff
   13018:	d807      	bhi.n	1302a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x1e>
   1301a:	e7ff      	b.n	1301c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x10>
   1301c:	9800      	ldr	r0, [sp, #0]
   1301e:	f88d 0005 	strb.w	r0, [sp, #5]
   13022:	2100      	movs	r1, #0
   13024:	f88d 1004 	strb.w	r1, [sp, #4]
   13028:	e003      	b.n	13032 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   1302a:	2001      	movs	r0, #1
   1302c:	f88d 0004 	strb.w	r0, [sp, #4]
   13030:	e7ff      	b.n	13032 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   13032:	f89d 0004 	ldrb.w	r0, [sp, #4]
   13036:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1303a:	b003      	add	sp, #12
   1303c:	4770      	bx	lr

0001303e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   1303e:	b084      	sub	sp, #16
   13040:	9001      	str	r0, [sp, #4]
   13042:	9102      	str	r1, [sp, #8]
   13044:	4408      	add	r0, r1
   13046:	9003      	str	r0, [sp, #12]
   13048:	9803      	ldr	r0, [sp, #12]
   1304a:	9000      	str	r0, [sp, #0]
   1304c:	e7ff      	b.n	1304e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   1304e:	9800      	ldr	r0, [sp, #0]
   13050:	b004      	add	sp, #16
   13052:	4770      	bx	lr

00013054 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   13054:	b082      	sub	sp, #8
   13056:	9001      	str	r0, [sp, #4]
   13058:	9000      	str	r0, [sp, #0]
   1305a:	e7ff      	b.n	1305c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   1305c:	9800      	ldr	r0, [sp, #0]
   1305e:	fab0 f180 	clz	r1, r0
   13062:	0948      	lsrs	r0, r1, #5
   13064:	b002      	add	sp, #8
   13066:	4770      	bx	lr

00013068 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   13068:	b082      	sub	sp, #8
   1306a:	9001      	str	r0, [sp, #4]
   1306c:	9000      	str	r0, [sp, #0]
   1306e:	9800      	ldr	r0, [sp, #0]
   13070:	b002      	add	sp, #8
   13072:	4770      	bx	lr

00013074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   13074:	b081      	sub	sp, #4
   13076:	9000      	str	r0, [sp, #0]
   13078:	b001      	add	sp, #4
   1307a:	4770      	bx	lr

0001307c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1307c:	b580      	push	{r7, lr}
   1307e:	b084      	sub	sp, #16
   13080:	9002      	str	r0, [sp, #8]
   13082:	9103      	str	r1, [sp, #12]
   13084:	f000 f805 	bl	13092 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   13088:	9001      	str	r0, [sp, #4]
   1308a:	e7ff      	b.n	1308c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1308c:	9801      	ldr	r0, [sp, #4]
   1308e:	b004      	add	sp, #16
   13090:	bd80      	pop	{r7, pc}

00013092 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   13092:	b084      	sub	sp, #16
   13094:	9001      	str	r0, [sp, #4]
   13096:	9102      	str	r1, [sp, #8]
   13098:	4408      	add	r0, r1
   1309a:	9003      	str	r0, [sp, #12]
   1309c:	9803      	ldr	r0, [sp, #12]
   1309e:	9000      	str	r0, [sp, #0]
   130a0:	e7ff      	b.n	130a2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   130a2:	9800      	ldr	r0, [sp, #0]
   130a4:	b004      	add	sp, #16
   130a6:	4770      	bx	lr

000130a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   130a8:	b082      	sub	sp, #8
   130aa:	9001      	str	r0, [sp, #4]
   130ac:	9000      	str	r0, [sp, #0]
   130ae:	e7ff      	b.n	130b0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   130b0:	9800      	ldr	r0, [sp, #0]
   130b2:	fab0 f180 	clz	r1, r0
   130b6:	0948      	lsrs	r0, r1, #5
   130b8:	b002      	add	sp, #8
   130ba:	4770      	bx	lr

000130bc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   130bc:	b580      	push	{r7, lr}
   130be:	b090      	sub	sp, #64	; 0x40
   130c0:	900c      	str	r0, [sp, #48]	; 0x30
   130c2:	910d      	str	r1, [sp, #52]	; 0x34
   130c4:	9007      	str	r0, [sp, #28]
   130c6:	9106      	str	r1, [sp, #24]
   130c8:	f000 f935 	bl	13336 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   130cc:	4601      	mov	r1, r0
   130ce:	900e      	str	r0, [sp, #56]	; 0x38
   130d0:	9105      	str	r1, [sp, #20]
   130d2:	e7ff      	b.n	130d4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   130d4:	9805      	ldr	r0, [sp, #20]
   130d6:	f7ff ffe7 	bl	130a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   130da:	e7ff      	b.n	130dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   130dc:	e7ff      	b.n	130de <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   130de:	2001      	movs	r0, #1
   130e0:	900f      	str	r0, [sp, #60]	; 0x3c
   130e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   130e4:	9004      	str	r0, [sp, #16]
   130e6:	e7ff      	b.n	130e8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   130e8:	9804      	ldr	r0, [sp, #16]
   130ea:	2800      	cmp	r0, #0
   130ec:	d006      	beq.n	130fc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   130ee:	e7ff      	b.n	130f0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   130f0:	9807      	ldr	r0, [sp, #28]
   130f2:	9906      	ldr	r1, [sp, #24]
   130f4:	f000 f917 	bl	13326 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   130f8:	9003      	str	r0, [sp, #12]
   130fa:	e00e      	b.n	1311a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   130fc:	9807      	ldr	r0, [sp, #28]
   130fe:	9906      	ldr	r1, [sp, #24]
   13100:	f000 f911 	bl	13326 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   13104:	9002      	str	r0, [sp, #8]
   13106:	e7ff      	b.n	13108 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   13108:	9805      	ldr	r0, [sp, #20]
   1310a:	9902      	ldr	r1, [sp, #8]
   1310c:	f7ff ffb6 	bl	1307c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   13110:	9001      	str	r0, [sp, #4]
   13112:	e7ff      	b.n	13114 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   13114:	9801      	ldr	r0, [sp, #4]
   13116:	900a      	str	r0, [sp, #40]	; 0x28
   13118:	e006      	b.n	13128 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1311a:	9805      	ldr	r0, [sp, #20]
   1311c:	9903      	ldr	r1, [sp, #12]
   1311e:	f000 f8df 	bl	132e0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   13122:	900a      	str	r0, [sp, #40]	; 0x28
   13124:	e7ff      	b.n	13126 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   13126:	e7ff      	b.n	13128 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   13128:	9805      	ldr	r0, [sp, #20]
   1312a:	f7ff ff9d 	bl	13068 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1312e:	9000      	str	r0, [sp, #0]
   13130:	e7ff      	b.n	13132 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   13132:	980a      	ldr	r0, [sp, #40]	; 0x28
   13134:	9900      	ldr	r1, [sp, #0]
   13136:	9108      	str	r1, [sp, #32]
   13138:	9009      	str	r0, [sp, #36]	; 0x24
   1313a:	9808      	ldr	r0, [sp, #32]
   1313c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1313e:	b010      	add	sp, #64	; 0x40
   13140:	bd80      	pop	{r7, pc}

00013142 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   13142:	b081      	sub	sp, #4
   13144:	b001      	add	sp, #4
   13146:	4770      	bx	lr

00013148 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   13148:	b580      	push	{r7, lr}
   1314a:	b08e      	sub	sp, #56	; 0x38
   1314c:	9007      	str	r0, [sp, #28]
   1314e:	6801      	ldr	r1, [r0, #0]
   13150:	9005      	str	r0, [sp, #20]
   13152:	4608      	mov	r0, r1
   13154:	f7ff ff8e 	bl	13074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13158:	9004      	str	r0, [sp, #16]
   1315a:	e7ff      	b.n	1315c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1315c:	9804      	ldr	r0, [sp, #16]
   1315e:	f7ff ff79 	bl	13054 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   13162:	e7ff      	b.n	13164 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   13164:	e7ff      	b.n	13166 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   13166:	2001      	movs	r0, #1
   13168:	9008      	str	r0, [sp, #32]
   1316a:	9808      	ldr	r0, [sp, #32]
   1316c:	9003      	str	r0, [sp, #12]
   1316e:	e7ff      	b.n	13170 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   13170:	9803      	ldr	r0, [sp, #12]
   13172:	2800      	cmp	r0, #0
   13174:	d007      	beq.n	13186 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   13176:	e7ff      	b.n	13178 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   13178:	9805      	ldr	r0, [sp, #20]
   1317a:	6840      	ldr	r0, [r0, #4]
   1317c:	f7ff ff94 	bl	130a8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   13180:	e7ff      	b.n	13182 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   13182:	e7ff      	b.n	13184 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   13184:	e7ff      	b.n	13186 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   13186:	9805      	ldr	r0, [sp, #20]
   13188:	6800      	ldr	r0, [r0, #0]
   1318a:	f7ff ff73 	bl	13074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1318e:	9002      	str	r0, [sp, #8]
   13190:	e7ff      	b.n	13192 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   13192:	9805      	ldr	r0, [sp, #20]
   13194:	6841      	ldr	r1, [r0, #4]
   13196:	9a02      	ldr	r2, [sp, #8]
   13198:	428a      	cmp	r2, r1
   1319a:	d02e      	beq.n	131fa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1319c:	e7ff      	b.n	1319e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   1319e:	9805      	ldr	r0, [sp, #20]
   131a0:	900a      	str	r0, [sp, #40]	; 0x28
   131a2:	2101      	movs	r1, #1
   131a4:	910b      	str	r1, [sp, #44]	; 0x2c
   131a6:	910d      	str	r1, [sp, #52]	; 0x34
   131a8:	990d      	ldr	r1, [sp, #52]	; 0x34
   131aa:	2900      	cmp	r1, #0
   131ac:	d015      	beq.n	131da <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   131ae:	e7ff      	b.n	131b0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   131b0:	9805      	ldr	r0, [sp, #20]
   131b2:	6800      	ldr	r0, [r0, #0]
   131b4:	f7ff ff5e 	bl	13074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   131b8:	900c      	str	r0, [sp, #48]	; 0x30
   131ba:	9905      	ldr	r1, [sp, #20]
   131bc:	680a      	ldr	r2, [r1, #0]
   131be:	9001      	str	r0, [sp, #4]
   131c0:	4610      	mov	r0, r2
   131c2:	f7ff ff57 	bl	13074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   131c6:	2101      	movs	r1, #1
   131c8:	f7ff ff39 	bl	1303e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   131cc:	f7ff ff4c 	bl	13068 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   131d0:	9905      	ldr	r1, [sp, #20]
   131d2:	6008      	str	r0, [r1, #0]
   131d4:	9801      	ldr	r0, [sp, #4]
   131d6:	9009      	str	r0, [sp, #36]	; 0x24
   131d8:	e00c      	b.n	131f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   131da:	9805      	ldr	r0, [sp, #20]
   131dc:	6840      	ldr	r0, [r0, #4]
   131de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   131e2:	f7ff ff56 	bl	13092 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   131e6:	9905      	ldr	r1, [sp, #20]
   131e8:	6048      	str	r0, [r1, #4]
   131ea:	6808      	ldr	r0, [r1, #0]
   131ec:	f7ff ff42 	bl	13074 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   131f0:	9009      	str	r0, [sp, #36]	; 0x24
   131f2:	e7ff      	b.n	131f4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   131f4:	9809      	ldr	r0, [sp, #36]	; 0x24
   131f6:	9000      	str	r0, [sp, #0]
   131f8:	e002      	b.n	13200 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   131fa:	2000      	movs	r0, #0
   131fc:	9006      	str	r0, [sp, #24]
   131fe:	e002      	b.n	13206 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13200:	9800      	ldr	r0, [sp, #0]
   13202:	9006      	str	r0, [sp, #24]
   13204:	e7ff      	b.n	13206 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13206:	9806      	ldr	r0, [sp, #24]
   13208:	b00e      	add	sp, #56	; 0x38
   1320a:	bd80      	pop	{r7, pc}

0001320c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1320c:	b081      	sub	sp, #4
   1320e:	b001      	add	sp, #4
   13210:	4770      	bx	lr

00013212 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   13212:	b580      	push	{r7, lr}
   13214:	b084      	sub	sp, #16
   13216:	9002      	str	r0, [sp, #8]
   13218:	9103      	str	r1, [sp, #12]
   1321a:	6800      	ldr	r0, [r0, #0]
   1321c:	f000 f81c 	bl	13258 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   13220:	9001      	str	r0, [sp, #4]
   13222:	e7ff      	b.n	13224 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   13224:	9801      	ldr	r0, [sp, #4]
   13226:	f000 0001 	and.w	r0, r0, #1
   1322a:	b004      	add	sp, #16
   1322c:	bd80      	pop	{r7, pc}

0001322e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1322e:	b089      	sub	sp, #36	; 0x24
   13230:	9005      	str	r0, [sp, #20]
   13232:	9106      	str	r1, [sp, #24]
   13234:	9107      	str	r1, [sp, #28]
   13236:	9907      	ldr	r1, [sp, #28]
   13238:	9002      	str	r0, [sp, #8]
   1323a:	9101      	str	r1, [sp, #4]
   1323c:	e7ff      	b.n	1323e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   1323e:	9802      	ldr	r0, [sp, #8]
   13240:	9008      	str	r0, [sp, #32]
   13242:	9908      	ldr	r1, [sp, #32]
   13244:	9100      	str	r1, [sp, #0]
   13246:	e7ff      	b.n	13248 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   13248:	9800      	ldr	r0, [sp, #0]
   1324a:	9003      	str	r0, [sp, #12]
   1324c:	9901      	ldr	r1, [sp, #4]
   1324e:	9104      	str	r1, [sp, #16]
   13250:	9803      	ldr	r0, [sp, #12]
   13252:	9904      	ldr	r1, [sp, #16]
   13254:	b009      	add	sp, #36	; 0x24
   13256:	4770      	bx	lr

00013258 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   13258:	b580      	push	{r7, lr}
   1325a:	b088      	sub	sp, #32
   1325c:	9006      	str	r0, [sp, #24]
   1325e:	9107      	str	r1, [sp, #28]
   13260:	9004      	str	r0, [sp, #16]
   13262:	4608      	mov	r0, r1
   13264:	9103      	str	r1, [sp, #12]
   13266:	f004 fb2e 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1326a:	9002      	str	r0, [sp, #8]
   1326c:	e7ff      	b.n	1326e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   1326e:	9802      	ldr	r0, [sp, #8]
   13270:	07c1      	lsls	r1, r0, #31
   13272:	2900      	cmp	r1, #0
   13274:	d105      	bne.n	13282 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   13276:	e7ff      	b.n	13278 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   13278:	9803      	ldr	r0, [sp, #12]
   1327a:	f004 fb28 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1327e:	9001      	str	r0, [sp, #4]
   13280:	e007      	b.n	13292 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   13282:	9804      	ldr	r0, [sp, #16]
   13284:	9903      	ldr	r1, [sp, #12]
   13286:	f005 f948 	bl	1851a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1328a:	f88d 0017 	strb.w	r0, [sp, #23]
   1328e:	e7ff      	b.n	13290 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   13290:	e015      	b.n	132be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   13292:	9801      	ldr	r0, [sp, #4]
   13294:	07c1      	lsls	r1, r0, #31
   13296:	2900      	cmp	r1, #0
   13298:	d107      	bne.n	132aa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   1329a:	e7ff      	b.n	1329c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   1329c:	9804      	ldr	r0, [sp, #16]
   1329e:	9903      	ldr	r1, [sp, #12]
   132a0:	f005 fb30 	bl	18904 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   132a4:	f88d 0017 	strb.w	r0, [sp, #23]
   132a8:	e007      	b.n	132ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   132aa:	9804      	ldr	r0, [sp, #16]
   132ac:	9903      	ldr	r1, [sp, #12]
   132ae:	f005 f99f 	bl	185f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   132b2:	f88d 0017 	strb.w	r0, [sp, #23]
   132b6:	e7ff      	b.n	132b8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   132b8:	e000      	b.n	132bc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   132ba:	e7ff      	b.n	132bc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   132bc:	e7ff      	b.n	132be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   132be:	f89d 0017 	ldrb.w	r0, [sp, #23]
   132c2:	b008      	add	sp, #32
   132c4:	bd80      	pop	{r7, pc}

000132c6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   132c6:	b086      	sub	sp, #24
   132c8:	9004      	str	r0, [sp, #16]
   132ca:	9105      	str	r1, [sp, #20]
   132cc:	9002      	str	r0, [sp, #8]
   132ce:	9103      	str	r1, [sp, #12]
   132d0:	9802      	ldr	r0, [sp, #8]
   132d2:	9903      	ldr	r1, [sp, #12]
   132d4:	9000      	str	r0, [sp, #0]
   132d6:	9101      	str	r1, [sp, #4]
   132d8:	9800      	ldr	r0, [sp, #0]
   132da:	9901      	ldr	r1, [sp, #4]
   132dc:	b006      	add	sp, #24
   132de:	4770      	bx	lr

000132e0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   132e0:	b580      	push	{r7, lr}
   132e2:	b084      	sub	sp, #16
   132e4:	9002      	str	r0, [sp, #8]
   132e6:	9103      	str	r1, [sp, #12]
   132e8:	f000 f805 	bl	132f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   132ec:	9001      	str	r0, [sp, #4]
   132ee:	e7ff      	b.n	132f0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   132f0:	9801      	ldr	r0, [sp, #4]
   132f2:	b004      	add	sp, #16
   132f4:	bd80      	pop	{r7, pc}

000132f6 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   132f6:	b084      	sub	sp, #16
   132f8:	9001      	str	r0, [sp, #4]
   132fa:	9102      	str	r1, [sp, #8]
   132fc:	4408      	add	r0, r1
   132fe:	9003      	str	r0, [sp, #12]
   13300:	9803      	ldr	r0, [sp, #12]
   13302:	9000      	str	r0, [sp, #0]
   13304:	e7ff      	b.n	13306 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   13306:	9800      	ldr	r0, [sp, #0]
   13308:	b004      	add	sp, #16
   1330a:	4770      	bx	lr

0001330c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1330c:	b580      	push	{r7, lr}
   1330e:	b084      	sub	sp, #16
   13310:	9002      	str	r0, [sp, #8]
   13312:	9103      	str	r1, [sp, #12]
   13314:	f7ff ffd7 	bl	132c6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   13318:	9001      	str	r0, [sp, #4]
   1331a:	9100      	str	r1, [sp, #0]
   1331c:	e7ff      	b.n	1331e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1331e:	9801      	ldr	r0, [sp, #4]
   13320:	9900      	ldr	r1, [sp, #0]
   13322:	b004      	add	sp, #16
   13324:	bd80      	pop	{r7, pc}

00013326 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   13326:	b084      	sub	sp, #16
   13328:	9002      	str	r0, [sp, #8]
   1332a:	9103      	str	r1, [sp, #12]
   1332c:	9000      	str	r0, [sp, #0]
   1332e:	9101      	str	r1, [sp, #4]
   13330:	9801      	ldr	r0, [sp, #4]
   13332:	b004      	add	sp, #16
   13334:	4770      	bx	lr

00013336 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   13336:	b082      	sub	sp, #8
   13338:	9000      	str	r0, [sp, #0]
   1333a:	9101      	str	r1, [sp, #4]
   1333c:	b002      	add	sp, #8
   1333e:	4770      	bx	lr

00013340 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   13340:	b083      	sub	sp, #12
   13342:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   13344:	9002      	str	r0, [sp, #8]
   13346:	9802      	ldr	r0, [sp, #8]
   13348:	9000      	str	r0, [sp, #0]
   1334a:	e7ff      	b.n	1334c <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   1334c:	9800      	ldr	r0, [sp, #0]
   1334e:	b003      	add	sp, #12
   13350:	4770      	bx	lr

00013352 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   13352:	b081      	sub	sp, #4
   13354:	f06f 000c 	mvn.w	r0, #12
        }
   13358:	b001      	add	sp, #4
   1335a:	4770      	bx	lr

0001335c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   1335c:	b082      	sub	sp, #8
   1335e:	9000      	str	r0, [sp, #0]
   13360:	9101      	str	r1, [sp, #4]
   13362:	2000      	movs	r0, #0
        }
   13364:	b002      	add	sp, #8
   13366:	4770      	bx	lr

00013368 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   13368:	b082      	sub	sp, #8
   1336a:	9000      	str	r0, [sp, #0]
   1336c:	9101      	str	r1, [sp, #4]
   1336e:	7800      	ldrb	r0, [r0, #0]
   13370:	7809      	ldrb	r1, [r1, #0]
   13372:	1a40      	subs	r0, r0, r1
   13374:	fab0 f080 	clz	r0, r0
   13378:	0940      	lsrs	r0, r0, #5
   1337a:	b002      	add	sp, #8
   1337c:	4770      	bx	lr

0001337e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   1337e:	b580      	push	{r7, lr}
   13380:	b084      	sub	sp, #16
   13382:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   13384:	f002 ffc4 	bl	16310 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   13388:	9002      	str	r0, [sp, #8]
   1338a:	9101      	str	r1, [sp, #4]
   1338c:	e7ff      	b.n	1338e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   1338e:	9802      	ldr	r0, [sp, #8]
   13390:	9901      	ldr	r1, [sp, #4]
   13392:	b004      	add	sp, #16
   13394:	bd80      	pop	{r7, pc}

00013396 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   13396:	b580      	push	{r7, lr}
   13398:	b084      	sub	sp, #16
   1339a:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1339c:	f002 ffcd 	bl	1633a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   133a0:	9002      	str	r0, [sp, #8]
   133a2:	9101      	str	r1, [sp, #4]
   133a4:	e7ff      	b.n	133a6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   133a6:	9802      	ldr	r0, [sp, #8]
   133a8:	9901      	ldr	r1, [sp, #4]
   133aa:	b004      	add	sp, #16
   133ac:	bd80      	pop	{r7, pc}

000133ae <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   133ae:	b580      	push	{r7, lr}
   133b0:	b084      	sub	sp, #16
   133b2:	9001      	str	r0, [sp, #4]
   133b4:	9102      	str	r1, [sp, #8]
   133b6:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   133b8:	f002 ff0c 	bl	161d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   133bc:	9000      	str	r0, [sp, #0]
   133be:	e7ff      	b.n	133c0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   133c0:	9800      	ldr	r0, [sp, #0]
   133c2:	f000 0001 	and.w	r0, r0, #1
   133c6:	b004      	add	sp, #16
   133c8:	bd80      	pop	{r7, pc}

000133ca <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   133ca:	b580      	push	{r7, lr}
   133cc:	b086      	sub	sp, #24
   133ce:	460a      	mov	r2, r1
   133d0:	9004      	str	r0, [sp, #16]
   133d2:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   133d6:	9203      	str	r2, [sp, #12]
   133d8:	f002 ff5f 	bl	1629a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   133dc:	9002      	str	r0, [sp, #8]
   133de:	9101      	str	r1, [sp, #4]
   133e0:	e7ff      	b.n	133e2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   133e2:	9802      	ldr	r0, [sp, #8]
   133e4:	f000 0001 	and.w	r0, r0, #1
   133e8:	9901      	ldr	r1, [sp, #4]
   133ea:	b006      	add	sp, #24
   133ec:	bd80      	pop	{r7, pc}

000133ee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   133ee:	b580      	push	{r7, lr}
   133f0:	b082      	sub	sp, #8
   133f2:	9001      	str	r0, [sp, #4]
        self.0.clear()
   133f4:	f002 ff83 	bl	162fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   133f8:	e7ff      	b.n	133fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   133fa:	b002      	add	sp, #8
   133fc:	bd80      	pop	{r7, pc}

000133fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   133fe:	b580      	push	{r7, lr}
   13400:	b082      	sub	sp, #8
   13402:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13404:	f002 ff72 	bl	162ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   13408:	e7ff      	b.n	1340a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   1340a:	b002      	add	sp, #8
   1340c:	bd80      	pop	{r7, pc}

0001340e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   1340e:	b580      	push	{r7, lr}
   13410:	b088      	sub	sp, #32
   13412:	9006      	str	r0, [sp, #24]
   13414:	9107      	str	r1, [sp, #28]
   13416:	9004      	str	r0, [sp, #16]
   13418:	4608      	mov	r0, r1
   1341a:	9103      	str	r1, [sp, #12]
   1341c:	f004 fa53 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13420:	9002      	str	r0, [sp, #8]
   13422:	e7ff      	b.n	13424 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   13424:	9802      	ldr	r0, [sp, #8]
   13426:	07c1      	lsls	r1, r0, #31
   13428:	2900      	cmp	r1, #0
   1342a:	d105      	bne.n	13438 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1342c:	e7ff      	b.n	1342e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1342e:	9803      	ldr	r0, [sp, #12]
   13430:	f004 fa4d 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13434:	9001      	str	r0, [sp, #4]
   13436:	e007      	b.n	13448 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   13438:	9804      	ldr	r0, [sp, #16]
   1343a:	9903      	ldr	r1, [sp, #12]
   1343c:	f004 ff51 	bl	182e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   13440:	f88d 0017 	strb.w	r0, [sp, #23]
   13444:	e7ff      	b.n	13446 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   13446:	e015      	b.n	13474 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13448:	9801      	ldr	r0, [sp, #4]
   1344a:	07c1      	lsls	r1, r0, #31
   1344c:	2900      	cmp	r1, #0
   1344e:	d107      	bne.n	13460 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   13450:	e7ff      	b.n	13452 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   13452:	9804      	ldr	r0, [sp, #16]
   13454:	9903      	ldr	r1, [sp, #12]
   13456:	f005 f936 	bl	186c6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   1345a:	f88d 0017 	strb.w	r0, [sp, #23]
   1345e:	e007      	b.n	13470 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   13460:	9804      	ldr	r0, [sp, #16]
   13462:	9903      	ldr	r1, [sp, #12]
   13464:	f004 ff6c 	bl	18340 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   13468:	f88d 0017 	strb.w	r0, [sp, #23]
   1346c:	e7ff      	b.n	1346e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1346e:	e000      	b.n	13472 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13470:	e7ff      	b.n	13472 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13472:	e7ff      	b.n	13474 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13474:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13478:	b008      	add	sp, #32
   1347a:	bd80      	pop	{r7, pc}

0001347c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1347c:	b580      	push	{r7, lr}
   1347e:	b088      	sub	sp, #32
   13480:	9006      	str	r0, [sp, #24]
   13482:	9107      	str	r1, [sp, #28]
   13484:	9004      	str	r0, [sp, #16]
   13486:	4608      	mov	r0, r1
   13488:	9103      	str	r1, [sp, #12]
   1348a:	f004 fa1c 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1348e:	9002      	str	r0, [sp, #8]
   13490:	e7ff      	b.n	13492 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   13492:	9802      	ldr	r0, [sp, #8]
   13494:	07c1      	lsls	r1, r0, #31
   13496:	2900      	cmp	r1, #0
   13498:	d105      	bne.n	134a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   1349a:	e7ff      	b.n	1349c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   1349c:	9803      	ldr	r0, [sp, #12]
   1349e:	f004 fa16 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   134a2:	9001      	str	r0, [sp, #4]
   134a4:	e007      	b.n	134b6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   134a6:	9804      	ldr	r0, [sp, #16]
   134a8:	9903      	ldr	r1, [sp, #12]
   134aa:	f005 f836 	bl	1851a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   134ae:	f88d 0017 	strb.w	r0, [sp, #23]
   134b2:	e7ff      	b.n	134b4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   134b4:	e015      	b.n	134e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   134b6:	9801      	ldr	r0, [sp, #4]
   134b8:	07c1      	lsls	r1, r0, #31
   134ba:	2900      	cmp	r1, #0
   134bc:	d107      	bne.n	134ce <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   134be:	e7ff      	b.n	134c0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   134c0:	9804      	ldr	r0, [sp, #16]
   134c2:	9903      	ldr	r1, [sp, #12]
   134c4:	f005 f9a4 	bl	18810 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   134c8:	f88d 0017 	strb.w	r0, [sp, #23]
   134cc:	e007      	b.n	134de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   134ce:	9804      	ldr	r0, [sp, #16]
   134d0:	9903      	ldr	r1, [sp, #12]
   134d2:	f005 f88d 	bl	185f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   134d6:	f88d 0017 	strb.w	r0, [sp, #23]
   134da:	e7ff      	b.n	134dc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   134dc:	e000      	b.n	134e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   134de:	e7ff      	b.n	134e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   134e0:	e7ff      	b.n	134e2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   134e2:	f89d 0017 	ldrb.w	r0, [sp, #23]
   134e6:	b008      	add	sp, #32
   134e8:	bd80      	pop	{r7, pc}

000134ea <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   134ea:	b580      	push	{r7, lr}
   134ec:	b088      	sub	sp, #32
   134ee:	9006      	str	r0, [sp, #24]
   134f0:	9107      	str	r1, [sp, #28]
   134f2:	9004      	str	r0, [sp, #16]
   134f4:	4608      	mov	r0, r1
   134f6:	9103      	str	r1, [sp, #12]
   134f8:	f004 f9e5 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   134fc:	9002      	str	r0, [sp, #8]
   134fe:	e7ff      	b.n	13500 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   13500:	9802      	ldr	r0, [sp, #8]
   13502:	07c1      	lsls	r1, r0, #31
   13504:	2900      	cmp	r1, #0
   13506:	d105      	bne.n	13514 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   13508:	e7ff      	b.n	1350a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   1350a:	9803      	ldr	r0, [sp, #12]
   1350c:	f004 f9df 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13510:	9001      	str	r0, [sp, #4]
   13512:	e007      	b.n	13524 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   13514:	9804      	ldr	r0, [sp, #16]
   13516:	9903      	ldr	r1, [sp, #12]
   13518:	f004 ffff 	bl	1851a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1351c:	f88d 0017 	strb.w	r0, [sp, #23]
   13520:	e7ff      	b.n	13522 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   13522:	e015      	b.n	13550 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13524:	9801      	ldr	r0, [sp, #4]
   13526:	07c1      	lsls	r1, r0, #31
   13528:	2900      	cmp	r1, #0
   1352a:	d107      	bne.n	1353c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1352c:	e7ff      	b.n	1352e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1352e:	9804      	ldr	r0, [sp, #16]
   13530:	9903      	ldr	r1, [sp, #12]
   13532:	f005 f9e7 	bl	18904 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13536:	f88d 0017 	strb.w	r0, [sp, #23]
   1353a:	e007      	b.n	1354c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1353c:	9804      	ldr	r0, [sp, #16]
   1353e:	9903      	ldr	r1, [sp, #12]
   13540:	f005 f856 	bl	185f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13544:	f88d 0017 	strb.w	r0, [sp, #23]
   13548:	e7ff      	b.n	1354a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   1354a:	e000      	b.n	1354e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1354c:	e7ff      	b.n	1354e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1354e:	e7ff      	b.n	13550 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13550:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13554:	b008      	add	sp, #32
   13556:	bd80      	pop	{r7, pc}

00013558 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   13558:	b580      	push	{r7, lr}
   1355a:	b084      	sub	sp, #16
   1355c:	9002      	str	r0, [sp, #8]
   1355e:	9103      	str	r1, [sp, #12]
   13560:	6800      	ldr	r0, [r0, #0]
   13562:	6809      	ldr	r1, [r1, #0]
   13564:	f7ff ff00 	bl	13368 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   13568:	9001      	str	r0, [sp, #4]
   1356a:	e7ff      	b.n	1356c <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1356c:	9801      	ldr	r0, [sp, #4]
   1356e:	f000 0001 	and.w	r0, r0, #1
   13572:	b004      	add	sp, #16
   13574:	bd80      	pop	{r7, pc}

00013576 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   13576:	b5b0      	push	{r4, r5, r7, lr}
   13578:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1357c:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1357e:	f006 f8a3 	bl	196c8 <hal_spi_disable>
   13582:	e7ff      	b.n	13584 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   13584:	f240 01f8 	movw	r1, #248	; 0xf8
   13588:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1358c:	2000      	movs	r0, #0
   1358e:	f006 f859 	bl	19644 <hal_spi_config>
   13592:	906a      	str	r0, [sp, #424]	; 0x1a8
   13594:	e7ff      	b.n	13596 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   13596:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   1359a:	f2c0 0001 	movt	r0, #1
   1359e:	6800      	ldr	r0, [r0, #0]
   135a0:	a96a      	add	r1, sp, #424	; 0x1a8
   135a2:	916b      	str	r1, [sp, #428]	; 0x1ac
   135a4:	906c      	str	r0, [sp, #432]	; 0x1b0
   135a6:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   135a8:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   135ac:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   135ae:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   135b2:	6802      	ldr	r2, [r0, #0]
   135b4:	680b      	ldr	r3, [r1, #0]
   135b6:	429a      	cmp	r2, r3
   135b8:	9068      	str	r0, [sp, #416]	; 0x1a0
   135ba:	9167      	str	r1, [sp, #412]	; 0x19c
   135bc:	d10c      	bne.n	135d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   135be:	e7ff      	b.n	135c0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   135c0:	f247 7004 	movw	r0, #30468	; 0x7704
   135c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   135c8:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   135cc:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   135d0:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   135d4:	9066      	str	r0, [sp, #408]	; 0x198
   135d6:	e075      	b.n	136c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   135d8:	f64f 1010 	movw	r0, #63760	; 0xf910
   135dc:	f2c0 0001 	movt	r0, #1
   135e0:	6801      	ldr	r1, [r0, #0]
   135e2:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   135e4:	907c      	str	r0, [sp, #496]	; 0x1f0
   135e6:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   135e8:	927d      	str	r2, [sp, #500]	; 0x1f4
   135ea:	f64f 132c 	movw	r3, #63788	; 0xf92c
   135ee:	f2c0 0301 	movt	r3, #1
   135f2:	681b      	ldr	r3, [r3, #0]
   135f4:	f64f 1c30 	movw	ip, #63792	; 0xf930
   135f8:	f2c0 0c01 	movt	ip, #1
   135fc:	f8dc c000 	ldr.w	ip, [ip]
   13600:	46ee      	mov	lr, sp
   13602:	2400      	movs	r4, #0
   13604:	f8ce 4000 	str.w	r4, [lr]
   13608:	a87e      	add	r0, sp, #504	; 0x1f8
   1360a:	2201      	movs	r2, #1
   1360c:	9165      	str	r1, [sp, #404]	; 0x194
   1360e:	4619      	mov	r1, r3
   13610:	4663      	mov	r3, ip
   13612:	f7fb fe6e 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13616:	e7ff      	b.n	13618 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   13618:	a87c      	add	r0, sp, #496	; 0x1f0
   1361a:	9079      	str	r0, [sp, #484]	; 0x1e4
   1361c:	a87d      	add	r0, sp, #500	; 0x1f4
   1361e:	907a      	str	r0, [sp, #488]	; 0x1e8
   13620:	a87e      	add	r0, sp, #504	; 0x1f8
   13622:	907b      	str	r0, [sp, #492]	; 0x1ec
   13624:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   13626:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   1362a:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1362c:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   13630:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   13632:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   13636:	f240 037f 	movw	r3, #127	; 0x7f
   1363a:	f2c0 0301 	movt	r3, #1
   1363e:	9164      	str	r1, [sp, #400]	; 0x190
   13640:	4619      	mov	r1, r3
   13642:	9263      	str	r2, [sp, #396]	; 0x18c
   13644:	f7fc fd53 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13648:	9062      	str	r0, [sp, #392]	; 0x188
   1364a:	9161      	str	r1, [sp, #388]	; 0x184
   1364c:	e7ff      	b.n	1364e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1364e:	f240 017f 	movw	r1, #127	; 0x7f
   13652:	f2c0 0101 	movt	r1, #1
   13656:	9864      	ldr	r0, [sp, #400]	; 0x190
   13658:	f7fc fd49 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1365c:	9060      	str	r0, [sp, #384]	; 0x180
   1365e:	915f      	str	r1, [sp, #380]	; 0x17c
   13660:	e7ff      	b.n	13662 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   13662:	f247 1153 	movw	r1, #29011	; 0x7153
   13666:	f2c0 0101 	movt	r1, #1
   1366a:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1366c:	f7fc fd7e 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13670:	905e      	str	r0, [sp, #376]	; 0x178
   13672:	915d      	str	r1, [sp, #372]	; 0x174
   13674:	e7ff      	b.n	13676 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   13676:	9862      	ldr	r0, [sp, #392]	; 0x188
   13678:	9073      	str	r0, [sp, #460]	; 0x1cc
   1367a:	9961      	ldr	r1, [sp, #388]	; 0x184
   1367c:	9174      	str	r1, [sp, #464]	; 0x1d0
   1367e:	9a60      	ldr	r2, [sp, #384]	; 0x180
   13680:	9275      	str	r2, [sp, #468]	; 0x1d4
   13682:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   13684:	9376      	str	r3, [sp, #472]	; 0x1d8
   13686:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   1368a:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   1368e:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   13692:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   13696:	466c      	mov	r4, sp
   13698:	2503      	movs	r5, #3
   1369a:	6025      	str	r5, [r4, #0]
   1369c:	a86d      	add	r0, sp, #436	; 0x1b4
   1369e:	ab73      	add	r3, sp, #460	; 0x1cc
   136a0:	9965      	ldr	r1, [sp, #404]	; 0x194
   136a2:	462a      	mov	r2, r5
   136a4:	f7fb fe25 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136a8:	e7ff      	b.n	136aa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   136aa:	f64f 104c 	movw	r0, #63820	; 0xf94c
   136ae:	f2c0 0001 	movt	r0, #1
   136b2:	f003 fa60 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   136b6:	905c      	str	r0, [sp, #368]	; 0x170
   136b8:	e7ff      	b.n	136ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   136ba:	a86d      	add	r0, sp, #436	; 0x1b4
   136bc:	995c      	ldr	r1, [sp, #368]	; 0x170
   136be:	f003 fa97 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   136c2:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   136c4:	f644 208d 	movw	r0, #19085	; 0x4a8d
   136c8:	f2c0 0001 	movt	r0, #1
   136cc:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   136ce:	9985      	ldr	r1, [sp, #532]	; 0x214
   136d0:	2000      	movs	r0, #0
   136d2:	9a66      	ldr	r2, [sp, #408]	; 0x198
   136d4:	f006 f85c 	bl	19790 <hal_spi_set_txrx_cb>
   136d8:	9084      	str	r0, [sp, #528]	; 0x210
   136da:	e7ff      	b.n	136dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   136dc:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   136e0:	f2c0 0001 	movt	r0, #1
   136e4:	6800      	ldr	r0, [r0, #0]
   136e6:	a984      	add	r1, sp, #528	; 0x210
   136e8:	9186      	str	r1, [sp, #536]	; 0x218
   136ea:	9087      	str	r0, [sp, #540]	; 0x21c
   136ec:	9886      	ldr	r0, [sp, #536]	; 0x218
   136ee:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   136f2:	9987      	ldr	r1, [sp, #540]	; 0x21c
   136f4:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   136f8:	6802      	ldr	r2, [r0, #0]
   136fa:	680b      	ldr	r3, [r1, #0]
   136fc:	429a      	cmp	r2, r3
   136fe:	905b      	str	r0, [sp, #364]	; 0x16c
   13700:	915a      	str	r1, [sp, #360]	; 0x168
   13702:	d105      	bne.n	13710 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   13704:	e7ff      	b.n	13706 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   13706:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13708:	f005 ffb8 	bl	1967c <hal_spi_enable>
   1370c:	909f      	str	r0, [sp, #636]	; 0x27c
   1370e:	e075      	b.n	137fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   13710:	f64f 1010 	movw	r0, #63760	; 0xf910
   13714:	f2c0 0001 	movt	r0, #1
   13718:	6801      	ldr	r1, [r0, #0]
   1371a:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1371c:	9097      	str	r0, [sp, #604]	; 0x25c
   1371e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   13720:	9298      	str	r2, [sp, #608]	; 0x260
   13722:	f64f 1370 	movw	r3, #63856	; 0xf970
   13726:	f2c0 0301 	movt	r3, #1
   1372a:	681b      	ldr	r3, [r3, #0]
   1372c:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13730:	f2c0 0c01 	movt	ip, #1
   13734:	f8dc c000 	ldr.w	ip, [ip]
   13738:	46ee      	mov	lr, sp
   1373a:	2400      	movs	r4, #0
   1373c:	f8ce 4000 	str.w	r4, [lr]
   13740:	a899      	add	r0, sp, #612	; 0x264
   13742:	2201      	movs	r2, #1
   13744:	9159      	str	r1, [sp, #356]	; 0x164
   13746:	4619      	mov	r1, r3
   13748:	4663      	mov	r3, ip
   1374a:	f7fb fdd2 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1374e:	e7ff      	b.n	13750 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   13750:	a897      	add	r0, sp, #604	; 0x25c
   13752:	9094      	str	r0, [sp, #592]	; 0x250
   13754:	a898      	add	r0, sp, #608	; 0x260
   13756:	9095      	str	r0, [sp, #596]	; 0x254
   13758:	a899      	add	r0, sp, #612	; 0x264
   1375a:	9096      	str	r0, [sp, #600]	; 0x258
   1375c:	9894      	ldr	r0, [sp, #592]	; 0x250
   1375e:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   13762:	9995      	ldr	r1, [sp, #596]	; 0x254
   13764:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13768:	9a96      	ldr	r2, [sp, #600]	; 0x258
   1376a:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1376e:	f240 037f 	movw	r3, #127	; 0x7f
   13772:	f2c0 0301 	movt	r3, #1
   13776:	9158      	str	r1, [sp, #352]	; 0x160
   13778:	4619      	mov	r1, r3
   1377a:	9257      	str	r2, [sp, #348]	; 0x15c
   1377c:	f7fc fcb7 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13780:	9056      	str	r0, [sp, #344]	; 0x158
   13782:	9155      	str	r1, [sp, #340]	; 0x154
   13784:	e7ff      	b.n	13786 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   13786:	f240 017f 	movw	r1, #127	; 0x7f
   1378a:	f2c0 0101 	movt	r1, #1
   1378e:	9858      	ldr	r0, [sp, #352]	; 0x160
   13790:	f7fc fcad 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13794:	9054      	str	r0, [sp, #336]	; 0x150
   13796:	9153      	str	r1, [sp, #332]	; 0x14c
   13798:	e7ff      	b.n	1379a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   1379a:	f247 1153 	movw	r1, #29011	; 0x7153
   1379e:	f2c0 0101 	movt	r1, #1
   137a2:	9857      	ldr	r0, [sp, #348]	; 0x15c
   137a4:	f7fc fce2 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   137a8:	9052      	str	r0, [sp, #328]	; 0x148
   137aa:	9151      	str	r1, [sp, #324]	; 0x144
   137ac:	e7ff      	b.n	137ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   137ae:	9856      	ldr	r0, [sp, #344]	; 0x158
   137b0:	908e      	str	r0, [sp, #568]	; 0x238
   137b2:	9955      	ldr	r1, [sp, #340]	; 0x154
   137b4:	918f      	str	r1, [sp, #572]	; 0x23c
   137b6:	9a54      	ldr	r2, [sp, #336]	; 0x150
   137b8:	9290      	str	r2, [sp, #576]	; 0x240
   137ba:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   137bc:	9391      	str	r3, [sp, #580]	; 0x244
   137be:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   137c2:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   137c6:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   137ca:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   137ce:	466c      	mov	r4, sp
   137d0:	2503      	movs	r5, #3
   137d2:	6025      	str	r5, [r4, #0]
   137d4:	a888      	add	r0, sp, #544	; 0x220
   137d6:	ab8e      	add	r3, sp, #568	; 0x238
   137d8:	9959      	ldr	r1, [sp, #356]	; 0x164
   137da:	462a      	mov	r2, r5
   137dc:	f7fb fd89 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   137e0:	e7ff      	b.n	137e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   137e2:	f64f 1074 	movw	r0, #63860	; 0xf974
   137e6:	f2c0 0001 	movt	r0, #1
   137ea:	f003 f9c4 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   137ee:	9050      	str	r0, [sp, #320]	; 0x140
   137f0:	e7ff      	b.n	137f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   137f2:	a888      	add	r0, sp, #544	; 0x220
   137f4:	9950      	ldr	r1, [sp, #320]	; 0x140
   137f6:	f003 f9fb 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   137fa:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   137fc:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13800:	f2c0 0001 	movt	r0, #1
   13804:	6800      	ldr	r0, [r0, #0]
   13806:	a99f      	add	r1, sp, #636	; 0x27c
   13808:	91a0      	str	r1, [sp, #640]	; 0x280
   1380a:	90a1      	str	r0, [sp, #644]	; 0x284
   1380c:	98a0      	ldr	r0, [sp, #640]	; 0x280
   1380e:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   13812:	99a1      	ldr	r1, [sp, #644]	; 0x284
   13814:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   13818:	6802      	ldr	r2, [r0, #0]
   1381a:	680b      	ldr	r3, [r1, #0]
   1381c:	429a      	cmp	r2, r3
   1381e:	904f      	str	r0, [sp, #316]	; 0x13c
   13820:	914e      	str	r1, [sp, #312]	; 0x138
   13822:	d106      	bne.n	13832 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   13824:	e7ff      	b.n	13826 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   13826:	2019      	movs	r0, #25
   13828:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1382a:	f005 fafd 	bl	18e28 <hal_gpio_init_out>
   1382e:	90b9      	str	r0, [sp, #740]	; 0x2e4
   13830:	e075      	b.n	1391e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13832:	f64f 1010 	movw	r0, #63760	; 0xf910
   13836:	f2c0 0001 	movt	r0, #1
   1383a:	6801      	ldr	r1, [r0, #0]
   1383c:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1383e:	90b1      	str	r0, [sp, #708]	; 0x2c4
   13840:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   13842:	92b2      	str	r2, [sp, #712]	; 0x2c8
   13844:	f64f 139c 	movw	r3, #63900	; 0xf99c
   13848:	f2c0 0301 	movt	r3, #1
   1384c:	681b      	ldr	r3, [r3, #0]
   1384e:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13852:	f2c0 0c01 	movt	ip, #1
   13856:	f8dc c000 	ldr.w	ip, [ip]
   1385a:	46ee      	mov	lr, sp
   1385c:	2400      	movs	r4, #0
   1385e:	f8ce 4000 	str.w	r4, [lr]
   13862:	a8b3      	add	r0, sp, #716	; 0x2cc
   13864:	2201      	movs	r2, #1
   13866:	914d      	str	r1, [sp, #308]	; 0x134
   13868:	4619      	mov	r1, r3
   1386a:	4663      	mov	r3, ip
   1386c:	f7fb fd41 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13870:	e7ff      	b.n	13872 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   13872:	a8b1      	add	r0, sp, #708	; 0x2c4
   13874:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13876:	a8b2      	add	r0, sp, #712	; 0x2c8
   13878:	90af      	str	r0, [sp, #700]	; 0x2bc
   1387a:	a8b3      	add	r0, sp, #716	; 0x2cc
   1387c:	90b0      	str	r0, [sp, #704]	; 0x2c0
   1387e:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   13880:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   13884:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   13886:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   1388a:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   1388c:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   13890:	f240 037f 	movw	r3, #127	; 0x7f
   13894:	f2c0 0301 	movt	r3, #1
   13898:	914c      	str	r1, [sp, #304]	; 0x130
   1389a:	4619      	mov	r1, r3
   1389c:	924b      	str	r2, [sp, #300]	; 0x12c
   1389e:	f7fc fc26 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   138a2:	904a      	str	r0, [sp, #296]	; 0x128
   138a4:	9149      	str	r1, [sp, #292]	; 0x124
   138a6:	e7ff      	b.n	138a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   138a8:	f240 017f 	movw	r1, #127	; 0x7f
   138ac:	f2c0 0101 	movt	r1, #1
   138b0:	984c      	ldr	r0, [sp, #304]	; 0x130
   138b2:	f7fc fc1c 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   138b6:	9048      	str	r0, [sp, #288]	; 0x120
   138b8:	9147      	str	r1, [sp, #284]	; 0x11c
   138ba:	e7ff      	b.n	138bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   138bc:	f247 1153 	movw	r1, #29011	; 0x7153
   138c0:	f2c0 0101 	movt	r1, #1
   138c4:	984b      	ldr	r0, [sp, #300]	; 0x12c
   138c6:	f7fc fc51 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   138ca:	9046      	str	r0, [sp, #280]	; 0x118
   138cc:	9145      	str	r1, [sp, #276]	; 0x114
   138ce:	e7ff      	b.n	138d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   138d0:	984a      	ldr	r0, [sp, #296]	; 0x128
   138d2:	90a8      	str	r0, [sp, #672]	; 0x2a0
   138d4:	9949      	ldr	r1, [sp, #292]	; 0x124
   138d6:	91a9      	str	r1, [sp, #676]	; 0x2a4
   138d8:	9a48      	ldr	r2, [sp, #288]	; 0x120
   138da:	92aa      	str	r2, [sp, #680]	; 0x2a8
   138dc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   138de:	93ab      	str	r3, [sp, #684]	; 0x2ac
   138e0:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   138e4:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   138e8:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   138ec:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   138f0:	466c      	mov	r4, sp
   138f2:	2503      	movs	r5, #3
   138f4:	6025      	str	r5, [r4, #0]
   138f6:	a8a2      	add	r0, sp, #648	; 0x288
   138f8:	aba8      	add	r3, sp, #672	; 0x2a0
   138fa:	994d      	ldr	r1, [sp, #308]	; 0x134
   138fc:	462a      	mov	r2, r5
   138fe:	f7fb fcf8 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13902:	e7ff      	b.n	13904 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   13904:	f64f 10a0 	movw	r0, #63904	; 0xf9a0
   13908:	f2c0 0001 	movt	r0, #1
   1390c:	f003 f933 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13910:	9044      	str	r0, [sp, #272]	; 0x110
   13912:	e7ff      	b.n	13914 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   13914:	a8a2      	add	r0, sp, #648	; 0x288
   13916:	9944      	ldr	r1, [sp, #272]	; 0x110
   13918:	f003 f96a 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1391c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1391e:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13922:	f2c0 0001 	movt	r0, #1
   13926:	6800      	ldr	r0, [r0, #0]
   13928:	a9b9      	add	r1, sp, #740	; 0x2e4
   1392a:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1392c:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1392e:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   13930:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   13934:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   13936:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   1393a:	6802      	ldr	r2, [r0, #0]
   1393c:	680b      	ldr	r3, [r1, #0]
   1393e:	429a      	cmp	r2, r3
   13940:	9043      	str	r0, [sp, #268]	; 0x10c
   13942:	9142      	str	r1, [sp, #264]	; 0x108
   13944:	d106      	bne.n	13954 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   13946:	e7ff      	b.n	13948 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   13948:	2012      	movs	r0, #18
   1394a:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1394c:	f005 fa6c 	bl	18e28 <hal_gpio_init_out>
   13950:	90d3      	str	r0, [sp, #844]	; 0x34c
   13952:	e075      	b.n	13a40 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13954:	f64f 1010 	movw	r0, #63760	; 0xf910
   13958:	f2c0 0001 	movt	r0, #1
   1395c:	6801      	ldr	r1, [r0, #0]
   1395e:	9843      	ldr	r0, [sp, #268]	; 0x10c
   13960:	90cb      	str	r0, [sp, #812]	; 0x32c
   13962:	9a42      	ldr	r2, [sp, #264]	; 0x108
   13964:	92cc      	str	r2, [sp, #816]	; 0x330
   13966:	f64f 13c4 	movw	r3, #63940	; 0xf9c4
   1396a:	f2c0 0301 	movt	r3, #1
   1396e:	681b      	ldr	r3, [r3, #0]
   13970:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13974:	f2c0 0c01 	movt	ip, #1
   13978:	f8dc c000 	ldr.w	ip, [ip]
   1397c:	46ee      	mov	lr, sp
   1397e:	2400      	movs	r4, #0
   13980:	f8ce 4000 	str.w	r4, [lr]
   13984:	a8cd      	add	r0, sp, #820	; 0x334
   13986:	2201      	movs	r2, #1
   13988:	9141      	str	r1, [sp, #260]	; 0x104
   1398a:	4619      	mov	r1, r3
   1398c:	4663      	mov	r3, ip
   1398e:	f7fb fcb0 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13992:	e7ff      	b.n	13994 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   13994:	a8cb      	add	r0, sp, #812	; 0x32c
   13996:	90c8      	str	r0, [sp, #800]	; 0x320
   13998:	a8cc      	add	r0, sp, #816	; 0x330
   1399a:	90c9      	str	r0, [sp, #804]	; 0x324
   1399c:	a8cd      	add	r0, sp, #820	; 0x334
   1399e:	90ca      	str	r0, [sp, #808]	; 0x328
   139a0:	98c8      	ldr	r0, [sp, #800]	; 0x320
   139a2:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   139a6:	99c9      	ldr	r1, [sp, #804]	; 0x324
   139a8:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   139ac:	9aca      	ldr	r2, [sp, #808]	; 0x328
   139ae:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   139b2:	f240 037f 	movw	r3, #127	; 0x7f
   139b6:	f2c0 0301 	movt	r3, #1
   139ba:	9140      	str	r1, [sp, #256]	; 0x100
   139bc:	4619      	mov	r1, r3
   139be:	923f      	str	r2, [sp, #252]	; 0xfc
   139c0:	f7fc fb95 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139c4:	903e      	str	r0, [sp, #248]	; 0xf8
   139c6:	913d      	str	r1, [sp, #244]	; 0xf4
   139c8:	e7ff      	b.n	139ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   139ca:	f240 017f 	movw	r1, #127	; 0x7f
   139ce:	f2c0 0101 	movt	r1, #1
   139d2:	9840      	ldr	r0, [sp, #256]	; 0x100
   139d4:	f7fc fb8b 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139d8:	903c      	str	r0, [sp, #240]	; 0xf0
   139da:	913b      	str	r1, [sp, #236]	; 0xec
   139dc:	e7ff      	b.n	139de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   139de:	f247 1153 	movw	r1, #29011	; 0x7153
   139e2:	f2c0 0101 	movt	r1, #1
   139e6:	983f      	ldr	r0, [sp, #252]	; 0xfc
   139e8:	f7fc fbc0 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   139ec:	903a      	str	r0, [sp, #232]	; 0xe8
   139ee:	9139      	str	r1, [sp, #228]	; 0xe4
   139f0:	e7ff      	b.n	139f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   139f2:	983e      	ldr	r0, [sp, #248]	; 0xf8
   139f4:	90c2      	str	r0, [sp, #776]	; 0x308
   139f6:	993d      	ldr	r1, [sp, #244]	; 0xf4
   139f8:	91c3      	str	r1, [sp, #780]	; 0x30c
   139fa:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   139fc:	92c4      	str	r2, [sp, #784]	; 0x310
   139fe:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   13a00:	93c5      	str	r3, [sp, #788]	; 0x314
   13a02:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   13a06:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   13a0a:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   13a0e:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   13a12:	466c      	mov	r4, sp
   13a14:	2503      	movs	r5, #3
   13a16:	6025      	str	r5, [r4, #0]
   13a18:	a8bc      	add	r0, sp, #752	; 0x2f0
   13a1a:	abc2      	add	r3, sp, #776	; 0x308
   13a1c:	9941      	ldr	r1, [sp, #260]	; 0x104
   13a1e:	462a      	mov	r2, r5
   13a20:	f7fb fc67 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a24:	e7ff      	b.n	13a26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13a26:	f64f 10c8 	movw	r0, #63944	; 0xf9c8
   13a2a:	f2c0 0001 	movt	r0, #1
   13a2e:	f003 f8a2 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a32:	9038      	str	r0, [sp, #224]	; 0xe0
   13a34:	e7ff      	b.n	13a36 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   13a36:	a8bc      	add	r0, sp, #752	; 0x2f0
   13a38:	9938      	ldr	r1, [sp, #224]	; 0xe0
   13a3a:	f003 f8d9 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a3e:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13a40:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13a44:	f2c0 0001 	movt	r0, #1
   13a48:	6800      	ldr	r0, [r0, #0]
   13a4a:	a9d3      	add	r1, sp, #844	; 0x34c
   13a4c:	91d4      	str	r1, [sp, #848]	; 0x350
   13a4e:	90d5      	str	r0, [sp, #852]	; 0x354
   13a50:	98d4      	ldr	r0, [sp, #848]	; 0x350
   13a52:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13a56:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13a58:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   13a5c:	6802      	ldr	r2, [r0, #0]
   13a5e:	680b      	ldr	r3, [r1, #0]
   13a60:	429a      	cmp	r2, r3
   13a62:	9037      	str	r0, [sp, #220]	; 0xdc
   13a64:	9136      	str	r1, [sp, #216]	; 0xd8
   13a66:	d107      	bne.n	13a78 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13a68:	e7ff      	b.n	13a6a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   13a6a:	f247 20a4 	movw	r0, #29348	; 0x72a4
   13a6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a72:	f006 fae3 	bl	1a03c <os_eventq_init>
   13a76:	e075      	b.n	13b64 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13a78:	f64f 1010 	movw	r0, #63760	; 0xf910
   13a7c:	f2c0 0001 	movt	r0, #1
   13a80:	6801      	ldr	r1, [r0, #0]
   13a82:	9837      	ldr	r0, [sp, #220]	; 0xdc
   13a84:	90e5      	str	r0, [sp, #916]	; 0x394
   13a86:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   13a88:	92e6      	str	r2, [sp, #920]	; 0x398
   13a8a:	f64f 13c4 	movw	r3, #63940	; 0xf9c4
   13a8e:	f2c0 0301 	movt	r3, #1
   13a92:	681b      	ldr	r3, [r3, #0]
   13a94:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13a98:	f2c0 0c01 	movt	ip, #1
   13a9c:	f8dc c000 	ldr.w	ip, [ip]
   13aa0:	46ee      	mov	lr, sp
   13aa2:	2400      	movs	r4, #0
   13aa4:	f8ce 4000 	str.w	r4, [lr]
   13aa8:	a8e7      	add	r0, sp, #924	; 0x39c
   13aaa:	2201      	movs	r2, #1
   13aac:	9135      	str	r1, [sp, #212]	; 0xd4
   13aae:	4619      	mov	r1, r3
   13ab0:	4663      	mov	r3, ip
   13ab2:	f7fb fc1e 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ab6:	e7ff      	b.n	13ab8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   13ab8:	a8e5      	add	r0, sp, #916	; 0x394
   13aba:	90e2      	str	r0, [sp, #904]	; 0x388
   13abc:	a8e6      	add	r0, sp, #920	; 0x398
   13abe:	90e3      	str	r0, [sp, #908]	; 0x38c
   13ac0:	a8e7      	add	r0, sp, #924	; 0x39c
   13ac2:	90e4      	str	r0, [sp, #912]	; 0x390
   13ac4:	98e2      	ldr	r0, [sp, #904]	; 0x388
   13ac6:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   13aca:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   13acc:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   13ad0:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   13ad2:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   13ad6:	f240 037f 	movw	r3, #127	; 0x7f
   13ada:	f2c0 0301 	movt	r3, #1
   13ade:	9134      	str	r1, [sp, #208]	; 0xd0
   13ae0:	4619      	mov	r1, r3
   13ae2:	9233      	str	r2, [sp, #204]	; 0xcc
   13ae4:	f7fc fb03 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13ae8:	9032      	str	r0, [sp, #200]	; 0xc8
   13aea:	9131      	str	r1, [sp, #196]	; 0xc4
   13aec:	e7ff      	b.n	13aee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   13aee:	f240 017f 	movw	r1, #127	; 0x7f
   13af2:	f2c0 0101 	movt	r1, #1
   13af6:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13af8:	f7fc faf9 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13afc:	9030      	str	r0, [sp, #192]	; 0xc0
   13afe:	912f      	str	r1, [sp, #188]	; 0xbc
   13b00:	e7ff      	b.n	13b02 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   13b02:	f247 1153 	movw	r1, #29011	; 0x7153
   13b06:	f2c0 0101 	movt	r1, #1
   13b0a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13b0c:	f7fc fb2e 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b10:	902e      	str	r0, [sp, #184]	; 0xb8
   13b12:	912d      	str	r1, [sp, #180]	; 0xb4
   13b14:	e7ff      	b.n	13b16 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13b16:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13b18:	90dc      	str	r0, [sp, #880]	; 0x370
   13b1a:	9931      	ldr	r1, [sp, #196]	; 0xc4
   13b1c:	91dd      	str	r1, [sp, #884]	; 0x374
   13b1e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   13b20:	92de      	str	r2, [sp, #888]	; 0x378
   13b22:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13b24:	93df      	str	r3, [sp, #892]	; 0x37c
   13b26:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   13b2a:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   13b2e:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   13b32:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   13b36:	466c      	mov	r4, sp
   13b38:	2503      	movs	r5, #3
   13b3a:	6025      	str	r5, [r4, #0]
   13b3c:	a8d6      	add	r0, sp, #856	; 0x358
   13b3e:	abdc      	add	r3, sp, #880	; 0x370
   13b40:	9935      	ldr	r1, [sp, #212]	; 0xd4
   13b42:	462a      	mov	r2, r5
   13b44:	f7fb fbd5 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b48:	e7ff      	b.n	13b4a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13b4a:	f64f 10d8 	movw	r0, #63960	; 0xf9d8
   13b4e:	f2c0 0001 	movt	r0, #1
   13b52:	f003 f810 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b56:	902c      	str	r0, [sp, #176]	; 0xb0
   13b58:	e7ff      	b.n	13b5a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13b5a:	a8d6      	add	r0, sp, #856	; 0x358
   13b5c:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13b5e:	f003 f847 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b62:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13b64:	f244 406f 	movw	r0, #17519	; 0x446f
   13b68:	f2c0 0001 	movt	r0, #1
   13b6c:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13b6e:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   13b70:	f247 208c 	movw	r0, #29324	; 0x728c
   13b74:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13b78:	2200      	movs	r2, #0
   13b7a:	f006 fb0d 	bl	1a198 <os_mqueue_init>
   13b7e:	90ed      	str	r0, [sp, #948]	; 0x3b4
   13b80:	e7ff      	b.n	13b82 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13b82:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13b86:	f2c0 0001 	movt	r0, #1
   13b8a:	6800      	ldr	r0, [r0, #0]
   13b8c:	a9ed      	add	r1, sp, #948	; 0x3b4
   13b8e:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13b90:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13b92:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13b94:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13b98:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13b9a:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13b9e:	6802      	ldr	r2, [r0, #0]
   13ba0:	680b      	ldr	r3, [r1, #0]
   13ba2:	429a      	cmp	r2, r3
   13ba4:	902b      	str	r0, [sp, #172]	; 0xac
   13ba6:	912a      	str	r1, [sp, #168]	; 0xa8
   13ba8:	d10a      	bne.n	13bc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13baa:	e7ff      	b.n	13bac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13bac:	f247 207c 	movw	r0, #29308	; 0x727c
   13bb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13bb4:	2100      	movs	r1, #0
   13bb6:	f006 ffe9 	bl	1ab8c <os_sem_init>
   13bba:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13bbe:	e07b      	b.n	13cb8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13bc0:	f64f 1010 	movw	r0, #63760	; 0xf910
   13bc4:	f2c0 0001 	movt	r0, #1
   13bc8:	6801      	ldr	r1, [r0, #0]
   13bca:	982b      	ldr	r0, [sp, #172]	; 0xac
   13bcc:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13bd0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13bd2:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13bd6:	f64f 13fc 	movw	r3, #63996	; 0xf9fc
   13bda:	f2c0 0301 	movt	r3, #1
   13bde:	681b      	ldr	r3, [r3, #0]
   13be0:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13be4:	f2c0 0c01 	movt	ip, #1
   13be8:	f8dc c000 	ldr.w	ip, [ip]
   13bec:	46ee      	mov	lr, sp
   13bee:	2400      	movs	r4, #0
   13bf0:	f8ce 4000 	str.w	r4, [lr]
   13bf4:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13bf8:	2201      	movs	r2, #1
   13bfa:	9129      	str	r1, [sp, #164]	; 0xa4
   13bfc:	4619      	mov	r1, r3
   13bfe:	4663      	mov	r3, ip
   13c00:	f7fb fb77 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c04:	e7ff      	b.n	13c06 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13c06:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13c0a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13c0c:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13c10:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13c12:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13c16:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13c18:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13c1a:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13c1e:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13c20:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13c24:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13c26:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13c2a:	f240 037f 	movw	r3, #127	; 0x7f
   13c2e:	f2c0 0301 	movt	r3, #1
   13c32:	9128      	str	r1, [sp, #160]	; 0xa0
   13c34:	4619      	mov	r1, r3
   13c36:	9227      	str	r2, [sp, #156]	; 0x9c
   13c38:	f7fc fa59 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c3c:	9026      	str	r0, [sp, #152]	; 0x98
   13c3e:	9125      	str	r1, [sp, #148]	; 0x94
   13c40:	e7ff      	b.n	13c42 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13c42:	f240 017f 	movw	r1, #127	; 0x7f
   13c46:	f2c0 0101 	movt	r1, #1
   13c4a:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13c4c:	f7fc fa4f 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c50:	9024      	str	r0, [sp, #144]	; 0x90
   13c52:	9123      	str	r1, [sp, #140]	; 0x8c
   13c54:	e7ff      	b.n	13c56 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13c56:	f247 1153 	movw	r1, #29011	; 0x7153
   13c5a:	f2c0 0101 	movt	r1, #1
   13c5e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13c60:	f7fc fa84 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c64:	9022      	str	r0, [sp, #136]	; 0x88
   13c66:	9121      	str	r1, [sp, #132]	; 0x84
   13c68:	e7ff      	b.n	13c6a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13c6a:	9826      	ldr	r0, [sp, #152]	; 0x98
   13c6c:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13c6e:	9925      	ldr	r1, [sp, #148]	; 0x94
   13c70:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13c72:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13c74:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13c76:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13c78:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13c7a:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13c7e:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13c82:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13c86:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13c8a:	466c      	mov	r4, sp
   13c8c:	2503      	movs	r5, #3
   13c8e:	6025      	str	r5, [r4, #0]
   13c90:	a8f1      	add	r0, sp, #964	; 0x3c4
   13c92:	abf7      	add	r3, sp, #988	; 0x3dc
   13c94:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13c96:	462a      	mov	r2, r5
   13c98:	f7fb fb2b 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c9c:	e7ff      	b.n	13c9e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13c9e:	f64f 2000 	movw	r0, #64000	; 0xfa00
   13ca2:	f2c0 0001 	movt	r0, #1
   13ca6:	f002 ff66 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13caa:	9020      	str	r0, [sp, #128]	; 0x80
   13cac:	e7ff      	b.n	13cae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13cae:	a8f1      	add	r0, sp, #964	; 0x3c4
   13cb0:	9920      	ldr	r1, [sp, #128]	; 0x80
   13cb2:	f002 ff9d 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13cb6:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13cb8:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13cbc:	f2c0 0001 	movt	r0, #1
   13cc0:	6800      	ldr	r0, [r0, #0]
   13cc2:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13cc6:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13cca:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13cce:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13cd2:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13cd6:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13cda:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13cde:	6802      	ldr	r2, [r0, #0]
   13ce0:	680b      	ldr	r3, [r1, #0]
   13ce2:	429a      	cmp	r2, r3
   13ce4:	901f      	str	r0, [sp, #124]	; 0x7c
   13ce6:	911e      	str	r1, [sp, #120]	; 0x78
   13ce8:	d10a      	bne.n	13d00 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13cea:	e7ff      	b.n	13cec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13cec:	f247 2084 	movw	r0, #29316	; 0x7284
   13cf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13cf4:	2102      	movs	r1, #2
   13cf6:	f006 ff49 	bl	1ab8c <os_sem_init>
   13cfa:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13cfe:	e088      	b.n	13e12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d00:	f64f 1010 	movw	r0, #63760	; 0xf910
   13d04:	f2c0 0001 	movt	r0, #1
   13d08:	6801      	ldr	r1, [r0, #0]
   13d0a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13d0c:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13d10:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13d12:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13d16:	f64f 2328 	movw	r3, #64040	; 0xfa28
   13d1a:	f2c0 0301 	movt	r3, #1
   13d1e:	681b      	ldr	r3, [r3, #0]
   13d20:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13d24:	f2c0 0c01 	movt	ip, #1
   13d28:	f8dc c000 	ldr.w	ip, [ip]
   13d2c:	46ee      	mov	lr, sp
   13d2e:	2400      	movs	r4, #0
   13d30:	f8ce 4000 	str.w	r4, [lr]
   13d34:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13d38:	2201      	movs	r2, #1
   13d3a:	911d      	str	r1, [sp, #116]	; 0x74
   13d3c:	4619      	mov	r1, r3
   13d3e:	4663      	mov	r3, ip
   13d40:	f7fb fad7 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d44:	e7ff      	b.n	13d46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13d46:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13d4a:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13d4e:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13d52:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13d56:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13d5a:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13d5e:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13d62:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13d66:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13d6a:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13d6e:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13d72:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13d76:	f240 03d3 	movw	r3, #211	; 0xd3
   13d7a:	f2c0 0301 	movt	r3, #1
   13d7e:	911c      	str	r1, [sp, #112]	; 0x70
   13d80:	4619      	mov	r1, r3
   13d82:	921b      	str	r2, [sp, #108]	; 0x6c
   13d84:	f7fc f9dd 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d88:	901a      	str	r0, [sp, #104]	; 0x68
   13d8a:	9119      	str	r1, [sp, #100]	; 0x64
   13d8c:	e7ff      	b.n	13d8e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13d8e:	f240 01d3 	movw	r1, #211	; 0xd3
   13d92:	f2c0 0101 	movt	r1, #1
   13d96:	981c      	ldr	r0, [sp, #112]	; 0x70
   13d98:	f7fc f9d3 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13d9c:	9018      	str	r0, [sp, #96]	; 0x60
   13d9e:	9117      	str	r1, [sp, #92]	; 0x5c
   13da0:	e7ff      	b.n	13da2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13da2:	f247 1153 	movw	r1, #29011	; 0x7153
   13da6:	f2c0 0101 	movt	r1, #1
   13daa:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13dac:	f7fc f9de 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13db0:	9016      	str	r0, [sp, #88]	; 0x58
   13db2:	9115      	str	r1, [sp, #84]	; 0x54
   13db4:	e7ff      	b.n	13db6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13db6:	981a      	ldr	r0, [sp, #104]	; 0x68
   13db8:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13dbc:	9919      	ldr	r1, [sp, #100]	; 0x64
   13dbe:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13dc2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13dc4:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13dc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13dca:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13dce:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13dd2:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13dd6:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13dda:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13dde:	466c      	mov	r4, sp
   13de0:	2503      	movs	r5, #3
   13de2:	6025      	str	r5, [r4, #0]
   13de4:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13de8:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13dec:	991d      	ldr	r1, [sp, #116]	; 0x74
   13dee:	462a      	mov	r2, r5
   13df0:	f7fb fa7f 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13df4:	e7ff      	b.n	13df6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13df6:	f64f 202c 	movw	r0, #64044	; 0xfa2c
   13dfa:	f2c0 0001 	movt	r0, #1
   13dfe:	f002 feba 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13e02:	9014      	str	r0, [sp, #80]	; 0x50
   13e04:	e7ff      	b.n	13e06 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13e06:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13e0a:	9914      	ldr	r1, [sp, #80]	; 0x50
   13e0c:	f002 fef0 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13e10:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13e12:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   13e16:	f2c0 0001 	movt	r0, #1
   13e1a:	6800      	ldr	r0, [r0, #0]
   13e1c:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13e20:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13e24:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13e28:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13e2c:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13e30:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13e34:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13e38:	6802      	ldr	r2, [r0, #0]
   13e3a:	680b      	ldr	r3, [r1, #0]
   13e3c:	429a      	cmp	r2, r3
   13e3e:	9013      	str	r0, [sp, #76]	; 0x4c
   13e40:	9112      	str	r1, [sp, #72]	; 0x48
   13e42:	d125      	bne.n	13e90 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13e44:	e7ff      	b.n	13e46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13e46:	f64f 2058 	movw	r0, #64088	; 0xfa58
   13e4a:	f2c0 0001 	movt	r0, #1
   13e4e:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13e50:	f643 70f1 	movw	r0, #16369	; 0x3ff1
   13e54:	f2c0 0001 	movt	r0, #1
   13e58:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13e5c:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13e60:	4668      	mov	r0, sp
   13e62:	f44f 7380 	mov.w	r3, #256	; 0x100
   13e66:	6103      	str	r3, [r0, #16]
   13e68:	60c3      	str	r3, [r0, #12]
   13e6a:	f247 3304 	movw	r3, #29444	; 0x7304
   13e6e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13e72:	6083      	str	r3, [r0, #8]
   13e74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13e78:	6043      	str	r3, [r0, #4]
   13e7a:	230a      	movs	r3, #10
   13e7c:	6003      	str	r3, [r0, #0]
   13e7e:	f247 20b4 	movw	r0, #29364	; 0x72b4
   13e82:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13e86:	2300      	movs	r3, #0
   13e88:	f7fb fb31 	bl	f4ee <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13e8c:	9011      	str	r0, [sp, #68]	; 0x44
   13e8e:	e088      	b.n	13fa2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13e90:	f64f 1010 	movw	r0, #63760	; 0xf910
   13e94:	f2c0 0001 	movt	r0, #1
   13e98:	6801      	ldr	r1, [r0, #0]
   13e9a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13e9c:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13ea0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13ea2:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13ea6:	f64f 2328 	movw	r3, #64040	; 0xfa28
   13eaa:	f2c0 0301 	movt	r3, #1
   13eae:	681b      	ldr	r3, [r3, #0]
   13eb0:	f64f 1c30 	movw	ip, #63792	; 0xf930
   13eb4:	f2c0 0c01 	movt	ip, #1
   13eb8:	f8dc c000 	ldr.w	ip, [ip]
   13ebc:	46ee      	mov	lr, sp
   13ebe:	2400      	movs	r4, #0
   13ec0:	f8ce 4000 	str.w	r4, [lr]
   13ec4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13ec8:	2201      	movs	r2, #1
   13eca:	9110      	str	r1, [sp, #64]	; 0x40
   13ecc:	4619      	mov	r1, r3
   13ece:	4663      	mov	r3, ip
   13ed0:	f7fb fa0f 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ed4:	e7ff      	b.n	13ed6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13ed6:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13eda:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13ede:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13ee2:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13ee6:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13eea:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13eee:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13ef2:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13ef6:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13efa:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13efe:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13f02:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13f06:	f240 03d3 	movw	r3, #211	; 0xd3
   13f0a:	f2c0 0301 	movt	r3, #1
   13f0e:	910f      	str	r1, [sp, #60]	; 0x3c
   13f10:	4619      	mov	r1, r3
   13f12:	920e      	str	r2, [sp, #56]	; 0x38
   13f14:	f7fc f915 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13f18:	900d      	str	r0, [sp, #52]	; 0x34
   13f1a:	910c      	str	r1, [sp, #48]	; 0x30
   13f1c:	e7ff      	b.n	13f1e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13f1e:	f240 01d3 	movw	r1, #211	; 0xd3
   13f22:	f2c0 0101 	movt	r1, #1
   13f26:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13f28:	f7fc f90b 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13f2c:	900b      	str	r0, [sp, #44]	; 0x2c
   13f2e:	910a      	str	r1, [sp, #40]	; 0x28
   13f30:	e7ff      	b.n	13f32 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13f32:	f247 1153 	movw	r1, #29011	; 0x7153
   13f36:	f2c0 0101 	movt	r1, #1
   13f3a:	980e      	ldr	r0, [sp, #56]	; 0x38
   13f3c:	f7fc f916 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13f40:	9009      	str	r0, [sp, #36]	; 0x24
   13f42:	9108      	str	r1, [sp, #32]
   13f44:	e7ff      	b.n	13f46 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13f46:	980d      	ldr	r0, [sp, #52]	; 0x34
   13f48:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13f4c:	990c      	ldr	r1, [sp, #48]	; 0x30
   13f4e:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13f52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13f54:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13f58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13f5a:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13f5e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13f62:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13f66:	f8dd e020 	ldr.w	lr, [sp, #32]
   13f6a:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13f6e:	466c      	mov	r4, sp
   13f70:	2503      	movs	r5, #3
   13f72:	6025      	str	r5, [r4, #0]
   13f74:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13f78:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13f7c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13f7e:	462a      	mov	r2, r5
   13f80:	f7fb f9b7 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13f84:	e7ff      	b.n	13f86 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13f86:	f64f 203c 	movw	r0, #64060	; 0xfa3c
   13f8a:	f2c0 0001 	movt	r0, #1
   13f8e:	f002 fdf2 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13f92:	9007      	str	r0, [sp, #28]
   13f94:	e7ff      	b.n	13f96 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13f96:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13f9a:	9907      	ldr	r1, [sp, #28]
   13f9c:	f002 fe28 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13fa0:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13fa2:	9811      	ldr	r0, [sp, #68]	; 0x44
   13fa4:	f7fb fa13 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13fa8:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13fac:	e7ff      	b.n	13fae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13fae:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13fb2:	1e41      	subs	r1, r0, #1
   13fb4:	bf18      	it	ne
   13fb6:	2101      	movne	r1, #1
   13fb8:	2801      	cmp	r0, #1
   13fba:	d001      	beq.n	13fc0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13fbc:	e7ff      	b.n	13fbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13fbe:	e005      	b.n	13fcc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13fc0:	2000      	movs	r0, #0
    Ok(())
   13fc2:	9069      	str	r0, [sp, #420]	; 0x1a4
   13fc4:	2001      	movs	r0, #1
   13fc6:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13fc8:	e008      	b.n	13fdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13fca:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13fcc:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13fd0:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13fd4:	f7fb fa6e 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13fd8:	9006      	str	r0, [sp, #24]
   13fda:	e003      	b.n	13fe4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13fdc:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13fde:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13fe2:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13fe4:	9806      	ldr	r0, [sp, #24]
   13fe6:	f7fb f9e6 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13fea:	9069      	str	r0, [sp, #420]	; 0x1a4
   13fec:	e7ff      	b.n	13fee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13fee:	e7f5      	b.n	13fdc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013ff0 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13ff0:	b580      	push	{r7, lr}
   13ff2:	b082      	sub	sp, #8
   13ff4:	9001      	str	r0, [sp, #4]
    loop {
   13ff6:	e7ff      	b.n	13ff8 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13ff8:	f247 20a4 	movw	r0, #29348	; 0x72a4
   13ffc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14000:	f7fb fa5c 	bl	f4bc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   14004:	9000      	str	r0, [sp, #0]
   14006:	e7ff      	b.n	14008 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   14008:	f64f 215c 	movw	r1, #64092	; 0xfa5c
   1400c:	f2c0 0101 	movt	r1, #1
   14010:	f64f 2368 	movw	r3, #64104	; 0xfa68
   14014:	f2c0 0301 	movt	r3, #1
   14018:	220b      	movs	r2, #11
   1401a:	9800      	ldr	r0, [sp, #0]
   1401c:	f7fb f998 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14020:	e7ff      	b.n	14022 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   14022:	f005 fced 	bl	19a00 <hal_watchdog_tickle>
   14026:	e7ff      	b.n	14028 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   14028:	e7e6      	b.n	13ff8 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

0001402a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   1402a:	b580      	push	{r7, lr}
   1402c:	b08c      	sub	sp, #48	; 0x30
   1402e:	4601      	mov	r1, r0
   14030:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   14034:	9104      	str	r1, [sp, #16]
   14036:	f000 f892 	bl	1415e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1403a:	9003      	str	r0, [sp, #12]
   1403c:	e7ff      	b.n	1403e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   1403e:	9803      	ldr	r0, [sp, #12]
   14040:	f7fb f9c5 	bl	f3ce <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   14044:	9006      	str	r0, [sp, #24]
   14046:	e7ff      	b.n	14048 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   14048:	9806      	ldr	r0, [sp, #24]
   1404a:	1e41      	subs	r1, r0, #1
   1404c:	bf18      	it	ne
   1404e:	2101      	movne	r1, #1
   14050:	2801      	cmp	r0, #1
   14052:	d001      	beq.n	14058 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   14054:	e7ff      	b.n	14056 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   14056:	e00c      	b.n	14072 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   14058:	f646 2070 	movw	r0, #27248	; 0x6a70
   1405c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14060:	9904      	ldr	r1, [sp, #16]
   14062:	f7ff f9b2 	bl	133ca <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   14066:	f88d 101d 	strb.w	r1, [sp, #29]
   1406a:	f88d 001c 	strb.w	r0, [sp, #28]
   1406e:	e00f      	b.n	14090 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   14070:	defe      	udf	#254	; 0xfe
   14072:	9806      	ldr	r0, [sp, #24]
   14074:	900b      	str	r0, [sp, #44]	; 0x2c
   14076:	f7fb fa1d 	bl	f4b4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1407a:	9002      	str	r0, [sp, #8]
   1407c:	e002      	b.n	14084 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   1407e:	9805      	ldr	r0, [sp, #20]
   14080:	b00c      	add	sp, #48	; 0x30
   14082:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   14084:	9802      	ldr	r0, [sp, #8]
   14086:	f7fb f996 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1408a:	9005      	str	r0, [sp, #20]
   1408c:	e7ff      	b.n	1408e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   1408e:	e7f6      	b.n	1407e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   14090:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   14092:	f7fb f984 	bl	f39e <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   14096:	9001      	str	r0, [sp, #4]
   14098:	e7ff      	b.n	1409a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   1409a:	9801      	ldr	r0, [sp, #4]
   1409c:	07c1      	lsls	r1, r0, #31
   1409e:	2900      	cmp	r1, #0
   140a0:	d105      	bne.n	140ae <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   140a2:	e7ff      	b.n	140a4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   140a4:	2000      	movs	r0, #0
    Ok(())
   140a6:	9005      	str	r0, [sp, #20]
   140a8:	2001      	movs	r0, #1
   140aa:	9005      	str	r0, [sp, #20]
}
   140ac:	e7e7      	b.n	1407e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   140ae:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   140b2:	9008      	str	r0, [sp, #32]
   140b4:	9808      	ldr	r0, [sp, #32]
   140b6:	9005      	str	r0, [sp, #20]
   140b8:	e7e1      	b.n	1407e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

000140ba <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   140ba:	b580      	push	{r7, lr}
   140bc:	b08e      	sub	sp, #56	; 0x38
   140be:	900a      	str	r0, [sp, #40]	; 0x28
   140c0:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   140c2:	f646 2270 	movw	r2, #27248	; 0x6a70
   140c6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   140ca:	9007      	str	r0, [sp, #28]
   140cc:	4610      	mov	r0, r2
   140ce:	9106      	str	r1, [sp, #24]
   140d0:	f7ff f961 	bl	13396 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   140d4:	9005      	str	r0, [sp, #20]
   140d6:	9104      	str	r1, [sp, #16]
   140d8:	e7ff      	b.n	140da <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   140da:	9805      	ldr	r0, [sp, #20]
   140dc:	9904      	ldr	r1, [sp, #16]
   140de:	f7fa fcab 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140e2:	9003      	str	r0, [sp, #12]
   140e4:	e7ff      	b.n	140e6 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   140e6:	9803      	ldr	r0, [sp, #12]
   140e8:	2800      	cmp	r0, #0
   140ea:	d00a      	beq.n	14102 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   140ec:	e7ff      	b.n	140ee <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   140ee:	f646 2078 	movw	r0, #27256	; 0x6a78
   140f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140f6:	9907      	ldr	r1, [sp, #28]
   140f8:	9a06      	ldr	r2, [sp, #24]
   140fa:	f7ff f958 	bl	133ae <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   140fe:	9002      	str	r0, [sp, #8]
   14100:	e00b      	b.n	1411a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   14102:	f64f 2078 	movw	r0, #64120	; 0xfa78
   14106:	f2c0 0001 	movt	r0, #1
   1410a:	f64f 22ac 	movw	r2, #64172	; 0xfaac
   1410e:	f2c0 0201 	movt	r2, #1
   14112:	2132      	movs	r1, #50	; 0x32
   14114:	f002 fd36 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14118:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1411a:	9802      	ldr	r0, [sp, #8]
   1411c:	f000 0001 	and.w	r0, r0, #1
   14120:	f7fb f94f 	bl	f3c2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14124:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   14128:	e7ff      	b.n	1412a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   1412a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   1412e:	07c1      	lsls	r1, r0, #31
   14130:	2900      	cmp	r1, #0
   14132:	d001      	beq.n	14138 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   14134:	e7ff      	b.n	14136 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   14136:	e005      	b.n	14144 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   14138:	2000      	movs	r0, #0
    Ok(())
   1413a:	9008      	str	r0, [sp, #32]
   1413c:	2001      	movs	r0, #1
   1413e:	9008      	str	r0, [sp, #32]
}
   14140:	e004      	b.n	1414c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14142:	defe      	udf	#254	; 0xfe
   14144:	f7ff f905 	bl	13352 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   14148:	9001      	str	r0, [sp, #4]
   1414a:	e002      	b.n	14152 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   1414c:	9808      	ldr	r0, [sp, #32]
   1414e:	b00e      	add	sp, #56	; 0x38
   14150:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14152:	9801      	ldr	r0, [sp, #4]
   14154:	f7fb f92f 	bl	f3b6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14158:	9008      	str	r0, [sp, #32]
   1415a:	e7ff      	b.n	1415c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   1415c:	e7f6      	b.n	1414c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

0001415e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1415e:	b580      	push	{r7, lr}
   14160:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   14162:	f646 2070 	movw	r0, #27248	; 0x6a70
   14166:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1416a:	f7ff f914 	bl	13396 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1416e:	900b      	str	r0, [sp, #44]	; 0x2c
   14170:	910a      	str	r1, [sp, #40]	; 0x28
   14172:	e016      	b.n	141a2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   14174:	2001      	movs	r0, #1
   14176:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1417a:	e00c      	b.n	14196 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1417c:	2000      	movs	r0, #0
   1417e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   14182:	e008      	b.n	14196 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   14184:	f646 2078 	movw	r0, #27256	; 0x6a78
   14188:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1418c:	f7ff f8f7 	bl	1337e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14190:	9009      	str	r0, [sp, #36]	; 0x24
   14192:	9108      	str	r1, [sp, #32]
   14194:	e00f      	b.n	141b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   14196:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   1419a:	07c0      	lsls	r0, r0, #31
   1419c:	2800      	cmp	r0, #0
   1419e:	d11d      	bne.n	141dc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   141a0:	e013      	b.n	141ca <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   141a2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   141a4:	990a      	ldr	r1, [sp, #40]	; 0x28
   141a6:	f7fa fc47 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141aa:	9007      	str	r0, [sp, #28]
   141ac:	e7ff      	b.n	141ae <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   141ae:	9807      	ldr	r0, [sp, #28]
   141b0:	2800      	cmp	r0, #0
   141b2:	d0e7      	beq.n	14184 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   141b4:	e7e2      	b.n	1417c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   141b6:	9809      	ldr	r0, [sp, #36]	; 0x24
   141b8:	9908      	ldr	r1, [sp, #32]
   141ba:	f7fa fc3d 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141be:	9006      	str	r0, [sp, #24]
   141c0:	e7ff      	b.n	141c2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   141c2:	9806      	ldr	r0, [sp, #24]
   141c4:	2800      	cmp	r0, #0
   141c6:	d0d5      	beq.n	14174 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   141c8:	e7d8      	b.n	1417c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   141ca:	f646 2070 	movw	r0, #27248	; 0x6a70
   141ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
   141d2:	f7ff f8e0 	bl	13396 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   141d6:	9005      	str	r0, [sp, #20]
   141d8:	9104      	str	r1, [sp, #16]
   141da:	e007      	b.n	141ec <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   141dc:	2000      	movs	r0, #0
        return Ok(());
   141de:	900c      	str	r0, [sp, #48]	; 0x30
   141e0:	2001      	movs	r0, #1
   141e2:	900c      	str	r0, [sp, #48]	; 0x30
   141e4:	e7ff      	b.n	141e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   141e6:	980c      	ldr	r0, [sp, #48]	; 0x30
   141e8:	b010      	add	sp, #64	; 0x40
   141ea:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   141ec:	9804      	ldr	r0, [sp, #16]
   141ee:	2800      	cmp	r0, #0
   141f0:	d03f      	beq.n	14272 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   141f2:	e7ff      	b.n	141f4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   141f4:	9805      	ldr	r0, [sp, #20]
   141f6:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   141f8:	f646 2078 	movw	r0, #27256	; 0x6a78
   141fc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14200:	9103      	str	r1, [sp, #12]
   14202:	f7ff f8bc 	bl	1337e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14206:	9002      	str	r0, [sp, #8]
   14208:	9101      	str	r1, [sp, #4]
   1420a:	e7ff      	b.n	1420c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1420c:	9803      	ldr	r0, [sp, #12]
   1420e:	9902      	ldr	r1, [sp, #8]
   14210:	9a01      	ldr	r2, [sp, #4]
   14212:	f000 f837 	bl	14284 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14216:	900e      	str	r0, [sp, #56]	; 0x38
   14218:	e7ff      	b.n	1421a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   1421a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1421c:	2801      	cmp	r0, #1
   1421e:	d107      	bne.n	14230 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   14220:	e7ff      	b.n	14222 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   14222:	f646 2070 	movw	r0, #27248	; 0x6a70
   14226:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1422a:	f7ff f8e8 	bl	133fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1422e:	e014      	b.n	1425a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   14230:	980e      	ldr	r0, [sp, #56]	; 0x38
   14232:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   14234:	f646 2170 	movw	r1, #27248	; 0x6a70
   14238:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1423c:	9000      	str	r0, [sp, #0]
   1423e:	4608      	mov	r0, r1
   14240:	f7ff f8dd 	bl	133fe <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   14244:	e7ff      	b.n	14246 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   14246:	f646 2078 	movw	r0, #27256	; 0x6a78
   1424a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1424e:	f7ff f8ce 	bl	133ee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   14252:	e7ff      	b.n	14254 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   14254:	9800      	ldr	r0, [sp, #0]
   14256:	900c      	str	r0, [sp, #48]	; 0x30
   14258:	e7c5      	b.n	141e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   1425a:	f646 2078 	movw	r0, #27256	; 0x6a78
   1425e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14262:	f7ff f8c4 	bl	133ee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   14266:	e7ff      	b.n	14268 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   14268:	2000      	movs	r0, #0
    Ok(())
   1426a:	900c      	str	r0, [sp, #48]	; 0x30
   1426c:	2001      	movs	r0, #1
   1426e:	900c      	str	r0, [sp, #48]	; 0x30
}
   14270:	e7b9      	b.n	141e6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14272:	f64f 20bc 	movw	r0, #64188	; 0xfabc
   14276:	f2c0 0001 	movt	r0, #1
   1427a:	2100      	movs	r1, #0
   1427c:	9a04      	ldr	r2, [sp, #16]
   1427e:	f002 fc97 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   14282:	defe      	udf	#254	; 0xfe

00014284 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   14284:	b580      	push	{r7, lr}
   14286:	b0a0      	sub	sp, #128	; 0x80
   14288:	4603      	mov	r3, r0
   1428a:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   1428e:	9116      	str	r1, [sp, #88]	; 0x58
   14290:	9217      	str	r2, [sp, #92]	; 0x5c
   14292:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   14296:	9018      	str	r0, [sp, #96]	; 0x60
   14298:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1429c:	fba0 0c0c 	umull	r0, ip, r0, ip
   142a0:	f1bc 0f00 	cmp.w	ip, #0
   142a4:	920f      	str	r2, [sp, #60]	; 0x3c
   142a6:	910e      	str	r1, [sp, #56]	; 0x38
   142a8:	900d      	str	r0, [sp, #52]	; 0x34
   142aa:	f040 80c8 	bne.w	1443e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   142ae:	e7ff      	b.n	142b0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   142b0:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   142b4:	f2c1 0062 	movt	r0, #4194	; 0x1062
   142b8:	990d      	ldr	r1, [sp, #52]	; 0x34
   142ba:	fba1 0200 	umull	r0, r2, r1, r0
   142be:	0991      	lsrs	r1, r2, #6
   142c0:	f247 2284 	movw	r2, #29316	; 0x7284
   142c4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   142c8:	900c      	str	r0, [sp, #48]	; 0x30
   142ca:	4610      	mov	r0, r2
   142cc:	f006 fc98 	bl	1ac00 <os_sem_pend>
   142d0:	e7ff      	b.n	142d2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   142d2:	980e      	ldr	r0, [sp, #56]	; 0x38
   142d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   142d6:	f7fa fbaf 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   142da:	900b      	str	r0, [sp, #44]	; 0x2c
   142dc:	e7ff      	b.n	142de <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   142de:	2001      	movs	r0, #1
   142e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   142e2:	fa10 f081 	uxtah	r0, r0, r1
   142e6:	b282      	uxth	r2, r0
   142e8:	4603      	mov	r3, r0
   142ea:	4282      	cmp	r2, r0
   142ec:	930a      	str	r3, [sp, #40]	; 0x28
   142ee:	f040 80b2 	bne.w	14456 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   142f2:	e7ff      	b.n	142f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   142f4:	980a      	ldr	r0, [sp, #40]	; 0x28
   142f6:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   142fa:	b280      	uxth	r0, r0
   142fc:	2100      	movs	r1, #0
   142fe:	f006 f98d 	bl	1a61c <os_msys_get_pkthdr>
   14302:	4601      	mov	r1, r0
   14304:	901a      	str	r0, [sp, #104]	; 0x68
   14306:	9109      	str	r1, [sp, #36]	; 0x24
   14308:	e7ff      	b.n	1430a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   1430a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1430c:	f000 fc7c 	bl	14c08 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14310:	9008      	str	r0, [sp, #32]
   14312:	e7ff      	b.n	14314 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14314:	9808      	ldr	r0, [sp, #32]
   14316:	07c1      	lsls	r1, r0, #31
   14318:	2900      	cmp	r1, #0
   1431a:	d106      	bne.n	1432a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1431c:	e7ff      	b.n	1431e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1431e:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   14322:	901b      	str	r0, [sp, #108]	; 0x6c
   14324:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14326:	9107      	str	r1, [sp, #28]
   14328:	e010      	b.n	1434c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1432a:	f247 2084 	movw	r0, #29316	; 0x7284
   1432e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14332:	f006 fc33 	bl	1ab9c <os_sem_release>
   14336:	e7ff      	b.n	14338 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   14338:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1433c:	9012      	str	r0, [sp, #72]	; 0x48
   1433e:	9812      	ldr	r0, [sp, #72]	; 0x48
   14340:	9011      	str	r0, [sp, #68]	; 0x44
   14342:	e002      	b.n	1434a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   14344:	9811      	ldr	r0, [sp, #68]	; 0x44
   14346:	b020      	add	sp, #128	; 0x80
   14348:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   1434a:	e7fb      	b.n	14344 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1434c:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1434e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14350:	9907      	ldr	r1, [sp, #28]
   14352:	f005 ffbb 	bl	1a2cc <os_mbuf_append>
   14356:	4601      	mov	r1, r0
   14358:	901c      	str	r0, [sp, #112]	; 0x70
   1435a:	9106      	str	r1, [sp, #24]
   1435c:	e7ff      	b.n	1435e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1435e:	9806      	ldr	r0, [sp, #24]
   14360:	2800      	cmp	r0, #0
   14362:	d106      	bne.n	14372 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   14364:	e7ff      	b.n	14366 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   14366:	980e      	ldr	r0, [sp, #56]	; 0x38
   14368:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1436a:	f7fa fb6d 	bl	ea48 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1436e:	9005      	str	r0, [sp, #20]
   14370:	e011      	b.n	14396 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14372:	9809      	ldr	r0, [sp, #36]	; 0x24
   14374:	f005 ff8e 	bl	1a294 <os_mbuf_free_chain>
   14378:	e7ff      	b.n	1437a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1437a:	f247 2084 	movw	r0, #29316	; 0x7284
   1437e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14382:	f006 fc0b 	bl	1ab9c <os_sem_release>
   14386:	e7ff      	b.n	14388 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   14388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1438c:	9013      	str	r0, [sp, #76]	; 0x4c
   1438e:	9813      	ldr	r0, [sp, #76]	; 0x4c
   14390:	9011      	str	r0, [sp, #68]	; 0x44
   14392:	e7ff      	b.n	14394 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   14394:	e7d9      	b.n	1434a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   14396:	9805      	ldr	r0, [sp, #20]
   14398:	901d      	str	r0, [sp, #116]	; 0x74
   1439a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1439c:	9104      	str	r1, [sp, #16]
   1439e:	e7ff      	b.n	143a0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   143a0:	980e      	ldr	r0, [sp, #56]	; 0x38
   143a2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   143a4:	f7fa fb48 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   143a8:	9003      	str	r0, [sp, #12]
   143aa:	e7ff      	b.n	143ac <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   143ac:	9803      	ldr	r0, [sp, #12]
   143ae:	b282      	uxth	r2, r0
   143b0:	9809      	ldr	r0, [sp, #36]	; 0x24
   143b2:	9904      	ldr	r1, [sp, #16]
   143b4:	f005 ff8a 	bl	1a2cc <os_mbuf_append>
   143b8:	4601      	mov	r1, r0
   143ba:	901e      	str	r0, [sp, #120]	; 0x78
   143bc:	9102      	str	r1, [sp, #8]
   143be:	e7ff      	b.n	143c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   143c0:	9802      	ldr	r0, [sp, #8]
   143c2:	2800      	cmp	r0, #0
   143c4:	d10f      	bne.n	143e6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   143c6:	e7ff      	b.n	143c8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   143c8:	f247 208c 	movw	r0, #29324	; 0x728c
   143cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   143d0:	f247 21a4 	movw	r1, #29348	; 0x72a4
   143d4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   143d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   143da:	f005 fef9 	bl	1a1d0 <os_mqueue_put>
   143de:	4601      	mov	r1, r0
   143e0:	901f      	str	r0, [sp, #124]	; 0x7c
   143e2:	9101      	str	r1, [sp, #4]
   143e4:	e011      	b.n	1440a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   143e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   143e8:	f005 ff54 	bl	1a294 <os_mbuf_free_chain>
   143ec:	e7ff      	b.n	143ee <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   143ee:	f247 2084 	movw	r0, #29316	; 0x7284
   143f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   143f6:	f006 fbd1 	bl	1ab9c <os_sem_release>
   143fa:	e7ff      	b.n	143fc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   143fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14400:	9014      	str	r0, [sp, #80]	; 0x50
   14402:	9814      	ldr	r0, [sp, #80]	; 0x50
   14404:	9011      	str	r0, [sp, #68]	; 0x44
   14406:	e7ff      	b.n	14408 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   14408:	e7c4      	b.n	14394 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1440a:	9801      	ldr	r0, [sp, #4]
   1440c:	2800      	cmp	r0, #0
   1440e:	d105      	bne.n	1441c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   14410:	e7ff      	b.n	14412 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   14412:	2000      	movs	r0, #0
    Ok(())
   14414:	9011      	str	r0, [sp, #68]	; 0x44
   14416:	2001      	movs	r0, #1
   14418:	9011      	str	r0, [sp, #68]	; 0x44
}
   1441a:	e793      	b.n	14344 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1441c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1441e:	f005 ff39 	bl	1a294 <os_mbuf_free_chain>
   14422:	e7ff      	b.n	14424 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14424:	f247 2084 	movw	r0, #29316	; 0x7284
   14428:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1442c:	f006 fbb6 	bl	1ab9c <os_sem_release>
   14430:	e7ff      	b.n	14432 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   14432:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   14436:	9015      	str	r0, [sp, #84]	; 0x54
   14438:	9815      	ldr	r0, [sp, #84]	; 0x54
   1443a:	9011      	str	r0, [sp, #68]	; 0x44
   1443c:	e7e4      	b.n	14408 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1443e:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   14442:	f2c0 0001 	movt	r0, #1
   14446:	f64f 22cc 	movw	r2, #64204	; 0xfacc
   1444a:	f2c0 0201 	movt	r2, #1
   1444e:	2121      	movs	r1, #33	; 0x21
   14450:	f002 fb98 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14454:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14456:	f64f 3020 	movw	r0, #64288	; 0xfb20
   1445a:	f2c0 0001 	movt	r0, #1
   1445e:	f64f 3204 	movw	r2, #64260	; 0xfb04
   14462:	f2c0 0201 	movt	r2, #1
   14466:	211c      	movs	r1, #28
   14468:	f002 fb8c 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1446c:	defe      	udf	#254	; 0xfe

0001446e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1446e:	b5b0      	push	{r4, r5, r7, lr}
   14470:	b0c4      	sub	sp, #272	; 0x110
   14472:	9038      	str	r0, [sp, #224]	; 0xe0
   14474:	e7ff      	b.n	14476 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   14476:	f247 208c 	movw	r0, #29324	; 0x728c
   1447a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1447e:	f005 fe94 	bl	1a1aa <os_mqueue_get>
   14482:	4601      	mov	r1, r0
   14484:	9039      	str	r0, [sp, #228]	; 0xe4
   14486:	911b      	str	r1, [sp, #108]	; 0x6c
   14488:	e7ff      	b.n	1448a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   1448a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1448c:	f000 fbbc 	bl	14c08 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14490:	901a      	str	r0, [sp, #104]	; 0x68
   14492:	e7ff      	b.n	14494 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   14494:	981a      	ldr	r0, [sp, #104]	; 0x68
   14496:	07c1      	lsls	r1, r0, #31
   14498:	2900      	cmp	r1, #0
   1449a:	d106      	bne.n	144aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   1449c:	e7ff      	b.n	1449e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   1449e:	981b      	ldr	r0, [sp, #108]	; 0x6c
   144a0:	901c      	str	r0, [sp, #112]	; 0x70
   144a2:	2101      	movs	r1, #1
        let mut first_byte = true;
   144a4:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   144a8:	e001      	b.n	144ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   144aa:	b044      	add	sp, #272	; 0x110
   144ac:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   144ae:	981c      	ldr	r0, [sp, #112]	; 0x70
   144b0:	f000 fbaa 	bl	14c08 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   144b4:	9019      	str	r0, [sp, #100]	; 0x64
   144b6:	e7ff      	b.n	144b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   144b8:	9819      	ldr	r0, [sp, #100]	; 0x64
   144ba:	07c1      	lsls	r1, r0, #31
   144bc:	2900      	cmp	r1, #0
   144be:	d004      	beq.n	144ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   144c0:	e7ff      	b.n	144c2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   144c2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   144c4:	f005 fee6 	bl	1a294 <os_mbuf_free_chain>
   144c8:	e0aa      	b.n	14620 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   144ca:	981c      	ldr	r0, [sp, #112]	; 0x70
   144cc:	6800      	ldr	r0, [r0, #0]
   144ce:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   144d0:	991c      	ldr	r1, [sp, #112]	; 0x70
   144d2:	88c9      	ldrh	r1, [r1, #6]
   144d4:	460a      	mov	r2, r1
   144d6:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   144da:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   144de:	07c9      	lsls	r1, r1, #31
   144e0:	2900      	cmp	r1, #0
   144e2:	9018      	str	r0, [sp, #96]	; 0x60
   144e4:	9217      	str	r2, [sp, #92]	; 0x5c
   144e6:	d105      	bne.n	144f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   144e8:	e7ff      	b.n	144ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   144ea:	9818      	ldr	r0, [sp, #96]	; 0x60
   144ec:	903e      	str	r0, [sp, #248]	; 0xf8
   144ee:	983e      	ldr	r0, [sp, #248]	; 0xf8
   144f0:	9016      	str	r0, [sp, #88]	; 0x58
   144f2:	e07b      	b.n	145ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   144f4:	2000      	movs	r0, #0
                first_byte = false;
   144f6:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   144fa:	9818      	ldr	r0, [sp, #96]	; 0x60
   144fc:	903c      	str	r0, [sp, #240]	; 0xf0
   144fe:	983c      	ldr	r0, [sp, #240]	; 0xf0
   14500:	9015      	str	r0, [sp, #84]	; 0x54
   14502:	e7ff      	b.n	14504 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14504:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14506:	9915      	ldr	r1, [sp, #84]	; 0x54
   14508:	9014      	str	r0, [sp, #80]	; 0x50
   1450a:	4608      	mov	r0, r1
   1450c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1450e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14510:	f000 f921 	bl	14756 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14514:	9013      	str	r0, [sp, #76]	; 0x4c
   14516:	e7ff      	b.n	14518 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   14518:	f64f 313c 	movw	r1, #64316	; 0xfb3c
   1451c:	f2c0 0101 	movt	r1, #1
   14520:	f64f 3348 	movw	r3, #64328	; 0xfb48
   14524:	f2c0 0301 	movt	r3, #1
   14528:	220c      	movs	r2, #12
   1452a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1452c:	f7fa ff10 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14530:	e7ff      	b.n	14532 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14532:	9818      	ldr	r0, [sp, #96]	; 0x60
   14534:	7801      	ldrb	r1, [r0, #0]
   14536:	2901      	cmp	r1, #1
   14538:	d013      	beq.n	14562 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1453a:	e01a      	b.n	14572 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1453c:	2001      	movs	r0, #1
   1453e:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   14542:	e008      	b.n	14556 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   14544:	2000      	movs	r0, #0
   14546:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   1454a:	e004      	b.n	14556 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   1454c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1454e:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14550:	2929      	cmp	r1, #41	; 0x29
   14552:	d0f3      	beq.n	1453c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14554:	e7f6      	b.n	14544 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   14556:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   1455a:	07c0      	lsls	r0, r0, #31
   1455c:	2800      	cmp	r0, #0
   1455e:	d113      	bne.n	14588 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   14560:	e017      	b.n	14592 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   14562:	2001      	movs	r0, #1
   14564:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14568:	e008      	b.n	1457c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   1456a:	2000      	movs	r0, #0
   1456c:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14570:	e004      	b.n	1457c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   14572:	9818      	ldr	r0, [sp, #96]	; 0x60
   14574:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14576:	2911      	cmp	r1, #17
   14578:	d0f3      	beq.n	14562 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1457a:	e7f6      	b.n	1456a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1457c:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   14580:	07c0      	lsls	r0, r0, #31
   14582:	2800      	cmp	r0, #0
   14584:	d1da      	bne.n	1453c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14586:	e7e1      	b.n	1454c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   14588:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   1458a:	f000 fb13 	bl	14bb4 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   1458e:	e7ff      	b.n	14590 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14590:	e7ff      	b.n	14592 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   14592:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   14594:	9818      	ldr	r0, [sp, #96]	; 0x60
   14596:	f7fa f9bf 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1459a:	9012      	str	r0, [sp, #72]	; 0x48
   1459c:	e7ff      	b.n	1459e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   1459e:	9812      	ldr	r0, [sp, #72]	; 0x48
   145a0:	903d      	str	r0, [sp, #244]	; 0xf4
   145a2:	983d      	ldr	r0, [sp, #244]	; 0xf4
   145a4:	9011      	str	r0, [sp, #68]	; 0x44
   145a6:	e7ff      	b.n	145a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   145a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   145ac:	9917      	ldr	r1, [sp, #92]	; 0x5c
   145ae:	fa10 f081 	uxtah	r0, r0, r1
   145b2:	b282      	uxth	r2, r0
   145b4:	4603      	mov	r3, r0
   145b6:	4282      	cmp	r2, r0
   145b8:	9310      	str	r3, [sp, #64]	; 0x40
   145ba:	f040 80c0 	bne.w	1473e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   145be:	e7ff      	b.n	145c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   145c0:	9810      	ldr	r0, [sp, #64]	; 0x40
   145c2:	b281      	uxth	r1, r0
   145c4:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   145c6:	9811      	ldr	r0, [sp, #68]	; 0x44
   145c8:	f000 f8c5 	bl	14756 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   145cc:	900f      	str	r0, [sp, #60]	; 0x3c
   145ce:	e7ff      	b.n	145d0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   145d0:	f64f 313c 	movw	r1, #64316	; 0xfb3c
   145d4:	f2c0 0101 	movt	r1, #1
   145d8:	f64f 3394 	movw	r3, #64404	; 0xfb94
   145dc:	f2c0 0301 	movt	r3, #1
   145e0:	220c      	movs	r2, #12
   145e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   145e4:	f7fa feb4 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   145e8:	e7ff      	b.n	145ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   145ea:	e015      	b.n	14618 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   145ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
   145ee:	b281      	uxth	r1, r0
   145f0:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   145f2:	9816      	ldr	r0, [sp, #88]	; 0x58
   145f4:	f000 f8af 	bl	14756 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   145f8:	900e      	str	r0, [sp, #56]	; 0x38
   145fa:	e7ff      	b.n	145fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   145fc:	f64f 313c 	movw	r1, #64316	; 0xfb3c
   14600:	f2c0 0101 	movt	r1, #1
   14604:	f64f 33a4 	movw	r3, #64420	; 0xfba4
   14608:	f2c0 0301 	movt	r3, #1
   1460c:	220c      	movs	r2, #12
   1460e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14610:	f7fa fe9e 	bl	f350 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14614:	e7ff      	b.n	14616 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14616:	e7ff      	b.n	14618 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   14618:	981c      	ldr	r0, [sp, #112]	; 0x70
   1461a:	68c0      	ldr	r0, [r0, #12]
   1461c:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1461e:	e746      	b.n	144ae <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   14620:	f247 2084 	movw	r0, #29316	; 0x7284
   14624:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14628:	f006 fab8 	bl	1ab9c <os_sem_release>
   1462c:	901e      	str	r0, [sp, #120]	; 0x78
   1462e:	e7ff      	b.n	14630 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   14630:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   14634:	f2c0 0001 	movt	r0, #1
   14638:	6800      	ldr	r0, [r0, #0]
   1463a:	a91e      	add	r1, sp, #120	; 0x78
   1463c:	911f      	str	r1, [sp, #124]	; 0x7c
   1463e:	9020      	str	r0, [sp, #128]	; 0x80
   14640:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14642:	903f      	str	r0, [sp, #252]	; 0xfc
   14644:	9920      	ldr	r1, [sp, #128]	; 0x80
   14646:	9140      	str	r1, [sp, #256]	; 0x100
   14648:	6802      	ldr	r2, [r0, #0]
   1464a:	680b      	ldr	r3, [r1, #0]
   1464c:	429a      	cmp	r2, r3
   1464e:	900d      	str	r0, [sp, #52]	; 0x34
   14650:	910c      	str	r1, [sp, #48]	; 0x30
   14652:	d101      	bne.n	14658 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   14654:	e7ff      	b.n	14656 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   14656:	e70e      	b.n	14476 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   14658:	f64f 1010 	movw	r0, #63760	; 0xf910
   1465c:	f2c0 0001 	movt	r0, #1
   14660:	6801      	ldr	r1, [r0, #0]
   14662:	980d      	ldr	r0, [sp, #52]	; 0x34
   14664:	9030      	str	r0, [sp, #192]	; 0xc0
   14666:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14668:	9231      	str	r2, [sp, #196]	; 0xc4
   1466a:	f64f 2328 	movw	r3, #64040	; 0xfa28
   1466e:	f2c0 0301 	movt	r3, #1
   14672:	681b      	ldr	r3, [r3, #0]
   14674:	f64f 1c30 	movw	ip, #63792	; 0xf930
   14678:	f2c0 0c01 	movt	ip, #1
   1467c:	f8dc c000 	ldr.w	ip, [ip]
   14680:	46ee      	mov	lr, sp
   14682:	2400      	movs	r4, #0
   14684:	f8ce 4000 	str.w	r4, [lr]
   14688:	a832      	add	r0, sp, #200	; 0xc8
   1468a:	2201      	movs	r2, #1
   1468c:	910b      	str	r1, [sp, #44]	; 0x2c
   1468e:	4619      	mov	r1, r3
   14690:	4663      	mov	r3, ip
   14692:	f7fa fe2e 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14696:	e7ff      	b.n	14698 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   14698:	a830      	add	r0, sp, #192	; 0xc0
   1469a:	902d      	str	r0, [sp, #180]	; 0xb4
   1469c:	a831      	add	r0, sp, #196	; 0xc4
   1469e:	902e      	str	r0, [sp, #184]	; 0xb8
   146a0:	a832      	add	r0, sp, #200	; 0xc8
   146a2:	902f      	str	r0, [sp, #188]	; 0xbc
   146a4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   146a6:	9041      	str	r0, [sp, #260]	; 0x104
   146a8:	992e      	ldr	r1, [sp, #184]	; 0xb8
   146aa:	9142      	str	r1, [sp, #264]	; 0x108
   146ac:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   146ae:	9243      	str	r2, [sp, #268]	; 0x10c
   146b0:	f240 03d3 	movw	r3, #211	; 0xd3
   146b4:	f2c0 0301 	movt	r3, #1
   146b8:	910a      	str	r1, [sp, #40]	; 0x28
   146ba:	4619      	mov	r1, r3
   146bc:	9209      	str	r2, [sp, #36]	; 0x24
   146be:	f7fb fd40 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   146c2:	9008      	str	r0, [sp, #32]
   146c4:	9107      	str	r1, [sp, #28]
   146c6:	e7ff      	b.n	146c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   146c8:	f240 01d3 	movw	r1, #211	; 0xd3
   146cc:	f2c0 0101 	movt	r1, #1
   146d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   146d2:	f7fb fd36 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   146d6:	9006      	str	r0, [sp, #24]
   146d8:	9105      	str	r1, [sp, #20]
   146da:	e7ff      	b.n	146dc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   146dc:	f247 1153 	movw	r1, #29011	; 0x7153
   146e0:	f2c0 0101 	movt	r1, #1
   146e4:	9809      	ldr	r0, [sp, #36]	; 0x24
   146e6:	f7fb fd41 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   146ea:	9004      	str	r0, [sp, #16]
   146ec:	9103      	str	r1, [sp, #12]
   146ee:	e7ff      	b.n	146f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   146f0:	9808      	ldr	r0, [sp, #32]
   146f2:	9027      	str	r0, [sp, #156]	; 0x9c
   146f4:	9907      	ldr	r1, [sp, #28]
   146f6:	9128      	str	r1, [sp, #160]	; 0xa0
   146f8:	9a06      	ldr	r2, [sp, #24]
   146fa:	9229      	str	r2, [sp, #164]	; 0xa4
   146fc:	9b05      	ldr	r3, [sp, #20]
   146fe:	932a      	str	r3, [sp, #168]	; 0xa8
   14700:	f8dd c010 	ldr.w	ip, [sp, #16]
   14704:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14708:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1470c:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   14710:	466c      	mov	r4, sp
   14712:	2503      	movs	r5, #3
   14714:	6025      	str	r5, [r4, #0]
   14716:	a821      	add	r0, sp, #132	; 0x84
   14718:	ab27      	add	r3, sp, #156	; 0x9c
   1471a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1471c:	462a      	mov	r2, r5
   1471e:	f7fa fde8 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14722:	e7ff      	b.n	14724 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14724:	f64f 30b4 	movw	r0, #64436	; 0xfbb4
   14728:	f2c0 0001 	movt	r0, #1
   1472c:	f002 fa23 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14730:	9002      	str	r0, [sp, #8]
   14732:	e7ff      	b.n	14734 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14734:	a821      	add	r0, sp, #132	; 0x84
   14736:	9902      	ldr	r1, [sp, #8]
   14738:	f002 fa5a 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1473c:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1473e:	f64f 3070 	movw	r0, #64368	; 0xfb70
   14742:	f2c0 0001 	movt	r0, #1
   14746:	f64f 3258 	movw	r2, #64344	; 0xfb58
   1474a:	f2c0 0201 	movt	r2, #1
   1474e:	2121      	movs	r1, #33	; 0x21
   14750:	f002 fa18 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14754:	defe      	udf	#254	; 0xfe

00014756 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   14756:	b5b0      	push	{r4, r5, r7, lr}
   14758:	b0e8      	sub	sp, #416	; 0x1a0
   1475a:	4613      	mov	r3, r2
   1475c:	9058      	str	r0, [sp, #352]	; 0x160
   1475e:	9159      	str	r1, [sp, #356]	; 0x164
   14760:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   14764:	2900      	cmp	r1, #0
   14766:	9121      	str	r1, [sp, #132]	; 0x84
   14768:	9020      	str	r0, [sp, #128]	; 0x80
   1476a:	931f      	str	r3, [sp, #124]	; 0x7c
   1476c:	d004      	beq.n	14778 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1476e:	e7ff      	b.n	14770 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   14770:	9821      	ldr	r0, [sp, #132]	; 0x84
   14772:	2801      	cmp	r0, #1
   14774:	db0d      	blt.n	14792 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   14776:	e007      	b.n	14788 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   14778:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   1477a:	9022      	str	r0, [sp, #136]	; 0x88
   1477c:	2001      	movs	r0, #1
   1477e:	9022      	str	r0, [sp, #136]	; 0x88
   14780:	e7ff      	b.n	14782 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   14782:	9822      	ldr	r0, [sp, #136]	; 0x88
   14784:	b068      	add	sp, #416	; 0x1a0
   14786:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   14788:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1478a:	07c1      	lsls	r1, r0, #31
   1478c:	2900      	cmp	r1, #0
   1478e:	d10f      	bne.n	147b0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   14790:	e00b      	b.n	147aa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   14792:	f64f 30c4 	movw	r0, #64452	; 0xfbc4
   14796:	f2c0 0001 	movt	r0, #1
   1479a:	f64f 32d0 	movw	r2, #64464	; 0xfbd0
   1479e:	f2c0 0201 	movt	r2, #1
   147a2:	210b      	movs	r1, #11
   147a4:	f002 f9ee 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147a8:	defe      	udf	#254	; 0xfe
   147aa:	2001      	movs	r0, #1
        else { 1 }
   147ac:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   147ae:	e002      	b.n	147b6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   147b0:	2000      	movs	r0, #0
   147b2:	9023      	str	r0, [sp, #140]	; 0x8c
   147b4:	e7ff      	b.n	147b6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   147b6:	9923      	ldr	r1, [sp, #140]	; 0x8c
   147b8:	2012      	movs	r0, #18
   147ba:	f004 fb51 	bl	18e60 <hal_gpio_write>
   147be:	e7ff      	b.n	147c0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   147c0:	2019      	movs	r0, #25
   147c2:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   147c4:	f004 fb4c 	bl	18e60 <hal_gpio_write>
   147c8:	e7ff      	b.n	147ca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   147ca:	9821      	ldr	r0, [sp, #132]	; 0x84
   147cc:	2801      	cmp	r0, #1
   147ce:	d005      	beq.n	147dc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   147d0:	e7ff      	b.n	147d2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   147d2:	9820      	ldr	r0, [sp, #128]	; 0x80
   147d4:	9061      	str	r0, [sp, #388]	; 0x184
   147d6:	9961      	ldr	r1, [sp, #388]	; 0x184
   147d8:	911e      	str	r1, [sp, #120]	; 0x78
   147da:	e094      	b.n	14906 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   147dc:	9820      	ldr	r0, [sp, #128]	; 0x80
   147de:	905b      	str	r0, [sp, #364]	; 0x16c
   147e0:	995b      	ldr	r1, [sp, #364]	; 0x16c
   147e2:	911d      	str	r1, [sp, #116]	; 0x74
   147e4:	e7ff      	b.n	147e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   147e6:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   147e8:	901c      	str	r0, [sp, #112]	; 0x70
   147ea:	991d      	ldr	r1, [sp, #116]	; 0x74
   147ec:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   147ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
   147f0:	f004 ffe4 	bl	197bc <hal_spi_txrx>
   147f4:	9024      	str	r0, [sp, #144]	; 0x90
   147f6:	e7ff      	b.n	147f8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   147f8:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   147fc:	f2c0 0001 	movt	r0, #1
   14800:	6800      	ldr	r0, [r0, #0]
   14802:	a924      	add	r1, sp, #144	; 0x90
   14804:	9125      	str	r1, [sp, #148]	; 0x94
   14806:	9026      	str	r0, [sp, #152]	; 0x98
   14808:	9825      	ldr	r0, [sp, #148]	; 0x94
   1480a:	905c      	str	r0, [sp, #368]	; 0x170
   1480c:	9926      	ldr	r1, [sp, #152]	; 0x98
   1480e:	915d      	str	r1, [sp, #372]	; 0x174
   14810:	6802      	ldr	r2, [r0, #0]
   14812:	680b      	ldr	r3, [r1, #0]
   14814:	429a      	cmp	r2, r3
   14816:	901b      	str	r0, [sp, #108]	; 0x6c
   14818:	911a      	str	r1, [sp, #104]	; 0x68
   1481a:	d101      	bne.n	14820 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1481c:	e7ff      	b.n	1481e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1481e:	e11f      	b.n	14a60 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14820:	f64f 1010 	movw	r0, #63760	; 0xf910
   14824:	f2c0 0001 	movt	r0, #1
   14828:	6801      	ldr	r1, [r0, #0]
   1482a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1482c:	9036      	str	r0, [sp, #216]	; 0xd8
   1482e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14830:	9237      	str	r2, [sp, #220]	; 0xdc
   14832:	f64f 33e8 	movw	r3, #64488	; 0xfbe8
   14836:	f2c0 0301 	movt	r3, #1
   1483a:	681b      	ldr	r3, [r3, #0]
   1483c:	f64f 1c30 	movw	ip, #63792	; 0xf930
   14840:	f2c0 0c01 	movt	ip, #1
   14844:	f8dc c000 	ldr.w	ip, [ip]
   14848:	46ee      	mov	lr, sp
   1484a:	2400      	movs	r4, #0
   1484c:	f8ce 4000 	str.w	r4, [lr]
   14850:	a838      	add	r0, sp, #224	; 0xe0
   14852:	2201      	movs	r2, #1
   14854:	9119      	str	r1, [sp, #100]	; 0x64
   14856:	4619      	mov	r1, r3
   14858:	4663      	mov	r3, ip
   1485a:	f7fa fd4a 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1485e:	e7ff      	b.n	14860 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   14860:	a836      	add	r0, sp, #216	; 0xd8
   14862:	9033      	str	r0, [sp, #204]	; 0xcc
   14864:	a837      	add	r0, sp, #220	; 0xdc
   14866:	9034      	str	r0, [sp, #208]	; 0xd0
   14868:	a838      	add	r0, sp, #224	; 0xe0
   1486a:	9035      	str	r0, [sp, #212]	; 0xd4
   1486c:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1486e:	905e      	str	r0, [sp, #376]	; 0x178
   14870:	9934      	ldr	r1, [sp, #208]	; 0xd0
   14872:	915f      	str	r1, [sp, #380]	; 0x17c
   14874:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   14876:	9260      	str	r2, [sp, #384]	; 0x180
   14878:	f240 037f 	movw	r3, #127	; 0x7f
   1487c:	f2c0 0301 	movt	r3, #1
   14880:	9118      	str	r1, [sp, #96]	; 0x60
   14882:	4619      	mov	r1, r3
   14884:	9217      	str	r2, [sp, #92]	; 0x5c
   14886:	f7fb fc32 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1488a:	9016      	str	r0, [sp, #88]	; 0x58
   1488c:	9115      	str	r1, [sp, #84]	; 0x54
   1488e:	e7ff      	b.n	14890 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   14890:	f240 017f 	movw	r1, #127	; 0x7f
   14894:	f2c0 0101 	movt	r1, #1
   14898:	9818      	ldr	r0, [sp, #96]	; 0x60
   1489a:	f7fb fc28 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1489e:	9014      	str	r0, [sp, #80]	; 0x50
   148a0:	9113      	str	r1, [sp, #76]	; 0x4c
   148a2:	e7ff      	b.n	148a4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   148a4:	f247 1153 	movw	r1, #29011	; 0x7153
   148a8:	f2c0 0101 	movt	r1, #1
   148ac:	9817      	ldr	r0, [sp, #92]	; 0x5c
   148ae:	f7fb fc5d 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   148b2:	9012      	str	r0, [sp, #72]	; 0x48
   148b4:	9111      	str	r1, [sp, #68]	; 0x44
   148b6:	e7ff      	b.n	148b8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   148b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   148ba:	902d      	str	r0, [sp, #180]	; 0xb4
   148bc:	9915      	ldr	r1, [sp, #84]	; 0x54
   148be:	912e      	str	r1, [sp, #184]	; 0xb8
   148c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   148c2:	922f      	str	r2, [sp, #188]	; 0xbc
   148c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   148c6:	9330      	str	r3, [sp, #192]	; 0xc0
   148c8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   148cc:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   148d0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   148d4:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   148d8:	466c      	mov	r4, sp
   148da:	2503      	movs	r5, #3
   148dc:	6025      	str	r5, [r4, #0]
   148de:	a827      	add	r0, sp, #156	; 0x9c
   148e0:	ab2d      	add	r3, sp, #180	; 0xb4
   148e2:	9919      	ldr	r1, [sp, #100]	; 0x64
   148e4:	462a      	mov	r2, r5
   148e6:	f7fa fd04 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   148ea:	e7ff      	b.n	148ec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   148ec:	f64f 30ec 	movw	r0, #64492	; 0xfbec
   148f0:	f2c0 0001 	movt	r0, #1
   148f4:	f002 f93f 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   148f8:	9010      	str	r0, [sp, #64]	; 0x40
   148fa:	e7ff      	b.n	148fc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   148fc:	a827      	add	r0, sp, #156	; 0x9c
   148fe:	9910      	ldr	r1, [sp, #64]	; 0x40
   14900:	f002 f976 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14904:	defe      	udf	#254	; 0xfe
   14906:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14908:	900f      	str	r0, [sp, #60]	; 0x3c
   1490a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1490c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1490e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14910:	f004 ffaa 	bl	19868 <hal_spi_txrx_noblock>
   14914:	903e      	str	r0, [sp, #248]	; 0xf8
   14916:	e7ff      	b.n	14918 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14918:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   1491c:	f2c0 0001 	movt	r0, #1
   14920:	6800      	ldr	r0, [r0, #0]
   14922:	a93e      	add	r1, sp, #248	; 0xf8
   14924:	913f      	str	r1, [sp, #252]	; 0xfc
   14926:	9040      	str	r0, [sp, #256]	; 0x100
   14928:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1492a:	9062      	str	r0, [sp, #392]	; 0x188
   1492c:	9940      	ldr	r1, [sp, #256]	; 0x100
   1492e:	9163      	str	r1, [sp, #396]	; 0x18c
   14930:	6802      	ldr	r2, [r0, #0]
   14932:	680b      	ldr	r3, [r1, #0]
   14934:	429a      	cmp	r2, r3
   14936:	900e      	str	r0, [sp, #56]	; 0x38
   14938:	910d      	str	r1, [sp, #52]	; 0x34
   1493a:	d10c      	bne.n	14956 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   1493c:	e7ff      	b.n	1493e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1493e:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   14942:	9067      	str	r0, [sp, #412]	; 0x19c
   14944:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14948:	fba0 0101 	umull	r0, r1, r0, r1
   1494c:	2900      	cmp	r1, #0
   1494e:	900c      	str	r0, [sp, #48]	; 0x30
   14950:	f040 8090 	bne.w	14a74 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   14954:	e072      	b.n	14a3c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14956:	f64f 1010 	movw	r0, #63760	; 0xf910
   1495a:	f2c0 0001 	movt	r0, #1
   1495e:	6801      	ldr	r1, [r0, #0]
   14960:	980e      	ldr	r0, [sp, #56]	; 0x38
   14962:	9050      	str	r0, [sp, #320]	; 0x140
   14964:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14966:	9251      	str	r2, [sp, #324]	; 0x144
   14968:	f64f 33e8 	movw	r3, #64488	; 0xfbe8
   1496c:	f2c0 0301 	movt	r3, #1
   14970:	681b      	ldr	r3, [r3, #0]
   14972:	f64f 1c30 	movw	ip, #63792	; 0xf930
   14976:	f2c0 0c01 	movt	ip, #1
   1497a:	f8dc c000 	ldr.w	ip, [ip]
   1497e:	46ee      	mov	lr, sp
   14980:	2400      	movs	r4, #0
   14982:	f8ce 4000 	str.w	r4, [lr]
   14986:	a852      	add	r0, sp, #328	; 0x148
   14988:	2201      	movs	r2, #1
   1498a:	910b      	str	r1, [sp, #44]	; 0x2c
   1498c:	4619      	mov	r1, r3
   1498e:	4663      	mov	r3, ip
   14990:	f7fa fcaf 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14994:	e7ff      	b.n	14996 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   14996:	a850      	add	r0, sp, #320	; 0x140
   14998:	904d      	str	r0, [sp, #308]	; 0x134
   1499a:	a851      	add	r0, sp, #324	; 0x144
   1499c:	904e      	str	r0, [sp, #312]	; 0x138
   1499e:	a852      	add	r0, sp, #328	; 0x148
   149a0:	904f      	str	r0, [sp, #316]	; 0x13c
   149a2:	984d      	ldr	r0, [sp, #308]	; 0x134
   149a4:	9064      	str	r0, [sp, #400]	; 0x190
   149a6:	994e      	ldr	r1, [sp, #312]	; 0x138
   149a8:	9165      	str	r1, [sp, #404]	; 0x194
   149aa:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   149ac:	9266      	str	r2, [sp, #408]	; 0x198
   149ae:	f240 037f 	movw	r3, #127	; 0x7f
   149b2:	f2c0 0301 	movt	r3, #1
   149b6:	910a      	str	r1, [sp, #40]	; 0x28
   149b8:	4619      	mov	r1, r3
   149ba:	9209      	str	r2, [sp, #36]	; 0x24
   149bc:	f7fb fb97 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   149c0:	9008      	str	r0, [sp, #32]
   149c2:	9107      	str	r1, [sp, #28]
   149c4:	e7ff      	b.n	149c6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   149c6:	f240 017f 	movw	r1, #127	; 0x7f
   149ca:	f2c0 0101 	movt	r1, #1
   149ce:	980a      	ldr	r0, [sp, #40]	; 0x28
   149d0:	f7fb fb8d 	bl	100ee <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   149d4:	9006      	str	r0, [sp, #24]
   149d6:	9105      	str	r1, [sp, #20]
   149d8:	e7ff      	b.n	149da <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   149da:	f247 1153 	movw	r1, #29011	; 0x7153
   149de:	f2c0 0101 	movt	r1, #1
   149e2:	9809      	ldr	r0, [sp, #36]	; 0x24
   149e4:	f7fb fbc2 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   149e8:	9004      	str	r0, [sp, #16]
   149ea:	9103      	str	r1, [sp, #12]
   149ec:	e7ff      	b.n	149ee <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   149ee:	9808      	ldr	r0, [sp, #32]
   149f0:	9047      	str	r0, [sp, #284]	; 0x11c
   149f2:	9907      	ldr	r1, [sp, #28]
   149f4:	9148      	str	r1, [sp, #288]	; 0x120
   149f6:	9a06      	ldr	r2, [sp, #24]
   149f8:	9249      	str	r2, [sp, #292]	; 0x124
   149fa:	9b05      	ldr	r3, [sp, #20]
   149fc:	934a      	str	r3, [sp, #296]	; 0x128
   149fe:	f8dd c010 	ldr.w	ip, [sp, #16]
   14a02:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14a06:	f8dd e00c 	ldr.w	lr, [sp, #12]
   14a0a:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   14a0e:	466c      	mov	r4, sp
   14a10:	2503      	movs	r5, #3
   14a12:	6025      	str	r5, [r4, #0]
   14a14:	a841      	add	r0, sp, #260	; 0x104
   14a16:	ab47      	add	r3, sp, #284	; 0x11c
   14a18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14a1a:	462a      	mov	r2, r5
   14a1c:	f7fa fc69 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14a20:	e7ff      	b.n	14a22 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14a22:	f64f 30fc 	movw	r0, #64508	; 0xfbfc
   14a26:	f2c0 0001 	movt	r0, #1
   14a2a:	f002 f8a4 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14a2e:	9002      	str	r0, [sp, #8]
   14a30:	e7ff      	b.n	14a32 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   14a32:	a841      	add	r0, sp, #260	; 0x104
   14a34:	9902      	ldr	r1, [sp, #8]
   14a36:	f002 f8db 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14a3a:	defe      	udf	#254	; 0xfe
   14a3c:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14a40:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14a44:	990c      	ldr	r1, [sp, #48]	; 0x30
   14a46:	fba1 0200 	umull	r0, r2, r1, r0
   14a4a:	0991      	lsrs	r1, r2, #6
   14a4c:	f247 227c 	movw	r2, #29308	; 0x727c
   14a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14a54:	9001      	str	r0, [sp, #4]
   14a56:	4610      	mov	r0, r2
   14a58:	f006 f8d2 	bl	1ac00 <os_sem_pend>
   14a5c:	e7ff      	b.n	14a5e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   14a5e:	e7ff      	b.n	14a60 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   14a60:	2019      	movs	r0, #25
   14a62:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   14a64:	f004 f9fc 	bl	18e60 <hal_gpio_write>
   14a68:	e7ff      	b.n	14a6a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   14a6a:	2000      	movs	r0, #0
    Ok(())
   14a6c:	9022      	str	r0, [sp, #136]	; 0x88
   14a6e:	2001      	movs	r0, #1
   14a70:	9022      	str	r0, [sp, #136]	; 0x88
}
   14a72:	e686      	b.n	14782 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14a74:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   14a78:	f2c0 0001 	movt	r0, #1
   14a7c:	f64f 420c 	movw	r2, #64524	; 0xfc0c
   14a80:	f2c0 0201 	movt	r2, #1
   14a84:	2121      	movs	r1, #33	; 0x21
   14a86:	f002 f87d 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a8a:	defe      	udf	#254	; 0xfe

00014a8c <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   14a8c:	b5b0      	push	{r4, r5, r7, lr}
   14a8e:	b0ae      	sub	sp, #184	; 0xb8
   14a90:	9027      	str	r0, [sp, #156]	; 0x9c
   14a92:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   14a94:	f247 207c 	movw	r0, #29308	; 0x727c
   14a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14a9c:	f006 f87e 	bl	1ab9c <os_sem_release>
   14aa0:	900d      	str	r0, [sp, #52]	; 0x34
   14aa2:	e7ff      	b.n	14aa4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   14aa4:	f64f 00b8 	movw	r0, #63672	; 0xf8b8
   14aa8:	f2c0 0001 	movt	r0, #1
   14aac:	6800      	ldr	r0, [r0, #0]
   14aae:	a90d      	add	r1, sp, #52	; 0x34
   14ab0:	910e      	str	r1, [sp, #56]	; 0x38
   14ab2:	900f      	str	r0, [sp, #60]	; 0x3c
   14ab4:	980e      	ldr	r0, [sp, #56]	; 0x38
   14ab6:	9029      	str	r0, [sp, #164]	; 0xa4
   14ab8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14aba:	912a      	str	r1, [sp, #168]	; 0xa8
   14abc:	6802      	ldr	r2, [r0, #0]
   14abe:	680b      	ldr	r3, [r1, #0]
   14ac0:	429a      	cmp	r2, r3
   14ac2:	900c      	str	r0, [sp, #48]	; 0x30
   14ac4:	910b      	str	r1, [sp, #44]	; 0x2c
   14ac6:	d102      	bne.n	14ace <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   14ac8:	e7ff      	b.n	14aca <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   14aca:	b02e      	add	sp, #184	; 0xb8
   14acc:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   14ace:	f64f 1010 	movw	r0, #63760	; 0xf910
   14ad2:	f2c0 0001 	movt	r0, #1
   14ad6:	6801      	ldr	r1, [r0, #0]
   14ad8:	980c      	ldr	r0, [sp, #48]	; 0x30
   14ada:	901f      	str	r0, [sp, #124]	; 0x7c
   14adc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ade:	9220      	str	r2, [sp, #128]	; 0x80
   14ae0:	f64f 2328 	movw	r3, #64040	; 0xfa28
   14ae4:	f2c0 0301 	movt	r3, #1
   14ae8:	681b      	ldr	r3, [r3, #0]
   14aea:	f64f 1c30 	movw	ip, #63792	; 0xf930
   14aee:	f2c0 0c01 	movt	ip, #1
   14af2:	f8dc c000 	ldr.w	ip, [ip]
   14af6:	46ee      	mov	lr, sp
   14af8:	2400      	movs	r4, #0
   14afa:	f8ce 4000 	str.w	r4, [lr]
   14afe:	a821      	add	r0, sp, #132	; 0x84
   14b00:	2201      	movs	r2, #1
   14b02:	910a      	str	r1, [sp, #40]	; 0x28
   14b04:	4619      	mov	r1, r3
   14b06:	4663      	mov	r3, ip
   14b08:	f7fa fbf3 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14b0c:	e7ff      	b.n	14b0e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   14b0e:	a81f      	add	r0, sp, #124	; 0x7c
   14b10:	901c      	str	r0, [sp, #112]	; 0x70
   14b12:	a820      	add	r0, sp, #128	; 0x80
   14b14:	901d      	str	r0, [sp, #116]	; 0x74
   14b16:	a821      	add	r0, sp, #132	; 0x84
   14b18:	901e      	str	r0, [sp, #120]	; 0x78
   14b1a:	981c      	ldr	r0, [sp, #112]	; 0x70
   14b1c:	902b      	str	r0, [sp, #172]	; 0xac
   14b1e:	991d      	ldr	r1, [sp, #116]	; 0x74
   14b20:	912c      	str	r1, [sp, #176]	; 0xb0
   14b22:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14b24:	922d      	str	r2, [sp, #180]	; 0xb4
   14b26:	f240 03d3 	movw	r3, #211	; 0xd3
   14b2a:	f2c0 0301 	movt	r3, #1
   14b2e:	9109      	str	r1, [sp, #36]	; 0x24
   14b30:	4619      	mov	r1, r3
   14b32:	9208      	str	r2, [sp, #32]
   14b34:	f7fb fb05 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14b38:	9007      	str	r0, [sp, #28]
   14b3a:	9106      	str	r1, [sp, #24]
   14b3c:	e7ff      	b.n	14b3e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   14b3e:	f240 01d3 	movw	r1, #211	; 0xd3
   14b42:	f2c0 0101 	movt	r1, #1
   14b46:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b48:	f7fb fafb 	bl	10142 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14b4c:	9005      	str	r0, [sp, #20]
   14b4e:	9104      	str	r1, [sp, #16]
   14b50:	e7ff      	b.n	14b52 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14b52:	f247 1153 	movw	r1, #29011	; 0x7153
   14b56:	f2c0 0101 	movt	r1, #1
   14b5a:	9808      	ldr	r0, [sp, #32]
   14b5c:	f7fb fb06 	bl	1016c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14b60:	9003      	str	r0, [sp, #12]
   14b62:	9102      	str	r1, [sp, #8]
   14b64:	e7ff      	b.n	14b66 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14b66:	9807      	ldr	r0, [sp, #28]
   14b68:	9016      	str	r0, [sp, #88]	; 0x58
   14b6a:	9906      	ldr	r1, [sp, #24]
   14b6c:	9117      	str	r1, [sp, #92]	; 0x5c
   14b6e:	9a05      	ldr	r2, [sp, #20]
   14b70:	9218      	str	r2, [sp, #96]	; 0x60
   14b72:	9b04      	ldr	r3, [sp, #16]
   14b74:	9319      	str	r3, [sp, #100]	; 0x64
   14b76:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14b7a:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14b7e:	f8dd e008 	ldr.w	lr, [sp, #8]
   14b82:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14b86:	466c      	mov	r4, sp
   14b88:	2503      	movs	r5, #3
   14b8a:	6025      	str	r5, [r4, #0]
   14b8c:	a810      	add	r0, sp, #64	; 0x40
   14b8e:	ab16      	add	r3, sp, #88	; 0x58
   14b90:	990a      	ldr	r1, [sp, #40]	; 0x28
   14b92:	462a      	mov	r2, r5
   14b94:	f7fa fbad 	bl	f2f2 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14b98:	e7ff      	b.n	14b9a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14b9a:	f64f 401c 	movw	r0, #64540	; 0xfc1c
   14b9e:	f2c0 0001 	movt	r0, #1
   14ba2:	f001 ffe8 	bl	16b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14ba6:	9001      	str	r0, [sp, #4]
   14ba8:	e7ff      	b.n	14baa <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14baa:	a810      	add	r0, sp, #64	; 0x40
   14bac:	9901      	ldr	r1, [sp, #4]
   14bae:	f002 f81f 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14bb2:	defe      	udf	#254	; 0xfe

00014bb4 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14bb4:	b580      	push	{r7, lr}
   14bb6:	b084      	sub	sp, #16
   14bb8:	4601      	mov	r1, r0
   14bba:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14bbe:	b2c0      	uxtb	r0, r0
   14bc0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14bc4:	fba0 0202 	umull	r0, r2, r0, r2
   14bc8:	2a00      	cmp	r2, #0
   14bca:	9001      	str	r0, [sp, #4]
   14bcc:	d110      	bne.n	14bf0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14bce:	e7ff      	b.n	14bd0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14bd0:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14bd4:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14bd8:	9901      	ldr	r1, [sp, #4]
   14bda:	fba1 0200 	umull	r0, r2, r1, r0
   14bde:	0992      	lsrs	r2, r2, #6
   14be0:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14be2:	9000      	str	r0, [sp, #0]
   14be4:	4610      	mov	r0, r2
   14be6:	f006 f959 	bl	1ae9c <os_time_delay>
   14bea:	e7ff      	b.n	14bec <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14bec:	b004      	add	sp, #16
   14bee:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14bf0:	f64f 20e0 	movw	r0, #64224	; 0xfae0
   14bf4:	f2c0 0001 	movt	r0, #1
   14bf8:	f64f 422c 	movw	r2, #64556	; 0xfc2c
   14bfc:	f2c0 0201 	movt	r2, #1
   14c00:	2121      	movs	r1, #33	; 0x21
   14c02:	f001 ffbf 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14c06:	defe      	udf	#254	; 0xfe

00014c08 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14c08:	b082      	sub	sp, #8
   14c0a:	9001      	str	r0, [sp, #4]
   14c0c:	9000      	str	r0, [sp, #0]
   14c0e:	e7ff      	b.n	14c10 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14c10:	9800      	ldr	r0, [sp, #0]
   14c12:	fab0 f180 	clz	r1, r0
   14c16:	0948      	lsrs	r0, r1, #5
   14c18:	b002      	add	sp, #8
   14c1a:	4770      	bx	lr

00014c1c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14c1c:	b08a      	sub	sp, #40	; 0x28
   14c1e:	9005      	str	r0, [sp, #20]
   14c20:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14c22:	9107      	str	r1, [sp, #28]
   14c24:	21ff      	movs	r1, #255	; 0xff
   14c26:	9106      	str	r1, [sp, #24]
   14c28:	2108      	movs	r1, #8
   14c2a:	9108      	str	r1, [sp, #32]
   14c2c:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14c2e:	9003      	str	r0, [sp, #12]
   14c30:	9102      	str	r1, [sp, #8]
   14c32:	e016      	b.n	14c62 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14c34:	2001      	movs	r0, #1
   14c36:	f88d 0013 	strb.w	r0, [sp, #19]
   14c3a:	e00c      	b.n	14c56 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14c3c:	2000      	movs	r0, #0
   14c3e:	f88d 0013 	strb.w	r0, [sp, #19]
   14c42:	e008      	b.n	14c56 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14c44:	9803      	ldr	r0, [sp, #12]
   14c46:	6801      	ldr	r1, [r0, #0]
   14c48:	6842      	ldr	r2, [r0, #4]
   14c4a:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14c4e:	f172 0200 	sbcs.w	r2, r2, #0
   14c52:	d3ef      	bcc.n	14c34 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14c54:	e7f2      	b.n	14c3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14c56:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14c5a:	07c0      	lsls	r0, r0, #31
   14c5c:	2800      	cmp	r0, #0
   14c5e:	d10e      	bne.n	14c7e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14c60:	e009      	b.n	14c76 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14c62:	2001      	movs	r0, #1
   14c64:	9009      	str	r0, [sp, #36]	; 0x24
   14c66:	9809      	ldr	r0, [sp, #36]	; 0x24
   14c68:	9001      	str	r0, [sp, #4]
   14c6a:	e7ff      	b.n	14c6c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14c6c:	9802      	ldr	r0, [sp, #8]
   14c6e:	9901      	ldr	r1, [sp, #4]
   14c70:	4288      	cmp	r0, r1
   14c72:	d9df      	bls.n	14c34 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14c74:	e7e6      	b.n	14c44 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14c76:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14c78:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14c7c:	e007      	b.n	14c8e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14c7e:	9803      	ldr	r0, [sp, #12]
   14c80:	7801      	ldrb	r1, [r0, #0]
   14c82:	f88d 1011 	strb.w	r1, [sp, #17]
   14c86:	2101      	movs	r1, #1
   14c88:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14c8c:	e7ff      	b.n	14c8e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14c8e:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14c92:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14c96:	b00a      	add	sp, #40	; 0x28
   14c98:	4770      	bx	lr

00014c9a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14c9a:	b580      	push	{r7, lr}
   14c9c:	b090      	sub	sp, #64	; 0x40
   14c9e:	2200      	movs	r2, #0
   14ca0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14ca4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14ca8:	2201      	movs	r2, #1
   14caa:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14cae:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14cb2:	680a      	ldr	r2, [r1, #0]
   14cb4:	2a00      	cmp	r2, #0
   14cb6:	9101      	str	r1, [sp, #4]
   14cb8:	9000      	str	r0, [sp, #0]
   14cba:	d001      	beq.n	14cc0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14cbc:	e7ff      	b.n	14cbe <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14cbe:	e004      	b.n	14cca <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14cc0:	2000      	movs	r0, #0
   14cc2:	9900      	ldr	r1, [sp, #0]
   14cc4:	6008      	str	r0, [r1, #0]
   14cc6:	e032      	b.n	14d2e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14cc8:	defe      	udf	#254	; 0xfe
   14cca:	2000      	movs	r0, #0
   14ccc:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14cd0:	9901      	ldr	r1, [sp, #4]
   14cd2:	684a      	ldr	r2, [r1, #4]
   14cd4:	688b      	ldr	r3, [r1, #8]
   14cd6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14cda:	f8cd c010 	str.w	ip, [sp, #16]
   14cde:	9303      	str	r3, [sp, #12]
   14ce0:	9202      	str	r2, [sp, #8]
   14ce2:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14ce6:	9802      	ldr	r0, [sp, #8]
   14ce8:	9a03      	ldr	r2, [sp, #12]
   14cea:	9b04      	ldr	r3, [sp, #16]
   14cec:	930d      	str	r3, [sp, #52]	; 0x34
   14cee:	920c      	str	r2, [sp, #48]	; 0x30
   14cf0:	900b      	str	r0, [sp, #44]	; 0x2c
   14cf2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14cf4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14cf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14cf8:	930a      	str	r3, [sp, #40]	; 0x28
   14cfa:	9209      	str	r2, [sp, #36]	; 0x24
   14cfc:	9008      	str	r0, [sp, #32]
   14cfe:	a805      	add	r0, sp, #20
   14d00:	a908      	add	r1, sp, #32
   14d02:	f7fd fc17 	bl	12534 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14d06:	e7ff      	b.n	14d08 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   14d08:	9805      	ldr	r0, [sp, #20]
   14d0a:	9906      	ldr	r1, [sp, #24]
   14d0c:	9a07      	ldr	r2, [sp, #28]
   14d0e:	9b00      	ldr	r3, [sp, #0]
   14d10:	60da      	str	r2, [r3, #12]
   14d12:	6099      	str	r1, [r3, #8]
   14d14:	6058      	str	r0, [r3, #4]
   14d16:	2001      	movs	r0, #1
   14d18:	6018      	str	r0, [r3, #0]
   14d1a:	e008      	b.n	14d2e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14d1c:	9801      	ldr	r0, [sp, #4]
   14d1e:	6801      	ldr	r1, [r0, #0]
   14d20:	2901      	cmp	r1, #1
   14d22:	d00c      	beq.n	14d3e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14d24:	e015      	b.n	14d52 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14d26:	2000      	movs	r0, #0
   14d28:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14d2c:	e7f6      	b.n	14d1c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14d2e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14d32:	07c0      	lsls	r0, r0, #31
   14d34:	2800      	cmp	r0, #0
   14d36:	d1f6      	bne.n	14d26 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   14d38:	e7f0      	b.n	14d1c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14d3a:	b010      	add	sp, #64	; 0x40
   14d3c:	bd80      	pop	{r7, pc}
   14d3e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14d42:	07c0      	lsls	r0, r0, #31
   14d44:	2800      	cmp	r0, #0
   14d46:	d0f8      	beq.n	14d3a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14d48:	e7ff      	b.n	14d4a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14d4a:	2000      	movs	r0, #0
   14d4c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14d50:	e7f3      	b.n	14d3a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14d52:	e7f2      	b.n	14d3a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014d54 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14d54:	b084      	sub	sp, #16
   14d56:	9002      	str	r0, [sp, #8]
   14d58:	6801      	ldr	r1, [r0, #0]
   14d5a:	2900      	cmp	r1, #0
   14d5c:	9000      	str	r0, [sp, #0]
   14d5e:	d001      	beq.n	14d64 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14d60:	e7ff      	b.n	14d62 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14d62:	e003      	b.n	14d6c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14d64:	2000      	movs	r0, #0
   14d66:	9001      	str	r0, [sp, #4]
   14d68:	e006      	b.n	14d78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14d6a:	defe      	udf	#254	; 0xfe
   14d6c:	9800      	ldr	r0, [sp, #0]
   14d6e:	f100 0108 	add.w	r1, r0, #8
   14d72:	9103      	str	r1, [sp, #12]
   14d74:	9101      	str	r1, [sp, #4]
   14d76:	e7ff      	b.n	14d78 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14d78:	9801      	ldr	r0, [sp, #4]
   14d7a:	b004      	add	sp, #16
   14d7c:	4770      	bx	lr

00014d7e <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14d7e:	b510      	push	{r4, lr}
   14d80:	b088      	sub	sp, #32
   14d82:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   14d86:	468e      	mov	lr, r1
   14d88:	4604      	mov	r4, r0
   14d8a:	f8ad 0010 	strh.w	r0, [sp, #16]
   14d8e:	f8ad 1012 	strh.w	r1, [sp, #18]
   14d92:	9205      	str	r2, [sp, #20]
   14d94:	9306      	str	r3, [sp, #24]
   14d96:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14d9a:	4601      	mov	r1, r0
   14d9c:	2800      	cmp	r0, #0
   14d9e:	9303      	str	r3, [sp, #12]
   14da0:	9202      	str	r2, [sp, #8]
   14da2:	f8cd c004 	str.w	ip, [sp, #4]
   14da6:	d001      	beq.n	14dac <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   14da8:	e7ff      	b.n	14daa <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14daa:	e006      	b.n	14dba <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14dac:	9802      	ldr	r0, [sp, #8]
   14dae:	9903      	ldr	r1, [sp, #12]
   14db0:	9a01      	ldr	r2, [sp, #4]
   14db2:	f001 fe9d 	bl	16af0 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   14db6:	defe      	udf	#254	; 0xfe
   14db8:	defe      	udf	#254	; 0xfe
   14dba:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14dbe:	4601      	mov	r1, r0
   14dc0:	f8ad 001e 	strh.w	r0, [sp, #30]
   14dc4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14dc8:	2801      	cmp	r0, #1
   14dca:	9100      	str	r1, [sp, #0]
   14dcc:	d103      	bne.n	14dd6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14dce:	e7ff      	b.n	14dd0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14dd0:	9800      	ldr	r0, [sp, #0]
   14dd2:	b008      	add	sp, #32
   14dd4:	bd10      	pop	{r4, pc}
   14dd6:	e7fb      	b.n	14dd0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

00014dd8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14dd8:	b084      	sub	sp, #16
   14dda:	460b      	mov	r3, r1
   14ddc:	4684      	mov	ip, r0
   14dde:	f88d 000c 	strb.w	r0, [sp, #12]
   14de2:	f88d 100d 	strb.w	r1, [sp, #13]
   14de6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14dea:	07c1      	lsls	r1, r0, #31
   14dec:	2900      	cmp	r1, #0
   14dee:	9202      	str	r2, [sp, #8]
   14df0:	d001      	beq.n	14df6 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14df2:	e7ff      	b.n	14df4 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14df4:	e009      	b.n	14e0a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14df6:	f64f 403c 	movw	r0, #64572	; 0xfc3c
   14dfa:	f2c0 0001 	movt	r0, #1
   14dfe:	212b      	movs	r1, #43	; 0x2b
   14e00:	9a02      	ldr	r2, [sp, #8]
   14e02:	f001 febf 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e06:	defe      	udf	#254	; 0xfe
   14e08:	defe      	udf	#254	; 0xfe
   14e0a:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14e0e:	4601      	mov	r1, r0
   14e10:	f88d 000f 	strb.w	r0, [sp, #15]
   14e14:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14e18:	07c0      	lsls	r0, r0, #31
   14e1a:	2800      	cmp	r0, #0
   14e1c:	9101      	str	r1, [sp, #4]
   14e1e:	d003      	beq.n	14e28 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14e20:	e7ff      	b.n	14e22 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14e22:	9801      	ldr	r0, [sp, #4]
   14e24:	b004      	add	sp, #16
   14e26:	4770      	bx	lr
   14e28:	e7fb      	b.n	14e22 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014e2a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14e2a:	b088      	sub	sp, #32
   14e2c:	9004      	str	r0, [sp, #16]
   14e2e:	9105      	str	r1, [sp, #20]
   14e30:	9804      	ldr	r0, [sp, #16]
   14e32:	2800      	cmp	r0, #0
   14e34:	4601      	mov	r1, r0
   14e36:	bf18      	it	ne
   14e38:	2101      	movne	r1, #1
   14e3a:	2800      	cmp	r0, #0
   14e3c:	9203      	str	r2, [sp, #12]
   14e3e:	d001      	beq.n	14e44 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14e40:	e7ff      	b.n	14e42 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14e42:	e009      	b.n	14e58 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14e44:	f64f 403c 	movw	r0, #64572	; 0xfc3c
   14e48:	f2c0 0001 	movt	r0, #1
   14e4c:	212b      	movs	r1, #43	; 0x2b
   14e4e:	9a03      	ldr	r2, [sp, #12]
   14e50:	f001 fe98 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14e54:	defe      	udf	#254	; 0xfe
   14e56:	defe      	udf	#254	; 0xfe
   14e58:	9804      	ldr	r0, [sp, #16]
   14e5a:	9905      	ldr	r1, [sp, #20]
   14e5c:	9006      	str	r0, [sp, #24]
   14e5e:	9107      	str	r1, [sp, #28]
   14e60:	9a04      	ldr	r2, [sp, #16]
   14e62:	2a00      	cmp	r2, #0
   14e64:	9002      	str	r0, [sp, #8]
   14e66:	9101      	str	r1, [sp, #4]
   14e68:	d004      	beq.n	14e74 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14e6a:	e7ff      	b.n	14e6c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14e6c:	9802      	ldr	r0, [sp, #8]
   14e6e:	9901      	ldr	r1, [sp, #4]
   14e70:	b008      	add	sp, #32
   14e72:	4770      	bx	lr
   14e74:	e7fa      	b.n	14e6c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014e76 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   14e76:	b580      	push	{r7, lr}
   14e78:	b082      	sub	sp, #8
   14e7a:	9001      	str	r0, [sp, #4]
   14e7c:	f000 f82b 	bl	14ed6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14e80:	9000      	str	r0, [sp, #0]
   14e82:	e7ff      	b.n	14e84 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   14e84:	2001      	movs	r0, #1
   14e86:	9900      	ldr	r1, [sp, #0]
   14e88:	4388      	bics	r0, r1
   14e8a:	b002      	add	sp, #8
   14e8c:	bd80      	pop	{r7, pc}

00014e8e <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14e8e:	b082      	sub	sp, #8
   14e90:	9001      	str	r0, [sp, #4]
   14e92:	6800      	ldr	r0, [r0, #0]
   14e94:	2800      	cmp	r0, #0
   14e96:	d104      	bne.n	14ea2 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14e98:	e7ff      	b.n	14e9a <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14e9a:	2000      	movs	r0, #0
   14e9c:	f88d 0003 	strb.w	r0, [sp, #3]
   14ea0:	e003      	b.n	14eaa <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14ea2:	2001      	movs	r0, #1
   14ea4:	f88d 0003 	strb.w	r0, [sp, #3]
   14ea8:	e7ff      	b.n	14eaa <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14eaa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14eae:	b002      	add	sp, #8
   14eb0:	4770      	bx	lr

00014eb2 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14eb2:	b082      	sub	sp, #8
   14eb4:	9001      	str	r0, [sp, #4]
   14eb6:	6800      	ldr	r0, [r0, #0]
   14eb8:	2801      	cmp	r0, #1
   14eba:	d004      	beq.n	14ec6 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14ebc:	e7ff      	b.n	14ebe <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14ebe:	2000      	movs	r0, #0
   14ec0:	f88d 0003 	strb.w	r0, [sp, #3]
   14ec4:	e003      	b.n	14ece <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14ec6:	2001      	movs	r0, #1
   14ec8:	f88d 0003 	strb.w	r0, [sp, #3]
   14ecc:	e7ff      	b.n	14ece <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14ece:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14ed2:	b002      	add	sp, #8
   14ed4:	4770      	bx	lr

00014ed6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14ed6:	b082      	sub	sp, #8
   14ed8:	9001      	str	r0, [sp, #4]
   14eda:	8800      	ldrh	r0, [r0, #0]
   14edc:	2801      	cmp	r0, #1
   14ede:	d004      	beq.n	14eea <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14ee0:	e7ff      	b.n	14ee2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14ee2:	2000      	movs	r0, #0
   14ee4:	f88d 0003 	strb.w	r0, [sp, #3]
   14ee8:	e003      	b.n	14ef2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14eea:	2001      	movs	r0, #1
   14eec:	f88d 0003 	strb.w	r0, [sp, #3]
   14ef0:	e7ff      	b.n	14ef2 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14ef2:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14ef6:	b002      	add	sp, #8
   14ef8:	4770      	bx	lr

00014efa <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14efa:	b580      	push	{r7, lr}
   14efc:	b086      	sub	sp, #24
   14efe:	9000      	str	r0, [sp, #0]
   14f00:	2000      	movs	r0, #0
   14f02:	f88d 000f 	strb.w	r0, [sp, #15]
   14f06:	f88d 000e 	strb.w	r0, [sp, #14]
   14f0a:	2001      	movs	r0, #1
   14f0c:	f88d 000f 	strb.w	r0, [sp, #15]
   14f10:	f88d 000e 	strb.w	r0, [sp, #14]
   14f14:	9800      	ldr	r0, [sp, #0]
   14f16:	2800      	cmp	r0, #0
   14f18:	4601      	mov	r1, r0
   14f1a:	bf18      	it	ne
   14f1c:	2101      	movne	r1, #1
   14f1e:	2800      	cmp	r0, #0
   14f20:	d001      	beq.n	14f26 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14f22:	e7ff      	b.n	14f24 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14f24:	e004      	b.n	14f30 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14f26:	2000      	movs	r0, #0
   14f28:	f88d 0004 	strb.w	r0, [sp, #4]
   14f2c:	e019      	b.n	14f62 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14f2e:	defe      	udf	#254	; 0xfe
   14f30:	2000      	movs	r0, #0
   14f32:	f88d 000f 	strb.w	r0, [sp, #15]
   14f36:	9900      	ldr	r1, [sp, #0]
   14f38:	9105      	str	r1, [sp, #20]
   14f3a:	f88d 000e 	strb.w	r0, [sp, #14]
   14f3e:	9102      	str	r1, [sp, #8]
   14f40:	9802      	ldr	r0, [sp, #8]
   14f42:	f7fc ff1e 	bl	11d82 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14f46:	f88d 1005 	strb.w	r1, [sp, #5]
   14f4a:	f88d 0004 	strb.w	r0, [sp, #4]
   14f4e:	e7ff      	b.n	14f50 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14f50:	e007      	b.n	14f62 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14f52:	9800      	ldr	r0, [sp, #0]
   14f54:	2800      	cmp	r0, #0
   14f56:	d110      	bne.n	14f7a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14f58:	e019      	b.n	14f8e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14f5a:	2000      	movs	r0, #0
   14f5c:	f88d 000e 	strb.w	r0, [sp, #14]
   14f60:	e7f7      	b.n	14f52 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14f62:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14f66:	07c0      	lsls	r0, r0, #31
   14f68:	2800      	cmp	r0, #0
   14f6a:	d1f6      	bne.n	14f5a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14f6c:	e7f1      	b.n	14f52 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14f6e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14f72:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14f76:	b006      	add	sp, #24
   14f78:	bd80      	pop	{r7, pc}
   14f7a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14f7e:	07c0      	lsls	r0, r0, #31
   14f80:	2800      	cmp	r0, #0
   14f82:	d0f4      	beq.n	14f6e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14f84:	e7ff      	b.n	14f86 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14f86:	2000      	movs	r0, #0
   14f88:	f88d 000f 	strb.w	r0, [sp, #15]
   14f8c:	e7ef      	b.n	14f6e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14f8e:	e7ee      	b.n	14f6e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014f90 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14f90:	b580      	push	{r7, lr}
   14f92:	b09c      	sub	sp, #112	; 0x70
   14f94:	911b      	str	r1, [sp, #108]	; 0x6c
   14f96:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   14f98:	9000      	str	r0, [sp, #0]
   14f9a:	4610      	mov	r0, r2
   14f9c:	f000 fafc 	bl	15598 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14fa0:	e7ff      	b.n	14fa2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14fa2:	a901      	add	r1, sp, #4
   14fa4:	2268      	movs	r2, #104	; 0x68
   14fa6:	9800      	ldr	r0, [sp, #0]
   14fa8:	f008 f9c0 	bl	1d32c <__aeabi_memcpy>
    }
   14fac:	b01c      	add	sp, #112	; 0x70
   14fae:	bd80      	pop	{r7, pc}

00014fb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14fb0:	b580      	push	{r7, lr}
   14fb2:	b0b6      	sub	sp, #216	; 0xd8
   14fb4:	9135      	str	r1, [sp, #212]	; 0xd4
   14fb6:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14fb8:	9001      	str	r0, [sp, #4]
   14fba:	4610      	mov	r0, r2
   14fbc:	f000 fb14 	bl	155e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14fc0:	e7ff      	b.n	14fc2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14fc2:	a902      	add	r1, sp, #8
   14fc4:	22cc      	movs	r2, #204	; 0xcc
   14fc6:	9801      	ldr	r0, [sp, #4]
   14fc8:	f008 f9b0 	bl	1d32c <__aeabi_memcpy>
    }
   14fcc:	b036      	add	sp, #216	; 0xd8
   14fce:	bd80      	pop	{r7, pc}

00014fd0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14fd0:	b580      	push	{r7, lr}
   14fd2:	b084      	sub	sp, #16
   14fd4:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14fd6:	f000 f84c 	bl	15072 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14fda:	9002      	str	r0, [sp, #8]
   14fdc:	9101      	str	r1, [sp, #4]
   14fde:	e7ff      	b.n	14fe0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14fe0:	9802      	ldr	r0, [sp, #8]
   14fe2:	9901      	ldr	r1, [sp, #4]
   14fe4:	f000 ff10 	bl	15e08 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14fe8:	e7ff      	b.n	14fea <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14fea:	e7ff      	b.n	14fec <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14fec:	b004      	add	sp, #16
   14fee:	bd80      	pop	{r7, pc}

00014ff0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14ff0:	b580      	push	{r7, lr}
   14ff2:	b084      	sub	sp, #16
   14ff4:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14ff6:	f000 f848 	bl	1508a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14ffa:	9002      	str	r0, [sp, #8]
   14ffc:	9101      	str	r1, [sp, #4]
   14ffe:	e7ff      	b.n	15000 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   15000:	9802      	ldr	r0, [sp, #8]
   15002:	9901      	ldr	r1, [sp, #4]
   15004:	f000 ff00 	bl	15e08 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   15008:	e7ff      	b.n	1500a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   1500a:	e7ff      	b.n	1500c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   1500c:	b004      	add	sp, #16
   1500e:	bd80      	pop	{r7, pc}

00015010 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   15010:	b580      	push	{r7, lr}
   15012:	b084      	sub	sp, #16
   15014:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   15016:	f000 fb0f 	bl	15638 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   1501a:	9002      	str	r0, [sp, #8]
   1501c:	9101      	str	r1, [sp, #4]
   1501e:	e7ff      	b.n	15020 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   15020:	9802      	ldr	r0, [sp, #8]
   15022:	9901      	ldr	r1, [sp, #4]
   15024:	b004      	add	sp, #16
   15026:	bd80      	pop	{r7, pc}

00015028 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   15028:	b580      	push	{r7, lr}
   1502a:	b084      	sub	sp, #16
   1502c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1502e:	f000 fb18 	bl	15662 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15032:	9002      	str	r0, [sp, #8]
   15034:	9101      	str	r1, [sp, #4]
   15036:	e7ff      	b.n	15038 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   15038:	9802      	ldr	r0, [sp, #8]
   1503a:	9901      	ldr	r1, [sp, #4]
   1503c:	b004      	add	sp, #16
   1503e:	bd80      	pop	{r7, pc}

00015040 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   15040:	b580      	push	{r7, lr}
   15042:	b086      	sub	sp, #24
   15044:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   15046:	9003      	str	r0, [sp, #12]
   15048:	f000 f81f 	bl	1508a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   1504c:	9002      	str	r0, [sp, #8]
   1504e:	9101      	str	r1, [sp, #4]
   15050:	e7ff      	b.n	15052 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   15052:	9803      	ldr	r0, [sp, #12]
   15054:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15058:	9104      	str	r1, [sp, #16]
   1505a:	9a04      	ldr	r2, [sp, #16]
   1505c:	9802      	ldr	r0, [sp, #8]
   1505e:	9901      	ldr	r1, [sp, #4]
   15060:	f000 fedf 	bl	15e22 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   15064:	e7ff      	b.n	15066 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   15066:	e7ff      	b.n	15068 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   15068:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   1506a:	9903      	ldr	r1, [sp, #12]
   1506c:	6008      	str	r0, [r1, #0]
    }
   1506e:	b006      	add	sp, #24
   15070:	bd80      	pop	{r7, pc}

00015072 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   15072:	b580      	push	{r7, lr}
   15074:	b084      	sub	sp, #16
   15076:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   15078:	f000 f8ff 	bl	1527a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   1507c:	9002      	str	r0, [sp, #8]
   1507e:	9101      	str	r1, [sp, #4]
   15080:	e7ff      	b.n	15082 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   15082:	9802      	ldr	r0, [sp, #8]
   15084:	9901      	ldr	r1, [sp, #4]
   15086:	b004      	add	sp, #16
   15088:	bd80      	pop	{r7, pc}

0001508a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   1508a:	b580      	push	{r7, lr}
   1508c:	b084      	sub	sp, #16
   1508e:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   15090:	f000 f908 	bl	152a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15094:	9002      	str	r0, [sp, #8]
   15096:	9101      	str	r1, [sp, #4]
   15098:	e7ff      	b.n	1509a <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   1509a:	9802      	ldr	r0, [sp, #8]
   1509c:	9901      	ldr	r1, [sp, #4]
   1509e:	b004      	add	sp, #16
   150a0:	bd80      	pop	{r7, pc}

000150a2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   150a2:	b580      	push	{r7, lr}
   150a4:	b084      	sub	sp, #16
   150a6:	9001      	str	r0, [sp, #4]
   150a8:	9102      	str	r1, [sp, #8]
   150aa:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   150ac:	f000 f973 	bl	15396 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   150b0:	9000      	str	r0, [sp, #0]
   150b2:	e7ff      	b.n	150b4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   150b4:	9800      	ldr	r0, [sp, #0]
   150b6:	f000 0001 	and.w	r0, r0, #1
   150ba:	b004      	add	sp, #16
   150bc:	bd80      	pop	{r7, pc}

000150be <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   150be:	b580      	push	{r7, lr}
   150c0:	b09c      	sub	sp, #112	; 0x70
   150c2:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   150c4:	9001      	str	r0, [sp, #4]
   150c6:	4608      	mov	r0, r1
   150c8:	f000 f8c8 	bl	1525c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   150cc:	e7ff      	b.n	150ce <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   150ce:	a902      	add	r1, sp, #8
   150d0:	2268      	movs	r2, #104	; 0x68
   150d2:	9801      	ldr	r0, [sp, #4]
   150d4:	f008 f92a 	bl	1d32c <__aeabi_memcpy>
    }
   150d8:	b01c      	add	sp, #112	; 0x70
   150da:	bd80      	pop	{r7, pc}

000150dc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   150dc:	b580      	push	{r7, lr}
   150de:	b0b4      	sub	sp, #208	; 0xd0
   150e0:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   150e2:	9000      	str	r0, [sp, #0]
   150e4:	4608      	mov	r0, r1
   150e6:	f000 f8aa 	bl	1523e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   150ea:	e7ff      	b.n	150ec <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   150ec:	a901      	add	r1, sp, #4
   150ee:	22cc      	movs	r2, #204	; 0xcc
   150f0:	9800      	ldr	r0, [sp, #0]
   150f2:	f008 f91b 	bl	1d32c <__aeabi_memcpy>
    }
   150f6:	b034      	add	sp, #208	; 0xd0
   150f8:	bd80      	pop	{r7, pc}

000150fa <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   150fa:	b580      	push	{r7, lr}
   150fc:	b086      	sub	sp, #24
   150fe:	460a      	mov	r2, r1
   15100:	9004      	str	r0, [sp, #16]
   15102:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   15106:	9203      	str	r2, [sp, #12]
   15108:	f000 fa0b 	bl	15522 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   1510c:	9002      	str	r0, [sp, #8]
   1510e:	9101      	str	r1, [sp, #4]
   15110:	e7ff      	b.n	15112 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   15112:	9802      	ldr	r0, [sp, #8]
   15114:	9901      	ldr	r1, [sp, #4]
   15116:	b006      	add	sp, #24
   15118:	bd80      	pop	{r7, pc}

0001511a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   1511a:	b580      	push	{r7, lr}
   1511c:	b082      	sub	sp, #8
   1511e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   15120:	f000 fa28 	bl	15574 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   15124:	e7ff      	b.n	15126 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   15126:	b002      	add	sp, #8
   15128:	bd80      	pop	{r7, pc}

0001512a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   1512a:	b580      	push	{r7, lr}
   1512c:	b082      	sub	sp, #8
   1512e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   15130:	f000 fa29 	bl	15586 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   15134:	e7ff      	b.n	15136 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   15136:	b002      	add	sp, #8
   15138:	bd80      	pop	{r7, pc}

0001513a <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   1513a:	b580      	push	{r7, lr}
   1513c:	b0b6      	sub	sp, #216	; 0xd8
   1513e:	aa03      	add	r2, sp, #12
   15140:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   15142:	9002      	str	r0, [sp, #8]
   15144:	4610      	mov	r0, r2
   15146:	9201      	str	r2, [sp, #4]
   15148:	461a      	mov	r2, r3
   1514a:	9300      	str	r3, [sp, #0]
   1514c:	f008 f8ee 	bl	1d32c <__aeabi_memcpy>
   15150:	9802      	ldr	r0, [sp, #8]
   15152:	9901      	ldr	r1, [sp, #4]
   15154:	9a00      	ldr	r2, [sp, #0]
   15156:	f008 f8e9 	bl	1d32c <__aeabi_memcpy>
   1515a:	2000      	movs	r0, #0
   1515c:	9902      	ldr	r1, [sp, #8]
   1515e:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   15162:	b036      	add	sp, #216	; 0xd8
   15164:	bd80      	pop	{r7, pc}

00015166 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   15166:	b580      	push	{r7, lr}
   15168:	b08e      	sub	sp, #56	; 0x38
   1516a:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   1516c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15170:	9008      	str	r0, [sp, #32]
   15172:	9107      	str	r1, [sp, #28]
   15174:	f7ff ff58 	bl	15028 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   15178:	9006      	str	r0, [sp, #24]
   1517a:	9105      	str	r1, [sp, #20]
   1517c:	e7ff      	b.n	1517e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   1517e:	9806      	ldr	r0, [sp, #24]
   15180:	9905      	ldr	r1, [sp, #20]
   15182:	f000 fdee 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15186:	9004      	str	r0, [sp, #16]
   15188:	e7ff      	b.n	1518a <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   1518a:	9807      	ldr	r0, [sp, #28]
   1518c:	9904      	ldr	r1, [sp, #16]
   1518e:	4288      	cmp	r0, r1
   15190:	d304      	bcc.n	1519c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   15192:	e7ff      	b.n	15194 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   15194:	2000      	movs	r0, #0
            None
   15196:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   1519a:	e029      	b.n	151f0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   1519c:	9808      	ldr	r0, [sp, #32]
   1519e:	1d01      	adds	r1, r0, #4
   151a0:	910c      	str	r1, [sp, #48]	; 0x30
   151a2:	910d      	str	r1, [sp, #52]	; 0x34
   151a4:	9103      	str	r1, [sp, #12]
   151a6:	e7ff      	b.n	151a8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   151a8:	9808      	ldr	r0, [sp, #32]
   151aa:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   151ae:	9803      	ldr	r0, [sp, #12]
   151b0:	f001 fa8d 	bl	166ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   151b4:	9002      	str	r0, [sp, #8]
   151b6:	e7ff      	b.n	151b8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   151b8:	9802      	ldr	r0, [sp, #8]
   151ba:	f001 fa93 	bl	166e4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   151be:	4601      	mov	r1, r0
   151c0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   151c4:	9101      	str	r1, [sp, #4]
   151c6:	e7ff      	b.n	151c8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   151c8:	9808      	ldr	r0, [sp, #32]
   151ca:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   151ce:	1c4a      	adds	r2, r1, #1
   151d0:	4613      	mov	r3, r2
   151d2:	428a      	cmp	r2, r1
   151d4:	9300      	str	r3, [sp, #0]
   151d6:	d311      	bcc.n	151fc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   151d8:	e7ff      	b.n	151da <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   151da:	9800      	ldr	r0, [sp, #0]
   151dc:	9908      	ldr	r1, [sp, #32]
   151de:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   151e2:	9a01      	ldr	r2, [sp, #4]
   151e4:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   151e8:	2301      	movs	r3, #1
   151ea:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   151ee:	e7ff      	b.n	151f0 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   151f0:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   151f4:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   151f8:	b00e      	add	sp, #56	; 0x38
   151fa:	bd80      	pop	{r7, pc}
            self.next += 1;
   151fc:	f64f 40d0 	movw	r0, #64720	; 0xfcd0
   15200:	f2c0 0001 	movt	r0, #1
   15204:	f64f 42c0 	movw	r2, #64704	; 0xfcc0
   15208:	f2c0 0201 	movt	r2, #1
   1520c:	211c      	movs	r1, #28
   1520e:	f001 fcb9 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15212:	defe      	udf	#254	; 0xfe

00015214 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   15214:	b580      	push	{r7, lr}
   15216:	b084      	sub	sp, #16
   15218:	9002      	str	r0, [sp, #8]
   1521a:	9103      	str	r1, [sp, #12]
   1521c:	f64f 40ec 	movw	r0, #64748	; 0xfcec
   15220:	f2c0 0001 	movt	r0, #1
   15224:	2202      	movs	r2, #2
   15226:	9001      	str	r0, [sp, #4]
   15228:	4608      	mov	r0, r1
   1522a:	9901      	ldr	r1, [sp, #4]
   1522c:	f002 f9ca 	bl	175c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   15230:	9000      	str	r0, [sp, #0]
   15232:	e7ff      	b.n	15234 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   15234:	9800      	ldr	r0, [sp, #0]
   15236:	f000 0001 	and.w	r0, r0, #1
   1523a:	b004      	add	sp, #16
   1523c:	bd80      	pop	{r7, pc}

0001523e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   1523e:	b580      	push	{r7, lr}
   15240:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   15242:	9001      	str	r0, [sp, #4]
   15244:	e7ff      	b.n	15246 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   15246:	9801      	ldr	r0, [sp, #4]
   15248:	3004      	adds	r0, #4
   1524a:	a902      	add	r1, sp, #8
   1524c:	22c8      	movs	r2, #200	; 0xc8
   1524e:	f008 f86d 	bl	1d32c <__aeabi_memcpy>
   15252:	2100      	movs	r1, #0
   15254:	9a01      	ldr	r2, [sp, #4]
   15256:	6011      	str	r1, [r2, #0]
    }
   15258:	b034      	add	sp, #208	; 0xd0
   1525a:	bd80      	pop	{r7, pc}

0001525c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   1525c:	b580      	push	{r7, lr}
   1525e:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   15260:	9000      	str	r0, [sp, #0]
   15262:	e7ff      	b.n	15264 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   15264:	9800      	ldr	r0, [sp, #0]
   15266:	3004      	adds	r0, #4
   15268:	a901      	add	r1, sp, #4
   1526a:	2264      	movs	r2, #100	; 0x64
   1526c:	f008 f85e 	bl	1d32c <__aeabi_memcpy>
   15270:	2100      	movs	r1, #0
   15272:	9a00      	ldr	r2, [sp, #0]
   15274:	6011      	str	r1, [r2, #0]
    }
   15276:	b01a      	add	sp, #104	; 0x68
   15278:	bd80      	pop	{r7, pc}

0001527a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1527a:	b580      	push	{r7, lr}
   1527c:	b088      	sub	sp, #32
   1527e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15280:	1d01      	adds	r1, r0, #4
   15282:	9106      	str	r1, [sp, #24]
   15284:	9107      	str	r1, [sp, #28]
   15286:	9004      	str	r0, [sp, #16]
   15288:	9103      	str	r1, [sp, #12]
   1528a:	e7ff      	b.n	1528c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   1528c:	9804      	ldr	r0, [sp, #16]
   1528e:	6801      	ldr	r1, [r0, #0]
   15290:	9803      	ldr	r0, [sp, #12]
   15292:	f000 fd42 	bl	15d1a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15296:	9002      	str	r0, [sp, #8]
   15298:	9101      	str	r1, [sp, #4]
   1529a:	e7ff      	b.n	1529c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   1529c:	9802      	ldr	r0, [sp, #8]
   1529e:	9901      	ldr	r1, [sp, #4]
   152a0:	b008      	add	sp, #32
   152a2:	bd80      	pop	{r7, pc}

000152a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   152a4:	b580      	push	{r7, lr}
   152a6:	b088      	sub	sp, #32
   152a8:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   152aa:	1d01      	adds	r1, r0, #4
   152ac:	9106      	str	r1, [sp, #24]
   152ae:	9107      	str	r1, [sp, #28]
   152b0:	9004      	str	r0, [sp, #16]
   152b2:	9103      	str	r1, [sp, #12]
   152b4:	e7ff      	b.n	152b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   152b6:	9804      	ldr	r0, [sp, #16]
   152b8:	6801      	ldr	r1, [r0, #0]
   152ba:	9803      	ldr	r0, [sp, #12]
   152bc:	f000 fd2d 	bl	15d1a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   152c0:	9002      	str	r0, [sp, #8]
   152c2:	9101      	str	r1, [sp, #4]
   152c4:	e7ff      	b.n	152c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   152c6:	9802      	ldr	r0, [sp, #8]
   152c8:	9901      	ldr	r1, [sp, #4]
   152ca:	b008      	add	sp, #32
   152cc:	bd80      	pop	{r7, pc}

000152ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   152ce:	b580      	push	{r7, lr}
   152d0:	b08a      	sub	sp, #40	; 0x28
   152d2:	460a      	mov	r2, r1
   152d4:	9006      	str	r0, [sp, #24]
   152d6:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   152da:	1d01      	adds	r1, r0, #4
   152dc:	9108      	str	r1, [sp, #32]
   152de:	9109      	str	r1, [sp, #36]	; 0x24
   152e0:	9005      	str	r0, [sp, #20]
   152e2:	9204      	str	r2, [sp, #16]
   152e4:	9103      	str	r1, [sp, #12]
   152e6:	e7ff      	b.n	152e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   152e8:	9805      	ldr	r0, [sp, #20]
   152ea:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   152ec:	9803      	ldr	r0, [sp, #12]
   152ee:	f000 fe31 	bl	15f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   152f2:	9002      	str	r0, [sp, #8]
   152f4:	e7ff      	b.n	152f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   152f6:	9802      	ldr	r0, [sp, #8]
   152f8:	9904      	ldr	r1, [sp, #16]
   152fa:	f000 fe36 	bl	15f6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   152fe:	e7ff      	b.n	15300 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   15300:	9805      	ldr	r0, [sp, #20]
   15302:	6801      	ldr	r1, [r0, #0]
   15304:	1c4a      	adds	r2, r1, #1
   15306:	4613      	mov	r3, r2
   15308:	428a      	cmp	r2, r1
   1530a:	9301      	str	r3, [sp, #4]
   1530c:	d305      	bcc.n	1531a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   1530e:	e7ff      	b.n	15310 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   15310:	9801      	ldr	r0, [sp, #4]
   15312:	9905      	ldr	r1, [sp, #20]
   15314:	6008      	str	r0, [r1, #0]
    }
   15316:	b00a      	add	sp, #40	; 0x28
   15318:	bd80      	pop	{r7, pc}
        self.len += 1;
   1531a:	f64f 5090 	movw	r0, #64912	; 0xfd90
   1531e:	f2c0 0001 	movt	r0, #1
   15322:	f64f 5274 	movw	r2, #64884	; 0xfd74
   15326:	f2c0 0201 	movt	r2, #1
   1532a:	211c      	movs	r1, #28
   1532c:	f001 fc2a 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15330:	defe      	udf	#254	; 0xfe

00015332 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15332:	b580      	push	{r7, lr}
   15334:	b08a      	sub	sp, #40	; 0x28
   15336:	460a      	mov	r2, r1
   15338:	9006      	str	r0, [sp, #24]
   1533a:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   1533e:	1d01      	adds	r1, r0, #4
   15340:	9108      	str	r1, [sp, #32]
   15342:	9109      	str	r1, [sp, #36]	; 0x24
   15344:	9005      	str	r0, [sp, #20]
   15346:	9204      	str	r2, [sp, #16]
   15348:	9103      	str	r1, [sp, #12]
   1534a:	e7ff      	b.n	1534c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   1534c:	9805      	ldr	r0, [sp, #20]
   1534e:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15350:	9803      	ldr	r0, [sp, #12]
   15352:	f000 fdff 	bl	15f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15356:	9002      	str	r0, [sp, #8]
   15358:	e7ff      	b.n	1535a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   1535a:	9802      	ldr	r0, [sp, #8]
   1535c:	9904      	ldr	r1, [sp, #16]
   1535e:	f000 fe04 	bl	15f6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   15362:	e7ff      	b.n	15364 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   15364:	9805      	ldr	r0, [sp, #20]
   15366:	6801      	ldr	r1, [r0, #0]
   15368:	1c4a      	adds	r2, r1, #1
   1536a:	4613      	mov	r3, r2
   1536c:	428a      	cmp	r2, r1
   1536e:	9301      	str	r3, [sp, #4]
   15370:	d305      	bcc.n	1537e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   15372:	e7ff      	b.n	15374 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   15374:	9801      	ldr	r0, [sp, #4]
   15376:	9905      	ldr	r1, [sp, #20]
   15378:	6008      	str	r0, [r1, #0]
    }
   1537a:	b00a      	add	sp, #40	; 0x28
   1537c:	bd80      	pop	{r7, pc}
        self.len += 1;
   1537e:	f64f 5090 	movw	r0, #64912	; 0xfd90
   15382:	f2c0 0001 	movt	r0, #1
   15386:	f64f 5274 	movw	r2, #64884	; 0xfd74
   1538a:	f2c0 0201 	movt	r2, #1
   1538e:	211c      	movs	r1, #28
   15390:	f001 fbf8 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15394:	defe      	udf	#254	; 0xfe

00015396 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   15396:	b580      	push	{r7, lr}
   15398:	b094      	sub	sp, #80	; 0x50
   1539a:	900e      	str	r0, [sp, #56]	; 0x38
   1539c:	910f      	str	r1, [sp, #60]	; 0x3c
   1539e:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   153a0:	6803      	ldr	r3, [r0, #0]
   153a2:	9009      	str	r0, [sp, #36]	; 0x24
   153a4:	4608      	mov	r0, r1
   153a6:	9108      	str	r1, [sp, #32]
   153a8:	4611      	mov	r1, r2
   153aa:	9207      	str	r2, [sp, #28]
   153ac:	9306      	str	r3, [sp, #24]
   153ae:	f000 fcd8 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   153b2:	9005      	str	r0, [sp, #20]
   153b4:	e7ff      	b.n	153b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   153b6:	9806      	ldr	r0, [sp, #24]
   153b8:	9905      	ldr	r1, [sp, #20]
   153ba:	1842      	adds	r2, r0, r1
   153bc:	4613      	mov	r3, r2
   153be:	4282      	cmp	r2, r0
   153c0:	9304      	str	r3, [sp, #16]
   153c2:	d33f      	bcc.n	15444 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   153c4:	e7ff      	b.n	153c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   153c6:	9809      	ldr	r0, [sp, #36]	; 0x24
   153c8:	f000 f96a 	bl	156a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   153cc:	9003      	str	r0, [sp, #12]
   153ce:	e7ff      	b.n	153d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   153d0:	9804      	ldr	r0, [sp, #16]
   153d2:	9903      	ldr	r1, [sp, #12]
   153d4:	4288      	cmp	r0, r1
   153d6:	d807      	bhi.n	153e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   153d8:	e7ff      	b.n	153da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   153da:	9808      	ldr	r0, [sp, #32]
   153dc:	9907      	ldr	r1, [sp, #28]
   153de:	f000 fd34 	bl	15e4a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   153e2:	9002      	str	r0, [sp, #8]
   153e4:	9101      	str	r1, [sp, #4]
   153e6:	e003      	b.n	153f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   153e8:	2001      	movs	r0, #1
            Err(())
   153ea:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   153ee:	e025      	b.n	1543c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   153f0:	9802      	ldr	r0, [sp, #8]
   153f2:	900b      	str	r0, [sp, #44]	; 0x2c
   153f4:	9901      	ldr	r1, [sp, #4]
   153f6:	910c      	str	r1, [sp, #48]	; 0x30
   153f8:	e7ff      	b.n	153fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   153fa:	a80b      	add	r0, sp, #44	; 0x2c
   153fc:	f000 fd47 	bl	15e8e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15400:	900d      	str	r0, [sp, #52]	; 0x34
   15402:	e7ff      	b.n	15404 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   15404:	980d      	ldr	r0, [sp, #52]	; 0x34
   15406:	2800      	cmp	r0, #0
   15408:	4601      	mov	r1, r0
   1540a:	bf18      	it	ne
   1540c:	2101      	movne	r1, #1
   1540e:	2800      	cmp	r0, #0
   15410:	d001      	beq.n	15416 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   15412:	e7ff      	b.n	15414 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   15414:	e004      	b.n	15420 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   15416:	2000      	movs	r0, #0
            Ok(())
   15418:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1541c:	e00e      	b.n	1543c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   1541e:	defe      	udf	#254	; 0xfe
   15420:	980d      	ldr	r0, [sp, #52]	; 0x34
   15422:	9011      	str	r0, [sp, #68]	; 0x44
   15424:	9012      	str	r0, [sp, #72]	; 0x48
   15426:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15428:	f000 fbeb 	bl	15c02 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   1542c:	9000      	str	r0, [sp, #0]
   1542e:	e7ff      	b.n	15430 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   15430:	9809      	ldr	r0, [sp, #36]	; 0x24
   15432:	9900      	ldr	r1, [sp, #0]
   15434:	f7ff ff4b 	bl	152ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   15438:	e7ff      	b.n	1543a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   1543a:	e7de      	b.n	153fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   1543c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15440:	b014      	add	sp, #80	; 0x50
   15442:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15444:	f64f 5090 	movw	r0, #64912	; 0xfd90
   15448:	f2c0 0001 	movt	r0, #1
   1544c:	f64f 52ac 	movw	r2, #64940	; 0xfdac
   15450:	f2c0 0201 	movt	r2, #1
   15454:	211c      	movs	r1, #28
   15456:	f001 fb95 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1545a:	defe      	udf	#254	; 0xfe

0001545c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1545c:	b580      	push	{r7, lr}
   1545e:	b094      	sub	sp, #80	; 0x50
   15460:	900e      	str	r0, [sp, #56]	; 0x38
   15462:	910f      	str	r1, [sp, #60]	; 0x3c
   15464:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15466:	6803      	ldr	r3, [r0, #0]
   15468:	9009      	str	r0, [sp, #36]	; 0x24
   1546a:	4608      	mov	r0, r1
   1546c:	9108      	str	r1, [sp, #32]
   1546e:	4611      	mov	r1, r2
   15470:	9207      	str	r2, [sp, #28]
   15472:	9306      	str	r3, [sp, #24]
   15474:	f000 fc75 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15478:	9005      	str	r0, [sp, #20]
   1547a:	e7ff      	b.n	1547c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   1547c:	9806      	ldr	r0, [sp, #24]
   1547e:	9905      	ldr	r1, [sp, #20]
   15480:	1842      	adds	r2, r0, r1
   15482:	4613      	mov	r3, r2
   15484:	4282      	cmp	r2, r0
   15486:	9304      	str	r3, [sp, #16]
   15488:	d33f      	bcc.n	1550a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   1548a:	e7ff      	b.n	1548c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   1548c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1548e:	f000 f8fd 	bl	1568c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   15492:	9003      	str	r0, [sp, #12]
   15494:	e7ff      	b.n	15496 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   15496:	9804      	ldr	r0, [sp, #16]
   15498:	9903      	ldr	r1, [sp, #12]
   1549a:	4288      	cmp	r0, r1
   1549c:	d807      	bhi.n	154ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   1549e:	e7ff      	b.n	154a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   154a0:	9808      	ldr	r0, [sp, #32]
   154a2:	9907      	ldr	r1, [sp, #28]
   154a4:	f000 fcd1 	bl	15e4a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   154a8:	9002      	str	r0, [sp, #8]
   154aa:	9101      	str	r1, [sp, #4]
   154ac:	e003      	b.n	154b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   154ae:	2001      	movs	r0, #1
            Err(())
   154b0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   154b4:	e025      	b.n	15502 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   154b6:	9802      	ldr	r0, [sp, #8]
   154b8:	900b      	str	r0, [sp, #44]	; 0x2c
   154ba:	9901      	ldr	r1, [sp, #4]
   154bc:	910c      	str	r1, [sp, #48]	; 0x30
   154be:	e7ff      	b.n	154c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   154c0:	a80b      	add	r0, sp, #44	; 0x2c
   154c2:	f000 fce4 	bl	15e8e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   154c6:	900d      	str	r0, [sp, #52]	; 0x34
   154c8:	e7ff      	b.n	154ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   154ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   154cc:	2800      	cmp	r0, #0
   154ce:	4601      	mov	r1, r0
   154d0:	bf18      	it	ne
   154d2:	2101      	movne	r1, #1
   154d4:	2800      	cmp	r0, #0
   154d6:	d001      	beq.n	154dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   154d8:	e7ff      	b.n	154da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   154da:	e004      	b.n	154e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   154dc:	2000      	movs	r0, #0
            Ok(())
   154de:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   154e2:	e00e      	b.n	15502 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   154e4:	defe      	udf	#254	; 0xfe
   154e6:	980d      	ldr	r0, [sp, #52]	; 0x34
   154e8:	9011      	str	r0, [sp, #68]	; 0x44
   154ea:	9012      	str	r0, [sp, #72]	; 0x48
   154ec:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   154ee:	f000 fb88 	bl	15c02 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   154f2:	9000      	str	r0, [sp, #0]
   154f4:	e7ff      	b.n	154f6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   154f6:	9809      	ldr	r0, [sp, #36]	; 0x24
   154f8:	9900      	ldr	r1, [sp, #0]
   154fa:	f7ff ff1a 	bl	15332 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   154fe:	e7ff      	b.n	15500 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   15500:	e7de      	b.n	154c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   15502:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15506:	b014      	add	sp, #80	; 0x50
   15508:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   1550a:	f64f 5090 	movw	r0, #64912	; 0xfd90
   1550e:	f2c0 0001 	movt	r0, #1
   15512:	f64f 52ac 	movw	r2, #64940	; 0xfdac
   15516:	f2c0 0201 	movt	r2, #1
   1551a:	211c      	movs	r1, #28
   1551c:	f001 fb32 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15520:	defe      	udf	#254	; 0xfe

00015522 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   15522:	b580      	push	{r7, lr}
   15524:	b088      	sub	sp, #32
   15526:	460a      	mov	r2, r1
   15528:	9006      	str	r0, [sp, #24]
   1552a:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   1552e:	6801      	ldr	r1, [r0, #0]
   15530:	9004      	str	r0, [sp, #16]
   15532:	9203      	str	r2, [sp, #12]
   15534:	9102      	str	r1, [sp, #8]
   15536:	f000 f8a9 	bl	1568c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   1553a:	9001      	str	r0, [sp, #4]
   1553c:	e7ff      	b.n	1553e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   1553e:	9802      	ldr	r0, [sp, #8]
   15540:	9901      	ldr	r1, [sp, #4]
   15542:	4288      	cmp	r0, r1
   15544:	d307      	bcc.n	15556 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   15546:	e7ff      	b.n	15548 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   15548:	9803      	ldr	r0, [sp, #12]
   1554a:	f8ad 0016 	strh.w	r0, [sp, #22]
   1554e:	2101      	movs	r1, #1
   15550:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   15554:	e008      	b.n	15568 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   15556:	9804      	ldr	r0, [sp, #16]
   15558:	9903      	ldr	r1, [sp, #12]
   1555a:	f7ff feea 	bl	15332 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1555e:	e7ff      	b.n	15560 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   15560:	2000      	movs	r0, #0
            Ok(())
   15562:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15566:	e7ff      	b.n	15568 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15568:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1556c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   15570:	b008      	add	sp, #32
   15572:	bd80      	pop	{r7, pc}

00015574 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   15574:	b580      	push	{r7, lr}
   15576:	b082      	sub	sp, #8
   15578:	9001      	str	r0, [sp, #4]
   1557a:	2100      	movs	r1, #0
        self.truncate(0);
   1557c:	f000 f8d0 	bl	15720 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   15580:	e7ff      	b.n	15582 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   15582:	b002      	add	sp, #8
   15584:	bd80      	pop	{r7, pc}

00015586 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   15586:	b580      	push	{r7, lr}
   15588:	b082      	sub	sp, #8
   1558a:	9001      	str	r0, [sp, #4]
   1558c:	2100      	movs	r1, #0
        self.truncate(0);
   1558e:	f000 f891 	bl	156b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   15592:	e7ff      	b.n	15594 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   15594:	b002      	add	sp, #8
   15596:	bd80      	pop	{r7, pc}

00015598 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   15598:	b580      	push	{r7, lr}
   1559a:	b0a0      	sub	sp, #128	; 0x80
   1559c:	911f      	str	r1, [sp, #124]	; 0x7c
   1559e:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   155a0:	9004      	str	r0, [sp, #16]
   155a2:	4610      	mov	r0, r2
   155a4:	9103      	str	r1, [sp, #12]
   155a6:	f7ff fe59 	bl	1525c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   155aa:	e7ff      	b.n	155ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   155ac:	9803      	ldr	r0, [sp, #12]
   155ae:	f000 f843 	bl	15638 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   155b2:	9002      	str	r0, [sp, #8]
   155b4:	9101      	str	r1, [sp, #4]
   155b6:	e7ff      	b.n	155b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   155b8:	a805      	add	r0, sp, #20
   155ba:	9902      	ldr	r1, [sp, #8]
   155bc:	9a01      	ldr	r2, [sp, #4]
   155be:	f7ff ff4d 	bl	1545c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   155c2:	9000      	str	r0, [sp, #0]
   155c4:	e7ff      	b.n	155c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   155c6:	9800      	ldr	r0, [sp, #0]
   155c8:	f000 0001 	and.w	r0, r0, #1
   155cc:	f64f 51bc 	movw	r1, #64956	; 0xfdbc
   155d0:	f2c0 0101 	movt	r1, #1
   155d4:	f000 f959 	bl	1588a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   155d8:	e7ff      	b.n	155da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   155da:	a905      	add	r1, sp, #20
   155dc:	2268      	movs	r2, #104	; 0x68
        new
   155de:	9804      	ldr	r0, [sp, #16]
   155e0:	f007 fea4 	bl	1d32c <__aeabi_memcpy>
    }
   155e4:	b020      	add	sp, #128	; 0x80
   155e6:	bd80      	pop	{r7, pc}

000155e8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   155e8:	b580      	push	{r7, lr}
   155ea:	b0ba      	sub	sp, #232	; 0xe8
   155ec:	9139      	str	r1, [sp, #228]	; 0xe4
   155ee:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   155f0:	9005      	str	r0, [sp, #20]
   155f2:	4610      	mov	r0, r2
   155f4:	9104      	str	r1, [sp, #16]
   155f6:	f7ff fe22 	bl	1523e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   155fa:	e7ff      	b.n	155fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   155fc:	9804      	ldr	r0, [sp, #16]
   155fe:	f000 f830 	bl	15662 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15602:	9003      	str	r0, [sp, #12]
   15604:	9102      	str	r1, [sp, #8]
   15606:	e7ff      	b.n	15608 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15608:	a806      	add	r0, sp, #24
   1560a:	9903      	ldr	r1, [sp, #12]
   1560c:	9a02      	ldr	r2, [sp, #8]
   1560e:	f7ff fec2 	bl	15396 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15612:	9001      	str	r0, [sp, #4]
   15614:	e7ff      	b.n	15616 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15616:	9801      	ldr	r0, [sp, #4]
   15618:	f000 0001 	and.w	r0, r0, #1
   1561c:	f64f 51bc 	movw	r1, #64956	; 0xfdbc
   15620:	f2c0 0101 	movt	r1, #1
   15624:	f000 f931 	bl	1588a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15628:	e7ff      	b.n	1562a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   1562a:	a906      	add	r1, sp, #24
   1562c:	22cc      	movs	r2, #204	; 0xcc
        new
   1562e:	9805      	ldr	r0, [sp, #20]
   15630:	f007 fe7c 	bl	1d32c <__aeabi_memcpy>
    }
   15634:	b03a      	add	sp, #232	; 0xe8
   15636:	bd80      	pop	{r7, pc}

00015638 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15638:	b580      	push	{r7, lr}
   1563a:	b088      	sub	sp, #32
   1563c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1563e:	1d01      	adds	r1, r0, #4
   15640:	9106      	str	r1, [sp, #24]
   15642:	9107      	str	r1, [sp, #28]
   15644:	9004      	str	r0, [sp, #16]
   15646:	9103      	str	r1, [sp, #12]
   15648:	e7ff      	b.n	1564a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   1564a:	9804      	ldr	r0, [sp, #16]
   1564c:	6801      	ldr	r1, [r0, #0]
   1564e:	9803      	ldr	r0, [sp, #12]
   15650:	f000 fb56 	bl	15d00 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15654:	9002      	str	r0, [sp, #8]
   15656:	9101      	str	r1, [sp, #4]
   15658:	e7ff      	b.n	1565a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   1565a:	9802      	ldr	r0, [sp, #8]
   1565c:	9901      	ldr	r1, [sp, #4]
   1565e:	b008      	add	sp, #32
   15660:	bd80      	pop	{r7, pc}

00015662 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15662:	b580      	push	{r7, lr}
   15664:	b088      	sub	sp, #32
   15666:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15668:	1d01      	adds	r1, r0, #4
   1566a:	9106      	str	r1, [sp, #24]
   1566c:	9107      	str	r1, [sp, #28]
   1566e:	9004      	str	r0, [sp, #16]
   15670:	9103      	str	r1, [sp, #12]
   15672:	e7ff      	b.n	15674 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   15674:	9804      	ldr	r0, [sp, #16]
   15676:	6801      	ldr	r1, [r0, #0]
   15678:	9803      	ldr	r0, [sp, #12]
   1567a:	f000 fb41 	bl	15d00 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   1567e:	9002      	str	r0, [sp, #8]
   15680:	9101      	str	r1, [sp, #4]
   15682:	e7ff      	b.n	15684 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   15684:	9802      	ldr	r0, [sp, #8]
   15686:	9901      	ldr	r1, [sp, #4]
   15688:	b008      	add	sp, #32
   1568a:	bd80      	pop	{r7, pc}

0001568c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   1568c:	b580      	push	{r7, lr}
   1568e:	b082      	sub	sp, #8
   15690:	9001      	str	r0, [sp, #4]
        N::to_usize()
   15692:	f000 fa26 	bl	15ae2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15696:	9000      	str	r0, [sp, #0]
   15698:	e7ff      	b.n	1569a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   1569a:	9800      	ldr	r0, [sp, #0]
   1569c:	b002      	add	sp, #8
   1569e:	bd80      	pop	{r7, pc}

000156a0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   156a0:	b580      	push	{r7, lr}
   156a2:	b082      	sub	sp, #8
   156a4:	9001      	str	r0, [sp, #4]
        N::to_usize()
   156a6:	f000 fa34 	bl	15b12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   156aa:	9000      	str	r0, [sp, #0]
   156ac:	e7ff      	b.n	156ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   156ae:	9800      	ldr	r0, [sp, #0]
   156b0:	b002      	add	sp, #8
   156b2:	bd80      	pop	{r7, pc}

000156b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   156b4:	b580      	push	{r7, lr}
   156b6:	b08a      	sub	sp, #40	; 0x28
   156b8:	9007      	str	r0, [sp, #28]
   156ba:	9108      	str	r1, [sp, #32]
   156bc:	9106      	str	r1, [sp, #24]
   156be:	9005      	str	r0, [sp, #20]
   156c0:	e7ff      	b.n	156c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   156c2:	9805      	ldr	r0, [sp, #20]
   156c4:	6801      	ldr	r1, [r0, #0]
   156c6:	9a06      	ldr	r2, [sp, #24]
   156c8:	428a      	cmp	r2, r1
   156ca:	d302      	bcc.n	156d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   156cc:	e7ff      	b.n	156ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   156ce:	b00a      	add	sp, #40	; 0x28
   156d0:	bd80      	pop	{r7, pc}
                self.len -= 1;
   156d2:	9805      	ldr	r0, [sp, #20]
   156d4:	6801      	ldr	r1, [r0, #0]
   156d6:	1e4a      	subs	r2, r1, #1
   156d8:	2901      	cmp	r1, #1
   156da:	9204      	str	r2, [sp, #16]
   156dc:	d314      	bcc.n	15708 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   156de:	e7ff      	b.n	156e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   156e0:	9804      	ldr	r0, [sp, #16]
   156e2:	9905      	ldr	r1, [sp, #20]
   156e4:	6008      	str	r0, [r1, #0]
                let len = self.len;
   156e6:	680a      	ldr	r2, [r1, #0]
   156e8:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   156ea:	4608      	mov	r0, r1
   156ec:	9203      	str	r2, [sp, #12]
   156ee:	f7ff fdd9 	bl	152a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   156f2:	9002      	str	r0, [sp, #8]
   156f4:	9101      	str	r1, [sp, #4]
   156f6:	e7ff      	b.n	156f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   156f8:	9802      	ldr	r0, [sp, #8]
   156fa:	9901      	ldr	r1, [sp, #4]
   156fc:	9a03      	ldr	r2, [sp, #12]
   156fe:	f000 fb1e 	bl	15d3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15702:	e7ff      	b.n	15704 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15704:	e7ff      	b.n	15706 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15706:	e7dc      	b.n	156c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15708:	f64f 5050 	movw	r0, #64848	; 0xfd50
   1570c:	f2c0 0001 	movt	r0, #1
   15710:	f64f 52cc 	movw	r2, #64972	; 0xfdcc
   15714:	f2c0 0201 	movt	r2, #1
   15718:	2121      	movs	r1, #33	; 0x21
   1571a:	f001 fa33 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1571e:	defe      	udf	#254	; 0xfe

00015720 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15720:	b580      	push	{r7, lr}
   15722:	b08a      	sub	sp, #40	; 0x28
   15724:	9007      	str	r0, [sp, #28]
   15726:	9108      	str	r1, [sp, #32]
   15728:	9106      	str	r1, [sp, #24]
   1572a:	9005      	str	r0, [sp, #20]
   1572c:	e7ff      	b.n	1572e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   1572e:	9805      	ldr	r0, [sp, #20]
   15730:	6801      	ldr	r1, [r0, #0]
   15732:	9a06      	ldr	r2, [sp, #24]
   15734:	428a      	cmp	r2, r1
   15736:	d302      	bcc.n	1573e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   15738:	e7ff      	b.n	1573a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   1573a:	b00a      	add	sp, #40	; 0x28
   1573c:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1573e:	9805      	ldr	r0, [sp, #20]
   15740:	6801      	ldr	r1, [r0, #0]
   15742:	1e4a      	subs	r2, r1, #1
   15744:	2901      	cmp	r1, #1
   15746:	9204      	str	r2, [sp, #16]
   15748:	d314      	bcc.n	15774 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   1574a:	e7ff      	b.n	1574c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   1574c:	9804      	ldr	r0, [sp, #16]
   1574e:	9905      	ldr	r1, [sp, #20]
   15750:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15752:	680a      	ldr	r2, [r1, #0]
   15754:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15756:	4608      	mov	r0, r1
   15758:	9203      	str	r2, [sp, #12]
   1575a:	f7ff fd8e 	bl	1527a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   1575e:	9002      	str	r0, [sp, #8]
   15760:	9101      	str	r1, [sp, #4]
   15762:	e7ff      	b.n	15764 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15764:	9802      	ldr	r0, [sp, #8]
   15766:	9901      	ldr	r1, [sp, #4]
   15768:	9a03      	ldr	r2, [sp, #12]
   1576a:	f000 fae8 	bl	15d3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   1576e:	e7ff      	b.n	15770 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15770:	e7ff      	b.n	15772 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   15772:	e7dc      	b.n	1572e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   15774:	f64f 5050 	movw	r0, #64848	; 0xfd50
   15778:	f2c0 0001 	movt	r0, #1
   1577c:	f64f 52cc 	movw	r2, #64972	; 0xfdcc
   15780:	f2c0 0201 	movt	r2, #1
   15784:	2121      	movs	r1, #33	; 0x21
   15786:	f001 f9fd 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1578a:	defe      	udf	#254	; 0xfe

0001578c <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   1578c:	b082      	sub	sp, #8
   1578e:	9001      	str	r0, [sp, #4]
   15790:	8800      	ldrh	r0, [r0, #0]
   15792:	2800      	cmp	r0, #0
   15794:	d004      	beq.n	157a0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   15796:	e7ff      	b.n	15798 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   15798:	2000      	movs	r0, #0
   1579a:	f88d 0003 	strb.w	r0, [sp, #3]
   1579e:	e003      	b.n	157a8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   157a0:	2001      	movs	r0, #1
   157a2:	f88d 0003 	strb.w	r0, [sp, #3]
   157a6:	e7ff      	b.n	157a8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   157a8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   157ac:	b002      	add	sp, #8
   157ae:	4770      	bx	lr

000157b0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   157b0:	b082      	sub	sp, #8
   157b2:	9001      	str	r0, [sp, #4]
   157b4:	7800      	ldrb	r0, [r0, #0]
   157b6:	07c0      	lsls	r0, r0, #31
   157b8:	2800      	cmp	r0, #0
   157ba:	d004      	beq.n	157c6 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   157bc:	e7ff      	b.n	157be <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   157be:	2000      	movs	r0, #0
   157c0:	f88d 0003 	strb.w	r0, [sp, #3]
   157c4:	e003      	b.n	157ce <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   157c6:	2001      	movs	r0, #1
   157c8:	f88d 0003 	strb.w	r0, [sp, #3]
   157cc:	e7ff      	b.n	157ce <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   157ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
   157d2:	b002      	add	sp, #8
   157d4:	4770      	bx	lr

000157d6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   157d6:	b510      	push	{r4, lr}
   157d8:	b08a      	sub	sp, #40	; 0x28
   157da:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   157de:	468e      	mov	lr, r1
   157e0:	4604      	mov	r4, r0
   157e2:	f8ad 0014 	strh.w	r0, [sp, #20]
   157e6:	f8ad 1016 	strh.w	r1, [sp, #22]
   157ea:	9207      	str	r2, [sp, #28]
   157ec:	9308      	str	r3, [sp, #32]
   157ee:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   157f2:	4601      	mov	r1, r0
   157f4:	2800      	cmp	r0, #0
   157f6:	9304      	str	r3, [sp, #16]
   157f8:	9203      	str	r2, [sp, #12]
   157fa:	f8cd c008 	str.w	ip, [sp, #8]
   157fe:	d013      	beq.n	15828 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15800:	e7ff      	b.n	15802 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15802:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15806:	f8ad 001a 	strh.w	r0, [sp, #26]
   1580a:	4668      	mov	r0, sp
   1580c:	9902      	ldr	r1, [sp, #8]
   1580e:	6001      	str	r1, [r0, #0]
   15810:	f64f 53ec 	movw	r3, #65004	; 0xfdec
   15814:	f2c0 0301 	movt	r3, #1
   15818:	f10d 021a 	add.w	r2, sp, #26
   1581c:	9803      	ldr	r0, [sp, #12]
   1581e:	9904      	ldr	r1, [sp, #16]
   15820:	f001 f982 	bl	16b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15824:	defe      	udf	#254	; 0xfe
   15826:	defe      	udf	#254	; 0xfe
   15828:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1582c:	2800      	cmp	r0, #0
   1582e:	d102      	bne.n	15836 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15830:	e7ff      	b.n	15832 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15832:	b00a      	add	sp, #40	; 0x28
   15834:	bd10      	pop	{r4, pc}
   15836:	e7fc      	b.n	15832 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00015838 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   15838:	b580      	push	{r7, lr}
   1583a:	b08a      	sub	sp, #40	; 0x28
   1583c:	4684      	mov	ip, r0
   1583e:	f88d 0017 	strb.w	r0, [sp, #23]
   15842:	9107      	str	r1, [sp, #28]
   15844:	9208      	str	r2, [sp, #32]
   15846:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1584a:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1584e:	f1be 0f00 	cmp.w	lr, #0
   15852:	9304      	str	r3, [sp, #16]
   15854:	9203      	str	r2, [sp, #12]
   15856:	9102      	str	r1, [sp, #8]
   15858:	d00e      	beq.n	15878 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   1585a:	e7ff      	b.n	1585c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   1585c:	4668      	mov	r0, sp
   1585e:	9904      	ldr	r1, [sp, #16]
   15860:	6001      	str	r1, [r0, #0]
   15862:	f64f 53dc 	movw	r3, #64988	; 0xfddc
   15866:	f2c0 0301 	movt	r3, #1
   1586a:	aa06      	add	r2, sp, #24
   1586c:	9802      	ldr	r0, [sp, #8]
   1586e:	9903      	ldr	r1, [sp, #12]
   15870:	f001 f95a 	bl	16b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15874:	defe      	udf	#254	; 0xfe
   15876:	defe      	udf	#254	; 0xfe
   15878:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1587c:	07c0      	lsls	r0, r0, #31
   1587e:	2800      	cmp	r0, #0
   15880:	d102      	bne.n	15888 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   15882:	e7ff      	b.n	15884 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   15884:	b00a      	add	sp, #40	; 0x28
   15886:	bd80      	pop	{r7, pc}
   15888:	e7fc      	b.n	15884 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

0001588a <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   1588a:	b086      	sub	sp, #24
   1588c:	4602      	mov	r2, r0
   1588e:	f88d 000f 	strb.w	r0, [sp, #15]
   15892:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15896:	07c3      	lsls	r3, r0, #31
   15898:	2b00      	cmp	r3, #0
   1589a:	9102      	str	r1, [sp, #8]
   1589c:	d011      	beq.n	158c2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   1589e:	e7ff      	b.n	158a0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   158a0:	4668      	mov	r0, sp
   158a2:	9902      	ldr	r1, [sp, #8]
   158a4:	6001      	str	r1, [r0, #0]
   158a6:	f64f 50fc 	movw	r0, #65020	; 0xfdfc
   158aa:	f2c0 0001 	movt	r0, #1
   158ae:	f64f 53dc 	movw	r3, #64988	; 0xfddc
   158b2:	f2c0 0301 	movt	r3, #1
   158b6:	212b      	movs	r1, #43	; 0x2b
   158b8:	aa04      	add	r2, sp, #16
   158ba:	f001 f935 	bl	16b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   158be:	defe      	udf	#254	; 0xfe
   158c0:	defe      	udf	#254	; 0xfe
   158c2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   158c6:	07c0      	lsls	r0, r0, #31
   158c8:	2800      	cmp	r0, #0
   158ca:	d102      	bne.n	158d2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   158cc:	e7ff      	b.n	158ce <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   158ce:	b006      	add	sp, #24
   158d0:	4770      	bx	lr
   158d2:	e7fc      	b.n	158ce <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

000158d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   158d4:	b580      	push	{r7, lr}
   158d6:	b088      	sub	sp, #32
   158d8:	9001      	str	r0, [sp, #4]
   158da:	2000      	movs	r0, #0
   158dc:	f88d 0013 	strb.w	r0, [sp, #19]
   158e0:	f88d 0011 	strb.w	r0, [sp, #17]
   158e4:	f88d 0012 	strb.w	r0, [sp, #18]
   158e8:	2001      	movs	r0, #1
   158ea:	f88d 0012 	strb.w	r0, [sp, #18]
   158ee:	f88d 0013 	strb.w	r0, [sp, #19]
   158f2:	f88d 0011 	strb.w	r0, [sp, #17]
   158f6:	9801      	ldr	r0, [sp, #4]
   158f8:	1e41      	subs	r1, r0, #1
   158fa:	bf18      	it	ne
   158fc:	2101      	movne	r1, #1
   158fe:	2801      	cmp	r0, #1
   15900:	d00d      	beq.n	1591e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15902:	e7ff      	b.n	15904 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15904:	2000      	movs	r0, #0
   15906:	f88d 0013 	strb.w	r0, [sp, #19]
   1590a:	9901      	ldr	r1, [sp, #4]
   1590c:	9107      	str	r1, [sp, #28]
   1590e:	f88d 0011 	strb.w	r0, [sp, #17]
   15912:	9103      	str	r1, [sp, #12]
   15914:	9803      	ldr	r0, [sp, #12]
   15916:	f7fb fab7 	bl	10e88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1591a:	e006      	b.n	1592a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1591c:	defe      	udf	#254	; 0xfe
   1591e:	2000      	movs	r0, #0
   15920:	f88d 0012 	strb.w	r0, [sp, #18]
   15924:	f88d 000b 	strb.w	r0, [sp, #11]
   15928:	e003      	b.n	15932 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1592a:	2001      	movs	r0, #1
   1592c:	f88d 000b 	strb.w	r0, [sp, #11]
   15930:	e7ff      	b.n	15932 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15932:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15936:	07c0      	lsls	r0, r0, #31
   15938:	2800      	cmp	r0, #0
   1593a:	d104      	bne.n	15946 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   1593c:	e7ff      	b.n	1593e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1593e:	9801      	ldr	r0, [sp, #4]
   15940:	2801      	cmp	r0, #1
   15942:	d008      	beq.n	15956 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15944:	e011      	b.n	1596a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15946:	2000      	movs	r0, #0
   15948:	f88d 0011 	strb.w	r0, [sp, #17]
   1594c:	e7f7      	b.n	1593e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1594e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15952:	b008      	add	sp, #32
   15954:	bd80      	pop	{r7, pc}
   15956:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1595a:	07c0      	lsls	r0, r0, #31
   1595c:	2800      	cmp	r0, #0
   1595e:	d0f6      	beq.n	1594e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15960:	e7ff      	b.n	15962 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15962:	2000      	movs	r0, #0
   15964:	f88d 0012 	strb.w	r0, [sp, #18]
   15968:	e7f1      	b.n	1594e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1596a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1596e:	07c0      	lsls	r0, r0, #31
   15970:	2800      	cmp	r0, #0
   15972:	d0ec      	beq.n	1594e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15974:	e7ff      	b.n	15976 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   15976:	2000      	movs	r0, #0
   15978:	f88d 0013 	strb.w	r0, [sp, #19]
   1597c:	e7e7      	b.n	1594e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

0001597e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   1597e:	b580      	push	{r7, lr}
   15980:	b088      	sub	sp, #32
   15982:	9001      	str	r0, [sp, #4]
   15984:	2000      	movs	r0, #0
   15986:	f88d 0013 	strb.w	r0, [sp, #19]
   1598a:	f88d 0011 	strb.w	r0, [sp, #17]
   1598e:	f88d 0012 	strb.w	r0, [sp, #18]
   15992:	2001      	movs	r0, #1
   15994:	f88d 0012 	strb.w	r0, [sp, #18]
   15998:	f88d 0013 	strb.w	r0, [sp, #19]
   1599c:	f88d 0011 	strb.w	r0, [sp, #17]
   159a0:	9801      	ldr	r0, [sp, #4]
   159a2:	1e41      	subs	r1, r0, #1
   159a4:	bf18      	it	ne
   159a6:	2101      	movne	r1, #1
   159a8:	2801      	cmp	r0, #1
   159aa:	d00d      	beq.n	159c8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   159ac:	e7ff      	b.n	159ae <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   159ae:	2000      	movs	r0, #0
   159b0:	f88d 0013 	strb.w	r0, [sp, #19]
   159b4:	9901      	ldr	r1, [sp, #4]
   159b6:	9107      	str	r1, [sp, #28]
   159b8:	f88d 0011 	strb.w	r0, [sp, #17]
   159bc:	9103      	str	r1, [sp, #12]
   159be:	9803      	ldr	r0, [sp, #12]
   159c0:	f7fb fa58 	bl	10e74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   159c4:	e006      	b.n	159d4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   159c6:	defe      	udf	#254	; 0xfe
   159c8:	2000      	movs	r0, #0
   159ca:	f88d 0012 	strb.w	r0, [sp, #18]
   159ce:	f88d 000b 	strb.w	r0, [sp, #11]
   159d2:	e003      	b.n	159dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   159d4:	2001      	movs	r0, #1
   159d6:	f88d 000b 	strb.w	r0, [sp, #11]
   159da:	e7ff      	b.n	159dc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   159dc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   159e0:	07c0      	lsls	r0, r0, #31
   159e2:	2800      	cmp	r0, #0
   159e4:	d104      	bne.n	159f0 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   159e6:	e7ff      	b.n	159e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   159e8:	9801      	ldr	r0, [sp, #4]
   159ea:	2801      	cmp	r0, #1
   159ec:	d008      	beq.n	15a00 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   159ee:	e011      	b.n	15a14 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   159f0:	2000      	movs	r0, #0
   159f2:	f88d 0011 	strb.w	r0, [sp, #17]
   159f6:	e7f7      	b.n	159e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   159f8:	f89d 000b 	ldrb.w	r0, [sp, #11]
   159fc:	b008      	add	sp, #32
   159fe:	bd80      	pop	{r7, pc}
   15a00:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15a04:	07c0      	lsls	r0, r0, #31
   15a06:	2800      	cmp	r0, #0
   15a08:	d0f6      	beq.n	159f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15a0a:	e7ff      	b.n	15a0c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   15a0c:	2000      	movs	r0, #0
   15a0e:	f88d 0012 	strb.w	r0, [sp, #18]
   15a12:	e7f1      	b.n	159f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15a14:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15a18:	07c0      	lsls	r0, r0, #31
   15a1a:	2800      	cmp	r0, #0
   15a1c:	d0ec      	beq.n	159f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15a1e:	e7ff      	b.n	15a20 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15a20:	2000      	movs	r0, #0
   15a22:	f88d 0013 	strb.w	r0, [sp, #19]
   15a26:	e7e7      	b.n	159f8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00015a28 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   15a28:	b580      	push	{r7, lr}
   15a2a:	b088      	sub	sp, #32
   15a2c:	9001      	str	r0, [sp, #4]
   15a2e:	2000      	movs	r0, #0
   15a30:	f88d 0013 	strb.w	r0, [sp, #19]
   15a34:	f88d 0011 	strb.w	r0, [sp, #17]
   15a38:	f88d 0012 	strb.w	r0, [sp, #18]
   15a3c:	2001      	movs	r0, #1
   15a3e:	f88d 0012 	strb.w	r0, [sp, #18]
   15a42:	f88d 0013 	strb.w	r0, [sp, #19]
   15a46:	f88d 0011 	strb.w	r0, [sp, #17]
   15a4a:	9801      	ldr	r0, [sp, #4]
   15a4c:	1e41      	subs	r1, r0, #1
   15a4e:	bf18      	it	ne
   15a50:	2101      	movne	r1, #1
   15a52:	2801      	cmp	r0, #1
   15a54:	d00d      	beq.n	15a72 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   15a56:	e7ff      	b.n	15a58 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   15a58:	2000      	movs	r0, #0
   15a5a:	f88d 0013 	strb.w	r0, [sp, #19]
   15a5e:	9901      	ldr	r1, [sp, #4]
   15a60:	9107      	str	r1, [sp, #28]
   15a62:	f88d 0011 	strb.w	r0, [sp, #17]
   15a66:	9103      	str	r1, [sp, #12]
   15a68:	9803      	ldr	r0, [sp, #12]
   15a6a:	f7fb fa08 	bl	10e7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   15a6e:	e006      	b.n	15a7e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   15a70:	defe      	udf	#254	; 0xfe
   15a72:	2000      	movs	r0, #0
   15a74:	f88d 0012 	strb.w	r0, [sp, #18]
   15a78:	f88d 000b 	strb.w	r0, [sp, #11]
   15a7c:	e003      	b.n	15a86 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   15a7e:	2001      	movs	r0, #1
   15a80:	f88d 000b 	strb.w	r0, [sp, #11]
   15a84:	e7ff      	b.n	15a86 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   15a86:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15a8a:	07c0      	lsls	r0, r0, #31
   15a8c:	2800      	cmp	r0, #0
   15a8e:	d104      	bne.n	15a9a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   15a90:	e7ff      	b.n	15a92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15a92:	9801      	ldr	r0, [sp, #4]
   15a94:	2801      	cmp	r0, #1
   15a96:	d008      	beq.n	15aaa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   15a98:	e011      	b.n	15abe <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   15a9a:	2000      	movs	r0, #0
   15a9c:	f88d 0011 	strb.w	r0, [sp, #17]
   15aa0:	e7f7      	b.n	15a92 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   15aa2:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15aa6:	b008      	add	sp, #32
   15aa8:	bd80      	pop	{r7, pc}
   15aaa:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15aae:	07c0      	lsls	r0, r0, #31
   15ab0:	2800      	cmp	r0, #0
   15ab2:	d0f6      	beq.n	15aa2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15ab4:	e7ff      	b.n	15ab6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   15ab6:	2000      	movs	r0, #0
   15ab8:	f88d 0012 	strb.w	r0, [sp, #18]
   15abc:	e7f1      	b.n	15aa2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15abe:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15ac2:	07c0      	lsls	r0, r0, #31
   15ac4:	2800      	cmp	r0, #0
   15ac6:	d0ec      	beq.n	15aa2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   15ac8:	e7ff      	b.n	15aca <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   15aca:	2000      	movs	r0, #0
   15acc:	f88d 0013 	strb.w	r0, [sp, #19]
   15ad0:	e7e7      	b.n	15aa2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

00015ad2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   15ad2:	b082      	sub	sp, #8
   15ad4:	2001      	movs	r0, #1
   15ad6:	f88d 0003 	strb.w	r0, [sp, #3]
   15ada:	f89d 0003 	ldrb.w	r0, [sp, #3]
   15ade:	b002      	add	sp, #8
   15ae0:	4770      	bx	lr

00015ae2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15ae2:	b580      	push	{r7, lr}
   15ae4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15ae6:	f000 fdee 	bl	166c6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15aea:	9003      	str	r0, [sp, #12]
   15aec:	e7ff      	b.n	15aee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15aee:	9803      	ldr	r0, [sp, #12]
   15af0:	f000 fe4f 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15af4:	9002      	str	r0, [sp, #8]
   15af6:	e7ff      	b.n	15af8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   15af8:	f000 f823 	bl	15b42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   15afc:	9001      	str	r0, [sp, #4]
   15afe:	e7ff      	b.n	15b00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15b00:	9801      	ldr	r0, [sp, #4]
   15b02:	0041      	lsls	r1, r0, #1
   15b04:	9100      	str	r1, [sp, #0]
   15b06:	e7ff      	b.n	15b08 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   15b08:	9802      	ldr	r0, [sp, #8]
   15b0a:	9900      	ldr	r1, [sp, #0]
   15b0c:	4308      	orrs	r0, r1
    }
   15b0e:	b004      	add	sp, #16
   15b10:	bd80      	pop	{r7, pc}

00015b12 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15b12:	b580      	push	{r7, lr}
   15b14:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15b16:	f000 fdd6 	bl	166c6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15b1a:	9003      	str	r0, [sp, #12]
   15b1c:	e7ff      	b.n	15b1e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15b1e:	9803      	ldr	r0, [sp, #12]
   15b20:	f000 fe37 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15b24:	9002      	str	r0, [sp, #8]
   15b26:	e7ff      	b.n	15b28 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   15b28:	f7ff ffdb 	bl	15ae2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15b2c:	9001      	str	r0, [sp, #4]
   15b2e:	e7ff      	b.n	15b30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15b30:	9801      	ldr	r0, [sp, #4]
   15b32:	0041      	lsls	r1, r0, #1
   15b34:	9100      	str	r1, [sp, #0]
   15b36:	e7ff      	b.n	15b38 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   15b38:	9802      	ldr	r0, [sp, #8]
   15b3a:	9900      	ldr	r1, [sp, #0]
   15b3c:	4308      	orrs	r0, r1
    }
   15b3e:	b004      	add	sp, #16
   15b40:	bd80      	pop	{r7, pc}

00015b42 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15b42:	b580      	push	{r7, lr}
   15b44:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15b46:	f000 fdc0 	bl	166ca <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15b4a:	9003      	str	r0, [sp, #12]
   15b4c:	e7ff      	b.n	15b4e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   15b4e:	9803      	ldr	r0, [sp, #12]
   15b50:	f000 fe1f 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15b54:	9002      	str	r0, [sp, #8]
   15b56:	e7ff      	b.n	15b58 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   15b58:	f000 f83b 	bl	15bd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   15b5c:	9001      	str	r0, [sp, #4]
   15b5e:	e7ff      	b.n	15b60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   15b60:	9801      	ldr	r0, [sp, #4]
   15b62:	0041      	lsls	r1, r0, #1
   15b64:	9100      	str	r1, [sp, #0]
   15b66:	e7ff      	b.n	15b68 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   15b68:	9802      	ldr	r0, [sp, #8]
   15b6a:	9900      	ldr	r1, [sp, #0]
   15b6c:	4308      	orrs	r0, r1
    }
   15b6e:	b004      	add	sp, #16
   15b70:	bd80      	pop	{r7, pc}

00015b72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   15b72:	b580      	push	{r7, lr}
   15b74:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15b76:	f000 fda6 	bl	166c6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15b7a:	9003      	str	r0, [sp, #12]
   15b7c:	e7ff      	b.n	15b7e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   15b7e:	9803      	ldr	r0, [sp, #12]
   15b80:	f000 fe07 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15b84:	9002      	str	r0, [sp, #8]
   15b86:	e7ff      	b.n	15b88 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   15b88:	f000 f80b 	bl	15ba2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   15b8c:	9001      	str	r0, [sp, #4]
   15b8e:	e7ff      	b.n	15b90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15b90:	9801      	ldr	r0, [sp, #4]
   15b92:	0041      	lsls	r1, r0, #1
   15b94:	9100      	str	r1, [sp, #0]
   15b96:	e7ff      	b.n	15b98 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   15b98:	9802      	ldr	r0, [sp, #8]
   15b9a:	9900      	ldr	r1, [sp, #0]
   15b9c:	4308      	orrs	r0, r1
    }
   15b9e:	b004      	add	sp, #16
   15ba0:	bd80      	pop	{r7, pc}

00015ba2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15ba2:	b580      	push	{r7, lr}
   15ba4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15ba6:	f000 fd90 	bl	166ca <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15baa:	9003      	str	r0, [sp, #12]
   15bac:	e7ff      	b.n	15bae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15bae:	9803      	ldr	r0, [sp, #12]
   15bb0:	f000 fdef 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15bb4:	9002      	str	r0, [sp, #8]
   15bb6:	e7ff      	b.n	15bb8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   15bb8:	f000 fd25 	bl	16606 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15bbc:	9001      	str	r0, [sp, #4]
   15bbe:	e7ff      	b.n	15bc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15bc0:	9801      	ldr	r0, [sp, #4]
   15bc2:	0041      	lsls	r1, r0, #1
   15bc4:	9100      	str	r1, [sp, #0]
   15bc6:	e7ff      	b.n	15bc8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   15bc8:	9802      	ldr	r0, [sp, #8]
   15bca:	9900      	ldr	r1, [sp, #0]
   15bcc:	4308      	orrs	r0, r1
    }
   15bce:	b004      	add	sp, #16
   15bd0:	bd80      	pop	{r7, pc}

00015bd2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15bd2:	b580      	push	{r7, lr}
   15bd4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15bd6:	f000 fd76 	bl	166c6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15bda:	9003      	str	r0, [sp, #12]
   15bdc:	e7ff      	b.n	15bde <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15bde:	9803      	ldr	r0, [sp, #12]
   15be0:	f000 fdd7 	bl	16792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15be4:	9002      	str	r0, [sp, #8]
   15be6:	e7ff      	b.n	15be8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   15be8:	f7ff ffc3 	bl	15b72 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15bec:	9001      	str	r0, [sp, #4]
   15bee:	e7ff      	b.n	15bf0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15bf0:	9801      	ldr	r0, [sp, #4]
   15bf2:	0041      	lsls	r1, r0, #1
   15bf4:	9100      	str	r1, [sp, #0]
   15bf6:	e7ff      	b.n	15bf8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   15bf8:	9802      	ldr	r0, [sp, #8]
   15bfa:	9900      	ldr	r1, [sp, #0]
   15bfc:	4308      	orrs	r0, r1
    }
   15bfe:	b004      	add	sp, #16
   15c00:	bd80      	pop	{r7, pc}

00015c02 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15c02:	b081      	sub	sp, #4
   15c04:	9000      	str	r0, [sp, #0]
   15c06:	8800      	ldrh	r0, [r0, #0]
   15c08:	b001      	add	sp, #4
   15c0a:	4770      	bx	lr

00015c0c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15c0c:	b580      	push	{r7, lr}
   15c0e:	b08c      	sub	sp, #48	; 0x30
   15c10:	9009      	str	r0, [sp, #36]	; 0x24
   15c12:	910a      	str	r1, [sp, #40]	; 0x28
   15c14:	920b      	str	r2, [sp, #44]	; 0x2c
   15c16:	9006      	str	r0, [sp, #24]
   15c18:	4608      	mov	r0, r1
   15c1a:	9105      	str	r1, [sp, #20]
   15c1c:	4611      	mov	r1, r2
   15c1e:	9204      	str	r2, [sp, #16]
   15c20:	f000 f89f 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c24:	9003      	str	r0, [sp, #12]
   15c26:	e7ff      	b.n	15c28 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15c28:	9806      	ldr	r0, [sp, #24]
   15c2a:	9007      	str	r0, [sp, #28]
   15c2c:	9903      	ldr	r1, [sp, #12]
   15c2e:	9108      	str	r1, [sp, #32]
   15c30:	9807      	ldr	r0, [sp, #28]
   15c32:	9908      	ldr	r1, [sp, #32]
   15c34:	9a05      	ldr	r2, [sp, #20]
   15c36:	9b04      	ldr	r3, [sp, #16]
   15c38:	f000 f82d 	bl	15c96 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15c3c:	9002      	str	r0, [sp, #8]
   15c3e:	9101      	str	r1, [sp, #4]
   15c40:	e7ff      	b.n	15c42 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15c42:	9802      	ldr	r0, [sp, #8]
   15c44:	9901      	ldr	r1, [sp, #4]
   15c46:	b00c      	add	sp, #48	; 0x30
   15c48:	bd80      	pop	{r7, pc}

00015c4a <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15c4a:	b083      	sub	sp, #12
   15c4c:	9001      	str	r0, [sp, #4]
   15c4e:	9102      	str	r1, [sp, #8]
   15c50:	b003      	add	sp, #12
   15c52:	4770      	bx	lr

00015c54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15c54:	b580      	push	{r7, lr}
   15c56:	b08a      	sub	sp, #40	; 0x28
   15c58:	9006      	str	r0, [sp, #24]
   15c5a:	9107      	str	r1, [sp, #28]
   15c5c:	9208      	str	r2, [sp, #32]
   15c5e:	9309      	str	r3, [sp, #36]	; 0x24
   15c60:	9005      	str	r0, [sp, #20]
   15c62:	4610      	mov	r0, r2
   15c64:	9104      	str	r1, [sp, #16]
   15c66:	4619      	mov	r1, r3
   15c68:	f000 f864 	bl	15d34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15c6c:	9003      	str	r0, [sp, #12]
   15c6e:	e7ff      	b.n	15c70 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15c70:	9803      	ldr	r0, [sp, #12]
   15c72:	9905      	ldr	r1, [sp, #20]
   15c74:	f000 f96e 	bl	15f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15c78:	9002      	str	r0, [sp, #8]
   15c7a:	e7ff      	b.n	15c7c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15c7c:	9804      	ldr	r0, [sp, #16]
   15c7e:	9905      	ldr	r1, [sp, #20]
   15c80:	1a41      	subs	r1, r0, r1
   15c82:	9802      	ldr	r0, [sp, #8]
   15c84:	f000 f849 	bl	15d1a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15c88:	9001      	str	r0, [sp, #4]
   15c8a:	9100      	str	r1, [sp, #0]
   15c8c:	e7ff      	b.n	15c8e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15c8e:	9801      	ldr	r0, [sp, #4]
   15c90:	9900      	ldr	r1, [sp, #0]
   15c92:	b00a      	add	sp, #40	; 0x28
   15c94:	bd80      	pop	{r7, pc}

00015c96 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15c96:	b580      	push	{r7, lr}
   15c98:	b08c      	sub	sp, #48	; 0x30
   15c9a:	9008      	str	r0, [sp, #32]
   15c9c:	9109      	str	r1, [sp, #36]	; 0x24
   15c9e:	920a      	str	r2, [sp, #40]	; 0x28
   15ca0:	930b      	str	r3, [sp, #44]	; 0x2c
   15ca2:	4288      	cmp	r0, r1
   15ca4:	9307      	str	r3, [sp, #28]
   15ca6:	9206      	str	r2, [sp, #24]
   15ca8:	9105      	str	r1, [sp, #20]
   15caa:	9004      	str	r0, [sp, #16]
   15cac:	d806      	bhi.n	15cbc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15cae:	e7ff      	b.n	15cb0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15cb0:	9806      	ldr	r0, [sp, #24]
   15cb2:	9907      	ldr	r1, [sp, #28]
   15cb4:	f000 f855 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15cb8:	9003      	str	r0, [sp, #12]
   15cba:	e004      	b.n	15cc6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15cbc:	9804      	ldr	r0, [sp, #16]
   15cbe:	9905      	ldr	r1, [sp, #20]
   15cc0:	f001 fed5 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15cc4:	defe      	udf	#254	; 0xfe
   15cc6:	9805      	ldr	r0, [sp, #20]
   15cc8:	9903      	ldr	r1, [sp, #12]
   15cca:	4288      	cmp	r0, r1
   15ccc:	d809      	bhi.n	15ce2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15cce:	e7ff      	b.n	15cd0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15cd0:	9804      	ldr	r0, [sp, #16]
   15cd2:	9905      	ldr	r1, [sp, #20]
   15cd4:	9a06      	ldr	r2, [sp, #24]
   15cd6:	9b07      	ldr	r3, [sp, #28]
   15cd8:	f7ff ffbc 	bl	15c54 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15cdc:	9002      	str	r0, [sp, #8]
   15cde:	9101      	str	r1, [sp, #4]
   15ce0:	e00a      	b.n	15cf8 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15ce2:	9806      	ldr	r0, [sp, #24]
   15ce4:	9907      	ldr	r1, [sp, #28]
   15ce6:	f000 f83c 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15cea:	9000      	str	r0, [sp, #0]
   15cec:	e7ff      	b.n	15cee <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15cee:	9805      	ldr	r0, [sp, #20]
   15cf0:	9900      	ldr	r1, [sp, #0]
   15cf2:	f001 fe9a 	bl	17a2a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15cf6:	defe      	udf	#254	; 0xfe
   15cf8:	9802      	ldr	r0, [sp, #8]
   15cfa:	9901      	ldr	r1, [sp, #4]
   15cfc:	b00c      	add	sp, #48	; 0x30
   15cfe:	bd80      	pop	{r7, pc}

00015d00 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15d00:	b580      	push	{r7, lr}
   15d02:	b084      	sub	sp, #16
   15d04:	9002      	str	r0, [sp, #8]
   15d06:	9103      	str	r1, [sp, #12]
   15d08:	f000 fd4a 	bl	167a0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15d0c:	9001      	str	r0, [sp, #4]
   15d0e:	9100      	str	r1, [sp, #0]
   15d10:	e7ff      	b.n	15d12 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15d12:	9801      	ldr	r0, [sp, #4]
   15d14:	9900      	ldr	r1, [sp, #0]
   15d16:	b004      	add	sp, #16
   15d18:	bd80      	pop	{r7, pc}

00015d1a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15d1a:	b580      	push	{r7, lr}
   15d1c:	b084      	sub	sp, #16
   15d1e:	9002      	str	r0, [sp, #8]
   15d20:	9103      	str	r1, [sp, #12]
   15d22:	f000 fd4a 	bl	167ba <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15d26:	9001      	str	r0, [sp, #4]
   15d28:	9100      	str	r1, [sp, #0]
   15d2a:	e7ff      	b.n	15d2c <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15d2c:	9801      	ldr	r0, [sp, #4]
   15d2e:	9900      	ldr	r1, [sp, #0]
   15d30:	b004      	add	sp, #16
   15d32:	bd80      	pop	{r7, pc}

00015d34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15d34:	b082      	sub	sp, #8
   15d36:	9000      	str	r0, [sp, #0]
   15d38:	9101      	str	r1, [sp, #4]
   15d3a:	b002      	add	sp, #8
   15d3c:	4770      	bx	lr

00015d3e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15d3e:	b580      	push	{r7, lr}
   15d40:	b086      	sub	sp, #24
   15d42:	9003      	str	r0, [sp, #12]
   15d44:	9104      	str	r1, [sp, #16]
   15d46:	9205      	str	r2, [sp, #20]
   15d48:	9002      	str	r0, [sp, #8]
   15d4a:	4610      	mov	r0, r2
   15d4c:	9a02      	ldr	r2, [sp, #8]
   15d4e:	9101      	str	r1, [sp, #4]
   15d50:	4611      	mov	r1, r2
   15d52:	9a01      	ldr	r2, [sp, #4]
   15d54:	f000 f886 	bl	15e64 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15d58:	9000      	str	r0, [sp, #0]
   15d5a:	e7ff      	b.n	15d5c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15d5c:	9800      	ldr	r0, [sp, #0]
   15d5e:	b006      	add	sp, #24
   15d60:	bd80      	pop	{r7, pc}

00015d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15d62:	b084      	sub	sp, #16
   15d64:	9002      	str	r0, [sp, #8]
   15d66:	9103      	str	r1, [sp, #12]
   15d68:	9000      	str	r0, [sp, #0]
   15d6a:	9101      	str	r1, [sp, #4]
   15d6c:	9801      	ldr	r0, [sp, #4]
   15d6e:	b004      	add	sp, #16
   15d70:	4770      	bx	lr

00015d72 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15d72:	b580      	push	{r7, lr}
   15d74:	b092      	sub	sp, #72	; 0x48
   15d76:	900e      	str	r0, [sp, #56]	; 0x38
   15d78:	910f      	str	r1, [sp, #60]	; 0x3c
   15d7a:	9009      	str	r0, [sp, #36]	; 0x24
   15d7c:	9108      	str	r1, [sp, #32]
   15d7e:	f000 f83e 	bl	15dfe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15d82:	4601      	mov	r1, r0
   15d84:	9010      	str	r0, [sp, #64]	; 0x40
   15d86:	9107      	str	r1, [sp, #28]
   15d88:	e7ff      	b.n	15d8a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15d8a:	9807      	ldr	r0, [sp, #28]
   15d8c:	f000 fcc0 	bl	16710 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15d90:	e7ff      	b.n	15d92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15d92:	e7ff      	b.n	15d94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15d94:	2002      	movs	r0, #2
   15d96:	9011      	str	r0, [sp, #68]	; 0x44
   15d98:	9811      	ldr	r0, [sp, #68]	; 0x44
   15d9a:	9006      	str	r0, [sp, #24]
   15d9c:	e7ff      	b.n	15d9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15d9e:	9806      	ldr	r0, [sp, #24]
   15da0:	2800      	cmp	r0, #0
   15da2:	d006      	beq.n	15db2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   15da4:	e7ff      	b.n	15da6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   15da6:	9809      	ldr	r0, [sp, #36]	; 0x24
   15da8:	9908      	ldr	r1, [sp, #32]
   15daa:	f7ff ffda 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15dae:	9005      	str	r0, [sp, #20]
   15db0:	e011      	b.n	15dd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   15db2:	9807      	ldr	r0, [sp, #28]
   15db4:	9909      	ldr	r1, [sp, #36]	; 0x24
   15db6:	9004      	str	r0, [sp, #16]
   15db8:	4608      	mov	r0, r1
   15dba:	9908      	ldr	r1, [sp, #32]
   15dbc:	f7ff ffd1 	bl	15d62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15dc0:	9003      	str	r0, [sp, #12]
   15dc2:	e7ff      	b.n	15dc4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   15dc4:	9804      	ldr	r0, [sp, #16]
   15dc6:	9903      	ldr	r1, [sp, #12]
   15dc8:	f7fa fa26 	bl	10218 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   15dcc:	9002      	str	r0, [sp, #8]
   15dce:	e7ff      	b.n	15dd0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   15dd0:	9802      	ldr	r0, [sp, #8]
   15dd2:	900c      	str	r0, [sp, #48]	; 0x30
   15dd4:	e006      	b.n	15de4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15dd6:	9807      	ldr	r0, [sp, #28]
   15dd8:	9905      	ldr	r1, [sp, #20]
   15dda:	f000 fc78 	bl	166ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15dde:	900c      	str	r0, [sp, #48]	; 0x30
   15de0:	e7ff      	b.n	15de2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   15de2:	e7ff      	b.n	15de4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15de4:	9807      	ldr	r0, [sp, #28]
   15de6:	f000 f8e2 	bl	15fae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15dea:	9001      	str	r0, [sp, #4]
   15dec:	e7ff      	b.n	15dee <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   15dee:	980c      	ldr	r0, [sp, #48]	; 0x30
   15df0:	9901      	ldr	r1, [sp, #4]
   15df2:	910a      	str	r1, [sp, #40]	; 0x28
   15df4:	900b      	str	r0, [sp, #44]	; 0x2c
   15df6:	980a      	ldr	r0, [sp, #40]	; 0x28
   15df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15dfa:	b012      	add	sp, #72	; 0x48
   15dfc:	bd80      	pop	{r7, pc}

00015dfe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   15dfe:	b082      	sub	sp, #8
   15e00:	9000      	str	r0, [sp, #0]
   15e02:	9101      	str	r1, [sp, #4]
   15e04:	b002      	add	sp, #8
   15e06:	4770      	bx	lr

00015e08 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   15e08:	b580      	push	{r7, lr}
   15e0a:	b086      	sub	sp, #24
   15e0c:	9003      	str	r0, [sp, #12]
   15e0e:	9104      	str	r1, [sp, #16]
   15e10:	f7ff ff1b 	bl	15c4a <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   15e14:	9002      	str	r0, [sp, #8]
   15e16:	9101      	str	r1, [sp, #4]
   15e18:	e7ff      	b.n	15e1a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   15e1a:	9802      	ldr	r0, [sp, #8]
   15e1c:	9901      	ldr	r1, [sp, #4]
   15e1e:	b006      	add	sp, #24
   15e20:	bd80      	pop	{r7, pc}

00015e22 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   15e22:	b580      	push	{r7, lr}
   15e24:	b088      	sub	sp, #32
   15e26:	9005      	str	r0, [sp, #20]
   15e28:	9106      	str	r1, [sp, #24]
   15e2a:	9207      	str	r2, [sp, #28]
   15e2c:	9004      	str	r0, [sp, #16]
   15e2e:	4610      	mov	r0, r2
   15e30:	9a04      	ldr	r2, [sp, #16]
   15e32:	9103      	str	r1, [sp, #12]
   15e34:	4611      	mov	r1, r2
   15e36:	9a03      	ldr	r2, [sp, #12]
   15e38:	f7ff fee8 	bl	15c0c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   15e3c:	9002      	str	r0, [sp, #8]
   15e3e:	9101      	str	r1, [sp, #4]
   15e40:	e7ff      	b.n	15e42 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   15e42:	9802      	ldr	r0, [sp, #8]
   15e44:	9901      	ldr	r1, [sp, #4]
   15e46:	b008      	add	sp, #32
   15e48:	bd80      	pop	{r7, pc}

00015e4a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   15e4a:	b580      	push	{r7, lr}
   15e4c:	b084      	sub	sp, #16
   15e4e:	9002      	str	r0, [sp, #8]
   15e50:	9103      	str	r1, [sp, #12]
   15e52:	f7ff ff8e 	bl	15d72 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   15e56:	9001      	str	r0, [sp, #4]
   15e58:	9100      	str	r1, [sp, #0]
   15e5a:	e7ff      	b.n	15e5c <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   15e5c:	9801      	ldr	r0, [sp, #4]
   15e5e:	9900      	ldr	r1, [sp, #0]
   15e60:	b004      	add	sp, #16
   15e62:	bd80      	pop	{r7, pc}

00015e64 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   15e64:	b580      	push	{r7, lr}
   15e66:	b086      	sub	sp, #24
   15e68:	9003      	str	r0, [sp, #12]
   15e6a:	9104      	str	r1, [sp, #16]
   15e6c:	9205      	str	r2, [sp, #20]
   15e6e:	9002      	str	r0, [sp, #8]
   15e70:	4608      	mov	r0, r1
   15e72:	4611      	mov	r1, r2
   15e74:	f7ff ff5e 	bl	15d34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15e78:	9001      	str	r0, [sp, #4]
   15e7a:	e7ff      	b.n	15e7c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   15e7c:	9801      	ldr	r0, [sp, #4]
   15e7e:	9902      	ldr	r1, [sp, #8]
   15e80:	f000 f868 	bl	15f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15e84:	9000      	str	r0, [sp, #0]
   15e86:	e7ff      	b.n	15e88 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   15e88:	9800      	ldr	r0, [sp, #0]
   15e8a:	b006      	add	sp, #24
   15e8c:	bd80      	pop	{r7, pc}

00015e8e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   15e8e:	b580      	push	{r7, lr}
   15e90:	b08e      	sub	sp, #56	; 0x38
   15e92:	9007      	str	r0, [sp, #28]
   15e94:	6801      	ldr	r1, [r0, #0]
   15e96:	9005      	str	r0, [sp, #20]
   15e98:	4608      	mov	r0, r1
   15e9a:	f000 f88e 	bl	15fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15e9e:	9004      	str	r0, [sp, #16]
   15ea0:	e7ff      	b.n	15ea2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   15ea2:	9804      	ldr	r0, [sp, #16]
   15ea4:	f000 f879 	bl	15f9a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   15ea8:	e7ff      	b.n	15eaa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   15eaa:	e7ff      	b.n	15eac <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   15eac:	2002      	movs	r0, #2
   15eae:	9008      	str	r0, [sp, #32]
   15eb0:	9808      	ldr	r0, [sp, #32]
   15eb2:	9003      	str	r0, [sp, #12]
   15eb4:	e7ff      	b.n	15eb6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   15eb6:	9803      	ldr	r0, [sp, #12]
   15eb8:	2800      	cmp	r0, #0
   15eba:	d007      	beq.n	15ecc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15ebc:	e7ff      	b.n	15ebe <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   15ebe:	9805      	ldr	r0, [sp, #20]
   15ec0:	6840      	ldr	r0, [r0, #4]
   15ec2:	f000 fc25 	bl	16710 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15ec6:	e7ff      	b.n	15ec8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   15ec8:	e7ff      	b.n	15eca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   15eca:	e7ff      	b.n	15ecc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15ecc:	9805      	ldr	r0, [sp, #20]
   15ece:	6800      	ldr	r0, [r0, #0]
   15ed0:	f000 f873 	bl	15fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15ed4:	9002      	str	r0, [sp, #8]
   15ed6:	e7ff      	b.n	15ed8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   15ed8:	9805      	ldr	r0, [sp, #20]
   15eda:	6841      	ldr	r1, [r0, #4]
   15edc:	9a02      	ldr	r2, [sp, #8]
   15ede:	428a      	cmp	r2, r1
   15ee0:	d02f      	beq.n	15f42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   15ee2:	e7ff      	b.n	15ee4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   15ee4:	9805      	ldr	r0, [sp, #20]
   15ee6:	900a      	str	r0, [sp, #40]	; 0x28
   15ee8:	2101      	movs	r1, #1
   15eea:	910b      	str	r1, [sp, #44]	; 0x2c
   15eec:	2102      	movs	r1, #2
   15eee:	910d      	str	r1, [sp, #52]	; 0x34
   15ef0:	990d      	ldr	r1, [sp, #52]	; 0x34
   15ef2:	2900      	cmp	r1, #0
   15ef4:	d015      	beq.n	15f22 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   15ef6:	e7ff      	b.n	15ef8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   15ef8:	9805      	ldr	r0, [sp, #20]
   15efa:	6800      	ldr	r0, [r0, #0]
   15efc:	f000 f85d 	bl	15fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15f00:	900c      	str	r0, [sp, #48]	; 0x30
   15f02:	9905      	ldr	r1, [sp, #20]
   15f04:	680a      	ldr	r2, [r1, #0]
   15f06:	9001      	str	r0, [sp, #4]
   15f08:	4610      	mov	r0, r2
   15f0a:	f000 f856 	bl	15fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15f0e:	2101      	movs	r1, #1
   15f10:	f000 f837 	bl	15f82 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15f14:	f000 f84b 	bl	15fae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15f18:	9905      	ldr	r1, [sp, #20]
   15f1a:	6008      	str	r0, [r1, #0]
   15f1c:	9801      	ldr	r0, [sp, #4]
   15f1e:	9009      	str	r0, [sp, #36]	; 0x24
   15f20:	e00c      	b.n	15f3c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15f22:	9805      	ldr	r0, [sp, #20]
   15f24:	6840      	ldr	r0, [r0, #4]
   15f26:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15f2a:	f7fa f980 	bl	1022e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   15f2e:	9905      	ldr	r1, [sp, #20]
   15f30:	6048      	str	r0, [r1, #4]
   15f32:	6808      	ldr	r0, [r1, #0]
   15f34:	f000 f841 	bl	15fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15f38:	9009      	str	r0, [sp, #36]	; 0x24
   15f3a:	e7ff      	b.n	15f3c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15f3c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15f3e:	9000      	str	r0, [sp, #0]
   15f40:	e002      	b.n	15f48 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   15f42:	2000      	movs	r0, #0
   15f44:	9006      	str	r0, [sp, #24]
   15f46:	e002      	b.n	15f4e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15f48:	9800      	ldr	r0, [sp, #0]
   15f4a:	9006      	str	r0, [sp, #24]
   15f4c:	e7ff      	b.n	15f4e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15f4e:	9806      	ldr	r0, [sp, #24]
   15f50:	b00e      	add	sp, #56	; 0x38
   15f52:	bd80      	pop	{r7, pc}

00015f54 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   15f54:	b580      	push	{r7, lr}
   15f56:	b084      	sub	sp, #16
   15f58:	9002      	str	r0, [sp, #8]
   15f5a:	9103      	str	r1, [sp, #12]
   15f5c:	f000 f811 	bl	15f82 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15f60:	9001      	str	r0, [sp, #4]
   15f62:	e7ff      	b.n	15f64 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   15f64:	9801      	ldr	r0, [sp, #4]
   15f66:	b004      	add	sp, #16
   15f68:	bd80      	pop	{r7, pc}

00015f6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   15f6a:	b580      	push	{r7, lr}
   15f6c:	b084      	sub	sp, #16
   15f6e:	460a      	mov	r2, r1
   15f70:	9002      	str	r0, [sp, #8]
   15f72:	f8ad 100e 	strh.w	r1, [sp, #14]
   15f76:	9201      	str	r2, [sp, #4]
   15f78:	f000 fc4d 	bl	16816 <_ZN4core3ptr5write17h147d4643d861e927E>
   15f7c:	e7ff      	b.n	15f7e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   15f7e:	b004      	add	sp, #16
   15f80:	bd80      	pop	{r7, pc}

00015f82 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   15f82:	b084      	sub	sp, #16
   15f84:	9001      	str	r0, [sp, #4]
   15f86:	9102      	str	r1, [sp, #8]
   15f88:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   15f8c:	9003      	str	r0, [sp, #12]
   15f8e:	9803      	ldr	r0, [sp, #12]
   15f90:	9000      	str	r0, [sp, #0]
   15f92:	e7ff      	b.n	15f94 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   15f94:	9800      	ldr	r0, [sp, #0]
   15f96:	b004      	add	sp, #16
   15f98:	4770      	bx	lr

00015f9a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   15f9a:	b082      	sub	sp, #8
   15f9c:	9001      	str	r0, [sp, #4]
   15f9e:	9000      	str	r0, [sp, #0]
   15fa0:	e7ff      	b.n	15fa2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   15fa2:	9800      	ldr	r0, [sp, #0]
   15fa4:	fab0 f180 	clz	r1, r0
   15fa8:	0948      	lsrs	r0, r1, #5
   15faa:	b002      	add	sp, #8
   15fac:	4770      	bx	lr

00015fae <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   15fae:	b082      	sub	sp, #8
   15fb0:	9001      	str	r0, [sp, #4]
   15fb2:	9000      	str	r0, [sp, #0]
   15fb4:	9800      	ldr	r0, [sp, #0]
   15fb6:	b002      	add	sp, #8
   15fb8:	4770      	bx	lr

00015fba <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   15fba:	b081      	sub	sp, #4
   15fbc:	9000      	str	r0, [sp, #0]
   15fbe:	b001      	add	sp, #4
   15fc0:	4770      	bx	lr

00015fc2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   15fc2:	b084      	sub	sp, #16
   15fc4:	460a      	mov	r2, r1
   15fc6:	4603      	mov	r3, r0
   15fc8:	9103      	str	r1, [sp, #12]
   15fca:	9002      	str	r0, [sp, #8]
   15fcc:	b004      	add	sp, #16
   15fce:	4770      	bx	lr

00015fd0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>:
   15fd0:	b082      	sub	sp, #8
   15fd2:	9000      	str	r0, [sp, #0]
   15fd4:	9101      	str	r1, [sp, #4]
   15fd6:	7800      	ldrb	r0, [r0, #0]
   15fd8:	7809      	ldrb	r1, [r1, #0]
   15fda:	2200      	movs	r2, #0
   15fdc:	4288      	cmp	r0, r1
   15fde:	bf38      	it	cc
   15fe0:	2201      	movcc	r2, #1
   15fe2:	4610      	mov	r0, r2
   15fe4:	b002      	add	sp, #8
   15fe6:	4770      	bx	lr

00015fe8 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>:
   15fe8:	b580      	push	{r7, lr}
   15fea:	b08c      	sub	sp, #48	; 0x30
   15fec:	9005      	str	r0, [sp, #20]
   15fee:	9106      	str	r1, [sp, #24]
   15ff0:	9207      	str	r2, [sp, #28]
   15ff2:	9008      	str	r0, [sp, #32]
   15ff4:	9109      	str	r1, [sp, #36]	; 0x24
   15ff6:	2301      	movs	r3, #1
   15ff8:	930b      	str	r3, [sp, #44]	; 0x2c
   15ffa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15ffc:	9204      	str	r2, [sp, #16]
   15ffe:	9103      	str	r1, [sp, #12]
   16000:	9002      	str	r0, [sp, #8]
   16002:	9301      	str	r3, [sp, #4]
   16004:	e7ff      	b.n	16006 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x1e>
   16006:	9801      	ldr	r0, [sp, #4]
   16008:	9904      	ldr	r1, [sp, #16]
   1600a:	fb00 f201 	mul.w	r2, r0, r1
   1600e:	920a      	str	r2, [sp, #40]	; 0x28
   16010:	9802      	ldr	r0, [sp, #8]
   16012:	9903      	ldr	r1, [sp, #12]
   16014:	f000 fc07 	bl	16826 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>
   16018:	e7ff      	b.n	1601a <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x32>
   1601a:	b00c      	add	sp, #48	; 0x30
   1601c:	bd80      	pop	{r7, pc}

0001601e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>:
   1601e:	b580      	push	{r7, lr}
   16020:	b088      	sub	sp, #32
   16022:	9004      	str	r0, [sp, #16]
   16024:	9105      	str	r1, [sp, #20]
   16026:	2201      	movs	r2, #1
   16028:	9207      	str	r2, [sp, #28]
   1602a:	9a07      	ldr	r2, [sp, #28]
   1602c:	9103      	str	r1, [sp, #12]
   1602e:	9002      	str	r0, [sp, #8]
   16030:	9201      	str	r2, [sp, #4]
   16032:	e7ff      	b.n	16034 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x16>
   16034:	9801      	ldr	r0, [sp, #4]
   16036:	2820      	cmp	r0, #32
   16038:	d306      	bcc.n	16048 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x2a>
   1603a:	e7ff      	b.n	1603c <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x1e>
   1603c:	2201      	movs	r2, #1
   1603e:	9802      	ldr	r0, [sp, #8]
   16040:	9903      	ldr	r1, [sp, #12]
   16042:	f7ff ffd1 	bl	15fe8 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>
   16046:	e013      	b.n	16070 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x52>
   16048:	9802      	ldr	r0, [sp, #8]
   1604a:	f000 f814 	bl	16076 <_ZN4core3ptr4read17h10ae8fa070723038E>
   1604e:	4601      	mov	r1, r0
   16050:	f88d 001b 	strb.w	r0, [sp, #27]
   16054:	9100      	str	r1, [sp, #0]
   16056:	e7ff      	b.n	16058 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x3a>
   16058:	2201      	movs	r2, #1
   1605a:	9803      	ldr	r0, [sp, #12]
   1605c:	9902      	ldr	r1, [sp, #8]
   1605e:	f7f8 faf7 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16062:	e7ff      	b.n	16064 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x46>
   16064:	9803      	ldr	r0, [sp, #12]
   16066:	9900      	ldr	r1, [sp, #0]
   16068:	f7f9 fc49 	bl	f8fe <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   1606c:	e7ff      	b.n	1606e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x50>
   1606e:	e000      	b.n	16072 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   16070:	e7ff      	b.n	16072 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   16072:	b008      	add	sp, #32
   16074:	bd80      	pop	{r7, pc}

00016076 <_ZN4core3ptr4read17h10ae8fa070723038E>:
   16076:	b580      	push	{r7, lr}
   16078:	b088      	sub	sp, #32
   1607a:	9004      	str	r0, [sp, #16]
   1607c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16080:	f88d 100f 	strb.w	r1, [sp, #15]
   16084:	9002      	str	r0, [sp, #8]
   16086:	e7ff      	b.n	16088 <_ZN4core3ptr4read17h10ae8fa070723038E+0x12>
   16088:	f10d 000f 	add.w	r0, sp, #15
   1608c:	9006      	str	r0, [sp, #24]
   1608e:	9007      	str	r0, [sp, #28]
   16090:	e7ff      	b.n	16092 <_ZN4core3ptr4read17h10ae8fa070723038E+0x1c>
   16092:	f10d 010f 	add.w	r1, sp, #15
   16096:	2201      	movs	r2, #1
   16098:	9802      	ldr	r0, [sp, #8]
   1609a:	f7f8 fad9 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1609e:	e7ff      	b.n	160a0 <_ZN4core3ptr4read17h10ae8fa070723038E+0x2a>
   160a0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   160a4:	4601      	mov	r1, r0
   160a6:	f88d 0016 	strb.w	r0, [sp, #22]
   160aa:	f88d 0017 	strb.w	r0, [sp, #23]
   160ae:	9101      	str	r1, [sp, #4]
   160b0:	e7ff      	b.n	160b2 <_ZN4core3ptr4read17h10ae8fa070723038E+0x3c>
   160b2:	9801      	ldr	r0, [sp, #4]
   160b4:	b008      	add	sp, #32
   160b6:	bd80      	pop	{r7, pc}

000160b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   160b8:	b580      	push	{r7, lr}
   160ba:	b088      	sub	sp, #32
   160bc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   160be:	1d01      	adds	r1, r0, #4
   160c0:	9106      	str	r1, [sp, #24]
   160c2:	9107      	str	r1, [sp, #28]
   160c4:	9004      	str	r0, [sp, #16]
   160c6:	9103      	str	r1, [sp, #12]
   160c8:	e7ff      	b.n	160ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   160ca:	9804      	ldr	r0, [sp, #16]
   160cc:	6801      	ldr	r1, [r0, #0]
   160ce:	9803      	ldr	r0, [sp, #12]
   160d0:	f7f9 fa6f 	bl	f5b2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   160d4:	9002      	str	r0, [sp, #8]
   160d6:	9101      	str	r1, [sp, #4]
   160d8:	e7ff      	b.n	160da <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   160da:	9802      	ldr	r0, [sp, #8]
   160dc:	9901      	ldr	r1, [sp, #4]
   160de:	b008      	add	sp, #32
   160e0:	bd80      	pop	{r7, pc}

000160e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   160e2:	b580      	push	{r7, lr}
   160e4:	b088      	sub	sp, #32
   160e6:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   160e8:	1d01      	adds	r1, r0, #4
   160ea:	9106      	str	r1, [sp, #24]
   160ec:	9107      	str	r1, [sp, #28]
   160ee:	9004      	str	r0, [sp, #16]
   160f0:	9103      	str	r1, [sp, #12]
   160f2:	e7ff      	b.n	160f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   160f4:	9804      	ldr	r0, [sp, #16]
   160f6:	6801      	ldr	r1, [r0, #0]
   160f8:	9803      	ldr	r0, [sp, #12]
   160fa:	f7f9 fa5a 	bl	f5b2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   160fe:	9002      	str	r0, [sp, #8]
   16100:	9101      	str	r1, [sp, #4]
   16102:	e7ff      	b.n	16104 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   16104:	9802      	ldr	r0, [sp, #8]
   16106:	9901      	ldr	r1, [sp, #4]
   16108:	b008      	add	sp, #32
   1610a:	bd80      	pop	{r7, pc}

0001610c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1610c:	b580      	push	{r7, lr}
   1610e:	b08a      	sub	sp, #40	; 0x28
   16110:	460a      	mov	r2, r1
   16112:	9006      	str	r0, [sp, #24]
   16114:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16118:	1d01      	adds	r1, r0, #4
   1611a:	9108      	str	r1, [sp, #32]
   1611c:	9109      	str	r1, [sp, #36]	; 0x24
   1611e:	9005      	str	r0, [sp, #20]
   16120:	9204      	str	r2, [sp, #16]
   16122:	9103      	str	r1, [sp, #12]
   16124:	e7ff      	b.n	16126 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   16126:	9805      	ldr	r0, [sp, #20]
   16128:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1612a:	9803      	ldr	r0, [sp, #12]
   1612c:	f7f8 fbf4 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16130:	9002      	str	r0, [sp, #8]
   16132:	e7ff      	b.n	16134 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   16134:	9802      	ldr	r0, [sp, #8]
   16136:	9904      	ldr	r1, [sp, #16]
   16138:	f000 f994 	bl	16464 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   1613c:	e7ff      	b.n	1613e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   1613e:	9805      	ldr	r0, [sp, #20]
   16140:	6801      	ldr	r1, [r0, #0]
   16142:	1c4a      	adds	r2, r1, #1
   16144:	4613      	mov	r3, r2
   16146:	428a      	cmp	r2, r1
   16148:	9301      	str	r3, [sp, #4]
   1614a:	d305      	bcc.n	16158 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   1614c:	e7ff      	b.n	1614e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   1614e:	9801      	ldr	r0, [sp, #4]
   16150:	9905      	ldr	r1, [sp, #20]
   16152:	6008      	str	r0, [r1, #0]
    }
   16154:	b00a      	add	sp, #40	; 0x28
   16156:	bd80      	pop	{r7, pc}
        self.len += 1;
   16158:	f64f 6090 	movw	r0, #65168	; 0xfe90
   1615c:	f2c0 0001 	movt	r0, #1
   16160:	f64f 6280 	movw	r2, #65152	; 0xfe80
   16164:	f2c0 0201 	movt	r2, #1
   16168:	211c      	movs	r1, #28
   1616a:	f000 fd0b 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1616e:	defe      	udf	#254	; 0xfe

00016170 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16170:	b580      	push	{r7, lr}
   16172:	b08a      	sub	sp, #40	; 0x28
   16174:	460a      	mov	r2, r1
   16176:	9006      	str	r0, [sp, #24]
   16178:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   1617c:	1d01      	adds	r1, r0, #4
   1617e:	9108      	str	r1, [sp, #32]
   16180:	9109      	str	r1, [sp, #36]	; 0x24
   16182:	9005      	str	r0, [sp, #20]
   16184:	9204      	str	r2, [sp, #16]
   16186:	9103      	str	r1, [sp, #12]
   16188:	e7ff      	b.n	1618a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   1618a:	9805      	ldr	r0, [sp, #20]
   1618c:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1618e:	9803      	ldr	r0, [sp, #12]
   16190:	f7f8 fbc2 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16194:	9002      	str	r0, [sp, #8]
   16196:	e7ff      	b.n	16198 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   16198:	9802      	ldr	r0, [sp, #8]
   1619a:	9904      	ldr	r1, [sp, #16]
   1619c:	f000 f962 	bl	16464 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   161a0:	e7ff      	b.n	161a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   161a2:	9805      	ldr	r0, [sp, #20]
   161a4:	6801      	ldr	r1, [r0, #0]
   161a6:	1c4a      	adds	r2, r1, #1
   161a8:	4613      	mov	r3, r2
   161aa:	428a      	cmp	r2, r1
   161ac:	9301      	str	r3, [sp, #4]
   161ae:	d305      	bcc.n	161bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   161b0:	e7ff      	b.n	161b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   161b2:	9801      	ldr	r0, [sp, #4]
   161b4:	9905      	ldr	r1, [sp, #20]
   161b6:	6008      	str	r0, [r1, #0]
    }
   161b8:	b00a      	add	sp, #40	; 0x28
   161ba:	bd80      	pop	{r7, pc}
        self.len += 1;
   161bc:	f64f 6090 	movw	r0, #65168	; 0xfe90
   161c0:	f2c0 0001 	movt	r0, #1
   161c4:	f64f 6280 	movw	r2, #65152	; 0xfe80
   161c8:	f2c0 0201 	movt	r2, #1
   161cc:	211c      	movs	r1, #28
   161ce:	f000 fcd9 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   161d2:	defe      	udf	#254	; 0xfe

000161d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   161d4:	b580      	push	{r7, lr}
   161d6:	b094      	sub	sp, #80	; 0x50
   161d8:	900e      	str	r0, [sp, #56]	; 0x38
   161da:	910f      	str	r1, [sp, #60]	; 0x3c
   161dc:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   161de:	6803      	ldr	r3, [r0, #0]
   161e0:	9009      	str	r0, [sp, #36]	; 0x24
   161e2:	4608      	mov	r0, r1
   161e4:	9108      	str	r1, [sp, #32]
   161e6:	4611      	mov	r1, r2
   161e8:	9207      	str	r2, [sp, #28]
   161ea:	9306      	str	r3, [sp, #24]
   161ec:	f7f8 fc24 	bl	ea38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   161f0:	9005      	str	r0, [sp, #20]
   161f2:	e7ff      	b.n	161f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   161f4:	9806      	ldr	r0, [sp, #24]
   161f6:	9905      	ldr	r1, [sp, #20]
   161f8:	1842      	adds	r2, r0, r1
   161fa:	4613      	mov	r3, r2
   161fc:	4282      	cmp	r2, r0
   161fe:	9304      	str	r3, [sp, #16]
   16200:	d33f      	bcc.n	16282 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   16202:	e7ff      	b.n	16204 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   16204:	9809      	ldr	r0, [sp, #36]	; 0x24
   16206:	f000 f8ad 	bl	16364 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   1620a:	9003      	str	r0, [sp, #12]
   1620c:	e7ff      	b.n	1620e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   1620e:	9804      	ldr	r0, [sp, #16]
   16210:	9903      	ldr	r1, [sp, #12]
   16212:	4288      	cmp	r0, r1
   16214:	d807      	bhi.n	16226 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   16216:	e7ff      	b.n	16218 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   16218:	9808      	ldr	r0, [sp, #32]
   1621a:	9907      	ldr	r1, [sp, #28]
   1621c:	f7f9 fae7 	bl	f7ee <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16220:	9002      	str	r0, [sp, #8]
   16222:	9101      	str	r1, [sp, #4]
   16224:	e003      	b.n	1622e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   16226:	2001      	movs	r0, #1
            Err(())
   16228:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1622c:	e025      	b.n	1627a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1622e:	9802      	ldr	r0, [sp, #8]
   16230:	900b      	str	r0, [sp, #44]	; 0x2c
   16232:	9901      	ldr	r1, [sp, #4]
   16234:	910c      	str	r1, [sp, #48]	; 0x30
   16236:	e7ff      	b.n	16238 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   16238:	a80b      	add	r0, sp, #44	; 0x2c
   1623a:	f7fc ff85 	bl	13148 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   1623e:	900d      	str	r0, [sp, #52]	; 0x34
   16240:	e7ff      	b.n	16242 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   16242:	980d      	ldr	r0, [sp, #52]	; 0x34
   16244:	2800      	cmp	r0, #0
   16246:	4601      	mov	r1, r0
   16248:	bf18      	it	ne
   1624a:	2101      	movne	r1, #1
   1624c:	2800      	cmp	r0, #0
   1624e:	d001      	beq.n	16254 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   16250:	e7ff      	b.n	16252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   16252:	e004      	b.n	1625e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   16254:	2000      	movs	r0, #0
            Ok(())
   16256:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1625a:	e00e      	b.n	1627a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1625c:	defe      	udf	#254	; 0xfe
   1625e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16260:	9011      	str	r0, [sp, #68]	; 0x44
   16262:	9012      	str	r0, [sp, #72]	; 0x48
   16264:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16266:	f000 f909 	bl	1647c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   1626a:	9000      	str	r0, [sp, #0]
   1626c:	e7ff      	b.n	1626e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   1626e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16270:	9900      	ldr	r1, [sp, #0]
   16272:	f7ff ff4b 	bl	1610c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   16276:	e7ff      	b.n	16278 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   16278:	e7de      	b.n	16238 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   1627a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1627e:	b014      	add	sp, #80	; 0x50
   16280:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   16282:	f64f 6090 	movw	r0, #65168	; 0xfe90
   16286:	f2c0 0001 	movt	r0, #1
   1628a:	f64f 62ac 	movw	r2, #65196	; 0xfeac
   1628e:	f2c0 0201 	movt	r2, #1
   16292:	211c      	movs	r1, #28
   16294:	f000 fc76 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16298:	defe      	udf	#254	; 0xfe

0001629a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   1629a:	b580      	push	{r7, lr}
   1629c:	b088      	sub	sp, #32
   1629e:	460a      	mov	r2, r1
   162a0:	9006      	str	r0, [sp, #24]
   162a2:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   162a6:	6801      	ldr	r1, [r0, #0]
   162a8:	9004      	str	r0, [sp, #16]
   162aa:	9203      	str	r2, [sp, #12]
   162ac:	9102      	str	r1, [sp, #8]
   162ae:	f000 f863 	bl	16378 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   162b2:	9001      	str	r0, [sp, #4]
   162b4:	e7ff      	b.n	162b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   162b6:	9802      	ldr	r0, [sp, #8]
   162b8:	9901      	ldr	r1, [sp, #4]
   162ba:	4288      	cmp	r0, r1
   162bc:	d307      	bcc.n	162ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   162be:	e7ff      	b.n	162c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   162c0:	9803      	ldr	r0, [sp, #12]
   162c2:	f88d 0015 	strb.w	r0, [sp, #21]
   162c6:	2101      	movs	r1, #1
   162c8:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   162cc:	e008      	b.n	162e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   162ce:	9804      	ldr	r0, [sp, #16]
   162d0:	9903      	ldr	r1, [sp, #12]
   162d2:	f7ff ff4d 	bl	16170 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   162d6:	e7ff      	b.n	162d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   162d8:	2000      	movs	r0, #0
            Ok(())
   162da:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   162de:	e7ff      	b.n	162e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   162e0:	f89d 0014 	ldrb.w	r0, [sp, #20]
   162e4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   162e8:	b008      	add	sp, #32
   162ea:	bd80      	pop	{r7, pc}

000162ec <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   162ec:	b580      	push	{r7, lr}
   162ee:	b082      	sub	sp, #8
   162f0:	9001      	str	r0, [sp, #4]
   162f2:	2100      	movs	r1, #0
        self.truncate(0);
   162f4:	f000 f880 	bl	163f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   162f8:	e7ff      	b.n	162fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   162fa:	b002      	add	sp, #8
   162fc:	bd80      	pop	{r7, pc}

000162fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   162fe:	b580      	push	{r7, lr}
   16300:	b082      	sub	sp, #8
   16302:	9001      	str	r0, [sp, #4]
   16304:	2100      	movs	r1, #0
        self.truncate(0);
   16306:	f000 f841 	bl	1638c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   1630a:	e7ff      	b.n	1630c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   1630c:	b002      	add	sp, #8
   1630e:	bd80      	pop	{r7, pc}

00016310 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16310:	b580      	push	{r7, lr}
   16312:	b088      	sub	sp, #32
   16314:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16316:	1d01      	adds	r1, r0, #4
   16318:	9106      	str	r1, [sp, #24]
   1631a:	9107      	str	r1, [sp, #28]
   1631c:	9004      	str	r0, [sp, #16]
   1631e:	9103      	str	r1, [sp, #12]
   16320:	e7ff      	b.n	16322 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   16322:	9804      	ldr	r0, [sp, #16]
   16324:	6801      	ldr	r1, [r0, #0]
   16326:	9803      	ldr	r0, [sp, #12]
   16328:	f7fc fff0 	bl	1330c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   1632c:	9002      	str	r0, [sp, #8]
   1632e:	9101      	str	r1, [sp, #4]
   16330:	e7ff      	b.n	16332 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   16332:	9802      	ldr	r0, [sp, #8]
   16334:	9901      	ldr	r1, [sp, #4]
   16336:	b008      	add	sp, #32
   16338:	bd80      	pop	{r7, pc}

0001633a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1633a:	b580      	push	{r7, lr}
   1633c:	b088      	sub	sp, #32
   1633e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16340:	1d01      	adds	r1, r0, #4
   16342:	9106      	str	r1, [sp, #24]
   16344:	9107      	str	r1, [sp, #28]
   16346:	9004      	str	r0, [sp, #16]
   16348:	9103      	str	r1, [sp, #12]
   1634a:	e7ff      	b.n	1634c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   1634c:	9804      	ldr	r0, [sp, #16]
   1634e:	6801      	ldr	r1, [r0, #0]
   16350:	9803      	ldr	r0, [sp, #12]
   16352:	f7fc ffdb 	bl	1330c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16356:	9002      	str	r0, [sp, #8]
   16358:	9101      	str	r1, [sp, #4]
   1635a:	e7ff      	b.n	1635c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   1635c:	9802      	ldr	r0, [sp, #8]
   1635e:	9901      	ldr	r1, [sp, #4]
   16360:	b008      	add	sp, #32
   16362:	bd80      	pop	{r7, pc}

00016364 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   16364:	b580      	push	{r7, lr}
   16366:	b082      	sub	sp, #8
   16368:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1636a:	f000 f91c 	bl	165a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   1636e:	9000      	str	r0, [sp, #0]
   16370:	e7ff      	b.n	16372 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   16372:	9800      	ldr	r0, [sp, #0]
   16374:	b002      	add	sp, #8
   16376:	bd80      	pop	{r7, pc}

00016378 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16378:	b580      	push	{r7, lr}
   1637a:	b082      	sub	sp, #8
   1637c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1637e:	f000 f942 	bl	16606 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   16382:	9000      	str	r0, [sp, #0]
   16384:	e7ff      	b.n	16386 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   16386:	9800      	ldr	r0, [sp, #0]
   16388:	b002      	add	sp, #8
   1638a:	bd80      	pop	{r7, pc}

0001638c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   1638c:	b580      	push	{r7, lr}
   1638e:	b08a      	sub	sp, #40	; 0x28
   16390:	9007      	str	r0, [sp, #28]
   16392:	9108      	str	r1, [sp, #32]
   16394:	9106      	str	r1, [sp, #24]
   16396:	9005      	str	r0, [sp, #20]
   16398:	e7ff      	b.n	1639a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   1639a:	9805      	ldr	r0, [sp, #20]
   1639c:	6801      	ldr	r1, [r0, #0]
   1639e:	9a06      	ldr	r2, [sp, #24]
   163a0:	428a      	cmp	r2, r1
   163a2:	d302      	bcc.n	163aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   163a4:	e7ff      	b.n	163a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   163a6:	b00a      	add	sp, #40	; 0x28
   163a8:	bd80      	pop	{r7, pc}
                self.len -= 1;
   163aa:	9805      	ldr	r0, [sp, #20]
   163ac:	6801      	ldr	r1, [r0, #0]
   163ae:	1e4a      	subs	r2, r1, #1
   163b0:	2901      	cmp	r1, #1
   163b2:	9204      	str	r2, [sp, #16]
   163b4:	d314      	bcc.n	163e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   163b6:	e7ff      	b.n	163b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   163b8:	9804      	ldr	r0, [sp, #16]
   163ba:	9905      	ldr	r1, [sp, #20]
   163bc:	6008      	str	r0, [r1, #0]
                let len = self.len;
   163be:	680a      	ldr	r2, [r1, #0]
   163c0:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   163c2:	4608      	mov	r0, r1
   163c4:	9203      	str	r2, [sp, #12]
   163c6:	f7ff fe8c 	bl	160e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   163ca:	9002      	str	r0, [sp, #8]
   163cc:	9101      	str	r1, [sp, #4]
   163ce:	e7ff      	b.n	163d0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   163d0:	9802      	ldr	r0, [sp, #8]
   163d2:	9901      	ldr	r1, [sp, #4]
   163d4:	9a03      	ldr	r2, [sp, #12]
   163d6:	f7f8 fb1d 	bl	ea14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   163da:	e7ff      	b.n	163dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   163dc:	e7ff      	b.n	163de <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   163de:	e7dc      	b.n	1639a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   163e0:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   163e4:	f2c0 0001 	movt	r0, #1
   163e8:	f64f 62bc 	movw	r2, #65212	; 0xfebc
   163ec:	f2c0 0201 	movt	r2, #1
   163f0:	2121      	movs	r1, #33	; 0x21
   163f2:	f000 fbc7 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   163f6:	defe      	udf	#254	; 0xfe

000163f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   163f8:	b580      	push	{r7, lr}
   163fa:	b08a      	sub	sp, #40	; 0x28
   163fc:	9007      	str	r0, [sp, #28]
   163fe:	9108      	str	r1, [sp, #32]
   16400:	9106      	str	r1, [sp, #24]
   16402:	9005      	str	r0, [sp, #20]
   16404:	e7ff      	b.n	16406 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   16406:	9805      	ldr	r0, [sp, #20]
   16408:	6801      	ldr	r1, [r0, #0]
   1640a:	9a06      	ldr	r2, [sp, #24]
   1640c:	428a      	cmp	r2, r1
   1640e:	d302      	bcc.n	16416 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   16410:	e7ff      	b.n	16412 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   16412:	b00a      	add	sp, #40	; 0x28
   16414:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16416:	9805      	ldr	r0, [sp, #20]
   16418:	6801      	ldr	r1, [r0, #0]
   1641a:	1e4a      	subs	r2, r1, #1
   1641c:	2901      	cmp	r1, #1
   1641e:	9204      	str	r2, [sp, #16]
   16420:	d314      	bcc.n	1644c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   16422:	e7ff      	b.n	16424 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   16424:	9804      	ldr	r0, [sp, #16]
   16426:	9905      	ldr	r1, [sp, #20]
   16428:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1642a:	680a      	ldr	r2, [r1, #0]
   1642c:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1642e:	4608      	mov	r0, r1
   16430:	9203      	str	r2, [sp, #12]
   16432:	f7ff fe41 	bl	160b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   16436:	9002      	str	r0, [sp, #8]
   16438:	9101      	str	r1, [sp, #4]
   1643a:	e7ff      	b.n	1643c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   1643c:	9802      	ldr	r0, [sp, #8]
   1643e:	9901      	ldr	r1, [sp, #4]
   16440:	9a03      	ldr	r2, [sp, #12]
   16442:	f7f8 fae7 	bl	ea14 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16446:	e7ff      	b.n	16448 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   16448:	e7ff      	b.n	1644a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1644a:	e7dc      	b.n	16406 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   1644c:	f64f 60d0 	movw	r0, #65232	; 0xfed0
   16450:	f2c0 0001 	movt	r0, #1
   16454:	f64f 62bc 	movw	r2, #65212	; 0xfebc
   16458:	f2c0 0201 	movt	r2, #1
   1645c:	2121      	movs	r1, #33	; 0x21
   1645e:	f000 fb91 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16462:	defe      	udf	#254	; 0xfe

00016464 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   16464:	b580      	push	{r7, lr}
   16466:	b084      	sub	sp, #16
   16468:	460a      	mov	r2, r1
   1646a:	9002      	str	r0, [sp, #8]
   1646c:	f88d 100f 	strb.w	r1, [sp, #15]
   16470:	9201      	str	r2, [sp, #4]
   16472:	f7f9 fa44 	bl	f8fe <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   16476:	e7ff      	b.n	16478 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   16478:	b004      	add	sp, #16
   1647a:	bd80      	pop	{r7, pc}

0001647c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   1647c:	b081      	sub	sp, #4
   1647e:	9000      	str	r0, [sp, #0]
   16480:	7800      	ldrb	r0, [r0, #0]
   16482:	b001      	add	sp, #4
   16484:	4770      	bx	lr

00016486 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   16486:	b580      	push	{r7, lr}
   16488:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1648a:	f000 fa5a 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1648e:	9003      	str	r0, [sp, #12]
   16490:	e7ff      	b.n	16492 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   16492:	9803      	ldr	r0, [sp, #12]
   16494:	f000 fa5b 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16498:	9002      	str	r0, [sp, #8]
   1649a:	e7ff      	b.n	1649c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   1649c:	f000 f8b3 	bl	16606 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   164a0:	9001      	str	r0, [sp, #4]
   164a2:	e7ff      	b.n	164a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   164a4:	9801      	ldr	r0, [sp, #4]
   164a6:	0041      	lsls	r1, r0, #1
   164a8:	9100      	str	r1, [sp, #0]
   164aa:	e7ff      	b.n	164ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   164ac:	9802      	ldr	r0, [sp, #8]
   164ae:	9900      	ldr	r1, [sp, #0]
   164b0:	4308      	orrs	r0, r1
    }
   164b2:	b004      	add	sp, #16
   164b4:	bd80      	pop	{r7, pc}

000164b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   164b6:	b580      	push	{r7, lr}
   164b8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164ba:	f000 fa42 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164be:	9003      	str	r0, [sp, #12]
   164c0:	e7ff      	b.n	164c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   164c2:	9803      	ldr	r0, [sp, #12]
   164c4:	f000 fa43 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164c8:	9002      	str	r0, [sp, #8]
   164ca:	e7ff      	b.n	164cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   164cc:	f000 f853 	bl	16576 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   164d0:	9001      	str	r0, [sp, #4]
   164d2:	e7ff      	b.n	164d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   164d4:	9801      	ldr	r0, [sp, #4]
   164d6:	0041      	lsls	r1, r0, #1
   164d8:	9100      	str	r1, [sp, #0]
   164da:	e7ff      	b.n	164dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   164dc:	9802      	ldr	r0, [sp, #8]
   164de:	9900      	ldr	r1, [sp, #0]
   164e0:	4308      	orrs	r0, r1
    }
   164e2:	b004      	add	sp, #16
   164e4:	bd80      	pop	{r7, pc}

000164e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   164e6:	b580      	push	{r7, lr}
   164e8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164ea:	f000 fa2a 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164ee:	9003      	str	r0, [sp, #12]
   164f0:	e7ff      	b.n	164f2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   164f2:	9803      	ldr	r0, [sp, #12]
   164f4:	f000 fa2b 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164f8:	9002      	str	r0, [sp, #8]
   164fa:	e7ff      	b.n	164fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   164fc:	f000 f80b 	bl	16516 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   16500:	9001      	str	r0, [sp, #4]
   16502:	e7ff      	b.n	16504 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   16504:	9801      	ldr	r0, [sp, #4]
   16506:	0041      	lsls	r1, r0, #1
   16508:	9100      	str	r1, [sp, #0]
   1650a:	e7ff      	b.n	1650c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   1650c:	9802      	ldr	r0, [sp, #8]
   1650e:	9900      	ldr	r1, [sp, #0]
   16510:	4308      	orrs	r0, r1
    }
   16512:	b004      	add	sp, #16
   16514:	bd80      	pop	{r7, pc}

00016516 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   16516:	b580      	push	{r7, lr}
   16518:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1651a:	f000 fa12 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1651e:	9003      	str	r0, [sp, #12]
   16520:	e7ff      	b.n	16522 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   16522:	9803      	ldr	r0, [sp, #12]
   16524:	f000 fa13 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16528:	9002      	str	r0, [sp, #8]
   1652a:	e7ff      	b.n	1652c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   1652c:	f000 f89b 	bl	16666 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   16530:	9001      	str	r0, [sp, #4]
   16532:	e7ff      	b.n	16534 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   16534:	9801      	ldr	r0, [sp, #4]
   16536:	0041      	lsls	r1, r0, #1
   16538:	9100      	str	r1, [sp, #0]
   1653a:	e7ff      	b.n	1653c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   1653c:	9802      	ldr	r0, [sp, #8]
   1653e:	9900      	ldr	r1, [sp, #0]
   16540:	4308      	orrs	r0, r1
    }
   16542:	b004      	add	sp, #16
   16544:	bd80      	pop	{r7, pc}

00016546 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   16546:	b580      	push	{r7, lr}
   16548:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1654a:	f000 f9fa 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1654e:	9003      	str	r0, [sp, #12]
   16550:	e7ff      	b.n	16552 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   16552:	9803      	ldr	r0, [sp, #12]
   16554:	f000 f9fb 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16558:	9002      	str	r0, [sp, #8]
   1655a:	e7ff      	b.n	1655c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   1655c:	f7ff ff93 	bl	16486 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   16560:	9001      	str	r0, [sp, #4]
   16562:	e7ff      	b.n	16564 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   16564:	9801      	ldr	r0, [sp, #4]
   16566:	0041      	lsls	r1, r0, #1
   16568:	9100      	str	r1, [sp, #0]
   1656a:	e7ff      	b.n	1656c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   1656c:	9802      	ldr	r0, [sp, #8]
   1656e:	9900      	ldr	r1, [sp, #0]
   16570:	4308      	orrs	r0, r1
    }
   16572:	b004      	add	sp, #16
   16574:	bd80      	pop	{r7, pc}

00016576 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   16576:	b580      	push	{r7, lr}
   16578:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1657a:	f000 f9e2 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1657e:	9003      	str	r0, [sp, #12]
   16580:	e7ff      	b.n	16582 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   16582:	9803      	ldr	r0, [sp, #12]
   16584:	f000 f9e3 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16588:	9002      	str	r0, [sp, #8]
   1658a:	e7ff      	b.n	1658c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   1658c:	f000 f823 	bl	165d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   16590:	9001      	str	r0, [sp, #4]
   16592:	e7ff      	b.n	16594 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   16594:	9801      	ldr	r0, [sp, #4]
   16596:	0041      	lsls	r1, r0, #1
   16598:	9100      	str	r1, [sp, #0]
   1659a:	e7ff      	b.n	1659c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   1659c:	9802      	ldr	r0, [sp, #8]
   1659e:	9900      	ldr	r1, [sp, #0]
   165a0:	4308      	orrs	r0, r1
    }
   165a2:	b004      	add	sp, #16
   165a4:	bd80      	pop	{r7, pc}

000165a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   165a6:	b580      	push	{r7, lr}
   165a8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   165aa:	f000 f9ca 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   165ae:	9003      	str	r0, [sp, #12]
   165b0:	e7ff      	b.n	165b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   165b2:	9803      	ldr	r0, [sp, #12]
   165b4:	f000 f9cb 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   165b8:	9002      	str	r0, [sp, #8]
   165ba:	e7ff      	b.n	165bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   165bc:	f000 f86b 	bl	16696 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   165c0:	9001      	str	r0, [sp, #4]
   165c2:	e7ff      	b.n	165c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   165c4:	9801      	ldr	r0, [sp, #4]
   165c6:	0041      	lsls	r1, r0, #1
   165c8:	9100      	str	r1, [sp, #0]
   165ca:	e7ff      	b.n	165cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   165cc:	9802      	ldr	r0, [sp, #8]
   165ce:	9900      	ldr	r1, [sp, #0]
   165d0:	4308      	orrs	r0, r1
    }
   165d2:	b004      	add	sp, #16
   165d4:	bd80      	pop	{r7, pc}

000165d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   165d6:	b580      	push	{r7, lr}
   165d8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   165da:	f000 f9b2 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   165de:	9003      	str	r0, [sp, #12]
   165e0:	e7ff      	b.n	165e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   165e2:	9803      	ldr	r0, [sp, #12]
   165e4:	f000 f9b3 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   165e8:	9002      	str	r0, [sp, #8]
   165ea:	e7ff      	b.n	165ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   165ec:	f000 f823 	bl	16636 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   165f0:	9001      	str	r0, [sp, #4]
   165f2:	e7ff      	b.n	165f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   165f4:	9801      	ldr	r0, [sp, #4]
   165f6:	0041      	lsls	r1, r0, #1
   165f8:	9100      	str	r1, [sp, #0]
   165fa:	e7ff      	b.n	165fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   165fc:	9802      	ldr	r0, [sp, #8]
   165fe:	9900      	ldr	r1, [sp, #0]
   16600:	4308      	orrs	r0, r1
    }
   16602:	b004      	add	sp, #16
   16604:	bd80      	pop	{r7, pc}

00016606 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   16606:	b580      	push	{r7, lr}
   16608:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1660a:	f000 f99c 	bl	16946 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   1660e:	9003      	str	r0, [sp, #12]
   16610:	e7ff      	b.n	16612 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   16612:	9803      	ldr	r0, [sp, #12]
   16614:	f000 f99b 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16618:	9002      	str	r0, [sp, #8]
   1661a:	e7ff      	b.n	1661c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   1661c:	f000 f995 	bl	1694a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   16620:	9001      	str	r0, [sp, #4]
   16622:	e7ff      	b.n	16624 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   16624:	9801      	ldr	r0, [sp, #4]
   16626:	0041      	lsls	r1, r0, #1
   16628:	9100      	str	r1, [sp, #0]
   1662a:	e7ff      	b.n	1662c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   1662c:	9802      	ldr	r0, [sp, #8]
   1662e:	9900      	ldr	r1, [sp, #0]
   16630:	4308      	orrs	r0, r1
    }
   16632:	b004      	add	sp, #16
   16634:	bd80      	pop	{r7, pc}

00016636 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   16636:	b580      	push	{r7, lr}
   16638:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1663a:	f000 f982 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1663e:	9003      	str	r0, [sp, #12]
   16640:	e7ff      	b.n	16642 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   16642:	9803      	ldr	r0, [sp, #12]
   16644:	f000 f983 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16648:	9002      	str	r0, [sp, #8]
   1664a:	e7ff      	b.n	1664c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   1664c:	f7ff ff7b 	bl	16546 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   16650:	9001      	str	r0, [sp, #4]
   16652:	e7ff      	b.n	16654 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   16654:	9801      	ldr	r0, [sp, #4]
   16656:	0041      	lsls	r1, r0, #1
   16658:	9100      	str	r1, [sp, #0]
   1665a:	e7ff      	b.n	1665c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   1665c:	9802      	ldr	r0, [sp, #8]
   1665e:	9900      	ldr	r1, [sp, #0]
   16660:	4308      	orrs	r0, r1
    }
   16662:	b004      	add	sp, #16
   16664:	bd80      	pop	{r7, pc}

00016666 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   16666:	b580      	push	{r7, lr}
   16668:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1666a:	f000 f96a 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1666e:	9003      	str	r0, [sp, #12]
   16670:	e7ff      	b.n	16672 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   16672:	9803      	ldr	r0, [sp, #12]
   16674:	f000 f96b 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16678:	9002      	str	r0, [sp, #8]
   1667a:	e7ff      	b.n	1667c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   1667c:	f7ff ff1b 	bl	164b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   16680:	9001      	str	r0, [sp, #4]
   16682:	e7ff      	b.n	16684 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   16684:	9801      	ldr	r0, [sp, #4]
   16686:	0041      	lsls	r1, r0, #1
   16688:	9100      	str	r1, [sp, #0]
   1668a:	e7ff      	b.n	1668c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   1668c:	9802      	ldr	r0, [sp, #8]
   1668e:	9900      	ldr	r1, [sp, #0]
   16690:	4308      	orrs	r0, r1
    }
   16692:	b004      	add	sp, #16
   16694:	bd80      	pop	{r7, pc}

00016696 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   16696:	b580      	push	{r7, lr}
   16698:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1669a:	f000 f952 	bl	16942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1669e:	9003      	str	r0, [sp, #12]
   166a0:	e7ff      	b.n	166a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   166a2:	9803      	ldr	r0, [sp, #12]
   166a4:	f000 f953 	bl	1694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   166a8:	9002      	str	r0, [sp, #8]
   166aa:	e7ff      	b.n	166ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   166ac:	f7ff ff1b 	bl	164e6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   166b0:	9001      	str	r0, [sp, #4]
   166b2:	e7ff      	b.n	166b4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   166b4:	9801      	ldr	r0, [sp, #4]
   166b6:	0041      	lsls	r1, r0, #1
   166b8:	9100      	str	r1, [sp, #0]
   166ba:	e7ff      	b.n	166bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   166bc:	9802      	ldr	r0, [sp, #8]
   166be:	9900      	ldr	r1, [sp, #0]
   166c0:	4308      	orrs	r0, r1
    }
   166c2:	b004      	add	sp, #16
   166c4:	bd80      	pop	{r7, pc}

000166c6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   166c6:	2000      	movs	r0, #0
        0
    }
   166c8:	4770      	bx	lr

000166ca <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   166ca:	2001      	movs	r0, #1
        1
    }
   166cc:	4770      	bx	lr

000166ce <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   166ce:	b580      	push	{r7, lr}
   166d0:	b084      	sub	sp, #16
   166d2:	9002      	str	r0, [sp, #8]
   166d4:	9103      	str	r1, [sp, #12]
   166d6:	f000 f80f 	bl	166f8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   166da:	9001      	str	r0, [sp, #4]
   166dc:	e7ff      	b.n	166de <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   166de:	9801      	ldr	r0, [sp, #4]
   166e0:	b004      	add	sp, #16
   166e2:	bd80      	pop	{r7, pc}

000166e4 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   166e4:	b580      	push	{r7, lr}
   166e6:	b082      	sub	sp, #8
   166e8:	9001      	str	r0, [sp, #4]
   166ea:	f000 f873 	bl	167d4 <_ZN4core3ptr4read17h27a035d1812d8297E>
   166ee:	9000      	str	r0, [sp, #0]
   166f0:	e7ff      	b.n	166f2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   166f2:	9800      	ldr	r0, [sp, #0]
   166f4:	b002      	add	sp, #8
   166f6:	bd80      	pop	{r7, pc}

000166f8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   166f8:	b084      	sub	sp, #16
   166fa:	9001      	str	r0, [sp, #4]
   166fc:	9102      	str	r1, [sp, #8]
   166fe:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16702:	9003      	str	r0, [sp, #12]
   16704:	9803      	ldr	r0, [sp, #12]
   16706:	9000      	str	r0, [sp, #0]
   16708:	e7ff      	b.n	1670a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1670a:	9800      	ldr	r0, [sp, #0]
   1670c:	b004      	add	sp, #16
   1670e:	4770      	bx	lr

00016710 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   16710:	b082      	sub	sp, #8
   16712:	9001      	str	r0, [sp, #4]
   16714:	9000      	str	r0, [sp, #0]
   16716:	e7ff      	b.n	16718 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   16718:	9800      	ldr	r0, [sp, #0]
   1671a:	fab0 f180 	clz	r1, r0
   1671e:	0948      	lsrs	r0, r1, #5
   16720:	b002      	add	sp, #8
   16722:	4770      	bx	lr

00016724 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   16724:	b580      	push	{r7, lr}
   16726:	b088      	sub	sp, #32
   16728:	9006      	str	r0, [sp, #24]
   1672a:	9107      	str	r1, [sp, #28]
   1672c:	9004      	str	r0, [sp, #16]
   1672e:	4608      	mov	r0, r1
   16730:	9103      	str	r1, [sp, #12]
   16732:	f001 f8c8 	bl	178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   16736:	9002      	str	r0, [sp, #8]
   16738:	e7ff      	b.n	1673a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   1673a:	9802      	ldr	r0, [sp, #8]
   1673c:	07c1      	lsls	r1, r0, #31
   1673e:	2900      	cmp	r1, #0
   16740:	d105      	bne.n	1674e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   16742:	e7ff      	b.n	16744 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   16744:	9803      	ldr	r0, [sp, #12]
   16746:	f001 f8c2 	bl	178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1674a:	9001      	str	r0, [sp, #4]
   1674c:	e007      	b.n	1675e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   1674e:	9804      	ldr	r0, [sp, #16]
   16750:	9903      	ldr	r1, [sp, #12]
   16752:	f001 fe24 	bl	1839e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   16756:	f88d 0017 	strb.w	r0, [sp, #23]
   1675a:	e7ff      	b.n	1675c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   1675c:	e015      	b.n	1678a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1675e:	9801      	ldr	r0, [sp, #4]
   16760:	07c1      	lsls	r1, r0, #31
   16762:	2900      	cmp	r1, #0
   16764:	d107      	bne.n	16776 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   16766:	e7ff      	b.n	16768 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   16768:	9804      	ldr	r0, [sp, #16]
   1676a:	9903      	ldr	r1, [sp, #12]
   1676c:	f001 ffe8 	bl	18740 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   16770:	f88d 0017 	strb.w	r0, [sp, #23]
   16774:	e007      	b.n	16786 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   16776:	9804      	ldr	r0, [sp, #16]
   16778:	9903      	ldr	r1, [sp, #12]
   1677a:	f001 fe6f 	bl	1845c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   1677e:	f88d 0017 	strb.w	r0, [sp, #23]
   16782:	e7ff      	b.n	16784 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   16784:	e000      	b.n	16788 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   16786:	e7ff      	b.n	16788 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   16788:	e7ff      	b.n	1678a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1678a:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1678e:	b008      	add	sp, #32
   16790:	bd80      	pop	{r7, pc}

00016792 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   16792:	b081      	sub	sp, #4
   16794:	4601      	mov	r1, r0
   16796:	f88d 0003 	strb.w	r0, [sp, #3]
   1679a:	b2c0      	uxtb	r0, r0
   1679c:	b001      	add	sp, #4
   1679e:	4770      	bx	lr

000167a0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   167a0:	b086      	sub	sp, #24
   167a2:	9004      	str	r0, [sp, #16]
   167a4:	9105      	str	r1, [sp, #20]
   167a6:	9002      	str	r0, [sp, #8]
   167a8:	9103      	str	r1, [sp, #12]
   167aa:	9802      	ldr	r0, [sp, #8]
   167ac:	9903      	ldr	r1, [sp, #12]
   167ae:	9000      	str	r0, [sp, #0]
   167b0:	9101      	str	r1, [sp, #4]
   167b2:	9800      	ldr	r0, [sp, #0]
   167b4:	9901      	ldr	r1, [sp, #4]
   167b6:	b006      	add	sp, #24
   167b8:	4770      	bx	lr

000167ba <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   167ba:	b086      	sub	sp, #24
   167bc:	9004      	str	r0, [sp, #16]
   167be:	9105      	str	r1, [sp, #20]
   167c0:	9002      	str	r0, [sp, #8]
   167c2:	9103      	str	r1, [sp, #12]
   167c4:	9802      	ldr	r0, [sp, #8]
   167c6:	9903      	ldr	r1, [sp, #12]
   167c8:	9000      	str	r0, [sp, #0]
   167ca:	9101      	str	r1, [sp, #4]
   167cc:	9800      	ldr	r0, [sp, #0]
   167ce:	9901      	ldr	r1, [sp, #4]
   167d0:	b006      	add	sp, #24
   167d2:	4770      	bx	lr

000167d4 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   167d4:	b580      	push	{r7, lr}
   167d6:	b088      	sub	sp, #32
   167d8:	9003      	str	r0, [sp, #12]
   167da:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   167de:	f8ad 100a 	strh.w	r1, [sp, #10]
   167e2:	9001      	str	r0, [sp, #4]
   167e4:	e7ff      	b.n	167e6 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   167e6:	f10d 000a 	add.w	r0, sp, #10
   167ea:	9006      	str	r0, [sp, #24]
   167ec:	9007      	str	r0, [sp, #28]
   167ee:	e7ff      	b.n	167f0 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   167f0:	f10d 010a 	add.w	r1, sp, #10
   167f4:	2201      	movs	r2, #1
   167f6:	9801      	ldr	r0, [sp, #4]
   167f8:	f000 f8b0 	bl	1695c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   167fc:	e7ff      	b.n	167fe <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   167fe:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16802:	4601      	mov	r1, r0
   16804:	f8ad 0014 	strh.w	r0, [sp, #20]
   16808:	f8ad 0016 	strh.w	r0, [sp, #22]
   1680c:	9100      	str	r1, [sp, #0]
   1680e:	e7ff      	b.n	16810 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   16810:	9800      	ldr	r0, [sp, #0]
   16812:	b008      	add	sp, #32
   16814:	bd80      	pop	{r7, pc}

00016816 <_ZN4core3ptr5write17h147d4643d861e927E>:
   16816:	b082      	sub	sp, #8
   16818:	460a      	mov	r2, r1
   1681a:	9000      	str	r0, [sp, #0]
   1681c:	f8ad 1006 	strh.w	r1, [sp, #6]
   16820:	8001      	strh	r1, [r0, #0]
   16822:	b002      	add	sp, #8
   16824:	4770      	bx	lr

00016826 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>:
   16826:	b5d0      	push	{r4, r6, r7, lr}
   16828:	af02      	add	r7, sp, #8
   1682a:	b0b4      	sub	sp, #208	; 0xd0
   1682c:	466c      	mov	r4, sp
   1682e:	f36f 0404 	bfc	r4, #0, #5
   16832:	46a5      	mov	sp, r4
   16834:	9024      	str	r0, [sp, #144]	; 0x90
   16836:	9125      	str	r1, [sp, #148]	; 0x94
   16838:	9226      	str	r2, [sp, #152]	; 0x98
   1683a:	2320      	movs	r3, #32
   1683c:	932f      	str	r3, [sp, #188]	; 0xbc
   1683e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   16840:	9327      	str	r3, [sp, #156]	; 0x9c
   16842:	920e      	str	r2, [sp, #56]	; 0x38
   16844:	910d      	str	r1, [sp, #52]	; 0x34
   16846:	900c      	str	r0, [sp, #48]	; 0x30
   16848:	930b      	str	r3, [sp, #44]	; 0x2c
   1684a:	e7ff      	b.n	1684c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x26>
   1684c:	2000      	movs	r0, #0
   1684e:	900f      	str	r0, [sp, #60]	; 0x3c
   16850:	e7ff      	b.n	16852 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   16852:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16854:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16856:	4408      	add	r0, r1
   16858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1685a:	4290      	cmp	r0, r2
   1685c:	d905      	bls.n	1686a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x44>
   1685e:	e7ff      	b.n	16860 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x3a>
   16860:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16862:	990e      	ldr	r1, [sp, #56]	; 0x38
   16864:	4288      	cmp	r0, r1
   16866:	d334      	bcc.n	168d2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xac>
   16868:	e067      	b.n	1693a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   1686a:	e7ff      	b.n	1686c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x46>
   1686c:	a810      	add	r0, sp, #64	; 0x40
   1686e:	9032      	str	r0, [sp, #200]	; 0xc8
   16870:	9033      	str	r0, [sp, #204]	; 0xcc
   16872:	e7ff      	b.n	16874 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x4e>
   16874:	a810      	add	r0, sp, #64	; 0x40
   16876:	4601      	mov	r1, r0
   16878:	9028      	str	r0, [sp, #160]	; 0xa0
   1687a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1687c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1687e:	900a      	str	r0, [sp, #40]	; 0x28
   16880:	4610      	mov	r0, r2
   16882:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   16884:	9109      	str	r1, [sp, #36]	; 0x24
   16886:	4619      	mov	r1, r3
   16888:	f7f8 f846 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1688c:	4601      	mov	r1, r0
   1688e:	9029      	str	r0, [sp, #164]	; 0xa4
   16890:	9108      	str	r1, [sp, #32]
   16892:	e7ff      	b.n	16894 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x6e>
   16894:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16896:	980d      	ldr	r0, [sp, #52]	; 0x34
   16898:	f7f8 f83e 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1689c:	4601      	mov	r1, r0
   1689e:	902a      	str	r0, [sp, #168]	; 0xa8
   168a0:	9107      	str	r1, [sp, #28]
   168a2:	e7ff      	b.n	168a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x7e>
   168a4:	9808      	ldr	r0, [sp, #32]
   168a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   168a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   168aa:	f7f7 fed1 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   168ae:	e7ff      	b.n	168b0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x8a>
   168b0:	9807      	ldr	r0, [sp, #28]
   168b2:	9908      	ldr	r1, [sp, #32]
   168b4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   168b6:	f7f7 fecb 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   168ba:	e7ff      	b.n	168bc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x96>
   168bc:	9809      	ldr	r0, [sp, #36]	; 0x24
   168be:	9907      	ldr	r1, [sp, #28]
   168c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   168c2:	f7f7 fec5 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   168c6:	e7ff      	b.n	168c8 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xa2>
   168c8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   168ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   168cc:	4408      	add	r0, r1
   168ce:	900f      	str	r0, [sp, #60]	; 0x3c
   168d0:	e7bf      	b.n	16852 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   168d2:	e7ff      	b.n	168d4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xae>
   168d4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   168d6:	990e      	ldr	r1, [sp, #56]	; 0x38
   168d8:	1a08      	subs	r0, r1, r0
   168da:	4602      	mov	r2, r0
   168dc:	902b      	str	r0, [sp, #172]	; 0xac
   168de:	a81c      	add	r0, sp, #112	; 0x70
   168e0:	9030      	str	r0, [sp, #192]	; 0xc0
   168e2:	9031      	str	r0, [sp, #196]	; 0xc4
   168e4:	9206      	str	r2, [sp, #24]
   168e6:	9005      	str	r0, [sp, #20]
   168e8:	e7ff      	b.n	168ea <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xc4>
   168ea:	9805      	ldr	r0, [sp, #20]
   168ec:	9905      	ldr	r1, [sp, #20]
   168ee:	912c      	str	r1, [sp, #176]	; 0xb0
   168f0:	990f      	ldr	r1, [sp, #60]	; 0x3c
   168f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   168f4:	9004      	str	r0, [sp, #16]
   168f6:	4610      	mov	r0, r2
   168f8:	f7f8 f80e 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   168fc:	4601      	mov	r1, r0
   168fe:	902d      	str	r0, [sp, #180]	; 0xb4
   16900:	9103      	str	r1, [sp, #12]
   16902:	e7ff      	b.n	16904 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xde>
   16904:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16906:	980d      	ldr	r0, [sp, #52]	; 0x34
   16908:	f7f8 f806 	bl	e918 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1690c:	4601      	mov	r1, r0
   1690e:	902e      	str	r0, [sp, #184]	; 0xb8
   16910:	9102      	str	r1, [sp, #8]
   16912:	e7ff      	b.n	16914 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xee>
   16914:	9803      	ldr	r0, [sp, #12]
   16916:	9904      	ldr	r1, [sp, #16]
   16918:	9a06      	ldr	r2, [sp, #24]
   1691a:	f7f7 fe99 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1691e:	e7ff      	b.n	16920 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xfa>
   16920:	9802      	ldr	r0, [sp, #8]
   16922:	9903      	ldr	r1, [sp, #12]
   16924:	9a06      	ldr	r2, [sp, #24]
   16926:	f7f7 fe93 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1692a:	e7ff      	b.n	1692c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x106>
   1692c:	9804      	ldr	r0, [sp, #16]
   1692e:	9902      	ldr	r1, [sp, #8]
   16930:	9a06      	ldr	r2, [sp, #24]
   16932:	f7f7 fe8d 	bl	e650 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16936:	e7ff      	b.n	16938 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x112>
   16938:	e7ff      	b.n	1693a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   1693a:	f1a7 0408 	sub.w	r4, r7, #8
   1693e:	46a5      	mov	sp, r4
   16940:	bdd0      	pop	{r4, r6, r7, pc}

00016942 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   16942:	2000      	movs	r0, #0
    }
   16944:	4770      	bx	lr

00016946 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   16946:	2001      	movs	r0, #1
    }
   16948:	4770      	bx	lr

0001694a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   1694a:	2000      	movs	r0, #0
    }
   1694c:	4770      	bx	lr

0001694e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   1694e:	b081      	sub	sp, #4
   16950:	4601      	mov	r1, r0
   16952:	f88d 0003 	strb.w	r0, [sp, #3]
   16956:	b2c0      	uxtb	r0, r0
   16958:	b001      	add	sp, #4
   1695a:	4770      	bx	lr

0001695c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   1695c:	b580      	push	{r7, lr}
   1695e:	b084      	sub	sp, #16
   16960:	9001      	str	r0, [sp, #4]
   16962:	9102      	str	r1, [sp, #8]
   16964:	9203      	str	r2, [sp, #12]
   16966:	0052      	lsls	r2, r2, #1
   16968:	9000      	str	r0, [sp, #0]
   1696a:	4608      	mov	r0, r1
   1696c:	9900      	ldr	r1, [sp, #0]
   1696e:	f006 fcdd 	bl	1d32c <__aeabi_memcpy>
   16972:	e7ff      	b.n	16974 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   16974:	b004      	add	sp, #16
   16976:	bd80      	pop	{r7, pc}

00016978 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   16978:	4770      	bx	lr

0001697a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   1697a:	b5b0      	push	{r4, r5, r7, lr}
   1697c:	b086      	sub	sp, #24
   1697e:	460c      	mov	r4, r1
   16980:	4605      	mov	r5, r0
   16982:	f001 fb88 	bl	18096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   16986:	b9a8      	cbnz	r0, 169b4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   16988:	f64f 63f4 	movw	r3, #65268	; 0xfef4
   1698c:	2200      	movs	r2, #0
   1698e:	f2c0 0301 	movt	r3, #1
   16992:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   16996:	9205      	str	r2, [sp, #20]
   16998:	9304      	str	r3, [sp, #16]
   1699a:	e9cd 2202 	strd	r2, r2, [sp, #8]
   1699e:	2201      	movs	r2, #1
   169a0:	9201      	str	r2, [sp, #4]
   169a2:	f64f 72b8 	movw	r2, #65464	; 0xffb8
   169a6:	f2c0 0201 	movt	r2, #1
   169aa:	9200      	str	r2, [sp, #0]
   169ac:	466a      	mov	r2, sp
   169ae:	f000 fbe1 	bl	17174 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   169b2:	b110      	cbz	r0, 169ba <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   169b4:	2001      	movs	r0, #1
   169b6:	b006      	add	sp, #24
   169b8:	bdb0      	pop	{r4, r5, r7, pc}
   169ba:	1d28      	adds	r0, r5, #4
   169bc:	4621      	mov	r1, r4
   169be:	b006      	add	sp, #24
   169c0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   169c4:	f001 bb67 	b.w	18096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000169c8 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   169c8:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   169cc:	f243 6134 	movw	r1, #13876	; 0x3634
   169d0:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   169d4:	f6cd 0131 	movt	r1, #55345	; 0xd831
   169d8:	4770      	bx	lr
	...

000169dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   169dc:	b570      	push	{r4, r5, r6, lr}
   169de:	460e      	mov	r6, r1
   169e0:	3909      	subs	r1, #9
   169e2:	4604      	mov	r4, r0
   169e4:	291e      	cmp	r1, #30
   169e6:	d818      	bhi.n	16a1a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   169e8:	2002      	movs	r0, #2
   169ea:	2574      	movs	r5, #116	; 0x74
   169ec:	e8df f001 	tbb	[pc, r1]
   169f0:	1c1c1019 	.word	0x1c1c1019
   169f4:	1c1c1c29 	.word	0x1c1c1c29
   169f8:	1c1c1c1c 	.word	0x1c1c1c1c
   169fc:	1c1c1c1c 	.word	0x1c1c1c1c
   16a00:	1c1c1c1c 	.word	0x1c1c1c1c
   16a04:	1c1c1c1c 	.word	0x1c1c1c1c
   16a08:	1c1c171c 	.word	0x1c1c171c
   16a0c:	00171c1c 	.word	0x00171c1c
   16a10:	2002      	movs	r0, #2
   16a12:	256e      	movs	r5, #110	; 0x6e
   16a14:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16a18:	bd70      	pop	{r4, r5, r6, pc}
   16a1a:	2e5c      	cmp	r6, #92	; 0x5c
   16a1c:	d104      	bne.n	16a28 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   16a1e:	2002      	movs	r0, #2
   16a20:	4635      	mov	r5, r6
   16a22:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16a26:	bd70      	pop	{r4, r5, r6, pc}
   16a28:	2a00      	cmp	r2, #0
   16a2a:	d040      	beq.n	16aae <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   16a2c:	f3c6 1083 	ubfx	r0, r6, #6, #4
   16a30:	0ab1      	lsrs	r1, r6, #10
   16a32:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   16a36:	d309      	bcc.n	16a4c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   16a38:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   16a3c:	d137      	bne.n	16aae <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   16a3e:	211e      	movs	r1, #30
   16a40:	e00b      	b.n	16a5a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   16a42:	2002      	movs	r0, #2
   16a44:	2572      	movs	r5, #114	; 0x72
   16a46:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16a4a:	bd70      	pop	{r4, r5, r6, pc}
   16a4c:	f640 222c 	movw	r2, #2604	; 0xa2c
   16a50:	f2c0 0202 	movt	r2, #2
   16a54:	5c51      	ldrb	r1, [r2, r1]
   16a56:	291e      	cmp	r1, #30
   16a58:	d842      	bhi.n	16ae0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   16a5a:	f640 22a7 	movw	r2, #2727	; 0xaa7
   16a5e:	f2c0 0202 	movt	r2, #2
   16a62:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   16a66:	5c09      	ldrb	r1, [r1, r0]
   16a68:	298b      	cmp	r1, #139	; 0x8b
   16a6a:	d231      	bcs.n	16ad0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   16a6c:	f640 4098 	movw	r0, #3224	; 0xc98
   16a70:	2301      	movs	r3, #1
   16a72:	f2c0 0002 	movt	r0, #2
   16a76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   16a7a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   16a7e:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   16a82:	f8d2 c004 	ldr.w	ip, [r2, #4]
   16a86:	fa03 f501 	lsl.w	r5, r3, r1
   16a8a:	f1b1 0220 	subs.w	r2, r1, #32
   16a8e:	f1c1 0120 	rsb	r1, r1, #32
   16a92:	bf58      	it	pl
   16a94:	2500      	movpl	r5, #0
   16a96:	2a00      	cmp	r2, #0
   16a98:	ea00 0005 	and.w	r0, r0, r5
   16a9c:	fa23 f101 	lsr.w	r1, r3, r1
   16aa0:	bf58      	it	pl
   16aa2:	fa03 f102 	lslpl.w	r1, r3, r2
   16aa6:	ea01 010c 	and.w	r1, r1, ip
   16aaa:	4308      	orrs	r0, r1
   16aac:	d105      	bne.n	16aba <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   16aae:	4630      	mov	r0, r6
   16ab0:	f001 f9a5 	bl	17dfe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   16ab4:	b108      	cbz	r0, 16aba <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   16ab6:	2001      	movs	r0, #1
   16ab8:	e7b2      	b.n	16a20 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   16aba:	f046 0001 	orr.w	r0, r6, #1
   16abe:	2107      	movs	r1, #7
   16ac0:	fab0 f080 	clz	r0, r0
   16ac4:	f04f 0e05 	mov.w	lr, #5
   16ac8:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   16acc:	2003      	movs	r0, #3
   16ace:	e7a7      	b.n	16a20 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   16ad0:	f640 201c 	movw	r0, #2588	; 0xa1c
   16ad4:	228b      	movs	r2, #139	; 0x8b
   16ad6:	f2c0 0002 	movt	r0, #2
   16ada:	f000 f869 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   16ade:	defe      	udf	#254	; 0xfe
   16ae0:	f640 200c 	movw	r0, #2572	; 0xa0c
   16ae4:	221f      	movs	r2, #31
   16ae6:	f2c0 0002 	movt	r0, #2
   16aea:	f000 f861 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   16aee:	defe      	udf	#254	; 0xfe

00016af0 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   16af0:	b08a      	sub	sp, #40	; 0x28
   16af2:	e9cd 0100 	strd	r0, r1, [sp]
   16af6:	2001      	movs	r0, #1
   16af8:	a908      	add	r1, sp, #32
   16afa:	9007      	str	r0, [sp, #28]
   16afc:	9106      	str	r1, [sp, #24]
   16afe:	2100      	movs	r1, #0
   16b00:	9105      	str	r1, [sp, #20]
   16b02:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16b06:	f240 00bc 	movw	r0, #188	; 0xbc
   16b0a:	f2c0 0002 	movt	r0, #2
   16b0e:	4611      	mov	r1, r2
   16b10:	9002      	str	r0, [sp, #8]
   16b12:	f648 10f3 	movw	r0, #35315	; 0x89f3
   16b16:	f2c0 0001 	movt	r0, #1
   16b1a:	9009      	str	r0, [sp, #36]	; 0x24
   16b1c:	4668      	mov	r0, sp
   16b1e:	9008      	str	r0, [sp, #32]
   16b20:	a802      	add	r0, sp, #8
   16b22:	f000 f865 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16b26:	defe      	udf	#254	; 0xfe

00016b28 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   16b28:	b08e      	sub	sp, #56	; 0x38
   16b2a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   16b2e:	2002      	movs	r0, #2
   16b30:	a90a      	add	r1, sp, #40	; 0x28
   16b32:	9009      	str	r0, [sp, #36]	; 0x24
   16b34:	9108      	str	r1, [sp, #32]
   16b36:	2100      	movs	r1, #0
   16b38:	9107      	str	r1, [sp, #28]
   16b3a:	e9cd 0105 	strd	r0, r1, [sp, #20]
   16b3e:	f240 00c8 	movw	r0, #200	; 0xc8
   16b42:	f2c0 0002 	movt	r0, #2
   16b46:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   16b4a:	9004      	str	r0, [sp, #16]
   16b4c:	f648 10e9 	movw	r0, #35305	; 0x89e9
   16b50:	f2c0 0001 	movt	r0, #1
   16b54:	900d      	str	r0, [sp, #52]	; 0x34
   16b56:	a802      	add	r0, sp, #8
   16b58:	900c      	str	r0, [sp, #48]	; 0x30
   16b5a:	f648 10f3 	movw	r0, #35315	; 0x89f3
   16b5e:	f2c0 0001 	movt	r0, #1
   16b62:	4661      	mov	r1, ip
   16b64:	900b      	str	r0, [sp, #44]	; 0x2c
   16b66:	4668      	mov	r0, sp
   16b68:	900a      	str	r0, [sp, #40]	; 0x28
   16b6a:	a804      	add	r0, sp, #16
   16b6c:	f000 f840 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16b70:	defe      	udf	#254	; 0xfe

00016b72 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   16b72:	68c0      	ldr	r0, [r0, #12]
   16b74:	4770      	bx	lr

00016b76 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   16b76:	4770      	bx	lr

00016b78 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   16b78:	e9d0 2100 	ldrd	r2, r1, [r0]
   16b7c:	4610      	mov	r0, r2
   16b7e:	4770      	bx	lr

00016b80 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   16b80:	6880      	ldr	r0, [r0, #8]
   16b82:	4770      	bx	lr

00016b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   16b84:	b088      	sub	sp, #32
   16b86:	4694      	mov	ip, r2
   16b88:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   16b8c:	2300      	movs	r3, #0
   16b8e:	f2c0 0201 	movt	r2, #1
   16b92:	e9cd 0106 	strd	r0, r1, [sp, #24]
   16b96:	4668      	mov	r0, sp
   16b98:	9305      	str	r3, [sp, #20]
   16b9a:	4661      	mov	r1, ip
   16b9c:	9204      	str	r2, [sp, #16]
   16b9e:	2201      	movs	r2, #1
   16ba0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16ba4:	9201      	str	r2, [sp, #4]
   16ba6:	aa06      	add	r2, sp, #24
   16ba8:	9200      	str	r2, [sp, #0]
   16baa:	f000 f821 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16bae:	defe      	udf	#254	; 0xfe

00016bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   16bb0:	b08c      	sub	sp, #48	; 0x30
   16bb2:	4603      	mov	r3, r0
   16bb4:	e9cd 1200 	strd	r1, r2, [sp]
   16bb8:	2002      	movs	r0, #2
   16bba:	a908      	add	r1, sp, #32
   16bbc:	9007      	str	r0, [sp, #28]
   16bbe:	9106      	str	r1, [sp, #24]
   16bc0:	2100      	movs	r1, #0
   16bc2:	9105      	str	r1, [sp, #20]
   16bc4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16bc8:	f240 00fc 	movw	r0, #252	; 0xfc
   16bcc:	f2c0 0002 	movt	r0, #2
   16bd0:	4669      	mov	r1, sp
   16bd2:	9002      	str	r0, [sp, #8]
   16bd4:	f648 1005 	movw	r0, #35077	; 0x8905
   16bd8:	f2c0 0001 	movt	r0, #1
   16bdc:	900b      	str	r0, [sp, #44]	; 0x2c
   16bde:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16be2:	a801      	add	r0, sp, #4
   16be4:	9008      	str	r0, [sp, #32]
   16be6:	a802      	add	r0, sp, #8
   16be8:	4619      	mov	r1, r3
   16bea:	f000 f801 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16bee:	defe      	udf	#254	; 0xfe

00016bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   16bf0:	b084      	sub	sp, #16
   16bf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16bf6:	f240 00d8 	movw	r0, #216	; 0xd8
   16bfa:	f2c0 0002 	movt	r0, #2
   16bfe:	9001      	str	r0, [sp, #4]
   16c00:	f64f 60f4 	movw	r0, #65268	; 0xfef4
   16c04:	f2c0 0001 	movt	r0, #1
   16c08:	9000      	str	r0, [sp, #0]
   16c0a:	4668      	mov	r0, sp
   16c0c:	f7f1 fd60 	bl	86d0 <rust_begin_unwind>
   16c10:	defe      	udf	#254	; 0xfe

00016c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   16c12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c16:	b081      	sub	sp, #4
   16c18:	2a00      	cmp	r2, #0
   16c1a:	f000 80fe 	beq.w	16e1a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16c1e:	4690      	mov	r8, r2
   16c20:	468a      	mov	sl, r1
   16c22:	4681      	mov	r9, r0
   16c24:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16c28:	7800      	ldrb	r0, [r0, #0]
   16c2a:	b948      	cbnz	r0, 16c40 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   16c2c:	e014      	b.n	16c58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16c2e:	44da      	add	sl, fp
   16c30:	2c00      	cmp	r4, #0
   16c32:	46a0      	mov	r8, r4
   16c34:	f000 80f1 	beq.w	16e1a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16c38:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16c3c:	7800      	ldrb	r0, [r0, #0]
   16c3e:	b158      	cbz	r0, 16c58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16c40:	e9d9 0100 	ldrd	r0, r1, [r9]
   16c44:	2204      	movs	r2, #4
   16c46:	68cb      	ldr	r3, [r1, #12]
   16c48:	f240 0114 	movw	r1, #20
   16c4c:	f2c0 0102 	movt	r1, #2
   16c50:	4798      	blx	r3
   16c52:	2800      	cmp	r0, #0
   16c54:	f040 80e5 	bne.w	16e22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16c58:	f04f 0b00 	mov.w	fp, #0
   16c5c:	4641      	mov	r1, r8
   16c5e:	e008      	b.n	16c72 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   16c60:	ebb8 010b 	subs.w	r1, r8, fp
   16c64:	f04f 0000 	mov.w	r0, #0
   16c68:	bf38      	it	cc
   16c6a:	4601      	movcc	r1, r0
   16c6c:	45c3      	cmp	fp, r8
   16c6e:	f200 80a5 	bhi.w	16dbc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   16c72:	eb0a 0e0b 	add.w	lr, sl, fp
   16c76:	2000      	movs	r0, #0
   16c78:	f01e 0203 	ands.w	r2, lr, #3
   16c7c:	bf18      	it	ne
   16c7e:	f1d2 0c04 	rsbsne	ip, r2, #4
   16c82:	d120      	bne.n	16cc6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   16c84:	2908      	cmp	r1, #8
   16c86:	d357      	bcc.n	16d38 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16c88:	f1a1 0208 	sub.w	r2, r1, #8
   16c8c:	4290      	cmp	r0, r2
   16c8e:	d853      	bhi.n	16d38 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16c90:	f85e 3000 	ldr.w	r3, [lr, r0]
   16c94:	eb0e 0700 	add.w	r7, lr, r0
   16c98:	687f      	ldr	r7, [r7, #4]
   16c9a:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   16c9e:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16ca2:	ea26 0303 	bic.w	r3, r6, r3
   16ca6:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   16caa:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16cae:	ea26 0707 	bic.w	r7, r6, r7
   16cb2:	433b      	orrs	r3, r7
   16cb4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   16cb8:	d102      	bne.n	16cc0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   16cba:	3008      	adds	r0, #8
   16cbc:	4290      	cmp	r0, r2
   16cbe:	d9e7      	bls.n	16c90 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   16cc0:	4288      	cmp	r0, r1
   16cc2:	d939      	bls.n	16d38 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16cc4:	e0b1      	b.n	16e2a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   16cc6:	458c      	cmp	ip, r1
   16cc8:	bf88      	it	hi
   16cca:	468c      	movhi	ip, r1
   16ccc:	eb0e 060c 	add.w	r6, lr, ip
   16cd0:	2000      	movs	r0, #0
   16cd2:	4663      	mov	r3, ip
   16cd4:	4677      	mov	r7, lr
   16cd6:	b363      	cbz	r3, 16d32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16cd8:	463a      	mov	r2, r7
   16cda:	f812 4b01 	ldrb.w	r4, [r2], #1
   16cde:	f1b4 050a 	subs.w	r5, r4, #10
   16ce2:	bf18      	it	ne
   16ce4:	2501      	movne	r5, #1
   16ce6:	4428      	add	r0, r5
   16ce8:	2c0a      	cmp	r4, #10
   16cea:	d059      	beq.n	16da0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16cec:	42b2      	cmp	r2, r6
   16cee:	d020      	beq.n	16d32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16cf0:	787a      	ldrb	r2, [r7, #1]
   16cf2:	f1b2 040a 	subs.w	r4, r2, #10
   16cf6:	bf18      	it	ne
   16cf8:	2401      	movne	r4, #1
   16cfa:	4420      	add	r0, r4
   16cfc:	2a0a      	cmp	r2, #10
   16cfe:	d04f      	beq.n	16da0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16d00:	1cba      	adds	r2, r7, #2
   16d02:	42b2      	cmp	r2, r6
   16d04:	d015      	beq.n	16d32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16d06:	78ba      	ldrb	r2, [r7, #2]
   16d08:	f1b2 040a 	subs.w	r4, r2, #10
   16d0c:	bf18      	it	ne
   16d0e:	2401      	movne	r4, #1
   16d10:	4420      	add	r0, r4
   16d12:	2a0a      	cmp	r2, #10
   16d14:	d044      	beq.n	16da0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16d16:	1cfa      	adds	r2, r7, #3
   16d18:	42b2      	cmp	r2, r6
   16d1a:	d00a      	beq.n	16d32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16d1c:	78fa      	ldrb	r2, [r7, #3]
   16d1e:	3b04      	subs	r3, #4
   16d20:	3704      	adds	r7, #4
   16d22:	f1b2 040a 	subs.w	r4, r2, #10
   16d26:	bf18      	it	ne
   16d28:	2401      	movne	r4, #1
   16d2a:	4420      	add	r0, r4
   16d2c:	2a0a      	cmp	r2, #10
   16d2e:	d1d2      	bne.n	16cd6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   16d30:	e036      	b.n	16da0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16d32:	4660      	mov	r0, ip
   16d34:	2908      	cmp	r1, #8
   16d36:	d2a7      	bcs.n	16c88 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   16d38:	eb0e 0700 	add.w	r7, lr, r0
   16d3c:	eb0e 0201 	add.w	r2, lr, r1
   16d40:	1a0e      	subs	r6, r1, r0
   16d42:	2100      	movs	r1, #0
   16d44:	b3ce      	cbz	r6, 16dba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16d46:	463b      	mov	r3, r7
   16d48:	f813 5b01 	ldrb.w	r5, [r3], #1
   16d4c:	f1b5 040a 	subs.w	r4, r5, #10
   16d50:	bf18      	it	ne
   16d52:	2401      	movne	r4, #1
   16d54:	4421      	add	r1, r4
   16d56:	2d0a      	cmp	r5, #10
   16d58:	d021      	beq.n	16d9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16d5a:	4293      	cmp	r3, r2
   16d5c:	d02d      	beq.n	16dba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16d5e:	787b      	ldrb	r3, [r7, #1]
   16d60:	f1b3 050a 	subs.w	r5, r3, #10
   16d64:	bf18      	it	ne
   16d66:	2501      	movne	r5, #1
   16d68:	4429      	add	r1, r5
   16d6a:	2b0a      	cmp	r3, #10
   16d6c:	d017      	beq.n	16d9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16d6e:	1cbb      	adds	r3, r7, #2
   16d70:	4293      	cmp	r3, r2
   16d72:	d022      	beq.n	16dba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16d74:	78bb      	ldrb	r3, [r7, #2]
   16d76:	f1b3 050a 	subs.w	r5, r3, #10
   16d7a:	bf18      	it	ne
   16d7c:	2501      	movne	r5, #1
   16d7e:	4429      	add	r1, r5
   16d80:	2b0a      	cmp	r3, #10
   16d82:	d00c      	beq.n	16d9e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16d84:	1cfb      	adds	r3, r7, #3
   16d86:	4293      	cmp	r3, r2
   16d88:	d017      	beq.n	16dba <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16d8a:	78fb      	ldrb	r3, [r7, #3]
   16d8c:	3e04      	subs	r6, #4
   16d8e:	3704      	adds	r7, #4
   16d90:	f1b3 050a 	subs.w	r5, r3, #10
   16d94:	bf18      	it	ne
   16d96:	2501      	movne	r5, #1
   16d98:	4429      	add	r1, r5
   16d9a:	2b0a      	cmp	r3, #10
   16d9c:	d1d2      	bne.n	16d44 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   16d9e:	4408      	add	r0, r1
   16da0:	4458      	add	r0, fp
   16da2:	f100 0b01 	add.w	fp, r0, #1
   16da6:	4540      	cmp	r0, r8
   16da8:	f4bf af5a 	bcs.w	16c60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16dac:	f81a 0000 	ldrb.w	r0, [sl, r0]
   16db0:	280a      	cmp	r0, #10
   16db2:	f47f af55 	bne.w	16c60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16db6:	2001      	movs	r0, #1
   16db8:	e001      	b.n	16dbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   16dba:	2000      	movs	r0, #0
   16dbc:	46c3      	mov	fp, r8
   16dbe:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16dc2:	eba8 040b 	sub.w	r4, r8, fp
   16dc6:	7008      	strb	r0, [r1, #0]
   16dc8:	fab4 f084 	clz	r0, r4
   16dcc:	0942      	lsrs	r2, r0, #5
   16dce:	fabb f08b 	clz	r0, fp
   16dd2:	0943      	lsrs	r3, r0, #5
   16dd4:	e9d9 0100 	ldrd	r0, r1, [r9]
   16dd8:	ea53 0602 	orrs.w	r6, r3, r2
   16ddc:	d106      	bne.n	16dec <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   16dde:	45d8      	cmp	r8, fp
   16de0:	d926      	bls.n	16e30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16de2:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   16de6:	f112 0f41 	cmn.w	r2, #65	; 0x41
   16dea:	dd21      	ble.n	16e30 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16dec:	68cb      	ldr	r3, [r1, #12]
   16dee:	4651      	mov	r1, sl
   16df0:	465a      	mov	r2, fp
   16df2:	4798      	blx	r3
   16df4:	b9a8      	cbnz	r0, 16e22 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16df6:	2e00      	cmp	r6, #0
   16df8:	f47f af19 	bne.w	16c2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16dfc:	45d8      	cmp	r8, fp
   16dfe:	d905      	bls.n	16e0c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   16e00:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16e04:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16e08:	f73f af11 	bgt.w	16c2e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16e0c:	4650      	mov	r0, sl
   16e0e:	4641      	mov	r1, r8
   16e10:	465a      	mov	r2, fp
   16e12:	4643      	mov	r3, r8
   16e14:	f000 fe4d 	bl	17ab2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16e18:	defe      	udf	#254	; 0xfe
   16e1a:	2000      	movs	r0, #0
   16e1c:	b001      	add	sp, #4
   16e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e22:	2001      	movs	r0, #1
   16e24:	b001      	add	sp, #4
   16e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e2a:	f000 fe20 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16e2e:	defe      	udf	#254	; 0xfe
   16e30:	4650      	mov	r0, sl
   16e32:	4641      	mov	r1, r8
   16e34:	2200      	movs	r2, #0
   16e36:	465b      	mov	r3, fp
   16e38:	f000 fe3b 	bl	17ab2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16e3c:	defe      	udf	#254	; 0xfe

00016e3e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   16e3e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16e40:	b08d      	sub	sp, #52	; 0x34
   16e42:	4604      	mov	r4, r0
   16e44:	7a00      	ldrb	r0, [r0, #8]
   16e46:	b138      	cbz	r0, 16e58 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16e48:	2001      	movs	r0, #1
   16e4a:	6861      	ldr	r1, [r4, #4]
   16e4c:	7220      	strb	r0, [r4, #8]
   16e4e:	1c48      	adds	r0, r1, #1
   16e50:	6060      	str	r0, [r4, #4]
   16e52:	4620      	mov	r0, r4
   16e54:	b00d      	add	sp, #52	; 0x34
   16e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16e58:	4616      	mov	r6, r2
   16e5a:	460d      	mov	r5, r1
   16e5c:	e9d4 1200 	ldrd	r1, r2, [r4]
   16e60:	7808      	ldrb	r0, [r1, #0]
   16e62:	0740      	lsls	r0, r0, #29
   16e64:	d419      	bmi.n	16e9a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16e66:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16e6a:	f240 1126 	movw	r1, #294	; 0x126
   16e6e:	f240 1c2a 	movw	ip, #298	; 0x12a
   16e72:	f2c0 0102 	movt	r1, #2
   16e76:	2a00      	cmp	r2, #0
   16e78:	f2c0 0c02 	movt	ip, #2
   16e7c:	bf08      	it	eq
   16e7e:	4661      	moveq	r1, ip
   16e80:	68db      	ldr	r3, [r3, #12]
   16e82:	f04f 0202 	mov.w	r2, #2
   16e86:	bf08      	it	eq
   16e88:	2201      	moveq	r2, #1
   16e8a:	4798      	blx	r3
   16e8c:	2800      	cmp	r0, #0
   16e8e:	d1db      	bne.n	16e48 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16e90:	68f2      	ldr	r2, [r6, #12]
   16e92:	4628      	mov	r0, r5
   16e94:	6821      	ldr	r1, [r4, #0]
   16e96:	4790      	blx	r2
   16e98:	e7d7      	b.n	16e4a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16e9a:	b95a      	cbnz	r2, 16eb4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16e9c:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16ea0:	2202      	movs	r2, #2
   16ea2:	68cb      	ldr	r3, [r1, #12]
   16ea4:	f240 1128 	movw	r1, #296	; 0x128
   16ea8:	f2c0 0102 	movt	r1, #2
   16eac:	4798      	blx	r3
   16eae:	2800      	cmp	r0, #0
   16eb0:	d1ca      	bne.n	16e48 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16eb2:	6821      	ldr	r1, [r4, #0]
   16eb4:	2001      	movs	r0, #1
   16eb6:	f10d 030f 	add.w	r3, sp, #15
   16eba:	f88d 000f 	strb.w	r0, [sp, #15]
   16ebe:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   16ec2:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   16ec6:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   16eca:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   16ece:	f891 1020 	ldrb.w	r1, [r1, #32]
   16ed2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   16ed6:	a904      	add	r1, sp, #16
   16ed8:	e9cd 0204 	strd	r0, r2, [sp, #16]
   16edc:	f240 100c 	movw	r0, #268	; 0x10c
   16ee0:	f2c0 0002 	movt	r0, #2
   16ee4:	68f2      	ldr	r2, [r6, #12]
   16ee6:	900b      	str	r0, [sp, #44]	; 0x2c
   16ee8:	4668      	mov	r0, sp
   16eea:	900a      	str	r0, [sp, #40]	; 0x28
   16eec:	4628      	mov	r0, r5
   16eee:	e9cd 3708 	strd	r3, r7, [sp, #32]
   16ef2:	e9cd ce06 	strd	ip, lr, [sp, #24]
   16ef6:	4790      	blx	r2
   16ef8:	2800      	cmp	r0, #0
   16efa:	d1a5      	bne.n	16e48 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16efc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16f00:	2202      	movs	r2, #2
   16f02:	68cb      	ldr	r3, [r1, #12]
   16f04:	f240 1124 	movw	r1, #292	; 0x124
   16f08:	f2c0 0102 	movt	r1, #2
   16f0c:	4798      	blx	r3
   16f0e:	e79c      	b.n	16e4a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00016f10 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   16f10:	b5b0      	push	{r4, r5, r7, lr}
   16f12:	4604      	mov	r4, r0
   16f14:	7a05      	ldrb	r5, [r0, #8]
   16f16:	6840      	ldr	r0, [r0, #4]
   16f18:	b308      	cbz	r0, 16f5e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16f1a:	b10d      	cbz	r5, 16f20 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16f1c:	2501      	movs	r5, #1
   16f1e:	e01d      	b.n	16f5c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16f20:	2801      	cmp	r0, #1
   16f22:	d110      	bne.n	16f46 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16f24:	7a60      	ldrb	r0, [r4, #9]
   16f26:	b170      	cbz	r0, 16f46 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16f28:	6821      	ldr	r1, [r4, #0]
   16f2a:	7808      	ldrb	r0, [r1, #0]
   16f2c:	0740      	lsls	r0, r0, #29
   16f2e:	d40a      	bmi.n	16f46 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16f30:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16f34:	2201      	movs	r2, #1
   16f36:	68cb      	ldr	r3, [r1, #12]
   16f38:	f240 112b 	movw	r1, #299	; 0x12b
   16f3c:	f2c0 0102 	movt	r1, #2
   16f40:	2501      	movs	r5, #1
   16f42:	4798      	blx	r3
   16f44:	b950      	cbnz	r0, 16f5c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16f46:	6821      	ldr	r1, [r4, #0]
   16f48:	2201      	movs	r2, #1
   16f4a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16f4e:	68cb      	ldr	r3, [r1, #12]
   16f50:	f240 112c 	movw	r1, #300	; 0x12c
   16f54:	f2c0 0102 	movt	r1, #2
   16f58:	4798      	blx	r3
   16f5a:	4605      	mov	r5, r0
   16f5c:	7225      	strb	r5, [r4, #8]
   16f5e:	2d00      	cmp	r5, #0
   16f60:	bf18      	it	ne
   16f62:	2501      	movne	r5, #1
   16f64:	4628      	mov	r0, r5
   16f66:	bdb0      	pop	{r4, r5, r7, pc}

00016f68 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16f68:	b580      	push	{r7, lr}
   16f6a:	b082      	sub	sp, #8
   16f6c:	468c      	mov	ip, r1
   16f6e:	2100      	movs	r1, #0
   16f70:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16f74:	9101      	str	r1, [sp, #4]
   16f76:	d207      	bcs.n	16f88 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16f78:	f88d c004 	strb.w	ip, [sp, #4]
   16f7c:	a901      	add	r1, sp, #4
   16f7e:	2201      	movs	r2, #1
   16f80:	f7ff fe47 	bl	16c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16f84:	b002      	add	sp, #8
   16f86:	bd80      	pop	{r7, pc}
   16f88:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16f8c:	d210      	bcs.n	16fb0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   16f8e:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16f92:	2306      	movs	r3, #6
   16f94:	2202      	movs	r2, #2
   16f96:	f363 115f 	bfi	r1, r3, #5, #27
   16f9a:	f362 1c9f 	bfi	ip, r2, #6, #26
   16f9e:	f88d c005 	strb.w	ip, [sp, #5]
   16fa2:	f88d 1004 	strb.w	r1, [sp, #4]
   16fa6:	a901      	add	r1, sp, #4
   16fa8:	f7ff fe33 	bl	16c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16fac:	b002      	add	sp, #8
   16fae:	bd80      	pop	{r7, pc}
   16fb0:	2202      	movs	r2, #2
   16fb2:	4663      	mov	r3, ip
   16fb4:	a901      	add	r1, sp, #4
   16fb6:	f362 139f 	bfi	r3, r2, #6, #26
   16fba:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   16fbe:	d213      	bcs.n	16fe8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   16fc0:	f88d 3006 	strb.w	r3, [sp, #6]
   16fc4:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16fc8:	f362 139f 	bfi	r3, r2, #6, #26
   16fcc:	f88d 3005 	strb.w	r3, [sp, #5]
   16fd0:	ea4f 321c 	mov.w	r2, ip, lsr #12
   16fd4:	230e      	movs	r3, #14
   16fd6:	f363 121f 	bfi	r2, r3, #4, #28
   16fda:	f88d 2004 	strb.w	r2, [sp, #4]
   16fde:	2203      	movs	r2, #3
   16fe0:	f7ff fe17 	bl	16c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16fe4:	b002      	add	sp, #8
   16fe6:	bd80      	pop	{r7, pc}
   16fe8:	f88d 3007 	strb.w	r3, [sp, #7]
   16fec:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16ff0:	f362 139f 	bfi	r3, r2, #6, #26
   16ff4:	f88d 3006 	strb.w	r3, [sp, #6]
   16ff8:	ea4f 331c 	mov.w	r3, ip, lsr #12
   16ffc:	f362 139f 	bfi	r3, r2, #6, #26
   17000:	22f0      	movs	r2, #240	; 0xf0
   17002:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   17006:	f88d 3005 	strb.w	r3, [sp, #5]
   1700a:	f88d 2004 	strb.w	r2, [sp, #4]
   1700e:	2204      	movs	r2, #4
   17010:	f7ff fdff 	bl	16c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   17014:	b002      	add	sp, #8
   17016:	bd80      	pop	{r7, pc}

00017018 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   17018:	b570      	push	{r4, r5, r6, lr}
   1701a:	b088      	sub	sp, #32
   1701c:	9001      	str	r0, [sp, #4]
   1701e:	aa02      	add	r2, sp, #8
   17020:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17024:	f240 11f8 	movw	r1, #504	; 0x1f8
   17028:	4610      	mov	r0, r2
   1702a:	f2c0 0102 	movt	r1, #2
   1702e:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17032:	a801      	add	r0, sp, #4
   17034:	f000 f89e 	bl	17174 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   17038:	b008      	add	sp, #32
   1703a:	bd70      	pop	{r4, r5, r6, pc}

0001703c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   1703c:	6800      	ldr	r0, [r0, #0]
   1703e:	f7ff bde8 	b.w	16c12 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00017042 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   17042:	6800      	ldr	r0, [r0, #0]
   17044:	f7ff bf90 	b.w	16f68 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00017048 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   17048:	b570      	push	{r4, r5, r6, lr}
   1704a:	b088      	sub	sp, #32
   1704c:	6800      	ldr	r0, [r0, #0]
   1704e:	aa02      	add	r2, sp, #8
   17050:	9001      	str	r0, [sp, #4]
   17052:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   17056:	4610      	mov	r0, r2
   17058:	f240 11f8 	movw	r1, #504	; 0x1f8
   1705c:	f2c0 0102 	movt	r1, #2
   17060:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   17064:	a801      	add	r0, sp, #4
   17066:	f000 f885 	bl	17174 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1706a:	b008      	add	sp, #32
   1706c:	bd70      	pop	{r4, r5, r6, pc}

0001706e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   1706e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17072:	b08d      	sub	sp, #52	; 0x34
   17074:	468c      	mov	ip, r1
   17076:	6801      	ldr	r1, [r0, #0]
   17078:	f248 5e1f 	movw	lr, #34079	; 0x851f
   1707c:	f240 102f 	movw	r0, #303	; 0x12f
   17080:	f242 7810 	movw	r8, #10000	; 0x2710
   17084:	4541      	cmp	r1, r8
   17086:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   1708a:	f2c0 0002 	movt	r0, #2
   1708e:	d337      	bcc.n	17100 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   17090:	f241 7959 	movw	r9, #5977	; 0x1759
   17094:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17098:	f10d 0b0c 	add.w	fp, sp, #12
   1709c:	2300      	movs	r3, #0
   1709e:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   170a2:	f04f 0a64 	mov.w	sl, #100	; 0x64
   170a6:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   170aa:	fba1 2409 	umull	r2, r4, r1, r9
   170ae:	42b9      	cmp	r1, r7
   170b0:	ea4f 3254 	mov.w	r2, r4, lsr #13
   170b4:	fb02 1418 	mls	r4, r2, r8, r1
   170b8:	4611      	mov	r1, r2
   170ba:	b2a5      	uxth	r5, r4
   170bc:	fba5 560e 	umull	r5, r6, r5, lr
   170c0:	ea4f 1556 	mov.w	r5, r6, lsr #5
   170c4:	eb0b 0603 	add.w	r6, fp, r3
   170c8:	fb05 441a 	mls	r4, r5, sl, r4
   170cc:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   170d0:	f1a3 0304 	sub.w	r3, r3, #4
   170d4:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   170d8:	b2a4      	uxth	r4, r4
   170da:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   170de:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   170e2:	d8e2      	bhi.n	170aa <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   170e4:	f103 0427 	add.w	r4, r3, #39	; 0x27
   170e8:	4611      	mov	r1, r2
   170ea:	2963      	cmp	r1, #99	; 0x63
   170ec:	dc0b      	bgt.n	17106 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   170ee:	460b      	mov	r3, r1
   170f0:	2b0a      	cmp	r3, #10
   170f2:	db17      	blt.n	17124 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   170f4:	1ea1      	subs	r1, r4, #2
   170f6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   170fa:	aa03      	add	r2, sp, #12
   170fc:	5250      	strh	r0, [r2, r1]
   170fe:	e016      	b.n	1712e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17100:	2427      	movs	r4, #39	; 0x27
   17102:	2963      	cmp	r1, #99	; 0x63
   17104:	ddf3      	ble.n	170ee <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17106:	b28a      	uxth	r2, r1
   17108:	3c02      	subs	r4, #2
   1710a:	fba2 230e 	umull	r2, r3, r2, lr
   1710e:	2264      	movs	r2, #100	; 0x64
   17110:	095b      	lsrs	r3, r3, #5
   17112:	fb03 1112 	mls	r1, r3, r2, r1
   17116:	aa03      	add	r2, sp, #12
   17118:	b289      	uxth	r1, r1
   1711a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1711e:	5311      	strh	r1, [r2, r4]
   17120:	2b0a      	cmp	r3, #10
   17122:	dae7      	bge.n	170f4 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17124:	1e61      	subs	r1, r4, #1
   17126:	aa03      	add	r2, sp, #12
   17128:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1712c:	5450      	strb	r0, [r2, r1]
   1712e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17132:	aa03      	add	r2, sp, #12
   17134:	4411      	add	r1, r2
   17136:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   1713a:	e9cd 1000 	strd	r1, r0, [sp]
   1713e:	f2c0 0201 	movt	r2, #1
   17142:	4660      	mov	r0, ip
   17144:	2101      	movs	r1, #1
   17146:	2300      	movs	r3, #0
   17148:	f000 f8f4 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1714c:	b00d      	add	sp, #52	; 0x34
   1714e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017152 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17156:	b086      	sub	sp, #24
   17158:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   1715c:	466a      	mov	r2, sp
   1715e:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17162:	4613      	mov	r3, r2
   17164:	4660      	mov	r0, ip
   17166:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   1716a:	f000 f803 	bl	17174 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1716e:	b006      	add	sp, #24
   17170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017174 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17178:	b08b      	sub	sp, #44	; 0x2c
   1717a:	2303      	movs	r3, #3
   1717c:	6897      	ldr	r7, [r2, #8]
   1717e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   17182:	2320      	movs	r3, #32
   17184:	9303      	str	r3, [sp, #12]
   17186:	2300      	movs	r3, #0
   17188:	2f00      	cmp	r7, #0
   1718a:	9302      	str	r3, [sp, #8]
   1718c:	e9cd 0108 	strd	r0, r1, [sp, #32]
   17190:	9306      	str	r3, [sp, #24]
   17192:	9304      	str	r3, [sp, #16]
   17194:	d07c      	beq.n	17290 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   17196:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   1719a:	e9d2 9400 	ldrd	r9, r4, [r2]
   1719e:	45a3      	cmp	fp, r4
   171a0:	bf88      	it	hi
   171a2:	46a3      	movhi	fp, r4
   171a4:	f1bb 0f00 	cmp.w	fp, #0
   171a8:	f000 809b 	beq.w	172e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   171ac:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   171b0:	68cd      	ldr	r5, [r1, #12]
   171b2:	9201      	str	r2, [sp, #4]
   171b4:	e9d9 3200 	ldrd	r3, r2, [r9]
   171b8:	4619      	mov	r1, r3
   171ba:	47a8      	blx	r5
   171bc:	2800      	cmp	r0, #0
   171be:	f040 809e 	bne.w	172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   171c2:	464d      	mov	r5, r9
   171c4:	f04f 0a01 	mov.w	sl, #1
   171c8:	f04f 0800 	mov.w	r8, #0
   171cc:	f04f 0910 	mov.w	r9, #16
   171d0:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   171d4:	6841      	ldr	r1, [r0, #4]
   171d6:	9103      	str	r1, [sp, #12]
   171d8:	7f01      	ldrb	r1, [r0, #28]
   171da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   171de:	6881      	ldr	r1, [r0, #8]
   171e0:	9102      	str	r1, [sp, #8]
   171e2:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   171e6:	b18a      	cbz	r2, 1720c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   171e8:	2a02      	cmp	r2, #2
   171ea:	d011      	beq.n	17210 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   171ec:	9a01      	ldr	r2, [sp, #4]
   171ee:	4291      	cmp	r1, r2
   171f0:	f080 8098 	bcs.w	17324 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   171f4:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   171f8:	f247 036f 	movw	r3, #28783	; 0x706f
   171fc:	f2c0 0301 	movt	r3, #1
   17200:	6852      	ldr	r2, [r2, #4]
   17202:	429a      	cmp	r2, r3
   17204:	d104      	bne.n	17210 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17206:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   1720a:	6809      	ldr	r1, [r1, #0]
   1720c:	2201      	movs	r2, #1
   1720e:	e000      	b.n	17212 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17210:	2200      	movs	r2, #0
   17212:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17216:	f857 1009 	ldr.w	r1, [r7, r9]
   1721a:	68c0      	ldr	r0, [r0, #12]
   1721c:	b180      	cbz	r0, 17240 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1721e:	2802      	cmp	r0, #2
   17220:	d010      	beq.n	17244 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17222:	9801      	ldr	r0, [sp, #4]
   17224:	4281      	cmp	r1, r0
   17226:	d27d      	bcs.n	17324 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17228:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   1722c:	f247 026f 	movw	r2, #28783	; 0x706f
   17230:	f2c0 0201 	movt	r2, #1
   17234:	6840      	ldr	r0, [r0, #4]
   17236:	4290      	cmp	r0, r2
   17238:	d104      	bne.n	17244 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1723a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1723e:	6801      	ldr	r1, [r0, #0]
   17240:	2001      	movs	r0, #1
   17242:	e000      	b.n	17246 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   17244:	2000      	movs	r0, #0
   17246:	eb07 0209 	add.w	r2, r7, r9
   1724a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1724e:	9801      	ldr	r0, [sp, #4]
   17250:	f852 1c10 	ldr.w	r1, [r2, #-16]
   17254:	4281      	cmp	r1, r0
   17256:	d25d      	bcs.n	17314 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   17258:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1725c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   17260:	684a      	ldr	r2, [r1, #4]
   17262:	a902      	add	r1, sp, #8
   17264:	4790      	blx	r2
   17266:	2800      	cmp	r0, #0
   17268:	d149      	bne.n	172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1726a:	45da      	cmp	sl, fp
   1726c:	d24b      	bcs.n	17306 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1726e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17272:	eb05 0208 	add.w	r2, r5, r8
   17276:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1727a:	68db      	ldr	r3, [r3, #12]
   1727c:	4798      	blx	r3
   1727e:	f109 0920 	add.w	r9, r9, #32
   17282:	f108 0808 	add.w	r8, r8, #8
   17286:	f10a 0a01 	add.w	sl, sl, #1
   1728a:	2800      	cmp	r0, #0
   1728c:	d0a0      	beq.n	171d0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   1728e:	e036      	b.n	172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17290:	6956      	ldr	r6, [r2, #20]
   17292:	e9d2 9400 	ldrd	r9, r4, [r2]
   17296:	42a6      	cmp	r6, r4
   17298:	bf88      	it	hi
   1729a:	4626      	movhi	r6, r4
   1729c:	b30e      	cbz	r6, 172e2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   1729e:	6917      	ldr	r7, [r2, #16]
   172a0:	e9d9 3200 	ldrd	r3, r2, [r9]
   172a4:	68cd      	ldr	r5, [r1, #12]
   172a6:	4619      	mov	r1, r3
   172a8:	47a8      	blx	r5
   172aa:	bb40      	cbnz	r0, 172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   172ac:	f10d 0808 	add.w	r8, sp, #8
   172b0:	2500      	movs	r5, #0
   172b2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   172b6:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   172ba:	684a      	ldr	r2, [r1, #4]
   172bc:	4641      	mov	r1, r8
   172be:	4790      	blx	r2
   172c0:	b9e8      	cbnz	r0, 172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   172c2:	f105 0a01 	add.w	sl, r5, #1
   172c6:	45b2      	cmp	sl, r6
   172c8:	d20d      	bcs.n	172e6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   172ca:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   172ce:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   172d2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   172d6:	68db      	ldr	r3, [r3, #12]
   172d8:	4798      	blx	r3
   172da:	2800      	cmp	r0, #0
   172dc:	4655      	mov	r5, sl
   172de:	d0e8      	beq.n	172b2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   172e0:	e00d      	b.n	172fe <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   172e2:	f04f 0a00 	mov.w	sl, #0
   172e6:	4554      	cmp	r4, sl
   172e8:	d910      	bls.n	1730c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   172ea:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   172ee:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   172f2:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   172f6:	6852      	ldr	r2, [r2, #4]
   172f8:	68db      	ldr	r3, [r3, #12]
   172fa:	4798      	blx	r3
   172fc:	b130      	cbz	r0, 1730c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   172fe:	2001      	movs	r0, #1
   17300:	b00b      	add	sp, #44	; 0x2c
   17302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17306:	46a9      	mov	r9, r5
   17308:	4554      	cmp	r4, sl
   1730a:	d8ee      	bhi.n	172ea <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   1730c:	2000      	movs	r0, #0
   1730e:	b00b      	add	sp, #44	; 0x2c
   17310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17314:	f240 2028 	movw	r0, #552	; 0x228
   17318:	f2c0 0002 	movt	r0, #2
   1731c:	9a01      	ldr	r2, [sp, #4]
   1731e:	f7ff fc47 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17322:	defe      	udf	#254	; 0xfe
   17324:	f240 2038 	movw	r0, #568	; 0x238
   17328:	f2c0 0002 	movt	r0, #2
   1732c:	9a01      	ldr	r2, [sp, #4]
   1732e:	f7ff fc3f 	bl	16bb0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17332:	defe      	udf	#254	; 0xfe

00017334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   17334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17338:	b083      	sub	sp, #12
   1733a:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1733e:	469a      	mov	sl, r3
   17340:	4604      	mov	r4, r0
   17342:	b1e1      	cbz	r1, 1737e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   17344:	f8d4 e000 	ldr.w	lr, [r4]
   17348:	f04f 082b 	mov.w	r8, #43	; 0x2b
   1734c:	f01e 0101 	ands.w	r1, lr, #1
   17350:	bf08      	it	eq
   17352:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   17356:	eb01 0907 	add.w	r9, r1, r7
   1735a:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1735e:	d517      	bpl.n	17390 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   17360:	f1ba 0f00 	cmp.w	sl, #0
   17364:	d033      	beq.n	173ce <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   17366:	f1aa 0101 	sub.w	r1, sl, #1
   1736a:	f00a 0c03 	and.w	ip, sl, #3
   1736e:	2903      	cmp	r1, #3
   17370:	d22f      	bcs.n	173d2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   17372:	2100      	movs	r1, #0
   17374:	4613      	mov	r3, r2
   17376:	f1bc 0f00 	cmp.w	ip, #0
   1737a:	d152      	bne.n	17422 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   1737c:	e069      	b.n	17452 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1737e:	f8d4 e000 	ldr.w	lr, [r4]
   17382:	f107 0901 	add.w	r9, r7, #1
   17386:	f04f 082d 	mov.w	r8, #45	; 0x2d
   1738a:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1738e:	d4e7      	bmi.n	17360 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   17390:	f04f 0a00 	mov.w	sl, #0
   17394:	2200      	movs	r2, #0
   17396:	68a0      	ldr	r0, [r4, #8]
   17398:	2801      	cmp	r0, #1
   1739a:	d161      	bne.n	17460 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   1739c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   173a0:	45cb      	cmp	fp, r9
   173a2:	d95d      	bls.n	17460 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   173a4:	ea5f 700e 	movs.w	r0, lr, lsl #28
   173a8:	d46e      	bmi.n	17488 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   173aa:	9202      	str	r2, [sp, #8]
   173ac:	ebab 0109 	sub.w	r1, fp, r9
   173b0:	f894 2020 	ldrb.w	r2, [r4, #32]
   173b4:	2000      	movs	r0, #0
   173b6:	46a9      	mov	r9, r5
   173b8:	460e      	mov	r6, r1
   173ba:	2a03      	cmp	r2, #3
   173bc:	bf08      	it	eq
   173be:	2201      	moveq	r2, #1
   173c0:	e8df f002 	tbb	[pc, r2]
   173c4:	02840287 	.word	0x02840287
   173c8:	2600      	movs	r6, #0
   173ca:	4608      	mov	r0, r1
   173cc:	e081      	b.n	174d2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   173ce:	2100      	movs	r1, #0
   173d0:	e03f      	b.n	17452 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   173d2:	ebac 060a 	sub.w	r6, ip, sl
   173d6:	2100      	movs	r1, #0
   173d8:	4693      	mov	fp, r2
   173da:	4613      	mov	r3, r2
   173dc:	e9cd 7501 	strd	r7, r5, [sp, #4]
   173e0:	781a      	ldrb	r2, [r3, #0]
   173e2:	785d      	ldrb	r5, [r3, #1]
   173e4:	7898      	ldrb	r0, [r3, #2]
   173e6:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   173ea:	78df      	ldrb	r7, [r3, #3]
   173ec:	2a80      	cmp	r2, #128	; 0x80
   173ee:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   173f2:	bf08      	it	eq
   173f4:	3101      	addeq	r1, #1
   173f6:	2a80      	cmp	r2, #128	; 0x80
   173f8:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   173fc:	bf08      	it	eq
   173fe:	3101      	addeq	r1, #1
   17400:	2880      	cmp	r0, #128	; 0x80
   17402:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   17406:	bf08      	it	eq
   17408:	3101      	addeq	r1, #1
   1740a:	2880      	cmp	r0, #128	; 0x80
   1740c:	bf08      	it	eq
   1740e:	3101      	addeq	r1, #1
   17410:	3304      	adds	r3, #4
   17412:	3604      	adds	r6, #4
   17414:	d1e4      	bne.n	173e0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   17416:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1741a:	465a      	mov	r2, fp
   1741c:	f1bc 0f00 	cmp.w	ip, #0
   17420:	d017      	beq.n	17452 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17422:	7818      	ldrb	r0, [r3, #0]
   17424:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17428:	2880      	cmp	r0, #128	; 0x80
   1742a:	bf08      	it	eq
   1742c:	3101      	addeq	r1, #1
   1742e:	f1bc 0f01 	cmp.w	ip, #1
   17432:	d00e      	beq.n	17452 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17434:	7858      	ldrb	r0, [r3, #1]
   17436:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1743a:	2880      	cmp	r0, #128	; 0x80
   1743c:	bf08      	it	eq
   1743e:	3101      	addeq	r1, #1
   17440:	f1bc 0f02 	cmp.w	ip, #2
   17444:	d005      	beq.n	17452 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17446:	7898      	ldrb	r0, [r3, #2]
   17448:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1744c:	2880      	cmp	r0, #128	; 0x80
   1744e:	bf08      	it	eq
   17450:	3101      	addeq	r1, #1
   17452:	eb09 000a 	add.w	r0, r9, sl
   17456:	eba0 0901 	sub.w	r9, r0, r1
   1745a:	68a0      	ldr	r0, [r4, #8]
   1745c:	2801      	cmp	r0, #1
   1745e:	d09d      	beq.n	1739c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   17460:	4620      	mov	r0, r4
   17462:	4641      	mov	r1, r8
   17464:	4653      	mov	r3, sl
   17466:	f000 f893 	bl	17590 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1746a:	b120      	cbz	r0, 17476 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   1746c:	2601      	movs	r6, #1
   1746e:	4630      	mov	r0, r6
   17470:	b003      	add	sp, #12
   17472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17476:	69e1      	ldr	r1, [r4, #28]
   17478:	463a      	mov	r2, r7
   1747a:	69a0      	ldr	r0, [r4, #24]
   1747c:	68cb      	ldr	r3, [r1, #12]
   1747e:	4629      	mov	r1, r5
   17480:	b003      	add	sp, #12
   17482:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17486:	4718      	bx	r3
   17488:	6860      	ldr	r0, [r4, #4]
   1748a:	2601      	movs	r6, #1
   1748c:	9002      	str	r0, [sp, #8]
   1748e:	2030      	movs	r0, #48	; 0x30
   17490:	f894 1020 	ldrb.w	r1, [r4, #32]
   17494:	4653      	mov	r3, sl
   17496:	6060      	str	r0, [r4, #4]
   17498:	4620      	mov	r0, r4
   1749a:	9101      	str	r1, [sp, #4]
   1749c:	4641      	mov	r1, r8
   1749e:	f884 6020 	strb.w	r6, [r4, #32]
   174a2:	f000 f875 	bl	17590 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   174a6:	2800      	cmp	r0, #0
   174a8:	d1e1      	bne.n	1746e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   174aa:	f894 2020 	ldrb.w	r2, [r4, #32]
   174ae:	ebab 0109 	sub.w	r1, fp, r9
   174b2:	2000      	movs	r0, #0
   174b4:	46a9      	mov	r9, r5
   174b6:	2a03      	cmp	r2, #3
   174b8:	bf08      	it	eq
   174ba:	2201      	moveq	r2, #1
   174bc:	460e      	mov	r6, r1
   174be:	e8df f002 	tbb	[pc, r2]
   174c2:	0235      	.short	0x0235
   174c4:	0232      	.short	0x0232
   174c6:	2600      	movs	r6, #0
   174c8:	4608      	mov	r0, r1
   174ca:	e02f      	b.n	1752c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   174cc:	0848      	lsrs	r0, r1, #1
   174ce:	3101      	adds	r1, #1
   174d0:	084e      	lsrs	r6, r1, #1
   174d2:	1c45      	adds	r5, r0, #1
   174d4:	3d01      	subs	r5, #1
   174d6:	d007      	beq.n	174e8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   174d8:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   174dc:	6861      	ldr	r1, [r4, #4]
   174de:	6912      	ldr	r2, [r2, #16]
   174e0:	4790      	blx	r2
   174e2:	2800      	cmp	r0, #0
   174e4:	d0f6      	beq.n	174d4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   174e6:	e7c1      	b.n	1746c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   174e8:	9a02      	ldr	r2, [sp, #8]
   174ea:	4620      	mov	r0, r4
   174ec:	4641      	mov	r1, r8
   174ee:	4653      	mov	r3, sl
   174f0:	f8d4 b004 	ldr.w	fp, [r4, #4]
   174f4:	f000 f84c 	bl	17590 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   174f8:	2800      	cmp	r0, #0
   174fa:	d1b7      	bne.n	1746c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   174fc:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17500:	463a      	mov	r2, r7
   17502:	68cb      	ldr	r3, [r1, #12]
   17504:	4649      	mov	r1, r9
   17506:	4798      	blx	r3
   17508:	2800      	cmp	r0, #0
   1750a:	d1af      	bne.n	1746c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1750c:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   17510:	1c77      	adds	r7, r6, #1
   17512:	2601      	movs	r6, #1
   17514:	3f01      	subs	r7, #1
   17516:	d02c      	beq.n	17572 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   17518:	6922      	ldr	r2, [r4, #16]
   1751a:	4628      	mov	r0, r5
   1751c:	4659      	mov	r1, fp
   1751e:	4790      	blx	r2
   17520:	2800      	cmp	r0, #0
   17522:	d0f7      	beq.n	17514 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   17524:	e7a3      	b.n	1746e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17526:	0848      	lsrs	r0, r1, #1
   17528:	3101      	adds	r1, #1
   1752a:	084e      	lsrs	r6, r1, #1
   1752c:	1c45      	adds	r5, r0, #1
   1752e:	3d01      	subs	r5, #1
   17530:	d007      	beq.n	17542 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   17532:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17536:	6861      	ldr	r1, [r4, #4]
   17538:	6912      	ldr	r2, [r2, #16]
   1753a:	4790      	blx	r2
   1753c:	2800      	cmp	r0, #0
   1753e:	d0f6      	beq.n	1752e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   17540:	e794      	b.n	1746c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17542:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17546:	463a      	mov	r2, r7
   17548:	68cb      	ldr	r3, [r1, #12]
   1754a:	4649      	mov	r1, r9
   1754c:	f8d4 8004 	ldr.w	r8, [r4, #4]
   17550:	4798      	blx	r3
   17552:	2800      	cmp	r0, #0
   17554:	f47f af8a 	bne.w	1746c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17558:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   1755c:	1c77      	adds	r7, r6, #1
   1755e:	2601      	movs	r6, #1
   17560:	3f01      	subs	r7, #1
   17562:	d00b      	beq.n	1757c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   17564:	692a      	ldr	r2, [r5, #16]
   17566:	4648      	mov	r0, r9
   17568:	4641      	mov	r1, r8
   1756a:	4790      	blx	r2
   1756c:	2800      	cmp	r0, #0
   1756e:	d0f7      	beq.n	17560 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   17570:	e77d      	b.n	1746e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17572:	2600      	movs	r6, #0
   17574:	4630      	mov	r0, r6
   17576:	b003      	add	sp, #12
   17578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1757c:	9801      	ldr	r0, [sp, #4]
   1757e:	2600      	movs	r6, #0
   17580:	f884 0020 	strb.w	r0, [r4, #32]
   17584:	9802      	ldr	r0, [sp, #8]
   17586:	6060      	str	r0, [r4, #4]
   17588:	4630      	mov	r0, r6
   1758a:	b003      	add	sp, #12
   1758c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017590 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   17590:	b570      	push	{r4, r5, r6, lr}
   17592:	461c      	mov	r4, r3
   17594:	4615      	mov	r5, r2
   17596:	4606      	mov	r6, r0
   17598:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   1759c:	d006      	beq.n	175ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   1759e:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   175a2:	6912      	ldr	r2, [r2, #16]
   175a4:	4790      	blx	r2
   175a6:	b108      	cbz	r0, 175ac <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   175a8:	2001      	movs	r0, #1
   175aa:	bd70      	pop	{r4, r5, r6, pc}
   175ac:	b13d      	cbz	r5, 175be <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   175ae:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   175b2:	4622      	mov	r2, r4
   175b4:	68cb      	ldr	r3, [r1, #12]
   175b6:	4629      	mov	r1, r5
   175b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   175bc:	4718      	bx	r3
   175be:	2000      	movs	r0, #0
   175c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000175c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   175c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175c8:	b081      	sub	sp, #4
   175ca:	f8d0 e008 	ldr.w	lr, [r0, #8]
   175ce:	4682      	mov	sl, r0
   175d0:	6900      	ldr	r0, [r0, #16]
   175d2:	4691      	mov	r9, r2
   175d4:	4688      	mov	r8, r1
   175d6:	f1be 0f01 	cmp.w	lr, #1
   175da:	d111      	bne.n	17600 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   175dc:	2801      	cmp	r0, #1
   175de:	d012      	beq.n	17606 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   175e0:	f1b9 0f00 	cmp.w	r9, #0
   175e4:	f000 80c5 	beq.w	17772 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   175e8:	f1a9 0101 	sub.w	r1, r9, #1
   175ec:	f009 0003 	and.w	r0, r9, #3
   175f0:	2903      	cmp	r1, #3
   175f2:	d267      	bcs.n	176c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   175f4:	2100      	movs	r1, #0
   175f6:	4642      	mov	r2, r8
   175f8:	2800      	cmp	r0, #0
   175fa:	f040 8083 	bne.w	17704 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   175fe:	e097      	b.n	17730 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17600:	2801      	cmp	r0, #1
   17602:	f040 80bd 	bne.w	17780 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17606:	f1b9 0f00 	cmp.w	r9, #0
   1760a:	d054      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   1760c:	f8da 0014 	ldr.w	r0, [sl, #20]
   17610:	eb08 0109 	add.w	r1, r8, r9
   17614:	2200      	movs	r2, #0
   17616:	4647      	mov	r7, r8
   17618:	1c43      	adds	r3, r0, #1
   1761a:	4646      	mov	r6, r8
   1761c:	463c      	mov	r4, r7
   1761e:	f914 5b01 	ldrsb.w	r5, [r4], #1
   17622:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17626:	b2e8      	uxtb	r0, r5
   17628:	dc2e      	bgt.n	17688 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1762a:	428c      	cmp	r4, r1
   1762c:	d01a      	beq.n	17664 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1762e:	787d      	ldrb	r5, [r7, #1]
   17630:	1cbc      	adds	r4, r7, #2
   17632:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   17636:	4627      	mov	r7, r4
   17638:	f000 0b1f 	and.w	fp, r0, #31
   1763c:	28df      	cmp	r0, #223	; 0xdf
   1763e:	d917      	bls.n	17670 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   17640:	428f      	cmp	r7, r1
   17642:	d018      	beq.n	17676 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   17644:	f817 4b01 	ldrb.w	r4, [r7], #1
   17648:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   1764c:	463c      	mov	r4, r7
   1764e:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17652:	28f0      	cmp	r0, #240	; 0xf0
   17654:	d316      	bcc.n	17684 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   17656:	428f      	cmp	r7, r1
   17658:	d020      	beq.n	1769c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   1765a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1765e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   17662:	e01d      	b.n	176a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   17664:	2500      	movs	r5, #0
   17666:	460f      	mov	r7, r1
   17668:	f000 0b1f 	and.w	fp, r0, #31
   1766c:	28df      	cmp	r0, #223	; 0xdf
   1766e:	d8e7      	bhi.n	17640 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   17670:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   17674:	e008      	b.n	17688 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17676:	f04f 0c00 	mov.w	ip, #0
   1767a:	460f      	mov	r7, r1
   1767c:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17680:	28f0      	cmp	r0, #240	; 0xf0
   17682:	d2e8      	bcs.n	17656 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   17684:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   17688:	4627      	mov	r7, r4
   1768a:	3b01      	subs	r3, #1
   1768c:	d065      	beq.n	1775a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   1768e:	1b90      	subs	r0, r2, r6
   17690:	42b9      	cmp	r1, r7
   17692:	eb00 0207 	add.w	r2, r0, r7
   17696:	463e      	mov	r6, r7
   17698:	d1c0      	bne.n	1761c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   1769a:	e061      	b.n	17760 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   1769c:	2000      	movs	r0, #0
   1769e:	4627      	mov	r7, r4
   176a0:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   176a4:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   176a8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   176ac:	4428      	add	r0, r5
   176ae:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   176b2:	d1ea      	bne.n	1768a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   176b4:	e054      	b.n	17760 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   176b6:	2200      	movs	r2, #0
   176b8:	f1be 0f01 	cmp.w	lr, #1
   176bc:	d054      	beq.n	17768 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   176be:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   176c2:	e062      	b.n	1778a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   176c4:	eba0 0309 	sub.w	r3, r0, r9
   176c8:	2100      	movs	r1, #0
   176ca:	4642      	mov	r2, r8
   176cc:	7817      	ldrb	r7, [r2, #0]
   176ce:	7856      	ldrb	r6, [r2, #1]
   176d0:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   176d4:	7895      	ldrb	r5, [r2, #2]
   176d6:	78d4      	ldrb	r4, [r2, #3]
   176d8:	2f80      	cmp	r7, #128	; 0x80
   176da:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   176de:	bf08      	it	eq
   176e0:	3101      	addeq	r1, #1
   176e2:	2f80      	cmp	r7, #128	; 0x80
   176e4:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   176e8:	bf08      	it	eq
   176ea:	3101      	addeq	r1, #1
   176ec:	2f80      	cmp	r7, #128	; 0x80
   176ee:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   176f2:	bf08      	it	eq
   176f4:	3101      	addeq	r1, #1
   176f6:	2f80      	cmp	r7, #128	; 0x80
   176f8:	bf08      	it	eq
   176fa:	3101      	addeq	r1, #1
   176fc:	3204      	adds	r2, #4
   176fe:	3304      	adds	r3, #4
   17700:	d1e4      	bne.n	176cc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   17702:	b1a8      	cbz	r0, 17730 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17704:	7813      	ldrb	r3, [r2, #0]
   17706:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1770a:	2b80      	cmp	r3, #128	; 0x80
   1770c:	bf08      	it	eq
   1770e:	3101      	addeq	r1, #1
   17710:	2801      	cmp	r0, #1
   17712:	d00d      	beq.n	17730 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17714:	7853      	ldrb	r3, [r2, #1]
   17716:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1771a:	2b80      	cmp	r3, #128	; 0x80
   1771c:	bf08      	it	eq
   1771e:	3101      	addeq	r1, #1
   17720:	2802      	cmp	r0, #2
   17722:	d005      	beq.n	17730 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17724:	7890      	ldrb	r0, [r2, #2]
   17726:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1772a:	2880      	cmp	r0, #128	; 0x80
   1772c:	bf08      	it	eq
   1772e:	3101      	addeq	r1, #1
   17730:	f8da 000c 	ldr.w	r0, [sl, #12]
   17734:	eba9 0101 	sub.w	r1, r9, r1
   17738:	4281      	cmp	r1, r0
   1773a:	d221      	bcs.n	17780 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1773c:	f1b9 0f00 	cmp.w	r9, #0
   17740:	d029      	beq.n	17796 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   17742:	f1a9 0101 	sub.w	r1, r9, #1
   17746:	f009 0c03 	and.w	ip, r9, #3
   1774a:	2903      	cmp	r1, #3
   1774c:	d225      	bcs.n	1779a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1774e:	2100      	movs	r1, #0
   17750:	4643      	mov	r3, r8
   17752:	f1bc 0f00 	cmp.w	ip, #0
   17756:	d142      	bne.n	177de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   17758:	e059      	b.n	1780e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1775a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1775e:	d167      	bne.n	17830 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   17760:	464a      	mov	r2, r9
   17762:	f1be 0f01 	cmp.w	lr, #1
   17766:	d1aa      	bne.n	176be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17768:	4691      	mov	r9, r2
   1776a:	f1b9 0f00 	cmp.w	r9, #0
   1776e:	f47f af3b 	bne.w	175e8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   17772:	2100      	movs	r1, #0
   17774:	f8da 000c 	ldr.w	r0, [sl, #12]
   17778:	eba9 0101 	sub.w	r1, r9, r1
   1777c:	4281      	cmp	r1, r0
   1777e:	d3dd      	bcc.n	1773c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   17780:	f8da 101c 	ldr.w	r1, [sl, #28]
   17784:	464a      	mov	r2, r9
   17786:	f8da 0018 	ldr.w	r0, [sl, #24]
   1778a:	68cb      	ldr	r3, [r1, #12]
   1778c:	4641      	mov	r1, r8
   1778e:	b001      	add	sp, #4
   17790:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17794:	4718      	bx	r3
   17796:	2100      	movs	r1, #0
   17798:	e039      	b.n	1780e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1779a:	ebac 0709 	sub.w	r7, ip, r9
   1779e:	2100      	movs	r1, #0
   177a0:	4643      	mov	r3, r8
   177a2:	781e      	ldrb	r6, [r3, #0]
   177a4:	785d      	ldrb	r5, [r3, #1]
   177a6:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   177aa:	789c      	ldrb	r4, [r3, #2]
   177ac:	78da      	ldrb	r2, [r3, #3]
   177ae:	2e80      	cmp	r6, #128	; 0x80
   177b0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   177b4:	bf08      	it	eq
   177b6:	3101      	addeq	r1, #1
   177b8:	2e80      	cmp	r6, #128	; 0x80
   177ba:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   177be:	bf08      	it	eq
   177c0:	3101      	addeq	r1, #1
   177c2:	2e80      	cmp	r6, #128	; 0x80
   177c4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   177c8:	bf08      	it	eq
   177ca:	3101      	addeq	r1, #1
   177cc:	2a80      	cmp	r2, #128	; 0x80
   177ce:	bf08      	it	eq
   177d0:	3101      	addeq	r1, #1
   177d2:	3304      	adds	r3, #4
   177d4:	3704      	adds	r7, #4
   177d6:	d1e4      	bne.n	177a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   177d8:	f1bc 0f00 	cmp.w	ip, #0
   177dc:	d017      	beq.n	1780e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   177de:	781a      	ldrb	r2, [r3, #0]
   177e0:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   177e4:	2a80      	cmp	r2, #128	; 0x80
   177e6:	bf08      	it	eq
   177e8:	3101      	addeq	r1, #1
   177ea:	f1bc 0f01 	cmp.w	ip, #1
   177ee:	d00e      	beq.n	1780e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   177f0:	785a      	ldrb	r2, [r3, #1]
   177f2:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   177f6:	2a80      	cmp	r2, #128	; 0x80
   177f8:	bf08      	it	eq
   177fa:	3101      	addeq	r1, #1
   177fc:	f1bc 0f02 	cmp.w	ip, #2
   17800:	d005      	beq.n	1780e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17802:	789a      	ldrb	r2, [r3, #2]
   17804:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17808:	2a80      	cmp	r2, #128	; 0x80
   1780a:	bf08      	it	eq
   1780c:	3101      	addeq	r1, #1
   1780e:	f89a 3020 	ldrb.w	r3, [sl, #32]
   17812:	eba1 0109 	sub.w	r1, r1, r9
   17816:	4401      	add	r1, r0
   17818:	2000      	movs	r0, #0
   1781a:	1eda      	subs	r2, r3, #3
   1781c:	bf18      	it	ne
   1781e:	461a      	movne	r2, r3
   17820:	460e      	mov	r6, r1
   17822:	e8df f002 	tbb	[pc, r2]
   17826:	0216      	.short	0x0216
   17828:	0213      	.short	0x0213
   1782a:	2600      	movs	r6, #0
   1782c:	4608      	mov	r0, r1
   1782e:	e010      	b.n	17852 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   17830:	2a00      	cmp	r2, #0
   17832:	bf18      	it	ne
   17834:	454a      	cmpne	r2, r9
   17836:	d134      	bne.n	178a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   17838:	4640      	mov	r0, r8
   1783a:	2800      	cmp	r0, #0
   1783c:	bf0c      	ite	eq
   1783e:	464a      	moveq	r2, r9
   17840:	4680      	movne	r8, r0
   17842:	f1be 0f01 	cmp.w	lr, #1
   17846:	f43f af8f 	beq.w	17768 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1784a:	e738      	b.n	176be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   1784c:	0848      	lsrs	r0, r1, #1
   1784e:	3101      	adds	r1, #1
   17850:	084e      	lsrs	r6, r1, #1
   17852:	1c44      	adds	r4, r0, #1
   17854:	3c01      	subs	r4, #1
   17856:	d008      	beq.n	1786a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   17858:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   1785c:	f8da 1004 	ldr.w	r1, [sl, #4]
   17860:	6912      	ldr	r2, [r2, #16]
   17862:	4790      	blx	r2
   17864:	2800      	cmp	r0, #0
   17866:	d0f5      	beq.n	17854 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   17868:	e013      	b.n	17892 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1786a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1786e:	464a      	mov	r2, r9
   17870:	68cb      	ldr	r3, [r1, #12]
   17872:	4641      	mov	r1, r8
   17874:	f8da 7004 	ldr.w	r7, [sl, #4]
   17878:	4798      	blx	r3
   1787a:	b950      	cbnz	r0, 17892 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1787c:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   17880:	3601      	adds	r6, #1
   17882:	3e01      	subs	r6, #1
   17884:	d009      	beq.n	1789a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   17886:	692a      	ldr	r2, [r5, #16]
   17888:	4620      	mov	r0, r4
   1788a:	4639      	mov	r1, r7
   1788c:	4790      	blx	r2
   1788e:	2800      	cmp	r0, #0
   17890:	d0f7      	beq.n	17882 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   17892:	2001      	movs	r0, #1
   17894:	b001      	add	sp, #4
   17896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1789a:	2000      	movs	r0, #0
   1789c:	b001      	add	sp, #4
   1789e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178a2:	454a      	cmp	r2, r9
   178a4:	d204      	bcs.n	178b0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   178a6:	f918 0002 	ldrsb.w	r0, [r8, r2]
   178aa:	f110 0f40 	cmn.w	r0, #64	; 0x40
   178ae:	dac3      	bge.n	17838 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   178b0:	2000      	movs	r0, #0
   178b2:	2200      	movs	r2, #0
   178b4:	2800      	cmp	r0, #0
   178b6:	bf0c      	ite	eq
   178b8:	464a      	moveq	r2, r9
   178ba:	4680      	movne	r8, r0
   178bc:	f1be 0f01 	cmp.w	lr, #1
   178c0:	f43f af52 	beq.w	17768 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   178c4:	e6fb      	b.n	176be <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000178c6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   178c6:	7800      	ldrb	r0, [r0, #0]
   178c8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   178cc:	4770      	bx	lr

000178ce <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   178ce:	7800      	ldrb	r0, [r0, #0]
   178d0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   178d4:	4770      	bx	lr

000178d6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   178d6:	b570      	push	{r4, r5, r6, lr}
   178d8:	460d      	mov	r5, r1
   178da:	4606      	mov	r6, r0
   178dc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   178e0:	461c      	mov	r4, r3
   178e2:	68cb      	ldr	r3, [r1, #12]
   178e4:	4611      	mov	r1, r2
   178e6:	4622      	mov	r2, r4
   178e8:	4798      	blx	r3
   178ea:	7230      	strb	r0, [r6, #8]
   178ec:	fab4 f084 	clz	r0, r4
   178f0:	0940      	lsrs	r0, r0, #5
   178f2:	7270      	strb	r0, [r6, #9]
   178f4:	2000      	movs	r0, #0
   178f6:	e9c6 5000 	strd	r5, r0, [r6]
   178fa:	bd70      	pop	{r4, r5, r6, pc}

000178fc <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   178fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17900:	b085      	sub	sp, #20
   17902:	460c      	mov	r4, r1
   17904:	4605      	mov	r5, r0
   17906:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1790a:	690a      	ldr	r2, [r1, #16]
   1790c:	2127      	movs	r1, #39	; 0x27
   1790e:	4790      	blx	r2
   17910:	b118      	cbz	r0, 1791a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   17912:	2001      	movs	r0, #1
   17914:	b005      	add	sp, #20
   17916:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1791a:	6829      	ldr	r1, [r5, #0]
   1791c:	a801      	add	r0, sp, #4
   1791e:	2201      	movs	r2, #1
   17920:	f7ff f85c 	bl	169dc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   17924:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17928:	f04f 091c 	mov.w	r9, #28
   1792c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   17930:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   17934:	f89d 6010 	ldrb.w	r6, [sp, #16]
   17938:	d139      	bne.n	179ae <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1793a:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   1793e:	2f02      	cmp	r7, #2
   17940:	f0c0 806b 	bcc.w	17a1a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   17944:	d00c      	beq.n	17960 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   17946:	b2f0      	uxtb	r0, r6
   17948:	2604      	movs	r6, #4
   1794a:	2703      	movs	r7, #3
   1794c:	215c      	movs	r1, #92	; 0x5c
   1794e:	e8df f000 	tbb	[pc, r0]
   17952:	0364      	.short	0x0364
   17954:	09242010 	.word	0x09242010
   17958:	2600      	movs	r6, #0
   1795a:	2703      	movs	r7, #3
   1795c:	217d      	movs	r1, #125	; 0x7d
   1795e:	e001      	b.n	17964 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17960:	2701      	movs	r7, #1
   17962:	215c      	movs	r1, #92	; 0x5c
   17964:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17968:	6912      	ldr	r2, [r2, #16]
   1796a:	4790      	blx	r2
   1796c:	2800      	cmp	r0, #0
   1796e:	d0e6      	beq.n	1793e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   17970:	e7cf      	b.n	17912 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   17972:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17976:	2602      	movs	r6, #2
   17978:	2703      	movs	r7, #3
   1797a:	f1b8 0f00 	cmp.w	r8, #0
   1797e:	fa25 f100 	lsr.w	r1, r5, r0
   17982:	bf08      	it	eq
   17984:	2601      	moveq	r6, #1
   17986:	bf18      	it	ne
   17988:	f1a8 0801 	subne.w	r8, r8, #1
   1798c:	f367 111f 	bfi	r1, r7, #4, #28
   17990:	e7e8      	b.n	17964 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17992:	2602      	movs	r6, #2
   17994:	2703      	movs	r7, #3
   17996:	217b      	movs	r1, #123	; 0x7b
   17998:	e7e4      	b.n	17964 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   1799a:	2703      	movs	r7, #3
   1799c:	2175      	movs	r1, #117	; 0x75
   1799e:	2603      	movs	r6, #3
   179a0:	e7e0      	b.n	17964 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   179a2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   179a6:	6912      	ldr	r2, [r2, #16]
   179a8:	4790      	blx	r2
   179aa:	2800      	cmp	r0, #0
   179ac:	d1b1      	bne.n	17912 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   179ae:	4638      	mov	r0, r7
   179b0:	2701      	movs	r7, #1
   179b2:	215c      	movs	r1, #92	; 0x5c
   179b4:	e8df f000 	tbb	[pc, r0]
   179b8:	06020331 	.word	0x06020331
   179bc:	e7f1      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   179be:	2700      	movs	r7, #0
   179c0:	4629      	mov	r1, r5
   179c2:	e7ee      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   179c4:	b2f0      	uxtb	r0, r6
   179c6:	2604      	movs	r6, #4
   179c8:	2703      	movs	r7, #3
   179ca:	215c      	movs	r1, #92	; 0x5c
   179cc:	e8df f000 	tbb	[pc, r0]
   179d0:	1d080425 	.word	0x1d080425
   179d4:	0321      	.short	0x0321
   179d6:	e7e4      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   179d8:	2600      	movs	r6, #0
   179da:	2703      	movs	r7, #3
   179dc:	217d      	movs	r1, #125	; 0x7d
   179de:	e7e0      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   179e0:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   179e4:	2602      	movs	r6, #2
   179e6:	2703      	movs	r7, #3
   179e8:	fa25 f000 	lsr.w	r0, r5, r0
   179ec:	f000 000f 	and.w	r0, r0, #15
   179f0:	f100 0157 	add.w	r1, r0, #87	; 0x57
   179f4:	280a      	cmp	r0, #10
   179f6:	bf38      	it	cc
   179f8:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   179fc:	f1b8 0f00 	cmp.w	r8, #0
   17a00:	bf0c      	ite	eq
   17a02:	2601      	moveq	r6, #1
   17a04:	f1a8 0801 	subne.w	r8, r8, #1
   17a08:	e7cb      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17a0a:	2602      	movs	r6, #2
   17a0c:	2703      	movs	r7, #3
   17a0e:	217b      	movs	r1, #123	; 0x7b
   17a10:	e7c7      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17a12:	2703      	movs	r7, #3
   17a14:	2175      	movs	r1, #117	; 0x75
   17a16:	2603      	movs	r6, #3
   17a18:	e7c3      	b.n	179a2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17a1a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17a1e:	690a      	ldr	r2, [r1, #16]
   17a20:	2127      	movs	r1, #39	; 0x27
   17a22:	b005      	add	sp, #20
   17a24:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17a28:	4710      	bx	r2

00017a2a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   17a2a:	b08c      	sub	sp, #48	; 0x30
   17a2c:	e9cd 0100 	strd	r0, r1, [sp]
   17a30:	2002      	movs	r0, #2
   17a32:	a908      	add	r1, sp, #32
   17a34:	9007      	str	r0, [sp, #28]
   17a36:	9106      	str	r1, [sp, #24]
   17a38:	2100      	movs	r1, #0
   17a3a:	9105      	str	r1, [sp, #20]
   17a3c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17a40:	f240 2088 	movw	r0, #648	; 0x288
   17a44:	f2c0 0002 	movt	r0, #2
   17a48:	a901      	add	r1, sp, #4
   17a4a:	9002      	str	r0, [sp, #8]
   17a4c:	f648 1005 	movw	r0, #35077	; 0x8905
   17a50:	f2c0 0001 	movt	r0, #1
   17a54:	900b      	str	r0, [sp, #44]	; 0x2c
   17a56:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17a5a:	4668      	mov	r0, sp
   17a5c:	f240 2198 	movw	r1, #664	; 0x298
   17a60:	9008      	str	r0, [sp, #32]
   17a62:	a802      	add	r0, sp, #8
   17a64:	f2c0 0102 	movt	r1, #2
   17a68:	f7ff f8c2 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17a6c:	defe      	udf	#254	; 0xfe

00017a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   17a6e:	b08c      	sub	sp, #48	; 0x30
   17a70:	e9cd 0100 	strd	r0, r1, [sp]
   17a74:	2002      	movs	r0, #2
   17a76:	a908      	add	r1, sp, #32
   17a78:	9007      	str	r0, [sp, #28]
   17a7a:	9106      	str	r1, [sp, #24]
   17a7c:	2100      	movs	r1, #0
   17a7e:	9105      	str	r1, [sp, #20]
   17a80:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17a84:	f240 20cc 	movw	r0, #716	; 0x2cc
   17a88:	f2c0 0002 	movt	r0, #2
   17a8c:	a901      	add	r1, sp, #4
   17a8e:	9002      	str	r0, [sp, #8]
   17a90:	f648 1005 	movw	r0, #35077	; 0x8905
   17a94:	f2c0 0001 	movt	r0, #1
   17a98:	900b      	str	r0, [sp, #44]	; 0x2c
   17a9a:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   17a9e:	4668      	mov	r0, sp
   17aa0:	f240 21dc 	movw	r1, #732	; 0x2dc
   17aa4:	9008      	str	r0, [sp, #32]
   17aa6:	a802      	add	r0, sp, #8
   17aa8:	f2c0 0102 	movt	r1, #2
   17aac:	f7ff f8a0 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17ab0:	defe      	udf	#254	; 0xfe

00017ab2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   17ab2:	b09a      	sub	sp, #104	; 0x68
   17ab4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   17ab8:	e9cd 2300 	strd	r2, r3, [sp]
   17abc:	d802      	bhi.n	17ac4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   17abe:	2501      	movs	r5, #1
   17ac0:	468c      	mov	ip, r1
   17ac2:	e03e      	b.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17ac4:	f1c1 0e00 	rsb	lr, r1, #0
   17ac8:	f44f 7c80 	mov.w	ip, #256	; 0x100
   17acc:	458c      	cmp	ip, r1
   17ace:	d205      	bcs.n	17adc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   17ad0:	f910 400c 	ldrsb.w	r4, [r0, ip]
   17ad4:	f114 0f41 	cmn.w	r4, #65	; 0x41
   17ad8:	f300 8108 	bgt.w	17cec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   17adc:	eb0e 040c 	add.w	r4, lr, ip
   17ae0:	f1ac 0601 	sub.w	r6, ip, #1
   17ae4:	2c01      	cmp	r4, #1
   17ae6:	d02a      	beq.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17ae8:	428e      	cmp	r6, r1
   17aea:	d206      	bcs.n	17afa <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   17aec:	eb00 050c 	add.w	r5, r0, ip
   17af0:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   17af4:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17af8:	dc21      	bgt.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17afa:	f1ac 0602 	sub.w	r6, ip, #2
   17afe:	2c02      	cmp	r4, #2
   17b00:	d01d      	beq.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17b02:	428e      	cmp	r6, r1
   17b04:	d206      	bcs.n	17b14 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   17b06:	eb00 050c 	add.w	r5, r0, ip
   17b0a:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   17b0e:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17b12:	dc14      	bgt.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17b14:	f1ac 0603 	sub.w	r6, ip, #3
   17b18:	2c03      	cmp	r4, #3
   17b1a:	d010      	beq.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17b1c:	428e      	cmp	r6, r1
   17b1e:	d206      	bcs.n	17b2e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   17b20:	eb00 050c 	add.w	r5, r0, ip
   17b24:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   17b28:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17b2c:	dc07      	bgt.n	17b3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17b2e:	f1bc 0c04 	subs.w	ip, ip, #4
   17b32:	f04f 0500 	mov.w	r5, #0
   17b36:	d004      	beq.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17b38:	2c04      	cmp	r4, #4
   17b3a:	d1c7      	bne.n	17acc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   17b3c:	e001      	b.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17b3e:	2500      	movs	r5, #0
   17b40:	46b4      	mov	ip, r6
   17b42:	2605      	movs	r6, #5
   17b44:	2d00      	cmp	r5, #0
   17b46:	f240 35aa 	movw	r5, #938	; 0x3aa
   17b4a:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   17b4e:	bf18      	it	ne
   17b50:	2600      	movne	r6, #0
   17b52:	9605      	str	r6, [sp, #20]
   17b54:	f64f 66f4 	movw	r6, #65268	; 0xfef4
   17b58:	f2c0 0502 	movt	r5, #2
   17b5c:	f2c0 0601 	movt	r6, #1
   17b60:	bf18      	it	ne
   17b62:	4635      	movne	r5, r6
   17b64:	428a      	cmp	r2, r1
   17b66:	9504      	str	r5, [sp, #16]
   17b68:	bf98      	it	ls
   17b6a:	428b      	cmpls	r3, r1
   17b6c:	d92a      	bls.n	17bc4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   17b6e:	428a      	cmp	r2, r1
   17b70:	f04f 0003 	mov.w	r0, #3
   17b74:	a910      	add	r1, sp, #64	; 0x40
   17b76:	bf88      	it	hi
   17b78:	4613      	movhi	r3, r2
   17b7a:	900f      	str	r0, [sp, #60]	; 0x3c
   17b7c:	910e      	str	r1, [sp, #56]	; 0x38
   17b7e:	2100      	movs	r1, #0
   17b80:	910d      	str	r1, [sp, #52]	; 0x34
   17b82:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17b86:	f240 30d0 	movw	r0, #976	; 0x3d0
   17b8a:	f2c0 0002 	movt	r0, #2
   17b8e:	a904      	add	r1, sp, #16
   17b90:	900a      	str	r0, [sp, #40]	; 0x28
   17b92:	f648 10f3 	movw	r0, #35315	; 0x89f3
   17b96:	f2c0 0001 	movt	r0, #1
   17b9a:	9308      	str	r3, [sp, #32]
   17b9c:	9015      	str	r0, [sp, #84]	; 0x54
   17b9e:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   17ba2:	a802      	add	r0, sp, #8
   17ba4:	f240 31e8 	movw	r1, #1000	; 0x3e8
   17ba8:	9012      	str	r0, [sp, #72]	; 0x48
   17baa:	f648 1005 	movw	r0, #35077	; 0x8905
   17bae:	f2c0 0102 	movt	r1, #2
   17bb2:	f2c0 0001 	movt	r0, #1
   17bb6:	9011      	str	r0, [sp, #68]	; 0x44
   17bb8:	a808      	add	r0, sp, #32
   17bba:	9010      	str	r0, [sp, #64]	; 0x40
   17bbc:	a80a      	add	r0, sp, #40	; 0x28
   17bbe:	f7ff f817 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17bc2:	defe      	udf	#254	; 0xfe
   17bc4:	429a      	cmp	r2, r3
   17bc6:	f200 80f1 	bhi.w	17dac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   17bca:	2a00      	cmp	r2, #0
   17bcc:	bf18      	it	ne
   17bce:	4291      	cmpne	r1, r2
   17bd0:	d109      	bne.n	17be6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   17bd2:	461a      	mov	r2, r3
   17bd4:	2a00      	cmp	r2, #0
   17bd6:	9206      	str	r2, [sp, #24]
   17bd8:	bf18      	it	ne
   17bda:	428a      	cmpne	r2, r1
   17bdc:	d10e      	bne.n	17bfc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   17bde:	4613      	mov	r3, r2
   17be0:	428b      	cmp	r3, r1
   17be2:	d047      	beq.n	17c74 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17be4:	e052      	b.n	17c8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17be6:	d9f5      	bls.n	17bd4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   17be8:	5686      	ldrsb	r6, [r0, r2]
   17bea:	f116 0f40 	cmn.w	r6, #64	; 0x40
   17bee:	bfa8      	it	ge
   17bf0:	461a      	movge	r2, r3
   17bf2:	2a00      	cmp	r2, #0
   17bf4:	9206      	str	r2, [sp, #24]
   17bf6:	bf18      	it	ne
   17bf8:	428a      	cmpne	r2, r1
   17bfa:	d0f0      	beq.n	17bde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17bfc:	f1a0 0c01 	sub.w	ip, r0, #1
   17c00:	f101 0e02 	add.w	lr, r1, #2
   17c04:	1ccc      	adds	r4, r1, #3
   17c06:	1c4d      	adds	r5, r1, #1
   17c08:	1d0e      	adds	r6, r1, #4
   17c0a:	428a      	cmp	r2, r1
   17c0c:	d206      	bcs.n	17c1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   17c0e:	eb0c 0302 	add.w	r3, ip, r2
   17c12:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17c16:	f113 0f41 	cmn.w	r3, #65	; 0x41
   17c1a:	dce0      	bgt.n	17bde <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17c1c:	1e53      	subs	r3, r2, #1
   17c1e:	bf18      	it	ne
   17c20:	4295      	cmpne	r5, r2
   17c22:	d025      	beq.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c24:	428b      	cmp	r3, r1
   17c26:	d204      	bcs.n	17c32 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   17c28:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   17c2c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17c30:	dc1e      	bgt.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c32:	1e93      	subs	r3, r2, #2
   17c34:	bf18      	it	ne
   17c36:	4596      	cmpne	lr, r2
   17c38:	d01a      	beq.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c3a:	428b      	cmp	r3, r1
   17c3c:	d206      	bcs.n	17c4c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   17c3e:	eb0c 0702 	add.w	r7, ip, r2
   17c42:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   17c46:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17c4a:	dc11      	bgt.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c4c:	1ed3      	subs	r3, r2, #3
   17c4e:	bf18      	it	ne
   17c50:	4294      	cmpne	r4, r2
   17c52:	d00d      	beq.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c54:	428b      	cmp	r3, r1
   17c56:	d206      	bcs.n	17c66 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   17c58:	eb0c 0702 	add.w	r7, ip, r2
   17c5c:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   17c60:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17c64:	dc04      	bgt.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c66:	1f13      	subs	r3, r2, #4
   17c68:	d002      	beq.n	17c70 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17c6a:	4296      	cmp	r6, r2
   17c6c:	461a      	mov	r2, r3
   17c6e:	d1cc      	bne.n	17c0a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   17c70:	428b      	cmp	r3, r1
   17c72:	d10b      	bne.n	17c8c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17c74:	f240 0090 	movw	r0, #144	; 0x90
   17c78:	f240 4238 	movw	r2, #1080	; 0x438
   17c7c:	f2c0 0002 	movt	r0, #2
   17c80:	f2c0 0202 	movt	r2, #2
   17c84:	212b      	movs	r1, #43	; 0x2b
   17c86:	f7fe ff7d 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17c8a:	defe      	udf	#254	; 0xfe
   17c8c:	18c5      	adds	r5, r0, r3
   17c8e:	462e      	mov	r6, r5
   17c90:	f916 4b01 	ldrsb.w	r4, [r6], #1
   17c94:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17c98:	b2e2      	uxtb	r2, r4
   17c9a:	dd02      	ble.n	17ca2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   17c9c:	9207      	str	r2, [sp, #28]
   17c9e:	2101      	movs	r1, #1
   17ca0:	e04d      	b.n	17d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17ca2:	4408      	add	r0, r1
   17ca4:	4286      	cmp	r6, r0
   17ca6:	d10b      	bne.n	17cc0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   17ca8:	2500      	movs	r5, #0
   17caa:	4606      	mov	r6, r0
   17cac:	f002 011f 	and.w	r1, r2, #31
   17cb0:	2adf      	cmp	r2, #223	; 0xdf
   17cb2:	d80d      	bhi.n	17cd0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   17cb4:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   17cb8:	2880      	cmp	r0, #128	; 0x80
   17cba:	9007      	str	r0, [sp, #28]
   17cbc:	d333      	bcc.n	17d26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17cbe:	e034      	b.n	17d2a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17cc0:	7869      	ldrb	r1, [r5, #1]
   17cc2:	1cae      	adds	r6, r5, #2
   17cc4:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   17cc8:	f002 011f 	and.w	r1, r2, #31
   17ccc:	2adf      	cmp	r2, #223	; 0xdf
   17cce:	d9f1      	bls.n	17cb4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   17cd0:	4286      	cmp	r6, r0
   17cd2:	d10d      	bne.n	17cf0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   17cd4:	2400      	movs	r4, #0
   17cd6:	4606      	mov	r6, r0
   17cd8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17cdc:	2af0      	cmp	r2, #240	; 0xf0
   17cde:	d20f      	bcs.n	17d00 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   17ce0:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   17ce4:	2880      	cmp	r0, #128	; 0x80
   17ce6:	9007      	str	r0, [sp, #28]
   17ce8:	d31d      	bcc.n	17d26 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17cea:	e01e      	b.n	17d2a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17cec:	2500      	movs	r5, #0
   17cee:	e728      	b.n	17b42 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17cf0:	f816 4b01 	ldrb.w	r4, [r6], #1
   17cf4:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17cf8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17cfc:	2af0      	cmp	r2, #240	; 0xf0
   17cfe:	d3ef      	bcc.n	17ce0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   17d00:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   17d04:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   17d08:	4286      	cmp	r6, r0
   17d0a:	bf1a      	itte	ne
   17d0c:	7830      	ldrbne	r0, [r6, #0]
   17d0e:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   17d12:	2000      	moveq	r0, #0
   17d14:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   17d18:	4408      	add	r0, r1
   17d1a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17d1e:	d0a9      	beq.n	17c74 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17d20:	2880      	cmp	r0, #128	; 0x80
   17d22:	9007      	str	r0, [sp, #28]
   17d24:	d201      	bcs.n	17d2a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17d26:	2101      	movs	r1, #1
   17d28:	e009      	b.n	17d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17d2a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17d2e:	d201      	bcs.n	17d34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   17d30:	2102      	movs	r1, #2
   17d32:	e004      	b.n	17d3e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17d34:	2104      	movs	r1, #4
   17d36:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17d3a:	bf38      	it	cc
   17d3c:	2103      	movcc	r1, #3
   17d3e:	4419      	add	r1, r3
   17d40:	aa10      	add	r2, sp, #64	; 0x40
   17d42:	a808      	add	r0, sp, #32
   17d44:	e9cd 3108 	strd	r3, r1, [sp, #32]
   17d48:	2105      	movs	r1, #5
   17d4a:	910f      	str	r1, [sp, #60]	; 0x3c
   17d4c:	920e      	str	r2, [sp, #56]	; 0x38
   17d4e:	2200      	movs	r2, #0
   17d50:	920d      	str	r2, [sp, #52]	; 0x34
   17d52:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   17d56:	f240 4174 	movw	r1, #1140	; 0x474
   17d5a:	f2c0 0102 	movt	r1, #2
   17d5e:	aa04      	add	r2, sp, #16
   17d60:	910a      	str	r1, [sp, #40]	; 0x28
   17d62:	f648 11f3 	movw	r1, #35315	; 0x89f3
   17d66:	f2c0 0101 	movt	r1, #1
   17d6a:	9119      	str	r1, [sp, #100]	; 0x64
   17d6c:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   17d70:	a902      	add	r1, sp, #8
   17d72:	9116      	str	r1, [sp, #88]	; 0x58
   17d74:	f646 117b 	movw	r1, #27003	; 0x697b
   17d78:	f2c0 0101 	movt	r1, #1
   17d7c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   17d80:	f647 00fd 	movw	r0, #30973	; 0x78fd
   17d84:	f2c0 0001 	movt	r0, #1
   17d88:	f240 419c 	movw	r1, #1180	; 0x49c
   17d8c:	9013      	str	r0, [sp, #76]	; 0x4c
   17d8e:	a807      	add	r0, sp, #28
   17d90:	9012      	str	r0, [sp, #72]	; 0x48
   17d92:	f648 1005 	movw	r0, #35077	; 0x8905
   17d96:	f2c0 0001 	movt	r0, #1
   17d9a:	f2c0 0102 	movt	r1, #2
   17d9e:	9011      	str	r0, [sp, #68]	; 0x44
   17da0:	a806      	add	r0, sp, #24
   17da2:	9010      	str	r0, [sp, #64]	; 0x40
   17da4:	a80a      	add	r0, sp, #40	; 0x28
   17da6:	f7fe ff23 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17daa:	defe      	udf	#254	; 0xfe
   17dac:	2004      	movs	r0, #4
   17dae:	a910      	add	r1, sp, #64	; 0x40
   17db0:	900f      	str	r0, [sp, #60]	; 0x3c
   17db2:	910e      	str	r1, [sp, #56]	; 0x38
   17db4:	2100      	movs	r1, #0
   17db6:	910d      	str	r1, [sp, #52]	; 0x34
   17db8:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17dbc:	f240 4008 	movw	r0, #1032	; 0x408
   17dc0:	f2c0 0002 	movt	r0, #2
   17dc4:	a904      	add	r1, sp, #16
   17dc6:	900a      	str	r0, [sp, #40]	; 0x28
   17dc8:	f648 10f3 	movw	r0, #35315	; 0x89f3
   17dcc:	f2c0 0001 	movt	r0, #1
   17dd0:	9017      	str	r0, [sp, #92]	; 0x5c
   17dd2:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   17dd6:	a802      	add	r0, sp, #8
   17dd8:	9014      	str	r0, [sp, #80]	; 0x50
   17dda:	f648 1005 	movw	r0, #35077	; 0x8905
   17dde:	a901      	add	r1, sp, #4
   17de0:	f2c0 0001 	movt	r0, #1
   17de4:	9013      	str	r0, [sp, #76]	; 0x4c
   17de6:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   17dea:	f240 4128 	movw	r1, #1064	; 0x428
   17dee:	4668      	mov	r0, sp
   17df0:	f2c0 0102 	movt	r1, #2
   17df4:	9010      	str	r0, [sp, #64]	; 0x40
   17df6:	a80a      	add	r0, sp, #40	; 0x28
   17df8:	f7fe fefa 	bl	16bf0 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17dfc:	defe      	udf	#254	; 0xfe

00017dfe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   17dfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17e02:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17e06:	d270      	bcs.n	17eea <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17e08:	f240 4ebc 	movw	lr, #1212	; 0x4bc
   17e0c:	f240 580e 	movw	r8, #1294	; 0x50e
   17e10:	fa1f f980 	uxth.w	r9, r0
   17e14:	f2c0 0e02 	movt	lr, #2
   17e18:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17e1c:	f04f 0a00 	mov.w	sl, #0
   17e20:	f2c0 0802 	movt	r8, #2
   17e24:	4675      	mov	r5, lr
   17e26:	786e      	ldrb	r6, [r5, #1]
   17e28:	4652      	mov	r2, sl
   17e2a:	782b      	ldrb	r3, [r5, #0]
   17e2c:	3502      	adds	r5, #2
   17e2e:	44b2      	add	sl, r6
   17e30:	4563      	cmp	r3, ip
   17e32:	d129      	bne.n	17e88 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17e34:	4592      	cmp	sl, r2
   17e36:	f0c0 8112 	bcc.w	1805e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17e3a:	ea4f 035a 	mov.w	r3, sl, lsr #1
   17e3e:	2b92      	cmp	r3, #146	; 0x92
   17e40:	f200 8112 	bhi.w	18068 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17e44:	eb08 0302 	add.w	r3, r8, r2
   17e48:	199a      	adds	r2, r3, r6
   17e4a:	b31e      	cbz	r6, 17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17e4c:	461f      	mov	r7, r3
   17e4e:	b2c4      	uxtb	r4, r0
   17e50:	f817 1b01 	ldrb.w	r1, [r7], #1
   17e54:	42a1      	cmp	r1, r4
   17e56:	f000 80b6 	beq.w	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e5a:	4297      	cmp	r7, r2
   17e5c:	d01a      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17e5e:	7859      	ldrb	r1, [r3, #1]
   17e60:	42a1      	cmp	r1, r4
   17e62:	f000 80b0 	beq.w	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e66:	1c99      	adds	r1, r3, #2
   17e68:	4291      	cmp	r1, r2
   17e6a:	d013      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17e6c:	7899      	ldrb	r1, [r3, #2]
   17e6e:	42a1      	cmp	r1, r4
   17e70:	f000 80a9 	beq.w	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e74:	1cd9      	adds	r1, r3, #3
   17e76:	4291      	cmp	r1, r2
   17e78:	d00c      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17e7a:	1d19      	adds	r1, r3, #4
   17e7c:	78db      	ldrb	r3, [r3, #3]
   17e7e:	3e04      	subs	r6, #4
   17e80:	42a3      	cmp	r3, r4
   17e82:	460b      	mov	r3, r1
   17e84:	d1e1      	bne.n	17e4a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17e86:	e09e      	b.n	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e88:	d808      	bhi.n	17e9c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17e8a:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   17e8e:	4295      	cmp	r5, r2
   17e90:	d1c9      	bne.n	17e26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17e92:	e003      	b.n	17e9c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17e94:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17e98:	428d      	cmp	r5, r1
   17e9a:	d1c4      	bne.n	17e26 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17e9c:	f240 6533 	movw	r5, #1587	; 0x633
   17ea0:	2101      	movs	r1, #1
   17ea2:	f2c0 0502 	movt	r5, #2
   17ea6:	4628      	mov	r0, r5
   17ea8:	4602      	mov	r2, r0
   17eaa:	f812 7b01 	ldrb.w	r7, [r2], #1
   17eae:	b27e      	sxtb	r6, r7
   17eb0:	2e00      	cmp	r6, #0
   17eb2:	d404      	bmi.n	17ebe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   17eb4:	4610      	mov	r0, r2
   17eb6:	ebb9 0907 	subs.w	r9, r9, r7
   17eba:	d50f      	bpl.n	17edc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   17ebc:	e0bd      	b.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17ebe:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   17ec2:	429a      	cmp	r2, r3
   17ec4:	f000 80db 	beq.w	1807e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17ec8:	7842      	ldrb	r2, [r0, #1]
   17eca:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17ece:	3002      	adds	r0, #2
   17ed0:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17ed4:	ebb9 0907 	subs.w	r9, r9, r7
   17ed8:	f100 80af 	bmi.w	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17edc:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   17ee0:	f081 0101 	eor.w	r1, r1, #1
   17ee4:	4290      	cmp	r0, r2
   17ee6:	d1df      	bne.n	17ea8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   17ee8:	e0a7      	b.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17eea:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   17eee:	d26f      	bcs.n	17fd0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   17ef0:	f240 7e6d 	movw	lr, #1901	; 0x76d
   17ef4:	f240 78b3 	movw	r8, #1971	; 0x7b3
   17ef8:	fa1f f980 	uxth.w	r9, r0
   17efc:	f2c0 0e02 	movt	lr, #2
   17f00:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17f04:	f04f 0a00 	mov.w	sl, #0
   17f08:	f2c0 0802 	movt	r8, #2
   17f0c:	4675      	mov	r5, lr
   17f0e:	786e      	ldrb	r6, [r5, #1]
   17f10:	4652      	mov	r2, sl
   17f12:	782b      	ldrb	r3, [r5, #0]
   17f14:	3502      	adds	r5, #2
   17f16:	44b2      	add	sl, r6
   17f18:	4563      	cmp	r3, ip
   17f1a:	d125      	bne.n	17f68 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17f1c:	4592      	cmp	sl, r2
   17f1e:	f0c0 809e 	bcc.w	1805e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17f22:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17f26:	f200 80a5 	bhi.w	18074 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17f2a:	eb08 0302 	add.w	r3, r8, r2
   17f2e:	199a      	adds	r2, r3, r6
   17f30:	b306      	cbz	r6, 17f74 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17f32:	461f      	mov	r7, r3
   17f34:	b2c4      	uxtb	r4, r0
   17f36:	f817 1b01 	ldrb.w	r1, [r7], #1
   17f3a:	42a1      	cmp	r1, r4
   17f3c:	d043      	beq.n	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17f3e:	4297      	cmp	r7, r2
   17f40:	d018      	beq.n	17f74 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17f42:	7859      	ldrb	r1, [r3, #1]
   17f44:	42a1      	cmp	r1, r4
   17f46:	d03e      	beq.n	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17f48:	1c99      	adds	r1, r3, #2
   17f4a:	4291      	cmp	r1, r2
   17f4c:	d012      	beq.n	17f74 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17f4e:	7899      	ldrb	r1, [r3, #2]
   17f50:	42a1      	cmp	r1, r4
   17f52:	d038      	beq.n	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17f54:	1cd9      	adds	r1, r3, #3
   17f56:	4291      	cmp	r1, r2
   17f58:	d00c      	beq.n	17f74 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17f5a:	1d19      	adds	r1, r3, #4
   17f5c:	78db      	ldrb	r3, [r3, #3]
   17f5e:	3e04      	subs	r6, #4
   17f60:	42a3      	cmp	r3, r4
   17f62:	460b      	mov	r3, r1
   17f64:	d1e4      	bne.n	17f30 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17f66:	e02e      	b.n	17fc6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17f68:	d808      	bhi.n	17f7c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17f6a:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   17f6e:	4295      	cmp	r5, r2
   17f70:	d1cd      	bne.n	17f0e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17f72:	e003      	b.n	17f7c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17f74:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17f78:	428d      	cmp	r5, r1
   17f7a:	d1c8      	bne.n	17f0e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17f7c:	f640 0559 	movw	r5, #2137	; 0x859
   17f80:	2101      	movs	r1, #1
   17f82:	f2c0 0502 	movt	r5, #2
   17f86:	4628      	mov	r0, r5
   17f88:	4602      	mov	r2, r0
   17f8a:	f812 7b01 	ldrb.w	r7, [r2], #1
   17f8e:	b27e      	sxtb	r6, r7
   17f90:	2e00      	cmp	r6, #0
   17f92:	d40a      	bmi.n	17faa <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17f94:	4610      	mov	r0, r2
   17f96:	ebb9 0907 	subs.w	r9, r9, r7
   17f9a:	d44e      	bmi.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17f9c:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   17fa0:	f081 0101 	eor.w	r1, r1, #1
   17fa4:	4290      	cmp	r0, r2
   17fa6:	d1ef      	bne.n	17f88 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   17fa8:	e047      	b.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17faa:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   17fae:	429a      	cmp	r2, r3
   17fb0:	d065      	beq.n	1807e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17fb2:	7842      	ldrb	r2, [r0, #1]
   17fb4:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17fb8:	3002      	adds	r0, #2
   17fba:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17fbe:	ebb9 0907 	subs.w	r9, r9, r7
   17fc2:	d5eb      	bpl.n	17f9c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   17fc4:	e039      	b.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17fc6:	2100      	movs	r1, #0
   17fc8:	f001 0001 	and.w	r0, r1, #1
   17fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17fd0:	f240 51e2 	movw	r1, #1506	; 0x5e2
   17fd4:	f240 63e2 	movw	r3, #1762	; 0x6e2
   17fd8:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   17fdc:	1842      	adds	r2, r0, r1
   17fde:	f2c0 030b 	movt	r3, #11
   17fe2:	2100      	movs	r1, #0
   17fe4:	429a      	cmp	r2, r3
   17fe6:	d328      	bcc.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17fe8:	f241 421f 	movw	r2, #5151	; 0x141f
   17fec:	f640 431f 	movw	r3, #3103	; 0xc1f
   17ff0:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17ff4:	4402      	add	r2, r0
   17ff6:	429a      	cmp	r2, r3
   17ff8:	bf21      	itttt	cs
   17ffa:	f243 125e 	movwcs	r2, #12638	; 0x315e
   17ffe:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18002:	4402      	addcs	r2, r0
   18004:	2a0e      	cmpcs	r2, #14
   18006:	d318      	bcc.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   18008:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   1800c:	f64b 031e 	movw	r3, #47134	; 0xb81e
   18010:	f2c0 021f 	movt	r2, #31
   18014:	f2c0 0302 	movt	r3, #2
   18018:	4002      	ands	r2, r0
   1801a:	429a      	cmp	r2, r3
   1801c:	d00d      	beq.n	1803a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1801e:	f645 1229 	movw	r2, #22825	; 0x5929
   18022:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   18026:	4402      	add	r2, r0
   18028:	2a29      	cmp	r2, #41	; 0x29
   1802a:	bf21      	itttt	cs
   1802c:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   18030:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   18034:	4402      	addcs	r2, r0
   18036:	2a0b      	cmpcs	r2, #11
   18038:	d203      	bcs.n	18042 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   1803a:	f001 0001 	and.w	r0, r1, #1
   1803e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   18042:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   18046:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   1804a:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   1804e:	2000      	movs	r0, #0
   18050:	f2c0 0202 	movt	r2, #2
   18054:	4291      	cmp	r1, r2
   18056:	bf88      	it	hi
   18058:	2001      	movhi	r0, #1
   1805a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1805e:	4610      	mov	r0, r2
   18060:	4651      	mov	r1, sl
   18062:	f7ff fd04 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18066:	defe      	udf	#254	; 0xfe
   18068:	4650      	mov	r0, sl
   1806a:	f240 1125 	movw	r1, #293	; 0x125
   1806e:	f7ff fcdc 	bl	17a2a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   18072:	defe      	udf	#254	; 0xfe
   18074:	4650      	mov	r0, sl
   18076:	21a6      	movs	r1, #166	; 0xa6
   18078:	f7ff fcd7 	bl	17a2a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   1807c:	defe      	udf	#254	; 0xfe
   1807e:	f240 0090 	movw	r0, #144	; 0x90
   18082:	f240 42ac 	movw	r2, #1196	; 0x4ac
   18086:	f2c0 0002 	movt	r0, #2
   1808a:	f2c0 0202 	movt	r2, #2
   1808e:	212b      	movs	r1, #43	; 0x2b
   18090:	f7fe fd78 	bl	16b84 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   18094:	defe      	udf	#254	; 0xfe

00018096 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   18096:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1809a:	b0a3      	sub	sp, #140	; 0x8c
   1809c:	468c      	mov	ip, r1
   1809e:	6809      	ldr	r1, [r1, #0]
   180a0:	06ca      	lsls	r2, r1, #27
   180a2:	d44a      	bmi.n	1813a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   180a4:	6804      	ldr	r4, [r0, #0]
   180a6:	0688      	lsls	r0, r1, #26
   180a8:	f100 8089 	bmi.w	181be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   180ac:	f248 5e1f 	movw	lr, #34079	; 0x851f
   180b0:	f240 122f 	movw	r2, #303	; 0x12f
   180b4:	f242 7810 	movw	r8, #10000	; 0x2710
   180b8:	4544      	cmp	r4, r8
   180ba:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   180be:	f2c0 0202 	movt	r2, #2
   180c2:	f0c0 80e3 	bcc.w	1828c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   180c6:	f241 7959 	movw	r9, #5977	; 0x1759
   180ca:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   180ce:	f10d 0b0c 	add.w	fp, sp, #12
   180d2:	2300      	movs	r3, #0
   180d4:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   180d8:	f04f 0a64 	mov.w	sl, #100	; 0x64
   180dc:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   180e0:	fba4 0109 	umull	r0, r1, r4, r9
   180e4:	42bc      	cmp	r4, r7
   180e6:	ea4f 3051 	mov.w	r0, r1, lsr #13
   180ea:	fb00 4118 	mls	r1, r0, r8, r4
   180ee:	4604      	mov	r4, r0
   180f0:	b28d      	uxth	r5, r1
   180f2:	fba5 560e 	umull	r5, r6, r5, lr
   180f6:	ea4f 1556 	mov.w	r5, r6, lsr #5
   180fa:	eb0b 0603 	add.w	r6, fp, r3
   180fe:	fb05 111a 	mls	r1, r5, sl, r1
   18102:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18106:	f1a3 0304 	sub.w	r3, r3, #4
   1810a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1810e:	b289      	uxth	r1, r1
   18110:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18114:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18118:	d8e2      	bhi.n	180e0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   1811a:	f103 0127 	add.w	r1, r3, #39	; 0x27
   1811e:	4604      	mov	r4, r0
   18120:	2c63      	cmp	r4, #99	; 0x63
   18122:	f300 80b7 	bgt.w	18294 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18126:	4623      	mov	r3, r4
   18128:	2b0a      	cmp	r3, #10
   1812a:	f2c0 80c3 	blt.w	182b4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   1812e:	1e88      	subs	r0, r1, #2
   18130:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18134:	aa03      	add	r2, sp, #12
   18136:	5211      	strh	r1, [r2, r0]
   18138:	e0c1      	b.n	182be <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   1813a:	6800      	ldr	r0, [r0, #0]
   1813c:	f10d 0e0c 	add.w	lr, sp, #12
   18140:	2381      	movs	r3, #129	; 0x81
   18142:	2100      	movs	r1, #0
   18144:	f000 020f 	and.w	r2, r0, #15
   18148:	f102 0457 	add.w	r4, r2, #87	; 0x57
   1814c:	2a0a      	cmp	r2, #10
   1814e:	bf38      	it	cc
   18150:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18154:	eb0e 0203 	add.w	r2, lr, r3
   18158:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1815c:	f802 4c02 	strb.w	r4, [r2, #-2]
   18160:	d071      	beq.n	18246 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18162:	0904      	lsrs	r4, r0, #4
   18164:	f004 040f 	and.w	r4, r4, #15
   18168:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1816c:	2c0a      	cmp	r4, #10
   1816e:	bf38      	it	cc
   18170:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18174:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18178:	f802 5c03 	strb.w	r5, [r2, #-3]
   1817c:	d079      	beq.n	18272 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1817e:	0a04      	lsrs	r4, r0, #8
   18180:	f004 040f 	and.w	r4, r4, #15
   18184:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18188:	2c0a      	cmp	r4, #10
   1818a:	bf38      	it	cc
   1818c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18190:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18194:	f802 5c04 	strb.w	r5, [r2, #-4]
   18198:	d073      	beq.n	18282 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1819a:	0b04      	lsrs	r4, r0, #12
   1819c:	3b04      	subs	r3, #4
   1819e:	f004 040f 	and.w	r4, r4, #15
   181a2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   181a6:	2c0a      	cmp	r4, #10
   181a8:	bf38      	it	cc
   181aa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   181ae:	f802 5c05 	strb.w	r5, [r2, #-5]
   181b2:	0c02      	lsrs	r2, r0, #16
   181b4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   181b8:	4610      	mov	r0, r2
   181ba:	d1c3      	bne.n	18144 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   181bc:	e03f      	b.n	1823e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   181be:	f10d 0e0c 	add.w	lr, sp, #12
   181c2:	2381      	movs	r3, #129	; 0x81
   181c4:	2100      	movs	r1, #0
   181c6:	f004 000f 	and.w	r0, r4, #15
   181ca:	eb0e 0203 	add.w	r2, lr, r3
   181ce:	f100 0537 	add.w	r5, r0, #55	; 0x37
   181d2:	280a      	cmp	r0, #10
   181d4:	bf38      	it	cc
   181d6:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   181da:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   181de:	f802 5c02 	strb.w	r5, [r2, #-2]
   181e2:	d030      	beq.n	18246 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   181e4:	0920      	lsrs	r0, r4, #4
   181e6:	f000 000f 	and.w	r0, r0, #15
   181ea:	f100 0537 	add.w	r5, r0, #55	; 0x37
   181ee:	280a      	cmp	r0, #10
   181f0:	bf38      	it	cc
   181f2:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   181f6:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   181fa:	f802 5c03 	strb.w	r5, [r2, #-3]
   181fe:	d038      	beq.n	18272 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18200:	0a20      	lsrs	r0, r4, #8
   18202:	f000 000f 	and.w	r0, r0, #15
   18206:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1820a:	280a      	cmp	r0, #10
   1820c:	bf38      	it	cc
   1820e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18212:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18216:	f802 5c04 	strb.w	r5, [r2, #-4]
   1821a:	d032      	beq.n	18282 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1821c:	0b20      	lsrs	r0, r4, #12
   1821e:	3b04      	subs	r3, #4
   18220:	f000 000f 	and.w	r0, r0, #15
   18224:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18228:	280a      	cmp	r0, #10
   1822a:	bf38      	it	cc
   1822c:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18230:	0c20      	lsrs	r0, r4, #16
   18232:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   18236:	4604      	mov	r4, r0
   18238:	f802 5c05 	strb.w	r5, [r2, #-5]
   1823c:	d1c3      	bne.n	181c6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1823e:	1e58      	subs	r0, r3, #1
   18240:	2881      	cmp	r0, #129	; 0x81
   18242:	d305      	bcc.n	18250 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18244:	e019      	b.n	1827a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18246:	1e59      	subs	r1, r3, #1
   18248:	1e98      	subs	r0, r3, #2
   1824a:	460b      	mov	r3, r1
   1824c:	2881      	cmp	r0, #129	; 0x81
   1824e:	d214      	bcs.n	1827a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18250:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18254:	f240 122d 	movw	r2, #301	; 0x12d
   18258:	4470      	add	r0, lr
   1825a:	f2c0 0202 	movt	r2, #2
   1825e:	e9cd 0100 	strd	r0, r1, [sp]
   18262:	4660      	mov	r0, ip
   18264:	2101      	movs	r1, #1
   18266:	2302      	movs	r3, #2
   18268:	f7ff f864 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1826c:	b023      	add	sp, #140	; 0x8c
   1826e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18272:	1ed8      	subs	r0, r3, #3
   18274:	3b02      	subs	r3, #2
   18276:	2881      	cmp	r0, #129	; 0x81
   18278:	d3ea      	bcc.n	18250 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1827a:	2180      	movs	r1, #128	; 0x80
   1827c:	f7ff fbf7 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18280:	defe      	udf	#254	; 0xfe
   18282:	1f18      	subs	r0, r3, #4
   18284:	3b03      	subs	r3, #3
   18286:	2881      	cmp	r0, #129	; 0x81
   18288:	d3e2      	bcc.n	18250 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1828a:	e7f6      	b.n	1827a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1828c:	2127      	movs	r1, #39	; 0x27
   1828e:	2c63      	cmp	r4, #99	; 0x63
   18290:	f77f af49 	ble.w	18126 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   18294:	b2a0      	uxth	r0, r4
   18296:	3902      	subs	r1, #2
   18298:	fba0 030e 	umull	r0, r3, r0, lr
   1829c:	af03      	add	r7, sp, #12
   1829e:	2064      	movs	r0, #100	; 0x64
   182a0:	095b      	lsrs	r3, r3, #5
   182a2:	fb03 4010 	mls	r0, r3, r0, r4
   182a6:	b280      	uxth	r0, r0
   182a8:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   182ac:	5278      	strh	r0, [r7, r1]
   182ae:	2b0a      	cmp	r3, #10
   182b0:	f6bf af3d 	bge.w	1812e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   182b4:	1e48      	subs	r0, r1, #1
   182b6:	aa03      	add	r2, sp, #12
   182b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   182bc:	5411      	strb	r1, [r2, r0]
   182be:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   182c2:	aa03      	add	r2, sp, #12
   182c4:	4410      	add	r0, r2
   182c6:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   182ca:	e9cd 0100 	strd	r0, r1, [sp]
   182ce:	f2c0 0201 	movt	r2, #1
   182d2:	4660      	mov	r0, ip
   182d4:	2101      	movs	r1, #1
   182d6:	2300      	movs	r3, #0
   182d8:	f7ff f82c 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   182dc:	b023      	add	sp, #140	; 0x8c
   182de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000182e2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   182e2:	b580      	push	{r7, lr}
   182e4:	b0a2      	sub	sp, #136	; 0x88
   182e6:	7802      	ldrb	r2, [r0, #0]
   182e8:	468c      	mov	ip, r1
   182ea:	f002 030f 	and.w	r3, r2, #15
   182ee:	f103 0057 	add.w	r0, r3, #87	; 0x57
   182f2:	2b0a      	cmp	r3, #10
   182f4:	bf38      	it	cc
   182f6:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   182fa:	2300      	movs	r3, #0
   182fc:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18300:	d00b      	beq.n	1831a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   18302:	0913      	lsrs	r3, r2, #4
   18304:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18308:	2aa0      	cmp	r2, #160	; 0xa0
   1830a:	bf38      	it	cc
   1830c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18310:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18314:	227e      	movs	r2, #126	; 0x7e
   18316:	2302      	movs	r3, #2
   18318:	e001      	b.n	1831e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1831a:	227f      	movs	r2, #127	; 0x7f
   1831c:	2301      	movs	r3, #1
   1831e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18322:	a802      	add	r0, sp, #8
   18324:	4410      	add	r0, r2
   18326:	f240 122d 	movw	r2, #301	; 0x12d
   1832a:	e9cd 0300 	strd	r0, r3, [sp]
   1832e:	f2c0 0202 	movt	r2, #2
   18332:	4660      	mov	r0, ip
   18334:	2101      	movs	r1, #1
   18336:	2302      	movs	r3, #2
   18338:	f7fe fffc 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1833c:	b022      	add	sp, #136	; 0x88
   1833e:	bd80      	pop	{r7, pc}

00018340 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   18340:	b580      	push	{r7, lr}
   18342:	b0a2      	sub	sp, #136	; 0x88
   18344:	7802      	ldrb	r2, [r0, #0]
   18346:	468c      	mov	ip, r1
   18348:	f002 030f 	and.w	r3, r2, #15
   1834c:	f103 0037 	add.w	r0, r3, #55	; 0x37
   18350:	2b0a      	cmp	r3, #10
   18352:	bf38      	it	cc
   18354:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18358:	2300      	movs	r3, #0
   1835a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1835e:	d00b      	beq.n	18378 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   18360:	0913      	lsrs	r3, r2, #4
   18362:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18366:	2aa0      	cmp	r2, #160	; 0xa0
   18368:	bf38      	it	cc
   1836a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1836e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18372:	227e      	movs	r2, #126	; 0x7e
   18374:	2302      	movs	r3, #2
   18376:	e001      	b.n	1837c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   18378:	227f      	movs	r2, #127	; 0x7f
   1837a:	2301      	movs	r3, #1
   1837c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18380:	a802      	add	r0, sp, #8
   18382:	4410      	add	r0, r2
   18384:	f240 122d 	movw	r2, #301	; 0x12d
   18388:	e9cd 0300 	strd	r0, r3, [sp]
   1838c:	f2c0 0202 	movt	r2, #2
   18390:	4660      	mov	r0, ip
   18392:	2101      	movs	r1, #1
   18394:	2302      	movs	r3, #2
   18396:	f7fe ffcd 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1839a:	b022      	add	sp, #136	; 0x88
   1839c:	bd80      	pop	{r7, pc}

0001839e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   1839e:	b580      	push	{r7, lr}
   183a0:	b0a2      	sub	sp, #136	; 0x88
   183a2:	8800      	ldrh	r0, [r0, #0]
   183a4:	468c      	mov	ip, r1
   183a6:	f000 020f 	and.w	r2, r0, #15
   183aa:	f102 0357 	add.w	r3, r2, #87	; 0x57
   183ae:	2a0a      	cmp	r2, #10
   183b0:	bf38      	it	cc
   183b2:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   183b6:	2200      	movs	r2, #0
   183b8:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   183bc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   183c0:	d02a      	beq.n	18418 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   183c2:	0903      	lsrs	r3, r0, #4
   183c4:	f003 030f 	and.w	r3, r3, #15
   183c8:	f103 0157 	add.w	r1, r3, #87	; 0x57
   183cc:	2b0a      	cmp	r3, #10
   183ce:	bf38      	it	cc
   183d0:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   183d4:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   183d8:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   183dc:	d031      	beq.n	18442 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   183de:	0a01      	lsrs	r1, r0, #8
   183e0:	f001 010f 	and.w	r1, r1, #15
   183e4:	f101 0257 	add.w	r2, r1, #87	; 0x57
   183e8:	290a      	cmp	r1, #10
   183ea:	bf38      	it	cc
   183ec:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   183f0:	2100      	movs	r1, #0
   183f2:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   183f6:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   183fa:	d027      	beq.n	1844c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   183fc:	0b00      	lsrs	r0, r0, #12
   183fe:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18402:	280a      	cmp	r0, #10
   18404:	bf38      	it	cc
   18406:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1840a:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1840e:	227d      	movs	r2, #125	; 0x7d
   18410:	207c      	movs	r0, #124	; 0x7c
   18412:	2881      	cmp	r0, #129	; 0x81
   18414:	d304      	bcc.n	18420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18416:	e01d      	b.n	18454 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18418:	2280      	movs	r2, #128	; 0x80
   1841a:	207f      	movs	r0, #127	; 0x7f
   1841c:	2881      	cmp	r0, #129	; 0x81
   1841e:	d219      	bcs.n	18454 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18420:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18424:	ab02      	add	r3, sp, #8
   18426:	4418      	add	r0, r3
   18428:	2101      	movs	r1, #1
   1842a:	e9cd 0200 	strd	r0, r2, [sp]
   1842e:	f240 122d 	movw	r2, #301	; 0x12d
   18432:	f2c0 0202 	movt	r2, #2
   18436:	4660      	mov	r0, ip
   18438:	2302      	movs	r3, #2
   1843a:	f7fe ff7b 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1843e:	b022      	add	sp, #136	; 0x88
   18440:	bd80      	pop	{r7, pc}
   18442:	207e      	movs	r0, #126	; 0x7e
   18444:	227f      	movs	r2, #127	; 0x7f
   18446:	2881      	cmp	r0, #129	; 0x81
   18448:	d3ea      	bcc.n	18420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1844a:	e003      	b.n	18454 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1844c:	207d      	movs	r0, #125	; 0x7d
   1844e:	227e      	movs	r2, #126	; 0x7e
   18450:	2881      	cmp	r0, #129	; 0x81
   18452:	d3e5      	bcc.n	18420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18454:	2180      	movs	r1, #128	; 0x80
   18456:	f7ff fb0a 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1845a:	defe      	udf	#254	; 0xfe

0001845c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   1845c:	b580      	push	{r7, lr}
   1845e:	b0a2      	sub	sp, #136	; 0x88
   18460:	8800      	ldrh	r0, [r0, #0]
   18462:	468c      	mov	ip, r1
   18464:	f000 020f 	and.w	r2, r0, #15
   18468:	f102 0337 	add.w	r3, r2, #55	; 0x37
   1846c:	2a0a      	cmp	r2, #10
   1846e:	bf38      	it	cc
   18470:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18474:	2200      	movs	r2, #0
   18476:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   1847a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1847e:	d02a      	beq.n	184d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   18480:	0903      	lsrs	r3, r0, #4
   18482:	f003 030f 	and.w	r3, r3, #15
   18486:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1848a:	2b0a      	cmp	r3, #10
   1848c:	bf38      	it	cc
   1848e:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18492:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   18496:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1849a:	d031      	beq.n	18500 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   1849c:	0a01      	lsrs	r1, r0, #8
   1849e:	f001 010f 	and.w	r1, r1, #15
   184a2:	f101 0237 	add.w	r2, r1, #55	; 0x37
   184a6:	290a      	cmp	r1, #10
   184a8:	bf38      	it	cc
   184aa:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   184ae:	2100      	movs	r1, #0
   184b0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   184b4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   184b8:	d027      	beq.n	1850a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   184ba:	0b00      	lsrs	r0, r0, #12
   184bc:	f100 0137 	add.w	r1, r0, #55	; 0x37
   184c0:	280a      	cmp	r0, #10
   184c2:	bf38      	it	cc
   184c4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   184c8:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   184cc:	227d      	movs	r2, #125	; 0x7d
   184ce:	207c      	movs	r0, #124	; 0x7c
   184d0:	2881      	cmp	r0, #129	; 0x81
   184d2:	d304      	bcc.n	184de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   184d4:	e01d      	b.n	18512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   184d6:	2280      	movs	r2, #128	; 0x80
   184d8:	207f      	movs	r0, #127	; 0x7f
   184da:	2881      	cmp	r0, #129	; 0x81
   184dc:	d219      	bcs.n	18512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   184de:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   184e2:	ab02      	add	r3, sp, #8
   184e4:	4418      	add	r0, r3
   184e6:	2101      	movs	r1, #1
   184e8:	e9cd 0200 	strd	r0, r2, [sp]
   184ec:	f240 122d 	movw	r2, #301	; 0x12d
   184f0:	f2c0 0202 	movt	r2, #2
   184f4:	4660      	mov	r0, ip
   184f6:	2302      	movs	r3, #2
   184f8:	f7fe ff1c 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   184fc:	b022      	add	sp, #136	; 0x88
   184fe:	bd80      	pop	{r7, pc}
   18500:	207e      	movs	r0, #126	; 0x7e
   18502:	227f      	movs	r2, #127	; 0x7f
   18504:	2881      	cmp	r0, #129	; 0x81
   18506:	d3ea      	bcc.n	184de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18508:	e003      	b.n	18512 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1850a:	207d      	movs	r0, #125	; 0x7d
   1850c:	227e      	movs	r2, #126	; 0x7e
   1850e:	2881      	cmp	r0, #129	; 0x81
   18510:	d3e5      	bcc.n	184de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18512:	2180      	movs	r1, #128	; 0x80
   18514:	f7ff faab 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18518:	defe      	udf	#254	; 0xfe

0001851a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1851a:	b5b0      	push	{r4, r5, r7, lr}
   1851c:	b0a2      	sub	sp, #136	; 0x88
   1851e:	6800      	ldr	r0, [r0, #0]
   18520:	f10d 0e08 	add.w	lr, sp, #8
   18524:	468c      	mov	ip, r1
   18526:	2381      	movs	r3, #129	; 0x81
   18528:	2100      	movs	r1, #0
   1852a:	f000 020f 	and.w	r2, r0, #15
   1852e:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18532:	2a0a      	cmp	r2, #10
   18534:	bf38      	it	cc
   18536:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1853a:	eb0e 0203 	add.w	r2, lr, r3
   1853e:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18542:	f802 4c02 	strb.w	r4, [r2, #-2]
   18546:	d030      	beq.n	185aa <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   18548:	0904      	lsrs	r4, r0, #4
   1854a:	f004 040f 	and.w	r4, r4, #15
   1854e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18552:	2c0a      	cmp	r4, #10
   18554:	bf38      	it	cc
   18556:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1855a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1855e:	f802 5c03 	strb.w	r5, [r2, #-3]
   18562:	d028      	beq.n	185b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   18564:	0a04      	lsrs	r4, r0, #8
   18566:	f004 040f 	and.w	r4, r4, #15
   1856a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1856e:	2c0a      	cmp	r4, #10
   18570:	bf38      	it	cc
   18572:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18576:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1857a:	f802 5c04 	strb.w	r5, [r2, #-4]
   1857e:	d01f      	beq.n	185c0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   18580:	0b04      	lsrs	r4, r0, #12
   18582:	3b04      	subs	r3, #4
   18584:	f004 040f 	and.w	r4, r4, #15
   18588:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1858c:	2c0a      	cmp	r4, #10
   1858e:	bf38      	it	cc
   18590:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18594:	f802 5c05 	strb.w	r5, [r2, #-5]
   18598:	0c02      	lsrs	r2, r0, #16
   1859a:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   1859e:	4610      	mov	r0, r2
   185a0:	d1c3      	bne.n	1852a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   185a2:	1e58      	subs	r0, r3, #1
   185a4:	2881      	cmp	r0, #129	; 0x81
   185a6:	d30f      	bcc.n	185c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   185a8:	e01e      	b.n	185e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   185aa:	1e59      	subs	r1, r3, #1
   185ac:	1e98      	subs	r0, r3, #2
   185ae:	460b      	mov	r3, r1
   185b0:	2881      	cmp	r0, #129	; 0x81
   185b2:	d309      	bcc.n	185c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   185b4:	e018      	b.n	185e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   185b6:	1ed8      	subs	r0, r3, #3
   185b8:	3b02      	subs	r3, #2
   185ba:	2881      	cmp	r0, #129	; 0x81
   185bc:	d304      	bcc.n	185c8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   185be:	e013      	b.n	185e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   185c0:	1f18      	subs	r0, r3, #4
   185c2:	3b03      	subs	r3, #3
   185c4:	2881      	cmp	r0, #129	; 0x81
   185c6:	d20f      	bcs.n	185e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   185c8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   185cc:	f240 122d 	movw	r2, #301	; 0x12d
   185d0:	4470      	add	r0, lr
   185d2:	f2c0 0202 	movt	r2, #2
   185d6:	e9cd 0100 	strd	r0, r1, [sp]
   185da:	4660      	mov	r0, ip
   185dc:	2101      	movs	r1, #1
   185de:	2302      	movs	r3, #2
   185e0:	f7fe fea8 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   185e4:	b022      	add	sp, #136	; 0x88
   185e6:	bdb0      	pop	{r4, r5, r7, pc}
   185e8:	2180      	movs	r1, #128	; 0x80
   185ea:	f7ff fa40 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   185ee:	defe      	udf	#254	; 0xfe

000185f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   185f0:	b5b0      	push	{r4, r5, r7, lr}
   185f2:	b0a2      	sub	sp, #136	; 0x88
   185f4:	6800      	ldr	r0, [r0, #0]
   185f6:	f10d 0e08 	add.w	lr, sp, #8
   185fa:	468c      	mov	ip, r1
   185fc:	2381      	movs	r3, #129	; 0x81
   185fe:	2100      	movs	r1, #0
   18600:	f000 020f 	and.w	r2, r0, #15
   18604:	f102 0437 	add.w	r4, r2, #55	; 0x37
   18608:	2a0a      	cmp	r2, #10
   1860a:	bf38      	it	cc
   1860c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18610:	eb0e 0203 	add.w	r2, lr, r3
   18614:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18618:	f802 4c02 	strb.w	r4, [r2, #-2]
   1861c:	d030      	beq.n	18680 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1861e:	0904      	lsrs	r4, r0, #4
   18620:	f004 040f 	and.w	r4, r4, #15
   18624:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18628:	2c0a      	cmp	r4, #10
   1862a:	bf38      	it	cc
   1862c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18630:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18634:	f802 5c03 	strb.w	r5, [r2, #-3]
   18638:	d028      	beq.n	1868c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1863a:	0a04      	lsrs	r4, r0, #8
   1863c:	f004 040f 	and.w	r4, r4, #15
   18640:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18644:	2c0a      	cmp	r4, #10
   18646:	bf38      	it	cc
   18648:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1864c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18650:	f802 5c04 	strb.w	r5, [r2, #-4]
   18654:	d01f      	beq.n	18696 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   18656:	0b04      	lsrs	r4, r0, #12
   18658:	3b04      	subs	r3, #4
   1865a:	f004 040f 	and.w	r4, r4, #15
   1865e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18662:	2c0a      	cmp	r4, #10
   18664:	bf38      	it	cc
   18666:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1866a:	f802 5c05 	strb.w	r5, [r2, #-5]
   1866e:	0c02      	lsrs	r2, r0, #16
   18670:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18674:	4610      	mov	r0, r2
   18676:	d1c3      	bne.n	18600 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   18678:	1e58      	subs	r0, r3, #1
   1867a:	2881      	cmp	r0, #129	; 0x81
   1867c:	d30f      	bcc.n	1869e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1867e:	e01e      	b.n	186be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18680:	1e59      	subs	r1, r3, #1
   18682:	1e98      	subs	r0, r3, #2
   18684:	460b      	mov	r3, r1
   18686:	2881      	cmp	r0, #129	; 0x81
   18688:	d309      	bcc.n	1869e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1868a:	e018      	b.n	186be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1868c:	1ed8      	subs	r0, r3, #3
   1868e:	3b02      	subs	r3, #2
   18690:	2881      	cmp	r0, #129	; 0x81
   18692:	d304      	bcc.n	1869e <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   18694:	e013      	b.n	186be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   18696:	1f18      	subs	r0, r3, #4
   18698:	3b03      	subs	r3, #3
   1869a:	2881      	cmp	r0, #129	; 0x81
   1869c:	d20f      	bcs.n	186be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   1869e:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   186a2:	f240 122d 	movw	r2, #301	; 0x12d
   186a6:	4470      	add	r0, lr
   186a8:	f2c0 0202 	movt	r2, #2
   186ac:	e9cd 0100 	strd	r0, r1, [sp]
   186b0:	4660      	mov	r0, ip
   186b2:	2101      	movs	r1, #1
   186b4:	2302      	movs	r3, #2
   186b6:	f7fe fe3d 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   186ba:	b022      	add	sp, #136	; 0x88
   186bc:	bdb0      	pop	{r4, r5, r7, pc}
   186be:	2180      	movs	r1, #128	; 0x80
   186c0:	f7ff f9d5 	bl	17a6e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   186c4:	defe      	udf	#254	; 0xfe

000186c6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   186c6:	b580      	push	{r7, lr}
   186c8:	b08c      	sub	sp, #48	; 0x30
   186ca:	7802      	ldrb	r2, [r0, #0]
   186cc:	2a64      	cmp	r2, #100	; 0x64
   186ce:	d314      	bcc.n	186fa <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   186d0:	f248 501f 	movw	r0, #34079	; 0x851f
   186d4:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   186d8:	fba2 0300 	umull	r0, r3, r2, r0
   186dc:	2064      	movs	r0, #100	; 0x64
   186de:	095b      	lsrs	r3, r3, #5
   186e0:	fb03 2010 	mls	r0, r3, r0, r2
   186e4:	f240 122f 	movw	r2, #303	; 0x12f
   186e8:	f2c0 0202 	movt	r2, #2
   186ec:	b2c0      	uxtb	r0, r0
   186ee:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   186f2:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   186f6:	2024      	movs	r0, #36	; 0x24
   186f8:	e003      	b.n	18702 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   186fa:	2a0a      	cmp	r2, #10
   186fc:	d206      	bcs.n	1870c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   186fe:	2026      	movs	r0, #38	; 0x26
   18700:	4613      	mov	r3, r2
   18702:	f103 0230 	add.w	r2, r3, #48	; 0x30
   18706:	ab02      	add	r3, sp, #8
   18708:	541a      	strb	r2, [r3, r0]
   1870a:	e008      	b.n	1871e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1870c:	f240 102f 	movw	r0, #303	; 0x12f
   18710:	f2c0 0002 	movt	r0, #2
   18714:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   18718:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1871c:	2025      	movs	r0, #37	; 0x25
   1871e:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   18722:	ab02      	add	r3, sp, #8
   18724:	4418      	add	r0, r3
   18726:	2300      	movs	r3, #0
   18728:	e9cd 0200 	strd	r0, r2, [sp]
   1872c:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   18730:	4608      	mov	r0, r1
   18732:	f2c0 0201 	movt	r2, #1
   18736:	2101      	movs	r1, #1
   18738:	f7fe fdfc 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1873c:	b00c      	add	sp, #48	; 0x30
   1873e:	bd80      	pop	{r7, pc}

00018740 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   18740:	b580      	push	{r7, lr}
   18742:	b08c      	sub	sp, #48	; 0x30
   18744:	8800      	ldrh	r0, [r0, #0]
   18746:	f242 720f 	movw	r2, #9999	; 0x270f
   1874a:	468e      	mov	lr, r1
   1874c:	4290      	cmp	r0, r2
   1874e:	d924      	bls.n	1879a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   18750:	f241 7259 	movw	r2, #5977	; 0x1759
   18754:	f248 511f 	movw	r1, #34079	; 0x851f
   18758:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   1875c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18760:	fba0 2302 	umull	r2, r3, r0, r2
   18764:	0b5a      	lsrs	r2, r3, #13
   18766:	f242 7310 	movw	r3, #10000	; 0x2710
   1876a:	fb02 0013 	mls	r0, r2, r3, r0
   1876e:	b283      	uxth	r3, r0
   18770:	fba3 1301 	umull	r1, r3, r3, r1
   18774:	0959      	lsrs	r1, r3, #5
   18776:	2364      	movs	r3, #100	; 0x64
   18778:	fb01 0013 	mls	r0, r1, r3, r0
   1877c:	f240 132f 	movw	r3, #303	; 0x12f
   18780:	f2c0 0302 	movt	r3, #2
   18784:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   18788:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   1878c:	b280      	uxth	r0, r0
   1878e:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   18792:	2323      	movs	r3, #35	; 0x23
   18794:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18798:	e024      	b.n	187e4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   1879a:	f240 1c2f 	movw	ip, #303	; 0x12f
   1879e:	2863      	cmp	r0, #99	; 0x63
   187a0:	f2c0 0c02 	movt	ip, #2
   187a4:	d919      	bls.n	187da <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   187a6:	f248 511f 	movw	r1, #34079	; 0x851f
   187aa:	2325      	movs	r3, #37	; 0x25
   187ac:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   187b0:	fba0 1201 	umull	r1, r2, r0, r1
   187b4:	0951      	lsrs	r1, r2, #5
   187b6:	2264      	movs	r2, #100	; 0x64
   187b8:	fb01 0012 	mls	r0, r1, r2, r0
   187bc:	b280      	uxth	r0, r0
   187be:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   187c2:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   187c6:	4608      	mov	r0, r1
   187c8:	b282      	uxth	r2, r0
   187ca:	2a0a      	cmp	r2, #10
   187cc:	d309      	bcc.n	187e2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   187ce:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   187d2:	1e98      	subs	r0, r3, #2
   187d4:	aa02      	add	r2, sp, #8
   187d6:	5211      	strh	r1, [r2, r0]
   187d8:	e009      	b.n	187ee <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   187da:	2327      	movs	r3, #39	; 0x27
   187dc:	b282      	uxth	r2, r0
   187de:	2a0a      	cmp	r2, #10
   187e0:	d2f5      	bcs.n	187ce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   187e2:	4602      	mov	r2, r0
   187e4:	1e58      	subs	r0, r3, #1
   187e6:	f102 0130 	add.w	r1, r2, #48	; 0x30
   187ea:	aa02      	add	r2, sp, #8
   187ec:	5411      	strb	r1, [r2, r0]
   187ee:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   187f2:	aa02      	add	r2, sp, #8
   187f4:	4410      	add	r0, r2
   187f6:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   187fa:	e9cd 0100 	strd	r0, r1, [sp]
   187fe:	f2c0 0201 	movt	r2, #1
   18802:	4670      	mov	r0, lr
   18804:	2101      	movs	r1, #1
   18806:	2300      	movs	r3, #0
   18808:	f7fe fd94 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1880c:	b00c      	add	sp, #48	; 0x30
   1880e:	bd80      	pop	{r7, pc}

00018810 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   18810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18814:	b08f      	sub	sp, #60	; 0x3c
   18816:	6805      	ldr	r5, [r0, #0]
   18818:	f248 581f 	movw	r8, #34079	; 0x851f
   1881c:	460e      	mov	r6, r1
   1881e:	f240 112f 	movw	r1, #303	; 0x12f
   18822:	2d00      	cmp	r5, #0
   18824:	f242 7910 	movw	r9, #10000	; 0x2710
   18828:	462b      	mov	r3, r5
   1882a:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1882e:	bf48      	it	mi
   18830:	426b      	negmi	r3, r5
   18832:	454b      	cmp	r3, r9
   18834:	f2c0 0102 	movt	r1, #2
   18838:	d33a      	bcc.n	188b0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1883a:	f241 7a59 	movw	sl, #5977	; 0x1759
   1883e:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   18842:	f10d 0e14 	add.w	lr, sp, #20
   18846:	2400      	movs	r4, #0
   18848:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1884c:	f04f 0b64 	mov.w	fp, #100	; 0x64
   18850:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   18854:	e9cd 5603 	strd	r5, r6, [sp, #12]
   18858:	fba3 250a 	umull	r2, r5, r3, sl
   1885c:	eb0e 0704 	add.w	r7, lr, r4
   18860:	3c04      	subs	r4, #4
   18862:	4283      	cmp	r3, r0
   18864:	ea4f 3255 	mov.w	r2, r5, lsr #13
   18868:	fb02 3519 	mls	r5, r2, r9, r3
   1886c:	4613      	mov	r3, r2
   1886e:	b2ae      	uxth	r6, r5
   18870:	fba6 6c08 	umull	r6, ip, r6, r8
   18874:	ea4f 165c 	mov.w	r6, ip, lsr #5
   18878:	fb06 551b 	mls	r5, r6, fp, r5
   1887c:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   18880:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   18884:	b2ad      	uxth	r5, r5
   18886:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   1888a:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   1888e:	d8e3      	bhi.n	18858 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   18890:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   18894:	f104 0027 	add.w	r0, r4, #39	; 0x27
   18898:	4613      	mov	r3, r2
   1889a:	2b63      	cmp	r3, #99	; 0x63
   1889c:	dc0b      	bgt.n	188b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   1889e:	461a      	mov	r2, r3
   188a0:	2a0a      	cmp	r2, #10
   188a2:	db17      	blt.n	188d4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   188a4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   188a8:	3802      	subs	r0, #2
   188aa:	aa05      	add	r2, sp, #20
   188ac:	5211      	strh	r1, [r2, r0]
   188ae:	e016      	b.n	188de <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   188b0:	2027      	movs	r0, #39	; 0x27
   188b2:	2b63      	cmp	r3, #99	; 0x63
   188b4:	ddf3      	ble.n	1889e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   188b6:	b29a      	uxth	r2, r3
   188b8:	3802      	subs	r0, #2
   188ba:	fba2 2708 	umull	r2, r7, r2, r8
   188be:	097a      	lsrs	r2, r7, #5
   188c0:	2764      	movs	r7, #100	; 0x64
   188c2:	fb02 3317 	mls	r3, r2, r7, r3
   188c6:	af05      	add	r7, sp, #20
   188c8:	b29b      	uxth	r3, r3
   188ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   188ce:	523b      	strh	r3, [r7, r0]
   188d0:	2a0a      	cmp	r2, #10
   188d2:	dae7      	bge.n	188a4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   188d4:	3801      	subs	r0, #1
   188d6:	f102 0130 	add.w	r1, r2, #48	; 0x30
   188da:	aa05      	add	r2, sp, #20
   188dc:	5411      	strb	r1, [r2, r0]
   188de:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   188e2:	aa05      	add	r2, sp, #20
   188e4:	4410      	add	r0, r2
   188e6:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   188ea:	e9cd 0100 	strd	r0, r1, [sp]
   188ee:	43e8      	mvns	r0, r5
   188f0:	0fc1      	lsrs	r1, r0, #31
   188f2:	f2c0 0201 	movt	r2, #1
   188f6:	4630      	mov	r0, r6
   188f8:	2300      	movs	r3, #0
   188fa:	f7fe fd1b 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   188fe:	b00f      	add	sp, #60	; 0x3c
   18900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018904 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   18904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18908:	b08d      	sub	sp, #52	; 0x34
   1890a:	468c      	mov	ip, r1
   1890c:	6801      	ldr	r1, [r0, #0]
   1890e:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18912:	f240 102f 	movw	r0, #303	; 0x12f
   18916:	f242 7810 	movw	r8, #10000	; 0x2710
   1891a:	4541      	cmp	r1, r8
   1891c:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18920:	f2c0 0002 	movt	r0, #2
   18924:	d337      	bcc.n	18996 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   18926:	f241 7959 	movw	r9, #5977	; 0x1759
   1892a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1892e:	f10d 0b0c 	add.w	fp, sp, #12
   18932:	2300      	movs	r3, #0
   18934:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18938:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1893c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18940:	fba1 2409 	umull	r2, r4, r1, r9
   18944:	42b9      	cmp	r1, r7
   18946:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1894a:	fb02 1418 	mls	r4, r2, r8, r1
   1894e:	4611      	mov	r1, r2
   18950:	b2a5      	uxth	r5, r4
   18952:	fba5 560e 	umull	r5, r6, r5, lr
   18956:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1895a:	eb0b 0603 	add.w	r6, fp, r3
   1895e:	fb05 441a 	mls	r4, r5, sl, r4
   18962:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   18966:	f1a3 0304 	sub.w	r3, r3, #4
   1896a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1896e:	b2a4      	uxth	r4, r4
   18970:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   18974:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18978:	d8e2      	bhi.n	18940 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1897a:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1897e:	4611      	mov	r1, r2
   18980:	2963      	cmp	r1, #99	; 0x63
   18982:	dc0b      	bgt.n	1899c <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   18984:	460b      	mov	r3, r1
   18986:	2b0a      	cmp	r3, #10
   18988:	db17      	blt.n	189ba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   1898a:	1ea1      	subs	r1, r4, #2
   1898c:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   18990:	aa03      	add	r2, sp, #12
   18992:	5250      	strh	r0, [r2, r1]
   18994:	e016      	b.n	189c4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   18996:	2427      	movs	r4, #39	; 0x27
   18998:	2963      	cmp	r1, #99	; 0x63
   1899a:	ddf3      	ble.n	18984 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   1899c:	b28a      	uxth	r2, r1
   1899e:	3c02      	subs	r4, #2
   189a0:	fba2 230e 	umull	r2, r3, r2, lr
   189a4:	2264      	movs	r2, #100	; 0x64
   189a6:	095b      	lsrs	r3, r3, #5
   189a8:	fb03 1112 	mls	r1, r3, r2, r1
   189ac:	aa03      	add	r2, sp, #12
   189ae:	b289      	uxth	r1, r1
   189b0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   189b4:	5311      	strh	r1, [r2, r4]
   189b6:	2b0a      	cmp	r3, #10
   189b8:	dae7      	bge.n	1898a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   189ba:	1e61      	subs	r1, r4, #1
   189bc:	aa03      	add	r2, sp, #12
   189be:	f103 0030 	add.w	r0, r3, #48	; 0x30
   189c2:	5450      	strb	r0, [r2, r1]
   189c4:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   189c8:	aa03      	add	r2, sp, #12
   189ca:	4411      	add	r1, r2
   189cc:	f64f 62f4 	movw	r2, #65268	; 0xfef4
   189d0:	e9cd 1000 	strd	r1, r0, [sp]
   189d4:	f2c0 0201 	movt	r2, #1
   189d8:	4660      	mov	r0, ip
   189da:	2101      	movs	r1, #1
   189dc:	2300      	movs	r3, #0
   189de:	f7fe fca9 	bl	17334 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   189e2:	b00d      	add	sp, #52	; 0x34
   189e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000189e8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   189e8:	e9d0 2000 	ldrd	r2, r0, [r0]
   189ec:	68c3      	ldr	r3, [r0, #12]
   189ee:	4610      	mov	r0, r2
   189f0:	4718      	bx	r3

000189f2 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   189f2:	460b      	mov	r3, r1
   189f4:	e9d0 1200 	ldrd	r1, r2, [r0]
   189f8:	4618      	mov	r0, r3
   189fa:	f7fe bde3 	b.w	175c4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00018a00 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   18a00:	4b07      	ldr	r3, [pc, #28]	; (18a20 <__semihost+0x20>)
   18a02:	781b      	ldrb	r3, [r3, #0]
   18a04:	b14b      	cbz	r3, 18a1a <__semihost+0x1a>
static int __semihost(int command, void* message) {
   18a06:	b410      	push	{r4}
   18a08:	4602      	mov	r2, r0
   18a0a:	460c      	mov	r4, r1
    __asm( 
   18a0c:	4610      	mov	r0, r2
   18a0e:	4621      	mov	r1, r4
   18a10:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   18a12:	2000      	movs	r0, #0
}
   18a14:	f85d 4b04 	ldr.w	r4, [sp], #4
   18a18:	4770      	bx	lr
    if (!log_enabled) return -1;
   18a1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18a1e:	4770      	bx	lr
   18a20:	20000100 	.word	0x20000100

00018a24 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   18a24:	4b02      	ldr	r3, [pc, #8]	; (18a30 <debugger_connected+0xc>)
   18a26:	6818      	ldr	r0, [r3, #0]
}
   18a28:	f000 0001 	and.w	r0, r0, #1
   18a2c:	4770      	bx	lr
   18a2e:	bf00      	nop
   18a30:	e000edf0 	.word	0xe000edf0

00018a34 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   18a34:	b570      	push	{r4, r5, r6, lr}
   18a36:	b084      	sub	sp, #16
   18a38:	4606      	mov	r6, r0
   18a3a:	460d      	mov	r5, r1
   18a3c:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   18a3e:	f7ff fff1 	bl	18a24 <debugger_connected>
   18a42:	4603      	mov	r3, r0
   18a44:	b108      	cbz	r0, 18a4a <semihost_write+0x16>
    if (length == 0) { return 0; }
   18a46:	b91c      	cbnz	r4, 18a50 <semihost_write+0x1c>
   18a48:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   18a4a:	4618      	mov	r0, r3
   18a4c:	b004      	add	sp, #16
   18a4e:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   18a50:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   18a52:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   18a54:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   18a56:	a901      	add	r1, sp, #4
   18a58:	2005      	movs	r0, #5
   18a5a:	f7ff ffd1 	bl	18a00 <__semihost>
   18a5e:	4603      	mov	r3, r0
   18a60:	e7f3      	b.n	18a4a <semihost_write+0x16>
	...

00018a64 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   18a64:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   18a66:	4b0e      	ldr	r3, [pc, #56]	; (18aa0 <console_flush+0x3c>)
   18a68:	781b      	ldrb	r3, [r3, #0]
   18a6a:	b1bb      	cbz	r3, 18a9c <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   18a6c:	4b0d      	ldr	r3, [pc, #52]	; (18aa4 <console_flush+0x40>)
   18a6e:	681d      	ldr	r5, [r3, #0]
   18a70:	b1a5      	cbz	r5, 18a9c <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   18a72:	4b0d      	ldr	r3, [pc, #52]	; (18aa8 <console_flush+0x44>)
   18a74:	685b      	ldr	r3, [r3, #4]
   18a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   18a7a:	b97b      	cbnz	r3, 18a9c <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   18a7c:	4b09      	ldr	r3, [pc, #36]	; (18aa4 <console_flush+0x40>)
   18a7e:	2200      	movs	r2, #0
   18a80:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   18a82:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   18a84:	e005      	b.n	18a92 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   18a86:	88e2      	ldrh	r2, [r4, #6]
   18a88:	6821      	ldr	r1, [r4, #0]
   18a8a:	2002      	movs	r0, #2
   18a8c:	f7ff ffd2 	bl	18a34 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   18a90:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   18a92:	2c00      	cmp	r4, #0
   18a94:	d1f7      	bne.n	18a86 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   18a96:	4628      	mov	r0, r5
   18a98:	f001 fbfc 	bl	1a294 <os_mbuf_free_chain>
}
   18a9c:	bd38      	pop	{r3, r4, r5, pc}
   18a9e:	bf00      	nop
   18aa0:	20000100 	.word	0x20000100
   18aa4:	20007704 	.word	0x20007704
   18aa8:	e000ed00 	.word	0xe000ed00

00018aac <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   18aac:	b508      	push	{r3, lr}
   18aae:	f7ff ffd9 	bl	18a64 <console_flush>
   18ab2:	bd08      	pop	{r3, pc}

00018ab4 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   18ab4:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   18ab6:	4b12      	ldr	r3, [pc, #72]	; (18b00 <console_buffer+0x4c>)
   18ab8:	781b      	ldrb	r3, [r3, #0]
   18aba:	b903      	cbnz	r3, 18abe <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   18abc:	bd38      	pop	{r3, r4, r5, pc}
   18abe:	460d      	mov	r5, r1
   18ac0:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   18ac2:	f7ff ffaf 	bl	18a24 <debugger_connected>
   18ac6:	2800      	cmp	r0, #0
   18ac8:	d0f8      	beq.n	18abc <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   18aca:	4b0e      	ldr	r3, [pc, #56]	; (18b04 <console_buffer+0x50>)
   18acc:	681b      	ldr	r3, [r3, #0]
   18ace:	b173      	cbz	r3, 18aee <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   18ad0:	4b0c      	ldr	r3, [pc, #48]	; (18b04 <console_buffer+0x50>)
   18ad2:	6818      	ldr	r0, [r3, #0]
   18ad4:	f001 fbf0 	bl	1a2b8 <os_mbuf_len>
   18ad8:	4428      	add	r0, r5
   18ada:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   18ade:	d2ed      	bcs.n	18abc <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   18ae0:	b2aa      	uxth	r2, r5
   18ae2:	4621      	mov	r1, r4
   18ae4:	4b07      	ldr	r3, [pc, #28]	; (18b04 <console_buffer+0x50>)
   18ae6:	6818      	ldr	r0, [r3, #0]
   18ae8:	f001 fbf0 	bl	1a2cc <os_mbuf_append>
   18aec:	e7e6      	b.n	18abc <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   18aee:	2100      	movs	r1, #0
   18af0:	b2a8      	uxth	r0, r5
   18af2:	f001 fd93 	bl	1a61c <os_msys_get_pkthdr>
   18af6:	4b03      	ldr	r3, [pc, #12]	; (18b04 <console_buffer+0x50>)
   18af8:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   18afa:	2800      	cmp	r0, #0
   18afc:	d1e8      	bne.n	18ad0 <console_buffer+0x1c>
   18afe:	e7dd      	b.n	18abc <console_buffer+0x8>
   18b00:	20000100 	.word	0x20000100
   18b04:	20007704 	.word	0x20007704

00018b08 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   18b08:	b500      	push	{lr}
   18b0a:	b083      	sub	sp, #12
   18b0c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   18b10:	280d      	cmp	r0, #13
   18b12:	d004      	beq.n	18b1e <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   18b14:	2101      	movs	r1, #1
   18b16:	f10d 0007 	add.w	r0, sp, #7
   18b1a:	f7ff ffcb 	bl	18ab4 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   18b1e:	b003      	add	sp, #12
   18b20:	f85d fb04 	ldr.w	pc, [sp], #4

00018b24 <console_printhex>:
void console_printhex(uint8_t v) {
   18b24:	b510      	push	{r4, lr}
   18b26:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18b28:	2310      	movs	r3, #16
    int length = 0;
   18b2a:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18b2c:	e005      	b.n	18b3a <console_printhex+0x16>
        v = v % divisor;
   18b2e:	fbb0 f1f3 	udiv	r1, r0, r3
   18b32:	fb03 0011 	mls	r0, r3, r1, r0
   18b36:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18b38:	091b      	lsrs	r3, r3, #4
   18b3a:	b18b      	cbz	r3, 18b60 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   18b3c:	fbb0 f4f3 	udiv	r4, r0, r3
   18b40:	f104 0130 	add.w	r1, r4, #48	; 0x30
   18b44:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   18b46:	2939      	cmp	r1, #57	; 0x39
   18b48:	d902      	bls.n	18b50 <console_printhex+0x2c>
   18b4a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   18b4e:	b2c9      	uxtb	r1, r1
            if (length < size) {
   18b50:	2a02      	cmp	r2, #2
   18b52:	dcec      	bgt.n	18b2e <console_printhex+0xa>
                buffer[length++] = digit;
   18b54:	ac02      	add	r4, sp, #8
   18b56:	4414      	add	r4, r2
   18b58:	f804 1c04 	strb.w	r1, [r4, #-4]
   18b5c:	3201      	adds	r2, #1
   18b5e:	e7e6      	b.n	18b2e <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   18b60:	b92a      	cbnz	r2, 18b6e <console_printhex+0x4a>
   18b62:	ab02      	add	r3, sp, #8
   18b64:	4413      	add	r3, r2
   18b66:	2130      	movs	r1, #48	; 0x30
   18b68:	f803 1c04 	strb.w	r1, [r3, #-4]
   18b6c:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   18b6e:	2a02      	cmp	r2, #2
   18b70:	dc04      	bgt.n	18b7c <console_printhex+0x58>
   18b72:	ab02      	add	r3, sp, #8
   18b74:	441a      	add	r2, r3
   18b76:	2300      	movs	r3, #0
   18b78:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   18b7c:	2300      	movs	r3, #0
   18b7e:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   18b82:	a801      	add	r0, sp, #4
   18b84:	f002 fb73 	bl	1b26e <strlen>
   18b88:	4601      	mov	r1, r0
   18b8a:	a801      	add	r0, sp, #4
   18b8c:	f7ff ff92 	bl	18ab4 <console_buffer>
}
   18b90:	b002      	add	sp, #8
   18b92:	bd10      	pop	{r4, pc}

00018b94 <console_printint>:
void console_printint(int i) {
   18b94:	b508      	push	{r3, lr}
    console_printf("%d", i);
   18b96:	4601      	mov	r1, r0
   18b98:	4801      	ldr	r0, [pc, #4]	; (18ba0 <console_printint+0xc>)
   18b9a:	f000 f873 	bl	18c84 <console_printf>
}
   18b9e:	bd08      	pop	{r3, pc}
   18ba0:	000210f4 	.word	0x000210f4

00018ba4 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   18ba4:	b180      	cbz	r0, 18bc8 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   18ba6:	b570      	push	{r4, r5, r6, lr}
   18ba8:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   18baa:	b161      	cbz	r1, 18bc6 <console_dump+0x22>
   18bac:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   18bae:	2400      	movs	r4, #0
   18bb0:	e007      	b.n	18bc2 <console_dump+0x1e>
   18bb2:	5d30      	ldrb	r0, [r6, r4]
   18bb4:	f7ff ffb6 	bl	18b24 <console_printhex>
   18bb8:	2101      	movs	r1, #1
   18bba:	4804      	ldr	r0, [pc, #16]	; (18bcc <console_dump+0x28>)
   18bbc:	f7ff ff7a 	bl	18ab4 <console_buffer>
   18bc0:	3401      	adds	r4, #1
   18bc2:	42ac      	cmp	r4, r5
   18bc4:	d3f5      	bcc.n	18bb2 <console_dump+0xe>
}
   18bc6:	bd70      	pop	{r4, r5, r6, pc}
   18bc8:	4770      	bx	lr
   18bca:	bf00      	nop
   18bcc:	000210f0 	.word	0x000210f0

00018bd0 <console_out_nolock>:

int console_out_nolock(int character) {
   18bd0:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   18bd2:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   18bd4:	4b0b      	ldr	r3, [pc, #44]	; (18c04 <console_out_nolock+0x34>)
   18bd6:	781b      	ldrb	r3, [r3, #0]
   18bd8:	b953      	cbnz	r3, 18bf0 <console_out_nolock+0x20>
   18bda:	4604      	mov	r4, r0
    if ('\n' == c) {
   18bdc:	2d0a      	cmp	r5, #10
   18bde:	d009      	beq.n	18bf4 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   18be0:	4b09      	ldr	r3, [pc, #36]	; (18c08 <console_out_nolock+0x38>)
   18be2:	2201      	movs	r2, #1
   18be4:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   18be6:	4628      	mov	r0, r5
   18be8:	f7ff ff8e 	bl	18b08 <semihosting_console_write_ch>
    return character;
   18bec:	4620      	mov	r0, r4
}
   18bee:	bd38      	pop	{r3, r4, r5, pc}
   18bf0:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   18bf2:	e7fc      	b.n	18bee <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   18bf4:	200d      	movs	r0, #13
   18bf6:	f7ff ff87 	bl	18b08 <semihosting_console_write_ch>
        console_is_midline = 0;
   18bfa:	4b03      	ldr	r3, [pc, #12]	; (18c08 <console_out_nolock+0x38>)
   18bfc:	2200      	movs	r2, #0
   18bfe:	601a      	str	r2, [r3, #0]
   18c00:	e7f1      	b.n	18be6 <console_out_nolock+0x16>
   18c02:	bf00      	nop
   18c04:	2000e5b4 	.word	0x2000e5b4
   18c08:	2000e5b8 	.word	0x2000e5b8

00018c0c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   18c0c:	2000      	movs	r0, #0
   18c0e:	4770      	bx	lr

00018c10 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   18c10:	b570      	push	{r4, r5, r6, lr}
   18c12:	4606      	mov	r6, r0
   18c14:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   18c16:	2400      	movs	r4, #0
   18c18:	42ac      	cmp	r4, r5
   18c1a:	da07      	bge.n	18c2c <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   18c1c:	5d30      	ldrb	r0, [r6, r4]
   18c1e:	f7ff ffd7 	bl	18bd0 <console_out_nolock>
   18c22:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18c26:	d001      	beq.n	18c2c <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   18c28:	3401      	adds	r4, #1
   18c2a:	e7f5      	b.n	18c18 <console_write+0x8>
    }
}
   18c2c:	bd70      	pop	{r4, r5, r6, pc}

00018c2e <console_blocking_mode>:

void console_blocking_mode(void) {
   18c2e:	b508      	push	{r3, lr}
    disable_buffer();
   18c30:	f7ff ff3c 	bl	18aac <disable_buffer>
}
   18c34:	bd08      	pop	{r3, pc}
	...

00018c38 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   18c38:	b510      	push	{r4, lr}
   18c3a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18c3c:	4b0d      	ldr	r3, [pc, #52]	; (18c74 <console_pkg_init+0x3c>)
   18c3e:	781b      	ldrb	r3, [r3, #0]
   18c40:	b193      	cbz	r3, 18c68 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   18c42:	480d      	ldr	r0, [pc, #52]	; (18c78 <console_pkg_init+0x40>)
   18c44:	f001 f9fa 	bl	1a03c <os_eventq_init>
    os_mutex_init(&console_write_lock);
   18c48:	480c      	ldr	r0, [pc, #48]	; (18c7c <console_pkg_init+0x44>)
   18c4a:	f001 fd15 	bl	1a678 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   18c4e:	f7ff ffdd 	bl	18c0c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   18c52:	b138      	cbz	r0, 18c64 <console_pkg_init+0x2c>
   18c54:	2000      	movs	r0, #0
   18c56:	9000      	str	r0, [sp, #0]
   18c58:	4b09      	ldr	r3, [pc, #36]	; (18c80 <console_pkg_init+0x48>)
   18c5a:	681c      	ldr	r4, [r3, #0]
   18c5c:	4603      	mov	r3, r0
   18c5e:	4602      	mov	r2, r0
   18c60:	4601      	mov	r1, r0
   18c62:	47a0      	blx	r4
}
   18c64:	b002      	add	sp, #8
   18c66:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18c68:	461a      	mov	r2, r3
   18c6a:	4619      	mov	r1, r3
   18c6c:	4618      	mov	r0, r3
   18c6e:	f000 fed1 	bl	19a14 <__assert_func>
   18c72:	bf00      	nop
   18c74:	2000e5bc 	.word	0x2000e5bc
   18c78:	20007708 	.word	0x20007708
   18c7c:	20007718 	.word	0x20007718
   18c80:	20000104 	.word	0x20000104

00018c84 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18c84:	b40f      	push	{r0, r1, r2, r3}
   18c86:	b510      	push	{r4, lr}
   18c88:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18c8a:	f000 f81f 	bl	18ccc <console_get_ticks>
   18c8e:	b160      	cbz	r0, 18caa <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18c90:	4b0c      	ldr	r3, [pc, #48]	; (18cc4 <console_printf+0x40>)
   18c92:	681b      	ldr	r3, [r3, #0]
   18c94:	b10b      	cbz	r3, 18c9a <console_printf+0x16>
    num_chars = 0;
   18c96:	2400      	movs	r4, #0
   18c98:	e008      	b.n	18cac <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18c9a:	f002 f8d9 	bl	1ae50 <os_time_get>
   18c9e:	4601      	mov	r1, r0
   18ca0:	4809      	ldr	r0, [pc, #36]	; (18cc8 <console_printf+0x44>)
   18ca2:	f002 fd97 	bl	1b7d4 <printf>
   18ca6:	4604      	mov	r4, r0
   18ca8:	e000      	b.n	18cac <console_printf+0x28>
    num_chars = 0;
   18caa:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   18cac:	a905      	add	r1, sp, #20
   18cae:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   18cb0:	9804      	ldr	r0, [sp, #16]
   18cb2:	f002 fdbf 	bl	1b834 <vprintf>
    va_end(args);

    return num_chars;
}
   18cb6:	4420      	add	r0, r4
   18cb8:	b002      	add	sp, #8
   18cba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18cbe:	b004      	add	sp, #16
   18cc0:	4770      	bx	lr
   18cc2:	bf00      	nop
   18cc4:	2000e5b8 	.word	0x2000e5b8
   18cc8:	000210f8 	.word	0x000210f8

00018ccc <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18ccc:	4b01      	ldr	r3, [pc, #4]	; (18cd4 <console_get_ticks+0x8>)
   18cce:	7818      	ldrb	r0, [r3, #0]
   18cd0:	4770      	bx	lr
   18cd2:	bf00      	nop
   18cd4:	20007724 	.word	0x20007724

00018cd8 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   18cd8:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   18cda:	f000 fe9b 	bl	19a14 <__assert_func>
	...

00018ce0 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   18ce0:	4b01      	ldr	r3, [pc, #4]	; (18ce8 <sysinit_start+0x8>)
   18ce2:	2201      	movs	r2, #1
   18ce4:	701a      	strb	r2, [r3, #0]
}
   18ce6:	4770      	bx	lr
   18ce8:	2000e5bc 	.word	0x2000e5bc

00018cec <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   18cec:	4b01      	ldr	r3, [pc, #4]	; (18cf4 <sysinit_end+0x8>)
   18cee:	2200      	movs	r2, #0
   18cf0:	701a      	strb	r2, [r3, #0]
}
   18cf2:	4770      	bx	lr
   18cf4:	2000e5bc 	.word	0x2000e5bc

00018cf8 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   18cf8:	4a09      	ldr	r2, [pc, #36]	; (18d20 <NVIC_Relocate+0x28>)
   18cfa:	4b0a      	ldr	r3, [pc, #40]	; (18d24 <NVIC_Relocate+0x2c>)
   18cfc:	429a      	cmp	r2, r3
   18cfe:	d00a      	beq.n	18d16 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18d00:	2300      	movs	r3, #0
   18d02:	e006      	b.n	18d12 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   18d04:	4a07      	ldr	r2, [pc, #28]	; (18d24 <NVIC_Relocate+0x2c>)
   18d06:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   18d0a:	4a05      	ldr	r2, [pc, #20]	; (18d20 <NVIC_Relocate+0x28>)
   18d0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18d10:	3301      	adds	r3, #1
   18d12:	2b35      	cmp	r3, #53	; 0x35
   18d14:	ddf6      	ble.n	18d04 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   18d16:	4a02      	ldr	r2, [pc, #8]	; (18d20 <NVIC_Relocate+0x28>)
   18d18:	4b03      	ldr	r3, [pc, #12]	; (18d28 <NVIC_Relocate+0x30>)
   18d1a:	609a      	str	r2, [r3, #8]
#endif
}
   18d1c:	4770      	bx	lr
   18d1e:	bf00      	nop
   18d20:	20000000 	.word	0x20000000
   18d24:	00008020 	.word	0x00008020
   18d28:	e000ed00 	.word	0xe000ed00

00018d2c <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   18d2c:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18d2e:	2400      	movs	r4, #0
   18d30:	e000      	b.n	18d34 <hal_gpio_irq_handler+0x8>
   18d32:	3401      	adds	r4, #1
   18d34:	2c07      	cmp	r4, #7
   18d36:	dc1c      	bgt.n	18d72 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   18d38:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18d3c:	4a0d      	ldr	r2, [pc, #52]	; (18d74 <hal_gpio_irq_handler+0x48>)
   18d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18d42:	2b00      	cmp	r3, #0
   18d44:	d0f5      	beq.n	18d32 <hal_gpio_irq_handler+0x6>
   18d46:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18d4a:	2301      	movs	r3, #1
   18d4c:	40a3      	lsls	r3, r4
   18d4e:	421a      	tst	r2, r3
   18d50:	d0ef      	beq.n	18d32 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   18d52:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18d56:	4a07      	ldr	r2, [pc, #28]	; (18d74 <hal_gpio_irq_handler+0x48>)
   18d58:	2100      	movs	r1, #0
   18d5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   18d5e:	4b06      	ldr	r3, [pc, #24]	; (18d78 <hal_gpio_irq_handler+0x4c>)
   18d60:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   18d64:	2a00      	cmp	r2, #0
   18d66:	d0e4      	beq.n	18d32 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   18d68:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18d6c:	6858      	ldr	r0, [r3, #4]
   18d6e:	4790      	blx	r2
   18d70:	e7df      	b.n	18d32 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   18d72:	bd10      	pop	{r4, pc}
   18d74:	40006000 	.word	0x40006000
   18d78:	20007728 	.word	0x20007728

00018d7c <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   18d7c:	4b06      	ldr	r3, [pc, #24]	; (18d98 <hal_gpio_irq_setup+0x1c>)
   18d7e:	781b      	ldrb	r3, [r3, #0]
   18d80:	b94b      	cbnz	r3, 18d96 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18d82:	4b06      	ldr	r3, [pc, #24]	; (18d9c <hal_gpio_irq_setup+0x20>)
   18d84:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18d86:	4a06      	ldr	r2, [pc, #24]	; (18da0 <hal_gpio_irq_setup+0x24>)
   18d88:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18d8a:	4b06      	ldr	r3, [pc, #24]	; (18da4 <hal_gpio_irq_setup+0x28>)
   18d8c:	2240      	movs	r2, #64	; 0x40
   18d8e:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   18d90:	4b01      	ldr	r3, [pc, #4]	; (18d98 <hal_gpio_irq_setup+0x1c>)
   18d92:	2201      	movs	r2, #1
   18d94:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   18d96:	4770      	bx	lr
   18d98:	20007768 	.word	0x20007768
   18d9c:	e000ed00 	.word	0xe000ed00
   18da0:	00018d2d 	.word	0x00018d2d
   18da4:	e000e100 	.word	0xe000e100

00018da8 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18da8:	2000      	movs	r0, #0
   18daa:	2807      	cmp	r0, #7
   18dac:	dc05      	bgt.n	18dba <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   18dae:	4b04      	ldr	r3, [pc, #16]	; (18dc0 <hal_gpio_find_empty_slot+0x18>)
   18db0:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18db4:	b11b      	cbz	r3, 18dbe <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18db6:	3001      	adds	r0, #1
   18db8:	e7f7      	b.n	18daa <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   18dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18dbe:	4770      	bx	lr
   18dc0:	20007728 	.word	0x20007728

00018dc4 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   18dc4:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18dc6:	2000      	movs	r0, #0
   18dc8:	e000      	b.n	18dcc <hal_gpio_find_pin+0x8>
   18dca:	3001      	adds	r0, #1
   18dcc:	2807      	cmp	r0, #7
   18dce:	dc0e      	bgt.n	18dee <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   18dd0:	4b08      	ldr	r3, [pc, #32]	; (18df4 <hal_gpio_find_pin+0x30>)
   18dd2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18dd6:	2b00      	cmp	r3, #0
   18dd8:	d0f7      	beq.n	18dca <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   18dda:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   18dde:	4a06      	ldr	r2, [pc, #24]	; (18df8 <hal_gpio_find_pin+0x34>)
   18de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18de4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   18de8:	428b      	cmp	r3, r1
   18dea:	d1ee      	bne.n	18dca <hal_gpio_find_pin+0x6>
   18dec:	e001      	b.n	18df2 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   18dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18df2:	4770      	bx	lr
   18df4:	20007728 	.word	0x20007728
   18df8:	40006000 	.word	0x40006000

00018dfc <hal_gpio_init_in>:
    switch (pull) {
   18dfc:	2901      	cmp	r1, #1
   18dfe:	d003      	beq.n	18e08 <hal_gpio_init_in+0xc>
   18e00:	2902      	cmp	r1, #2
   18e02:	d00f      	beq.n	18e24 <hal_gpio_init_in+0x28>
        conf = 0;
   18e04:	2100      	movs	r1, #0
        break;
   18e06:	e000      	b.n	18e0a <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   18e08:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   18e0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e0e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18e12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   18e16:	2301      	movs	r3, #1
   18e18:	fa03 f000 	lsl.w	r0, r3, r0
   18e1c:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   18e20:	2000      	movs	r0, #0
   18e22:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   18e24:	2104      	movs	r1, #4
   18e26:	e7f0      	b.n	18e0a <hal_gpio_init_in+0xe>

00018e28 <hal_gpio_init_out>:
    if (val) {
   18e28:	b999      	cbnz	r1, 18e52 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18e2a:	2301      	movs	r3, #1
   18e2c:	4083      	lsls	r3, r0
   18e2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e32:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   18e36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e3a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18e3e:	2103      	movs	r1, #3
   18e40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   18e44:	2301      	movs	r3, #1
   18e46:	fa03 f000 	lsl.w	r0, r3, r0
   18e4a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   18e4e:	2000      	movs	r0, #0
   18e50:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18e52:	2301      	movs	r3, #1
   18e54:	4083      	lsls	r3, r0
   18e56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18e5a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18e5e:	e7ea      	b.n	18e36 <hal_gpio_init_out+0xe>

00018e60 <hal_gpio_write>:
    if (val) {
   18e60:	b939      	cbnz	r1, 18e72 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18e62:	2301      	movs	r3, #1
   18e64:	fa03 f000 	lsl.w	r0, r3, r0
   18e68:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e6c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18e70:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18e72:	2301      	movs	r3, #1
   18e74:	fa03 f000 	lsl.w	r0, r3, r0
   18e78:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e7c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18e80:	4770      	bx	lr

00018e82 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   18e82:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e86:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   18e8a:	2301      	movs	r3, #1
   18e8c:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18e8e:	421a      	tst	r2, r3
   18e90:	d108      	bne.n	18ea4 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18e92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18e96:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18e9a:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18e9e:	f000 0001 	and.w	r0, r0, #1
}
   18ea2:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18ea8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   18eac:	fa23 f000 	lsr.w	r0, r3, r0
   18eb0:	f000 0001 	and.w	r0, r0, #1
   18eb4:	4770      	bx	lr
	...

00018eb8 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   18eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ebc:	4680      	mov	r8, r0
   18ebe:	460f      	mov	r7, r1
   18ec0:	4616      	mov	r6, r2
   18ec2:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   18ec4:	f7ff ff5a 	bl	18d7c <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   18ec8:	f7ff ff6e 	bl	18da8 <hal_gpio_find_empty_slot>
    if (i < 0) {
   18ecc:	1e05      	subs	r5, r0, #0
   18ece:	db27      	blt.n	18f20 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   18ed0:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18ed4:	4640      	mov	r0, r8
   18ed6:	f7ff ff91 	bl	18dfc <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   18eda:	2c02      	cmp	r4, #2
   18edc:	d01d      	beq.n	18f1a <hal_gpio_irq_init+0x62>
   18ede:	2c03      	cmp	r4, #3
   18ee0:	d018      	beq.n	18f14 <hal_gpio_irq_init+0x5c>
   18ee2:	2c01      	cmp	r4, #1
   18ee4:	d002      	beq.n	18eec <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   18ee6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18eea:	e011      	b.n	18f10 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   18eec:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   18ef0:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   18ef4:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   18ef8:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   18efc:	4b0a      	ldr	r3, [pc, #40]	; (18f28 <hal_gpio_irq_init+0x70>)
   18efe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   18f02:	4b0a      	ldr	r3, [pc, #40]	; (18f2c <hal_gpio_irq_init+0x74>)
   18f04:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   18f08:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18f0c:	605e      	str	r6, [r3, #4]

    return 0;
   18f0e:	2000      	movs	r0, #0
}
   18f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   18f14:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   18f18:	e7ea      	b.n	18ef0 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   18f1a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   18f1e:	e7e7      	b.n	18ef0 <hal_gpio_irq_init+0x38>
        return -1;
   18f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f24:	e7f4      	b.n	18f10 <hal_gpio_irq_init+0x58>
   18f26:	bf00      	nop
   18f28:	40006000 	.word	0x40006000
   18f2c:	20007728 	.word	0x20007728

00018f30 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   18f30:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   18f32:	f7ff ff47 	bl	18dc4 <hal_gpio_find_pin>
    if (i < 0) {
   18f36:	2800      	cmp	r0, #0
   18f38:	db0a      	blt.n	18f50 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   18f3a:	4a06      	ldr	r2, [pc, #24]	; (18f54 <hal_gpio_irq_enable+0x24>)
   18f3c:	f100 0340 	add.w	r3, r0, #64	; 0x40
   18f40:	2100      	movs	r1, #0
   18f42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   18f46:	2301      	movs	r3, #1
   18f48:	fa03 f000 	lsl.w	r0, r3, r0
   18f4c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   18f50:	bd08      	pop	{r3, pc}
   18f52:	bf00      	nop
   18f54:	40006000 	.word	0x40006000

00018f58 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   18f58:	3801      	subs	r0, #1
   18f5a:	bf00      	nop
   18f5c:	bf00      	nop
   18f5e:	bf00      	nop
   18f60:	bf00      	nop
   18f62:	bf00      	nop
   18f64:	bf00      	nop
   18f66:	bf00      	nop
   18f68:	bf00      	nop
   18f6a:	bf00      	nop
   18f6c:	bf00      	nop
   18f6e:	bf00      	nop
   18f70:	bf00      	nop
   18f72:	bf00      	nop
   18f74:	bf00      	nop
   18f76:	bf00      	nop
   18f78:	bf00      	nop
   18f7a:	bf00      	nop
   18f7c:	bf00      	nop
   18f7e:	bf00      	nop
   18f80:	bf00      	nop
   18f82:	bf00      	nop
   18f84:	bf00      	nop
   18f86:	bf00      	nop
   18f88:	bf00      	nop
   18f8a:	bf00      	nop
   18f8c:	bf00      	nop
   18f8e:	bf00      	nop
   18f90:	bf00      	nop
   18f92:	bf00      	nop
   18f94:	bf00      	nop
   18f96:	bf00      	nop
   18f98:	bf00      	nop
   18f9a:	bf00      	nop
   18f9c:	bf00      	nop
   18f9e:	bf00      	nop
   18fa0:	bf00      	nop
   18fa2:	bf00      	nop
   18fa4:	bf00      	nop
   18fa6:	bf00      	nop
   18fa8:	bf00      	nop
   18faa:	bf00      	nop
   18fac:	bf00      	nop
   18fae:	bf00      	nop
   18fb0:	bf00      	nop
   18fb2:	bf00      	nop
   18fb4:	bf00      	nop
   18fb6:	bf00      	nop
   18fb8:	bf00      	nop
   18fba:	bf00      	nop
   18fbc:	bf00      	nop
   18fbe:	bf00      	nop
   18fc0:	bf00      	nop
   18fc2:	bf00      	nop
   18fc4:	bf00      	nop
   18fc6:	bf00      	nop
   18fc8:	bf00      	nop
   18fca:	bf00      	nop
   18fcc:	bf00      	nop
   18fce:	d1c3      	bne.n	18f58 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   18fd0:	4770      	bx	lr
	...

00018fd4 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18fd4:	2801      	cmp	r0, #1
   18fd6:	d806      	bhi.n	18fe6 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18fd8:	4b06      	ldr	r3, [pc, #24]	; (18ff4 <hal_i2c_resolve+0x20>)
   18fda:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18fde:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   18fe0:	b12b      	cbz	r3, 18fee <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   18fe2:	2000      	movs	r0, #0
}
   18fe4:	4770      	bx	lr
        *out_i2c = NULL;
   18fe6:	2300      	movs	r3, #0
   18fe8:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18fea:	2002      	movs	r0, #2
   18fec:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   18fee:	2002      	movs	r0, #2
   18ff0:	4770      	bx	lr
   18ff2:	bf00      	nop
   18ff4:	00021100 	.word	0x00021100

00018ff8 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18ff8:	b148      	cbz	r0, 1900e <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18ffa:	f010 0f04 	tst.w	r0, #4
   18ffe:	d107      	bne.n	19010 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   19000:	f010 0f02 	tst.w	r0, #2
   19004:	d101      	bne.n	1900a <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   19006:	2001      	movs	r0, #1
    }
}
   19008:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   1900a:	2004      	movs	r0, #4
   1900c:	4770      	bx	lr
   1900e:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   19010:	2005      	movs	r0, #5
   19012:	4770      	bx	lr

00019014 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   19014:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   19018:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   1901c:	fa23 f000 	lsr.w	r0, r3, r0
}
   19020:	f000 0001 	and.w	r0, r0, #1
   19024:	4770      	bx	lr

00019026 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   19026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1902a:	4605      	mov	r5, r0
   1902c:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   1902e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19032:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   19036:	f240 630c 	movw	r3, #1548	; 0x60c
   1903a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   1903e:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   19042:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   19046:	2101      	movs	r1, #1
   19048:	f7ff ff0a 	bl	18e60 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   1904c:	2101      	movs	r1, #1
   1904e:	4630      	mov	r0, r6
   19050:	f7ff ff06 	bl	18e60 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   19054:	f240 630d 	movw	r3, #1549	; 0x60d
   19058:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   1905c:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   19060:	2004      	movs	r0, #4
   19062:	f7ff ff79 	bl	18f58 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   19066:	2400      	movs	r4, #0
   19068:	2c08      	cmp	r4, #8
   1906a:	dc14      	bgt.n	19096 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   1906c:	4630      	mov	r0, r6
   1906e:	f7ff ffd1 	bl	19014 <read_gpio_inbuffer>
   19072:	b978      	cbnz	r0, 19094 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   19074:	2100      	movs	r1, #0
   19076:	4628      	mov	r0, r5
   19078:	f7ff fef2 	bl	18e60 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1907c:	2004      	movs	r0, #4
   1907e:	f7ff ff6b 	bl	18f58 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   19082:	2101      	movs	r1, #1
   19084:	4628      	mov	r0, r5
   19086:	f7ff feeb 	bl	18e60 <hal_gpio_write>
        hal_i2c_delay_us(4);
   1908a:	2004      	movs	r0, #4
   1908c:	f7ff ff64 	bl	18f58 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   19090:	3401      	adds	r4, #1
   19092:	e7e9      	b.n	19068 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   19094:	b154      	cbz	r4, 190ac <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   19096:	2100      	movs	r1, #0
   19098:	4630      	mov	r0, r6
   1909a:	f7ff fee1 	bl	18e60 <hal_gpio_write>
    hal_i2c_delay_us(4);
   1909e:	2004      	movs	r0, #4
   190a0:	f7ff ff5a 	bl	18f58 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   190a4:	2101      	movs	r1, #1
   190a6:	4630      	mov	r0, r6
   190a8:	f7ff feda 	bl	18e60 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   190ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   190b0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   190b4:	f240 620c 	movw	r2, #1548	; 0x60c
   190b8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   190bc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   190c0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   190c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000190c8 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   190c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   190ca:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   190cc:	b1a1      	cbz	r1, 190f8 <hal_i2c_init+0x30>
   190ce:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   190d0:	a901      	add	r1, sp, #4
   190d2:	f7ff ff7f 	bl	18fd4 <hal_i2c_resolve>
    if (rc != 0) {
   190d6:	4606      	mov	r6, r0
   190d8:	bba8      	cbnz	r0, 19146 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   190da:	9b01      	ldr	r3, [sp, #4]
   190dc:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   190de:	68a3      	ldr	r3, [r4, #8]
   190e0:	2bfa      	cmp	r3, #250	; 0xfa
   190e2:	d035      	beq.n	19150 <hal_i2c_init+0x88>
   190e4:	d90e      	bls.n	19104 <hal_i2c_init+0x3c>
   190e6:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   190ea:	d02f      	beq.n	1914c <hal_i2c_init+0x84>
   190ec:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   190f0:	d131      	bne.n	19156 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   190f2:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   190f6:	e009      	b.n	1910c <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   190f8:	2300      	movs	r3, #0
   190fa:	461a      	mov	r2, r3
   190fc:	4619      	mov	r1, r3
   190fe:	4618      	mov	r0, r3
   19100:	f000 fc88 	bl	19a14 <__assert_func>
    switch (cfg->i2c_frequency) {
   19104:	2b64      	cmp	r3, #100	; 0x64
   19106:	d126      	bne.n	19156 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19108:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1910c:	6861      	ldr	r1, [r4, #4]
   1910e:	6820      	ldr	r0, [r4, #0]
   19110:	f7ff ff89 	bl	19026 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19114:	6823      	ldr	r3, [r4, #0]
   19116:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1911a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1911e:	f240 610c 	movw	r1, #1548	; 0x60c
   19122:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19126:	6863      	ldr	r3, [r4, #4]
   19128:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1912c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19130:	6823      	ldr	r3, [r4, #0]
   19132:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19136:	6863      	ldr	r3, [r4, #4]
   19138:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1913c:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19140:	2305      	movs	r3, #5
   19142:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19146:	4630      	mov	r0, r6
   19148:	b003      	add	sp, #12
   1914a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1914c:	4f03      	ldr	r7, [pc, #12]	; (1915c <hal_i2c_init+0x94>)
        break;
   1914e:	e7dd      	b.n	1910c <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19150:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19154:	e7da      	b.n	1910c <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19156:	2602      	movs	r6, #2
   19158:	e7f5      	b.n	19146 <hal_i2c_init+0x7e>
   1915a:	bf00      	nop
   1915c:	06147ae9 	.word	0x06147ae9

00019160 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19164:	b083      	sub	sp, #12
   19166:	4688      	mov	r8, r1
   19168:	4615      	mov	r5, r2
   1916a:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1916c:	a901      	add	r1, sp, #4
   1916e:	f7ff ff31 	bl	18fd4 <hal_i2c_resolve>
    if (rc != 0) {
   19172:	4681      	mov	r9, r0
   19174:	b118      	cbz	r0, 1917e <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19176:	4648      	mov	r0, r9
   19178:	b003      	add	sp, #12
   1917a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1917e:	9b01      	ldr	r3, [sp, #4]
   19180:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   19182:	f898 3000 	ldrb.w	r3, [r8]
   19186:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   1918a:	2300      	movs	r3, #0
   1918c:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   19190:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   19194:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   19198:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   1919c:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   191a0:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   191a4:	2300      	movs	r3, #0
   191a6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   191aa:	2301      	movs	r3, #1
   191ac:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   191ae:	f000 fe61 	bl	19e74 <os_cputime_get32>
   191b2:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   191b6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   191ba:	f7ff fe62 	bl	18e82 <hal_gpio_read>
   191be:	b1b0      	cbz	r0, 191ee <hal_i2c_master_write+0x8e>
   191c0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   191c4:	b99b      	cbnz	r3, 191ee <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   191c6:	f000 fe55 	bl	19e74 <os_cputime_get32>
   191ca:	1b80      	subs	r0, r0, r6
   191cc:	2800      	cmp	r0, #0
   191ce:	dbf2      	blt.n	191b6 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   191d0:	2300      	movs	r3, #0
   191d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   191d6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   191da:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   191de:	f7ff ff22 	bl	19026 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   191e2:	2305      	movs	r3, #5
   191e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   191e8:	f1bb 0b01 	subs.w	fp, fp, #1
   191ec:	d1da      	bne.n	191a4 <hal_i2c_master_write+0x44>
    start = os_time_get();
   191ee:	f001 fe2f 	bl	1ae50 <os_time_get>
   191f2:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   191f4:	464f      	mov	r7, r9
   191f6:	e003      	b.n	19200 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   191f8:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191fc:	b9db      	cbnz	r3, 19236 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   191fe:	3701      	adds	r7, #1
   19200:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19204:	42bb      	cmp	r3, r7
   19206:	dd24      	ble.n	19252 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19208:	2300      	movs	r3, #0
   1920a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1920e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19212:	5ddb      	ldrb	r3, [r3, r7]
   19214:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19218:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1921c:	2b00      	cmp	r3, #0
   1921e:	d1eb      	bne.n	191f8 <hal_i2c_master_write+0x98>
   19220:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19224:	2b00      	cmp	r3, #0
   19226:	d1e7      	bne.n	191f8 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19228:	f001 fe12 	bl	1ae50 <os_time_get>
   1922c:	1b80      	subs	r0, r0, r6
   1922e:	42a8      	cmp	r0, r5
   19230:	d9f2      	bls.n	19218 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   19232:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19236:	2301      	movs	r3, #1
   19238:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1923a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1923e:	2b00      	cmp	r3, #0
   19240:	d099      	beq.n	19176 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   19242:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19246:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1924a:	f7ff fed5 	bl	18ff8 <hal_i2c_convert_status>
   1924e:	4681      	mov	r9, r0
   19250:	e791      	b.n	19176 <hal_i2c_master_write+0x16>
    if (last_op) {
   19252:	f1ba 0f00 	cmp.w	sl, #0
   19256:	d08e      	beq.n	19176 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   19258:	2300      	movs	r3, #0
   1925a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1925e:	2301      	movs	r3, #1
   19260:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   19262:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19266:	b953      	cbnz	r3, 1927e <hal_i2c_master_write+0x11e>
   19268:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1926c:	b93b      	cbnz	r3, 1927e <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1926e:	f001 fdef 	bl	1ae50 <os_time_get>
   19272:	1b80      	subs	r0, r0, r6
   19274:	42a8      	cmp	r0, r5
   19276:	d9f4      	bls.n	19262 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   19278:	f04f 0903 	mov.w	r9, #3
   1927c:	e7db      	b.n	19236 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1927e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19282:	2b00      	cmp	r3, #0
   19284:	d1d7      	bne.n	19236 <hal_i2c_master_write+0xd6>
   19286:	e776      	b.n	19176 <hal_i2c_master_write+0x16>

00019288 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   19288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1928c:	b085      	sub	sp, #20
   1928e:	460f      	mov	r7, r1
   19290:	4615      	mov	r5, r2
   19292:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   19294:	a903      	add	r1, sp, #12
   19296:	f7ff fe9d 	bl	18fd4 <hal_i2c_resolve>
    if (rc != 0) {
   1929a:	4681      	mov	r9, r0
   1929c:	b118      	cbz	r0, 192a6 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   1929e:	4648      	mov	r0, r9
   192a0:	b005      	add	sp, #20
   192a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   192a6:	9b03      	ldr	r3, [sp, #12]
   192a8:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   192aa:	f001 fdd1 	bl	1ae50 <os_time_get>
   192ae:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   192b0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   192b4:	b11b      	cbz	r3, 192be <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   192b6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   192ba:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   192be:	2300      	movs	r3, #0
   192c0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   192c4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   192c8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   192cc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   192d0:	783b      	ldrb	r3, [r7, #0]
   192d2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   192d6:	887b      	ldrh	r3, [r7, #2]
   192d8:	2b01      	cmp	r3, #1
   192da:	d02e      	beq.n	1933a <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   192dc:	2301      	movs	r3, #1
   192de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   192e2:	46a2      	mov	sl, r4
    int retry = 2;
   192e4:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   192e8:	2300      	movs	r3, #0
   192ea:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   192ee:	2301      	movs	r3, #1
   192f0:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   192f4:	f000 fdbe 	bl	19e74 <os_cputime_get32>
   192f8:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   192fc:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19300:	f7ff fdbf 	bl	18e82 <hal_gpio_read>
   19304:	b1b8      	cbz	r0, 19336 <hal_i2c_master_read+0xae>
   19306:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1930a:	b9a3      	cbnz	r3, 19336 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1930c:	f000 fdb2 	bl	19e74 <os_cputime_get32>
   19310:	eba0 0008 	sub.w	r0, r0, r8
   19314:	2800      	cmp	r0, #0
   19316:	dbf1      	blt.n	192fc <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19318:	2300      	movs	r3, #0
   1931a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1931e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19322:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19326:	f7ff fe7e 	bl	19026 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1932a:	2305      	movs	r3, #5
   1932c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19330:	f1bb 0b01 	subs.w	fp, fp, #1
   19334:	d1d8      	bne.n	192e8 <hal_i2c_master_read+0x60>
    int retry = 2;
   19336:	46c8      	mov	r8, r9
   19338:	e017      	b.n	1936a <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1933a:	9b01      	ldr	r3, [sp, #4]
   1933c:	2b00      	cmp	r3, #0
   1933e:	d0cd      	beq.n	192dc <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   19340:	2302      	movs	r3, #2
   19342:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19346:	e7cc      	b.n	192e2 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   19348:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1934c:	bb0b      	cbnz	r3, 19392 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1934e:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   19352:	687b      	ldr	r3, [r7, #4]
   19354:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   19358:	887b      	ldrh	r3, [r7, #2]
   1935a:	3b02      	subs	r3, #2
   1935c:	4543      	cmp	r3, r8
   1935e:	d02a      	beq.n	193b6 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   19360:	2300      	movs	r3, #0
   19362:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   19366:	f108 0801 	add.w	r8, r8, #1
   1936a:	887b      	ldrh	r3, [r7, #2]
   1936c:	4543      	cmp	r3, r8
   1936e:	dd96      	ble.n	1929e <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   19370:	2301      	movs	r3, #1
   19372:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   19374:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19378:	2b00      	cmp	r3, #0
   1937a:	d1e5      	bne.n	19348 <hal_i2c_master_read+0xc0>
   1937c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19380:	2b00      	cmp	r3, #0
   19382:	d1e1      	bne.n	19348 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   19384:	f001 fd64 	bl	1ae50 <os_time_get>
   19388:	1b80      	subs	r0, r0, r6
   1938a:	42a8      	cmp	r0, r5
   1938c:	d9f2      	bls.n	19374 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   1938e:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19392:	2301      	movs	r3, #1
   19394:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   19396:	2300      	movs	r3, #0
   19398:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   1939c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   193a0:	2b00      	cmp	r3, #0
   193a2:	f43f af7c 	beq.w	1929e <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   193a6:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   193aa:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   193ae:	f7ff fe23 	bl	18ff8 <hal_i2c_convert_status>
   193b2:	4681      	mov	r9, r0
   193b4:	e773      	b.n	1929e <hal_i2c_master_read+0x16>
            if (last_op) {
   193b6:	9b01      	ldr	r3, [sp, #4]
   193b8:	2b00      	cmp	r3, #0
   193ba:	d0d1      	beq.n	19360 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   193bc:	2302      	movs	r3, #2
   193be:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   193c2:	e7cd      	b.n	19360 <hal_i2c_master_read+0xd8>

000193c4 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   193c4:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   193c6:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   193c8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   193cc:	b32b      	cbz	r3, 1941a <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   193ce:	2300      	movs	r3, #0
   193d0:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   193d4:	7843      	ldrb	r3, [r0, #1]
   193d6:	b303      	cbz	r3, 1941a <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   193d8:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   193dc:	88c3      	ldrh	r3, [r0, #6]
   193de:	fa13 f382 	uxtah	r3, r3, r2
   193e2:	b29b      	uxth	r3, r3
   193e4:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   193e6:	8881      	ldrh	r1, [r0, #4]
   193e8:	428b      	cmp	r3, r1
   193ea:	d217      	bcs.n	1941c <nrf52_irqm_handler+0x58>
   193ec:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   193ee:	6984      	ldr	r4, [r0, #24]
   193f0:	4414      	add	r4, r2
   193f2:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   193f4:	1acb      	subs	r3, r1, r3
   193f6:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   193f8:	2bff      	cmp	r3, #255	; 0xff
   193fa:	bf28      	it	cs
   193fc:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   193fe:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   19402:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   19406:	69c1      	ldr	r1, [r0, #28]
   19408:	b129      	cbz	r1, 19416 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1940a:	440a      	add	r2, r1
   1940c:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1940e:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   19412:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   19416:	2301      	movs	r3, #1
   19418:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1941a:	bd38      	pop	{r3, r4, r5, pc}
   1941c:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1941e:	6a03      	ldr	r3, [r0, #32]
   19420:	b10b      	cbz	r3, 19426 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   19422:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19424:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   19426:	2300      	movs	r3, #0
   19428:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1942a:	2340      	movs	r3, #64	; 0x40
   1942c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   19430:	e7f3      	b.n	1941a <nrf52_irqm_handler+0x56>
	...

00019434 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   19434:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   19436:	4b04      	ldr	r3, [pc, #16]	; (19448 <nrf52_spi0_irq_handler+0x14>)
   19438:	781b      	ldrb	r3, [r3, #0]
   1943a:	b103      	cbz	r3, 1943e <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1943c:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1943e:	4802      	ldr	r0, [pc, #8]	; (19448 <nrf52_spi0_irq_handler+0x14>)
   19440:	f7ff ffc0 	bl	193c4 <nrf52_irqm_handler>
}
   19444:	e7fa      	b.n	1943c <nrf52_spi0_irq_handler+0x8>
   19446:	bf00      	nop
   19448:	2000e5c0 	.word	0x2000e5c0

0001944c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1944c:	2301      	movs	r3, #1
   1944e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   19450:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   19454:	2b00      	cmp	r3, #0
   19456:	d0fb      	beq.n	19450 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   19458:	2300      	movs	r3, #0
   1945a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1945e:	4770      	bx	lr

00019460 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   19460:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   19462:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   19464:	780b      	ldrb	r3, [r1, #0]
   19466:	2b03      	cmp	r3, #3
   19468:	d80c      	bhi.n	19484 <hal_spi_config_slave+0x24>
   1946a:	e8df f003 	tbb	[pc, r3]
   1946e:	0e02      	.short	0x0e02
   19470:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   19472:	2300      	movs	r3, #0
    rc = 0;
   19474:	4618      	mov	r0, r3
   19476:	e00a      	b.n	1948e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19478:	2304      	movs	r3, #4
    rc = 0;
   1947a:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1947c:	e007      	b.n	1948e <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1947e:	2306      	movs	r3, #6
    rc = 0;
   19480:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   19482:	e004      	b.n	1948e <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   19484:	2300      	movs	r3, #0
            rc = EINVAL;
   19486:	2016      	movs	r0, #22
            break;
   19488:	e001      	b.n	1948e <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   1948a:	2302      	movs	r3, #2
    rc = 0;
   1948c:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   1948e:	784c      	ldrb	r4, [r1, #1]
   19490:	2c01      	cmp	r4, #1
   19492:	d006      	beq.n	194a2 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   19494:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   19498:	788b      	ldrb	r3, [r1, #2]
   1949a:	b92b      	cbnz	r3, 194a8 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   1949c:	f85d 4b04 	ldr.w	r4, [sp], #4
   194a0:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   194a2:	f043 0301 	orr.w	r3, r3, #1
   194a6:	e7f5      	b.n	19494 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   194a8:	2016      	movs	r0, #22
    return rc;
   194aa:	e7f7      	b.n	1949c <hal_spi_config_slave+0x3c>

000194ac <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   194ac:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   194ae:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   194b0:	2501      	movs	r5, #1
   194b2:	409d      	lsls	r5, r3
   194b4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   194b8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   194bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   194c0:	2503      	movs	r5, #3
   194c2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   194c6:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   194c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   194cc:	2500      	movs	r5, #0
   194ce:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   194d2:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   194d4:	780c      	ldrb	r4, [r1, #0]
   194d6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   194da:	784c      	ldrb	r4, [r1, #1]
   194dc:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   194e0:	7889      	ldrb	r1, [r1, #2]
   194e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   194e6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   194ea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   194ee:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   194f2:	4919      	ldr	r1, [pc, #100]	; (19558 <hal_spi_init_master+0xac>)
   194f4:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   194f6:	3310      	adds	r3, #16
   194f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   194fc:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19500:	42ab      	cmp	r3, r5
   19502:	db22      	blt.n	1954a <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19504:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19508:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1950c:	22e0      	movs	r2, #224	; 0xe0
   1950e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   19512:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19516:	2b00      	cmp	r3, #0
   19518:	db08      	blt.n	1952c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1951a:	f003 011f 	and.w	r1, r3, #31
   1951e:	095b      	lsrs	r3, r3, #5
   19520:	2201      	movs	r2, #1
   19522:	408a      	lsls	r2, r1
   19524:	3360      	adds	r3, #96	; 0x60
   19526:	490d      	ldr	r1, [pc, #52]	; (1955c <hal_spi_init_master+0xb0>)
   19528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1952c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19530:	2b00      	cmp	r3, #0
   19532:	db07      	blt.n	19544 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19534:	f003 011f 	and.w	r1, r3, #31
   19538:	095b      	lsrs	r3, r3, #5
   1953a:	2201      	movs	r2, #1
   1953c:	408a      	lsls	r2, r1
   1953e:	4907      	ldr	r1, [pc, #28]	; (1955c <hal_spi_init_master+0xb0>)
   19540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   19544:	2000      	movs	r0, #0
   19546:	bc30      	pop	{r4, r5}
   19548:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1954a:	f003 030f 	and.w	r3, r3, #15
   1954e:	4a04      	ldr	r2, [pc, #16]	; (19560 <hal_spi_init_master+0xb4>)
   19550:	441a      	add	r2, r3
   19552:	23e0      	movs	r3, #224	; 0xe0
   19554:	7613      	strb	r3, [r2, #24]
   19556:	e7dc      	b.n	19512 <hal_spi_init_master+0x66>
   19558:	e000ed00 	.word	0xe000ed00
   1955c:	e000e100 	.word	0xe000e100
   19560:	e000ecfc 	.word	0xe000ecfc

00019564 <hal_spi_config_master>:
{
   19564:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   19566:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   19568:	680c      	ldr	r4, [r1, #0]
   1956a:	684b      	ldr	r3, [r1, #4]
   1956c:	6084      	str	r4, [r0, #8]
   1956e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   19570:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   19574:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   19578:	7808      	ldrb	r0, [r1, #0]
   1957a:	2801      	cmp	r0, #1
   1957c:	d916      	bls.n	195ac <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1957e:	2001      	movs	r0, #1
   19580:	4098      	lsls	r0, r3
   19582:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   19586:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   1958a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1958e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   19592:	2403      	movs	r4, #3
   19594:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   19598:	788b      	ldrb	r3, [r1, #2]
   1959a:	b973      	cbnz	r3, 195ba <hal_spi_config_master+0x56>
    rc = 0;
   1959c:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   1959e:	780b      	ldrb	r3, [r1, #0]
   195a0:	2b03      	cmp	r3, #3
   195a2:	d812      	bhi.n	195ca <hal_spi_config_master+0x66>
   195a4:	e8df f003 	tbb	[pc, r3]
   195a8:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   195ac:	2001      	movs	r0, #1
   195ae:	4098      	lsls	r0, r3
   195b0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   195b4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   195b8:	e7e7      	b.n	1958a <hal_spi_config_master+0x26>
            rc = EINVAL;
   195ba:	2016      	movs	r0, #22
   195bc:	e7ef      	b.n	1959e <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   195be:	2300      	movs	r3, #0
   195c0:	e007      	b.n	195d2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   195c2:	2304      	movs	r3, #4
            break;
   195c4:	e005      	b.n	195d2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   195c6:	2306      	movs	r3, #6
            break;
   195c8:	e003      	b.n	195d2 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   195ca:	2300      	movs	r3, #0
            rc = EINVAL;
   195cc:	2016      	movs	r0, #22
            break;
   195ce:	e000      	b.n	195d2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   195d0:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   195d2:	784c      	ldrb	r4, [r1, #1]
   195d4:	2c01      	cmp	r4, #1
   195d6:	d010      	beq.n	195fa <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   195d8:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   195dc:	684b      	ldr	r3, [r1, #4]
   195de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   195e2:	d023      	beq.n	1962c <hal_spi_config_master+0xc8>
   195e4:	d80c      	bhi.n	19600 <hal_spi_config_master+0x9c>
   195e6:	2bfa      	cmp	r3, #250	; 0xfa
   195e8:	d029      	beq.n	1963e <hal_spi_config_master+0xda>
   195ea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   195ee:	d01a      	beq.n	19626 <hal_spi_config_master+0xc2>
   195f0:	2b7d      	cmp	r3, #125	; 0x7d
   195f2:	d011      	beq.n	19618 <hal_spi_config_master+0xb4>
            frequency = 0;
   195f4:	2300      	movs	r3, #0
            rc = EINVAL;
   195f6:	2016      	movs	r0, #22
            break;
   195f8:	e010      	b.n	1961c <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   195fa:	f043 0301 	orr.w	r3, r3, #1
   195fe:	e7eb      	b.n	195d8 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   19600:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   19604:	d015      	beq.n	19632 <hal_spi_config_master+0xce>
   19606:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1960a:	d015      	beq.n	19638 <hal_spi_config_master+0xd4>
   1960c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   19610:	d1f0      	bne.n	195f4 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   19612:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   19616:	e001      	b.n	1961c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   19618:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1961c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   19620:	f85d 4b04 	ldr.w	r4, [sp], #4
   19624:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   19626:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1962a:	e7f7      	b.n	1961c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1962c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   19630:	e7f4      	b.n	1961c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   19632:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   19636:	e7f1      	b.n	1961c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   19638:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1963c:	e7ee      	b.n	1961c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1963e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19642:	e7eb      	b.n	1961c <hal_spi_config_master+0xb8>

00019644 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19644:	2802      	cmp	r0, #2
   19646:	dc10      	bgt.n	1966a <hal_spi_config+0x26>
{
   19648:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1964a:	4b0b      	ldr	r3, [pc, #44]	; (19678 <hal_spi_config+0x34>)
   1964c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19650:	b168      	cbz	r0, 1966e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   19652:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   19654:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   19658:	b95b      	cbnz	r3, 19672 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1965a:	7803      	ldrb	r3, [r0, #0]
   1965c:	b113      	cbz	r3, 19664 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1965e:	f7ff feff 	bl	19460 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   19662:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   19664:	f7ff ff7e 	bl	19564 <hal_spi_config_master>
   19668:	e7fb      	b.n	19662 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1966a:	2016      	movs	r0, #22
}
   1966c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1966e:	2016      	movs	r0, #22
   19670:	e7f7      	b.n	19662 <hal_spi_config+0x1e>
        return -1;
   19672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19676:	e7f4      	b.n	19662 <hal_spi_config+0x1e>
   19678:	00021108 	.word	0x00021108

0001967c <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1967c:	2802      	cmp	r0, #2
   1967e:	dc1b      	bgt.n	196b8 <hal_spi_enable+0x3c>
   19680:	4b10      	ldr	r3, [pc, #64]	; (196c4 <hal_spi_enable+0x48>)
   19682:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   19686:	b1cb      	cbz	r3, 196bc <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19688:	781a      	ldrb	r2, [r3, #0]
   1968a:	b17a      	cbz	r2, 196ac <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   1968c:	6a1a      	ldr	r2, [r3, #32]
   1968e:	b1ba      	cbz	r2, 196c0 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   19690:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   19692:	2000      	movs	r0, #0
   19694:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19698:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   1969c:	f240 4202 	movw	r2, #1026	; 0x402
   196a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   196a4:	2202      	movs	r2, #2
   196a6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   196aa:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   196ac:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   196ae:	2201      	movs	r2, #1
   196b0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   196b4:	2000      	movs	r0, #0
   196b6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196b8:	2016      	movs	r0, #22
   196ba:	4770      	bx	lr
   196bc:	2016      	movs	r0, #22
   196be:	4770      	bx	lr
            rc = EINVAL;
   196c0:	2016      	movs	r0, #22

err:
    return rc;
}
   196c2:	4770      	bx	lr
   196c4:	00021108 	.word	0x00021108

000196c8 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196c8:	2802      	cmp	r0, #2
   196ca:	dc2a      	bgt.n	19722 <hal_spi_disable+0x5a>
{
   196cc:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196ce:	4b17      	ldr	r3, [pc, #92]	; (1972c <hal_spi_disable+0x64>)
   196d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   196d4:	b33c      	cbz	r4, 19726 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   196d6:	7823      	ldrb	r3, [r4, #0]
   196d8:	b9ab      	cbnz	r3, 19706 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   196da:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   196dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   196e0:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   196e4:	7863      	ldrb	r3, [r4, #1]
   196e6:	b943      	cbnz	r3, 196fa <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   196e8:	2300      	movs	r3, #0
   196ea:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   196ee:	2000      	movs	r0, #0
   196f0:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   196f2:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   196f4:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   196f6:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   196f8:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   196fa:	4628      	mov	r0, r5
   196fc:	f7ff fea6 	bl	1944c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   19700:	2300      	movs	r3, #0
   19702:	7063      	strb	r3, [r4, #1]
   19704:	e7f0      	b.n	196e8 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   19706:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1970c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   19710:	2300      	movs	r3, #0
   19712:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19716:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1971a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1971e:	70e3      	strb	r3, [r4, #3]
   19720:	e7e5      	b.n	196ee <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19722:	2016      	movs	r0, #22
}
   19724:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19726:	2016      	movs	r0, #22
    return rc;
   19728:	e7e6      	b.n	196f8 <hal_spi_disable+0x30>
   1972a:	bf00      	nop
   1972c:	00021108 	.word	0x00021108

00019730 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19730:	2802      	cmp	r0, #2
   19732:	dc1d      	bgt.n	19770 <hal_spi_init+0x40>
{
   19734:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19736:	4b13      	ldr	r3, [pc, #76]	; (19784 <hal_spi_init+0x54>)
   19738:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1973c:	b1d4      	cbz	r4, 19774 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1973e:	b1d9      	cbz	r1, 19778 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   19740:	2a01      	cmp	r2, #1
   19742:	d81b      	bhi.n	1977c <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   19744:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   19746:	b9d8      	cbnz	r0, 19780 <hal_spi_init+0x50>
   19748:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1974a:	2303      	movs	r3, #3
   1974c:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1974e:	b94a      	cbnz	r2, 19764 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   19750:	4b0d      	ldr	r3, [pc, #52]	; (19788 <hal_spi_init+0x58>)
   19752:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   19754:	f7ff ffb8 	bl	196c8 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   19758:	4a0c      	ldr	r2, [pc, #48]	; (1978c <hal_spi_init+0x5c>)
   1975a:	4629      	mov	r1, r5
   1975c:	4620      	mov	r0, r4
   1975e:	f7ff fea5 	bl	194ac <hal_spi_init_master>
   19762:	e00c      	b.n	1977e <hal_spi_init+0x4e>
            assert(0);
   19764:	2300      	movs	r3, #0
   19766:	461a      	mov	r2, r3
   19768:	4619      	mov	r1, r3
   1976a:	4618      	mov	r0, r3
   1976c:	f000 f952 	bl	19a14 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19770:	2016      	movs	r0, #22
}
   19772:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19774:	2016      	movs	r0, #22
   19776:	e002      	b.n	1977e <hal_spi_init+0x4e>
    rc = EINVAL;
   19778:	2016      	movs	r0, #22
   1977a:	e000      	b.n	1977e <hal_spi_init+0x4e>
   1977c:	2016      	movs	r0, #22
}
   1977e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   19780:	2016      	movs	r0, #22
    return (rc);
   19782:	e7fc      	b.n	1977e <hal_spi_init+0x4e>
   19784:	00021108 	.word	0x00021108
   19788:	40003000 	.word	0x40003000
   1978c:	00019435 	.word	0x00019435

00019790 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19790:	2802      	cmp	r0, #2
   19792:	dc0a      	bgt.n	197aa <hal_spi_set_txrx_cb+0x1a>
   19794:	4b08      	ldr	r3, [pc, #32]	; (197b8 <hal_spi_set_txrx_cb+0x28>)
   19796:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1979a:	b143      	cbz	r3, 197ae <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   1979c:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   1979e:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   197a2:	b930      	cbnz	r0, 197b2 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   197a4:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   197a6:	625a      	str	r2, [r3, #36]	; 0x24
   197a8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   197aa:	2016      	movs	r0, #22
   197ac:	4770      	bx	lr
   197ae:	2016      	movs	r0, #22
   197b0:	4770      	bx	lr
        rc = -1;
   197b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   197b6:	4770      	bx	lr
   197b8:	00021108 	.word	0x00021108

000197bc <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   197bc:	2b00      	cmp	r3, #0
   197be:	d046      	beq.n	1984e <hal_spi_txrx+0x92>
{
   197c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   197c2:	460d      	mov	r5, r1
   197c4:	4617      	mov	r7, r2
   197c6:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   197c8:	2802      	cmp	r0, #2
   197ca:	dc42      	bgt.n	19852 <hal_spi_txrx+0x96>
   197cc:	4b25      	ldr	r3, [pc, #148]	; (19864 <hal_spi_txrx+0xa8>)
   197ce:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   197d2:	2b00      	cmp	r3, #0
   197d4:	d03f      	beq.n	19856 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   197d6:	781a      	ldrb	r2, [r3, #0]
   197d8:	2a00      	cmp	r2, #0
   197da:	d13e      	bne.n	1985a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   197dc:	2900      	cmp	r1, #0
   197de:	d03e      	beq.n	1985e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   197e0:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   197e2:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   197e6:	2b07      	cmp	r3, #7
   197e8:	d004      	beq.n	197f4 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   197ea:	b95b      	cbnz	r3, 19804 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   197ec:	2301      	movs	r3, #1
   197ee:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   197f2:	e007      	b.n	19804 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   197f4:	f7ff ff68 	bl	196c8 <hal_spi_disable>
   197f8:	e7f8      	b.n	197ec <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   197fa:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   197fe:	2300      	movs	r3, #0
   19800:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   19804:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19808:	2b00      	cmp	r3, #0
   1980a:	d1f6      	bne.n	197fa <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1980c:	782b      	ldrb	r3, [r5, #0]
   1980e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   19812:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   19814:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   19816:	2200      	movs	r2, #0
   19818:	e00d      	b.n	19836 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1981a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1981e:	2b00      	cmp	r3, #0
   19820:	d0fb      	beq.n	1981a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   19822:	2300      	movs	r3, #0
   19824:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   19828:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1982c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1982e:	b10f      	cbz	r7, 19834 <hal_spi_txrx+0x78>
                *rxd = rxval;
   19830:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   19834:	3201      	adds	r2, #1
   19836:	42b2      	cmp	r2, r6
   19838:	da07      	bge.n	1984a <hal_spi_txrx+0x8e>
            if (txcnt) {
   1983a:	2900      	cmp	r1, #0
   1983c:	d0ed      	beq.n	1981a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1983e:	786b      	ldrb	r3, [r5, #1]
   19840:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   19844:	3901      	subs	r1, #1
                ++txd;
   19846:	3501      	adds	r5, #1
   19848:	e7e7      	b.n	1981a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1984a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1984c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1984e:	2016      	movs	r0, #22
}
   19850:	4770      	bx	lr
    return rc;
   19852:	2016      	movs	r0, #22
   19854:	e7fa      	b.n	1984c <hal_spi_txrx+0x90>
   19856:	2016      	movs	r0, #22
   19858:	e7f8      	b.n	1984c <hal_spi_txrx+0x90>
   1985a:	2016      	movs	r0, #22
   1985c:	e7f6      	b.n	1984c <hal_spi_txrx+0x90>
   1985e:	2016      	movs	r0, #22
   19860:	e7f4      	b.n	1984c <hal_spi_txrx+0x90>
   19862:	bf00      	nop
   19864:	00021108 	.word	0x00021108

00019868 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19868:	2802      	cmp	r0, #2
   1986a:	dc57      	bgt.n	1991c <hal_spi_txrx_noblock+0xb4>
{
   1986c:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1986e:	4c35      	ldr	r4, [pc, #212]	; (19944 <hal_spi_txrx_noblock+0xdc>)
   19870:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   19874:	2800      	cmp	r0, #0
   19876:	d053      	beq.n	19920 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   19878:	6a04      	ldr	r4, [r0, #32]
   1987a:	2c00      	cmp	r4, #0
   1987c:	d052      	beq.n	19924 <hal_spi_txrx_noblock+0xbc>
   1987e:	2b00      	cmp	r3, #0
   19880:	d052      	beq.n	19928 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   19882:	7804      	ldrb	r4, [r0, #0]
   19884:	2c00      	cmp	r4, #0
   19886:	d137      	bne.n	198f8 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   19888:	2900      	cmp	r1, #0
   1988a:	d050      	beq.n	1992e <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   1988c:	7844      	ldrb	r4, [r0, #1]
   1988e:	2c00      	cmp	r4, #0
   19890:	d14f      	bne.n	19932 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   19892:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   19894:	2540      	movs	r5, #64	; 0x40
   19896:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   1989a:	2501      	movs	r5, #1
   1989c:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   1989e:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   198a2:	2d07      	cmp	r5, #7
   198a4:	d005      	beq.n	198b2 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   198a6:	2500      	movs	r5, #0
   198a8:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   198ac:	2507      	movs	r5, #7
   198ae:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   198b2:	2500      	movs	r5, #0
   198b4:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   198b6:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   198b8:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   198ba:	2bff      	cmp	r3, #255	; 0xff
   198bc:	bfa8      	it	ge
   198be:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   198c0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   198c4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   198c8:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   198ca:	b172      	cbz	r2, 198ea <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   198cc:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   198d0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   198d4:	2000      	movs	r0, #0
   198d6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   198da:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   198de:	2301      	movs	r3, #1
   198e0:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   198e2:	2340      	movs	r3, #64	; 0x40
   198e4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   198e8:	e01f      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   198ea:	3002      	adds	r0, #2
   198ec:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   198f0:	2301      	movs	r3, #1
   198f2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   198f6:	e7ed      	b.n	198d4 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   198f8:	b161      	cbz	r1, 19914 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   198fa:	2bff      	cmp	r3, #255	; 0xff
   198fc:	dc1c      	bgt.n	19938 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   198fe:	78c4      	ldrb	r4, [r0, #3]
   19900:	b9e4      	cbnz	r4, 1993c <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   19902:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   19904:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   19906:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   19908:	2301      	movs	r3, #1
   1990a:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1990c:	6902      	ldr	r2, [r0, #16]
   1990e:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   19910:	2000      	movs	r0, #0
   19912:	e00a      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19914:	2a00      	cmp	r2, #0
   19916:	d1f0      	bne.n	198fa <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   19918:	2016      	movs	r0, #22
   1991a:	e006      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1991c:	2016      	movs	r0, #22

err:
    return rc;
}
   1991e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19920:	2016      	movs	r0, #22
   19922:	e002      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19924:	2016      	movs	r0, #22
   19926:	e000      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
   19928:	2016      	movs	r0, #22
}
   1992a:	bc30      	pop	{r4, r5}
   1992c:	4770      	bx	lr
    rc = EINVAL;
   1992e:	2016      	movs	r0, #22
   19930:	e7fb      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   19932:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19936:	e7f8      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19938:	2016      	movs	r0, #22
   1993a:	e7f6      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1993c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19940:	e7f3      	b.n	1992a <hal_spi_txrx_noblock+0xc2>
   19942:	bf00      	nop
   19944:	00021108 	.word	0x00021108

00019948 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   19948:	b508      	push	{r3, lr}
    assert(0);
   1994a:	2300      	movs	r3, #0
   1994c:	461a      	mov	r2, r3
   1994e:	4619      	mov	r1, r3
   19950:	4618      	mov	r0, r3
   19952:	f000 f85f 	bl	19a14 <__assert_func>
	...

00019958 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   19958:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1995a:	4b06      	ldr	r3, [pc, #24]	; (19974 <nrf52_wdt_irq_handler+0x1c>)
   1995c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   19960:	f013 0f01 	tst.w	r3, #1
   19964:	d100      	bne.n	19968 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   19966:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   19968:	4b02      	ldr	r3, [pc, #8]	; (19974 <nrf52_wdt_irq_handler+0x1c>)
   1996a:	2200      	movs	r2, #0
   1996c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   19970:	f7ff ffea 	bl	19948 <nrf52_hal_wdt_default_handler>
   19974:	40010000 	.word	0x40010000

00019978 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   19978:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1997a:	4b17      	ldr	r3, [pc, #92]	; (199d8 <hal_watchdog_init+0x60>)
   1997c:	2201      	movs	r2, #1
   1997e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   19982:	4b16      	ldr	r3, [pc, #88]	; (199dc <hal_watchdog_init+0x64>)
   19984:	4298      	cmp	r0, r3
   19986:	d821      	bhi.n	199cc <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   19988:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   1998c:	0153      	lsls	r3, r2, #5
   1998e:	4a14      	ldr	r2, [pc, #80]	; (199e0 <hal_watchdog_init+0x68>)
   19990:	fba2 2303 	umull	r2, r3, r2, r3
   19994:	08db      	lsrs	r3, r3, #3
   19996:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1999a:	4b0f      	ldr	r3, [pc, #60]	; (199d8 <hal_watchdog_init+0x60>)
   1999c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   199a0:	4a10      	ldr	r2, [pc, #64]	; (199e4 <hal_watchdog_init+0x6c>)
   199a2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   199a4:	4910      	ldr	r1, [pc, #64]	; (199e8 <hal_watchdog_init+0x70>)
   199a6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   199aa:	4a10      	ldr	r2, [pc, #64]	; (199ec <hal_watchdog_init+0x74>)
   199ac:	21e0      	movs	r1, #224	; 0xe0
   199ae:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   199b2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   199b6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   199ba:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   199bc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   199c0:	f042 0201 	orr.w	r2, r2, #1
   199c4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   199c8:	2000      	movs	r0, #0
   199ca:	bd08      	pop	{r3, pc}
        assert(0);
   199cc:	2300      	movs	r3, #0
   199ce:	461a      	mov	r2, r3
   199d0:	4619      	mov	r1, r3
   199d2:	4618      	mov	r0, r3
   199d4:	f000 f81e 	bl	19a14 <__assert_func>
   199d8:	40010000 	.word	0x40010000
   199dc:	02aaaaaa 	.word	0x02aaaaaa
   199e0:	10624dd3 	.word	0x10624dd3
   199e4:	e000ed00 	.word	0xe000ed00
   199e8:	00019959 	.word	0x00019959
   199ec:	e000e100 	.word	0xe000e100

000199f0 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   199f0:	4b02      	ldr	r3, [pc, #8]	; (199fc <hal_watchdog_enable+0xc>)
   199f2:	2201      	movs	r2, #1
   199f4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   199f8:	601a      	str	r2, [r3, #0]
}
   199fa:	4770      	bx	lr
   199fc:	40010000 	.word	0x40010000

00019a00 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   19a00:	4b02      	ldr	r3, [pc, #8]	; (19a0c <hal_watchdog_tickle+0xc>)
   19a02:	4a03      	ldr	r2, [pc, #12]	; (19a10 <hal_watchdog_tickle+0x10>)
   19a04:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   19a08:	4770      	bx	lr
   19a0a:	bf00      	nop
   19a0c:	40010000 	.word	0x40010000
   19a10:	6e524635 	.word	0x6e524635

00019a14 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   19a14:	b508      	push	{r3, lr}
   19a16:	4675      	mov	r5, lr
   19a18:	4604      	mov	r4, r0
   19a1a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   19a1c:	f001 fa90 	bl	1af40 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   19a20:	f7ff f905 	bl	18c2e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   19a24:	b18c      	cbz	r4, 19a4a <__assert_func+0x36>
   19a26:	4633      	mov	r3, r6
   19a28:	4622      	mov	r2, r4
   19a2a:	4629      	mov	r1, r5
   19a2c:	4809      	ldr	r0, [pc, #36]	; (19a54 <__assert_func+0x40>)
   19a2e:	f7ff f929 	bl	18c84 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   19a32:	f7ee fba7 	bl	8184 <hal_debugger_connected>
   19a36:	b100      	cbz	r0, 19a3a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   19a38:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   19a3a:	4b07      	ldr	r3, [pc, #28]	; (19a58 <__assert_func+0x44>)
   19a3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19a40:	605a      	str	r2, [r3, #4]
    asm("isb");
   19a42:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   19a46:	f7ee fba5 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   19a4a:	4629      	mov	r1, r5
   19a4c:	4803      	ldr	r0, [pc, #12]	; (19a5c <__assert_func+0x48>)
   19a4e:	f7ff f919 	bl	18c84 <console_printf>
   19a52:	e7ee      	b.n	19a32 <__assert_func+0x1e>
   19a54:	00021124 	.word	0x00021124
   19a58:	e000ed00 	.word	0xe000ed00
   19a5c:	00021114 	.word	0x00021114

00019a60 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   19a60:	b500      	push	{lr}
   19a62:	b083      	sub	sp, #12
   19a64:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   19a66:	f7ff f8e2 	bl	18c2e <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   19a6a:	4d1b      	ldr	r5, [pc, #108]	; (19ad8 <os_default_irq+0x78>)
   19a6c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   19a6e:	6822      	ldr	r2, [r4, #0]
   19a70:	f3c1 0108 	ubfx	r1, r1, #0, #9
   19a74:	4819      	ldr	r0, [pc, #100]	; (19adc <os_default_irq+0x7c>)
   19a76:	f7ff f905 	bl	18c84 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   19a7a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   19a7c:	6883      	ldr	r3, [r0, #8]
   19a7e:	6842      	ldr	r2, [r0, #4]
   19a80:	6801      	ldr	r1, [r0, #0]
   19a82:	68c0      	ldr	r0, [r0, #12]
   19a84:	9000      	str	r0, [sp, #0]
   19a86:	4816      	ldr	r0, [pc, #88]	; (19ae0 <os_default_irq+0x80>)
   19a88:	f7ff f8fc 	bl	18c84 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   19a8c:	6923      	ldr	r3, [r4, #16]
   19a8e:	9300      	str	r3, [sp, #0]
   19a90:	68e3      	ldr	r3, [r4, #12]
   19a92:	68a2      	ldr	r2, [r4, #8]
   19a94:	6861      	ldr	r1, [r4, #4]
   19a96:	4813      	ldr	r0, [pc, #76]	; (19ae4 <os_default_irq+0x84>)
   19a98:	f7ff f8f4 	bl	18c84 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   19a9c:	6a23      	ldr	r3, [r4, #32]
   19a9e:	9300      	str	r3, [sp, #0]
   19aa0:	69e3      	ldr	r3, [r4, #28]
   19aa2:	69a2      	ldr	r2, [r4, #24]
   19aa4:	6961      	ldr	r1, [r4, #20]
   19aa6:	4810      	ldr	r0, [pc, #64]	; (19ae8 <os_default_irq+0x88>)
   19aa8:	f7ff f8ec 	bl	18c84 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   19aac:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   19aae:	6983      	ldr	r3, [r0, #24]
   19ab0:	6942      	ldr	r2, [r0, #20]
   19ab2:	6901      	ldr	r1, [r0, #16]
   19ab4:	69c0      	ldr	r0, [r0, #28]
   19ab6:	9000      	str	r0, [sp, #0]
   19ab8:	480c      	ldr	r0, [pc, #48]	; (19aec <os_default_irq+0x8c>)
   19aba:	f7ff f8e3 	bl	18c84 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   19abe:	6869      	ldr	r1, [r5, #4]
   19ac0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   19ac2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   19ac4:	480a      	ldr	r0, [pc, #40]	; (19af0 <os_default_irq+0x90>)
   19ac6:	f7ff f8dd 	bl	18c84 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   19aca:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   19acc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   19ace:	4809      	ldr	r0, [pc, #36]	; (19af4 <os_default_irq+0x94>)
   19ad0:	f7ff f8d8 	bl	18c84 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   19ad4:	f7ee fb5e 	bl	8194 <hal_system_reset>
   19ad8:	e000ed00 	.word	0xe000ed00
   19adc:	0002113c 	.word	0x0002113c
   19ae0:	00021170 	.word	0x00021170
   19ae4:	000211a4 	.word	0x000211a4
   19ae8:	000211d8 	.word	0x000211d8
   19aec:	0002120c 	.word	0x0002120c
   19af0:	00021240 	.word	0x00021240
   19af4:	00021268 	.word	0x00021268

00019af8 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   19af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   19afa:	f7ff ff81 	bl	19a00 <hal_watchdog_tickle>
    sanity_last = 0;
   19afe:	2500      	movs	r5, #0
   19b00:	e00b      	b.n	19b1a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   19b02:	f000 fec7 	bl	1a894 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   19b06:	f7ff ff7b 	bl	19a00 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   19b0a:	4625      	mov	r5, r4
   19b0c:	e011      	b.n	19b32 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   19b0e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   19b10:	f002 f842 	bl	1bb98 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   19b14:	4638      	mov	r0, r7
   19b16:	f001 fa19 	bl	1af4c <os_arch_restore_sr>
        ++g_os_idle_ctr;
   19b1a:	4a14      	ldr	r2, [pc, #80]	; (19b6c <os_idle_task+0x74>)
   19b1c:	6813      	ldr	r3, [r2, #0]
   19b1e:	3301      	adds	r3, #1
   19b20:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   19b22:	f001 f995 	bl	1ae50 <os_time_get>
   19b26:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   19b28:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19b2c:	1ac3      	subs	r3, r0, r3
   19b2e:	2b00      	cmp	r3, #0
   19b30:	dce7      	bgt.n	19b02 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   19b32:	f001 fa05 	bl	1af40 <os_arch_save_sr>
   19b36:	4607      	mov	r7, r0
        now = os_time_get();
   19b38:	f001 f98a 	bl	1ae50 <os_time_get>
   19b3c:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   19b3e:	f000 ffd7 	bl	1aaf0 <os_sched_wakeup_ticks>
   19b42:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   19b44:	4630      	mov	r0, r6
   19b46:	f000 f975 	bl	19e34 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   19b4a:	42a0      	cmp	r0, r4
   19b4c:	bf28      	it	cs
   19b4e:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   19b50:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19b54:	1b9b      	subs	r3, r3, r6
   19b56:	4298      	cmp	r0, r3
   19b58:	bf28      	it	cs
   19b5a:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   19b5c:	280b      	cmp	r0, #11
   19b5e:	d9d6      	bls.n	19b0e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   19b60:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   19b64:	d9d4      	bls.n	19b10 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   19b66:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   19b6a:	e7d1      	b.n	19b10 <os_idle_task+0x18>
   19b6c:	2000e68c 	.word	0x2000e68c

00019b70 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   19b70:	b508      	push	{r3, lr}
   19b72:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   19b74:	2100      	movs	r1, #0
   19b76:	4608      	mov	r0, r1
   19b78:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   19b7a:	2300      	movs	r3, #0
   19b7c:	461a      	mov	r2, r3
   19b7e:	4619      	mov	r1, r3
   19b80:	4618      	mov	r0, r3
   19b82:	f7ff ff47 	bl	19a14 <__assert_func>
	...

00019b88 <os_started>:
}
   19b88:	4b01      	ldr	r3, [pc, #4]	; (19b90 <os_started+0x8>)
   19b8a:	6818      	ldr	r0, [r3, #0]
   19b8c:	4770      	bx	lr
   19b8e:	bf00      	nop
   19b90:	2000e688 	.word	0x2000e688

00019b94 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   19b94:	b500      	push	{lr}
   19b96:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   19b98:	2340      	movs	r3, #64	; 0x40
   19b9a:	9303      	str	r3, [sp, #12]
   19b9c:	4b15      	ldr	r3, [pc, #84]	; (19bf4 <os_init_idle_task+0x60>)
   19b9e:	9302      	str	r3, [sp, #8]
   19ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ba4:	9301      	str	r3, [sp, #4]
   19ba6:	23ff      	movs	r3, #255	; 0xff
   19ba8:	9300      	str	r3, [sp, #0]
   19baa:	2300      	movs	r3, #0
   19bac:	4a12      	ldr	r2, [pc, #72]	; (19bf8 <os_init_idle_task+0x64>)
   19bae:	4913      	ldr	r1, [pc, #76]	; (19bfc <os_init_idle_task+0x68>)
   19bb0:	4813      	ldr	r0, [pc, #76]	; (19c00 <os_init_idle_task+0x6c>)
   19bb2:	f001 f88d 	bl	1acd0 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   19bb6:	b950      	cbnz	r0, 19bce <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   19bb8:	f000 fea2 	bl	1a900 <os_sanity_init>
    assert(rc == 0);
   19bbc:	b968      	cbnz	r0, 19bda <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   19bbe:	f247 5030 	movw	r0, #30000	; 0x7530
   19bc2:	f7ff fed9 	bl	19978 <hal_watchdog_init>
    assert(rc == 0);
   19bc6:	b970      	cbnz	r0, 19be6 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   19bc8:	b005      	add	sp, #20
   19bca:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19bce:	2300      	movs	r3, #0
   19bd0:	461a      	mov	r2, r3
   19bd2:	4619      	mov	r1, r3
   19bd4:	4618      	mov	r0, r3
   19bd6:	f7ff ff1d 	bl	19a14 <__assert_func>
    assert(rc == 0);
   19bda:	2300      	movs	r3, #0
   19bdc:	461a      	mov	r2, r3
   19bde:	4619      	mov	r1, r3
   19be0:	4618      	mov	r0, r3
   19be2:	f7ff ff17 	bl	19a14 <__assert_func>
    assert(rc == 0);
   19be6:	2300      	movs	r3, #0
   19be8:	461a      	mov	r2, r3
   19bea:	4619      	mov	r1, r3
   19bec:	4618      	mov	r0, r3
   19bee:	f7ff ff11 	bl	19a14 <__assert_func>
   19bf2:	bf00      	nop
   19bf4:	20007770 	.word	0x20007770
   19bf8:	00019af9 	.word	0x00019af9
   19bfc:	0002128c 	.word	0x0002128c
   19c00:	2000e5e8 	.word	0x2000e5e8

00019c04 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19c04:	b510      	push	{r4, lr}
   19c06:	b084      	sub	sp, #16
   19c08:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19c0a:	4b24      	ldr	r3, [pc, #144]	; (19c9c <os_init+0x98>)
   19c0c:	2200      	movs	r2, #0
   19c0e:	601a      	str	r2, [r3, #0]
   19c10:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   19c12:	4b23      	ldr	r3, [pc, #140]	; (19ca0 <os_init+0x9c>)
   19c14:	601a      	str	r2, [r3, #0]
   19c16:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19c18:	f000 faba 	bl	1a190 <os_eventq_dflt_get>
   19c1c:	f000 fa0e 	bl	1a03c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   19c20:	f000 fa04 	bl	1a02c <os_dev_reset>

    err = os_arch_os_init();
   19c24:	f001 f9c6 	bl	1afb4 <os_arch_os_init>
    assert(err == OS_OK);
   19c28:	bb00      	cbnz	r0, 19c6c <os_init+0x68>

    if (main_fn) {
   19c2a:	b18c      	cbz	r4, 19c50 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19c2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   19c30:	9303      	str	r3, [sp, #12]
   19c32:	4b1c      	ldr	r3, [pc, #112]	; (19ca4 <os_init+0xa0>)
   19c34:	9302      	str	r3, [sp, #8]
   19c36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19c3a:	9301      	str	r3, [sp, #4]
   19c3c:	237f      	movs	r3, #127	; 0x7f
   19c3e:	9300      	str	r3, [sp, #0]
   19c40:	4623      	mov	r3, r4
   19c42:	4a19      	ldr	r2, [pc, #100]	; (19ca8 <os_init+0xa4>)
   19c44:	4919      	ldr	r1, [pc, #100]	; (19cac <os_init+0xa8>)
   19c46:	481a      	ldr	r0, [pc, #104]	; (19cb0 <os_init+0xac>)
   19c48:	f001 f842 	bl	1acd0 <os_task_init>
   19c4c:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19c4e:	b998      	cbnz	r0, 19c78 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   19c50:	f001 fe72 	bl	1b938 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19c54:	2001      	movs	r0, #1
   19c56:	f000 f985 	bl	19f64 <os_dev_initialize_all>
   19c5a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19c5c:	b990      	cbnz	r0, 19c84 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   19c5e:	2002      	movs	r0, #2
   19c60:	f000 f980 	bl	19f64 <os_dev_initialize_all>
   19c64:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19c66:	b998      	cbnz	r0, 19c90 <os_init+0x8c>
}
   19c68:	b004      	add	sp, #16
   19c6a:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19c6c:	2300      	movs	r3, #0
   19c6e:	461a      	mov	r2, r3
   19c70:	4619      	mov	r1, r3
   19c72:	4618      	mov	r0, r3
   19c74:	f7ff fece 	bl	19a14 <__assert_func>
        assert(err == 0);
   19c78:	2300      	movs	r3, #0
   19c7a:	461a      	mov	r2, r3
   19c7c:	4619      	mov	r1, r3
   19c7e:	4618      	mov	r0, r3
   19c80:	f7ff fec8 	bl	19a14 <__assert_func>
    assert(err == OS_OK);
   19c84:	2300      	movs	r3, #0
   19c86:	461a      	mov	r2, r3
   19c88:	4619      	mov	r1, r3
   19c8a:	4618      	mov	r0, r3
   19c8c:	f7ff fec2 	bl	19a14 <__assert_func>
    assert(err == OS_OK);
   19c90:	2300      	movs	r3, #0
   19c92:	461a      	mov	r2, r3
   19c94:	4619      	mov	r1, r3
   19c96:	4618      	mov	r0, r3
   19c98:	f7ff febc 	bl	19a14 <__assert_func>
   19c9c:	2000e690 	.word	0x2000e690
   19ca0:	2000e6b8 	.word	0x2000e6b8
   19ca4:	20007870 	.word	0x20007870
   19ca8:	00019b71 	.word	0x00019b71
   19cac:	00021284 	.word	0x00021284
   19cb0:	2000e638 	.word	0x2000e638

00019cb4 <os_start>:

void
os_start(void)
{
   19cb4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   19cb6:	f7ff fe9b 	bl	199f0 <hal_watchdog_enable>

    err = os_arch_os_start();
   19cba:	f001 f9db 	bl	1b074 <os_arch_os_start>
    assert(err == OS_OK);
   19cbe:	b900      	cbnz	r0, 19cc2 <os_start+0xe>
#else
    assert(0);
#endif
}
   19cc0:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   19cc2:	2300      	movs	r3, #0
   19cc4:	461a      	mov	r2, r3
   19cc6:	4619      	mov	r1, r3
   19cc8:	4618      	mov	r0, r3
   19cca:	f7ff fea3 	bl	19a14 <__assert_func>
	...

00019cd0 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   19cd0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19cd2:	4b0c      	ldr	r3, [pc, #48]	; (19d04 <os_pkg_init+0x34>)
   19cd4:	781b      	ldrb	r3, [r3, #0]
   19cd6:	b14b      	cbz	r3, 19cec <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19cd8:	2003      	movs	r0, #3
   19cda:	f000 f943 	bl	19f64 <os_dev_initialize_all>
   19cde:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19ce0:	b948      	cbnz	r0, 19cf6 <os_pkg_init+0x26>

    os_mempool_module_init();
   19ce2:	f000 fc25 	bl	1a530 <os_mempool_module_init>
    os_msys_init();
   19ce6:	f000 fcad 	bl	1a644 <os_msys_init>
}
   19cea:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19cec:	461a      	mov	r2, r3
   19cee:	4619      	mov	r1, r3
   19cf0:	4618      	mov	r0, r3
   19cf2:	f7ff fe8f 	bl	19a14 <__assert_func>
    assert(err == OS_OK);
   19cf6:	2300      	movs	r3, #0
   19cf8:	461a      	mov	r2, r3
   19cfa:	4619      	mov	r1, r3
   19cfc:	4618      	mov	r0, r3
   19cfe:	f7ff fe89 	bl	19a14 <__assert_func>
   19d02:	bf00      	nop
   19d04:	2000e5bc 	.word	0x2000e5bc

00019d08 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19d0a:	4604      	mov	r4, r0
   19d0c:	460d      	mov	r5, r1
   19d0e:	4617      	mov	r7, r2
   19d10:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19d12:	2220      	movs	r2, #32
   19d14:	2100      	movs	r1, #0
   19d16:	f001 fa80 	bl	1b21a <memset>
    c->c_ev.ev_cb = ev_cb;
   19d1a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19d1c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19d1e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019d24 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19d24:	b538      	push	{r3, r4, r5, lr}
   19d26:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19d28:	f001 f90a 	bl	1af40 <os_arch_save_sr>
   19d2c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19d2e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19d30:	b13b      	cbz	r3, 19d42 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19d32:	69a2      	ldr	r2, [r4, #24]
   19d34:	b172      	cbz	r2, 19d54 <os_callout_stop+0x30>
   19d36:	61d3      	str	r3, [r2, #28]
   19d38:	69e3      	ldr	r3, [r4, #28]
   19d3a:	69a2      	ldr	r2, [r4, #24]
   19d3c:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19d3e:	2300      	movs	r3, #0
   19d40:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19d42:	6920      	ldr	r0, [r4, #16]
   19d44:	b110      	cbz	r0, 19d4c <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   19d46:	4621      	mov	r1, r4
   19d48:	f000 fa02 	bl	1a150 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19d4c:	4628      	mov	r0, r5
   19d4e:	f001 f8fd 	bl	1af4c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19d52:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19d54:	4a01      	ldr	r2, [pc, #4]	; (19d5c <os_callout_stop+0x38>)
   19d56:	6053      	str	r3, [r2, #4]
   19d58:	e7ee      	b.n	19d38 <os_callout_stop+0x14>
   19d5a:	bf00      	nop
   19d5c:	2000e690 	.word	0x2000e690

00019d60 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19d60:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19d62:	6903      	ldr	r3, [r0, #16]
   19d64:	b1c3      	cbz	r3, 19d98 <os_callout_reset+0x38>
   19d66:	4605      	mov	r5, r0
   19d68:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   19d6a:	2900      	cmp	r1, #0
   19d6c:	db2f      	blt.n	19dce <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19d6e:	f001 f8e7 	bl	1af40 <os_arch_save_sr>
   19d72:	4606      	mov	r6, r0

    os_callout_stop(c);
   19d74:	4628      	mov	r0, r5
   19d76:	f7ff ffd5 	bl	19d24 <os_callout_stop>

    if (ticks == 0) {
   19d7a:	b904      	cbnz	r4, 19d7e <os_callout_reset+0x1e>
        ticks = 1;
   19d7c:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19d7e:	f001 f867 	bl	1ae50 <os_time_get>
   19d82:	4420      	add	r0, r4
   19d84:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19d86:	4b13      	ldr	r3, [pc, #76]	; (19dd4 <os_callout_reset+0x74>)
   19d88:	681b      	ldr	r3, [r3, #0]
   19d8a:	b153      	cbz	r3, 19da2 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19d8c:	695a      	ldr	r2, [r3, #20]
   19d8e:	1a82      	subs	r2, r0, r2
   19d90:	2a00      	cmp	r2, #0
   19d92:	db06      	blt.n	19da2 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19d94:	699b      	ldr	r3, [r3, #24]
   19d96:	e7f8      	b.n	19d8a <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   19d98:	461a      	mov	r2, r3
   19d9a:	4619      	mov	r1, r3
   19d9c:	4618      	mov	r0, r3
   19d9e:	f7ff fe39 	bl	19a14 <__assert_func>
            break;
        }
    }

    if (entry) {
   19da2:	b15b      	cbz	r3, 19dbc <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19da4:	69da      	ldr	r2, [r3, #28]
   19da6:	61ea      	str	r2, [r5, #28]
   19da8:	61ab      	str	r3, [r5, #24]
   19daa:	69da      	ldr	r2, [r3, #28]
   19dac:	6015      	str	r5, [r2, #0]
   19dae:	3518      	adds	r5, #24
   19db0:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   19db2:	4630      	mov	r0, r6
   19db4:	f001 f8ca 	bl	1af4c <os_arch_restore_sr>

    ret = OS_OK;
   19db8:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19dba:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19dbc:	2300      	movs	r3, #0
   19dbe:	61ab      	str	r3, [r5, #24]
   19dc0:	4b04      	ldr	r3, [pc, #16]	; (19dd4 <os_callout_reset+0x74>)
   19dc2:	685a      	ldr	r2, [r3, #4]
   19dc4:	61ea      	str	r2, [r5, #28]
   19dc6:	6015      	str	r5, [r2, #0]
   19dc8:	3518      	adds	r5, #24
   19dca:	605d      	str	r5, [r3, #4]
   19dcc:	e7f1      	b.n	19db2 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   19dce:	2002      	movs	r0, #2
    return ret;
   19dd0:	e7f3      	b.n	19dba <os_callout_reset+0x5a>
   19dd2:	bf00      	nop
   19dd4:	2000e690 	.word	0x2000e690

00019dd8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19dd8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19dda:	f001 f839 	bl	1ae50 <os_time_get>
   19dde:	4605      	mov	r5, r0
   19de0:	e00f      	b.n	19e02 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19de2:	69e2      	ldr	r2, [r4, #28]
   19de4:	4b12      	ldr	r3, [pc, #72]	; (19e30 <os_callout_tick+0x58>)
   19de6:	605a      	str	r2, [r3, #4]
   19de8:	69e3      	ldr	r3, [r4, #28]
   19dea:	69a2      	ldr	r2, [r4, #24]
   19dec:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19dee:	2300      	movs	r3, #0
   19df0:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   19df2:	f001 f8ab 	bl	1af4c <os_arch_restore_sr>

        if (c) {
   19df6:	b1d4      	cbz	r4, 19e2e <os_callout_tick+0x56>
            if (c->c_evq) {
   19df8:	6920      	ldr	r0, [r4, #16]
   19dfa:	b9a0      	cbnz	r0, 19e26 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19dfc:	6863      	ldr	r3, [r4, #4]
   19dfe:	4620      	mov	r0, r4
   19e00:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   19e02:	f001 f89d 	bl	1af40 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   19e06:	4b0a      	ldr	r3, [pc, #40]	; (19e30 <os_callout_tick+0x58>)
   19e08:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19e0a:	2c00      	cmp	r4, #0
   19e0c:	d0f1      	beq.n	19df2 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19e0e:	6963      	ldr	r3, [r4, #20]
   19e10:	1aeb      	subs	r3, r5, r3
   19e12:	2b00      	cmp	r3, #0
   19e14:	db05      	blt.n	19e22 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19e16:	69a3      	ldr	r3, [r4, #24]
   19e18:	2b00      	cmp	r3, #0
   19e1a:	d0e2      	beq.n	19de2 <os_callout_tick+0xa>
   19e1c:	69e2      	ldr	r2, [r4, #28]
   19e1e:	61da      	str	r2, [r3, #28]
   19e20:	e7e2      	b.n	19de8 <os_callout_tick+0x10>
                c = NULL;
   19e22:	2400      	movs	r4, #0
   19e24:	e7e5      	b.n	19df2 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   19e26:	4621      	mov	r1, r4
   19e28:	f000 f915 	bl	1a056 <os_eventq_put>
   19e2c:	e7e9      	b.n	19e02 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19e2e:	bd38      	pop	{r3, r4, r5, pc}
   19e30:	2000e690 	.word	0x2000e690

00019e34 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19e34:	b510      	push	{r4, lr}
   19e36:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19e38:	f001 f88b 	bl	1af52 <os_arch_in_critical>
   19e3c:	b130      	cbz	r0, 19e4c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   19e3e:	4b09      	ldr	r3, [pc, #36]	; (19e64 <os_callout_wakeup_ticks+0x30>)
   19e40:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   19e42:	b15b      	cbz	r3, 19e5c <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19e44:	6958      	ldr	r0, [r3, #20]
   19e46:	1b00      	subs	r0, r0, r4
   19e48:	d406      	bmi.n	19e58 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19e4a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19e4c:	2300      	movs	r3, #0
   19e4e:	461a      	mov	r2, r3
   19e50:	4619      	mov	r1, r3
   19e52:	4618      	mov	r0, r3
   19e54:	f7ff fdde 	bl	19a14 <__assert_func>
            rt = 0;     /* callout time is in the past */
   19e58:	2000      	movs	r0, #0
   19e5a:	e7f6      	b.n	19e4a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19e5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19e60:	e7f3      	b.n	19e4a <os_callout_wakeup_ticks+0x16>
   19e62:	bf00      	nop
   19e64:	2000e690 	.word	0x2000e690

00019e68 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   19e68:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   19e6a:	4601      	mov	r1, r0
   19e6c:	2000      	movs	r0, #0
   19e6e:	f002 f84d 	bl	1bf0c <hal_timer_config>
    return rc;
}
   19e72:	bd08      	pop	{r3, pc}

00019e74 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   19e74:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   19e76:	2000      	movs	r0, #0
   19e78:	f002 f8c4 	bl	1c004 <hal_timer_read>
    return cpu_time;
}
   19e7c:	bd08      	pop	{r3, pc}
	...

00019e80 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   19e80:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   19e82:	4b15      	ldr	r3, [pc, #84]	; (19ed8 <os_dev_add+0x58>)
   19e84:	681d      	ldr	r5, [r3, #0]
   19e86:	b115      	cbz	r5, 19e8e <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19e88:	462b      	mov	r3, r5
    prev_dev = NULL;
   19e8a:	2400      	movs	r4, #0
   19e8c:	e008      	b.n	19ea0 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19e8e:	4603      	mov	r3, r0
   19e90:	f843 5f20 	str.w	r5, [r3, #32]!
   19e94:	4a10      	ldr	r2, [pc, #64]	; (19ed8 <os_dev_add+0x58>)
   19e96:	6053      	str	r3, [r2, #4]
   19e98:	6010      	str	r0, [r2, #0]
        return (0);
   19e9a:	e010      	b.n	19ebe <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19e9c:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19e9e:	6a1b      	ldr	r3, [r3, #32]
   19ea0:	b143      	cbz	r3, 19eb4 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   19ea2:	7e01      	ldrb	r1, [r0, #24]
   19ea4:	7e1a      	ldrb	r2, [r3, #24]
   19ea6:	4291      	cmp	r1, r2
   19ea8:	d304      	bcc.n	19eb4 <os_dev_add+0x34>
   19eaa:	d1f7      	bne.n	19e9c <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   19eac:	7e41      	ldrb	r1, [r0, #25]
   19eae:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   19eb0:	4291      	cmp	r1, r2
   19eb2:	d2f3      	bcs.n	19e9c <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19eb4:	b15c      	cbz	r4, 19ece <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19eb6:	6a23      	ldr	r3, [r4, #32]
   19eb8:	6203      	str	r3, [r0, #32]
   19eba:	b11b      	cbz	r3, 19ec4 <os_dev_add+0x44>
   19ebc:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   19ebe:	2000      	movs	r0, #0
   19ec0:	bc30      	pop	{r4, r5}
   19ec2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19ec4:	f100 0320 	add.w	r3, r0, #32
   19ec8:	4a03      	ldr	r2, [pc, #12]	; (19ed8 <os_dev_add+0x58>)
   19eca:	6053      	str	r3, [r2, #4]
   19ecc:	e7f6      	b.n	19ebc <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19ece:	6205      	str	r5, [r0, #32]
   19ed0:	4b01      	ldr	r3, [pc, #4]	; (19ed8 <os_dev_add+0x58>)
   19ed2:	6018      	str	r0, [r3, #0]
   19ed4:	e7f3      	b.n	19ebe <os_dev_add+0x3e>
   19ed6:	bf00      	nop
   19ed8:	20009870 	.word	0x20009870

00019edc <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   19edc:	b510      	push	{r4, lr}
   19ede:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   19ee0:	6903      	ldr	r3, [r0, #16]
   19ee2:	6941      	ldr	r1, [r0, #20]
   19ee4:	4798      	blx	r3
    if (rc != 0) {
   19ee6:	4603      	mov	r3, r0
   19ee8:	b128      	cbz	r0, 19ef6 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   19eea:	7ee2      	ldrb	r2, [r4, #27]
   19eec:	f012 0f08 	tst.w	r2, #8
   19ef0:	d105      	bne.n	19efe <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   19ef2:	2300      	movs	r3, #0
   19ef4:	e003      	b.n	19efe <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   19ef6:	7ee2      	ldrb	r2, [r4, #27]
   19ef8:	f042 0201 	orr.w	r2, r2, #1
   19efc:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   19efe:	4618      	mov	r0, r3
   19f00:	bd10      	pop	{r4, pc}

00019f02 <os_dev_init>:
    dev->od_name = name;
   19f02:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   19f04:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   19f06:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   19f08:	2300      	movs	r3, #0
   19f0a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   19f0c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   19f0e:	9a00      	ldr	r2, [sp, #0]
   19f10:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   19f12:	9a01      	ldr	r2, [sp, #4]
   19f14:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   19f16:	6003      	str	r3, [r0, #0]
   19f18:	6043      	str	r3, [r0, #4]
   19f1a:	6083      	str	r3, [r0, #8]
   19f1c:	60c3      	str	r3, [r0, #12]
}
   19f1e:	4618      	mov	r0, r3
   19f20:	4770      	bx	lr
	...

00019f24 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19f24:	b530      	push	{r4, r5, lr}
   19f26:	b083      	sub	sp, #12
   19f28:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   19f2a:	9c07      	ldr	r4, [sp, #28]
   19f2c:	9401      	str	r4, [sp, #4]
   19f2e:	9c06      	ldr	r4, [sp, #24]
   19f30:	9400      	str	r4, [sp, #0]
   19f32:	f7ff ffe6 	bl	19f02 <os_dev_init>
    if (rc != 0) {
   19f36:	4603      	mov	r3, r0
   19f38:	b110      	cbz	r0, 19f40 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19f3a:	4618      	mov	r0, r3
   19f3c:	b003      	add	sp, #12
   19f3e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   19f40:	4628      	mov	r0, r5
   19f42:	f7ff ff9d 	bl	19e80 <os_dev_add>
    if (rc != 0) {
   19f46:	4603      	mov	r3, r0
   19f48:	2800      	cmp	r0, #0
   19f4a:	d1f6      	bne.n	19f3a <os_dev_create+0x16>
    if (g_os_started) {
   19f4c:	4a04      	ldr	r2, [pc, #16]	; (19f60 <os_dev_create+0x3c>)
   19f4e:	6812      	ldr	r2, [r2, #0]
   19f50:	2a00      	cmp	r2, #0
   19f52:	d0f2      	beq.n	19f3a <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   19f54:	4628      	mov	r0, r5
   19f56:	f7ff ffc1 	bl	19edc <os_dev_initialize>
   19f5a:	4603      	mov	r3, r0
    return (rc);
   19f5c:	e7ed      	b.n	19f3a <os_dev_create+0x16>
   19f5e:	bf00      	nop
   19f60:	2000e688 	.word	0x2000e688

00019f64 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   19f64:	b538      	push	{r3, r4, r5, lr}
   19f66:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19f68:	4b08      	ldr	r3, [pc, #32]	; (19f8c <os_dev_initialize_all+0x28>)
   19f6a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19f6c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19f6e:	e000      	b.n	19f72 <os_dev_initialize_all+0xe>
   19f70:	6a24      	ldr	r4, [r4, #32]
   19f72:	b144      	cbz	r4, 19f86 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   19f74:	7e23      	ldrb	r3, [r4, #24]
   19f76:	42ab      	cmp	r3, r5
   19f78:	d1fa      	bne.n	19f70 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19f7a:	4620      	mov	r0, r4
   19f7c:	f7ff ffae 	bl	19edc <os_dev_initialize>
            if (rc) {
   19f80:	4602      	mov	r2, r0
   19f82:	2800      	cmp	r0, #0
   19f84:	d0f4      	beq.n	19f70 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   19f86:	4610      	mov	r0, r2
   19f88:	bd38      	pop	{r3, r4, r5, pc}
   19f8a:	bf00      	nop
   19f8c:	20009870 	.word	0x20009870

00019f90 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19f90:	b538      	push	{r3, r4, r5, lr}
   19f92:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19f94:	4b05      	ldr	r3, [pc, #20]	; (19fac <os_dev_lookup+0x1c>)
   19f96:	681c      	ldr	r4, [r3, #0]
   19f98:	b134      	cbz	r4, 19fa8 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19f9a:	4629      	mov	r1, r5
   19f9c:	69e0      	ldr	r0, [r4, #28]
   19f9e:	f001 f958 	bl	1b252 <strcmp>
   19fa2:	b108      	cbz	r0, 19fa8 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19fa4:	6a24      	ldr	r4, [r4, #32]
   19fa6:	e7f7      	b.n	19f98 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19fa8:	4620      	mov	r0, r4
   19faa:	bd38      	pop	{r3, r4, r5, pc}
   19fac:	20009870 	.word	0x20009870

00019fb0 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19fb0:	b570      	push	{r4, r5, r6, lr}
   19fb2:	460d      	mov	r5, r1
   19fb4:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19fb6:	f7ff ffeb 	bl	19f90 <os_dev_lookup>
    if (dev == NULL) {
   19fba:	4604      	mov	r4, r0
   19fbc:	b1a0      	cbz	r0, 19fe8 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19fbe:	7ec3      	ldrb	r3, [r0, #27]
   19fc0:	f013 0f01 	tst.w	r3, #1
   19fc4:	d012      	beq.n	19fec <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19fc6:	6803      	ldr	r3, [r0, #0]
   19fc8:	b11b      	cbz	r3, 19fd2 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19fca:	4632      	mov	r2, r6
   19fcc:	4629      	mov	r1, r5
   19fce:	4798      	blx	r3
        if (rc != 0) {
   19fd0:	b970      	cbnz	r0, 19ff0 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19fd2:	f000 ffb5 	bl	1af40 <os_arch_save_sr>
    ++dev->od_open_ref;
   19fd6:	7ea3      	ldrb	r3, [r4, #26]
   19fd8:	3301      	adds	r3, #1
   19fda:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19fdc:	7ee3      	ldrb	r3, [r4, #27]
   19fde:	f043 0302 	orr.w	r3, r3, #2
   19fe2:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19fe4:	f000 ffb2 	bl	1af4c <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19fe8:	4620      	mov	r0, r4
   19fea:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19fec:	2400      	movs	r4, #0
   19fee:	e7fb      	b.n	19fe8 <os_dev_open+0x38>
    return (NULL);
   19ff0:	2400      	movs	r4, #0
   19ff2:	e7f9      	b.n	19fe8 <os_dev_open+0x38>

00019ff4 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19ff4:	b1b0      	cbz	r0, 1a024 <os_dev_close+0x30>
{
   19ff6:	b510      	push	{r4, lr}
   19ff8:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19ffa:	68c3      	ldr	r3, [r0, #12]
   19ffc:	b113      	cbz	r3, 1a004 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   19ffe:	4798      	blx	r3
        if (rc != 0) {
   1a000:	4603      	mov	r3, r0
   1a002:	b968      	cbnz	r0, 1a020 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1a004:	f000 ff9c 	bl	1af40 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   1a008:	7ea3      	ldrb	r3, [r4, #26]
   1a00a:	3b01      	subs	r3, #1
   1a00c:	b2db      	uxtb	r3, r3
   1a00e:	76a3      	strb	r3, [r4, #26]
   1a010:	b91b      	cbnz	r3, 1a01a <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1a012:	7ee3      	ldrb	r3, [r4, #27]
   1a014:	f023 0306 	bic.w	r3, r3, #6
   1a018:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   1a01a:	f000 ff97 	bl	1af4c <os_arch_restore_sr>

    return (0);
   1a01e:	2300      	movs	r3, #0
err:
    return (rc);
}
   1a020:	4618      	mov	r0, r3
   1a022:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1a024:	2302      	movs	r3, #2
}
   1a026:	4618      	mov	r0, r3
   1a028:	4770      	bx	lr
	...

0001a02c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   1a02c:	4b02      	ldr	r3, [pc, #8]	; (1a038 <os_dev_reset+0xc>)
   1a02e:	2200      	movs	r2, #0
   1a030:	601a      	str	r2, [r3, #0]
   1a032:	605b      	str	r3, [r3, #4]
}
   1a034:	4770      	bx	lr
   1a036:	bf00      	nop
   1a038:	20009870 	.word	0x20009870

0001a03c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   1a03c:	2200      	movs	r2, #0
   1a03e:	6002      	str	r2, [r0, #0]
   1a040:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1a042:	4603      	mov	r3, r0
   1a044:	f843 2f08 	str.w	r2, [r3, #8]!
   1a048:	60c3      	str	r3, [r0, #12]
}
   1a04a:	4770      	bx	lr

0001a04c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   1a04c:	68c0      	ldr	r0, [r0, #12]
}
   1a04e:	3000      	adds	r0, #0
   1a050:	bf18      	it	ne
   1a052:	2001      	movne	r0, #1
   1a054:	4770      	bx	lr

0001a056 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1a056:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   1a058:	b1f0      	cbz	r0, 1a098 <os_eventq_put+0x42>
   1a05a:	460c      	mov	r4, r1
   1a05c:	4605      	mov	r5, r0
   1a05e:	f7ff fff5 	bl	1a04c <os_eventq_inited>
   1a062:	b1c8      	cbz	r0, 1a098 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1a064:	f000 ff6c 	bl	1af40 <os_arch_save_sr>
   1a068:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   1a06a:	7823      	ldrb	r3, [r4, #0]
   1a06c:	b9d3      	cbnz	r3, 1a0a4 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   1a06e:	2301      	movs	r3, #1
   1a070:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   1a072:	2300      	movs	r3, #0
   1a074:	60e3      	str	r3, [r4, #12]
   1a076:	68eb      	ldr	r3, [r5, #12]
   1a078:	601c      	str	r4, [r3, #0]
   1a07a:	340c      	adds	r4, #12
   1a07c:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   1a07e:	6868      	ldr	r0, [r5, #4]
   1a080:	b1b8      	cbz	r0, 1a0b2 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   1a082:	7b03      	ldrb	r3, [r0, #12]
   1a084:	2b02      	cmp	r3, #2
   1a086:	d010      	beq.n	1a0aa <os_eventq_put+0x54>
    resched = 0;
   1a088:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   1a08a:	2300      	movs	r3, #0
   1a08c:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   1a08e:	4630      	mov	r0, r6
   1a090:	f000 ff5c 	bl	1af4c <os_arch_restore_sr>

    if (resched) {
   1a094:	b97c      	cbnz	r4, 1a0b6 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   1a096:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   1a098:	2300      	movs	r3, #0
   1a09a:	461a      	mov	r2, r3
   1a09c:	4619      	mov	r1, r3
   1a09e:	4618      	mov	r0, r3
   1a0a0:	f7ff fcb8 	bl	19a14 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   1a0a4:	f000 ff52 	bl	1af4c <os_arch_restore_sr>
   1a0a8:	e7f5      	b.n	1a096 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   1a0aa:	f000 fcc7 	bl	1aa3c <os_sched_wakeup>
            resched = 1;
   1a0ae:	2401      	movs	r4, #1
   1a0b0:	e7eb      	b.n	1a08a <os_eventq_put+0x34>
    resched = 0;
   1a0b2:	2400      	movs	r4, #0
   1a0b4:	e7eb      	b.n	1a08e <os_eventq_put+0x38>
        os_sched(NULL);
   1a0b6:	2000      	movs	r0, #0
   1a0b8:	f000 fd40 	bl	1ab3c <os_sched>
   1a0bc:	e7eb      	b.n	1a096 <os_eventq_put+0x40>

0001a0be <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   1a0be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a0c0:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1a0c2:	f000 fc67 	bl	1a994 <os_sched_get_current_task>
   1a0c6:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   1a0c8:	682b      	ldr	r3, [r5, #0]
   1a0ca:	4283      	cmp	r3, r0
   1a0cc:	d001      	beq.n	1a0d2 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   1a0ce:	b9db      	cbnz	r3, 1a108 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   1a0d0:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1a0d2:	f000 ff35 	bl	1af40 <os_arch_save_sr>
   1a0d6:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   1a0d8:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   1a0da:	b9de      	cbnz	r6, 1a114 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   1a0dc:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   1a0de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a0e2:	4620      	mov	r0, r4
   1a0e4:	f000 fc62 	bl	1a9ac <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1a0e8:	7b63      	ldrb	r3, [r4, #13]
   1a0ea:	f043 0308 	orr.w	r3, r3, #8
   1a0ee:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1a0f0:	4638      	mov	r0, r7
   1a0f2:	f000 ff2b 	bl	1af4c <os_arch_restore_sr>

        os_sched(NULL);
   1a0f6:	2000      	movs	r0, #0
   1a0f8:	f000 fd20 	bl	1ab3c <os_sched>

        OS_ENTER_CRITICAL(sr);
   1a0fc:	f000 ff20 	bl	1af40 <os_arch_save_sr>
   1a100:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1a102:	2300      	movs	r3, #0
   1a104:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1a106:	e7e7      	b.n	1a0d8 <os_eventq_get+0x1a>
            assert(0);
   1a108:	2300      	movs	r3, #0
   1a10a:	461a      	mov	r2, r3
   1a10c:	4619      	mov	r1, r3
   1a10e:	4618      	mov	r0, r3
   1a110:	f7ff fc80 	bl	19a14 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a114:	68f3      	ldr	r3, [r6, #12]
   1a116:	60ab      	str	r3, [r5, #8]
   1a118:	b153      	cbz	r3, 1a130 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1a11a:	2300      	movs	r3, #0
   1a11c:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1a11e:	7b63      	ldrb	r3, [r4, #13]
   1a120:	f023 0308 	bic.w	r3, r3, #8
   1a124:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1a126:	4638      	mov	r0, r7
   1a128:	f000 ff10 	bl	1af4c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1a12c:	4630      	mov	r0, r6
   1a12e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a130:	f105 0308 	add.w	r3, r5, #8
   1a134:	60eb      	str	r3, [r5, #12]
   1a136:	e7f0      	b.n	1a11a <os_eventq_get+0x5c>

0001a138 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1a138:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1a13a:	f7ff ffc0 	bl	1a0be <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1a13e:	6843      	ldr	r3, [r0, #4]
   1a140:	b10b      	cbz	r3, 1a146 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1a142:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1a144:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1a146:	461a      	mov	r2, r3
   1a148:	4619      	mov	r1, r3
   1a14a:	4618      	mov	r0, r3
   1a14c:	f7ff fc62 	bl	19a14 <__assert_func>

0001a150 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1a150:	b538      	push	{r3, r4, r5, lr}
   1a152:	4605      	mov	r5, r0
   1a154:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1a156:	f000 fef3 	bl	1af40 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1a15a:	7823      	ldrb	r3, [r4, #0]
   1a15c:	b183      	cbz	r3, 1a180 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a15e:	68aa      	ldr	r2, [r5, #8]
   1a160:	42a2      	cmp	r2, r4
   1a162:	d107      	bne.n	1a174 <os_eventq_remove+0x24>
   1a164:	68d3      	ldr	r3, [r2, #12]
   1a166:	60ab      	str	r3, [r5, #8]
   1a168:	b953      	cbnz	r3, 1a180 <os_eventq_remove+0x30>
   1a16a:	f105 0308 	add.w	r3, r5, #8
   1a16e:	60eb      	str	r3, [r5, #12]
   1a170:	e006      	b.n	1a180 <os_eventq_remove+0x30>
   1a172:	461a      	mov	r2, r3
   1a174:	68d3      	ldr	r3, [r2, #12]
   1a176:	42a3      	cmp	r3, r4
   1a178:	d1fb      	bne.n	1a172 <os_eventq_remove+0x22>
   1a17a:	68db      	ldr	r3, [r3, #12]
   1a17c:	60d3      	str	r3, [r2, #12]
   1a17e:	b123      	cbz	r3, 1a18a <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1a180:	2300      	movs	r3, #0
   1a182:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1a184:	f000 fee2 	bl	1af4c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1a188:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a18a:	320c      	adds	r2, #12
   1a18c:	60ea      	str	r2, [r5, #12]
   1a18e:	e7f7      	b.n	1a180 <os_eventq_remove+0x30>

0001a190 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1a190:	4800      	ldr	r0, [pc, #0]	; (1a194 <os_eventq_dflt_get+0x4>)
   1a192:	4770      	bx	lr
   1a194:	20009878 	.word	0x20009878

0001a198 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1a198:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1a19a:	2000      	movs	r0, #0
   1a19c:	6018      	str	r0, [r3, #0]
   1a19e:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1a1a0:	6098      	str	r0, [r3, #8]
   1a1a2:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1a1a4:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1a1a6:	611a      	str	r2, [r3, #16]

    return (0);
}
   1a1a8:	4770      	bx	lr

0001a1aa <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1a1aa:	b538      	push	{r3, r4, r5, lr}
   1a1ac:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a1ae:	f000 fec7 	bl	1af40 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1a1b2:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1a1b4:	b114      	cbz	r4, 1a1bc <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a1b6:	6863      	ldr	r3, [r4, #4]
   1a1b8:	602b      	str	r3, [r5, #0]
   1a1ba:	b12b      	cbz	r3, 1a1c8 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1a1bc:	f000 fec6 	bl	1af4c <os_arch_restore_sr>

    if (mp) {
   1a1c0:	b124      	cbz	r4, 1a1cc <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1a1c2:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1a1c6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a1c8:	606d      	str	r5, [r5, #4]
   1a1ca:	e7f7      	b.n	1a1bc <os_mqueue_get+0x12>
        m = NULL;
   1a1cc:	2000      	movs	r0, #0
    return (m);
   1a1ce:	e7fa      	b.n	1a1c6 <os_mqueue_get+0x1c>

0001a1d0 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1a1d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1a1d2:	7953      	ldrb	r3, [r2, #5]
   1a1d4:	2b07      	cmp	r3, #7
   1a1d6:	d916      	bls.n	1a206 <os_mqueue_put+0x36>
   1a1d8:	4614      	mov	r4, r2
   1a1da:	460e      	mov	r6, r1
   1a1dc:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1a1de:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1a1e2:	f000 fead 	bl	1af40 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a1e6:	2300      	movs	r3, #0
   1a1e8:	f844 3f14 	str.w	r3, [r4, #20]!
   1a1ec:	686b      	ldr	r3, [r5, #4]
   1a1ee:	601f      	str	r7, [r3, #0]
   1a1f0:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a1f2:	f000 feab 	bl	1af4c <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a1f6:	b146      	cbz	r6, 1a20a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a1f8:	f105 0108 	add.w	r1, r5, #8
   1a1fc:	4630      	mov	r0, r6
   1a1fe:	f7ff ff2a 	bl	1a056 <os_eventq_put>
    }

    return (0);
   1a202:	2000      	movs	r0, #0
   1a204:	e000      	b.n	1a208 <os_mqueue_put+0x38>
err:
    return (rc);
   1a206:	2002      	movs	r0, #2
}
   1a208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a20a:	2000      	movs	r0, #0
   1a20c:	e7fc      	b.n	1a208 <os_mqueue_put+0x38>

0001a20e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a20e:	3a10      	subs	r2, #16
   1a210:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a212:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a214:	2000      	movs	r0, #0
   1a216:	4770      	bx	lr

0001a218 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a218:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a21a:	8803      	ldrh	r3, [r0, #0]
   1a21c:	428b      	cmp	r3, r1
   1a21e:	d312      	bcc.n	1a246 <os_mbuf_get+0x2e>
   1a220:	460d      	mov	r5, r1
   1a222:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a224:	6840      	ldr	r0, [r0, #4]
   1a226:	f000 f947 	bl	1a4b8 <os_memblock_get>
    if (!om) {
   1a22a:	4603      	mov	r3, r0
   1a22c:	b148      	cbz	r0, 1a242 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a22e:	2200      	movs	r2, #0
   1a230:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a232:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a234:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a236:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a238:	f100 0110 	add.w	r1, r0, #16
   1a23c:	4429      	add	r1, r5
   1a23e:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a240:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a242:	4618      	mov	r0, r3
   1a244:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a246:	2300      	movs	r3, #0
    return om;
   1a248:	e7fb      	b.n	1a242 <os_mbuf_get+0x2a>

0001a24a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a24a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a24c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a250:	8803      	ldrh	r3, [r0, #0]
   1a252:	42ab      	cmp	r3, r5
   1a254:	d310      	bcc.n	1a278 <os_mbuf_get_pkthdr+0x2e>
   1a256:	2dff      	cmp	r5, #255	; 0xff
   1a258:	d810      	bhi.n	1a27c <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a25a:	2100      	movs	r1, #0
   1a25c:	f7ff ffdc 	bl	1a218 <os_mbuf_get>
    if (om) {
   1a260:	4603      	mov	r3, r0
   1a262:	b138      	cbz	r0, 1a274 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a264:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a266:	6802      	ldr	r2, [r0, #0]
   1a268:	4415      	add	r5, r2
   1a26a:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a26c:	2200      	movs	r2, #0
   1a26e:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a270:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a272:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a274:	4618      	mov	r0, r3
   1a276:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a278:	2300      	movs	r3, #0
   1a27a:	e7fb      	b.n	1a274 <os_mbuf_get_pkthdr+0x2a>
   1a27c:	2300      	movs	r3, #0
    return om;
   1a27e:	e7f9      	b.n	1a274 <os_mbuf_get_pkthdr+0x2a>

0001a280 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a280:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a282:	6883      	ldr	r3, [r0, #8]
   1a284:	b123      	cbz	r3, 1a290 <os_mbuf_free+0x10>
   1a286:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a288:	6858      	ldr	r0, [r3, #4]
   1a28a:	f000 f93d 	bl	1a508 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a28e:	bd08      	pop	{r3, pc}
    rc = 0;
   1a290:	2000      	movs	r0, #0
    return (rc);
   1a292:	e7fc      	b.n	1a28e <os_mbuf_free+0xe>

0001a294 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a294:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a296:	b160      	cbz	r0, 1a2b2 <os_mbuf_free_chain+0x1e>
{
   1a298:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a29a:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a29c:	4618      	mov	r0, r3
   1a29e:	f7ff ffef 	bl	1a280 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a2a2:	4623      	mov	r3, r4
        if (rc != 0) {
   1a2a4:	4602      	mov	r2, r0
   1a2a6:	b910      	cbnz	r0, 1a2ae <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a2a8:	2c00      	cmp	r4, #0
   1a2aa:	d1f6      	bne.n	1a29a <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a2ac:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a2ae:	4610      	mov	r0, r2
   1a2b0:	bd10      	pop	{r4, pc}
    rc = 0;
   1a2b2:	2200      	movs	r2, #0
}
   1a2b4:	4610      	mov	r0, r2
   1a2b6:	4770      	bx	lr

0001a2b8 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1a2b8:	2300      	movs	r3, #0
    while (om != NULL) {
   1a2ba:	e003      	b.n	1a2c4 <os_mbuf_len+0xc>
        len += om->om_len;
   1a2bc:	88c2      	ldrh	r2, [r0, #6]
   1a2be:	4413      	add	r3, r2
   1a2c0:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1a2c2:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1a2c4:	2800      	cmp	r0, #0
   1a2c6:	d1f9      	bne.n	1a2bc <os_mbuf_len+0x4>
    }

    return len;
}
   1a2c8:	4618      	mov	r0, r3
   1a2ca:	4770      	bx	lr

0001a2cc <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1a2cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1a2d0:	2800      	cmp	r0, #0
   1a2d2:	d04d      	beq.n	1a370 <os_mbuf_append+0xa4>
   1a2d4:	460f      	mov	r7, r1
   1a2d6:	4691      	mov	r9, r2
   1a2d8:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1a2da:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1a2de:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a2e0:	e000      	b.n	1a2e4 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1a2e2:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a2e4:	68eb      	ldr	r3, [r5, #12]
   1a2e6:	2b00      	cmp	r3, #0
   1a2e8:	d1fb      	bne.n	1a2e2 <os_mbuf_append+0x16>
    }

    remainder = len;
   1a2ea:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1a2ec:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a2ee:	f105 0410 	add.w	r4, r5, #16
   1a2f2:	881b      	ldrh	r3, [r3, #0]
   1a2f4:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1a2f6:	6828      	ldr	r0, [r5, #0]
   1a2f8:	88eb      	ldrh	r3, [r5, #6]
   1a2fa:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a2fc:	1a24      	subs	r4, r4, r0
   1a2fe:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1a300:	b164      	cbz	r4, 1a31c <os_mbuf_append+0x50>
        if (space > remainder) {
   1a302:	454c      	cmp	r4, r9
   1a304:	dd00      	ble.n	1a308 <os_mbuf_append+0x3c>
            space = remainder;
   1a306:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1a308:	4622      	mov	r2, r4
   1a30a:	4639      	mov	r1, r7
   1a30c:	f000 ff78 	bl	1b200 <memcpy>

        last->om_len += space;
   1a310:	88eb      	ldrh	r3, [r5, #6]
   1a312:	4423      	add	r3, r4
   1a314:	80eb      	strh	r3, [r5, #6]
        data += space;
   1a316:	4427      	add	r7, r4
        remainder -= space;
   1a318:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1a31c:	2e00      	cmp	r6, #0
   1a31e:	dd16      	ble.n	1a34e <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1a320:	2100      	movs	r1, #0
   1a322:	4640      	mov	r0, r8
   1a324:	f7ff ff78 	bl	1a218 <os_mbuf_get>
        if (!new) {
   1a328:	4604      	mov	r4, r0
   1a32a:	b180      	cbz	r0, 1a34e <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1a32c:	f8b8 2000 	ldrh.w	r2, [r8]
   1a330:	42b2      	cmp	r2, r6
   1a332:	bfa8      	it	ge
   1a334:	4632      	movge	r2, r6
   1a336:	b292      	uxth	r2, r2
   1a338:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1a33a:	4639      	mov	r1, r7
   1a33c:	6800      	ldr	r0, [r0, #0]
   1a33e:	f000 ff5f 	bl	1b200 <memcpy>
        data += new->om_len;
   1a342:	88e3      	ldrh	r3, [r4, #6]
   1a344:	441f      	add	r7, r3
        remainder -= new->om_len;
   1a346:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1a348:	60ec      	str	r4, [r5, #12]
        last = new;
   1a34a:	4625      	mov	r5, r4
   1a34c:	e7e6      	b.n	1a31c <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a34e:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1a352:	2b07      	cmp	r3, #7
   1a354:	d907      	bls.n	1a366 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1a356:	eba9 0906 	sub.w	r9, r9, r6
   1a35a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1a35e:	fa13 f989 	uxtah	r9, r3, r9
   1a362:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1a366:	b106      	cbz	r6, 1a36a <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1a368:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1a36a:	4630      	mov	r0, r6
   1a36c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1a370:	2602      	movs	r6, #2
   1a372:	e7fa      	b.n	1a36a <os_mbuf_append+0x9e>

0001a374 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1a374:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a378:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1a37a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1a37e:	2700      	movs	r7, #0
    head = NULL;
   1a380:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a382:	e017      	b.n	1a3b4 <os_mbuf_dup+0x40>
    startoff = 0;
   1a384:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a386:	4623      	mov	r3, r4
   1a388:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a38c:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a38e:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1a390:	b299      	uxth	r1, r3
   1a392:	4640      	mov	r0, r8
   1a394:	f7ff ff40 	bl	1a218 <os_mbuf_get>
   1a398:	4605      	mov	r5, r0
   1a39a:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1a39c:	b188      	cbz	r0, 1a3c2 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1a39e:	7923      	ldrb	r3, [r4, #4]
   1a3a0:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1a3a2:	88e3      	ldrh	r3, [r4, #6]
   1a3a4:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1a3a6:	88e2      	ldrh	r2, [r4, #6]
   1a3a8:	6821      	ldr	r1, [r4, #0]
   1a3aa:	6828      	ldr	r0, [r5, #0]
   1a3ac:	f000 ff28 	bl	1b200 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a3b0:	68e4      	ldr	r4, [r4, #12]
   1a3b2:	462f      	mov	r7, r5
   1a3b4:	b14c      	cbz	r4, 1a3ca <os_mbuf_dup+0x56>
        if (head) {
   1a3b6:	b15e      	cbz	r6, 1a3d0 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a3b8:	7963      	ldrb	r3, [r4, #5]
   1a3ba:	2b07      	cmp	r3, #7
   1a3bc:	d9e2      	bls.n	1a384 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1a3be:	b299      	uxth	r1, r3
   1a3c0:	e7e1      	b.n	1a386 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1a3c2:	4630      	mov	r0, r6
   1a3c4:	f7ff ff66 	bl	1a294 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1a3c8:	462e      	mov	r6, r5
}
   1a3ca:	4630      	mov	r0, r6
   1a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a3d0:	7963      	ldrb	r3, [r4, #5]
   1a3d2:	2b07      	cmp	r3, #7
   1a3d4:	d911      	bls.n	1a3fa <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1a3d6:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a3d8:	4623      	mov	r3, r4
   1a3da:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a3de:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a3e0:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1a3e2:	b299      	uxth	r1, r3
   1a3e4:	4640      	mov	r0, r8
   1a3e6:	f7ff ff17 	bl	1a218 <os_mbuf_get>
            if (!head) {
   1a3ea:	4606      	mov	r6, r0
   1a3ec:	2800      	cmp	r0, #0
   1a3ee:	d0ec      	beq.n	1a3ca <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1a3f0:	7963      	ldrb	r3, [r4, #5]
   1a3f2:	2b07      	cmp	r3, #7
   1a3f4:	d803      	bhi.n	1a3fe <os_mbuf_dup+0x8a>
            copy = head;
   1a3f6:	4605      	mov	r5, r0
   1a3f8:	e7d1      	b.n	1a39e <os_mbuf_dup+0x2a>
    startoff = 0;
   1a3fa:	2100      	movs	r1, #0
   1a3fc:	e7ec      	b.n	1a3d8 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1a3fe:	88c3      	ldrh	r3, [r0, #6]
   1a400:	b973      	cbnz	r3, 1a420 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1a402:	f100 0510 	add.w	r5, r0, #16
   1a406:	7962      	ldrb	r2, [r4, #5]
   1a408:	f104 0110 	add.w	r1, r4, #16
   1a40c:	4628      	mov	r0, r5
   1a40e:	f000 fef7 	bl	1b200 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1a412:	7963      	ldrb	r3, [r4, #5]
   1a414:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1a416:	7963      	ldrb	r3, [r4, #5]
   1a418:	441d      	add	r5, r3
   1a41a:	6035      	str	r5, [r6, #0]
            copy = head;
   1a41c:	4635      	mov	r5, r6
   1a41e:	e7be      	b.n	1a39e <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1a420:	2300      	movs	r3, #0
   1a422:	461a      	mov	r2, r3
   1a424:	4619      	mov	r1, r3
   1a426:	4618      	mov	r0, r3
   1a428:	f7ff faf4 	bl	19a14 <__assert_func>

0001a42c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1a42c:	2800      	cmp	r0, #0
   1a42e:	d031      	beq.n	1a494 <os_mempool_init_internal+0x68>
{
   1a430:	b430      	push	{r4, r5}
   1a432:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1a434:	2a00      	cmp	r2, #0
   1a436:	d02f      	beq.n	1a498 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1a438:	b1bb      	cbz	r3, 1a46a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1a43a:	b113      	cbz	r3, 1a442 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1a43c:	f013 0f03 	tst.w	r3, #3
   1a440:	d12c      	bne.n	1a49c <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1a442:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1a444:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1a446:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1a448:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a44c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1a44e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1a450:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1a452:	9802      	ldr	r0, [sp, #8]
   1a454:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1a456:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1a458:	b199      	cbz	r1, 1a482 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1a45a:	f012 0f03 	tst.w	r2, #3
   1a45e:	d002      	beq.n	1a466 <os_mempool_init_internal+0x3a>
   1a460:	f022 0203 	bic.w	r2, r2, #3
   1a464:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1a466:	2001      	movs	r0, #1
   1a468:	e007      	b.n	1a47a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1a46a:	2900      	cmp	r1, #0
   1a46c:	d0e5      	beq.n	1a43a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1a46e:	2003      	movs	r0, #3
   1a470:	e00e      	b.n	1a490 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1a472:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1a474:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1a476:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1a478:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1a47a:	4281      	cmp	r1, r0
   1a47c:	dcf9      	bgt.n	1a472 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1a47e:	2200      	movs	r2, #0
   1a480:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1a482:	2000      	movs	r0, #0
   1a484:	6120      	str	r0, [r4, #16]
   1a486:	4b06      	ldr	r3, [pc, #24]	; (1a4a0 <os_mempool_init_internal+0x74>)
   1a488:	685a      	ldr	r2, [r3, #4]
   1a48a:	6014      	str	r4, [r2, #0]
   1a48c:	3410      	adds	r4, #16
   1a48e:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1a490:	bc30      	pop	{r4, r5}
   1a492:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a494:	2003      	movs	r0, #3
}
   1a496:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a498:	2003      	movs	r0, #3
   1a49a:	e7f9      	b.n	1a490 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1a49c:	2004      	movs	r0, #4
   1a49e:	e7f7      	b.n	1a490 <os_mempool_init_internal+0x64>
   1a4a0:	2000e698 	.word	0x2000e698

0001a4a4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1a4a4:	b510      	push	{r4, lr}
   1a4a6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1a4a8:	2400      	movs	r4, #0
   1a4aa:	9401      	str	r4, [sp, #4]
   1a4ac:	9c04      	ldr	r4, [sp, #16]
   1a4ae:	9400      	str	r4, [sp, #0]
   1a4b0:	f7ff ffbc 	bl	1a42c <os_mempool_init_internal>
}
   1a4b4:	b002      	add	sp, #8
   1a4b6:	bd10      	pop	{r4, pc}

0001a4b8 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1a4b8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1a4ba:	b1a0      	cbz	r0, 1a4e6 <os_memblock_get+0x2e>
   1a4bc:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a4be:	f000 fd3f 	bl	1af40 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1a4c2:	88e3      	ldrh	r3, [r4, #6]
   1a4c4:	b153      	cbz	r3, 1a4dc <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1a4c6:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1a4c8:	682a      	ldr	r2, [r5, #0]
   1a4ca:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1a4cc:	3b01      	subs	r3, #1
   1a4ce:	b29b      	uxth	r3, r3
   1a4d0:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1a4d2:	8922      	ldrh	r2, [r4, #8]
   1a4d4:	4293      	cmp	r3, r2
   1a4d6:	d202      	bcs.n	1a4de <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1a4d8:	8123      	strh	r3, [r4, #8]
   1a4da:	e000      	b.n	1a4de <os_memblock_get+0x26>
    block = NULL;
   1a4dc:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a4de:	f000 fd35 	bl	1af4c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1a4e2:	4628      	mov	r0, r5
   1a4e4:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1a4e6:	2500      	movs	r5, #0
    return (void *)block;
   1a4e8:	e7fb      	b.n	1a4e2 <os_memblock_get+0x2a>

0001a4ea <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1a4ea:	b538      	push	{r3, r4, r5, lr}
   1a4ec:	4604      	mov	r4, r0
   1a4ee:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1a4f0:	f000 fd26 	bl	1af40 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1a4f4:	6963      	ldr	r3, [r4, #20]
   1a4f6:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1a4f8:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1a4fa:	88e3      	ldrh	r3, [r4, #6]
   1a4fc:	3301      	adds	r3, #1
   1a4fe:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1a500:	f000 fd24 	bl	1af4c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1a504:	2000      	movs	r0, #0
   1a506:	bd38      	pop	{r3, r4, r5, pc}

0001a508 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1a508:	b168      	cbz	r0, 1a526 <os_memblock_put+0x1e>
{
   1a50a:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1a50c:	b169      	cbz	r1, 1a52a <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1a50e:	7a83      	ldrb	r3, [r0, #10]
   1a510:	f013 0f01 	tst.w	r3, #1
   1a514:	d004      	beq.n	1a520 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1a516:	69c3      	ldr	r3, [r0, #28]
   1a518:	b113      	cbz	r3, 1a520 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1a51a:	6a02      	ldr	r2, [r0, #32]
   1a51c:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1a51e:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1a520:	f7ff ffe3 	bl	1a4ea <os_memblock_put_from_cb>
   1a524:	e7fb      	b.n	1a51e <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1a526:	2003      	movs	r0, #3
}
   1a528:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a52a:	2003      	movs	r0, #3
   1a52c:	e7f7      	b.n	1a51e <os_memblock_put+0x16>
	...

0001a530 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1a530:	4b02      	ldr	r3, [pc, #8]	; (1a53c <os_mempool_module_init+0xc>)
   1a532:	2200      	movs	r2, #0
   1a534:	601a      	str	r2, [r3, #0]
   1a536:	605b      	str	r3, [r3, #4]
}
   1a538:	4770      	bx	lr
   1a53a:	bf00      	nop
   1a53c:	2000e698 	.word	0x2000e698

0001a540 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a540:	4b02      	ldr	r3, [pc, #8]	; (1a54c <os_msys_find_biggest_pool+0xc>)
   1a542:	6818      	ldr	r0, [r3, #0]
   1a544:	b108      	cbz	r0, 1a54a <os_msys_find_biggest_pool+0xa>
   1a546:	6858      	ldr	r0, [r3, #4]
   1a548:	3808      	subs	r0, #8
}
   1a54a:	4770      	bx	lr
   1a54c:	2000010c 	.word	0x2000010c

0001a550 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a550:	4b09      	ldr	r3, [pc, #36]	; (1a578 <os_msys_find_pool+0x28>)
   1a552:	6819      	ldr	r1, [r3, #0]
   1a554:	460b      	mov	r3, r1
   1a556:	b123      	cbz	r3, 1a562 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1a558:	881a      	ldrh	r2, [r3, #0]
   1a55a:	4282      	cmp	r2, r0
   1a55c:	d201      	bcs.n	1a562 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a55e:	689b      	ldr	r3, [r3, #8]
   1a560:	e7f9      	b.n	1a556 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1a562:	b10b      	cbz	r3, 1a568 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1a564:	4618      	mov	r0, r3
   1a566:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a568:	b119      	cbz	r1, 1a572 <os_msys_find_pool+0x22>
   1a56a:	4b03      	ldr	r3, [pc, #12]	; (1a578 <os_msys_find_pool+0x28>)
   1a56c:	685b      	ldr	r3, [r3, #4]
   1a56e:	3b08      	subs	r3, #8
   1a570:	e7f8      	b.n	1a564 <os_msys_find_pool+0x14>
   1a572:	460b      	mov	r3, r1
    return (pool);
   1a574:	e7f6      	b.n	1a564 <os_msys_find_pool+0x14>
   1a576:	bf00      	nop
   1a578:	2000010c 	.word	0x2000010c

0001a57c <os_msys_register>:
{
   1a57c:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a57e:	4b11      	ldr	r3, [pc, #68]	; (1a5c4 <os_msys_register+0x48>)
   1a580:	681d      	ldr	r5, [r3, #0]
   1a582:	462b      	mov	r3, r5
    prev = NULL;
   1a584:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a586:	b133      	cbz	r3, 1a596 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1a588:	8801      	ldrh	r1, [r0, #0]
   1a58a:	881a      	ldrh	r2, [r3, #0]
   1a58c:	4291      	cmp	r1, r2
   1a58e:	d302      	bcc.n	1a596 <os_msys_register+0x1a>
        prev = pool;
   1a590:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a592:	689b      	ldr	r3, [r3, #8]
   1a594:	e7f7      	b.n	1a586 <os_msys_register+0xa>
    if (prev) {
   1a596:	b15c      	cbz	r4, 1a5b0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a598:	68a3      	ldr	r3, [r4, #8]
   1a59a:	6083      	str	r3, [r0, #8]
   1a59c:	b11b      	cbz	r3, 1a5a6 <os_msys_register+0x2a>
   1a59e:	60a0      	str	r0, [r4, #8]
}
   1a5a0:	2000      	movs	r0, #0
   1a5a2:	bc30      	pop	{r4, r5}
   1a5a4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a5a6:	f100 0308 	add.w	r3, r0, #8
   1a5aa:	4a06      	ldr	r2, [pc, #24]	; (1a5c4 <os_msys_register+0x48>)
   1a5ac:	6053      	str	r3, [r2, #4]
   1a5ae:	e7f6      	b.n	1a59e <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1a5b0:	6085      	str	r5, [r0, #8]
   1a5b2:	b115      	cbz	r5, 1a5ba <os_msys_register+0x3e>
   1a5b4:	4b03      	ldr	r3, [pc, #12]	; (1a5c4 <os_msys_register+0x48>)
   1a5b6:	6018      	str	r0, [r3, #0]
   1a5b8:	e7f2      	b.n	1a5a0 <os_msys_register+0x24>
   1a5ba:	f100 0308 	add.w	r3, r0, #8
   1a5be:	4a01      	ldr	r2, [pc, #4]	; (1a5c4 <os_msys_register+0x48>)
   1a5c0:	6053      	str	r3, [r2, #4]
   1a5c2:	e7f7      	b.n	1a5b4 <os_msys_register+0x38>
   1a5c4:	2000010c 	.word	0x2000010c

0001a5c8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1a5c8:	b530      	push	{r4, r5, lr}
   1a5ca:	b083      	sub	sp, #12
   1a5cc:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1a5ce:	9d07      	ldr	r5, [sp, #28]
   1a5d0:	9501      	str	r5, [sp, #4]
   1a5d2:	9d06      	ldr	r5, [sp, #24]
   1a5d4:	9500      	str	r5, [sp, #0]
   1a5d6:	f001 f96d 	bl	1b8b4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a5da:	b138      	cbz	r0, 1a5ec <os_msys_init_once+0x24>
   1a5dc:	2000      	movs	r0, #0
   1a5de:	9000      	str	r0, [sp, #0]
   1a5e0:	4b09      	ldr	r3, [pc, #36]	; (1a608 <os_msys_init_once+0x40>)
   1a5e2:	681d      	ldr	r5, [r3, #0]
   1a5e4:	4603      	mov	r3, r0
   1a5e6:	4602      	mov	r2, r0
   1a5e8:	4601      	mov	r1, r0
   1a5ea:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1a5ec:	4620      	mov	r0, r4
   1a5ee:	f7ff ffc5 	bl	1a57c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a5f2:	b138      	cbz	r0, 1a604 <os_msys_init_once+0x3c>
   1a5f4:	2000      	movs	r0, #0
   1a5f6:	9000      	str	r0, [sp, #0]
   1a5f8:	4b03      	ldr	r3, [pc, #12]	; (1a608 <os_msys_init_once+0x40>)
   1a5fa:	681c      	ldr	r4, [r3, #0]
   1a5fc:	4603      	mov	r3, r0
   1a5fe:	4602      	mov	r2, r0
   1a600:	4601      	mov	r1, r0
   1a602:	47a0      	blx	r4
}
   1a604:	b003      	add	sp, #12
   1a606:	bd30      	pop	{r4, r5, pc}
   1a608:	20000104 	.word	0x20000104

0001a60c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a60c:	4b02      	ldr	r3, [pc, #8]	; (1a618 <os_msys_reset+0xc>)
   1a60e:	2200      	movs	r2, #0
   1a610:	601a      	str	r2, [r3, #0]
   1a612:	605b      	str	r3, [r3, #4]
}
   1a614:	4770      	bx	lr
   1a616:	bf00      	nop
   1a618:	2000010c 	.word	0x2000010c

0001a61c <os_msys_get_pkthdr>:
{
   1a61c:	b510      	push	{r4, lr}
   1a61e:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a620:	b930      	cbnz	r0, 1a630 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a622:	f7ff ff8d 	bl	1a540 <os_msys_find_biggest_pool>
    if (!pool) {
   1a626:	b158      	cbz	r0, 1a640 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a628:	b2e1      	uxtb	r1, r4
   1a62a:	f7ff fe0e 	bl	1a24a <os_mbuf_get_pkthdr>
}
   1a62e:	bd10      	pop	{r4, pc}
   1a630:	f101 0308 	add.w	r3, r1, #8
   1a634:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a636:	4403      	add	r3, r0
   1a638:	b298      	uxth	r0, r3
   1a63a:	f7ff ff89 	bl	1a550 <os_msys_find_pool>
   1a63e:	e7f2      	b.n	1a626 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1a640:	2000      	movs	r0, #0
   1a642:	e7f4      	b.n	1a62e <os_msys_get_pkthdr+0x12>

0001a644 <os_msys_init>:

void
os_msys_init(void)
{
   1a644:	b500      	push	{lr}
   1a646:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a648:	f7ff ffe0 	bl	1a60c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a64c:	4b06      	ldr	r3, [pc, #24]	; (1a668 <os_msys_init+0x24>)
   1a64e:	9301      	str	r3, [sp, #4]
   1a650:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a654:	9300      	str	r3, [sp, #0]
   1a656:	2340      	movs	r3, #64	; 0x40
   1a658:	4a04      	ldr	r2, [pc, #16]	; (1a66c <os_msys_init+0x28>)
   1a65a:	4905      	ldr	r1, [pc, #20]	; (1a670 <os_msys_init+0x2c>)
   1a65c:	4805      	ldr	r0, [pc, #20]	; (1a674 <os_msys_init+0x30>)
   1a65e:	f7ff ffb3 	bl	1a5c8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a662:	b003      	add	sp, #12
   1a664:	f85d fb04 	ldr.w	pc, [sp], #4
   1a668:	00021294 	.word	0x00021294
   1a66c:	2000e188 	.word	0x2000e188
   1a670:	2000e194 	.word	0x2000e194
   1a674:	20009888 	.word	0x20009888

0001a678 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1a678:	4603      	mov	r3, r0
   1a67a:	b128      	cbz	r0, 1a688 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1a67c:	2000      	movs	r0, #0
   1a67e:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1a680:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1a682:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1a684:	6018      	str	r0, [r3, #0]
   1a686:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a688:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1a68a:	4770      	bx	lr

0001a68c <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1a68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1a68e:	4b2c      	ldr	r3, [pc, #176]	; (1a740 <os_mutex_release+0xb4>)
   1a690:	681b      	ldr	r3, [r3, #0]
   1a692:	2b00      	cmp	r3, #0
   1a694:	d04d      	beq.n	1a732 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a696:	2800      	cmp	r0, #0
   1a698:	d04d      	beq.n	1a736 <os_mutex_release+0xaa>
   1a69a:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1a69c:	f000 f97a 	bl	1a994 <os_sched_get_current_task>
   1a6a0:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1a6a2:	88e3      	ldrh	r3, [r4, #6]
   1a6a4:	2b00      	cmp	r3, #0
   1a6a6:	d048      	beq.n	1a73a <os_mutex_release+0xae>
   1a6a8:	68a2      	ldr	r2, [r4, #8]
   1a6aa:	4282      	cmp	r2, r0
   1a6ac:	d001      	beq.n	1a6b2 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1a6ae:	2005      	movs	r0, #5
   1a6b0:	e040      	b.n	1a734 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1a6b2:	2b01      	cmp	r3, #1
   1a6b4:	d003      	beq.n	1a6be <os_mutex_release+0x32>
        --mu->mu_level;
   1a6b6:	3b01      	subs	r3, #1
   1a6b8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a6ba:	2000      	movs	r0, #0
        goto done;
   1a6bc:	e03a      	b.n	1a734 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1a6be:	f000 fc3f 	bl	1af40 <os_arch_save_sr>
   1a6c2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1a6c4:	88e3      	ldrh	r3, [r4, #6]
   1a6c6:	3b01      	subs	r3, #1
   1a6c8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1a6ca:	7aea      	ldrb	r2, [r5, #11]
   1a6cc:	7963      	ldrb	r3, [r4, #5]
   1a6ce:	429a      	cmp	r2, r3
   1a6d0:	d11e      	bne.n	1a710 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1a6d2:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1a6d4:	b146      	cbz	r6, 1a6e8 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1a6d6:	69f3      	ldr	r3, [r6, #28]
   1a6d8:	b1fb      	cbz	r3, 1a71a <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1a6da:	4630      	mov	r0, r6
   1a6dc:	f000 f9ae 	bl	1aa3c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1a6e0:	2301      	movs	r3, #1
   1a6e2:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1a6e4:	7af3      	ldrb	r3, [r6, #11]
   1a6e6:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1a6e8:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1a6ea:	b116      	cbz	r6, 1a6f2 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1a6ec:	7bb3      	ldrb	r3, [r6, #14]
   1a6ee:	3301      	adds	r3, #1
   1a6f0:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1a6f2:	7bab      	ldrb	r3, [r5, #14]
   1a6f4:	3b01      	subs	r3, #1
   1a6f6:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1a6f8:	f000 fa1a 	bl	1ab30 <os_sched_next_task>
   1a6fc:	4604      	mov	r4, r0
    if (rdy != current) {
   1a6fe:	4285      	cmp	r5, r0
   1a700:	d010      	beq.n	1a724 <os_mutex_release+0x98>
        resched = 1;
   1a702:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1a704:	4638      	mov	r0, r7
   1a706:	f000 fc21 	bl	1af4c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a70a:	b96d      	cbnz	r5, 1a728 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a70c:	2000      	movs	r0, #0
   1a70e:	e011      	b.n	1a734 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1a710:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1a712:	4628      	mov	r0, r5
   1a714:	f000 fa24 	bl	1ab60 <os_sched_resort>
   1a718:	e7db      	b.n	1a6d2 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1a71a:	461a      	mov	r2, r3
   1a71c:	4619      	mov	r1, r3
   1a71e:	4618      	mov	r0, r3
   1a720:	f7ff f978 	bl	19a14 <__assert_func>
    resched = 0;
   1a724:	2500      	movs	r5, #0
   1a726:	e7ed      	b.n	1a704 <os_mutex_release+0x78>
        os_sched(rdy);
   1a728:	4620      	mov	r0, r4
   1a72a:	f000 fa07 	bl	1ab3c <os_sched>
    ret = OS_OK;
   1a72e:	2000      	movs	r0, #0
   1a730:	e000      	b.n	1a734 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1a732:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1a734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1a736:	2003      	movs	r0, #3
   1a738:	e7fc      	b.n	1a734 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1a73a:	2005      	movs	r0, #5
   1a73c:	e7fa      	b.n	1a734 <os_mutex_release+0xa8>
   1a73e:	bf00      	nop
   1a740:	2000e688 	.word	0x2000e688

0001a744 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1a744:	4b36      	ldr	r3, [pc, #216]	; (1a820 <os_mutex_pend+0xdc>)
   1a746:	681b      	ldr	r3, [r3, #0]
   1a748:	2b00      	cmp	r3, #0
   1a74a:	d065      	beq.n	1a818 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a74c:	2800      	cmp	r0, #0
   1a74e:	d065      	beq.n	1a81c <os_mutex_pend+0xd8>
{
   1a750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a754:	460f      	mov	r7, r1
   1a756:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1a758:	f000 fbf2 	bl	1af40 <os_arch_save_sr>
   1a75c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1a75e:	f000 f919 	bl	1a994 <os_sched_get_current_task>
   1a762:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1a764:	88e3      	ldrh	r3, [r4, #6]
   1a766:	b19b      	cbz	r3, 1a790 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1a768:	68a2      	ldr	r2, [r4, #8]
   1a76a:	4282      	cmp	r2, r0
   1a76c:	d01e      	beq.n	1a7ac <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1a76e:	b327      	cbz	r7, 1a7ba <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1a770:	7ad1      	ldrb	r1, [r2, #11]
   1a772:	7ac3      	ldrb	r3, [r0, #11]
   1a774:	4299      	cmp	r1, r3
   1a776:	d825      	bhi.n	1a7c4 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1a778:	6821      	ldr	r1, [r4, #0]
   1a77a:	b369      	cbz	r1, 1a7d8 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a77c:	460b      	mov	r3, r1
    last = NULL;
   1a77e:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a780:	b32b      	cbz	r3, 1a7ce <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1a782:	7ae8      	ldrb	r0, [r5, #11]
   1a784:	7ada      	ldrb	r2, [r3, #11]
   1a786:	4290      	cmp	r0, r2
   1a788:	d321      	bcc.n	1a7ce <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1a78a:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a78c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a78e:	e7f7      	b.n	1a780 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1a790:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1a792:	7ac3      	ldrb	r3, [r0, #11]
   1a794:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1a796:	7b83      	ldrb	r3, [r0, #14]
   1a798:	3301      	adds	r3, #1
   1a79a:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1a79c:	2301      	movs	r3, #1
   1a79e:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a7a0:	4640      	mov	r0, r8
   1a7a2:	f000 fbd3 	bl	1af4c <os_arch_restore_sr>
        ret = OS_OK;
   1a7a6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1a7a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1a7ac:	3301      	adds	r3, #1
   1a7ae:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a7b0:	4640      	mov	r0, r8
   1a7b2:	f000 fbcb 	bl	1af4c <os_arch_restore_sr>
        ret = OS_OK;
   1a7b6:	2000      	movs	r0, #0
        goto done;
   1a7b8:	e7f6      	b.n	1a7a8 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1a7ba:	4640      	mov	r0, r8
   1a7bc:	f000 fbc6 	bl	1af4c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1a7c0:	2006      	movs	r0, #6
        goto done;
   1a7c2:	e7f1      	b.n	1a7a8 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1a7c4:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1a7c6:	68a0      	ldr	r0, [r4, #8]
   1a7c8:	f000 f9ca 	bl	1ab60 <os_sched_resort>
   1a7cc:	e7d4      	b.n	1a778 <os_mutex_pend+0x34>
    if (last) {
   1a7ce:	b11e      	cbz	r6, 1a7d8 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a7d0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1a7d2:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a7d4:	64f5      	str	r5, [r6, #76]	; 0x4c
   1a7d6:	e001      	b.n	1a7dc <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1a7d8:	64e9      	str	r1, [r5, #76]	; 0x4c
   1a7da:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1a7dc:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1a7de:	7b6b      	ldrb	r3, [r5, #13]
   1a7e0:	f043 0304 	orr.w	r3, r3, #4
   1a7e4:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1a7e6:	4639      	mov	r1, r7
   1a7e8:	4628      	mov	r0, r5
   1a7ea:	f000 f8df 	bl	1a9ac <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1a7ee:	4640      	mov	r0, r8
   1a7f0:	f000 fbac 	bl	1af4c <os_arch_restore_sr>
    os_sched(NULL);
   1a7f4:	2000      	movs	r0, #0
   1a7f6:	f000 f9a1 	bl	1ab3c <os_sched>
    OS_ENTER_CRITICAL(sr);
   1a7fa:	f000 fba1 	bl	1af40 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1a7fe:	7b6b      	ldrb	r3, [r5, #13]
   1a800:	f023 0304 	bic.w	r3, r3, #4
   1a804:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1a806:	f000 fba1 	bl	1af4c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1a80a:	68a3      	ldr	r3, [r4, #8]
   1a80c:	42ab      	cmp	r3, r5
   1a80e:	d001      	beq.n	1a814 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1a810:	2006      	movs	r0, #6
   1a812:	e7c9      	b.n	1a7a8 <os_mutex_pend+0x64>
        ret = OS_OK;
   1a814:	2000      	movs	r0, #0
   1a816:	e7c7      	b.n	1a7a8 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1a818:	2009      	movs	r0, #9
   1a81a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a81c:	2003      	movs	r0, #3
}
   1a81e:	4770      	bx	lr
   1a820:	2000e688 	.word	0x2000e688

0001a824 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a824:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a826:	4b05      	ldr	r3, [pc, #20]	; (1a83c <os_sanity_check_list_lock+0x18>)
   1a828:	6818      	ldr	r0, [r3, #0]
   1a82a:	b900      	cbnz	r0, 1a82e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a82c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a82e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a832:	4803      	ldr	r0, [pc, #12]	; (1a840 <os_sanity_check_list_lock+0x1c>)
   1a834:	f7ff ff86 	bl	1a744 <os_mutex_pend>
err:
   1a838:	e7f8      	b.n	1a82c <os_sanity_check_list_lock+0x8>
   1a83a:	bf00      	nop
   1a83c:	2000e688 	.word	0x2000e688
   1a840:	2000e6a0 	.word	0x2000e6a0

0001a844 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a844:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a846:	4b04      	ldr	r3, [pc, #16]	; (1a858 <os_sanity_check_list_unlock+0x14>)
   1a848:	6818      	ldr	r0, [r3, #0]
   1a84a:	b900      	cbnz	r0, 1a84e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a84c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a84e:	4803      	ldr	r0, [pc, #12]	; (1a85c <os_sanity_check_list_unlock+0x18>)
   1a850:	f7ff ff1c 	bl	1a68c <os_mutex_release>
err:
   1a854:	e7fa      	b.n	1a84c <os_sanity_check_list_unlock+0x8>
   1a856:	bf00      	nop
   1a858:	2000e688 	.word	0x2000e688
   1a85c:	2000e6a0 	.word	0x2000e6a0

0001a860 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1a860:	2300      	movs	r3, #0
   1a862:	6003      	str	r3, [r0, #0]
   1a864:	6043      	str	r3, [r0, #4]
   1a866:	6083      	str	r3, [r0, #8]
   1a868:	60c3      	str	r3, [r0, #12]
   1a86a:	6103      	str	r3, [r0, #16]
}
   1a86c:	4618      	mov	r0, r3
   1a86e:	4770      	bx	lr

0001a870 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a870:	b510      	push	{r4, lr}
   1a872:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a874:	f7ff ffd6 	bl	1a824 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a878:	4603      	mov	r3, r0
   1a87a:	b108      	cbz	r0, 1a880 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1a87c:	4618      	mov	r0, r3
   1a87e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a880:	4b03      	ldr	r3, [pc, #12]	; (1a890 <os_sanity_check_register+0x20>)
   1a882:	681a      	ldr	r2, [r3, #0]
   1a884:	6122      	str	r2, [r4, #16]
   1a886:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a888:	f7ff ffdc 	bl	1a844 <os_sanity_check_list_unlock>
   1a88c:	4603      	mov	r3, r0
err:
   1a88e:	e7f5      	b.n	1a87c <os_sanity_check_register+0xc>
   1a890:	2000e1b0 	.word	0x2000e1b0

0001a894 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a894:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a896:	f7ff ffc5 	bl	1a824 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a89a:	b910      	cbnz	r0, 1a8a2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a89c:	4b17      	ldr	r3, [pc, #92]	; (1a8fc <os_sanity_run+0x68>)
   1a89e:	681c      	ldr	r4, [r3, #0]
   1a8a0:	e00e      	b.n	1a8c0 <os_sanity_run+0x2c>
        assert(0);
   1a8a2:	2300      	movs	r3, #0
   1a8a4:	461a      	mov	r2, r3
   1a8a6:	4619      	mov	r1, r3
   1a8a8:	4618      	mov	r0, r3
   1a8aa:	f7ff f8b3 	bl	19a14 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a8ae:	f000 facf 	bl	1ae50 <os_time_get>
   1a8b2:	6823      	ldr	r3, [r4, #0]
   1a8b4:	6862      	ldr	r2, [r4, #4]
   1a8b6:	4413      	add	r3, r2
   1a8b8:	1ac3      	subs	r3, r0, r3
   1a8ba:	2b00      	cmp	r3, #0
   1a8bc:	dc0d      	bgt.n	1a8da <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a8be:	6924      	ldr	r4, [r4, #16]
   1a8c0:	b18c      	cbz	r4, 1a8e6 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1a8c2:	68a3      	ldr	r3, [r4, #8]
   1a8c4:	2b00      	cmp	r3, #0
   1a8c6:	d0f2      	beq.n	1a8ae <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a8c8:	68e1      	ldr	r1, [r4, #12]
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	4798      	blx	r3
            if (rc == OS_OK) {
   1a8ce:	2800      	cmp	r0, #0
   1a8d0:	d1ed      	bne.n	1a8ae <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1a8d2:	f000 fabd 	bl	1ae50 <os_time_get>
   1a8d6:	6020      	str	r0, [r4, #0]
                continue;
   1a8d8:	e7f1      	b.n	1a8be <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a8da:	2300      	movs	r3, #0
   1a8dc:	461a      	mov	r2, r3
   1a8de:	4619      	mov	r1, r3
   1a8e0:	4618      	mov	r0, r3
   1a8e2:	f7ff f897 	bl	19a14 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a8e6:	f7ff ffad 	bl	1a844 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a8ea:	b900      	cbnz	r0, 1a8ee <os_sanity_run+0x5a>
        assert(0);
    }
}
   1a8ec:	bd10      	pop	{r4, pc}
        assert(0);
   1a8ee:	2300      	movs	r3, #0
   1a8f0:	461a      	mov	r2, r3
   1a8f2:	4619      	mov	r1, r3
   1a8f4:	4618      	mov	r0, r3
   1a8f6:	f7ff f88d 	bl	19a14 <__assert_func>
   1a8fa:	bf00      	nop
   1a8fc:	2000e1b0 	.word	0x2000e1b0

0001a900 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a900:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a902:	4802      	ldr	r0, [pc, #8]	; (1a90c <os_sanity_init+0xc>)
   1a904:	f7ff feb8 	bl	1a678 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a908:	bd08      	pop	{r3, pc}
   1a90a:	bf00      	nop
   1a90c:	2000e6a0 	.word	0x2000e6a0

0001a910 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a910:	7b03      	ldrb	r3, [r0, #12]
   1a912:	2b01      	cmp	r3, #1
   1a914:	d001      	beq.n	1a91a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a916:	2002      	movs	r0, #2
}
   1a918:	4770      	bx	lr
{
   1a91a:	b510      	push	{r4, lr}
   1a91c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a91e:	f000 fb0f 	bl	1af40 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a922:	4b0f      	ldr	r3, [pc, #60]	; (1a960 <os_sched_insert+0x50>)
   1a924:	681b      	ldr	r3, [r3, #0]
   1a926:	b12b      	cbz	r3, 1a934 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a928:	7ae1      	ldrb	r1, [r4, #11]
   1a92a:	7ada      	ldrb	r2, [r3, #11]
   1a92c:	4291      	cmp	r1, r2
   1a92e:	d301      	bcc.n	1a934 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a932:	e7f8      	b.n	1a926 <os_sched_insert+0x16>
    if (entry) {
   1a934:	b153      	cbz	r3, 1a94c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a938:	64a2      	str	r2, [r4, #72]	; 0x48
   1a93a:	6463      	str	r3, [r4, #68]	; 0x44
   1a93c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a93e:	6014      	str	r4, [r2, #0]
   1a940:	3444      	adds	r4, #68	; 0x44
   1a942:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a944:	f000 fb02 	bl	1af4c <os_arch_restore_sr>
    return (0);
   1a948:	2000      	movs	r0, #0
}
   1a94a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a94c:	2300      	movs	r3, #0
   1a94e:	6463      	str	r3, [r4, #68]	; 0x44
   1a950:	4b03      	ldr	r3, [pc, #12]	; (1a960 <os_sched_insert+0x50>)
   1a952:	685a      	ldr	r2, [r3, #4]
   1a954:	64a2      	str	r2, [r4, #72]	; 0x48
   1a956:	6014      	str	r4, [r2, #0]
   1a958:	3444      	adds	r4, #68	; 0x44
   1a95a:	605c      	str	r4, [r3, #4]
   1a95c:	e7f2      	b.n	1a944 <os_sched_insert+0x34>
   1a95e:	bf00      	nop
   1a960:	20000114 	.word	0x20000114

0001a964 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a964:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a966:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a968:	3301      	adds	r3, #1
   1a96a:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1a96c:	4b06      	ldr	r3, [pc, #24]	; (1a988 <os_sched_ctx_sw_hook+0x24>)
   1a96e:	681c      	ldr	r4, [r3, #0]
   1a970:	4b06      	ldr	r3, [pc, #24]	; (1a98c <os_sched_ctx_sw_hook+0x28>)
   1a972:	6818      	ldr	r0, [r3, #0]
   1a974:	4906      	ldr	r1, [pc, #24]	; (1a990 <os_sched_ctx_sw_hook+0x2c>)
   1a976:	680b      	ldr	r3, [r1, #0]
   1a978:	1ac2      	subs	r2, r0, r3
   1a97a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a97c:	4413      	add	r3, r2
   1a97e:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1a980:	6008      	str	r0, [r1, #0]
}
   1a982:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a986:	4770      	bx	lr
   1a988:	2000e6b0 	.word	0x2000e6b0
   1a98c:	2000e6c0 	.word	0x2000e6c0
   1a990:	2000e6ac 	.word	0x2000e6ac

0001a994 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a994:	4b01      	ldr	r3, [pc, #4]	; (1a99c <os_sched_get_current_task+0x8>)
   1a996:	6818      	ldr	r0, [r3, #0]
   1a998:	4770      	bx	lr
   1a99a:	bf00      	nop
   1a99c:	2000e6b0 	.word	0x2000e6b0

0001a9a0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a9a0:	4b01      	ldr	r3, [pc, #4]	; (1a9a8 <os_sched_set_current_task+0x8>)
   1a9a2:	6018      	str	r0, [r3, #0]
}
   1a9a4:	4770      	bx	lr
   1a9a6:	bf00      	nop
   1a9a8:	2000e6b0 	.word	0x2000e6b0

0001a9ac <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a9ac:	b538      	push	{r3, r4, r5, lr}
   1a9ae:	4604      	mov	r4, r0
   1a9b0:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a9b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a9b4:	b1d3      	cbz	r3, 1a9ec <os_sched_sleep+0x40>
   1a9b6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9b8:	649a      	str	r2, [r3, #72]	; 0x48
   1a9ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a9bc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a9be:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a9c0:	2302      	movs	r3, #2
   1a9c2:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a9c4:	f000 fa44 	bl	1ae50 <os_time_get>
   1a9c8:	4428      	add	r0, r5
   1a9ca:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a9cc:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a9d0:	d010      	beq.n	1a9f4 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a9d2:	4b18      	ldr	r3, [pc, #96]	; (1aa34 <os_sched_sleep+0x88>)
   1a9d4:	681b      	ldr	r3, [r3, #0]
   1a9d6:	b1d3      	cbz	r3, 1aa0e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a9d8:	7b5a      	ldrb	r2, [r3, #13]
   1a9da:	f012 0f01 	tst.w	r2, #1
   1a9de:	d116      	bne.n	1aa0e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a9e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a9e2:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a9e4:	2a00      	cmp	r2, #0
   1a9e6:	dc12      	bgt.n	1aa0e <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a9e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a9ea:	e7f4      	b.n	1a9d6 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a9ec:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9ee:	4b12      	ldr	r3, [pc, #72]	; (1aa38 <os_sched_sleep+0x8c>)
   1a9f0:	605a      	str	r2, [r3, #4]
   1a9f2:	e7e2      	b.n	1a9ba <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a9f4:	7b63      	ldrb	r3, [r4, #13]
   1a9f6:	f043 0301 	orr.w	r3, r3, #1
   1a9fa:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a9fc:	2300      	movs	r3, #0
   1a9fe:	6463      	str	r3, [r4, #68]	; 0x44
   1aa00:	4b0c      	ldr	r3, [pc, #48]	; (1aa34 <os_sched_sleep+0x88>)
   1aa02:	685a      	ldr	r2, [r3, #4]
   1aa04:	64a2      	str	r2, [r4, #72]	; 0x48
   1aa06:	6014      	str	r4, [r2, #0]
   1aa08:	3444      	adds	r4, #68	; 0x44
   1aa0a:	605c      	str	r4, [r3, #4]
   1aa0c:	e007      	b.n	1aa1e <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1aa0e:	b143      	cbz	r3, 1aa22 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1aa10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1aa12:	64a2      	str	r2, [r4, #72]	; 0x48
   1aa14:	6463      	str	r3, [r4, #68]	; 0x44
   1aa16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1aa18:	6014      	str	r4, [r2, #0]
   1aa1a:	3444      	adds	r4, #68	; 0x44
   1aa1c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1aa1e:	2000      	movs	r0, #0
   1aa20:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1aa22:	2300      	movs	r3, #0
   1aa24:	6463      	str	r3, [r4, #68]	; 0x44
   1aa26:	4b03      	ldr	r3, [pc, #12]	; (1aa34 <os_sched_sleep+0x88>)
   1aa28:	685a      	ldr	r2, [r3, #4]
   1aa2a:	64a2      	str	r2, [r4, #72]	; 0x48
   1aa2c:	6014      	str	r4, [r2, #0]
   1aa2e:	3444      	adds	r4, #68	; 0x44
   1aa30:	605c      	str	r4, [r3, #4]
   1aa32:	e7f4      	b.n	1aa1e <os_sched_sleep+0x72>
   1aa34:	2000011c 	.word	0x2000011c
   1aa38:	20000114 	.word	0x20000114

0001aa3c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1aa3c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1aa3e:	7b03      	ldrb	r3, [r0, #12]
   1aa40:	2b02      	cmp	r3, #2
   1aa42:	d108      	bne.n	1aa56 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1aa44:	69c3      	ldr	r3, [r0, #28]
   1aa46:	b1db      	cbz	r3, 1aa80 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1aa48:	681a      	ldr	r2, [r3, #0]
   1aa4a:	b152      	cbz	r2, 1aa62 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1aa4c:	4282      	cmp	r2, r0
   1aa4e:	d10f      	bne.n	1aa70 <os_sched_wakeup+0x34>
   1aa50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1aa52:	601a      	str	r2, [r3, #0]
   1aa54:	e011      	b.n	1aa7a <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1aa56:	2300      	movs	r3, #0
   1aa58:	461a      	mov	r2, r3
   1aa5a:	4619      	mov	r1, r3
   1aa5c:	4618      	mov	r0, r3
   1aa5e:	f7fe ffd9 	bl	19a14 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1aa62:	2300      	movs	r3, #0
   1aa64:	461a      	mov	r2, r3
   1aa66:	4619      	mov	r1, r3
   1aa68:	4618      	mov	r0, r3
   1aa6a:	f7fe ffd3 	bl	19a14 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1aa6e:	461a      	mov	r2, r3
   1aa70:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1aa72:	4283      	cmp	r3, r0
   1aa74:	d1fb      	bne.n	1aa6e <os_sched_wakeup+0x32>
   1aa76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1aa78:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1aa7a:	2300      	movs	r3, #0
   1aa7c:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1aa7e:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1aa80:	2301      	movs	r3, #1
   1aa82:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1aa84:	2300      	movs	r3, #0
   1aa86:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1aa88:	7b43      	ldrb	r3, [r0, #13]
   1aa8a:	f023 0301 	bic.w	r3, r3, #1
   1aa8e:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1aa90:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1aa92:	b143      	cbz	r3, 1aaa6 <os_sched_wakeup+0x6a>
   1aa94:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aa96:	649a      	str	r2, [r3, #72]	; 0x48
   1aa98:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1aa9a:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1aa9c:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1aa9e:	f7ff ff37 	bl	1a910 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1aaa2:	2000      	movs	r0, #0
   1aaa4:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1aaa6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aaa8:	4b01      	ldr	r3, [pc, #4]	; (1aab0 <os_sched_wakeup+0x74>)
   1aaaa:	605a      	str	r2, [r3, #4]
   1aaac:	e7f4      	b.n	1aa98 <os_sched_wakeup+0x5c>
   1aaae:	bf00      	nop
   1aab0:	2000011c 	.word	0x2000011c

0001aab4 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1aab4:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1aab6:	f000 f9cb 	bl	1ae50 <os_time_get>
   1aaba:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1aabc:	f000 fa40 	bl	1af40 <os_arch_save_sr>
   1aac0:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1aac2:	4b0a      	ldr	r3, [pc, #40]	; (1aaec <os_sched_os_timer_exp+0x38>)
   1aac4:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1aac6:	b160      	cbz	r0, 1aae2 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1aac8:	7b43      	ldrb	r3, [r0, #13]
   1aaca:	f013 0f01 	tst.w	r3, #1
   1aace:	d108      	bne.n	1aae2 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1aad0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1aad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1aad4:	1aeb      	subs	r3, r5, r3
   1aad6:	2b00      	cmp	r3, #0
   1aad8:	db03      	blt.n	1aae2 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1aada:	f7ff ffaf 	bl	1aa3c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1aade:	4620      	mov	r0, r4
   1aae0:	e7f1      	b.n	1aac6 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1aae2:	4630      	mov	r0, r6
   1aae4:	f000 fa32 	bl	1af4c <os_arch_restore_sr>
}
   1aae8:	bd70      	pop	{r4, r5, r6, pc}
   1aaea:	bf00      	nop
   1aaec:	2000011c 	.word	0x2000011c

0001aaf0 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1aaf0:	b510      	push	{r4, lr}
   1aaf2:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1aaf4:	f000 fa2d 	bl	1af52 <os_arch_in_critical>
   1aaf8:	b150      	cbz	r0, 1ab10 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1aafa:	4b0c      	ldr	r3, [pc, #48]	; (1ab2c <os_sched_wakeup_ticks+0x3c>)
   1aafc:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1aafe:	b17b      	cbz	r3, 1ab20 <os_sched_wakeup_ticks+0x30>
   1ab00:	7b5a      	ldrb	r2, [r3, #13]
   1ab02:	f012 0f01 	tst.w	r2, #1
   1ab06:	d10e      	bne.n	1ab26 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1ab08:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1ab0a:	1b00      	subs	r0, r0, r4
   1ab0c:	d406      	bmi.n	1ab1c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1ab0e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1ab10:	2300      	movs	r3, #0
   1ab12:	461a      	mov	r2, r3
   1ab14:	4619      	mov	r1, r3
   1ab16:	4618      	mov	r0, r3
   1ab18:	f7fe ff7c 	bl	19a14 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1ab1c:	2000      	movs	r0, #0
   1ab1e:	e7f6      	b.n	1ab0e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1ab20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ab24:	e7f3      	b.n	1ab0e <os_sched_wakeup_ticks+0x1e>
   1ab26:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1ab2a:	e7f0      	b.n	1ab0e <os_sched_wakeup_ticks+0x1e>
   1ab2c:	2000011c 	.word	0x2000011c

0001ab30 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1ab30:	4b01      	ldr	r3, [pc, #4]	; (1ab38 <os_sched_next_task+0x8>)
   1ab32:	6818      	ldr	r0, [r3, #0]
   1ab34:	4770      	bx	lr
   1ab36:	bf00      	nop
   1ab38:	20000114 	.word	0x20000114

0001ab3c <os_sched>:
{
   1ab3c:	b538      	push	{r3, r4, r5, lr}
   1ab3e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1ab40:	f000 f9fe 	bl	1af40 <os_arch_save_sr>
   1ab44:	4605      	mov	r5, r0
    if (!next_t) {
   1ab46:	b134      	cbz	r4, 1ab56 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1ab48:	4620      	mov	r0, r4
   1ab4a:	f000 f9ef 	bl	1af2c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1ab4e:	4628      	mov	r0, r5
   1ab50:	f000 f9fc 	bl	1af4c <os_arch_restore_sr>
}
   1ab54:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1ab56:	f7ff ffeb 	bl	1ab30 <os_sched_next_task>
   1ab5a:	4604      	mov	r4, r0
   1ab5c:	e7f4      	b.n	1ab48 <os_sched+0xc>
	...

0001ab60 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1ab60:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1ab62:	7b03      	ldrb	r3, [r0, #12]
   1ab64:	2b01      	cmp	r3, #1
   1ab66:	d000      	beq.n	1ab6a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1ab68:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1ab6a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1ab6c:	b13b      	cbz	r3, 1ab7e <os_sched_resort+0x1e>
   1ab6e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1ab70:	649a      	str	r2, [r3, #72]	; 0x48
   1ab72:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1ab74:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1ab76:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1ab78:	f7ff feca 	bl	1a910 <os_sched_insert>
}
   1ab7c:	e7f4      	b.n	1ab68 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1ab7e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1ab80:	4b01      	ldr	r3, [pc, #4]	; (1ab88 <os_sched_resort+0x28>)
   1ab82:	605a      	str	r2, [r3, #4]
   1ab84:	e7f5      	b.n	1ab72 <os_sched_resort+0x12>
   1ab86:	bf00      	nop
   1ab88:	20000114 	.word	0x20000114

0001ab8c <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1ab8c:	4603      	mov	r3, r0
   1ab8e:	b118      	cbz	r0, 1ab98 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1ab90:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1ab92:	2000      	movs	r0, #0
   1ab94:	6018      	str	r0, [r3, #0]
   1ab96:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1ab98:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1ab9a:	4770      	bx	lr

0001ab9c <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1ab9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1ab9e:	4b17      	ldr	r3, [pc, #92]	; (1abfc <os_sem_release+0x60>)
   1aba0:	681b      	ldr	r3, [r3, #0]
   1aba2:	b33b      	cbz	r3, 1abf4 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aba4:	b340      	cbz	r0, 1abf8 <os_sem_release+0x5c>
   1aba6:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1aba8:	f7ff fef4 	bl	1a994 <os_sched_get_current_task>
   1abac:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1abae:	f000 f9c7 	bl	1af40 <os_arch_save_sr>
   1abb2:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1abb4:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1abb6:	b165      	cbz	r5, 1abd2 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1abb8:	7b6b      	ldrb	r3, [r5, #13]
   1abba:	f023 0302 	bic.w	r3, r3, #2
   1abbe:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1abc0:	4628      	mov	r0, r5
   1abc2:	f7ff ff3b 	bl	1aa3c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1abc6:	7afa      	ldrb	r2, [r7, #11]
   1abc8:	7aeb      	ldrb	r3, [r5, #11]
   1abca:	429a      	cmp	r2, r3
   1abcc:	d80b      	bhi.n	1abe6 <os_sem_release+0x4a>
    resched = 0;
   1abce:	2400      	movs	r4, #0
   1abd0:	e003      	b.n	1abda <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1abd2:	88e3      	ldrh	r3, [r4, #6]
   1abd4:	3301      	adds	r3, #1
   1abd6:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1abd8:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1abda:	4630      	mov	r0, r6
   1abdc:	f000 f9b6 	bl	1af4c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1abe0:	b91c      	cbnz	r4, 1abea <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1abe2:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1abe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1abe6:	2401      	movs	r4, #1
   1abe8:	e7f7      	b.n	1abda <os_sem_release+0x3e>
        os_sched(rdy);
   1abea:	4628      	mov	r0, r5
   1abec:	f7ff ffa6 	bl	1ab3c <os_sched>
    ret = OS_OK;
   1abf0:	2000      	movs	r0, #0
   1abf2:	e7f7      	b.n	1abe4 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1abf4:	2009      	movs	r0, #9
   1abf6:	e7f5      	b.n	1abe4 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1abf8:	2003      	movs	r0, #3
   1abfa:	e7f3      	b.n	1abe4 <os_sem_release+0x48>
   1abfc:	2000e688 	.word	0x2000e688

0001ac00 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1ac00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1ac02:	4b2c      	ldr	r3, [pc, #176]	; (1acb4 <os_sem_pend+0xb4>)
   1ac04:	681b      	ldr	r3, [r3, #0]
   1ac06:	2b00      	cmp	r3, #0
   1ac08:	d04f      	beq.n	1acaa <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1ac0a:	2800      	cmp	r0, #0
   1ac0c:	d04f      	beq.n	1acae <os_sem_pend+0xae>
   1ac0e:	460d      	mov	r5, r1
   1ac10:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1ac12:	f7ff febf 	bl	1a994 <os_sched_get_current_task>
   1ac16:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1ac18:	f000 f992 	bl	1af40 <os_arch_save_sr>
   1ac1c:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ac1e:	88e3      	ldrh	r3, [r4, #6]
   1ac20:	b14b      	cbz	r3, 1ac36 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ac22:	3b01      	subs	r3, #1
   1ac24:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ac26:	2400      	movs	r4, #0
    sched = 0;
   1ac28:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ac2a:	4638      	mov	r0, r7
   1ac2c:	f000 f98e 	bl	1af4c <os_arch_restore_sr>

    if (sched) {
   1ac30:	bb45      	cbnz	r5, 1ac84 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ac32:	4620      	mov	r0, r4
   1ac34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ac36:	b315      	cbz	r5, 1ac7e <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ac38:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ac3a:	7b73      	ldrb	r3, [r6, #13]
   1ac3c:	f043 0302 	orr.w	r3, r3, #2
   1ac40:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ac42:	f8d4 c000 	ldr.w	ip, [r4]
   1ac46:	f1bc 0f00 	cmp.w	ip, #0
   1ac4a:	d00e      	beq.n	1ac6a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ac4c:	4663      	mov	r3, ip
        last = NULL;
   1ac4e:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ac50:	b133      	cbz	r3, 1ac60 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1ac52:	7af1      	ldrb	r1, [r6, #11]
   1ac54:	7ada      	ldrb	r2, [r3, #11]
   1ac56:	4291      	cmp	r1, r2
   1ac58:	d302      	bcc.n	1ac60 <os_sem_pend+0x60>
                last = entry;
   1ac5a:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ac5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ac5e:	e7f7      	b.n	1ac50 <os_sem_pend+0x50>
        if (last) {
   1ac60:	b118      	cbz	r0, 1ac6a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1ac62:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ac64:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ac66:	64c6      	str	r6, [r0, #76]	; 0x4c
   1ac68:	e002      	b.n	1ac70 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1ac6a:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1ac6e:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1ac70:	4629      	mov	r1, r5
   1ac72:	4630      	mov	r0, r6
   1ac74:	f7ff fe9a 	bl	1a9ac <os_sched_sleep>
        ret = OS_OK;
   1ac78:	2400      	movs	r4, #0
        sched = 1;
   1ac7a:	2501      	movs	r5, #1
   1ac7c:	e7d5      	b.n	1ac2a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1ac7e:	2406      	movs	r4, #6
    sched = 0;
   1ac80:	2500      	movs	r5, #0
   1ac82:	e7d2      	b.n	1ac2a <os_sem_pend+0x2a>
        os_sched(NULL);
   1ac84:	2000      	movs	r0, #0
   1ac86:	f7ff ff59 	bl	1ab3c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1ac8a:	7b73      	ldrb	r3, [r6, #13]
   1ac8c:	f013 0f02 	tst.w	r3, #2
   1ac90:	d101      	bne.n	1ac96 <os_sem_pend+0x96>
            ret = OS_OK;
   1ac92:	2400      	movs	r4, #0
   1ac94:	e7cd      	b.n	1ac32 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1ac96:	f000 f953 	bl	1af40 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1ac9a:	7b73      	ldrb	r3, [r6, #13]
   1ac9c:	f023 0302 	bic.w	r3, r3, #2
   1aca0:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1aca2:	f000 f953 	bl	1af4c <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1aca6:	2406      	movs	r4, #6
   1aca8:	e7c3      	b.n	1ac32 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1acaa:	2409      	movs	r4, #9
   1acac:	e7c1      	b.n	1ac32 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1acae:	2403      	movs	r4, #3
   1acb0:	e7bf      	b.n	1ac32 <os_sem_pend+0x32>
   1acb2:	bf00      	nop
   1acb4:	2000e688 	.word	0x2000e688

0001acb8 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1acb8:	2300      	movs	r3, #0
   1acba:	e003      	b.n	1acc4 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1acbc:	4a03      	ldr	r2, [pc, #12]	; (1accc <_clear_stack+0x14>)
   1acbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1acc2:	3301      	adds	r3, #1
   1acc4:	428b      	cmp	r3, r1
   1acc6:	dbf9      	blt.n	1acbc <_clear_stack+0x4>
    }
}
   1acc8:	4770      	bx	lr
   1acca:	bf00      	nop
   1accc:	deadbeef 	.word	0xdeadbeef

0001acd0 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1acd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1acd4:	4604      	mov	r4, r0
   1acd6:	460f      	mov	r7, r1
   1acd8:	4690      	mov	r8, r2
   1acda:	461d      	mov	r5, r3
   1acdc:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1ace0:	2250      	movs	r2, #80	; 0x50
   1ace2:	2100      	movs	r1, #0
   1ace4:	f000 fa99 	bl	1b21a <memset>

    t->t_func = func;
   1ace8:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1acec:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1acee:	f000 f927 	bl	1af40 <os_arch_save_sr>
    rc = g_task_id;
   1acf2:	4b2b      	ldr	r3, [pc, #172]	; (1ada0 <os_task_init+0xd0>)
   1acf4:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1acf6:	1c6a      	adds	r2, r5, #1
   1acf8:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1acfa:	f000 f927 	bl	1af4c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1acfe:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1ad00:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ad04:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1ad06:	2301      	movs	r3, #1
   1ad08:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1ad0a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1ad0c:	2300      	movs	r3, #0
   1ad0e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1ad10:	f104 0720 	add.w	r7, r4, #32
   1ad14:	4638      	mov	r0, r7
   1ad16:	f7ff fda3 	bl	1a860 <os_sanity_check_init>
    if (rc != OS_OK) {
   1ad1a:	4605      	mov	r5, r0
   1ad1c:	2800      	cmp	r0, #0
   1ad1e:	d132      	bne.n	1ad86 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1ad20:	9b07      	ldr	r3, [sp, #28]
   1ad22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ad26:	d005      	beq.n	1ad34 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1ad28:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1ad2a:	4638      	mov	r0, r7
   1ad2c:	f7ff fda0 	bl	1a870 <os_sanity_check_register>
        if (rc != OS_OK) {
   1ad30:	4605      	mov	r5, r0
   1ad32:	bb40      	cbnz	r0, 1ad86 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1ad34:	4631      	mov	r1, r6
   1ad36:	9808      	ldr	r0, [sp, #32]
   1ad38:	f7ff ffbe 	bl	1acb8 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1ad3c:	9b08      	ldr	r3, [sp, #32]
   1ad3e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1ad42:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1ad44:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1ad46:	4632      	mov	r2, r6
   1ad48:	4620      	mov	r0, r4
   1ad4a:	f000 f907 	bl	1af5c <os_arch_task_stack_init>
   1ad4e:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ad50:	4b14      	ldr	r3, [pc, #80]	; (1ada4 <os_task_init+0xd4>)
   1ad52:	681b      	ldr	r3, [r3, #0]
   1ad54:	b15b      	cbz	r3, 1ad6e <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1ad56:	7ae1      	ldrb	r1, [r4, #11]
   1ad58:	7ada      	ldrb	r2, [r3, #11]
   1ad5a:	4291      	cmp	r1, r2
   1ad5c:	d001      	beq.n	1ad62 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ad5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ad60:	e7f8      	b.n	1ad54 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1ad62:	2300      	movs	r3, #0
   1ad64:	461a      	mov	r2, r3
   1ad66:	4619      	mov	r1, r3
   1ad68:	4618      	mov	r0, r3
   1ad6a:	f7fe fe53 	bl	19a14 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1ad6e:	6423      	str	r3, [r4, #64]	; 0x40
   1ad70:	4b0c      	ldr	r3, [pc, #48]	; (1ada4 <os_task_init+0xd4>)
   1ad72:	685a      	ldr	r2, [r3, #4]
   1ad74:	6014      	str	r4, [r2, #0]
   1ad76:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1ad7a:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1ad7c:	4620      	mov	r0, r4
   1ad7e:	f7ff fdc7 	bl	1a910 <os_sched_insert>
   1ad82:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1ad84:	b110      	cbz	r0, 1ad8c <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1ad86:	4628      	mov	r0, r5
   1ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1ad8c:	f7fe fefc 	bl	19b88 <os_started>
   1ad90:	b908      	cbnz	r0, 1ad96 <os_task_init+0xc6>
    return (0);
   1ad92:	4605      	mov	r5, r0
   1ad94:	e7f7      	b.n	1ad86 <os_task_init+0xb6>
        os_sched(NULL);
   1ad96:	2000      	movs	r0, #0
   1ad98:	f7ff fed0 	bl	1ab3c <os_sched>
   1ad9c:	e7f3      	b.n	1ad86 <os_task_init+0xb6>
   1ad9e:	bf00      	nop
   1ada0:	2000e6b4 	.word	0x2000e6b4
   1ada4:	2000e6b8 	.word	0x2000e6b8

0001ada8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1ada8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1adac:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1adae:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1adb2:	e9d1 4500 	ldrd	r4, r5, [r1]
   1adb6:	eb14 0b03 	adds.w	fp, r4, r3
   1adba:	f145 0c00 	adc.w	ip, r5, #0
   1adbe:	e9c2 bc00 	strd	fp, ip, [r2]
   1adc2:	688b      	ldr	r3, [r1, #8]
   1adc4:	f641 6184 	movw	r1, #7812	; 0x1e84
   1adc8:	fb01 3000 	mla	r0, r1, r0, r3
   1adcc:	6090      	str	r0, [r2, #8]
   1adce:	4b08      	ldr	r3, [pc, #32]	; (1adf0 <os_deltatime+0x48>)
   1add0:	4298      	cmp	r0, r3
   1add2:	dd0a      	ble.n	1adea <os_deltatime+0x42>
   1add4:	f11b 0401 	adds.w	r4, fp, #1
   1add8:	f14c 0500 	adc.w	r5, ip, #0
   1addc:	e9c2 4500 	strd	r4, r5, [r2]
   1ade0:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1ade4:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1ade8:	6090      	str	r0, [r2, #8]
}
   1adea:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1adee:	4770      	bx	lr
   1adf0:	000f423f 	.word	0x000f423f

0001adf4 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1adf4:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1adf6:	1e04      	subs	r4, r0, #0
   1adf8:	db0d      	blt.n	1ae16 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1adfa:	f000 f8a1 	bl	1af40 <os_arch_save_sr>
   1adfe:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1ae00:	4a11      	ldr	r2, [pc, #68]	; (1ae48 <os_time_tick+0x54>)
   1ae02:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1ae04:	18e0      	adds	r0, r4, r3
   1ae06:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1ae08:	ea90 0f03 	teq	r0, r3
   1ae0c:	d409      	bmi.n	1ae22 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1ae0e:	4628      	mov	r0, r5
   1ae10:	f000 f89c 	bl	1af4c <os_arch_restore_sr>
}
   1ae14:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1ae16:	2300      	movs	r3, #0
   1ae18:	461a      	mov	r2, r3
   1ae1a:	4619      	mov	r1, r3
   1ae1c:	4618      	mov	r0, r3
   1ae1e:	f7fe fdf9 	bl	19a14 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1ae22:	4e0a      	ldr	r6, [pc, #40]	; (1ae4c <os_time_tick+0x58>)
   1ae24:	4631      	mov	r1, r6
   1ae26:	f851 4b08 	ldr.w	r4, [r1], #8
   1ae2a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1ae2c:	460a      	mov	r2, r1
   1ae2e:	4620      	mov	r0, r4
   1ae30:	f7ff ffba 	bl	1ada8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1ae34:	f106 0118 	add.w	r1, r6, #24
   1ae38:	460a      	mov	r2, r1
   1ae3a:	4620      	mov	r0, r4
   1ae3c:	f7ff ffb4 	bl	1ada8 <os_deltatime>
        basetod.ostime = g_os_time;
   1ae40:	4b01      	ldr	r3, [pc, #4]	; (1ae48 <os_time_tick+0x54>)
   1ae42:	681b      	ldr	r3, [r3, #0]
   1ae44:	6033      	str	r3, [r6, #0]
   1ae46:	e7e2      	b.n	1ae0e <os_time_tick+0x1a>
   1ae48:	2000e6c0 	.word	0x2000e6c0
   1ae4c:	2000e1b8 	.word	0x2000e1b8

0001ae50 <os_time_get>:
}
   1ae50:	4b01      	ldr	r3, [pc, #4]	; (1ae58 <os_time_get+0x8>)
   1ae52:	6818      	ldr	r0, [r3, #0]
   1ae54:	4770      	bx	lr
   1ae56:	bf00      	nop
   1ae58:	2000e6c0 	.word	0x2000e6c0

0001ae5c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1ae5c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1ae5e:	1e04      	subs	r4, r0, #0
   1ae60:	db09      	blt.n	1ae76 <os_time_advance+0x1a>

    if (ticks > 0) {
   1ae62:	2c00      	cmp	r4, #0
   1ae64:	dd06      	ble.n	1ae74 <os_time_advance+0x18>
        if (!os_started()) {
   1ae66:	f7fe fe8f 	bl	19b88 <os_started>
   1ae6a:	b950      	cbnz	r0, 1ae82 <os_time_advance+0x26>
            g_os_time += ticks;
   1ae6c:	4a0a      	ldr	r2, [pc, #40]	; (1ae98 <os_time_advance+0x3c>)
   1ae6e:	6813      	ldr	r3, [r2, #0]
   1ae70:	441c      	add	r4, r3
   1ae72:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1ae74:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1ae76:	2300      	movs	r3, #0
   1ae78:	461a      	mov	r2, r3
   1ae7a:	4619      	mov	r1, r3
   1ae7c:	4618      	mov	r0, r3
   1ae7e:	f7fe fdc9 	bl	19a14 <__assert_func>
            os_time_tick(ticks);
   1ae82:	4620      	mov	r0, r4
   1ae84:	f7ff ffb6 	bl	1adf4 <os_time_tick>
            os_callout_tick();
   1ae88:	f7fe ffa6 	bl	19dd8 <os_callout_tick>
            os_sched_os_timer_exp();
   1ae8c:	f7ff fe12 	bl	1aab4 <os_sched_os_timer_exp>
            os_sched(NULL);
   1ae90:	2000      	movs	r0, #0
   1ae92:	f7ff fe53 	bl	1ab3c <os_sched>
}
   1ae96:	e7ed      	b.n	1ae74 <os_time_advance+0x18>
   1ae98:	2000e6c0 	.word	0x2000e6c0

0001ae9c <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1ae9c:	b900      	cbnz	r0, 1aea0 <os_time_delay+0x4>
   1ae9e:	4770      	bx	lr
{
   1aea0:	b538      	push	{r3, r4, r5, lr}
   1aea2:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1aea4:	f000 f84c 	bl	1af40 <os_arch_save_sr>
   1aea8:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1aeaa:	f7ff fd73 	bl	1a994 <os_sched_get_current_task>
   1aeae:	4621      	mov	r1, r4
   1aeb0:	f7ff fd7c 	bl	1a9ac <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1aeb4:	4628      	mov	r0, r5
   1aeb6:	f000 f849 	bl	1af4c <os_arch_restore_sr>
        os_sched(NULL);
   1aeba:	2000      	movs	r0, #0
   1aebc:	f7ff fe3e 	bl	1ab3c <os_sched>
    }
}
   1aec0:	bd38      	pop	{r3, r4, r5, pc}
	...

0001aec4 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1aec4:	b570      	push	{r4, r5, r6, lr}
   1aec6:	4605      	mov	r5, r0
   1aec8:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1aeca:	f000 f839 	bl	1af40 <os_arch_save_sr>
   1aece:	4606      	mov	r6, r0
    if (tv != NULL) {
   1aed0:	b145      	cbz	r5, 1aee4 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1aed2:	f7ff ffbd 	bl	1ae50 <os_time_get>
   1aed6:	4908      	ldr	r1, [pc, #32]	; (1aef8 <os_gettimeofday+0x34>)
   1aed8:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1aedc:	462a      	mov	r2, r5
   1aede:	1ac0      	subs	r0, r0, r3
   1aee0:	f7ff ff62 	bl	1ada8 <os_deltatime>
    }

    if (tz != NULL) {
   1aee4:	b114      	cbz	r4, 1aeec <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1aee6:	4b04      	ldr	r3, [pc, #16]	; (1aef8 <os_gettimeofday+0x34>)
   1aee8:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1aeea:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1aeec:	4630      	mov	r0, r6
   1aeee:	f000 f82d 	bl	1af4c <os_arch_restore_sr>

    return (0);
}
   1aef2:	2000      	movs	r0, #0
   1aef4:	bd70      	pop	{r4, r5, r6, pc}
   1aef6:	bf00      	nop
   1aef8:	2000e1b8 	.word	0x2000e1b8

0001aefc <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1aefc:	b538      	push	{r3, r4, r5, lr}
   1aefe:	4604      	mov	r4, r0
   1af00:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1af02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1af06:	2300      	movs	r3, #0
   1af08:	01c0      	lsls	r0, r0, #7
   1af0a:	0e61      	lsrs	r1, r4, #25
   1af0c:	f002 f88a 	bl	1d024 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1af10:	2901      	cmp	r1, #1
   1af12:	bf08      	it	eq
   1af14:	2800      	cmpeq	r0, #0
   1af16:	d202      	bcs.n	1af1e <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1af18:	6028      	str	r0, [r5, #0]
    return 0;
   1af1a:	2000      	movs	r0, #0
}
   1af1c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1af1e:	2002      	movs	r0, #2
   1af20:	e7fc      	b.n	1af1c <os_time_ms_to_ticks+0x20>

0001af22 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1af22:	b508      	push	{r3, lr}
    os_time_advance(1);
   1af24:	2001      	movs	r0, #1
   1af26:	f7ff ff99 	bl	1ae5c <os_time_advance>
}
   1af2a:	bd08      	pop	{r3, pc}

0001af2c <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1af2c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1af2e:	f7ff fd19 	bl	1a964 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1af32:	4b02      	ldr	r3, [pc, #8]	; (1af3c <os_arch_ctx_sw+0x10>)
   1af34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1af38:	605a      	str	r2, [r3, #4]
}
   1af3a:	bd08      	pop	{r3, pc}
   1af3c:	e000ed00 	.word	0xe000ed00

0001af40 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1af40:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1af44:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1af46:	f000 0001 	and.w	r0, r0, #1
   1af4a:	4770      	bx	lr

0001af4c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1af4c:	b900      	cbnz	r0, 1af50 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1af4e:	b662      	cpsie	i
        __enable_irq();
    }
}
   1af50:	4770      	bx	lr

0001af52 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1af52:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1af56:	f000 0001 	and.w	r0, r0, #1
   1af5a:	4770      	bx	lr

0001af5c <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1af5c:	b570      	push	{r4, r5, r6, lr}
   1af5e:	4606      	mov	r6, r0
   1af60:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1af62:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1af66:	2309      	movs	r3, #9
   1af68:	e003      	b.n	1af72 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1af6a:	2200      	movs	r2, #0
   1af6c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1af70:	3301      	adds	r3, #1
   1af72:	2b0d      	cmp	r3, #13
   1af74:	ddf9      	ble.n	1af6a <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1af76:	4620      	mov	r0, r4
   1af78:	f000 f8b6 	bl	1b0e8 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1af7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1af80:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1af84:	6973      	ldr	r3, [r6, #20]
   1af86:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1af8a:	69b3      	ldr	r3, [r6, #24]
   1af8c:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1af90:	f06f 0302 	mvn.w	r3, #2
   1af94:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1af98:	4620      	mov	r0, r4
   1af9a:	bd70      	pop	{r4, r5, r6, pc}

0001af9c <os_arch_init>:

void
os_arch_init(void)
{
   1af9c:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1af9e:	4a04      	ldr	r2, [pc, #16]	; (1afb0 <os_arch_init+0x14>)
   1afa0:	6953      	ldr	r3, [r2, #20]
   1afa2:	f043 0310 	orr.w	r3, r3, #16
   1afa6:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1afa8:	f7fe fdf4 	bl	19b94 <os_init_idle_task>
}
   1afac:	bd08      	pop	{r3, pc}
   1afae:	bf00      	nop
   1afb0:	e000ed00 	.word	0xe000ed00

0001afb4 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1afb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1afb6:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1afba:	b90c      	cbnz	r4, 1afc0 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1afbc:	2400      	movs	r4, #0
   1afbe:	e009      	b.n	1afd4 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1afc0:	2007      	movs	r0, #7
   1afc2:	e02e      	b.n	1b022 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1afc4:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1afc8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1afcc:	26ff      	movs	r6, #255	; 0xff
   1afce:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1afd2:	3401      	adds	r4, #1
   1afd4:	2cef      	cmp	r4, #239	; 0xef
   1afd6:	d9f5      	bls.n	1afc4 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1afd8:	f06f 040d 	mvn.w	r4, #13
   1afdc:	e007      	b.n	1afee <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1afde:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1afe0:	4e12      	ldr	r6, [pc, #72]	; (1b02c <os_arch_os_init+0x78>)
   1afe2:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1afe4:	3510      	adds	r5, #16
   1afe6:	4f12      	ldr	r7, [pc, #72]	; (1b030 <os_arch_os_init+0x7c>)
   1afe8:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1afec:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1afee:	2c25      	cmp	r4, #37	; 0x25
   1aff0:	ddf5      	ble.n	1afde <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1aff2:	4c0e      	ldr	r4, [pc, #56]	; (1b02c <os_arch_os_init+0x78>)
   1aff4:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1aff6:	4e0f      	ldr	r6, [pc, #60]	; (1b034 <os_arch_os_init+0x80>)
   1aff8:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1affa:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1affc:	4e0e      	ldr	r6, [pc, #56]	; (1b038 <os_arch_os_init+0x84>)
   1affe:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1b000:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1b002:	4e0e      	ldr	r6, [pc, #56]	; (1b03c <os_arch_os_init+0x88>)
   1b004:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1b006:	25e0      	movs	r5, #224	; 0xe0
   1b008:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1b00c:	2520      	movs	r5, #32
   1b00e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1b010:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1b014:	f014 0f01 	tst.w	r4, #1
   1b018:	d004      	beq.n	1b024 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1b01a:	f8df c024 	ldr.w	ip, [pc, #36]	; 1b040 <os_arch_os_init+0x8c>
   1b01e:	df00      	svc	0
        err = OS_OK;
   1b020:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1b022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1b024:	f7ff ffba 	bl	1af9c <os_arch_init>
        err = OS_OK;
   1b028:	2000      	movs	r0, #0
   1b02a:	e7fa      	b.n	1b022 <os_arch_os_init+0x6e>
   1b02c:	e000ed00 	.word	0xe000ed00
   1b030:	0001b187 	.word	0x0001b187
   1b034:	0001b0ef 	.word	0x0001b0ef
   1b038:	0001b135 	.word	0x0001b135
   1b03c:	0001b17b 	.word	0x0001b17b
   1b040:	0001af9d 	.word	0x0001af9d

0001b044 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1b044:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1b046:	f7ff fd73 	bl	1ab30 <os_sched_next_task>
   1b04a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1b04c:	f7ff fca8 	bl	1a9a0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1b050:	6823      	ldr	r3, [r4, #0]
   1b052:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1b054:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1b058:	2106      	movs	r1, #6
   1b05a:	2080      	movs	r0, #128	; 0x80
   1b05c:	f000 fde8 	bl	1bc30 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1b060:	4b03      	ldr	r3, [pc, #12]	; (1b070 <os_arch_start+0x2c>)
   1b062:	2201      	movs	r2, #1
   1b064:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1b066:	4620      	mov	r0, r4
   1b068:	f7ff ff60 	bl	1af2c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1b06c:	69a0      	ldr	r0, [r4, #24]
   1b06e:	bd10      	pop	{r4, pc}
   1b070:	2000e688 	.word	0x2000e688

0001b074 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1b074:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1b076:	4814      	ldr	r0, [pc, #80]	; (1b0c8 <os_arch_os_start+0x54>)
   1b078:	6800      	ldr	r0, [r0, #0]
   1b07a:	3804      	subs	r0, #4
   1b07c:	f000 f82a 	bl	1b0d4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1b080:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1b084:	b9d4      	cbnz	r4, 1b0bc <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1b086:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1b08a:	f004 0403 	and.w	r4, r4, #3
   1b08e:	2c03      	cmp	r4, #3
   1b090:	d808      	bhi.n	1b0a4 <os_arch_os_start+0x30>
   1b092:	e8df f004 	tbb	[pc, r4]
   1b096:	1515      	.short	0x1515
   1b098:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1b09a:	4c0c      	ldr	r4, [pc, #48]	; (1b0cc <os_arch_os_start+0x58>)
   1b09c:	6824      	ldr	r4, [r4, #0]
   1b09e:	f014 0f01 	tst.w	r4, #1
   1b0a2:	d10f      	bne.n	1b0c4 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1b0a4:	f8df c028 	ldr.w	ip, [pc, #40]	; 1b0d0 <os_arch_os_start+0x5c>
   1b0a8:	df00      	svc	0
   1b0aa:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1b0ac:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1b0ae:	4c07      	ldr	r4, [pc, #28]	; (1b0cc <os_arch_os_start+0x58>)
   1b0b0:	6824      	ldr	r4, [r4, #0]
   1b0b2:	f014 0f01 	tst.w	r4, #1
   1b0b6:	d1f5      	bne.n	1b0a4 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1b0b8:	2008      	movs	r0, #8
   1b0ba:	e7f7      	b.n	1b0ac <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1b0bc:	2007      	movs	r0, #7
   1b0be:	e7f5      	b.n	1b0ac <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1b0c0:	2008      	movs	r0, #8
   1b0c2:	e7f3      	b.n	1b0ac <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1b0c4:	2008      	movs	r0, #8
   1b0c6:	e7f1      	b.n	1b0ac <os_arch_os_start+0x38>
   1b0c8:	2000e5e8 	.word	0x2000e5e8
   1b0cc:	2000e1e8 	.word	0x2000e1e8
   1b0d0:	0001b045 	.word	0x0001b045

0001b0d4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1b0d4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1b0d8:	4832      	ldr	r0, [pc, #200]	; (1b1a4 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1b0da:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1b0dc:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1b0de:	f380 8814 	msr	CONTROL, r0
        ISB
   1b0e2:	f3bf 8f6f 	isb	sy
        BX      LR
   1b0e6:	4770      	bx	lr

0001b0e8 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1b0e8:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1b0ec:	4770      	bx	lr

0001b0ee <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1b0ee:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1b0f2:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1b0f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1b0f8:	b951      	cbnz	r1, 1b110 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b0fa:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b0fe:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1b100:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1b106:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1b10a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1b10e:	4770      	bx	lr

0001b110 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b110:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1b112:	4a25      	ldr	r2, [pc, #148]	; (1b1a8 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1b114:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1b116:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1b118:	d809      	bhi.n	1b12e <SVC_Done>

        LDR     R4,=SVC_Table-4
   1b11a:	4c24      	ldr	r4, [pc, #144]	; (1b1ac <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1b11c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b120:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1b124:	47a0      	blx	r4

        MRS     R12,PSP
   1b126:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1b12a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001b12e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1b132:	4770      	bx	lr

0001b134 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b134:	4b1e      	ldr	r3, [pc, #120]	; (1b1b0 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1b136:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1b138:	4b1e      	ldr	r3, [pc, #120]	; (1b1b4 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1b13a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1b13c:	4291      	cmp	r1, r2
        IT      EQ
   1b13e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1b140:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1b142:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1b146:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1b14a:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1b14c:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1b150:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1b154:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1b158:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1b15a:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1b15e:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1b162:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1b166:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1b168:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1b16c:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1b170:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1b174:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1b178:	4770      	bx	lr

0001b17a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b17a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1b17c:	f7ff fed1 	bl	1af22 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1b184:	4770      	bx	lr

0001b186 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1b186:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1b18a:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1b18c:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1b190:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1b194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1b198:	4668      	mov	r0, sp
        BL      os_default_irq
   1b19a:	f7fe fc61 	bl	19a60 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1b19e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1b1a2:	4770      	bx	lr
        LDR     R0,=os_flags
   1b1a4:	2000e1e8 	.word	0x2000e1e8
        LDR     R2,=SVC_Count
   1b1a8:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1b1ac:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b1b0:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1b1b4:	2000e6b0 	.word	0x2000e6b0

0001b1b8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1b1b8:	b470      	push	{r4, r5, r6}
   1b1ba:	f04f 0500 	mov.w	r5, #0
   1b1be:	f022 0603 	bic.w	r6, r2, #3
   1b1c2:	e005      	b.n	1b1d0 <test1>

0001b1c4 <loop1>:
   1b1c4:	5943      	ldr	r3, [r0, r5]
   1b1c6:	594c      	ldr	r4, [r1, r5]
   1b1c8:	42a3      	cmp	r3, r4
   1b1ca:	d104      	bne.n	1b1d6 <res1>
   1b1cc:	f105 0504 	add.w	r5, r5, #4

0001b1d0 <test1>:
   1b1d0:	42b5      	cmp	r5, r6
   1b1d2:	d1f7      	bne.n	1b1c4 <loop1>
   1b1d4:	e00d      	b.n	1b1f2 <test2>

0001b1d6 <res1>:
   1b1d6:	ba1b      	rev	r3, r3
   1b1d8:	ba24      	rev	r4, r4
   1b1da:	1b1b      	subs	r3, r3, r4
   1b1dc:	bf8c      	ite	hi
   1b1de:	2301      	movhi	r3, #1
   1b1e0:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b1e4:	e009      	b.n	1b1fa <done>

0001b1e6 <loop2>:
   1b1e6:	5d43      	ldrb	r3, [r0, r5]
   1b1e8:	5d4c      	ldrb	r4, [r1, r5]
   1b1ea:	1b1b      	subs	r3, r3, r4
   1b1ec:	d105      	bne.n	1b1fa <done>
   1b1ee:	f105 0501 	add.w	r5, r5, #1

0001b1f2 <test2>:
   1b1f2:	4295      	cmp	r5, r2
   1b1f4:	d1f7      	bne.n	1b1e6 <loop2>
   1b1f6:	f04f 0300 	mov.w	r3, #0

0001b1fa <done>:
   1b1fa:	4618      	mov	r0, r3
   1b1fc:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b1fe:	4770      	bx	lr

0001b200 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b200:	e001      	b.n	1b206 <test1>

0001b202 <loop1>:
   1b202:	588b      	ldr	r3, [r1, r2]
   1b204:	5083      	str	r3, [r0, r2]

0001b206 <test1>:
   1b206:	3a04      	subs	r2, #4
   1b208:	d5fb      	bpl.n	1b202 <loop1>
   1b20a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b20e:	e001      	b.n	1b214 <test2>

0001b210 <loop2>:
   1b210:	5c8b      	ldrb	r3, [r1, r2]
   1b212:	5483      	strb	r3, [r0, r2]

0001b214 <test2>:
   1b214:	3a01      	subs	r2, #1
   1b216:	d5fb      	bpl.n	1b210 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b218:	4770      	bx	lr

0001b21a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b21a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b21c:	4605      	mov	r5, r0
   1b21e:	b2c9      	uxtb	r1, r1
   1b220:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b224:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b228:	18ab      	adds	r3, r5, r2
   1b22a:	2403      	movs	r4, #3
   1b22c:	4023      	ands	r3, r4
   1b22e:	1ad3      	subs	r3, r2, r3
   1b230:	d40b      	bmi.n	1b24a <memset+0x30>
   1b232:	e001      	b.n	1b238 <memset+0x1e>
   1b234:	3a01      	subs	r2, #1
   1b236:	54a9      	strb	r1, [r5, r2]
   1b238:	429a      	cmp	r2, r3
   1b23a:	d1fb      	bne.n	1b234 <memset+0x1a>
   1b23c:	e000      	b.n	1b240 <memset+0x26>
   1b23e:	50a9      	str	r1, [r5, r2]
   1b240:	3a04      	subs	r2, #4
   1b242:	d5fc      	bpl.n	1b23e <memset+0x24>
   1b244:	3204      	adds	r2, #4
   1b246:	e000      	b.n	1b24a <memset+0x30>
   1b248:	54a9      	strb	r1, [r5, r2]
   1b24a:	3a01      	subs	r2, #1
   1b24c:	d5fc      	bpl.n	1b248 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b24e:	bc30      	pop	{r4, r5}
   1b250:	4770      	bx	lr

0001b252 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b252:	b430      	push	{r4, r5}
   1b254:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b256:	1c55      	adds	r5, r2, #1
   1b258:	7813      	ldrb	r3, [r2, #0]
   1b25a:	1c4c      	adds	r4, r1, #1
   1b25c:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b25e:	1a18      	subs	r0, r3, r0
   1b260:	d103      	bne.n	1b26a <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b262:	462a      	mov	r2, r5
   1b264:	4621      	mov	r1, r4
		if (d || !ch)
   1b266:	2b00      	cmp	r3, #0
   1b268:	d1f5      	bne.n	1b256 <strcmp+0x4>
			break;
	}

	return d;
}
   1b26a:	bc30      	pop	{r4, r5}
   1b26c:	4770      	bx	lr

0001b26e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b26e:	4603      	mov	r3, r0
	while (*ss)
   1b270:	e000      	b.n	1b274 <strlen+0x6>
		ss++;
   1b272:	3301      	adds	r3, #1
	while (*ss)
   1b274:	781a      	ldrb	r2, [r3, #0]
   1b276:	2a00      	cmp	r2, #0
   1b278:	d1fb      	bne.n	1b272 <strlen+0x4>
	return ss - s;
}
   1b27a:	1a18      	subs	r0, r3, r0
   1b27c:	4770      	bx	lr

0001b27e <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b27e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b282:	b082      	sub	sp, #8
   1b284:	e9cd 0100 	strd	r0, r1, [sp]
   1b288:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b28a:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b28e:	2401      	movs	r4, #1
   1b290:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b292:	e004      	b.n	1b29e <ui2a+0x20>
        d *= p->base;
   1b294:	fb06 f305 	mul.w	r3, r6, r5
   1b298:	fba4 4506 	umull	r4, r5, r4, r6
   1b29c:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b29e:	4622      	mov	r2, r4
   1b2a0:	462b      	mov	r3, r5
   1b2a2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b2a6:	f001 febd 	bl	1d024 <__aeabi_uldivmod>
   1b2aa:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b2ae:	2700      	movs	r7, #0
   1b2b0:	42b9      	cmp	r1, r7
   1b2b2:	bf08      	it	eq
   1b2b4:	42b0      	cmpeq	r0, r6
   1b2b6:	d2ed      	bcs.n	1b294 <ui2a+0x16>
    int n = 0;
   1b2b8:	f04f 0a00 	mov.w	sl, #0
   1b2bc:	e007      	b.n	1b2ce <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b2be:	2330      	movs	r3, #48	; 0x30
   1b2c0:	441e      	add	r6, r3
   1b2c2:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1b2c6:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b2ca:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1b2ce:	ea54 0305 	orrs.w	r3, r4, r5
   1b2d2:	d02e      	beq.n	1b332 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1b2d4:	4622      	mov	r2, r4
   1b2d6:	462b      	mov	r3, r5
   1b2d8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b2dc:	f001 fea2 	bl	1d024 <__aeabi_uldivmod>
   1b2e0:	4606      	mov	r6, r0
   1b2e2:	460f      	mov	r7, r1
        num %= d;
   1b2e4:	4622      	mov	r2, r4
   1b2e6:	462b      	mov	r3, r5
   1b2e8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b2ec:	f001 fe9a 	bl	1d024 <__aeabi_uldivmod>
   1b2f0:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1b2f4:	f899 2003 	ldrb.w	r2, [r9, #3]
   1b2f8:	2300      	movs	r3, #0
   1b2fa:	4620      	mov	r0, r4
   1b2fc:	4629      	mov	r1, r5
   1b2fe:	f001 fe91 	bl	1d024 <__aeabi_uldivmod>
   1b302:	4604      	mov	r4, r0
   1b304:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1b306:	f1ba 0f00 	cmp.w	sl, #0
   1b30a:	d105      	bne.n	1b318 <ui2a+0x9a>
   1b30c:	ea56 0307 	orrs.w	r3, r6, r7
   1b310:	d102      	bne.n	1b318 <ui2a+0x9a>
   1b312:	ea54 0305 	orrs.w	r3, r4, r5
   1b316:	d1da      	bne.n	1b2ce <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b318:	2f00      	cmp	r7, #0
   1b31a:	bf08      	it	eq
   1b31c:	2e0a      	cmpeq	r6, #10
   1b31e:	d3ce      	bcc.n	1b2be <ui2a+0x40>
   1b320:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b324:	f013 0f04 	tst.w	r3, #4
   1b328:	d001      	beq.n	1b32e <ui2a+0xb0>
   1b32a:	2337      	movs	r3, #55	; 0x37
   1b32c:	e7c8      	b.n	1b2c0 <ui2a+0x42>
   1b32e:	2357      	movs	r3, #87	; 0x57
   1b330:	e7c6      	b.n	1b2c0 <ui2a+0x42>
        }
    }
    *bf = 0;
   1b332:	2300      	movs	r3, #0
   1b334:	f888 3000 	strb.w	r3, [r8]
}
   1b338:	b002      	add	sp, #8
   1b33a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b33e <i2a>:

static void i2a(long long int num, struct param *p)
{
   1b33e:	b508      	push	{r3, lr}
    if (num < 0) {
   1b340:	2800      	cmp	r0, #0
   1b342:	f171 0300 	sbcs.w	r3, r1, #0
   1b346:	db02      	blt.n	1b34e <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1b348:	f7ff ff99 	bl	1b27e <ui2a>
}
   1b34c:	bd08      	pop	{r3, pc}
        num = -num;
   1b34e:	4240      	negs	r0, r0
   1b350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1b354:	7893      	ldrb	r3, [r2, #2]
   1b356:	f043 0301 	orr.w	r3, r3, #1
   1b35a:	7093      	strb	r3, [r2, #2]
   1b35c:	e7f4      	b.n	1b348 <i2a+0xa>

0001b35e <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1b35e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b362:	b2db      	uxtb	r3, r3
   1b364:	2b09      	cmp	r3, #9
   1b366:	d90b      	bls.n	1b380 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1b368:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b36c:	b2db      	uxtb	r3, r3
   1b36e:	2b05      	cmp	r3, #5
   1b370:	d908      	bls.n	1b384 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1b372:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b376:	b2db      	uxtb	r3, r3
   1b378:	2b05      	cmp	r3, #5
   1b37a:	d805      	bhi.n	1b388 <a2d+0x2a>
        return ch - 'A' + 10;
   1b37c:	3837      	subs	r0, #55	; 0x37
   1b37e:	4770      	bx	lr
        return ch - '0';
   1b380:	3830      	subs	r0, #48	; 0x30
   1b382:	4770      	bx	lr
        return ch - 'a' + 10;
   1b384:	3857      	subs	r0, #87	; 0x57
   1b386:	4770      	bx	lr
    else
        return -1;
   1b388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b38c:	4770      	bx	lr

0001b38e <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1b38e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b392:	4605      	mov	r5, r0
   1b394:	4688      	mov	r8, r1
   1b396:	4617      	mov	r7, r2
   1b398:	4699      	mov	r9, r3
    const char *p = *src;
   1b39a:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1b39c:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1b39e:	4628      	mov	r0, r5
   1b3a0:	f7ff ffdd 	bl	1b35e <a2d>
   1b3a4:	2800      	cmp	r0, #0
   1b3a6:	db06      	blt.n	1b3b6 <a2i+0x28>
        if (digit > base)
   1b3a8:	42b8      	cmp	r0, r7
   1b3aa:	dc04      	bgt.n	1b3b6 <a2i+0x28>
            break;
        num = num * base + digit;
   1b3ac:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1b3b0:	7825      	ldrb	r5, [r4, #0]
   1b3b2:	3401      	adds	r4, #1
   1b3b4:	e7f3      	b.n	1b39e <a2i+0x10>
    }
    *src = p;
   1b3b6:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1b3ba:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1b3be:	4628      	mov	r0, r5
   1b3c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b3c4 <putf>:

static int putf(FILE *putp, char c)
{
   1b3c4:	b500      	push	{lr}
   1b3c6:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1b3c8:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1b3cc:	6803      	ldr	r3, [r0, #0]
   1b3ce:	681b      	ldr	r3, [r3, #0]
   1b3d0:	b14b      	cbz	r3, 1b3e6 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1b3d2:	2201      	movs	r2, #1
   1b3d4:	f10d 0107 	add.w	r1, sp, #7
   1b3d8:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1b3da:	2801      	cmp	r0, #1
   1b3dc:	d005      	beq.n	1b3ea <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1b3de:	2000      	movs	r0, #0
    else
        return 1;
}
   1b3e0:	b003      	add	sp, #12
   1b3e2:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1b3e6:	2000      	movs	r0, #0
   1b3e8:	e7fa      	b.n	1b3e0 <putf+0x1c>
        return 1;
   1b3ea:	2001      	movs	r0, #1
   1b3ec:	e7f8      	b.n	1b3e0 <putf+0x1c>
	...

0001b3f0 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1b3f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3f4:	4606      	mov	r6, r0
   1b3f6:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1b3f8:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1b3fa:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1b3fc:	e001      	b.n	1b402 <putchw+0x12>
        n--;
   1b3fe:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1b400:	4613      	mov	r3, r2
   1b402:	1c5a      	adds	r2, r3, #1
   1b404:	781b      	ldrb	r3, [r3, #0]
   1b406:	b10b      	cbz	r3, 1b40c <putchw+0x1c>
   1b408:	2c00      	cmp	r4, #0
   1b40a:	dcf8      	bgt.n	1b3fe <putchw+0xe>
    if (p->sign)
   1b40c:	78bb      	ldrb	r3, [r7, #2]
   1b40e:	f013 0f01 	tst.w	r3, #1
   1b412:	d000      	beq.n	1b416 <putchw+0x26>
        n--;
   1b414:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1b416:	887b      	ldrh	r3, [r7, #2]
   1b418:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b41c:	b29b      	uxth	r3, r3
   1b41e:	f241 0202 	movw	r2, #4098	; 0x1002
   1b422:	4293      	cmp	r3, r2
   1b424:	d01c      	beq.n	1b460 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1b426:	f640 0202 	movw	r2, #2050	; 0x802
   1b42a:	4293      	cmp	r3, r2
   1b42c:	d01a      	beq.n	1b464 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1b42e:	683b      	ldr	r3, [r7, #0]
   1b430:	4d35      	ldr	r5, [pc, #212]	; (1b508 <putchw+0x118>)
   1b432:	401d      	ands	r5, r3
   1b434:	b1f5      	cbz	r5, 1b474 <putchw+0x84>
    unsigned written = 0;
   1b436:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1b438:	78bb      	ldrb	r3, [r7, #2]
   1b43a:	f013 0f01 	tst.w	r3, #1
   1b43e:	d11f      	bne.n	1b480 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1b440:	887b      	ldrh	r3, [r7, #2]
   1b442:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b446:	b29b      	uxth	r3, r3
   1b448:	f241 0202 	movw	r2, #4098	; 0x1002
   1b44c:	4293      	cmp	r3, r2
   1b44e:	d01d      	beq.n	1b48c <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1b450:	f640 0202 	movw	r2, #2050	; 0x802
   1b454:	4293      	cmp	r3, r2
   1b456:	d02a      	beq.n	1b4ae <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1b458:	787b      	ldrb	r3, [r7, #1]
   1b45a:	bba3      	cbnz	r3, 1b4c6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1b45c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1b45e:	e03d      	b.n	1b4dc <putchw+0xec>
        n -= 2;
   1b460:	3c02      	subs	r4, #2
   1b462:	e7e4      	b.n	1b42e <putchw+0x3e>
        n--;
   1b464:	3c01      	subs	r4, #1
   1b466:	e7e2      	b.n	1b42e <putchw+0x3e>
            written += putf(putp, ' ');
   1b468:	2120      	movs	r1, #32
   1b46a:	4630      	mov	r0, r6
   1b46c:	f7ff ffaa 	bl	1b3c4 <putf>
   1b470:	4405      	add	r5, r0
        while (n-- > 0)
   1b472:	4644      	mov	r4, r8
   1b474:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b478:	2c00      	cmp	r4, #0
   1b47a:	dcf5      	bgt.n	1b468 <putchw+0x78>
   1b47c:	4644      	mov	r4, r8
   1b47e:	e7db      	b.n	1b438 <putchw+0x48>
        written += putf(putp, '-');
   1b480:	212d      	movs	r1, #45	; 0x2d
   1b482:	4630      	mov	r0, r6
   1b484:	f7ff ff9e 	bl	1b3c4 <putf>
   1b488:	4405      	add	r5, r0
   1b48a:	e7d9      	b.n	1b440 <putchw+0x50>
        written += putf(putp, '0');
   1b48c:	2130      	movs	r1, #48	; 0x30
   1b48e:	4630      	mov	r0, r6
   1b490:	f7ff ff98 	bl	1b3c4 <putf>
   1b494:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b496:	78bb      	ldrb	r3, [r7, #2]
   1b498:	f013 0f04 	tst.w	r3, #4
   1b49c:	d005      	beq.n	1b4aa <putchw+0xba>
   1b49e:	2158      	movs	r1, #88	; 0x58
   1b4a0:	4630      	mov	r0, r6
   1b4a2:	f7ff ff8f 	bl	1b3c4 <putf>
   1b4a6:	4405      	add	r5, r0
   1b4a8:	e7d6      	b.n	1b458 <putchw+0x68>
   1b4aa:	2178      	movs	r1, #120	; 0x78
   1b4ac:	e7f8      	b.n	1b4a0 <putchw+0xb0>
        written += putf(putp, '0');
   1b4ae:	2130      	movs	r1, #48	; 0x30
   1b4b0:	4630      	mov	r0, r6
   1b4b2:	f7ff ff87 	bl	1b3c4 <putf>
   1b4b6:	4405      	add	r5, r0
   1b4b8:	e7ce      	b.n	1b458 <putchw+0x68>
            written += putf(putp, '0');
   1b4ba:	2130      	movs	r1, #48	; 0x30
   1b4bc:	4630      	mov	r0, r6
   1b4be:	f7ff ff81 	bl	1b3c4 <putf>
   1b4c2:	4405      	add	r5, r0
        while (n-- > 0)
   1b4c4:	4644      	mov	r4, r8
   1b4c6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b4ca:	2c00      	cmp	r4, #0
   1b4cc:	dcf5      	bgt.n	1b4ba <putchw+0xca>
   1b4ce:	4644      	mov	r4, r8
   1b4d0:	e7c4      	b.n	1b45c <putchw+0x6c>
        written += putf(putp, ch);
   1b4d2:	4630      	mov	r0, r6
   1b4d4:	f7ff ff76 	bl	1b3c4 <putf>
   1b4d8:	4405      	add	r5, r0
    while ((ch = *bf++))
   1b4da:	4643      	mov	r3, r8
   1b4dc:	f103 0801 	add.w	r8, r3, #1
   1b4e0:	7819      	ldrb	r1, [r3, #0]
   1b4e2:	2900      	cmp	r1, #0
   1b4e4:	d1f5      	bne.n	1b4d2 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b4e6:	78bb      	ldrb	r3, [r7, #2]
   1b4e8:	f013 0f08 	tst.w	r3, #8
   1b4ec:	d106      	bne.n	1b4fc <putchw+0x10c>
   1b4ee:	e008      	b.n	1b502 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1b4f0:	2120      	movs	r1, #32
   1b4f2:	4630      	mov	r0, r6
   1b4f4:	f7ff ff66 	bl	1b3c4 <putf>
   1b4f8:	4405      	add	r5, r0
        while (n-- > 0)
   1b4fa:	463c      	mov	r4, r7
   1b4fc:	1e67      	subs	r7, r4, #1
   1b4fe:	2c00      	cmp	r4, #0
   1b500:	dcf6      	bgt.n	1b4f0 <putchw+0x100>
    }
    
    return written;
}
   1b502:	4628      	mov	r0, r5
   1b504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b508:	0008ff00 	.word	0x0008ff00

0001b50c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b50c:	b160      	cbz	r0, 1b528 <intarg+0x1c>
   1b50e:	2801      	cmp	r0, #1
   1b510:	d017      	beq.n	1b542 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b512:	bb19      	cbnz	r1, 1b55c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1b514:	6813      	ldr	r3, [r2, #0]
   1b516:	3307      	adds	r3, #7
   1b518:	f023 0307 	bic.w	r3, r3, #7
   1b51c:	f103 0108 	add.w	r1, r3, #8
   1b520:	6011      	str	r1, [r2, #0]
   1b522:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b526:	4770      	bx	lr
        if (sign) {
   1b528:	b129      	cbz	r1, 1b536 <intarg+0x2a>
            val = va_arg(*va, int);
   1b52a:	6813      	ldr	r3, [r2, #0]
   1b52c:	1d19      	adds	r1, r3, #4
   1b52e:	6011      	str	r1, [r2, #0]
   1b530:	6818      	ldr	r0, [r3, #0]
   1b532:	17c1      	asrs	r1, r0, #31
   1b534:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b536:	6813      	ldr	r3, [r2, #0]
   1b538:	1d19      	adds	r1, r3, #4
   1b53a:	6011      	str	r1, [r2, #0]
   1b53c:	6818      	ldr	r0, [r3, #0]
   1b53e:	2100      	movs	r1, #0
   1b540:	4770      	bx	lr
        if (sign) {
   1b542:	b129      	cbz	r1, 1b550 <intarg+0x44>
            val = va_arg(*va, long);
   1b544:	6813      	ldr	r3, [r2, #0]
   1b546:	1d19      	adds	r1, r3, #4
   1b548:	6011      	str	r1, [r2, #0]
   1b54a:	6818      	ldr	r0, [r3, #0]
   1b54c:	17c1      	asrs	r1, r0, #31
   1b54e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b550:	6813      	ldr	r3, [r2, #0]
   1b552:	1d19      	adds	r1, r3, #4
   1b554:	6011      	str	r1, [r2, #0]
   1b556:	6818      	ldr	r0, [r3, #0]
   1b558:	2100      	movs	r1, #0
   1b55a:	4770      	bx	lr
            val = va_arg(*va, long long);
   1b55c:	6813      	ldr	r3, [r2, #0]
   1b55e:	3307      	adds	r3, #7
   1b560:	f023 0307 	bic.w	r3, r3, #7
   1b564:	f103 0108 	add.w	r1, r3, #8
   1b568:	6011      	str	r1, [r2, #0]
   1b56a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b56e:	4770      	bx	lr

0001b570 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b570:	b570      	push	{r4, r5, r6, lr}
   1b572:	b08a      	sub	sp, #40	; 0x28
   1b574:	4605      	mov	r5, r0
   1b576:	9101      	str	r1, [sp, #4]
   1b578:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b57a:	ab02      	add	r3, sp, #8
   1b57c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b57e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1b580:	9b01      	ldr	r3, [sp, #4]
   1b582:	1c5a      	adds	r2, r3, #1
   1b584:	9201      	str	r2, [sp, #4]
   1b586:	7819      	ldrb	r1, [r3, #0]
   1b588:	2900      	cmp	r1, #0
   1b58a:	f000 811c 	beq.w	1b7c6 <tfp_format+0x256>
        if (ch != '%') {
   1b58e:	2925      	cmp	r1, #37	; 0x25
   1b590:	d004      	beq.n	1b59c <tfp_format+0x2c>
            written += putf(putp, ch);
   1b592:	4628      	mov	r0, r5
   1b594:	f7ff ff16 	bl	1b3c4 <putf>
   1b598:	4404      	add	r4, r0
   1b59a:	e7f1      	b.n	1b580 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b59c:	2200      	movs	r2, #0
   1b59e:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b5a2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b5a6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1b5aa:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1b5ae:	f362 0382 	bfi	r3, r2, #2, #1
   1b5b2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b5b6:	9b01      	ldr	r3, [sp, #4]
   1b5b8:	1c5a      	adds	r2, r3, #1
   1b5ba:	9201      	str	r2, [sp, #4]
   1b5bc:	7818      	ldrb	r0, [r3, #0]
   1b5be:	b128      	cbz	r0, 1b5cc <tfp_format+0x5c>
                switch (ch) {
   1b5c0:	282d      	cmp	r0, #45	; 0x2d
   1b5c2:	d04e      	beq.n	1b662 <tfp_format+0xf2>
   1b5c4:	2830      	cmp	r0, #48	; 0x30
   1b5c6:	d03c      	beq.n	1b642 <tfp_format+0xd2>
   1b5c8:	2823      	cmp	r0, #35	; 0x23
   1b5ca:	d043      	beq.n	1b654 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b5cc:	282a      	cmp	r0, #42	; 0x2a
   1b5ce:	d052      	beq.n	1b676 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b5d0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b5d4:	b2db      	uxtb	r3, r3
   1b5d6:	2b09      	cmp	r3, #9
   1b5d8:	d961      	bls.n	1b69e <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b5da:	286c      	cmp	r0, #108	; 0x6c
   1b5dc:	d065      	beq.n	1b6aa <tfp_format+0x13a>
            lng = 0;
   1b5de:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1b5e0:	287a      	cmp	r0, #122	; 0x7a
   1b5e2:	d06f      	beq.n	1b6c4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1b5e4:	2869      	cmp	r0, #105	; 0x69
   1b5e6:	f000 808e 	beq.w	1b706 <tfp_format+0x196>
   1b5ea:	d970      	bls.n	1b6ce <tfp_format+0x15e>
   1b5ec:	2873      	cmp	r0, #115	; 0x73
   1b5ee:	f000 80dd 	beq.w	1b7ac <tfp_format+0x23c>
   1b5f2:	f200 8099 	bhi.w	1b728 <tfp_format+0x1b8>
   1b5f6:	286f      	cmp	r0, #111	; 0x6f
   1b5f8:	f000 80c7 	beq.w	1b78a <tfp_format+0x21a>
   1b5fc:	2870      	cmp	r0, #112	; 0x70
   1b5fe:	d1bf      	bne.n	1b580 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1b600:	9b00      	ldr	r3, [sp, #0]
   1b602:	1d1a      	adds	r2, r3, #4
   1b604:	9200      	str	r2, [sp, #0]
   1b606:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b608:	2310      	movs	r3, #16
   1b60a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b60e:	aa08      	add	r2, sp, #32
   1b610:	2100      	movs	r1, #0
   1b612:	f7ff fe34 	bl	1b27e <ui2a>
                p.width = 2 * sizeof(void*);
   1b616:	2308      	movs	r3, #8
   1b618:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b61c:	2301      	movs	r3, #1
   1b61e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b622:	2130      	movs	r1, #48	; 0x30
   1b624:	4628      	mov	r0, r5
   1b626:	f7ff fecd 	bl	1b3c4 <putf>
   1b62a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1b62c:	2178      	movs	r1, #120	; 0x78
   1b62e:	4628      	mov	r0, r5
   1b630:	f7ff fec8 	bl	1b3c4 <putf>
   1b634:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1b636:	a908      	add	r1, sp, #32
   1b638:	4628      	mov	r0, r5
   1b63a:	f7ff fed9 	bl	1b3f0 <putchw>
   1b63e:	4404      	add	r4, r0
                break;
   1b640:	e79e      	b.n	1b580 <tfp_format+0x10>
                    if (!p.left) {
   1b642:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b646:	f013 0f08 	tst.w	r3, #8
   1b64a:	d1b4      	bne.n	1b5b6 <tfp_format+0x46>
                        p.lz = 1;
   1b64c:	2301      	movs	r3, #1
   1b64e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b652:	e7b0      	b.n	1b5b6 <tfp_format+0x46>
                    p.alt = 1;
   1b654:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b658:	f043 0302 	orr.w	r3, r3, #2
   1b65c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b660:	e7a9      	b.n	1b5b6 <tfp_format+0x46>
                    p.left = 1;
   1b662:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b666:	f043 0308 	orr.w	r3, r3, #8
   1b66a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b66e:	2300      	movs	r3, #0
   1b670:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b674:	e79f      	b.n	1b5b6 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b676:	466a      	mov	r2, sp
   1b678:	2101      	movs	r1, #1
   1b67a:	2000      	movs	r0, #0
   1b67c:	f7ff ff46 	bl	1b50c <intarg>
                if (i > UCHAR_MAX) {
   1b680:	28ff      	cmp	r0, #255	; 0xff
   1b682:	dd07      	ble.n	1b694 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1b684:	23ff      	movs	r3, #255	; 0xff
   1b686:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b68a:	9b01      	ldr	r3, [sp, #4]
   1b68c:	1c5a      	adds	r2, r3, #1
   1b68e:	9201      	str	r2, [sp, #4]
   1b690:	7818      	ldrb	r0, [r3, #0]
   1b692:	e7a2      	b.n	1b5da <tfp_format+0x6a>
                } else if (i > 0) {
   1b694:	2800      	cmp	r0, #0
   1b696:	ddf8      	ble.n	1b68a <tfp_format+0x11a>
                    p.width = i;
   1b698:	f88d 0020 	strb.w	r0, [sp, #32]
   1b69c:	e7f5      	b.n	1b68a <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b69e:	ab08      	add	r3, sp, #32
   1b6a0:	220a      	movs	r2, #10
   1b6a2:	a901      	add	r1, sp, #4
   1b6a4:	f7ff fe73 	bl	1b38e <a2i>
   1b6a8:	e797      	b.n	1b5da <tfp_format+0x6a>
                ch = *(fmt++);
   1b6aa:	9b01      	ldr	r3, [sp, #4]
   1b6ac:	1c5a      	adds	r2, r3, #1
   1b6ae:	9201      	str	r2, [sp, #4]
   1b6b0:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1b6b2:	286c      	cmp	r0, #108	; 0x6c
   1b6b4:	d001      	beq.n	1b6ba <tfp_format+0x14a>
                lng = 1;
   1b6b6:	2601      	movs	r6, #1
   1b6b8:	e792      	b.n	1b5e0 <tfp_format+0x70>
                    ch = *(fmt++);
   1b6ba:	1c9a      	adds	r2, r3, #2
   1b6bc:	9201      	str	r2, [sp, #4]
   1b6be:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1b6c0:	2602      	movs	r6, #2
   1b6c2:	e78d      	b.n	1b5e0 <tfp_format+0x70>
                ch = *(fmt++);
   1b6c4:	9b01      	ldr	r3, [sp, #4]
   1b6c6:	1c5a      	adds	r2, r3, #1
   1b6c8:	9201      	str	r2, [sp, #4]
   1b6ca:	7818      	ldrb	r0, [r3, #0]
   1b6cc:	e78a      	b.n	1b5e4 <tfp_format+0x74>
            switch (ch) {
   1b6ce:	2858      	cmp	r0, #88	; 0x58
   1b6d0:	d040      	beq.n	1b754 <tfp_format+0x1e4>
   1b6d2:	d80a      	bhi.n	1b6ea <tfp_format+0x17a>
   1b6d4:	2800      	cmp	r0, #0
   1b6d6:	d076      	beq.n	1b7c6 <tfp_format+0x256>
   1b6d8:	2825      	cmp	r0, #37	; 0x25
   1b6da:	f47f af51 	bne.w	1b580 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b6de:	4601      	mov	r1, r0
   1b6e0:	4628      	mov	r0, r5
   1b6e2:	f7ff fe6f 	bl	1b3c4 <putf>
   1b6e6:	4404      	add	r4, r0
                break;
   1b6e8:	e74a      	b.n	1b580 <tfp_format+0x10>
            switch (ch) {
   1b6ea:	2863      	cmp	r0, #99	; 0x63
   1b6ec:	d108      	bne.n	1b700 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1b6ee:	9b00      	ldr	r3, [sp, #0]
   1b6f0:	1d1a      	adds	r2, r3, #4
   1b6f2:	9200      	str	r2, [sp, #0]
   1b6f4:	7819      	ldrb	r1, [r3, #0]
   1b6f6:	4628      	mov	r0, r5
   1b6f8:	f7ff fe64 	bl	1b3c4 <putf>
   1b6fc:	4404      	add	r4, r0
                break;
   1b6fe:	e73f      	b.n	1b580 <tfp_format+0x10>
            switch (ch) {
   1b700:	2864      	cmp	r0, #100	; 0x64
   1b702:	f47f af3d 	bne.w	1b580 <tfp_format+0x10>
                p.base = 10;
   1b706:	230a      	movs	r3, #10
   1b708:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b70c:	466a      	mov	r2, sp
   1b70e:	2101      	movs	r1, #1
   1b710:	4630      	mov	r0, r6
   1b712:	f7ff fefb 	bl	1b50c <intarg>
   1b716:	aa08      	add	r2, sp, #32
   1b718:	f7ff fe11 	bl	1b33e <i2a>
                written += putchw(putp, &p);
   1b71c:	a908      	add	r1, sp, #32
   1b71e:	4628      	mov	r0, r5
   1b720:	f7ff fe66 	bl	1b3f0 <putchw>
   1b724:	4404      	add	r4, r0
                break;
   1b726:	e72b      	b.n	1b580 <tfp_format+0x10>
            switch (ch) {
   1b728:	2875      	cmp	r0, #117	; 0x75
   1b72a:	d110      	bne.n	1b74e <tfp_format+0x1de>
                p.base = 10;
   1b72c:	230a      	movs	r3, #10
   1b72e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b732:	466a      	mov	r2, sp
   1b734:	2100      	movs	r1, #0
   1b736:	4630      	mov	r0, r6
   1b738:	f7ff fee8 	bl	1b50c <intarg>
   1b73c:	aa08      	add	r2, sp, #32
   1b73e:	f7ff fd9e 	bl	1b27e <ui2a>
                written += putchw(putp, &p);
   1b742:	a908      	add	r1, sp, #32
   1b744:	4628      	mov	r0, r5
   1b746:	f7ff fe53 	bl	1b3f0 <putchw>
   1b74a:	4404      	add	r4, r0
                break;
   1b74c:	e718      	b.n	1b580 <tfp_format+0x10>
            switch (ch) {
   1b74e:	2878      	cmp	r0, #120	; 0x78
   1b750:	f47f af16 	bne.w	1b580 <tfp_format+0x10>
                p.base = 16;
   1b754:	2310      	movs	r3, #16
   1b756:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b75a:	2858      	cmp	r0, #88	; 0x58
   1b75c:	bf14      	ite	ne
   1b75e:	2300      	movne	r3, #0
   1b760:	2301      	moveq	r3, #1
   1b762:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1b766:	f363 0282 	bfi	r2, r3, #2, #1
   1b76a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b76e:	466a      	mov	r2, sp
   1b770:	2100      	movs	r1, #0
   1b772:	4630      	mov	r0, r6
   1b774:	f7ff feca 	bl	1b50c <intarg>
   1b778:	aa08      	add	r2, sp, #32
   1b77a:	f7ff fd80 	bl	1b27e <ui2a>
                written += putchw(putp, &p);
   1b77e:	a908      	add	r1, sp, #32
   1b780:	4628      	mov	r0, r5
   1b782:	f7ff fe35 	bl	1b3f0 <putchw>
   1b786:	4404      	add	r4, r0
                break;
   1b788:	e6fa      	b.n	1b580 <tfp_format+0x10>
                p.base = 8;
   1b78a:	2308      	movs	r3, #8
   1b78c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b790:	466a      	mov	r2, sp
   1b792:	2100      	movs	r1, #0
   1b794:	4630      	mov	r0, r6
   1b796:	f7ff feb9 	bl	1b50c <intarg>
   1b79a:	aa08      	add	r2, sp, #32
   1b79c:	f7ff fd6f 	bl	1b27e <ui2a>
                written += putchw(putp, &p);
   1b7a0:	a908      	add	r1, sp, #32
   1b7a2:	4628      	mov	r0, r5
   1b7a4:	f7ff fe24 	bl	1b3f0 <putchw>
   1b7a8:	4404      	add	r4, r0
                break;
   1b7aa:	e6e9      	b.n	1b580 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b7ac:	9b00      	ldr	r3, [sp, #0]
   1b7ae:	1d1a      	adds	r2, r3, #4
   1b7b0:	9200      	str	r2, [sp, #0]
   1b7b2:	681b      	ldr	r3, [r3, #0]
   1b7b4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b7b6:	a908      	add	r1, sp, #32
   1b7b8:	4628      	mov	r0, r5
   1b7ba:	f7ff fe19 	bl	1b3f0 <putchw>
   1b7be:	4404      	add	r4, r0
                p.bf = bf;
   1b7c0:	ab02      	add	r3, sp, #8
   1b7c2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b7c4:	e6dc      	b.n	1b580 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b7c6:	4620      	mov	r0, r4
   1b7c8:	b00a      	add	sp, #40	; 0x28
   1b7ca:	bd70      	pop	{r4, r5, r6, pc}

0001b7cc <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b7cc:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b7ce:	f7ff fecf 	bl	1b570 <tfp_format>
}
   1b7d2:	bd08      	pop	{r3, pc}

0001b7d4 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1b7d4:	b40f      	push	{r0, r1, r2, r3}
   1b7d6:	b500      	push	{lr}
   1b7d8:	b083      	sub	sp, #12
   1b7da:	aa04      	add	r2, sp, #16
   1b7dc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b7e0:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b7e2:	4b04      	ldr	r3, [pc, #16]	; (1b7f4 <printf+0x20>)
   1b7e4:	6818      	ldr	r0, [r3, #0]
   1b7e6:	f7ff fff1 	bl	1b7cc <vfprintf>
    va_end(va);
    return rv;
}
   1b7ea:	b003      	add	sp, #12
   1b7ec:	f85d eb04 	ldr.w	lr, [sp], #4
   1b7f0:	b004      	add	sp, #16
   1b7f2:	4770      	bx	lr
   1b7f4:	000212a4 	.word	0x000212a4

0001b7f8 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b7fa:	b085      	sub	sp, #20
   1b7fc:	4605      	mov	r5, r0
   1b7fe:	460c      	mov	r4, r1
   1b800:	4616      	mov	r6, r2
   1b802:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b804:	460a      	mov	r2, r1
   1b806:	4601      	mov	r1, r0
   1b808:	4668      	mov	r0, sp
   1b80a:	f000 f835 	bl	1b878 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b80e:	463a      	mov	r2, r7
   1b810:	4631      	mov	r1, r6
   1b812:	f7ff fead 	bl	1b570 <tfp_format>
    if (size > 0) {
   1b816:	b12c      	cbz	r4, 1b824 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b818:	9b02      	ldr	r3, [sp, #8]
   1b81a:	42a3      	cmp	r3, r4
   1b81c:	d305      	bcc.n	1b82a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1b81e:	3c01      	subs	r4, #1
   1b820:	2300      	movs	r3, #0
   1b822:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1b824:	9802      	ldr	r0, [sp, #8]
   1b826:	b005      	add	sp, #20
   1b828:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1b82a:	9b01      	ldr	r3, [sp, #4]
   1b82c:	2200      	movs	r2, #0
   1b82e:	701a      	strb	r2, [r3, #0]
   1b830:	e7f8      	b.n	1b824 <vsnprintf+0x2c>
	...

0001b834 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b834:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1b836:	460a      	mov	r2, r1
   1b838:	4601      	mov	r1, r0
   1b83a:	4b02      	ldr	r3, [pc, #8]	; (1b844 <vprintf+0x10>)
   1b83c:	6818      	ldr	r0, [r3, #0]
   1b83e:	f7ff ffc5 	bl	1b7cc <vfprintf>
}
   1b842:	bd08      	pop	{r3, pc}
   1b844:	000212a4 	.word	0x000212a4

0001b848 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b848:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b84a:	2500      	movs	r5, #0
    
    while (n--)
   1b84c:	e000      	b.n	1b850 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b84e:	4622      	mov	r2, r4
    while (n--)
   1b850:	1e54      	subs	r4, r2, #1
   1b852:	b16a      	cbz	r2, 1b870 <memfile_write+0x28>
        f->bytes_written++;
   1b854:	6883      	ldr	r3, [r0, #8]
   1b856:	3301      	adds	r3, #1
   1b858:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1b85a:	68c2      	ldr	r2, [r0, #12]
   1b85c:	4293      	cmp	r3, r2
   1b85e:	d8f6      	bhi.n	1b84e <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1b860:	6843      	ldr	r3, [r0, #4]
   1b862:	1c5a      	adds	r2, r3, #1
   1b864:	6042      	str	r2, [r0, #4]
   1b866:	780a      	ldrb	r2, [r1, #0]
   1b868:	701a      	strb	r2, [r3, #0]
            i++;
   1b86a:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1b86c:	3101      	adds	r1, #1
   1b86e:	e7ee      	b.n	1b84e <memfile_write+0x6>
        }
    }
    
    return i;
}
   1b870:	4628      	mov	r0, r5
   1b872:	bc30      	pop	{r4, r5}
   1b874:	4770      	bx	lr
	...

0001b878 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b878:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b87a:	4c04      	ldr	r4, [pc, #16]	; (1b88c <fmemopen_w+0x14>)
   1b87c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b87e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b880:	2100      	movs	r1, #0
   1b882:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b884:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b886:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b88a:	4770      	bx	lr
   1b88c:	0002129c 	.word	0x0002129c

0001b890 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b890:	2000      	movs	r0, #0
   1b892:	4770      	bx	lr

0001b894 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b894:	b510      	push	{r4, lr}
   1b896:	4608      	mov	r0, r1
   1b898:	4614      	mov	r4, r2
    console_write(bp, n);
   1b89a:	4611      	mov	r1, r2
   1b89c:	f7fd f9b8 	bl	18c10 <console_write>
    return n;
}
   1b8a0:	4620      	mov	r0, r4
   1b8a2:	bd10      	pop	{r4, pc}

0001b8a4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1b8a4:	b508      	push	{r3, lr}
    sysinit();
   1b8a6:	f7fd fa1b 	bl	18ce0 <sysinit_start>
   1b8aa:	f000 f81b 	bl	1b8e4 <sysinit_app>
   1b8ae:	f7fd fa1d 	bl	18cec <sysinit_end>
}
   1b8b2:	bd08      	pop	{r3, pc}

0001b8b4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1b8b4:	b570      	push	{r4, r5, r6, lr}
   1b8b6:	b082      	sub	sp, #8
   1b8b8:	460c      	mov	r4, r1
   1b8ba:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1b8bc:	b29d      	uxth	r5, r3
   1b8be:	9b07      	ldr	r3, [sp, #28]
   1b8c0:	9300      	str	r3, [sp, #0]
   1b8c2:	4603      	mov	r3, r0
   1b8c4:	9a06      	ldr	r2, [sp, #24]
   1b8c6:	4629      	mov	r1, r5
   1b8c8:	4620      	mov	r0, r4
   1b8ca:	f7fe fdeb 	bl	1a4a4 <os_mempool_init>
    if (rc != 0) {
   1b8ce:	b108      	cbz	r0, 1b8d4 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b8d0:	b002      	add	sp, #8
   1b8d2:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1b8d4:	462b      	mov	r3, r5
   1b8d6:	9a06      	ldr	r2, [sp, #24]
   1b8d8:	b292      	uxth	r2, r2
   1b8da:	4621      	mov	r1, r4
   1b8dc:	4630      	mov	r0, r6
   1b8de:	f7fe fc96 	bl	1a20e <os_mbuf_pool_init>
   1b8e2:	e7f5      	b.n	1b8d0 <mem_init_mbuf_pool+0x1c>

0001b8e4 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1b8e4:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1b8e6:	f7fe f9f3 	bl	19cd0 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1b8ea:	f001 f985 	bl	1cbf8 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1b8ee:	f7fd f9a3 	bl	18c38 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1b8f2:	f001 fac7 	bl	1ce84 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1b8f6:	f001 f9b7 	bl	1cc68 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1b8fa:	f001 f8e1 	bl	1cac0 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1b8fe:	f001 f8f1 	bl	1cae4 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1b902:	f001 f8f0 	bl	1cae6 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1b906:	f001 f8ef 	bl	1cae8 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1b90a:	f001 f8ee 	bl	1caea <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1b90e:	f001 f8ed 	bl	1caec <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1b912:	f000 fbd1 	bl	1c0b8 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1b916:	f000 fd1f 	bl	1c358 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1b91a:	f000 ff3d 	bl	1c798 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1b91e:	f000 feb3 	bl	1c688 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1b922:	f000 fe3d 	bl	1c5a0 <init_sensor_coap>
}
   1b926:	bd08      	pop	{r3, pc}

0001b928 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1b928:	b908      	cbnz	r0, 1b92e <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1b92a:	4802      	ldr	r0, [pc, #8]	; (1b934 <hal_bsp_flash_dev+0xc>)
   1b92c:	4770      	bx	lr
    }

    return NULL;
   1b92e:	2000      	movs	r0, #0
}
   1b930:	4770      	bx	lr
   1b932:	bf00      	nop
   1b934:	000212a8 	.word	0x000212a8

0001b938 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1b938:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1b93a:	f7ec fc41 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1b93e:	f000 fbb3 	bl	1c0a8 <nrf52_periph_create>
}
   1b942:	bd08      	pop	{r3, pc}

0001b944 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1b944:	2300      	movs	r3, #0
   1b946:	4a07      	ldr	r2, [pc, #28]	; (1b964 <nrf52k_flash_wait_ready+0x20>)
   1b948:	4293      	cmp	r3, r2
   1b94a:	dc06      	bgt.n	1b95a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1b94c:	4a06      	ldr	r2, [pc, #24]	; (1b968 <nrf52k_flash_wait_ready+0x24>)
   1b94e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1b952:	2a01      	cmp	r2, #1
   1b954:	d004      	beq.n	1b960 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1b956:	3301      	adds	r3, #1
   1b958:	e7f5      	b.n	1b946 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1b95a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b95e:	4770      	bx	lr
            return 0;
   1b960:	2000      	movs	r0, #0
}
   1b962:	4770      	bx	lr
   1b964:	0001869f 	.word	0x0001869f
   1b968:	4001e000 	.word	0x4001e000

0001b96c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1b96c:	b538      	push	{r3, r4, r5, lr}
   1b96e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1b970:	f7ff ffe8 	bl	1b944 <nrf52k_flash_wait_ready>
   1b974:	b9f0      	cbnz	r0, 1b9b4 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b976:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b97a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1b97c:	4b0f      	ldr	r3, [pc, #60]	; (1b9bc <nrf52k_flash_erase_sector+0x50>)
   1b97e:	2202      	movs	r2, #2
   1b980:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1b984:	f7ff ffde 	bl	1b944 <nrf52k_flash_wait_ready>
   1b988:	b148      	cbz	r0, 1b99e <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1b98a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1b98e:	4a0b      	ldr	r2, [pc, #44]	; (1b9bc <nrf52k_flash_erase_sector+0x50>)
   1b990:	2100      	movs	r1, #0
   1b992:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b996:	b904      	cbnz	r4, 1b99a <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b998:	b662      	cpsie	i
    return rc;
}
   1b99a:	4618      	mov	r0, r3
   1b99c:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1b99e:	4b07      	ldr	r3, [pc, #28]	; (1b9bc <nrf52k_flash_erase_sector+0x50>)
   1b9a0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1b9a4:	f7ff ffce 	bl	1b944 <nrf52k_flash_wait_ready>
   1b9a8:	4603      	mov	r3, r0
   1b9aa:	2800      	cmp	r0, #0
   1b9ac:	d0ef      	beq.n	1b98e <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1b9ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9b2:	e7ec      	b.n	1b98e <nrf52k_flash_erase_sector+0x22>
        return -1;
   1b9b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9b8:	e7ef      	b.n	1b99a <nrf52k_flash_erase_sector+0x2e>
   1b9ba:	bf00      	nop
   1b9bc:	4001e000 	.word	0x4001e000

0001b9c0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1b9c0:	2000      	movs	r0, #0
   1b9c2:	4770      	bx	lr

0001b9c4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b9c4:	297f      	cmp	r1, #127	; 0x7f
   1b9c6:	dc06      	bgt.n	1b9d6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1b9c8:	0309      	lsls	r1, r1, #12
   1b9ca:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1b9cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b9d0:	601a      	str	r2, [r3, #0]
}
   1b9d2:	2000      	movs	r0, #0
   1b9d4:	4770      	bx	lr
{
   1b9d6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b9d8:	2300      	movs	r3, #0
   1b9da:	461a      	mov	r2, r3
   1b9dc:	4619      	mov	r1, r3
   1b9de:	4618      	mov	r0, r3
   1b9e0:	f7fe f818 	bl	19a14 <__assert_func>

0001b9e4 <nrf52k_flash_write>:
{
   1b9e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b9e8:	b082      	sub	sp, #8
   1b9ea:	460d      	mov	r5, r1
   1b9ec:	4616      	mov	r6, r2
   1b9ee:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1b9f0:	f7ff ffa8 	bl	1b944 <nrf52k_flash_wait_ready>
   1b9f4:	2800      	cmp	r0, #0
   1b9f6:	d158      	bne.n	1baaa <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b9f8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b9fc:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1b9fe:	4b2c      	ldr	r3, [pc, #176]	; (1bab0 <nrf52k_flash_write+0xcc>)
   1ba00:	2201      	movs	r2, #1
   1ba02:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1ba06:	f015 0803 	ands.w	r8, r5, #3
   1ba0a:	d10b      	bne.n	1ba24 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1ba0c:	2c03      	cmp	r4, #3
   1ba0e:	d925      	bls.n	1ba5c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1ba10:	f7ff ff98 	bl	1b944 <nrf52k_flash_wait_ready>
   1ba14:	2800      	cmp	r0, #0
   1ba16:	d139      	bne.n	1ba8c <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1ba18:	f856 3b04 	ldr.w	r3, [r6], #4
   1ba1c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1ba20:	3c04      	subs	r4, #4
   1ba22:	e7f3      	b.n	1ba0c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1ba24:	f7ff ff8e 	bl	1b944 <nrf52k_flash_wait_ready>
   1ba28:	bb68      	cbnz	r0, 1ba86 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1ba2a:	f025 0a03 	bic.w	sl, r5, #3
   1ba2e:	f8da 3000 	ldr.w	r3, [sl]
   1ba32:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1ba34:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1ba38:	45a1      	cmp	r9, r4
   1ba3a:	d900      	bls.n	1ba3e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1ba3c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1ba3e:	464a      	mov	r2, r9
   1ba40:	4631      	mov	r1, r6
   1ba42:	ab01      	add	r3, sp, #4
   1ba44:	eb03 0008 	add.w	r0, r3, r8
   1ba48:	f7ff fbda 	bl	1b200 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1ba4c:	9b01      	ldr	r3, [sp, #4]
   1ba4e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1ba52:	444d      	add	r5, r9
        num_bytes -= cnt;
   1ba54:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1ba58:	444e      	add	r6, r9
   1ba5a:	e7d7      	b.n	1ba0c <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1ba5c:	b164      	cbz	r4, 1ba78 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1ba5e:	682b      	ldr	r3, [r5, #0]
   1ba60:	a802      	add	r0, sp, #8
   1ba62:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1ba66:	4622      	mov	r2, r4
   1ba68:	4631      	mov	r1, r6
   1ba6a:	f7ff fbc9 	bl	1b200 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1ba6e:	f7ff ff69 	bl	1b944 <nrf52k_flash_wait_ready>
   1ba72:	b9b8      	cbnz	r0, 1baa4 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1ba74:	9b01      	ldr	r3, [sp, #4]
   1ba76:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1ba78:	f7ff ff64 	bl	1b944 <nrf52k_flash_wait_ready>
   1ba7c:	4603      	mov	r3, r0
   1ba7e:	b138      	cbz	r0, 1ba90 <nrf52k_flash_write+0xac>
        rc = -1;
   1ba80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba84:	e004      	b.n	1ba90 <nrf52k_flash_write+0xac>
    int rc = -1;
   1ba86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ba8a:	e001      	b.n	1ba90 <nrf52k_flash_write+0xac>
   1ba8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1ba90:	4a07      	ldr	r2, [pc, #28]	; (1bab0 <nrf52k_flash_write+0xcc>)
   1ba92:	2100      	movs	r1, #0
   1ba94:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1ba98:	b907      	cbnz	r7, 1ba9c <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1ba9a:	b662      	cpsie	i
}
   1ba9c:	4618      	mov	r0, r3
   1ba9e:	b002      	add	sp, #8
   1baa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1baa4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1baa8:	e7f2      	b.n	1ba90 <nrf52k_flash_write+0xac>
        return -1;
   1baaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1baae:	e7f5      	b.n	1ba9c <nrf52k_flash_write+0xb8>
   1bab0:	4001e000 	.word	0x4001e000

0001bab4 <nrf52k_flash_read>:
{
   1bab4:	b508      	push	{r3, lr}
   1bab6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1bab8:	461a      	mov	r2, r3
   1baba:	f7ff fba1 	bl	1b200 <memcpy>
}
   1babe:	2000      	movs	r0, #0
   1bac0:	bd08      	pop	{r3, pc}
	...

0001bac4 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1bac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1bac6:	f7ff fa3b 	bl	1af40 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1baca:	4b31      	ldr	r3, [pc, #196]	; (1bb90 <nrf52_timer_handler+0xcc>)
   1bacc:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1bad0:	4b30      	ldr	r3, [pc, #192]	; (1bb94 <nrf52_timer_handler+0xd0>)
   1bad2:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1bad4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1bad8:	d225      	bcs.n	1bb26 <nrf52_timer_handler+0x62>
   1bada:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1badc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bae0:	d227      	bcs.n	1bb32 <nrf52_timer_handler+0x6e>
    result = x - y;
   1bae2:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1bae4:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1bae8:	d129      	bne.n	1bb3e <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1baea:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1baee:	4f29      	ldr	r7, [pc, #164]	; (1bb94 <nrf52_timer_handler+0xd0>)
   1baf0:	683c      	ldr	r4, [r7, #0]
   1baf2:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1baf6:	4628      	mov	r0, r5
   1baf8:	f7ff f9b0 	bl	1ae5c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1bafc:	4b24      	ldr	r3, [pc, #144]	; (1bb90 <nrf52_timer_handler+0xcc>)
   1bafe:	2200      	movs	r2, #0
   1bb00:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1bb04:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1bb06:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1bb08:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1bb0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1bb10:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1bb12:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1bb14:	f7ff fa1d 	bl	1af52 <os_arch_in_critical>
   1bb18:	bb28      	cbnz	r0, 1bb66 <nrf52_timer_handler+0xa2>
   1bb1a:	2300      	movs	r3, #0
   1bb1c:	461a      	mov	r2, r3
   1bb1e:	4619      	mov	r1, r3
   1bb20:	4618      	mov	r0, r3
   1bb22:	f7fd ff77 	bl	19a14 <__assert_func>
    assert(x <= 0xffffff);
   1bb26:	2300      	movs	r3, #0
   1bb28:	461a      	mov	r2, r3
   1bb2a:	4619      	mov	r1, r3
   1bb2c:	4618      	mov	r0, r3
   1bb2e:	f7fd ff71 	bl	19a14 <__assert_func>
    assert(y <= 0xffffff);
   1bb32:	2300      	movs	r3, #0
   1bb34:	461a      	mov	r2, r3
   1bb36:	4619      	mov	r1, r3
   1bb38:	4618      	mov	r0, r3
   1bb3a:	f7fd ff6b 	bl	19a14 <__assert_func>
        return (result | 0xff800000);
   1bb3e:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1bb42:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1bb46:	e7d2      	b.n	1baee <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1bb48:	2300      	movs	r3, #0
   1bb4a:	461a      	mov	r2, r3
   1bb4c:	4619      	mov	r1, r3
   1bb4e:	4618      	mov	r0, r3
   1bb50:	f7fd ff60 	bl	19a14 <__assert_func>
        return (result | 0xff800000);
   1bb54:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1bb58:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1bb5c:	2a02      	cmp	r2, #2
   1bb5e:	dc13      	bgt.n	1bb88 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1bb60:	4a0c      	ldr	r2, [pc, #48]	; (1bb94 <nrf52_timer_handler+0xd0>)
   1bb62:	6814      	ldr	r4, [r2, #0]
   1bb64:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1bb66:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1bb6a:	4a09      	ldr	r2, [pc, #36]	; (1bb90 <nrf52_timer_handler+0xcc>)
   1bb6c:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1bb70:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1bb74:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1bb78:	d2e6      	bcs.n	1bb48 <nrf52_timer_handler+0x84>
    result = x - y;
   1bb7a:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1bb7c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1bb80:	d1e8      	bne.n	1bb54 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1bb82:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1bb86:	e7e9      	b.n	1bb5c <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1bb88:	4630      	mov	r0, r6
   1bb8a:	f7ff f9df 	bl	1af4c <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1bb8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bb90:	40011000 	.word	0x40011000
   1bb94:	2000e6c4 	.word	0x2000e6c4

0001bb98 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1bb98:	b538      	push	{r3, r4, r5, lr}
   1bb9a:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1bb9c:	f7ff f9d9 	bl	1af52 <os_arch_in_critical>
   1bba0:	b1a0      	cbz	r0, 1bbcc <os_tick_idle+0x34>

    if (ticks > 0) {
   1bba2:	2d00      	cmp	r5, #0
   1bba4:	d038      	beq.n	1bc18 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1bba6:	4b20      	ldr	r3, [pc, #128]	; (1bc28 <os_tick_idle+0x90>)
   1bba8:	685b      	ldr	r3, [r3, #4]
   1bbaa:	42ab      	cmp	r3, r5
   1bbac:	d200      	bcs.n	1bbb0 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1bbae:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1bbb0:	4b1d      	ldr	r3, [pc, #116]	; (1bc28 <os_tick_idle+0x90>)
   1bbb2:	689c      	ldr	r4, [r3, #8]
   1bbb4:	681a      	ldr	r2, [r3, #0]
   1bbb6:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1bbba:	f7ff f9ca 	bl	1af52 <os_arch_in_critical>
   1bbbe:	b9d0      	cbnz	r0, 1bbf6 <os_tick_idle+0x5e>
   1bbc0:	2300      	movs	r3, #0
   1bbc2:	461a      	mov	r2, r3
   1bbc4:	4619      	mov	r1, r3
   1bbc6:	4618      	mov	r0, r3
   1bbc8:	f7fd ff24 	bl	19a14 <__assert_func>
    OS_ASSERT_CRITICAL();
   1bbcc:	2300      	movs	r3, #0
   1bbce:	461a      	mov	r2, r3
   1bbd0:	4619      	mov	r1, r3
   1bbd2:	4618      	mov	r0, r3
   1bbd4:	f7fd ff1e 	bl	19a14 <__assert_func>
    assert(y <= 0xffffff);
   1bbd8:	2300      	movs	r3, #0
   1bbda:	461a      	mov	r2, r3
   1bbdc:	4619      	mov	r1, r3
   1bbde:	4618      	mov	r0, r3
   1bbe0:	f7fd ff18 	bl	19a14 <__assert_func>
        return (result | 0xff800000);
   1bbe4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1bbe8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1bbec:	2b02      	cmp	r3, #2
   1bbee:	dc13      	bgt.n	1bc18 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1bbf0:	4b0d      	ldr	r3, [pc, #52]	; (1bc28 <os_tick_idle+0x90>)
   1bbf2:	681c      	ldr	r4, [r3, #0]
   1bbf4:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1bbf6:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1bbfa:	4b0c      	ldr	r3, [pc, #48]	; (1bc2c <os_tick_idle+0x94>)
   1bbfc:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1bc00:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1bc04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bc08:	d2e6      	bcs.n	1bbd8 <os_tick_idle+0x40>
    result = x - y;
   1bc0a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1bc0c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1bc10:	d1e8      	bne.n	1bbe4 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1bc12:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1bc16:	e7e9      	b.n	1bbec <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1bc18:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1bc1c:	bf30      	wfi

    if (ticks > 0) {
   1bc1e:	b905      	cbnz	r5, 1bc22 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1bc20:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1bc22:	f7ff ff4f 	bl	1bac4 <nrf52_timer_handler>
}
   1bc26:	e7fb      	b.n	1bc20 <os_tick_idle+0x88>
   1bc28:	2000e6c4 	.word	0x2000e6c4
   1bc2c:	40011000 	.word	0x40011000

0001bc30 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1bc30:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bc32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bc36:	fbb3 f3f0 	udiv	r3, r3, r0
   1bc3a:	fb00 f303 	mul.w	r3, r0, r3
   1bc3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bc42:	d136      	bne.n	1bcb2 <os_tick_init+0x82>
   1bc44:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1bc46:	4d1e      	ldr	r5, [pc, #120]	; (1bcc0 <os_tick_init+0x90>)
   1bc48:	2600      	movs	r6, #0
   1bc4a:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1bc4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bc50:	fbb3 f0f0 	udiv	r0, r3, r0
   1bc54:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1bc56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1bc5a:	fbb3 f0f0 	udiv	r0, r3, r0
   1bc5e:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1bc60:	f7ff f96e 	bl	1af40 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bc64:	0164      	lsls	r4, r4, #5
   1bc66:	b2e4      	uxtb	r4, r4
   1bc68:	4b16      	ldr	r3, [pc, #88]	; (1bcc4 <os_tick_init+0x94>)
   1bc6a:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bc6e:	4a16      	ldr	r2, [pc, #88]	; (1bcc8 <os_tick_init+0x98>)
   1bc70:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bc72:	4916      	ldr	r1, [pc, #88]	; (1bccc <os_tick_init+0x9c>)
   1bc74:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bc7c:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1bc7e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1bc82:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1bc86:	2201      	movs	r2, #1
   1bc88:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1bc8a:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1bc8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bc90:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1bc94:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1bc98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1bc9c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1bca0:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1bca4:	6829      	ldr	r1, [r5, #0]
   1bca6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1bcaa:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1bcac:	f7ff f94e 	bl	1af4c <os_arch_restore_sr>
}
   1bcb0:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bcb2:	2300      	movs	r3, #0
   1bcb4:	461a      	mov	r2, r3
   1bcb6:	4619      	mov	r1, r3
   1bcb8:	4618      	mov	r0, r3
   1bcba:	f7fd feab 	bl	19a14 <__assert_func>
   1bcbe:	bf00      	nop
   1bcc0:	2000e6c4 	.word	0x2000e6c4
   1bcc4:	e000e100 	.word	0xe000e100
   1bcc8:	e000ed00 	.word	0xe000ed00
   1bccc:	0001bac5 	.word	0x0001bac5

0001bcd0 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1bcd0:	2301      	movs	r3, #1
   1bcd2:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1bcd4:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1bcd8:	4770      	bx	lr
	...

0001bcdc <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1bcdc:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1bcde:	7883      	ldrb	r3, [r0, #2]
   1bce0:	b393      	cbz	r3, 1bd48 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bce2:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bce4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bce8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1bcec:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1bcee:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1bcf2:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bcf6:	b11d      	cbz	r5, 1bd00 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1bcf8:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1bcfc:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1bd00:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1bd02:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1bd04:	2b02      	cmp	r3, #2
   1bd06:	dc0e      	bgt.n	1bd26 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bd08:	7842      	ldrb	r2, [r0, #1]
   1bd0a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bd0c:	2b00      	cmp	r3, #0
   1bd0e:	db15      	blt.n	1bd3c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd10:	f002 021f 	and.w	r2, r2, #31
   1bd14:	095b      	lsrs	r3, r3, #5
   1bd16:	2101      	movs	r1, #1
   1bd18:	fa01 f202 	lsl.w	r2, r1, r2
   1bd1c:	3340      	adds	r3, #64	; 0x40
   1bd1e:	491b      	ldr	r1, [pc, #108]	; (1bd8c <nrf_timer_set_ocmp+0xb0>)
   1bd20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1bd24:	e00a      	b.n	1bd3c <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1bd26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bd2a:	d208      	bcs.n	1bd3e <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1bd2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bd30:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bd34:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bd38:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1bd3c:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1bd3e:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1bd42:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1bd46:	e7f5      	b.n	1bd34 <nrf_timer_set_ocmp+0x58>
   1bd48:	460d      	mov	r5, r1
   1bd4a:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1bd4c:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bd4e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bd52:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1bd56:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bd5a:	2200      	movs	r2, #0
   1bd5c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bd60:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1bd64:	f7ff ffb4 	bl	1bcd0 <nrf_read_timer_cntr>
   1bd68:	1b40      	subs	r0, r0, r5
   1bd6a:	2800      	cmp	r0, #0
   1bd6c:	dbe6      	blt.n	1bd3c <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bd6e:	7862      	ldrb	r2, [r4, #1]
   1bd70:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bd72:	2b00      	cmp	r3, #0
   1bd74:	dbe2      	blt.n	1bd3c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bd76:	f002 021f 	and.w	r2, r2, #31
   1bd7a:	095b      	lsrs	r3, r3, #5
   1bd7c:	2101      	movs	r1, #1
   1bd7e:	fa01 f202 	lsl.w	r2, r1, r2
   1bd82:	3340      	adds	r3, #64	; 0x40
   1bd84:	4901      	ldr	r1, [pc, #4]	; (1bd8c <nrf_timer_set_ocmp+0xb0>)
   1bd86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1bd8a:	e7d7      	b.n	1bd3c <nrf_timer_set_ocmp+0x60>
   1bd8c:	e000e100 	.word	0xe000e100

0001bd90 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bd90:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bd94:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bd98:	4770      	bx	lr

0001bd9a <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bd9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bd9e:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bda2:	4770      	bx	lr

0001bda4 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1bda4:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bda6:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bda8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bdac:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1bdae:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1bdb0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1bdb4:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bdb8:	b1ad      	cbz	r5, 1bde6 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1bdba:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1bdbe:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1bdc0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1bdc4:	2500      	movs	r5, #0
   1bdc6:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bdca:	7840      	ldrb	r0, [r0, #1]
   1bdcc:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1bdce:	42aa      	cmp	r2, r5
   1bdd0:	db09      	blt.n	1bde6 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bdd2:	f000 001f 	and.w	r0, r0, #31
   1bdd6:	0952      	lsrs	r2, r2, #5
   1bdd8:	2501      	movs	r5, #1
   1bdda:	fa05 f000 	lsl.w	r0, r5, r0
   1bdde:	3240      	adds	r2, #64	; 0x40
   1bde0:	4d04      	ldr	r5, [pc, #16]	; (1bdf4 <hal_timer_read_bsptimer+0x50>)
   1bde2:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1bde6:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bdea:	b904      	cbnz	r4, 1bdee <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1bdec:	b662      	cpsie	i

    return tcntr;
}
   1bdee:	bc30      	pop	{r4, r5}
   1bdf0:	4770      	bx	lr
   1bdf2:	bf00      	nop
   1bdf4:	e000e100 	.word	0xe000e100

0001bdf8 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1bdf8:	b570      	push	{r4, r5, r6, lr}
   1bdfa:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bdfc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1be00:	b672      	cpsid	i
   1be02:	e013      	b.n	1be2c <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1be04:	6928      	ldr	r0, [r5, #16]
   1be06:	f7ff ff63 	bl	1bcd0 <nrf_read_timer_cntr>
            delta = 0;
   1be0a:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1be0c:	68e3      	ldr	r3, [r4, #12]
   1be0e:	1ac0      	subs	r0, r0, r3
   1be10:	4290      	cmp	r0, r2
   1be12:	db19      	blt.n	1be48 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1be14:	6923      	ldr	r3, [r4, #16]
   1be16:	b1a3      	cbz	r3, 1be42 <hal_timer_chk_queue+0x4a>
   1be18:	6962      	ldr	r2, [r4, #20]
   1be1a:	615a      	str	r2, [r3, #20]
   1be1c:	6963      	ldr	r3, [r4, #20]
   1be1e:	6922      	ldr	r2, [r4, #16]
   1be20:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1be22:	2300      	movs	r3, #0
   1be24:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1be26:	6863      	ldr	r3, [r4, #4]
   1be28:	68a0      	ldr	r0, [r4, #8]
   1be2a:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1be2c:	696c      	ldr	r4, [r5, #20]
   1be2e:	b15c      	cbz	r4, 1be48 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1be30:	78ab      	ldrb	r3, [r5, #2]
   1be32:	2b00      	cmp	r3, #0
   1be34:	d0e6      	beq.n	1be04 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1be36:	4628      	mov	r0, r5
   1be38:	f7ff ffb4 	bl	1bda4 <hal_timer_read_bsptimer>
            delta = -3;
   1be3c:	f06f 0202 	mvn.w	r2, #2
   1be40:	e7e4      	b.n	1be0c <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1be42:	6963      	ldr	r3, [r4, #20]
   1be44:	61ab      	str	r3, [r5, #24]
   1be46:	e7e9      	b.n	1be1c <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1be48:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1be4a:	b133      	cbz	r3, 1be5a <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1be4c:	68d9      	ldr	r1, [r3, #12]
   1be4e:	4628      	mov	r0, r5
   1be50:	f7ff ff44 	bl	1bcdc <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1be54:	b906      	cbnz	r6, 1be58 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1be56:	b662      	cpsie	i
}
   1be58:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1be5a:	78ab      	ldrb	r3, [r5, #2]
   1be5c:	b11b      	cbz	r3, 1be66 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1be5e:	6928      	ldr	r0, [r5, #16]
   1be60:	f7ff ff9b 	bl	1bd9a <nrf_rtc_disable_ocmp>
   1be64:	e7f6      	b.n	1be54 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1be66:	6928      	ldr	r0, [r5, #16]
   1be68:	f7ff ff92 	bl	1bd90 <nrf_timer_disable_ocmp>
   1be6c:	e7f2      	b.n	1be54 <hal_timer_chk_queue+0x5c>

0001be6e <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1be6e:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1be70:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1be72:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1be76:	b113      	cbz	r3, 1be7e <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1be78:	2300      	movs	r3, #0
   1be7a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1be7e:	6883      	ldr	r3, [r0, #8]
   1be80:	3301      	adds	r3, #1
   1be82:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1be84:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1be88:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1be8c:	d100      	bne.n	1be90 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1be8e:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1be90:	f7ff ffb2 	bl	1bdf8 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1be94:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1be98:	e7f9      	b.n	1be8e <hal_timer_irq_handler+0x20>
	...

0001be9c <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1be9c:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1be9e:	4802      	ldr	r0, [pc, #8]	; (1bea8 <nrf52_timer0_irq_handler+0xc>)
   1bea0:	f7ff ffe5 	bl	1be6e <hal_timer_irq_handler>
}
   1bea4:	bd08      	pop	{r3, pc}
   1bea6:	bf00      	nop
   1bea8:	2000e6d0 	.word	0x2000e6d0

0001beac <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1beac:	2805      	cmp	r0, #5
   1beae:	dc1c      	bgt.n	1beea <hal_timer_init+0x3e>
   1beb0:	4b12      	ldr	r3, [pc, #72]	; (1befc <hal_timer_init+0x50>)
   1beb2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1beb6:	b1d3      	cbz	r3, 1beee <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1beb8:	781a      	ldrb	r2, [r3, #0]
   1beba:	b9d2      	cbnz	r2, 1bef2 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1bebc:	b9d8      	cbnz	r0, 1bef6 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1bebe:	4a10      	ldr	r2, [pc, #64]	; (1bf00 <hal_timer_init+0x54>)
   1bec0:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1bec2:	2208      	movs	r2, #8
   1bec4:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bec6:	4b0f      	ldr	r3, [pc, #60]	; (1bf04 <hal_timer_init+0x58>)
   1bec8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1becc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1bed0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bed4:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bed8:	22e0      	movs	r2, #224	; 0xe0
   1beda:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bede:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1bee2:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bee4:	4a08      	ldr	r2, [pc, #32]	; (1bf08 <hal_timer_init+0x5c>)
   1bee6:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1bee8:	4770      	bx	lr

err:
    return rc;
   1beea:	2016      	movs	r0, #22
   1beec:	4770      	bx	lr
   1beee:	2016      	movs	r0, #22
   1bef0:	4770      	bx	lr
   1bef2:	2016      	movs	r0, #22
   1bef4:	4770      	bx	lr
   1bef6:	2016      	movs	r0, #22
}
   1bef8:	4770      	bx	lr
   1befa:	bf00      	nop
   1befc:	000212dc 	.word	0x000212dc
   1bf00:	40008000 	.word	0x40008000
   1bf04:	e000e100 	.word	0xe000e100
   1bf08:	0001be9d 	.word	0x0001be9d

0001bf0c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bf0c:	2805      	cmp	r0, #5
   1bf0e:	dc65      	bgt.n	1bfdc <hal_timer_config+0xd0>
   1bf10:	4b39      	ldr	r3, [pc, #228]	; (1bff8 <hal_timer_config+0xec>)
   1bf12:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bf16:	2800      	cmp	r0, #0
   1bf18:	d062      	beq.n	1bfe0 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1bf1a:	4b38      	ldr	r3, [pc, #224]	; (1bffc <hal_timer_config+0xf0>)
   1bf1c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bf20:	7803      	ldrb	r3, [r0, #0]
   1bf22:	2b00      	cmp	r3, #0
   1bf24:	d15e      	bne.n	1bfe4 <hal_timer_config+0xd8>
   1bf26:	2900      	cmp	r1, #0
   1bf28:	d05e      	beq.n	1bfe8 <hal_timer_config+0xdc>
   1bf2a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1bf2e:	d85d      	bhi.n	1bfec <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1bf30:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1bf32:	2a00      	cmp	r2, #0
   1bf34:	d05c      	beq.n	1bff0 <hal_timer_config+0xe4>
{
   1bf36:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1bf38:	2901      	cmp	r1, #1
   1bf3a:	d013      	beq.n	1bf64 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bf3c:	2301      	movs	r3, #1
   1bf3e:	2b09      	cmp	r3, #9
   1bf40:	d810      	bhi.n	1bf64 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1bf42:	2201      	movs	r2, #1
   1bf44:	409a      	lsls	r2, r3
   1bf46:	428a      	cmp	r2, r1
   1bf48:	d202      	bcs.n	1bf50 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1bf4a:	3301      	adds	r3, #1
   1bf4c:	b2db      	uxtb	r3, r3
   1bf4e:	e7f6      	b.n	1bf3e <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1bf50:	1e5c      	subs	r4, r3, #1
   1bf52:	2501      	movs	r5, #1
   1bf54:	fa05 f404 	lsl.w	r4, r5, r4
   1bf58:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1bf5a:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1bf5c:	428c      	cmp	r4, r1
   1bf5e:	d201      	bcs.n	1bf64 <hal_timer_config+0x58>
                    prescaler -= 1;
   1bf60:	3b01      	subs	r3, #1
   1bf62:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1bf64:	4a25      	ldr	r2, [pc, #148]	; (1bffc <hal_timer_config+0xf0>)
   1bf66:	411a      	asrs	r2, r3
   1bf68:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1bf6a:	2201      	movs	r2, #1
   1bf6c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bf6e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bf72:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1bf74:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bf78:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1bf7c:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1bf80:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1bf84:	d00c      	beq.n	1bfa0 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1bf86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bf8a:	2100      	movs	r1, #0
   1bf8c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1bf90:	2101      	movs	r1, #1
   1bf92:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1bf94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1bf98:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1bf9c:	2a00      	cmp	r2, #0
   1bf9e:	d0f9      	beq.n	1bf94 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1bfa0:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1bfa2:	2101      	movs	r1, #1
   1bfa4:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1bfa6:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1bfa8:	2500      	movs	r5, #0
   1bfaa:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1bfae:	2503      	movs	r5, #3
   1bfb0:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1bfb4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1bfb8:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1bfba:	7842      	ldrb	r2, [r0, #1]
   1bfbc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bfbe:	2b00      	cmp	r3, #0
   1bfc0:	db07      	blt.n	1bfd2 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bfc2:	f002 021f 	and.w	r2, r2, #31
   1bfc6:	095b      	lsrs	r3, r3, #5
   1bfc8:	fa01 f202 	lsl.w	r2, r1, r2
   1bfcc:	490c      	ldr	r1, [pc, #48]	; (1c000 <hal_timer_config+0xf4>)
   1bfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1bfd2:	b97c      	cbnz	r4, 1bff4 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1bfd4:	b662      	cpsie	i

    return 0;
   1bfd6:	2000      	movs	r0, #0

err:
    return rc;
}
   1bfd8:	bc30      	pop	{r4, r5}
   1bfda:	4770      	bx	lr
    return rc;
   1bfdc:	2016      	movs	r0, #22
   1bfde:	4770      	bx	lr
   1bfe0:	2016      	movs	r0, #22
   1bfe2:	4770      	bx	lr
   1bfe4:	2016      	movs	r0, #22
   1bfe6:	4770      	bx	lr
   1bfe8:	2016      	movs	r0, #22
   1bfea:	4770      	bx	lr
   1bfec:	2016      	movs	r0, #22
   1bfee:	4770      	bx	lr
   1bff0:	2016      	movs	r0, #22
}
   1bff2:	4770      	bx	lr
    return 0;
   1bff4:	2000      	movs	r0, #0
   1bff6:	e7ef      	b.n	1bfd8 <hal_timer_config+0xcc>
   1bff8:	000212dc 	.word	0x000212dc
   1bffc:	00f42400 	.word	0x00f42400
   1c000:	e000e100 	.word	0xe000e100

0001c004 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1c004:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1c006:	2805      	cmp	r0, #5
   1c008:	dc0c      	bgt.n	1c024 <hal_timer_read+0x20>
   1c00a:	4b09      	ldr	r3, [pc, #36]	; (1c030 <hal_timer_read+0x2c>)
   1c00c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1c010:	b140      	cbz	r0, 1c024 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1c012:	7883      	ldrb	r3, [r0, #2]
   1c014:	b91b      	cbnz	r3, 1c01e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1c016:	6900      	ldr	r0, [r0, #16]
   1c018:	f7ff fe5a 	bl	1bcd0 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1c01c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1c01e:	f7ff fec1 	bl	1bda4 <hal_timer_read_bsptimer>
   1c022:	e7fb      	b.n	1c01c <hal_timer_read+0x18>
    assert(0);
   1c024:	2300      	movs	r3, #0
   1c026:	461a      	mov	r2, r3
   1c028:	4619      	mov	r1, r3
   1c02a:	4618      	mov	r0, r3
   1c02c:	f7fd fcf2 	bl	19a14 <__assert_func>
   1c030:	000212dc 	.word	0x000212dc

0001c034 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1c034:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1c036:	2100      	movs	r1, #0
   1c038:	4608      	mov	r0, r1
   1c03a:	f7ff ff37 	bl	1beac <hal_timer_init>
    assert(rc == 0);
   1c03e:	b920      	cbnz	r0, 1c04a <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1c040:	4808      	ldr	r0, [pc, #32]	; (1c064 <nrf52_periph_create_timers+0x30>)
   1c042:	f7fd ff11 	bl	19e68 <os_cputime_init>
    assert(rc == 0);
   1c046:	b930      	cbnz	r0, 1c056 <nrf52_periph_create_timers+0x22>
#endif
}
   1c048:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c04a:	2300      	movs	r3, #0
   1c04c:	461a      	mov	r2, r3
   1c04e:	4619      	mov	r1, r3
   1c050:	4618      	mov	r0, r3
   1c052:	f7fd fcdf 	bl	19a14 <__assert_func>
    assert(rc == 0);
   1c056:	2300      	movs	r3, #0
   1c058:	461a      	mov	r2, r3
   1c05a:	4619      	mov	r1, r3
   1c05c:	4618      	mov	r0, r3
   1c05e:	f7fd fcd9 	bl	19a14 <__assert_func>
   1c062:	bf00      	nop
   1c064:	000f4240 	.word	0x000f4240

0001c068 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1c068:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1c06a:	4906      	ldr	r1, [pc, #24]	; (1c084 <nrf52_periph_create_i2c+0x1c>)
   1c06c:	2001      	movs	r0, #1
   1c06e:	f7fd f82b 	bl	190c8 <hal_i2c_init>
    assert(rc == 0);
   1c072:	b900      	cbnz	r0, 1c076 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1c074:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c076:	2300      	movs	r3, #0
   1c078:	461a      	mov	r2, r3
   1c07a:	4619      	mov	r1, r3
   1c07c:	4618      	mov	r0, r3
   1c07e:	f7fd fcc9 	bl	19a14 <__assert_func>
   1c082:	bf00      	nop
   1c084:	000212f4 	.word	0x000212f4

0001c088 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1c088:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1c08a:	2200      	movs	r2, #0
   1c08c:	4905      	ldr	r1, [pc, #20]	; (1c0a4 <nrf52_periph_create_spi+0x1c>)
   1c08e:	4610      	mov	r0, r2
   1c090:	f7fd fb4e 	bl	19730 <hal_spi_init>
    assert(rc == 0);
   1c094:	b900      	cbnz	r0, 1c098 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1c096:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1c098:	2300      	movs	r3, #0
   1c09a:	461a      	mov	r2, r3
   1c09c:	4619      	mov	r1, r3
   1c09e:	4618      	mov	r0, r3
   1c0a0:	f7fd fcb8 	bl	19a14 <__assert_func>
   1c0a4:	00021300 	.word	0x00021300

0001c0a8 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1c0a8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1c0aa:	f7ff ffc3 	bl	1c034 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1c0ae:	f7ff ffdb 	bl	1c068 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1c0b2:	f7ff ffe9 	bl	1c088 <nrf52_periph_create_spi>
}
   1c0b6:	bd08      	pop	{r3, pc}

0001c0b8 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1c0b8:	4770      	bx	lr
	...

0001c0bc <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1c0bc:	4b08      	ldr	r3, [pc, #32]	; (1c0e0 <sensor_mgr_remove+0x24>)
   1c0be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c0c0:	4282      	cmp	r2, r0
   1c0c2:	d104      	bne.n	1c0ce <sensor_mgr_remove+0x12>
   1c0c4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1c0c8:	631a      	str	r2, [r3, #48]	; 0x30
   1c0ca:	4770      	bx	lr
   1c0cc:	461a      	mov	r2, r3
   1c0ce:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1c0d2:	4283      	cmp	r3, r0
   1c0d4:	d1fa      	bne.n	1c0cc <sensor_mgr_remove+0x10>
   1c0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c0da:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1c0de:	4770      	bx	lr
   1c0e0:	2000e6f0 	.word	0x2000e6f0

0001c0e4 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1c0e4:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1c0e6:	6a03      	ldr	r3, [r0, #32]
   1c0e8:	b993      	cbnz	r3, 1c110 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c0ea:	4b15      	ldr	r3, [pc, #84]	; (1c140 <sensor_mgr_insert+0x5c>)
   1c0ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c0ee:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c0f0:	e002      	b.n	1c0f8 <sensor_mgr_insert+0x14>
            prev = cursor;
   1c0f2:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c0f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c0f8:	2b00      	cmp	r3, #0
   1c0fa:	d1fa      	bne.n	1c0f2 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1c0fc:	b1c9      	cbz	r1, 1c132 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1c0fe:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1c102:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1c106:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1c10a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c10e:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c110:	4b0b      	ldr	r3, [pc, #44]	; (1c140 <sensor_mgr_insert+0x5c>)
   1c112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c114:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c116:	2b00      	cmp	r3, #0
   1c118:	d0f0      	beq.n	1c0fc <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1c11a:	6a1a      	ldr	r2, [r3, #32]
   1c11c:	2a00      	cmp	r2, #0
   1c11e:	d0ed      	beq.n	1c0fc <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1c120:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1c122:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1c124:	1b12      	subs	r2, r2, r4
   1c126:	2a00      	cmp	r2, #0
   1c128:	dbe8      	blt.n	1c0fc <sensor_mgr_insert+0x18>
        prev = cursor;
   1c12a:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c12c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c130:	e7f1      	b.n	1c116 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1c132:	4b03      	ldr	r3, [pc, #12]	; (1c140 <sensor_mgr_insert+0x5c>)
   1c134:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c136:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1c13a:	6318      	str	r0, [r3, #48]	; 0x30
   1c13c:	e7e5      	b.n	1c10a <sensor_mgr_insert+0x26>
   1c13e:	bf00      	nop
   1c140:	2000e6f0 	.word	0x2000e6f0

0001c144 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1c144:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1c146:	fab0 f080 	clz	r0, r0
   1c14a:	0940      	lsrs	r0, r0, #5
   1c14c:	4770      	bx	lr
	...

0001c150 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1c150:	4b01      	ldr	r3, [pc, #4]	; (1c158 <sensor_mgr_evq_set+0x8>)
   1c152:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1c154:	4770      	bx	lr
   1c156:	bf00      	nop
   1c158:	2000e6f0 	.word	0x2000e6f0

0001c15c <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1c15c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1c160:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c164:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c168:	ea02 0b04 	and.w	fp, r2, r4
   1c16c:	ea03 0c05 	and.w	ip, r3, r5
   1c170:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1c174:	ea0b 0200 	and.w	r2, fp, r0
   1c178:	ea0c 0301 	and.w	r3, ip, r1
   1c17c:	4313      	orrs	r3, r2
}
   1c17e:	bf14      	ite	ne
   1c180:	2001      	movne	r0, #1
   1c182:	2000      	moveq	r0, #0
   1c184:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c188:	4770      	bx	lr

0001c18a <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1c18a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c18e:	b083      	sub	sp, #12
   1c190:	4605      	mov	r5, r0
   1c192:	4689      	mov	r9, r1
   1c194:	4690      	mov	r8, r2
   1c196:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1c19a:	790b      	ldrb	r3, [r1, #4]
   1c19c:	2b01      	cmp	r3, #1
   1c19e:	d013      	beq.n	1c1c8 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1c1a0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1c1a2:	e000      	b.n	1c1a6 <sensor_read_data_func+0x1c>
   1c1a4:	6924      	ldr	r4, [r4, #16]
   1c1a6:	b17c      	cbz	r4, 1c1c8 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1c1a8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1c1ac:	ea00 0206 	and.w	r2, r0, r6
   1c1b0:	ea01 0307 	and.w	r3, r1, r7
   1c1b4:	4313      	orrs	r3, r2
   1c1b6:	d0f5      	beq.n	1c1a4 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1c1b8:	68a3      	ldr	r3, [r4, #8]
   1c1ba:	68e1      	ldr	r1, [r4, #12]
   1c1bc:	e9cd 6700 	strd	r6, r7, [sp]
   1c1c0:	4642      	mov	r2, r8
   1c1c2:	4628      	mov	r0, r5
   1c1c4:	4798      	blx	r3
   1c1c6:	e7ed      	b.n	1c1a4 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1c1c8:	f8d9 3000 	ldr.w	r3, [r9]
   1c1cc:	b14b      	cbz	r3, 1c1e2 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1c1ce:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c1d2:	e9cd 6700 	strd	r6, r7, [sp]
   1c1d6:	4642      	mov	r2, r8
   1c1d8:	4628      	mov	r0, r5
   1c1da:	4798      	blx	r3
    }

    return (0);
}
   1c1dc:	b003      	add	sp, #12
   1c1de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1c1e2:	2000      	movs	r0, #0
   1c1e4:	e7fa      	b.n	1c1dc <sensor_read_data_func+0x52>
	...

0001c1e8 <sensor_base_ts_update_event>:
{
   1c1e8:	b530      	push	{r4, r5, lr}
   1c1ea:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c1ec:	f7fe fe30 	bl	1ae50 <os_time_get>
   1c1f0:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c1f2:	a901      	add	r1, sp, #4
   1c1f4:	a802      	add	r0, sp, #8
   1c1f6:	f7fe fe65 	bl	1aec4 <os_gettimeofday>
    if (rc) {
   1c1fa:	b138      	cbz	r0, 1c20c <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c1fc:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c200:	4621      	mov	r1, r4
   1c202:	4809      	ldr	r0, [pc, #36]	; (1c228 <sensor_base_ts_update_event+0x40>)
   1c204:	f7fd fdac 	bl	19d60 <os_callout_reset>
}
   1c208:	b007      	add	sp, #28
   1c20a:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c20c:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c210:	4d06      	ldr	r5, [pc, #24]	; (1c22c <sensor_base_ts_update_event+0x44>)
   1c212:	ab06      	add	r3, sp, #24
   1c214:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c218:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c21c:	9b01      	ldr	r3, [sp, #4]
   1c21e:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c220:	f7fd fe28 	bl	19e74 <os_cputime_get32>
   1c224:	6168      	str	r0, [r5, #20]
   1c226:	e7eb      	b.n	1c200 <sensor_base_ts_update_event+0x18>
   1c228:	2000e724 	.word	0x2000e724
   1c22c:	2000e748 	.word	0x2000e748

0001c230 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c230:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c234:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c236:	f7fd fe1d 	bl	19e74 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c23a:	4a0e      	ldr	r2, [pc, #56]	; (1c274 <sensor_up_timestamp+0x44>)
   1c23c:	6955      	ldr	r5, [r2, #20]
   1c23e:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c240:	6460      	str	r0, [r4, #68]	; 0x44
   1c242:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c244:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c248:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c24a:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c24c:	4b0a      	ldr	r3, [pc, #40]	; (1c278 <sensor_up_timestamp+0x48>)
   1c24e:	fba3 c305 	umull	ip, r3, r3, r5
   1c252:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c254:	eb10 0b03 	adds.w	fp, r0, r3
   1c258:	f141 0c00 	adc.w	ip, r1, #0
   1c25c:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c260:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c264:	4905      	ldr	r1, [pc, #20]	; (1c27c <sensor_up_timestamp+0x4c>)
   1c266:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c26a:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c26c:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c26e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c272:	bf00      	nop
   1c274:	2000e748 	.word	0x2000e748
   1c278:	431bde83 	.word	0x431bde83
   1c27c:	000f4240 	.word	0x000f4240

0001c280 <sensor_mgr_lock>:
{
   1c280:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c286:	4804      	ldr	r0, [pc, #16]	; (1c298 <sensor_mgr_lock+0x18>)
   1c288:	f7fe fa5c 	bl	1a744 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c28c:	b108      	cbz	r0, 1c292 <sensor_mgr_lock+0x12>
   1c28e:	2809      	cmp	r0, #9
   1c290:	d000      	beq.n	1c294 <sensor_mgr_lock+0x14>
}
   1c292:	bd08      	pop	{r3, pc}
        return (0);
   1c294:	2000      	movs	r0, #0
   1c296:	e7fc      	b.n	1c292 <sensor_mgr_lock+0x12>
   1c298:	2000e6f0 	.word	0x2000e6f0

0001c29c <sensor_mgr_unlock>:
{
   1c29c:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c29e:	4802      	ldr	r0, [pc, #8]	; (1c2a8 <sensor_mgr_unlock+0xc>)
   1c2a0:	f7fe f9f4 	bl	1a68c <os_mutex_release>
}
   1c2a4:	bd08      	pop	{r3, pc}
   1c2a6:	bf00      	nop
   1c2a8:	2000e6f0 	.word	0x2000e6f0

0001c2ac <sensor_mgr_evq_get>:
}
   1c2ac:	4b01      	ldr	r3, [pc, #4]	; (1c2b4 <sensor_mgr_evq_get+0x8>)
   1c2ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c2b0:	4770      	bx	lr
   1c2b2:	bf00      	nop
   1c2b4:	2000e6f0 	.word	0x2000e6f0

0001c2b8 <sensor_mgr_init>:
{
   1c2b8:	b570      	push	{r4, r5, r6, lr}
   1c2ba:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1c2bc:	f7fd ff68 	bl	1a190 <os_eventq_dflt_get>
   1c2c0:	f7ff ff46 	bl	1c150 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1c2c4:	4b1c      	ldr	r3, [pc, #112]	; (1c338 <sensor_mgr_init+0x80>)
   1c2c6:	9300      	str	r3, [sp, #0]
   1c2c8:	4b1c      	ldr	r3, [pc, #112]	; (1c33c <sensor_mgr_init+0x84>)
   1c2ca:	2218      	movs	r2, #24
   1c2cc:	2105      	movs	r1, #5
   1c2ce:	481c      	ldr	r0, [pc, #112]	; (1c340 <sensor_mgr_init+0x88>)
   1c2d0:	f7fe f8e8 	bl	1a4a4 <os_mempool_init>
    assert(rc == OS_OK);
   1c2d4:	bb50      	cbnz	r0, 1c32c <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1c2d6:	f7ff ffe9 	bl	1c2ac <sensor_mgr_evq_get>
   1c2da:	4e1a      	ldr	r6, [pc, #104]	; (1c344 <sensor_mgr_init+0x8c>)
   1c2dc:	2300      	movs	r3, #0
   1c2de:	4a1a      	ldr	r2, [pc, #104]	; (1c348 <sensor_mgr_init+0x90>)
   1c2e0:	4601      	mov	r1, r0
   1c2e2:	4630      	mov	r0, r6
   1c2e4:	f7fd fd10 	bl	19d08 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1c2e8:	ad04      	add	r5, sp, #16
   1c2ea:	a903      	add	r1, sp, #12
   1c2ec:	4628      	mov	r0, r5
   1c2ee:	f7fe fde9 	bl	1aec4 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1c2f2:	4c16      	ldr	r4, [pc, #88]	; (1c34c <sensor_mgr_init+0x94>)
   1c2f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c2f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c2fc:	9b03      	ldr	r3, [sp, #12]
   1c2fe:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c300:	f7fd fdb8 	bl	19e74 <os_cputime_get32>
   1c304:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1c306:	f7ff ffd1 	bl	1c2ac <sensor_mgr_evq_get>
   1c30a:	4c11      	ldr	r4, [pc, #68]	; (1c350 <sensor_mgr_init+0x98>)
   1c30c:	2300      	movs	r3, #0
   1c30e:	4a11      	ldr	r2, [pc, #68]	; (1c354 <sensor_mgr_init+0x9c>)
   1c310:	4601      	mov	r1, r0
   1c312:	4620      	mov	r0, r4
   1c314:	f7fd fcf8 	bl	19d08 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1c318:	2180      	movs	r1, #128	; 0x80
   1c31a:	4620      	mov	r0, r4
   1c31c:	f7fd fd20 	bl	19d60 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1c320:	f1a6 000c 	sub.w	r0, r6, #12
   1c324:	f7fe f9a8 	bl	1a678 <os_mutex_init>
}
   1c328:	b008      	add	sp, #32
   1c32a:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1c32c:	2300      	movs	r3, #0
   1c32e:	461a      	mov	r2, r3
   1c330:	4619      	mov	r1, r3
   1c332:	4618      	mov	r0, r3
   1c334:	f7fd fb6e 	bl	19a14 <__assert_func>
   1c338:	00021304 	.word	0x00021304
   1c33c:	2000e1ec 	.word	0x2000e1ec
   1c340:	2000e264 	.word	0x2000e264
   1c344:	2000e6fc 	.word	0x2000e6fc
   1c348:	0001c525 	.word	0x0001c525
   1c34c:	2000e748 	.word	0x2000e748
   1c350:	2000e724 	.word	0x2000e724
   1c354:	0001c1e9 	.word	0x0001c1e9

0001c358 <sensor_pkg_init>:
{
   1c358:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1c35a:	f7ff ffad 	bl	1c2b8 <sensor_mgr_init>
}
   1c35e:	bd08      	pop	{r3, pc}

0001c360 <sensor_lock>:
{
   1c360:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1c362:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c366:	3004      	adds	r0, #4
   1c368:	f7fe f9ec 	bl	1a744 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c36c:	b108      	cbz	r0, 1c372 <sensor_lock+0x12>
   1c36e:	2809      	cmp	r0, #9
   1c370:	d000      	beq.n	1c374 <sensor_lock+0x14>
}
   1c372:	bd08      	pop	{r3, pc}
        return (0);
   1c374:	2000      	movs	r0, #0
   1c376:	e7fc      	b.n	1c372 <sensor_lock+0x12>

0001c378 <sensor_unlock>:
{
   1c378:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1c37a:	3004      	adds	r0, #4
   1c37c:	f7fe f986 	bl	1a68c <os_mutex_release>
}
   1c380:	bd08      	pop	{r3, pc}

0001c382 <sensor_update_nextrun>:
{
   1c382:	b530      	push	{r4, r5, lr}
   1c384:	b083      	sub	sp, #12
   1c386:	4604      	mov	r4, r0
   1c388:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1c38a:	a901      	add	r1, sp, #4
   1c38c:	6a00      	ldr	r0, [r0, #32]
   1c38e:	f7fe fdb5 	bl	1aefc <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1c392:	4620      	mov	r0, r4
   1c394:	f7ff ffe4 	bl	1c360 <sensor_lock>
    sensor_mgr_remove(sensor);
   1c398:	4620      	mov	r0, r4
   1c39a:	f7ff fe8f 	bl	1c0bc <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1c39e:	9b01      	ldr	r3, [sp, #4]
   1c3a0:	441d      	add	r5, r3
   1c3a2:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1c3a4:	4620      	mov	r0, r4
   1c3a6:	f7ff fe9d 	bl	1c0e4 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c3aa:	4620      	mov	r0, r4
   1c3ac:	f7ff ffe4 	bl	1c378 <sensor_unlock>
}
   1c3b0:	b003      	add	sp, #12
   1c3b2:	bd30      	pop	{r4, r5, pc}

0001c3b4 <sensor_calc_nextrun_delta>:
{
   1c3b4:	b538      	push	{r3, r4, r5, lr}
   1c3b6:	4605      	mov	r5, r0
   1c3b8:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1c3ba:	f7ff ffd1 	bl	1c360 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1c3be:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1c3c0:	1b0c      	subs	r4, r1, r4
   1c3c2:	d404      	bmi.n	1c3ce <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1c3c4:	4628      	mov	r0, r5
   1c3c6:	f7ff ffd7 	bl	1c378 <sensor_unlock>
}
   1c3ca:	4620      	mov	r0, r4
   1c3cc:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1c3ce:	2400      	movs	r4, #0
   1c3d0:	e7f8      	b.n	1c3c4 <sensor_calc_nextrun_delta+0x10>
	...

0001c3d4 <sensor_find_min_nextrun_sensor>:
{
   1c3d4:	b570      	push	{r4, r5, r6, lr}
   1c3d6:	4606      	mov	r6, r0
   1c3d8:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1c3da:	f7ff ff51 	bl	1c280 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1c3de:	4b05      	ldr	r3, [pc, #20]	; (1c3f4 <sensor_find_min_nextrun_sensor+0x20>)
   1c3e0:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1c3e2:	4631      	mov	r1, r6
   1c3e4:	4620      	mov	r0, r4
   1c3e6:	f7ff ffe5 	bl	1c3b4 <sensor_calc_nextrun_delta>
   1c3ea:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1c3ec:	f7ff ff56 	bl	1c29c <sensor_mgr_unlock>
}
   1c3f0:	4620      	mov	r0, r4
   1c3f2:	bd70      	pop	{r4, r5, r6, pc}
   1c3f4:	2000e6f0 	.word	0x2000e6f0

0001c3f8 <sensor_mgr_register>:
{
   1c3f8:	b538      	push	{r3, r4, r5, lr}
   1c3fa:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1c3fc:	f7ff ff40 	bl	1c280 <sensor_mgr_lock>
    if (rc != 0) {
   1c400:	4604      	mov	r4, r0
   1c402:	b108      	cbz	r0, 1c408 <sensor_mgr_register+0x10>
}
   1c404:	4620      	mov	r0, r4
   1c406:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1c408:	4628      	mov	r0, r5
   1c40a:	f7ff ffa9 	bl	1c360 <sensor_lock>
    if (rc != 0) {
   1c40e:	4604      	mov	r4, r0
   1c410:	2800      	cmp	r0, #0
   1c412:	d1f7      	bne.n	1c404 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1c414:	4628      	mov	r0, r5
   1c416:	f7ff fe65 	bl	1c0e4 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c41a:	4628      	mov	r0, r5
   1c41c:	f7ff ffac 	bl	1c378 <sensor_unlock>
    sensor_mgr_unlock();
   1c420:	f7ff ff3c 	bl	1c29c <sensor_mgr_unlock>
    return (0);
   1c424:	e7ee      	b.n	1c404 <sensor_mgr_register+0xc>

0001c426 <sensor_init>:
{
   1c426:	b538      	push	{r3, r4, r5, lr}
   1c428:	4604      	mov	r4, r0
   1c42a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1c42c:	2288      	movs	r2, #136	; 0x88
   1c42e:	2100      	movs	r1, #0
   1c430:	f7fe fef3 	bl	1b21a <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1c434:	1d20      	adds	r0, r4, #4
   1c436:	f7fe f91f 	bl	1a678 <os_mutex_init>
    if (rc != 0) {
   1c43a:	4603      	mov	r3, r0
   1c43c:	b900      	cbnz	r0, 1c440 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1c43e:	6025      	str	r5, [r4, #0]
}
   1c440:	4618      	mov	r0, r3
   1c442:	bd38      	pop	{r3, r4, r5, pc}

0001c444 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1c444:	b530      	push	{r4, r5, lr}
   1c446:	b089      	sub	sp, #36	; 0x24
   1c448:	4604      	mov	r4, r0
   1c44a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1c44e:	f7ff ff87 	bl	1c360 <sensor_lock>
    if (rc) {
   1c452:	4605      	mov	r5, r0
   1c454:	b9f8      	cbnz	r0, 1c496 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1c456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c458:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1c45a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c45c:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1c45e:	a904      	add	r1, sp, #16
   1c460:	4620      	mov	r0, r4
   1c462:	f7ff fe7b 	bl	1c15c <sensor_mgr_match_bytype>
   1c466:	b1e0      	cbz	r0, 1c4a2 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1c468:	4620      	mov	r0, r4
   1c46a:	f7ff fee1 	bl	1c230 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1c46e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c470:	6819      	ldr	r1, [r3, #0]
   1c472:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c474:	9302      	str	r3, [sp, #8]
   1c476:	ab06      	add	r3, sp, #24
   1c478:	9301      	str	r3, [sp, #4]
   1c47a:	4b0b      	ldr	r3, [pc, #44]	; (1c4a8 <sensor_read+0x64>)
   1c47c:	9300      	str	r3, [sp, #0]
   1c47e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c482:	4620      	mov	r0, r4
   1c484:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1c486:	4605      	mov	r5, r0
   1c488:	b128      	cbz	r0, 1c496 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1c48a:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1c48c:	b11b      	cbz	r3, 1c496 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1c48e:	4602      	mov	r2, r0
   1c490:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1c492:	4620      	mov	r0, r4
   1c494:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1c496:	4620      	mov	r0, r4
   1c498:	f7ff ff6e 	bl	1c378 <sensor_unlock>
    return (rc);
}
   1c49c:	4628      	mov	r0, r5
   1c49e:	b009      	add	sp, #36	; 0x24
   1c4a0:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1c4a2:	f06f 0503 	mvn.w	r5, #3
   1c4a6:	e7f6      	b.n	1c496 <sensor_read+0x52>
   1c4a8:	0001c18b 	.word	0x0001c18b

0001c4ac <sensor_mgr_poll_bytype>:
{
   1c4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c4ae:	b085      	sub	sp, #20
   1c4b0:	4616      	mov	r6, r2
   1c4b2:	461f      	mov	r7, r3
   1c4b4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1c4b6:	b10c      	cbz	r4, 1c4bc <sensor_mgr_poll_bytype+0x10>
   1c4b8:	8aa3      	ldrh	r3, [r4, #20]
   1c4ba:	b9cb      	cbnz	r3, 1c4f0 <sensor_mgr_poll_bytype+0x44>
   1c4bc:	4632      	mov	r2, r6
   1c4be:	463b      	mov	r3, r7
   1c4c0:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1c4c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c4c6:	9102      	str	r1, [sp, #8]
   1c4c8:	2100      	movs	r1, #0
   1c4ca:	9101      	str	r1, [sp, #4]
   1c4cc:	9100      	str	r1, [sp, #0]
   1c4ce:	f7ff ffb9 	bl	1c444 <sensor_read>
        sensor_lock(sensor);
   1c4d2:	4628      	mov	r0, r5
   1c4d4:	f7ff ff44 	bl	1c360 <sensor_lock>
        if (stt) {
   1c4d8:	b12c      	cbz	r4, 1c4e6 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1c4da:	8aa3      	ldrh	r3, [r4, #20]
   1c4dc:	b91b      	cbnz	r3, 1c4e6 <sensor_mgr_poll_bytype+0x3a>
   1c4de:	8a63      	ldrh	r3, [r4, #18]
   1c4e0:	b10b      	cbz	r3, 1c4e6 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1c4e2:	3b01      	subs	r3, #1
   1c4e4:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1c4e6:	4628      	mov	r0, r5
   1c4e8:	f7ff ff46 	bl	1c378 <sensor_unlock>
}
   1c4ec:	b005      	add	sp, #20
   1c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1c4f0:	3b01      	subs	r3, #1
   1c4f2:	82a3      	strh	r3, [r4, #20]
}
   1c4f4:	e7fa      	b.n	1c4ec <sensor_mgr_poll_bytype+0x40>

0001c4f6 <sensor_poll_per_type_trait>:
{
   1c4f6:	b570      	push	{r4, r5, r6, lr}
   1c4f8:	b082      	sub	sp, #8
   1c4fa:	4605      	mov	r5, r0
   1c4fc:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1c4fe:	f7ff ff2f 	bl	1c360 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c502:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1c504:	e007      	b.n	1c516 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1c506:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c50a:	9601      	str	r6, [sp, #4]
   1c50c:	9400      	str	r4, [sp, #0]
   1c50e:	4628      	mov	r0, r5
   1c510:	f7ff ffcc 	bl	1c4ac <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c514:	6a24      	ldr	r4, [r4, #32]
   1c516:	2c00      	cmp	r4, #0
   1c518:	d1f5      	bne.n	1c506 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1c51a:	4628      	mov	r0, r5
   1c51c:	f7ff ff2c 	bl	1c378 <sensor_unlock>
}
   1c520:	b002      	add	sp, #8
   1c522:	bd70      	pop	{r4, r5, r6, pc}

0001c524 <sensor_mgr_wakeup_event>:
{
   1c524:	b570      	push	{r4, r5, r6, lr}
   1c526:	b084      	sub	sp, #16
    now = os_time_get();
   1c528:	f7fe fc92 	bl	1ae50 <os_time_get>
   1c52c:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1c52e:	f7ff fea7 	bl	1c280 <sensor_mgr_lock>
   1c532:	e012      	b.n	1c55a <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1c534:	4620      	mov	r0, r4
   1c536:	f7ff ff1f 	bl	1c378 <sensor_unlock>
            sensor_mgr_unlock();
   1c53a:	f7ff feaf 	bl	1c29c <sensor_mgr_unlock>
}
   1c53e:	b004      	add	sp, #16
   1c540:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1c542:	4632      	mov	r2, r6
   1c544:	4629      	mov	r1, r5
   1c546:	4620      	mov	r0, r4
   1c548:	f7ff ffd5 	bl	1c4f6 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1c54c:	4629      	mov	r1, r5
   1c54e:	4620      	mov	r0, r4
   1c550:	f7ff ff17 	bl	1c382 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1c554:	4620      	mov	r0, r4
   1c556:	f7ff ff0f 	bl	1c378 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1c55a:	a903      	add	r1, sp, #12
   1c55c:	4628      	mov	r0, r5
   1c55e:	f7ff ff39 	bl	1c3d4 <sensor_find_min_nextrun_sensor>
   1c562:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1c564:	f7ff fefc 	bl	1c360 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1c568:	6a23      	ldr	r3, [r4, #32]
   1c56a:	2b00      	cmp	r3, #0
   1c56c:	d0e2      	beq.n	1c534 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1c56e:	9e03      	ldr	r6, [sp, #12]
   1c570:	b96e      	cbnz	r6, 1c58e <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1c572:	4620      	mov	r0, r4
   1c574:	f7ff fde6 	bl	1c144 <sensor_type_traits_empty>
   1c578:	2800      	cmp	r0, #0
   1c57a:	d0e2      	beq.n	1c542 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1c57c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c580:	9501      	str	r5, [sp, #4]
   1c582:	2100      	movs	r1, #0
   1c584:	9100      	str	r1, [sp, #0]
   1c586:	4620      	mov	r0, r4
   1c588:	f7ff ff90 	bl	1c4ac <sensor_mgr_poll_bytype>
   1c58c:	e7de      	b.n	1c54c <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1c58e:	f7ff fe85 	bl	1c29c <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1c592:	9903      	ldr	r1, [sp, #12]
   1c594:	4801      	ldr	r0, [pc, #4]	; (1c59c <sensor_mgr_wakeup_event+0x78>)
   1c596:	f7fd fbe3 	bl	19d60 <os_callout_reset>
   1c59a:	e7d0      	b.n	1c53e <sensor_mgr_wakeup_event+0x1a>
   1c59c:	2000e6fc 	.word	0x2000e6fc

0001c5a0 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c5a0:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c5a2:	2101      	movs	r1, #1
   1c5a4:	4806      	ldr	r0, [pc, #24]	; (1c5c0 <init_sensor_coap+0x20>)
   1c5a6:	f7fe faf1 	bl	1ab8c <os_sem_init>
    assert(rc == OS_OK);
   1c5aa:	b918      	cbnz	r0, 1c5b4 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c5ac:	4b05      	ldr	r3, [pc, #20]	; (1c5c4 <init_sensor_coap+0x24>)
   1c5ae:	2201      	movs	r2, #1
   1c5b0:	701a      	strb	r2, [r3, #0]
}
   1c5b2:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c5b4:	2300      	movs	r3, #0
   1c5b6:	461a      	mov	r2, r3
   1c5b8:	4619      	mov	r1, r3
   1c5ba:	4618      	mov	r0, r3
   1c5bc:	f7fd fa2a 	bl	19a14 <__assert_func>
   1c5c0:	2000e280 	.word	0x2000e280
   1c5c4:	2000e288 	.word	0x2000e288

0001c5c8 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c5c8:	4b04      	ldr	r3, [pc, #16]	; (1c5dc <is_sensor_node+0x14>)
   1c5ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c5ce:	4313      	orrs	r3, r2
   1c5d0:	d101      	bne.n	1c5d6 <is_sensor_node+0xe>
    return false;
   1c5d2:	2000      	movs	r0, #0
}
   1c5d4:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c5d6:	2001      	movs	r0, #1
   1c5d8:	4770      	bx	lr
   1c5da:	bf00      	nop
   1c5dc:	2000e2a0 	.word	0x2000e2a0

0001c5e0 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c5e0:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c5e2:	4b16      	ldr	r3, [pc, #88]	; (1c63c <get_hardware_id+0x5c>)
   1c5e4:	681b      	ldr	r3, [r3, #0]
   1c5e6:	b10b      	cbz	r3, 1c5ec <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c5e8:	4815      	ldr	r0, [pc, #84]	; (1c640 <get_hardware_id+0x60>)
   1c5ea:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c5ec:	f000 fcee 	bl	1cfcc <hal_bsp_hw_id_len>
   1c5f0:	4b12      	ldr	r3, [pc, #72]	; (1c63c <get_hardware_id+0x5c>)
   1c5f2:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c5f4:	280b      	cmp	r0, #11
   1c5f6:	d914      	bls.n	1c622 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c5f8:	210c      	movs	r1, #12
   1c5fa:	4811      	ldr	r0, [pc, #68]	; (1c640 <get_hardware_id+0x60>)
   1c5fc:	f000 fce8 	bl	1cfd0 <hal_bsp_hw_id>
   1c600:	4b0e      	ldr	r3, [pc, #56]	; (1c63c <get_hardware_id+0x5c>)
   1c602:	6018      	str	r0, [r3, #0]
   1c604:	2800      	cmp	r0, #0
   1c606:	dd12      	ble.n	1c62e <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c608:	490e      	ldr	r1, [pc, #56]	; (1c644 <get_hardware_id+0x64>)
   1c60a:	480f      	ldr	r0, [pc, #60]	; (1c648 <get_hardware_id+0x68>)
   1c60c:	f7fc fb3a 	bl	18c84 <console_printf>
   1c610:	4b0a      	ldr	r3, [pc, #40]	; (1c63c <get_hardware_id+0x5c>)
   1c612:	6819      	ldr	r1, [r3, #0]
   1c614:	480a      	ldr	r0, [pc, #40]	; (1c640 <get_hardware_id+0x60>)
   1c616:	f7fc fac5 	bl	18ba4 <console_dump>
   1c61a:	480c      	ldr	r0, [pc, #48]	; (1c64c <get_hardware_id+0x6c>)
   1c61c:	f7fc fb32 	bl	18c84 <console_printf>
   1c620:	e7e2      	b.n	1c5e8 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c622:	2300      	movs	r3, #0
   1c624:	461a      	mov	r2, r3
   1c626:	4619      	mov	r1, r3
   1c628:	4618      	mov	r0, r3
   1c62a:	f7fd f9f3 	bl	19a14 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c62e:	2300      	movs	r3, #0
   1c630:	461a      	mov	r2, r3
   1c632:	4619      	mov	r1, r3
   1c634:	4618      	mov	r0, r3
   1c636:	f7fd f9ed 	bl	19a14 <__assert_func>
   1c63a:	bf00      	nop
   1c63c:	2000e298 	.word	0x2000e298
   1c640:	2000e28c 	.word	0x2000e28c
   1c644:	000213a8 	.word	0x000213a8
   1c648:	00021360 	.word	0x00021360
   1c64c:	000214c0 	.word	0x000214c0

0001c650 <is_collector_node>:
bool is_collector_node(void) {
   1c650:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c652:	f7ff ffc5 	bl	1c5e0 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c656:	220c      	movs	r2, #12
   1c658:	4903      	ldr	r1, [pc, #12]	; (1c668 <is_collector_node+0x18>)
   1c65a:	f7fe fdad 	bl	1b1b8 <memcmp>
   1c65e:	b108      	cbz	r0, 1c664 <is_collector_node+0x14>
    return false; 
   1c660:	2000      	movs	r0, #0
}
   1c662:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c664:	2001      	movs	r0, #1
   1c666:	e7fc      	b.n	1c662 <is_collector_node+0x12>
   1c668:	00021318 	.word	0x00021318

0001c66c <is_standalone_node>:
bool is_standalone_node(void) {
   1c66c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c66e:	f7ff ffef 	bl	1c650 <is_collector_node>
   1c672:	b928      	cbnz	r0, 1c680 <is_standalone_node+0x14>
   1c674:	4604      	mov	r4, r0
   1c676:	f7ff ffa7 	bl	1c5c8 <is_sensor_node>
   1c67a:	b910      	cbnz	r0, 1c682 <is_standalone_node+0x16>
   1c67c:	2401      	movs	r4, #1
   1c67e:	e000      	b.n	1c682 <is_standalone_node+0x16>
    return false;
   1c680:	2400      	movs	r4, #0
}
   1c682:	4620      	mov	r0, r4
   1c684:	bd10      	pop	{r4, pc}
	...

0001c688 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c688:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c68a:	2400      	movs	r4, #0
   1c68c:	2c04      	cmp	r4, #4
   1c68e:	dc15      	bgt.n	1c6bc <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c690:	4b23      	ldr	r3, [pc, #140]	; (1c720 <sensor_network_init+0x98>)
   1c692:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c696:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c69a:	4922      	ldr	r1, [pc, #136]	; (1c724 <sensor_network_init+0x9c>)
   1c69c:	4822      	ldr	r0, [pc, #136]	; (1c728 <sensor_network_init+0xa0>)
   1c69e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c6a2:	f000 fcaf 	bl	1d004 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c6a6:	3001      	adds	r0, #1
   1c6a8:	280b      	cmp	r0, #11
   1c6aa:	dc01      	bgt.n	1c6b0 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c6ac:	3401      	adds	r4, #1
   1c6ae:	e7ed      	b.n	1c68c <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c6b0:	2300      	movs	r3, #0
   1c6b2:	461a      	mov	r2, r3
   1c6b4:	4619      	mov	r1, r3
   1c6b6:	4618      	mov	r0, r3
   1c6b8:	f7fd f9ac 	bl	19a14 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c6bc:	f7ff ff90 	bl	1c5e0 <get_hardware_id>
   1c6c0:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c6c2:	2400      	movs	r4, #0
   1c6c4:	2c04      	cmp	r4, #4
   1c6c6:	dc19      	bgt.n	1c6fc <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c6c8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c6cc:	0093      	lsls	r3, r2, #2
   1c6ce:	220c      	movs	r2, #12
   1c6d0:	4916      	ldr	r1, [pc, #88]	; (1c72c <sensor_network_init+0xa4>)
   1c6d2:	4419      	add	r1, r3
   1c6d4:	4628      	mov	r0, r5
   1c6d6:	f7fe fd6f 	bl	1b1b8 <memcmp>
   1c6da:	b108      	cbz	r0, 1c6e0 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c6dc:	3401      	adds	r4, #1
   1c6de:	e7f1      	b.n	1c6c4 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1c6e0:	4b0f      	ldr	r3, [pc, #60]	; (1c720 <sensor_network_init+0x98>)
   1c6e2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c6e6:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c6ea:	4b11      	ldr	r3, [pc, #68]	; (1c730 <sensor_network_init+0xa8>)
   1c6ec:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c6f0:	1c63      	adds	r3, r4, #1
   1c6f2:	4a10      	ldr	r2, [pc, #64]	; (1c734 <sensor_network_init+0xac>)
   1c6f4:	4910      	ldr	r1, [pc, #64]	; (1c738 <sensor_network_init+0xb0>)
   1c6f6:	4811      	ldr	r0, [pc, #68]	; (1c73c <sensor_network_init+0xb4>)
   1c6f8:	f7fc fac4 	bl	18c84 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c6fc:	f7ff ffa8 	bl	1c650 <is_collector_node>
   1c700:	b940      	cbnz	r0, 1c714 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c702:	f7ff ffb3 	bl	1c66c <is_standalone_node>
   1c706:	b150      	cbz	r0, 1c71e <sensor_network_init+0x96>
   1c708:	4a0a      	ldr	r2, [pc, #40]	; (1c734 <sensor_network_init+0xac>)
   1c70a:	490b      	ldr	r1, [pc, #44]	; (1c738 <sensor_network_init+0xb0>)
   1c70c:	480c      	ldr	r0, [pc, #48]	; (1c740 <sensor_network_init+0xb8>)
   1c70e:	f7fc fab9 	bl	18c84 <console_printf>
}
   1c712:	e004      	b.n	1c71e <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c714:	4a07      	ldr	r2, [pc, #28]	; (1c734 <sensor_network_init+0xac>)
   1c716:	4908      	ldr	r1, [pc, #32]	; (1c738 <sensor_network_init+0xb0>)
   1c718:	480a      	ldr	r0, [pc, #40]	; (1c744 <sensor_network_init+0xbc>)
   1c71a:	f7fc fab3 	bl	18c84 <console_printf>
}
   1c71e:	bd38      	pop	{r3, r4, r5, pc}
   1c720:	000213c0 	.word	0x000213c0
   1c724:	00021368 	.word	0x00021368
   1c728:	20000130 	.word	0x20000130
   1c72c:	00021324 	.word	0x00021324
   1c730:	2000e2a0 	.word	0x2000e2a0
   1c734:	00021370 	.word	0x00021370
   1c738:	000213a8 	.word	0x000213a8
   1c73c:	00021378 	.word	0x00021378
   1c740:	00021398 	.word	0x00021398
   1c744:	00021388 	.word	0x00021388

0001c748 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c748:	b530      	push	{r4, r5, lr}
   1c74a:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c74c:	2200      	movs	r2, #0
   1c74e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c752:	4810      	ldr	r0, [pc, #64]	; (1c794 <config_device+0x4c>)
   1c754:	f7fd fc2c 	bl	19fb0 <os_dev_open>
    assert(dev != NULL);
   1c758:	b178      	cbz	r0, 1c77a <config_device+0x32>
   1c75a:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c75c:	4668      	mov	r0, sp
   1c75e:	f000 f86c 	bl	1c83a <temp_stub_default_cfg>
    assert(rc == 0);
   1c762:	b980      	cbnz	r0, 1c786 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c764:	4669      	mov	r1, sp
   1c766:	4620      	mov	r0, r4
   1c768:	f000 f900 	bl	1c96c <temp_stub_config>
   1c76c:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c76e:	4620      	mov	r0, r4
   1c770:	f7fd fc40 	bl	19ff4 <os_dev_close>
    return rc;
}
   1c774:	4628      	mov	r0, r5
   1c776:	b003      	add	sp, #12
   1c778:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c77a:	2300      	movs	r3, #0
   1c77c:	461a      	mov	r2, r3
   1c77e:	4619      	mov	r1, r3
   1c780:	4618      	mov	r0, r3
   1c782:	f7fd f947 	bl	19a14 <__assert_func>
    assert(rc == 0);
   1c786:	2300      	movs	r3, #0
   1c788:	461a      	mov	r2, r3
   1c78a:	4619      	mov	r1, r3
   1c78c:	4618      	mov	r0, r3
   1c78e:	f7fd f941 	bl	19a14 <__assert_func>
   1c792:	bf00      	nop
   1c794:	000213e8 	.word	0x000213e8

0001c798 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c798:	b510      	push	{r4, lr}
   1c79a:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c79c:	4c10      	ldr	r4, [pc, #64]	; (1c7e0 <temp_stub_create+0x48>)
   1c79e:	4621      	mov	r1, r4
   1c7a0:	4810      	ldr	r0, [pc, #64]	; (1c7e4 <temp_stub_create+0x4c>)
   1c7a2:	f7fc fa6f 	bl	18c84 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c7a6:	4b10      	ldr	r3, [pc, #64]	; (1c7e8 <temp_stub_create+0x50>)
   1c7a8:	9301      	str	r3, [sp, #4]
   1c7aa:	4b10      	ldr	r3, [pc, #64]	; (1c7ec <temp_stub_create+0x54>)
   1c7ac:	9300      	str	r3, [sp, #0]
   1c7ae:	2300      	movs	r3, #0
   1c7b0:	2201      	movs	r2, #1
   1c7b2:	4621      	mov	r1, r4
   1c7b4:	480e      	ldr	r0, [pc, #56]	; (1c7f0 <temp_stub_create+0x58>)
   1c7b6:	f7fd fbb5 	bl	19f24 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c7ba:	b920      	cbnz	r0, 1c7c6 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c7bc:	f7ff ffc4 	bl	1c748 <config_device>
    assert(rc == 0);
   1c7c0:	b938      	cbnz	r0, 1c7d2 <temp_stub_create+0x3a>
}
   1c7c2:	b002      	add	sp, #8
   1c7c4:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c7c6:	2300      	movs	r3, #0
   1c7c8:	461a      	mov	r2, r3
   1c7ca:	4619      	mov	r1, r3
   1c7cc:	4618      	mov	r0, r3
   1c7ce:	f7fd f921 	bl	19a14 <__assert_func>
    assert(rc == 0);
   1c7d2:	2300      	movs	r3, #0
   1c7d4:	461a      	mov	r2, r3
   1c7d6:	4619      	mov	r1, r3
   1c7d8:	4618      	mov	r0, r3
   1c7da:	f7fd f91b 	bl	19a14 <__assert_func>
   1c7de:	bf00      	nop
   1c7e0:	000213e8 	.word	0x000213e8
   1c7e4:	000213f4 	.word	0x000213f4
   1c7e8:	2000e2e0 	.word	0x2000e2e0
   1c7ec:	0001c849 	.word	0x0001c849
   1c7f0:	2000e2f8 	.word	0x2000e2f8

0001c7f4 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c7f4:	2000      	movs	r0, #0
   1c7f6:	4770      	bx	lr

0001c7f8 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c7f8:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c7fc:	2100      	movs	r1, #0
   1c7fe:	ea50 0301 	orrs.w	r3, r0, r1
   1c802:	d004      	beq.n	1c80e <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c804:	9b00      	ldr	r3, [sp, #0]
   1c806:	2201      	movs	r2, #1
   1c808:	701a      	strb	r2, [r3, #0]
    return (0);
   1c80a:	2000      	movs	r0, #0
   1c80c:	4770      	bx	lr
err:
    return (rc);
   1c80e:	f06f 0001 	mvn.w	r0, #1
}
   1c812:	4770      	bx	lr

0001c814 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c814:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c816:	b120      	cbz	r0, 1c822 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c818:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c81c:	d007      	beq.n	1c82e <temp_stub_open+0x1a>
}
   1c81e:	2000      	movs	r0, #0
   1c820:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c822:	2300      	movs	r3, #0
   1c824:	461a      	mov	r2, r3
   1c826:	4619      	mov	r1, r3
   1c828:	4618      	mov	r0, r3
   1c82a:	f7fd f8f3 	bl	19a14 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c82e:	2300      	movs	r3, #0
   1c830:	461a      	mov	r2, r3
   1c832:	4619      	mov	r1, r3
   1c834:	4618      	mov	r0, r3
   1c836:	f7fd f8ed 	bl	19a14 <__assert_func>

0001c83a <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c83a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c83e:	2300      	movs	r3, #0
   1c840:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c844:	2000      	movs	r0, #0
   1c846:	4770      	bx	lr

0001c848 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c84a:	b379      	cbz	r1, 1c8ac <temp_stub_init+0x64>
   1c84c:	460d      	mov	r5, r1
   1c84e:	b380      	cbz	r0, 1c8b2 <temp_stub_init+0x6a>
   1c850:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c852:	30b0      	adds	r0, #176	; 0xb0
   1c854:	f7ff fff1 	bl	1c83a <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c858:	4603      	mov	r3, r0
   1c85a:	b108      	cbz	r0, 1c860 <temp_stub_init+0x18>
}
   1c85c:	4618      	mov	r0, r3
   1c85e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c860:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c864:	4621      	mov	r1, r4
   1c866:	4630      	mov	r0, r6
   1c868:	f7ff fddd 	bl	1c426 <sensor_init>
    if (rc != 0) { goto err; }
   1c86c:	4603      	mov	r3, r0
   1c86e:	2800      	cmp	r0, #0
   1c870:	d1f4      	bne.n	1c85c <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c872:	4b11      	ldr	r3, [pc, #68]	; (1c8b8 <temp_stub_init+0x70>)
   1c874:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c876:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c87a:	2300      	movs	r3, #0
   1c87c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c880:	682a      	ldr	r2, [r5, #0]
   1c882:	686f      	ldr	r7, [r5, #4]
   1c884:	68a8      	ldr	r0, [r5, #8]
   1c886:	68e9      	ldr	r1, [r5, #12]
   1c888:	6722      	str	r2, [r4, #112]	; 0x70
   1c88a:	6767      	str	r7, [r4, #116]	; 0x74
   1c88c:	67a0      	str	r0, [r4, #120]	; 0x78
   1c88e:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c890:	692a      	ldr	r2, [r5, #16]
   1c892:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c896:	4630      	mov	r0, r6
   1c898:	f7ff fdae 	bl	1c3f8 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c89c:	4603      	mov	r3, r0
   1c89e:	2800      	cmp	r0, #0
   1c8a0:	d1dc      	bne.n	1c85c <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c8a2:	4a06      	ldr	r2, [pc, #24]	; (1c8bc <temp_stub_init+0x74>)
   1c8a4:	6022      	str	r2, [r4, #0]
   1c8a6:	4a06      	ldr	r2, [pc, #24]	; (1c8c0 <temp_stub_init+0x78>)
   1c8a8:	60e2      	str	r2, [r4, #12]
    return (0);
   1c8aa:	e7d7      	b.n	1c85c <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c8ac:	f06f 0308 	mvn.w	r3, #8
   1c8b0:	e7d4      	b.n	1c85c <temp_stub_init+0x14>
   1c8b2:	f06f 0308 	mvn.w	r3, #8
   1c8b6:	e7d1      	b.n	1c85c <temp_stub_init+0x14>
   1c8b8:	00021404 	.word	0x00021404
   1c8bc:	0001c815 	.word	0x0001c815
   1c8c0:	0001c7f5 	.word	0x0001c7f5

0001c8c4 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c8c4:	b538      	push	{r3, r4, r5, lr}
   1c8c6:	460d      	mov	r5, r1
   1c8c8:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c8ca:	4808      	ldr	r0, [pc, #32]	; (1c8ec <temp_stub_get_raw_temperature+0x28>)
   1c8cc:	f7fc f9da 	bl	18c84 <console_printf>
    assert(temp_sum);
   1c8d0:	b134      	cbz	r4, 1c8e0 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c8d2:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c8d6:	fb01 f105 	mul.w	r1, r1, r5
   1c8da:	6021      	str	r1, [r4, #0]
}
   1c8dc:	2000      	movs	r0, #0
   1c8de:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c8e0:	2300      	movs	r3, #0
   1c8e2:	461a      	mov	r2, r3
   1c8e4:	4619      	mov	r1, r3
   1c8e6:	4618      	mov	r0, r3
   1c8e8:	f7fd f894 	bl	19a14 <__assert_func>
   1c8ec:	0002142c 	.word	0x0002142c

0001c8f0 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c8f0:	b530      	push	{r4, r5, lr}
   1c8f2:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c8f4:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c8f8:	2500      	movs	r5, #0
   1c8fa:	ea54 0305 	orrs.w	r3, r4, r5
   1c8fe:	d032      	beq.n	1c966 <temp_stub_sensor_read+0x76>
   1c900:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c902:	6805      	ldr	r5, [r0, #0]
   1c904:	b165      	cbz	r5, 1c920 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c90a:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c90c:	2200      	movs	r2, #0
   1c90e:	4611      	mov	r1, r2
   1c910:	4628      	mov	r0, r5
   1c912:	f7ff ff7f 	bl	1c814 <temp_stub_open>
        if (rc) { goto err; }
   1c916:	4603      	mov	r3, r0
   1c918:	b140      	cbz	r0, 1c92c <temp_stub_sensor_read+0x3c>
}
   1c91a:	4618      	mov	r0, r3
   1c91c:	b007      	add	sp, #28
   1c91e:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c920:	2300      	movs	r3, #0
   1c922:	461a      	mov	r2, r3
   1c924:	4619      	mov	r1, r3
   1c926:	4618      	mov	r0, r3
   1c928:	f7fd f874 	bl	19a14 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c92c:	2300      	movs	r3, #0
   1c92e:	aa03      	add	r2, sp, #12
   1c930:	2101      	movs	r1, #1
   1c932:	4628      	mov	r0, r5
   1c934:	f7ff ffc6 	bl	1c8c4 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c938:	4603      	mov	r3, r0
   1c93a:	2800      	cmp	r0, #0
   1c93c:	d1ed      	bne.n	1c91a <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c93e:	9a03      	ldr	r2, [sp, #12]
   1c940:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c942:	2201      	movs	r2, #1
   1c944:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c94a:	2a00      	cmp	r2, #0
   1c94c:	d0e5      	beq.n	1c91a <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c94e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c952:	2300      	movs	r3, #0
   1c954:	e9cd 2300 	strd	r2, r3, [sp]
   1c958:	aa04      	add	r2, sp, #16
   1c95a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c95c:	4620      	mov	r0, r4
   1c95e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c960:	4798      	blx	r3
   1c962:	4603      	mov	r3, r0
   1c964:	e7d9      	b.n	1c91a <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c966:	f06f 0301 	mvn.w	r3, #1
   1c96a:	e7d6      	b.n	1c91a <temp_stub_sensor_read+0x2a>

0001c96c <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c96c:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c96e:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c972:	d009      	beq.n	1c988 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c974:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c978:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c97c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c980:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c984:	2000      	movs	r0, #0
   1c986:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c988:	2300      	movs	r3, #0
   1c98a:	461a      	mov	r2, r3
   1c98c:	4619      	mov	r1, r3
   1c98e:	4618      	mov	r0, r3
   1c990:	f7fd f840 	bl	19a14 <__assert_func>

0001c994 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1c994:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c996:	e002      	b.n	1c99e <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1c998:	4618      	mov	r0, r3
   1c99a:	f000 f85b 	bl	1ca54 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c99e:	4808      	ldr	r0, [pc, #32]	; (1c9c0 <oc_buffer_tx+0x2c>)
   1c9a0:	f7fd fc03 	bl	1a1aa <os_mqueue_get>
   1c9a4:	4603      	mov	r3, r0
   1c9a6:	b148      	cbz	r0, 1c9bc <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1c9a8:	2200      	movs	r2, #0
   1c9aa:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1c9ac:	7e1a      	ldrb	r2, [r3, #24]
   1c9ae:	f012 0f08 	tst.w	r2, #8
   1c9b2:	d0f1      	beq.n	1c998 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1c9b4:	4618      	mov	r0, r3
   1c9b6:	f000 f85d 	bl	1ca74 <oc_send_multicast_message>
   1c9ba:	e7f0      	b.n	1c99e <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1c9bc:	bd08      	pop	{r3, pc}
   1c9be:	bf00      	nop
   1c9c0:	2000e3d0 	.word	0x2000e3d0

0001c9c4 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1c9c4:	b500      	push	{lr}
   1c9c6:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1c9c8:	4808      	ldr	r0, [pc, #32]	; (1c9ec <oc_buffer_rx+0x28>)
   1c9ca:	f7fd fbee 	bl	1a1aa <os_mqueue_get>
   1c9ce:	9001      	str	r0, [sp, #4]
   1c9d0:	b140      	cbz	r0, 1c9e4 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1c9d2:	a801      	add	r0, sp, #4
   1c9d4:	f000 faa2 	bl	1cf1c <__wrap_coap_receive>
#endif
        if (m) {
   1c9d8:	9801      	ldr	r0, [sp, #4]
   1c9da:	2800      	cmp	r0, #0
   1c9dc:	d0f4      	beq.n	1c9c8 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1c9de:	f7fd fc59 	bl	1a294 <os_mbuf_free_chain>
   1c9e2:	e7f1      	b.n	1c9c8 <oc_buffer_rx+0x4>
        }
    }
}
   1c9e4:	b003      	add	sp, #12
   1c9e6:	f85d fb04 	ldr.w	pc, [sp], #4
   1c9ea:	bf00      	nop
   1c9ec:	2000e3b8 	.word	0x2000e3b8

0001c9f0 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1c9f0:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1c9f2:	2200      	movs	r2, #0
   1c9f4:	4904      	ldr	r1, [pc, #16]	; (1ca08 <oc_buffer_init+0x18>)
   1c9f6:	4805      	ldr	r0, [pc, #20]	; (1ca0c <oc_buffer_init+0x1c>)
   1c9f8:	f7fd fbce 	bl	1a198 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1c9fc:	2200      	movs	r2, #0
   1c9fe:	4904      	ldr	r1, [pc, #16]	; (1ca10 <oc_buffer_init+0x20>)
   1ca00:	4804      	ldr	r0, [pc, #16]	; (1ca14 <oc_buffer_init+0x24>)
   1ca02:	f7fd fbc9 	bl	1a198 <os_mqueue_init>
}
   1ca06:	bd08      	pop	{r3, pc}
   1ca08:	0001c9c5 	.word	0x0001c9c5
   1ca0c:	2000e3b8 	.word	0x2000e3b8
   1ca10:	0001c995 	.word	0x0001c995
   1ca14:	2000e3d0 	.word	0x2000e3d0

0001ca18 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1ca18:	b500      	push	{lr}
   1ca1a:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1ca1c:	4b07      	ldr	r3, [pc, #28]	; (1ca3c <oc_ri_mem_init+0x24>)
   1ca1e:	9300      	str	r3, [sp, #0]
   1ca20:	4b07      	ldr	r3, [pc, #28]	; (1ca40 <oc_ri_mem_init+0x28>)
   1ca22:	2264      	movs	r2, #100	; 0x64
   1ca24:	2102      	movs	r1, #2
   1ca26:	4807      	ldr	r0, [pc, #28]	; (1ca44 <oc_ri_mem_init+0x2c>)
   1ca28:	f7fd fd3c 	bl	1a4a4 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1ca2c:	f000 f860 	bl	1caf0 <oc_rep_init>
#endif
    oc_buffer_init();
   1ca30:	f7ff ffde 	bl	1c9f0 <oc_buffer_init>
}
   1ca34:	b003      	add	sp, #12
   1ca36:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca3a:	bf00      	nop
   1ca3c:	00021444 	.word	0x00021444
   1ca40:	2000e3e8 	.word	0x2000e3e8
   1ca44:	2000e4b0 	.word	0x2000e4b0

0001ca48 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1ca48:	4b01      	ldr	r3, [pc, #4]	; (1ca50 <oc_evq_set+0x8>)
   1ca4a:	6018      	str	r0, [r3, #0]
}
   1ca4c:	4770      	bx	lr
   1ca4e:	bf00      	nop
   1ca50:	2000e4cc 	.word	0x2000e4cc

0001ca54 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1ca54:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1ca56:	7e03      	ldrb	r3, [r0, #24]
   1ca58:	f003 0307 	and.w	r3, r3, #7
   1ca5c:	4a04      	ldr	r2, [pc, #16]	; (1ca70 <oc_send_buffer+0x1c>)
   1ca5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1ca62:	b113      	cbz	r3, 1ca6a <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1ca64:	68db      	ldr	r3, [r3, #12]
   1ca66:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1ca68:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1ca6a:	f7fd fc13 	bl	1a294 <os_mbuf_free_chain>
}
   1ca6e:	e7fb      	b.n	1ca68 <oc_send_buffer+0x14>
   1ca70:	2000e760 	.word	0x2000e760

0001ca74 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1ca74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca78:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1ca7a:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1ca7c:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1ca7e:	e002      	b.n	1ca86 <oc_send_multicast_message+0x12>
   1ca80:	4635      	mov	r5, r6
   1ca82:	3401      	adds	r4, #1
   1ca84:	462e      	mov	r6, r5
   1ca86:	2c07      	cmp	r4, #7
   1ca88:	dc12      	bgt.n	1cab0 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1ca8a:	4b0c      	ldr	r3, [pc, #48]	; (1cabc <oc_send_multicast_message+0x48>)
   1ca8c:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1ca90:	2d00      	cmp	r5, #0
   1ca92:	d0f5      	beq.n	1ca80 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1ca94:	2e00      	cmp	r6, #0
   1ca96:	d0f4      	beq.n	1ca82 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1ca98:	4638      	mov	r0, r7
   1ca9a:	f7fd fc6b 	bl	1a374 <os_mbuf_dup>
   1ca9e:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1caa0:	6933      	ldr	r3, [r6, #16]
   1caa2:	4638      	mov	r0, r7
   1caa4:	4798      	blx	r3
            if (!n) {
   1caa6:	f1b8 0f00 	cmp.w	r8, #0
   1caaa:	d005      	beq.n	1cab8 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1caac:	4647      	mov	r7, r8
   1caae:	e7e8      	b.n	1ca82 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1cab0:	b116      	cbz	r6, 1cab8 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1cab2:	6933      	ldr	r3, [r6, #16]
   1cab4:	4638      	mov	r0, r7
   1cab6:	4798      	blx	r3
    }
}
   1cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cabc:	2000e760 	.word	0x2000e760

0001cac0 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1cac0:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1cac2:	4b07      	ldr	r3, [pc, #28]	; (1cae0 <oc_init+0x20>)
   1cac4:	781b      	ldrb	r3, [r3, #0]
   1cac6:	b133      	cbz	r3, 1cad6 <oc_init+0x16>
    oc_ri_mem_init();
   1cac8:	f7ff ffa6 	bl	1ca18 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1cacc:	f7fd fb60 	bl	1a190 <os_eventq_dflt_get>
   1cad0:	f7ff ffba 	bl	1ca48 <oc_evq_set>
}
   1cad4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cad6:	461a      	mov	r2, r3
   1cad8:	4619      	mov	r1, r3
   1cada:	4618      	mov	r0, r3
   1cadc:	f7fc ff9a 	bl	19a14 <__assert_func>
   1cae0:	2000e5bc 	.word	0x2000e5bc

0001cae4 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1cae4:	4770      	bx	lr

0001cae6 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1cae6:	4770      	bx	lr

0001cae8 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1cae8:	4770      	bx	lr

0001caea <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1caea:	4770      	bx	lr

0001caec <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1caec:	4770      	bx	lr
	...

0001caf0 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1caf0:	b500      	push	{lr}
   1caf2:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1caf4:	4b05      	ldr	r3, [pc, #20]	; (1cb0c <oc_rep_init+0x1c>)
   1caf6:	9300      	str	r3, [sp, #0]
   1caf8:	4b05      	ldr	r3, [pc, #20]	; (1cb10 <oc_rep_init+0x20>)
   1cafa:	2218      	movs	r2, #24
   1cafc:	2102      	movs	r1, #2
   1cafe:	4805      	ldr	r0, [pc, #20]	; (1cb14 <oc_rep_init+0x24>)
   1cb00:	f7fd fcd0 	bl	1a4a4 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1cb04:	b003      	add	sp, #12
   1cb06:	f85d fb04 	ldr.w	pc, [sp], #4
   1cb0a:	bf00      	nop
   1cb0c:	00021450 	.word	0x00021450
   1cb10:	2000e4ec 	.word	0x2000e4ec
   1cb14:	2000e4d0 	.word	0x2000e4d0

0001cb18 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1cb18:	b570      	push	{r4, r5, r6, lr}
   1cb1a:	b086      	sub	sp, #24
   1cb1c:	4605      	mov	r5, r0
   1cb1e:	460e      	mov	r6, r1
   1cb20:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1cb22:	2300      	movs	r3, #0
   1cb24:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1cb26:	f000 f9ad 	bl	1ce84 <mfg_init>

    mfg_open(&reader);
   1cb2a:	a801      	add	r0, sp, #4
   1cb2c:	f000 f9c6 	bl	1cebc <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1cb30:	6823      	ldr	r3, [r4, #0]
   1cb32:	42ab      	cmp	r3, r5
   1cb34:	da29      	bge.n	1cb8a <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1cb36:	2102      	movs	r1, #2
   1cb38:	a801      	add	r0, sp, #4
   1cb3a:	f000 f98c 	bl	1ce56 <mfg_seek_next_with_type>
   1cb3e:	4603      	mov	r3, r0
        switch (rc) {
   1cb40:	f110 0f0f 	cmn.w	r0, #15
   1cb44:	d003      	beq.n	1cb4e <flash_map_read_mfg+0x36>
   1cb46:	b120      	cbz	r0, 1cb52 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1cb48:	4618      	mov	r0, r3
   1cb4a:	b006      	add	sp, #24
   1cb4c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1cb4e:	2300      	movs	r3, #0
   1cb50:	e7fa      	b.n	1cb48 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1cb52:	a903      	add	r1, sp, #12
   1cb54:	a801      	add	r0, sp, #4
   1cb56:	f000 f98b 	bl	1ce70 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1cb5a:	4603      	mov	r3, r0
   1cb5c:	2800      	cmp	r0, #0
   1cb5e:	d1f3      	bne.n	1cb48 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1cb60:	6823      	ldr	r3, [r4, #0]
   1cb62:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cb66:	009a      	lsls	r2, r3, #2
   1cb68:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1cb6a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1cb6e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1cb70:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1cb74:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1cb76:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1cb7a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1cb7c:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1cb80:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1cb82:	6823      	ldr	r3, [r4, #0]
   1cb84:	3301      	adds	r3, #1
   1cb86:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1cb88:	e7d2      	b.n	1cb30 <flash_map_read_mfg+0x18>
            return -1;
   1cb8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cb8e:	e7db      	b.n	1cb48 <flash_map_read_mfg+0x30>

0001cb90 <flash_area_open>:
{
   1cb90:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1cb92:	4b0d      	ldr	r3, [pc, #52]	; (1cbc8 <flash_area_open+0x38>)
   1cb94:	681d      	ldr	r5, [r3, #0]
   1cb96:	b1a5      	cbz	r5, 1cbc2 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1cb98:	2300      	movs	r3, #0
   1cb9a:	4a0c      	ldr	r2, [pc, #48]	; (1cbcc <flash_area_open+0x3c>)
   1cb9c:	6812      	ldr	r2, [r2, #0]
   1cb9e:	429a      	cmp	r2, r3
   1cba0:	dd0b      	ble.n	1cbba <flash_area_open+0x2a>
        area = flash_map + i;
   1cba2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1cba6:	00a2      	lsls	r2, r4, #2
   1cba8:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1cbaa:	5caa      	ldrb	r2, [r5, r2]
   1cbac:	4282      	cmp	r2, r0
   1cbae:	d001      	beq.n	1cbb4 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1cbb0:	3301      	adds	r3, #1
   1cbb2:	e7f2      	b.n	1cb9a <flash_area_open+0xa>
            *fap = area;
   1cbb4:	600c      	str	r4, [r1, #0]
            return 0;
   1cbb6:	2000      	movs	r0, #0
   1cbb8:	e001      	b.n	1cbbe <flash_area_open+0x2e>
    return SYS_ENOENT;
   1cbba:	f06f 0003 	mvn.w	r0, #3
}
   1cbbe:	bc30      	pop	{r4, r5}
   1cbc0:	4770      	bx	lr
        return SYS_EACCES;
   1cbc2:	f06f 0006 	mvn.w	r0, #6
   1cbc6:	e7fa      	b.n	1cbbe <flash_area_open+0x2e>
   1cbc8:	2000e784 	.word	0x2000e784
   1cbcc:	2000e780 	.word	0x2000e780

0001cbd0 <flash_area_read>:
{
   1cbd0:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1cbd2:	6884      	ldr	r4, [r0, #8]
   1cbd4:	428c      	cmp	r4, r1
   1cbd6:	d308      	bcc.n	1cbea <flash_area_read+0x1a>
   1cbd8:	18cd      	adds	r5, r1, r3
   1cbda:	42ac      	cmp	r4, r5
   1cbdc:	d308      	bcc.n	1cbf0 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1cbde:	6844      	ldr	r4, [r0, #4]
   1cbe0:	4421      	add	r1, r4
   1cbe2:	7840      	ldrb	r0, [r0, #1]
   1cbe4:	f000 f9c8 	bl	1cf78 <hal_flash_read>
}
   1cbe8:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1cbea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cbee:	e7fb      	b.n	1cbe8 <flash_area_read+0x18>
   1cbf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cbf4:	e7f8      	b.n	1cbe8 <flash_area_read+0x18>
	...

0001cbf8 <flash_map_init>:

void
flash_map_init(void)
{
   1cbf8:	b510      	push	{r4, lr}
   1cbfa:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cbfc:	4b14      	ldr	r3, [pc, #80]	; (1cc50 <flash_map_init+0x58>)
   1cbfe:	781b      	ldrb	r3, [r3, #0]
   1cc00:	b303      	cbz	r3, 1cc44 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1cc02:	f000 f9a5 	bl	1cf50 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cc06:	b138      	cbz	r0, 1cc18 <flash_map_init+0x20>
   1cc08:	2000      	movs	r0, #0
   1cc0a:	9000      	str	r0, [sp, #0]
   1cc0c:	4b11      	ldr	r3, [pc, #68]	; (1cc54 <flash_map_init+0x5c>)
   1cc0e:	681c      	ldr	r4, [r3, #0]
   1cc10:	4603      	mov	r3, r0
   1cc12:	4602      	mov	r2, r0
   1cc14:	4601      	mov	r1, r0
   1cc16:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1cc18:	4b0f      	ldr	r3, [pc, #60]	; (1cc58 <flash_map_init+0x60>)
   1cc1a:	4a10      	ldr	r2, [pc, #64]	; (1cc5c <flash_map_init+0x64>)
   1cc1c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1cc1e:	4b10      	ldr	r3, [pc, #64]	; (1cc60 <flash_map_init+0x68>)
   1cc20:	2206      	movs	r2, #6
   1cc22:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1cc24:	aa03      	add	r2, sp, #12
   1cc26:	490f      	ldr	r1, [pc, #60]	; (1cc64 <flash_map_init+0x6c>)
   1cc28:	200a      	movs	r0, #10
   1cc2a:	f7ff ff75 	bl	1cb18 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1cc2e:	b938      	cbnz	r0, 1cc40 <flash_map_init+0x48>
   1cc30:	9b03      	ldr	r3, [sp, #12]
   1cc32:	2b00      	cmp	r3, #0
   1cc34:	dd04      	ble.n	1cc40 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1cc36:	4a08      	ldr	r2, [pc, #32]	; (1cc58 <flash_map_init+0x60>)
   1cc38:	490a      	ldr	r1, [pc, #40]	; (1cc64 <flash_map_init+0x6c>)
   1cc3a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1cc3c:	4a08      	ldr	r2, [pc, #32]	; (1cc60 <flash_map_init+0x68>)
   1cc3e:	6013      	str	r3, [r2, #0]
    }
}
   1cc40:	b004      	add	sp, #16
   1cc42:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cc44:	461a      	mov	r2, r3
   1cc46:	4619      	mov	r1, r3
   1cc48:	4618      	mov	r0, r3
   1cc4a:	f7fc fee3 	bl	19a14 <__assert_func>
   1cc4e:	bf00      	nop
   1cc50:	2000e5bc 	.word	0x2000e5bc
   1cc54:	20000104 	.word	0x20000104
   1cc58:	2000e784 	.word	0x2000e784
   1cc5c:	0002145c 	.word	0x0002145c
   1cc60:	2000e780 	.word	0x2000e780
   1cc64:	2000e51c 	.word	0x2000e51c

0001cc68 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1cc68:	4770      	bx	lr
	...

0001cc6c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1cc6c:	b530      	push	{r4, r5, lr}
   1cc6e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1cc70:	7885      	ldrb	r5, [r0, #2]
   1cc72:	4b21      	ldr	r3, [pc, #132]	; (1ccf8 <mfg_seek_next_aux+0x8c>)
   1cc74:	681b      	ldr	r3, [r3, #0]
   1cc76:	429d      	cmp	r5, r3
   1cc78:	da32      	bge.n	1cce0 <mfg_seek_next_aux+0x74>
   1cc7a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1cc7c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1cc80:	0093      	lsls	r3, r2, #2
   1cc82:	a901      	add	r1, sp, #4
   1cc84:	4a1d      	ldr	r2, [pc, #116]	; (1ccfc <mfg_seek_next_aux+0x90>)
   1cc86:	5cd0      	ldrb	r0, [r2, r3]
   1cc88:	f7ff ff82 	bl	1cb90 <flash_area_open>
    if (rc != 0) {
   1cc8c:	bb58      	cbnz	r0, 1cce6 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1cc8e:	6862      	ldr	r2, [r4, #4]
   1cc90:	b9c2      	cbnz	r2, 1ccc4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1cc92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cc96:	00aa      	lsls	r2, r5, #2
   1cc98:	4b18      	ldr	r3, [pc, #96]	; (1ccfc <mfg_seek_next_aux+0x90>)
   1cc9a:	4413      	add	r3, r2
   1cc9c:	685b      	ldr	r3, [r3, #4]
   1cc9e:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1cca0:	6861      	ldr	r1, [r4, #4]
   1cca2:	9801      	ldr	r0, [sp, #4]
   1cca4:	6883      	ldr	r3, [r0, #8]
   1cca6:	3b08      	subs	r3, #8
   1cca8:	4299      	cmp	r1, r3
   1ccaa:	d310      	bcc.n	1ccce <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1ccac:	78a3      	ldrb	r3, [r4, #2]
   1ccae:	1c59      	adds	r1, r3, #1
   1ccb0:	4a11      	ldr	r2, [pc, #68]	; (1ccf8 <mfg_seek_next_aux+0x8c>)
   1ccb2:	6812      	ldr	r2, [r2, #0]
   1ccb4:	4291      	cmp	r1, r2
   1ccb6:	da19      	bge.n	1ccec <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1ccb8:	2200      	movs	r2, #0
   1ccba:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1ccbc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1ccbe:	f06f 0305 	mvn.w	r3, #5
   1ccc2:	e015      	b.n	1ccf0 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1ccc4:	7863      	ldrb	r3, [r4, #1]
   1ccc6:	4413      	add	r3, r2
   1ccc8:	3302      	adds	r3, #2
   1ccca:	6063      	str	r3, [r4, #4]
   1cccc:	e7e8      	b.n	1cca0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1ccce:	2302      	movs	r3, #2
   1ccd0:	4622      	mov	r2, r4
   1ccd2:	f7ff ff7d 	bl	1cbd0 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1ccd6:	4603      	mov	r3, r0
   1ccd8:	b150      	cbz	r0, 1ccf0 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1ccda:	f06f 0304 	mvn.w	r3, #4
   1ccde:	e007      	b.n	1ccf0 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1cce0:	f06f 0301 	mvn.w	r3, #1
   1cce4:	e004      	b.n	1ccf0 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1cce6:	f06f 0304 	mvn.w	r3, #4
   1ccea:	e001      	b.n	1ccf0 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1ccec:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1ccf0:	4618      	mov	r0, r3
   1ccf2:	b003      	add	sp, #12
   1ccf4:	bd30      	pop	{r4, r5, pc}
   1ccf6:	bf00      	nop
   1ccf8:	2000e5b0 	.word	0x2000e5b0
   1ccfc:	2000e598 	.word	0x2000e598

0001cd00 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1cd00:	b530      	push	{r4, r5, lr}
   1cd02:	b085      	sub	sp, #20
   1cd04:	4605      	mov	r5, r0
   1cd06:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1cd08:	a903      	add	r1, sp, #12
   1cd0a:	f7ff ff41 	bl	1cb90 <flash_area_open>
    if (rc != 0) {
   1cd0e:	b9e8      	cbnz	r0, 1cd4c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1cd10:	9803      	ldr	r0, [sp, #12]
   1cd12:	6881      	ldr	r1, [r0, #8]
   1cd14:	2308      	movs	r3, #8
   1cd16:	aa01      	add	r2, sp, #4
   1cd18:	3908      	subs	r1, #8
   1cd1a:	f7ff ff59 	bl	1cbd0 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1cd1e:	4601      	mov	r1, r0
   1cd20:	b9b8      	cbnz	r0, 1cd52 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1cd22:	9a02      	ldr	r2, [sp, #8]
   1cd24:	4b11      	ldr	r3, [pc, #68]	; (1cd6c <mfg_read_mmr+0x6c>)
   1cd26:	429a      	cmp	r2, r3
   1cd28:	d116      	bne.n	1cd58 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1cd2a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cd2e:	2b02      	cmp	r3, #2
   1cd30:	d115      	bne.n	1cd5e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1cd32:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cd36:	9b03      	ldr	r3, [sp, #12]
   1cd38:	689b      	ldr	r3, [r3, #8]
   1cd3a:	429a      	cmp	r2, r3
   1cd3c:	d812      	bhi.n	1cd64 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1cd3e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1cd40:	7025      	strb	r5, [r4, #0]
   1cd42:	6063      	str	r3, [r4, #4]
   1cd44:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1cd46:	4608      	mov	r0, r1
   1cd48:	b005      	add	sp, #20
   1cd4a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1cd4c:	f06f 0104 	mvn.w	r1, #4
   1cd50:	e7f9      	b.n	1cd46 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1cd52:	f06f 0104 	mvn.w	r1, #4
   1cd56:	e7f6      	b.n	1cd46 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cd58:	f06f 0108 	mvn.w	r1, #8
   1cd5c:	e7f3      	b.n	1cd46 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1cd5e:	f06f 010b 	mvn.w	r1, #11
   1cd62:	e7f0      	b.n	1cd46 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cd64:	f06f 0108 	mvn.w	r1, #8
   1cd68:	e7ed      	b.n	1cd46 <mfg_read_mmr+0x46>
   1cd6a:	bf00      	nop
   1cd6c:	3bb2a269 	.word	0x3bb2a269

0001cd70 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1cd70:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cd72:	2300      	movs	r3, #0
   1cd74:	4a11      	ldr	r2, [pc, #68]	; (1cdbc <mfg_read_next_mmr+0x4c>)
   1cd76:	6812      	ldr	r2, [r2, #0]
   1cd78:	429a      	cmp	r2, r3
   1cd7a:	dd08      	ble.n	1cd8e <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1cd7c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1cd80:	008a      	lsls	r2, r1, #2
   1cd82:	490f      	ldr	r1, [pc, #60]	; (1cdc0 <mfg_read_next_mmr+0x50>)
   1cd84:	5c8a      	ldrb	r2, [r1, r2]
   1cd86:	4282      	cmp	r2, r0
   1cd88:	d011      	beq.n	1cdae <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cd8a:	3301      	adds	r3, #1
   1cd8c:	e7f2      	b.n	1cd74 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1cd8e:	2a01      	cmp	r2, #1
   1cd90:	dc11      	bgt.n	1cdb6 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1cd92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1cd96:	0093      	lsls	r3, r2, #2
   1cd98:	4909      	ldr	r1, [pc, #36]	; (1cdc0 <mfg_read_next_mmr+0x50>)
   1cd9a:	4419      	add	r1, r3
   1cd9c:	f7ff ffb0 	bl	1cd00 <mfg_read_mmr>
    if (rc != 0) {
   1cda0:	4603      	mov	r3, r0
   1cda2:	b930      	cbnz	r0, 1cdb2 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1cda4:	4905      	ldr	r1, [pc, #20]	; (1cdbc <mfg_read_next_mmr+0x4c>)
   1cda6:	680a      	ldr	r2, [r1, #0]
   1cda8:	3201      	adds	r2, #1
   1cdaa:	600a      	str	r2, [r1, #0]
    return 0;
   1cdac:	e001      	b.n	1cdb2 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1cdae:	f06f 030a 	mvn.w	r3, #10
}
   1cdb2:	4618      	mov	r0, r3
   1cdb4:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1cdb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1cdba:	e7fa      	b.n	1cdb2 <mfg_read_next_mmr+0x42>
   1cdbc:	2000e5b0 	.word	0x2000e5b0
   1cdc0:	2000e598 	.word	0x2000e598

0001cdc4 <mfg_open_flash_area>:
{
   1cdc4:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cdc6:	7883      	ldrb	r3, [r0, #2]
   1cdc8:	4a0b      	ldr	r2, [pc, #44]	; (1cdf8 <mfg_open_flash_area+0x34>)
   1cdca:	6812      	ldr	r2, [r2, #0]
   1cdcc:	4293      	cmp	r3, r2
   1cdce:	da0a      	bge.n	1cde6 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1cdd0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1cdd4:	009a      	lsls	r2, r3, #2
   1cdd6:	4b09      	ldr	r3, [pc, #36]	; (1cdfc <mfg_open_flash_area+0x38>)
   1cdd8:	5c98      	ldrb	r0, [r3, r2]
   1cdda:	f7ff fed9 	bl	1cb90 <flash_area_open>
    if (rc != 0) {
   1cdde:	4603      	mov	r3, r0
   1cde0:	b938      	cbnz	r0, 1cdf2 <mfg_open_flash_area+0x2e>
}
   1cde2:	4618      	mov	r0, r3
   1cde4:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cde6:	2300      	movs	r3, #0
   1cde8:	461a      	mov	r2, r3
   1cdea:	4619      	mov	r1, r3
   1cdec:	4618      	mov	r0, r3
   1cdee:	f7fc fe11 	bl	19a14 <__assert_func>
        return SYS_EIO;
   1cdf2:	f06f 0304 	mvn.w	r3, #4
   1cdf6:	e7f4      	b.n	1cde2 <mfg_open_flash_area+0x1e>
   1cdf8:	2000e5b0 	.word	0x2000e5b0
   1cdfc:	2000e598 	.word	0x2000e598

0001ce00 <mfg_read_tlv_body>:
{
   1ce00:	b570      	push	{r4, r5, r6, lr}
   1ce02:	b082      	sub	sp, #8
   1ce04:	4606      	mov	r6, r0
   1ce06:	460c      	mov	r4, r1
   1ce08:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1ce0a:	a901      	add	r1, sp, #4
   1ce0c:	f7ff ffda 	bl	1cdc4 <mfg_open_flash_area>
    if (rc != 0) {
   1ce10:	4603      	mov	r3, r0
   1ce12:	b110      	cbz	r0, 1ce1a <mfg_read_tlv_body+0x1a>
}
   1ce14:	4618      	mov	r0, r3
   1ce16:	b002      	add	sp, #8
   1ce18:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1ce1a:	462a      	mov	r2, r5
   1ce1c:	2100      	movs	r1, #0
   1ce1e:	4620      	mov	r0, r4
   1ce20:	f7fe f9fb 	bl	1b21a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1ce24:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1ce26:	6871      	ldr	r1, [r6, #4]
   1ce28:	42ab      	cmp	r3, r5
   1ce2a:	bfa8      	it	ge
   1ce2c:	462b      	movge	r3, r5
   1ce2e:	4622      	mov	r2, r4
   1ce30:	3102      	adds	r1, #2
   1ce32:	9801      	ldr	r0, [sp, #4]
   1ce34:	f7ff fecc 	bl	1cbd0 <flash_area_read>
    if (rc != 0) {
   1ce38:	4603      	mov	r3, r0
   1ce3a:	2800      	cmp	r0, #0
   1ce3c:	d0ea      	beq.n	1ce14 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1ce3e:	f06f 0304 	mvn.w	r3, #4
   1ce42:	e7e7      	b.n	1ce14 <mfg_read_tlv_body+0x14>

0001ce44 <mfg_seek_next>:
{
   1ce44:	b510      	push	{r4, lr}
   1ce46:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1ce48:	4620      	mov	r0, r4
   1ce4a:	f7ff ff0f 	bl	1cc6c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1ce4e:	f110 0f06 	cmn.w	r0, #6
   1ce52:	d0f9      	beq.n	1ce48 <mfg_seek_next+0x4>
}
   1ce54:	bd10      	pop	{r4, pc}

0001ce56 <mfg_seek_next_with_type>:
{
   1ce56:	b538      	push	{r3, r4, r5, lr}
   1ce58:	4604      	mov	r4, r0
   1ce5a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1ce5c:	4620      	mov	r0, r4
   1ce5e:	f7ff fff1 	bl	1ce44 <mfg_seek_next>
        if (rc != 0) {
   1ce62:	4602      	mov	r2, r0
   1ce64:	b910      	cbnz	r0, 1ce6c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1ce66:	7823      	ldrb	r3, [r4, #0]
   1ce68:	42ab      	cmp	r3, r5
   1ce6a:	d1f7      	bne.n	1ce5c <mfg_seek_next_with_type+0x6>
}
   1ce6c:	4610      	mov	r0, r2
   1ce6e:	bd38      	pop	{r3, r4, r5, pc}

0001ce70 <mfg_read_tlv_flash_area>:
{
   1ce70:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1ce72:	220a      	movs	r2, #10
   1ce74:	f7ff ffc4 	bl	1ce00 <mfg_read_tlv_body>
}
   1ce78:	bd08      	pop	{r3, pc}

0001ce7a <mfg_read_tlv_mmr_ref>:
{
   1ce7a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1ce7c:	2201      	movs	r2, #1
   1ce7e:	f7ff ffbf 	bl	1ce00 <mfg_read_tlv_body>
}
   1ce82:	bd08      	pop	{r3, pc}

0001ce84 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1ce84:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1ce86:	4b0b      	ldr	r3, [pc, #44]	; (1ceb4 <mfg_init+0x30>)
   1ce88:	781b      	ldrb	r3, [r3, #0]
   1ce8a:	b94b      	cbnz	r3, 1cea0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1ce8c:	4b09      	ldr	r3, [pc, #36]	; (1ceb4 <mfg_init+0x30>)
   1ce8e:	2201      	movs	r2, #1
   1ce90:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1ce92:	4b09      	ldr	r3, [pc, #36]	; (1ceb8 <mfg_init+0x34>)
   1ce94:	781b      	ldrb	r3, [r3, #0]
   1ce96:	b123      	cbz	r3, 1cea2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1ce98:	2000      	movs	r0, #0
   1ce9a:	f7ff ff69 	bl	1cd70 <mfg_read_next_mmr>
    if (rc != 0) {
   1ce9e:	b128      	cbz	r0, 1ceac <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1cea0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cea2:	461a      	mov	r2, r3
   1cea4:	4619      	mov	r1, r3
   1cea6:	4618      	mov	r0, r3
   1cea8:	f7fc fdb4 	bl	19a14 <__assert_func>
    rc = mfg_read_mmr_refs();
   1ceac:	f000 f80e 	bl	1cecc <mfg_read_mmr_refs>
err:
   1ceb0:	e7f6      	b.n	1cea0 <mfg_init+0x1c>
   1ceb2:	bf00      	nop
   1ceb4:	2000e594 	.word	0x2000e594
   1ceb8:	2000e5bc 	.word	0x2000e5bc

0001cebc <mfg_open>:
{
   1cebc:	b510      	push	{r4, lr}
   1cebe:	4604      	mov	r4, r0
    mfg_init();
   1cec0:	f7ff ffe0 	bl	1ce84 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1cec4:	2300      	movs	r3, #0
   1cec6:	6023      	str	r3, [r4, #0]
   1cec8:	6063      	str	r3, [r4, #4]
}
   1ceca:	bd10      	pop	{r4, pc}

0001cecc <mfg_read_mmr_refs>:
{
   1cecc:	b500      	push	{lr}
   1cece:	b085      	sub	sp, #20
    mfg_open(&reader);
   1ced0:	a801      	add	r0, sp, #4
   1ced2:	f7ff fff3 	bl	1cebc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1ced6:	2104      	movs	r1, #4
   1ced8:	eb0d 0001 	add.w	r0, sp, r1
   1cedc:	f7ff ffbb 	bl	1ce56 <mfg_seek_next_with_type>
   1cee0:	4603      	mov	r3, r0
        switch (rc) {
   1cee2:	f110 0f0f 	cmn.w	r0, #15
   1cee6:	d004      	beq.n	1cef2 <mfg_read_mmr_refs+0x26>
   1cee8:	b128      	cbz	r0, 1cef6 <mfg_read_mmr_refs+0x2a>
}
   1ceea:	4618      	mov	r0, r3
   1ceec:	b005      	add	sp, #20
   1ceee:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1cef2:	2300      	movs	r3, #0
   1cef4:	e7f9      	b.n	1ceea <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1cef6:	a903      	add	r1, sp, #12
   1cef8:	a801      	add	r0, sp, #4
   1cefa:	f7ff ffbe 	bl	1ce7a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1cefe:	4603      	mov	r3, r0
   1cf00:	2800      	cmp	r0, #0
   1cf02:	d1f2      	bne.n	1ceea <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1cf04:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1cf08:	f7ff ff32 	bl	1cd70 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1cf0c:	4603      	mov	r3, r0
   1cf0e:	2800      	cmp	r0, #0
   1cf10:	d0e1      	beq.n	1ced6 <mfg_read_mmr_refs+0xa>
   1cf12:	f110 0f0b 	cmn.w	r0, #11
   1cf16:	d0de      	beq.n	1ced6 <mfg_read_mmr_refs+0xa>
   1cf18:	e7e7      	b.n	1ceea <mfg_read_mmr_refs+0x1e>
	...

0001cf1c <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1cf1c:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1cf1e:	4803      	ldr	r0, [pc, #12]	; (1cf2c <__wrap_coap_receive+0x10>)
   1cf20:	f7fb feb0 	bl	18c84 <console_printf>
    return -1;
}
   1cf24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cf28:	bd08      	pop	{r3, pc}
   1cf2a:	bf00      	nop
   1cf2c:	000214a4 	.word	0x000214a4

0001cf30 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1cf30:	4770      	bx	lr

0001cf32 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1cf32:	6843      	ldr	r3, [r0, #4]
   1cf34:	428b      	cmp	r3, r1
   1cf36:	d808      	bhi.n	1cf4a <hal_flash_check_addr+0x18>
   1cf38:	6882      	ldr	r2, [r0, #8]
   1cf3a:	4413      	add	r3, r2
   1cf3c:	428b      	cmp	r3, r1
   1cf3e:	d301      	bcc.n	1cf44 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1cf40:	2000      	movs	r0, #0
}
   1cf42:	4770      	bx	lr
        return SYS_EINVAL;
   1cf44:	f06f 0001 	mvn.w	r0, #1
   1cf48:	4770      	bx	lr
   1cf4a:	f06f 0001 	mvn.w	r0, #1
   1cf4e:	4770      	bx	lr

0001cf50 <hal_flash_init>:
{
   1cf50:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1cf52:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1cf54:	462c      	mov	r4, r5
   1cf56:	e001      	b.n	1cf5c <hal_flash_init+0xc>
   1cf58:	3401      	adds	r4, #1
   1cf5a:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1cf5c:	4620      	mov	r0, r4
   1cf5e:	f7fe fce3 	bl	1b928 <hal_bsp_flash_dev>
        if (!hf) {
   1cf62:	b138      	cbz	r0, 1cf74 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1cf64:	6802      	ldr	r2, [r0, #0]
   1cf66:	6952      	ldr	r2, [r2, #20]
   1cf68:	4790      	blx	r2
   1cf6a:	2800      	cmp	r0, #0
   1cf6c:	d0f4      	beq.n	1cf58 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1cf6e:	f06f 0504 	mvn.w	r5, #4
   1cf72:	e7f1      	b.n	1cf58 <hal_flash_init+0x8>
}
   1cf74:	4628      	mov	r0, r5
   1cf76:	bd38      	pop	{r3, r4, r5, pc}

0001cf78 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1cf78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1cf7c:	460d      	mov	r5, r1
   1cf7e:	4690      	mov	r8, r2
   1cf80:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1cf82:	f7fe fcd1 	bl	1b928 <hal_bsp_flash_dev>
    if (!hf) {
   1cf86:	b1c0      	cbz	r0, 1cfba <hal_flash_read+0x42>
   1cf88:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1cf8a:	4629      	mov	r1, r5
   1cf8c:	f7ff ffd1 	bl	1cf32 <hal_flash_check_addr>
   1cf90:	b9b0      	cbnz	r0, 1cfc0 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1cf92:	19a9      	adds	r1, r5, r6
   1cf94:	4620      	mov	r0, r4
   1cf96:	f7ff ffcc 	bl	1cf32 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1cf9a:	b9a0      	cbnz	r0, 1cfc6 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1cf9c:	6823      	ldr	r3, [r4, #0]
   1cf9e:	681f      	ldr	r7, [r3, #0]
   1cfa0:	4633      	mov	r3, r6
   1cfa2:	4642      	mov	r2, r8
   1cfa4:	4629      	mov	r1, r5
   1cfa6:	4620      	mov	r0, r4
   1cfa8:	47b8      	blx	r7
    if (rc != 0) {
   1cfaa:	4603      	mov	r3, r0
   1cfac:	b910      	cbnz	r0, 1cfb4 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1cfae:	4618      	mov	r0, r3
   1cfb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1cfb4:	f06f 0304 	mvn.w	r3, #4
   1cfb8:	e7f9      	b.n	1cfae <hal_flash_read+0x36>
        return SYS_EINVAL;
   1cfba:	f06f 0301 	mvn.w	r3, #1
   1cfbe:	e7f6      	b.n	1cfae <hal_flash_read+0x36>
        return SYS_EINVAL;
   1cfc0:	f06f 0301 	mvn.w	r3, #1
   1cfc4:	e7f3      	b.n	1cfae <hal_flash_read+0x36>
   1cfc6:	f06f 0301 	mvn.w	r3, #1
   1cfca:	e7f0      	b.n	1cfae <hal_flash_read+0x36>

0001cfcc <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1cfcc:	2010      	movs	r0, #16
   1cfce:	4770      	bx	lr

0001cfd0 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1cfd0:	b570      	push	{r4, r5, r6, lr}
   1cfd2:	4606      	mov	r6, r0
   1cfd4:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1cfd6:	460d      	mov	r5, r1
   1cfd8:	2908      	cmp	r1, #8
   1cfda:	bf28      	it	cs
   1cfdc:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1cfde:	462a      	mov	r2, r5
   1cfe0:	4906      	ldr	r1, [pc, #24]	; (1cffc <hal_bsp_hw_id+0x2c>)
   1cfe2:	f7fe f90d 	bl	1b200 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1cfe6:	1b64      	subs	r4, r4, r5
   1cfe8:	2c08      	cmp	r4, #8
   1cfea:	bf28      	it	cs
   1cfec:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1cfee:	4622      	mov	r2, r4
   1cff0:	4903      	ldr	r1, [pc, #12]	; (1d000 <hal_bsp_hw_id+0x30>)
   1cff2:	1970      	adds	r0, r6, r5
   1cff4:	f7fe f904 	bl	1b200 <memcpy>

    return len + cnt;
}
   1cff8:	1928      	adds	r0, r5, r4
   1cffa:	bd70      	pop	{r4, r5, r6, pc}
   1cffc:	10000060 	.word	0x10000060
   1d000:	100000a4 	.word	0x100000a4

0001d004 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1d004:	b40e      	push	{r1, r2, r3}
   1d006:	b500      	push	{lr}
   1d008:	b082      	sub	sp, #8
   1d00a:	ab03      	add	r3, sp, #12
   1d00c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1d010:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1d012:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1d016:	f7fe fbef 	bl	1b7f8 <vsnprintf>
	va_end(ap);

	return rv;
}
   1d01a:	b002      	add	sp, #8
   1d01c:	f85d eb04 	ldr.w	lr, [sp], #4
   1d020:	b003      	add	sp, #12
   1d022:	4770      	bx	lr

0001d024 <__aeabi_uldivmod>:
   1d024:	b953      	cbnz	r3, 1d03c <__aeabi_uldivmod+0x18>
   1d026:	b94a      	cbnz	r2, 1d03c <__aeabi_uldivmod+0x18>
   1d028:	2900      	cmp	r1, #0
   1d02a:	bf08      	it	eq
   1d02c:	2800      	cmpeq	r0, #0
   1d02e:	bf1c      	itt	ne
   1d030:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1d034:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1d038:	f000 b972 	b.w	1d320 <__aeabi_idiv0>
   1d03c:	f1ad 0c08 	sub.w	ip, sp, #8
   1d040:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1d044:	f000 f806 	bl	1d054 <__udivmoddi4>
   1d048:	f8dd e004 	ldr.w	lr, [sp, #4]
   1d04c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1d050:	b004      	add	sp, #16
   1d052:	4770      	bx	lr

0001d054 <__udivmoddi4>:
   1d054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d058:	9e08      	ldr	r6, [sp, #32]
   1d05a:	4604      	mov	r4, r0
   1d05c:	4688      	mov	r8, r1
   1d05e:	2b00      	cmp	r3, #0
   1d060:	d14b      	bne.n	1d0fa <__udivmoddi4+0xa6>
   1d062:	428a      	cmp	r2, r1
   1d064:	4615      	mov	r5, r2
   1d066:	d967      	bls.n	1d138 <__udivmoddi4+0xe4>
   1d068:	fab2 f282 	clz	r2, r2
   1d06c:	b14a      	cbz	r2, 1d082 <__udivmoddi4+0x2e>
   1d06e:	f1c2 0720 	rsb	r7, r2, #32
   1d072:	fa01 f302 	lsl.w	r3, r1, r2
   1d076:	fa20 f707 	lsr.w	r7, r0, r7
   1d07a:	4095      	lsls	r5, r2
   1d07c:	ea47 0803 	orr.w	r8, r7, r3
   1d080:	4094      	lsls	r4, r2
   1d082:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d086:	0c23      	lsrs	r3, r4, #16
   1d088:	fbb8 f7fe 	udiv	r7, r8, lr
   1d08c:	fa1f fc85 	uxth.w	ip, r5
   1d090:	fb0e 8817 	mls	r8, lr, r7, r8
   1d094:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1d098:	fb07 f10c 	mul.w	r1, r7, ip
   1d09c:	4299      	cmp	r1, r3
   1d09e:	d909      	bls.n	1d0b4 <__udivmoddi4+0x60>
   1d0a0:	18eb      	adds	r3, r5, r3
   1d0a2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1d0a6:	f080 811b 	bcs.w	1d2e0 <__udivmoddi4+0x28c>
   1d0aa:	4299      	cmp	r1, r3
   1d0ac:	f240 8118 	bls.w	1d2e0 <__udivmoddi4+0x28c>
   1d0b0:	3f02      	subs	r7, #2
   1d0b2:	442b      	add	r3, r5
   1d0b4:	1a5b      	subs	r3, r3, r1
   1d0b6:	b2a4      	uxth	r4, r4
   1d0b8:	fbb3 f0fe 	udiv	r0, r3, lr
   1d0bc:	fb0e 3310 	mls	r3, lr, r0, r3
   1d0c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1d0c4:	fb00 fc0c 	mul.w	ip, r0, ip
   1d0c8:	45a4      	cmp	ip, r4
   1d0ca:	d909      	bls.n	1d0e0 <__udivmoddi4+0x8c>
   1d0cc:	192c      	adds	r4, r5, r4
   1d0ce:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d0d2:	f080 8107 	bcs.w	1d2e4 <__udivmoddi4+0x290>
   1d0d6:	45a4      	cmp	ip, r4
   1d0d8:	f240 8104 	bls.w	1d2e4 <__udivmoddi4+0x290>
   1d0dc:	3802      	subs	r0, #2
   1d0de:	442c      	add	r4, r5
   1d0e0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1d0e4:	eba4 040c 	sub.w	r4, r4, ip
   1d0e8:	2700      	movs	r7, #0
   1d0ea:	b11e      	cbz	r6, 1d0f4 <__udivmoddi4+0xa0>
   1d0ec:	40d4      	lsrs	r4, r2
   1d0ee:	2300      	movs	r3, #0
   1d0f0:	e9c6 4300 	strd	r4, r3, [r6]
   1d0f4:	4639      	mov	r1, r7
   1d0f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d0fa:	428b      	cmp	r3, r1
   1d0fc:	d909      	bls.n	1d112 <__udivmoddi4+0xbe>
   1d0fe:	2e00      	cmp	r6, #0
   1d100:	f000 80eb 	beq.w	1d2da <__udivmoddi4+0x286>
   1d104:	2700      	movs	r7, #0
   1d106:	e9c6 0100 	strd	r0, r1, [r6]
   1d10a:	4638      	mov	r0, r7
   1d10c:	4639      	mov	r1, r7
   1d10e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d112:	fab3 f783 	clz	r7, r3
   1d116:	2f00      	cmp	r7, #0
   1d118:	d147      	bne.n	1d1aa <__udivmoddi4+0x156>
   1d11a:	428b      	cmp	r3, r1
   1d11c:	d302      	bcc.n	1d124 <__udivmoddi4+0xd0>
   1d11e:	4282      	cmp	r2, r0
   1d120:	f200 80fa 	bhi.w	1d318 <__udivmoddi4+0x2c4>
   1d124:	1a84      	subs	r4, r0, r2
   1d126:	eb61 0303 	sbc.w	r3, r1, r3
   1d12a:	2001      	movs	r0, #1
   1d12c:	4698      	mov	r8, r3
   1d12e:	2e00      	cmp	r6, #0
   1d130:	d0e0      	beq.n	1d0f4 <__udivmoddi4+0xa0>
   1d132:	e9c6 4800 	strd	r4, r8, [r6]
   1d136:	e7dd      	b.n	1d0f4 <__udivmoddi4+0xa0>
   1d138:	b902      	cbnz	r2, 1d13c <__udivmoddi4+0xe8>
   1d13a:	deff      	udf	#255	; 0xff
   1d13c:	fab2 f282 	clz	r2, r2
   1d140:	2a00      	cmp	r2, #0
   1d142:	f040 808f 	bne.w	1d264 <__udivmoddi4+0x210>
   1d146:	1b49      	subs	r1, r1, r5
   1d148:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d14c:	fa1f f885 	uxth.w	r8, r5
   1d150:	2701      	movs	r7, #1
   1d152:	fbb1 fcfe 	udiv	ip, r1, lr
   1d156:	0c23      	lsrs	r3, r4, #16
   1d158:	fb0e 111c 	mls	r1, lr, ip, r1
   1d15c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d160:	fb08 f10c 	mul.w	r1, r8, ip
   1d164:	4299      	cmp	r1, r3
   1d166:	d907      	bls.n	1d178 <__udivmoddi4+0x124>
   1d168:	18eb      	adds	r3, r5, r3
   1d16a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1d16e:	d202      	bcs.n	1d176 <__udivmoddi4+0x122>
   1d170:	4299      	cmp	r1, r3
   1d172:	f200 80cd 	bhi.w	1d310 <__udivmoddi4+0x2bc>
   1d176:	4684      	mov	ip, r0
   1d178:	1a59      	subs	r1, r3, r1
   1d17a:	b2a3      	uxth	r3, r4
   1d17c:	fbb1 f0fe 	udiv	r0, r1, lr
   1d180:	fb0e 1410 	mls	r4, lr, r0, r1
   1d184:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1d188:	fb08 f800 	mul.w	r8, r8, r0
   1d18c:	45a0      	cmp	r8, r4
   1d18e:	d907      	bls.n	1d1a0 <__udivmoddi4+0x14c>
   1d190:	192c      	adds	r4, r5, r4
   1d192:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d196:	d202      	bcs.n	1d19e <__udivmoddi4+0x14a>
   1d198:	45a0      	cmp	r8, r4
   1d19a:	f200 80b6 	bhi.w	1d30a <__udivmoddi4+0x2b6>
   1d19e:	4618      	mov	r0, r3
   1d1a0:	eba4 0408 	sub.w	r4, r4, r8
   1d1a4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d1a8:	e79f      	b.n	1d0ea <__udivmoddi4+0x96>
   1d1aa:	f1c7 0c20 	rsb	ip, r7, #32
   1d1ae:	40bb      	lsls	r3, r7
   1d1b0:	fa22 fe0c 	lsr.w	lr, r2, ip
   1d1b4:	ea4e 0e03 	orr.w	lr, lr, r3
   1d1b8:	fa01 f407 	lsl.w	r4, r1, r7
   1d1bc:	fa20 f50c 	lsr.w	r5, r0, ip
   1d1c0:	fa21 f30c 	lsr.w	r3, r1, ip
   1d1c4:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1d1c8:	4325      	orrs	r5, r4
   1d1ca:	fbb3 f9f8 	udiv	r9, r3, r8
   1d1ce:	0c2c      	lsrs	r4, r5, #16
   1d1d0:	fb08 3319 	mls	r3, r8, r9, r3
   1d1d4:	fa1f fa8e 	uxth.w	sl, lr
   1d1d8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1d1dc:	fb09 f40a 	mul.w	r4, r9, sl
   1d1e0:	429c      	cmp	r4, r3
   1d1e2:	fa02 f207 	lsl.w	r2, r2, r7
   1d1e6:	fa00 f107 	lsl.w	r1, r0, r7
   1d1ea:	d90b      	bls.n	1d204 <__udivmoddi4+0x1b0>
   1d1ec:	eb1e 0303 	adds.w	r3, lr, r3
   1d1f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d1f4:	f080 8087 	bcs.w	1d306 <__udivmoddi4+0x2b2>
   1d1f8:	429c      	cmp	r4, r3
   1d1fa:	f240 8084 	bls.w	1d306 <__udivmoddi4+0x2b2>
   1d1fe:	f1a9 0902 	sub.w	r9, r9, #2
   1d202:	4473      	add	r3, lr
   1d204:	1b1b      	subs	r3, r3, r4
   1d206:	b2ad      	uxth	r5, r5
   1d208:	fbb3 f0f8 	udiv	r0, r3, r8
   1d20c:	fb08 3310 	mls	r3, r8, r0, r3
   1d210:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d214:	fb00 fa0a 	mul.w	sl, r0, sl
   1d218:	45a2      	cmp	sl, r4
   1d21a:	d908      	bls.n	1d22e <__udivmoddi4+0x1da>
   1d21c:	eb1e 0404 	adds.w	r4, lr, r4
   1d220:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d224:	d26b      	bcs.n	1d2fe <__udivmoddi4+0x2aa>
   1d226:	45a2      	cmp	sl, r4
   1d228:	d969      	bls.n	1d2fe <__udivmoddi4+0x2aa>
   1d22a:	3802      	subs	r0, #2
   1d22c:	4474      	add	r4, lr
   1d22e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d232:	fba0 8902 	umull	r8, r9, r0, r2
   1d236:	eba4 040a 	sub.w	r4, r4, sl
   1d23a:	454c      	cmp	r4, r9
   1d23c:	46c2      	mov	sl, r8
   1d23e:	464b      	mov	r3, r9
   1d240:	d354      	bcc.n	1d2ec <__udivmoddi4+0x298>
   1d242:	d051      	beq.n	1d2e8 <__udivmoddi4+0x294>
   1d244:	2e00      	cmp	r6, #0
   1d246:	d069      	beq.n	1d31c <__udivmoddi4+0x2c8>
   1d248:	ebb1 050a 	subs.w	r5, r1, sl
   1d24c:	eb64 0403 	sbc.w	r4, r4, r3
   1d250:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d254:	40fd      	lsrs	r5, r7
   1d256:	40fc      	lsrs	r4, r7
   1d258:	ea4c 0505 	orr.w	r5, ip, r5
   1d25c:	e9c6 5400 	strd	r5, r4, [r6]
   1d260:	2700      	movs	r7, #0
   1d262:	e747      	b.n	1d0f4 <__udivmoddi4+0xa0>
   1d264:	f1c2 0320 	rsb	r3, r2, #32
   1d268:	fa20 f703 	lsr.w	r7, r0, r3
   1d26c:	4095      	lsls	r5, r2
   1d26e:	fa01 f002 	lsl.w	r0, r1, r2
   1d272:	fa21 f303 	lsr.w	r3, r1, r3
   1d276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d27a:	4338      	orrs	r0, r7
   1d27c:	0c01      	lsrs	r1, r0, #16
   1d27e:	fbb3 f7fe 	udiv	r7, r3, lr
   1d282:	fa1f f885 	uxth.w	r8, r5
   1d286:	fb0e 3317 	mls	r3, lr, r7, r3
   1d28a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d28e:	fb07 f308 	mul.w	r3, r7, r8
   1d292:	428b      	cmp	r3, r1
   1d294:	fa04 f402 	lsl.w	r4, r4, r2
   1d298:	d907      	bls.n	1d2aa <__udivmoddi4+0x256>
   1d29a:	1869      	adds	r1, r5, r1
   1d29c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d2a0:	d22f      	bcs.n	1d302 <__udivmoddi4+0x2ae>
   1d2a2:	428b      	cmp	r3, r1
   1d2a4:	d92d      	bls.n	1d302 <__udivmoddi4+0x2ae>
   1d2a6:	3f02      	subs	r7, #2
   1d2a8:	4429      	add	r1, r5
   1d2aa:	1acb      	subs	r3, r1, r3
   1d2ac:	b281      	uxth	r1, r0
   1d2ae:	fbb3 f0fe 	udiv	r0, r3, lr
   1d2b2:	fb0e 3310 	mls	r3, lr, r0, r3
   1d2b6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d2ba:	fb00 f308 	mul.w	r3, r0, r8
   1d2be:	428b      	cmp	r3, r1
   1d2c0:	d907      	bls.n	1d2d2 <__udivmoddi4+0x27e>
   1d2c2:	1869      	adds	r1, r5, r1
   1d2c4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1d2c8:	d217      	bcs.n	1d2fa <__udivmoddi4+0x2a6>
   1d2ca:	428b      	cmp	r3, r1
   1d2cc:	d915      	bls.n	1d2fa <__udivmoddi4+0x2a6>
   1d2ce:	3802      	subs	r0, #2
   1d2d0:	4429      	add	r1, r5
   1d2d2:	1ac9      	subs	r1, r1, r3
   1d2d4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1d2d8:	e73b      	b.n	1d152 <__udivmoddi4+0xfe>
   1d2da:	4637      	mov	r7, r6
   1d2dc:	4630      	mov	r0, r6
   1d2de:	e709      	b.n	1d0f4 <__udivmoddi4+0xa0>
   1d2e0:	4607      	mov	r7, r0
   1d2e2:	e6e7      	b.n	1d0b4 <__udivmoddi4+0x60>
   1d2e4:	4618      	mov	r0, r3
   1d2e6:	e6fb      	b.n	1d0e0 <__udivmoddi4+0x8c>
   1d2e8:	4541      	cmp	r1, r8
   1d2ea:	d2ab      	bcs.n	1d244 <__udivmoddi4+0x1f0>
   1d2ec:	ebb8 0a02 	subs.w	sl, r8, r2
   1d2f0:	eb69 020e 	sbc.w	r2, r9, lr
   1d2f4:	3801      	subs	r0, #1
   1d2f6:	4613      	mov	r3, r2
   1d2f8:	e7a4      	b.n	1d244 <__udivmoddi4+0x1f0>
   1d2fa:	4660      	mov	r0, ip
   1d2fc:	e7e9      	b.n	1d2d2 <__udivmoddi4+0x27e>
   1d2fe:	4618      	mov	r0, r3
   1d300:	e795      	b.n	1d22e <__udivmoddi4+0x1da>
   1d302:	4667      	mov	r7, ip
   1d304:	e7d1      	b.n	1d2aa <__udivmoddi4+0x256>
   1d306:	4681      	mov	r9, r0
   1d308:	e77c      	b.n	1d204 <__udivmoddi4+0x1b0>
   1d30a:	3802      	subs	r0, #2
   1d30c:	442c      	add	r4, r5
   1d30e:	e747      	b.n	1d1a0 <__udivmoddi4+0x14c>
   1d310:	f1ac 0c02 	sub.w	ip, ip, #2
   1d314:	442b      	add	r3, r5
   1d316:	e72f      	b.n	1d178 <__udivmoddi4+0x124>
   1d318:	4638      	mov	r0, r7
   1d31a:	e708      	b.n	1d12e <__udivmoddi4+0xda>
   1d31c:	4637      	mov	r7, r6
   1d31e:	e6e9      	b.n	1d0f4 <__udivmoddi4+0xa0>

0001d320 <__aeabi_idiv0>:
   1d320:	4770      	bx	lr
   1d322:	bf00      	nop

0001d324 <__aeabi_memclr>:
   1d324:	2200      	movs	r2, #0
   1d326:	f000 b803 	b.w	1d330 <__aeabi_memset>
   1d32a:	bf00      	nop

0001d32c <__aeabi_memcpy>:
   1d32c:	f7fd bf68 	b.w	1b200 <memcpy>

0001d330 <__aeabi_memset>:
   1d330:	b470      	push	{r4, r5, r6}
   1d332:	0784      	lsls	r4, r0, #30
   1d334:	d046      	beq.n	1d3c4 <__aeabi_memset+0x94>
   1d336:	1e4c      	subs	r4, r1, #1
   1d338:	2900      	cmp	r1, #0
   1d33a:	d041      	beq.n	1d3c0 <__aeabi_memset+0x90>
   1d33c:	b2d5      	uxtb	r5, r2
   1d33e:	4603      	mov	r3, r0
   1d340:	e002      	b.n	1d348 <__aeabi_memset+0x18>
   1d342:	1e61      	subs	r1, r4, #1
   1d344:	b3e4      	cbz	r4, 1d3c0 <__aeabi_memset+0x90>
   1d346:	460c      	mov	r4, r1
   1d348:	f803 5b01 	strb.w	r5, [r3], #1
   1d34c:	0799      	lsls	r1, r3, #30
   1d34e:	d1f8      	bne.n	1d342 <__aeabi_memset+0x12>
   1d350:	2c03      	cmp	r4, #3
   1d352:	d92e      	bls.n	1d3b2 <__aeabi_memset+0x82>
   1d354:	b2d5      	uxtb	r5, r2
   1d356:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d35a:	2c0f      	cmp	r4, #15
   1d35c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d360:	d919      	bls.n	1d396 <__aeabi_memset+0x66>
   1d362:	4626      	mov	r6, r4
   1d364:	f103 0110 	add.w	r1, r3, #16
   1d368:	3e10      	subs	r6, #16
   1d36a:	2e0f      	cmp	r6, #15
   1d36c:	f841 5c10 	str.w	r5, [r1, #-16]
   1d370:	f841 5c0c 	str.w	r5, [r1, #-12]
   1d374:	f841 5c08 	str.w	r5, [r1, #-8]
   1d378:	f841 5c04 	str.w	r5, [r1, #-4]
   1d37c:	f101 0110 	add.w	r1, r1, #16
   1d380:	d8f2      	bhi.n	1d368 <__aeabi_memset+0x38>
   1d382:	f1a4 0110 	sub.w	r1, r4, #16
   1d386:	f021 010f 	bic.w	r1, r1, #15
   1d38a:	f004 040f 	and.w	r4, r4, #15
   1d38e:	3110      	adds	r1, #16
   1d390:	2c03      	cmp	r4, #3
   1d392:	440b      	add	r3, r1
   1d394:	d90d      	bls.n	1d3b2 <__aeabi_memset+0x82>
   1d396:	461e      	mov	r6, r3
   1d398:	4621      	mov	r1, r4
   1d39a:	3904      	subs	r1, #4
   1d39c:	2903      	cmp	r1, #3
   1d39e:	f846 5b04 	str.w	r5, [r6], #4
   1d3a2:	d8fa      	bhi.n	1d39a <__aeabi_memset+0x6a>
   1d3a4:	1f21      	subs	r1, r4, #4
   1d3a6:	f021 0103 	bic.w	r1, r1, #3
   1d3aa:	3104      	adds	r1, #4
   1d3ac:	440b      	add	r3, r1
   1d3ae:	f004 0403 	and.w	r4, r4, #3
   1d3b2:	b12c      	cbz	r4, 1d3c0 <__aeabi_memset+0x90>
   1d3b4:	b2d2      	uxtb	r2, r2
   1d3b6:	441c      	add	r4, r3
   1d3b8:	f803 2b01 	strb.w	r2, [r3], #1
   1d3bc:	42a3      	cmp	r3, r4
   1d3be:	d1fb      	bne.n	1d3b8 <__aeabi_memset+0x88>
   1d3c0:	bc70      	pop	{r4, r5, r6}
   1d3c2:	4770      	bx	lr
   1d3c4:	460c      	mov	r4, r1
   1d3c6:	4603      	mov	r3, r0
   1d3c8:	e7c2      	b.n	1d350 <__aeabi_memset+0x20>
   1d3ca:	5344      	.short	0x5344
   1d3cc:	61662050 	.word	0x61662050
   1d3d0:	43546c69 	.word	0x43546c69
   1d3d4:	61662048 	.word	0x61662048
   1d3d8:	45476c69 	.word	0x45476c69
   1d3dc:	61662054 	.word	0x61662054
   1d3e0:	55526c69 	.word	0x55526c69
   1d3e4:	6166204e 	.word	0x6166204e
   1d3e8:	6c69      	.short	0x6c69
   1d3ea:	7572      	.short	0x7572
   1d3ec:	612f7473 	.word	0x612f7473
   1d3f0:	732f7070 	.word	0x732f7070
   1d3f4:	6c2f6372 	.word	0x6c2f6372
   1d3f8:	722e6269 	.word	0x722e6269
   1d3fc:	00000073 	.word	0x00000073
   1d400:	0001d3ea 	.word	0x0001d3ea
   1d404:	00000013 	.word	0x00000013
   1d408:	0000005b 	.word	0x0000005b
   1d40c:	00000005 	.word	0x00000005
   1d410:	0001d3ea 	.word	0x0001d3ea
   1d414:	00000013 	.word	0x00000013
   1d418:	00000064 	.word	0x00000064
   1d41c:	00000005 	.word	0x00000005
   1d420:	50494843 	.word	0x50494843
   1d424:	61662038 	.word	0x61662038
   1d428:	00006c69 	.word	0x00006c69
   1d42c:	0001d3ea 	.word	0x0001d3ea
   1d430:	00000013 	.word	0x00000013
   1d434:	00000076 	.word	0x00000076
   1d438:	00000005 	.word	0x00000005
   1d43c:	0001d3ea 	.word	0x0001d3ea
   1d440:	00000013 	.word	0x00000013
   1d444:	0000007c 	.word	0x0000007c
   1d448:	0000000d 	.word	0x0000000d
   1d44c:	0001d3ea 	.word	0x0001d3ea
   1d450:	00000013 	.word	0x00000013
   1d454:	0000007b 	.word	0x0000007b
   1d458:	00000009 	.word	0x00000009
   1d45c:	696e6170 	.word	0x696e6170
   1d460:	2063      	.short	0x2063
   1d462:	6f6e      	.short	0x6f6e
   1d464:	636f6c20 	.word	0x636f6c20
   1d468:	0a          	.byte	0x0a
   1d469:	61          	.byte	0x61
   1d46a:	2074      	.short	0x2074
   1d46c:	6e696c20 	.word	0x6e696c20
   1d470:	2065      	.short	0x2065
   1d472:	000a      	.short	0x000a
   1d474:	0001d3ea 	.word	0x0001d3ea
   1d478:	00000013 	.word	0x00000013
   1d47c:	00000094 	.word	0x00000094
   1d480:	00000014 	.word	0x00000014
   1d484:	74737552 	.word	0x74737552
   1d488:	756f7420 	.word	0x756f7420
   1d48c:	73206863 	.word	0x73206863
   1d490:	6f736e65 	.word	0x6f736e65
   1d494:	00000a72 	.word	0x00000a72
   1d498:	00000000 	.word	0x00000000
   1d49c:	0001d498 	.word	0x0001d498
   1d4a0:	65737361 	.word	0x65737361
   1d4a4:	6f697472 	.word	0x6f697472
   1d4a8:	6166206e 	.word	0x6166206e
   1d4ac:	64656c69 	.word	0x64656c69
   1d4b0:	2860203a 	.word	0x2860203a
   1d4b4:	7466656c 	.word	0x7466656c
   1d4b8:	203d3d20 	.word	0x203d3d20
   1d4bc:	68676972 	.word	0x68676972
   1d4c0:	0a602974 	.word	0x0a602974
   1d4c4:	656c2020 	.word	0x656c2020
   1d4c8:	203a7466 	.word	0x203a7466
   1d4cc:	60          	.byte	0x60
   1d4cd:	60          	.byte	0x60
   1d4ce:	0a2c      	.short	0x0a2c
   1d4d0:	67697220 	.word	0x67697220
   1d4d4:	203a7468 	.word	0x203a7468
   1d4d8:	60          	.byte	0x60
   1d4d9:	60          	.byte	0x60
   1d4da:	203a      	.short	0x203a
   1d4dc:	0001d4a0 	.word	0x0001d4a0
   1d4e0:	0000002d 	.word	0x0000002d
   1d4e4:	0001d4cd 	.word	0x0001d4cd
   1d4e8:	0000000c 	.word	0x0000000c
   1d4ec:	0001d4d9 	.word	0x0001d4d9
   1d4f0:	00000003 	.word	0x00000003
   1d4f4:	0001d4dc 	.word	0x0001d4dc
   1d4f8:	20515249 	.word	0x20515249
   1d4fc:	74696e69 	.word	0x74696e69
   1d500:	69616620 	.word	0x69616620
   1d504:	0000006c 	.word	0x0000006c
   1d508:	0001d4f8 	.word	0x0001d4f8
   1d50c:	0000000d 	.word	0x0000000d
   1d510:	0001d508 	.word	0x0001d508
   1d514:	0001d514 	.word	0x0001d514
   1d518:	74737572 	.word	0x74737572
   1d51c:	7070612f 	.word	0x7070612f
   1d520:	6372732f 	.word	0x6372732f
   1d524:	756f742f 	.word	0x756f742f
   1d528:	735f6863 	.word	0x735f6863
   1d52c:	6f736e65 	.word	0x6f736e65
   1d530:	73722e72 	.word	0x73722e72
   1d534:	0001d518 	.word	0x0001d518
   1d538:	0000001c 	.word	0x0000001c
   1d53c:	0000003f 	.word	0x0000003f
   1d540:	00000005 	.word	0x00000005
   1d544:	20633269 	.word	0x20633269
   1d548:	72646461 	.word	0x72646461
   1d54c:	0001d518 	.word	0x0001d518
   1d550:	0000001c 	.word	0x0000001c
   1d554:	0000004b 	.word	0x0000004b
   1d558:	00000011 	.word	0x00000011
   1d55c:	63756f74 	.word	0x63756f74
   1d560:	74616468 	.word	0x74616468
   1d564:	61662061 	.word	0x61662061
   1d568:	00006c69 	.word	0x00006c69
   1d56c:	0001d518 	.word	0x0001d518
   1d570:	0000001c 	.word	0x0000001c
   1d574:	00000056 	.word	0x00000056
   1d578:	00000009 	.word	0x00000009
   1d57c:	0001d518 	.word	0x0001d518
   1d580:	0000001c 	.word	0x0000001c
   1d584:	0000005a 	.word	0x0000005a
   1d588:	00000031 	.word	0x00000031
   1d58c:	64616572 	.word	0x64616572
   1d590:	756f7420 	.word	0x756f7420
   1d594:	61646863 	.word	0x61646863
   1d598:	66206174 	.word	0x66206174
   1d59c:	006c6961 	.word	0x006c6961
   1d5a0:	0001d518 	.word	0x0001d518
   1d5a4:	0000001c 	.word	0x0000001c
   1d5a8:	00000089 	.word	0x00000089
   1d5ac:	00000005 	.word	0x00000005
   1d5b0:	0001d518 	.word	0x0001d518
   1d5b4:	0000001c 	.word	0x0000001c
   1d5b8:	00000095 	.word	0x00000095
   1d5bc:	00000037 	.word	0x00000037

0001d5c0 <str.0>:
   1d5c0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d5d0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d5e0:	00000077 0001d518 0000001c 00000095     w...............
   1d5f0:	00000024 00000000 00000000 00000000     $...............

0001d600 <str.1>:
   1d600:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d610:	20687469 7265766f 776f6c66 0001d518     ith overflow....
   1d620:	0000001c 00000095 00000020 0001d518     ........ .......
   1d630:	0000001c 00000099 00000009 0001d518     ................
   1d640:	0000001c 0000009a 00000037 0001d518     ........7.......
   1d650:	0000001c 0000009a 00000023 0001d518     ........#.......
   1d660:	0000001c 0000009a 0000001f 0001d518     ................
   1d670:	0000001c 0000009b 00000037 0001d518     ........7.......
   1d680:	0000001c 0000009b 00000023 0001d518     ........#.......
   1d690:	0000001c 0000009b 0000001f 0001d518     ................
   1d6a0:	0000001c 0000009c 00000009 0001d518     ................
   1d6b0:	0000001c 0000009e 00000037 0001d518     ........7.......
   1d6c0:	0000001c 0000009e 00000023 0001d518     ........#.......
   1d6d0:	0000001c 0000009e 0000001f 0001d518     ................
   1d6e0:	0000001c 0000009f 00000037 0001d518     ........7.......
   1d6f0:	0000001c 0000009f 00000023 0001d518     ........#.......
   1d700:	0000001c 0000009f 0000001f 0001d518     ................
   1d710:	0000001c 000000a0 00000009 0001d518     ................
   1d720:	0000001c 000000a4 00000030 0001d518     ........0.......
   1d730:	0000001c 000000a4 0000001a 0001d518     ................
   1d740:	0000001c 000000a4 00000016 0001d518     ................
   1d750:	0000001c 000000a3 00000009 0001d518     ................
   1d760:	0000001c 000000a6 00000030 0001d518     ........0.......
   1d770:	0000001c 000000a6 0000001a 0001d518     ................
   1d780:	0000001c 000000a6 00000016 0001d518     ................
   1d790:	0000001c 000000a5 00000009 0001d518     ................
   1d7a0:	0000001c 000000aa 0000002d 0001d518     ........-.......
   1d7b0:	0000001c 000000aa 0000001a 0001d518     ................
   1d7c0:	0000001c 000000aa 00000016 0001d518     ................
   1d7d0:	0000001c 000000a9 00000009 0001d518     ................
   1d7e0:	0000001c 000000ac 0000002d 0001d518     ........-.......
   1d7f0:	0000001c 000000ac 0000001a 0001d518     ................
   1d800:	0000001c 000000ac 00000016 0001d518     ................
   1d810:	0000001c 000000ab 00000009 0001d518     ................
   1d820:	0000001c 000000af 0000000d 0001d518     ................
   1d830:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1d840:	00667562 0001d518 0000001c 000000f1     buf.............
   1d850:	00000005 0001d518 0000001c 000000f2     ................
   1d860:	0000000d 0001d518 0000001c 000000f2     ................
   1d870:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1d880:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1d890:	00000000 0001d888 00000006 0001d890     ................
   1d8a0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1d8b0:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1d8c0:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1d8d0:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1d8e0:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1d8f0:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1d900:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1d910:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1d920:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1d930:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1d940:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1d950:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1d960:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1d970:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1d980:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1d990:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1d9a0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1d9b0:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1d9c0:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1d9d0:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1d9e0:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1d9f0:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1da00:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1da10:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1da20:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1da30:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1da40:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1da50:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1da60:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1da70:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1da80:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1da90:	00007f00 01010100 03030303 203f0000     ..............? 
   1daa0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1dab0:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1dac0:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1dad0:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1dae0:	00000000 ff000000 00ff0000 f71410f7     ................
   1daf0:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1db00:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1db10:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1db20:	00000000 ff000000 00ff0000 302000be     .............. 0
   1db30:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1db40:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1db50:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1db60:	00000000 ff000000 00ff0000 fc00fe00     ................
   1db70:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1db80:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1db90:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1dba0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1dbb0:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1dbc0:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1dbd0:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1dbe0:	8686fe86 868686fe 10101010 18181010     ................
   1dbf0:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1dc00:	869292ee 82fe8686 86868686 8686827c     ............|...
   1dc10:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1dc20:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1dc30:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1dc40:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1dc50:	fe80f01e 00000000 00000606 c0606000     .............``.
   1dc60:	00000000 18180000 18001818 180cc67c     ............|...
   1dc70:	00001800 0000fefe 868682fe 0808fe86     ................
   1dc80:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1dc90:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1dca0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1dcb0:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1dcc0:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1dcd0:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1dce0:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1dcf0:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1dd00:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1dd10:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1dd20:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1dd30:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1dd40:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1dd50:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1dd60:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1dd70:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1dd80:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1dd90:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1dda0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1ddb0:	ffa8a8a8 00000000 00000000 00000000     ................
   1ddc0:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1ddd0:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1dde0:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1ddf0:	38706968 0073722e 0001dde2 00000015     hip8.rs.........
   1de00:	00000044 00000005 766f2078 6c667265     D.......x overfl
   1de10:	0000776f 0001dde2 00000015 00000078     ow..........x...
   1de20:	00000009 766f2079 6c667265 0000776f     ....y overflow..
   1de30:	0001dde2 00000015 00000079 00000009     ........y.......
   1de40:	0001dde2 00000015 0000007a 00000015     ........z.......

0001de50 <str.0>:
   1de50:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1de60:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1de70:	00000077 0001dde2 00000015 0000007a     w...........z...
   1de80:	00000011 00000000 00000000 00000000     ................

0001de90 <str.1>:
   1de90:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dea0:	20687469 7265766f 776f6c66 0001dde2     ith overflow....
   1deb0:	00000015 0000007b 00000012 0001dde2     ....{...........
   1dec0:	00000015 0000007c 0000001d 0001dde2     ....|...........
   1ded0:	00000015 0000007d 0000001d 0001dde2     ....}...........
   1dee0:	00000015 0000007e 00000009 0001dde2     ....~...........
   1def0:	00000015 0000007f 00000009 0001dde2     ................
   1df00:	00000015 00000082 00000042 00000000     ........B.......

0001df10 <str.2>:
   1df10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1df20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1df30:	00000077 0001dde2 00000015 00000082     w...............
   1df40:	0000005d 0001dde2 00000015 0000008d     ]...............
   1df50:	00000009 0001dde2 00000015 0000008e     ................
   1df60:	00000009 0001dde2 00000015 0000008f     ................
   1df70:	00000015 0001dde2 00000015 0000008f     ................
   1df80:	00000011 0001dde2 00000015 00000090     ................
   1df90:	00000012 73746573 20657a69 000a202c     ....setsize , ..
   1dfa0:	0001dde2 00000015 000000b6 00000012     ................
   1dfb0:	65686373 48430a64 20385049 63756f74     sched.CHIP8 touc
   1dfc0:	6f6e2068 61682074 656c646e 552f0a64     h not handled./U
   1dfd0:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1dfe0:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1dff0:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1e000:	62643939 38636539 6c2f3332 68636269     99db9ec823/libch
   1e010:	2d387069 2e312e30 72732f32 696c2f63     ip8-0.1.2/src/li
   1e020:	73722e62 0001dfce 00000056 0000009d     b.rs....V.......
   1e030:	00000014 0001dfce 00000056 000000d4     ........V.......
   1e040:	00000011 0001dfce 00000056 000000d5     ........V.......
   1e050:	0000001a 00000000 00000000 00000000     ................

0001e060 <str.0>:
   1e060:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e070:	20687469 7265766f 776f6c66 0001dfce     ith overflow....
   1e080:	00000056 000000d5 00000011 00000005     V...............
   1e090:	0001e08c 4c205d5b 78562044 495b202c     ....[] LD Vx, [I
   1e0a0:	0000005d 0001e094 00000001 0001e095     ]...............
   1e0b0:	0000000c 0001e0a4 00000000 00000020     ............ ...
   1e0c0:	00000008 00000002 00000000 00000000     ................
   1e0d0:	00000004 00000003 0001e0b8 6362696c     ............libc
   1e0e0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1e0f0:	6e6e6e20 00000040 00000020 0001e0dc      nnn@... .......
   1e100:	00000008 0001e0dc 00000008 0001dfce     ................
   1e110:	00000056 000001a1 0001e0fc 0001dfce     V...............
   1e120:	00000056 000001a3 0000001d 0001dfce     V...............
   1e130:	00000056 000001a4 0000002a 0001dfce     V.......*.......
   1e140:	00000056 000001a4 00000021 0001dfce     V.......!.......
   1e150:	00000056 000001a4 00000015 444c205d     V...........] LD
   1e160:	5d495b20 7856202c 0001e094 00000001      [I], Vx........
   1e170:	0001e15c 0000000c 0001e168 0001e0dc     \.......h.......
   1e180:	00000008 0001e0dc 00000008 0001dfce     ................
   1e190:	00000056 0000019a 0001e17c 0001dfce     V.......|.......
   1e1a0:	00000056 0000019c 0000001d 0001dfce     V...............
   1e1b0:	00000056 0000019d 00000035 0001dfce     V.......5.......
   1e1c0:	00000056 0000019d 0000001e 0001dfce     V...............
   1e1d0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1e1e0:	202c4220 00007856 0001e094 00000001      B, Vx..........
   1e1f0:	0001e1dc 0000000a 0001e1e8 0001e0dc     ................
   1e200:	00000008 0001e0dc 00000008 0001dfce     ................
   1e210:	00000056 00000193 0001e1fc 0001dfce     V...............
   1e220:	00000056 00000194 0000001b 0001dfce     V...............
   1e230:	00000056 00000195 00000011 0001dfce     V...............
   1e240:	00000056 00000196 0000001a 0001dfce     V...............
   1e250:	00000056 00000196 00000011 0001dfce     V...............
   1e260:	00000056 00000197 0000001a 0001dfce     V...............
   1e270:	00000056 00000197 00000011 444c205d     V...........] LD
   1e280:	202c4620 00007856 0001e094 00000001      F, Vx..........
   1e290:	0001e27c 0000000a 0001e288 0001e0dc     |...............
   1e2a0:	00000008 0001e0dc 00000008 0001dfce     ................
   1e2b0:	00000056 0000018f 0001e29c 0001dfce     V...............
   1e2c0:	00000056 00000190 0000001b 0001dfce     V...............
   1e2d0:	00000056 00000190 0000001a 00000000     V...............

0001e2e0 <str.1>:
   1e2e0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e2f0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e300:	41205d77 49204444 7856202c 0001e094     w] ADD I, Vx....
   1e310:	00000001 0001e301 0000000b 0001e30c     ................
   1e320:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e330:	0001dfce 00000056 0000018b 0001e320     ....V....... ...
   1e340:	0001dfce 00000056 0000018c 0000002e     ....V...........
   1e350:	444c205d 2c545320 00785620 0001e094     ] LD ST, Vx.....
   1e360:	00000001 0001e350 0000000b 0001e35c     ....P.......\...
   1e370:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e380:	0001dfce 00000056 00000187 0001e370     ....V.......p...
   1e390:	0001dfce 00000056 00000188 0000001b     ....V...........
   1e3a0:	444c205d 2c544420 00785620 0001e094     ] LD DT, Vx.....
   1e3b0:	00000001 0001e3a0 0000000b 0001e3ac     ................
   1e3c0:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e3d0:	0001dfce 00000056 00000183 0001e3c0     ....V...........
   1e3e0:	0001dfce 00000056 00000184 0000001b     ....V...........
   1e3f0:	444c205d 2c785620 00004b20 0001e094     ] LD Vx, K......
   1e400:	00000001 0001e3f0 0000000a 0001e3fc     ................
   1e410:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e420:	0001dfce 00000056 0000017f 0001e410     ....V...........
   1e430:	0001dfce 00000056 00000180 00000011     ....V...........
   1e440:	444c205d 2c785620 00544420 0001e094     ] LD Vx, DT.....
   1e450:	00000001 0001e440 0000000b 0001e44c     ....@.......L...
   1e460:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e470:	0001dfce 00000056 0000017b 0001e460     ....V...{...`...
   1e480:	0001dfce 00000056 0000017c 00000011     ....V...|.......
   1e490:	4b53205d 5620504e 00000078 0001e094     ] SKNP Vx.......
   1e4a0:	00000001 0001e490 00000009 0001e49c     ................
   1e4b0:	0001e0dc 00000008 0001e0dc 00000008     ................
   1e4c0:	0001dfce 00000056 00000175 0001e4b0     ....V...u.......
   1e4d0:	0001dfce 00000056 00000176 00000021     ....V...v...!...
   1e4e0:	0001e094 00000001 0001e0e4 00000008     ................
   1e4f0:	0001e4e0 0001e0dc 00000008 0001e0dc     ................
   1e500:	00000008 0001dfce 00000056 0000016f     ........V...o...
   1e510:	0001e4f4 0001dfce 00000056 00000170     ........V...p...
   1e520:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1e530:	006e202c 0001e094 00000001 0001e524     , n.........$...
   1e540:	0000000f 0001e534 0001e0dc 00000008     ....4...........
   1e550:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1e560:	00000156 0001e548 0001dfce 00000056     V...H.......V...
   1e570:	00000157 0000001d 0001dfce 00000056     W...........V...
   1e580:	00000158 0000001d 0001dfce 00000056     X...........V...
   1e590:	0000015e 00000026 0001dfce 00000056     ^...&.......V...
   1e5a0:	0000015e 0000001d 0001dfce 00000056     ^...........V...
   1e5b0:	00000160 00000021 00000000 00000000     `...!...........

0001e5c0 <str.2>:
   1e5c0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1e5d0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1e5e0:	77207265 20687469 69642061 6f736976     er with a diviso
   1e5f0:	666f2072 72657a20 0000006f 0001dfce     r of zero.......
   1e600:	00000056 00000163 00000025 0001dfce     V...c...%.......
   1e610:	00000056 00000165 0000002d 00000000     V...e...-.......

0001e620 <str.3>:
   1e620:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e630:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e640:	00000077 0001dfce 00000056 00000165     w.......V...e...
   1e650:	00000028 00000000 00000000 00000000     (...............

0001e660 <str.4>:
   1e660:	65747461 2074706d 73206f74 74666968     attempt to shift
   1e670:	66656c20 69772074 6f206874 66726576      left with overf
   1e680:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1e690:	0001e094 00000001 0001e683 0000000c     ................
   1e6a0:	0001e690 0001e0dc 00000008 0001e0dc     ................
   1e6b0:	00000008 0001dfce 00000056 00000152     ........V...R...
   1e6c0:	0001e6a4 0001dfce 00000056 00000153     ........V...S...
   1e6d0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1e6e0:	0001e094 00000001 0001e6d4 0000000c     ................
   1e6f0:	0001e6e0 0001e0dc 00000008 0001e0dc     ................
   1e700:	00000008 0001dfce 00000056 0000014e     ........V...N...
   1e710:	0001e6f4 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1e720:	0001e094 00000001 0001e714 0000000b     ................
   1e730:	0001e720 0001e0dc 00000008 0001e0dc      ...............
   1e740:	00000008 0001dfce 00000056 0000014a     ........V...J...
   1e750:	0001e734 4e53205d 78562045 7956202c     4...] SNE Vx, Vy
   1e760:	0001e094 00000001 0001e754 0000000c     ........T.......
   1e770:	0001e760 0001e0dc 00000008 0001e0dc     `...............
   1e780:	00000008 0001dfce 00000056 00000144     ........V...D...
   1e790:	0001e774 0001dfce 00000056 00000145     t.......V...E...
   1e7a0:	00000014 0001dfce 00000056 00000145     ........V...E...
   1e7b0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1e7c0:	0001e094 00000001 0001e7b4 0000000c     ................
   1e7d0:	0001e7c0 0001e0dc 00000008 0001e0dc     ................
   1e7e0:	00000008 0001dfce 00000056 0000013f     ........V...?...
   1e7f0:	0001e7d4 0001dfce 00000056 00000140     ........V...@...
   1e800:	00000020 0001dfce 00000056 00000141      .......V...A...
   1e810:	0000001d 0001dfce 00000056 00000141     ........V...A...
   1e820:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1e830:	00000079 0001e094 00000001 0001e824     y...........$...
   1e840:	0000000d 0001e834 0001e0dc 00000008     ....4...........
   1e850:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1e860:	00000139 0001e848 0001dfce 00000056     9...H.......V...
   1e870:	0000013a 0000001e 0001dfce 00000056     :...........V...
   1e880:	0000013a 00000038 0001dfce 00000056     :...8.......V...
   1e890:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1e8a0:	7956202c 0001e094 00000001 0001e898     , Vy............
   1e8b0:	0000000c 0001e8a4 0001e0dc 00000008     ................
   1e8c0:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1e8d0:	00000134 0001e8b8 0001dfce 00000056     4...........V...
   1e8e0:	00000135 0000001f 0001dfce 00000056     5...........V...
   1e8f0:	00000136 0000001d 0001dfce 00000056     6...........V...
   1e900:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1e910:	7956202c 0001e094 00000001 0001e908     , Vy............
   1e920:	0000000c 0001e914 0001e0dc 00000008     ................
   1e930:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1e940:	0000012e 0001e928 0001dfce 00000056     ....(.......V...
   1e950:	0000012f 0000001e 0001dfce 00000056     /...........V...
   1e960:	0000012f 00000038 0001dfce 00000056     /...8.......V...
   1e970:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1e980:	7956202c 0001e094 00000001 0001e978     , Vy........x...
   1e990:	0000000c 0001e984 0001e0dc 00000008     ................
   1e9a0:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1e9b0:	00000128 0001e998 0001dfce 00000056     (...........V...
   1e9c0:	00000129 0000001e 0001dfce 00000056     )...........V...
   1e9d0:	00000129 00000038 0001dfce 00000056     )...8.......V...
   1e9e0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1e9f0:	7956202c 0001e094 00000001 0001e9e8     , Vy............
   1ea00:	0000000c 0001e9f4 0001e0dc 00000008     ................
   1ea10:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1ea20:	00000124 0001ea08 0001dfce 00000056     $...........V...
   1ea30:	00000125 0000001e 0001dfce 00000056     %...........V...
   1ea40:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1ea50:	7956202c 0001e094 00000001 0001ea48     , Vy........H...
   1ea60:	0000000c 0001ea54 0001e0dc 00000008     ....T...........
   1ea70:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1ea80:	00000120 0001ea68 0001dfce 00000056      ...h.......V...
   1ea90:	00000121 0000001e 0001dfce 00000056     !...........V...
   1eaa0:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1eab0:	00795620 0001e094 00000001 0001eaa8      Vy.............
   1eac0:	0000000b 0001eab4 0001e0dc 00000008     ................
   1ead0:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1eae0:	0000011c 0001eac8 0001dfce 00000056     ............V...
   1eaf0:	0000011d 0000001e 0001dfce 00000056     ............V...
   1eb00:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1eb10:	00795620 0001e094 00000001 0001eb08      Vy.............
   1eb20:	0000000b 0001eb14 0001e0dc 00000008     ................
   1eb30:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1eb40:	00000118 0001eb28 0001dfce 00000056     ....(.......V...
   1eb50:	00000119 0000001d 0001dfce 00000056     ............V...
   1eb60:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1eb70:	6b6b202c 0001e094 00000001 0001eb68     , kk........h...
   1eb80:	0000000c 0001eb74 0001e0dc 00000008     ....t...........
   1eb90:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1eba0:	00000114 0001eb88 0001dfce 00000056     ............V...
   1ebb0:	00000115 0000001d 0001dfce 00000056     ............V...
   1ebc0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1ebd0:	006b6b20 0001e094 00000001 0001ebc8      kk.............
   1ebe0:	0000000b 0001ebd4 0001e0dc 00000008     ................
   1ebf0:	0001e0dc 00000008 0001dfce 00000056     ............V...
   1ec00:	00000110 0001ebe8 0001dfce 00000056     ............V...
   1ec10:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1ec20:	706f2064 0000203a 0001e094 00000001     d op: ..........
   1ec30:	0001ec18 0000000e 0001ec28 00000000     ........(.......
   1ec40:	00000020 00000008 00000002 00000000      ...............
   1ec50:	00000000 00000004 00000003 00000001     ................
   1ec60:	00000020 00000008 00000002 00000000      ...............
   1ec70:	00000000 00000004 00000003 0001ec3c     ............<...
   1ec80:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1ec90:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1eca0:	0001ec80 0000001e 00000005 00000032     ............2...
   1ecb0:	4553205d 2c785620 00795620 0001e094     ] SE Vx, Vy.....
   1ecc0:	00000001 0001ecb0 0000000b 0001ecbc     ................
   1ecd0:	0001e0dc 00000008 0001e0dc 00000008     ................
   1ece0:	0001dfce 00000056 0000010a 0001ecd0     ....V...........
   1ecf0:	0001dfce 00000056 0000010b 00000014     ....V...........
   1ed00:	0001dfce 00000056 0000010b 00000021     ....V.......!...
   1ed10:	4e53205d 78562045 6b6b202c 0001e094     ] SNE Vx, kk....
   1ed20:	00000001 0001ed10 0000000c 0001ed1c     ................
   1ed30:	0001e0dc 00000008 0001e0dc 00000008     ................
   1ed40:	0001dfce 00000056 00000104 0001ed30     ....V.......0...
   1ed50:	0001dfce 00000056 00000105 00000014     ....V...........
   1ed60:	4553205d 20785620 00006b6b 0001e094     ] SE Vx kk......
   1ed70:	00000001 0001ed60 0000000a 0001ed6c     ....`.......l...
   1ed80:	0001e0dc 00000008 0001e0dc 00000008     ................
   1ed90:	0001dfce 00000056 000000fe 0001ed80     ....V...........
   1eda0:	0001dfce 00000056 000000ff 00000014     ....V...........
   1edb0:	4143205d 6e204c4c 00006e6e 0001e094     ] CALL nnn......
   1edc0:	00000001 0001edb0 0000000a 0001edbc     ................
   1edd0:	0001e0dc 00000008 0001e0dc 00000008     ................
   1ede0:	0001dfce 00000056 000000f9 0001edd0     ....V...........
   1edf0:	0001e094 00000001 0001e0ec 00000008     ................
   1ee00:	0001edf0 0001e0dc 00000008 0001e0dc     ................
   1ee10:	00000008 0001dfce 00000056 000000f5     ........V.......
   1ee20:	0001ee04 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1ee30:	0001e094 00000001 0001ee24 00000009     ........$.......
   1ee40:	0001ee30 0001e0dc 00000008 0001e0dc     0...............
   1ee50:	00000008 0001dfce 00000056 000000f1     ........V.......
   1ee60:	0001ee44 20746f6e 6c706d69 6e656d65     D...not implemen
   1ee70:	00646574 0001ec80 0000001e 00000002     ted.............
   1ee80:	00000002 4552205d 00000054 0001e094     ....] RET.......
   1ee90:	00000001 0001ee84 00000005 0001ee8c     ................
   1eea0:	0001e0dc 00000008 0001e0dc 00000008     ................
   1eeb0:	0001dfce 00000056 000000ec 0001eea0     ....V...........
   1eec0:	4c43205d 00000053 0001e094 00000001     ] CLS...........
   1eed0:	0001eec0 00000005 0001eec8 0001e0dc     ................
   1eee0:	00000008 0001e0dc 00000008 0001dfce     ................
   1eef0:	00000056 000000e5 0001eedc 0001dfce     V...............
   1ef00:	00000056 00000093 0000001b 0001dfce     V...............
   1ef10:	00000056 00000097 00000009 0001dfce     V...............
   1ef20:	00000056 000000bb 0000000d 0001dfce     V...............
   1ef30:	00000056 000000be 0000000d 6c6c6163     V...........call
   1ef40:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1ef50:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ef60:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ef70:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ef80:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1ef90:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1efa0:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1efb0:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1efc0:	726f6f63 73722e64 65726e55 61686361     coord.rsUnreacha
   1efd0:	20656c62 65646e69 00002078 0001efc8     ble index ......
   1efe0:	00000012 0001efdc 0001ef67 00000061     ........g...a...
   1eff0:	00000070 00000016                       p.......

0001eff8 <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1eff8:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1f008:	f010f010 10f09090 f080f010 80f0f010     ................
   1f018:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1f028:	90f0f010 e09090f0 e090e090 808080f0     ................
   1f038:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1f048:	72656874 73692065 206f6e20 68637573     there is no such
   1f058:	69687420 6120676e 6e612073 71636120      thing as an acq
   1f068:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1f078:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1f088:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1f098:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1f0a8:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1f0b8:	2f736f72 2e646f6d 00007372 0001f079     ros/mod.rs..y...
   1f0c8:	00000049 0000000a 00000009 72656874     I...........ther
   1f0d8:	73692065 206f6e20 68637573 69687420     e is no such thi
   1f0e8:	6120676e 20612073 656c6572 20657361     ng as a release 
   1f0f8:	64616f6c 0000eb33 00000000 00000001     load3...........
   1f108:	0000eeef 0000eefb 0000ef05 0001f0fc     ................
   1f118:	0000eb33 00000000 00000001 0000eeef     3...............
   1f128:	0000eefb 0000ef05                       ........

0001f130 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1f130:	00000000 0001f130 0001f134 65737361     ....0...4...asse
   1f140:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f150:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f160:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f170:	203a7468 203a6060 0001f13c 0000002d     ht: ``: <...-...
   1f180:	0001f169 0000000c 0001f175 00000003     i.......u.......
   1f190:	0001f178 6e206f6e 006c6c75 0001f194     x...no null.....
   1f1a0:	00000007 0001f19c 0001f1a8 74737572     ............rust
   1f1b0:	6e796d2f 2f747765 2f637273 2e62696c     /mynewt/src/lib.
   1f1c0:	00007372 0001f1ac 00000016 000000db     rs..............
   1f1d0:	00000011 0000f5ab 00000004 00000004     ................
   1f1e0:	0001335d 65737361 6f697472 6166206e     ]3..assertion fa
   1f1f0:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1f200:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1f210:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1f220:	0001f1e4 0000002d 0001f211 0000000c     ....-...........
   1f230:	0001f21d 00000003 0001f220 74736564     ........ ...dest
   1f240:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   1f250:	73206563 6563696c 61682073 64206576     ce slices have d
   1f260:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   1f270:	0001f23c 00000034 0001f270 0001f27c     <...4...p...|...
   1f280:	7375722f 352f6374 66613765 39363634     /rustc/5e7af4669
   1f290:	65303866 38366635 31343132 30353066     f80e5f682141f050
   1f2a0:	61333931 39373662 62646661 2f316234     193ab679afdb4b1/
   1f2b0:	2f637273 6362696c 2f65726f 7263616d     src/libcore/macr
   1f2c0:	6d2f736f 722e646f 00000073 0001f280     os/mod.rs.......
   1f2d0:	00000049 00000012 0000000d 0001d498     I...............
   1f2e0:	65737361 6f697472 6166206e 64656c69     assertion failed
   1f2f0:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1f300:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1f310:	67697220 203a7468 203a6060 0001f2e0      right: ``: ....
   1f320:	0000002d 0001f30d 0000000c 0001f319     -...............
   1f330:	00000003 0001f31c 20697073 666e6f63     ........spi conf
   1f340:	66206769 006c6961 0001f338 0000000f     ig fail.8.......
   1f350:	0001f348 0001f354 74737572 6e796d2f     H...T...rust/myn
   1f360:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1f370:	0001f358 00000016 00000016 00000009     X...............
   1f380:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1f390:	0001f380 0000000f 0001f390 0001f358     ............X...
   1f3a0:	00000016 00000019 00000009 20697073     ............spi 
   1f3b0:	74696e69 69616620 0000006c 0001f3ac     init fail.......
   1f3c0:	0000000d 0001f3bc 0001f358 00000016     ........X.......
   1f3d0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1f3e0:	0000006c 0001f3d8 00000009 0001f3e4     l...............
   1f3f0:	0001f358 00000016 00000045 00000009     X.......E.......
   1f400:	0001f358 00000016 0000006c 0000001b     X.......l.......

0001f410 <str.0>:
   1f410:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f420:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f430:	6d6f5377 6e6f4e65 00000065 0000f5a3     wSomeNone.......
   1f440:	00000004 00000004 000100b7 77617264     ............draw
   1f450:	6f6c6220 20736b63 6c696166 74737572      blocks failrust
   1f460:	6569702f 6d652d74 64646562 702f6465     /piet-embedded/p
   1f470:	2d746569 65626d65 64656464 6172672d     iet-embedded-gra
   1f480:	63696870 72732f73 69642f63 616c7073     phics/src/displa
   1f490:	73722e79 0001f45c 00000038 00000080     y.rs\...8.......
   1f4a0:	00000005 00000060 0001f4a4 6576656e     ....`.......neve
   1f4b0:	73757272 69702f74 652d7465 6465626d     rrust/piet-embed
   1f4c0:	2f646564 74656970 626d652d 65646465     ded/piet-embedde
   1f4d0:	72672d64 69687061 732f7363 622f6372     d-graphics/src/b
   1f4e0:	68637461 0073722e 0001f4b1 00000036     atch.rs.....6...
   1f4f0:	000000be 00000019 0001f4b1 00000036     ............6...
   1f500:	000000c3 0000001d 00000000 00000000     ................

0001f510 <str.0>:
   1f510:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f520:	20687469 7265766f 776f6c66 0001f4b1     ith overflow....
   1f530:	00000036 000000d5 00000015 0001f4b1     6...............
   1f540:	00000036 00000104 00000019 0001f4b1     6...............
   1f550:	00000036 00000109 0000001d 0001f4b1     6...............
   1f560:	00000036 0000011d 00000015 20697073     6...........spi 
   1f570:	73756c66 61662068 552f6c69 73726573     flush fail/Users
   1f580:	70754c2f 502f7970 54656e69 2f656d69     /Luppy/PineTime/
   1f590:	656e6970 656d6974 7375722d 796d2d74     pinetime-rust-my
   1f5a0:	7477656e 7375722f 74732f74 35333737     newt/rust/st7735
   1f5b0:	64636c2d 7461622d 722d6863 72732f73     -lcd-batch-rs/sr
   1f5c0:	696c2f63 73722e62 0001f57a 0000004e     c/lib.rsz...N...
   1f5d0:	000000fe 00000009 20697073 61746164     ........spi data
   1f5e0:	69616620 0000006c 0001f57a 0000004e      fail...z...N...
   1f5f0:	000000b0 00000009 0001f57a 0000004e     ........z...N...
   1f600:	000000f3 00000009 0001f57a 0000004e     ........z...N...
   1f610:	00000098 0000000d 20697073 20646d63     ........spi cmd 
   1f620:	6c696166 0001f57a 0000004e 00000097     failz...N.......
   1f630:	00000009 0001f57a 0000004e 0000009d     ....z...N.......
   1f640:	00000011 0001f57a 0000004e 0000009c     ....z...N.......
   1f650:	0000000d 0001f57a 0000004e 000000c5     ....z...N.......
   1f660:	0000002d 0001f57a 0000004e 000000c9     -...z...N.......
   1f670:	0000002d 0001f57a 0000004e 000000d8     -...z...N.......
   1f680:	00000019 00000000 00000000 00000000     ................

0001f690 <str.0>:
   1f690:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f6a0:	20687469 7265766f 776f6c66 0001f57a     ith overflowz...
   1f6b0:	0000004e 000000d9 00000019 0001f57a     N...........z...
   1f6c0:	0000004e 000000db 00000019 0001f57a     N...........z...
   1f6d0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f6e0:	74696e69 69616620 0000006c 0001f57a     init fail...z...
   1f6f0:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f700:	0001f6fc 012d2c01 00002d2c 0001f704     .....,-.,-......
   1f710:	00000007 0001f710 008402a2 0001f718     ................
   1f720:	000000c5 0001f720 0000000a 0001f728     .... .......(...
   1f730:	00002a8a 0001f730 0000ee8a 0001f738     .*..0.......8...
   1f740:	0000000e 0001f740 00000000 0001f748     ....@.......H...
   1f750:	00000008 0001f750 00000005 0001f758     ....P.......X...
   1f760:	0001f57a 0000004e 00000088 00000009     z...N...........
   1f770:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f780:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f790:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f7a0:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1f7b0:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1f7c0:	322e352e 6372732f 6972702f 6974696d     .5.2/src/primiti
   1f7d0:	2f736576 74636572 6c676e61 73722e65     ves/rectangle.rs
   1f7e0:	0001f770 00000070 000000c0 00000032     p...p.......2...

0001f7f0 <str.0>:
   1f7f0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f800:	20687469 7265766f 776f6c66 0001f770     ith overflowp...
   1f810:	00000070 000000c2 00000031 00000000     p.......1.......

0001f820 <str.1>:
   1f820:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f830:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f840:	00000077 0001f770 00000070 000000c4     w...p...p.......
   1f850:	00000031 0001f770 00000070 000000c6     1...p...p.......
   1f860:	00000031 65707845 64657463 72747320     1...Expected str
   1f870:	00656b6f 0001f770 00000070 000000cc     oke.p...p.......
   1f880:	00000019 0001f770 00000070 000000d5     ....p...p.......
   1f890:	0000000d 0001f770 00000070 000000da     ....p...p.......
   1f8a0:	00000011 00012ff3 00000004 00000004     ...../..........
   1f8b0:	0001335d 00697073 0001d498 65737361     ]3..spi.....asse
   1f8c0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f8d0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f8e0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f8f0:	203a7468 203a6060 0001f8bc 0000002d     ht: ``: ....-...
   1f900:	0001f8e9 0000000c 0001f8f5 00000003     ................
   1f910:	0001f8f8 20697073 666e6f63 66206769     ....spi config f
   1f920:	006c6961 0001f914 0000000f 0001f924     ail.........$...
   1f930:	0001f930 74737572 6e796d2f 2f747765     0...rust/mynewt/
   1f940:	2f637273 2e697073 00007372 0001f934     src/spi.rs..4...
   1f950:	00000016 00000050 0000004a 20697073     ....P...J...spi 
   1f960:	66206263 006c6961 0001f95c 0000000b     cb fail.\.......
   1f970:	0001f968 0001f934 00000016 00000057     h...4.......W...
   1f980:	00000005 20697073 62616e65 6620656c     ....spi enable f
   1f990:	006c6961 0001f984 0000000f 0001f994     ail.............
   1f9a0:	0001f934 00000016 0000005a 00000037     4.......Z...7...
   1f9b0:	6f697067 69616620 0000006c 0001f9b0     gpio fail.......
   1f9c0:	00000009 0001f9bc 0001f934 00000016     ........4.......
   1f9d0:	0000005b 00000040 0001f934 00000016     [...@...4.......
   1f9e0:	0000005c 00000040 6575716d 66206575     \...@...mqueue f
   1f9f0:	006c6961 0001f9e8 0000000b 0001f9f4     ail.............
   1fa00:	0001f934 00000016 00000065 00000005     4.......e.......
   1fa10:	206d6573 6c696166 20697073 6c696166     sem failspi fail
   1fa20:	0001fa10 00000008 0001fa20 0001f934     ........ ...4...
   1fa30:	00000016 00000069 00000005 0001f934     ....i.......4...
   1fa40:	00000016 0000006d 00000005 00000000     ....m...........
   1fa50:	0001f8b4 00000004 0001fa4c 6e657665     ........L...even
   1fa60:	66207174 006c6961 0001f934 00000016     tq fail.4.......
   1fa70:	00000081 00000009 65737361 6f697472     ........assertio
   1fa80:	6166206e 64656c69 6e75203a 65666173     n failed: unsafe
   1fa90:	50207b20 49444e45 435f474e 6c2e444d      { PENDING_CMD.l
   1faa0:	29286e65 3e207d20 00003020 0001f934     en() } > 0..4...
   1fab0:	00000016 00000097 00000005 0001f934     ............4...
   1fac0:	00000016 000000a6 00000012 0001f934     ............4...
   1fad0:	00000016 000000bf 00000035 00000000     ........5.......

0001fae0 <str.0>:
   1fae0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1faf0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1fb00:	00000077 0001f934 00000016 000000c2     w...4...........
   1fb10:	0000000f 00000000 00000000 00000000     ................

0001fb20 <str.1>:
   1fb20:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fb30:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1fb40:	20697073 6c696166 0001f934 00000016     spi fail4.......
   1fb50:	000000ff 00000011 0001f934 00000016     ........4.......
   1fb60:	0000010f 00000015 00000000 00000000     ................

0001fb70 <str.2>:
   1fb70:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fb80:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fb90:	00000077 0001f934 00000016 0000010d     w...4...........
   1fba0:	00000011 0001f934 00000016 00000115     ....4...........
   1fbb0:	00000011 0001f934 00000016 00000122     ....4......."...
   1fbc0:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1fbd0:	0001f934 00000016 00000129 00000005     4.......).......
   1fbe0:	0001fa18 00000008 0001fbe0 0001f934     ............4...
   1fbf0:	00000016 0000013f 00000009 0001f934     ....?.......4...
   1fc00:	00000016 00000148 00000009 0001f934     ....H.......4...
   1fc10:	00000016 0000014c 00000030 0001f934     ....L...0...4...
   1fc20:	00000016 00000158 00000005 0001f934     ....X.......4...
   1fc30:	00000016 0000015d 00000017 6c6c6163     ....].......call
   1fc40:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1fc50:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1fc60:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fc70:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fc80:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fc90:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fca0:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fcb0:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fcc0:	0001fc67 00000056 000001e8 0000000d     g...V...........

0001fcd0 <str.0>:
   1fcd0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fce0:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1fcf0:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1fd00:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1fd10:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1fd20:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1fd30:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1fd40:	73722e63 00000000 00000000 00000000     c.rs............

0001fd50 <str.0>:
   1fd50:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fd60:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fd70:	00000077 0001fcee 00000056 00000066     w.......V...f...
   1fd80:	00000009 00000000 00000000 00000000     ................

0001fd90 <str.1>:
   1fd90:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fda0:	20687469 7265766f 776f6c66 0001fcee     ith overflow....
   1fdb0:	00000056 0000003e 0000000c 0001fcee     V...>...........
   1fdc0:	00000056 0000002d 00000009 0001fcee     V...-...........
   1fdd0:	00000056 0000007e 00000011 00011e5d     V...~.......]...
   1fde0:	00000000 00000001 00015215 00011da1     .........R......
   1fdf0:	00000002 00000002 00016725 6c6c6163     ........%g..call
   1fe00:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1fe10:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1fe20:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fe30:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fe40:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fe50:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fe60:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fe70:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fe80:	0001fe27 00000056 00000066 00000009     '...V...f.......

0001fe90 <str.0>:
   1fe90:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fea0:	20687469 7265766f 776f6c66 0001fe27     ith overflow'...
   1feb0:	00000056 0000003e 0000000c 0001fe27     V...>.......'...
   1fec0:	00000056 0000007e 00000011 00000000     V...~...........

0001fed0 <str.1>:
   1fed0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fee0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fef0:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1ff00:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1ff10:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1ff20:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1ff30:	20736920 00000000 00000020 00000008      is .... .......
   1ff40:	00000002 00000000 00000000 00000002     ................
   1ff50:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1ff60:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1ff70:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1ff80:	00000002 00000000 00000002 00000000     ................
   1ff90:	00000003 00000000 00000020 00000008     ........ .......
   1ffa0:	00000002 00000000 00000001 00000001     ................
   1ffb0:	00000003 002e2e60 0001ffb5 00000002     ....`...........
   1ffc0:	65726c61 20796461 72726f62 6465776f     already borrowed
   1ffd0:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1ffe0:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1fff0:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

00020000 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   20000:	00010201 00000000 00000000 00000000     ................
   20010:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   20020:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   20030:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   20040:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   20050:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   20060:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   20070:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   20080:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   20090:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   200a0:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   200b0:	656e6f4e 61762060 0065756c 0001fef4     None` value.....
   200c0:	00000000 0000203a 0001fef4 00000000     ....: ..........
   200d0:	000200c4 00000002 00016979 00000000     ........yi......
   200e0:	00000001 000169c9 74756220 65687420     .....i.. but the
   200f0:	646e6920 69207865 00002073 0001ff14      index is ......
   20100:	00000020 000200e8 00000012 00016979      ...........yi..
   20110:	0000000c 00000004 00016c13 00016f69     .........l..io..
   20120:	00017019 202c0a2c 2c280a28 30783029     .p..,., (.(,)0x0
   20130:	30313030 30333032 30353034 30373036     0010203040506070
   20140:	31393038 31313130 31333132 31353134     8091011121314151
   20150:	31373136 32393138 32313230 32333232     6171819202122232
   20160:	32353234 32373236 33393238 33313330     4252627282930313
   20170:	33333332 33353334 33373336 34393338     2333435363738394
   20180:	34313430 34333432 34353434 34373436     0414243444546474
   20190:	35393438 35313530 35333532 35353534     8495051525354555
   201a0:	35373536 36393538 36313630 36333632     6575859606162636
   201b0:	36353634 36373636 37393638 37313730     4656667686970717
   201c0:	37333732 37353734 37373736 38393738     2737475767778798
   201d0:	38313830 38333832 38353834 38373836     0818283848586878
   201e0:	39393838 39313930 39333932 39353934     8899091929394959
   201f0:	39373936 00393938 00016979 00000004     6979899.yi......
   20200:	00000004 0001703d 00017043 00017049     ....=p..Cp..Ip..
   20210:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   20220:	2e646f6d 00007372 00020210 00000016     mod.rs..........
   20230:	0000043b 00000011 00020210 00000016     ;...............
   20240:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   20250:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20260:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20270:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20280:	6e656c20 20687467 00020260 00000006      length `.......
   20290:	00020266 00000022 00020248 00000018     f..."...H.......
   202a0:	00000a72 00000005 63696c73 6e692065     r.......slice in
   202b0:	20786564 72617473 61207374 62202074     dex starts at  b
   202c0:	65207475 2073646e 00207461 000202a8     ut ends at .....
   202d0:	00000016 000202be 0000000d 00020248     ............H...
   202e0:	00000018 00000a78 00000005 696e6966     ....x.......fini
   202f0:	64656873 73796168 6b636174 79622820     shedhaystack (by
   20300:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   20310:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   20320:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   20330:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   20340:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   20350:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20360:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20370:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20380:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   20390:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   203a0:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   203b0:	20657479 65646e69 69202078 756f2073     yte index  is ou
   203c0:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   203d0:	000203af 0000000b 000203ba 00000016     ................
   203e0:	0001ffb4 00000001 00020394 00000016     ................
   203f0:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   20400:	646e6520 00002820 000203f8 0000000e      end (..........
   20410:	00020024 00000004 0001ffd0 00000010     $...............
   20420:	0001ffb4 00000001 00020394 00000016     ................
   20430:	00000857 00000005 00020394 00000016     W...............
   20440:	00000868 0000000e 20736920 20746f6e     h....... is not 
   20450:	68632061 62207261 646e756f 3b797261     a char boundary;
   20460:	20746920 69207369 6469736e 20292065      it is inside ) 
   20470:	6020666f 000203af 0000000b 00020448     of `........H...
   20480:	00000026 000202fc 00000008 0002046e     &...........n...
   20490:	00000006 0001ffb4 00000001 00020394     ................
   204a0:	00000016 0000086a 00000005 0001ff54     ....j.......T...
   204b0:	00000020 0000001a 00000028 05030100      .......(.......
   204c0:	03060605 08080607 1c0a1109 140c190b     ................
   204d0:	0d0e120d 0310040f 09131212 05170116     ................
   204e0:	03190218 021c071a 161f011d 042b0320     ............ .+.
   204f0:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   20500:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   20510:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   20520:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   20530:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   20540:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   20550:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   20560:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   20570:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   20580:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   20590:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   205a0:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   205b0:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   205c0:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   205d0:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   205e0:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   205f0:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   20600:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   20610:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   20620:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   20630:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   20640:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   20650:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   20660:	04020855 03090a1c 03070308 03030302     U...............
   20670:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   20680:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   20690:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   206a0:	03b08205 fd82061a 15075903 1409170b     .........Y......
   206b0:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   206c0:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   206d0:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   206e0:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   206f0:	048c800f 0b199782 05948815 073b052f     ............/.;.
   20700:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   20710:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   20720:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   20730:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   20740:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   20750:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   20760:	80044c06 be80048d 0f031b03 0106000d     .L..............
   20770:	04010301 09080802 0b050a02 11011002     ................
   20780:	13051204 15021411 19021702 1d051c04     ................
   20790:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   207a0:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   207b0:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   207c0:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   207d0:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   207e0:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   207f0:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   20800:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   20810:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   20820:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   20830:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   20840:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   20850:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   20860:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   20870:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   20880:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   20890:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   208a0:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   208b0:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   208c0:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   208d0:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   208e0:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   208f0:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   20900:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   20910:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   20920:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   20930:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   20940:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   20950:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   20960:	81080411 6b04898c 09030d05 60931007     .......k.......`
   20970:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   20980:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   20990:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   209a0:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   209b0:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   209c0:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   209d0:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   209e0:	31037752 0ca68003 05030414 85060d03     Rw.1............
   209f0:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   20a00:	65646f63 646f6d2f 0073722e 000209f1     code/mod.rs.....
   20a10:	0000001a 00000038 0000000f 000209f1     ....8...........
   20a20:	0000001a 00000039 00000010              ....9.......

00020a2c <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   20a2c:	1b150f04 17120319 0e000011 00000016     ................
	...
   20a54:	00130600 00000000 00000000 00000000     ................
   20a64:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   20a84:	01050000 00000000 00000000 00000000     ................
   20a94:	00000000 10000000 00000000 0009000b     ................
   20aa4:	                                         ...

00020aa7 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   20ac3:	00120f00 00000000 00000000 00000000     ................
   20ad3:	0000001f 00000000 00000000 00000000     ................
   20ae3:	1d664649 00000000 00000000 00000000     IFf.............
   20af3:	00003e8a 00000000 00000000 4b000000     .>.............K
   20b03:	00000053 00000000 00000000 42236700     S............g#B
	...
   20b1f:	0000003d 00230000 00000000 00000000     =.....#.........
   20b2f:	2d000075 00000000 00000000 00000000     u..-............
   20b3f:	003c4e82 00000000 00000000 63000000     .N<............c
   20b4f:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   20b5f:	00000300 00000000 00000000 0000002f     ............/...
   20b6f:	00000000 00001000 13000000 00000800     ................
	...
   20b87:	43000000 89007200 00000000 00000000     ...C.r..........
   20b97:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   20ba7:	00210000 00000000 00000000 00000000     ..!.............
   20bb7:	4100000a 00000000 00000000 00000000     ...A............
   20bc7:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   20bd7:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   20be7:	00000031 00000053 3a000000 00000000     1...S......:....
   20bf7:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   20c07:	0017003b 00000000 00000000 00000000     ;...............
   20c17:	57000055 83000000 00000000 00000000     U..W............
   20c27:	00000059 26000000 00161b6e 00000000     Y......&n.......
   20c37:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   20c47:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   20c57:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   20c67:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   20c77:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   20c87:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00020c98 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   20ca0:	00000001 00000000 0000000d 00000000     ................
   20cb0:	0000001c 00000000 00000040 00000000     ........@.......
   20cc0:	000000b6 00000000 000000bf 00000000     ................
   20cd0:	000003f8 00000000 000007f0 00000000     ................
   20ce0:	000007ff 00000000 00001000 00000000     ................
   20cf0:	00001e00 00000000 00003800 00000000     .........8......
   20d00:	00003f00 00000000 00007f80 00000000     .?..............
   20d10:	00008000 00000000 0001ffc0 00000000     ................
   20d20:	0003ff80 00000000 00078000 00000000     ................
   20d30:	007f0000 00000000 00802001 00000000     ......... ......
   20d40:	00a30000 00000000 037ffc00 00000000     ................
   20d50:	06000000 00000000 07ff0000 00000000     ................
   20d60:	09800000 00000000 0e000000 00000000     ................
   20d70:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   20d80:	200ffe40 00000000 30000001 00000000     @.. .......0....
   20d90:	40000000 00000000 4000005c 00000000     ...@....\..@....
   20da0:	60000000 00000000 805c8400 00000000     ...`......\.....
   20db0:	c0000000 00000000 e0000000 00000000     ................
   20dc0:	00000000 00000001 0cf00000 00000001     ................
   20dd0:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   20de0:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   20df0:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   20e00:	00000000 00000060 00000844 00000060     ....`...D...`...
   20e10:	00000000 000000f0 00000060 00000200     ........`.......
   20e20:	f9ffff7f 000007db 80000000 000007f8     ................
   20e30:	e0000000 00000fbc 00000000 00002120     ............ !..
   20e40:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   20e50:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   20e60:	00000000 00003fc0 00000000 0000f000     .....?..........
   20e70:	00000000 0000fc00 f8000010 0000fffe     ................
   20e80:	0000ffff 0000ffff ffffffff 0000ffff     ................
   20e90:	fffff800 00010000 00000000 0001ffc0     ................
   20ea0:	ffff0000 0001ffff 00000000 00030000     ................
   20eb0:	00000000 00038000 00000000 0003a340     ............@...
   20ec0:	00000000 00080000 000c0000 000c0000     ................
   20ed0:	00000004 000ff800 00000000 00180000     ................
   20ee0:	001c0000 001c0000 c3000000 001e0001     ................
   20ef0:	00000000 001f0000 00800001 001f1fc0     ................
   20f00:	00000007 001fef80 ffffffff 00201fff     .............. .
   20f10:	00023986 00230000 00000002 00403000     .9....#......0@.
   20f20:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20f30:	00000000 007f0000 00000000 00bf2800     .............(..
   20f40:	00000000 00cff000 03000000 02a00000     ................
   20f50:	fff70000 031021fd 00000003 06780000     .....!........x.
   20f60:	00000000 06ff8000 00000000 07c00000     ................
   20f70:	00000000 07f20000 00000000 0e040187     ................
   20f80:	00000006 10000000 00001008 10000000     ................
   20f90:	00000007 14000000 0000000f 17f00000     ................
   20fa0:	00000000 1ff20000 feffe0df 1fffffff     ................
   20fb0:	00000000 20000000 00000000 200ff800     ....... ....... 
   20fc0:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20fd0:	00000000 3ff78000 00000004 40000000     .......?.......@
   20fe0:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20ff0:	00000002 50000000 00000003 58000000     .......P.......X
   21000:	00000000 66fde000 000007fe 79f80000     .......f.......y
   21010:	00000003 7fc00000 00000000 7ffe0000     ................
   21020:	00000000 7fff0000 00000000 80000000     ................
   21030:	0000007f 80000000 00000030 8003ffff     ........0.......
   21040:	0000f06e 87000000 00000002 90000000     n...............
   21050:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   21060:	00000000 a7f80000 00000000 b03c8000     ..............<.
   21070:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   21080:	fffe0000 bfffffff 00000011 c0000000     ................
   21090:	00000000 c19d0000 00000002 d0000000     ................
   210a0:	00000000 f807c3a0 ffffffff f87fffff     ................
   210b0:	ffffffff fbffffff 000021be fc00000c     .........!......
   210c0:	00000000 ff000000 00000002 ff000000     ................
   210d0:	00020000 ffff0000 fff80000 fffffffb     ................
   210e0:	00000000 ffffffff ffffffff ffffffff     ................
   210f0:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00021100 <nrf52_hal_i2cs>:
   21100:	00000000 20000108                       ....... 

00021108 <nrf52_hal_spis>:
   21108:	2000e5c0 00000000 00000000 65737341     ... ........Asse
   21118:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   21128:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   21138:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   21148:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   21158:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   21168:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   21178:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   21188:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   21198:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   211a8:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   211b8:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   211c8:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   211d8:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   211e8:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   211f8:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   21208:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   21218:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   21228:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   21238:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   21248:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   21258:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21268:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21278:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21288:	00000000 656c6469 00000000 7379736d     ....idle....msys
   21298:	0000315f                                _1..

0002129c <MemFile_methods>:
   2129c:	0001b849 00000000                       I.......

000212a4 <stdout>:
   212a4:	20000124                                $.. 

000212a8 <nrf52k_flash_dev>:
   212a8:	000212c0 00000000 00080000 00000080     ................
   212b8:	00000001 000000ff                       ........

000212c0 <nrf52k_flash_funcs>:
   212c0:	0001bab5 0001b9e5 0001b96d 0001b9c5     ........m.......
   212d0:	00000000 0001b9c1 00000000              ............

000212dc <nrf52_hal_timers>:
   212dc:	2000e6d0 00000000 00000000 00000000     ... ............
	...

000212f4 <hal_i2c1_cfg>:
   212f4:	00000007 00000006 00000064              ........d...

00021300 <os_bsp_spi0m_cfg>:
   21300:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   21310:	7476655f 00000073                       _evts...

00021318 <COLLECTOR_NODE_HW_ID>:
   21318:	066aff57 50547878 67242949              W.j.xxTPI)$g

00021324 <SENSOR_NODE_HW_IDS>:
   21324:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   21334:	08070605 020b0a09 04030201 08070605     ................
   21344:	030b0a09 04030201 08070605 040b0a09     ................
   21354:	04030201 08070605 050b0a09 77687325     ............%shw
   21364:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21374:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21384:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   21394:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   213a4:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   213b4:	0a732520 00000000 00000000               %s.........

000213c0 <sensor_node_addresses>:
   213c0:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   213d0:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   213e0:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   213f0:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   21400:	00000a73                                s...

00021404 <g_temp_stub_sensor_driver>:
   21404:	0001c8f1 0001c7f9 00000000 00000000     ................
	...
   2142c:	20425453 64616572 6d657420 65732070     STB read temp se
   2143c:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   2144c:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0002145c <sysflash_map_dflt>:
	...
   21464:	00004000 00000001 00008000 00073c00     .@...........<..
   21474:	00000002 0007bc00 00000400 00000003     ................
   21484:	0007c000 00001000 00000010 00004000     .............@..
   21494:	00004000 00000011 0007d000 00003000     .@...........0..
   214a4:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   214b4:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 103612	    108	  59192	 162912	  27c60	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
