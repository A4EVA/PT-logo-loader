
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x0001f62c vaddr 0x0001f62c paddr 0x0001f62c align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0001f644 memsz 0x0001f644 flags rwx
    LOAD off    0x000200d8 vaddr 0x200000d8 paddr 0x0001f644 align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00020148 vaddr 0x20000148 paddr 0x0001f6b0 align 2**16
         filesz 0x00000000 memsz 0x0000ce40 flags rw-
    LOAD off    0x00030000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              0001760c  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  0001f62c  0001f62c  00020144  2**0  CONTENTS
  3 .ARM.exidx         00000018  0001f62c  0001f62c  0001f62c  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00030000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00020144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0001f644  000200d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00020144  2**0  CONTENTS
  8 .bss               0000ce40  20000148  0001f6b0  00020148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000cf88  2000cf88  00020148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000202f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00020333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000203b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004b8d9  00000000  00000000  000203b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        0008a297  00000000  00000000  0006bc8f  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000e5a6  00000000  00000000  000f5f26  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005fc0  00000000  00000000  001044d0  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005def5  00000000  00000000  0010a490  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         000134f8  00000000  00000000  00168385  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a418  00000000  00000000  0017b87d  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000fa24  00000000  00000000  00195c98  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000053  00000000  00000000  001a56bc  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    000153de  00000000  00000000  001a570f  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    0002ef17  00000000  00000000  001baaed  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
0001f62c l    d  .ARM.extab	00000000 .ARM.extab
0001f62c l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000cf88 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 3592ao74dt466zwu
00000d03 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00030ad4 l       .debug_str	00000000 
00056720 l       .debug_str	00000000 
00056e87 l       .debug_str	00000000 
00056154 l       .debug_str	00000000 
00000e05 l       .debug_str	00000000 
00030b01 l       .debug_str	00000000 
00030af3 l       .debug_str	00000000 
00000e17 l       .debug_str	00000000 
00000e09 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00000b7d l       .debug_str	00000000 
00000b86 l       .debug_str	00000000 
00000b8a l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
00058202 l       .debug_str	00000000 
00000bb9 l       .debug_str	00000000 
00000bcb l       .debug_str	00000000 
00003b28 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00000bd9 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00030ac0 l       .debug_str	00000000 
0005be3a l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cz1tg82iqprprj5
00001112 l       .debug_str	00000000 
00001264 l       .debug_str	00000000 
000012a4 l       .debug_str	00000000 
000012eb l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00000f01 l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001100 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
00000acd l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
00001212 l       .debug_str	00000000 
000011f9 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
0000121c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 40zocxwjz4ckzrhd
000012f4 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00001324 l       .debug_str	00000000 
00001337 l       .debug_str	00000000 
00001367 l       .debug_str	00000000 
00001392 l       .debug_str	00000000 
0000139b l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5k460cii92qewjl
000012ef l       .debug_str	00000000 
0000142d l       .debug_str	00000000 
00001469 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00001472 l       .debug_str	00000000 
0001fa1f l       .debug_str	00000000 
0000149d l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00030ac0 l       .debug_str	00000000 
000014fb l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000bd9 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000fd6b l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000013c5 l       .debug_str	00000000 
0000140c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000248f5 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000141f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c7c l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00001655 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
0000181d l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005c539 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0005d50d l       .debug_str	00000000 
00001528 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0001b14c l       .debug_str	00000000 
00001530 l       .debug_str	00000000 
000017d6 l       .debug_str	00000000 
00001538 l       .debug_str	00000000 
000015bd l       .debug_str	00000000 
000015d3 l       .debug_str	00000000 
00059382 l       .debug_str	00000000 
000015fa l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
00001622 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
0000165a l       .debug_str	00000000 
00001685 l       .debug_str	00000000 
0000168c l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000016b4 l       .debug_str	00000000 
0005d8ce l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000016e1 l       .debug_str	00000000 
0000170d l       .debug_str	00000000 
00001715 l       .debug_str	00000000 
00001745 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000177d l       .debug_str	00000000 
00001786 l       .debug_str	00000000 
000017bc l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000017cd l       .debug_str	00000000 
00001654 l       .debug_str	00000000 
000562a1 l       .debug_str	00000000 
000017db l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
000017f3 l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000182f l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
000018b4 l       .debug_str	00000000 
00001921 l       .debug_str	00000000 
00001993 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000019f1 l       .debug_str	00000000 
0004b07e l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d0c l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00001a0e l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000313d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00003656 l       .debug_str	00000000 
00003696 l       .debug_str	00000000 
000036e4 l       .debug_str	00000000 
00003724 l       .debug_str	00000000 
0000374b l       .debug_str	00000000 
0000378b l       .debug_str	00000000 
00003799 l       .debug_str	00000000 
00003808 l       .debug_str	00000000 
00003833 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
000038b6 l       .debug_str	00000000 
00003926 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00003952 l       .debug_str	00000000 
000012eb l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000358c l       .debug_str	00000000 
00001a47 l       .debug_str	00000000 
00001d95 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00001a50 l       .debug_str	00000000 
00001a5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00001a64 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00001b2b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001bc1 l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
00001c56 l       .debug_str	00000000 
00001c66 l       .debug_str	00000000 
00001c6e l       .debug_str	00000000 
00001cc3 l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d35 l       .debug_str	00000000 
00001d41 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d56 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
00001d5e l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00001d66 l       .debug_str	00000000 
00001d94 l       .debug_str	00000000 
00001d7b l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da2 l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001db4 l       .debug_str	00000000 
0004bbfd l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001dd3 l       .debug_str	00000000 
00001ddc l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0005c603 l       .debug_str	00000000 
00001ded l       .debug_str	00000000 
00001df9 l       .debug_str	00000000 
00001e04 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
0000a4aa l       .debug_str	00000000 
0000a40a l       .debug_str	00000000 
00001e14 l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00002014 l       .debug_str	00000000 
00002022 l       .debug_str	00000000 
0000202d l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000205a l       .debug_str	00000000 
00002037 l       .debug_str	00000000 
00002065 l       .debug_str	00000000 
000020e0 l       .debug_str	00000000 
00002163 l       .debug_str	00000000 
00002171 l       .debug_str	00000000 
000021d0 l       .debug_str	00000000 
00002237 l       .debug_str	00000000 
0000224d l       .debug_str	00000000 
0000225d l       .debug_str	00000000 
0005ae39 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000226c l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
00002272 l       .debug_str	00000000 
00002278 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
0000228a l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00002292 l       .debug_str	00000000 
0000229a l       .debug_str	00000000 
000022a0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
000022f6 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005a9c6 l       .debug_str	00000000 
0000237e l       .debug_str	00000000 
00002384 l       .debug_str	00000000 
0000238a l       .debug_str	00000000 
000023b3 l       .debug_str	00000000 
00002390 l       .debug_str	00000000 
000023c5 l       .debug_str	00000000 
00002407 l       .debug_str	00000000 
0005a8af l       .debug_str	00000000 
00002451 l       .debug_str	00000000 
00002457 l       .debug_str	00000000 
0000245d l       .debug_str	00000000 
00002486 l       .debug_str	00000000 
00002463 l       .debug_str	00000000 
00002498 l       .debug_str	00000000 
000024da l       .debug_str	00000000 
00059d73 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0000252a l       .debug_str	00000000 
00002530 l       .debug_str	00000000 
00002536 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000253c l       .debug_str	00000000 
00002570 l       .debug_str	00000000 
000025b1 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
0005abfd l       .debug_str	00000000 
00002604 l       .debug_str	00000000 
0000260a l       .debug_str	00000000 
00002610 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00002616 l       .debug_str	00000000 
0000264a l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
00059e2b l       .debug_str	00000000 
000026d4 l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
000026dd l       .debug_str	00000000 
00002711 l       .debug_str	00000000 
00002752 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
0005add1 l       .debug_str	00000000 
000027a0 l       .debug_str	00000000 
000027a9 l       .debug_str	00000000 
000027b0 l       .debug_str	00000000 
000027db l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027ed l       .debug_str	00000000 
0000282f l       .debug_str	00000000 
0005aa99 l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
0000287f l       .debug_str	00000000 
00002885 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002891 l       .debug_str	00000000 
00002899 l       .debug_str	00000000 
000028a7 l       .debug_str	00000000 
000028b6 l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
000028d2 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
000028e8 l       .debug_str	00000000 
000028ef l       .debug_str	00000000 
00002935 l       .debug_str	00000000 
00002912 l       .debug_str	00000000 
00002947 l       .debug_str	00000000 
00002989 l       .debug_str	00000000 
00059f2e l       .debug_str	00000000 
000029d3 l       .debug_str	00000000 
00002a00 l       .debug_str	00000000 
000029dd l       .debug_str	00000000 
00002a12 l       .debug_str	00000000 
00002a54 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002aa3 l       .debug_str	00000000 
00002ad0 l       .debug_str	00000000 
00002aad l       .debug_str	00000000 
00002ae2 l       .debug_str	00000000 
00002b24 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00002bed l       .debug_str	00000000 
00002b82 l       .debug_str	00000000 
00002b92 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002ba6 l       .debug_str	00000000 
00002bb5 l       .debug_str	00000000 
00002bca l       .debug_str	00000000 
00002bfb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d48 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d95 l       .debug_str	00000000 
00002d72 l       .debug_str	00000000 
00002da8 l       .debug_str	00000000 
00002e2b l       .debug_str	00000000 
00002eb6 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002f1e l       .debug_str	00000000 
00002f72 l       .debug_str	00000000 
00002f8f l       .debug_str	00000000 
00002fa3 l       .debug_str	00000000 
00002fef l       .debug_str	00000000 
00003043 l       .debug_str	00000000 
00003059 l       .debug_str	00000000 
0000306d l       .debug_str	00000000 
000030b4 l       .debug_str	00000000 
00003103 l       .debug_str	00000000 
0000312f l       .debug_str	00000000 
0000310c l       .debug_str	00000000 
00003143 l       .debug_str	00000000 
0000314b l       .debug_str	00000000 
00003152 l       .debug_str	00000000 
00003a0b l       .debug_str	00000000 
0000315a l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
00003171 l       .debug_str	00000000 
00003a3d l       .debug_str	00000000 
0000317c l       .debug_str	00000000 
00003187 l       .debug_str	00000000 
00003198 l       .debug_str	00000000 
0000319e l       .debug_str	00000000 
000031a6 l       .debug_str	00000000 
000031ad l       .debug_str	00000000 
000031b7 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
000031c7 l       .debug_str	00000000 
000031e9 l       .debug_str	00000000 
000031f4 l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
00003208 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
0000098b l       .debug_str	00000000 
0000321c l       .debug_str	00000000 
00003227 l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00003242 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003261 l       .debug_str	00000000 
00003269 l       .debug_str	00000000 
00003270 l       .debug_str	00000000 
00003278 l       .debug_str	00000000 
000032b9 l       .debug_str	00000000 
00003296 l       .debug_str	00000000 
000032c9 l       .debug_str	00000000 
000032de l       .debug_str	00000000 
000032e7 l       .debug_str	00000000 
00003344 l       .debug_str	00000000 
000033a9 l       .debug_str	00000000 
000033b3 l       .debug_str	00000000 
000033c3 l       .debug_str	00000000 
000033d8 l       .debug_str	00000000 
000033e0 l       .debug_str	00000000 
00003444 l       .debug_str	00000000 
000034b0 l       .debug_str	00000000 
000034b7 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
00003500 l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
00003510 l       .debug_str	00000000 
00003525 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
0000354d l       .debug_str	00000000 
00003554 l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
00003593 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000360a l       .debug_str	00000000 
00003649 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
00004635 l       .debug_str	00000000 
00004662 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00004681 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
0000469c l       .debug_str	00000000 
000046bd l       .debug_str	00000000 
000046d3 l       .debug_str	00000000 
0000473b l       .debug_str	00000000 
000047b3 l       .debug_str	00000000 
000047e0 l       .debug_str	00000000 
000047f8 l       .debug_str	00000000 
00004862 l       .debug_str	00000000 
0000486a l       .debug_str	00000000 
00004870 l       .debug_str	00000000 
0000487a l       .debug_str	00000000 
000048f4 l       .debug_str	00000000 
00004960 l       .debug_str	00000000 
000049d9 l       .debug_str	00000000 
00004a52 l       .debug_str	00000000 
00004abd l       .debug_str	00000000 
00004b2c l       .debug_str	00000000 
00004b33 l       .debug_str	00000000 
00004b3e l       .debug_str	00000000 
00004b66 l       .debug_str	00000000 
00004bdb l       .debug_str	00000000 
00004c58 l       .debug_str	00000000 
00004b57 l       .debug_str	00000000 
00004c64 l       .debug_str	00000000 
00001db4 l       .debug_str	00000000 
00004cdb l       .debug_str	00000000 
00001da2 l       .debug_str	00000000 
0004bbfd l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001dd3 l       .debug_str	00000000 
00001ddc l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
00004d44 l       .debug_str	00000000 
00004dc2 l       .debug_str	00000000 
00004e32 l       .debug_str	00000000 
00004eac l       .debug_str	00000000 
00004ec6 l       .debug_str	00000000 
00004f32 l       .debug_str	00000000 
00004f3b l       .debug_str	00000000 
00004f47 l       .debug_str	00000000 
00004fbd l       .debug_str	00000000 
00005033 l       .debug_str	00000000 
000050a9 l       .debug_str	00000000 
00005111 l       .debug_str	00000000 
00000962 l       .debug_str	00000000 
00005180 l       .debug_str	00000000 
00000a49 l       .debug_str	00000000 
000051ed l       .debug_str	00000000 
00005262 l       .debug_str	00000000 
00005277 l       .debug_str	00000000 
000052de l       .debug_str	00000000 
000052e7 l       .debug_str	00000000 
000052f2 l       .debug_str	00000000 
000052f9 l       .debug_str	00000000 
0005820a l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
0000532e l       .debug_str	00000000 
00057c43 l       .debug_str	00000000 
0000121c l       .debug_str	00000000 
00005368 l       .debug_str	00000000 
00057aea l       .debug_str	00000000 
0005cf81 l       .debug_str	00000000 
0000539b l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
000053a8 l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
0005d50d l       .debug_str	00000000 
00001528 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0001b14c l       .debug_str	00000000 
00001530 l       .debug_str	00000000 
000017d6 l       .debug_str	00000000 
000017cd l       .debug_str	00000000 
000053c9 l       .debug_str	00000000 
000053ce l       .debug_str	00000000 
000053d3 l       .debug_str	00000000 
000053d8 l       .debug_str	00000000 
000053dd l       .debug_str	00000000 
000053e2 l       .debug_str	00000000 
000053ed l       .debug_str	00000000 
000053f8 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00003970 l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
000039e4 l       .debug_str	00000000 
0000314b l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
00003152 l       .debug_str	00000000 
00003a0b l       .debug_str	00000000 
000039f0 l       .debug_str	00000000 
00003a16 l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
00003171 l       .debug_str	00000000 
00003a3d l       .debug_str	00000000 
00003a22 l       .debug_str	00000000 
00003a49 l       .debug_str	00000000 
00003a54 l       .debug_str	00000000 
00003a5f l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00003b19 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00003af7 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00003afe l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00003b2d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00003b8a l       .debug_str	00000000 
00003bef l       .debug_str	00000000 
00003bf7 l       .debug_str	00000000 
00003c19 l       .debug_str	00000000 
00003c00 l       .debug_str	00000000 
00003c31 l       .debug_str	00000000 
00003c57 l       .debug_str	00000000 
00003ccf l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
00003d46 l       .debug_str	00000000 
00003daf l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000acd l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
00003e27 l       .debug_str	00000000 
00000f01 l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001100 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
00001212 l       .debug_str	00000000 
00003e91 l       .debug_str	00000000 
00003f0a l       .debug_str	00000000 
0005cf7f l       .debug_str	00000000 
000011f9 l       .debug_str	00000000 
00003f0f l       .debug_str	00000000 
00000a9e l       .debug_str	00000000 
00003f35 l       .debug_str	00000000 
00003f1c l       .debug_str	00000000 
00003f17 l       .debug_str	00000000 
00003f40 l       .debug_str	00000000 
00003f59 l       .debug_str	00000000 
00003fc4 l       .debug_str	00000000 
00000890 l       .debug_str	00000000 
00000ace l       .debug_str	00000000 
00004034 l       .debug_str	00000000 
00004044 l       .debug_str	00000000 
000040bc l       .debug_str	00000000 
0005779a l       .debug_str	00000000 
000574f4 l       .debug_str	00000000 
000040c6 l       .debug_str	00000000 
000040cd l       .debug_str	00000000 
000040f0 l       .debug_str	00000000 
000040d7 l       .debug_str	00000000 
000040d2 l       .debug_str	00000000 
000040fa l       .debug_str	00000000 
00004112 l       .debug_str	00000000 
0000417c l       .debug_str	00000000 
00001a50 l       .debug_str	00000000 
00001a5c l       .debug_str	00000000 
00001a64 l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00001b2b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001bc1 l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
00001c56 l       .debug_str	00000000 
00001c66 l       .debug_str	00000000 
00001c6e l       .debug_str	00000000 
00001cc3 l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d35 l       .debug_str	00000000 
00001d41 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d56 l       .debug_str	00000000 
00001d5e l       .debug_str	00000000 
00001d94 l       .debug_str	00000000 
00001d7b l       .debug_str	00000000 
00001d66 l       .debug_str	00000000 
000041f1 l       .debug_str	00000000 
00004258 l       .debug_str	00000000 
000042d3 l       .debug_str	00000000 
000042e3 l       .debug_str	00000000 
000042ec l       .debug_str	00000000 
000042fa l       .debug_str	00000000 
00004308 l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
00004522 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
0000432f l       .debug_str	00000000 
00004337 l       .debug_str	00000000 
00004350 l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00004361 l       .debug_str	00000000 
00004369 l       .debug_str	00000000 
0000439c l       .debug_str	00000000 
00004383 l       .debug_str	00000000 
000043a8 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
000043da l       .debug_str	00000000 
000043c1 l       .debug_str	00000000 
000043e5 l       .debug_str	00000000 
00004407 l       .debug_str	00000000 
000043ee l       .debug_str	00000000 
00004414 l       .debug_str	00000000 
0000442f l       .debug_str	00000000 
0000449c l       .debug_str	00000000 
00004519 l       .debug_str	00000000 
00004521 l       .debug_str	00000000 
000047d1 l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
0000452b l       .debug_str	00000000 
00004548 l       .debug_str	00000000 
000045b7 l       .debug_str	00000000 
0000462d l       .debug_str	00000000 
0000463e l       .debug_str	00000000 
0000464c l       .debug_str	00000000 
00004653 l       .debug_str	00000000 
0000465a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
0000709e l       .debug_str	00000000 
00008f0a l       .debug_str	00000000 
0000912c l       .debug_str	00000000 
0000936b l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
00026cd9 l       .debug_str	00000000 
000095a9 l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
00009810 l       .debug_str	00000000 
00001367 l       .debug_str	00000000 
00009840 l       .debug_str	00000000 
0000984a l       .debug_str	00000000 
000098a3 l       .debug_str	00000000 
0000139b l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009845 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000053fd l       .debug_str	00000000 
0000542d l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00005487 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
0000554d l       .debug_str	00000000 
0000559b l       .debug_str	00000000 
00005606 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0002e089 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026f06 l       .debug_str	00000000 
00005670 l       .debug_str	00000000 
000056a0 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
00005703 l       .debug_str	00000000 
00005748 l       .debug_str	00000000 
000057b6 l       .debug_str	00000000 
0000584d l       .debug_str	00000000 
0000590d l       .debug_str	00000000 
000059f6 l       .debug_str	00000000 
00005b08 l       .debug_str	00000000 
00005c43 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005f34 l       .debug_str	00000000 
000060ea l       .debug_str	00000000 
000062c9 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
000065d5 l       .debug_str	00000000 
0000664c l       .debug_str	00000000 
000066d0 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
000067e9 l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00006936 l       .debug_str	00000000 
000069fb l       .debug_str	00000000 
00006acd l       .debug_str	00000000 
00006b96 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
00006f7e l       .debug_str	00000000 
000071b5 l       .debug_str	00000000 
000072ef l       .debug_str	00000000 
00007436 l       .debug_str	00000000 
00007574 l       .debug_str	00000000 
000076d5 l       .debug_str	00000000 
00007843 l       .debug_str	00000000 
000079a8 l       .debug_str	00000000 
00007b30 l       .debug_str	00000000 
00007cc5 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00008000 l       .debug_str	00000000 
000081bc l       .debug_str	00000000 
0000836f l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
00008728 l       .debug_str	00000000 
00008902 l       .debug_str	00000000 
00008aff l       .debug_str	00000000 
00008d09 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000cea l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00009d15 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00009ad6 l       .debug_str	00000000 
00009b29 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
00009b3d l       .debug_str	00000000 
00009b83 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
00009b91 l       .debug_str	00000000 
00009bd8 l       .debug_str	00000000 
00009be1 l       .debug_str	00000000 
00009c67 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
00009c8f l       .debug_str	00000000 
00009cf1 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000017db l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
00009d03 l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
00059665 l       .debug_str	00000000 
00009f2a l       .debug_str	00000000 
0005621b l       .debug_str	00000000 
000012eb l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0005dc93 l       .debug_str	00000000 
0005dc92 l       .debug_str	00000000 
0005d50d l       .debug_str	00000000 
00001528 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0001b14c l       .debug_str	00000000 
00001530 l       .debug_str	00000000 
000017d6 l       .debug_str	00000000 
000017cd l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00009d1e l       .debug_str	00000000 
0005613e l       .debug_str	00000000 
00009d22 l       .debug_str	00000000 
00009d53 l       .debug_str	00000000 
00009d59 l       .debug_str	00000000 
00009d9a l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00009daf l       .debug_str	00000000 
00009de6 l       .debug_str	00000000 
00009df1 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
00009e23 l       .debug_str	00000000 
00056282 l       .debug_str	00000000 
00009e57 l       .debug_str	00000000 
00056271 l       .debug_str	00000000 
00009e8b l       .debug_str	00000000 
00056229 l       .debug_str	00000000 
00009ec2 l       .debug_str	00000000 
000562bb l       .debug_str	00000000 
00009efa l       .debug_str	00000000 
000560ec l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005bcd3 l       .debug_str	00000000 
00009fa5 l       .debug_str	00000000 
00009fe1 l       .debug_str	00000000 
00001685 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00009f5b l       .debug_str	00000000 
00009f9c l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000315a l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
0000a3f2 l       .debug_str	00000000 
0000a3fb l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0000a48e l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0000a49e l       .debug_str	00000000 
0000a4a9 l       .debug_str	00000000 
0000a526 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009845 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
0000a020 l       .debug_str	00000000 
0000a068 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
0000a087 l       .debug_str	00000000 
0000a0c2 l       .debug_str	00000000 
0000a0e7 l       .debug_str	00000000 
0000a10e l       .debug_str	00000000 
0000a16e l       .debug_str	00000000 
0000a177 l       .debug_str	00000000 
0000a1e2 l       .debug_str	00000000 
0000a1f2 l       .debug_str	00000000 
0000a25e l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000358c l       .debug_str	00000000 
00001a47 l       .debug_str	00000000 
00001d95 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00001a50 l       .debug_str	00000000 
00001a5c l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00001a64 l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00001b2b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001bc1 l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
00001c56 l       .debug_str	00000000 
00001c66 l       .debug_str	00000000 
00001c6e l       .debug_str	00000000 
00001cc3 l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d35 l       .debug_str	00000000 
00001d41 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d56 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
00001d5e l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00001d66 l       .debug_str	00000000 
00001d94 l       .debug_str	00000000 
00001d7b l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da2 l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001db4 l       .debug_str	00000000 
0004bbfd l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001dd3 l       .debug_str	00000000 
00001ddc l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0005c603 l       .debug_str	00000000 
00001ded l       .debug_str	00000000 
00001df9 l       .debug_str	00000000 
00001e04 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
0000a40a l       .debug_str	00000000 
00001e14 l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00002014 l       .debug_str	00000000 
00002022 l       .debug_str	00000000 
0000202d l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000205a l       .debug_str	00000000 
00002037 l       .debug_str	00000000 
00002065 l       .debug_str	00000000 
000020e0 l       .debug_str	00000000 
00002163 l       .debug_str	00000000 
00002171 l       .debug_str	00000000 
000021d0 l       .debug_str	00000000 
00002237 l       .debug_str	00000000 
0000224d l       .debug_str	00000000 
0000225d l       .debug_str	00000000 
0005ae39 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000226c l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
00002272 l       .debug_str	00000000 
00002278 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
0000228a l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00002292 l       .debug_str	00000000 
0000229a l       .debug_str	00000000 
000022a0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
000022f6 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005a9c6 l       .debug_str	00000000 
0000237e l       .debug_str	00000000 
00002384 l       .debug_str	00000000 
0000238a l       .debug_str	00000000 
000023b3 l       .debug_str	00000000 
00002390 l       .debug_str	00000000 
000023c5 l       .debug_str	00000000 
00002407 l       .debug_str	00000000 
0005a8af l       .debug_str	00000000 
00002451 l       .debug_str	00000000 
00002457 l       .debug_str	00000000 
0000245d l       .debug_str	00000000 
00002486 l       .debug_str	00000000 
00002463 l       .debug_str	00000000 
00002498 l       .debug_str	00000000 
000024da l       .debug_str	00000000 
00059d73 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0000252a l       .debug_str	00000000 
00002530 l       .debug_str	00000000 
00002536 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000253c l       .debug_str	00000000 
00002570 l       .debug_str	00000000 
000025b1 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
0005abfd l       .debug_str	00000000 
00002604 l       .debug_str	00000000 
0000260a l       .debug_str	00000000 
00002610 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00002616 l       .debug_str	00000000 
0000264a l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
00059e2b l       .debug_str	00000000 
000026d4 l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
000026dd l       .debug_str	00000000 
00002711 l       .debug_str	00000000 
00002752 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
0005add1 l       .debug_str	00000000 
000027a0 l       .debug_str	00000000 
000027a9 l       .debug_str	00000000 
000027b0 l       .debug_str	00000000 
000027db l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027ed l       .debug_str	00000000 
0000282f l       .debug_str	00000000 
0005aa99 l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
0000287f l       .debug_str	00000000 
00002885 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002891 l       .debug_str	00000000 
00002899 l       .debug_str	00000000 
000028a7 l       .debug_str	00000000 
000028b6 l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
000028d2 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
000028e8 l       .debug_str	00000000 
000028ef l       .debug_str	00000000 
00002935 l       .debug_str	00000000 
00002912 l       .debug_str	00000000 
00002947 l       .debug_str	00000000 
00002989 l       .debug_str	00000000 
00059f2e l       .debug_str	00000000 
000029d3 l       .debug_str	00000000 
00002a00 l       .debug_str	00000000 
000029dd l       .debug_str	00000000 
00002a12 l       .debug_str	00000000 
00002a54 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002aa3 l       .debug_str	00000000 
00002ad0 l       .debug_str	00000000 
00002aad l       .debug_str	00000000 
00002ae2 l       .debug_str	00000000 
00002b24 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00002bed l       .debug_str	00000000 
00002b82 l       .debug_str	00000000 
00002b92 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002ba6 l       .debug_str	00000000 
00002bb5 l       .debug_str	00000000 
00002bca l       .debug_str	00000000 
00002bfb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d48 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d95 l       .debug_str	00000000 
00002d72 l       .debug_str	00000000 
00002da8 l       .debug_str	00000000 
00002e2b l       .debug_str	00000000 
00002eb6 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002f1e l       .debug_str	00000000 
00002f72 l       .debug_str	00000000 
00002f8f l       .debug_str	00000000 
00002fa3 l       .debug_str	00000000 
00002fef l       .debug_str	00000000 
00003043 l       .debug_str	00000000 
00003059 l       .debug_str	00000000 
0000306d l       .debug_str	00000000 
000030b4 l       .debug_str	00000000 
00003103 l       .debug_str	00000000 
0000312f l       .debug_str	00000000 
0000310c l       .debug_str	00000000 
0000313d l       .debug_str	00000000 
00003143 l       .debug_str	00000000 
0000314b l       .debug_str	00000000 
00003152 l       .debug_str	00000000 
00003a0b l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
00003171 l       .debug_str	00000000 
00003a3d l       .debug_str	00000000 
0000317c l       .debug_str	00000000 
00003187 l       .debug_str	00000000 
00003198 l       .debug_str	00000000 
0000319e l       .debug_str	00000000 
000031a6 l       .debug_str	00000000 
000031ad l       .debug_str	00000000 
000031b7 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
000031c7 l       .debug_str	00000000 
000031e9 l       .debug_str	00000000 
000031f4 l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
00003208 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
0000098b l       .debug_str	00000000 
0000321c l       .debug_str	00000000 
00003227 l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00003242 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003261 l       .debug_str	00000000 
00003269 l       .debug_str	00000000 
00003270 l       .debug_str	00000000 
00003278 l       .debug_str	00000000 
000032b9 l       .debug_str	00000000 
00003296 l       .debug_str	00000000 
000032c9 l       .debug_str	00000000 
000032de l       .debug_str	00000000 
000032e7 l       .debug_str	00000000 
00003344 l       .debug_str	00000000 
000033a9 l       .debug_str	00000000 
000033b3 l       .debug_str	00000000 
000033c3 l       .debug_str	00000000 
000033d8 l       .debug_str	00000000 
000033e0 l       .debug_str	00000000 
00003444 l       .debug_str	00000000 
000034b0 l       .debug_str	00000000 
000034b7 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
00003500 l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
00003510 l       .debug_str	00000000 
00003525 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
0000354d l       .debug_str	00000000 
00003554 l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
0000a4aa l       .debug_str	00000000 
0000a271 l       .debug_str	00000000 
0000a2d4 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000a354 l       .debug_str	00000000 
0000a3b7 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
000017f3 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c96 l       .debug_str	00000000 
0000a75b l       .debug_str	00000000 
0000a9ee l       .debug_str	00000000 
0000a775 l       .debug_str	00000000 
0000a7a6 l       .debug_str	00000000 
0000a81e l       .debug_str	00000000 
0000a7d6 l       .debug_str	00000000 
0000a807 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000a811 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00009845 l       .debug_str	00000000 
0000a817 l       .debug_str	00000000 
0000a81d l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0000a823 l       .debug_str	00000000 
0000a875 l       .debug_str	00000000 
000017f3 l       .debug_str	00000000 
0000a8c8 l       .debug_str	00000000 
0000a931 l       .debug_str	00000000 
0000a937 l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
0000a98a l       .debug_str	00000000 
0000a9ed l       .debug_str	00000000 
0000aa19 l       .debug_str	00000000 
0000aa92 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005c539 l       .debug_str	00000000 
0000151b l       .debug_str	00000000 
00000e26 l       .debug_str	00000000 
0000a530 l       .debug_str	00000000 
0000aa0f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0000a53f l       .debug_str	00000000 
0000a587 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
0000a590 l       .debug_str	00000000 
0000a16e l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0000a5d8 l       .debug_str	00000000 
0000a620 l       .debug_str	00000000 
0000a629 l       .debug_str	00000000 
0000a65a l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
0000a663 l       .debug_str	00000000 
0000a694 l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
000017f4 l       .debug_str	00000000 
0000a69e l       .debug_str	00000000 
0000a6cf l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
0000a6ef l       .debug_str	00000000 
0000a720 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0000a72a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0000ac39 l       .debug_str	00000000 
0000ab36 l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000ab8f l       .debug_str	00000000 
0000ab9b l       .debug_str	00000000 
0000abe2 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
0000abee l       .debug_str	00000000 
0000ac49 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000aae5 l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000249ab l       .debug_str	00000000 
000092b4 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
0000af09 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
0000af62 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000af68 l       .debug_str	00000000 
0001e292 l       .debug_str	00000000 
0000af72 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0001e2cd l       .debug_str	00000000 
0000afb2 l       .debug_str	00000000 
0000b021 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0001e0fe l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ac90 l       .debug_str	00000000 
0001b929 l       .debug_str	00000000 
0000aca7 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000acb8 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000acc2 l       .debug_str	00000000 
0000accd l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00027ef3 l       .debug_str	00000000 
0000ace0 l       .debug_str	00000000 
0000ad26 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
00059c34 l       .debug_str	00000000 
0000ad39 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
00027ed9 l       .debug_str	00000000 
0000ad41 l       .debug_str	00000000 
00057067 l       .debug_str	00000000 
00027f16 l       .debug_str	00000000 
0005cb0f l       .debug_str	00000000 
0000ad45 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000ad49 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
0000ad52 l       .debug_str	00000000 
0005b5a3 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000ad55 l       .debug_str	00000000 
0000ad95 l       .debug_str	00000000 
0000ada4 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
0000adec l       .debug_str	00000000 
0000ae33 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
0000ae41 l       .debug_str	00000000 
0000ae85 l       .debug_str	00000000 
0000ae90 l       .debug_str	00000000 
0000ae99 l       .debug_str	00000000 
0000aea1 l       .debug_str	00000000 
00058e4c l       .debug_str	00000000 
0000d491 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000aeaa l       .debug_str	00000000 
0000aeb0 l       .debug_str	00000000 
0000aeb9 l       .debug_str	00000000 
0000aec6 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000aec9 l       .debug_str	00000000 
0000aee0 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0000f71c l       .debug_str	00000000 
0000aef6 l       .debug_str	00000000 
0000aefc l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000af03 l       .debug_str	00000000 
0001b851 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0005c3cc l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
200000e8 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20000160 l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0000d091 l       .debug_str	00000000 
0000cff5 l       .debug_str	00000000 
0000d03b l       .debug_str	00000000 
0000d0da l       .debug_str	00000000 
0000d120 l       .debug_str	00000000 
0000d491 l       .debug_str	00000000 
0000fdd1 l       .debug_str	00000000 
0000d15a l       .debug_str	00000000 
0000d1a1 l       .debug_str	00000000 
0000d1ef l       .debug_str	00000000 
0000d23b l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000af03 l       .debug_str	00000000 
0000af09 l       .debug_str	00000000 
0001b851 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0005c3cc l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
0000af62 l       .debug_str	00000000 
0000af68 l       .debug_str	00000000 
0001e292 l       .debug_str	00000000 
0000af72 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0001e2cd l       .debug_str	00000000 
0000afb2 l       .debug_str	00000000 
0000d27b l       .debug_str	00000000 
0000d327 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000d3f9 l       .debug_str	00000000 
0000d412 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
000248c9 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
000223b8 l       .debug_str	00000000 
0000d462 l       .debug_str	00000000 
0003d3a5 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00039f6a l       .debug_str	00000000 
0000d465 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0000f4a8 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0000af4f l       .debug_str	00000000 
000279f5 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0002a985 l       .debug_str	00000000 
0000d473 l       .debug_str	00000000 
00059c35 l       .debug_str	00000000 
0000ad42 l       .debug_str	00000000 
0001b929 l       .debug_str	00000000 
00058e4c l       .debug_str	00000000 
0000d47f l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000d497 l       .debug_str	00000000 
0000d4a3 l       .debug_str	00000000 
0000d4af l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0000d4bc l       .debug_str	00000000 
0005ddbb l       .debug_str	00000000 
0000d4c9 l       .debug_str	00000000 
0000d540 l       .debug_str	00000000 
0000d549 l       .debug_str	00000000 
0000d557 l       .debug_str	00000000 
0001e214 l       .debug_str	00000000 
0000d56f l       .debug_str	00000000 
0000d5a4 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000b028 l       .debug_str	00000000 
0000b031 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b04b l       .debug_str	00000000 
0000d406 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
0000b05c l       .debug_str	00000000 
0000b068 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000b074 l       .debug_str	00000000 
0000b07a l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b086 l       .debug_str	00000000 
0000b08d l       .debug_str	00000000 
0000b093 l       .debug_str	00000000 
0000b099 l       .debug_str	00000000 
0000b0a0 l       .debug_str	00000000 
0000b0a6 l       .debug_str	00000000 
0000b0ae l       .debug_str	00000000 
0000b0b5 l       .debug_str	00000000 
0000b0bb l       .debug_str	00000000 
0000b0c1 l       .debug_str	00000000 
0000b0c7 l       .debug_str	00000000 
0000b0cd l       .debug_str	00000000 
0000b0d3 l       .debug_str	00000000 
0000b0da l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b0e9 l       .debug_str	00000000 
0000b0f1 l       .debug_str	00000000 
0000b0f9 l       .debug_str	00000000 
0000b100 l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b10f l       .debug_str	00000000 
0000b116 l       .debug_str	00000000 
0000b11d l       .debug_str	00000000 
0000b124 l       .debug_str	00000000 
0000b12b l       .debug_str	00000000 
0000b132 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0000b13e l       .debug_str	00000000 
0000b144 l       .debug_str	00000000 
0000b14a l       .debug_str	00000000 
0000b151 l       .debug_str	00000000 
0000b159 l       .debug_str	00000000 
0000d632 l       .debug_str	00000000 
0000b161 l       .debug_str	00000000 
0005b4a8 l       .debug_str	00000000 
0000b16c l       .debug_str	00000000 
00059c34 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000ad39 l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
00027ed9 l       .debug_str	00000000 
0000ad41 l       .debug_str	00000000 
00057067 l       .debug_str	00000000 
00027f16 l       .debug_str	00000000 
0005cb0f l       .debug_str	00000000 
0000ad45 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000ad49 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
0000ad52 l       .debug_str	00000000 
0005b5a3 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000b178 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
0000b188 l       .debug_str	00000000 
0000b1c4 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
0000b1e3 l       .debug_str	00000000 
0000b231 l       .debug_str	00000000 
0000b272 l       .debug_str	00000000 
0000b2de l       .debug_str	00000000 
0000b320 l       .debug_str	00000000 
0000b38c l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0000b3f8 l       .debug_str	00000000 
0000b415 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000b45b l       .debug_str	00000000 
0000b46c l       .debug_str	00000000 
0000b4dc l       .debug_str	00000000 
0000b576 l       .debug_str	00000000 
0000b639 l       .debug_str	00000000 
0000b726 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
0000b83d l       .debug_str	00000000 
0000b88d l       .debug_str	00000000 
0000b8ea l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
0000b93e l       .debug_str	00000000 
0000b9b5 l       .debug_str	00000000 
0000ba39 l       .debug_str	00000000 
0000bab4 l       .debug_str	00000000 
0000bb52 l       .debug_str	00000000 
0000bbfd l       .debug_str	00000000 
0000bc9f l       .debug_str	00000000 
0000bd64 l       .debug_str	00000000 
0000be36 l       .debug_str	00000000 
0000beff l       .debug_str	00000000 
0000bfeb l       .debug_str	00000000 
0000c0e4 l       .debug_str	00000000 
0000c1d4 l       .debug_str	00000000 
0000c2e7 l       .debug_str	00000000 
0000c407 l       .debug_str	00000000 
0000c51e l       .debug_str	00000000 
0000c657 l       .debug_str	00000000 
0000c7ad l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0000c902 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000f106 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0000ca4f l       .debug_str	00000000 
0000ca9d l       .debug_str	00000000 
0000cc1d l       .debug_str	00000000 
0000cc6b l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
0000ccfa l       .debug_str	00000000 
0000cd3b l       .debug_str	00000000 
0000cd8b l       .debug_str	00000000 
0000cf0d l       .debug_str	00000000 
0000cf5e l       .debug_str	00000000 
0000cfa2 l       .debug_str	00000000 
0001bba0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0000b16c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000d618 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000b05c l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000b068 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000b074 l       .debug_str	00000000 
0000b07a l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b086 l       .debug_str	00000000 
0000b08d l       .debug_str	00000000 
0000b093 l       .debug_str	00000000 
0000b099 l       .debug_str	00000000 
0000b0a0 l       .debug_str	00000000 
0000b0a6 l       .debug_str	00000000 
0000b0ae l       .debug_str	00000000 
0000b0b5 l       .debug_str	00000000 
0000b0bb l       .debug_str	00000000 
0000b0c1 l       .debug_str	00000000 
0000b0c7 l       .debug_str	00000000 
0000b0cd l       .debug_str	00000000 
0000b0d3 l       .debug_str	00000000 
0000b0da l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b0e9 l       .debug_str	00000000 
0000b0f1 l       .debug_str	00000000 
0000b0f9 l       .debug_str	00000000 
0000b100 l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b10f l       .debug_str	00000000 
0000b116 l       .debug_str	00000000 
0000b11d l       .debug_str	00000000 
0000b124 l       .debug_str	00000000 
0000b12b l       .debug_str	00000000 
0000b132 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0000b13e l       .debug_str	00000000 
0000b144 l       .debug_str	00000000 
0000b14a l       .debug_str	00000000 
0000b151 l       .debug_str	00000000 
0000b159 l       .debug_str	00000000 
0000d632 l       .debug_str	00000000 
0000b161 l       .debug_str	00000000 
0005b4a8 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
0000d5b0 l       .debug_str	00000000 
0000d5ec l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0000d68d l       .debug_str	00000000 
0000d682 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0000d6cb l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000d63e l       .debug_str	00000000 
0000a2a8 l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0000e25c l       .debug_str	00000000 
0000ec1d l       .debug_str	00000000 
0000ed70 l       .debug_str	00000000 
0000eda0 l       .debug_str	00000000 
0000aeb0 l       .debug_str	00000000 
0000aeb9 l       .debug_str	00000000 
0000aec6 l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000aec9 l       .debug_str	00000000 
0000aee0 l       .debug_str	00000000 
0000f71c l       .debug_str	00000000 
0000f6ff l       .debug_str	00000000 
0000eec7 l       .debug_str	00000000 
0000eef7 l       .debug_str	00000000 
0000f7a3 l       .debug_str	00000000 
0000f745 l       .debug_str	00000000 
0000ef39 l       .debug_str	00000000 
0000ef69 l       .debug_str	00000000 
0000efb8 l       .debug_str	00000000 
0000efe8 l       .debug_str	00000000 
0000effa l       .debug_str	00000000 
0000f02a l       .debug_str	00000000 
0000f063 l       .debug_str	00000000 
0000f06c l       .debug_str	00000000 
0000f099 l       .debug_str	00000000 
0000f0dc l       .debug_str	00000000 
0000f0f2 l       .debug_str	00000000 
0000f236 l       .debug_str	00000000 
0000f2d2 l       .debug_str	00000000 
0000f39c l       .debug_str	00000000 
0000f3b5 l       .debug_str	00000000 
0000f494 l       .debug_str	00000000 
0000f5dd l       .debug_str	00000000 
0000f6fa l       .debug_str	00000000 
0000f732 l       .debug_str	00000000 
0000f777 l       .debug_str	00000000 
0000f77f l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
0000d6d1 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000d6d8 l       .debug_str	00000000 
0000d6dd l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
0000d702 l       .debug_str	00000000 
0000d709 l       .debug_str	00000000 
0000d70e l       .debug_str	00000000 
0000d749 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0000d780 l       .debug_str	00000000 
0000d7b0 l       .debug_str	00000000 
0000ac90 l       .debug_str	00000000 
0000d7c3 l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d7d0 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000d465 l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0000b3f8 l       .debug_str	00000000 
0000b415 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000b45b l       .debug_str	00000000 
0000b46c l       .debug_str	00000000 
0000b4dc l       .debug_str	00000000 
0000b576 l       .debug_str	00000000 
0000b639 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
0000b83d l       .debug_str	00000000 
0000b88d l       .debug_str	00000000 
0000b8ea l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
0000b93e l       .debug_str	00000000 
0000b9b5 l       .debug_str	00000000 
0000ba39 l       .debug_str	00000000 
0000bab4 l       .debug_str	00000000 
0000bb52 l       .debug_str	00000000 
0000bbfd l       .debug_str	00000000 
0000bc9f l       .debug_str	00000000 
0000bd64 l       .debug_str	00000000 
0000be36 l       .debug_str	00000000 
0000beff l       .debug_str	00000000 
0000bfeb l       .debug_str	00000000 
0000c0e4 l       .debug_str	00000000 
0000d7d8 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000da19 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0000db47 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0000f5f1 l       .debug_str	00000000 
0000f090 l       .debug_str	00000000 
0000dc6d l       .debug_str	00000000 
0000dc9d l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0000f0ac l       .debug_str	00000000 
0000dcd4 l       .debug_str	00000000 
0000dd04 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
0000dd51 l       .debug_str	00000000 
0000dd81 l       .debug_str	00000000 
0000b726 l       .debug_str	00000000 
0000c1d4 l       .debug_str	00000000 
0000c2e7 l       .debug_str	00000000 
0000c407 l       .debug_str	00000000 
0000c51e l       .debug_str	00000000 
0000c657 l       .debug_str	00000000 
0000c7ad l       .debug_str	00000000 
0000c902 l       .debug_str	00000000 
0000f106 l       .debug_str	00000000 
0000dda1 l       .debug_str	00000000 
0000ddd1 l       .debug_str	00000000 
0000d5a9 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df34 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0000df3d l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0002c4c5 l       .debug_str	00000000 
0000df4a l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000f25a l       .debug_str	00000000 
0000df56 l       .debug_str	00000000 
0000df86 l       .debug_str	00000000 
0000e02c l       .debug_str	00000000 
0000e031 l       .debug_str	00000000 
0000e037 l       .debug_str	00000000 
0000e040 l       .debug_str	00000000 
000598ad l       .debug_str	00000000 
0000f2f6 l       .debug_str	00000000 
0000e04a l       .debug_str	00000000 
0000e07a l       .debug_str	00000000 
0000e14e l       .debug_str	00000000 
0005b0eb l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
0000f3af l       .debug_str	00000000 
0000e154 l       .debug_str	00000000 
0000e184 l       .debug_str	00000000 
0000e1a7 l       .debug_str	00000000 
0000e1d4 l       .debug_str	00000000 
0000e1f5 l       .debug_str	00000000 
0000e2fc l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
0000e3d6 l       .debug_str	00000000 
0000e44d l       .debug_str	00000000 
0000e4d1 l       .debug_str	00000000 
0000e54c l       .debug_str	00000000 
0000e5ea l       .debug_str	00000000 
0000e695 l       .debug_str	00000000 
0000e737 l       .debug_str	00000000 
0000e80b l       .debug_str	00000000 
0000e8fc l       .debug_str	00000000 
0000e9ec l       .debug_str	00000000 
0000f3c9 l       .debug_str	00000000 
0000ead4 l       .debug_str	00000000 
0000eb04 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0000f4a8 l       .debug_str	00000000 
0000ebed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00056e0c l       .debug_str	00000000 
0000f7ae l       .debug_str	00000000 
0000f7df l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0001e0fe l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
0000f7e8 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
00018ba5 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000f94c l       .debug_str	00000000 
0000f958 l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000d618 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000f83a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000b05c l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000b068 l       .debug_str	00000000 
0000b06c l       .debug_str	00000000 
0000b074 l       .debug_str	00000000 
0000b07a l       .debug_str	00000000 
0000b080 l       .debug_str	00000000 
0000b086 l       .debug_str	00000000 
0000b08d l       .debug_str	00000000 
0000b093 l       .debug_str	00000000 
0000b099 l       .debug_str	00000000 
0000b0a0 l       .debug_str	00000000 
0000b0a6 l       .debug_str	00000000 
0000b0ae l       .debug_str	00000000 
0000b0b5 l       .debug_str	00000000 
0000b0bb l       .debug_str	00000000 
0000b0c1 l       .debug_str	00000000 
0000b0c7 l       .debug_str	00000000 
0000b0cd l       .debug_str	00000000 
0000b0d3 l       .debug_str	00000000 
0000b0da l       .debug_str	00000000 
0000b0e1 l       .debug_str	00000000 
0000b0e9 l       .debug_str	00000000 
0000b0f1 l       .debug_str	00000000 
0000b0f9 l       .debug_str	00000000 
0000b100 l       .debug_str	00000000 
0000b108 l       .debug_str	00000000 
0000b10f l       .debug_str	00000000 
0000b116 l       .debug_str	00000000 
0000b11d l       .debug_str	00000000 
0000b124 l       .debug_str	00000000 
0000b12b l       .debug_str	00000000 
0000b132 l       .debug_str	00000000 
0000b138 l       .debug_str	00000000 
0000b13e l       .debug_str	00000000 
0000b144 l       .debug_str	00000000 
0000b14a l       .debug_str	00000000 
0000b151 l       .debug_str	00000000 
0000b159 l       .debug_str	00000000 
0000d632 l       .debug_str	00000000 
0000f85e l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000f884 l       .debug_str	00000000 
0000f945 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
0002a925 l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000d3f9 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000f83a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000b028 l       .debug_str	00000000 
0000b031 l       .debug_str	00000000 
0000b03b l       .debug_str	00000000 
0000b04b l       .debug_str	00000000 
0000d406 l       .debug_str	00000000 
0000fa20 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000fa46 l       .debug_str	00000000 
0000f945 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000f94c l       .debug_str	00000000 
0000faed l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
000012ef l       .debug_str	00000000 
0000fbe4 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000f83a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000f94c l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000b05c l       .debug_str	00000000 
0000f85e l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
0000fb94 l       .debug_str	00000000 
0000fbcd l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
0000fa20 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
00002382 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000f83a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000b05c l       .debug_str	00000000 
0000f85e l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
0000fc1d l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1ai0eloc31rxz52x
0000fd7d l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000bd9 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000fd08 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
0000d6d8 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000fd6b l       .debug_str	00000000 
0000fd5f l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0000fd72 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1v17h907p30pylh6
00000d71 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
0005c671 l       .debug_str	00000000 
00059b2c l       .debug_str	00000000 
00000f01 l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001100 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00000acd l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
00001212 l       .debug_str	00000000 
000011f9 l       .debug_str	00000000 
0005ac7c l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00010121 l       .debug_str	00000000 
00010148 l       .debug_str	00000000 
00010150 l       .debug_str	00000000 
00010157 l       .debug_str	00000000 
0001015d l       .debug_str	00000000 
00010164 l       .debug_str	00000000 
00059666 l       .debug_str	00000000 
0001016a l       .debug_str	00000000 
00010179 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
00010187 l       .debug_str	00000000 
0001018c l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
0000ffc8 l       .debug_str	00000000 
0000fd88 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
00057067 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00027f16 l       .debug_str	00000000 
0000fd94 l       .debug_str	00000000 
0000fdcb l       .debug_str	00000000 
0000d491 l       .debug_str	00000000 
0000fdd7 l       .debug_str	00000000 
0000fe0e l       .debug_str	00000000 
0000fe19 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000fe21 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000fe28 l       .debug_str	00000000 
0000fe2f l       .debug_str	00000000 
0005c9ee l       .debug_str	00000000 
0000fe38 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
0000fe42 l       .debug_str	00000000 
00010139 l       .debug_str	00000000 
0000fe4c l       .debug_str	00000000 
0001f502 l       .debug_str	00000000 
0000fe82 l       .debug_str	00000000 
0000feb0 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
0000febc l       .debug_str	00000000 
0000fef3 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0005c522 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0000fefc l       .debug_str	00000000 
0000ff10 l       .debug_str	00000000 
0000ff43 l       .debug_str	00000000 
0000ff4e l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0000ff84 l       .debug_str	00000000 
0000ffc2 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
0000ffd5 l       .debug_str	00000000 
00010018 l       .debug_str	00000000 
00010030 l       .debug_str	00000000 
00010070 l       .debug_str	00000000 
00010085 l       .debug_str	00000000 
000100bf l       .debug_str	00000000 
000100ce l       .debug_str	00000000 
0001010d l       .debug_str	00000000 
0000035f l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
000017db l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000a811 l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
20000214 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8c3d62e53c42ce39E
20000168 l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h1dd6b74134f2575dE
20000168 l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h6bb1c96a489889baE
200001fc l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17hb169e5084280c5b1E
20000164 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17h950734ac5f86de57E
0000ad20 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E
0000b472 l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E
0000abe6 l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E
0000ab9a l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE
200001ba l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h9edf4dcfe692b5b1E
2000020c l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17hb66b2debc1d16188E
0001bdc0 l     O .text	00000021 str.0
0001be00 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 25jm3tkgfnhczjfh
0001078e l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
00010322 l       .debug_str	00000000 
0004c193 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0001035c l       .debug_str	00000000 
00010399 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
000103ac l       .debug_str	00000000 
000103bd l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00010430 l       .debug_str	00000000 
0001043c l       .debug_str	00000000 
0001046b l       .debug_str	00000000 
00056f26 l       .debug_str	00000000 
000104c5 l       .debug_str	00000000 
00039f69 l       .debug_str	00000000 
0001051e l       .debug_str	00000000 
0001057c l       .debug_str	00000000 
00010585 l       .debug_str	00000000 
000105e3 l       .debug_str	00000000 
000105ec l       .debug_str	00000000 
0001064f l       .debug_str	00000000 
0001065c l       .debug_str	00000000 
000106bb l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
000106d4 l       .debug_str	00000000 
00016468 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0001072f l       .debug_str	00000000 
00010789 l       .debug_str	00000000 
000581e9 l       .debug_str	00000000 
000107e9 l       .debug_str	00000000 
00010819 l       .debug_str	00000000 
00010826 l       .debug_str	00000000 
00010882 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df34 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0000df3d l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0002c45a l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
0005c670 l       .debug_str	00000000 
0001088d l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0001089f l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
000108a2 l       .debug_str	00000000 
000126be l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00057ce2 l       .debug_str	00000000 
0005c5fb l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
000108a5 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
00011866 l       .debug_str	00000000 
000586c8 l       .debug_str	00000000 
000108ad l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000108b9 l       .debug_str	00000000 
00058540 l       .debug_str	00000000 
00058f9b l       .debug_str	00000000 
00010270 l       .debug_str	00000000 
00058bbd l       .debug_str	00000000 
000111ab l       .debug_str	00000000 
0000af4f l       .debug_str	00000000 
000108d4 l       .debug_str	00000000 
00039f68 l       .debug_str	00000000 
0000fd70 l       .debug_str	00000000 
00042e7e l       .debug_str	00000000 
00002381 l       .debug_str	00000000 
00002387 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
00010905 l       .debug_str	00000000 
00010910 l       .debug_str	00000000 
0001091b l       .debug_str	00000000 
00010926 l       .debug_str	00000000 
00010931 l       .debug_str	00000000 
0001093c l       .debug_str	00000000 
00010947 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00010899 l       .debug_str	00000000 
00010190 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
0001019b l       .debug_str	00000000 
000101c9 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
0001020e l       .debug_str	00000000 
0001021c l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0001024d l       .debug_str	00000000 
00010256 l       .debug_str	00000000 
0001025f l       .debug_str	00000000 
0001026a l       .debug_str	00000000 
00010276 l       .debug_str	00000000 
00010280 l       .debug_str	00000000 
000111bc l       .debug_str	00000000 
00000b7d l       .debug_str	00000000 
00000b86 l       .debug_str	00000000 
00000b8a l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0001f2d7 l       .debug_str	00000000 
000108e5 l       .debug_str	00000000 
0001028d l       .debug_str	00000000 
000102b8 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
000102c1 l       .debug_str	00000000 
0002799b l       .debug_str	00000000 
000102ed l       .debug_str	00000000 
20000218 l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17hdc3e015a60662be5E
0000b8b0 l     F .text	00000364 _ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E
0000b7da l     F .text	00000036 _ZN3app5chip813PixelIterator3new17h8011ce45451de010E
0000b810 l     F .text	000000a0 _ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E
20004268 l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17hf6360141ad32453fE
20000268 l     O .bss	00004000 _ZN3app5chip816CHIP8_TASK_STACK17hb31f2a0cca07481dE
0000be48 l     F .text	000000e0 _ZN3app5chip88Hardware3new17h2513f3a9e68453b3E
0000b724 l     F .text	000000b6 _ZN3app5chip89task_func17h385831a0096277b5E
0001c620 l     O .text	00000021 str.0
0001c670 l     O .text	00000021 str.1
0001c6b0 l     O .text	0000001c str.2
00000000 l    df *ABS*	00000000 2c6bdy6rt6z3zh1y
00010b52 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00010b17 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00010bbb l       .debug_str	00000000 
00010c26 l       .debug_str	00000000 
00010c62 l       .debug_str	00000000 
00010caf l       .debug_str	00000000 
00010ceb l       .debug_str	00000000 
00010cf9 l       .debug_str	00000000 
00010d64 l       .debug_str	00000000 
00010d7f l       .debug_str	00000000 
00010deb l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00010e42 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00010976 l       .debug_str	00000000 
0001095b l       .debug_str	00000000 
000109a5 l       .debug_str	00000000 
00010e55 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
000248f5 l       .debug_str	00000000 
0000141f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000109f7 l       .debug_str	00000000 
00010a06 l       .debug_str	00000000 
00010a3f l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
00010a9e l       .debug_str	00000000 
00010ad7 l       .debug_str	00000000 
00010b00 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xbkmlpi4vyn2qbv
00039f6a l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0000ac90 l       .debug_str	00000000 
0001b929 l       .debug_str	00000000 
0000d465 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00010899 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0001024d l       .debug_str	00000000 
00010256 l       .debug_str	00000000 
0001025f l       .debug_str	00000000 
0001026a l       .debug_str	00000000 
00010276 l       .debug_str	00000000 
00010280 l       .debug_str	00000000 
000111bc l       .debug_str	00000000 
000111ab l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
00010ea2 l       .debug_str	00000000 
00010eee l       .debug_str	00000000 
0000d462 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0003d3a5 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 36ol61x1a5do2305
0001101f l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000d412 l       .debug_str	00000000 
0000d462 l       .debug_str	00000000 
0003d3a5 l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
00039f6a l       .debug_str	00000000 
0000d465 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0000af4f l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
00059c34 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000ad39 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
00027ed9 l       .debug_str	00000000 
0000ad41 l       .debug_str	00000000 
00057067 l       .debug_str	00000000 
00027f16 l       .debug_str	00000000 
0005cb0f l       .debug_str	00000000 
0000ad45 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0000ad49 l       .debug_str	00000000 
0000181a l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
000151e1 l       .debug_str	00000000 
0000ad52 l       .debug_str	00000000 
0005b5a3 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00010899 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0001024d l       .debug_str	00000000 
00010256 l       .debug_str	00000000 
0001025f l       .debug_str	00000000 
0001026a l       .debug_str	00000000 
00010276 l       .debug_str	00000000 
00010280 l       .debug_str	00000000 
000111bc l       .debug_str	00000000 
000111ab l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
00010f21 l       .debug_str	00000000 
00010f6f l       .debug_str	00000000 
00010fcf l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4ae8jurj2cyz895o
000002a2 l       .debug_str	00000000 
00011186 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00010430 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000111a6 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00010899 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0001024d l       .debug_str	00000000 
00010256 l       .debug_str	00000000 
0001025f l       .debug_str	00000000 
0001026a l       .debug_str	00000000 
00010276 l       .debug_str	00000000 
00010280 l       .debug_str	00000000 
000111bc l       .debug_str	00000000 
000111ab l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
00011092 l       .debug_str	00000000 
000110f5 l       .debug_str	00000000 
0001111f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4vqyywb7xxbk2fnk
00057247 l       .debug_str	00000000 
0001089f l       .debug_str	00000000 
00011e95 l       .debug_str	00000000 
000108a2 l       .debug_str	00000000 
000126be l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00057ce2 l       .debug_str	00000000 
0005c5fb l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00011cf0 l       .debug_str	00000000 
00011d62 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0001189d l       .debug_str	00000000 
00010e55 l       .debug_str	00000000 
00011893 l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
0001188b l       .debug_str	00000000 
00002455 l       .debug_str	00000000 
00011887 l       .debug_str	00000000 
00011882 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
000586c8 l       .debug_str	00000000 
00011857 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000109f7 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00011838 l       .debug_str	00000000 
000117fe l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
000117e0 l       .debug_str	00000000 
000117a7 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0001178b l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
000108a5 l       .debug_str	00000000 
00011754 l       .debug_str	00000000 
00011738 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00011701 l       .debug_str	00000000 
000116e6 l       .debug_str	00000000 
000116b0 l       .debug_str	00000000 
00011695 l       .debug_str	00000000 
0001165f l       .debug_str	00000000 
00011644 l       .debug_str	00000000 
0001160e l       .debug_str	00000000 
000115f3 l       .debug_str	00000000 
000115bd l       .debug_str	00000000 
000115a2 l       .debug_str	00000000 
0001156c l       .debug_str	00000000 
000114fa l       .debug_str	00000000 
000114d8 l       .debug_str	00000000 
00011484 l       .debug_str	00000000 
00011469 l       .debug_str	00000000 
00011433 l       .debug_str	00000000 
00011419 l       .debug_str	00000000 
000113e4 l       .debug_str	00000000 
000113ca l       .debug_str	00000000 
00011395 l       .debug_str	00000000 
0001137b l       .debug_str	00000000 
00011346 l       .debug_str	00000000 
00010976 l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
000112ba l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
0001129d l       .debug_str	00000000 
00011211 l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
00011209 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
000111ff l       .debug_str	00000000 
000111d9 l       .debug_str	00000000 
00011866 l       .debug_str	00000000 
000108e5 l       .debug_str	00000000 
000111bc l       .debug_str	00000000 
00010280 l       .debug_str	00000000 
00010276 l       .debug_str	00000000 
0001026a l       .debug_str	00000000 
0001025f l       .debug_str	00000000 
00010256 l       .debug_str	00000000 
0001024d l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0001f2d7 l       .debug_str	00000000 
00010899 l       .debug_str	00000000 
00059379 l       .debug_str	00000000 
00012507 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
000118c9 l       .debug_str	00000000 
000118c5 l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00056180 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
000111ca l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
000111ce l       .debug_str	00000000 
00000e1c l       .debug_str	00000000 
00030a8c l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
00024acf l       .debug_str	00000000 
0002492c l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
000118bf l       .debug_str	00000000 
000118b9 l       .debug_str	00000000 
000118b3 l       .debug_str	00000000 
000118ad l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
00059666 l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
0000253a l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
0001e0fe l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
000118aa l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
000118a6 l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00057e1a l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001ca50 l     O .text	0000001c str.0
0001ccd0 l     O .text	00000021 str.1
0001cfb0 l     O .text	00000039 str.2
0001d010 l     O .text	00000021 str.3
0001d050 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 5amxpeuxwufgc2g7
00011a7c l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
00010b00 l       .debug_str	00000000 
000119e8 l       .debug_str	00000000 
00011ac5 l       .debug_str	00000000 
00011b0f l       .debug_str	00000000 
00011b62 l       .debug_str	00000000 
00011bf1 l       .debug_str	00000000 
00011c54 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00011ccc l       .debug_str	00000000 
00011d3e l       .debug_str	00000000 
00011dfc l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0001095b l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
0001188b l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00010976 l       .debug_str	00000000 
00011893 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00010e55 l       .debug_str	00000000 
0001189d l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00011d62 l       .debug_str	00000000 
00011cf0 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
000118ce l       .debug_str	00000000 
00011958 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5eukf9ymd90dvsi0
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00011e59 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00011e08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 5fcitodfeuns782f
00011ed3 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e66 l       .debug_str	00000000 
00011e6b l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00011e72 l       .debug_str	00000000 
00011e7a l       .debug_str	00000000 
0000acc7 l       .debug_str	00000000 
00011e82 l       .debug_str	00000000 
00011e8a l       .debug_str	00000000 
00011e91 l       .debug_str	00000000 
0001bb1e l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000249c4 l       .debug_str	00000000 
00011ee8 l       .debug_str	00000000 
00011e98 l       .debug_str	00000000 
00016359 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tdisvxegs4w5usn
00011ff4 l       .debug_str	00000000 
0001189d l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00011d62 l       .debug_str	00000000 
00011cf0 l       .debug_str	00000000 
00011f85 l       .debug_str	00000000 
00011fc6 l       .debug_str	00000000 
00012035 l       .debug_str	00000000 
00012098 l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
000120e8 l       .debug_str	00000000 
00012168 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
000121dc l       .debug_str	00000000 
0001225c l       .debug_str	00000000 
00010b00 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0001095b l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00010976 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
00011ef4 l       .debug_str	00000000 
00011f37 l       .debug_str	00000000 
0001188b l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00011893 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00010e55 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 u3mfxzl87iwp64s
00012338 l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
00012377 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000106c5 l       .debug_str	00000000 
000123ea l       .debug_str	00000000 
00012429 l       .debug_str	00000000 
00012507 l       .debug_str	00000000 
00012466 l       .debug_str	00000000 
000124c9 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000124f0 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0001229a l       .debug_str	00000000 
0001232f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
00003a11 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00010976 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cortex_m.ej0gx5up-cgu.0
0001645a l       .debug_str	00000000 
000053e2 l       .debug_str	00000000 
00013a7c l       .debug_str	00000000 
00013a89 l       .debug_str	00000000 
00013ac0 l       .debug_str	00000000 
00013ad9 l       .debug_str	00000000 
00013ae5 l       .debug_str	00000000 
00013b1f l       .debug_str	00000000 
00013b3e l       .debug_str	00000000 
00013b79 l       .debug_str	00000000 
00013b96 l       .debug_str	00000000 
00013ba0 l       .debug_str	00000000 
00013bdc l       .debug_str	00000000 
00013c02 l       .debug_str	00000000 
00013c0e l       .debug_str	00000000 
00013c34 l       .debug_str	00000000 
00013c3e l       .debug_str	00000000 
00013c64 l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
00013c98 l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
00013ce6 l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
00013d37 l       .debug_str	00000000 
00013d8c l       .debug_str	00000000 
00013d98 l       .debug_str	00000000 
00013ded l       .debug_str	00000000 
00013e27 l       .debug_str	00000000 
00013e3f l       .debug_str	00000000 
00013e48 l       .debug_str	00000000 
00013e83 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00013ebe l       .debug_str	00000000 
00013f0d l       .debug_str	00000000 
00013f19 l       .debug_str	00000000 
00013f64 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
00013f6d l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
0001400e l       .debug_str	00000000 
00013a68 l       .debug_str	00000000 
00014041 l       .debug_str	00000000 
00014048 l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
0001407b l       .debug_str	00000000 
00013b7f l       .debug_str	00000000 
000140b2 l       .debug_str	00000000 
00014100 l       .debug_str	00000000 
0001410f l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
0001415d l       .debug_str	00000000 
000141a3 l       .debug_str	00000000 
000141ac l       .debug_str	00000000 
000141f5 l       .debug_str	00000000 
00014201 l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00014255 l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
00014264 l       .debug_str	00000000 
000142e0 l       .debug_str	00000000 
0001430f l       .debug_str	00000000 
00014319 l       .debug_str	00000000 
00014395 l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000143bf l       .debug_str	00000000 
000143fb l       .debug_str	00000000 
00014413 l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
0005b58b l       .debug_str	00000000 
00014484 l       .debug_str	00000000 
000144dc l       .debug_str	00000000 
00014532 l       .debug_str	00000000 
00014588 l       .debug_str	00000000 
000145a7 l       .debug_str	00000000 
000145f8 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00014604 l       .debug_str	00000000 
00014655 l       .debug_str	00000000 
00014667 l       .debug_str	00000000 
000146bf l       .debug_str	00000000 
000146d5 l       .debug_str	00000000 
000146e0 l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00014709 l       .debug_str	00000000 
0001476c l       .debug_str	00000000 
00014796 l       .debug_str	00000000 
00014799 l       .debug_str	00000000 
00014802 l       .debug_str	00000000 
0001481a l       .debug_str	00000000 
00014898 l       .debug_str	00000000 
00014928 l       .debug_str	00000000 
0001493e l       .debug_str	00000000 
000149c5 l       .debug_str	00000000 
000149ee l       .debug_str	00000000 
000149f2 l       .debug_str	00000000 
00014a1b l       .debug_str	00000000 
00014a1f l       .debug_str	00000000 
00014a51 l       .debug_str	00000000 
00014a5d l       .debug_str	00000000 
00014ab9 l       .debug_str	00000000 
00014ac3 l       .debug_str	00000000 
00014af2 l       .debug_str	00000000 
00014afc l       .debug_str	00000000 
00014b30 l       .debug_str	00000000 
00014b3e l       .debug_str	00000000 
00014b6d l       .debug_str	00000000 
00014b77 l       .debug_str	00000000 
00014ba6 l       .debug_str	00000000 
00014c16 l       .debug_str	00000000 
00014c23 l       .debug_str	00000000 
00014c9a l       .debug_str	00000000 
00014cae l       .debug_str	00000000 
00014cb9 l       .debug_str	00000000 
00014d25 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00014daf l       .debug_str	00000000 
00014e1c l       .debug_str	00000000 
00014ea7 l       .debug_str	00000000 
00014f1b l       .debug_str	00000000 
00014f30 l       .debug_str	00000000 
00014fa4 l       .debug_str	00000000 
00015036 l       .debug_str	00000000 
000150a5 l       .debug_str	00000000 
000150b5 l       .debug_str	00000000 
000150f4 l       .debug_str	00000000 
000150fd l       .debug_str	00000000 
0001513d l       .debug_str	00000000 
00015147 l       .debug_str	00000000 
00015187 l       .debug_str	00000000 
00015191 l       .debug_str	00000000 
000151d6 l       .debug_str	00000000 
000151e4 l       .debug_str	00000000 
0001524f l       .debug_str	00000000 
0001525b l       .debug_str	00000000 
000152c5 l       .debug_str	00000000 
000152d0 l       .debug_str	00000000 
000153b6 l       .debug_str	00000000 
0001533f l       .debug_str	00000000 
000153b2 l       .debug_str	00000000 
000153c6 l       .debug_str	00000000 
00015431 l       .debug_str	00000000 
0001543d l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
0001547d l       .debug_str	00000000 
000154bf l       .debug_str	00000000 
000154ed l       .debug_str	00000000 
0001555a l       .debug_str	00000000 
000155e5 l       .debug_str	00000000 
00015654 l       .debug_str	00000000 
000156e1 l       .debug_str	00000000 
00015750 l       .debug_str	00000000 
000157dd l       .debug_str	00000000 
0001584e l       .debug_str	00000000 
000158dd l       .debug_str	00000000 
00015949 l       .debug_str	00000000 
000159d3 l       .debug_str	00000000 
00015a3b l       .debug_str	00000000 
00015ac1 l       .debug_str	00000000 
00015b2b l       .debug_str	00000000 
00015b36 l       .debug_str	00000000 
00015ba7 l       .debug_str	00000000 
00015bb9 l       .debug_str	00000000 
00015c25 l       .debug_str	00000000 
00015c32 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
00015c78 l       .debug_str	00000000 
00015ce4 l       .debug_str	00000000 
00015cf1 l       .debug_str	00000000 
00015d5d l       .debug_str	00000000 
00015d6a l       .debug_str	00000000 
00015dd9 l       .debug_str	00000000 
00015de7 l       .debug_str	00000000 
00015e58 l       .debug_str	00000000 
00015ee7 l       .debug_str	00000000 
00015f5a l       .debug_str	00000000 
00015feb l       .debug_str	00000000 
0001605b l       .debug_str	00000000 
000160e9 l       .debug_str	00000000 
0001615b l       .debug_str	00000000 
000161eb l       .debug_str	00000000 
0001625d l       .debug_str	00000000 
0001626e l       .debug_str	00000000 
000162db l       .debug_str	00000000 
000162e7 l       .debug_str	00000000 
00016353 l       .debug_str	00000000 
0001635e l       .debug_str	00000000 
000163d2 l       .debug_str	00000000 
000163e5 l       .debug_str	00000000 
0001646e l       .debug_str	00000000 
000164db l       .debug_str	00000000 
000164e7 l       .debug_str	00000000 
0001655b l       .debug_str	00000000 
0001656e l       .debug_str	00000000 
000165e4 l       .debug_str	00000000 
000165f9 l       .debug_str	00000000 
00016665 l       .debug_str	00000000 
00016670 l       .debug_str	00000000 
000166e2 l       .debug_str	00000000 
00016772 l       .debug_str	00000000 
00016802 l       .debug_str	00000000 
0001686e l       .debug_str	00000000 
00016879 l       .debug_str	00000000 
000168b9 l       .debug_str	00000000 
000168bf l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
000168f4 l       .debug_str	00000000 
00016929 l       .debug_str	00000000 
0001692d l       .debug_str	00000000 
00016935 l       .debug_str	00000000 
00016a7d l       .debug_str	00000000 
0001693d l       .debug_str	00000000 
00016945 l       .debug_str	00000000 
0001694d l       .debug_str	00000000 
00016953 l       .debug_str	00000000 
0001695b l       .debug_str	00000000 
00016963 l       .debug_str	00000000 
00016969 l       .debug_str	00000000 
00016972 l       .debug_str	00000000 
00016979 l       .debug_str	00000000 
00016bf0 l       .debug_str	00000000 
00016980 l       .debug_str	00000000 
000169b0 l       .debug_str	00000000 
00016a15 l       .debug_str	00000000 
00016a1b l       .debug_str	00000000 
00016a45 l       .debug_str	00000000 
000572f6 l       .debug_str	00000000 
00016a7c l       .debug_str	00000000 
00016a87 l       .debug_str	00000000 
00016a8b l       .debug_str	00000000 
00016a8f l       .debug_str	00000000 
00016a93 l       .debug_str	00000000 
00016a98 l       .debug_str	00000000 
00016a9d l       .debug_str	00000000 
00016aa8 l       .debug_str	00000000 
00057b85 l       .debug_str	00000000 
00016aae l       .debug_str	00000000 
00016ab5 l       .debug_str	00000000 
00016abc l       .debug_str	00000000 
00016aee l       .debug_str	00000000 
00016b55 l       .debug_str	00000000 
00016b81 l       .debug_str	00000000 
00016bb6 l       .debug_str	00000000 
00016bbc l       .debug_str	00000000 
00016bc2 l       .debug_str	00000000 
00016bc8 l       .debug_str	00000000 
00016bce l       .debug_str	00000000 
00016bfe l       .debug_str	00000000 
00016c63 l       .debug_str	00000000 
00016c8d l       .debug_str	00000000 
00016cc2 l       .debug_str	00000000 
00016cc7 l       .debug_str	00000000 
00016cce l       .debug_str	00000000 
00016cd5 l       .debug_str	00000000 
00016cdc l       .debug_str	00000000 
00016ce5 l       .debug_str	00000000 
00016cec l       .debug_str	00000000 
00016cf4 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
00016cf9 l       .debug_str	00000000 
0005cc58 l       .debug_str	00000000 
0000202e l       .debug_str	00000000 
00016cfe l       .debug_str	00000000 
00016d09 l       .debug_str	00000000 
00016d0d l       .debug_str	00000000 
00016d11 l       .debug_str	00000000 
00016d41 l       .debug_str	00000000 
00016da6 l       .debug_str	00000000 
00016dd0 l       .debug_str	00000000 
00016e05 l       .debug_str	00000000 
00016e09 l       .debug_str	00000000 
00016e0f l       .debug_str	00000000 
00016e3f l       .debug_str	00000000 
00016ea4 l       .debug_str	00000000 
00016ece l       .debug_str	00000000 
000152cc l       .debug_str	00000000 
00016f03 l       .debug_str	00000000 
00016f09 l       .debug_str	00000000 
00016f0f l       .debug_str	00000000 
00016f16 l       .debug_str	00000000 
00016f1b l       .debug_str	00000000 
00016f4b l       .debug_str	00000000 
00016fb0 l       .debug_str	00000000 
00016fda l       .debug_str	00000000 
0001700f l       .debug_str	00000000 
0003071d l       .debug_str	00000000 
000172f9 l       .debug_str	00000000 
00017014 l       .debug_str	00000000 
00017309 l       .debug_str	00000000 
00017018 l       .debug_str	00000000 
00017319 l       .debug_str	00000000 
0001701c l       .debug_str	00000000 
0001704a l       .debug_str	00000000 
000170af l       .debug_str	00000000 
000170d9 l       .debug_str	00000000 
00017145 l       .debug_str	00000000 
0001714f l       .debug_str	00000000 
0001717d l       .debug_str	00000000 
000171b2 l       .debug_str	00000000 
0005c240 l       .debug_str	00000000 
000171b6 l       .debug_str	00000000 
000171ba l       .debug_str	00000000 
000171bf l       .debug_str	00000000 
000171c4 l       .debug_str	00000000 
000171cc l       .debug_str	00000000 
000171d4 l       .debug_str	00000000 
000171dc l       .debug_str	00000000 
000171e4 l       .debug_str	00000000 
000171ec l       .debug_str	00000000 
000171f4 l       .debug_str	00000000 
00017224 l       .debug_str	00000000 
00017289 l       .debug_str	00000000 
000172b3 l       .debug_str	00000000 
000172e9 l       .debug_str	00000000 
000172ee l       .debug_str	00000000 
000172f3 l       .debug_str	00000000 
000172f8 l       .debug_str	00000000 
00017303 l       .debug_str	00000000 
00017308 l       .debug_str	00000000 
00017313 l       .debug_str	00000000 
00017318 l       .debug_str	00000000 
00017323 l       .debug_str	00000000 
00017328 l       .debug_str	00000000 
00017333 l       .debug_str	00000000 
00017337 l       .debug_str	00000000 
0001733c l       .debug_str	00000000 
0001736d l       .debug_str	00000000 
000173d3 l       .debug_str	00000000 
000173fe l       .debug_str	00000000 
00017433 l       .debug_str	00000000 
00017438 l       .debug_str	00000000 
0001743d l       .debug_str	00000000 
00016f12 l       .debug_str	00000000 
00016f05 l       .debug_str	00000000 
00017443 l       .debug_str	00000000 
00017448 l       .debug_str	00000000 
0001744e l       .debug_str	00000000 
00017453 l       .debug_str	00000000 
00017458 l       .debug_str	00000000 
0001745d l       .debug_str	00000000 
00017463 l       .debug_str	00000000 
00017468 l       .debug_str	00000000 
0001746d l       .debug_str	00000000 
00017478 l       .debug_str	00000000 
0001747e l       .debug_str	00000000 
000174ae l       .debug_str	00000000 
00017513 l       .debug_str	00000000 
0001753d l       .debug_str	00000000 
00016bb8 l       .debug_str	00000000 
00017573 l       .debug_str	00000000 
00017577 l       .debug_str	00000000 
0001757b l       .debug_str	00000000 
00017581 l       .debug_str	00000000 
000175b2 l       .debug_str	00000000 
00017618 l       .debug_str	00000000 
00017643 l       .debug_str	00000000 
00017679 l       .debug_str	00000000 
0001767e l       .debug_str	00000000 
00017684 l       .debug_str	00000000 
0001768a l       .debug_str	00000000 
0001768f l       .debug_str	00000000 
00017694 l       .debug_str	00000000 
00017699 l       .debug_str	00000000 
000176a3 l       .debug_str	00000000 
000176d4 l       .debug_str	00000000 
0001773a l       .debug_str	00000000 
00017765 l       .debug_str	00000000 
000177a4 l       .debug_str	00000000 
000177e4 l       .debug_str	00000000 
000177ea l       .debug_str	00000000 
0001782a l       .debug_str	00000000 
00017830 l       .debug_str	00000000 
0001786f l       .debug_str	00000000 
00017874 l       .debug_str	00000000 
000178bb l       .debug_str	00000000 
000178c9 l       .debug_str	00000000 
00017912 l       .debug_str	00000000 
00017922 l       .debug_str	00000000 
00017961 l       .debug_str	00000000 
00017968 l       .debug_str	00000000 
000179a7 l       .debug_str	00000000 
000179ae l       .debug_str	00000000 
000179ef l       .debug_str	00000000 
000179f9 l       .debug_str	00000000 
00017a3f l       .debug_str	00000000 
00017a4d l       .debug_str	00000000 
00017a95 l       .debug_str	00000000 
00017ae0 l       .debug_str	00000000 
00017aec l       .debug_str	00000000 
00017b30 l       .debug_str	00000000 
00017b77 l       .debug_str	00000000 
00017bb0 l       .debug_str	00000000 
000599b6 l       .debug_str	00000000 
00017be6 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00017c1c l       .debug_str	00000000 
00017c52 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
00017c88 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
00017cbe l       .debug_str	00000000 
00017d2d l       .debug_str	00000000 
00017d98 l       .debug_str	00000000 
00017dff l       .debug_str	00000000 
00017e67 l       .debug_str	00000000 
00017ed2 l       .debug_str	00000000 
00017f3e l       .debug_str	00000000 
00017fa5 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
0001800d l       .debug_str	00000000 
00018072 l       .debug_str	00000000 
000180da l       .debug_str	00000000 
0001813f l       .debug_str	00000000 
000181a6 l       .debug_str	00000000 
0001820a l       .debug_str	00000000 
00018278 l       .debug_str	00000000 
000182e3 l       .debug_str	00000000 
0001834d l       .debug_str	00000000 
000183b4 l       .debug_str	00000000 
00018415 l       .debug_str	00000000 
00009845 l       .debug_str	00000000 
0000a931 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
0001843c l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00018443 l       .debug_str	00000000 
00018450 l       .debug_str	00000000 
0001845b l       .debug_str	00000000 
0000f063 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00018466 l       .debug_str	00000000 
000184b8 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
000184c3 l       .debug_str	00000000 
000184e1 l       .debug_str	00000000 
00001392 l       .debug_str	00000000 
0001850c l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00018516 l       .debug_str	00000000 
00018550 l       .debug_str	00000000 
00018589 l       .debug_str	00000000 
00018598 l       .debug_str	00000000 
000185db l       .debug_str	00000000 
00058755 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
0005a17a l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0001861d l       .debug_str	00000000 
00018639 l       .debug_str	00000000 
0005ce0c l       .debug_str	00000000 
00018656 l       .debug_str	00000000 
0000fd70 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
0001865e l       .debug_str	00000000 
000323b2 l       .debug_str	00000000 
00018682 l       .debug_str	00000000 
00000032 l       .debug_str	00000000 
000186a0 l       .debug_str	00000000 
000186b5 l       .debug_str	00000000 
000186ab l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
00033ab8 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0005732b l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
00058540 l       .debug_str	00000000 
000186d0 l       .debug_str	00000000 
0005d14d l       .debug_str	00000000 
000186d6 l       .debug_str	00000000 
00001dd6 l       .debug_str	00000000 
0001b757 l       .debug_str	00000000 
000186f7 l       .debug_str	00000000 
0000253a l       .debug_str	00000000 
00018716 l       .debug_str	00000000 
0000287d l       .debug_str	00000000 
00018735 l       .debug_str	00000000 
00018756 l       .debug_str	00000000 
0000acbd l       .debug_str	00000000 
00018775 l       .debug_str	00000000 
0001879f l       .debug_str	00000000 
00058ca1 l       .debug_str	00000000 
000187ae l       .debug_str	00000000 
000187ce l       .debug_str	00000000 
000187dd l       .debug_str	00000000 
000187e8 l       .debug_str	00000000 
00018803 l       .debug_str	00000000 
00018820 l       .debug_str	00000000 
0001883b l       .debug_str	00000000 
00018856 l       .debug_str	00000000 
00018871 l       .debug_str	00000000 
0001888c l       .debug_str	00000000 
000188a7 l       .debug_str	00000000 
000188c6 l       .debug_str	00000000 
000188e1 l       .debug_str	00000000 
000188fd l       .debug_str	00000000 
00018918 l       .debug_str	00000000 
00018934 l       .debug_str	00000000 
00018950 l       .debug_str	00000000 
00018976 l       .debug_str	00000000 
0001899a l       .debug_str	00000000 
000189be l       .debug_str	00000000 
000189e1 l       .debug_str	00000000 
00018a0b l       .debug_str	00000000 
00018a31 l       .debug_str	00000000 
00018a51 l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
00018a7f l       .debug_str	00000000 
00018aa9 l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
0000a3f2 l       .debug_str	00000000 
00018ad0 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
0000a48e l       .debug_str	00000000 
0000a49e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00012511 l       .debug_str	00000000 
00012568 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000b7d l       .debug_str	00000000 
000125b4 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000125b8 l       .debug_str	00000000 
00012990 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00018646 l       .debug_str	00000000 
000125e3 l       .debug_str	00000000 
000125c3 l       .debug_str	00000000 
0001869b l       .debug_str	00000000 
00018687 l       .debug_str	00000000 
000125e8 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000125f9 l       .debug_str	00000000 
000125fd l       .debug_str	00000000 
0001260c l       .debug_str	00000000 
00012616 l       .debug_str	00000000 
00012627 l       .debug_str	00000000 
00012630 l       .debug_str	00000000 
0001263b l       .debug_str	00000000 
00012642 l       .debug_str	00000000 
0001264f l       .debug_str	00000000 
00012656 l       .debug_str	00000000 
00018502 l       .debug_str	00000000 
000184e6 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
0001265e l       .debug_str	00000000 
00012665 l       .debug_str	00000000 
0001266b l       .debug_str	00000000 
0000d632 l       .debug_str	00000000 
00018a6f l       .debug_str	00000000 
00012679 l       .debug_str	00000000 
00012682 l       .debug_str	00000000 
0001268a l       .debug_str	00000000 
00018a9b l       .debug_str	00000000 
00018791 l       .debug_str	00000000 
00012695 l       .debug_str	00000000 
0001269a l       .debug_str	00000000 
0001269f l       .debug_str	00000000 
00018aed l       .debug_str	00000000 
000126a8 l       .debug_str	00000000 
000126b0 l       .debug_str	00000000 
00018994 l       .debug_str	00000000 
000126bd l       .debug_str	00000000 
000126c1 l       .debug_str	00000000 
000189b8 l       .debug_str	00000000 
00018ac9 l       .debug_str	00000000 
000126c5 l       .debug_str	00000000 
000189dc l       .debug_str	00000000 
000126cf l       .debug_str	00000000 
000126d9 l       .debug_str	00000000 
00018a01 l       .debug_str	00000000 
000126e2 l       .debug_str	00000000 
00018a29 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000d51 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
000126f5 l       .debug_str	00000000 
0001271e l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
00018592 l       .debug_str	00000000 
00012747 l       .debug_str	00000000 
00012770 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
000127a5 l       .debug_str	00000000 
000127b9 l       .debug_str	00000000 
000127cc l       .debug_str	00000000 
00012818 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00012826 l       .debug_str	00000000 
00012838 l       .debug_str	00000000 
00012849 l       .debug_str	00000000 
00012895 l       .debug_str	00000000 
000128a1 l       .debug_str	00000000 
000128b3 l       .debug_str	00000000 
000128c4 l       .debug_str	00000000 
00012910 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
0001862a l       .debug_str	00000000 
0005929f l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
00014b36 l       .debug_str	00000000 
00000b86 l       .debug_str	00000000 
00009f5b l       .debug_str	00000000 
00009f9c l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0001292e l       .debug_str	00000000 
00012975 l       .debug_str	00000000 
00012934 l       .debug_str	00000000 
00013d8f l       .debug_str	00000000 
0001296d l       .debug_str	00000000 
00012987 l       .debug_str	00000000 
000129f6 l       .debug_str	00000000 
00012999 l       .debug_str	00000000 
000129d7 l       .debug_str	00000000 
000129e2 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
00031d8c l       .debug_str	00000000 
000129fe l       .debug_str	00000000 
000186f1 l       .debug_str	00000000 
00012a15 l       .debug_str	00000000 
00012a4e l       .debug_str	00000000 
00012ab2 l       .debug_str	00000000 
00012a57 l       .debug_str	00000000 
00012a94 l       .debug_str	00000000 
00012a9e l       .debug_str	00000000 
00012aba l       .debug_str	00000000 
00012abe l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00012acb l       .debug_str	00000000 
00012b0a l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00018712 l       .debug_str	00000000 
00012b20 l       .debug_str	00000000 
00012b2e l       .debug_str	00000000 
00012b6d l       .debug_str	00000000 
00012b71 l       .debug_str	00000000 
00012b86 l       .debug_str	00000000 
00018731 l       .debug_str	00000000 
00012bc5 l       .debug_str	00000000 
00018771 l       .debug_str	00000000 
00012c02 l       .debug_str	00000000 
00012c0d l       .debug_str	00000000 
00012c17 l       .debug_str	00000000 
00018ac5 l       .debug_str	00000000 
00012c1c l       .debug_str	00000000 
00012c2a l       .debug_str	00000000 
00012c69 l       .debug_str	00000000 
00012c79 l       .debug_str	00000000 
00012cb8 l       .debug_str	00000000 
00012cc8 l       .debug_str	00000000 
00012d07 l       .debug_str	00000000 
00012d19 l       .debug_str	00000000 
00000396 l       .debug_str	00000000 
00012d58 l       .debug_str	00000000 
000587eb l       .debug_str	00000000 
00012d97 l       .debug_str	00000000 
00012e17 l       .debug_str	00000000 
00012dd6 l       .debug_str	00000000 
00009cf1 l       .debug_str	00000000 
00012e0f l       .debug_str	00000000 
00012e82 l       .debug_str	00000000 
00012e28 l       .debug_str	00000000 
00012e65 l       .debug_str	00000000 
00012e6e l       .debug_str	00000000 
00012e89 l       .debug_str	00000000 
00019971 l       .debug_str	00000000 
00012ec2 l       .debug_str	00000000 
00012f00 l       .debug_str	00000000 
000187c9 l       .debug_str	00000000 
00012f0a l       .debug_str	00000000 
00012f1a l       .debug_str	00000000 
00012f59 l       .debug_str	00000000 
00012f6b l       .debug_str	00000000 
00012faa l       .debug_str	00000000 
00012fb9 l       .debug_str	00000000 
00012ff8 l       .debug_str	00000000 
00013009 l       .debug_str	00000000 
00013048 l       .debug_str	00000000 
00013059 l       .debug_str	00000000 
000248c9 l       .debug_str	00000000 
00013098 l       .debug_str	00000000 
000130d7 l       .debug_str	00000000 
000187ff l       .debug_str	00000000 
0001886d l       .debug_str	00000000 
00018888 l       .debug_str	00000000 
000188c2 l       .debug_str	00000000 
000188dd l       .debug_str	00000000 
000188f8 l       .debug_str	00000000 
0001894b l       .debug_str	00000000 
000130ed l       .debug_str	00000000 
00033969 l       .debug_str	00000000 
0001896e l       .debug_str	00000000 
000130f9 l       .debug_str	00000000 
00018a4c l       .debug_str	00000000 
000130fe l       .debug_str	00000000 
00013188 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
00013196 l       .debug_str	00000000 
000131de l       .debug_str	00000000 
00013208 l       .debug_str	00000000 
00013250 l       .debug_str	00000000 
00013258 l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
000132a9 l       .debug_str	00000000 
000132fe l       .debug_str	00000000 
00013308 l       .debug_str	00000000 
00013346 l       .debug_str	00000000 
0001335f l       .debug_str	00000000 
0001339d l       .debug_str	00000000 
000133b8 l       .debug_str	00000000 
000133f6 l       .debug_str	00000000 
0001340f l       .debug_str	00000000 
0001344d l       .debug_str	00000000 
00013465 l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
000134ca l       .debug_str	00000000 
000134fb l       .debug_str	00000000 
00013504 l       .debug_str	00000000 
00013560 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
000135bd l       .debug_str	00000000 
000135f0 l       .debug_str	00000000 
00013610 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
00013660 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
00013692 l       .debug_str	00000000 
000136b8 l       .debug_str	00000000 
000136c4 l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
0001370b l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
0000ac49 l       .debug_str	00000000 
00013756 l       .debug_str	00000000 
00013786 l       .debug_str	00000000 
000137ae l       .debug_str	00000000 
000137de l       .debug_str	00000000 
00013813 l       .debug_str	00000000 
00001324 l       .debug_str	00000000 
00013843 l       .debug_str	00000000 
00013873 l       .debug_str	00000000 
00013887 l       .debug_str	00000000 
000138b7 l       .debug_str	00000000 
000138c9 l       .debug_str	00000000 
000138f9 l       .debug_str	00000000 
0001390c l       .debug_str	00000000 
0001393d l       .debug_str	00000000 
00013951 l       .debug_str	00000000 
00013982 l       .debug_str	00000000 
00013996 l       .debug_str	00000000 
000139c7 l       .debug_str	00000000 
000139da l       .debug_str	00000000 
00013a10 l       .debug_str	00000000 
00013a2b l       .debug_str	00000000 
00013a62 l       .debug_str	00000000 
00010eaa l     F .text	0000006e _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E
00010f18 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00019fd2 l       .debug_str	00000000 
0001905e l       .debug_str	00000000 
00019088 l       .debug_str	00000000 
000190d6 l       .debug_str	00000000 
000190de l       .debug_str	00000000 
0000abea l       .debug_str	00000000 
0001912b l       .debug_str	00000000 
00019185 l       .debug_str	00000000 
00019193 l       .debug_str	00000000 
000191e6 l       .debug_str	00000000 
000191ee l       .debug_str	00000000 
000132fe l       .debug_str	00000000 
00019243 l       .debug_str	00000000 
0001339d l       .debug_str	00000000 
00019281 l       .debug_str	00000000 
000192e0 l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00019345 l       .debug_str	00000000 
00019376 l       .debug_str	00000000 
00019381 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
000193b3 l       .debug_str	00000000 
000193e1 l       .debug_str	00000000 
000193f3 l       .debug_str	00000000 
000136b8 l       .debug_str	00000000 
00019419 l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
00019460 l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
0000ac49 l       .debug_str	00000000 
000194ab l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
000194b1 l       .debug_str	00000000 
0001953d l       .debug_str	00000000 
00019558 l       .debug_str	00000000 
00019588 l       .debug_str	00000000 
000195bd l       .debug_str	00000000 
000195ed l       .debug_str	00000000 
00019603 l       .debug_str	00000000 
00013a10 l       .debug_str	00000000 
00019639 l       .debug_str	00000000 
00013b1f l       .debug_str	00000000 
00019673 l       .debug_str	00000000 
000196af l       .debug_str	00000000 
00013c02 l       .debug_str	00000000 
000196d5 l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
000196fc l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
0001974a l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
0001979b l       .debug_str	00000000 
000197ed l       .debug_str	00000000 
000197f9 l       .debug_str	00000000 
00019844 l       .debug_str	00000000 
00019856 l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
00019899 l       .debug_str	00000000 
000198f5 l       .debug_str	00000000 
00019906 l       .debug_str	00000000 
00019965 l       .debug_str	00000000 
00019979 l       .debug_str	00000000 
000199cf l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
00019a64 l       .debug_str	00000000 
00019afe l       .debug_str	00000000 
00019b0f l       .debug_str	00000000 
00019b34 l       .debug_str	00000000 
00019bdd l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00019bee l       .debug_str	00000000 
00019c76 l       .debug_str	00000000 
00019c2d l       .debug_str	00000000 
00019c71 l       .debug_str	00000000 
00019cbb l       .debug_str	00000000 
00019cfc l       .debug_str	00000000 
00019d21 l       .debug_str	00000000 
00019d72 l       .debug_str	00000000 
00019db7 l       .debug_str	00000000 
00019e0a l       .debug_str	00000000 
00019e6b l       .debug_str	00000000 
00019ed2 l       .debug_str	00000000 
00009c6c l       .debug_str	00000000 
00019f19 l       .debug_str	00000000 
00019f64 l       .debug_str	00000000 
00019f71 l       .debug_str	00000000 
0001a04b l       .debug_str	00000000 
0001a043 l       .debug_str	00000000 
0001a053 l       .debug_str	00000000 
00014255 l       .debug_str	00000000 
0001a06f l       .debug_str	00000000 
0001a0e4 l       .debug_str	00000000 
0001a10f l       .debug_str	00000000 
0001a188 l       .debug_str	00000000 
0001a192 l       .debug_str	00000000 
0001a1b8 l       .debug_str	00000000 
0001a1f1 l       .debug_str	00000000 
000109f7 l       .debug_str	00000000 
0001a209 l       .debug_str	00000000 
0001a242 l       .debug_str	00000000 
0001a27a l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0001a2b3 l       .debug_str	00000000 
0001a2ee l       .debug_str	00000000 
0001a332 l       .debug_str	00000000 
0001a378 l       .debug_str	00000000 
0001a3b4 l       .debug_str	00000000 
0001a3dc l       .debug_str	00000000 
0001a418 l       .debug_str	00000000 
0001a43c l       .debug_str	00000000 
0001a499 l       .debug_str	00000000 
0001a4ad l       .debug_str	00000000 
000145f8 l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
0001a4fe l       .debug_str	00000000 
0001a54f l       .debug_str	00000000 
0001a566 l       .debug_str	00000000 
0001a5b7 l       .debug_str	00000000 
0001a5d5 l       .debug_str	00000000 
00014655 l       .debug_str	00000000 
0001a626 l       .debug_str	00000000 
000146bf l       .debug_str	00000000 
0001a67e l       .debug_str	00000000 
0001a6e1 l       .debug_str	00000000 
0001a70c l       .debug_str	00000000 
0001a76f l       .debug_str	00000000 
0001a7e4 l       .debug_str	00000000 
0001a848 l       .debug_str	00000000 
0001a852 l       .debug_str	00000000 
0001a8bd l       .debug_str	00000000 
0001a8cc l       .debug_str	00000000 
0001a938 l       .debug_str	00000000 
0001a96a l       .debug_str	00000000 
0001a990 l       .debug_str	00000000 
0001a9ff l       .debug_str	00000000 
0001aa1f l       .debug_str	00000000 
0001aa8f l       .debug_str	00000000 
0001aab0 l       .debug_str	00000000 
0001232f l       .debug_str	00000000 
0001ab24 l       .debug_str	00000000 
0001aba4 l       .debug_str	00000000 
0001abea l       .debug_str	00000000 
0001ac13 l       .debug_str	00000000 
0001ac1a l       .debug_str	00000000 
0001ac52 l       .debug_str	00000000 
0001ac91 l       .debug_str	00000000 
0001ac98 l       .debug_str	00000000 
0001ad11 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
0001ada8 l       .debug_str	00000000 
0001ae26 l       .debug_str	00000000 
0001ae30 l       .debug_str	00000000 
0001aebe l       .debug_str	00000000 
0001af6a l       .debug_str	00000000 
0001afb1 l       .debug_str	00000000 
0001afbe l       .debug_str	00000000 
0001b00b l       .debug_str	00000000 
0001b01e l       .debug_str	00000000 
0001b070 l       .debug_str	00000000 
0001b0e0 l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
0001b140 l       .debug_str	00000000 
0001b151 l       .debug_str	00000000 
0001b1b6 l       .debug_str	00000000 
0001b1e6 l       .debug_str	00000000 
0001b1ef l       .debug_str	00000000 
0001b22b l       .debug_str	00000000 
0001b23f l       .debug_str	00000000 
0001b27a l       .debug_str	00000000 
0001b2c0 l       .debug_str	00000000 
0001b2de l       .debug_str	00000000 
0001b30e l       .debug_str	00000000 
0001b317 l       .debug_str	00000000 
0001b351 l       .debug_str	00000000 
0001b363 l       .debug_str	00000000 
0001b391 l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
0001b398 l       .debug_str	00000000 
0001b3a4 l       .debug_str	00000000 
0001b3ae l       .debug_str	00000000 
0001b3b8 l       .debug_str	00000000 
0001b3db l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
0001b430 l       .debug_str	00000000 
0001b490 l       .debug_str	00000000 
0001b49c l       .debug_str	00000000 
0001b4ec l       .debug_str	00000000 
0001b54f l       .debug_str	00000000 
0001b5b6 l       .debug_str	00000000 
0001b625 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00011dfc l       .debug_str	00000000 
0001b6b5 l       .debug_str	00000000 
00058540 l       .debug_str	00000000 
00010270 l       .debug_str	00000000 
0000acc7 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
0001843c l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00018443 l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
00018450 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0001b6dc l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
000184b8 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0001b730 l       .debug_str	00000000 
0001b75b l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00018516 l       .debug_str	00000000 
00018550 l       .debug_str	00000000 
00018589 l       .debug_str	00000000 
00018598 l       .debug_str	00000000 
000185db l       .debug_str	00000000 
00058755 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
0005a17a l       .debug_str	00000000 
0001865e l       .debug_str	00000000 
0001b767 l       .debug_str	00000000 
0001ae2b l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
0001b787 l       .debug_str	00000000 
00042e7e l       .debug_str	00000000 
0001b7c2 l       .debug_str	00000000 
0001b7c9 l       .debug_str	00000000 
00033ab8 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
0001b80a l       .debug_str	00000000 
0001b851 l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
00024cfb l       .debug_str	00000000 
0001b82b l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
0001b84d l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
0000a3f2 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00018afb l       .debug_str	00000000 
00018b53 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00018ba0 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00018baa l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00018bb6 l       .debug_str	00000000 
0001b741 l       .debug_str	00000000 
0001b735 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00018bc7 l       .debug_str	00000000 
00018bcc l       .debug_str	00000000 
00018bd2 l       .debug_str	00000000 
0001bb1e l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
0001188b l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00018bda l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00018be0 l       .debug_str	00000000 
0001271e l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
00018592 l       .debug_str	00000000 
00018c09 l       .debug_str	00000000 
00012770 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
000127a5 l       .debug_str	00000000 
000127b9 l       .debug_str	00000000 
00018c32 l       .debug_str	00000000 
00012818 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
0001b7e4 l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00011893 l       .debug_str	00000000 
00018c7e l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
0001a1aa l       .debug_str	00000000 
0001b79a l       .debug_str	00000000 
0001189d l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0001b649 l       .debug_str	00000000 
0001b5da l       .debug_str	00000000 
00018c84 l       .debug_str	00000000 
00018c8a l       .debug_str	00000000 
00018cb3 l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
0001a193 l       .debug_str	00000000 
00018cbf l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
000146d5 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000146e0 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00018cf3 l       .debug_str	00000000 
00018d1d l       .debug_str	00000000 
000259f6 l       .debug_str	00000000 
00018d21 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
00018d2a l       .debug_str	00000000 
00018d6c l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00018d7f l       .debug_str	00000000 
0005bca0 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0004752d l       .debug_str	00000000 
00018d9a l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00018da9 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
0001b837 l       .debug_str	00000000 
0001b14c l       .debug_str	00000000 
00018db8 l       .debug_str	00000000 
00018e3e l       .debug_str	00000000 
00018e48 l       .debug_str	00000000 
00018eda l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
00018f20 l       .debug_str	00000000 
00018fb4 l       .debug_str	00000000 
00019016 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
0001c1ff l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0000d6d1 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0000af03 l       .debug_str	00000000 
0000af68 l       .debug_str	00000000 
0001b90a l       .debug_str	00000000 
0001b913 l       .debug_str	00000000 
0001b91b l       .debug_str	00000000 
0001b924 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0001b931 l       .debug_str	00000000 
0001b941 l       .debug_str	00000000 
0001b952 l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0001b963 l       .debug_str	00000000 
0000d549 l       .debug_str	00000000 
0000d557 l       .debug_str	00000000 
0001e214 l       .debug_str	00000000 
0001b96c l       .debug_str	00000000 
0001b972 l       .debug_str	00000000 
0001b97d l       .debug_str	00000000 
0001b987 l       .debug_str	00000000 
0001b991 l       .debug_str	00000000 
0000a587 l       .debug_str	00000000 
0001b9d9 l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
0001ba21 l       .debug_str	00000000 
0001ba69 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
0001ba72 l       .debug_str	00000000 
0001ba9b l       .debug_str	00000000 
0001baa4 l       .debug_str	00000000 
0001bb01 l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
0001bb27 l       .debug_str	00000000 
0001bb4f l       .debug_str	00000000 
0001bb81 l       .debug_str	00000000 
00019376 l       .debug_str	00000000 
0001bbb2 l       .debug_str	00000000 
0001bc0f l       .debug_str	00000000 
0001bc6c l       .debug_str	00000000 
0001bcc9 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
0001bcfb l       .debug_str	00000000 
0001bd40 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0001bd4c l       .debug_str	00000000 
000562a0 l       .debug_str	00000000 
0001bd88 l       .debug_str	00000000 
0000d682 l       .debug_str	00000000 
0001bdcc l       .debug_str	00000000 
0001be13 l       .debug_str	00000000 
0001be21 l       .debug_str	00000000 
0001be68 l       .debug_str	00000000 
0001be76 l       .debug_str	00000000 
0001beb6 l       .debug_str	00000000 
0001bebe l       .debug_str	00000000 
0000d709 l       .debug_str	00000000 
0001becb l       .debug_str	00000000 
0001bf06 l       .debug_str	00000000 
0001bf44 l       .debug_str	00000000 
0001bf74 l       .debug_str	00000000 
0001bf88 l       .debug_str	00000000 
0001bfb8 l       .debug_str	00000000 
0001bfcc l       .debug_str	00000000 
00013873 l       .debug_str	00000000 
0001bffc l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
0001c047 l       .debug_str	00000000 
0001c09e l       .debug_str	00000000 
0001c0ad l       .debug_str	00000000 
0001c0f8 l       .debug_str	00000000 
0000ab32 l       .debug_str	00000000 
0001c16f l       .debug_str	00000000 
0001c1f4 l       .debug_str	00000000 
0000abea l       .debug_str	00000000 
0001c276 l       .debug_str	00000000 
0001c2fb l       .debug_str	00000000 
0001c306 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
00025169 l       .debug_str	00000000 
0001c406 l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
0001c49b l       .debug_str	00000000 
0001c532 l       .debug_str	00000000 
0001c5cd l       .debug_str	00000000 
0001c662 l       .debug_str	00000000 
0001c6f9 l       .debug_str	00000000 
0001c794 l       .debug_str	00000000 
0001c85c l       .debug_str	00000000 
0001c867 l       .debug_str	00000000 
0001c933 l       .debug_str	00000000 
0001c9c3 l       .debug_str	00000000 
0001c9cf l       .debug_str	00000000 
0001ca75 l       .debug_str	00000000 
0001ca81 l       .debug_str	00000000 
0001cb25 l       .debug_str	00000000 
0001cbc7 l       .debug_str	00000000 
0001cc6b l       .debug_str	00000000 
0001ccbf l       .debug_str	00000000 
0001cd14 l       .debug_str	00000000 
0001cd69 l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
0001cdec l       .debug_str	00000000 
0001ce70 l       .debug_str	00000000 
0001cef4 l       .debug_str	00000000 
0000287d l       .debug_str	00000000 
0001cf3b l       .debug_str	00000000 
00002883 l       .debug_str	00000000 
0001cf82 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0001cfc9 l       .debug_str	00000000 
0001d047 l       .debug_str	00000000 
0001d0c6 l       .debug_str	00000000 
0001d161 l       .debug_str	00000000 
0001d1f5 l       .debug_str	00000000 
0001d242 l       .debug_str	00000000 
0001d24e l       .debug_str	00000000 
0001d2b1 l       .debug_str	00000000 
0001d2f9 l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
0001d301 l       .debug_str	00000000 
0001d395 l       .debug_str	00000000 
0001d3fb l       .debug_str	00000000 
0001d48c l       .debug_str	00000000 
0001d52b l       .debug_str	00000000 
0001d5bc l       .debug_str	00000000 
0001d65b l       .debug_str	00000000 
0001d6fd l       .debug_str	00000000 
0001d78e l       .debug_str	00000000 
0001d83c l       .debug_str	00000000 
0001d8ec l       .debug_str	00000000 
0001d9a0 l       .debug_str	00000000 
0001da93 l       .debug_str	00000000 
0001da9e l       .debug_str	00000000 
0001db95 l       .debug_str	00000000 
0001dc41 l       .debug_str	00000000 
0001dc4b l       .debug_str	00000000 
0001dcbd l       .debug_str	00000000 
0001dd32 l       .debug_str	00000000 
0001dda5 l       .debug_str	00000000 
0001de16 l       .debug_str	00000000 
0001de89 l       .debug_str	00000000 
0001df00 l       .debug_str	00000000 
0001df75 l       .debug_str	00000000 
0001dfea l       .debug_str	00000000 
0001e05a l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000a811 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
0000a931 l       .debug_str	00000000 
0001e0e6 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0001e0ec l       .debug_str	00000000 
000190d6 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
0001b6dc l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
0001e0ef l       .debug_str	00000000 
0001e0f9 l       .debug_str	00000000 
0001850c l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0001e103 l       .debug_str	00000000 
0001e134 l       .debug_str	00000000 
0005ddbb l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0001e169 l       .debug_str	00000000 
0001e173 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
0001e17d l       .debug_str	00000000 
0001e186 l       .debug_str	00000000 
0001e1b5 l       .debug_str	00000000 
0001e1c2 l       .debug_str	00000000 
0001e1c5 l       .debug_str	00000000 
0001e1c8 l       .debug_str	00000000 
0001e1cb l       .debug_str	00000000 
0001e1ce l       .debug_str	00000000 
0001e1d1 l       .debug_str	00000000 
0001e1d4 l       .debug_str	00000000 
0001e222 l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
00010905 l       .debug_str	00000000 
0001e292 l       .debug_str	00000000 
0001e26c l       .debug_str	00000000 
0001e2c5 l       .debug_str	00000000 
0001e2a0 l       .debug_str	00000000 
0001e2f6 l       .debug_str	00000000 
0001e2d2 l       .debug_str	00000000 
0001e327 l       .debug_str	00000000 
0001e302 l       .debug_str	00000000 
0001e35b l       .debug_str	00000000 
0001e334 l       .debug_str	00000000 
0001e390 l       .debug_str	00000000 
0001e36a l       .debug_str	00000000 
0001e3c4 l       .debug_str	00000000 
0001e39e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0001b855 l       .debug_str	00000000 
0001b8b5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001e0fe l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00018bc7 l       .debug_str	00000000 
00018bcc l       .debug_str	00000000 
00018bd2 l       .debug_str	00000000 
0001bb1e l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00034d2e l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
000112c8 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00014655 l       .debug_str	00000000 
0001e8a1 l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
0000ac49 l       .debug_str	00000000 
0001e8ec l       .debug_str	00000000 
00013a10 l       .debug_str	00000000 
0001e922 l       .debug_str	00000000 
00013b1f l       .debug_str	00000000 
0001e95c l       .debug_str	00000000 
0001e998 l       .debug_str	00000000 
00013c02 l       .debug_str	00000000 
0001e9be l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
0001e9e5 l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0001ea33 l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
0001ea84 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0001ead6 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0001eb2b l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
0001ebc0 l       .debug_str	00000000 
00014100 l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0001ec0e l       .debug_str	00000000 
0001ec5f l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
0001ec77 l       .debug_str	00000000 
0001eccc l       .debug_str	00000000 
00018656 l       .debug_str	00000000 
0001ece8 l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
0001ed2e l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
0001ed77 l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
0001ede6 l       .debug_str	00000000 
000145f8 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0001ee37 l       .debug_str	00000000 
0001ee88 l       .debug_str	00000000 
000146bf l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
000146d5 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000146e0 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
0001eee0 l       .debug_str	00000000 
0001476c l       .debug_str	00000000 
0001ef43 l       .debug_str	00000000 
0001efa6 l       .debug_str	00000000 
0001efaf l       .debug_str	00000000 
0001f01c l       .debug_str	00000000 
0001f02e l       .debug_str	00000000 
00014928 l       .debug_str	00000000 
0001f09f l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
0001f0ff l       .debug_str	00000000 
0001f132 l       .debug_str	00000000 
0001f19c l       .debug_str	00000000 
0001f1cf l       .debug_str	00000000 
0001f1d4 l       .debug_str	00000000 
0001f238 l       .debug_str	00000000 
0005af80 l       .debug_str	00000000 
0001f293 l       .debug_str	00000000 
0001f2cf l       .debug_str	00000000 
0001f2dd l       .debug_str	00000000 
0001f30c l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
0001843c l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00018443 l       .debug_str	00000000 
00018450 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
000184b8 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00018516 l       .debug_str	00000000 
00018550 l       .debug_str	00000000 
00018589 l       .debug_str	00000000 
00018598 l       .debug_str	00000000 
000185db l       .debug_str	00000000 
00058755 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
0005a17a l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0001865e l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000323b2 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
0001f314 l       .debug_str	00000000 
0001f32c l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0001f349 l       .debug_str	00000000 
0001f2d7 l       .debug_str	00000000 
0001f362 l       .debug_str	00000000 
0001f37e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0001e3d2 l       .debug_str	00000000 
0001e427 l       .debug_str	00000000 
0001e471 l       .debug_str	00000000 
0001e478 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000fd85 l       .debug_str	00000000 
0001090d l       .debug_str	00000000 
00010918 l       .debug_str	00000000 
00010923 l       .debug_str	00000000 
0001f326 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001e480 l       .debug_str	00000000 
0001271e l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
00018592 l       .debug_str	00000000 
0001e4a9 l       .debug_str	00000000 
00012770 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
000127a5 l       .debug_str	00000000 
000127b9 l       .debug_str	00000000 
0001e4d2 l       .debug_str	00000000 
00012818 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0001e51e l       .debug_str	00000000 
0001e547 l       .debug_str	00000000 
0001e554 l       .debug_str	00000000 
0001e55e l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000056e l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0001e562 l       .debug_str	00000000 
000571fe l       .debug_str	00000000 
0001f378 l       .debug_str	00000000 
0001f342 l       .debug_str	00000000 
0001e56c l       .debug_str	00000000 
000132fe l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
0001e5c1 l       .debug_str	00000000 
0001344d l       .debug_str	00000000 
0001e5ff l       .debug_str	00000000 
0001339d l       .debug_str	00000000 
0001e63d l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0001e6a2 l       .debug_str	00000000 
0001e6d2 l       .debug_str	00000000 
0001e6f9 l       .debug_str	00000000 
000136b8 l       .debug_str	00000000 
0001e71f l       .debug_str	00000000 
0001e764 l       .debug_str	00000000 
0001e770 l       .debug_str	00000000 
0001e7b6 l       .debug_str	00000000 
0001e7c3 l       .debug_str	00000000 
0001e809 l       .debug_str	00000000 
0001e816 l       .debug_str	00000000 
0001e854 l       .debug_str	00000000 
0001e85a l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
000113d6 l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
00011440 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0001146a l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
000114a8 l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
00011578 l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
0001f402 l       .debug_str	00000000 
0001f400 l       .debug_str	00000000 
0001f453 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0001f387 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001f3a6 l       .debug_str	00000000 
0001f3f7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
000215d1 l       .debug_str	00000000 
00011e82 l       .debug_str	00000000 
00011e8a l       .debug_str	00000000 
00011e91 l       .debug_str	00000000 
000111ca l       .debug_str	00000000 
00024acf l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0001f77b l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
0001f77f l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
0001f7fd l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
00042e7e l       .debug_str	00000000 
0005c724 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0001f814 l       .debug_str	00000000 
00018cb3 l       .debug_str	00000000 
0001f83d l       .debug_str	00000000 
0001f86f l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
00034d2e l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
0000d6d1 l       .debug_str	00000000 
0001f881 l       .debug_str	00000000 
0001f8aa l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
00018592 l       .debug_str	00000000 
0001f8cf l       .debug_str	00000000 
00012770 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
0001f8f8 l       .debug_str	00000000 
0001f922 l       .debug_str	00000000 
0001f94b l       .debug_str	00000000 
0001f997 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
0001f9bb l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
00009f5b l       .debug_str	00000000 
00009f9c l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
0001f9c9 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
0001263e l       .debug_str	00000000 
0004b042 l       .debug_str	00000000 
00058d54 l       .debug_str	00000000 
0005a66d l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
00024731 l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00035938 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
00024a39 l       .debug_str	00000000 
000249e9 l       .debug_str	00000000 
0001f9de l       .debug_str	00000000 
0001f9e8 l       .debug_str	00000000 
000248c9 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
000246a1 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
000223b8 l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00024a72 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00024a51 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000246f2 l       .debug_str	00000000 
00018c84 l       .debug_str	00000000 
0001f9f1 l       .debug_str	00000000 
0001fa1a l       .debug_str	00000000 
0001fa28 l       .debug_str	00000000 
0001fa35 l       .debug_str	00000000 
0001fa48 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
0001fa61 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
0001fa76 l       .debug_str	00000000 
0001faf2 l       .debug_str	00000000 
0001fa89 l       .debug_str	00000000 
0001facb l       .debug_str	00000000 
0001fae0 l       .debug_str	00000000 
0005bca0 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0004752d l       .debug_str	00000000 
0001fafd l       .debug_str	00000000 
0001fb07 l       .debug_str	00000000 
0001fb39 l       .debug_str	00000000 
0001fb4d l       .debug_str	00000000 
0001fb62 l       .debug_str	00000000 
00023c9c l       .debug_str	00000000 
00023ea5 l       .debug_str	00000000 
0001fb69 l       .debug_str	00000000 
0001fb74 l       .debug_str	00000000 
0001fbf8 l       .debug_str	00000000 
0001fc26 l       .debug_str	00000000 
0001fcac l       .debug_str	00000000 
0003f0ec l       .debug_str	00000000 
0001fcd4 l       .debug_str	00000000 
0001fce5 l       .debug_str	00000000 
0001fd6f l       .debug_str	00000000 
0001fd8d l       .debug_str	00000000 
0001fe1b l       .debug_str	00000000 
0001fe42 l       .debug_str	00000000 
0001fed1 l       .debug_str	00000000 
0001ff19 l       .debug_str	00000000 
0001ff48 l       .debug_str	00000000 
0001ff90 l       .debug_str	00000000 
0001ffaf l       .debug_str	00000000 
0001fff7 l       .debug_str	00000000 
00020007 l       .debug_str	00000000 
0002004f l       .debug_str	00000000 
00020060 l       .debug_str	00000000 
000200a8 l       .debug_str	00000000 
000200b0 l       .debug_str	00000000 
000200f8 l       .debug_str	00000000 
00020102 l       .debug_str	00000000 
0002014a l       .debug_str	00000000 
00020164 l       .debug_str	00000000 
000201ac l       .debug_str	00000000 
000201c5 l       .debug_str	00000000 
0002020d l       .debug_str	00000000 
00020220 l       .debug_str	00000000 
00020268 l       .debug_str	00000000 
00020271 l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
000202b9 l       .debug_str	00000000 
00020303 l       .debug_str	00000000 
0002034e l       .debug_str	00000000 
0002038c l       .debug_str	00000000 
000203bd l       .debug_str	00000000 
0001344d l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
000203fb l       .debug_str	00000000 
00020424 l       .debug_str	00000000 
0002042f l       .debug_str	00000000 
00020454 l       .debug_str	00000000 
000204b3 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
0002051a l       .debug_str	00000000 
00020544 l       .debug_str	00000000 
0002056c l       .debug_str	00000000 
000205a4 l       .debug_str	00000000 
000205d5 l       .debug_str	00000000 
000205df l       .debug_str	00000000 
0002063c l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
0002066e l       .debug_str	00000000 
00020694 l       .debug_str	00000000 
000206b6 l       .debug_str	00000000 
000206dc l       .debug_str	00000000 
000206fe l       .debug_str	00000000 
00020727 l       .debug_str	00000000 
0002074c l       .debug_str	00000000 
00020794 l       .debug_str	00000000 
000207a1 l       .debug_str	00000000 
000207aa l       .debug_str	00000000 
00020834 l       .debug_str	00000000 
00011209 l       .debug_str	00000000 
00020851 l       .debug_str	00000000 
000208dd l       .debug_str	00000000 
000208fa l       .debug_str	00000000 
0002091a l       .debug_str	00000000 
0000d709 l       .debug_str	00000000 
00020921 l       .debug_str	00000000 
0002095c l       .debug_str	00000000 
0002098e l       .debug_str	00000000 
0002099f l       .debug_str	00000000 
000209da l       .debug_str	00000000 
00020a20 l       .debug_str	00000000 
00013873 l       .debug_str	00000000 
00020a50 l       .debug_str	00000000 
00020a80 l       .debug_str	00000000 
00020a9e l       .debug_str	00000000 
00020ace l       .debug_str	00000000 
00020ae1 l       .debug_str	00000000 
00020b11 l       .debug_str	00000000 
00020b26 l       .debug_str	00000000 
00020b56 l       .debug_str	00000000 
00020b72 l       .debug_str	00000000 
00020ba2 l       .debug_str	00000000 
00020bc0 l       .debug_str	00000000 
00020bf0 l       .debug_str	00000000 
00020c0b l       .debug_str	00000000 
00020c3b l       .debug_str	00000000 
00020c5f l       .debug_str	00000000 
00020c8f l       .debug_str	00000000 
00020cc9 l       .debug_str	00000000 
00020cf9 l       .debug_str	00000000 
00020d1e l       .debug_str	00000000 
00020d4e l       .debug_str	00000000 
00020d78 l       .debug_str	00000000 
00020dae l       .debug_str	00000000 
00020ddf l       .debug_str	00000000 
00020e19 l       .debug_str	00000000 
00020e4e l       .debug_str	00000000 
00020e8a l       .debug_str	00000000 
00020eb0 l       .debug_str	00000000 
00020ed2 l       .debug_str	00000000 
00020ef9 l       .debug_str	00000000 
00020f1c l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
00020f6a l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
00020fbb l       .debug_str	00000000 
0002100c l       .debug_str	00000000 
00021019 l       .debug_str	00000000 
0002106b l       .debug_str	00000000 
00021079 l       .debug_str	00000000 
00019844 l       .debug_str	00000000 
000210c4 l       .debug_str	00000000 
0002110f l       .debug_str	00000000 
00021123 l       .debug_str	00000000 
00021166 l       .debug_str	00000000 
00021173 l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
000211b6 l       .debug_str	00000000 
000198f5 l       .debug_str	00000000 
00021212 l       .debug_str	00000000 
00019965 l       .debug_str	00000000 
00021271 l       .debug_str	00000000 
000212c3 l       .debug_str	00000000 
00021315 l       .debug_str	00000000 
0002131f l       .debug_str	00000000 
00021374 l       .debug_str	00000000 
000213c9 l       .debug_str	00000000 
0002141f l       .debug_str	00000000 
000197ed l       .debug_str	00000000 
00021475 l       .debug_str	00000000 
000214b1 l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
000214ef l       .debug_str	00000000 
0002152a l       .debug_str	00000000 
00018450 l       .debug_str	00000000 
00021535 l       .debug_str	00000000 
0002157c l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00021592 l       .debug_str	00000000 
00021623 l       .debug_str	00000000 
00021639 l       .debug_str	00000000 
0002167e l       .debug_str	00000000 
00021698 l       .debug_str	00000000 
000216fb l       .debug_str	00000000 
0002171b l       .debug_str	00000000 
0002175a l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
000217bb l       .debug_str	00000000 
000217fa l       .debug_str	00000000 
000248c4 l       .debug_str	00000000 
00021821 l       .debug_str	00000000 
00021861 l       .debug_str	00000000 
00021894 l       .debug_str	00000000 
000218ab l       .debug_str	00000000 
000218f1 l       .debug_str	00000000 
0002190d l       .debug_str	00000000 
00021971 l       .debug_str	00000000 
00021993 l       .debug_str	00000000 
000219d5 l       .debug_str	00000000 
000219f6 l       .debug_str	00000000 
00021a38 l       .debug_str	00000000 
000598ad l       .debug_str	00000000 
00021a68 l       .debug_str	00000000 
00021aac l       .debug_str	00000000 
00021b01 l       .debug_str	00000000 
00021b45 l       .debug_str	00000000 
00021b9b l       .debug_str	00000000 
00021bdf l       .debug_str	00000000 
00021c57 l       .debug_str	00000000 
00021c9b l       .debug_str	00000000 
00021cdb l       .debug_str	00000000 
00021cf6 l       .debug_str	00000000 
00021d37 l       .debug_str	00000000 
00021d8d l       .debug_str	00000000 
00021dd1 l       .debug_str	00000000 
00021dfe l       .debug_str	00000000 
00021e43 l       .debug_str	00000000 
00021e8b l       .debug_str	00000000 
00021e9c l       .debug_str	00000000 
00021ee4 l       .debug_str	00000000 
00021ef5 l       .debug_str	00000000 
00016359 l       .debug_str	00000000 
00021f30 l       .debug_str	00000000 
00021f6c l       .debug_str	00000000 
00021f72 l       .debug_str	00000000 
00021fa8 l       .debug_str	00000000 
00021fbb l       .debug_str	00000000 
00021ff2 l       .debug_str	00000000 
00022006 l       .debug_str	00000000 
00022048 l       .debug_str	00000000 
00022067 l       .debug_str	00000000 
000220ac l       .debug_str	00000000 
000220c7 l       .debug_str	00000000 
0002212c l       .debug_str	00000000 
00022193 l       .debug_str	00000000 
0002219e l       .debug_str	00000000 
000221e4 l       .debug_str	00000000 
0002222a l       .debug_str	00000000 
00022234 l       .debug_str	00000000 
0002227b l       .debug_str	00000000 
00022286 l       .debug_str	00000000 
00009c6c l       .debug_str	00000000 
000222cd l       .debug_str	00000000 
00022316 l       .debug_str	00000000 
0002235f l       .debug_str	00000000 
00022398 l       .debug_str	00000000 
000223b3 l       .debug_str	00000000 
000223c2 l       .debug_str	00000000 
000223fb l       .debug_str	00000000 
00022420 l       .debug_str	00000000 
00022459 l       .debug_str	00000000 
00022492 l       .debug_str	00000000 
000224b8 l       .debug_str	00000000 
000224f1 l       .debug_str	00000000 
0002252f l       .debug_str	00000000 
00022569 l       .debug_str	00000000 
00022575 l       .debug_str	00000000 
000225b1 l       .debug_str	00000000 
000225c4 l       .debug_str	00000000 
00022600 l       .debug_str	00000000 
00022619 l       .debug_str	00000000 
00022656 l       .debug_str	00000000 
00022667 l       .debug_str	00000000 
000145f8 l       .debug_str	00000000 
000226b8 l       .debug_str	00000000 
0001f3f7 l       .debug_str	00000000 
00022709 l       .debug_str	00000000 
00022764 l       .debug_str	00000000 
000227c7 l       .debug_str	00000000 
000227e3 l       .debug_str	00000000 
00022843 l       .debug_str	00000000 
000228a3 l       .debug_str	00000000 
00022907 l       .debug_str	00000000 
00022922 l       .debug_str	00000000 
00022986 l       .debug_str	00000000 
00022991 l       .debug_str	00000000 
000229fb l       .debug_str	00000000 
00022a0a l       .debug_str	00000000 
00022a79 l       .debug_str	00000000 
00022a91 l       .debug_str	00000000 
00022b01 l       .debug_str	00000000 
00022b1a l       .debug_str	00000000 
00022b85 l       .debug_str	00000000 
00022b9a l       .debug_str	00000000 
00022c0a l       .debug_str	00000000 
00022c1f l       .debug_str	00000000 
00022c8f l       .debug_str	00000000 
00022ca1 l       .debug_str	00000000 
000038a3 l       .debug_str	00000000 
00022d12 l       .debug_str	00000000 
00022d83 l       .debug_str	00000000 
00022d99 l       .debug_str	00000000 
00022dab l       .debug_str	00000000 
00022e17 l       .debug_str	00000000 
00022e29 l       .debug_str	00000000 
00022e95 l       .debug_str	00000000 
00022ea4 l       .debug_str	00000000 
00022f0c l       .debug_str	00000000 
00022f16 l       .debug_str	00000000 
00022f8a l       .debug_str	00000000 
0000141f l       .debug_str	00000000 
00022f95 l       .debug_str	00000000 
0002300d l       .debug_str	00000000 
00023026 l       .debug_str	00000000 
0002309e l       .debug_str	00000000 
00023134 l       .debug_str	00000000 
00023150 l       .debug_str	00000000 
000231e6 l       .debug_str	00000000 
0002327c l       .debug_str	00000000 
00023312 l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
00023387 l       .debug_str	00000000 
000233fb l       .debug_str	00000000 
00023474 l       .debug_str	00000000 
000234f3 l       .debug_str	00000000 
00023504 l       .debug_str	00000000 
00023584 l       .debug_str	00000000 
000235e6 l       .debug_str	00000000 
00024b3c l       .debug_str	00000000 
00023637 l       .debug_str	00000000 
00023659 l       .debug_str	00000000 
00023686 l       .debug_str	00000000 
000236b5 l       .debug_str	00000000 
000236d7 l       .debug_str	00000000 
000236fe l       .debug_str	00000000 
00023727 l       .debug_str	00000000 
00023759 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
000237a9 l       .debug_str	00000000 
000237ef l       .debug_str	00000000 
00023802 l       .debug_str	00000000 
00023856 l       .debug_str	00000000 
000238c8 l       .debug_str	00000000 
0002393a l       .debug_str	00000000 
000239ac l       .debug_str	00000000 
000239fb l       .debug_str	00000000 
00023a29 l       .debug_str	00000000 
00023a34 l       .debug_str	00000000 
00023a8e l       .debug_str	00000000 
00023b06 l       .debug_str	00000000 
00023b7e l       .debug_str	00000000 
00023bd3 l       .debug_str	00000000 
00023c08 l       .debug_str	00000000 
0000a3cb l       .debug_str	00000000 
00023c33 l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
00023c62 l       .debug_str	00000000 
00023c92 l       .debug_str	00000000 
00023caa l       .debug_str	00000000 
00023cdb l       .debug_str	00000000 
00023d0d l       .debug_str	00000000 
00023d4c l       .debug_str	00000000 
00023d5f l       .debug_str	00000000 
00023d97 l       .debug_str	00000000 
00023da3 l       .debug_str	00000000 
00023dd3 l       .debug_str	00000000 
00023e04 l       .debug_str	00000000 
00023e0a l       .debug_str	00000000 
00023e37 l       .debug_str	00000000 
00023e68 l       .debug_str	00000000 
00023e9b l       .debug_str	00000000 
00023eb5 l       .debug_str	00000000 
00023ee9 l       .debug_str	00000000 
00023f1c l       .debug_str	00000000 
00056238 l       .debug_str	00000000 
00023f69 l       .debug_str	00000000 
00023fb2 l       .debug_str	00000000 
0005621b l       .debug_str	00000000 
00023ffd l       .debug_str	00000000 
00024025 l       .debug_str	00000000 
0002406b l       .debug_str	00000000 
00024071 l       .debug_str	00000000 
0002409f l       .debug_str	00000000 
000240bb l       .debug_str	00000000 
000240e8 l       .debug_str	00000000 
000240f8 l       .debug_str	00000000 
00024150 l       .debug_str	00000000 
000241a9 l       .debug_str	00000000 
000241cc l       .debug_str	00000000 
000241fb l       .debug_str	00000000 
0002420d l       .debug_str	00000000 
00024240 l       .debug_str	00000000 
00024256 l       .debug_str	00000000 
000242a3 l       .debug_str	00000000 
000242f6 l       .debug_str	00000000 
00024329 l       .debug_str	00000000 
00024339 l       .debug_str	00000000 
0002438f l       .debug_str	00000000 
000243e9 l       .debug_str	00000000 
00024437 l       .debug_str	00000000 
00024489 l       .debug_str	00000000 
000244de l       .debug_str	00000000 
0002452e l       .debug_str	00000000 
00024582 l       .debug_str	00000000 
000245d9 l       .debug_str	00000000 
0002462f l       .debug_str	00000000 
00024686 l       .debug_str	00000000 
000246d2 l       .debug_str	00000000 
0002471a l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0002474f l       .debug_str	00000000 
0002477b l       .debug_str	00000000 
00024797 l       .debug_str	00000000 
000247a4 l       .debug_str	00000000 
000247b2 l       .debug_str	00000000 
000247b7 l       .debug_str	00000000 
000247be l       .debug_str	00000000 
000247d5 l       .debug_str	00000000 
000247eb l       .debug_str	00000000 
0000a931 l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
000247fb l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0002481e l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0001e0ec l       .debug_str	00000000 
0002483f l       .debug_str	00000000 
000190d6 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00024846 l       .debug_str	00000000 
00024899 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
000248ba l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
000248bf l       .debug_str	00000000 
0001850c l       .debug_str	00000000 
000248d3 l       .debug_str	00000000 
000248e7 l       .debug_str	00000000 
000248f0 l       .debug_str	00000000 
000248fb l       .debug_str	00000000 
0002490d l       .debug_str	00000000 
00024921 l       .debug_str	00000000 
00024932 l       .debug_str	00000000 
0002494c l       .debug_str	00000000 
0002497c l       .debug_str	00000000 
00024997 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00018516 l       .debug_str	00000000 
00018550 l       .debug_str	00000000 
00018589 l       .debug_str	00000000 
00018598 l       .debug_str	00000000 
000185db l       .debug_str	00000000 
00058755 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
0005a17a l       .debug_str	00000000 
000249b7 l       .debug_str	00000000 
000249d6 l       .debug_str	00000000 
0005c6aa l       .debug_str	00000000 
000249f9 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
00011ed3 l       .debug_str	00000000 
00015ddf l       .debug_str	00000000 
0000acc7 l       .debug_str	00000000 
000249ff l       .debug_str	00000000 
0005805c l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00018443 l       .debug_str	00000000 
00058acb l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
0000a3f2 l       .debug_str	00000000 
00024a07 l       .debug_str	00000000 
0000a48e l       .debug_str	00000000 
0000a49e l       .debug_str	00000000 
0000a526 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
00024a26 l       .debug_str	00000000 
00024a45 l       .debug_str	00000000 
00024a57 l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
000109f7 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
0005ddbb l       .debug_str	00000000 
00016959 l       .debug_str	00000000 
00033ab8 l       .debug_str	00000000 
00024ac9 l       .debug_str	00000000 
0001f76c l       .debug_str	00000000 
00024adb l       .debug_str	00000000 
0005c671 l       .debug_str	00000000 
00024aef l       .debug_str	00000000 
00024b05 l       .debug_str	00000000 
00024b15 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
00024b27 l       .debug_str	00000000 
00024b21 l       .debug_str	00000000 
00024b36 l       .debug_str	00000000 
00024b4d l       .debug_str	00000000 
00024b4c l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
00010905 l       .debug_str	00000000 
00010910 l       .debug_str	00000000 
0001091b l       .debug_str	00000000 
00010926 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0001f52f l       .debug_str	00000000 
0001f581 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00056180 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0001f5c8 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0001f5cf l       .debug_str	00000000 
0002090b l       .debug_str	00000000 
00024937 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
0001f5d8 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
0002406c l       .debug_str	00000000 
0001f5df l       .debug_str	00000000 
0001f602 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e66 l       .debug_str	00000000 
00011e6b l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000249c4 l       .debug_str	00000000 
00011ee8 l       .debug_str	00000000 
0001f608 l       .debug_str	00000000 
0001f62a l       .debug_str	00000000 
0001f63f l       .debug_str	00000000 
0001f671 l       .debug_str	00000000 
0001f681 l       .debug_str	00000000 
0001f6ae l       .debug_str	00000000 
0001f6bf l       .debug_str	00000000 
0001f6ed l       .debug_str	00000000 
0001f6ff l       .debug_str	00000000 
000248dd l       .debug_str	00000000 
00024b1a l       .debug_str	00000000 
0000b068 l       .debug_str	00000000 
0001f72e l       .debug_str	00000000 
000248f5 l       .debug_str	00000000 
00001dd6 l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
000111ce l       .debug_str	00000000 
00000e1c l       .debug_str	00000000 
00030a8c l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
0002492c l       .debug_str	00000000 
0001f755 l       .debug_str	00000000 
00024918 l       .debug_str	00000000 
00024912 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00024960 l       .debug_str	00000000 
00024951 l       .debug_str	00000000 
000249ab l       .debug_str	00000000 
0002499c l       .debug_str	00000000 
0001f75c l       .debug_str	00000000 
0001f765 l       .debug_str	00000000 
00056e87 l       .debug_str	00000000 
00056154 l       .debug_str	00000000 
00024906 l       .debug_str	00000000 
00024900 l       .debug_str	00000000 
00024926 l       .debug_str	00000000 
000248ec l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00018bc7 l       .debug_str	00000000 
00018bcc l       .debug_str	00000000 
00018bd2 l       .debug_str	00000000 
0001bb1e l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0003013f l       .debug_str	00000000 
0005b353 l       .debug_str	00000000 
0001f771 l       .debug_str	00000000 
00011e72 l       .debug_str	00000000 
00011e7a l       .debug_str	00000000 
00011c28 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
00011bfe l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
00011b24 l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
00011bc0 l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
00011c52 l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
00011c62 l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
00011be2 l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
00011bee l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
00011e16 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
00011c7c l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
00011ca4 l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20004a68 l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000f0 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
00011b1a l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001da64 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
00011c72 l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
00011b10 l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
000118a4 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
000118dc l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
000118f2 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
00011902 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
000119a8 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
00011e3c l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
00011ee6 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
00011e28 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
00011a74 l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
000251b8 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
0001e17d l       .debug_str	00000000 
00024c04 l       .debug_str	00000000 
00024c39 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00024c45 l       .debug_str	00000000 
00024c7d l       .debug_str	00000000 
00024c97 l       .debug_str	00000000 
00024ca1 l       .debug_str	00000000 
00024ca9 l       .debug_str	00000000 
00024cb1 l       .debug_str	00000000 
00024ced l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00024d00 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
00024d08 l       .debug_str	00000000 
00024d40 l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
00024d48 l       .debug_str	00000000 
00024d80 l       .debug_str	00000000 
00024d88 l       .debug_str	00000000 
00024dc0 l       .debug_str	00000000 
00024dda l       .debug_str	00000000 
00024de3 l       .debug_str	00000000 
00024e1b l       .debug_str	00000000 
00024e24 l       .debug_str	00000000 
00024e5c l       .debug_str	00000000 
00018e3e l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
00024ee4 l       .debug_str	00000000 
00024f2c l       .debug_str	00000000 
00024f37 l       .debug_str	00000000 
0001344d l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
00024f75 l       .debug_str	00000000 
00020424 l       .debug_str	00000000 
00024f9e l       .debug_str	00000000 
00024fc3 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
0002051a l       .debug_str	00000000 
00025022 l       .debug_str	00000000 
0002056c l       .debug_str	00000000 
0002504a l       .debug_str	00000000 
0002507b l       .debug_str	00000000 
00025087 l       .debug_str	00000000 
000250e6 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
00025118 l       .debug_str	00000000 
00025160 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0002516d l       .debug_str	00000000 
000251c8 l       .debug_str	00000000 
000251d6 l       .debug_str	00000000 
00020794 l       .debug_str	00000000 
0002098e l       .debug_str	00000000 
0000d709 l       .debug_str	00000000 
0002521e l       .debug_str	00000000 
000209da l       .debug_str	00000000 
00025259 l       .debug_str	00000000 
00013ac0 l       .debug_str	00000000 
00013ad9 l       .debug_str	00000000 
00025290 l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
000252e2 l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
00025337 l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
0002536a l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
000253b0 l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
000253f9 l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0002540a l       .debug_str	00000000 
0002547f l       .debug_str	00000000 
000254ac l       .debug_str	00000000 
0001f01c l       .debug_str	00000000 
00025538 l       .debug_str	00000000 
000255bb l       .debug_str	00000000 
000255ea l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00025637 l       .debug_str	00000000 
00025667 l       .debug_str	00000000 
000256b5 l       .debug_str	00000000 
000256e5 l       .debug_str	00000000 
00025733 l       .debug_str	00000000 
00025763 l       .debug_str	00000000 
000257b1 l       .debug_str	00000000 
000257e2 l       .debug_str	00000000 
00025831 l       .debug_str	00000000 
00025862 l       .debug_str	00000000 
000258b1 l       .debug_str	00000000 
000258e1 l       .debug_str	00000000 
000258e9 l       .debug_str	00000000 
00025919 l       .debug_str	00000000 
00025921 l       .debug_str	00000000 
0002595f l       .debug_str	00000000 
00025974 l       .debug_str	00000000 
0000abea l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00009d03 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0001e0ec l       .debug_str	00000000 
000190d6 l       .debug_str	00000000 
000259a0 l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
000259f6 l       .debug_str	00000000 
00018d21 l       .debug_str	00000000 
000259f5 l       .debug_str	00000000 
000259f9 l       .debug_str	00000000 
00025a03 l       .debug_str	00000000 
000017db l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00025a09 l       .debug_str	00000000 
00025a0d l       .debug_str	00000000 
00024cfb l       .debug_str	00000000 
00025a12 l       .debug_str	00000000 
00025a11 l       .debug_str	00000000 
00025a15 l       .debug_str	00000000 
00025a19 l       .debug_str	00000000 
00025a1e l       .debug_str	00000000 
00025a1d l       .debug_str	00000000 
00025a21 l       .debug_str	00000000 
00025a25 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00024b65 l       .debug_str	00000000 
00024bba l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00018bc7 l       .debug_str	00000000 
00018bcc l       .debug_str	00000000 
00018bd2 l       .debug_str	00000000 
0001bb1e l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
00034d2e l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0000d6d1 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00011f66 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
00024840 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00025a29 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00025a8a l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00025aed l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000260a0 l       .debug_str	00000000 
0002610b l       .debug_str	00000000 
00026151 l       .debug_str	00000000 
000261c3 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
000263e1 l       .debug_str	00000000 
00026453 l       .debug_str	00000000 
0002649d l       .debug_str	00000000 
000264e7 l       .debug_str	00000000 
0002670d l       .debug_str	00000000 
00026749 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
0002678e l       .debug_str	00000000 
000267cb l       .debug_str	00000000 
00026811 l       .debug_str	00000000 
0002684e l       .debug_str	00000000 
00026a68 l       .debug_str	00000000 
00026aa8 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00026cc5 l       .debug_str	00000000 
00026ef2 l       .debug_str	00000000 
00026f4b l       .debug_str	00000000 
00027174 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
000118c9 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00005487 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
00005703 l       .debug_str	00000000 
00005748 l       .debug_str	00000000 
000057b6 l       .debug_str	00000000 
0000584d l       .debug_str	00000000 
0000590d l       .debug_str	00000000 
000059f6 l       .debug_str	00000000 
00005b08 l       .debug_str	00000000 
00005c43 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005f34 l       .debug_str	00000000 
000060ea l       .debug_str	00000000 
000062c9 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
000065d5 l       .debug_str	00000000 
0000664c l       .debug_str	00000000 
000066d0 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
000067e9 l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00006936 l       .debug_str	00000000 
000069fb l       .debug_str	00000000 
00006acd l       .debug_str	00000000 
00006b96 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
00006f7e l       .debug_str	00000000 
0000709e l       .debug_str	00000000 
000071b5 l       .debug_str	00000000 
000072ef l       .debug_str	00000000 
00007436 l       .debug_str	00000000 
00007574 l       .debug_str	00000000 
000076d5 l       .debug_str	00000000 
00007843 l       .debug_str	00000000 
000079a8 l       .debug_str	00000000 
00007b30 l       .debug_str	00000000 
00007cc5 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00008000 l       .debug_str	00000000 
000081bc l       .debug_str	00000000 
0000836f l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
00008728 l       .debug_str	00000000 
00008902 l       .debug_str	00000000 
00008aff l       .debug_str	00000000 
00008d09 l       .debug_str	00000000 
00008f0a l       .debug_str	00000000 
0000912c l       .debug_str	00000000 
0000936b l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026cd9 l       .debug_str	00000000 
0000554d l       .debug_str	00000000 
0000559b l       .debug_str	00000000 
00005606 l       .debug_str	00000000 
0002e089 l       .debug_str	00000000 
00026f06 l       .debug_str	00000000 
00025b55 l       .debug_str	00000000 
00025d6e l       .debug_str	00000000 
00025dd6 l       .debug_str	00000000 
00025e1b l       .debug_str	00000000 
00025e86 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0002721a l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0000a81e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002723c l       .debug_str	00000000 
00027299 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
000248f5 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009845 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
00027463 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
000272f6 l       .debug_str	00000000 
00027367 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00027373 l       .debug_str	00000000 
0001a188 l       .debug_str	00000000 
000273e4 l       .debug_str	00000000 
00027455 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000315a l       .debug_str	00000000 
000129d7 l       .debug_str	00000000 
0002768d l       .debug_str	00000000 
00012f00 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000a4aa l       .debug_str	00000000 
0000a4a9 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
00057484 l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002746a l       .debug_str	00000000 
0001e547 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00027493 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000358c l       .debug_str	00000000 
00001a47 l       .debug_str	00000000 
00001d95 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
00001a50 l       .debug_str	00000000 
00001a5c l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00001a64 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00001abe l       .debug_str	00000000 
00001b20 l       .debug_str	00000000 
00001b2b l       .debug_str	00000000 
00001b72 l       .debug_str	00000000 
00001bc1 l       .debug_str	00000000 
00001bcb l       .debug_str	00000000 
00001c08 l       .debug_str	00000000 
00001c4d l       .debug_str	00000000 
00001c56 l       .debug_str	00000000 
00001c66 l       .debug_str	00000000 
00001c6e l       .debug_str	00000000 
00001cc3 l       .debug_str	00000000 
00001d20 l       .debug_str	00000000 
00001d2c l       .debug_str	00000000 
00001d35 l       .debug_str	00000000 
00001d41 l       .debug_str	00000000 
00001d4d l       .debug_str	00000000 
00001d56 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
00001d5e l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00001d66 l       .debug_str	00000000 
00001d94 l       .debug_str	00000000 
00001d7b l       .debug_str	00000000 
00001d9b l       .debug_str	00000000 
00001da2 l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00001db4 l       .debug_str	00000000 
0004bbfd l       .debug_str	00000000 
00001dcb l       .debug_str	00000000 
00001dd3 l       .debug_str	00000000 
00001ddc l       .debug_str	00000000 
000031e0 l       .debug_str	00000000 
00001de5 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0005c603 l       .debug_str	00000000 
00001ded l       .debug_str	00000000 
00001df9 l       .debug_str	00000000 
00001e04 l       .debug_str	00000000 
00001e0c l       .debug_str	00000000 
00027497 l       .debug_str	00000000 
0000a40a l       .debug_str	00000000 
00001e14 l       .debug_str	00000000 
00001f10 l       .debug_str	00000000 
00002014 l       .debug_str	00000000 
00002022 l       .debug_str	00000000 
0000202d l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0000205a l       .debug_str	00000000 
00002037 l       .debug_str	00000000 
00002065 l       .debug_str	00000000 
000020e0 l       .debug_str	00000000 
00002163 l       .debug_str	00000000 
00002171 l       .debug_str	00000000 
000021d0 l       .debug_str	00000000 
00002237 l       .debug_str	00000000 
0000224d l       .debug_str	00000000 
0000225d l       .debug_str	00000000 
0005ae39 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000226c l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
00002272 l       .debug_str	00000000 
00002278 l       .debug_str	00000000 
0000227e l       .debug_str	00000000 
0000228a l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00002292 l       .debug_str	00000000 
0000229a l       .debug_str	00000000 
000022a0 l       .debug_str	00000000 
000022e6 l       .debug_str	00000000 
000022c3 l       .debug_str	00000000 
000022f6 l       .debug_str	00000000 
00002336 l       .debug_str	00000000 
0005a9c6 l       .debug_str	00000000 
0000237e l       .debug_str	00000000 
00002384 l       .debug_str	00000000 
0000238a l       .debug_str	00000000 
000023b3 l       .debug_str	00000000 
00002390 l       .debug_str	00000000 
000023c5 l       .debug_str	00000000 
00002407 l       .debug_str	00000000 
0005a8af l       .debug_str	00000000 
00002451 l       .debug_str	00000000 
00002457 l       .debug_str	00000000 
0000245d l       .debug_str	00000000 
00002486 l       .debug_str	00000000 
00002463 l       .debug_str	00000000 
00002498 l       .debug_str	00000000 
000024da l       .debug_str	00000000 
00059d73 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0000252a l       .debug_str	00000000 
00002530 l       .debug_str	00000000 
00002536 l       .debug_str	00000000 
0000255f l       .debug_str	00000000 
0000253c l       .debug_str	00000000 
00002570 l       .debug_str	00000000 
000025b1 l       .debug_str	00000000 
000025fa l       .debug_str	00000000 
000025ff l       .debug_str	00000000 
0005abfd l       .debug_str	00000000 
00002604 l       .debug_str	00000000 
0000260a l       .debug_str	00000000 
00002610 l       .debug_str	00000000 
00002639 l       .debug_str	00000000 
00002616 l       .debug_str	00000000 
0000264a l       .debug_str	00000000 
0000268b l       .debug_str	00000000 
00059e2b l       .debug_str	00000000 
000026d4 l       .debug_str	00000000 
00002700 l       .debug_str	00000000 
000026dd l       .debug_str	00000000 
00002711 l       .debug_str	00000000 
00002752 l       .debug_str	00000000 
0000279b l       .debug_str	00000000 
0005add1 l       .debug_str	00000000 
000027a0 l       .debug_str	00000000 
000027a9 l       .debug_str	00000000 
000027b0 l       .debug_str	00000000 
000027db l       .debug_str	00000000 
000027b8 l       .debug_str	00000000 
000027ed l       .debug_str	00000000 
0000282f l       .debug_str	00000000 
0005aa99 l       .debug_str	00000000 
00002879 l       .debug_str	00000000 
0000287f l       .debug_str	00000000 
00002885 l       .debug_str	00000000 
0000288b l       .debug_str	00000000 
00002891 l       .debug_str	00000000 
00002899 l       .debug_str	00000000 
000028a7 l       .debug_str	00000000 
000028b6 l       .debug_str	00000000 
000028c7 l       .debug_str	00000000 
000028d2 l       .debug_str	00000000 
000028dd l       .debug_str	00000000 
000028e8 l       .debug_str	00000000 
000028ef l       .debug_str	00000000 
00002935 l       .debug_str	00000000 
00002912 l       .debug_str	00000000 
00002947 l       .debug_str	00000000 
00002989 l       .debug_str	00000000 
00059f2e l       .debug_str	00000000 
000029d3 l       .debug_str	00000000 
00002a00 l       .debug_str	00000000 
000029dd l       .debug_str	00000000 
00002a12 l       .debug_str	00000000 
00002a54 l       .debug_str	00000000 
00002a9e l       .debug_str	00000000 
00002aa3 l       .debug_str	00000000 
00002ad0 l       .debug_str	00000000 
00002aad l       .debug_str	00000000 
00002ae2 l       .debug_str	00000000 
00002b24 l       .debug_str	00000000 
00002b6e l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
00002bed l       .debug_str	00000000 
00002b82 l       .debug_str	00000000 
00002b92 l       .debug_str	00000000 
00002b9b l       .debug_str	00000000 
00002ba6 l       .debug_str	00000000 
00002bb5 l       .debug_str	00000000 
00002bca l       .debug_str	00000000 
00002bfb l       .debug_str	00000000 
00002c98 l       .debug_str	00000000 
00002d3d l       .debug_str	00000000 
00002d48 l       .debug_str	00000000 
00002d51 l       .debug_str	00000000 
00002d95 l       .debug_str	00000000 
00002d72 l       .debug_str	00000000 
00002da8 l       .debug_str	00000000 
00002e2b l       .debug_str	00000000 
00002eb6 l       .debug_str	00000000 
00002ed2 l       .debug_str	00000000 
00002f1e l       .debug_str	00000000 
00002f72 l       .debug_str	00000000 
00002f8f l       .debug_str	00000000 
00002fa3 l       .debug_str	00000000 
00002fef l       .debug_str	00000000 
00003043 l       .debug_str	00000000 
00003059 l       .debug_str	00000000 
0000306d l       .debug_str	00000000 
000030b4 l       .debug_str	00000000 
00003103 l       .debug_str	00000000 
0000312f l       .debug_str	00000000 
0000310c l       .debug_str	00000000 
0000313d l       .debug_str	00000000 
00003143 l       .debug_str	00000000 
0000314b l       .debug_str	00000000 
00003152 l       .debug_str	00000000 
00003a0b l       .debug_str	00000000 
00003162 l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
00003171 l       .debug_str	00000000 
00003a3d l       .debug_str	00000000 
0000317c l       .debug_str	00000000 
00003187 l       .debug_str	00000000 
00003198 l       .debug_str	00000000 
0000319e l       .debug_str	00000000 
000031a6 l       .debug_str	00000000 
000031ad l       .debug_str	00000000 
000031b7 l       .debug_str	00000000 
000031bf l       .debug_str	00000000 
000031c7 l       .debug_str	00000000 
000031e9 l       .debug_str	00000000 
000031f4 l       .debug_str	00000000 
00003200 l       .debug_str	00000000 
00003208 l       .debug_str	00000000 
00003211 l       .debug_str	00000000 
0000098b l       .debug_str	00000000 
0000321c l       .debug_str	00000000 
00003227 l       .debug_str	00000000 
00003232 l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00003242 l       .debug_str	00000000 
00003252 l       .debug_str	00000000 
00003261 l       .debug_str	00000000 
00003269 l       .debug_str	00000000 
00003270 l       .debug_str	00000000 
00003278 l       .debug_str	00000000 
000032b9 l       .debug_str	00000000 
00003296 l       .debug_str	00000000 
000032c9 l       .debug_str	00000000 
000032de l       .debug_str	00000000 
000032e7 l       .debug_str	00000000 
00003344 l       .debug_str	00000000 
000033a9 l       .debug_str	00000000 
000033b3 l       .debug_str	00000000 
000033c3 l       .debug_str	00000000 
000033d8 l       .debug_str	00000000 
000033e0 l       .debug_str	00000000 
00003444 l       .debug_str	00000000 
000034b0 l       .debug_str	00000000 
000034b7 l       .debug_str	00000000 
000034bf l       .debug_str	00000000 
00003500 l       .debug_str	00000000 
000034dd l       .debug_str	00000000 
00003510 l       .debug_str	00000000 
00003525 l       .debug_str	00000000 
00003538 l       .debug_str	00000000 
0000354d l       .debug_str	00000000 
00003554 l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
00056fa7 l       .debug_str	00000000 
000274a4 l       .debug_str	00000000 
0002755c l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000275c0 l       .debug_str	00000000 
000275f6 l       .debug_str	00000000 
0002760f l       .debug_str	00000000 
00027649 l       .debug_str	00000000 
00027666 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
00027a38 l       .debug_str	00000000 
00027a8b l       .debug_str	00000000 
00027aa3 l       .debug_str	00000000 
00027b6b l       .debug_str	00000000 
00027ad9 l       .debug_str	00000000 
00027b10 l       .debug_str	00000000 
00027b23 l       .debug_str	00000000 
00027b62 l       .debug_str	00000000 
00027b7d l       .debug_str	00000000 
00027bb5 l       .debug_str	00000000 
00027bc9 l       .debug_str	00000000 
00027bf5 l       .debug_str	00000000 
0000035f l       .debug_str	00000000 
000017db l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
0005c671 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000a811 l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
0000a931 l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
0005c670 l       .debug_str	00000000 
00027bfe l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
00027c02 l       .debug_str	00000000 
0005bb9e l       .debug_str	00000000 
0000462d l       .debug_str	00000000 
00004635 l       .debug_str	00000000 
0000463e l       .debug_str	00000000 
0000464c l       .debug_str	00000000 
00004653 l       .debug_str	00000000 
000042d3 l       .debug_str	00000000 
000042e3 l       .debug_str	00000000 
000042ec l       .debug_str	00000000 
000042fa l       .debug_str	00000000 
00004308 l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
00004522 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
0000432f l       .debug_str	00000000 
00004337 l       .debug_str	00000000 
00004350 l       .debug_str	00000000 
00004361 l       .debug_str	00000000 
00004369 l       .debug_str	00000000 
0000439c l       .debug_str	00000000 
00004383 l       .debug_str	00000000 
000043a8 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
000043da l       .debug_str	00000000 
000043c1 l       .debug_str	00000000 
00004414 l       .debug_str	00000000 
00004407 l       .debug_str	00000000 
000043ee l       .debug_str	00000000 
0000465a l       .debug_str	00000000 
000046bd l       .debug_str	00000000 
00004662 l       .debug_str	00000000 
00004681 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
0000469c l       .debug_str	00000000 
0005ac7c l       .debug_str	00000000 
000492c9 l       .debug_str	00000000 
000287a3 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0005848e l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00027c0a l       .debug_str	00000000 
0005bcd2 l       .debug_str	00000000 
000163e2 l       .debug_str	00000000 
00057f04 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00059c35 l       .debug_str	00000000 
0000aca7 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000acb8 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000acc2 l       .debug_str	00000000 
0000accd l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00027ef3 l       .debug_str	00000000 
000276b4 l       .debug_str	00000000 
000276e5 l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00005487 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
0000554d l       .debug_str	00000000 
0000559b l       .debug_str	00000000 
00005606 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0002e089 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00026f06 l       .debug_str	00000000 
000276f1 l       .debug_str	00000000 
00027721 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
00005703 l       .debug_str	00000000 
00005748 l       .debug_str	00000000 
000057b6 l       .debug_str	00000000 
0000584d l       .debug_str	00000000 
0000590d l       .debug_str	00000000 
000059f6 l       .debug_str	00000000 
00005b08 l       .debug_str	00000000 
00005c43 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005f34 l       .debug_str	00000000 
000060ea l       .debug_str	00000000 
000062c9 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
000065d5 l       .debug_str	00000000 
0000664c l       .debug_str	00000000 
000066d0 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
000067e9 l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00006936 l       .debug_str	00000000 
000069fb l       .debug_str	00000000 
00006acd l       .debug_str	00000000 
00006b96 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
00006f7e l       .debug_str	00000000 
0000709e l       .debug_str	00000000 
000071b5 l       .debug_str	00000000 
000072ef l       .debug_str	00000000 
00007436 l       .debug_str	00000000 
00007574 l       .debug_str	00000000 
000076d5 l       .debug_str	00000000 
00007843 l       .debug_str	00000000 
000079a8 l       .debug_str	00000000 
00007b30 l       .debug_str	00000000 
00007cc5 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00008000 l       .debug_str	00000000 
000081bc l       .debug_str	00000000 
0000836f l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
00008728 l       .debug_str	00000000 
00008902 l       .debug_str	00000000 
00008aff l       .debug_str	00000000 
00008d09 l       .debug_str	00000000 
00008f0a l       .debug_str	00000000 
0000912c l       .debug_str	00000000 
0000936b l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
00026cd9 l       .debug_str	00000000 
0002772e l       .debug_str	00000000 
0002775f l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
000052de l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00000ac2 l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
00000879 l       .debug_str	00000000 
00000a3b l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000a25 l       .debug_str	00000000 
00000a03 l       .debug_str	00000000 
00000a95 l       .debug_str	00000000 
0005bb15 l       .debug_str	00000000 
000009c9 l       .debug_str	00000000 
000008ab l       .debug_str	00000000 
00000872 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005655a l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00000f2b l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000f58 l       .debug_str	00000000 
00001d26 l       .debug_str	00000000 
0005c950 l       .debug_str	00000000 
000008ed l       .debug_str	00000000 
00000a56 l       .debug_str	00000000 
000009b2 l       .debug_str	00000000 
000008bc l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000f8d l       .debug_str	00000000 
00000fb6 l       .debug_str	00000000 
00001014 l       .debug_str	00000000 
00000992 l       .debug_str	00000000 
00000a9d l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
0000107a l       .debug_str	00000000 
00000fa6 l       .debug_str	00000000 
00000ab4 l       .debug_str	00000000 
00000867 l       .debug_str	00000000 
00000a2e l       .debug_str	00000000 
00000aa5 l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00001098 l       .debug_str	00000000 
00000a1b l       .debug_str	00000000 
00000942 l       .debug_str	00000000 
000008d5 l       .debug_str	00000000 
000010ae l       .debug_str	00000000 
000010d4 l       .debug_str	00000000 
00000884 l       .debug_str	00000000 
000010ea l       .debug_str	00000000 
000053c1 l       .debug_str	00000000 
000010b3 l       .debug_str	00000000 
00005262 l       .debug_str	00000000 
0004bbfd l       .debug_str	00000000 
000052e7 l       .debug_str	00000000 
000052f2 l       .debug_str	00000000 
00027767 l       .debug_str	00000000 
00027792 l       .debug_str	00000000 
000277a3 l       .debug_str	00000000 
000277d8 l       .debug_str	00000000 
00004862 l       .debug_str	00000000 
0000088f l       .debug_str	00000000 
00004519 l       .debug_str	00000000 
00004521 l       .debug_str	00000000 
000043e5 l       .debug_str	00000000 
0000452b l       .debug_str	00000000 
000047d1 l       .debug_str	00000000 
000047b8 l       .debug_str	00000000 
00000acd l       .debug_str	00000000 
000047b3 l       .debug_str	00000000 
000047e0 l       .debug_str	00000000 
0000486a l       .debug_str	00000000 
00001112 l       .debug_str	00000000 
00059e9f l       .debug_str	00000000 
000011bf l       .debug_str	00000000 
0000111c l       .debug_str	00000000 
00001154 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
0000119b l       .debug_str	00000000 
000011a3 l       .debug_str	00000000 
000011d8 l       .debug_str	00000000 
00004870 l       .debug_str	00000000 
000277e7 l       .debug_str	00000000 
0002781a l       .debug_str	00000000 
00000f01 l       .debug_str	00000000 
00001100 l       .debug_str	00000000 
00001109 l       .debug_str	00000000 
000011ba l       .debug_str	00000000 
000011e1 l       .debug_str	00000000 
00001212 l       .debug_str	00000000 
0002782a l       .debug_str	00000000 
0002785e l       .debug_str	00000000 
00027867 l       .debug_str	00000000 
00027893 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
000278a2 l       .debug_str	00000000 
000278d5 l       .debug_str	00000000 
000278e2 l       .debug_str	00000000 
000278ee l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000b7d l       .debug_str	00000000 
00000b86 l       .debug_str	00000000 
00000b8a l       .debug_str	00000000 
00000bb4 l       .debug_str	00000000 
0002791f l       .debug_str	00000000 
00027954 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00027965 l       .debug_str	00000000 
00027997 l       .debug_str	00000000 
000279a5 l       .debug_str	00000000 
000279e3 l       .debug_str	00000000 
000279fd l       .debug_str	00000000 
00027a4f l       .debug_str	00000000 
20004a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20004a78 l     O .bss	00001004 _ZN6mynewt3spi12PENDING_DATA17hf1744da7a276d85dE
20005f04 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00012c26 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
20005a8c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20005b04 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
20005aa4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20005a84 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
00012fb0 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001319a l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000137b8 l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00013482 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
20005a7c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
20005ab4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
000138e0 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001dc60 l     O .text	0000001c str.0
0001dcd0 l     O .text	00000021 str.1
0001dd30 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c4c l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
00014a57 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
00027f04 l       .debug_str	00000000 
0000d47f l       .debug_str	00000000 
000163e2 l       .debug_str	00000000 
00057f04 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0000acb4 l       .debug_str	00000000 
0000ad39 l       .debug_str	00000000 
000031b0 l       .debug_str	00000000 
00027ed9 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00057067 l       .debug_str	00000000 
00027f16 l       .debug_str	00000000 
0000d491 l       .debug_str	00000000 
00027c15 l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
00027c40 l       .debug_str	00000000 
0005c6aa l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00027c6c l       .debug_str	00000000 
0005d9a6 l       .debug_str	00000000 
00027cdd l       .debug_str	00000000 
00027d09 l       .debug_str	00000000 
00027d36 l       .debug_str	00000000 
00027da2 l       .debug_str	00000000 
00027daa l       .debug_str	00000000 
00027e17 l       .debug_str	00000000 
00027e20 l       .debug_str	00000000 
00027e4d l       .debug_str	00000000 
00027bf5 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00027ec7 l       .debug_str	00000000 
00027ef7 l       .debug_str	00000000 
00057247 l       .debug_str	00000000 
0000acb8 l       .debug_str	00000000 
0000acc2 l       .debug_str	00000000 
0000accd l       .debug_str	00000000 
0000acd7 l       .debug_str	00000000 
00027ef3 l       .debug_str	00000000 
00027edd l       .debug_str	00000000 
0000035f l       .debug_str	00000000 
000017db l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
000017e4 l       .debug_str	00000000 
000017ee l       .debug_str	00000000 
0000a811 l       .debug_str	00000000 
0000180f l       .debug_str	00000000 
00001814 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0001df30 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00004662 l       .debug_str	00000000 
00004681 l       .debug_str	00000000 
000046b5 l       .debug_str	00000000 
00027f1b l       .debug_str	00000000 
00027f6d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000efa l       .debug_str	00000000 
0003ec68 l       .debug_str	00000000 
0000462d l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00004635 l       .debug_str	00000000 
0000463e l       .debug_str	00000000 
0000464c l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00004653 l       .debug_str	00000000 
000042d3 l       .debug_str	00000000 
000042e3 l       .debug_str	00000000 
000042ec l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
000042fa l       .debug_str	00000000 
00004308 l       .debug_str	00000000 
00004314 l       .debug_str	00000000 
00004522 l       .debug_str	00000000 
00004320 l       .debug_str	00000000 
0000432f l       .debug_str	00000000 
00000941 l       .debug_str	00000000 
00004337 l       .debug_str	00000000 
00004350 l       .debug_str	00000000 
00001daa l       .debug_str	00000000 
00004361 l       .debug_str	00000000 
00000a75 l       .debug_str	00000000 
00004369 l       .debug_str	00000000 
0000439c l       .debug_str	00000000 
00004383 l       .debug_str	00000000 
000043a8 l       .debug_str	00000000 
00001d59 l       .debug_str	00000000 
000043da l       .debug_str	00000000 
000043c1 l       .debug_str	00000000 
000043e5 l       .debug_str	00000000 
00004414 l       .debug_str	00000000 
00004407 l       .debug_str	00000000 
000043ee l       .debug_str	00000000 
0000465a l       .debug_str	00000000 
0000469c l       .debug_str	00000000 
000046bd l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
000292bd l       .debug_str	00000000 
000284de l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
00028521 l       .debug_str	00000000 
000198f5 l       .debug_str	00000000 
0002857d l       .debug_str	00000000 
00019965 l       .debug_str	00000000 
000285dc l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
0002862e l       .debug_str	00000000 
00028683 l       .debug_str	00000000 
000286d9 l       .debug_str	00000000 
00028707 l       .debug_str	00000000 
00028713 l       .debug_str	00000000 
00028745 l       .debug_str	00000000 
0002876c l       .debug_str	00000000 
0002879e l       .debug_str	00000000 
000287ae l       .debug_str	00000000 
000287e3 l       .debug_str	00000000 
000287f6 l       .debug_str	00000000 
0002882c l       .debug_str	00000000 
00028840 l       .debug_str	00000000 
0002888a l       .debug_str	00000000 
0002889b l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000288d7 l       .debug_str	00000000 
00056586 l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
00028915 l       .debug_str	00000000 
00028953 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
00028960 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
0002896e l       .debug_str	00000000 
00028996 l       .debug_str	00000000 
00001685 l       .debug_str	00000000 
000289d5 l       .debug_str	00000000 
00028a03 l       .debug_str	00000000 
00028a0a l       .debug_str	00000000 
00028aad l       .debug_str	00000000 
00028abb l       .debug_str	00000000 
0003d477 l       .debug_str	00000000 
00028b53 l       .debug_str	00000000 
00028bed l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00028ca5 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
000253f9 l       .debug_str	00000000 
00028d08 l       .debug_str	00000000 
00028d7a l       .debug_str	00000000 
00028da4 l       .debug_str	00000000 
00028de2 l       .debug_str	00000000 
00028df5 l       .debug_str	00000000 
00028e40 l       .debug_str	00000000 
0000b183 l       .debug_str	00000000 
00028e49 l       .debug_str	00000000 
00028e8b l       .debug_str	00000000 
0002a14c l       .debug_str	00000000 
00028ec5 l       .debug_str	00000000 
00028f0a l       .debug_str	00000000 
00028f26 l       .debug_str	00000000 
00028f69 l       .debug_str	00000000 
00028f7f l       .debug_str	00000000 
00028fe4 l       .debug_str	00000000 
00029049 l       .debug_str	00000000 
00029084 l       .debug_str	00000000 
00029091 l       .debug_str	00000000 
00013ac6 l       .debug_str	00000000 
000290c4 l       .debug_str	00000000 
00009b83 l       .debug_str	00000000 
0002910a l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
00029150 l       .debug_str	00000000 
00009c6c l       .debug_str	00000000 
00029197 l       .debug_str	00000000 
000291e0 l       .debug_str	00000000 
0001a188 l       .debug_str	00000000 
000248f5 l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00029259 l       .debug_str	00000000 
0002929e l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
000292f6 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
0002930e l       .debug_str	00000000 
00029349 l       .debug_str	00000000 
0002936d l       .debug_str	00000000 
00029393 l       .debug_str	00000000 
000293ce l       .debug_str	00000000 
000293f1 l       .debug_str	00000000 
00029416 l       .debug_str	00000000 
00029453 l       .debug_str	00000000 
0002946a l       .debug_str	00000000 
000294a7 l       .debug_str	00000000 
000294be l       .debug_str	00000000 
0001a5b7 l       .debug_str	00000000 
0002950f l       .debug_str	00000000 
0001c1f4 l       .debug_str	00000000 
0002956a l       .debug_str	00000000 
000295cd l       .debug_str	00000000 
0002960f l       .debug_str	00000000 
0001a848 l       .debug_str	00000000 
00029673 l       .debug_str	00000000 
0001f01c l       .debug_str	00000000 
000296e0 l       .debug_str	00000000 
00009cf1 l       .debug_str	00000000 
00029742 l       .debug_str	00000000 
00029750 l       .debug_str	00000000 
000297bb l       .debug_str	00000000 
000297d5 l       .debug_str	00000000 
000297eb l       .debug_str	00000000 
00029856 l       .debug_str	00000000 
00029866 l       .debug_str	00000000 
000298d2 l       .debug_str	00000000 
000298e4 l       .debug_str	00000000 
00029950 l       .debug_str	00000000 
00029961 l       .debug_str	00000000 
000299c8 l       .debug_str	00000000 
00029a00 l       .debug_str	00000000 
00029a6a l       .debug_str	00000000 
00029af2 l       .debug_str	00000000 
0001232f l       .debug_str	00000000 
00029b66 l       .debug_str	00000000 
00029be8 l       .debug_str	00000000 
00029bff l       .debug_str	00000000 
00029c3d l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00029c50 l       .debug_str	00000000 
00029c5f l       .debug_str	00000000 
00029c9d l       .debug_str	00000000 
00029cb0 l       .debug_str	00000000 
00029cdc l       .debug_str	00000000 
00029ce5 l       .debug_str	00000000 
00029d11 l       .debug_str	00000000 
00029d1a l       .debug_str	00000000 
00029d7a l       .debug_str	00000000 
00030000 l       .debug_str	00000000 
00029dcb l       .debug_str	00000000 
00029e1c l       .debug_str	00000000 
00029e79 l       .debug_str	00000000 
00029ed7 l       .debug_str	00000000 
0002a1bc l       .debug_str	00000000 
00029f28 l       .debug_str	00000000 
00029f51 l       .debug_str	00000000 
00029fb4 l       .debug_str	00000000 
00029fc5 l       .debug_str	00000000 
00029fd2 l       .debug_str	00000000 
00029fe7 l       .debug_str	00000000 
0002a038 l       .debug_str	00000000 
0002a061 l       .debug_str	00000000 
0002a0c4 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
00027463 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
0002a0e1 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00035938 l       .debug_str	00000000 
00024cfb l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
000574a3 l       .debug_str	00000000 
0005625a l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0005c6aa l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
0002a102 l       .debug_str	00000000 
0000253a l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0002a106 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00028173 l       .debug_str	00000000 
0002a118 l       .debug_str	00000000 
0002a11d l       .debug_str	00000000 
0002a122 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
000184b8 l       .debug_str	00000000 
0002a147 l       .debug_str	00000000 
0002a183 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
0003a34b l       .debug_str	00000000 
0002a199 l       .debug_str	00000000 
0002a1a2 l       .debug_str	00000000 
00033969 l       .debug_str	00000000 
000572f6 l       .debug_str	00000000 
0004953d l       .debug_str	00000000 
0002a1ab l       .debug_str	00000000 
0002a1af l       .debug_str	00000000 
00033c2f l       .debug_str	00000000 
0000a3bf l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
0002a1d1 l       .debug_str	00000000 
0002a1cc l       .debug_str	00000000 
00057077 l       .debug_str	00000000 
0002a1d5 l       .debug_str	00000000 
00035706 l       .debug_str	00000000 
0002a1de l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
000381b6 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00027f92 l       .debug_str	00000000 
00027fec l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
0000b161 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0003026a l       .debug_str	00000000 
0002803b l       .debug_str	00000000 
0002a0f3 l       .debug_str	00000000 
0002a0e6 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00028043 l       .debug_str	00000000 
00028050 l       .debug_str	00000000 
00028059 l       .debug_str	00000000 
00056174 l       .debug_str	00000000 
00030636 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00018bda l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
00009f5b l       .debug_str	00000000 
00009f9c l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
0002a193 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
0005929f l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0002a167 l       .debug_str	00000000 
00018c84 l       .debug_str	00000000 
00028063 l       .debug_str	00000000 
000280a1 l       .debug_str	00000000 
0001f7fd l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
00042e7e l       .debug_str	00000000 
0005c724 l       .debug_str	00000000 
000280b0 l       .debug_str	00000000 
00018cb3 l       .debug_str	00000000 
000280d9 l       .debug_str	00000000 
0001f86f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0001fa28 l       .debug_str	00000000 
000249ab l       .debug_str	00000000 
0000d4bc l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
0002810b l       .debug_str	00000000 
0002a131 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00028119 l       .debug_str	00000000 
00018d6c l       .debug_str	00000000 
00018d7f l       .debug_str	00000000 
0005bca0 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
0004752d l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
0005630f l       .debug_str	00000000 
0002815b l       .debug_str	00000000 
0002815f l       .debug_str	00000000 
0002816a l       .debug_str	00000000 
00028179 l       .debug_str	00000000 
000281c1 l       .debug_str	00000000 
000281e1 l       .debug_str	00000000 
00036452 l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
0002822c l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00028277 l       .debug_str	00000000 
00027455 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000282e8 l       .debug_str	00000000 
000193e1 l       .debug_str	00000000 
00028316 l       .debug_str	00000000 
00020794 l       .debug_str	00000000 
0002835e l       .debug_str	00000000 
0002838e l       .debug_str	00000000 
000283b9 l       .debug_str	00000000 
00013ac0 l       .debug_str	00000000 
00013ad9 l       .debug_str	00000000 
000283f0 l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
00028441 l       .debug_str	00000000 
000197ed l       .debug_str	00000000 
00028493 l       .debug_str	00000000 
00019844 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0000d6d8 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002a1ea l       .debug_str	00000000 
0002a213 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0002a2a4 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0002a220 l       .debug_str	00000000 
00018cb3 l       .debug_str	00000000 
0000b161 l       .debug_str	00000000 
0005b4a8 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002a249 l       .debug_str	00000000 
0002a29e l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
0002a619 l       .debug_str	00000000 
0002a481 l       .debug_str	00000000 
0002a4bd l       .debug_str	00000000 
0002a4d9 l       .debug_str	00000000 
0002a515 l       .debug_str	00000000 
0002a54b l       .debug_str	00000000 
0002a587 l       .debug_str	00000000 
0002a592 l       .debug_str	00000000 
0002a5ce l       .debug_str	00000000 
0002a5dc l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0002a650 l       .debug_str	00000000 
0002a68d l       .debug_str	00000000 
0002a69c l       .debug_str	00000000 
0002a6d9 l       .debug_str	00000000 
0002a71c l       .debug_str	00000000 
0002a759 l       .debug_str	00000000 
0000d6dd l       .debug_str	00000000 
0002a790 l       .debug_str	00000000 
0002a7ce l       .debug_str	00000000 
0002a805 l       .debug_str	00000000 
0002a844 l       .debug_str	00000000 
0002a87d l       .debug_str	00000000 
0002a8e1 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0002a916 l       .debug_str	00000000 
000012eb l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0002a931 l       .debug_str	00000000 
0002a976 l       .debug_str	00000000 
0002a993 l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
0001e186 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0002a2a8 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
0002a9a2 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
0000e14e l       .debug_str	00000000 
0005b0eb l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000f3af l       .debug_str	00000000 
0002a2e2 l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0002a985 l       .debug_str	00000000 
0000d6d8 l       .debug_str	00000000 
0002a2fe l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000d540 l       .debug_str	00000000 
0000d549 l       .debug_str	00000000 
0000d557 l       .debug_str	00000000 
0001e214 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0000d56f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
0002a30b l       .debug_str	00000000 
0002a344 l       .debug_str	00000000 
0002a3df l       .debug_str	00000000 
0002a439 l       .debug_str	00000000 
0002a475 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d31 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0002a9e4 l       .debug_str	00000000 
0002aa2f l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
000248ec l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
000218a6 l       .debug_str	00000000 
0002b69e l       .debug_str	00000000 
0002b6ab l       .debug_str	00000000 
0002b6eb l       .debug_str	00000000 
0002b7e8 l       .debug_str	00000000 
0002b828 l       .debug_str	00000000 
0002b837 l       .debug_str	00000000 
0002b877 l       .debug_str	00000000 
0002b896 l       .debug_str	00000000 
0002b8d6 l       .debug_str	00000000 
0002b8f2 l       .debug_str	00000000 
0002b932 l       .debug_str	00000000 
0002b940 l       .debug_str	00000000 
0002b980 l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000b178 l       .debug_str	00000000 
000223b8 l       .debug_str	00000000 
00000782 l       .debug_str	00000000 
0002b98e l       .debug_str	00000000 
0002b9cf l       .debug_str	00000000 
0000aeb9 l       .debug_str	00000000 
00014ab9 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
0002ba04 l       .debug_str	00000000 
0002ba45 l       .debug_str	00000000 
000248c9 l       .debug_str	00000000 
0002ba92 l       .debug_str	00000000 
0002bad3 l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0002bb13 l       .debug_str	00000000 
0002bb54 l       .debug_str	00000000 
0002bba1 l       .debug_str	00000000 
0002bbe2 l       .debug_str	00000000 
0002bc17 l       .debug_str	00000000 
0002bc86 l       .debug_str	00000000 
0002bd87 l       .debug_str	00000000 
00022c8f l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0002bdf6 l       .debug_str	00000000 
0002be15 l       .debug_str	00000000 
000012eb l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
000570e2 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0000e14e l       .debug_str	00000000 
0005b0eb l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0000f3af l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
00000e21 l       .debug_str	00000000 
00000e29 l       .debug_str	00000000 
00000e34 l       .debug_str	00000000 
00000e3f l       .debug_str	00000000 
00000e4c l       .debug_str	00000000 
00000e57 l       .debug_str	00000000 
00000e5f l       .debug_str	00000000 
00000e6a l       .debug_str	00000000 
00000e75 l       .debug_str	00000000 
00000e7f l       .debug_str	00000000 
00000e8a l       .debug_str	00000000 
00000e95 l       .debug_str	00000000 
00000ea2 l       .debug_str	00000000 
00000eae l       .debug_str	00000000 
00000ebb l       .debug_str	00000000 
00000ec9 l       .debug_str	00000000 
00000ed3 l       .debug_str	00000000 
000013b0 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
0002be05 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
0005d14d l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0000aeb5 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00005487 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
00005703 l       .debug_str	00000000 
0002aa61 l       .debug_str	00000000 
0002aace l       .debug_str	00000000 
0002ab64 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
0000e3d6 l       .debug_str	00000000 
0000e44d l       .debug_str	00000000 
0000e4d1 l       .debug_str	00000000 
0000e54c l       .debug_str	00000000 
0000e5ea l       .debug_str	00000000 
0000e695 l       .debug_str	00000000 
0002ac23 l       .debug_str	00000000 
0002ace8 l       .debug_str	00000000 
0002adba l       .debug_str	00000000 
0002ae83 l       .debug_str	00000000 
0002af6d l       .debug_str	00000000 
0002b074 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0002b17a l       .debug_str	00000000 
0002b278 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002b379 l       .debug_str	00000000 
0002b459 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0002b557 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
0000aeb0 l       .debug_str	00000000 
0002b577 l       .debug_str	00000000 
0002b57e l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0002b586 l       .debug_str	00000000 
0002b59a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002b5cc l       .debug_str	00000000 
0002b5e0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002b612 l       .debug_str	00000000 
0002b651 l       .debug_str	00000000 
0002b65f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0002c3ac l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0000d540 l       .debug_str	00000000 
0000d549 l       .debug_str	00000000 
0000d557 l       .debug_str	00000000 
0001e214 l       .debug_str	00000000 
0000d56f l       .debug_str	00000000 
0002a3df l       .debug_str	00000000 
0002c228 l       .debug_str	00000000 
0002c2e5 l       .debug_str	00000000 
0002c320 l       .debug_str	00000000 
0002c379 l       .debug_str	00000000 
0002a8e1 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0002c42f l       .debug_str	00000000 
0002c493 l       .debug_str	00000000 
0000af4f l       .debug_str	00000000 
0002c496 l       .debug_str	00000000 
0000df50 l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
0002a2a8 l       .debug_str	00000000 
0002a9a2 l       .debug_str	00000000 
00056485 l       .debug_str	00000000 
0005dda5 l       .debug_str	00000000 
00017325 l       .debug_str	00000000 
0002c506 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
0001e103 l       .debug_str	00000000 
00010905 l       .debug_str	00000000 
00010910 l       .debug_str	00000000 
0002c513 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
0000df34 l       .debug_str	00000000 
0000d569 l       .debug_str	00000000 
0000af16 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
0001e163 l       .debug_str	00000000 
0000df3d l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
0002c45a l       .debug_str	00000000 
0002be33 l       .debug_str	00000000 
0002bed0 l       .debug_str	00000000 
0002bf09 l       .debug_str	00000000 
0002bfa8 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0002c4c5 l       .debug_str	00000000 
0002bfe1 l       .debug_str	00000000 
0002c07e l       .debug_str	00000000 
0002c0b2 l       .debug_str	00000000 
0002c155 l       .debug_str	00000000 
0002c1f4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0002c513 l       .debug_str	00000000 
0002c52e l       .debug_str	00000000 
0002c5d2 l       .debug_str	00000000 
0002c647 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000fd7d l       .debug_str	00000000 
0002a931 l       .debug_str	00000000 
00010905 l       .debug_str	00000000 
00010910 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000ac5b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ac95 l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0000af36 l       .debug_str	00000000 
0000af41 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001e1ae l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
0002c563 l       .debug_str	00000000 
0002a8e1 l       .debug_str	00000000 
0000af2b l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
0002a940 l       .debug_str	00000000 
0000af48 l       .debug_str	00000000 
0000af55 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
0000a81f l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
0000f83a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0000ad2e l       .debug_str	00000000 
0000fa20 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
0002c67e l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
000109fc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1d7thnxtm1658vov
00000d18 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
0002c743 l       .debug_str	00000000 
0002c780 l       .debug_str	00000000 
0002c791 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1mpt8t9sy9fl5s1y
0002c988 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
0002c807 l       .debug_str	00000000 
0001e7b6 l       .debug_str	00000000 
0002c84c l       .debug_str	00000000 
0002c891 l       .debug_str	00000000 
0002c89e l       .debug_str	00000000 
0002c8e3 l       .debug_str	00000000 
0002c8f0 l       .debug_str	00000000 
00020794 l       .debug_str	00000000 
0002c935 l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0002c97d l       .debug_str	00000000 
0000ac39 l       .debug_str	00000000 
0002c9d0 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0002ca16 l       .debug_str	00000000 
0002ca5c l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0000ac57 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002c7c3 l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1yr11byuhnx447wf
00024840 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00056180 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
0001b3b2 l       .debug_str	00000000 
000111ce l       .debug_str	00000000 
00000e1c l       .debug_str	00000000 
00024ac9 l       .debug_str	00000000 
00030a8c l       .debug_str	00000000 
000111d3 l       .debug_str	00000000 
0002492c l       .debug_str	00000000 
000111ca l       .debug_str	00000000 
00024acf l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002caa2 l       .debug_str	00000000 
0001e857 l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00024926 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2c4l9zx47vkj1m82
000323b2 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002cb0b l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zdnjadro4igct6r
00018656 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002cb7a l       .debug_str	00000000 
0002cba0 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3w7pruxfhz9uhnv5
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001819 l       .debug_str	00000000 
00018675 l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0002cba9 l       .debug_str	00000000 
0002cc25 l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4wduwt141qumn59z
00001397 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
0002cc52 l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 pcinnba97cylogg
0001844a l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002ccb4 l       .debug_str	00000000 
0001843c l       .debug_str	00000000 
000132fe l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
0002d3b7 l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00003961 l       .debug_str	00000000 
0002d510 l       .debug_str	00000000 
000267cb l       .debug_str	00000000 
0002d58f l       .debug_str	00000000 
0002684e l       .debug_str	00000000 
0002d60e l       .debug_str	00000000 
0002d690 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
0002d6d9 l       .debug_str	00000000 
0002d75b l       .debug_str	00000000 
0002d978 l       .debug_str	00000000 
00026aa8 l       .debug_str	00000000 
0002d9fa l       .debug_str	00000000 
0002da7c l       .debug_str	00000000 
0002dac5 l       .debug_str	00000000 
0002db47 l       .debug_str	00000000 
0002db90 l       .debug_str	00000000 
0002dc12 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
0002de2f l       .debug_str	00000000 
0002e077 l       .debug_str	00000000 
000118c9 l       .debug_str	00000000 
00024840 l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00001828 l       .debug_str	00000000 
0002e0eb l       .debug_str	00000000 
0002e0f0 l       .debug_str	00000000 
0002e160 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00005441 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
0005c79b l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00005469 l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00005477 l       .debug_str	00000000 
0000547f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00005487 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
0000466d l       .debug_str	00000000 
00005703 l       .debug_str	00000000 
00005748 l       .debug_str	00000000 
000057b6 l       .debug_str	00000000 
0000584d l       .debug_str	00000000 
0000590d l       .debug_str	00000000 
000059f6 l       .debug_str	00000000 
00005b08 l       .debug_str	00000000 
00005c43 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005f34 l       .debug_str	00000000 
000060ea l       .debug_str	00000000 
000062c9 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
000065d5 l       .debug_str	00000000 
0000664c l       .debug_str	00000000 
000066d0 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
000067e9 l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00006936 l       .debug_str	00000000 
000069fb l       .debug_str	00000000 
00006acd l       .debug_str	00000000 
00006b96 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
00006f7e l       .debug_str	00000000 
0000709e l       .debug_str	00000000 
000071b5 l       .debug_str	00000000 
000072ef l       .debug_str	00000000 
00007436 l       .debug_str	00000000 
00007574 l       .debug_str	00000000 
000076d5 l       .debug_str	00000000 
00007843 l       .debug_str	00000000 
000079a8 l       .debug_str	00000000 
00007b30 l       .debug_str	00000000 
00007cc5 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00008000 l       .debug_str	00000000 
000081bc l       .debug_str	00000000 
0000836f l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
00008728 l       .debug_str	00000000 
00008902 l       .debug_str	00000000 
00008aff l       .debug_str	00000000 
00008d09 l       .debug_str	00000000 
00008f0a l       .debug_str	00000000 
0000912c l       .debug_str	00000000 
0000936b l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
0002de41 l       .debug_str	00000000 
0000554d l       .debug_str	00000000 
0000559b l       .debug_str	00000000 
00005606 l       .debug_str	00000000 
0002e089 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002cd06 l       .debug_str	00000000 
0002cd8d l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00009cf9 l       .debug_str	00000000 
0002cfae l       .debug_str	00000000 
0002d035 l       .debug_str	00000000 
0002d082 l       .debug_str	00000000 
0002d10b l       .debug_str	00000000 
0002d32e l       .debug_str	00000000 
0002d406 l       .debug_str	00000000 
000264e7 l       .debug_str	00000000 
0002d492 l       .debug_str	00000000 
00026749 l       .debug_str	00000000 
0001e000 l     O .text	0000001c str.0
0001e040 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000be5 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0005d84e l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002e3a4 l       .debug_str	00000000 
00012f00 l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
000012ef l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00018c84 l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002e3f4 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002ec0e l       .debug_str	00000000 
00007843 l       .debug_str	00000000 
0002e6b9 l       .debug_str	00000000 
0002e731 l       .debug_str	00000000 
0002e8c0 l       .debug_str	00000000 
0002e938 l       .debug_str	00000000 
0002eaa0 l       .debug_str	00000000 
0002eb18 l       .debug_str	00000000 
0002eb96 l       .debug_str	00000000 
000079a8 l       .debug_str	00000000 
00007b30 l       .debug_str	00000000 
00007cc5 l       .debug_str	00000000 
00007e51 l       .debug_str	00000000 
00008000 l       .debug_str	00000000 
000081bc l       .debug_str	00000000 
0002ed01 l       .debug_str	00000000 
0002ed79 l       .debug_str	00000000 
0002ef56 l       .debug_str	00000000 
0002efce l       .debug_str	00000000 
0002f09a l       .debug_str	00000000 
0002f112 l       .debug_str	00000000 
0002f142 l       .debug_str	00000000 
0002f1ba l       .debug_str	00000000 
0002f25f l       .debug_str	00000000 
0002f2d7 l       .debug_str	00000000 
0002f418 l       .debug_str	00000000 
0002f490 l       .debug_str	00000000 
0000836f l       .debug_str	00000000 
00008545 l       .debug_str	00000000 
00008728 l       .debug_str	00000000 
0002f646 l       .debug_str	00000000 
0002f6be l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000054b8 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000054be l       .debug_str	00000000 
000054c1 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000054ea l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00005520 l       .debug_str	00000000 
000064d1 l       .debug_str	00000000 
0002e458 l       .debug_str	00000000 
0002e4d0 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000064d4 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006581 l       .debug_str	00000000 
000065d5 l       .debug_str	00000000 
0000664c l       .debug_str	00000000 
000066d0 l       .debug_str	00000000 
0000674b l       .debug_str	00000000 
000067e9 l       .debug_str	00000000 
00006894 l       .debug_str	00000000 
00006936 l       .debug_str	00000000 
000069fb l       .debug_str	00000000 
00006acd l       .debug_str	00000000 
00006b96 l       .debug_str	00000000 
00006c82 l       .debug_str	00000000 
00006d7b l       .debug_str	00000000 
0002e527 l       .debug_str	00000000 
0002e59f l       .debug_str	00000000 
00006e6b l       .debug_str	00000000 
00006f7e l       .debug_str	00000000 
0000709e l       .debug_str	00000000 
000071b5 l       .debug_str	00000000 
000072ef l       .debug_str	00000000 
00007436 l       .debug_str	00000000 
00007574 l       .debug_str	00000000 
000076d5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 26y0fjfhtczgcip1
0005722a l       .debug_str	00000000 
0002f9eb l       .debug_str	00000000 
0002fa07 l       .debug_str	00000000 
00012e65 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
0000238e l       .debug_str	00000000 
0000035e l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
0005a17a l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f8c2 l       .debug_str	00000000 
00018cb3 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
0002f8eb l       .debug_str	00000000 
0002f8fc l       .debug_str	00000000 
0002f90c l       .debug_str	00000000 
0002f958 l       .debug_str	00000000 
0002f963 l       .debug_str	00000000 
0002f999 l       .debug_str	00000000 
0002f9b1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3529eu2hb2fyibnd
00018516 l       .debug_str	00000000 
00018550 l       .debug_str	00000000 
00018589 l       .debug_str	00000000 
00018598 l       .debug_str	00000000 
000185db l       .debug_str	00000000 
00058755 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
0001272d l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
000103a8 l       .debug_str	00000000 
00018592 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002fa2d l       .debug_str	00000000 
00012770 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0002fa56 l       .debug_str	00000000 
00002382 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00002388 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
00000ee2 l       .debug_str	00000000 
00000408 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cyvbl47c30y60eb
00016959 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00000b37 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
0002fa92 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002faa5 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
0002fb31 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
0002fb3a l       .debug_str	00000000 
0003ac7e l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
0002fb4a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
0002a29e l       .debug_str	00000000 
0002fb71 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
0002fbd1 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000187d9 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
0002fc9d l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000054a3 l       .debug_str	00000000 
000054ab l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002fc31 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
000323b2 l       .debug_str	00000000 
00000af6 l       .debug_str	00000000 
00001504 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
0002fca6 l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000af6 l       .debug_str	00000000 
0002fd17 l       .debug_str	00000000 
0002fd2a l       .debug_str	00000000 
00018ba5 l       .debug_str	00000000 
0005b027 l       .debug_str	00000000 
0002fd5b l       .debug_str	00000000 
0002fd63 l       .debug_str	00000000 
0002fd6c l       .debug_str	00000000 
0002fdb5 l       .debug_str	00000000 
00004bd7 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0002fd73 l       .debug_str	00000000 
0002fdb2 l       .debug_str	00000000 
0002fdbb l       .debug_str	00000000 
0002fdfd l       .debug_str	00000000 
0002fe07 l       .debug_str	00000000 
0002fe4a l       .debug_str	00000000 
0002fe54 l       .debug_str	00000000 
0002fe97 l       .debug_str	00000000 
0002fea1 l       .debug_str	00000000 
0002fee4 l       .debug_str	00000000 
0002feef l       .debug_str	00000000 
0002ff34 l       .debug_str	00000000 
0002ff3f l       .debug_str	00000000 
0002ff84 l       .debug_str	00000000 
0002ff8a l       .debug_str	00000000 
00000c59 l       .debug_str	00000000 
0000d6d9 l       .debug_str	00000000 
0000467d l       .debug_str	00000000 
000305bf l       .debug_str	00000000 
000103a4 l       .debug_str	00000000 
0002ff97 l       .debug_str	00000000 
0002ffa7 l       .debug_str	00000000 
00000bed l       .debug_str	00000000 
000118a1 l       .debug_str	00000000 
00010952 l       .debug_str	00000000 
0001188b l       .debug_str	00000000 
00013e44 l       .debug_str	00000000 
00009ad0 l       .debug_str	00000000 
00000c25 l       .debug_str	00000000 
00009c75 l       .debug_str	00000000 
00000bdd l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000c29 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031e19 l       .debug_str	00000000 
0005d943 l       .debug_str	00000000 
000054b0 l       .debug_str	00000000 
000054b1 l       .debug_str	00000000 
00001397 l       .debug_str	00000000 
00009c7e l       .debug_str	00000000 
00018d91 l       .debug_str	00000000 
0002a193 l       .debug_str	00000000 
00001d4b l       .debug_str	00000000 
0002ffed l       .debug_str	00000000 
00027edb l       .debug_str	00000000 
0005bd96 l       .debug_str	00000000 
000309c3 l       .debug_str	00000000 
00011893 l       .debug_str	00000000 
0005b9a8 l       .debug_str	00000000 
00000c14 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007d4 l       .debug_str	00000000 
000571fe l       .debug_str	00000000 
0002ffff l       .debug_str	00000000 
00030004 l       .debug_str	00000000 
0005d31e l       .debug_str	00000000 
0003000f l       .debug_str	00000000 
00000320 l       .debug_str	00000000 
00030019 l       .debug_str	00000000 
0003068d l       .debug_str	00000000 
00030023 l       .debug_str	00000000 
0001844a l       .debug_str	00000000 
000306cd l       .debug_str	00000000 
00000cbe l       .debug_str	00000000 
00030a06 l       .debug_str	00000000 
0001189d l       .debug_str	00000000 
0001894e l       .debug_str	00000000 
00030031 l       .debug_str	00000000 
000300a5 l       .debug_str	00000000 
000308e7 l       .debug_str	00000000 
000300b7 l       .debug_str	00000000 
000306d3 l       .debug_str	00000000 
000306ad l       .debug_str	00000000 
0001a1aa l       .debug_str	00000000 
0003092a l       .debug_str	00000000 
000300bc l       .debug_str	00000000 
00030130 l       .debug_str	00000000 
00030a3f l       .debug_str	00000000 
00030a86 l       .debug_str	00000000 
0003098c l       .debug_str	00000000 
00030148 l       .debug_str	00000000 
000401eb l       .debug_str	00000000 
00035938 l       .debug_str	00000000 
000571ad l       .debug_str	00000000 
00030aa1 l       .debug_str	00000000 
0003095b l       .debug_str	00000000 
000301c0 l       .debug_str	00000000 
00003f0d l       .debug_str	00000000 
00000c20 l       .debug_str	00000000 
0005afb4 l       .debug_str	00000000 
00027464 l       .debug_str	00000000 
00030218 l       .debug_str	00000000 
0003021d l       .debug_str	00000000 
0003022f l       .debug_str	00000000 
000218a6 l       .debug_str	00000000 
0003111f l       .debug_str	00000000 
00030238 l       .debug_str	00000000 
0001f9de l       .debug_str	00000000 
00030260 l       .debug_str	00000000 
00030270 l       .debug_str	00000000 
00059650 l       .debug_str	00000000 
000302c9 l       .debug_str	00000000 
000302d1 l       .debug_str	00000000 
00018d21 l       .debug_str	00000000 
00000c3a l       .debug_str	00000000 
0000fe28 l       .debug_str	00000000 
000302d9 l       .debug_str	00000000 
0001b7c2 l       .debug_str	00000000 
000302e5 l       .debug_str	00000000 
000302ef l       .debug_str	00000000 
000302fc l       .debug_str	00000000 
00030309 l       .debug_str	00000000 
0003031e l       .debug_str	00000000 
00030332 l       .debug_str	00000000 
00030348 l       .debug_str	00000000 
00030350 l       .debug_str	00000000 
0003035d l       .debug_str	00000000 
0003036a l       .debug_str	00000000 
00030c73 l       .debug_str	00000000 
0000ad53 l       .debug_str	00000000 
00030377 l       .debug_str	00000000 
000303a4 l       .debug_str	00000000 
000303d3 l       .debug_str	00000000 
000303fa l       .debug_str	00000000 
00000bcb l       .debug_str	00000000 
000013bc l       .debug_str	00000000 
00030419 l       .debug_str	00000000 
0003042e l       .debug_str	00000000 
0001f400 l       .debug_str	00000000 
0004b07f l       .debug_str	00000000 
0000a3d3 l       .debug_str	00000000 
00056e0c l       .debug_str	00000000 
00000be5 l       .debug_str	00000000 
00000c08 l       .debug_str	00000000 
00000d4c l       .debug_str	00000000 
00030438 l       .debug_str	00000000 
0003045d l       .debug_str	00000000 
00030443 l       .debug_str	00000000 
000304dc l       .debug_str	00000000 
0003046d l       .debug_str	00000000 
00030473 l       .debug_str	00000000 
00030482 l       .debug_str	00000000 
0003048d l       .debug_str	00000000 
000304c2 l       .debug_str	00000000 
000304e7 l       .debug_str	00000000 
000304f7 l       .debug_str	00000000 
00057a16 l       .debug_str	00000000 
00030529 l       .debug_str	00000000 
0003052e l       .debug_str	00000000 
000588b9 l       .debug_str	00000000 
00031d93 l       .debug_str	00000000 
00031d8c l       .debug_str	00000000 
00018c84 l       .debug_str	00000000 
00031dba l       .debug_str	00000000 
00031dee l       .debug_str	00000000 
00030534 l       .debug_str	00000000 
00005464 l       .debug_str	00000000 
00030572 l       .debug_str	00000000 
00031d97 l       .debug_str	00000000 
00031de4 l       .debug_str	00000000 
00030553 l       .debug_str	00000000 
00030540 l       .debug_str	00000000 
00030559 l       .debug_str	00000000 
00027463 l       .debug_str	00000000 
0000a81f l       .debug_str	00000000 
0000a81e l       .debug_str	00000000 
00030581 l       .debug_str	00000000 
00030589 l       .debug_str	00000000 
0003ba22 l       .debug_str	00000000 
0003058f l       .debug_str	00000000 
0004953d l       .debug_str	00000000 
000305b6 l       .debug_str	00000000 
0003059a l       .debug_str	00000000 
0000d6d8 l       .debug_str	00000000 
000305be l       .debug_str	00000000 
0003026a l       .debug_str	00000000 
0002803b l       .debug_str	00000000 
0002a0f3 l       .debug_str	00000000 
000305c3 l       .debug_str	00000000 
000305e7 l       .debug_str	00000000 
000305ed l       .debug_str	00000000 
000305f5 l       .debug_str	00000000 
0004bba8 l       .debug_str	00000000 
0003b61e l       .debug_str	00000000 
000305fa l       .debug_str	00000000 
00030622 l       .debug_str	00000000 
00030604 l       .debug_str	00000000 
00018462 l       .debug_str	00000000 
0001e0fe l       .debug_str	00000000 
0001b760 l       .debug_str	00000000 
000248ec l       .debug_str	00000000 
00028043 l       .debug_str	00000000 
00028050 l       .debug_str	00000000 
00028059 l       .debug_str	00000000 
00056174 l       .debug_str	00000000 
00030636 l       .debug_str	00000000 
0003062a l       .debug_str	00000000 
00011e00 l       .debug_str	00000000 
00030643 l       .debug_str	00000000 
0003064f l       .debug_str	00000000 
00030672 l       .debug_str	00000000 
0003065c l       .debug_str	00000000 
00030680 l       .debug_str	00000000 
000306a0 l       .debug_str	00000000 
000306c0 l       .debug_str	00000000 
000306db l       .debug_str	00000000 
000306f6 l       .debug_str	00000000 
000306fc l       .debug_str	00000000 
00030700 l       .debug_str	00000000 
00030711 l       .debug_str	00000000 
00030704 l       .debug_str	00000000 
00000ee0 l       .debug_str	00000000 
00000ee4 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00000f24 l       .debug_str	00000000 
00000f14 l       .debug_str	00000000 
00030726 l       .debug_str	00000000 
00030721 l       .debug_str	00000000 
00030739 l       .debug_str	00000000 
00030785 l       .debug_str	00000000 
0003075e l       .debug_str	00000000 
00030775 l       .debug_str	00000000 
0003079f l       .debug_str	00000000 
00030790 l       .debug_str	00000000 
000307e7 l       .debug_str	00000000 
000307c7 l       .debug_str	00000000 
00030840 l       .debug_str	00000000 
00030820 l       .debug_str	00000000 
00056166 l       .debug_str	00000000 
00030897 l       .debug_str	00000000 
0003089c l       .debug_str	00000000 
000308a2 l       .debug_str	00000000 
000308c5 l       .debug_str	00000000 
000308a7 l       .debug_str	00000000 
000308d0 l       .debug_str	00000000 
0003091b l       .debug_str	00000000 
0003094c l       .debug_str	00000000 
0003097d l       .debug_str	00000000 
000309ac l       .debug_str	00000000 
000309f7 l       .debug_str	00000000 
00030a28 l       .debug_str	00000000 
0001f7fd l       .debug_str	00000000 
00000c19 l       .debug_str	00000000 
00000c33 l       .debug_str	00000000 
00000c3f l       .debug_str	00000000 
00036062 l       .debug_str	00000000 
00001a44 l       .debug_str	00000000 
00035b78 l       .debug_str	00000000 
00059223 l       .debug_str	00000000 
00000c47 l       .debug_str	00000000 
0005d85d l       .debug_str	00000000 
00000b4b l       .debug_str	00000000 
00000b50 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5d l       .debug_str	00000000 
00000b65 l       .debug_str	00000000 
00001d50 l       .debug_str	00000000 
00000c4c l       .debug_str	00000000 
00000c56 l       .debug_str	00000000 
00000c5d l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c6b l       .debug_str	00000000 
0000af5c l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c96 l       .debug_str	00000000 
00000c7c l       .debug_str	00000000 
00000c9f l       .debug_str	00000000 
00000cc3 l       .debug_str	00000000 
00056e95 l       .debug_str	00000000 
00056d96 l       .debug_str	00000000 
00000cea l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cff l       .debug_str	00000000 
00000d03 l       .debug_str	00000000 
00000d0c l       .debug_str	00000000 
00000d18 l       .debug_str	00000000 
00000d3d l       .debug_str	00000000 
00000d31 l       .debug_str	00000000 
00000d42 l       .debug_str	00000000 
000573de l       .debug_str	00000000 
00000b6f l       .debug_str	00000000 
00000b72 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00024810 l       .debug_str	00000000 
00000d67 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
00000d71 l       .debug_str	00000000 
00000de1 l       .debug_str	00000000 
00000dcf l       .debug_str	00000000 
00000dec l       .debug_str	00000000 
0002498d l       .debug_str	00000000 
00024981 l       .debug_str	00000000 
000247be l       .debug_str	00000000 
00030a79 l       .debug_str	00000000 
00030a92 l       .debug_str	00000000 
00000bd9 l       .debug_str	00000000 
00030ac0 l       .debug_str	00000000 
00030abf l       .debug_str	00000000 
00030ad4 l       .debug_str	00000000 
00030ac5 l       .debug_str	00000000 
00056e87 l       .debug_str	00000000 
00056154 l       .debug_str	00000000 
00000e05 l       .debug_str	00000000 
00030b01 l       .debug_str	00000000 
00030af3 l       .debug_str	00000000 
00030af2 l       .debug_str	00000000 
000248f5 l       .debug_str	00000000 
00018511 l       .debug_str	00000000 
0005dc93 l       .debug_str	00000000 
00030b0a l       .debug_str	00000000 
00030b0e l       .debug_str	00000000 
00030b11 l       .debug_str	00000000 
0005c783 l       .debug_str	00000000 
0001e0ec l       .debug_str	00000000 
00030b14 l       .debug_str	00000000 
0001f378 l       .debug_str	00000000 
00030b18 l       .debug_str	00000000 
00030b17 l       .debug_str	00000000 
00030b1d l       .debug_str	00000000 
00030bef l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00030b3b l       .debug_str	00000000 
00030b29 l       .debug_str	00000000 
00030b60 l       .debug_str	00000000 
00030c28 l       .debug_str	00000000 
00030b7e l       .debug_str	00000000 
00030b6c l       .debug_str	00000000 
00030ba3 l       .debug_str	00000000 
00030bbc l       .debug_str	00000000 
00030baa l       .debug_str	00000000 
00030bc8 l       .debug_str	00000000 
00030be0 l       .debug_str	00000000 
00030c19 l       .debug_str	00000000 
0001f37e l       .debug_str	00000000 
00030c52 l       .debug_str	00000000 
00030c5f l       .debug_str	00000000 
00030c5e l       .debug_str	00000000 
00030c67 l       .debug_str	00000000 
00030c94 l       .debug_str	00000000 
00030c7f l       .debug_str	00000000 
00030cb1 l       .debug_str	00000000 
00030cbd l       .debug_str	00000000 
00030d67 l       .debug_str	00000000 
00030cc9 l       .debug_str	00000000 
00030cd0 l       .debug_str	00000000 
00030cd9 l       .debug_str	00000000 
00030ce7 l       .debug_str	00000000 
00030cee l       .debug_str	00000000 
00030cf6 l       .debug_str	00000000 
00030cfd l       .debug_str	00000000 
00030d43 l       .debug_str	00000000 
00030d1e l       .debug_str	00000000 
00030d09 l       .debug_str	00000000 
00030d2e l       .debug_str	00000000 
00030d52 l       .debug_str	00000000 
0000d6f7 l       .debug_str	00000000 
00030d73 l       .debug_str	00000000 
0002a106 l       .debug_str	00000000 
0005a66d l       .debug_str	00000000 
00024731 l       .debug_str	00000000 
0002471a l       .debug_str	00000000 
00030d8d l       .debug_str	00000000 
00030db0 l       .debug_str	00000000 
00030d99 l       .debug_str	00000000 
00030dfa l       .debug_str	00000000 
00030dee l       .debug_str	00000000 
00030265 l       .debug_str	00000000 
00030e17 l       .debug_str	00000000 
00030e00 l       .debug_str	00000000 
00030e60 l       .debug_str	00000000 
00030e88 l       .debug_str	00000000 
00030e71 l       .debug_str	00000000 
00059211 l       .debug_str	00000000 
00002889 l       .debug_str	00000000 
0005729c l       .debug_str	00000000 
00030f37 l       .debug_str	00000000 
00030f19 l       .debug_str	00000000 
0003102d l       .debug_str	00000000 
0003100d l       .debug_str	00000000 
000310a0 l       .debug_str	00000000 
00031080 l       .debug_str	00000000 
00047666 l       .debug_str	00000000 
000310f3 l       .debug_str	00000000 
00031100 l       .debug_str	00000000 
0003110b l       .debug_str	00000000 
00031121 l       .debug_str	00000000 
0003112b l       .debug_str	00000000 
00031181 l       .debug_str	00000000 
00031193 l       .debug_str	00000000 
000311e5 l       .debug_str	00000000 
000311f9 l       .debug_str	00000000 
0003124d l       .debug_str	00000000 
00031254 l       .debug_str	00000000 
0003129a l       .debug_str	00000000 
000312a9 l       .debug_str	00000000 
00031303 l       .debug_str	00000000 
00031359 l       .debug_str	00000000 
000313b1 l       .debug_str	00000000 
000313fb l       .debug_str	00000000 
00031401 l       .debug_str	00000000 
00031451 l       .debug_str	00000000 
0003149d l       .debug_str	00000000 
000314eb l       .debug_str	00000000 
0002a1ac l       .debug_str	00000000 
0003152b l       .debug_str	00000000 
00031578 l       .debug_str	00000000 
000315c1 l       .debug_str	00000000 
0003160c l       .debug_str	00000000 
00031649 l       .debug_str	00000000 
00031659 l       .debug_str	00000000 
000316b4 l       .debug_str	00000000 
0003170b l       .debug_str	00000000 
00031764 l       .debug_str	00000000 
0003ea0a l       .debug_str	00000000 
000317af l       .debug_str	00000000 
00031803 l       .debug_str	00000000 
00031853 l       .debug_str	00000000 
000318a5 l       .debug_str	00000000 
00056d08 l       .debug_str	00000000 
000318e9 l       .debug_str	00000000 
00031935 l       .debug_str	00000000 
0003197d l       .debug_str	00000000 
000319c7 l       .debug_str	00000000 
0003e840 l       .debug_str	00000000 
00031a03 l       .debug_str	00000000 
00031a57 l       .debug_str	00000000 
00031aa7 l       .debug_str	00000000 
00031af9 l       .debug_str	00000000 
00031b3d l       .debug_str	00000000 
00031b49 l       .debug_str	00000000 
00031ba0 l       .debug_str	00000000 
00031bf3 l       .debug_str	00000000 
00031c48 l       .debug_str	00000000 
00031c8f l       .debug_str	00000000 
00031c9b l       .debug_str	00000000 
00031cb2 l       .debug_str	00000000 
00031cab l       .debug_str	00000000 
00031cc4 l       .debug_str	00000000 
00031cd9 l       .debug_str	00000000 
00031d2a l       .debug_str	00000000 
00031d3a l       .debug_str	00000000 
00031d8b l       .debug_str	00000000 
00031d96 l       .debug_str	00000000 
00031db9 l       .debug_str	00000000 
00031ded l       .debug_str	00000000 
00031e03 l       .debug_str	00000000 
00031e31 l       .debug_str	00000000 
00031e25 l       .debug_str	00000000 
00031e3f l       .debug_str	00000000 
00031e3e l       .debug_str	00000000 
00001b6e l       .debug_str	00000000 
0001e0f4 l       .debug_str	00000000 
0002a119 l       .debug_str	00000000 
0002a118 l       .debug_str	00000000 
0002a11e l       .debug_str	00000000 
0002a11d l       .debug_str	00000000 
00031e42 l       .debug_str	00000000 
00031e82 l       .debug_str	00000000 
00031e8a l       .debug_str	00000000 
00031eca l       .debug_str	00000000 
00031ed4 l       .debug_str	00000000 
000562a0 l       .debug_str	00000000 
0005ae0b l       .debug_str	00000000 
00031f10 l       .debug_str	00000000 
0002056c l       .debug_str	00000000 
00034d2e l       .debug_str	00000000 
00031f38 l       .debug_str	00000000 
00020424 l       .debug_str	00000000 
00031f61 l       .debug_str	00000000 
00031f86 l       .debug_str	00000000 
00042e7e l       .debug_str	00000000 
000572f6 l       .debug_str	00000000 
00031f8d l       .debug_str	00000000 
00031f96 l       .debug_str	00000000 
00031fcf l       .debug_str	00000000 
0001011b l       .debug_str	00000000 
00031fd7 l       .debug_str	00000000 
00014002 l       .debug_str	00000000 
0003206c l       .debug_str	00000000 
0000ab7f l       .debug_str	00000000 
000320b7 l       .debug_str	00000000 
0000ab2a l       .debug_str	00000000 
000320fe l       .debug_str	00000000 
000132fe l       .debug_str	00000000 
00032153 l       .debug_str	00000000 
00032190 l       .debug_str	00000000 
00012924 l       .debug_str	00000000 
0003219b l       .debug_str	00000000 
0001996e l       .debug_str	00000000 
000321f0 l       .debug_str	00000000 
000198fe l       .debug_str	00000000 
00032242 l       .debug_str	00000000 
00009c6c l       .debug_str	00000000 
00032289 l       .debug_str	00000000 
00009c67 l       .debug_str	00000000 
00002da1 l       .debug_str	00000000 
00011089 l       .debug_str	00000000 
00032c91 l       .debug_str	00000000 
0003230f l       .debug_str	00000000 
00032350 l       .debug_str	00000000 
00032373 l       .debug_str	00000000 
000323ae l       .debug_str	00000000 
000323b8 l       .debug_str	00000000 
00032442 l       .debug_str	00000000 
00032474 l       .debug_str	00000000 
0001232f l       .debug_str	00000000 
0001291c l       .debug_str	00000000 
000324e8 l       .debug_str	00000000 
00032539 l       .debug_str	00000000 
00018d6c l       .debug_str	00000000 
0003257b l       .debug_str	00000000 
00032602 l       .debug_str	00000000 
00032611 l       .debug_str	00000000 
0003269b l       .debug_str	00000000 
00032717 l       .debug_str	00000000 
00032747 l       .debug_str	00000000 
00032782 l       .debug_str	00000000 
0003278c l       .debug_str	00000000 
00032803 l       .debug_str	00000000 
0003280d l       .debug_str	00000000 
00032862 l       .debug_str	00000000 
0003286b l       .debug_str	00000000 
00013d8c l       .debug_str	00000000 
000053e2 l       .debug_str	00000000 
000328bc l       .debug_str	00000000 
00000f0b l       .debug_str	00000000 
000328c9 l       .debug_str	00000000 
000328d2 l       .debug_str	00000000 
000328e8 l       .debug_str	00000000 
000328f5 l       .debug_str	00000000 
0003293a l       .debug_str	00000000 
0003294e l       .debug_str	00000000 
000329a3 l       .debug_str	00000000 
000329ac l       .debug_str	00000000 
00049b1d l       .debug_str	00000000 
000329e4 l       .debug_str	00000000 
00032a21 l       .debug_str	00000000 
00032a2c l       .debug_str	00000000 
00032aaf l       .debug_str	00000000 
00032aba l       .debug_str	00000000 
00032b40 l       .debug_str	00000000 
00032bb5 l       .debug_str	00000000 
00032be1 l       .debug_str	00000000 
00032c6a l       .debug_str	00000000 
00032c79 l       .debug_str	00000000 
00032c86 l       .debug_str	00000000 
00032c9a l       .debug_str	00000000 
00032cf0 l       .debug_str	00000000 
00032d5f l       .debug_str	00000000 
00032ddf l       .debug_str	00000000 
00032e4d l       .debug_str	00000000 
00032ed8 l       .debug_str	00000000 
00032f4d l       .debug_str	00000000 
00032f8d l       .debug_str	00000000 
00033010 l       .debug_str	00000000 
00033051 l       .debug_str	00000000 
00047528 l       .debug_str	00000000 
0004b042 l       .debug_str	00000000 
000330b6 l       .debug_str	00000000 
00033165 l       .debug_str	00000000 
000331b0 l       .debug_str	00000000 
00019bdd l       .debug_str	00000000 
00033259 l       .debug_str	00000000 
000332d5 l       .debug_str	00000000 
00018bda l       .debug_str	00000000 
000332fa l       .debug_str	00000000 
0000abea l       .debug_str	00000000 
00033347 l       .debug_str	00000000 
000191e6 l       .debug_str	00000000 
0003339a l       .debug_str	00000000 
000333d5 l       .debug_str	00000000 
000333e0 l       .debug_str	00000000 
0001f01c l       .debug_str	00000000 
0003346c l       .debug_str	00000000 
00018e3e l       .debug_str	00000000 
000334ef l       .debug_str	00000000 
00033577 l       .debug_str	00000000 
0002547f l       .debug_str	00000000 
000335ec l       .debug_str	00000000 
00033672 l       .debug_str	00000000 
0001a0e4 l       .debug_str	00000000 
000336e7 l       .debug_str	00000000 
0000a3b7 l       .debug_str	00000000 
0003374a l       .debug_str	00000000 
00009cf1 l       .debug_str	00000000 
000337ac l       .debug_str	00000000 
00009b83 l       .debug_str	00000000 
000337f2 l       .debug_str	00000000 
0003383a l       .debug_str	00000000 
00033844 l       .debug_str	00000000 
00033885 l       .debug_str	00000000 
0003389f l       .debug_str	00000000 
0002a1d1 l       .debug_str	00000000 
00000b70 l       .debug_str	00000000 
000338a5 l       .debug_str	00000000 
000338ae l       .debug_str	00000000 
00033913 l       .debug_str	00000000 
00033922 l       .debug_str	00000000 
00033964 l       .debug_str	00000000 
0003396e l       .debug_str	00000000 
000339d3 l       .debug_str	00000000 
00033a15 l       .debug_str	00000000 
00033a5f l       .debug_str	00000000 
00033a6e l       .debug_str	00000000 
00033aa4 l       .debug_str	00000000 
00033aad l       .debug_str	00000000 
0001bebc l       .debug_str	00000000 
00033ab7 l       .debug_str	00000000 
00033aba l       .debug_str	00000000 
00033af2 l       .debug_str	00000000 
00033afc l       .debug_str	00000000 
00033b40 l       .debug_str	00000000 
00033b56 l       .debug_str	00000000 
00033b9f l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
0002a1bc l       .debug_str	00000000 
00033be4 l       .debug_str	00000000 
00033c2d l       .debug_str	00000000 
00033c3b l       .debug_str	00000000 
00033c83 l       .debug_str	00000000 
0002888a l       .debug_str	00000000 
00033ccd l       .debug_str	00000000 
0003d477 l       .debug_str	00000000 
00033d65 l       .debug_str	00000000 
00056cd9 l       .debug_str	00000000 
00033dff l       .debug_str	00000000 
00028d7a l       .debug_str	00000000 
00033e71 l       .debug_str	00000000 
00028aad l       .debug_str	00000000 
00033f14 l       .debug_str	00000000 
00001a40 l       .debug_str	00000000 
00033f46 l       .debug_str	00000000 
00033f8d l       .debug_str	00000000 
00033f9b l       .debug_str	00000000 
00033fa5 l       .debug_str	00000000 
00033ff3 l       .debug_str	00000000 
00034003 l       .debug_str	00000000 
0003404e l       .debug_str	00000000 
0003405c l       .debug_str	00000000 
000340ea l       .debug_str	00000000 
000340f9 l       .debug_str	00000000 
0000ac39 l       .debug_str	00000000 
00034142 l       .debug_str	00000000 
0000abe2 l       .debug_str	00000000 
00034187 l       .debug_str	00000000 
000341c1 l       .debug_str	00000000 
000341ca l       .debug_str	00000000 
00034216 l       .debug_str	00000000 
0003422e l       .debug_str	00000000 
00034290 l       .debug_str	00000000 
0000ab32 l       .debug_str	00000000 
000342c5 l       .debug_str	00000000 
000342ed l       .debug_str	00000000 
00034325 l       .debug_str	00000000 
0003434e l       .debug_str	00000000 
00034359 l       .debug_str	00000000 
0001f77b l       .debug_str	00000000 
0003437e l       .debug_str	00000000 
0003440d l       .debug_str	00000000 
00034444 l       .debug_str	00000000 
000344ca l       .debug_str	00000000 
00034518 l       .debug_str	00000000 
00034521 l       .debug_str	00000000 
000345a7 l       .debug_str	00000000 
000345ba l       .debug_str	00000000 
00034643 l       .debug_str	00000000 
0003469f l       .debug_str	00000000 
000346e1 l       .debug_str	00000000 
00034793 l       .debug_str	00000000 
000347d2 l       .debug_str	00000000 
00034877 l       .debug_str	00000000 
0003490b l       .debug_str	00000000 
00034931 l       .debug_str	00000000 
000349ad l       .debug_str	00000000 
000349e8 l       .debug_str	00000000 
000349f5 l       .debug_str	00000000 
00034a2e l       .debug_str	00000000 
00034a46 l       .debug_str	00000000 
00034a86 l       .debug_str	00000000 
0002fa9f l       .debug_str	00000000 
00034a92 l       .debug_str	00000000 
00034aef l       .debug_str	00000000 
00034b4c l       .debug_str	00000000 
00034bf9 l       .debug_str	00000000 
00034c56 l       .debug_str	00000000 
0001b490 l       .debug_str	00000000 
00034cc3 l       .debug_str	00000000 
00034d27 l       .debug_str	00000000 
00034d32 l       .debug_str	00000000 
00034d62 l       .debug_str	00000000 
00034d8e l       .debug_str	00000000 
00034dfa l       .debug_str	00000000 
00034e2a l       .debug_str	00000000 
00034e66 l       .debug_str	00000000 
00034eb0 l       .debug_str	00000000 
00034ec0 l       .debug_str	00000000 
00034ef5 l       .debug_str	00000000 
00034f3a l       .debug_str	00000000 
00034f45 l       .debug_str	00000000 
00034f85 l       .debug_str	00000000 
00034f93 l       .debug_str	00000000 
0003501f l       .debug_str	00000000 
0003509b l       .debug_str	00000000 
000350bb l       .debug_str	00000000 
00035115 l       .debug_str	00000000 
00035122 l       .debug_str	00000000 
0003515b l       .debug_str	00000000 
00035163 l       .debug_str	00000000 
000351b8 l       .debug_str	00000000 
0003520a l       .debug_str	00000000 
000340ef l       .debug_str	00000000 
00035251 l       .debug_str	00000000 
000352c5 l       .debug_str	00000000 
00035309 l       .debug_str	00000000 
00035355 l       .debug_str	00000000 
00035394 l       .debug_str	00000000 
000353ba l       .debug_str	00000000 
000353cc l       .debug_str	00000000 
000353d6 l       .debug_str	00000000 
00035418 l       .debug_str	00000000 
00013188 l       .debug_str	00000000 
0003549f l       .debug_str	00000000 
0002cc25 l       .debug_str	00000000 
0003551b l       .debug_str	00000000 
00035592 l       .debug_str	00000000 
000355e0 l       .debug_str	00000000 
00014928 l       .debug_str	00000000 
00035670 l       .debug_str	00000000 
000356ac l       .debug_str	00000000 
000356b9 l       .debug_str	00000000 
000356ff l       .debug_str	00000000 
0003570c l       .debug_str	00000000 
00036452 l       .debug_str	00000000 
0003573e l       .debug_str	00000000 
0003578e l       .debug_str	00000000 
000357a5 l       .debug_str	00000000 
0003582f l       .debug_str	00000000 
000142e0 l       .debug_str	00000000 
000358ab l       .debug_str	00000000 
000358bf l       .debug_str	00000000 
0003591c l       .debug_str	00000000 
0003592b l       .debug_str	00000000 
0003593c l       .debug_str	00000000 
00035996 l       .debug_str	00000000 
000359a5 l       .debug_str	00000000 
00035a2e l       .debug_str	00000000 
00035a3c l       .debug_str	00000000 
00035a92 l       .debug_str	00000000 
00035ae6 l       .debug_str	00000000 
00035b5f l       .debug_str	00000000 
00035b77 l       .debug_str	00000000 
00035b81 l       .debug_str	00000000 
00035c18 l       .debug_str	00000000 
00035c32 l       .debug_str	00000000 
00022398 l       .debug_str	00000000 
00035c6b l       .debug_str	00000000 
00011dfd l       .debug_str	00000000 
00035cd0 l       .debug_str	00000000 
00035d67 l       .debug_str	00000000 
00035d6b l       .debug_str	00000000 
00036060 l       .debug_str	00000000 
00035d70 l       .debug_str	00000000 
0005bcd3 l       .debug_str	00000000 
000126ea l       .debug_str	00000000 
00035da2 l       .debug_str	00000000 
0001344d l       .debug_str	00000000 
00035de0 l       .debug_str	00000000 
00009b29 l       .debug_str	00000000 
00035e33 l       .debug_str	00000000 
00035ebf l       .debug_str	00000000 
00035f3b l       .debug_str	00000000 
00035f5a l       .debug_str	00000000 
00035fa5 l       .debug_str	00000000 
00035fb2 l       .debug_str	00000000 
00036026 l       .debug_str	00000000 
0003a34b l       .debug_str	00000000 
0004ba61 l       .debug_str	00000000 
00036045 l       .debug_str	00000000 
00036065 l       .debug_str	00000000 
00036081 l       .debug_str	00000000 
0003608b l       .debug_str	00000000 
00036117 l       .debug_str	00000000 
00036193 l       .debug_str	00000000 
000361c4 l       .debug_str	00000000 
00036247 l       .debug_str	00000000 
00036267 l       .debug_str	00000000 
000362ed l       .debug_str	00000000 
00036362 l       .debug_str	00000000 
0002fb3a l       .debug_str	00000000 
0005929f l       .debug_str	00000000 
000363a3 l       .debug_str	00000000 
00028e40 l       .debug_str	00000000 
000363ee l       .debug_str	00000000 
0003644a l       .debug_str	00000000 
00036456 l       .debug_str	00000000 
0003649f l       .debug_str	00000000 
000364af l       .debug_str	00000000 
000364f4 l       .debug_str	00000000 
0003653d l       .debug_str	00000000 
00036582 l       .debug_str	00000000 
000365de l       .debug_str	00000000 
00036629 l       .debug_str	00000000 
00036670 l       .debug_str	00000000 
000366ce l       .debug_str	00000000 
00036719 l       .debug_str	00000000 
00036760 l       .debug_str	00000000 
000367be l       .debug_str	00000000 
00036809 l       .debug_str	00000000 
00036850 l       .debug_str	00000000 
000368ae l       .debug_str	00000000 
000368f7 l       .debug_str	00000000 
0003693c l       .debug_str	00000000 
00036998 l       .debug_str	00000000 
000369e1 l       .debug_str	00000000 
00036a26 l       .debug_str	00000000 
00036a82 l       .debug_str	00000000 
00036acc l       .debug_str	00000000 
00036b12 l       .debug_str	00000000 
00036b6f l       .debug_str	00000000 
00036bb9 l       .debug_str	00000000 
00036bff l       .debug_str	00000000 
00036c5c l       .debug_str	00000000 
00036cb7 l       .debug_str	00000000 
00036cff l       .debug_str	00000000 
00036d43 l       .debug_str	00000000 
00036d8b l       .debug_str	00000000 
00036dcf l       .debug_str	00000000 
00036e2a l       .debug_str	00000000 
00036e73 l       .debug_str	00000000 
00036eb8 l       .debug_str	00000000 
00036f14 l       .debug_str	00000000 
00036f5d l       .debug_str	00000000 
00036fa2 l       .debug_str	00000000 
00036ffe l       .debug_str	00000000 
00037047 l       .debug_str	00000000 
0003708c l       .debug_str	00000000 
000370e8 l       .debug_str	00000000 
00037132 l       .debug_str	00000000 
00037178 l       .debug_str	00000000 
000371d5 l       .debug_str	00000000 
0003721f l       .debug_str	00000000 
00037265 l       .debug_str	00000000 
000372c2 l       .debug_str	00000000 
0003730c l       .debug_str	00000000 
00037352 l       .debug_str	00000000 
000373af l       .debug_str	00000000 
0003740a l       .debug_str	00000000 
00037452 l       .debug_str	00000000 
00037496 l       .debug_str	00000000 
000374de l       .debug_str	00000000 
00037522 l       .debug_str	00000000 
0003757d l       .debug_str	00000000 
000375d8 l       .debug_str	00000000 
00037620 l       .debug_str	00000000 
00037664 l       .debug_str	00000000 
000376ad l       .debug_str	00000000 
000376f2 l       .debug_str	00000000 
0003774e l       .debug_str	00000000 
000377aa l       .debug_str	00000000 
000377f3 l       .debug_str	00000000 
00037838 l       .debug_str	00000000 
00037894 l       .debug_str	00000000 
000378dd l       .debug_str	00000000 
00037922 l       .debug_str	00000000 
0003797e l       .debug_str	00000000 
000379c7 l       .debug_str	00000000 
00037a0c l       .debug_str	00000000 
00028960 l       .debug_str	00000000 
00037a68 l       .debug_str	00000000 
00037aa7 l       .debug_str	00000000 
00014b6d l       .debug_str	00000000 
00005471 l       .debug_str	00000000 
00018c7e l       .debug_str	00000000 
00018d9a l       .debug_str	00000000 
00037adc l       .debug_str	00000000 
0001ac91 l       .debug_str	00000000 
0000182a l       .debug_str	00000000 
00037b16 l       .debug_str	00000000 
0000fcfc l       .debug_str	00000000 
00037ba8 l       .debug_str	00000000 
0001a1f1 l       .debug_str	00000000 
00037be1 l       .debug_str	00000000 
00013c8b l       .debug_str	00000000 
00037c08 l       .debug_str	00000000 
00013b1f l       .debug_str	00000000 
0000544a l       .debug_str	00000000 
00037c42 l       .debug_str	00000000 
000136b8 l       .debug_str	00000000 
00037c68 l       .debug_str	00000000 
00019185 l       .debug_str	00000000 
00037cc2 l       .debug_str	00000000 
00019afe l       .debug_str	00000000 
00037d5c l       .debug_str	00000000 
00018da9 l       .debug_str	00000000 
00037de5 l       .debug_str	00000000 
00037e8c l       .debug_str	00000000 
00037ec5 l       .debug_str	00000000 
00037f3a l       .debug_str	00000000 
00037f63 l       .debug_str	00000000 
00014ab9 l       .debug_str	00000000 
00037f98 l       .debug_str	00000000 
00037fd4 l       .debug_str	00000000 
00037fe5 l       .debug_str	00000000 
0003801e l       .debug_str	00000000 
0001292f l       .debug_str	00000000 
0003802b l       .debug_str	00000000 
0003803a l       .debug_str	00000000 
0003391b l       .debug_str	00000000 
00038083 l       .debug_str	00000000 
000380b6 l       .debug_str	00000000 
000380c3 l       .debug_str	00000000 
0005cf92 l       .debug_str	00000000 
0003810e l       .debug_str	00000000 
00038166 l       .debug_str	00000000 
0003817b l       .debug_str	00000000 
000381b1 l       .debug_str	00000000 
000381bc l       .debug_str	00000000 
0002bb08 l       .debug_str	00000000 
0003821b l       .debug_str	00000000 
0003828e l       .debug_str	00000000 
000382f5 l       .debug_str	00000000 
00038315 l       .debug_str	00000000 
00038354 l       .debug_str	00000000 
00038373 l       .debug_str	00000000 
00000ad2 l       .debug_str	00000000 
000383e6 l       .debug_str	00000000 
00038463 l       .debug_str	00000000 
000384c8 l       .debug_str	00000000 
00038528 l       .debug_str	00000000 
0003859b l       .debug_str	00000000 
00038618 l       .debug_str	00000000 
0001ae26 l       .debug_str	00000000 
00038690 l       .debug_str	00000000 
00038705 l       .debug_str	00000000 
0003877f l       .debug_str	00000000 
000108ee l       .debug_str	00000000 
000108f9 l       .debug_str	00000000 
000387df l       .debug_str	00000000 
0005af80 l       .debug_str	00000000 
0003881d l       .debug_str	00000000 
0003885f l       .debug_str	00000000 
0003888a l       .debug_str	00000000 
000388cb l       .debug_str	00000000 
000388d5 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0005be3a l       .debug_str	00000000 
00056720 l       .debug_str	00000000 
00000e17 l       .debug_str	00000000 
00038931 l       .debug_str	00000000 
00001469 l       .debug_str	00000000 
0003896d l       .debug_str	00000000 
0000140c l       .debug_str	00000000 
000389b4 l       .debug_str	00000000 
00038a12 l       .debug_str	00000000 
0003034d l       .debug_str	00000000 
00038a69 l       .debug_str	00000000 
00038ac3 l       .debug_str	00000000 
00038acd l       .debug_str	00000000 
00011e66 l       .debug_str	00000000 
00011e6b l       .debug_str	00000000 
00038b10 l       .debug_str	00000000 
00038b46 l       .debug_str	00000000 
0001862a l       .debug_str	00000000 
00038b56 l       .debug_str	00000000 
00038b61 l       .debug_str	00000000 
00016359 l       .debug_str	00000000 
00038b9b l       .debug_str	00000000 
00038be4 l       .debug_str	00000000 
0002a985 l       .debug_str	00000000 
00038c2b l       .debug_str	00000000 
00038c66 l       .debug_str	00000000 
00038c8b l       .debug_str	00000000 
00038cf7 l       .debug_str	00000000 
00038d0a l       .debug_str	00000000 
00038d81 l       .debug_str	00000000 
00038d8c l       .debug_str	00000000 
00038dc9 l       .debug_str	00000000 
00038dd4 l       .debug_str	00000000 
00038e55 l       .debug_str	00000000 
00038e9b l       .debug_str	00000000 
00038ec2 l       .debug_str	00000000 
00038ef1 l       .debug_str	00000000 
00038f02 l       .debug_str	00000000 
00018cec l       .debug_str	00000000 
00038f5e l       .debug_str	00000000 
00038f8f l       .debug_str	00000000 
00020794 l       .debug_str	00000000 
00038fd7 l       .debug_str	00000000 
00024ced l       .debug_str	00000000 
00039015 l       .debug_str	00000000 
00039059 l       .debug_str	00000000 
000390ac l       .debug_str	00000000 
00035b60 l       .debug_str	00000000 
00039124 l       .debug_str	00000000 
00039173 l       .debug_str	00000000 
00039209 l       .debug_str	00000000 
0003924d l       .debug_str	00000000 
0003cf76 l       .debug_str	00000000 
000392c5 l       .debug_str	00000000 
00039314 l       .debug_str	00000000 
000393aa l       .debug_str	00000000 
000393c4 l       .debug_str	00000000 
00039413 l       .debug_str	00000000 
0003944c l       .debug_str	00000000 
00039467 l       .debug_str	00000000 
0001a848 l       .debug_str	00000000 
000394cb l       .debug_str	00000000 
0001a188 l       .debug_str	00000000 
00039544 l       .debug_str	00000000 
00027455 l       .debug_str	00000000 
000395b5 l       .debug_str	00000000 
0003964b l       .debug_str	00000000 
000396e3 l       .debug_str	00000000 
00039755 l       .debug_str	00000000 
0003977d l       .debug_str	00000000 
0001fa28 l       .debug_str	00000000 
00039835 l       .debug_str	00000000 
0002929e l       .debug_str	00000000 
0003987a l       .debug_str	00000000 
00039930 l       .debug_str	00000000 
00039975 l       .debug_str	00000000 
00002b7c l       .debug_str	00000000 
000399b7 l       .debug_str	00000000 
00039a12 l       .debug_str	00000000 
00039a17 l       .debug_str	00000000 
00039a70 l       .debug_str	00000000 
00039aa4 l       .debug_str	00000000 
00039ab8 l       .debug_str	00000000 
00039af3 l       .debug_str	00000000 
00039b35 l       .debug_str	00000000 
00039b4b l       .debug_str	00000000 
00039bb7 l       .debug_str	00000000 
000108f2 l       .debug_str	00000000 
0000a3dc l       .debug_str	00000000 
0000a3e7 l       .debug_str	00000000 
00039bf9 l       .debug_str	00000000 
00039c39 l       .debug_str	00000000 
00039c93 l       .debug_str	00000000 
00039cd5 l       .debug_str	00000000 
00039d30 l       .debug_str	00000000 
00039d72 l       .debug_str	00000000 
00039d7d l       .debug_str	00000000 
00039dbd l       .debug_str	00000000 
00039dc3 l       .debug_str	00000000 
00039e1d l       .debug_str	00000000 
00039e26 l       .debug_str	00000000 
00039e68 l       .debug_str	00000000 
00039ec0 l       .debug_str	00000000 
00039f02 l       .debug_str	00000000 
00039f5b l       .debug_str	00000000 
00039f65 l       .debug_str	00000000 
00039f6d l       .debug_str	00000000 
00039f76 l       .debug_str	00000000 
00039f69 l       .debug_str	00000000 
00039fb8 l       .debug_str	00000000 
0003a00d l       .debug_str	00000000 
0003a04a l       .debug_str	00000000 
0003a08c l       .debug_str	00000000 
0003a0e3 l       .debug_str	00000000 
0003a125 l       .debug_str	00000000 
0003a17d l       .debug_str	00000000 
0003a1b5 l       .debug_str	00000000 
0003a1c1 l       .debug_str	00000000 
0003a1fe l       .debug_str	00000000 
0003a260 l       .debug_str	00000000 
0003a2a1 l       .debug_str	00000000 
0003a2aa l       .debug_str	00000000 
0003a308 l       .debug_str	00000000 
0003a341 l       .debug_str	00000000 
0003a350 l       .debug_str	00000000 
0003a38f l       .debug_str	00000000 
0003a3a4 l       .debug_str	00000000 
0003a3ea l       .debug_str	00000000 
0003a3f7 l       .debug_str	00000000 
0003a3fd l       .debug_str	00000000 
0003a436 l       .debug_str	00000000 
0003a4c2 l       .debug_str	00000000 
0003a4fe l       .debug_str	00000000 
0005630f l       .debug_str	00000000 
0003a510 l       .debug_str	00000000 
0003a548 l       .debug_str	00000000 
0003a554 l       .debug_str	00000000 
0003a591 l       .debug_str	00000000 
0003a5f3 l       .debug_str	00000000 
0003a634 l       .debug_str	00000000 
0003a692 l       .debug_str	00000000 
0003a6cc l       .debug_str	00000000 
0003a726 l       .debug_str	00000000 
0003a76f l       .debug_str	00000000 
0003a77f l       .debug_str	00000000 
0003a7b8 l       .debug_str	00000000 
0003a83a l       .debug_str	00000000 
0003a874 l       .debug_str	00000000 
0003a8ce l       .debug_str	00000000 
0003a909 l       .debug_str	00000000 
0003a969 l       .debug_str	00000000 
0003a9a4 l       .debug_str	00000000 
0003aa04 l       .debug_str	00000000 
0003aa42 l       .debug_str	00000000 
0003aaa0 l       .debug_str	00000000 
0003aade l       .debug_str	00000000 
0003ab3c l       .debug_str	00000000 
00013f64 l       .debug_str	00000000 
0003ab87 l       .debug_str	00000000 
00013f0d l       .debug_str	00000000 
00000d51 l       .debug_str	00000000 
0003abd6 l       .debug_str	00000000 
0003ac07 l       .debug_str	00000000 
0003ac32 l       .debug_str	00000000 
0003ac80 l       .debug_str	00000000 
00018d1d l       .debug_str	00000000 
0003ac87 l       .debug_str	00000000 
0003acec l       .debug_str	00000000 
0003ad1d l       .debug_str	00000000 
0003ad25 l       .debug_str	00000000 
00019376 l       .debug_str	00000000 
0003ad56 l       .debug_str	00000000 
0003adaf l       .debug_str	00000000 
0003ae3d l       .debug_str	00000000 
0003ae89 l       .debug_str	00000000 
0003aeae l       .debug_str	00000000 
0003aecb l       .debug_str	00000000 
0003aef5 l       .debug_str	00000000 
0001f9bb l       .debug_str	00000000 
0001fa76 l       .debug_str	00000000 
0001faf2 l       .debug_str	00000000 
0003af17 l       .debug_str	00000000 
0003af64 l       .debug_str	00000000 
0003afa9 l       .debug_str	00000000 
0003afe8 l       .debug_str	00000000 
0003b034 l       .debug_str	00000000 
0003b0c3 l       .debug_str	00000000 
0003b110 l       .debug_str	00000000 
0003b196 l       .debug_str	00000000 
00058211 l       .debug_str	00000000 
0003b1bb l       .debug_str	00000000 
0003b1e5 l       .debug_str	00000000 
0003b1ee l       .debug_str	00000000 
0003b224 l       .debug_str	00000000 
0003b22d l       .debug_str	00000000 
0003b2bb l       .debug_str	00000000 
0003b301 l       .debug_str	00000000 
0003b320 l       .debug_str	00000000 
0003b337 l       .debug_str	00000000 
0003b35b l       .debug_str	00000000 
0003b377 l       .debug_str	00000000 
0003b3be l       .debug_str	00000000 
0003b403 l       .debug_str	00000000 
0003b442 l       .debug_str	00000000 
0003b488 l       .debug_str	00000000 
0003b517 l       .debug_str	00000000 
0003b55e l       .debug_str	00000000 
0003b5e4 l       .debug_str	00000000 
0003b619 l       .debug_str	00000000 
0003b623 l       .debug_str	00000000 
0005722a l       .debug_str	00000000 
0003b68e l       .debug_str	00000000 
0003b6c3 l       .debug_str	00000000 
0003b6cd l       .debug_str	00000000 
0003b700 l       .debug_str	00000000 
0003b708 l       .debug_str	00000000 
0003b73c l       .debug_str	00000000 
0003b74e l       .debug_str	00000000 
0003b788 l       .debug_str	00000000 
0003b7a6 l       .debug_str	00000000 
0003b7cc l       .debug_str	00000000 
0003b7d7 l       .debug_str	00000000 
0003b800 l       .debug_str	00000000 
0003b80e l       .debug_str	00000000 
0003b848 l       .debug_str	00000000 
0003b87e l       .debug_str	00000000 
0003b8a4 l       .debug_str	00000000 
0003b8c7 l       .debug_str	00000000 
0003b8f0 l       .debug_str	00000000 
0003b916 l       .debug_str	00000000 
0003b954 l       .debug_str	00000000 
0003b96e l       .debug_str	00000000 
0003b9ac l       .debug_str	00000000 
0003b9de l       .debug_str	00000000 
0003b9ea l       .debug_str	00000000 
0005d9a6 l       .debug_str	00000000 
0003ba1e l       .debug_str	00000000 
0003ba2b l       .debug_str	00000000 
00028745 l       .debug_str	00000000 
0003ba5d l       .debug_str	00000000 
0003bac7 l       .debug_str	00000000 
0003bb37 l       .debug_str	00000000 
0003bb9e l       .debug_str	00000000 
0003bbbb l       .debug_str	00000000 
0003bbfa l       .debug_str	00000000 
0003bc16 l       .debug_str	00000000 
00028707 l       .debug_str	00000000 
0003bc44 l       .debug_str	00000000 
000287e3 l       .debug_str	00000000 
0003bc79 l       .debug_str	00000000 
0003bcb5 l       .debug_str	00000000 
0003bcdb l       .debug_str	00000000 
0003bd1a l       .debug_str	00000000 
0003bd2a l       .debug_str	00000000 
0003bd8e l       .debug_str	00000000 
0003bdc5 l       .debug_str	00000000 
0003bddb l       .debug_str	00000000 
0003be2a l       .debug_str	00000000 
0003be36 l       .debug_str	00000000 
0003bf08 l       .debug_str	00000000 
0003be7d l       .debug_str	00000000 
0003bf03 l       .debug_str	00000000 
0003bf27 l       .debug_str	00000000 
0003bf62 l       .debug_str	00000000 
0003bf72 l       .debug_str	00000000 
0005d8ce l       .debug_str	00000000 
0003bfb3 l       .debug_str	00000000 
0003bfed l       .debug_str	00000000 
0003bffc l       .debug_str	00000000 
0003c035 l       .debug_str	00000000 
0003c043 l       .debug_str	00000000 
0003c07c l       .debug_str	00000000 
0003c08a l       .debug_str	00000000 
0003c0da l       .debug_str	00000000 
0003c0e7 l       .debug_str	00000000 
0003c15d l       .debug_str	00000000 
0003c168 l       .debug_str	00000000 
0003c17a l       .debug_str	00000000 
0003c1c6 l       .debug_str	00000000 
0003c1e3 l       .debug_str	00000000 
0003c277 l       .debug_str	00000000 
0003c30d l       .debug_str	00000000 
0003c37f l       .debug_str	00000000 
0003c3a5 l       .debug_str	00000000 
0003c444 l       .debug_str	00000000 
0003c4b5 l       .debug_str	00000000 
00011081 l       .debug_str	00000000 
0003c4fa l       .debug_str	00000000 
0003c55d l       .debug_str	00000000 
0003c580 l       .debug_str	00000000 
0003c5d4 l       .debug_str	00000000 
0003c5eb l       .debug_str	00000000 
0002a29e l       .debug_str	00000000 
0003c638 l       .debug_str	00000000 
0003c645 l       .debug_str	00000000 
0003c680 l       .debug_str	00000000 
0003c6a8 l       .debug_str	00000000 
0003c70a l       .debug_str	00000000 
000381b6 l       .debug_str	00000000 
0003c773 l       .debug_str	00000000 
0003efa1 l       .debug_str	00000000 
0000544e l       .debug_str	00000000 
00005454 l       .debug_str	00000000 
0000545b l       .debug_str	00000000 
0002f8eb l       .debug_str	00000000 
0002f8fc l       .debug_str	00000000 
0003c7c0 l       .debug_str	00000000 
00012f00 l       .debug_str	00000000 
0003c80b l       .debug_str	00000000 
0003c88e l       .debug_str	00000000 
0003c8be l       .debug_str	00000000 
0003c946 l       .debug_str	00000000 
0003c9bb l       .debug_str	00000000 
0003ca0e l       .debug_str	00000000 
0003ca9a l       .debug_str	00000000 
0003cad2 l       .debug_str	00000000 
0003cb27 l       .debug_str	00000000 
0003cb58 l       .debug_str	00000000 
0003cbaa l       .debug_str	00000000 
0003cbd8 l       .debug_str	00000000 
0003cc2c l       .debug_str	00000000 
0003cc52 l       .debug_str	00000000 
00024c39 l       .debug_str	00000000 
0003cc89 l       .debug_str	00000000 
0003ccd4 l       .debug_str	00000000 
0003ccf0 l       .debug_str	00000000 
0003cd46 l       .debug_str	00000000 
00024d80 l       .debug_str	00000000 
0003cdbf l       .debug_str	00000000 
0003ce0f l       .debug_str	00000000 
0003cea6 l       .debug_str	00000000 
0003cefc l       .debug_str	00000000 
0003cf75 l       .debug_str	00000000 
0003cf8d l       .debug_str	00000000 
0003d024 l       .debug_str	00000000 
0003d05d l       .debug_str	00000000 
0003d28d l       .debug_str	00000000 
0003d0a6 l       .debug_str	00000000 
0003bf6e l       .debug_str	00000000 
0003d0e3 l       .debug_str	00000000 
0003d127 l       .debug_str	00000000 
0003d172 l       .debug_str	00000000 
0003d1b2 l       .debug_str	00000000 
0003d1dc l       .debug_str	00000000 
0003d225 l       .debug_str	00000000 
0003d234 l       .debug_str	00000000 
0003d285 l       .debug_str	00000000 
0003d29c l       .debug_str	00000000 
0004752c l       .debug_str	00000000 
00058acb l       .debug_str	00000000 
0003d303 l       .debug_str	00000000 
0003d364 l       .debug_str	00000000 
0003d383 l       .debug_str	00000000 
0003d38c l       .debug_str	00000000 
0003d398 l       .debug_str	00000000 
0001be1b l       .debug_str	00000000 
0003d39e l       .debug_str	00000000 
0003d3a8 l       .debug_str	00000000 
0003d3da l       .debug_str	00000000 
0003d3ea l       .debug_str	00000000 
0003d472 l       .debug_str	00000000 
0003d47b l       .debug_str	00000000 
00001803 l       .debug_str	00000000 
0003d4e8 l       .debug_str	00000000 
0003d527 l       .debug_str	00000000 
0001b398 l       .debug_str	00000000 
0001b3a4 l       .debug_str	00000000 
0001b3ae l       .debug_str	00000000 
0003d536 l       .debug_str	00000000 
0003d5a6 l       .debug_str	00000000 
0003d5cb l       .debug_str	00000000 
0003d63a l       .debug_str	00000000 
0003d660 l       .debug_str	00000000 
0003d6cf l       .debug_str	00000000 
0003d6f9 l       .debug_str	00000000 
0003d730 l       .debug_str	00000000 
0003d73b l       .debug_str	00000000 
0003d777 l       .debug_str	00000000 
0003d796 l       .debug_str	00000000 
0003d7d0 l       .debug_str	00000000 
0003d80b l       .debug_str	00000000 
0003d847 l       .debug_str	00000000 
0000d4bc l       .debug_str	00000000 
0003d861 l       .debug_str	00000000 
0003d89d l       .debug_str	00000000 
0003d8aa l       .debug_str	00000000 
00056586 l       .debug_str	00000000 
0003d8e8 l       .debug_str	00000000 
0003d92e l       .debug_str	00000000 
0003d9b6 l       .debug_str	00000000 
0003d9cf l       .debug_str	00000000 
0003da29 l       .debug_str	00000000 
0003da6f l       .debug_str	00000000 
0003da87 l       .debug_str	00000000 
0003db07 l       .debug_str	00000000 
0003dfdb l       .debug_str	00000000 
0003db17 l       .debug_str	00000000 
0003db56 l       .debug_str	00000000 
0003db96 l       .debug_str	00000000 
0003dc20 l       .debug_str	00000000 
0003dc37 l       .debug_str	00000000 
0003dc88 l       .debug_str	00000000 
0003dc96 l       .debug_str	00000000 
0003dc9b l       .debug_str	00000000 
0003dcf6 l       .debug_str	00000000 
0003e6b0 l       .debug_str	00000000 
0003dd4d l       .debug_str	00000000 
0003dd80 l       .debug_str	00000000 
0003ddc7 l       .debug_str	00000000 
0003de01 l       .debug_str	00000000 
0003de30 l       .debug_str	00000000 
0003deae l       .debug_str	00000000 
0003df32 l       .debug_str	00000000 
0003dfbf l       .debug_str	00000000 
0003dfd4 l       .debug_str	00000000 
0003dfe4 l       .debug_str	00000000 
0003e030 l       .debug_str	00000000 
0003e075 l       .debug_str	00000000 
0003e10c l       .debug_str	00000000 
0003e128 l       .debug_str	00000000 
0003e16f l       .debug_str	00000000 
0003e19d l       .debug_str	00000000 
0003e1d6 l       .debug_str	00000000 
0003e1f8 l       .debug_str	00000000 
00014155 l       .debug_str	00000000 
0003e276 l       .debug_str	00000000 
0003e2f6 l       .debug_str	00000000 
0003e335 l       .debug_str	00000000 
0003e3bf l       .debug_str	00000000 
0003e40b l       .debug_str	00000000 
0003e429 l       .debug_str	00000000 
0003e434 l       .debug_str	00000000 
0003e496 l       .debug_str	00000000 
0003e4ed l       .debug_str	00000000 
0003e57a l       .debug_str	00000000 
0003e5c6 l       .debug_str	00000000 
0003e65d l       .debug_str	00000000 
0003e6a7 l       .debug_str	00000000 
0003e6c3 l       .debug_str	00000000 
0003e71d l       .debug_str	00000000 
0003e726 l       .debug_str	00000000 
0003e785 l       .debug_str	00000000 
0003e7dc l       .debug_str	00000000 
0003e835 l       .debug_str	00000000 
0003e84a l       .debug_str	00000000 
0003e897 l       .debug_str	00000000 
0003e8e2 l       .debug_str	00000000 
0003e8f5 l       .debug_str	00000000 
000237ef l       .debug_str	00000000 
00018656 l       .debug_str	00000000 
0003e940 l       .debug_str	00000000 
0003e955 l       .debug_str	00000000 
0003e961 l       .debug_str	00000000 
0003e9a6 l       .debug_str	00000000 
0003e9ff l       .debug_str	00000000 
0003ea14 l       .debug_str	00000000 
0003ea61 l       .debug_str	00000000 
0003eaac l       .debug_str	00000000 
0003eabf l       .debug_str	00000000 
0003eb0a l       .debug_str	00000000 
0003eb1d l       .debug_str	00000000 
0003eb81 l       .debug_str	00000000 
0003ebba l       .debug_str	00000000 
0003ebe6 l       .debug_str	00000000 
0005c5fb l       .debug_str	00000000 
000579c0 l       .debug_str	00000000 
0003ec65 l       .debug_str	00000000 
0003ec6b l       .debug_str	00000000 
0003ec74 l       .debug_str	00000000 
0003ecac l       .debug_str	00000000 
0003ecc9 l       .debug_str	00000000 
0003ed05 l       .debug_str	00000000 
0003ed22 l       .debug_str	00000000 
0003ed7e l       .debug_str	00000000 
0003edb6 l       .debug_str	00000000 
0003ee12 l       .debug_str	00000000 
0002a925 l       .debug_str	00000000 
0003ee4a l       .debug_str	00000000 
0003ee88 l       .debug_str	00000000 
0003eea4 l       .debug_str	00000000 
0003eefa l       .debug_str	00000000 
0003ef61 l       .debug_str	00000000 
0003ef99 l       .debug_str	00000000 
0003efa5 l       .debug_str	00000000 
0003f00c l       .debug_str	00000000 
0003f04b l       .debug_str	00000000 
0003f05c l       .debug_str	00000000 
0003f095 l       .debug_str	00000000 
0004d02d l       .debug_str	00000000 
0003f0b0 l       .debug_str	00000000 
0003f0ec l       .debug_str	00000000 
0003f0e5 l       .debug_str	00000000 
0003f0f5 l       .debug_str	00000000 
0003f107 l       .debug_str	00000000 
0003f152 l       .debug_str	00000000 
0003f16a l       .debug_str	00000000 
0003f174 l       .debug_str	00000000 
0003f18b l       .debug_str	00000000 
0003f19a l       .debug_str	00000000 
0003f1dc l       .debug_str	00000000 
0003f1f5 l       .debug_str	00000000 
0003f269 l       .debug_str	00000000 
0003f278 l       .debug_str	00000000 
0003f2b1 l       .debug_str	00000000 
0003f2c7 l       .debug_str	00000000 
0003f307 l       .debug_str	00000000 
0003f312 l       .debug_str	00000000 
0003f391 l       .debug_str	00000000 
00057139 l       .debug_str	00000000 
0003f3b0 l       .debug_str	00000000 
0003f3c5 l       .debug_str	00000000 
0003f3cf l       .debug_str	00000000 
0001f329 l       .debug_str	00000000 
0003f3d4 l       .debug_str	00000000 
0003f405 l       .debug_str	00000000 
0003f418 l       .debug_str	00000000 
0003f422 l       .debug_str	00000000 
0003f43f l       .debug_str	00000000 
0003f47a l       .debug_str	00000000 
0003f4af l       .debug_str	00000000 
0003f4e0 l       .debug_str	00000000 
0003f4f4 l       .debug_str	00000000 
0003f4ff l       .debug_str	00000000 
0003f51d l       .debug_str	00000000 
0003f558 l       .debug_str	00000000 
0003f58e l       .debug_str	00000000 
0003f5bf l       .debug_str	00000000 
0003f5d3 l       .debug_str	00000000 
0003f5de l       .debug_str	00000000 
0003f5fc l       .debug_str	00000000 
0003f637 l       .debug_str	00000000 
0003f66d l       .debug_str	00000000 
0003f69e l       .debug_str	00000000 
0003f6b2 l       .debug_str	00000000 
0003f6bd l       .debug_str	00000000 
0003f6db l       .debug_str	00000000 
0003f716 l       .debug_str	00000000 
0003f74c l       .debug_str	00000000 
0003f77d l       .debug_str	00000000 
00043fba l       .debug_str	00000000 
0003f792 l       .debug_str	00000000 
0003f79e l       .debug_str	00000000 
0003f7bd l       .debug_str	00000000 
0003f7f8 l       .debug_str	00000000 
0003f82f l       .debug_str	00000000 
0003f860 l       .debug_str	00000000 
0003f873 l       .debug_str	00000000 
0003f87d l       .debug_str	00000000 
0003f89a l       .debug_str	00000000 
0003f8d5 l       .debug_str	00000000 
0003f90a l       .debug_str	00000000 
0003f93b l       .debug_str	00000000 
0003f94f l       .debug_str	00000000 
0003f95a l       .debug_str	00000000 
0003f978 l       .debug_str	00000000 
0003f9b3 l       .debug_str	00000000 
0003f9e9 l       .debug_str	00000000 
0003fa1a l       .debug_str	00000000 
0003fa2e l       .debug_str	00000000 
0003fa9d l       .debug_str	00000000 
0003fad8 l       .debug_str	00000000 
0003fb21 l       .debug_str	00000000 
0003fb66 l       .debug_str	00000000 
0003fbc2 l       .debug_str	00000000 
0003fc0b l       .debug_str	00000000 
0003fc50 l       .debug_str	00000000 
0003fcac l       .debug_str	00000000 
0003fcf5 l       .debug_str	00000000 
0003fd3a l       .debug_str	00000000 
0003fd96 l       .debug_str	00000000 
0003fda1 l       .debug_str	00000000 
0003fdbf l       .debug_str	00000000 
0003fdfa l       .debug_str	00000000 
0003fe30 l       .debug_str	00000000 
0003fe61 l       .debug_str	00000000 
0003fe75 l       .debug_str	00000000 
0003fe80 l       .debug_str	00000000 
0003fe9e l       .debug_str	00000000 
0003fed9 l       .debug_str	00000000 
0003ff0f l       .debug_str	00000000 
0003ff7e l       .debug_str	00000000 
0003ffb9 l       .debug_str	00000000 
0003ffea l       .debug_str	00000000 
0003ffff l       .debug_str	00000000 
00040004 l       .debug_str	00000000 
00040010 l       .debug_str	00000000 
0004002f l       .debug_str	00000000 
0004006a l       .debug_str	00000000 
000400a1 l       .debug_str	00000000 
00040110 l       .debug_str	00000000 
0004014c l       .debug_str	00000000 
000141f5 l       .debug_str	00000000 
00040195 l       .debug_str	00000000 
000401a0 l       .debug_str	00000000 
000401e7 l       .debug_str	00000000 
000401f1 l       .debug_str	00000000 
00040273 l       .debug_str	00000000 
00040290 l       .debug_str	00000000 
0001c1f4 l       .debug_str	00000000 
000402eb l       .debug_str	00000000 
00040345 l       .debug_str	00000000 
00040352 l       .debug_str	00000000 
000403c4 l       .debug_str	00000000 
00040428 l       .debug_str	00000000 
00040433 l       .debug_str	00000000 
000404ac l       .debug_str	00000000 
000404b8 l       .debug_str	00000000 
00040534 l       .debug_str	00000000 
0004053a l       .debug_str	00000000 
00040541 l       .debug_str	00000000 
0004057d l       .debug_str	00000000 
0001424a l       .debug_str	00000000 
000405c6 l       .debug_str	00000000 
0004060a l       .debug_str	00000000 
00040655 l       .debug_str	00000000 
00040694 l       .debug_str	00000000 
000406b9 l       .debug_str	00000000 
0004070f l       .debug_str	00000000 
0004077d l       .debug_str	00000000 
000407fd l       .debug_str	00000000 
0004086a l       .debug_str	00000000 
000408f5 l       .debug_str	00000000 
00040969 l       .debug_str	00000000 
000409a9 l       .debug_str	00000000 
00040a2a l       .debug_str	00000000 
00040a6b l       .debug_str	00000000 
00040acf l       .debug_str	00000000 
00040b7e l       .debug_str	00000000 
00040bc8 l       .debug_str	00000000 
00040c15 l       .debug_str	00000000 
00040c5b l       .debug_str	00000000 
00040c65 l       .debug_str	00000000 
00040c9e l       .debug_str	00000000 
00040ccd l       .debug_str	00000000 
00040d2e l       .debug_str	00000000 
00040d5d l       .debug_str	00000000 
00040d9a l       .debug_str	00000000 
00040e29 l       .debug_str	00000000 
00040e5e l       .debug_str	00000000 
00040ee4 l       .debug_str	00000000 
00040f6a l       .debug_str	00000000 
00040fbe l       .debug_str	00000000 
00041047 l       .debug_str	00000000 
00014100 l       .debug_str	00000000 
00041095 l       .debug_str	00000000 
00041123 l       .debug_str	00000000 
00041177 l       .debug_str	00000000 
000411b6 l       .debug_str	00000000 
00041201 l       .debug_str	00000000 
00041283 l       .debug_str	00000000 
0004129f l       .debug_str	00000000 
000412f8 l       .debug_str	00000000 
00041351 l       .debug_str	00000000 
0004138e l       .debug_str	00000000 
000413cf l       .debug_str	00000000 
00041430 l       .debug_str	00000000 
000414a1 l       .debug_str	00000000 
000414d1 l       .debug_str	00000000 
00041517 l       .debug_str	00000000 
00041589 l       .debug_str	00000000 
0004161d l       .debug_str	00000000 
00041641 l       .debug_str	00000000 
000416bd l       .debug_str	00000000 
000416f7 l       .debug_str	00000000 
00041739 l       .debug_str	00000000 
000417e9 l       .debug_str	00000000 
00041828 l       .debug_str	00000000 
000418cb l       .debug_str	00000000 
00041927 l       .debug_str	00000000 
00041984 l       .debug_str	00000000 
00041a2f l       .debug_str	00000000 
00041a68 l       .debug_str	00000000 
00041ae4 l       .debug_str	00000000 
00041b1c l       .debug_str	00000000 
00041b28 l       .debug_str	00000000 
00041b65 l       .debug_str	00000000 
00041bbd l       .debug_str	00000000 
00041bdd l       .debug_str	00000000 
00041c36 l       .debug_str	00000000 
00041c8f l       .debug_str	00000000 
00041ce8 l       .debug_str	00000000 
00041d42 l       .debug_str	00000000 
00041d78 l       .debug_str	00000000 
00041d88 l       .debug_str	00000000 
00041d97 l       .debug_str	00000000 
00041da0 l       .debug_str	00000000 
00041dd7 l       .debug_str	00000000 
00041e13 l       .debug_str	00000000 
00041e23 l       .debug_str	00000000 
00041e7f l       .debug_str	00000000 
00041ee1 l       .debug_str	00000000 
0003511e l       .debug_str	00000000 
00041f2b l       .debug_str	00000000 
00041f66 l       .debug_str	00000000 
00041f8b l       .debug_str	00000000 
00041fea l       .debug_str	00000000 
00042034 l       .debug_str	00000000 
0004206f l       .debug_str	00000000 
00042094 l       .debug_str	00000000 
000420f3 l       .debug_str	00000000 
0004215c l       .debug_str	00000000 
00042165 l       .debug_str	00000000 
0004219c l       .debug_str	00000000 
000421f8 l       .debug_str	00000000 
0004225a l       .debug_str	00000000 
000422b9 l       .debug_str	00000000 
00042318 l       .debug_str	00000000 
0004234e l       .debug_str	00000000 
0004235f l       .debug_str	00000000 
0004236f l       .debug_str	00000000 
00042379 l       .debug_str	00000000 
000423b1 l       .debug_str	00000000 
0004240e l       .debug_str	00000000 
00042471 l       .debug_str	00000000 
000424bc l       .debug_str	00000000 
000424f7 l       .debug_str	00000000 
0004251d l       .debug_str	00000000 
0004257d l       .debug_str	00000000 
000425c8 l       .debug_str	00000000 
00042603 l       .debug_str	00000000 
00042629 l       .debug_str	00000000 
00042689 l       .debug_str	00000000 
000426bf l       .debug_str	00000000 
000426d0 l       .debug_str	00000000 
000426e0 l       .debug_str	00000000 
000426ea l       .debug_str	00000000 
00042722 l       .debug_str	00000000 
0004277f l       .debug_str	00000000 
000427e2 l       .debug_str	00000000 
00042842 l       .debug_str	00000000 
000428a2 l       .debug_str	00000000 
000428d8 l       .debug_str	00000000 
000428e9 l       .debug_str	00000000 
000428f9 l       .debug_str	00000000 
00042903 l       .debug_str	00000000 
0004293b l       .debug_str	00000000 
00042998 l       .debug_str	00000000 
000429fb l       .debug_str	00000000 
00042a46 l       .debug_str	00000000 
00042a81 l       .debug_str	00000000 
00042aa7 l       .debug_str	00000000 
00042b07 l       .debug_str	00000000 
00042b52 l       .debug_str	00000000 
00042b8d l       .debug_str	00000000 
00042bb3 l       .debug_str	00000000 
00042c13 l       .debug_str	00000000 
00042c49 l       .debug_str	00000000 
00018646 l       .debug_str	00000000 
00042c5a l       .debug_str	00000000 
00042c64 l       .debug_str	00000000 
00042c9c l       .debug_str	00000000 
00042cf9 l       .debug_str	00000000 
00042d5c l       .debug_str	00000000 
00042dbc l       .debug_str	00000000 
00042e1c l       .debug_str	00000000 
00042e52 l       .debug_str	00000000 
0000a498 l       .debug_str	00000000 
00042e65 l       .debug_str	00000000 
00042e77 l       .debug_str	00000000 
00042e83 l       .debug_str	00000000 
00042ebe l       .debug_str	00000000 
00042f1d l       .debug_str	00000000 
00042f82 l       .debug_str	00000000 
00042fe4 l       .debug_str	00000000 
0004301f l       .debug_str	00000000 
00043047 l       .debug_str	00000000 
000430a9 l       .debug_str	00000000 
00021fa8 l       .debug_str	00000000 
000249c4 l       .debug_str	00000000 
00011ee8 l       .debug_str	00000000 
000430df l       .debug_str	00000000 
0004311a l       .debug_str	00000000 
0004315a l       .debug_str	00000000 
00043177 l       .debug_str	00000000 
000431bb l       .debug_str	00000000 
000431dc l       .debug_str	00000000 
0004321c l       .debug_str	00000000 
00043239 l       .debug_str	00000000 
0004327d l       .debug_str	00000000 
0004329e l       .debug_str	00000000 
00043300 l       .debug_str	00000000 
00043367 l       .debug_str	00000000 
000433a2 l       .debug_str	00000000 
000433c5 l       .debug_str	00000000 
0004342b l       .debug_str	00000000 
00043466 l       .debug_str	00000000 
00043488 l       .debug_str	00000000 
000434c3 l       .debug_str	00000000 
000434e7 l       .debug_str	00000000 
00043522 l       .debug_str	00000000 
00043545 l       .debug_str	00000000 
00043580 l       .debug_str	00000000 
000435a4 l       .debug_str	00000000 
000435df l       .debug_str	00000000 
00043602 l       .debug_str	00000000 
0004363d l       .debug_str	00000000 
00043661 l       .debug_str	00000000 
000436ac l       .debug_str	00000000 
0004370e l       .debug_str	00000000 
00043749 l       .debug_str	00000000 
0004376c l       .debug_str	00000000 
000437b7 l       .debug_str	00000000 
000437f2 l       .debug_str	00000000 
00043818 l       .debug_str	00000000 
00043853 l       .debug_str	00000000 
00043879 l       .debug_str	00000000 
000438ca l       .debug_str	00000000 
00043918 l       .debug_str	00000000 
00043963 l       .debug_str	00000000 
00043996 l       .debug_str	00000000 
000439d1 l       .debug_str	00000000 
000439f6 l       .debug_str	00000000 
00043a82 l       .debug_str	00000000 
00043ab6 l       .debug_str	00000000 
00043b32 l       .debug_str	00000000 
00043b77 l       .debug_str	00000000 
00043bc3 l       .debug_str	00000000 
00043c26 l       .debug_str	00000000 
00043c61 l       .debug_str	00000000 
00043c85 l       .debug_str	00000000 
00043cc0 l       .debug_str	00000000 
00043ce7 l       .debug_str	00000000 
00043d33 l       .debug_str	00000000 
00043d6e l       .debug_str	00000000 
00043d95 l       .debug_str	00000000 
00043de0 l       .debug_str	00000000 
00043e2c l       .debug_str	00000000 
00043e78 l       .debug_str	00000000 
00043ea9 l       .debug_str	00000000 
00043eb1 l       .debug_str	00000000 
0000fa19 l       .debug_str	00000000 
00043efd l       .debug_str	00000000 
00043f32 l       .debug_str	00000000 
00043f60 l       .debug_str	00000000 
00043f69 l       .debug_str	00000000 
00043fb7 l       .debug_str	00000000 
00043fbf l       .debug_str	00000000 
00044024 l       .debug_str	00000000 
00044077 l       .debug_str	00000000 
000440d7 l       .debug_str	00000000 
000440f6 l       .debug_str	00000000 
00044159 l       .debug_str	00000000 
0004417b l       .debug_str	00000000 
000441c6 l       .debug_str	00000000 
0004422b l       .debug_str	00000000 
0004424d l       .debug_str	00000000 
000442b6 l       .debug_str	00000000 
000442f3 l       .debug_str	00000000 
0004435c l       .debug_str	00000000 
000443ec l       .debug_str	00000000 
00013250 l       .debug_str	00000000 
0004444c l       .debug_str	00000000 
000444af l       .debug_str	00000000 
00044518 l       .debug_str	00000000 
0004454b l       .debug_str	00000000 
00044593 l       .debug_str	00000000 
0004460d l       .debug_str	00000000 
0004465e l       .debug_str	00000000 
000446b5 l       .debug_str	00000000 
0002014a l       .debug_str	00000000 
000446fd l       .debug_str	00000000 
0004475b l       .debug_str	00000000 
00044778 l       .debug_str	00000000 
000447e4 l       .debug_str	00000000 
00044829 l       .debug_str	00000000 
00044877 l       .debug_str	00000000 
000448bf l       .debug_str	00000000 
000448c9 l       .debug_str	00000000 
00044937 l       .debug_str	00000000 
00044973 l       .debug_str	00000000 
00044996 l       .debug_str	00000000 
00044a06 l       .debug_str	00000000 
00044a4e l       .debug_str	00000000 
00044a57 l       .debug_str	00000000 
00044ab4 l       .debug_str	00000000 
00044b17 l       .debug_str	00000000 
00044b77 l       .debug_str	00000000 
00044bd7 l       .debug_str	00000000 
00044c33 l       .debug_str	00000000 
00044c92 l       .debug_str	00000000 
00044cf2 l       .debug_str	00000000 
00044d0d l       .debug_str	00000000 
000200a8 l       .debug_str	00000000 
00044d61 l       .debug_str	00000000 
00044ddf l       .debug_str	00000000 
00044e09 l       .debug_str	00000000 
00044e6b l       .debug_str	00000000 
00044ecc l       .debug_str	00000000 
00044f26 l       .debug_str	00000000 
00044f8b l       .debug_str	00000000 
00044fdd l       .debug_str	00000000 
00045025 l       .debug_str	00000000 
00045040 l       .debug_str	00000000 
000450ba l       .debug_str	00000000 
00045107 l       .debug_str	00000000 
00045181 l       .debug_str	00000000 
000451ce l       .debug_str	00000000 
00045222 l       .debug_str	00000000 
00045274 l       .debug_str	00000000 
000452dc l       .debug_str	00000000 
0004533c l       .debug_str	00000000 
00045396 l       .debug_str	00000000 
000453f5 l       .debug_str	00000000 
0004544f l       .debug_str	00000000 
000454ac l       .debug_str	00000000 
000280a1 l       .debug_str	00000000 
000454ea l       .debug_str	00000000 
00029084 l       .debug_str	00000000 
00045525 l       .debug_str	00000000 
00045597 l       .debug_str	00000000 
0004566a l       .debug_str	00000000 
00020268 l       .debug_str	00000000 
000456b2 l       .debug_str	00000000 
00045700 l       .debug_str	00000000 
0004570a l       .debug_str	00000000 
00045752 l       .debug_str	00000000 
0004575e l       .debug_str	00000000 
000457d2 l       .debug_str	00000000 
000457dd l       .debug_str	00000000 
00045819 l       .debug_str	00000000 
00045840 l       .debug_str	00000000 
00045891 l       .debug_str	00000000 
0004589e l       .debug_str	00000000 
000458ac l       .debug_str	00000000 
000458bf l       .debug_str	00000000 
000458ca l       .debug_str	00000000 
0004590c l       .debug_str	00000000 
00045921 l       .debug_str	00000000 
0004598b l       .debug_str	00000000 
000459e8 l       .debug_str	00000000 
00045a48 l       .debug_str	00000000 
00045aa8 l       .debug_str	00000000 
00045b1a l       .debug_str	00000000 
00045b67 l       .debug_str	00000000 
00045bc6 l       .debug_str	00000000 
00045c20 l       .debug_str	00000000 
00045c93 l       .debug_str	00000000 
00045ca0 l       .debug_str	00000000 
00045d00 l       .debug_str	00000000 
00045d1f l       .debug_str	00000000 
00045d87 l       .debug_str	00000000 
00045da2 l       .debug_str	00000000 
00045dfa l       .debug_str	00000000 
00045e44 l       .debug_str	00000000 
00045ea8 l       .debug_str	00000000 
00045ec7 l       .debug_str	00000000 
00045f29 l       .debug_str	00000000 
00045f8f l       .debug_str	00000000 
0004600f l       .debug_str	00000000 
0004605e l       .debug_str	00000000 
000460d4 l       .debug_str	00000000 
0004614a l       .debug_str	00000000 
0004621f l       .debug_str	00000000 
0004627c l       .debug_str	00000000 
000462da l       .debug_str	00000000 
0004635a l       .debug_str	00000000 
000463c9 l       .debug_str	00000000 
00046447 l       .debug_str	00000000 
0004649a l       .debug_str	00000000 
000464ff l       .debug_str	00000000 
0004655f l       .debug_str	00000000 
000465cd l       .debug_str	00000000 
00046665 l       .debug_str	00000000 
000466f4 l       .debug_str	00000000 
00046782 l       .debug_str	00000000 
00046810 l       .debug_str	00000000 
00046920 l       .debug_str	00000000 
00046994 l       .debug_str	00000000 
000469d6 l       .debug_str	00000000 
00046a1f l       .debug_str	00000000 
00046a79 l       .debug_str	00000000 
00046af2 l       .debug_str	00000000 
00046aff l       .debug_str	00000000 
00046b04 l       .debug_str	00000000 
00046b70 l       .debug_str	00000000 
00046bb7 l       .debug_str	00000000 
00046c41 l       .debug_str	00000000 
00046c60 l       .debug_str	00000000 
00046cea l       .debug_str	00000000 
00046d0e l       .debug_str	00000000 
00046d52 l       .debug_str	00000000 
00046db6 l       .debug_str	00000000 
00046dfa l       .debug_str	00000000 
00046e6c l       .debug_str	00000000 
00046f2a l       .debug_str	00000000 
00046f8c l       .debug_str	00000000 
00047024 l       .debug_str	00000000 
000470d3 l       .debug_str	00000000 
00047169 l       .debug_str	00000000 
000471fc l       .debug_str	00000000 
00047240 l       .debug_str	00000000 
00047293 l       .debug_str	00000000 
00047317 l       .debug_str	00000000 
000473a5 l       .debug_str	00000000 
000473f9 l       .debug_str	00000000 
0004740a l       .debug_str	00000000 
0004748f l       .debug_str	00000000 
0004751b l       .debug_str	00000000 
00047524 l       .debug_str	00000000 
00047531 l       .debug_str	00000000 
00047588 l       .debug_str	00000000 
0004760d l       .debug_str	00000000 
0004765f l       .debug_str	00000000 
0004766e l       .debug_str	00000000 
000476b5 l       .debug_str	00000000 
00047719 l       .debug_str	00000000 
0004773a l       .debug_str	00000000 
000477ba l       .debug_str	00000000 
00047825 l       .debug_str	00000000 
000478a3 l       .debug_str	00000000 
000478f2 l       .debug_str	00000000 
00047951 l       .debug_str	00000000 
000479e9 l       .debug_str	00000000 
00047a8f l       .debug_str	00000000 
00047b25 l       .debug_str	00000000 
00047baf l       .debug_str	00000000 
00047c25 l       .debug_str	00000000 
00047c6e l       .debug_str	00000000 
00047cca l       .debug_str	00000000 
00047d45 l       .debug_str	00000000 
00047db1 l       .debug_str	00000000 
00047e3b l       .debug_str	00000000 
00047e7f l       .debug_str	00000000 
00047ee0 l       .debug_str	00000000 
00047f24 l       .debug_str	00000000 
00047fa8 l       .debug_str	00000000 
00048032 l       .debug_str	00000000 
00048084 l       .debug_str	00000000 
00048102 l       .debug_str	00000000 
00048187 l       .debug_str	00000000 
000481de l       .debug_str	00000000 
0004825f l       .debug_str	00000000 
0004831d l       .debug_str	00000000 
0004837c l       .debug_str	00000000 
000483df l       .debug_str	00000000 
00048404 l       .debug_str	00000000 
00048468 l       .debug_str	00000000 
00048489 l       .debug_str	00000000 
00048509 l       .debug_str	00000000 
00048574 l       .debug_str	00000000 
000485f2 l       .debug_str	00000000 
00048641 l       .debug_str	00000000 
000486a0 l       .debug_str	00000000 
00048738 l       .debug_str	00000000 
000487de l       .debug_str	00000000 
00048874 l       .debug_str	00000000 
000488fe l       .debug_str	00000000 
00048974 l       .debug_str	00000000 
000489bd l       .debug_str	00000000 
00048a19 l       .debug_str	00000000 
00048a94 l       .debug_str	00000000 
00048b00 l       .debug_str	00000000 
00048b8a l       .debug_str	00000000 
00048bce l       .debug_str	00000000 
00048c2f l       .debug_str	00000000 
00048c73 l       .debug_str	00000000 
00048cf7 l       .debug_str	00000000 
00048d81 l       .debug_str	00000000 
00048dff l       .debug_str	00000000 
00048e84 l       .debug_str	00000000 
00048edb l       .debug_str	00000000 
00048f5c l       .debug_str	00000000 
0004901a l       .debug_str	00000000 
00049079 l       .debug_str	00000000 
000490ac l       .debug_str	00000000 
000490df l       .debug_str	00000000 
00049112 l       .debug_str	00000000 
00049145 l       .debug_str	00000000 
00049178 l       .debug_str	00000000 
000491ab l       .debug_str	00000000 
000491de l       .debug_str	00000000 
00049232 l       .debug_str	00000000 
00049260 l       .debug_str	00000000 
000492b4 l       .debug_str	00000000 
0005bc91 l       .debug_str	00000000 
0001017d l       .debug_str	00000000 
000492c7 l       .debug_str	00000000 
000492cb l       .debug_str	00000000 
000492cf l       .debug_str	00000000 
000492d3 l       .debug_str	00000000 
000492da l       .debug_str	00000000 
000492df l       .debug_str	00000000 
0004930f l       .debug_str	00000000 
00049361 l       .debug_str	00000000 
000493a2 l       .debug_str	00000000 
000493af l       .debug_str	00000000 
000493ee l       .debug_str	00000000 
000493f9 l       .debug_str	00000000 
00049435 l       .debug_str	00000000 
00049443 l       .debug_str	00000000 
00049477 l       .debug_str	00000000 
000494b2 l       .debug_str	00000000 
000494f0 l       .debug_str	00000000 
000494fe l       .debug_str	00000000 
00049537 l       .debug_str	00000000 
00049541 l       .debug_str	00000000 
0004957d l       .debug_str	00000000 
000495d9 l       .debug_str	00000000 
000495e0 l       .debug_str	00000000 
0004963e l       .debug_str	00000000 
00049647 l       .debug_str	00000000 
000496ae l       .debug_str	00000000 
000496bf l       .debug_str	00000000 
0004971c l       .debug_str	00000000 
0004977b l       .debug_str	00000000 
000497d7 l       .debug_str	00000000 
00049835 l       .debug_str	00000000 
0004989c l       .debug_str	00000000 
000498f9 l       .debug_str	00000000 
00049958 l       .debug_str	00000000 
00049991 l       .debug_str	00000000 
0004999b l       .debug_str	00000000 
00049a03 l       .debug_str	00000000 
00049a36 l       .debug_str	00000000 
00049a40 l       .debug_str	00000000 
00049a76 l       .debug_str	00000000 
00049a82 l       .debug_str	00000000 
00049ab9 l       .debug_str	00000000 
00049ac6 l       .debug_str	00000000 
00049b0a l       .debug_str	00000000 
00049b24 l       .debug_str	00000000 
00049b95 l       .debug_str	00000000 
00049ba8 l       .debug_str	00000000 
00049c19 l       .debug_str	00000000 
00049c5c l       .debug_str	00000000 
00049c66 l       .debug_str	00000000 
00049cb0 l       .debug_str	00000000 
00049cf7 l       .debug_str	00000000 
00049d44 l       .debug_str	00000000 
00049d8e l       .debug_str	00000000 
00049dc0 l       .debug_str	00000000 
00049dc9 l       .debug_str	00000000 
00049dfd l       .debug_str	00000000 
00049e36 l       .debug_str	00000000 
00049e72 l       .debug_str	00000000 
00049e84 l       .debug_str	00000000 
00049ec5 l       .debug_str	00000000 
00049f24 l       .debug_str	00000000 
00049f55 l       .debug_str	00000000 
00049f6b l       .debug_str	00000000 
00049fa0 l       .debug_str	00000000 
00049ffd l       .debug_str	00000000 
0004a061 l       .debug_str	00000000 
0004a0c0 l       .debug_str	00000000 
0004a120 l       .debug_str	00000000 
0004a17e l       .debug_str	00000000 
00024f2c l       .debug_str	00000000 
0004a1e3 l       .debug_str	00000000 
0004a229 l       .debug_str	00000000 
0004a269 l       .debug_str	00000000 
0004a2f1 l       .debug_str	00000000 
000586c7 l       .debug_str	00000000 
0004a378 l       .debug_str	00000000 
0004a3ab l       .debug_str	00000000 
0004a41f l       .debug_str	00000000 
0004a498 l       .debug_str	00000000 
0004a50c l       .debug_str	00000000 
0004a56b l       .debug_str	00000000 
0004a5c8 l       .debug_str	00000000 
0004a622 l       .debug_str	00000000 
0004a67e l       .debug_str	00000000 
0004a6db l       .debug_str	00000000 
0004a73a l       .debug_str	00000000 
0004a7a2 l       .debug_str	00000000 
0004a80c l       .debug_str	00000000 
0004a875 l       .debug_str	00000000 
0004a8d3 l       .debug_str	00000000 
0004a945 l       .debug_str	00000000 
0004a949 l       .debug_str	00000000 
0004a9bc l       .debug_str	00000000 
0004aa1a l       .debug_str	00000000 
0004aa76 l       .debug_str	00000000 
0004aae7 l       .debug_str	00000000 
0004ab5d l       .debug_str	00000000 
0004ab94 l       .debug_str	00000000 
0004abf0 l       .debug_str	00000000 
0004ac44 l       .debug_str	00000000 
0004aca2 l       .debug_str	00000000 
0004ad0e l       .debug_str	00000000 
0004ad63 l       .debug_str	00000000 
0004ad96 l       .debug_str	00000000 
0004ada4 l       .debug_str	00000000 
0004addc l       .debug_str	00000000 
0004adef l       .debug_str	00000000 
0004ae24 l       .debug_str	00000000 
0004ae5a l       .debug_str	00000000 
0004aeb5 l       .debug_str	00000000 
0004aee8 l       .debug_str	00000000 
0004aeef l       .debug_str	00000000 
0004af31 l       .debug_str	00000000 
0004af62 l       .debug_str	00000000 
0004af93 l       .debug_str	00000000 
0004afc6 l       .debug_str	00000000 
0004afcd l       .debug_str	00000000 
0004affa l       .debug_str	00000000 
0004b035 l       .debug_str	00000000 
0004b048 l       .debug_str	00000000 
0004b079 l       .debug_str	00000000 
0004b083 l       .debug_str	00000000 
0004b0e4 l       .debug_str	00000000 
0004b14c l       .debug_str	00000000 
0004b189 l       .debug_str	00000000 
0004b1d7 l       .debug_str	00000000 
0004b213 l       .debug_str	00000000 
0004b24f l       .debug_str	00000000 
0004b288 l       .debug_str	00000000 
0004b2c2 l       .debug_str	00000000 
0004b2fb l       .debug_str	00000000 
0004b332 l       .debug_str	00000000 
0004b36b l       .debug_str	00000000 
0004b3a5 l       .debug_str	00000000 
0004b3eb l       .debug_str	00000000 
0004b40e l       .debug_str	00000000 
0004b454 l       .debug_str	00000000 
0004b477 l       .debug_str	00000000 
0004b4c0 l       .debug_str	00000000 
0004b4e6 l       .debug_str	00000000 
0004b52f l       .debug_str	00000000 
0004b555 l       .debug_str	00000000 
0004b59f l       .debug_str	00000000 
0004b5c6 l       .debug_str	00000000 
0004b610 l       .debug_str	00000000 
0004b637 l       .debug_str	00000000 
0004b684 l       .debug_str	00000000 
0004b6ae l       .debug_str	00000000 
0004b6fb l       .debug_str	00000000 
0004b725 l       .debug_str	00000000 
0004b758 l       .debug_str	00000000 
0004b784 l       .debug_str	00000000 
0004b7da l       .debug_str	00000000 
0004b805 l       .debug_str	00000000 
0004b85d l       .debug_str	00000000 
0004b8b3 l       .debug_str	00000000 
0004b8ec l       .debug_str	00000000 
0004b8f7 l       .debug_str	00000000 
00023a29 l       .debug_str	00000000 
0004b930 l       .debug_str	00000000 
0004b957 l       .debug_str	00000000 
0004b990 l       .debug_str	00000000 
0004b9d7 l       .debug_str	00000000 
0004b9e4 l       .debug_str	00000000 
0004bbfe l       .debug_str	00000000 
0004ba13 l       .debug_str	00000000 
0004ba53 l       .debug_str	00000000 
0004ba67 l       .debug_str	00000000 
0004baa9 l       .debug_str	00000000 
0004bada l       .debug_str	00000000 
0004bb0a l       .debug_str	00000000 
0004bb3b l       .debug_str	00000000 
0004bb6c l       .debug_str	00000000 
0004bba3 l       .debug_str	00000000 
0004bbae l       .debug_str	00000000 
0004bbee l       .debug_str	00000000 
0004bc02 l       .debug_str	00000000 
0004bc3e l       .debug_str	00000000 
0004bc4e l       .debug_str	00000000 
0004bc83 l       .debug_str	00000000 
0004bc8d l       .debug_str	00000000 
0004bcc2 l       .debug_str	00000000 
0004bccc l       .debug_str	00000000 
0004bd21 l       .debug_str	00000000 
0004bd69 l       .debug_str	00000000 
0004bdaf l       .debug_str	00000000 
0004bdf6 l       .debug_str	00000000 
0004be3f l       .debug_str	00000000 
0004be91 l       .debug_str	00000000 
0004bee3 l       .debug_str	00000000 
0004bf81 l       .debug_str	00000000 
0004bfb3 l       .debug_str	00000000 
0004bfec l       .debug_str	00000000 
0004c001 l       .debug_str	00000000 
0004c03c l       .debug_str	00000000 
0004c053 l       .debug_str	00000000 
0004c091 l       .debug_str	00000000 
0004c0ab l       .debug_str	00000000 
0004c10d l       .debug_str	00000000 
0004c132 l       .debug_str	00000000 
0004c18d l       .debug_str	00000000 
0004c19c l       .debug_str	00000000 
0004c211 l       .debug_str	00000000 
0004c22e l       .debug_str	00000000 
0004c268 l       .debug_str	00000000 
0004c2a5 l       .debug_str	00000000 
0004c2b0 l       .debug_str	00000000 
0004c2e8 l       .debug_str	00000000 
0004c2ef l       .debug_str	00000000 
0004c36e l       .debug_str	00000000 
0004c3ce l       .debug_str	00000000 
0004c42c l       .debug_str	00000000 
0004c48a l       .debug_str	00000000 
0004c4c2 l       .debug_str	00000000 
0004c4f7 l       .debug_str	00000000 
0004c522 l       .debug_str	00000000 
0004c52c l       .debug_str	00000000 
0004c55c l       .debug_str	00000000 
0004c56a l       .debug_str	00000000 
0004c5c3 l       .debug_str	00000000 
0004c616 l       .debug_str	00000000 
0004c692 l       .debug_str	00000000 
0004c6f6 l       .debug_str	00000000 
0004c75a l       .debug_str	00000000 
0004c790 l       .debug_str	00000000 
0004c7a4 l       .debug_str	00000000 
0004c7e5 l       .debug_str	00000000 
0004c7fd l       .debug_str	00000000 
0004c8b1 l       .debug_str	00000000 
0004c8e4 l       .debug_str	00000000 
0004c8f5 l       .debug_str	00000000 
0004c93b l       .debug_str	00000000 
0004c948 l       .debug_str	00000000 
0004c985 l       .debug_str	00000000 
0004c9c9 l       .debug_str	00000000 
0004ca0a l       .debug_str	00000000 
0004ca4c l       .debug_str	00000000 
0004ca56 l       .debug_str	00000000 
0004ca9a l       .debug_str	00000000 
0004caa5 l       .debug_str	00000000 
0004caf3 l       .debug_str	00000000 
0004cb41 l       .debug_str	00000000 
0004cb87 l       .debug_str	00000000 
0004cbcf l       .debug_str	00000000 
0004cc17 l       .debug_str	00000000 
00018da1 l       .debug_str	00000000 
0004cc7e l       .debug_str	00000000 
0004ccd7 l       .debug_str	00000000 
0004cd41 l       .debug_str	00000000 
0001c2fb l       .debug_str	00000000 
0004cdab l       .debug_str	00000000 
0004ce26 l       .debug_str	00000000 
0004ce9b l       .debug_str	00000000 
0004cea6 l       .debug_str	00000000 
0004cf1b l       .debug_str	00000000 
0004cf26 l       .debug_str	00000000 
0004cf7d l       .debug_str	00000000 
0004cfe1 l       .debug_str	00000000 
0004cfed l       .debug_str	00000000 
0004d02a l       .debug_str	00000000 
0004d037 l       .debug_str	00000000 
0004d06b l       .debug_str	00000000 
0004d0a6 l       .debug_str	00000000 
0004d102 l       .debug_str	00000000 
0004d15d l       .debug_str	00000000 
0004d1b7 l       .debug_str	00000000 
00033c2f l       .debug_str	00000000 
0004d1fd l       .debug_str	00000000 
0004d263 l       .debug_str	00000000 
0004d29a l       .debug_str	00000000 
0004d2a2 l       .debug_str	00000000 
0004d2da l       .debug_str	00000000 
0004d2e3 l       .debug_str	00000000 
0004d31b l       .debug_str	00000000 
0004d324 l       .debug_str	00000000 
0004d35b l       .debug_str	00000000 
0004d363 l       .debug_str	00000000 
0004d39b l       .debug_str	00000000 
0004d3a4 l       .debug_str	00000000 
0004d3dc l       .debug_str	00000000 
0004d3e5 l       .debug_str	00000000 
0004d41c l       .debug_str	00000000 
0004d424 l       .debug_str	00000000 
0004d49e l       .debug_str	00000000 
0004d518 l       .debug_str	00000000 
0004d592 l       .debug_str	00000000 
0004d60e l       .debug_str	00000000 
0001f9e8 l       .debug_str	00000000 
0004d66c l       .debug_str	00000000 
0004d6cb l       .debug_str	00000000 
0004d72a l       .debug_str	00000000 
0004d789 l       .debug_str	00000000 
0004d7e9 l       .debug_str	00000000 
0004d847 l       .debug_str	00000000 
0004d8a6 l       .debug_str	00000000 
0004d905 l       .debug_str	00000000 
0004d964 l       .debug_str	00000000 
0004d9c4 l       .debug_str	00000000 
0004da19 l       .debug_str	00000000 
0004da6e l       .debug_str	00000000 
0004dac8 l       .debug_str	00000000 
0004db22 l       .debug_str	00000000 
0004db5c l       .debug_str	00000000 
0004db65 l       .debug_str	00000000 
0004db9f l       .debug_str	00000000 
0004dba8 l       .debug_str	00000000 
0004dbe5 l       .debug_str	00000000 
0003511a l       .debug_str	00000000 
0004dc1e l       .debug_str	00000000 
0004dc7f l       .debug_str	00000000 
0004dcdd l       .debug_str	00000000 
0004dd1e l       .debug_str	00000000 
0004dd5c l       .debug_str	00000000 
0004dd95 l       .debug_str	00000000 
0004ddd4 l       .debug_str	00000000 
0004de12 l       .debug_str	00000000 
0004de50 l       .debug_str	00000000 
0004de91 l       .debug_str	00000000 
0004ded5 l       .debug_str	00000000 
0004df12 l       .debug_str	00000000 
0004df78 l       .debug_str	00000000 
0004dfdf l       .debug_str	00000000 
0004e042 l       .debug_str	00000000 
0004e0a4 l       .debug_str	00000000 
0004e109 l       .debug_str	00000000 
0004e172 l       .debug_str	00000000 
0004e1d8 l       .debug_str	00000000 
0004e23e l       .debug_str	00000000 
0004e299 l       .debug_str	00000000 
0004e300 l       .debug_str	00000000 
0004e36b l       .debug_str	00000000 
0004e3c6 l       .debug_str	00000000 
0004e421 l       .debug_str	00000000 
0002816a l       .debug_str	00000000 
0004e468 l       .debug_str	00000000 
0004e4b0 l       .debug_str	00000000 
0004e4f8 l       .debug_str	00000000 
0004e540 l       .debug_str	00000000 
0004e589 l       .debug_str	00000000 
0004e5d3 l       .debug_str	00000000 
0004e61a l       .debug_str	00000000 
0004e66d l       .debug_str	00000000 
0004e688 l       .debug_str	00000000 
0004e6d0 l       .debug_str	00000000 
0004e724 l       .debug_str	00000000 
0004e76c l       .debug_str	00000000 
0004e7c0 l       .debug_str	00000000 
0004e808 l       .debug_str	00000000 
0004e85c l       .debug_str	00000000 
0004e8a5 l       .debug_str	00000000 
0004e8fa l       .debug_str	00000000 
0004e944 l       .debug_str	00000000 
0004e99c l       .debug_str	00000000 
0004e9fe l       .debug_str	00000000 
0004ea5d l       .debug_str	00000000 
0004eabd l       .debug_str	00000000 
0004eb1d l       .debug_str	00000000 
0004eb7d l       .debug_str	00000000 
0004ebde l       .debug_str	00000000 
0004ec3d l       .debug_str	00000000 
0004ec9d l       .debug_str	00000000 
0004ecfd l       .debug_str	00000000 
0004ed5d l       .debug_str	00000000 
0004edbe l       .debug_str	00000000 
0004ee1b l       .debug_str	00000000 
0004ee76 l       .debug_str	00000000 
0004eecc l       .debug_str	00000000 
0004ef2a l       .debug_str	00000000 
0004ef7e l       .debug_str	00000000 
0004efdf l       .debug_str	00000000 
0004f045 l       .debug_str	00000000 
0004f0ad l       .debug_str	00000000 
0004f114 l       .debug_str	00000000 
0004f170 l       .debug_str	00000000 
0004f1d1 l       .debug_str	00000000 
0004f22b l       .debug_str	00000000 
0004f285 l       .debug_str	00000000 
0004f2e3 l       .debug_str	00000000 
0004f337 l       .debug_str	00000000 
0004f3b3 l       .debug_str	00000000 
0004f41c l       .debug_str	00000000 
0004f498 l       .debug_str	00000000 
0004f514 l       .debug_str	00000000 
0004f57d l       .debug_str	00000000 
0004f5f9 l       .debug_str	00000000 
0004f666 l       .debug_str	00000000 
0004f6c0 l       .debug_str	00000000 
0004f719 l       .debug_str	00000000 
0004f771 l       .debug_str	00000000 
0004f7d0 l       .debug_str	00000000 
0004f82f l       .debug_str	00000000 
0004f88e l       .debug_str	00000000 
0004f8ee l       .debug_str	00000000 
0004f94e l       .debug_str	00000000 
0004f9ae l       .debug_str	00000000 
0004fa0e l       .debug_str	00000000 
0004fa70 l       .debug_str	00000000 
0004fad2 l       .debug_str	00000000 
0004fb33 l       .debug_str	00000000 
0004fb95 l       .debug_str	00000000 
0004fbf7 l       .debug_str	00000000 
0004fc58 l       .debug_str	00000000 
0004fcba l       .debug_str	00000000 
0004fd1c l       .debug_str	00000000 
0003515e l       .debug_str	00000000 
0004fd65 l       .debug_str	00000000 
0004fdb1 l       .debug_str	00000000 
0004fdb9 l       .debug_str	00000000 
0004fe03 l       .debug_str	00000000 
0004fe4e l       .debug_str	00000000 
0004fe55 l       .debug_str	00000000 
0004fea0 l       .debug_str	00000000 
0004feeb l       .debug_str	00000000 
0004ff37 l       .debug_str	00000000 
0004ff81 l       .debug_str	00000000 
0004ffce l       .debug_str	00000000 
00050019 l       .debug_str	00000000 
00050065 l       .debug_str	00000000 
000500b1 l       .debug_str	00000000 
000500fd l       .debug_str	00000000 
0005014a l       .debug_str	00000000 
00050194 l       .debug_str	00000000 
000501e1 l       .debug_str	00000000 
0005022c l       .debug_str	00000000 
00050278 l       .debug_str	00000000 
000502c4 l       .debug_str	00000000 
00050310 l       .debug_str	00000000 
0005035d l       .debug_str	00000000 
000503a7 l       .debug_str	00000000 
000503f4 l       .debug_str	00000000 
0005043f l       .debug_str	00000000 
0005048b l       .debug_str	00000000 
000504d7 l       .debug_str	00000000 
00050523 l       .debug_str	00000000 
00050570 l       .debug_str	00000000 
000505bb l       .debug_str	00000000 
00050609 l       .debug_str	00000000 
00050655 l       .debug_str	00000000 
000506a2 l       .debug_str	00000000 
000506ef l       .debug_str	00000000 
0005073c l       .debug_str	00000000 
0005078a l       .debug_str	00000000 
000507d5 l       .debug_str	00000000 
00050820 l       .debug_str	00000000 
0005086c l       .debug_str	00000000 
000508b8 l       .debug_str	00000000 
00050905 l       .debug_str	00000000 
00050951 l       .debug_str	00000000 
0005099e l       .debug_str	00000000 
000509eb l       .debug_str	00000000 
00050a4a l       .debug_str	00000000 
00050aa7 l       .debug_str	00000000 
00050b03 l       .debug_str	00000000 
00050b61 l       .debug_str	00000000 
00050bbe l       .debug_str	00000000 
00050c1c l       .debug_str	00000000 
00050c79 l       .debug_str	00000000 
00050cd7 l       .debug_str	00000000 
00050d34 l       .debug_str	00000000 
00050d93 l       .debug_str	00000000 
00050df1 l       .debug_str	00000000 
00050e52 l       .debug_str	00000000 
00050eb3 l       .debug_str	00000000 
00050f16 l       .debug_str	00000000 
00050f47 l       .debug_str	00000000 
00050f4f l       .debug_str	00000000 
00050fb2 l       .debug_str	00000000 
00051015 l       .debug_str	00000000 
00051079 l       .debug_str	00000000 
000510dd l       .debug_str	00000000 
00051141 l       .debug_str	00000000 
000511a5 l       .debug_str	00000000 
00051208 l       .debug_str	00000000 
0005126b l       .debug_str	00000000 
000512cf l       .debug_str	00000000 
00051333 l       .debug_str	00000000 
00051397 l       .debug_str	00000000 
000513fb l       .debug_str	00000000 
0005142c l       .debug_str	00000000 
00051434 l       .debug_str	00000000 
00051498 l       .debug_str	00000000 
000514fc l       .debug_str	00000000 
00051560 l       .debug_str	00000000 
000515c4 l       .debug_str	00000000 
00051624 l       .debug_str	00000000 
00051684 l       .debug_str	00000000 
000516b2 l       .debug_str	00000000 
000516bb l       .debug_str	00000000 
0005171c l       .debug_str	00000000 
0005177d l       .debug_str	00000000 
000517de l       .debug_str	00000000 
0005183f l       .debug_str	00000000 
00051896 l       .debug_str	00000000 
000518e9 l       .debug_str	00000000 
00051931 l       .debug_str	00000000 
00051959 l       .debug_str	00000000 
000519a1 l       .debug_str	00000000 
000519b7 l       .debug_str	00000000 
000519ff l       .debug_str	00000000 
00051a34 l       .debug_str	00000000 
00051a7c l       .debug_str	00000000 
00051ab7 l       .debug_str	00000000 
00051aff l       .debug_str	00000000 
00051b47 l       .debug_str	00000000 
00051b68 l       .debug_str	00000000 
00051bb0 l       .debug_str	00000000 
00051bbb l       .debug_str	00000000 
00051c03 l       .debug_str	00000000 
00051c40 l       .debug_str	00000000 
00051c88 l       .debug_str	00000000 
00051ce1 l       .debug_str	00000000 
00051d29 l       .debug_str	00000000 
00051d45 l       .debug_str	00000000 
00051d8d l       .debug_str	00000000 
00051e39 l       .debug_str	00000000 
00051e81 l       .debug_str	00000000 
00051e9f l       .debug_str	00000000 
00051ee7 l       .debug_str	00000000 
00051ef1 l       .debug_str	00000000 
00051f39 l       .debug_str	00000000 
00051f74 l       .debug_str	00000000 
00051fbc l       .debug_str	00000000 
0005200b l       .debug_str	00000000 
00052053 l       .debug_str	00000000 
0005207a l       .debug_str	00000000 
000520c2 l       .debug_str	00000000 
000520ec l       .debug_str	00000000 
00052134 l       .debug_str	00000000 
000521af l       .debug_str	00000000 
000521f7 l       .debug_str	00000000 
0005223f l       .debug_str	00000000 
00052255 l       .debug_str	00000000 
0001ba69 l       .debug_str	00000000 
0005229d l       .debug_str	00000000 
000522e5 l       .debug_str	00000000 
0005232d l       .debug_str	00000000 
0005235e l       .debug_str	00000000 
000523a6 l       .debug_str	00000000 
0005240a l       .debug_str	00000000 
00052452 l       .debug_str	00000000 
0000a587 l       .debug_str	00000000 
0005249a l       .debug_str	00000000 
000524e2 l       .debug_str	00000000 
000524ef l       .debug_str	00000000 
00052537 l       .debug_str	00000000 
00052541 l       .debug_str	00000000 
00052589 l       .debug_str	00000000 
00052592 l       .debug_str	00000000 
000525da l       .debug_str	00000000 
00052602 l       .debug_str	00000000 
0005264a l       .debug_str	00000000 
00052692 l       .debug_str	00000000 
000526b4 l       .debug_str	00000000 
000526fc l       .debug_str	00000000 
0005272d l       .debug_str	00000000 
00052775 l       .debug_str	00000000 
000527bd l       .debug_str	00000000 
000527f5 l       .debug_str	00000000 
0005283d l       .debug_str	00000000 
00052872 l       .debug_str	00000000 
000528ba l       .debug_str	00000000 
000528e3 l       .debug_str	00000000 
0005292b l       .debug_str	00000000 
0005294f l       .debug_str	00000000 
00052997 l       .debug_str	00000000 
000529bc l       .debug_str	00000000 
00052a04 l       .debug_str	00000000 
00052a21 l       .debug_str	00000000 
00052a69 l       .debug_str	00000000 
00052a74 l       .debug_str	00000000 
00052abc l       .debug_str	00000000 
00052ae4 l       .debug_str	00000000 
00052b2c l       .debug_str	00000000 
00052b3b l       .debug_str	00000000 
00052b83 l       .debug_str	00000000 
00052bcb l       .debug_str	00000000 
00052be7 l       .debug_str	00000000 
00052c2f l       .debug_str	00000000 
00052ca6 l       .debug_str	00000000 
00052cee l       .debug_str	00000000 
00052d65 l       .debug_str	00000000 
00052dad l       .debug_str	00000000 
00052db6 l       .debug_str	00000000 
00052dfe l       .debug_str	00000000 
00052e24 l       .debug_str	00000000 
00052e6c l       .debug_str	00000000 
00052e9f l       .debug_str	00000000 
00052ee7 l       .debug_str	00000000 
00052f04 l       .debug_str	00000000 
00052f4c l       .debug_str	00000000 
00052f55 l       .debug_str	00000000 
00052f9d l       .debug_str	00000000 
00052fe5 l       .debug_str	00000000 
00053009 l       .debug_str	00000000 
000132a0 l       .debug_str	00000000 
00053051 l       .debug_str	00000000 
00053099 l       .debug_str	00000000 
000530e1 l       .debug_str	00000000 
000531d9 l       .debug_str	00000000 
000200f8 l       .debug_str	00000000 
00053221 l       .debug_str	00000000 
00053269 l       .debug_str	00000000 
000532b1 l       .debug_str	00000000 
000532de l       .debug_str	00000000 
0000a620 l       .debug_str	00000000 
00053326 l       .debug_str	00000000 
0005336e l       .debug_str	00000000 
000533cb l       .debug_str	00000000 
00053413 l       .debug_str	00000000 
0005341c l       .debug_str	00000000 
00053464 l       .debug_str	00000000 
00053481 l       .debug_str	00000000 
000534c9 l       .debug_str	00000000 
000534ff l       .debug_str	00000000 
00053547 l       .debug_str	00000000 
0005357c l       .debug_str	00000000 
000535c4 l       .debug_str	00000000 
000535fd l       .debug_str	00000000 
00053645 l       .debug_str	00000000 
00053661 l       .debug_str	00000000 
000536a9 l       .debug_str	00000000 
000536b1 l       .debug_str	00000000 
000536f9 l       .debug_str	00000000 
00053714 l       .debug_str	00000000 
0005375c l       .debug_str	00000000 
00053784 l       .debug_str	00000000 
000537ce l       .debug_str	00000000 
00053818 l       .debug_str	00000000 
00053877 l       .debug_str	00000000 
000538d4 l       .debug_str	00000000 
0005392d l       .debug_str	00000000 
0005398c l       .debug_str	00000000 
000539eb l       .debug_str	00000000 
00053a4c l       .debug_str	00000000 
00053aaf l       .debug_str	00000000 
00053b17 l       .debug_str	00000000 
00053b79 l       .debug_str	00000000 
00053bdf l       .debug_str	00000000 
00053c41 l       .debug_str	00000000 
00053ca6 l       .debug_str	00000000 
00053d09 l       .debug_str	00000000 
00053d65 l       .debug_str	00000000 
00053dbc l       .debug_str	00000000 
00053e15 l       .debug_str	00000000 
00053e68 l       .debug_str	00000000 
00053ec4 l       .debug_str	00000000 
00053f2a l       .debug_str	00000000 
00053f80 l       .debug_str	00000000 
00053fdd l       .debug_str	00000000 
0005403f l       .debug_str	00000000 
00054098 l       .debug_str	00000000 
000540f3 l       .debug_str	00000000 
0005414e l       .debug_str	00000000 
000541a9 l       .debug_str	00000000 
00054206 l       .debug_str	00000000 
00054263 l       .debug_str	00000000 
000542a9 l       .debug_str	00000000 
000542f3 l       .debug_str	00000000 
00054333 l       .debug_str	00000000 
00054370 l       .debug_str	00000000 
000543b4 l       .debug_str	00000000 
000543f0 l       .debug_str	00000000 
00054434 l       .debug_str	00000000 
0005447d l       .debug_str	00000000 
00054486 l       .debug_str	00000000 
000544cf l       .debug_str	00000000 
000544d8 l       .debug_str	00000000 
00054541 l       .debug_str	00000000 
0005459e l       .debug_str	00000000 
00054601 l       .debug_str	00000000 
00054657 l       .debug_str	00000000 
000546ad l       .debug_str	00000000 
00054706 l       .debug_str	00000000 
0005475e l       .debug_str	00000000 
000547c2 l       .debug_str	00000000 
00054848 l       .debug_str	00000000 
0005484e l       .debug_str	00000000 
000548d4 l       .debug_str	00000000 
000548da l       .debug_str	00000000 
0005495c l       .debug_str	00000000 
000549de l       .debug_str	00000000 
00054a61 l       .debug_str	00000000 
00054a68 l       .debug_str	00000000 
00054aeb l       .debug_str	00000000 
00054af2 l       .debug_str	00000000 
00054b78 l       .debug_str	00000000 
00054bfe l       .debug_str	00000000 
00054c81 l       .debug_str	00000000 
00054d04 l       .debug_str	00000000 
00054d86 l       .debug_str	00000000 
00054e0c l       .debug_str	00000000 
00054e92 l       .debug_str	00000000 
00054f1c l       .debug_str	00000000 
00054fa4 l       .debug_str	00000000 
0005502c l       .debug_str	00000000 
00055094 l       .debug_str	00000000 
000550fd l       .debug_str	00000000 
00055167 l       .debug_str	00000000 
000551d2 l       .debug_str	00000000 
00055230 l       .debug_str	00000000 
0005528e l       .debug_str	00000000 
000552ec l       .debug_str	00000000 
0005534b l       .debug_str	00000000 
000553a9 l       .debug_str	00000000 
00055408 l       .debug_str	00000000 
00055466 l       .debug_str	00000000 
000554c5 l       .debug_str	00000000 
00055524 l       .debug_str	00000000 
00055583 l       .debug_str	00000000 
000555e1 l       .debug_str	00000000 
00055640 l       .debug_str	00000000 
0005569f l       .debug_str	00000000 
000556fe l       .debug_str	00000000 
0005575d l       .debug_str	00000000 
000557bc l       .debug_str	00000000 
0005581b l       .debug_str	00000000 
0005587a l       .debug_str	00000000 
000558d9 l       .debug_str	00000000 
00055938 l       .debug_str	00000000 
00055997 l       .debug_str	00000000 
000559f6 l       .debug_str	00000000 
00055a55 l       .debug_str	00000000 
00055ab4 l       .debug_str	00000000 
00055b13 l       .debug_str	00000000 
00055b72 l       .debug_str	00000000 
00055bd1 l       .debug_str	00000000 
00055c30 l       .debug_str	00000000 
00055c8f l       .debug_str	00000000 
00055cee l       .debug_str	00000000 
00055d4e l       .debug_str	00000000 
00055dad l       .debug_str	00000000 
00055e0c l       .debug_str	00000000 
00055e6b l       .debug_str	00000000 
00055ecb l       .debug_str	00000000 
00055f2a l       .debug_str	00000000 
00055f89 l       .debug_str	00000000 
00055fe8 l       .debug_str	00000000 
00056048 l       .debug_str	00000000 
00014fd8 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00016e32 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00016e3c l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00015646 l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
0001666e l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00015540 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
000155f0 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
00015b68 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00014f88 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
00014fec l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
0001eb94 l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
0001ec0f l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
0001ee00 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001e170 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
0001561a l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00015620 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00015614 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
00014f8a l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00016e48 l     F .text	00000024 __semihost
00016e6c l     F .text	00000010 debugger_connected
00016e7c l     F .text	0000002e semihost_write
00016f50 l     F .text	0000001c semihosting_console_write_ch
20005f04 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20005f08 l     O .bss	00000010 avail_queue
20005f18 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20005f24 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00017120 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00017174 l     F .text	00000050 hal_gpio_irq_handler
000171c4 l     F .text	0000002c hal_gpio_irq_setup
000171f0 l     F .text	0000001c hal_gpio_find_empty_slot
0001720c l     F .text	00000038 hal_gpio_find_pin
20005f28 l     O .bss	00000040 hal_gpio_irqs
20005f68 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
000173a0 l     F .text	0000007a hal_i2c_delay_us
0001741c l     F .text	00000024 hal_i2c_resolve
00017440 l     F .text	0000001c hal_i2c_convert_status
0001745c l     F .text	00000012 read_gpio_inbuffer
0001746e l     F .text	000000a2 hal_i2c_clear_bus
0001f268 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
0001780c l     F .text	0000006e nrf52_irqm_handler
00017894 l     F .text	00000014 hal_spi_stop_transfer
000178a8 l     F .text	0000004c hal_spi_config_slave
000178f4 l     F .text	000000b8 hal_spi_init_master
000179ac l     F .text	000000e0 hal_spi_config_master
0001f270 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00017d90 l     F .text	0000000e nrf52_hal_wdt_default_handler
00017da0 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00017fb8 l     F .text	00000016 os_main
20006070 l     O .bss	00002000 g_os_main_stack
20005f70 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
000182c8 l     F .text	0000005c os_dev_add
00018324 l     F .text	00000026 os_dev_initialize
0001834a l     F .text	00000020 os_dev_init
20008070 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20008078 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
00018874 l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
00018988 l     F .text	00000010 os_msys_find_biggest_pool
00018998 l     F .text	0000002c os_msys_find_pool
00018a10 l     F .text	00000044 os_msys_init_once
20008088 l     O .bss	00004900 os_msys_1_data
2000c988 l     O .bss	0000000c os_msys_1_mbuf_pool
2000c994 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
00018c6c l     F .text	00000020 os_sanity_check_list_lock
00018c8c l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00019100 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
000191f0 l     F .text	0000004c os_deltatime
0001923c l     F .text	0000005c os_time_tick
2000c9b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
00019558 l       .text	00000000 SVC_User
00019576 l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
00019618 l       .text	00000000 test1
0001960c l       .text	00000000 loop1
0001961e l       .text	00000000 res1
0001963a l       .text	00000000 test2
00019642 l       .text	00000000 done
0001962e l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001964e l       .text	00000000 test1
0001964a l       .text	00000000 loop1
0001965c l       .text	00000000 test2
00019658 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
000196c6 l     F .text	000000c0 ui2a
00019786 l     F .text	00000020 i2a
000197a6 l     F .text	00000030 a2d
000197d6 l     F .text	00000036 a2i
0001980c l     F .text	0000002a putf
00019838 l     F .text	0000011c putchw
00019954 l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
00019cd8 l     F .text	00000004 stdin_read
00019cdc l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
00019d8c l     F .text	00000028 nrf52k_flash_wait_ready
00019db4 l     F .text	00000054 nrf52k_flash_erase_sector
00019e08 l     F .text	00000004 nrf52k_flash_init
00019e0c l     F .text	00000020 nrf52k_flash_sector_info
00019e2c l     F .text	000000d0 nrf52k_flash_write
00019efc l     F .text	0000000e nrf52k_flash_read
0001f428 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
00019f0c l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001a118 l     F .text	0000000a nrf_read_timer_cntr
0001a124 l     F .text	000000b4 nrf_timer_set_ocmp
0001a1d8 l     F .text	0000000a nrf_timer_disable_ocmp
0001a1e2 l     F .text	0000000a nrf_rtc_disable_ocmp
0001a1ec l     F .text	00000054 hal_timer_read_bsptimer
0001a240 l     F .text	00000076 hal_timer_chk_queue
0001a2b6 l     F .text	0000002c hal_timer_irq_handler
0001f444 l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001a47c l     F .text	00000034 nrf52_periph_create_timers
0001a4b0 l     F .text	00000020 nrf52_periph_create_i2c
0001a4d0 l     F .text	00000020 nrf52_periph_create_spi
0001f45c l     O .text	0000000c hal_i2c1_cfg
0001f468 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001a504 l     F .text	00000028 sensor_mgr_remove
0001a52c l     F .text	00000060 sensor_mgr_insert
0001a58c l     F .text	0000000a sensor_type_traits_empty
0001a598 l     F .text	0000000c sensor_mgr_evq_set
0001a5d2 l     F .text	0000005c sensor_read_data_func
0001a630 l     F .text	00000048 sensor_base_ts_update_event
0001a678 l     F .text	00000050 sensor_up_timestamp
0001a700 l     F .text	000000a0 sensor_mgr_init
0001a96c l     F .text	0000007c sensor_mgr_wakeup_event
0001a7ca l     F .text	00000032 sensor_update_nextrun
0001a7fc l     F .text	0000001e sensor_calc_nextrun_delta
0001a81c l     F .text	00000024 sensor_find_min_nextrun_sensor
0001a8f4 l     F .text	0000004a sensor_mgr_poll_bytype
0001a93e l     F .text	0000002e sensor_poll_per_type_trait
2000c9ec l     O .bss	00000078 sensor_notify_evt_area
2000ca64 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000ca80 l     O .bss	00000008 oc_sem
2000ca88 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000ca8c l     O .bss	0000000c hw_id
2000ca98 l     O .bss	00000004 hw_id_len
2000caa0 l     O .bss	00000008 sensor_node_address
2000caa8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
0001f480 l     O .text	0000000c COLLECTOR_NODE_HW_ID
0001f48c l     O .text	0000003c SENSOR_NODE_HW_IDS
0001f528 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001ab90 l     F .text	00000050 config_device
2000cae0 l     O .bss	00000014 adc_1_itf_temp_stub
2000caf8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001ac3c l     F .text	00000004 temp_stub_close
0001ac40 l     F .text	0000001c temp_stub_sensor_get_config
0001ac5c l     F .text	00000026 temp_stub_open
0001ad38 l     F .text	0000007c temp_stub_sensor_read
0001f56c l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001addc l     F .text	00000030 oc_buffer_tx
0001ae0c l     F .text	0000002c oc_buffer_rx
2000cbb8 l     O .bss	00000018 oc_inq
2000cbd0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000cbe8 l     O .bss	000000c8 oc_client_cb_area
2000ccb0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000cccc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000ccd0 l     O .bss	0000001c oc_rep_objects
2000ccec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001af60 l     F .text	00000078 flash_map_read_mfg
2000cd1c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001b0b4 l     F .text	00000094 mfg_seek_next_aux
0001b148 l     F .text	00000070 mfg_read_mmr
0001b1b8 l     F .text	00000054 mfg_read_next_mmr
0001b20c l     F .text	0000003c mfg_open_flash_area
0001b248 l     F .text	00000044 mfg_read_tlv_body
0001b314 l     F .text	0000004e mfg_read_mmr_refs
2000cd94 l     O .bss	00000001 mfg_initialized
2000cd98 l     O .bss	00000018 mfg_mmrs
2000cdb0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b37a l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000af6 l       .debug_str	00000000 
0001f45b l       .debug_str	00000000 
0001f4b2 l       .debug_str	00000000 
00010896 l       .debug_str	00000000 
0001f4fe l       .debug_str	00000000 
00000c30 l       .debug_str	00000000 
00000bf4 l       .debug_str	00000000 
0001f506 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
00015158 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00008616 g     F .text	000000ba main
00010a9a g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E
00009b68 g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
00018598 g     F .text	00000040 os_eventq_remove
000193e4 g     F .text	00000018 os_arch_init
00019600 g     F .text	00000048 memcmp
000119b2 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
0001430e g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
000110de g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00011d28 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00014abe g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
00014946 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00013e12 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00015188 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
0000a2e0 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0001219c g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00016c5a g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000ced0 g     O .bss	0000001c nrf52_hal_timer0
0001a7c0 g     F .text	0000000a sensor_unlock
0000a6c6 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00011132 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00008dfa g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
00018cb8 g     F .text	00000024 os_sanity_check_register
0001ac90 g     F .text	0000007c temp_stub_init
00010e40 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6c8f50f7f2b7e54fE
00018d58 g     F .text	00000054 os_sched_insert
2000cdb4 g     O .bss	00000001 g_silence_console
00012044 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001b418 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
00014f76 g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
000143fe g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E
0001095c g     F .text	0000007e _ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE
00008b80 g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00014254 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
00008a9c g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001ae9c g     F .text	00000020 oc_send_buffer
0001948c g     F .text	00000030 os_arch_start
0001aab4 g     F .text	0000001a is_standalone_node
000087d2 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE
00018484 g     F .text	00000010 os_eventq_init
00016046 g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
00010e8e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf36c1f7e73dea779E
000120d4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
0001572a g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
0001111c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
00010856 g     F .text	00000106 _ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E
00014766 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E
00014c90 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001a9e8 g     F .text	00000028 init_sensor_coap
0001aebc g     F .text	0000004c oc_send_multicast_message
0000c336 g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE
000116d2 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
00016002 g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000cef0 g     O .bss	00000034 sensor_mgr
0000c6f8 g     F .text	00000106 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E
00016fec g     F .text	0000002c console_dump
00010e72 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2c0667b2b5cae01eE
00018e84 g     F .text	00000078 os_sched_wakeup
00014e20 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE
00011fd4 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00016b0a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
00008ad4 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001b378 g     F .text	00000002 _fini
000182bc g     F .text	0000000a os_cputime_get32
000111e2 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
00013cb4 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000cdb5 g     O .bss	00000001 g_console_input_ignore
00019374 g     F .text	00000014 os_arch_ctx_sw
00010c7e g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E
0001201a g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
000195c2 g     F .text	0000000c SysTick_Handler
0001aa28 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
00011ad4 g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00011148 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0000924c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
00008a74 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001969a g     F .text	0000001c strcmp
0000b60c g     F .text	00000118 .hidden _ZN3app5chip88on_start17h473d234c4f7ef3a3E
2000cde8 g     O .bss	00000050 g_idle_task
00018474 g     F .text	00000010 os_dev_reset
000092f8 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
00018fd4 g     F .text	00000010 os_sem_init
00014518 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E
00016f6c g     F .text	00000070 console_printhex
0000a92a g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E
0000885c g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE
00013e7e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
0001f62c g       .text	00000000 __exidx_start
0001aa98 g     F .text	0000001c is_collector_node
00014d50 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE
00019662 g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00016918 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
00016efc g     F .text	00000054 console_buffer
00018494 g     F .text	0000000a os_eventq_inited
00017134 g     F .text	0000000c sysinit_end
000148f4 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00014d20 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00015100 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000cf88 g       .bss	00000000 __HeapBase
000091f8 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
0000882e g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E
0000c34a g     F .text	000000c4 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E
00011032 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E
00013de6 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00013fee g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001b018 g     F .text	00000026 flash_area_read
00012004 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001af2e g     F .text	00000002 oc_register_ip4
00008e80 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001af30 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
0001b398 g     F .text	00000028 hal_flash_init
0001843c g     F .text	00000036 os_dev_close
0001f5c4 g     O .text	00000048 sysflash_map_dflt
00010ca6 g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE
00019d80 g     F .text	0000000c hal_bsp_init
000117ce g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00009792 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
00011694 g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001b774 g     F .text	00000004 __aeabi_memcpy4
00017bd8 g     F .text	0000002c hal_spi_set_txrx_cb
0001b76c g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000cdb8 g     O .bss	00000004 console_is_midline
0001b76c g     F .text	00000006 __aeabi_memclr4
000080f8 g       .text	00000000 __isr_vector_end
000176d0 g     F .text	0000013c hal_i2c_master_read
000199b8 g     F .text	0000025c tfp_format
00014c60 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001a88c g     F .text	00000068 sensor_read
0001456e g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E
00008f42 g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001b774 g     F .text	00000004 __aeabi_memcpy
0001b774 g     F .text	00000004 __aeabi_memcpy8
2000cf24 g     O .bss	00000020 st_up_osco
000194bc g     F .text	0000005c os_arch_os_start
0001a86e g     F .text	0000001e sensor_init
00014f3c g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE
20000000 g       .bss	00000000 _ram_start
000192e4 g     F .text	00000026 os_time_delay
0001af2c g     F .text	00000002 oc_register_gatt
000106ac g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E
20004a6c g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001b414 g     F .text	00000004 hal_bsp_hw_id_len
0001827c g     F .text	00000034 os_callout_wakeup_ticks
000185f2 g     F .text	00000026 os_mqueue_get
00017510 g     F .text	00000098 hal_i2c_init
00015ed4 g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00016918 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001d92c g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
00010d20 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE
00014c30 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0000c40e g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE
00018f84 g     F .text	00000022 os_sched
00008b92 g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
00010c64 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E
00011814 g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001a5a4 g     F .text	0000002e sensor_mgr_match_bytype
000116e8 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
0000a848 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
00018ac0 g     F .text	00000014 os_mutex_init
00009b24 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000cdc0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
00008164  w    F .text	00000002 RTC1_IRQHandler
000118fa g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00014ba0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
000090c0 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
000091ce g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
00008b78 g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
00018a64 g     F .text	00000028 os_msys_get_pkthdr
0001ad0c g     F .text	0000002c temp_stub_get_raw_temperature
00018efc g     F .text	0000003c os_sched_os_timer_exp
0001836c g     F .text	00000040 os_dev_create
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
00018ca8 g     F .text	00000010 os_sanity_check_init
000151ea g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
000182b0 g     F .text	0000000c os_cputime_init
00018580 g     F .text	00000018 os_eventq_run
00011cb4 g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
00018a8c g     F .text	00000034 os_msys_init
000143b6 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
000147ca g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001936a g     F .text	0000000a timer_handler
000112ac g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
00014f7a g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
00009196 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
00014f72 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
000151c8 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
0000c430 g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17habca32c74e5cefadE
0001438a g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00016b0a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00014084 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
00019c14 g     F .text	00000008 vfprintf
00013e6a g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
00011840 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001189e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
00018692 g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
00014c00 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00010cc2 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E
000163d6 g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
0001515c g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001939a g     F .text	0000000a os_arch_in_critical
00018d48 g     F .text	00000010 os_sanity_init
00010d4c g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E
00016b0a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
0001469c g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE
00017e5c g     F .text	0000004c __assert_func
000149d2 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
000141aa g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
00018932 g     F .text	0000001e os_memblock_put_from_cb
0001951c g     F .text	00000014 os_set_env
2000ceac g     O .bss	00000004 g_os_last_ctx_sw_time
00008a86 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
000170cc g     F .text	00000048 console_printf
0001204e g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
0000a798 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
00011714 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00011f20 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00014b40 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
00019530 g     F .text	00000006 os_arch_init_task_stack
0001b304 g     F .text	00000010 mfg_open
00016b0a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00011074 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE
000146b4 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE
0001ae60 g     F .text	00000030 oc_ri_mem_init
000106bc g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE
0000955a g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
00019d70 g     F .text	00000010 hal_bsp_flash_dev
0001b040 g     F .text	00000070 flash_map_init
2000cec0 g     O .bss	00000004 g_os_time
0000c67a g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E
000195ce g     F .text	0000001e os_default_irq_asm
00017ea8 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
00017b10 g     F .text	00000068 hal_spi_disable
00008f14 g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001af32 g     F .text	00000002 oc_register_lora
00018714 g     F .text	000000a8 os_mbuf_append
0001abe0 g     F .text	0000005c temp_stub_create
0001b3c0 g     F .text	00000054 hal_flash_read
00016eac g     F .text	00000048 console_flush
000180fc g     F .text	0000001a os_start
00010fe6 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h59fb34749d9b73deE
0001a2f4 g     F .text	00000060 hal_timer_init
0001115c g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
00019cec g     F .text	00000010 rust_sysinit
0000c45e g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE
00008164  w    F .text	00000002 I2S_IRQHandler
00016fdc g     F .text	00000010 console_printint
00018fa8 g     F .text	0000002c os_sched_resort
0001f404 g     O .text	00000008 MemFile_methods
00019cc0 g     F .text	00000018 fmemopen_w
00012e8a g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00017a8c g     F .text	00000038 hal_spi_config
0001b768  w    F .text	00000002 .hidden __aeabi_ldiv0
00018978 g     F .text	00000010 os_mempool_module_init
00018f78 g     F .text	0000000c os_sched_next_task
000172ca g     F .text	00000034 hal_gpio_read
00018150 g     F .text	0000001a os_callout_init
00018a54 g     F .text	00000010 os_msys_reset
00019c1c g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001b46c g     F .text	00000000 .hidden __aeabi_uldivmod
00010e1a g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE
0001930c g     F .text	00000038 os_gettimeofday
00017058 g     F .text	0000001e console_write
00014cf0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
00015e9e g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
00009656 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00017fdc g     F .text	00000070 os_init_idle_task
000193fc g     F .text	0000008c os_arch_os_init
0000cb34 g     F .text	00003b40 _ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE
000091b2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
0001804c g     F .text	000000b0 os_init
2000ce98 g     O .bss	00000008 g_os_mempool_list
0000964c g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00010fa0 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hafdbd8f68c60a5deE
0001172a g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
00017054 g     F .text	00000004 semihosting_console_init
0001b29e g     F .text	0000001a mfg_seek_next_with_type
00018b8c g     F .text	000000e0 os_mutex_pend
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
0000c416 g     F .text	0000001a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E
000144d0 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E
000172a8 g     F .text	00000022 hal_gpio_write
00010aaa g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E
00010aba g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE
00008600 g     F .text	00000014 _start
0001180c g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
00011874 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001b364 g     F .text	00000014 __wrap_coap_receive
00014b70 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000cdbc g     O .bss	00000001 sysinit_active
00014660 g     F .text	00000012 _ZN4core3mem4swap17h206518364108b51fE
0000c98c g     F .text	00000100 _ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E
00013f02 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
00019c90 g     F .text	0000002e memfile_write
0001b768  w    F .text	00000002 .hidden __aeabi_idiv0
0001460a g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE
00017fd0 g     F .text	0000000c os_started
0001ae38 g     F .text	00000028 oc_buffer_init
00013e14 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
2000cea0 g     O .bss	0000000c g_os_sanity_check_mu
00008f5c g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
000145e8 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0001b76c g     F .text	00000006 __aeabi_memclr
0001b778 g     F .text	0000009a __aeabi_memset4
000121ac g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
00015ea6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
000192a4 g     F .text	00000040 os_time_advance
00017ac4 g     F .text	0000004c hal_spi_enable
0001b2cc g     F .text	00000038 mfg_init
00012064 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E
00013934 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000ce38 g     O .bss	00000050 g_os_main_task
0001b778 g     F .text	0000009a __aeabi_memset8
00016976 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
00008b6c g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0000c4fa g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE
0001f644 g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20000148 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
000154e8 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
00008afa g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00016d4e g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00017140 g     F .text	00000034 NVIC_Relocate
00017128 g     F .text	0000000c sysinit_start
0001f410 g     O .text	00000018 nrf52k_flash_dev
0001a354 g     F .text	000000f8 hal_timer_config
00010732 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE
00013f7e g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
00019c7c g     F .text	00000014 vprintf
00008e66 g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
00016ef4 g     F .text	00000008 disable_buffer
00012094 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h0cfb45c01aa96099E
2000ce88 g     O .bss	00000004 g_os_started
00015150 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
20000144 g       .bssnz	00000000 __bssnz_end__
000183d8 g     F .text	00000020 os_dev_lookup
000090b4 g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
00017e38 g     F .text	00000010 hal_watchdog_enable
2000cec4 g     O .bss	0000000c g_hal_os_tick
0001100a g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h81569b4ba1b6bc4bE
00019394 g     F .text	00000006 os_arch_restore_sr
000181a8 g     F .text	00000078 os_callout_reset
00009660 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001b2b8 g     F .text	0000000a mfg_read_tlv_flash_area
000120b0 g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
000185e0 g     F .text	00000012 os_mqueue_init
00014bd0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
000140ae g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
000107ae g     F .text	000000a8 _ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E
0001ac82 g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
0001816c g     F .text	0000003c os_callout_stop
000081c0 g     F .text	0000004c hal_system_clock_start
000186dc g     F .text	00000024 os_mbuf_free_chain
00008f88 g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
00019cfc g     F .text	00000030 mem_init_mbuf_pool
00012108 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
00008a90 g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
000175a8 g     F .text	00000128 hal_i2c_master_write
00008164  w    F .text	00000002 QDEC_IRQHandler
0000ca8c g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
000144ae g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E
0001217e g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
000114e8 g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
000185d8 g     F .text	00000008 os_eventq_dflt_get
0001a7a8 g     F .text	00000018 sensor_lock
000110f4 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
000088c6 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE
00017080 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
00018700 g     F .text	00000014 os_mbuf_len
000186c8 g     F .text	00000014 os_mbuf_free
000116fe g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
00011cc0 g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00017076 g     F .text	00000008 console_blocking_mode
0000a306 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
000098be g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00011108 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001a4f0 g     F .text	00000010 nrf52_periph_create
00018cdc g     F .text	0000006c os_sanity_run
000143c4 g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE
00014652 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00013e84 g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00013fca g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
00008896 g     F .text	00000030 _ZN4core3any6TypeId2of17haae5124a9f275cb8E
000188ec g     F .text	00000014 os_mempool_init
0001f40c g     O .text	00000004 stdout
0000a8f8 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
0000c638 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E
000183ac g     F .text	0000002c os_dev_initialize_all
00008bb2 g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00011000 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc956e9044d663b76E
0000c610 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE
0001496a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00017f40 g     F .text	00000078 os_idle_task
000109da g     F .text	000000c0 _ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E
00008c66 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
00014ad6 g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00010c50 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E
000096dc g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
00015b9c g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001afd8 g     F .text	00000040 flash_area_open
00008164 g     F .text	00000002 Default_Handler
0001514e g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
000090da g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
000189c4 g     F .text	0000004c os_msys_register
00008f92 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000c9b0 g     O .bss	00000004 g_os_sanity_check_list
0000a6fc g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0001184a g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
00010cf4 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE
00011424 g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00017b78 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001a6e4 g     F .text	00000010 sensor_mgr_unlock
2000cf80 g     O .bss	00000004 flash_map_entries
000168ba g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
00014ae0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
0001af34 g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
000142fe g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
0000a330 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
00010c04 g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE
00008164  w    F .text	00000002 GPIOTE_IRQHandler
000119c4 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001b28c g     F .text	00000012 mfg_seek_next
00011cca g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
2000011c g     O .data	00000008 g_os_sleep_list
0001590c g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0000c7fe g     F .text	0000013c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E
00014d86 g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE
00018656 g     F .text	0000000a os_mbuf_pool_init
2000ce90 g     O .bss	00000008 g_callout_list
00018de8 g     F .text	0000000c os_sched_set_current_task
00018220 g     F .text	0000005c os_callout_tick
0000c684 g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE
00014dde g     F .text	00000042 _ZN4core3ptr4read17h38cf3848f1a0f2ccE
00008fae g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0001192c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
00017dc0 g     F .text	00000078 hal_watchdog_init
2000ceb4 g     O .bss	00000001 g_task_id
00016be0 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
0000a2fe g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
0000a906 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E
0000c594 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E
000183f8 g     F .text	00000044 os_dev_open
2000ceb0 g     O .bss	00000004 g_current_task
0000bf28 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E
00014f6e g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
000149e6 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
00008b60 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0001787c g     F .text	00000018 nrf52_spi0_irq_handler
000120f4 g     F .text	00000014 _ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17h034a10ccec9203c6E
00010f86 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h31e2ffef0517a991E
0001a7a0 g     F .text	00000008 sensor_pkg_init
00010ff0 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha74ffb5bb738cd30E
00014672 g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE
0001adb4 g     F .text	00000028 temp_stub_config
00018618 g     F .text	0000003e os_mqueue_put
00010fb6 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h503d5702cc1a9c8dE
00016d4e g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
00017c04 g     F .text	000000ac hal_spi_txrx
00010ce6 g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE
00008164  w    F .text	00000002 RTC2_IRQHandler
00018ddc g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
00011f3c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001b0b0 g     F .text	00000002 modlog_init
00017cb0 g     F .text	000000e0 hal_spi_txrx_noblock
000149be g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h5acc6f9d6d8ec673E
00015eae g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
00008f52 g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
0000c95c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E
00008164  w    F .text	00000002 TEMP_IRQHandler
00008dd6 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
00018dac g     F .text	00000030 os_sched_ctx_sw_hook
0001a840 g     F .text	0000002e sensor_mgr_register
00015100 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
0001574c g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
0000c93a g     F .text	00000008 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE
00008154  w    F .text	00000002 NMI_Handler
00013dfc g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000902a g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
00008c6e g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
000116c6 g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
000144f6 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E
00018660 g     F .text	00000032 os_mbuf_get
2000ceb8 g     O .bss	00000008 g_os_task_list
00008928 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00015416 g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
00019c40 g     F .text	0000003a vsnprintf
00010fcc g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE
00012c60 g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
0000c698 g     F .text	00000060 _ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E
00018ad4 g     F .text	000000b8 os_mutex_release
00011cd2 g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00011a86 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001a6f4 g     F .text	0000000c sensor_mgr_evq_get
00014332 g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
00011828 g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
2000ce8c g     O .bss	00000004 g_os_idle_ctr
00010e06 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE
00017244 g     F .text	0000002c hal_gpio_init_in
0000bc14 g     F .text	00000234 _ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E
000117c4 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
0000966a g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001a500 g     F .text	00000002 sensor_dev_create
00011348 g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
000088dc g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00017270 g     F .text	00000038 hal_gpio_init_out
00008c76 g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
00011458 g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
00014436 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E
00014712 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h130fbb0563cc5e62E
00009276 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
00019298 g     F .text	0000000c os_time_get
00015150 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
0000c2dc g     F .text	0000005a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E
0000a272 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
00018950 g     F .text	00000026 os_memblock_put
00012cf0 g     F .text	0000019a _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
00018df4 g     F .text	00000090 os_sched_sleep
00011802 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001a6c8 g     F .text	0000001c sensor_mgr_lock
0001b49c g     F .text	000002cc .hidden __udivmoddi4
00011114 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001a078 g     F .text	000000a0 os_tick_init
00013f2c g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
0001514a g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
00008ec6 g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
000120e4 g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf245ed9d33da7eb8E
00010cd4 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E
00018f38 g     F .text	00000040 os_sched_wakeup_ticks
0001a44c g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00017378 g     F .text	00000028 hal_gpio_irq_enable
0001ae90 g     F .text	0000000c oc_evq_set
0001aa10 g     F .text	00000018 is_sensor_node
00010674 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE
000168ba g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001af08 g     F .text	00000024 oc_init
00016a34 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
00016a34 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
0000bf42 g     F .text	000002ca _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE
00009590 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
0000c978 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E
0001608a g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00014994 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hc3941f5f2cf5d6d6E
2000cf48 g     O .bss	00000018 sensor_base_ts
00016c5a g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0001f644 g       .ARM.exidx	00000000 __etext
00010e2e g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE
00014a52 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E
00016976 g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00017114 g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
00008f0a g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
00019118 g     F .text	000000d8 os_task_init
0001140a g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
000117f2 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
00014cc0 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
00018fe4 g     F .text	00000064 os_sem_release
0001b778 g     F .text	0000009a __aeabi_memset
000187bc g     F .text	000000b8 os_mbuf_dup
0001957c g     F .text	00000046 PendSV_Handler
0000cae2 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E
00019536 g     F .text	00000046 SVC_Handler
0000c20c g     F .text	000000d0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE
00014958 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17hfb0b120a86d4002aE
00008826 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E
00019388 g     F .text	0000000c os_arch_save_sr
00008164  w    F .text	00000002 PWM2_IRQHandler
0000815c  w    F .text	00000002 UsageFault_Handler
0001a2e4 g     F .text	00000010 nrf52_timer0_irq_handler
000193a4 g     F .text	00000040 os_arch_task_stack_init
2000cf88 g       .bss	00000000 __bss_end__
000145c6 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E
00018900 g     F .text	00000032 os_memblock_get
2000cf84 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
00011522 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
000111e8 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00017e48 g     F .text	00000014 hal_watchdog_tickle
00018506 g     F .text	0000007a os_eventq_get
0001b44c g     F .text	00000020 sprintf
0000c942 g     F .text	0000001a _ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE
00010758 g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E
00019344 g     F .text	00000026 os_time_ms_to_ticks
000088ec g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
0000a762 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000c9e8 g     O .bss	00000004 os_flags
0001af38 g     F .text	00000028 oc_rep_init
00019648 g     F .text	0000001a memcpy
00019d2c g     F .text	00000044 sysinit_app
00011a6e g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E
00014b10 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00013944 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
0000bf32 g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E
00011fee g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00017018 g     F .text	0000003c console_out_nolock
2000cf60 g     O .bss	00000020 oc_transports
00017300 g     F .text	00000078 hal_gpio_irq_init
000196b6 g     F .text	00000010 strlen
00019048 g     F .text	000000b8 os_sem_pend
00019fe0 g     F .text	00000098 os_tick_idle
00012034 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
0001448c g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE
00010bcc g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
00012110 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
2000fe50 g       *ABS*	00000000 __HeapLimit
00018118 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
00009222 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000a2c6 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
00010698 g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E
00014100 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
00013cb0 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
0001463a g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E
00008158  w    F .text	00000002 MemoryManagement_Handler
00016a34 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
0001849e g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
000096a0 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
00011336 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
0001b2c2 g     F .text	0000000a mfg_read_tlv_mmr_ref
00008b48 g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
0001482e g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E
0001aad0 g     F .text	000000c0 sensor_network_init
00016a34 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
0001473c g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0001207c g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	00019537 	.word	0x00019537
	...
    8058:	0001957d 	.word	0x0001957d
    805c:	000195c3 	.word	0x000195c3
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000cf88 	.word	0x2000cf88
    ldr    r1, =__etext
    8138:	0001f644 	.word	0x0001f644
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000cf88 	.word	0x2000cf88
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f00e fde7 	bl	17140 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f00f fd22 	bl	1804c <os_init>
    os_start();
    8608:	f00f fd78 	bl	180fc <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f000 f960 	bl	88dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f000 fe6b 	bl	92f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f64b 0112 	movw	r1, #47122	; 0xb812
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f64b 0348 	movw	r3, #47176	; 0xb848
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f000 fa5e 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f002 f973 	bl	a92a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f64b 011a 	movw	r1, #47130	; 0xb81a
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f64b 0358 	movw	r3, #47192	; 0xb858
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f000 fa4d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f002 ffd3 	bl	b60c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f64b 0168 	movw	r1, #47208	; 0xb868
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f64b 0374 	movw	r3, #47220	; 0xb874
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f000 fa3c 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f000 fa83 	bl	8b92 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f64b 0122 	movw	r1, #47138	; 0xb822
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f64b 0384 	movw	r3, #47236	; 0xb884
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f000 f896 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f000 fa68 	bl	8b80 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f64b 012a 	movw	r1, #47146	; 0xb82a
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f64b 0394 	movw	r3, #47252	; 0xb894
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f000 fa17 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f64b 01a4 	movw	r1, #47268	; 0xb8a4
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f000 fbef 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00c fd2d 	bl	1514a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f64b 00aa 	movw	r0, #47274	; 0xb8aa
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f000 fbde 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00c fd1d 	bl	15150 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00c fd1b 	bl	15158 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f64b 00b1 	movw	r0, #47281	; 0xb8b1
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f000 fbc7 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f000 fbe9 	bl	8f14 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f64b 00b4 	movw	r0, #47284	; 0xb8b4
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f000 fbba 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f000 fbf4 	bl	8f42 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f64b 00ba 	movw	r0, #47290	; 0xb8ba
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f000 fbae 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f000 fbf1 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f000 fbed 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00c fce5 	bl	15150 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f000 f899 	bl	88c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f64b 01bc 	movw	r1, #47292	; 0xb8bc
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f003 ff49 	bl	c638 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f000 fb88 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f64b 00ba 	movw	r0, #47290	; 0xb8ba
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f000 fb80 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f000 fbc3 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>:
    87d2:	b08a      	sub	sp, #40	; 0x28
    87d4:	9107      	str	r1, [sp, #28]
    87d6:	9208      	str	r2, [sp, #32]
    87d8:	f8d0 c000 	ldr.w	ip, [r0]
    87dc:	f1bc 0f00 	cmp.w	ip, #0
    87e0:	9305      	str	r3, [sp, #20]
    87e2:	9204      	str	r2, [sp, #16]
    87e4:	9103      	str	r1, [sp, #12]
    87e6:	9002      	str	r0, [sp, #8]
    87e8:	d011      	beq.n	880e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x3c>
    87ea:	e7ff      	b.n	87ec <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x1a>
    87ec:	9802      	ldr	r0, [sp, #8]
    87ee:	6841      	ldr	r1, [r0, #4]
    87f0:	9106      	str	r1, [sp, #24]
    87f2:	4669      	mov	r1, sp
    87f4:	9a05      	ldr	r2, [sp, #20]
    87f6:	600a      	str	r2, [r1, #0]
    87f8:	f64b 03cc 	movw	r3, #47308	; 0xb8cc
    87fc:	f2c0 0301 	movt	r3, #1
    8800:	aa06      	add	r2, sp, #24
    8802:	9803      	ldr	r0, [sp, #12]
    8804:	9904      	ldr	r1, [sp, #16]
    8806:	f00c fc7b 	bl	15100 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    880a:	defe      	udf	#254	; 0xfe
    880c:	defe      	udf	#254	; 0xfe
    880e:	9802      	ldr	r0, [sp, #8]
    8810:	6841      	ldr	r1, [r0, #4]
    8812:	9109      	str	r1, [sp, #36]	; 0x24
    8814:	6802      	ldr	r2, [r0, #0]
    8816:	2a00      	cmp	r2, #0
    8818:	9101      	str	r1, [sp, #4]
    881a:	d103      	bne.n	8824 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x52>
    881c:	e7ff      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>
    881e:	9801      	ldr	r0, [sp, #4]
    8820:	b00a      	add	sp, #40	; 0x28
    8822:	4770      	bx	lr
    8824:	e7fb      	b.n	881e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE+0x4c>

00008826 <_ZN4core3ptr13drop_in_place17he6c5bffce3c304d4E>:
    8826:	b081      	sub	sp, #4
    8828:	9000      	str	r0, [sp, #0]
    882a:	b001      	add	sp, #4
    882c:	4770      	bx	lr

0000882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>:
    882e:	b580      	push	{r7, lr}
    8830:	b086      	sub	sp, #24
    8832:	9004      	str	r0, [sp, #16]
    8834:	9105      	str	r1, [sp, #20]
    8836:	9002      	str	r0, [sp, #8]
    8838:	f000 f810 	bl	885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>
    883c:	9001      	str	r0, [sp, #4]
    883e:	e7ff      	b.n	8840 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x12>
    8840:	9801      	ldr	r0, [sp, #4]
    8842:	07c1      	lsls	r1, r0, #31
    8844:	2900      	cmp	r1, #0
    8846:	d103      	bne.n	8850 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x22>
    8848:	e7ff      	b.n	884a <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x1c>
    884a:	2000      	movs	r0, #0
    884c:	9003      	str	r0, [sp, #12]
    884e:	e002      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8850:	9802      	ldr	r0, [sp, #8]
    8852:	9003      	str	r0, [sp, #12]
    8854:	e7ff      	b.n	8856 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E+0x28>
    8856:	9803      	ldr	r0, [sp, #12]
    8858:	b006      	add	sp, #24
    885a:	bd80      	pop	{r7, pc}

0000885c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE>:
    885c:	b580      	push	{r7, lr}
    885e:	b08a      	sub	sp, #40	; 0x28
    8860:	9008      	str	r0, [sp, #32]
    8862:	9109      	str	r1, [sp, #36]	; 0x24
    8864:	9103      	str	r1, [sp, #12]
    8866:	9002      	str	r0, [sp, #8]
    8868:	f000 f815 	bl	8896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>
    886c:	9105      	str	r1, [sp, #20]
    886e:	9004      	str	r0, [sp, #16]
    8870:	e7ff      	b.n	8872 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x16>
    8872:	9803      	ldr	r0, [sp, #12]
    8874:	68c1      	ldr	r1, [r0, #12]
    8876:	9802      	ldr	r0, [sp, #8]
    8878:	4788      	blx	r1
    887a:	9107      	str	r1, [sp, #28]
    887c:	9006      	str	r0, [sp, #24]
    887e:	e7ff      	b.n	8880 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x24>
    8880:	a804      	add	r0, sp, #16
    8882:	a906      	add	r1, sp, #24
    8884:	f002 f83f 	bl	a906 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>
    8888:	9001      	str	r0, [sp, #4]
    888a:	e7ff      	b.n	888c <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17hf1e84f8f0a6b983cE+0x30>
    888c:	9801      	ldr	r0, [sp, #4]
    888e:	f000 0001 	and.w	r0, r0, #1
    8892:	b00a      	add	sp, #40	; 0x28
    8894:	bd80      	pop	{r7, pc}

00008896 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E>:
    8896:	b086      	sub	sp, #24
    8898:	f249 40d9 	movw	r0, #38105	; 0x94d9
    889c:	f2c1 1010 	movt	r0, #4368	; 0x1110
    88a0:	9005      	str	r0, [sp, #20]
    88a2:	f249 7064 	movw	r0, #38756	; 0x9764
    88a6:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    88aa:	9004      	str	r0, [sp, #16]
    88ac:	9804      	ldr	r0, [sp, #16]
    88ae:	9905      	ldr	r1, [sp, #20]
    88b0:	9001      	str	r0, [sp, #4]
    88b2:	9100      	str	r1, [sp, #0]
    88b4:	e7ff      	b.n	88b6 <_ZN4core3any6TypeId2of17haae5124a9f275cb8E+0x20>
    88b6:	9801      	ldr	r0, [sp, #4]
    88b8:	9002      	str	r0, [sp, #8]
    88ba:	9900      	ldr	r1, [sp, #0]
    88bc:	9103      	str	r1, [sp, #12]
    88be:	9802      	ldr	r0, [sp, #8]
    88c0:	9903      	ldr	r1, [sp, #12]
    88c2:	b006      	add	sp, #24
    88c4:	4770      	bx	lr

000088c6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE>:
    88c6:	b580      	push	{r7, lr}
    88c8:	b084      	sub	sp, #16
    88ca:	9002      	str	r0, [sp, #8]
    88cc:	9103      	str	r1, [sp, #12]
    88ce:	f7ff ffae 	bl	882e <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h68cabc6c8a21d100E>
    88d2:	9001      	str	r0, [sp, #4]
    88d4:	e7ff      	b.n	88d6 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17he532d8d46bba5cdfE+0x10>
    88d6:	9801      	ldr	r0, [sp, #4]
    88d8:	b004      	add	sp, #16
    88da:	bd80      	pop	{r7, pc}

000088dc <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    88dc:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    88de:	f011 fa05 	bl	19cec <rust_sysinit>
    88e2:	e7ff      	b.n	88e4 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    88e4:	f000 fb35 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    88e8:	e7ff      	b.n	88ea <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    88ea:	bd80      	pop	{r7, pc}

000088ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    88ec:	b580      	push	{r7, lr}
    88ee:	b086      	sub	sp, #24
    88f0:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    88f2:	7801      	ldrb	r1, [r0, #0]
    88f4:	07ca      	lsls	r2, r1, #31
    88f6:	2a00      	cmp	r2, #0
    88f8:	9000      	str	r0, [sp, #0]
    88fa:	d006      	beq.n	890a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    88fc:	e7ff      	b.n	88fe <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    88fe:	9800      	ldr	r0, [sp, #0]
    8900:	6841      	ldr	r1, [r0, #4]
    8902:	9103      	str	r1, [sp, #12]
    8904:	9101      	str	r1, [sp, #4]
        match self.rep {
    8906:	e00c      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    8908:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    890a:	9800      	ldr	r0, [sp, #0]
    890c:	6841      	ldr	r1, [r0, #4]
    890e:	6882      	ldr	r2, [r0, #8]
    8910:	9104      	str	r1, [sp, #16]
    8912:	9205      	str	r2, [sp, #20]
    8914:	4608      	mov	r0, r1
    8916:	4611      	mov	r1, r2
    8918:	f008 ff73 	bl	11802 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    891c:	9001      	str	r0, [sp, #4]
    891e:	e7ff      	b.n	8920 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    8920:	e7ff      	b.n	8922 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    8922:	9801      	ldr	r0, [sp, #4]
    8924:	b006      	add	sp, #24
    8926:	bd80      	pop	{r7, pc}

00008928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    8928:	b5b0      	push	{r4, r5, r7, lr}
    892a:	b0b2      	sub	sp, #200	; 0xc8
    892c:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    892e:	7801      	ldrb	r1, [r0, #0]
    8930:	07ca      	lsls	r2, r1, #31
    8932:	2a00      	cmp	r2, #0
    8934:	900e      	str	r0, [sp, #56]	; 0x38
    8936:	d005      	beq.n	8944 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    8938:	e7ff      	b.n	893a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    893a:	980e      	ldr	r0, [sp, #56]	; 0x38
    893c:	6841      	ldr	r1, [r0, #4]
    893e:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    8940:	e096      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    8942:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    8944:	980e      	ldr	r0, [sp, #56]	; 0x38
    8946:	6841      	ldr	r1, [r0, #4]
    8948:	6882      	ldr	r2, [r0, #8]
    894a:	912b      	str	r1, [sp, #172]	; 0xac
    894c:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    894e:	4608      	mov	r0, r1
    8950:	4611      	mov	r1, r2
    8952:	f000 fa52 	bl	8dfa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    8956:	9011      	str	r0, [sp, #68]	; 0x44
    8958:	e7ff      	b.n	895a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    895a:	f64b 00e4 	movw	r0, #47332	; 0xb8e4
    895e:	f2c0 0001 	movt	r0, #1
    8962:	6800      	ldr	r0, [r0, #0]
    8964:	a911      	add	r1, sp, #68	; 0x44
    8966:	910f      	str	r1, [sp, #60]	; 0x3c
    8968:	9010      	str	r0, [sp, #64]	; 0x40
    896a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    896c:	902d      	str	r0, [sp, #180]	; 0xb4
    896e:	9910      	ldr	r1, [sp, #64]	; 0x40
    8970:	912e      	str	r1, [sp, #184]	; 0xb8
    8972:	900d      	str	r0, [sp, #52]	; 0x34
    8974:	910c      	str	r1, [sp, #48]	; 0x30
    8976:	f000 fbb0 	bl	90da <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    897a:	900b      	str	r0, [sp, #44]	; 0x2c
    897c:	e7ff      	b.n	897e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    897e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8980:	07c1      	lsls	r1, r0, #31
    8982:	2900      	cmp	r1, #0
    8984:	d001      	beq.n	898a <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    8986:	e7ff      	b.n	8988 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    8988:	e072      	b.n	8a70 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    898a:	f64b 103c 	movw	r0, #47420	; 0xb93c
    898e:	f2c0 0001 	movt	r0, #1
    8992:	6801      	ldr	r1, [r0, #0]
    8994:	980d      	ldr	r0, [sp, #52]	; 0x34
    8996:	9021      	str	r0, [sp, #132]	; 0x84
    8998:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    899a:	9222      	str	r2, [sp, #136]	; 0x88
    899c:	f64b 1350 	movw	r3, #47440	; 0xb950
    89a0:	f2c0 0301 	movt	r3, #1
    89a4:	681b      	ldr	r3, [r3, #0]
    89a6:	f64b 1c54 	movw	ip, #47444	; 0xb954
    89aa:	f2c0 0c01 	movt	ip, #1
    89ae:	f8dc c000 	ldr.w	ip, [ip]
    89b2:	46ee      	mov	lr, sp
    89b4:	2400      	movs	r4, #0
    89b6:	f8ce 4000 	str.w	r4, [lr]
    89ba:	a823      	add	r0, sp, #140	; 0x8c
    89bc:	2201      	movs	r2, #1
    89be:	910a      	str	r1, [sp, #40]	; 0x28
    89c0:	4619      	mov	r1, r3
    89c2:	4663      	mov	r3, ip
    89c4:	f000 f86a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    89c8:	e7ff      	b.n	89ca <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    89ca:	a821      	add	r0, sp, #132	; 0x84
    89cc:	901e      	str	r0, [sp, #120]	; 0x78
    89ce:	a822      	add	r0, sp, #136	; 0x88
    89d0:	901f      	str	r0, [sp, #124]	; 0x7c
    89d2:	a823      	add	r0, sp, #140	; 0x8c
    89d4:	9020      	str	r0, [sp, #128]	; 0x80
    89d6:	981e      	ldr	r0, [sp, #120]	; 0x78
    89d8:	902f      	str	r0, [sp, #188]	; 0xbc
    89da:	991f      	ldr	r1, [sp, #124]	; 0x7c
    89dc:	9130      	str	r1, [sp, #192]	; 0xc0
    89de:	9a20      	ldr	r2, [sp, #128]	; 0x80
    89e0:	9231      	str	r2, [sp, #196]	; 0xc4
    89e2:	f648 7393 	movw	r3, #36755	; 0x8f93
    89e6:	f2c0 0300 	movt	r3, #0
    89ea:	9109      	str	r1, [sp, #36]	; 0x24
    89ec:	4619      	mov	r1, r3
    89ee:	9208      	str	r2, [sp, #32]
    89f0:	f000 fc02 	bl	91f8 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    89f4:	9007      	str	r0, [sp, #28]
    89f6:	9106      	str	r1, [sp, #24]
    89f8:	e7ff      	b.n	89fa <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    89fa:	f648 7193 	movw	r1, #36755	; 0x8f93
    89fe:	f2c0 0100 	movt	r1, #0
    8a02:	9809      	ldr	r0, [sp, #36]	; 0x24
    8a04:	f000 fbf8 	bl	91f8 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    8a08:	9005      	str	r0, [sp, #20]
    8a0a:	9104      	str	r1, [sp, #16]
    8a0c:	e7ff      	b.n	8a0e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    8a0e:	f245 712b 	movw	r1, #22315	; 0x572b
    8a12:	f2c0 0101 	movt	r1, #1
    8a16:	9808      	ldr	r0, [sp, #32]
    8a18:	f000 fc18 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8a1c:	9003      	str	r0, [sp, #12]
    8a1e:	9102      	str	r1, [sp, #8]
    8a20:	e7ff      	b.n	8a22 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    8a22:	9807      	ldr	r0, [sp, #28]
    8a24:	9018      	str	r0, [sp, #96]	; 0x60
    8a26:	9906      	ldr	r1, [sp, #24]
    8a28:	9119      	str	r1, [sp, #100]	; 0x64
    8a2a:	9a05      	ldr	r2, [sp, #20]
    8a2c:	921a      	str	r2, [sp, #104]	; 0x68
    8a2e:	9b04      	ldr	r3, [sp, #16]
    8a30:	931b      	str	r3, [sp, #108]	; 0x6c
    8a32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    8a36:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    8a3a:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a3e:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    8a42:	466c      	mov	r4, sp
    8a44:	2503      	movs	r5, #3
    8a46:	6025      	str	r5, [r4, #0]
    8a48:	a812      	add	r0, sp, #72	; 0x48
    8a4a:	ab18      	add	r3, sp, #96	; 0x60
    8a4c:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a4e:	462a      	mov	r2, r5
    8a50:	f000 f824 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8a54:	e7ff      	b.n	8a56 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    8a56:	f64b 1070 	movw	r0, #47472	; 0xb970
    8a5a:	f2c0 0001 	movt	r0, #1
    8a5e:	f00c fb76 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a62:	9001      	str	r0, [sp, #4]
    8a64:	e7ff      	b.n	8a66 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    8a66:	a812      	add	r0, sp, #72	; 0x48
    8a68:	9901      	ldr	r1, [sp, #4]
    8a6a:	f00c fbad 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a6e:	defe      	udf	#254	; 0xfe
    }
    8a70:	b032      	add	sp, #200	; 0xc8
    8a72:	bdb0      	pop	{r4, r5, r7, pc}

00008a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
    8a74:	b083      	sub	sp, #12
    8a76:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
    8a78:	9002      	str	r0, [sp, #8]
    8a7a:	9802      	ldr	r0, [sp, #8]
    8a7c:	9000      	str	r0, [sp, #0]
    8a7e:	e7ff      	b.n	8a80 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
    8a80:	9800      	ldr	r0, [sp, #0]
    8a82:	b003      	add	sp, #12
    8a84:	4770      	bx	lr

00008a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
    8a86:	b081      	sub	sp, #4
    8a88:	f06f 000c 	mvn.w	r0, #12
        }
    8a8c:	b001      	add	sp, #4
    8a8e:	4770      	bx	lr

00008a90 <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
    8a90:	b082      	sub	sp, #8
    8a92:	9000      	str	r0, [sp, #0]
    8a94:	9101      	str	r1, [sp, #4]
    8a96:	2000      	movs	r0, #0
        }
    8a98:	b002      	add	sp, #8
    8a9a:	4770      	bx	lr

00008a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    8a9c:	b580      	push	{r7, lr}
    8a9e:	b086      	sub	sp, #24
    8aa0:	f8dd c020 	ldr.w	ip, [sp, #32]
    8aa4:	9102      	str	r1, [sp, #8]
    8aa6:	9203      	str	r2, [sp, #12]
    8aa8:	9304      	str	r3, [sp, #16]
    8aaa:	f8cd c014 	str.w	ip, [sp, #20]
    8aae:	f04f 0e00 	mov.w	lr, #0
    8ab2:	f8cd e004 	str.w	lr, [sp, #4]
    8ab6:	f8cd e000 	str.w	lr, [sp]
    8aba:	f8cd e000 	str.w	lr, [sp]
    8abe:	6001      	str	r1, [r0, #0]
    8ac0:	6042      	str	r2, [r0, #4]
    8ac2:	9900      	ldr	r1, [sp, #0]
    8ac4:	9a01      	ldr	r2, [sp, #4]
    8ac6:	6081      	str	r1, [r0, #8]
    8ac8:	60c2      	str	r2, [r0, #12]
    8aca:	6103      	str	r3, [r0, #16]
    8acc:	f8c0 c014 	str.w	ip, [r0, #20]
    8ad0:	b006      	add	sp, #24
    8ad2:	bd80      	pop	{r7, pc}

00008ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    8ad4:	b082      	sub	sp, #8
    8ad6:	9001      	str	r0, [sp, #4]
    8ad8:	7800      	ldrb	r0, [r0, #0]
    8ada:	07c0      	lsls	r0, r0, #31
    8adc:	2800      	cmp	r0, #0
    8ade:	d004      	beq.n	8aea <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    8ae0:	e7ff      	b.n	8ae2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    8ae2:	2000      	movs	r0, #0
    8ae4:	f88d 0003 	strb.w	r0, [sp, #3]
    8ae8:	e003      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8aea:	2001      	movs	r0, #1
    8aec:	f88d 0003 	strb.w	r0, [sp, #3]
    8af0:	e7ff      	b.n	8af2 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    8af2:	f89d 0003 	ldrb.w	r0, [sp, #3]
    8af6:	b002      	add	sp, #8
    8af8:	4770      	bx	lr

00008afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    8afa:	b08a      	sub	sp, #40	; 0x28
    8afc:	9005      	str	r0, [sp, #20]
    8afe:	9107      	str	r1, [sp, #28]
    8b00:	9208      	str	r2, [sp, #32]
    8b02:	9805      	ldr	r0, [sp, #20]
    8b04:	f1b0 0c01 	subs.w	ip, r0, #1
    8b08:	bf18      	it	ne
    8b0a:	f04f 0c01 	movne.w	ip, #1
    8b0e:	2801      	cmp	r0, #1
    8b10:	9304      	str	r3, [sp, #16]
    8b12:	9203      	str	r2, [sp, #12]
    8b14:	9102      	str	r1, [sp, #8]
    8b16:	d010      	beq.n	8b3a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    8b18:	e7ff      	b.n	8b1a <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    8b1a:	9805      	ldr	r0, [sp, #20]
    8b1c:	9006      	str	r0, [sp, #24]
    8b1e:	4668      	mov	r0, sp
    8b20:	9904      	ldr	r1, [sp, #16]
    8b22:	6001      	str	r1, [r0, #0]
    8b24:	f64b 1380 	movw	r3, #47488	; 0xb980
    8b28:	f2c0 0301 	movt	r3, #1
    8b2c:	aa06      	add	r2, sp, #24
    8b2e:	9802      	ldr	r0, [sp, #8]
    8b30:	9903      	ldr	r1, [sp, #12]
    8b32:	f00c fae5 	bl	15100 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    8b36:	defe      	udf	#254	; 0xfe
    8b38:	defe      	udf	#254	; 0xfe
    8b3a:	9805      	ldr	r0, [sp, #20]
    8b3c:	2801      	cmp	r0, #1
    8b3e:	d102      	bne.n	8b46 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    8b40:	e7ff      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    8b42:	b00a      	add	sp, #40	; 0x28
    8b44:	4770      	bx	lr
    8b46:	e7fc      	b.n	8b42 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

00008b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    8b48:	b580      	push	{r7, lr}
    8b4a:	b082      	sub	sp, #8
    8b4c:	9001      	str	r0, [sp, #4]
    8b4e:	f7ff ffc1 	bl	8ad4 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    8b52:	9000      	str	r0, [sp, #0]
    8b54:	e7ff      	b.n	8b56 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    8b56:	2001      	movs	r0, #1
    8b58:	9900      	ldr	r1, [sp, #0]
    8b5a:	4388      	bics	r0, r1
    8b5c:	b002      	add	sp, #8
    8b5e:	bd80      	pop	{r7, pc}

00008b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    8b60:	b082      	sub	sp, #8
    8b62:	9001      	str	r0, [sp, #4]
    8b64:	9000      	str	r0, [sp, #0]
    8b66:	9800      	ldr	r0, [sp, #0]
    8b68:	b002      	add	sp, #8
    8b6a:	4770      	bx	lr

00008b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    8b6c:	b081      	sub	sp, #4
    8b6e:	4601      	mov	r1, r0
    8b70:	f88d 0003 	strb.w	r0, [sp, #3]
    8b74:	b001      	add	sp, #4
    8b76:	4770      	bx	lr

00008b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    8b78:	b081      	sub	sp, #4
    8b7a:	9000      	str	r0, [sp, #0]
    8b7c:	b001      	add	sp, #4
    8b7e:	4770      	bx	lr

00008b80 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8b80:	b580      	push	{r7, lr}
    8b82:	b082      	sub	sp, #8
    8b84:	9001      	str	r0, [sp, #4]
    8b86:	f00f fcfb 	bl	18580 <os_eventq_run>
    8b8a:	e7ff      	b.n	8b8c <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    8b8c:	2001      	movs	r0, #1
    8b8e:	b002      	add	sp, #8
    8b90:	bd80      	pop	{r7, pc}

00008b92 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8b92:	b580      	push	{r7, lr}
    8b94:	b084      	sub	sp, #16
    8b96:	9002      	str	r0, [sp, #8]
    8b98:	f00f fd1e 	bl	185d8 <os_eventq_dflt_get>
    8b9c:	4601      	mov	r1, r0
    8b9e:	9003      	str	r0, [sp, #12]
    8ba0:	9101      	str	r1, [sp, #4]
    8ba2:	e7ff      	b.n	8ba4 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    8ba4:	9801      	ldr	r0, [sp, #4]
    8ba6:	9902      	ldr	r1, [sp, #8]
    8ba8:	6048      	str	r0, [r1, #4]
    8baa:	2200      	movs	r2, #0
    8bac:	600a      	str	r2, [r1, #0]
    8bae:	b004      	add	sp, #16
    8bb0:	bd80      	pop	{r7, pc}

00008bb2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    8bb2:	b570      	push	{r4, r5, r6, lr}
    8bb4:	b09c      	sub	sp, #112	; 0x70
    8bb6:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    8bba:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    8bbe:	9c22      	ldr	r4, [sp, #136]	; 0x88
    8bc0:	9d21      	ldr	r5, [sp, #132]	; 0x84
    8bc2:	9e20      	ldr	r6, [sp, #128]	; 0x80
    8bc4:	9013      	str	r0, [sp, #76]	; 0x4c
    8bc6:	9114      	str	r1, [sp, #80]	; 0x50
    8bc8:	9215      	str	r2, [sp, #84]	; 0x54
    8bca:	9316      	str	r3, [sp, #88]	; 0x58
    8bcc:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    8bd0:	9418      	str	r4, [sp, #96]	; 0x60
    8bd2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    8bd6:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    8bda:	9011      	str	r0, [sp, #68]	; 0x44
    8bdc:	4608      	mov	r0, r1
    8bde:	9310      	str	r3, [sp, #64]	; 0x40
    8be0:	920f      	str	r2, [sp, #60]	; 0x3c
    8be2:	910e      	str	r1, [sp, #56]	; 0x38
    8be4:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    8be8:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    8bec:	940b      	str	r4, [sp, #44]	; 0x2c
    8bee:	950a      	str	r5, [sp, #40]	; 0x28
    8bf0:	9609      	str	r6, [sp, #36]	; 0x24
    8bf2:	f7ff fe99 	bl	8928 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    8bf6:	e7ff      	b.n	8bf8 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    8bf8:	980e      	ldr	r0, [sp, #56]	; 0x38
    8bfa:	f7ff fe77 	bl	88ec <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    8bfe:	9008      	str	r0, [sp, #32]
    8c00:	e7ff      	b.n	8c02 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    8c02:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8c04:	990c      	ldr	r1, [sp, #48]	; 0x30
    8c06:	f008 f9fb 	bl	11000 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc956e9044d663b76E>
    8c0a:	9007      	str	r0, [sp, #28]
    8c0c:	e7ff      	b.n	8c0e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    8c0e:	980d      	ldr	r0, [sp, #52]	; 0x34
    8c10:	b281      	uxth	r1, r0
    8c12:	466a      	mov	r2, sp
    8c14:	60d1      	str	r1, [r2, #12]
    8c16:	9907      	ldr	r1, [sp, #28]
    8c18:	6091      	str	r1, [r2, #8]
    8c1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8c1c:	6053      	str	r3, [r2, #4]
    8c1e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    8c22:	fa5f fe8c 	uxtb.w	lr, ip
    8c26:	f8c2 e000 	str.w	lr, [r2]
    8c2a:	9811      	ldr	r0, [sp, #68]	; 0x44
    8c2c:	9908      	ldr	r1, [sp, #32]
    8c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    8c30:	9b10      	ldr	r3, [sp, #64]	; 0x40
    8c32:	f010 fa71 	bl	19118 <os_task_init>
    8c36:	4601      	mov	r1, r0
    8c38:	901b      	str	r0, [sp, #108]	; 0x6c
    8c3a:	9106      	str	r1, [sp, #24]
    8c3c:	e7ff      	b.n	8c3e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    8c3e:	9806      	ldr	r0, [sp, #24]
    8c40:	2800      	cmp	r0, #0
    8c42:	d005      	beq.n	8c50 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    8c44:	e7ff      	b.n	8c46 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    8c46:	9806      	ldr	r0, [sp, #24]
    8c48:	f7ff ff14 	bl	8a74 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    8c4c:	9005      	str	r0, [sp, #20]
    8c4e:	e004      	b.n	8c5a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    8c50:	2000      	movs	r0, #0
    8c52:	9012      	str	r0, [sp, #72]	; 0x48
    8c54:	2001      	movs	r0, #1
    8c56:	9012      	str	r0, [sp, #72]	; 0x48
    8c58:	e002      	b.n	8c60 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8c5a:	9805      	ldr	r0, [sp, #20]
    8c5c:	9012      	str	r0, [sp, #72]	; 0x48
    8c5e:	e7ff      	b.n	8c60 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    8c60:	9812      	ldr	r0, [sp, #72]	; 0x48
    8c62:	b01c      	add	sp, #112	; 0x70
    8c64:	bd70      	pop	{r4, r5, r6, pc}

00008c66 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    8c66:	b081      	sub	sp, #4
    8c68:	9000      	str	r0, [sp, #0]
    8c6a:	b001      	add	sp, #4
    8c6c:	4770      	bx	lr

00008c6e <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    8c6e:	b081      	sub	sp, #4
    8c70:	9000      	str	r0, [sp, #0]
    8c72:	b001      	add	sp, #4
    8c74:	4770      	bx	lr

00008c76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    8c76:	b5b0      	push	{r4, r5, r7, lr}
    8c78:	b0b8      	sub	sp, #224	; 0xe0
    8c7a:	902f      	str	r0, [sp, #188]	; 0xbc
    8c7c:	9130      	str	r1, [sp, #192]	; 0xc0
    8c7e:	9231      	str	r2, [sp, #196]	; 0xc4
    8c80:	9332      	str	r3, [sp, #200]	; 0xc8
    8c82:	9013      	str	r0, [sp, #76]	; 0x4c
    8c84:	9112      	str	r1, [sp, #72]	; 0x48
    8c86:	9311      	str	r3, [sp, #68]	; 0x44
    8c88:	9210      	str	r2, [sp, #64]	; 0x40
    8c8a:	f008 fdb2 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c8e:	9016      	str	r0, [sp, #88]	; 0x58
    8c90:	e7ff      	b.n	8c92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    8c92:	9810      	ldr	r0, [sp, #64]	; 0x40
    8c94:	9911      	ldr	r1, [sp, #68]	; 0x44
    8c96:	f008 fdac 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8c9a:	9017      	str	r0, [sp, #92]	; 0x5c
    8c9c:	e7ff      	b.n	8c9e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    8c9e:	a816      	add	r0, sp, #88	; 0x58
    8ca0:	9014      	str	r0, [sp, #80]	; 0x50
    8ca2:	a817      	add	r0, sp, #92	; 0x5c
    8ca4:	9015      	str	r0, [sp, #84]	; 0x54
    8ca6:	9814      	ldr	r0, [sp, #80]	; 0x50
    8ca8:	9033      	str	r0, [sp, #204]	; 0xcc
    8caa:	9915      	ldr	r1, [sp, #84]	; 0x54
    8cac:	9134      	str	r1, [sp, #208]	; 0xd0
    8cae:	6802      	ldr	r2, [r0, #0]
    8cb0:	680b      	ldr	r3, [r1, #0]
    8cb2:	429a      	cmp	r2, r3
    8cb4:	900f      	str	r0, [sp, #60]	; 0x3c
    8cb6:	910e      	str	r1, [sp, #56]	; 0x38
    8cb8:	d106      	bne.n	8cc8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    8cba:	e7ff      	b.n	8cbc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    8cbc:	9810      	ldr	r0, [sp, #64]	; 0x40
    8cbe:	9911      	ldr	r1, [sp, #68]	; 0x44
    8cc0:	f008 fd9f 	bl	11802 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    8cc4:	900d      	str	r0, [sp, #52]	; 0x34
    8cc6:	e072      	b.n	8dae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    8cc8:	f64b 10e4 	movw	r0, #47588	; 0xb9e4
    8ccc:	f2c0 0001 	movt	r0, #1
    8cd0:	6801      	ldr	r1, [r0, #0]
    8cd2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8cd4:	9027      	str	r0, [sp, #156]	; 0x9c
    8cd6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    8cd8:	9228      	str	r2, [sp, #160]	; 0xa0
    8cda:	f64b 2324 	movw	r3, #47652	; 0xba24
    8cde:	f2c0 0301 	movt	r3, #1
    8ce2:	681b      	ldr	r3, [r3, #0]
    8ce4:	f64b 2c28 	movw	ip, #47656	; 0xba28
    8ce8:	f2c0 0c01 	movt	ip, #1
    8cec:	f8dc c000 	ldr.w	ip, [ip]
    8cf0:	46ee      	mov	lr, sp
    8cf2:	2400      	movs	r4, #0
    8cf4:	f8ce 4000 	str.w	r4, [lr]
    8cf8:	a829      	add	r0, sp, #164	; 0xa4
    8cfa:	2201      	movs	r2, #1
    8cfc:	910c      	str	r1, [sp, #48]	; 0x30
    8cfe:	4619      	mov	r1, r3
    8d00:	4663      	mov	r3, ip
    8d02:	f7ff fecb 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8d06:	e7ff      	b.n	8d08 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    8d08:	a827      	add	r0, sp, #156	; 0x9c
    8d0a:	9024      	str	r0, [sp, #144]	; 0x90
    8d0c:	a828      	add	r0, sp, #160	; 0xa0
    8d0e:	9025      	str	r0, [sp, #148]	; 0x94
    8d10:	a829      	add	r0, sp, #164	; 0xa4
    8d12:	9026      	str	r0, [sp, #152]	; 0x98
    8d14:	9824      	ldr	r0, [sp, #144]	; 0x90
    8d16:	9035      	str	r0, [sp, #212]	; 0xd4
    8d18:	9925      	ldr	r1, [sp, #148]	; 0x94
    8d1a:	9136      	str	r1, [sp, #216]	; 0xd8
    8d1c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8d1e:	9237      	str	r2, [sp, #220]	; 0xdc
    8d20:	f641 7321 	movw	r3, #7969	; 0x1f21
    8d24:	f2c0 0301 	movt	r3, #1
    8d28:	910b      	str	r1, [sp, #44]	; 0x2c
    8d2a:	4619      	mov	r1, r3
    8d2c:	920a      	str	r2, [sp, #40]	; 0x28
    8d2e:	f009 f905 	bl	11f3c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8d32:	9009      	str	r0, [sp, #36]	; 0x24
    8d34:	9108      	str	r1, [sp, #32]
    8d36:	e7ff      	b.n	8d38 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    8d38:	f641 7121 	movw	r1, #7969	; 0x1f21
    8d3c:	f2c0 0101 	movt	r1, #1
    8d40:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8d42:	f009 f8fb 	bl	11f3c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    8d46:	9007      	str	r0, [sp, #28]
    8d48:	9106      	str	r1, [sp, #24]
    8d4a:	e7ff      	b.n	8d4c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    8d4c:	f245 712b 	movw	r1, #22315	; 0x572b
    8d50:	f2c0 0101 	movt	r1, #1
    8d54:	980a      	ldr	r0, [sp, #40]	; 0x28
    8d56:	f000 fa79 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    8d5a:	9005      	str	r0, [sp, #20]
    8d5c:	9104      	str	r1, [sp, #16]
    8d5e:	e7ff      	b.n	8d60 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    8d60:	9809      	ldr	r0, [sp, #36]	; 0x24
    8d62:	901e      	str	r0, [sp, #120]	; 0x78
    8d64:	9908      	ldr	r1, [sp, #32]
    8d66:	911f      	str	r1, [sp, #124]	; 0x7c
    8d68:	9a07      	ldr	r2, [sp, #28]
    8d6a:	9220      	str	r2, [sp, #128]	; 0x80
    8d6c:	9b06      	ldr	r3, [sp, #24]
    8d6e:	9321      	str	r3, [sp, #132]	; 0x84
    8d70:	f8dd c014 	ldr.w	ip, [sp, #20]
    8d74:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    8d78:	f8dd e010 	ldr.w	lr, [sp, #16]
    8d7c:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    8d80:	466c      	mov	r4, sp
    8d82:	2503      	movs	r5, #3
    8d84:	6025      	str	r5, [r4, #0]
    8d86:	a818      	add	r0, sp, #96	; 0x60
    8d88:	ab1e      	add	r3, sp, #120	; 0x78
    8d8a:	990c      	ldr	r1, [sp, #48]	; 0x30
    8d8c:	462a      	mov	r2, r5
    8d8e:	f7ff fe85 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    8d92:	e7ff      	b.n	8d94 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    8d94:	f64b 2078 	movw	r0, #47736	; 0xba78
    8d98:	f2c0 0001 	movt	r0, #1
    8d9c:	f00c f9d7 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8da0:	9003      	str	r0, [sp, #12]
    8da2:	e7ff      	b.n	8da4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    8da4:	a818      	add	r0, sp, #96	; 0x60
    8da6:	9903      	ldr	r1, [sp, #12]
    8da8:	f00c fa0e 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8dac:	defe      	udf	#254	; 0xfe
    8dae:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8db0:	9912      	ldr	r1, [sp, #72]	; 0x48
    8db2:	f008 fd07 	bl	117c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    8db6:	9002      	str	r0, [sp, #8]
    8db8:	e7ff      	b.n	8dba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    8dba:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    8dbe:	f008 fd18 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8dc2:	9001      	str	r0, [sp, #4]
    8dc4:	e7ff      	b.n	8dc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    8dc6:	980d      	ldr	r0, [sp, #52]	; 0x34
    8dc8:	9902      	ldr	r1, [sp, #8]
    8dca:	9a01      	ldr	r2, [sp, #4]
    8dcc:	f008 fb1d 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    8dd0:	e7ff      	b.n	8dd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    8dd2:	b038      	add	sp, #224	; 0xe0
    8dd4:	bdb0      	pop	{r4, r5, r7, pc}

00008dd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    8dd6:	b580      	push	{r7, lr}
    8dd8:	b086      	sub	sp, #24
    8dda:	9003      	str	r0, [sp, #12]
    8ddc:	9104      	str	r1, [sp, #16]
    8dde:	9205      	str	r2, [sp, #20]
    8de0:	9002      	str	r0, [sp, #8]
    8de2:	4610      	mov	r0, r2
    8de4:	9a02      	ldr	r2, [sp, #8]
    8de6:	9101      	str	r1, [sp, #4]
    8de8:	4611      	mov	r1, r2
    8dea:	9a01      	ldr	r2, [sp, #4]
    8dec:	f000 f848 	bl	8e80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    8df0:	9000      	str	r0, [sp, #0]
    8df2:	e7ff      	b.n	8df4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    8df4:	9800      	ldr	r0, [sp, #0]
    8df6:	b006      	add	sp, #24
    8df8:	bd80      	pop	{r7, pc}

00008dfa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    8dfa:	b580      	push	{r7, lr}
    8dfc:	b08e      	sub	sp, #56	; 0x38
    8dfe:	9009      	str	r0, [sp, #36]	; 0x24
    8e00:	910a      	str	r1, [sp, #40]	; 0x28
    8e02:	9005      	str	r0, [sp, #20]
    8e04:	9104      	str	r1, [sp, #16]
    8e06:	f008 fcf4 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e0a:	9003      	str	r0, [sp, #12]
    8e0c:	e7ff      	b.n	8e0e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    8e0e:	2101      	movs	r1, #1
    8e10:	9803      	ldr	r0, [sp, #12]
    8e12:	f000 fa30 	bl	9276 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    8e16:	9002      	str	r0, [sp, #8]
    8e18:	9101      	str	r1, [sp, #4]
    8e1a:	e7ff      	b.n	8e1c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    8e1c:	9802      	ldr	r0, [sp, #8]
    8e1e:	9901      	ldr	r1, [sp, #4]
    8e20:	f000 f94e 	bl	90c0 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    8e24:	9108      	str	r1, [sp, #32]
    8e26:	9007      	str	r0, [sp, #28]
    8e28:	e7ff      	b.n	8e2a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    8e2a:	9807      	ldr	r0, [sp, #28]
    8e2c:	2800      	cmp	r0, #0
    8e2e:	d001      	beq.n	8e34 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    8e30:	e7ff      	b.n	8e32 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    8e32:	e00c      	b.n	8e4e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    8e34:	9808      	ldr	r0, [sp, #32]
    8e36:	900c      	str	r0, [sp, #48]	; 0x30
    8e38:	900d      	str	r0, [sp, #52]	; 0x34
    8e3a:	9905      	ldr	r1, [sp, #20]
    8e3c:	9000      	str	r0, [sp, #0]
    8e3e:	4608      	mov	r0, r1
    8e40:	9904      	ldr	r1, [sp, #16]
    8e42:	9a00      	ldr	r2, [sp, #0]
    8e44:	f7ff ffc7 	bl	8dd6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    8e48:	9006      	str	r0, [sp, #24]
    8e4a:	e00b      	b.n	8e64 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    8e4c:	defe      	udf	#254	; 0xfe
    8e4e:	f008 f9c8 	bl	111e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    8e52:	e002      	b.n	8e5a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    8e54:	9806      	ldr	r0, [sp, #24]
    8e56:	b00e      	add	sp, #56	; 0x38
    8e58:	bd80      	pop	{r7, pc}
    8e5a:	f000 f92b 	bl	90b4 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    8e5e:	9006      	str	r0, [sp, #24]
    8e60:	e7ff      	b.n	8e62 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    8e62:	e7f7      	b.n	8e54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    8e64:	e7f6      	b.n	8e54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

00008e66 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    8e66:	b580      	push	{r7, lr}
    8e68:	b084      	sub	sp, #16
    8e6a:	9002      	str	r0, [sp, #8]
    8e6c:	9103      	str	r1, [sp, #12]
    8e6e:	f008 f975 	bl	1115c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    8e72:	9001      	str	r0, [sp, #4]
    8e74:	9100      	str	r1, [sp, #0]
    8e76:	e7ff      	b.n	8e78 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    8e78:	9801      	ldr	r0, [sp, #4]
    8e7a:	9900      	ldr	r1, [sp, #0]
    8e7c:	b004      	add	sp, #16
    8e7e:	bd80      	pop	{r7, pc}

00008e80 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    8e80:	b580      	push	{r7, lr}
    8e82:	b08a      	sub	sp, #40	; 0x28
    8e84:	9007      	str	r0, [sp, #28]
    8e86:	9108      	str	r1, [sp, #32]
    8e88:	9209      	str	r2, [sp, #36]	; 0x24
    8e8a:	9005      	str	r0, [sp, #20]
    8e8c:	4608      	mov	r0, r1
    8e8e:	9104      	str	r1, [sp, #16]
    8e90:	4611      	mov	r1, r2
    8e92:	9203      	str	r2, [sp, #12]
    8e94:	f008 fcad 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8e98:	9002      	str	r0, [sp, #8]
    8e9a:	e7ff      	b.n	8e9c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    8e9c:	9805      	ldr	r0, [sp, #20]
    8e9e:	9902      	ldr	r1, [sp, #8]
    8ea0:	4288      	cmp	r0, r1
    8ea2:	d303      	bcc.n	8eac <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    8ea4:	e7ff      	b.n	8ea6 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    8ea6:	2000      	movs	r0, #0
    8ea8:	9006      	str	r0, [sp, #24]
    8eaa:	e009      	b.n	8ec0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8eac:	9805      	ldr	r0, [sp, #20]
    8eae:	9904      	ldr	r1, [sp, #16]
    8eb0:	9a03      	ldr	r2, [sp, #12]
    8eb2:	f008 fcca 	bl	1184a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    8eb6:	9001      	str	r0, [sp, #4]
    8eb8:	e7ff      	b.n	8eba <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    8eba:	9801      	ldr	r0, [sp, #4]
    8ebc:	9006      	str	r0, [sp, #24]
    8ebe:	e7ff      	b.n	8ec0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    8ec0:	9806      	ldr	r0, [sp, #24]
    8ec2:	b00a      	add	sp, #40	; 0x28
    8ec4:	bd80      	pop	{r7, pc}

00008ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    8ec6:	b580      	push	{r7, lr}
    8ec8:	b08a      	sub	sp, #40	; 0x28
    8eca:	9004      	str	r0, [sp, #16]
    8ecc:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    8ece:	9003      	str	r0, [sp, #12]
    8ed0:	9102      	str	r1, [sp, #8]
    8ed2:	f000 f859 	bl	8f88 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    8ed6:	4601      	mov	r1, r0
    8ed8:	9006      	str	r0, [sp, #24]
    8eda:	9101      	str	r1, [sp, #4]
    8edc:	e7ff      	b.n	8ede <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    8ede:	9803      	ldr	r0, [sp, #12]
    8ee0:	9902      	ldr	r1, [sp, #8]
    8ee2:	f000 f83b 	bl	8f5c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    8ee6:	9000      	str	r0, [sp, #0]
    8ee8:	e7ff      	b.n	8eea <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    8eea:	9800      	ldr	r0, [sp, #0]
    8eec:	9007      	str	r0, [sp, #28]
    8eee:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    8ef0:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    8ef2:	4608      	mov	r0, r1
    8ef4:	f000 f809 	bl	8f0a <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    8ef8:	9009      	str	r0, [sp, #36]	; 0x24
    8efa:	e7ff      	b.n	8efc <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    8efc:	9801      	ldr	r0, [sp, #4]
    8efe:	9900      	ldr	r1, [sp, #0]
    8f00:	f00d fffc 	bl	16efc <console_buffer>
    8f04:	e7ff      	b.n	8f06 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    8f06:	b00a      	add	sp, #40	; 0x28
    8f08:	bd80      	pop	{r7, pc}

00008f0a <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    8f0a:	b081      	sub	sp, #4
    8f0c:	9000      	str	r0, [sp, #0]
    8f0e:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    8f10:	b001      	add	sp, #4
    8f12:	4770      	bx	lr

00008f14 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    8f14:	b580      	push	{r7, lr}
    8f16:	b086      	sub	sp, #24
    8f18:	9004      	str	r0, [sp, #16]
    8f1a:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    8f1c:	9003      	str	r0, [sp, #12]
    8f1e:	9102      	str	r1, [sp, #8]
    8f20:	f000 f832 	bl	8f88 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    8f24:	9001      	str	r0, [sp, #4]
    8f26:	e7ff      	b.n	8f28 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    8f28:	9803      	ldr	r0, [sp, #12]
    8f2a:	9902      	ldr	r1, [sp, #8]
    8f2c:	f000 f816 	bl	8f5c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    8f30:	9000      	str	r0, [sp, #0]
    8f32:	e7ff      	b.n	8f34 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    8f34:	9801      	ldr	r0, [sp, #4]
    8f36:	9900      	ldr	r1, [sp, #0]
    8f38:	f00d ffe0 	bl	16efc <console_buffer>
    8f3c:	e7ff      	b.n	8f3e <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    8f3e:	b006      	add	sp, #24
    8f40:	bd80      	pop	{r7, pc}

00008f42 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    8f42:	b580      	push	{r7, lr}
    8f44:	b082      	sub	sp, #8
    8f46:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    8f48:	f00e f848 	bl	16fdc <console_printint>
    8f4c:	e7ff      	b.n	8f4e <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    8f4e:	b002      	add	sp, #8
    8f50:	bd80      	pop	{r7, pc}

00008f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    8f52:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    8f54:	f00d ffaa 	bl	16eac <console_flush>
    8f58:	e7ff      	b.n	8f5a <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    8f5a:	bd80      	pop	{r7, pc}

00008f5c <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b08a      	sub	sp, #40	; 0x28
    8f60:	9004      	str	r0, [sp, #16]
    8f62:	9105      	str	r1, [sp, #20]
    8f64:	9008      	str	r0, [sp, #32]
    8f66:	9109      	str	r1, [sp, #36]	; 0x24
    8f68:	9006      	str	r0, [sp, #24]
    8f6a:	9107      	str	r1, [sp, #28]
    8f6c:	9806      	ldr	r0, [sp, #24]
    8f6e:	9907      	ldr	r1, [sp, #28]
    8f70:	9003      	str	r0, [sp, #12]
    8f72:	9102      	str	r1, [sp, #8]
    8f74:	e7ff      	b.n	8f76 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    8f76:	9803      	ldr	r0, [sp, #12]
    8f78:	9902      	ldr	r1, [sp, #8]
    8f7a:	f008 fc3a 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    8f7e:	9001      	str	r0, [sp, #4]
    8f80:	e7ff      	b.n	8f82 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    8f82:	9801      	ldr	r0, [sp, #4]
    8f84:	b00a      	add	sp, #40	; 0x28
    8f86:	bd80      	pop	{r7, pc}

00008f88 <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    8f88:	b082      	sub	sp, #8
    8f8a:	9000      	str	r0, [sp, #0]
    8f8c:	9101      	str	r1, [sp, #4]
    8f8e:	b002      	add	sp, #8
    8f90:	4770      	bx	lr

00008f92 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    8f92:	b580      	push	{r7, lr}
    8f94:	b084      	sub	sp, #16
    8f96:	9002      	str	r0, [sp, #8]
    8f98:	9103      	str	r1, [sp, #12]
    8f9a:	6800      	ldr	r0, [r0, #0]
    8f9c:	f000 f845 	bl	902a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    8fa0:	9001      	str	r0, [sp, #4]
    8fa2:	e7ff      	b.n	8fa4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    8fa4:	9801      	ldr	r0, [sp, #4]
    8fa6:	f000 0001 	and.w	r0, r0, #1
    8faa:	b004      	add	sp, #16
    8fac:	bd80      	pop	{r7, pc}

00008fae <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    8fae:	b087      	sub	sp, #28
    8fb0:	9000      	str	r0, [sp, #0]
    8fb2:	9101      	str	r1, [sp, #4]
    8fb4:	2000      	movs	r0, #0
    8fb6:	f88d 0013 	strb.w	r0, [sp, #19]
    8fba:	f88d 0012 	strb.w	r0, [sp, #18]
    8fbe:	2001      	movs	r0, #1
    8fc0:	f88d 0013 	strb.w	r0, [sp, #19]
    8fc4:	f88d 0012 	strb.w	r0, [sp, #18]
    8fc8:	9800      	ldr	r0, [sp, #0]
    8fca:	2800      	cmp	r0, #0
    8fcc:	d001      	beq.n	8fd2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    8fce:	e7ff      	b.n	8fd0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    8fd0:	e006      	b.n	8fe0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    8fd2:	2000      	movs	r0, #0
    8fd4:	f88d 0012 	strb.w	r0, [sp, #18]
    8fd8:	2001      	movs	r0, #1
    8fda:	9002      	str	r0, [sp, #8]
    8fdc:	e008      	b.n	8ff0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    8fde:	defe      	udf	#254	; 0xfe
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 0013 	strb.w	r0, [sp, #19]
    8fe6:	9901      	ldr	r1, [sp, #4]
    8fe8:	9106      	str	r1, [sp, #24]
    8fea:	9103      	str	r1, [sp, #12]
    8fec:	9002      	str	r0, [sp, #8]
    8fee:	e7ff      	b.n	8ff0 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    8ff0:	f89d 0012 	ldrb.w	r0, [sp, #18]
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d104      	bne.n	9004 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    8ffa:	e7ff      	b.n	8ffc <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    8ffc:	9800      	ldr	r0, [sp, #0]
    8ffe:	2801      	cmp	r0, #1
    9000:	d008      	beq.n	9014 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    9002:	e011      	b.n	9028 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    9004:	2000      	movs	r0, #0
    9006:	f88d 0012 	strb.w	r0, [sp, #18]
    900a:	e7f7      	b.n	8ffc <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    900c:	9802      	ldr	r0, [sp, #8]
    900e:	9903      	ldr	r1, [sp, #12]
    9010:	b007      	add	sp, #28
    9012:	4770      	bx	lr
    9014:	f89d 0013 	ldrb.w	r0, [sp, #19]
    9018:	07c0      	lsls	r0, r0, #31
    901a:	2800      	cmp	r0, #0
    901c:	d0f6      	beq.n	900c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    901e:	e7ff      	b.n	9020 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    9020:	2000      	movs	r0, #0
    9022:	f88d 0013 	strb.w	r0, [sp, #19]
    9026:	e7f1      	b.n	900c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    9028:	e7f0      	b.n	900c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000902a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    902a:	b580      	push	{r7, lr}
    902c:	b08e      	sub	sp, #56	; 0x38
    902e:	900b      	str	r0, [sp, #44]	; 0x2c
    9030:	910c      	str	r1, [sp, #48]	; 0x30
    9032:	9003      	str	r0, [sp, #12]
    9034:	9803      	ldr	r0, [sp, #12]
    9036:	6800      	ldr	r0, [r0, #0]
    9038:	2800      	cmp	r0, #0
    903a:	4602      	mov	r2, r0
    903c:	bf18      	it	ne
    903e:	2201      	movne	r2, #1
    9040:	2800      	cmp	r0, #0
    9042:	9101      	str	r1, [sp, #4]
    9044:	d00f      	beq.n	9066 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    9046:	e7ff      	b.n	9048 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    9048:	9803      	ldr	r0, [sp, #12]
    904a:	900d      	str	r0, [sp, #52]	; 0x34
    904c:	f64b 2288 	movw	r2, #47752	; 0xba88
    9050:	f2c0 0201 	movt	r2, #1
    9054:	a907      	add	r1, sp, #28
    9056:	2304      	movs	r3, #4
    9058:	9000      	str	r0, [sp, #0]
    905a:	4608      	mov	r0, r1
    905c:	9901      	ldr	r1, [sp, #4]
    905e:	f00c ff26 	bl	15eae <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    9062:	e011      	b.n	9088 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    9064:	defe      	udf	#254	; 0xfe
    9066:	f64b 228c 	movw	r2, #47756	; 0xba8c
    906a:	f2c0 0201 	movt	r2, #1
    906e:	a804      	add	r0, sp, #16
    9070:	2304      	movs	r3, #4
    9072:	9901      	ldr	r1, [sp, #4]
    9074:	f00c ff1b 	bl	15eae <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    9078:	e7ff      	b.n	907a <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    907a:	a804      	add	r0, sp, #16
    907c:	f00c fa34 	bl	154e8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    9080:	f88d 000b 	strb.w	r0, [sp, #11]
    9084:	e7ff      	b.n	9086 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    9086:	e011      	b.n	90ac <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    9088:	9800      	ldr	r0, [sp, #0]
    908a:	900a      	str	r0, [sp, #40]	; 0x28
    908c:	f64b 2290 	movw	r2, #47760	; 0xba90
    9090:	f2c0 0201 	movt	r2, #1
    9094:	a807      	add	r0, sp, #28
    9096:	a90a      	add	r1, sp, #40	; 0x28
    9098:	f00c f9bd 	bl	15416 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    909c:	e7ff      	b.n	909e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    909e:	a807      	add	r0, sp, #28
    90a0:	f00c fa22 	bl	154e8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    90a4:	f88d 000b 	strb.w	r0, [sp, #11]
    90a8:	e7ff      	b.n	90aa <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    90aa:	e7ff      	b.n	90ac <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    90ac:	f89d 000b 	ldrb.w	r0, [sp, #11]
    90b0:	b00e      	add	sp, #56	; 0x38
    90b2:	bd80      	pop	{r7, pc}

000090b4 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    90b4:	b082      	sub	sp, #8
    90b6:	2000      	movs	r0, #0
    90b8:	9000      	str	r0, [sp, #0]
    90ba:	9800      	ldr	r0, [sp, #0]
    90bc:	b002      	add	sp, #8
    90be:	4770      	bx	lr

000090c0 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    90c0:	b580      	push	{r7, lr}
    90c2:	b084      	sub	sp, #16
    90c4:	9002      	str	r0, [sp, #8]
    90c6:	9103      	str	r1, [sp, #12]
    90c8:	f7ff ff71 	bl	8fae <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    90cc:	9001      	str	r0, [sp, #4]
    90ce:	9100      	str	r1, [sp, #0]
    90d0:	e7ff      	b.n	90d2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    90d2:	9801      	ldr	r0, [sp, #4]
    90d4:	9900      	ldr	r1, [sp, #0]
    90d6:	b004      	add	sp, #16
    90d8:	bd80      	pop	{r7, pc}

000090da <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    90da:	b580      	push	{r7, lr}
    90dc:	b094      	sub	sp, #80	; 0x50
    90de:	9008      	str	r0, [sp, #32]
    90e0:	9109      	str	r1, [sp, #36]	; 0x24
    90e2:	6802      	ldr	r2, [r0, #0]
    90e4:	2a00      	cmp	r2, #0
    90e6:	bf18      	it	ne
    90e8:	2201      	movne	r2, #1
    90ea:	f04f 0300 	mov.w	r3, #0
    90ee:	930b      	str	r3, [sp, #44]	; 0x2c
    90f0:	920a      	str	r2, [sp, #40]	; 0x28
    90f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    90f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    90f6:	9104      	str	r1, [sp, #16]
    90f8:	9003      	str	r0, [sp, #12]
    90fa:	9202      	str	r2, [sp, #8]
    90fc:	e7ff      	b.n	90fe <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    90fe:	9802      	ldr	r0, [sp, #8]
    9100:	9902      	ldr	r1, [sp, #8]
    9102:	910d      	str	r1, [sp, #52]	; 0x34
    9104:	9a04      	ldr	r2, [sp, #16]
    9106:	6813      	ldr	r3, [r2, #0]
    9108:	2b00      	cmp	r3, #0
    910a:	bf18      	it	ne
    910c:	2301      	movne	r3, #1
    910e:	f04f 0c00 	mov.w	ip, #0
    9112:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    9116:	930e      	str	r3, [sp, #56]	; 0x38
    9118:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    911a:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    911e:	9001      	str	r0, [sp, #4]
    9120:	9300      	str	r3, [sp, #0]
    9122:	e7ff      	b.n	9124 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    9124:	9800      	ldr	r0, [sp, #0]
    9126:	9011      	str	r0, [sp, #68]	; 0x44
    9128:	9901      	ldr	r1, [sp, #4]
    912a:	4281      	cmp	r1, r0
    912c:	d104      	bne.n	9138 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    912e:	e7ff      	b.n	9130 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    9130:	2001      	movs	r0, #1
    9132:	f88d 0017 	strb.w	r0, [sp, #23]
    9136:	e003      	b.n	9140 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9138:	2000      	movs	r0, #0
    913a:	f88d 0017 	strb.w	r0, [sp, #23]
    913e:	e7ff      	b.n	9140 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    9140:	f89d 0017 	ldrb.w	r0, [sp, #23]
    9144:	07c0      	lsls	r0, r0, #31
    9146:	2800      	cmp	r0, #0
    9148:	d104      	bne.n	9154 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    914a:	e7ff      	b.n	914c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    914c:	2000      	movs	r0, #0
    914e:	f88d 0016 	strb.w	r0, [sp, #22]
    9152:	e01c      	b.n	918e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    9154:	9803      	ldr	r0, [sp, #12]
    9156:	9006      	str	r0, [sp, #24]
    9158:	9904      	ldr	r1, [sp, #16]
    915a:	9107      	str	r1, [sp, #28]
    915c:	9a06      	ldr	r2, [sp, #24]
    915e:	6812      	ldr	r2, [r2, #0]
    9160:	2a00      	cmp	r2, #0
    9162:	d104      	bne.n	916e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    9164:	e7ff      	b.n	9166 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9166:	2001      	movs	r0, #1
    9168:	f88d 0016 	strb.w	r0, [sp, #22]
    916c:	e00e      	b.n	918c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    916e:	9807      	ldr	r0, [sp, #28]
    9170:	6800      	ldr	r0, [r0, #0]
    9172:	2800      	cmp	r0, #0
    9174:	d0f7      	beq.n	9166 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    9176:	e7ff      	b.n	9178 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    9178:	9806      	ldr	r0, [sp, #24]
    917a:	9012      	str	r0, [sp, #72]	; 0x48
    917c:	9907      	ldr	r1, [sp, #28]
    917e:	9113      	str	r1, [sp, #76]	; 0x4c
    9180:	f008 fffd 	bl	1217e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    9184:	f88d 0016 	strb.w	r0, [sp, #22]
    9188:	e7ff      	b.n	918a <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    918a:	e7ff      	b.n	918c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    918c:	e7ff      	b.n	918e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    918e:	f89d 0016 	ldrb.w	r0, [sp, #22]
    9192:	b014      	add	sp, #80	; 0x50
    9194:	bd80      	pop	{r7, pc}

00009196 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    9196:	b580      	push	{r7, lr}
    9198:	b084      	sub	sp, #16
    919a:	9002      	str	r0, [sp, #8]
    919c:	9103      	str	r1, [sp, #12]
    919e:	6800      	ldr	r0, [r0, #0]
    91a0:	f008 ffb6 	bl	12110 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    91a4:	9001      	str	r0, [sp, #4]
    91a6:	e7ff      	b.n	91a8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    91a8:	9801      	ldr	r0, [sp, #4]
    91aa:	f000 0001 	and.w	r0, r0, #1
    91ae:	b004      	add	sp, #16
    91b0:	bd80      	pop	{r7, pc}

000091b2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    91b2:	b580      	push	{r7, lr}
    91b4:	b084      	sub	sp, #16
    91b6:	9002      	str	r0, [sp, #8]
    91b8:	9103      	str	r1, [sp, #12]
    91ba:	6800      	ldr	r0, [r0, #0]
    91bc:	f007 fe59 	bl	10e72 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2c0667b2b5cae01eE>
    91c0:	9001      	str	r0, [sp, #4]
    91c2:	e7ff      	b.n	91c4 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    91c4:	9801      	ldr	r0, [sp, #4]
    91c6:	f000 0001 	and.w	r0, r0, #1
    91ca:	b004      	add	sp, #16
    91cc:	bd80      	pop	{r7, pc}

000091ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
    91ce:	b089      	sub	sp, #36	; 0x24
    91d0:	9005      	str	r0, [sp, #20]
    91d2:	9106      	str	r1, [sp, #24]
    91d4:	9107      	str	r1, [sp, #28]
    91d6:	9907      	ldr	r1, [sp, #28]
    91d8:	9002      	str	r0, [sp, #8]
    91da:	9101      	str	r1, [sp, #4]
    91dc:	e7ff      	b.n	91de <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
    91de:	9802      	ldr	r0, [sp, #8]
    91e0:	9008      	str	r0, [sp, #32]
    91e2:	9908      	ldr	r1, [sp, #32]
    91e4:	9100      	str	r1, [sp, #0]
    91e6:	e7ff      	b.n	91e8 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
    91e8:	9800      	ldr	r0, [sp, #0]
    91ea:	9003      	str	r0, [sp, #12]
    91ec:	9901      	ldr	r1, [sp, #4]
    91ee:	9104      	str	r1, [sp, #16]
    91f0:	9803      	ldr	r0, [sp, #12]
    91f2:	9904      	ldr	r1, [sp, #16]
    91f4:	b009      	add	sp, #36	; 0x24
    91f6:	4770      	bx	lr

000091f8 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
    91f8:	b089      	sub	sp, #36	; 0x24
    91fa:	9005      	str	r0, [sp, #20]
    91fc:	9106      	str	r1, [sp, #24]
    91fe:	9107      	str	r1, [sp, #28]
    9200:	9907      	ldr	r1, [sp, #28]
    9202:	9002      	str	r0, [sp, #8]
    9204:	9101      	str	r1, [sp, #4]
    9206:	e7ff      	b.n	9208 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
    9208:	9802      	ldr	r0, [sp, #8]
    920a:	9008      	str	r0, [sp, #32]
    920c:	9908      	ldr	r1, [sp, #32]
    920e:	9100      	str	r1, [sp, #0]
    9210:	e7ff      	b.n	9212 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
    9212:	9800      	ldr	r0, [sp, #0]
    9214:	9003      	str	r0, [sp, #12]
    9216:	9901      	ldr	r1, [sp, #4]
    9218:	9104      	str	r1, [sp, #16]
    921a:	9803      	ldr	r0, [sp, #12]
    921c:	9904      	ldr	r1, [sp, #16]
    921e:	b009      	add	sp, #36	; 0x24
    9220:	4770      	bx	lr

00009222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
    9222:	b089      	sub	sp, #36	; 0x24
    9224:	9005      	str	r0, [sp, #20]
    9226:	9106      	str	r1, [sp, #24]
    9228:	9107      	str	r1, [sp, #28]
    922a:	9907      	ldr	r1, [sp, #28]
    922c:	9002      	str	r0, [sp, #8]
    922e:	9101      	str	r1, [sp, #4]
    9230:	e7ff      	b.n	9232 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
    9232:	9802      	ldr	r0, [sp, #8]
    9234:	9008      	str	r0, [sp, #32]
    9236:	9908      	ldr	r1, [sp, #32]
    9238:	9100      	str	r1, [sp, #0]
    923a:	e7ff      	b.n	923c <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
    923c:	9800      	ldr	r0, [sp, #0]
    923e:	9003      	str	r0, [sp, #12]
    9240:	9901      	ldr	r1, [sp, #4]
    9242:	9104      	str	r1, [sp, #16]
    9244:	9803      	ldr	r0, [sp, #12]
    9246:	9904      	ldr	r1, [sp, #16]
    9248:	b009      	add	sp, #36	; 0x24
    924a:	4770      	bx	lr

0000924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
    924c:	b089      	sub	sp, #36	; 0x24
    924e:	9005      	str	r0, [sp, #20]
    9250:	9106      	str	r1, [sp, #24]
    9252:	9107      	str	r1, [sp, #28]
    9254:	9907      	ldr	r1, [sp, #28]
    9256:	9002      	str	r0, [sp, #8]
    9258:	9101      	str	r1, [sp, #4]
    925a:	e7ff      	b.n	925c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
    925c:	9802      	ldr	r0, [sp, #8]
    925e:	9008      	str	r0, [sp, #32]
    9260:	9908      	ldr	r1, [sp, #32]
    9262:	9100      	str	r1, [sp, #0]
    9264:	e7ff      	b.n	9266 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
    9266:	9800      	ldr	r0, [sp, #0]
    9268:	9003      	str	r0, [sp, #12]
    926a:	9901      	ldr	r1, [sp, #4]
    926c:	9104      	str	r1, [sp, #16]
    926e:	9803      	ldr	r0, [sp, #12]
    9270:	9904      	ldr	r1, [sp, #16]
    9272:	b009      	add	sp, #36	; 0x24
    9274:	4770      	bx	lr

00009276 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
    9276:	b580      	push	{r7, lr}
    9278:	b088      	sub	sp, #32
    927a:	9004      	str	r0, [sp, #16]
    927c:	9105      	str	r1, [sp, #20]
    927e:	f000 f819 	bl	92b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
    9282:	9001      	str	r0, [sp, #4]
    9284:	9100      	str	r1, [sp, #0]
    9286:	e7ff      	b.n	9288 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
    9288:	9801      	ldr	r0, [sp, #4]
    928a:	9006      	str	r0, [sp, #24]
    928c:	9900      	ldr	r1, [sp, #0]
    928e:	f001 0201 	and.w	r2, r1, #1
    9292:	f88d 201f 	strb.w	r2, [sp, #31]
    9296:	2a00      	cmp	r2, #0
    9298:	d105      	bne.n	92a6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
    929a:	e7ff      	b.n	929c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
    929c:	9801      	ldr	r0, [sp, #4]
    929e:	9003      	str	r0, [sp, #12]
    92a0:	2101      	movs	r1, #1
    92a2:	9102      	str	r1, [sp, #8]
    92a4:	e002      	b.n	92ac <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    92a6:	2000      	movs	r0, #0
    92a8:	9002      	str	r0, [sp, #8]
    92aa:	e7ff      	b.n	92ac <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
    92ac:	9802      	ldr	r0, [sp, #8]
    92ae:	9903      	ldr	r1, [sp, #12]
    92b0:	b008      	add	sp, #32
    92b2:	bd80      	pop	{r7, pc}

000092b4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
    92b4:	b08a      	sub	sp, #40	; 0x28
    92b6:	9004      	str	r0, [sp, #16]
    92b8:	9105      	str	r1, [sp, #20]
    92ba:	1a40      	subs	r0, r0, r1
    92bc:	f04f 0100 	mov.w	r1, #0
    92c0:	f141 0100 	adc.w	r1, r1, #0
    92c4:	f1c1 0101 	rsb	r1, r1, #1
    92c8:	9006      	str	r0, [sp, #24]
    92ca:	f88d 101c 	strb.w	r1, [sp, #28]
    92ce:	9806      	ldr	r0, [sp, #24]
    92d0:	f89d 101c 	ldrb.w	r1, [sp, #28]
    92d4:	9001      	str	r0, [sp, #4]
    92d6:	9100      	str	r1, [sp, #0]
    92d8:	e7ff      	b.n	92da <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
    92da:	9801      	ldr	r0, [sp, #4]
    92dc:	9008      	str	r0, [sp, #32]
    92de:	9900      	ldr	r1, [sp, #0]
    92e0:	f001 0201 	and.w	r2, r1, #1
    92e4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    92e8:	9002      	str	r0, [sp, #8]
    92ea:	f88d 200c 	strb.w	r2, [sp, #12]
    92ee:	9802      	ldr	r0, [sp, #8]
    92f0:	f89d 100c 	ldrb.w	r1, [sp, #12]
    92f4:	b00a      	add	sp, #40	; 0x28
    92f6:	4770      	bx	lr

000092f8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
    baudrate:   8000,  //  In kHZ. Use SPI at 8MHz (the fastest clock available on the nRF52832) because otherwise refreshing will be super slow.
    word_size:  hal::HAL_SPI_WORD_SIZE_8BIT as u8,
};

/// Initialise the display controller
pub fn start_display() -> MynewtResult<()> {
    92f8:	b5b0      	push	{r4, r5, r7, lr}
    92fa:	b0b2      	sub	sp, #200	; 0xc8
    //  Create SPI port and GPIO pins
    let mut spi_port = mynewt::SPI::new();
    92fc:	f00a fb1a 	bl	13934 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
    9300:	9115      	str	r1, [sp, #84]	; 0x54
    9302:	9014      	str	r0, [sp, #80]	; 0x50
    9304:	e7ff      	b.n	9306 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
    9306:	f00a fcd3 	bl	13cb0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    930a:	9016      	str	r0, [sp, #88]	; 0x58
    930c:	e7ff      	b.n	930e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
    930e:	f00a fccf 	bl	13cb0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    9312:	9017      	str	r0, [sp, #92]	; 0x5c
    9314:	e7ff      	b.n	9316 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>

    //  Init SPI port and GPIO pins
    spi_port.init(
    9316:	f240 03e8 	movw	r3, #232	; 0xe8
    931a:	f2c2 0300 	movt	r3, #8192	; 0x2000
    931e:	a814      	add	r0, sp, #80	; 0x50
    9320:	2100      	movs	r1, #0
    9322:	2219      	movs	r2, #25
    9324:	f00a fb0e 	bl	13944 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
    9328:	9012      	str	r0, [sp, #72]	; 0x48
    932a:	e7ff      	b.n	932c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
    932c:	9812      	ldr	r0, [sp, #72]	; 0x48
    932e:	f7ff fc23 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9332:	9018      	str	r0, [sp, #96]	; 0x60
    9334:	e7ff      	b.n	9336 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
        DISPLAY_SPI, //  Mynewt SPI port 0
        DISPLAY_CS,  //  LCD_CS (P0.25): Chip select
        unsafe { &mut SPI_SETTINGS }
    ) ? ;
    9336:	9818      	ldr	r0, [sp, #96]	; 0x60
    9338:	1e41      	subs	r1, r0, #1
    933a:	bf18      	it	ne
    933c:	2101      	movne	r1, #1
    933e:	2801      	cmp	r0, #1
    9340:	d001      	beq.n	9346 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
    9342:	e7ff      	b.n	9344 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
    9344:	e006      	b.n	9354 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
    9346:	a816      	add	r0, sp, #88	; 0x58
    9348:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    934a:	f00a fcb3 	bl	13cb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    934e:	9011      	str	r0, [sp, #68]	; 0x44
    9350:	e010      	b.n	9374 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
    9352:	defe      	udf	#254	; 0xfe
    ) ? ;
    9354:	9818      	ldr	r0, [sp, #96]	; 0x60
    9356:	902d      	str	r0, [sp, #180]	; 0xb4
    9358:	f008 fed6 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    935c:	9010      	str	r0, [sp, #64]	; 0x40
    935e:	e002      	b.n	9366 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
    unsafe {
        DISPLAY.init(&mut delay) ? ;
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    }
    Ok(())
}
    9360:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9362:	b032      	add	sp, #200	; 0xc8
    9364:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
    9366:	9810      	ldr	r0, [sp, #64]	; 0x40
    9368:	f7ff fbfa 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    936c:	9013      	str	r0, [sp, #76]	; 0x4c
    936e:	e7ff      	b.n	9370 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
    9370:	e7ff      	b.n	9372 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    9372:	e7f5      	b.n	9360 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    9374:	9811      	ldr	r0, [sp, #68]	; 0x44
    9376:	f7ff fbff 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    937a:	9019      	str	r0, [sp, #100]	; 0x64
    937c:	e7ff      	b.n	937e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
    937e:	9819      	ldr	r0, [sp, #100]	; 0x64
    9380:	1e41      	subs	r1, r0, #1
    9382:	bf18      	it	ne
    9384:	2101      	movne	r1, #1
    9386:	2801      	cmp	r0, #1
    9388:	d001      	beq.n	938e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
    938a:	e7ff      	b.n	938c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
    938c:	e006      	b.n	939c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
    938e:	a817      	add	r0, sp, #92	; 0x5c
    9390:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    9392:	f00a fc8f 	bl	13cb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9396:	900f      	str	r0, [sp, #60]	; 0x3c
    9398:	e00c      	b.n	93b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
    939a:	defe      	udf	#254	; 0xfe
    939c:	9819      	ldr	r0, [sp, #100]	; 0x64
    939e:	902e      	str	r0, [sp, #184]	; 0xb8
    93a0:	f008 feb2 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    93a4:	900e      	str	r0, [sp, #56]	; 0x38
    93a6:	e7ff      	b.n	93a8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
    93a8:	980e      	ldr	r0, [sp, #56]	; 0x38
    93aa:	f7ff fbd9 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    93ae:	9013      	str	r0, [sp, #76]	; 0x4c
    93b0:	e7ff      	b.n	93b2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
    93b2:	e7de      	b.n	9372 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    93b4:	980f      	ldr	r0, [sp, #60]	; 0x3c
    93b6:	f7ff fbdf 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    93ba:	901a      	str	r0, [sp, #104]	; 0x68
    93bc:	e7ff      	b.n	93be <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
    93be:	981a      	ldr	r0, [sp, #104]	; 0x68
    93c0:	1e41      	subs	r1, r0, #1
    93c2:	bf18      	it	ne
    93c4:	2101      	movne	r1, #1
    93c6:	2801      	cmp	r0, #1
    93c8:	d001      	beq.n	93ce <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
    93ca:	e7ff      	b.n	93cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
    93cc:	e004      	b.n	93d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    93ce:	f00a fc6f 	bl	13cb0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
    93d2:	900d      	str	r0, [sp, #52]	; 0x34
    93d4:	e00c      	b.n	93f0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
    93d6:	defe      	udf	#254	; 0xfe
    93d8:	981a      	ldr	r0, [sp, #104]	; 0x68
    93da:	902f      	str	r0, [sp, #188]	; 0xbc
    93dc:	f008 fe94 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    93e0:	900c      	str	r0, [sp, #48]	; 0x30
    93e2:	e7ff      	b.n	93e4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
    93e4:	980c      	ldr	r0, [sp, #48]	; 0x30
    93e6:	f7ff fbbb 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    93ea:	9013      	str	r0, [sp, #76]	; 0x4c
    93ec:	e7ff      	b.n	93ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
    93ee:	e7c0      	b.n	9372 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
    93f0:	f240 1060 	movw	r0, #352	; 0x160
    93f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93f8:	990d      	ldr	r1, [sp, #52]	; 0x34
    93fa:	6001      	str	r1, [r0, #0]
    93fc:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    93fe:	f00a fc59 	bl	13cb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    9402:	900b      	str	r0, [sp, #44]	; 0x2c
    9404:	e7ff      	b.n	9406 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
    9406:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9408:	f7ff fbb6 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    940c:	901b      	str	r0, [sp, #108]	; 0x6c
    940e:	e7ff      	b.n	9410 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
    9410:	981b      	ldr	r0, [sp, #108]	; 0x6c
    9412:	1e41      	subs	r1, r0, #1
    9414:	bf18      	it	ne
    9416:	2101      	movne	r1, #1
    9418:	2801      	cmp	r0, #1
    941a:	d001      	beq.n	9420 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
    941c:	e7ff      	b.n	941e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
    941e:	e008      	b.n	9432 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
    9420:	f240 1060 	movw	r0, #352	; 0x160
    9424:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9428:	f00a fcdd 	bl	13de6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    942c:	900a      	str	r0, [sp, #40]	; 0x28
    942e:	e00d      	b.n	944c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
    9430:	defe      	udf	#254	; 0xfe
    9432:	981b      	ldr	r0, [sp, #108]	; 0x6c
    9434:	9030      	str	r0, [sp, #192]	; 0xc0
    9436:	f008 fe67 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    943a:	9009      	str	r0, [sp, #36]	; 0x24
    943c:	e7ff      	b.n	943e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
    943e:	9809      	ldr	r0, [sp, #36]	; 0x24
    9440:	f7ff fb8e 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9444:	9013      	str	r0, [sp, #76]	; 0x4c
    9446:	e7ff      	b.n	9448 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
    9448:	e7ff      	b.n	944a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    944a:	e792      	b.n	9372 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
    944c:	980a      	ldr	r0, [sp, #40]	; 0x28
    944e:	f7ff fb93 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    9452:	901c      	str	r0, [sp, #112]	; 0x70
    9454:	e7ff      	b.n	9456 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
    9456:	981c      	ldr	r0, [sp, #112]	; 0x70
    9458:	1e41      	subs	r1, r0, #1
    945a:	bf18      	it	ne
    945c:	2101      	movne	r1, #1
    945e:	2801      	cmp	r0, #1
    9460:	d001      	beq.n	9466 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
    9462:	e7ff      	b.n	9464 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
    9464:	e011      	b.n	948a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
    9466:	9914      	ldr	r1, [sp, #80]	; 0x50
    9468:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
    946a:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
    946c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    946e:	46ec      	mov	ip, sp
    9470:	f04f 0e01 	mov.w	lr, #1
    9474:	f8cc e008 	str.w	lr, [ip, #8]
    9478:	f8cc e004 	str.w	lr, [ip, #4]
    947c:	f8cc 0000 	str.w	r0, [ip]
    9480:	a81d      	add	r0, sp, #116	; 0x74
    9482:	f000 fb4f 	bl	9b24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
    9486:	e00c      	b.n	94a2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
    9488:	defe      	udf	#254	; 0xfe
    948a:	981c      	ldr	r0, [sp, #112]	; 0x70
    948c:	9031      	str	r0, [sp, #196]	; 0xc4
    948e:	f008 fe3b 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    9492:	9008      	str	r0, [sp, #32]
    9494:	e7ff      	b.n	9496 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
    9496:	9808      	ldr	r0, [sp, #32]
    9498:	f7ff fb62 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    949c:	9013      	str	r0, [sp, #76]	; 0x4c
    949e:	e7ff      	b.n	94a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
    94a0:	e7d3      	b.n	944a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
    94a2:	f240 1048 	movw	r0, #328	; 0x148
    94a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    94aa:	a91d      	add	r1, sp, #116	; 0x74
    94ac:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    94b0:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
    94b4:	f00a fcad 	bl	13e12 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
    94b8:	e7ff      	b.n	94ba <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
    94ba:	f240 1048 	movw	r0, #328	; 0x148
    94be:	f2c2 0000 	movt	r0, #8192	; 0x2000
    94c2:	a923      	add	r1, sp, #140	; 0x8c
    94c4:	f000 fb50 	bl	9b68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
    94c8:	9007      	str	r0, [sp, #28]
    94ca:	e7ff      	b.n	94cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
    94cc:	9807      	ldr	r0, [sp, #28]
    94ce:	f000 0001 	and.w	r0, r0, #1
    94d2:	f7ff fb4b 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    94d6:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
    94da:	e7ff      	b.n	94dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
    94dc:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
    94e0:	07c1      	lsls	r1, r0, #31
    94e2:	2900      	cmp	r1, #0
    94e4:	d001      	beq.n	94ea <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
    94e6:	e7ff      	b.n	94e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
    94e8:	e00d      	b.n	9506 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    94ea:	f64b 20a4 	movw	r0, #47780	; 0xbaa4
    94ee:	f2c0 0001 	movt	r0, #1
    94f2:	6801      	ldr	r1, [r0, #0]
    94f4:	f240 1048 	movw	r0, #328	; 0x148
    94f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    94fc:	f000 f949 	bl	9792 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
    9500:	9006      	str	r0, [sp, #24]
    9502:	e00b      	b.n	951c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
    9504:	defe      	udf	#254	; 0xfe
    9506:	f7ff fabe 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    950a:	9005      	str	r0, [sp, #20]
    950c:	e7ff      	b.n	950e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
    950e:	9805      	ldr	r0, [sp, #20]
    9510:	f7ff fb26 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9514:	9013      	str	r0, [sp, #76]	; 0x4c
    9516:	e7ff      	b.n	9518 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
    9518:	e7ff      	b.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
    951a:	e72a      	b.n	9372 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    951c:	9806      	ldr	r0, [sp, #24]
    951e:	f000 0001 	and.w	r0, r0, #1
    9522:	f7ff fb23 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9526:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
    952a:	e7ff      	b.n	952c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
    952c:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
    9530:	07c1      	lsls	r1, r0, #31
    9532:	2900      	cmp	r1, #0
    9534:	d001      	beq.n	953a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
    9536:	e7ff      	b.n	9538 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
    9538:	e005      	b.n	9546 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
    953a:	2000      	movs	r0, #0
    Ok(())
    953c:	9013      	str	r0, [sp, #76]	; 0x4c
    953e:	2001      	movs	r0, #1
    9540:	9013      	str	r0, [sp, #76]	; 0x4c
}
    9542:	e70d      	b.n	9360 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
    9544:	defe      	udf	#254	; 0xfe
    9546:	f7ff fa9e 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
    954a:	9004      	str	r0, [sp, #16]
    954c:	e7ff      	b.n	954e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
    954e:	9804      	ldr	r0, [sp, #16]
    9550:	f7ff fb06 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    9554:	9013      	str	r0, [sp, #76]	; 0x4c
    9556:	e7ff      	b.n	9558 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
    9558:	e7df      	b.n	951a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

0000955a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
    955a:	b580      	push	{r7, lr}
    955c:	b08a      	sub	sp, #40	; 0x28
    955e:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    9560:	f001 f8ff 	bl	a762 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
    9564:	9307      	str	r3, [sp, #28]
    9566:	9206      	str	r2, [sp, #24]
    9568:	9105      	str	r1, [sp, #20]
    956a:	9004      	str	r0, [sp, #16]
    956c:	e7ff      	b.n	956e <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
    956e:	a804      	add	r0, sp, #16
    9570:	f00a fcc7 	bl	13f02 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    9574:	9003      	str	r0, [sp, #12]
    9576:	e7ff      	b.n	9578 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
    9578:	9803      	ldr	r0, [sp, #12]
    957a:	f00a fd38 	bl	13fee <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    957e:	9002      	str	r0, [sp, #8]
    9580:	9101      	str	r1, [sp, #4]
    9582:	e7ff      	b.n	9584 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
    9584:	9802      	ldr	r0, [sp, #8]
    9586:	f000 0001 	and.w	r0, r0, #1
    958a:	9901      	ldr	r1, [sp, #4]
    958c:	b00a      	add	sp, #40	; 0x28
    958e:	bd80      	pop	{r7, pc}

00009590 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
    9590:	b580      	push	{r7, lr}
    9592:	b090      	sub	sp, #64	; 0x40
    9594:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
    9596:	f100 010c 	add.w	r1, r0, #12
    959a:	9006      	str	r0, [sp, #24]
    959c:	4608      	mov	r0, r1
    959e:	f00a fc2d 	bl	13dfc <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    95a2:	9005      	str	r0, [sp, #20]
    95a4:	e7ff      	b.n	95a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
    95a6:	9805      	ldr	r0, [sp, #20]
    95a8:	f00a fe54 	bl	14254 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
    95ac:	9004      	str	r0, [sp, #16]
    95ae:	e7ff      	b.n	95b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
    95b0:	9804      	ldr	r0, [sp, #16]
    95b2:	f000 0001 	and.w	r0, r0, #1
    95b6:	f7ff fad9 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    95ba:	f88d 001f 	strb.w	r0, [sp, #31]
    95be:	e7ff      	b.n	95c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
    95c0:	f89d 001f 	ldrb.w	r0, [sp, #31]
    95c4:	07c1      	lsls	r1, r0, #31
    95c6:	2900      	cmp	r1, #0
    95c8:	d001      	beq.n	95ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
    95ca:	e7ff      	b.n	95cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
    95cc:	e006      	b.n	95dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
    95ce:	9806      	ldr	r0, [sp, #24]
    95d0:	300c      	adds	r0, #12
    95d2:	f00a fc08 	bl	13de6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    95d6:	9003      	str	r0, [sp, #12]
    95d8:	e00d      	b.n	95f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
    95da:	defe      	udf	#254	; 0xfe
    95dc:	f008 f95f 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    95e0:	e003      	b.n	95ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
    95e2:	f89d 001e 	ldrb.w	r0, [sp, #30]
    95e6:	b010      	add	sp, #64	; 0x40
    95e8:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
    95ea:	f00a fe88 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    95ee:	f88d 001e 	strb.w	r0, [sp, #30]
    95f2:	e7ff      	b.n	95f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
    95f4:	e7f5      	b.n	95e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
    95f6:	9803      	ldr	r0, [sp, #12]
    95f8:	f00a fdd7 	bl	141aa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
    95fc:	9002      	str	r0, [sp, #8]
    95fe:	e7ff      	b.n	9600 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
    9600:	9802      	ldr	r0, [sp, #8]
    9602:	f000 0001 	and.w	r0, r0, #1
    9606:	f7ff fab1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    960a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    960e:	e7ff      	b.n	9610 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
    9610:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    9614:	07c1      	lsls	r1, r0, #31
    9616:	2900      	cmp	r1, #0
    9618:	d001      	beq.n	961e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
    961a:	e7ff      	b.n	961c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
    961c:	e006      	b.n	962c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
    961e:	9806      	ldr	r0, [sp, #24]
    9620:	300c      	adds	r0, #12
    9622:	f00a fbeb 	bl	13dfc <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    9626:	9001      	str	r0, [sp, #4]
    9628:	e009      	b.n	963e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
    962a:	defe      	udf	#254	; 0xfe
    962c:	f008 f937 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9630:	e7ff      	b.n	9632 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
    9632:	f00a fe64 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9636:	f88d 001e 	strb.w	r0, [sp, #30]
    963a:	e7ff      	b.n	963c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
    963c:	e7d1      	b.n	95e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
    963e:	9801      	ldr	r0, [sp, #4]
    9640:	f00a fd5e 	bl	14100 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
    9644:	f88d 001e 	strb.w	r0, [sp, #30]
    9648:	e7ff      	b.n	964a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
    964a:	e7ca      	b.n	95e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

0000964c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
    964c:	b082      	sub	sp, #8
    964e:	9001      	str	r0, [sp, #4]
    9650:	e7ff      	b.n	9652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
    9652:	b002      	add	sp, #8
    9654:	4770      	bx	lr

00009656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
    9656:	b082      	sub	sp, #8
    9658:	9001      	str	r0, [sp, #4]
    965a:	e7ff      	b.n	965c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
    965c:	b002      	add	sp, #8
    965e:	4770      	bx	lr

00009660 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
    9660:	b082      	sub	sp, #8
    9662:	9001      	str	r0, [sp, #4]
    9664:	e7ff      	b.n	9666 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
    9666:	b002      	add	sp, #8
    9668:	4770      	bx	lr

0000966a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
        }
        Ok(())
    }

    #[cfg(feature = "noblock_spi")]  //  If non-blocking SPI is enabled...
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
    966a:	b580      	push	{r7, lr}
    966c:	b084      	sub	sp, #16
    966e:	9001      	str	r0, [sp, #4]
    9670:	9102      	str	r1, [sp, #8]
    9672:	9203      	str	r2, [sp, #12]
        //  Write the data bytes,
        mynewt::spi::spi_noblock_write_data(
    9674:	4608      	mov	r0, r1
    9676:	4611      	mov	r1, r2
    9678:	f009 fb3a 	bl	12cf0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    967c:	9000      	str	r0, [sp, #0]
    967e:	e7ff      	b.n	9680 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
    9680:	f64b 3104 	movw	r1, #47876	; 0xbb04
    9684:	f2c0 0101 	movt	r1, #1
    9688:	f64b 3314 	movw	r3, #47892	; 0xbb14
    968c:	f2c0 0301 	movt	r3, #1
    9690:	220d      	movs	r2, #13
    9692:	9800      	ldr	r0, [sp, #0]
    9694:	f7ff fa31 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9698:	e7ff      	b.n	969a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
    969a:	2000      	movs	r0, #0
            data
        ).expect("spi data fail");
        Ok(())
    }
    969c:	b004      	add	sp, #16
    969e:	bd80      	pop	{r7, pc}

000096a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
        self.dc.set_high().map_err(|_| ())?;
        self.spi.write(data).map_err(|_| ())
    }

    /// Writes a data word to the display.
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
    96a0:	b580      	push	{r7, lr}
    96a2:	b088      	sub	sp, #32
    96a4:	460a      	mov	r2, r1
    96a6:	9006      	str	r0, [sp, #24]
    96a8:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
    96ac:	9004      	str	r0, [sp, #16]
    96ae:	4608      	mov	r0, r1
    96b0:	9203      	str	r2, [sp, #12]
    96b2:	f000 fe08 	bl	a2c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
    96b6:	9002      	str	r0, [sp, #8]
    96b8:	e7ff      	b.n	96ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
    96ba:	9802      	ldr	r0, [sp, #8]
    96bc:	f8ad 0016 	strh.w	r0, [sp, #22]
    96c0:	e7ff      	b.n	96c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
    96c2:	f10d 0116 	add.w	r1, sp, #22
    96c6:	2202      	movs	r2, #2
        self.write_data(&bytes)
    96c8:	9804      	ldr	r0, [sp, #16]
    96ca:	f7ff ffce 	bl	966a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
    96ce:	9001      	str	r0, [sp, #4]
    96d0:	e7ff      	b.n	96d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
    96d2:	9801      	ldr	r0, [sp, #4]
    96d4:	f000 0001 	and.w	r0, r0, #1
    96d8:	b008      	add	sp, #32
    96da:	bd80      	pop	{r7, pc}

000096dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
    96dc:	b580      	push	{r7, lr}
    96de:	b08e      	sub	sp, #56	; 0x38
    96e0:	468c      	mov	ip, r1
    96e2:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
    96e6:	920b      	str	r2, [sp, #44]	; 0x2c
    96e8:	930c      	str	r3, [sp, #48]	; 0x30
    96ea:	900d      	str	r0, [sp, #52]	; 0x34
    96ec:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
    96f0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    96f4:	f000 fdbd 	bl	a272 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
    96f8:	9008      	str	r0, [sp, #32]
    96fa:	9107      	str	r1, [sp, #28]
    96fc:	e7ff      	b.n	96fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
    96fe:	9808      	ldr	r0, [sp, #32]
    9700:	f000 0001 	and.w	r0, r0, #1
    9704:	f64b 3224 	movw	r2, #47908	; 0xbb24
    9708:	f2c0 0201 	movt	r2, #1
    970c:	9907      	ldr	r1, [sp, #28]
    970e:	f00a fc0d 	bl	13f2c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9712:	9006      	str	r0, [sp, #24]
    9714:	e7ff      	b.n	9716 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
    9716:	9806      	ldr	r0, [sp, #24]
    9718:	f009 faa2 	bl	12c60 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
    971c:	9005      	str	r0, [sp, #20]
    971e:	e7ff      	b.n	9720 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
    9720:	f64b 3134 	movw	r1, #47924	; 0xbb34
    9724:	f2c0 0101 	movt	r1, #1
    9728:	f64b 3340 	movw	r3, #47936	; 0xbb40
    972c:	f2c0 0301 	movt	r3, #1
    9730:	220c      	movs	r2, #12
    9732:	9805      	ldr	r0, [sp, #20]
    9734:	f7ff f9e1 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9738:	e7ff      	b.n	973a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
    973a:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
    973c:	f00a fc45 	bl	13fca <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
    9740:	9004      	str	r0, [sp, #16]
    9742:	e7ff      	b.n	9744 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
    9744:	9804      	ldr	r0, [sp, #16]
    9746:	07c1      	lsls	r1, r0, #31
    9748:	2900      	cmp	r1, #0
    974a:	d01f      	beq.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    974c:	e7ff      	b.n	974e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
    974e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9750:	990c      	ldr	r1, [sp, #48]	; 0x30
    9752:	f64b 3250 	movw	r2, #47952	; 0xbb50
    9756:	f2c0 0201 	movt	r2, #1
    975a:	f00a fc10 	bl	13f7e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
    975e:	9003      	str	r0, [sp, #12]
    9760:	9102      	str	r1, [sp, #8]
    9762:	e7ff      	b.n	9764 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
    9764:	9803      	ldr	r0, [sp, #12]
    9766:	9902      	ldr	r1, [sp, #8]
    9768:	f009 fac2 	bl	12cf0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
    976c:	9001      	str	r0, [sp, #4]
    976e:	e7ff      	b.n	9770 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
    9770:	f64b 3104 	movw	r1, #47876	; 0xbb04
    9774:	f2c0 0101 	movt	r1, #1
    9778:	f64b 3360 	movw	r3, #47968	; 0xbb60
    977c:	f2c0 0301 	movt	r3, #1
    9780:	220d      	movs	r2, #13
    9782:	9801      	ldr	r0, [sp, #4]
    9784:	f7ff f9b9 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9788:	e7ff      	b.n	978a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
    978a:	e7ff      	b.n	978c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
    978c:	2000      	movs	r0, #0
    }
    978e:	b00e      	add	sp, #56	; 0x38
    9790:	bd80      	pop	{r7, pc}

00009792 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:

    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
    9792:	b580      	push	{r7, lr}
    9794:	b098      	sub	sp, #96	; 0x60
    9796:	9012      	str	r0, [sp, #72]	; 0x48
    9798:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
    979a:	7d02      	ldrb	r2, [r0, #20]
    979c:	07d2      	lsls	r2, r2, #31
    979e:	2a00      	cmp	r2, #0
    97a0:	910a      	str	r1, [sp, #40]	; 0x28
    97a2:	9009      	str	r0, [sp, #36]	; 0x24
    97a4:	d109      	bne.n	97ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
    97a6:	e7ff      	b.n	97a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
    97a8:	2036      	movs	r0, #54	; 0x36
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
            ))?;
        } else {
            self.write_command(
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    97aa:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
    97ae:	980a      	ldr	r0, [sp, #40]	; 0x28
    97b0:	f7ff fed3 	bl	955a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    97b4:	9008      	str	r0, [sp, #32]
    97b6:	9107      	str	r1, [sp, #28]
    97b8:	e044      	b.n	9844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
    97ba:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
    97bc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    97c0:	980a      	ldr	r0, [sp, #40]	; 0x28
    97c2:	f7ff feca 	bl	955a <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
    97c6:	9006      	str	r0, [sp, #24]
    97c8:	9105      	str	r1, [sp, #20]
    97ca:	e7ff      	b.n	97cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
    97cc:	9806      	ldr	r0, [sp, #24]
    97ce:	f000 0001 	and.w	r0, r0, #1
    97d2:	f64b 3270 	movw	r2, #47984	; 0xbb70
    97d6:	f2c0 0201 	movt	r2, #1
    97da:	9905      	ldr	r1, [sp, #20]
    97dc:	f00a fba6 	bl	13f2c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    97e0:	9004      	str	r0, [sp, #16]
    97e2:	e7ff      	b.n	97e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
    97e4:	9804      	ldr	r0, [sp, #16]
    97e6:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    97ea:	f10d 0139 	add.w	r1, sp, #57	; 0x39
    97ee:	910c      	str	r1, [sp, #48]	; 0x30
    97f0:	2101      	movs	r1, #1
    97f2:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
    97f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    97f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    97f8:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    97fc:	9809      	ldr	r0, [sp, #36]	; 0x24
    97fe:	f7ff ff6d 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9802:	9003      	str	r0, [sp, #12]
    9804:	e7ff      	b.n	9806 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
    9806:	9803      	ldr	r0, [sp, #12]
    9808:	f000 0001 	and.w	r0, r0, #1
    980c:	f7ff f9ae 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9810:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    9814:	e7ff      	b.n	9816 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
    9816:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    981a:	07c1      	lsls	r1, r0, #31
    981c:	2900      	cmp	r1, #0
    981e:	d001      	beq.n	9824 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
    9820:	e7ff      	b.n	9822 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
    9822:	e001      	b.n	9828 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
    9824:	e047      	b.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    9826:	defe      	udf	#254	; 0xfe
            ))?;
    9828:	f008 f839 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    982c:	e003      	b.n	9836 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
            ))?;
        }
        Ok(())
    }
    982e:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    9832:	b018      	add	sp, #96	; 0x60
    9834:	bd80      	pop	{r7, pc}
            ))?;
    9836:	f00a fd62 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    983a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    983e:	e7ff      	b.n	9840 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
    9840:	e7ff      	b.n	9842 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    9842:	e7f4      	b.n	982e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
    9844:	9808      	ldr	r0, [sp, #32]
    9846:	f000 0001 	and.w	r0, r0, #1
    984a:	f64b 3280 	movw	r2, #48000	; 0xbb80
    984e:	f2c0 0201 	movt	r2, #1
    9852:	9907      	ldr	r1, [sp, #28]
    9854:	f00a fb6a 	bl	13f2c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
    9858:	9002      	str	r0, [sp, #8]
    985a:	e7ff      	b.n	985c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
    985c:	9802      	ldr	r0, [sp, #8]
    985e:	f040 0108 	orr.w	r1, r0, #8
    9862:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
    9866:	f10d 0147 	add.w	r1, sp, #71	; 0x47
    986a:	910f      	str	r1, [sp, #60]	; 0x3c
    986c:	2101      	movs	r1, #1
    986e:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
    9870:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    9872:	9b10      	ldr	r3, [sp, #64]	; 0x40
    9874:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    9878:	9809      	ldr	r0, [sp, #36]	; 0x24
    987a:	f7ff ff2f 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    987e:	9001      	str	r0, [sp, #4]
    9880:	e7ff      	b.n	9882 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
    9882:	9801      	ldr	r0, [sp, #4]
    9884:	f000 0001 	and.w	r0, r0, #1
    9888:	f7ff f970 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    988c:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9890:	e7ff      	b.n	9892 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
    9892:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    9896:	07c1      	lsls	r1, r0, #31
    9898:	2900      	cmp	r1, #0
    989a:	d001      	beq.n	98a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
    989c:	e7ff      	b.n	989e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
    989e:	e001      	b.n	98a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
    98a0:	e009      	b.n	98b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
    98a2:	defe      	udf	#254	; 0xfe
            ))?;
    98a4:	f007 fffb 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    98a8:	e7ff      	b.n	98aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
    98aa:	f00a fd28 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    98ae:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    98b2:	e7ff      	b.n	98b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
    98b4:	e7c5      	b.n	9842 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
    98b6:	2000      	movs	r0, #0
        Ok(())
    98b8:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
    98bc:	e7b7      	b.n	982e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

000098be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
        self.dx = dx;
        self.dy = dy;
    }

    /// Sets the address window for the display.
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
    98be:	b5b0      	push	{r4, r5, r7, lr}
    98c0:	b0a2      	sub	sp, #136	; 0x88
    98c2:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
    98c6:	469e      	mov	lr, r3
    98c8:	4614      	mov	r4, r2
    98ca:	460d      	mov	r5, r1
    98cc:	9015      	str	r0, [sp, #84]	; 0x54
    98ce:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
    98d2:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
    98d6:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
    98da:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
    98de:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
    98e0:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
    98e4:	2100      	movs	r1, #0
    98e6:	9110      	str	r1, [sp, #64]	; 0x40
    98e8:	910f      	str	r1, [sp, #60]	; 0x3c
    98ea:	910f      	str	r1, [sp, #60]	; 0x3c
    98ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    98ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    98f0:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
    98f4:	900d      	str	r0, [sp, #52]	; 0x34
    98f6:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    98fa:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    98fe:	940a      	str	r4, [sp, #40]	; 0x28
    9900:	9509      	str	r5, [sp, #36]	; 0x24
    9902:	f7ff feeb 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9906:	9008      	str	r0, [sp, #32]
    9908:	e7ff      	b.n	990a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
    990a:	9808      	ldr	r0, [sp, #32]
    990c:	f000 0001 	and.w	r0, r0, #1
    9910:	f7ff f92c 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9914:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
    9918:	e7ff      	b.n	991a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
    991a:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    991e:	07c1      	lsls	r1, r0, #31
    9920:	2900      	cmp	r1, #0
    9922:	d001      	beq.n	9928 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
    9924:	e7ff      	b.n	9926 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
    9926:	e00d      	b.n	9944 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
    9928:	980d      	ldr	r0, [sp, #52]	; 0x34
    992a:	8a01      	ldrh	r1, [r0, #16]
    992c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    992e:	fa11 f182 	uxtah	r1, r1, r2
    9932:	b28b      	uxth	r3, r1
    9934:	468c      	mov	ip, r1
    9936:	428b      	cmp	r3, r1
    9938:	f8cd c01c 	str.w	ip, [sp, #28]
    993c:	f040 80c2 	bne.w	9ac4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
    9940:	e00d      	b.n	995e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
    9942:	defe      	udf	#254	; 0xfe
    9944:	f007 ffab 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9948:	e003      	b.n	9952 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
        self.write_word(ex + self.dx)?;
        self.write_command(Instruction::RASET, None)?;
        self.write_word(sy + self.dy)?;
        self.write_word(ey + self.dy)
    }
    994a:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
    994e:	b022      	add	sp, #136	; 0x88
    9950:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
    9952:	f00a fcd4 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9956:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    995a:	e7ff      	b.n	995c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
    995c:	e7f5      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    995e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9960:	9907      	ldr	r1, [sp, #28]
    9962:	f7ff fe9d 	bl	96a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9966:	9006      	str	r0, [sp, #24]
    9968:	e7ff      	b.n	996a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
    996a:	9806      	ldr	r0, [sp, #24]
    996c:	f000 0001 	and.w	r0, r0, #1
    9970:	f7ff f8fc 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9974:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9978:	e7ff      	b.n	997a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
    997a:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    997e:	07c1      	lsls	r1, r0, #31
    9980:	2900      	cmp	r1, #0
    9982:	d001      	beq.n	9988 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
    9984:	e7ff      	b.n	9986 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
    9986:	e00d      	b.n	99a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
    9988:	980d      	ldr	r0, [sp, #52]	; 0x34
    998a:	8a01      	ldrh	r1, [r0, #16]
    998c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    998e:	fa11 f182 	uxtah	r1, r1, r2
    9992:	b28b      	uxth	r3, r1
    9994:	468c      	mov	ip, r1
    9996:	428b      	cmp	r3, r1
    9998:	f8cd c014 	str.w	ip, [sp, #20]
    999c:	f040 809e 	bne.w	9adc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
    99a0:	e009      	b.n	99b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
    99a2:	defe      	udf	#254	; 0xfe
    99a4:	f007 ff7b 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    99a8:	e7ff      	b.n	99aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
    99aa:	f00a fca8 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    99ae:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    99b2:	e7ff      	b.n	99b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
    99b4:	e7c9      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
    99b6:	980d      	ldr	r0, [sp, #52]	; 0x34
    99b8:	9905      	ldr	r1, [sp, #20]
    99ba:	f7ff fe71 	bl	96a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    99be:	9004      	str	r0, [sp, #16]
    99c0:	e7ff      	b.n	99c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
    99c2:	9804      	ldr	r0, [sp, #16]
    99c4:	f000 0001 	and.w	r0, r0, #1
    99c8:	f7ff f8d0 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    99cc:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    99d0:	e7ff      	b.n	99d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
    99d2:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
    99d6:	07c1      	lsls	r1, r0, #31
    99d8:	2900      	cmp	r1, #0
    99da:	d001      	beq.n	99e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
    99dc:	e7ff      	b.n	99de <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
    99de:	e010      	b.n	9a02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
    99e0:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
    99e2:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
    99e6:	2000      	movs	r0, #0
    99e8:	9013      	str	r0, [sp, #76]	; 0x4c
    99ea:	9012      	str	r0, [sp, #72]	; 0x48
    99ec:	9012      	str	r0, [sp, #72]	; 0x48
    99ee:	9a12      	ldr	r2, [sp, #72]	; 0x48
    99f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    99f2:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
    99f6:	980d      	ldr	r0, [sp, #52]	; 0x34
    99f8:	f7ff fe70 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    99fc:	9003      	str	r0, [sp, #12]
    99fe:	e009      	b.n	9a14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
    9a00:	defe      	udf	#254	; 0xfe
    9a02:	f007 ff4c 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a06:	e7ff      	b.n	9a08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
    9a08:	f00a fc79 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a0c:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a10:	e7ff      	b.n	9a12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
    9a12:	e79a      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
    9a14:	9803      	ldr	r0, [sp, #12]
    9a16:	f000 0001 	and.w	r0, r0, #1
    9a1a:	f7ff f8a7 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a1e:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    9a22:	e7ff      	b.n	9a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
    9a24:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    9a28:	07c1      	lsls	r1, r0, #31
    9a2a:	2900      	cmp	r1, #0
    9a2c:	d001      	beq.n	9a32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
    9a2e:	e7ff      	b.n	9a30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
    9a30:	e00c      	b.n	9a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
    9a32:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a34:	8a41      	ldrh	r1, [r0, #18]
    9a36:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9a38:	fa11 f182 	uxtah	r1, r1, r2
    9a3c:	b28b      	uxth	r3, r1
    9a3e:	468c      	mov	ip, r1
    9a40:	428b      	cmp	r3, r1
    9a42:	f8cd c008 	str.w	ip, [sp, #8]
    9a46:	d155      	bne.n	9af4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
    9a48:	e009      	b.n	9a5e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
    9a4a:	defe      	udf	#254	; 0xfe
    9a4c:	f007 ff27 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9a50:	e7ff      	b.n	9a52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
    9a52:	f00a fc54 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9a56:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9a5a:	e7ff      	b.n	9a5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
    9a5c:	e775      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
    9a5e:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a60:	9902      	ldr	r1, [sp, #8]
    9a62:	f7ff fe1d 	bl	96a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9a66:	9001      	str	r0, [sp, #4]
    9a68:	e7ff      	b.n	9a6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
    9a6a:	9801      	ldr	r0, [sp, #4]
    9a6c:	f000 0001 	and.w	r0, r0, #1
    9a70:	f7ff f87c 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9a74:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    9a78:	e7ff      	b.n	9a7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
    9a7a:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    9a7e:	07c1      	lsls	r1, r0, #31
    9a80:	2900      	cmp	r1, #0
    9a82:	d001      	beq.n	9a88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
    9a84:	e7ff      	b.n	9a86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
    9a86:	e00c      	b.n	9aa2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
    9a88:	980d      	ldr	r0, [sp, #52]	; 0x34
    9a8a:	8a41      	ldrh	r1, [r0, #18]
    9a8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    9a8e:	fa11 f182 	uxtah	r1, r1, r2
    9a92:	b28b      	uxth	r3, r1
    9a94:	468c      	mov	ip, r1
    9a96:	428b      	cmp	r3, r1
    9a98:	f8cd c000 	str.w	ip, [sp]
    9a9c:	d136      	bne.n	9b0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
    9a9e:	e009      	b.n	9ab4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
    9aa0:	defe      	udf	#254	; 0xfe
    9aa2:	f007 fefc 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9aa6:	e7ff      	b.n	9aa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
    9aa8:	f00a fc29 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9aac:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ab0:	e7ff      	b.n	9ab2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
    9ab2:	e74a      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
    9ab4:	980d      	ldr	r0, [sp, #52]	; 0x34
    9ab6:	9900      	ldr	r1, [sp, #0]
    9ab8:	f7ff fdf2 	bl	96a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    9abc:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
    9ac0:	e7ff      	b.n	9ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
    9ac2:	e742      	b.n	994a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
    9ac4:	f64b 30a0 	movw	r0, #48032	; 0xbba0
    9ac8:	f2c0 0001 	movt	r0, #1
    9acc:	f64b 3290 	movw	r2, #48016	; 0xbb90
    9ad0:	f2c0 0201 	movt	r2, #1
    9ad4:	211c      	movs	r1, #28
    9ad6:	f00b fb41 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9ada:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
    9adc:	f64b 30a0 	movw	r0, #48032	; 0xbba0
    9ae0:	f2c0 0001 	movt	r0, #1
    9ae4:	f64b 32bc 	movw	r2, #48060	; 0xbbbc
    9ae8:	f2c0 0201 	movt	r2, #1
    9aec:	211c      	movs	r1, #28
    9aee:	f00b fb35 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9af2:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
    9af4:	f64b 30a0 	movw	r0, #48032	; 0xbba0
    9af8:	f2c0 0001 	movt	r0, #1
    9afc:	f64b 32cc 	movw	r2, #48076	; 0xbbcc
    9b00:	f2c0 0201 	movt	r2, #1
    9b04:	211c      	movs	r1, #28
    9b06:	f00b fb29 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b0a:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
    9b0c:	f64b 30a0 	movw	r0, #48032	; 0xbba0
    9b10:	f2c0 0001 	movt	r0, #1
    9b14:	f64b 32dc 	movw	r2, #48092	; 0xbbdc
    9b18:	f2c0 0201 	movt	r2, #1
    9b1c:	211c      	movs	r1, #28
    9b1e:	f00b fb1d 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9b22:	defe      	udf	#254	; 0xfe

00009b24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
    9b24:	b5b0      	push	{r4, r5, r7, lr}
    9b26:	b08a      	sub	sp, #40	; 0x28
    9b28:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    9b2c:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    9b30:	9c0e      	ldr	r4, [sp, #56]	; 0x38
    9b32:	9106      	str	r1, [sp, #24]
    9b34:	9207      	str	r2, [sp, #28]
    9b36:	9308      	str	r3, [sp, #32]
    9b38:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
    9b3c:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
    9b40:	9100      	str	r1, [sp, #0]
    9b42:	9201      	str	r2, [sp, #4]
    9b44:	9302      	str	r3, [sp, #8]
    9b46:	9403      	str	r4, [sp, #12]
    9b48:	f88d e014 	strb.w	lr, [sp, #20]
    9b4c:	f88d c015 	strb.w	ip, [sp, #21]
    9b50:	2100      	movs	r1, #0
    9b52:	f8ad 1010 	strh.w	r1, [sp, #16]
    9b56:	f8ad 1012 	strh.w	r1, [sp, #18]
    9b5a:	4669      	mov	r1, sp
        display
    9b5c:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    9b60:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
    9b64:	b00a      	add	sp, #40	; 0x28
    9b66:	bdb0      	pop	{r4, r5, r7, pc}

00009b68 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
    9b68:	b580      	push	{r7, lr}
    9b6a:	b0f6      	sub	sp, #472	; 0x1d8
    9b6c:	904e      	str	r0, [sp, #312]	; 0x138
    9b6e:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
    9b70:	9117      	str	r1, [sp, #92]	; 0x5c
    9b72:	9016      	str	r0, [sp, #88]	; 0x58
    9b74:	f008 fb1a 	bl	121ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
    9b78:	9015      	str	r0, [sp, #84]	; 0x54
    9b7a:	e7ff      	b.n	9b7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
    9b7c:	f64b 31ec 	movw	r1, #48108	; 0xbbec
    9b80:	f2c0 0101 	movt	r1, #1
    9b84:	f64b 33fc 	movw	r3, #48124	; 0xbbfc
    9b88:	f2c0 0301 	movt	r3, #1
    9b8c:	220d      	movs	r2, #13
    9b8e:	9815      	ldr	r0, [sp, #84]	; 0x54
    9b90:	f7fe ffb3 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    9b94:	e7ff      	b.n	9b96 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
    9b96:	9816      	ldr	r0, [sp, #88]	; 0x58
    9b98:	f7ff fcfa 	bl	9590 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
    9b9c:	9014      	str	r0, [sp, #80]	; 0x50
    9b9e:	e7ff      	b.n	9ba0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
    9ba0:	9814      	ldr	r0, [sp, #80]	; 0x50
    9ba2:	f000 0001 	and.w	r0, r0, #1
    9ba6:	f7fe ffe1 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9baa:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
    9bae:	e7ff      	b.n	9bb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
    9bb0:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
    9bb4:	07c1      	lsls	r1, r0, #31
    9bb6:	2900      	cmp	r1, #0
    9bb8:	d001      	beq.n	9bbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
    9bba:	e7ff      	b.n	9bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
    9bbc:	e010      	b.n	9be0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
    9bbe:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
    9bc0:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
    9bc4:	2000      	movs	r0, #0
    9bc6:	901a      	str	r0, [sp, #104]	; 0x68
    9bc8:	9019      	str	r0, [sp, #100]	; 0x64
    9bca:	9019      	str	r0, [sp, #100]	; 0x64
    9bcc:	9a19      	ldr	r2, [sp, #100]	; 0x64
    9bce:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    9bd0:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
    9bd4:	9816      	ldr	r0, [sp, #88]	; 0x58
    9bd6:	f7ff fd81 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9bda:	9013      	str	r0, [sp, #76]	; 0x4c
    9bdc:	e00d      	b.n	9bfa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
    9bde:	defe      	udf	#254	; 0xfe
    9be0:	f007 fe5d 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9be4:	e003      	b.n	9bee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
    9be6:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
    9bea:	b076      	add	sp, #472	; 0x1d8
    9bec:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
    9bee:	f00a fb86 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9bf2:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9bf6:	e7ff      	b.n	9bf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
    9bf8:	e7f5      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
    9bfa:	9813      	ldr	r0, [sp, #76]	; 0x4c
    9bfc:	f000 0001 	and.w	r0, r0, #1
    9c00:	f7fe ffb4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c04:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
    9c08:	e7ff      	b.n	9c0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
    9c0a:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
    9c0e:	07c1      	lsls	r1, r0, #31
    9c10:	2900      	cmp	r1, #0
    9c12:	d001      	beq.n	9c18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
    9c14:	e7ff      	b.n	9c16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
    9c16:	e005      	b.n	9c24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
    9c18:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9c1a:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9c1c:	f00a f8fa 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9c20:	e009      	b.n	9c36 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
    9c22:	defe      	udf	#254	; 0xfe
    9c24:	f007 fe3b 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c28:	e7ff      	b.n	9c2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
    9c2a:	f00a fb68 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c2e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9c32:	e7ff      	b.n	9c34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
    9c34:	e7d7      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9c36:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
    9c38:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
    9c3c:	2000      	movs	r0, #0
    9c3e:	901d      	str	r0, [sp, #116]	; 0x74
    9c40:	901c      	str	r0, [sp, #112]	; 0x70
    9c42:	901c      	str	r0, [sp, #112]	; 0x70
    9c44:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    9c46:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    9c48:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
    9c4c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9c4e:	f7ff fd45 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9c52:	9012      	str	r0, [sp, #72]	; 0x48
    9c54:	e7ff      	b.n	9c56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
    9c56:	9812      	ldr	r0, [sp, #72]	; 0x48
    9c58:	f000 0001 	and.w	r0, r0, #1
    9c5c:	f7fe ff86 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9c60:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
    9c64:	e7ff      	b.n	9c66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
    9c66:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
    9c6a:	07c1      	lsls	r1, r0, #31
    9c6c:	2900      	cmp	r1, #0
    9c6e:	d001      	beq.n	9c74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
    9c70:	e7ff      	b.n	9c72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
    9c72:	e005      	b.n	9c80 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
    9c74:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    9c76:	9817      	ldr	r0, [sp, #92]	; 0x5c
    9c78:	f00a f8cc 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    9c7c:	e009      	b.n	9c92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
    9c7e:	defe      	udf	#254	; 0xfe
    9c80:	f007 fe0d 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9c84:	e7ff      	b.n	9c86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
    9c86:	f00a fb3a 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9c8a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9c8e:	e7ff      	b.n	9c90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
    9c90:	e7a9      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    9c92:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9c94:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
    9c98:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9c9c:	f2c0 0001 	movt	r0, #1
    9ca0:	6800      	ldr	r0, [r0, #0]
    9ca2:	901f      	str	r0, [sp, #124]	; 0x7c
    9ca4:	2003      	movs	r0, #3
    9ca6:	9020      	str	r0, [sp, #128]	; 0x80
    9ca8:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    9caa:	9b20      	ldr	r3, [sp, #128]	; 0x80
    9cac:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
    9cb0:	9816      	ldr	r0, [sp, #88]	; 0x58
    9cb2:	f7ff fd13 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9cb6:	9011      	str	r0, [sp, #68]	; 0x44
    9cb8:	e7ff      	b.n	9cba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
    9cba:	9811      	ldr	r0, [sp, #68]	; 0x44
    9cbc:	f000 0001 	and.w	r0, r0, #1
    9cc0:	f7fe ff54 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9cc4:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
    9cc8:	e7ff      	b.n	9cca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
    9cca:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
    9cce:	07c1      	lsls	r1, r0, #31
    9cd0:	2900      	cmp	r1, #0
    9cd2:	d001      	beq.n	9cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
    9cd4:	e7ff      	b.n	9cd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
    9cd6:	e014      	b.n	9d02 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
    9cd8:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9cda:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    9cde:	f64b 4010 	movw	r0, #48144	; 0xbc10
    9ce2:	f2c0 0001 	movt	r0, #1
    9ce6:	6800      	ldr	r0, [r0, #0]
    9ce8:	9022      	str	r0, [sp, #136]	; 0x88
    9cea:	2003      	movs	r0, #3
    9cec:	9023      	str	r0, [sp, #140]	; 0x8c
    9cee:	9a22      	ldr	r2, [sp, #136]	; 0x88
    9cf0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    9cf2:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
    9cf6:	9816      	ldr	r0, [sp, #88]	; 0x58
    9cf8:	f7ff fcf0 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9cfc:	9010      	str	r0, [sp, #64]	; 0x40
    9cfe:	e009      	b.n	9d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
    9d00:	defe      	udf	#254	; 0xfe
    9d02:	f007 fdcc 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d06:	e7ff      	b.n	9d08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
    9d08:	f00a faf9 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d0c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9d10:	e7ff      	b.n	9d12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
    9d12:	e768      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9d14:	9810      	ldr	r0, [sp, #64]	; 0x40
    9d16:	f000 0001 	and.w	r0, r0, #1
    9d1a:	f7fe ff27 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d1e:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
    9d22:	e7ff      	b.n	9d24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
    9d24:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
    9d28:	07c1      	lsls	r1, r0, #31
    9d2a:	2900      	cmp	r1, #0
    9d2c:	d001      	beq.n	9d32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
    9d2e:	e7ff      	b.n	9d30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
    9d30:	e014      	b.n	9d5c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
    9d32:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
    9d34:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9d38:	f64b 401c 	movw	r0, #48156	; 0xbc1c
    9d3c:	f2c0 0001 	movt	r0, #1
    9d40:	6800      	ldr	r0, [r0, #0]
    9d42:	9025      	str	r0, [sp, #148]	; 0x94
    9d44:	2006      	movs	r0, #6
    9d46:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
    9d48:	9a25      	ldr	r2, [sp, #148]	; 0x94
    9d4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
    9d4c:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
    9d50:	9816      	ldr	r0, [sp, #88]	; 0x58
    9d52:	f7ff fcc3 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9d56:	900f      	str	r0, [sp, #60]	; 0x3c
    9d58:	e009      	b.n	9d6e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
    9d5a:	defe      	udf	#254	; 0xfe
    9d5c:	f007 fd9f 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9d60:	e7ff      	b.n	9d62 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
    9d62:	f00a facc 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9d66:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9d6a:	e7ff      	b.n	9d6c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
    9d6c:	e73b      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
    9d6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9d70:	f000 0001 	and.w	r0, r0, #1
    9d74:	f7fe fefa 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9d78:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
    9d7c:	e7ff      	b.n	9d7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9d7e:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
    9d82:	07c1      	lsls	r1, r0, #31
    9d84:	2900      	cmp	r1, #0
    9d86:	d001      	beq.n	9d8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
    9d88:	e7ff      	b.n	9d8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
    9d8a:	e014      	b.n	9db6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
    9d8c:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9d8e:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
    9d92:	f64b 4024 	movw	r0, #48164	; 0xbc24
    9d96:	f2c0 0001 	movt	r0, #1
    9d9a:	6800      	ldr	r0, [r0, #0]
    9d9c:	9028      	str	r0, [sp, #160]	; 0xa0
    9d9e:	2001      	movs	r0, #1
    9da0:	9029      	str	r0, [sp, #164]	; 0xa4
    9da2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
    9da4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
    9da6:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
    9daa:	9816      	ldr	r0, [sp, #88]	; 0x58
    9dac:	f7ff fc96 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9db0:	900e      	str	r0, [sp, #56]	; 0x38
    9db2:	e009      	b.n	9dc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
    9db4:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
    9db6:	f007 fd72 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9dba:	e7ff      	b.n	9dbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
    9dbc:	f00a fa9f 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9dc0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9dc4:	e7ff      	b.n	9dc6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
    9dc6:	e70e      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9dc8:	980e      	ldr	r0, [sp, #56]	; 0x38
    9dca:	f000 0001 	and.w	r0, r0, #1
    9dce:	f7fe fecd 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9dd2:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
    9dd6:	e7ff      	b.n	9dd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
    9dd8:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
    9ddc:	07c1      	lsls	r1, r0, #31
    9dde:	2900      	cmp	r1, #0
    9de0:	d001      	beq.n	9de6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
    9de2:	e7ff      	b.n	9de4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
    9de4:	e014      	b.n	9e10 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
    9de6:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9de8:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
    9dec:	f64b 402c 	movw	r0, #48172	; 0xbc2c
    9df0:	f2c0 0001 	movt	r0, #1
    9df4:	6800      	ldr	r0, [r0, #0]
    9df6:	902b      	str	r0, [sp, #172]	; 0xac
    9df8:	2003      	movs	r0, #3
    9dfa:	902c      	str	r0, [sp, #176]	; 0xb0
    9dfc:	9a2b      	ldr	r2, [sp, #172]	; 0xac
    9dfe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
    9e00:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
    9e04:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e06:	f7ff fc69 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e0a:	900d      	str	r0, [sp, #52]	; 0x34
    9e0c:	e009      	b.n	9e22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
    9e0e:	defe      	udf	#254	; 0xfe
    9e10:	f007 fd45 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e14:	e7ff      	b.n	9e16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
    9e16:	f00a fa72 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e1a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e1e:	e7ff      	b.n	9e20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
    9e20:	e6e1      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9e22:	980d      	ldr	r0, [sp, #52]	; 0x34
    9e24:	f000 0001 	and.w	r0, r0, #1
    9e28:	f7fe fea0 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e2c:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
    9e30:	e7ff      	b.n	9e32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
    9e32:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
    9e36:	07c1      	lsls	r1, r0, #31
    9e38:	2900      	cmp	r1, #0
    9e3a:	d001      	beq.n	9e40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
    9e3c:	e7ff      	b.n	9e3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
    9e3e:	e014      	b.n	9e6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
    9e40:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9e42:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
    9e46:	f64b 4034 	movw	r0, #48180	; 0xbc34
    9e4a:	f2c0 0001 	movt	r0, #1
    9e4e:	6800      	ldr	r0, [r0, #0]
    9e50:	902e      	str	r0, [sp, #184]	; 0xb8
    9e52:	2001      	movs	r0, #1
    9e54:	902f      	str	r0, [sp, #188]	; 0xbc
    9e56:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
    9e58:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    9e5a:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
    9e5e:	9816      	ldr	r0, [sp, #88]	; 0x58
    9e60:	f7ff fc3c 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9e64:	900c      	str	r0, [sp, #48]	; 0x30
    9e66:	e009      	b.n	9e7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
    9e68:	defe      	udf	#254	; 0xfe
    9e6a:	f007 fd18 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9e6e:	e7ff      	b.n	9e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
    9e70:	f00a fa45 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9e74:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9e78:	e7ff      	b.n	9e7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
    9e7a:	e6b4      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9e7c:	980c      	ldr	r0, [sp, #48]	; 0x30
    9e7e:	f000 0001 	and.w	r0, r0, #1
    9e82:	f7fe fe73 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9e86:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
    9e8a:	e7ff      	b.n	9e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
    9e8c:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
    9e90:	07c1      	lsls	r1, r0, #31
    9e92:	2900      	cmp	r1, #0
    9e94:	d001      	beq.n	9e9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
    9e96:	e7ff      	b.n	9e98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
    9e98:	e014      	b.n	9ec4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
    9e9a:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9e9c:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
    9ea0:	f64b 403c 	movw	r0, #48188	; 0xbc3c
    9ea4:	f2c0 0001 	movt	r0, #1
    9ea8:	6800      	ldr	r0, [r0, #0]
    9eaa:	9031      	str	r0, [sp, #196]	; 0xc4
    9eac:	2002      	movs	r0, #2
    9eae:	9032      	str	r0, [sp, #200]	; 0xc8
    9eb0:	9a31      	ldr	r2, [sp, #196]	; 0xc4
    9eb2:	9b32      	ldr	r3, [sp, #200]	; 0xc8
    9eb4:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
    9eb8:	9816      	ldr	r0, [sp, #88]	; 0x58
    9eba:	f7ff fc0f 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9ebe:	900b      	str	r0, [sp, #44]	; 0x2c
    9ec0:	e009      	b.n	9ed6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
    9ec2:	defe      	udf	#254	; 0xfe
    9ec4:	f007 fceb 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9ec8:	e7ff      	b.n	9eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
    9eca:	f00a fa18 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9ece:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9ed2:	e7ff      	b.n	9ed4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
    9ed4:	e687      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9ed6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9ed8:	f000 0001 	and.w	r0, r0, #1
    9edc:	f7fe fe46 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9ee0:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
    9ee4:	e7ff      	b.n	9ee6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
    9ee6:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
    9eea:	07c1      	lsls	r1, r0, #31
    9eec:	2900      	cmp	r1, #0
    9eee:	d001      	beq.n	9ef4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
    9ef0:	e7ff      	b.n	9ef2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
    9ef2:	e014      	b.n	9f1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
    9ef4:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    9ef6:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
    9efa:	f64b 4044 	movw	r0, #48196	; 0xbc44
    9efe:	f2c0 0001 	movt	r0, #1
    9f02:	6800      	ldr	r0, [r0, #0]
    9f04:	9034      	str	r0, [sp, #208]	; 0xd0
    9f06:	2002      	movs	r0, #2
    9f08:	9035      	str	r0, [sp, #212]	; 0xd4
    9f0a:	9a34      	ldr	r2, [sp, #208]	; 0xd0
    9f0c:	9b35      	ldr	r3, [sp, #212]	; 0xd4
    9f0e:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
    9f12:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f14:	f7ff fbe2 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f18:	900a      	str	r0, [sp, #40]	; 0x28
    9f1a:	e009      	b.n	9f30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
    9f1c:	defe      	udf	#254	; 0xfe
    9f1e:	f007 fcbe 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f22:	e7ff      	b.n	9f24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
    9f24:	f00a f9eb 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f28:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f2c:	e7ff      	b.n	9f2e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
    9f2e:	e65a      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    9f30:	980a      	ldr	r0, [sp, #40]	; 0x28
    9f32:	f000 0001 	and.w	r0, r0, #1
    9f36:	f7fe fe19 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f3a:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
    9f3e:	e7ff      	b.n	9f40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
    9f40:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
    9f44:	07c1      	lsls	r1, r0, #31
    9f46:	2900      	cmp	r1, #0
    9f48:	d001      	beq.n	9f4e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
    9f4a:	e7ff      	b.n	9f4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
    9f4c:	e014      	b.n	9f78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
    9f4e:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    9f50:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
    9f54:	f64b 404c 	movw	r0, #48204	; 0xbc4c
    9f58:	f2c0 0001 	movt	r0, #1
    9f5c:	6800      	ldr	r0, [r0, #0]
    9f5e:	9037      	str	r0, [sp, #220]	; 0xdc
    9f60:	2002      	movs	r0, #2
    9f62:	9038      	str	r0, [sp, #224]	; 0xe0
    9f64:	9a37      	ldr	r2, [sp, #220]	; 0xdc
    9f66:	9b38      	ldr	r3, [sp, #224]	; 0xe0
    9f68:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
    9f6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    9f6e:	f7ff fbb5 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9f72:	9009      	str	r0, [sp, #36]	; 0x24
    9f74:	e009      	b.n	9f8a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
    9f76:	defe      	udf	#254	; 0xfe
    9f78:	f007 fc91 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9f7c:	e7ff      	b.n	9f7e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
    9f7e:	f00a f9be 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9f82:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9f86:	e7ff      	b.n	9f88 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
    9f88:	e62d      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    9f8a:	9809      	ldr	r0, [sp, #36]	; 0x24
    9f8c:	f000 0001 	and.w	r0, r0, #1
    9f90:	f7fe fdec 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9f94:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
    9f98:	e7ff      	b.n	9f9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
    9f9a:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
    9f9e:	07c1      	lsls	r1, r0, #31
    9fa0:	2900      	cmp	r1, #0
    9fa2:	d001      	beq.n	9fa8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
    9fa4:	e7ff      	b.n	9fa6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
    9fa6:	e014      	b.n	9fd2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
    9fa8:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    9faa:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
    9fae:	f64b 4054 	movw	r0, #48212	; 0xbc54
    9fb2:	f2c0 0001 	movt	r0, #1
    9fb6:	6800      	ldr	r0, [r0, #0]
    9fb8:	903a      	str	r0, [sp, #232]	; 0xe8
    9fba:	2001      	movs	r0, #1
    9fbc:	903b      	str	r0, [sp, #236]	; 0xec
    9fbe:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    9fc0:	9b3b      	ldr	r3, [sp, #236]	; 0xec
    9fc2:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
    9fc6:	9816      	ldr	r0, [sp, #88]	; 0x58
    9fc8:	f7ff fb88 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    9fcc:	9008      	str	r0, [sp, #32]
    9fce:	e009      	b.n	9fe4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
    9fd0:	defe      	udf	#254	; 0xfe
    9fd2:	f007 fc64 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    9fd6:	e7ff      	b.n	9fd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
    9fd8:	f00a f991 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    9fdc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    9fe0:	e7ff      	b.n	9fe2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
    9fe2:	e600      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    9fe4:	9808      	ldr	r0, [sp, #32]
    9fe6:	f000 0001 	and.w	r0, r0, #1
    9fea:	f7fe fdbf 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    9fee:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
    9ff2:	e7ff      	b.n	9ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
    9ff4:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
    9ff8:	07c1      	lsls	r1, r0, #31
    9ffa:	2900      	cmp	r1, #0
    9ffc:	d001      	beq.n	a002 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
    9ffe:	e7ff      	b.n	a000 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
    a000:	e006      	b.n	a010 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
    a002:	9816      	ldr	r0, [sp, #88]	; 0x58
    a004:	7d41      	ldrb	r1, [r0, #21]
    a006:	07c9      	lsls	r1, r1, #31
    a008:	2900      	cmp	r1, #0
    a00a:	d11a      	bne.n	a042 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
    a00c:	e009      	b.n	a022 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
    a00e:	defe      	udf	#254	; 0xfe
    a010:	f007 fc45 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a014:	e7ff      	b.n	a016 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
    a016:	f00a f972 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a01a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a01e:	e7ff      	b.n	a020 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
    a020:	e5e1      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
    a022:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
    a024:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
    a028:	2000      	movs	r0, #0
    a02a:	9041      	str	r0, [sp, #260]	; 0x104
    a02c:	9040      	str	r0, [sp, #256]	; 0x100
    a02e:	9040      	str	r0, [sp, #256]	; 0x100
    a030:	9a40      	ldr	r2, [sp, #256]	; 0x100
    a032:	9b41      	ldr	r3, [sp, #260]	; 0x104
    a034:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
    a038:	9816      	ldr	r0, [sp, #88]	; 0x58
    a03a:	f7ff fb4f 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a03e:	9007      	str	r0, [sp, #28]
    a040:	e02a      	b.n	a098 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
    a042:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
    a044:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
    a048:	2000      	movs	r0, #0
    a04a:	903e      	str	r0, [sp, #248]	; 0xf8
    a04c:	903d      	str	r0, [sp, #244]	; 0xf4
    a04e:	903d      	str	r0, [sp, #244]	; 0xf4
    a050:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
    a052:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
    a054:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
    a058:	9816      	ldr	r0, [sp, #88]	; 0x58
    a05a:	f7ff fb3f 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a05e:	9006      	str	r0, [sp, #24]
    a060:	e7ff      	b.n	a062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
    a062:	9806      	ldr	r0, [sp, #24]
    a064:	f000 0001 	and.w	r0, r0, #1
    a068:	f7fe fd80 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a06c:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
    a070:	e7ff      	b.n	a072 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
    a072:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
    a076:	07c1      	lsls	r1, r0, #31
    a078:	2900      	cmp	r1, #0
    a07a:	d001      	beq.n	a080 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
    a07c:	e7ff      	b.n	a07e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
    a07e:	e001      	b.n	a084 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
    a080:	e024      	b.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
    a082:	defe      	udf	#254	; 0xfe
    a084:	f007 fc0b 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a088:	e7ff      	b.n	a08a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
    a08a:	f00a f938 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a08e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a092:	e7ff      	b.n	a094 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
    a094:	e7ff      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
    a096:	e5a6      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
    a098:	9807      	ldr	r0, [sp, #28]
    a09a:	f000 0001 	and.w	r0, r0, #1
    a09e:	f7fe fd65 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a0a2:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
    a0a6:	e7ff      	b.n	a0a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
    a0a8:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
    a0ac:	07c1      	lsls	r1, r0, #31
    a0ae:	2900      	cmp	r1, #0
    a0b0:	d001      	beq.n	a0b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
    a0b2:	e7ff      	b.n	a0b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
    a0b4:	e001      	b.n	a0ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
    a0b6:	e009      	b.n	a0cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
    a0b8:	defe      	udf	#254	; 0xfe
    a0ba:	f007 fbf0 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a0be:	e7ff      	b.n	a0c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
    a0c0:	f00a f91d 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a0c4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a0c8:	e7ff      	b.n	a0ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
    a0ca:	e7e4      	b.n	a096 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
    a0cc:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0ce:	7d01      	ldrb	r1, [r0, #20]
    a0d0:	07c9      	lsls	r1, r1, #31
    a0d2:	2900      	cmp	r1, #0
    a0d4:	d114      	bne.n	a100 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
    a0d6:	e7ff      	b.n	a0d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
    a0d8:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a0da:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
    a0de:	f64b 4064 	movw	r0, #48228	; 0xbc64
    a0e2:	f2c0 0001 	movt	r0, #1
    a0e6:	6800      	ldr	r0, [r0, #0]
    a0e8:	9046      	str	r0, [sp, #280]	; 0x118
    a0ea:	2001      	movs	r0, #1
    a0ec:	9047      	str	r0, [sp, #284]	; 0x11c
    a0ee:	9a46      	ldr	r2, [sp, #280]	; 0x118
    a0f0:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    a0f2:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
    a0f6:	9816      	ldr	r0, [sp, #88]	; 0x58
    a0f8:	f7ff faf0 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a0fc:	9005      	str	r0, [sp, #20]
    a0fe:	e02e      	b.n	a15e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
    a100:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a102:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
    a106:	f64b 405c 	movw	r0, #48220	; 0xbc5c
    a10a:	f2c0 0001 	movt	r0, #1
    a10e:	6800      	ldr	r0, [r0, #0]
    a110:	9043      	str	r0, [sp, #268]	; 0x10c
    a112:	2001      	movs	r0, #1
    a114:	9044      	str	r0, [sp, #272]	; 0x110
    a116:	9a43      	ldr	r2, [sp, #268]	; 0x10c
    a118:	9b44      	ldr	r3, [sp, #272]	; 0x110
    a11a:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
    a11e:	9816      	ldr	r0, [sp, #88]	; 0x58
    a120:	f7ff fadc 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a124:	9004      	str	r0, [sp, #16]
    a126:	e7ff      	b.n	a128 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
    a128:	9804      	ldr	r0, [sp, #16]
    a12a:	f000 0001 	and.w	r0, r0, #1
    a12e:	f7fe fd1d 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a132:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
    a136:	e7ff      	b.n	a138 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
    a138:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
    a13c:	07c1      	lsls	r1, r0, #31
    a13e:	2900      	cmp	r1, #0
    a140:	d001      	beq.n	a146 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
    a142:	e7ff      	b.n	a144 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
    a144:	e001      	b.n	a14a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
    a146:	e024      	b.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
    a148:	defe      	udf	#254	; 0xfe
    a14a:	f007 fba8 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a14e:	e7ff      	b.n	a150 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
    a150:	f00a f8d5 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a154:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a158:	e7ff      	b.n	a15a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
    a15a:	e7ff      	b.n	a15c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a15c:	e543      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a15e:	9805      	ldr	r0, [sp, #20]
    a160:	f000 0001 	and.w	r0, r0, #1
    a164:	f7fe fd02 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a168:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
    a16c:	e7ff      	b.n	a16e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
    a16e:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
    a172:	07c1      	lsls	r1, r0, #31
    a174:	2900      	cmp	r1, #0
    a176:	d001      	beq.n	a17c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
    a178:	e7ff      	b.n	a17a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
    a17a:	e001      	b.n	a180 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
    a17c:	e009      	b.n	a192 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
    a17e:	defe      	udf	#254	; 0xfe
    a180:	f007 fb8d 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a184:	e7ff      	b.n	a186 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
    a186:	f00a f8ba 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a18a:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a18e:	e7ff      	b.n	a190 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
    a190:	e7e4      	b.n	a15c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
    a192:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a194:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
    a198:	f64b 406c 	movw	r0, #48236	; 0xbc6c
    a19c:	f2c0 0001 	movt	r0, #1
    a1a0:	6800      	ldr	r0, [r0, #0]
    a1a2:	9049      	str	r0, [sp, #292]	; 0x124
    a1a4:	2001      	movs	r0, #1
    a1a6:	904a      	str	r0, [sp, #296]	; 0x128
    a1a8:	9a49      	ldr	r2, [sp, #292]	; 0x124
    a1aa:	9b4a      	ldr	r3, [sp, #296]	; 0x128
    a1ac:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
    a1b0:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1b2:	f7ff fa93 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1b6:	9003      	str	r0, [sp, #12]
    a1b8:	e7ff      	b.n	a1ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
    a1ba:	9803      	ldr	r0, [sp, #12]
    a1bc:	f000 0001 	and.w	r0, r0, #1
    a1c0:	f7fe fcd4 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a1c4:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
    a1c8:	e7ff      	b.n	a1ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
    a1ca:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
    a1ce:	07c1      	lsls	r1, r0, #31
    a1d0:	2900      	cmp	r1, #0
    a1d2:	d001      	beq.n	a1d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
    a1d4:	e7ff      	b.n	a1d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
    a1d6:	e010      	b.n	a1fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
    a1d8:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
    a1da:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
    a1de:	2000      	movs	r0, #0
    a1e0:	904d      	str	r0, [sp, #308]	; 0x134
    a1e2:	904c      	str	r0, [sp, #304]	; 0x130
    a1e4:	904c      	str	r0, [sp, #304]	; 0x130
    a1e6:	9a4c      	ldr	r2, [sp, #304]	; 0x130
    a1e8:	9b4d      	ldr	r3, [sp, #308]	; 0x134
    a1ea:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
    a1ee:	9816      	ldr	r0, [sp, #88]	; 0x58
    a1f0:	f7ff fa74 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    a1f4:	9002      	str	r0, [sp, #8]
    a1f6:	e009      	b.n	a20c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
    a1f8:	defe      	udf	#254	; 0xfe
    a1fa:	f007 fb50 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a1fe:	e7ff      	b.n	a200 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
    a200:	f00a f87d 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a204:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a208:	e7ff      	b.n	a20a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
    a20a:	e4ec      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
    a20c:	9802      	ldr	r0, [sp, #8]
    a20e:	f000 0001 	and.w	r0, r0, #1
    a212:	f7fe fcab 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    a216:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
    a21a:	e7ff      	b.n	a21c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
    a21c:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
    a220:	07c1      	lsls	r1, r0, #31
    a222:	2900      	cmp	r1, #0
    a224:	d001      	beq.n	a22a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
    a226:	e7ff      	b.n	a228 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
    a228:	e005      	b.n	a236 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
    a22a:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
    a22c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    a22e:	f009 fdf1 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a232:	e009      	b.n	a248 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
    a234:	defe      	udf	#254	; 0xfe
    a236:	f007 fb32 	bl	1189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
    a23a:	e7ff      	b.n	a23c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
    a23c:	f00a f85f 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    a240:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    a244:	e7ff      	b.n	a246 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
    a246:	e4ce      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    a248:	f008 fe1f 	bl	12e8a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    a24c:	9001      	str	r0, [sp, #4]
    a24e:	e7ff      	b.n	a250 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
    a250:	f64b 21a8 	movw	r1, #47784	; 0xbaa8
    a254:	f2c0 0101 	movt	r1, #1
    a258:	f64b 4370 	movw	r3, #48240	; 0xbc70
    a25c:	f2c0 0301 	movt	r3, #1
    a260:	220e      	movs	r2, #14
    a262:	9801      	ldr	r0, [sp, #4]
    a264:	f7fe fc49 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    a268:	e7ff      	b.n	a26a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
    a26a:	2000      	movs	r0, #0
        Ok(())
    a26c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
    a270:	e4b9      	b.n	9be6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

0000a272 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
    a272:	b580      	push	{r7, lr}
    a274:	b08a      	sub	sp, #40	; 0x28
    a276:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
    a278:	f000 fa25 	bl	a6c6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
    a27c:	9307      	str	r3, [sp, #28]
    a27e:	9206      	str	r2, [sp, #24]
    a280:	9105      	str	r1, [sp, #20]
    a282:	9004      	str	r0, [sp, #16]
    a284:	e7ff      	b.n	a286 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
    a286:	a804      	add	r0, sp, #16
    a288:	f009 fe3b 	bl	13f02 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
    a28c:	9003      	str	r0, [sp, #12]
    a28e:	e7ff      	b.n	a290 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
    a290:	9803      	ldr	r0, [sp, #12]
    a292:	f009 feac 	bl	13fee <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
    a296:	9002      	str	r0, [sp, #8]
    a298:	9101      	str	r1, [sp, #4]
    a29a:	e7ff      	b.n	a29c <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
    a29c:	9802      	ldr	r0, [sp, #8]
    a29e:	f000 0001 	and.w	r0, r0, #1
    a2a2:	9901      	ldr	r1, [sp, #4]
    a2a4:	b00a      	add	sp, #40	; 0x28
    a2a6:	bd80      	pop	{r7, pc}

0000a2a8 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
    a2a8:	b082      	sub	sp, #8
    a2aa:	4601      	mov	r1, r0
    a2ac:	f8ad 0004 	strh.w	r0, [sp, #4]
    a2b0:	ba00      	rev	r0, r0
    a2b2:	0c00      	lsrs	r0, r0, #16
    a2b4:	f8ad 0006 	strh.w	r0, [sp, #6]
    a2b8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    a2bc:	9000      	str	r0, [sp, #0]
    a2be:	e7ff      	b.n	a2c0 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
    a2c0:	9800      	ldr	r0, [sp, #0]
    a2c2:	b002      	add	sp, #8
    a2c4:	4770      	bx	lr

0000a2c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
    a2c6:	b580      	push	{r7, lr}
    a2c8:	b084      	sub	sp, #16
    a2ca:	4601      	mov	r1, r0
    a2cc:	f8ad 000e 	strh.w	r0, [sp, #14]
    a2d0:	9102      	str	r1, [sp, #8]
    a2d2:	f7ff ffe9 	bl	a2a8 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
    a2d6:	9001      	str	r0, [sp, #4]
    a2d8:	e7ff      	b.n	a2da <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
    a2da:	9801      	ldr	r0, [sp, #4]
    a2dc:	b004      	add	sp, #16
    a2de:	bd80      	pop	{r7, pc}

0000a2e0 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
    a2e0:	b580      	push	{r7, lr}
    a2e2:	b084      	sub	sp, #16
    a2e4:	9002      	str	r0, [sp, #8]
    a2e6:	9802      	ldr	r0, [sp, #8]
    a2e8:	f009 fdcc 	bl	13e84 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
    a2ec:	9001      	str	r0, [sp, #4]
    a2ee:	9100      	str	r1, [sp, #0]
    a2f0:	e7ff      	b.n	a2f2 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
    a2f2:	9801      	ldr	r0, [sp, #4]
    a2f4:	f000 0001 	and.w	r0, r0, #1
    a2f8:	9900      	ldr	r1, [sp, #0]
    a2fa:	b004      	add	sp, #16
    a2fc:	bd80      	pop	{r7, pc}

0000a2fe <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
    a2fe:	b081      	sub	sp, #4
    a300:	9000      	str	r0, [sp, #0]
    a302:	b001      	add	sp, #4
    a304:	4770      	bx	lr

0000a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
    a306:	b089      	sub	sp, #36	; 0x24
    a308:	9005      	str	r0, [sp, #20]
    a30a:	9106      	str	r1, [sp, #24]
    a30c:	9107      	str	r1, [sp, #28]
    a30e:	9907      	ldr	r1, [sp, #28]
    a310:	9002      	str	r0, [sp, #8]
    a312:	9101      	str	r1, [sp, #4]
    a314:	e7ff      	b.n	a316 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
    a316:	9802      	ldr	r0, [sp, #8]
    a318:	9008      	str	r0, [sp, #32]
    a31a:	9908      	ldr	r1, [sp, #32]
    a31c:	9100      	str	r1, [sp, #0]
    a31e:	e7ff      	b.n	a320 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
    a320:	9800      	ldr	r0, [sp, #0]
    a322:	9003      	str	r0, [sp, #12]
    a324:	9901      	ldr	r1, [sp, #4]
    a326:	9104      	str	r1, [sp, #16]
    a328:	9803      	ldr	r0, [sp, #12]
    a32a:	9904      	ldr	r1, [sp, #16]
    a32c:	b009      	add	sp, #36	; 0x24
    a32e:	4770      	bx	lr

0000a330 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
    a330:	b08a      	sub	sp, #40	; 0x28
    a332:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
    a334:	7800      	ldrb	r0, [r0, #0]
    a336:	9001      	str	r0, [sp, #4]
    a338:	9901      	ldr	r1, [sp, #4]
    a33a:	e8df f011 	tbh	[pc, r1, lsl #1]
    a33e:	0103      	.short	0x0103
    a340:	01020107 	.word	0x01020107
    a344:	010c0102 	.word	0x010c0102
    a348:	01020102 	.word	0x01020102
    a34c:	01020102 	.word	0x01020102
    a350:	01020111 	.word	0x01020111
    a354:	01020102 	.word	0x01020102
    a358:	01020102 	.word	0x01020102
    a35c:	01160102 	.word	0x01160102
    a360:	0120011b 	.word	0x0120011b
    a364:	01020125 	.word	0x01020125
    a368:	01020102 	.word	0x01020102
    a36c:	01020102 	.word	0x01020102
    a370:	01020102 	.word	0x01020102
    a374:	01020102 	.word	0x01020102
    a378:	01020102 	.word	0x01020102
    a37c:	012a0102 	.word	0x012a0102
    a380:	0102012f 	.word	0x0102012f
    a384:	01020102 	.word	0x01020102
    a388:	01020102 	.word	0x01020102
    a38c:	01340102 	.word	0x01340102
    a390:	013e0139 	.word	0x013e0139
    a394:	01480143 	.word	0x01480143
    a398:	014d0102 	.word	0x014d0102
    a39c:	01520102 	.word	0x01520102
    a3a0:	01020102 	.word	0x01020102
    a3a4:	01020102 	.word	0x01020102
    a3a8:	015c0102 	.word	0x015c0102
    a3ac:	01020102 	.word	0x01020102
    a3b0:	01570102 	.word	0x01570102
    a3b4:	01020102 	.word	0x01020102
    a3b8:	01020102 	.word	0x01020102
    a3bc:	01020102 	.word	0x01020102
    a3c0:	01020102 	.word	0x01020102
    a3c4:	01020102 	.word	0x01020102
    a3c8:	01020102 	.word	0x01020102
    a3cc:	01020102 	.word	0x01020102
    a3d0:	01020102 	.word	0x01020102
    a3d4:	01020102 	.word	0x01020102
    a3d8:	01020102 	.word	0x01020102
    a3dc:	01020102 	.word	0x01020102
    a3e0:	01020102 	.word	0x01020102
    a3e4:	01020102 	.word	0x01020102
    a3e8:	01020102 	.word	0x01020102
    a3ec:	01020102 	.word	0x01020102
    a3f0:	01020102 	.word	0x01020102
    a3f4:	01020102 	.word	0x01020102
    a3f8:	01020102 	.word	0x01020102
    a3fc:	01020102 	.word	0x01020102
    a400:	01020102 	.word	0x01020102
    a404:	01020102 	.word	0x01020102
    a408:	01020102 	.word	0x01020102
    a40c:	01020102 	.word	0x01020102
    a410:	01020102 	.word	0x01020102
    a414:	01020102 	.word	0x01020102
    a418:	01020102 	.word	0x01020102
    a41c:	01020102 	.word	0x01020102
    a420:	01020102 	.word	0x01020102
    a424:	01020102 	.word	0x01020102
    a428:	01020102 	.word	0x01020102
    a42c:	01020102 	.word	0x01020102
    a430:	01020102 	.word	0x01020102
    a434:	01020102 	.word	0x01020102
    a438:	01020102 	.word	0x01020102
    a43c:	01020102 	.word	0x01020102
    a440:	01020102 	.word	0x01020102
    a444:	01020102 	.word	0x01020102
    a448:	01020102 	.word	0x01020102
    a44c:	01020102 	.word	0x01020102
    a450:	01020102 	.word	0x01020102
    a454:	01020102 	.word	0x01020102
    a458:	01020102 	.word	0x01020102
    a45c:	01020102 	.word	0x01020102
    a460:	01020102 	.word	0x01020102
    a464:	01020102 	.word	0x01020102
    a468:	01020102 	.word	0x01020102
    a46c:	01020102 	.word	0x01020102
    a470:	01020102 	.word	0x01020102
    a474:	01020102 	.word	0x01020102
    a478:	01020102 	.word	0x01020102
    a47c:	01020102 	.word	0x01020102
    a480:	01020102 	.word	0x01020102
    a484:	01020102 	.word	0x01020102
    a488:	01020102 	.word	0x01020102
    a48c:	01020102 	.word	0x01020102
    a490:	01020102 	.word	0x01020102
    a494:	01020102 	.word	0x01020102
    a498:	01020102 	.word	0x01020102
    a49c:	01020102 	.word	0x01020102
    a4a0:	01660161 	.word	0x01660161
    a4a4:	0170016b 	.word	0x0170016b
    a4a8:	01750102 	.word	0x01750102
    a4ac:	01020102 	.word	0x01020102
    a4b0:	01020102 	.word	0x01020102
    a4b4:	01020102 	.word	0x01020102
    a4b8:	01020102 	.word	0x01020102
    a4bc:	017a0102 	.word	0x017a0102
    a4c0:	0184017f 	.word	0x0184017f
    a4c4:	018e0189 	.word	0x018e0189
    a4c8:	01020193 	.word	0x01020193
    a4cc:	01020102 	.word	0x01020102
    a4d0:	01020102 	.word	0x01020102
    a4d4:	01020102 	.word	0x01020102
    a4d8:	01020102 	.word	0x01020102
    a4dc:	01020102 	.word	0x01020102
    a4e0:	01020102 	.word	0x01020102
    a4e4:	01020102 	.word	0x01020102
    a4e8:	01020102 	.word	0x01020102
    a4ec:	01020102 	.word	0x01020102
    a4f0:	01980102 	.word	0x01980102
    a4f4:	01a2019d 	.word	0x01a2019d
    a4f8:	010201a7 	.word	0x010201a7
    a4fc:	01b10102 	.word	0x01b10102
    a500:	010200fd 	.word	0x010200fd
    a504:	01020102 	.word	0x01020102
    a508:	01020102 	.word	0x01020102
    a50c:	01020102 	.word	0x01020102
    a510:	01020102 	.word	0x01020102
    a514:	01020102 	.word	0x01020102
    a518:	01020102 	.word	0x01020102
    a51c:	01020102 	.word	0x01020102
    a520:	01020102 	.word	0x01020102
    a524:	01020102 	.word	0x01020102
    a528:	01020102 	.word	0x01020102
    a52c:	01020102 	.word	0x01020102
    a530:	01020102 	.word	0x01020102
    a534:	01ac0102 	.word	0x01ac0102
    a538:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a53a:	9007      	str	r0, [sp, #28]
    a53c:	20e1      	movs	r0, #225	; 0xe1
    a53e:	9006      	str	r0, [sp, #24]
    a540:	e0b3      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a542:	defe      	udf	#254	; 0xfe
    a544:	2000      	movs	r0, #0
    a546:	9007      	str	r0, [sp, #28]
    a548:	9006      	str	r0, [sp, #24]
    a54a:	e0ae      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a54c:	2000      	movs	r0, #0
    a54e:	9007      	str	r0, [sp, #28]
    a550:	2001      	movs	r0, #1
    a552:	9006      	str	r0, [sp, #24]
    a554:	e0a9      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a556:	2000      	movs	r0, #0
    a558:	9007      	str	r0, [sp, #28]
    a55a:	2004      	movs	r0, #4
    a55c:	9006      	str	r0, [sp, #24]
    a55e:	e0a4      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a560:	2000      	movs	r0, #0
    a562:	9007      	str	r0, [sp, #28]
    a564:	2009      	movs	r0, #9
    a566:	9006      	str	r0, [sp, #24]
    a568:	e09f      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a56a:	2000      	movs	r0, #0
    a56c:	9007      	str	r0, [sp, #28]
    a56e:	2010      	movs	r0, #16
    a570:	9006      	str	r0, [sp, #24]
    a572:	e09a      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a574:	2000      	movs	r0, #0
    a576:	9007      	str	r0, [sp, #28]
    a578:	2011      	movs	r0, #17
    a57a:	9006      	str	r0, [sp, #24]
    a57c:	e095      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a57e:	2000      	movs	r0, #0
    a580:	9007      	str	r0, [sp, #28]
    a582:	2012      	movs	r0, #18
    a584:	9006      	str	r0, [sp, #24]
    a586:	e090      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a588:	2000      	movs	r0, #0
    a58a:	9007      	str	r0, [sp, #28]
    a58c:	2013      	movs	r0, #19
    a58e:	9006      	str	r0, [sp, #24]
    a590:	e08b      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a592:	2000      	movs	r0, #0
    a594:	9007      	str	r0, [sp, #28]
    a596:	2020      	movs	r0, #32
    a598:	9006      	str	r0, [sp, #24]
    a59a:	e086      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a59c:	2000      	movs	r0, #0
    a59e:	9007      	str	r0, [sp, #28]
    a5a0:	2021      	movs	r0, #33	; 0x21
    a5a2:	9006      	str	r0, [sp, #24]
    a5a4:	e081      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5a6:	2000      	movs	r0, #0
    a5a8:	9007      	str	r0, [sp, #28]
    a5aa:	2028      	movs	r0, #40	; 0x28
    a5ac:	9006      	str	r0, [sp, #24]
    a5ae:	e07c      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5b0:	2000      	movs	r0, #0
    a5b2:	9007      	str	r0, [sp, #28]
    a5b4:	2029      	movs	r0, #41	; 0x29
    a5b6:	9006      	str	r0, [sp, #24]
    a5b8:	e077      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5ba:	2000      	movs	r0, #0
    a5bc:	9007      	str	r0, [sp, #28]
    a5be:	202a      	movs	r0, #42	; 0x2a
    a5c0:	9006      	str	r0, [sp, #24]
    a5c2:	e072      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5c4:	2000      	movs	r0, #0
    a5c6:	9007      	str	r0, [sp, #28]
    a5c8:	202b      	movs	r0, #43	; 0x2b
    a5ca:	9006      	str	r0, [sp, #24]
    a5cc:	e06d      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5ce:	2000      	movs	r0, #0
    a5d0:	9007      	str	r0, [sp, #28]
    a5d2:	202c      	movs	r0, #44	; 0x2c
    a5d4:	9006      	str	r0, [sp, #24]
    a5d6:	e068      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5d8:	2000      	movs	r0, #0
    a5da:	9007      	str	r0, [sp, #28]
    a5dc:	202e      	movs	r0, #46	; 0x2e
    a5de:	9006      	str	r0, [sp, #24]
    a5e0:	e063      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5e2:	2000      	movs	r0, #0
    a5e4:	9007      	str	r0, [sp, #28]
    a5e6:	2030      	movs	r0, #48	; 0x30
    a5e8:	9006      	str	r0, [sp, #24]
    a5ea:	e05e      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5ec:	2000      	movs	r0, #0
    a5ee:	9007      	str	r0, [sp, #28]
    a5f0:	203a      	movs	r0, #58	; 0x3a
    a5f2:	9006      	str	r0, [sp, #24]
    a5f4:	e059      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a5f6:	2000      	movs	r0, #0
    a5f8:	9007      	str	r0, [sp, #28]
    a5fa:	2036      	movs	r0, #54	; 0x36
    a5fc:	9006      	str	r0, [sp, #24]
    a5fe:	e054      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a600:	2000      	movs	r0, #0
    a602:	9007      	str	r0, [sp, #28]
    a604:	20b1      	movs	r0, #177	; 0xb1
    a606:	9006      	str	r0, [sp, #24]
    a608:	e04f      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a60a:	2000      	movs	r0, #0
    a60c:	9007      	str	r0, [sp, #28]
    a60e:	20b2      	movs	r0, #178	; 0xb2
    a610:	9006      	str	r0, [sp, #24]
    a612:	e04a      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a614:	2000      	movs	r0, #0
    a616:	9007      	str	r0, [sp, #28]
    a618:	20b3      	movs	r0, #179	; 0xb3
    a61a:	9006      	str	r0, [sp, #24]
    a61c:	e045      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a61e:	2000      	movs	r0, #0
    a620:	9007      	str	r0, [sp, #28]
    a622:	20b4      	movs	r0, #180	; 0xb4
    a624:	9006      	str	r0, [sp, #24]
    a626:	e040      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a628:	2000      	movs	r0, #0
    a62a:	9007      	str	r0, [sp, #28]
    a62c:	20b6      	movs	r0, #182	; 0xb6
    a62e:	9006      	str	r0, [sp, #24]
    a630:	e03b      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a632:	2000      	movs	r0, #0
    a634:	9007      	str	r0, [sp, #28]
    a636:	20c0      	movs	r0, #192	; 0xc0
    a638:	9006      	str	r0, [sp, #24]
    a63a:	e036      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a63c:	2000      	movs	r0, #0
    a63e:	9007      	str	r0, [sp, #28]
    a640:	20c1      	movs	r0, #193	; 0xc1
    a642:	9006      	str	r0, [sp, #24]
    a644:	e031      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a646:	2000      	movs	r0, #0
    a648:	9007      	str	r0, [sp, #28]
    a64a:	20c2      	movs	r0, #194	; 0xc2
    a64c:	9006      	str	r0, [sp, #24]
    a64e:	e02c      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a650:	2000      	movs	r0, #0
    a652:	9007      	str	r0, [sp, #28]
    a654:	20c3      	movs	r0, #195	; 0xc3
    a656:	9006      	str	r0, [sp, #24]
    a658:	e027      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a65a:	2000      	movs	r0, #0
    a65c:	9007      	str	r0, [sp, #28]
    a65e:	20c4      	movs	r0, #196	; 0xc4
    a660:	9006      	str	r0, [sp, #24]
    a662:	e022      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a664:	2000      	movs	r0, #0
    a666:	9007      	str	r0, [sp, #28]
    a668:	20c5      	movs	r0, #197	; 0xc5
    a66a:	9006      	str	r0, [sp, #24]
    a66c:	e01d      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a66e:	2000      	movs	r0, #0
    a670:	9007      	str	r0, [sp, #28]
    a672:	20da      	movs	r0, #218	; 0xda
    a674:	9006      	str	r0, [sp, #24]
    a676:	e018      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a678:	2000      	movs	r0, #0
    a67a:	9007      	str	r0, [sp, #28]
    a67c:	20db      	movs	r0, #219	; 0xdb
    a67e:	9006      	str	r0, [sp, #24]
    a680:	e013      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a682:	2000      	movs	r0, #0
    a684:	9007      	str	r0, [sp, #28]
    a686:	20dc      	movs	r0, #220	; 0xdc
    a688:	9006      	str	r0, [sp, #24]
    a68a:	e00e      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a68c:	2000      	movs	r0, #0
    a68e:	9007      	str	r0, [sp, #28]
    a690:	20dd      	movs	r0, #221	; 0xdd
    a692:	9006      	str	r0, [sp, #24]
    a694:	e009      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a696:	2000      	movs	r0, #0
    a698:	9007      	str	r0, [sp, #28]
    a69a:	20fc      	movs	r0, #252	; 0xfc
    a69c:	9006      	str	r0, [sp, #24]
    a69e:	e004      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6a0:	2000      	movs	r0, #0
    a6a2:	9007      	str	r0, [sp, #28]
    a6a4:	20e0      	movs	r0, #224	; 0xe0
    a6a6:	9006      	str	r0, [sp, #24]
    a6a8:	e7ff      	b.n	a6aa <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
    a6aa:	9806      	ldr	r0, [sp, #24]
    a6ac:	9907      	ldr	r1, [sp, #28]
    a6ae:	9105      	str	r1, [sp, #20]
    a6b0:	9004      	str	r0, [sp, #16]
    a6b2:	2000      	movs	r0, #0
    a6b4:	9003      	str	r0, [sp, #12]
    a6b6:	2001      	movs	r0, #1
    a6b8:	9002      	str	r0, [sp, #8]
    a6ba:	9802      	ldr	r0, [sp, #8]
    a6bc:	9903      	ldr	r1, [sp, #12]
    a6be:	9a04      	ldr	r2, [sp, #16]
    a6c0:	9b05      	ldr	r3, [sp, #20]
    a6c2:	b00a      	add	sp, #40	; 0x28
    a6c4:	4770      	bx	lr

0000a6c6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
    a6c6:	b580      	push	{r7, lr}
    a6c8:	b08a      	sub	sp, #40	; 0x28
    a6ca:	9009      	str	r0, [sp, #36]	; 0x24
    a6cc:	f7ff fe30 	bl	a330 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
    a6d0:	9108      	str	r1, [sp, #32]
    a6d2:	9007      	str	r0, [sp, #28]
    a6d4:	9306      	str	r3, [sp, #24]
    a6d6:	9205      	str	r2, [sp, #20]
    a6d8:	e7ff      	b.n	a6da <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
    a6da:	9807      	ldr	r0, [sp, #28]
    a6dc:	9908      	ldr	r1, [sp, #32]
    a6de:	9a05      	ldr	r2, [sp, #20]
    a6e0:	9b06      	ldr	r3, [sp, #24]
    a6e2:	f000 f859 	bl	a798 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
    a6e6:	9104      	str	r1, [sp, #16]
    a6e8:	9003      	str	r0, [sp, #12]
    a6ea:	9302      	str	r3, [sp, #8]
    a6ec:	9201      	str	r2, [sp, #4]
    a6ee:	e7ff      	b.n	a6f0 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
    a6f0:	9803      	ldr	r0, [sp, #12]
    a6f2:	9904      	ldr	r1, [sp, #16]
    a6f4:	9a01      	ldr	r2, [sp, #4]
    a6f6:	9b02      	ldr	r3, [sp, #8]
    a6f8:	b00a      	add	sp, #40	; 0x28
    a6fa:	bd80      	pop	{r7, pc}

0000a6fc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
    a6fc:	b08a      	sub	sp, #40	; 0x28
    a6fe:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
    a700:	7800      	ldrb	r0, [r0, #0]
    a702:	4601      	mov	r1, r0
    a704:	2800      	cmp	r0, #0
    a706:	9101      	str	r1, [sp, #4]
    a708:	d00f      	beq.n	a72a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
    a70a:	e7ff      	b.n	a70c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
    a70c:	9801      	ldr	r0, [sp, #4]
    a70e:	2860      	cmp	r0, #96	; 0x60
    a710:	d00f      	beq.n	a732 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
    a712:	e7ff      	b.n	a714 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
    a714:	9801      	ldr	r0, [sp, #4]
    a716:	28a0      	cmp	r0, #160	; 0xa0
    a718:	d001      	beq.n	a71e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
    a71a:	e7ff      	b.n	a71c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
    a71c:	e00e      	b.n	a73c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
    a71e:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
    a720:	9007      	str	r0, [sp, #28]
    a722:	20a0      	movs	r0, #160	; 0xa0
    a724:	9006      	str	r0, [sp, #24]
    a726:	e00e      	b.n	a746 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a728:	defe      	udf	#254	; 0xfe
    a72a:	2000      	movs	r0, #0
    a72c:	9007      	str	r0, [sp, #28]
    a72e:	9006      	str	r0, [sp, #24]
    a730:	e009      	b.n	a746 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a732:	2000      	movs	r0, #0
    a734:	9007      	str	r0, [sp, #28]
    a736:	2060      	movs	r0, #96	; 0x60
    a738:	9006      	str	r0, [sp, #24]
    a73a:	e004      	b.n	a746 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a73c:	2000      	movs	r0, #0
    a73e:	9007      	str	r0, [sp, #28]
    a740:	20c0      	movs	r0, #192	; 0xc0
    a742:	9006      	str	r0, [sp, #24]
    a744:	e7ff      	b.n	a746 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
    a746:	9806      	ldr	r0, [sp, #24]
    a748:	9907      	ldr	r1, [sp, #28]
    a74a:	9105      	str	r1, [sp, #20]
    a74c:	9004      	str	r0, [sp, #16]
    a74e:	2000      	movs	r0, #0
    a750:	9003      	str	r0, [sp, #12]
    a752:	2001      	movs	r0, #1
    a754:	9002      	str	r0, [sp, #8]
    a756:	9802      	ldr	r0, [sp, #8]
    a758:	9903      	ldr	r1, [sp, #12]
    a75a:	9a04      	ldr	r2, [sp, #16]
    a75c:	9b05      	ldr	r3, [sp, #20]
    a75e:	b00a      	add	sp, #40	; 0x28
    a760:	4770      	bx	lr

0000a762 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
    a762:	b580      	push	{r7, lr}
    a764:	b08a      	sub	sp, #40	; 0x28
    a766:	9009      	str	r0, [sp, #36]	; 0x24
    a768:	f7ff ffc8 	bl	a6fc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
    a76c:	9108      	str	r1, [sp, #32]
    a76e:	9007      	str	r0, [sp, #28]
    a770:	9306      	str	r3, [sp, #24]
    a772:	9205      	str	r2, [sp, #20]
    a774:	e7ff      	b.n	a776 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
    a776:	9807      	ldr	r0, [sp, #28]
    a778:	9908      	ldr	r1, [sp, #32]
    a77a:	9a05      	ldr	r2, [sp, #20]
    a77c:	9b06      	ldr	r3, [sp, #24]
    a77e:	f000 f863 	bl	a848 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
    a782:	9104      	str	r1, [sp, #16]
    a784:	9003      	str	r0, [sp, #12]
    a786:	9302      	str	r3, [sp, #8]
    a788:	9201      	str	r2, [sp, #4]
    a78a:	e7ff      	b.n	a78c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
    a78c:	9803      	ldr	r0, [sp, #12]
    a78e:	9904      	ldr	r1, [sp, #16]
    a790:	9a01      	ldr	r2, [sp, #4]
    a792:	9b02      	ldr	r3, [sp, #8]
    a794:	b00a      	add	sp, #40	; 0x28
    a796:	bd80      	pop	{r7, pc}

0000a798 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
    a798:	b5b0      	push	{r4, r5, r7, lr}
    a79a:	b090      	sub	sp, #64	; 0x40
    a79c:	469c      	mov	ip, r3
    a79e:	4696      	mov	lr, r2
    a7a0:	460c      	mov	r4, r1
    a7a2:	4605      	mov	r5, r0
    a7a4:	9103      	str	r1, [sp, #12]
    a7a6:	9002      	str	r0, [sp, #8]
    a7a8:	9305      	str	r3, [sp, #20]
    a7aa:	9204      	str	r2, [sp, #16]
    a7ac:	2000      	movs	r0, #0
    a7ae:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a7b2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a7b6:	2001      	movs	r0, #1
    a7b8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a7bc:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a7c0:	9802      	ldr	r0, [sp, #8]
    a7c2:	2800      	cmp	r0, #0
    a7c4:	d001      	beq.n	a7ca <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
    a7c6:	e7ff      	b.n	a7c8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
    a7c8:	e004      	b.n	a7d4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
    a7ca:	2000      	movs	r0, #0
    a7cc:	9007      	str	r0, [sp, #28]
    a7ce:	9006      	str	r0, [sp, #24]
    a7d0:	e023      	b.n	a81a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a7d2:	defe      	udf	#254	; 0xfe
    a7d4:	2000      	movs	r0, #0
    a7d6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a7da:	9904      	ldr	r1, [sp, #16]
    a7dc:	9a05      	ldr	r2, [sp, #20]
    a7de:	920f      	str	r2, [sp, #60]	; 0x3c
    a7e0:	910e      	str	r1, [sp, #56]	; 0x38
    a7e2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a7e6:	920b      	str	r2, [sp, #44]	; 0x2c
    a7e8:	910a      	str	r1, [sp, #40]	; 0x28
    a7ea:	980a      	ldr	r0, [sp, #40]	; 0x28
    a7ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a7ee:	f000 f883 	bl	a8f8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
    a7f2:	9101      	str	r1, [sp, #4]
    a7f4:	9000      	str	r0, [sp, #0]
    a7f6:	e7ff      	b.n	a7f8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
    a7f8:	9800      	ldr	r0, [sp, #0]
    a7fa:	9008      	str	r0, [sp, #32]
    a7fc:	9901      	ldr	r1, [sp, #4]
    a7fe:	9109      	str	r1, [sp, #36]	; 0x24
    a800:	2200      	movs	r2, #0
    a802:	9207      	str	r2, [sp, #28]
    a804:	2201      	movs	r2, #1
    a806:	9206      	str	r2, [sp, #24]
    a808:	e007      	b.n	a81a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
    a80a:	9802      	ldr	r0, [sp, #8]
    a80c:	2801      	cmp	r0, #1
    a80e:	d010      	beq.n	a832 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
    a810:	e019      	b.n	a846 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
    a812:	2000      	movs	r0, #0
    a814:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a818:	e7f7      	b.n	a80a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a81a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    a81e:	07c0      	lsls	r0, r0, #31
    a820:	2800      	cmp	r0, #0
    a822:	d1f6      	bne.n	a812 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
    a824:	e7f1      	b.n	a80a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
    a826:	9806      	ldr	r0, [sp, #24]
    a828:	9907      	ldr	r1, [sp, #28]
    a82a:	9a08      	ldr	r2, [sp, #32]
    a82c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a82e:	b010      	add	sp, #64	; 0x40
    a830:	bdb0      	pop	{r4, r5, r7, pc}
    a832:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a836:	07c0      	lsls	r0, r0, #31
    a838:	2800      	cmp	r0, #0
    a83a:	d0f4      	beq.n	a826 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a83c:	e7ff      	b.n	a83e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
    a83e:	2000      	movs	r0, #0
    a840:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a844:	e7ef      	b.n	a826 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
    a846:	e7ee      	b.n	a826 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

0000a848 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
    a848:	b5b0      	push	{r4, r5, r7, lr}
    a84a:	b090      	sub	sp, #64	; 0x40
    a84c:	469c      	mov	ip, r3
    a84e:	4696      	mov	lr, r2
    a850:	460c      	mov	r4, r1
    a852:	4605      	mov	r5, r0
    a854:	9103      	str	r1, [sp, #12]
    a856:	9002      	str	r0, [sp, #8]
    a858:	9305      	str	r3, [sp, #20]
    a85a:	9204      	str	r2, [sp, #16]
    a85c:	2000      	movs	r0, #0
    a85e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a862:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a866:	2001      	movs	r0, #1
    a868:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a86c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a870:	9802      	ldr	r0, [sp, #8]
    a872:	2800      	cmp	r0, #0
    a874:	d001      	beq.n	a87a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
    a876:	e7ff      	b.n	a878 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
    a878:	e004      	b.n	a884 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
    a87a:	2000      	movs	r0, #0
    a87c:	9007      	str	r0, [sp, #28]
    a87e:	9006      	str	r0, [sp, #24]
    a880:	e023      	b.n	a8ca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    a882:	defe      	udf	#254	; 0xfe
    a884:	2000      	movs	r0, #0
    a886:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a88a:	9904      	ldr	r1, [sp, #16]
    a88c:	9a05      	ldr	r2, [sp, #20]
    a88e:	920f      	str	r2, [sp, #60]	; 0x3c
    a890:	910e      	str	r1, [sp, #56]	; 0x38
    a892:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a896:	920b      	str	r2, [sp, #44]	; 0x2c
    a898:	910a      	str	r1, [sp, #40]	; 0x28
    a89a:	980a      	ldr	r0, [sp, #40]	; 0x28
    a89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    a89e:	f009 fd8a 	bl	143b6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
    a8a2:	9101      	str	r1, [sp, #4]
    a8a4:	9000      	str	r0, [sp, #0]
    a8a6:	e7ff      	b.n	a8a8 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
    a8a8:	9800      	ldr	r0, [sp, #0]
    a8aa:	9008      	str	r0, [sp, #32]
    a8ac:	9901      	ldr	r1, [sp, #4]
    a8ae:	9109      	str	r1, [sp, #36]	; 0x24
    a8b0:	2200      	movs	r2, #0
    a8b2:	9207      	str	r2, [sp, #28]
    a8b4:	2201      	movs	r2, #1
    a8b6:	9206      	str	r2, [sp, #24]
    a8b8:	e007      	b.n	a8ca <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
    a8ba:	9802      	ldr	r0, [sp, #8]
    a8bc:	2801      	cmp	r0, #1
    a8be:	d010      	beq.n	a8e2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
    a8c0:	e019      	b.n	a8f6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
    a8c2:	2000      	movs	r0, #0
    a8c4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    a8c8:	e7f7      	b.n	a8ba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    a8ca:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    a8ce:	07c0      	lsls	r0, r0, #31
    a8d0:	2800      	cmp	r0, #0
    a8d2:	d1f6      	bne.n	a8c2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
    a8d4:	e7f1      	b.n	a8ba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
    a8d6:	9806      	ldr	r0, [sp, #24]
    a8d8:	9907      	ldr	r1, [sp, #28]
    a8da:	9a08      	ldr	r2, [sp, #32]
    a8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    a8de:	b010      	add	sp, #64	; 0x40
    a8e0:	bdb0      	pop	{r4, r5, r7, pc}
    a8e2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    a8e6:	07c0      	lsls	r0, r0, #31
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d0f4      	beq.n	a8d6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    a8ec:	e7ff      	b.n	a8ee <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
    a8ee:	2000      	movs	r0, #0
    a8f0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    a8f4:	e7ef      	b.n	a8d6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
    a8f6:	e7ee      	b.n	a8d6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

0000a8f8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
    a8f8:	b084      	sub	sp, #16
    a8fa:	460a      	mov	r2, r1
    a8fc:	4603      	mov	r3, r0
    a8fe:	9103      	str	r1, [sp, #12]
    a900:	9002      	str	r0, [sp, #8]
    a902:	b004      	add	sp, #16
    a904:	4770      	bx	lr

0000a906 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h44bec417aa74de39E>:
    a906:	b084      	sub	sp, #16
    a908:	9000      	str	r0, [sp, #0]
    a90a:	9101      	str	r1, [sp, #4]
    a90c:	9102      	str	r1, [sp, #8]
    a90e:	9003      	str	r0, [sp, #12]
    a910:	6802      	ldr	r2, [r0, #0]
    a912:	6840      	ldr	r0, [r0, #4]
    a914:	680b      	ldr	r3, [r1, #0]
    a916:	6849      	ldr	r1, [r1, #4]
    a918:	4048      	eors	r0, r1
    a91a:	ea82 0103 	eor.w	r1, r2, r3
    a91e:	4308      	orrs	r0, r1
    a920:	fab0 f080 	clz	r0, r0
    a924:	0940      	lsrs	r0, r0, #5
    a926:	b004      	add	sp, #16
    a928:	4770      	bx	lr

0000a92a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    a92a:	b5b0      	push	{r4, r5, r7, lr}
    a92c:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    a92e:	f64b 4080 	movw	r0, #48256	; 0xbc80
    a932:	f2c0 0001 	movt	r0, #1
    a936:	2112      	movs	r1, #18
    a938:	f7fe fac5 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    a93c:	e7ff      	b.n	a93e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    a93e:	f240 1064 	movw	r0, #356	; 0x164
    a942:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a946:	210a      	movs	r1, #10
    a948:	f009 f9b4 	bl	13cb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    a94c:	9012      	str	r0, [sp, #72]	; 0x48
    a94e:	e7ff      	b.n	a950 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x26>
    a950:	9812      	ldr	r0, [sp, #72]	; 0x48
    a952:	f7fe f911 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    a956:	9014      	str	r0, [sp, #80]	; 0x50
    a958:	e7ff      	b.n	a95a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x30>
    a95a:	9814      	ldr	r0, [sp, #80]	; 0x50
    a95c:	1e41      	subs	r1, r0, #1
    a95e:	bf18      	it	ne
    a960:	2101      	movne	r1, #1
    a962:	2801      	cmp	r0, #1
    a964:	d001      	beq.n	a96a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x40>
    a966:	e7ff      	b.n	a968 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x3e>
    a968:	e008      	b.n	a97c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    a96a:	f240 1064 	movw	r0, #356	; 0x164
    a96e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a972:	f009 fa38 	bl	13de6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    a976:	9011      	str	r0, [sp, #68]	; 0x44
    a978:	e00f      	b.n	a99a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    a97a:	defe      	udf	#254	; 0xfe
    a97c:	9814      	ldr	r0, [sp, #80]	; 0x50
    a97e:	9036      	str	r0, [sp, #216]	; 0xd8
    a980:	f007 fbc2 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    a984:	9010      	str	r0, [sp, #64]	; 0x40
    a986:	e002      	b.n	a98e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    a988:	9813      	ldr	r0, [sp, #76]	; 0x4c
    a98a:	b03e      	add	sp, #248	; 0xf8
    a98c:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    a98e:	9810      	ldr	r0, [sp, #64]	; 0x40
    a990:	f7fe f8e6 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    a994:	9013      	str	r0, [sp, #76]	; 0x4c
    a996:	e7ff      	b.n	a998 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x6e>
    a998:	e7f6      	b.n	a988 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_low() ? ;
    a99a:	9811      	ldr	r0, [sp, #68]	; 0x44
    a99c:	f7fe f8ec 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    a9a0:	9015      	str	r0, [sp, #84]	; 0x54
    a9a2:	e7ff      	b.n	a9a4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x7a>
    a9a4:	9815      	ldr	r0, [sp, #84]	; 0x54
    a9a6:	1e41      	subs	r1, r0, #1
    a9a8:	bf18      	it	ne
    a9aa:	2101      	movne	r1, #1
    a9ac:	2801      	cmp	r0, #1
    a9ae:	d001      	beq.n	a9b4 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x8a>
    a9b0:	e7ff      	b.n	a9b2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x88>
    a9b2:	e008      	b.n	a9c6 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    a9b4:	f240 1068 	movw	r0, #360	; 0x168
    a9b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a9bc:	2114      	movs	r1, #20
    a9be:	f009 fa29 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    a9c2:	e00d      	b.n	a9e0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb6>
        TOUCH_RESET.set_low() ? ;
    a9c4:	defe      	udf	#254	; 0xfe
    a9c6:	9815      	ldr	r0, [sp, #84]	; 0x54
    a9c8:	9037      	str	r0, [sp, #220]	; 0xdc
    a9ca:	f007 fb9d 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    a9ce:	900f      	str	r0, [sp, #60]	; 0x3c
    a9d0:	e7ff      	b.n	a9d2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xa8>
    a9d2:	980f      	ldr	r0, [sp, #60]	; 0x3c
    a9d4:	f7fe f8c4 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    a9d8:	9013      	str	r0, [sp, #76]	; 0x4c
    a9da:	e7ff      	b.n	a9dc <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb2>
    a9dc:	e7ff      	b.n	a9de <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
    a9de:	e7d3      	b.n	a988 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>
        TOUCH_RESET.set_high() ? ;
    a9e0:	f240 1064 	movw	r0, #356	; 0x164
    a9e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a9e8:	f009 fa08 	bl	13dfc <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    a9ec:	900e      	str	r0, [sp, #56]	; 0x38
    a9ee:	e7ff      	b.n	a9f0 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xc6>
    a9f0:	980e      	ldr	r0, [sp, #56]	; 0x38
    a9f2:	f7fe f8c1 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    a9f6:	9016      	str	r0, [sp, #88]	; 0x58
    a9f8:	e7ff      	b.n	a9fa <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xd0>
    a9fa:	9816      	ldr	r0, [sp, #88]	; 0x58
    a9fc:	1e41      	subs	r1, r0, #1
    a9fe:	bf18      	it	ne
    aa00:	2101      	movne	r1, #1
    aa02:	2801      	cmp	r0, #1
    aa04:	d001      	beq.n	aa0a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xe0>
    aa06:	e7ff      	b.n	aa08 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xde>
    aa08:	e008      	b.n	aa1c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aa0a:	f240 1068 	movw	r0, #360	; 0x168
    aa0e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aa12:	21c8      	movs	r1, #200	; 0xc8
    aa14:	f009 f9fe 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aa18:	e00c      	b.n	aa34 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x10a>
        TOUCH_RESET.set_high() ? ;
    aa1a:	defe      	udf	#254	; 0xfe
    aa1c:	9816      	ldr	r0, [sp, #88]	; 0x58
    aa1e:	9038      	str	r0, [sp, #224]	; 0xe0
    aa20:	f007 fb72 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    aa24:	900d      	str	r0, [sp, #52]	; 0x34
    aa26:	e7ff      	b.n	aa28 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xfe>
    aa28:	980d      	ldr	r0, [sp, #52]	; 0x34
    aa2a:	f7fe f899 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    aa2e:	9013      	str	r0, [sp, #76]	; 0x4c
    aa30:	e7ff      	b.n	aa32 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x108>
    aa32:	e7d4      	b.n	a9de <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    aa34:	f240 1068 	movw	r0, #360	; 0x168
    aa38:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aa3c:	21c8      	movs	r1, #200	; 0xc8
    aa3e:	f009 f9e9 	bl	13e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    aa42:	e7ff      	b.n	aa44 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    aa44:	f64a 30e7 	movw	r0, #44007	; 0xabe7
    aa48:	f2c0 0000 	movt	r0, #0
    aa4c:	9017      	str	r0, [sp, #92]	; 0x5c
    aa4e:	9817      	ldr	r0, [sp, #92]	; 0x5c
    aa50:	f240 11fc 	movw	r1, #508	; 0x1fc
    aa54:	f2c2 0100 	movt	r1, #8192	; 0x2000
    aa58:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    aa5a:	f64a 309b 	movw	r0, #43931	; 0xab9b
    aa5e:	f2c0 0000 	movt	r0, #0
    aa62:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    aa64:	e7ff      	b.n	aa66 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    aa66:	9919      	ldr	r1, [sp, #100]	; 0x64
    aa68:	4668      	mov	r0, sp
    aa6a:	2201      	movs	r2, #1
    aa6c:	6002      	str	r2, [r0, #0]
    aa6e:	201c      	movs	r0, #28
    aa70:	2200      	movs	r2, #0
    aa72:	2302      	movs	r3, #2
    aa74:	f00c fc44 	bl	17300 <hal_gpio_irq_init>
    aa78:	9018      	str	r0, [sp, #96]	; 0x60
    aa7a:	e7ff      	b.n	aa7c <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    aa7c:	f64b 4098 	movw	r0, #48280	; 0xbc98
    aa80:	f2c0 0001 	movt	r0, #1
    aa84:	6800      	ldr	r0, [r0, #0]
    aa86:	a918      	add	r1, sp, #96	; 0x60
    aa88:	911a      	str	r1, [sp, #104]	; 0x68
    aa8a:	901b      	str	r0, [sp, #108]	; 0x6c
    aa8c:	981a      	ldr	r0, [sp, #104]	; 0x68
    aa8e:	9039      	str	r0, [sp, #228]	; 0xe4
    aa90:	991b      	ldr	r1, [sp, #108]	; 0x6c
    aa92:	913a      	str	r1, [sp, #232]	; 0xe8
    aa94:	6802      	ldr	r2, [r0, #0]
    aa96:	680b      	ldr	r3, [r1, #0]
    aa98:	429a      	cmp	r2, r3
    aa9a:	900c      	str	r0, [sp, #48]	; 0x30
    aa9c:	910b      	str	r1, [sp, #44]	; 0x2c
    aa9e:	d104      	bne.n	aaaa <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x180>
    aaa0:	e7ff      	b.n	aaa2 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x178>
    aaa2:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    aaa4:	f00c fc68 	bl	17378 <hal_gpio_irq_enable>
    aaa8:	e072      	b.n	ab90 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    aaaa:	f64b 40f0 	movw	r0, #48368	; 0xbcf0
    aaae:	f2c0 0001 	movt	r0, #1
    aab2:	6801      	ldr	r1, [r0, #0]
    aab4:	980c      	ldr	r0, [sp, #48]	; 0x30
    aab6:	902b      	str	r0, [sp, #172]	; 0xac
    aab8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    aaba:	922c      	str	r2, [sp, #176]	; 0xb0
    aabc:	f64b 530c 	movw	r3, #48396	; 0xbd0c
    aac0:	f2c0 0301 	movt	r3, #1
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	f64b 5c10 	movw	ip, #48400	; 0xbd10
    aaca:	f2c0 0c01 	movt	ip, #1
    aace:	f8dc c000 	ldr.w	ip, [ip]
    aad2:	46ee      	mov	lr, sp
    aad4:	2400      	movs	r4, #0
    aad6:	f8ce 4000 	str.w	r4, [lr]
    aada:	a82d      	add	r0, sp, #180	; 0xb4
    aadc:	2201      	movs	r2, #1
    aade:	910a      	str	r1, [sp, #40]	; 0x28
    aae0:	4619      	mov	r1, r3
    aae2:	4663      	mov	r3, ip
    aae4:	f009 fc8b 	bl	143fe <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    aae8:	e7ff      	b.n	aaea <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1c0>
    aaea:	a82b      	add	r0, sp, #172	; 0xac
    aaec:	9028      	str	r0, [sp, #160]	; 0xa0
    aaee:	a82c      	add	r0, sp, #176	; 0xb0
    aaf0:	9029      	str	r0, [sp, #164]	; 0xa4
    aaf2:	a82d      	add	r0, sp, #180	; 0xb4
    aaf4:	902a      	str	r0, [sp, #168]	; 0xa8
    aaf6:	9828      	ldr	r0, [sp, #160]	; 0xa0
    aaf8:	903b      	str	r0, [sp, #236]	; 0xec
    aafa:	9929      	ldr	r1, [sp, #164]	; 0xa4
    aafc:	913c      	str	r1, [sp, #240]	; 0xf0
    aafe:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    ab00:	923d      	str	r2, [sp, #244]	; 0xf4
    ab02:	f241 23ad 	movw	r3, #4781	; 0x12ad
    ab06:	f2c0 0301 	movt	r3, #1
    ab0a:	9109      	str	r1, [sp, #36]	; 0x24
    ab0c:	4619      	mov	r1, r3
    ab0e:	9208      	str	r2, [sp, #32]
    ab10:	f7fe fb5d 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    ab14:	9007      	str	r0, [sp, #28]
    ab16:	9106      	str	r1, [sp, #24]
    ab18:	e7ff      	b.n	ab1a <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x1f0>
    ab1a:	f241 21ad 	movw	r1, #4781	; 0x12ad
    ab1e:	f2c0 0101 	movt	r1, #1
    ab22:	9809      	ldr	r0, [sp, #36]	; 0x24
    ab24:	f7fe fb53 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    ab28:	9005      	str	r0, [sp, #20]
    ab2a:	9104      	str	r1, [sp, #16]
    ab2c:	e7ff      	b.n	ab2e <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x204>
    ab2e:	f245 712b 	movw	r1, #22315	; 0x572b
    ab32:	f2c0 0101 	movt	r1, #1
    ab36:	9808      	ldr	r0, [sp, #32]
    ab38:	f7fe fb88 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    ab3c:	9003      	str	r0, [sp, #12]
    ab3e:	9102      	str	r1, [sp, #8]
    ab40:	e7ff      	b.n	ab42 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x218>
    ab42:	9807      	ldr	r0, [sp, #28]
    ab44:	9022      	str	r0, [sp, #136]	; 0x88
    ab46:	9906      	ldr	r1, [sp, #24]
    ab48:	9123      	str	r1, [sp, #140]	; 0x8c
    ab4a:	9a05      	ldr	r2, [sp, #20]
    ab4c:	9224      	str	r2, [sp, #144]	; 0x90
    ab4e:	9b04      	ldr	r3, [sp, #16]
    ab50:	9325      	str	r3, [sp, #148]	; 0x94
    ab52:	f8dd c00c 	ldr.w	ip, [sp, #12]
    ab56:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    ab5a:	f8dd e008 	ldr.w	lr, [sp, #8]
    ab5e:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    ab62:	466c      	mov	r4, sp
    ab64:	2503      	movs	r5, #3
    ab66:	6025      	str	r5, [r4, #0]
    ab68:	a81c      	add	r0, sp, #112	; 0x70
    ab6a:	ab22      	add	r3, sp, #136	; 0x88
    ab6c:	990a      	ldr	r1, [sp, #40]	; 0x28
    ab6e:	462a      	mov	r2, r5
    ab70:	f009 fc45 	bl	143fe <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>
    ab74:	e7ff      	b.n	ab76 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x24c>
    ab76:	f64b 5030 	movw	r0, #48432	; 0xbd30
    ab7a:	f2c0 0001 	movt	r0, #1
    ab7e:	f00a fae6 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    ab82:	9001      	str	r0, [sp, #4]
    ab84:	e7ff      	b.n	ab86 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x25c>
    ab86:	a81c      	add	r0, sp, #112	; 0x70
    ab88:	9901      	ldr	r1, [sp, #4]
    ab8a:	f00a fb1d 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    ab8e:	defe      	udf	#254	; 0xfe
    ab90:	2000      	movs	r0, #0
    Ok(())
    ab92:	9013      	str	r0, [sp, #76]	; 0x4c
    ab94:	2001      	movs	r0, #1
    ab96:	9013      	str	r0, [sp, #76]	; 0x4c
}
    ab98:	e6f6      	b.n	a988 <_ZN3app12touch_sensor18start_touch_sensor17hf14e73d8f583b394E+0x5e>

0000ab9a <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    ab9a:	b580      	push	{r7, lr}
    ab9c:	b086      	sub	sp, #24
    ab9e:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    aba0:	f240 11fc 	movw	r1, #508	; 0x1fc
    aba4:	f2c2 0100 	movt	r1, #8192	; 0x2000
    aba8:	6088      	str	r0, [r1, #8]
    abaa:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    abac:	f7fd fff1 	bl	8b92 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    abb0:	e7ff      	b.n	abb2 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x18>
    abb2:	f64b 0122 	movw	r1, #47138	; 0xb822
    abb6:	f2c0 0101 	movt	r1, #1
    abba:	f64b 5348 	movw	r3, #48456	; 0xbd48
    abbe:	f2c0 0301 	movt	r3, #1
    abc2:	a802      	add	r0, sp, #8
    abc4:	2208      	movs	r2, #8
    abc6:	f7fd fe04 	bl	87d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h0131aa32521d349aE>
    abca:	4601      	mov	r1, r0
    abcc:	9005      	str	r0, [sp, #20]
    abce:	9101      	str	r1, [sp, #4]
    abd0:	e7ff      	b.n	abd2 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    abd2:	f240 11fc 	movw	r1, #508	; 0x1fc
    abd6:	f2c2 0100 	movt	r1, #8192	; 0x2000
    abda:	9801      	ldr	r0, [sp, #4]
    abdc:	f00d fc5f 	bl	1849e <os_eventq_put>
    abe0:	e7ff      	b.n	abe2 <_ZN3app12touch_sensor23touch_interrupt_handler17h23ae8d6a8130e18dE+0x48>
    //console::print("touch\n"); ////
}
    abe2:	b006      	add	sp, #24
    abe4:	bd80      	pop	{r7, pc}

0000abe6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    abe6:	b580      	push	{r7, lr}
    abe8:	b094      	sub	sp, #80	; 0x50
    abea:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    abec:	f240 1068 	movw	r0, #360	; 0x168
    abf0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    abf4:	f000 f894 	bl	ad20 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>
    abf8:	9006      	str	r0, [sp, #24]
    abfa:	e7ff      	b.n	abfc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x16>
    abfc:	f64b 5158 	movw	r1, #48472	; 0xbd58
    ac00:	f2c0 0101 	movt	r1, #1
    ac04:	f64b 5368 	movw	r3, #48488	; 0xbd68
    ac08:	f2c0 0301 	movt	r3, #1
    ac0c:	220e      	movs	r2, #14
    ac0e:	9806      	ldr	r0, [sp, #24]
    ac10:	f7fd ff73 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ac14:	e7ff      	b.n	ac16 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    ac16:	f240 1068 	movw	r0, #360	; 0x168
    ac1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac1e:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    ac22:	2100      	movs	r1, #0
    ac24:	9107      	str	r1, [sp, #28]
    ac26:	9008      	str	r0, [sp, #32]
    ac28:	9807      	ldr	r0, [sp, #28]
    ac2a:	9908      	ldr	r1, [sp, #32]
    ac2c:	f006 fe08 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ac30:	9005      	str	r0, [sp, #20]
    ac32:	9104      	str	r1, [sp, #16]
    ac34:	e7ff      	b.n	ac36 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x50>
    ac36:	9805      	ldr	r0, [sp, #20]
    ac38:	9009      	str	r0, [sp, #36]	; 0x24
    ac3a:	9904      	ldr	r1, [sp, #16]
    ac3c:	910a      	str	r1, [sp, #40]	; 0x28
    ac3e:	e7ff      	b.n	ac40 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    ac40:	a809      	add	r0, sp, #36	; 0x24
    ac42:	f006 fd72 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ac46:	910c      	str	r1, [sp, #48]	; 0x30
    ac48:	900b      	str	r0, [sp, #44]	; 0x2c
    ac4a:	e7ff      	b.n	ac4c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x66>
    ac4c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ac4e:	2800      	cmp	r0, #0
    ac50:	d001      	beq.n	ac56 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x70>
    ac52:	e7ff      	b.n	ac54 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x6e>
    ac54:	e002      	b.n	ac5c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    ac56:	b014      	add	sp, #80	; 0x50
    ac58:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    ac5a:	defe      	udf	#254	; 0xfe
    ac5c:	980c      	ldr	r0, [sp, #48]	; 0x30
    ac5e:	900f      	str	r0, [sp, #60]	; 0x3c
    ac60:	9010      	str	r0, [sp, #64]	; 0x40
    ac62:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    ac64:	2809      	cmp	r0, #9
    ac66:	9003      	str	r0, [sp, #12]
    ac68:	d851      	bhi.n	ad0e <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x128>
    ac6a:	e7ff      	b.n	ac6c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x86>
    ac6c:	f240 1068 	movw	r0, #360	; 0x168
    ac70:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ac74:	9903      	ldr	r1, [sp, #12]
    ac76:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    ac7a:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    ac7e:	4603      	mov	r3, r0
    ac80:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    ac84:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    ac88:	46e6      	mov	lr, ip
    ac8a:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    ac8e:	7912      	ldrb	r2, [r2, #4]
    ac90:	4694      	mov	ip, r2
    ac92:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    ac96:	2800      	cmp	r0, #0
    ac98:	9302      	str	r3, [sp, #8]
    ac9a:	f8cd e004 	str.w	lr, [sp, #4]
    ac9e:	f8cd c000 	str.w	ip, [sp]
    aca2:	d008      	beq.n	acb6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xd0>
    aca4:	e003      	b.n	acae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    aca6:	2001      	movs	r0, #1
    aca8:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    acac:	e008      	b.n	acc0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    acae:	2000      	movs	r0, #0
    acb0:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    acb4:	e004      	b.n	acc0 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xda>
    acb6:	9801      	ldr	r0, [sp, #4]
    acb8:	0401      	lsls	r1, r0, #16
    acba:	2900      	cmp	r1, #0
    acbc:	d0f3      	beq.n	aca6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc0>
    acbe:	e7f6      	b.n	acae <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xc8>
    acc0:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    acc4:	07c0      	lsls	r0, r0, #31
    acc6:	2800      	cmp	r0, #0
    acc8:	d105      	bne.n	acd6 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf0>
    acca:	e7ff      	b.n	accc <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xe6>
            if action != 0 && action != 2 { continue; }
    accc:	9800      	ldr	r0, [sp, #0]
    acce:	0601      	lsls	r1, r0, #24
    acd0:	2900      	cmp	r1, #0
    acd2:	d10a      	bne.n	acea <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x104>
    acd4:	e005      	b.n	ace2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
            if x == 0 && y == 0 { continue; }
    acd6:	e7ff      	b.n	acd8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
    acd8:	e7b2      	b.n	ac40 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
    acda:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    acdc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ace0:	e008      	b.n	acf4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    ace2:	2000      	movs	r0, #0
    ace4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    ace8:	e004      	b.n	acf4 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x10e>
    acea:	9800      	ldr	r0, [sp, #0]
    acec:	b2c1      	uxtb	r1, r0
    acee:	2902      	cmp	r1, #2
    acf0:	d1f3      	bne.n	acda <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf4>
    acf2:	e7f6      	b.n	ace2 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xfc>
    acf4:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    acf8:	07c0      	lsls	r0, r0, #31
    acfa:	2800      	cmp	r0, #0
    acfc:	d105      	bne.n	ad0a <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x124>
    acfe:	e7ff      	b.n	ad00 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x11a>
            super::handle_touch(x, y);
    ad00:	9802      	ldr	r0, [sp, #8]
    ad02:	9901      	ldr	r1, [sp, #4]
    ad04:	f001 fb94 	bl	c430 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>
    ad08:	e000      	b.n	ad0c <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x126>
            if action != 0 && action != 2 { continue; }
    ad0a:	e7e5      	b.n	acd8 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    ad0c:	e798      	b.n	ac40 <_ZN3app12touch_sensor20touch_event_callback17he5ddd15cc663c083E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    ad0e:	f64b 5078 	movw	r0, #48504	; 0xbd78
    ad12:	f2c0 0001 	movt	r0, #1
    ad16:	220a      	movs	r2, #10
    ad18:	9903      	ldr	r1, [sp, #12]
    ad1a:	f00a fa35 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    ad1e:	defe      	udf	#254	; 0xfe

0000ad20 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    ad20:	b580      	push	{r7, lr}
    ad22:	b0de      	sub	sp, #376	; 0x178
    ad24:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    ad26:	4669      	mov	r1, sp
    ad28:	223f      	movs	r2, #63	; 0x3f
    ad2a:	600a      	str	r2, [r1, #0]
    ad2c:	f240 13ba 	movw	r3, #442	; 0x1ba
    ad30:	f2c2 0300 	movt	r3, #8192	; 0x2000
    ad34:	2115      	movs	r1, #21
    ad36:	f04f 0c00 	mov.w	ip, #0
    ad3a:	9026      	str	r0, [sp, #152]	; 0x98
    ad3c:	4608      	mov	r0, r1
    ad3e:	4661      	mov	r1, ip
    ad40:	f000 fb97 	bl	b472 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>
    ad44:	9025      	str	r0, [sp, #148]	; 0x94
    ad46:	e7ff      	b.n	ad48 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x28>
    ad48:	f64b 5188 	movw	r1, #48520	; 0xbd88
    ad4c:	f2c0 0101 	movt	r1, #1
    ad50:	f64b 539c 	movw	r3, #48540	; 0xbd9c
    ad54:	f2c0 0301 	movt	r3, #1
    ad58:	2213      	movs	r2, #19
    ad5a:	9825      	ldr	r0, [sp, #148]	; 0x94
    ad5c:	f7fd fecd 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    ad60:	e7ff      	b.n	ad62 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x42>
    ad62:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    ad66:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    ad68:	9024      	str	r0, [sp, #144]	; 0x90
    ad6a:	9123      	str	r1, [sp, #140]	; 0x8c
    ad6c:	f010 fcfe 	bl	1b76c <__aeabi_memclr>
    ad70:	a827      	add	r0, sp, #156	; 0x9c
    ad72:	9924      	ldr	r1, [sp, #144]	; 0x90
    ad74:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ad76:	f010 fcfd 	bl	1b774 <__aeabi_memcpy>
    ad7a:	e7ff      	b.n	ad7c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5c>
    ad7c:	a927      	add	r1, sp, #156	; 0x9c
    ad7e:	2252      	movs	r2, #82	; 0x52
    ad80:	9826      	ldr	r0, [sp, #152]	; 0x98
    ad82:	f010 fcf7 	bl	1b774 <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    ad86:	f240 11ba 	movw	r1, #442	; 0x1ba
    ad8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
    ad8e:	7889      	ldrb	r1, [r1, #2]
    ad90:	f001 010f 	and.w	r1, r1, #15
    ad94:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ad96:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    ad9a:	2100      	movs	r1, #0
    data.count     = 0;
    ad9c:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    ada0:	9150      	str	r1, [sp, #320]	; 0x140
    ada2:	2105      	movs	r1, #5
    ada4:	9151      	str	r1, [sp, #324]	; 0x144
    ada6:	9950      	ldr	r1, [sp, #320]	; 0x140
    ada8:	9b51      	ldr	r3, [sp, #324]	; 0x144
    adaa:	9022      	str	r0, [sp, #136]	; 0x88
    adac:	4608      	mov	r0, r1
    adae:	4619      	mov	r1, r3
    adb0:	f006 fd46 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    adb4:	9021      	str	r0, [sp, #132]	; 0x84
    adb6:	9120      	str	r1, [sp, #128]	; 0x80
    adb8:	e7ff      	b.n	adba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x9a>
    adba:	9821      	ldr	r0, [sp, #132]	; 0x84
    adbc:	9052      	str	r0, [sp, #328]	; 0x148
    adbe:	9920      	ldr	r1, [sp, #128]	; 0x80
    adc0:	9153      	str	r1, [sp, #332]	; 0x14c
    adc2:	e7ff      	b.n	adc4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
    adc4:	a852      	add	r0, sp, #328	; 0x148
    adc6:	f006 fcb0 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    adca:	9155      	str	r1, [sp, #340]	; 0x154
    adcc:	9054      	str	r0, [sp, #336]	; 0x150
    adce:	e7ff      	b.n	add0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb0>
    add0:	9854      	ldr	r0, [sp, #336]	; 0x150
    add2:	2800      	cmp	r0, #0
    add4:	d001      	beq.n	adda <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xba>
    add6:	e7ff      	b.n	add8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xb8>
    add8:	e001      	b.n	adde <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xbe>
    adda:	e00d      	b.n	adf8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
    addc:	defe      	udf	#254	; 0xfe
    adde:	9855      	ldr	r0, [sp, #340]	; 0x154
    ade0:	9058      	str	r0, [sp, #352]	; 0x160
    ade2:	9059      	str	r0, [sp, #356]	; 0x164
    ade4:	905a      	str	r0, [sp, #360]	; 0x168
    ade6:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    ade8:	fba1 1200 	umull	r1, r2, r1, r0
    adec:	2a00      	cmp	r2, #0
    adee:	901f      	str	r0, [sp, #124]	; 0x7c
    adf0:	911e      	str	r1, [sp, #120]	; 0x78
    adf2:	f040 81c1 	bne.w	b178 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x458>
    adf6:	e002      	b.n	adfe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xde>
    adf8:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    adfa:	b05e      	add	sp, #376	; 0x178
    adfc:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    adfe:	981e      	ldr	r0, [sp, #120]	; 0x78
    ae00:	1d41      	adds	r1, r0, #5
    ae02:	460a      	mov	r2, r1
    ae04:	4281      	cmp	r1, r0
    ae06:	921d      	str	r2, [sp, #116]	; 0x74
    ae08:	f0c0 81c2 	bcc.w	b190 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x470>
    ae0c:	e7ff      	b.n	ae0e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xee>
    ae0e:	981d      	ldr	r0, [sp, #116]	; 0x74
    ae10:	283e      	cmp	r0, #62	; 0x3e
    ae12:	f200 81c9 	bhi.w	b1a8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x488>
    ae16:	e7ff      	b.n	ae18 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xf8>
    ae18:	f240 10ba 	movw	r0, #442	; 0x1ba
    ae1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae20:	991d      	ldr	r1, [sp, #116]	; 0x74
    ae22:	5c40      	ldrb	r0, [r0, r1]
    ae24:	0900      	lsrs	r0, r0, #4
    ae26:	901c      	str	r0, [sp, #112]	; 0x70
    ae28:	e7ff      	b.n	ae2a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x10a>
    ae2a:	981c      	ldr	r0, [sp, #112]	; 0x70
    ae2c:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    ae30:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    ae32:	290e      	cmp	r1, #14
    ae34:	d80b      	bhi.n	ae4e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x12e>
    ae36:	e7ff      	b.n	ae38 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x118>
        data.count += 1;
    ae38:	9826      	ldr	r0, [sp, #152]	; 0x98
    ae3a:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    ae3e:	3101      	adds	r1, #1
    ae40:	b2ca      	uxtb	r2, r1
    ae42:	460b      	mov	r3, r1
    ae44:	428a      	cmp	r2, r1
    ae46:	931b      	str	r3, [sp, #108]	; 0x6c
    ae48:	f040 81b7 	bne.w	b1ba <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x49a>
    ae4c:	e001      	b.n	ae52 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    ae4e:	e7ff      	b.n	ae50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
    ae50:	e7d2      	b.n	adf8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xd8>
        data.count += 1;
    ae52:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ae54:	9926      	ldr	r1, [sp, #152]	; 0x98
    ae56:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    ae5a:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    ae5c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    ae5e:	fba2 2c03 	umull	r2, ip, r2, r3
    ae62:	f1bc 0f00 	cmp.w	ip, #0
    ae66:	921a      	str	r2, [sp, #104]	; 0x68
    ae68:	f040 81b3 	bne.w	b1d2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4b2>
    ae6c:	e7ff      	b.n	ae6e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x14e>
    ae6e:	981a      	ldr	r0, [sp, #104]	; 0x68
    ae70:	1cc1      	adds	r1, r0, #3
    ae72:	460a      	mov	r2, r1
    ae74:	4281      	cmp	r1, r0
    ae76:	9219      	str	r2, [sp, #100]	; 0x64
    ae78:	f0c0 81b7 	bcc.w	b1ea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4ca>
    ae7c:	e7ff      	b.n	ae7e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x15e>
    ae7e:	9819      	ldr	r0, [sp, #100]	; 0x64
    ae80:	283e      	cmp	r0, #62	; 0x3e
    ae82:	f200 81be 	bhi.w	b202 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4e2>
    ae86:	e7ff      	b.n	ae88 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x168>
    ae88:	f240 10ba 	movw	r0, #442	; 0x1ba
    ae8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae90:	9919      	ldr	r1, [sp, #100]	; 0x64
    ae92:	5c40      	ldrb	r0, [r0, r1]
    ae94:	f000 000f 	and.w	r0, r0, #15
    ae98:	4602      	mov	r2, r0
    ae9a:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    ae9e:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    aea0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    aea2:	fba0 0c03 	umull	r0, ip, r0, r3
    aea6:	f1bc 0f00 	cmp.w	ip, #0
    aeaa:	9218      	str	r2, [sp, #96]	; 0x60
    aeac:	9017      	str	r0, [sp, #92]	; 0x5c
    aeae:	f040 81b1 	bne.w	b214 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x4f4>
    aeb2:	e7ff      	b.n	aeb4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x194>
    aeb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    aeb6:	1d01      	adds	r1, r0, #4
    aeb8:	460a      	mov	r2, r1
    aeba:	4281      	cmp	r1, r0
    aebc:	9216      	str	r2, [sp, #88]	; 0x58
    aebe:	f0c0 81b5 	bcc.w	b22c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x50c>
    aec2:	e7ff      	b.n	aec4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1a4>
    aec4:	9816      	ldr	r0, [sp, #88]	; 0x58
    aec6:	283e      	cmp	r0, #62	; 0x3e
    aec8:	f200 81bc 	bhi.w	b244 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x524>
    aecc:	e7ff      	b.n	aece <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ae>
    aece:	f240 10ba 	movw	r0, #442	; 0x1ba
    aed2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aed6:	9916      	ldr	r1, [sp, #88]	; 0x58
    aed8:	5c40      	ldrb	r0, [r0, r1]
    aeda:	4602      	mov	r2, r0
    aedc:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    aee0:	9818      	ldr	r0, [sp, #96]	; 0x60
    aee2:	0203      	lsls	r3, r0, #8
    aee4:	9215      	str	r2, [sp, #84]	; 0x54
    aee6:	9314      	str	r3, [sp, #80]	; 0x50
    aee8:	e7ff      	b.n	aeea <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1ca>
    aeea:	981f      	ldr	r0, [sp, #124]	; 0x7c
    aeec:	2809      	cmp	r0, #9
    aeee:	f200 81b2 	bhi.w	b256 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x536>
    aef2:	e7ff      	b.n	aef4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1d4>
    aef4:	9814      	ldr	r0, [sp, #80]	; 0x50
    aef6:	9915      	ldr	r1, [sp, #84]	; 0x54
    aef8:	ea40 0201 	orr.w	r2, r0, r1
    aefc:	9b26      	ldr	r3, [sp, #152]	; 0x98
    aefe:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    af02:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    af06:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    af08:	fba2 2e0c 	umull	r2, lr, r2, ip
    af0c:	f1be 0f00 	cmp.w	lr, #0
    af10:	9213      	str	r2, [sp, #76]	; 0x4c
    af12:	f040 81a9 	bne.w	b268 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x548>
    af16:	e7ff      	b.n	af18 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x1f8>
    af18:	9813      	ldr	r0, [sp, #76]	; 0x4c
    af1a:	1d41      	adds	r1, r0, #5
    af1c:	460a      	mov	r2, r1
    af1e:	4281      	cmp	r1, r0
    af20:	9212      	str	r2, [sp, #72]	; 0x48
    af22:	f0c0 81ad 	bcc.w	b280 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x560>
    af26:	e7ff      	b.n	af28 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x208>
    af28:	9812      	ldr	r0, [sp, #72]	; 0x48
    af2a:	283e      	cmp	r0, #62	; 0x3e
    af2c:	f200 81b4 	bhi.w	b298 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x578>
    af30:	e7ff      	b.n	af32 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x212>
    af32:	f240 10ba 	movw	r0, #442	; 0x1ba
    af36:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af3a:	9912      	ldr	r1, [sp, #72]	; 0x48
    af3c:	5c40      	ldrb	r0, [r0, r1]
    af3e:	f000 000f 	and.w	r0, r0, #15
    af42:	4602      	mov	r2, r0
    af44:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    af48:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    af4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    af4c:	fba0 0c03 	umull	r0, ip, r0, r3
    af50:	f1bc 0f00 	cmp.w	ip, #0
    af54:	9211      	str	r2, [sp, #68]	; 0x44
    af56:	9010      	str	r0, [sp, #64]	; 0x40
    af58:	f040 81a7 	bne.w	b2aa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x58a>
    af5c:	e7ff      	b.n	af5e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x23e>
    af5e:	9810      	ldr	r0, [sp, #64]	; 0x40
    af60:	1d81      	adds	r1, r0, #6
    af62:	460a      	mov	r2, r1
    af64:	4281      	cmp	r1, r0
    af66:	920f      	str	r2, [sp, #60]	; 0x3c
    af68:	f0c0 81ab 	bcc.w	b2c2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5a2>
    af6c:	e7ff      	b.n	af6e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x24e>
    af6e:	980f      	ldr	r0, [sp, #60]	; 0x3c
    af70:	283e      	cmp	r0, #62	; 0x3e
    af72:	f200 81b2 	bhi.w	b2da <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5ba>
    af76:	e7ff      	b.n	af78 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x258>
    af78:	f240 10ba 	movw	r0, #442	; 0x1ba
    af7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    af80:	990f      	ldr	r1, [sp, #60]	; 0x3c
    af82:	5c40      	ldrb	r0, [r0, r1]
    af84:	4602      	mov	r2, r0
    af86:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    af8a:	9811      	ldr	r0, [sp, #68]	; 0x44
    af8c:	0203      	lsls	r3, r0, #8
    af8e:	920e      	str	r2, [sp, #56]	; 0x38
    af90:	930d      	str	r3, [sp, #52]	; 0x34
    af92:	e7ff      	b.n	af94 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x274>
    af94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    af96:	2809      	cmp	r0, #9
    af98:	f200 81a8 	bhi.w	b2ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5cc>
    af9c:	e7ff      	b.n	af9e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x27e>
    af9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    afa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    afa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    afa6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    afa8:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    afac:	ea43 0e0c 	orr.w	lr, r3, ip
    afb0:	f8a2 e002 	strh.w	lr, [r2, #2]
    afb4:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    afb6:	fba2 2e01 	umull	r2, lr, r2, r1
    afba:	f1be 0f00 	cmp.w	lr, #0
    afbe:	920c      	str	r2, [sp, #48]	; 0x30
    afc0:	f040 819d 	bne.w	b2fe <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5de>
    afc4:	e7ff      	b.n	afc6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2a6>
    afc6:	980c      	ldr	r0, [sp, #48]	; 0x30
    afc8:	1cc1      	adds	r1, r0, #3
    afca:	460a      	mov	r2, r1
    afcc:	4281      	cmp	r1, r0
    afce:	920b      	str	r2, [sp, #44]	; 0x2c
    afd0:	f0c0 81a1 	bcc.w	b316 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x5f6>
    afd4:	e7ff      	b.n	afd6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2b6>
    afd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    afd8:	283e      	cmp	r0, #62	; 0x3e
    afda:	f200 81a8 	bhi.w	b32e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x60e>
    afde:	e7ff      	b.n	afe0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2c0>
    afe0:	f240 10ba 	movw	r0, #442	; 0x1ba
    afe4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    afe8:	990b      	ldr	r1, [sp, #44]	; 0x2c
    afea:	5c40      	ldrb	r0, [r0, r1]
    afec:	0980      	lsrs	r0, r0, #6
    afee:	900a      	str	r0, [sp, #40]	; 0x28
    aff0:	e7ff      	b.n	aff2 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2d2>
        data.touches[i].action =
    aff2:	981f      	ldr	r0, [sp, #124]	; 0x7c
    aff4:	2809      	cmp	r0, #9
    aff6:	f200 81a3 	bhi.w	b340 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x620>
    affa:	e7ff      	b.n	affc <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2dc>
    affc:	9826      	ldr	r0, [sp, #152]	; 0x98
    affe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b004:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b006:	7113      	strb	r3, [r2, #4]
    b008:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b00a:	fba2 2c01 	umull	r2, ip, r2, r1
    b00e:	f1bc 0f00 	cmp.w	ip, #0
    b012:	9209      	str	r2, [sp, #36]	; 0x24
    b014:	f040 819d 	bne.w	b352 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x632>
    b018:	e7ff      	b.n	b01a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x2fa>
    b01a:	9809      	ldr	r0, [sp, #36]	; 0x24
    b01c:	1d41      	adds	r1, r0, #5
    b01e:	460a      	mov	r2, r1
    b020:	4281      	cmp	r1, r0
    b022:	9208      	str	r2, [sp, #32]
    b024:	f0c0 81a1 	bcc.w	b36a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x64a>
    b028:	e7ff      	b.n	b02a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x30a>
    b02a:	9808      	ldr	r0, [sp, #32]
    b02c:	283e      	cmp	r0, #62	; 0x3e
    b02e:	f200 81a8 	bhi.w	b382 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x662>
    b032:	e7ff      	b.n	b034 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x314>
    b034:	f240 10ba 	movw	r0, #442	; 0x1ba
    b038:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b03c:	9908      	ldr	r1, [sp, #32]
    b03e:	5c40      	ldrb	r0, [r0, r1]
    b040:	0900      	lsrs	r0, r0, #4
    b042:	9007      	str	r0, [sp, #28]
    b044:	e7ff      	b.n	b046 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x326>
        data.touches[i].finger =
    b046:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b048:	2809      	cmp	r0, #9
    b04a:	f200 81a3 	bhi.w	b394 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x674>
    b04e:	e7ff      	b.n	b050 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x330>
    b050:	9826      	ldr	r0, [sp, #152]	; 0x98
    b052:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b054:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b058:	9b07      	ldr	r3, [sp, #28]
    b05a:	7153      	strb	r3, [r2, #5]
    b05c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b05e:	fba2 2c01 	umull	r2, ip, r2, r1
    b062:	f1bc 0f00 	cmp.w	ip, #0
    b066:	9206      	str	r2, [sp, #24]
    b068:	f040 819d 	bne.w	b3a6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x686>
    b06c:	e7ff      	b.n	b06e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x34e>
    b06e:	9806      	ldr	r0, [sp, #24]
    b070:	1dc1      	adds	r1, r0, #7
    b072:	460a      	mov	r2, r1
    b074:	4281      	cmp	r1, r0
    b076:	9205      	str	r2, [sp, #20]
    b078:	f0c0 81a1 	bcc.w	b3be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x69e>
    b07c:	e7ff      	b.n	b07e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x35e>
    b07e:	9805      	ldr	r0, [sp, #20]
    b080:	283e      	cmp	r0, #62	; 0x3e
    b082:	f200 81a8 	bhi.w	b3d6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6b6>
    b086:	e7ff      	b.n	b088 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x368>
    b088:	f240 10ba 	movw	r0, #442	; 0x1ba
    b08c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b090:	9905      	ldr	r1, [sp, #20]
    b092:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    b094:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    b096:	2a09      	cmp	r2, #9
    b098:	9004      	str	r0, [sp, #16]
    b09a:	f200 81a5 	bhi.w	b3e8 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6c8>
    b09e:	e7ff      	b.n	b0a0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x380>
    b0a0:	9826      	ldr	r0, [sp, #152]	; 0x98
    b0a2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b0a4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b0a8:	9b04      	ldr	r3, [sp, #16]
    b0aa:	7193      	strb	r3, [r2, #6]
    b0ac:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b0ae:	fba2 2c01 	umull	r2, ip, r2, r1
    b0b2:	f1bc 0f00 	cmp.w	ip, #0
    b0b6:	9203      	str	r2, [sp, #12]
    b0b8:	f040 819f 	bne.w	b3fa <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6da>
    b0bc:	e7ff      	b.n	b0be <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x39e>
    b0be:	9803      	ldr	r0, [sp, #12]
    b0c0:	f100 0108 	add.w	r1, r0, #8
    b0c4:	460a      	mov	r2, r1
    b0c6:	4281      	cmp	r1, r0
    b0c8:	9202      	str	r2, [sp, #8]
    b0ca:	f0c0 81a2 	bcc.w	b412 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x6f2>
    b0ce:	e7ff      	b.n	b0d0 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3b0>
    b0d0:	9802      	ldr	r0, [sp, #8]
    b0d2:	283e      	cmp	r0, #62	; 0x3e
    b0d4:	f200 81a9 	bhi.w	b42a <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x70a>
    b0d8:	e7ff      	b.n	b0da <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3ba>
    b0da:	f240 10ba 	movw	r0, #442	; 0x1ba
    b0de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b0e2:	9902      	ldr	r1, [sp, #8]
    b0e4:	5c40      	ldrb	r0, [r0, r1]
    b0e6:	0900      	lsrs	r0, r0, #4
    b0e8:	9001      	str	r0, [sp, #4]
    b0ea:	e7ff      	b.n	b0ec <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3cc>
        data.touches[i].area =
    b0ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b0ee:	2809      	cmp	r0, #9
    b0f0:	f200 81a4 	bhi.w	b43c <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x71c>
    b0f4:	e7ff      	b.n	b0f6 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3d6>
    b0f6:	9826      	ldr	r0, [sp, #152]	; 0x98
    b0f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b0fa:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b0fe:	9b01      	ldr	r3, [sp, #4]
    b100:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b102:	290a      	cmp	r1, #10
    b104:	d326      	bcc.n	b154 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x434>
    b106:	e1a2      	b.n	b44e <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x72e>
    b108:	2001      	movs	r0, #1
    b10a:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b10e:	e009      	b.n	b124 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
    b110:	2000      	movs	r0, #0
    b112:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    b116:	e005      	b.n	b124 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x404>
            && (data.point_num == 0) {
    b118:	9826      	ldr	r0, [sp, #152]	; 0x98
    b11a:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b11e:	2900      	cmp	r1, #0
    b120:	d0f2      	beq.n	b108 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3e8>
    b122:	e7f5      	b.n	b110 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b124:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    b128:	07c0      	lsls	r0, r0, #31
    b12a:	2800      	cmp	r0, #0
    b12c:	d123      	bne.n	b176 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x456>
    b12e:	e021      	b.n	b174 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x454>
    b130:	2001      	movs	r0, #1
    b132:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b136:	e007      	b.n	b148 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b138:	2000      	movs	r0, #0
    b13a:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    b13e:	e003      	b.n	b148 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x428>
    b140:	981f      	ldr	r0, [sp, #124]	; 0x7c
    b142:	280a      	cmp	r0, #10
    b144:	d30e      	bcc.n	b164 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x444>
    b146:	e18b      	b.n	b460 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x740>
    b148:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    b14c:	07c0      	lsls	r0, r0, #31
    b14e:	2800      	cmp	r0, #0
    b150:	d1e2      	bne.n	b118 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f8>
    b152:	e7dd      	b.n	b110 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x3f0>
    b154:	9826      	ldr	r0, [sp, #152]	; 0x98
    b156:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b158:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b15c:	7912      	ldrb	r2, [r2, #4]
    b15e:	2a00      	cmp	r2, #0
    b160:	d0e6      	beq.n	b130 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b162:	e7ed      	b.n	b140 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x420>
    b164:	9826      	ldr	r0, [sp, #152]	; 0x98
    b166:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b168:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    b16c:	7912      	ldrb	r2, [r2, #4]
    b16e:	2a02      	cmp	r2, #2
    b170:	d0de      	beq.n	b130 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x410>
    b172:	e7e1      	b.n	b138 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    b174:	e626      	b.n	adc4 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0xa4>
            break;
    b176:	e66b      	b.n	ae50 <_ZN3app12touch_sensor14read_touchdata17h888ed38e2ccda3e7E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    b178:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b17c:	f2c0 0001 	movt	r0, #1
    b180:	f64b 52ac 	movw	r2, #48556	; 0xbdac
    b184:	f2c0 0201 	movt	r2, #1
    b188:	2121      	movs	r1, #33	; 0x21
    b18a:	f009 ffe7 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b18e:	defe      	udf	#254	; 0xfe
    b190:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b194:	f2c0 0001 	movt	r0, #1
    b198:	f64b 52e4 	movw	r2, #48612	; 0xbde4
    b19c:	f2c0 0201 	movt	r2, #1
    b1a0:	211c      	movs	r1, #28
    b1a2:	f009 ffdb 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b1a6:	defe      	udf	#254	; 0xfe
    b1a8:	f64b 601c 	movw	r0, #48668	; 0xbe1c
    b1ac:	f2c0 0001 	movt	r0, #1
    b1b0:	223f      	movs	r2, #63	; 0x3f
    b1b2:	991d      	ldr	r1, [sp, #116]	; 0x74
    b1b4:	f009 ffe8 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b1b8:	defe      	udf	#254	; 0xfe
        data.count += 1;
    b1ba:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b1be:	f2c0 0001 	movt	r0, #1
    b1c2:	f64b 622c 	movw	r2, #48684	; 0xbe2c
    b1c6:	f2c0 0201 	movt	r2, #1
    b1ca:	211c      	movs	r1, #28
    b1cc:	f009 ffc6 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b1d0:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b1d2:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b1d6:	f2c0 0001 	movt	r0, #1
    b1da:	f64b 623c 	movw	r2, #48700	; 0xbe3c
    b1de:	f2c0 0201 	movt	r2, #1
    b1e2:	2121      	movs	r1, #33	; 0x21
    b1e4:	f009 ffba 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b1e8:	defe      	udf	#254	; 0xfe
    b1ea:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b1ee:	f2c0 0001 	movt	r0, #1
    b1f2:	f64b 624c 	movw	r2, #48716	; 0xbe4c
    b1f6:	f2c0 0201 	movt	r2, #1
    b1fa:	211c      	movs	r1, #28
    b1fc:	f009 ffae 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b200:	defe      	udf	#254	; 0xfe
    b202:	f64b 605c 	movw	r0, #48732	; 0xbe5c
    b206:	f2c0 0001 	movt	r0, #1
    b20a:	223f      	movs	r2, #63	; 0x3f
    b20c:	9919      	ldr	r1, [sp, #100]	; 0x64
    b20e:	f009 ffbb 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b212:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b214:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b218:	f2c0 0001 	movt	r0, #1
    b21c:	f64b 626c 	movw	r2, #48748	; 0xbe6c
    b220:	f2c0 0201 	movt	r2, #1
    b224:	2121      	movs	r1, #33	; 0x21
    b226:	f009 ff99 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b22a:	defe      	udf	#254	; 0xfe
    b22c:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b230:	f2c0 0001 	movt	r0, #1
    b234:	f64b 627c 	movw	r2, #48764	; 0xbe7c
    b238:	f2c0 0201 	movt	r2, #1
    b23c:	211c      	movs	r1, #28
    b23e:	f009 ff8d 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b242:	defe      	udf	#254	; 0xfe
    b244:	f64b 608c 	movw	r0, #48780	; 0xbe8c
    b248:	f2c0 0001 	movt	r0, #1
    b24c:	223f      	movs	r2, #63	; 0x3f
    b24e:	9916      	ldr	r1, [sp, #88]	; 0x58
    b250:	f009 ff9a 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b254:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    b256:	f64b 609c 	movw	r0, #48796	; 0xbe9c
    b25a:	f2c0 0001 	movt	r0, #1
    b25e:	220a      	movs	r2, #10
    b260:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b262:	f009 ff91 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b266:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    b268:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b26c:	f2c0 0001 	movt	r0, #1
    b270:	f64b 62ac 	movw	r2, #48812	; 0xbeac
    b274:	f2c0 0201 	movt	r2, #1
    b278:	2121      	movs	r1, #33	; 0x21
    b27a:	f009 ff6f 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b27e:	defe      	udf	#254	; 0xfe
    b280:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b284:	f2c0 0001 	movt	r0, #1
    b288:	f64b 62bc 	movw	r2, #48828	; 0xbebc
    b28c:	f2c0 0201 	movt	r2, #1
    b290:	211c      	movs	r1, #28
    b292:	f009 ff63 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b296:	defe      	udf	#254	; 0xfe
    b298:	f64b 60cc 	movw	r0, #48844	; 0xbecc
    b29c:	f2c0 0001 	movt	r0, #1
    b2a0:	223f      	movs	r2, #63	; 0x3f
    b2a2:	9912      	ldr	r1, [sp, #72]	; 0x48
    b2a4:	f009 ff70 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b2a8:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    b2aa:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b2ae:	f2c0 0001 	movt	r0, #1
    b2b2:	f64b 62dc 	movw	r2, #48860	; 0xbedc
    b2b6:	f2c0 0201 	movt	r2, #1
    b2ba:	2121      	movs	r1, #33	; 0x21
    b2bc:	f009 ff4e 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b2c0:	defe      	udf	#254	; 0xfe
    b2c2:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b2c6:	f2c0 0001 	movt	r0, #1
    b2ca:	f64b 62ec 	movw	r2, #48876	; 0xbeec
    b2ce:	f2c0 0201 	movt	r2, #1
    b2d2:	211c      	movs	r1, #28
    b2d4:	f009 ff42 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b2d8:	defe      	udf	#254	; 0xfe
    b2da:	f64b 60fc 	movw	r0, #48892	; 0xbefc
    b2de:	f2c0 0001 	movt	r0, #1
    b2e2:	223f      	movs	r2, #63	; 0x3f
    b2e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
    b2e6:	f009 ff4f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b2ea:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    b2ec:	f64b 700c 	movw	r0, #48908	; 0xbf0c
    b2f0:	f2c0 0001 	movt	r0, #1
    b2f4:	220a      	movs	r2, #10
    b2f6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b2f8:	f009 ff46 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b2fc:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    b2fe:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b302:	f2c0 0001 	movt	r0, #1
    b306:	f64b 721c 	movw	r2, #48924	; 0xbf1c
    b30a:	f2c0 0201 	movt	r2, #1
    b30e:	2121      	movs	r1, #33	; 0x21
    b310:	f009 ff24 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b314:	defe      	udf	#254	; 0xfe
    b316:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b31a:	f2c0 0001 	movt	r0, #1
    b31e:	f64b 722c 	movw	r2, #48940	; 0xbf2c
    b322:	f2c0 0201 	movt	r2, #1
    b326:	211c      	movs	r1, #28
    b328:	f009 ff18 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b32c:	defe      	udf	#254	; 0xfe
    b32e:	f64b 703c 	movw	r0, #48956	; 0xbf3c
    b332:	f2c0 0001 	movt	r0, #1
    b336:	223f      	movs	r2, #63	; 0x3f
    b338:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b33a:	f009 ff25 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b33e:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    b340:	f64b 704c 	movw	r0, #48972	; 0xbf4c
    b344:	f2c0 0001 	movt	r0, #1
    b348:	220a      	movs	r2, #10
    b34a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b34c:	f009 ff1c 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b350:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    b352:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b356:	f2c0 0001 	movt	r0, #1
    b35a:	f64b 725c 	movw	r2, #48988	; 0xbf5c
    b35e:	f2c0 0201 	movt	r2, #1
    b362:	2121      	movs	r1, #33	; 0x21
    b364:	f009 fefa 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b368:	defe      	udf	#254	; 0xfe
    b36a:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b36e:	f2c0 0001 	movt	r0, #1
    b372:	f64b 726c 	movw	r2, #49004	; 0xbf6c
    b376:	f2c0 0201 	movt	r2, #1
    b37a:	211c      	movs	r1, #28
    b37c:	f009 feee 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b380:	defe      	udf	#254	; 0xfe
    b382:	f64b 707c 	movw	r0, #49020	; 0xbf7c
    b386:	f2c0 0001 	movt	r0, #1
    b38a:	223f      	movs	r2, #63	; 0x3f
    b38c:	9908      	ldr	r1, [sp, #32]
    b38e:	f009 fefb 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b392:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    b394:	f64b 708c 	movw	r0, #49036	; 0xbf8c
    b398:	f2c0 0001 	movt	r0, #1
    b39c:	220a      	movs	r2, #10
    b39e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b3a0:	f009 fef2 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    b3a6:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b3aa:	f2c0 0001 	movt	r0, #1
    b3ae:	f64b 729c 	movw	r2, #49052	; 0xbf9c
    b3b2:	f2c0 0201 	movt	r2, #1
    b3b6:	2121      	movs	r1, #33	; 0x21
    b3b8:	f009 fed0 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3bc:	defe      	udf	#254	; 0xfe
    b3be:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b3c2:	f2c0 0001 	movt	r0, #1
    b3c6:	f64b 72ac 	movw	r2, #49068	; 0xbfac
    b3ca:	f2c0 0201 	movt	r2, #1
    b3ce:	211c      	movs	r1, #28
    b3d0:	f009 fec4 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b3d4:	defe      	udf	#254	; 0xfe
    b3d6:	f64b 70bc 	movw	r0, #49084	; 0xbfbc
    b3da:	f2c0 0001 	movt	r0, #1
    b3de:	223f      	movs	r2, #63	; 0x3f
    b3e0:	9905      	ldr	r1, [sp, #20]
    b3e2:	f009 fed1 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3e6:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    b3e8:	f64b 70cc 	movw	r0, #49100	; 0xbfcc
    b3ec:	f2c0 0001 	movt	r0, #1
    b3f0:	220a      	movs	r2, #10
    b3f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b3f4:	f009 fec8 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b3f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    b3fa:	f64b 50c0 	movw	r0, #48576	; 0xbdc0
    b3fe:	f2c0 0001 	movt	r0, #1
    b402:	f64b 72dc 	movw	r2, #49116	; 0xbfdc
    b406:	f2c0 0201 	movt	r2, #1
    b40a:	2121      	movs	r1, #33	; 0x21
    b40c:	f009 fea6 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b410:	defe      	udf	#254	; 0xfe
    b412:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b416:	f2c0 0001 	movt	r0, #1
    b41a:	f64b 72ec 	movw	r2, #49132	; 0xbfec
    b41e:	f2c0 0201 	movt	r2, #1
    b422:	211c      	movs	r1, #28
    b424:	f009 fe9a 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b428:	defe      	udf	#254	; 0xfe
    b42a:	f64b 70fc 	movw	r0, #49148	; 0xbffc
    b42e:	f2c0 0001 	movt	r0, #1
    b432:	223f      	movs	r2, #63	; 0x3f
    b434:	9902      	ldr	r1, [sp, #8]
    b436:	f009 fea7 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b43a:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    b43c:	f24c 000c 	movw	r0, #49164	; 0xc00c
    b440:	f2c0 0001 	movt	r0, #1
    b444:	220a      	movs	r2, #10
    b446:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b448:	f009 fe9e 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b44c:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    b44e:	f24c 001c 	movw	r0, #49180	; 0xc01c
    b452:	f2c0 0001 	movt	r0, #1
    b456:	220a      	movs	r2, #10
    b458:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b45a:	f009 fe95 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b45e:	defe      	udf	#254	; 0xfe
    b460:	f24c 002c 	movw	r0, #49196	; 0xc02c
    b464:	f2c0 0001 	movt	r0, #1
    b468:	220a      	movs	r2, #10
    b46a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    b46c:	f009 fe8c 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    b470:	defe      	udf	#254	; 0xfe

0000b472 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    b472:	b5b0      	push	{r4, r5, r7, lr}
    b474:	b094      	sub	sp, #80	; 0x50
    b476:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    b47a:	4696      	mov	lr, r2
    b47c:	460c      	mov	r4, r1
    b47e:	4605      	mov	r5, r0
    b480:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    b484:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    b488:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    b48c:	9310      	str	r3, [sp, #64]	; 0x40
    b48e:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b492:	4618      	mov	r0, r3
    b494:	4661      	mov	r1, ip
    b496:	930d      	str	r3, [sp, #52]	; 0x34
    b498:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    b49c:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    b4a0:	940a      	str	r4, [sp, #40]	; 0x28
    b4a2:	9509      	str	r5, [sp, #36]	; 0x24
    b4a4:	f006 f9a5 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b4a8:	9008      	str	r0, [sp, #32]
    b4aa:	e7ff      	b.n	b4ac <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x3a>
    b4ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b4ae:	b2c1      	uxtb	r1, r0
    b4b0:	9a08      	ldr	r2, [sp, #32]
    b4b2:	428a      	cmp	r2, r1
    b4b4:	d30d      	bcc.n	b4d2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x60>
    b4b6:	e7ff      	b.n	b4b8 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b4b8:	980a      	ldr	r0, [sp, #40]	; 0x28
    b4ba:	b2c1      	uxtb	r1, r0
    b4bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b4be:	fa51 f182 	uxtab	r1, r1, r2
    b4c2:	b2cb      	uxtb	r3, r1
    b4c4:	468c      	mov	ip, r1
    b4c6:	428b      	cmp	r3, r1
    b4c8:	f8cd c01c 	str.w	ip, [sp, #28]
    b4cc:	f040 8092 	bne.w	b5f4 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x182>
    b4d0:	e00b      	b.n	b4ea <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    b4d2:	f24c 003c 	movw	r0, #49212	; 0xc03c
    b4d6:	f2c0 0001 	movt	r0, #1
    b4da:	f24c 0244 	movw	r2, #49220	; 0xc044
    b4de:	f2c0 0201 	movt	r2, #1
    b4e2:	2107      	movs	r1, #7
    b4e4:	f009 fe3a 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b4e8:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b4ea:	9807      	ldr	r0, [sp, #28]
    b4ec:	b241      	sxtb	r1, r0
    b4ee:	2900      	cmp	r1, #0
    b4f0:	d411      	bmi.n	b516 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xa4>
    b4f2:	e7ff      	b.n	b4f4 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    b4f4:	f240 2014 	movw	r0, #532	; 0x214
    b4f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b4fc:	990a      	ldr	r1, [sp, #40]	; 0x28
    b4fe:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    b500:	f240 220c 	movw	r2, #524	; 0x20c
    b504:	f2c2 0200 	movt	r2, #8192	; 0x2000
    b508:	9b09      	ldr	r3, [sp, #36]	; 0x24
    b50a:	7013      	strb	r3, [r2, #0]
    b50c:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b50e:	f006 f970 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    b512:	9006      	str	r0, [sp, #24]
    b514:	e00b      	b.n	b52e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b516:	f64b 5040 	movw	r0, #48448	; 0xbd40
    b51a:	f2c0 0001 	movt	r0, #1
    b51e:	f24c 0264 	movw	r2, #49252	; 0xc064
    b522:	f2c0 0201 	movt	r2, #1
    b526:	2108      	movs	r1, #8
    b528:	f009 fe18 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b52c:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    b52e:	f240 200c 	movw	r0, #524	; 0x20c
    b532:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b536:	9906      	ldr	r1, [sp, #24]
    b538:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b53a:	f240 2014 	movw	r0, #532	; 0x214
    b53e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b542:	2101      	movs	r1, #1
    b544:	f006 f93e 	bl	117c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b548:	9005      	str	r0, [sp, #20]
    b54a:	e7ff      	b.n	b54c <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0xda>
    b54c:	f240 200c 	movw	r0, #524	; 0x20c
    b550:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b554:	9905      	ldr	r1, [sp, #20]
    b556:	6041      	str	r1, [r0, #4]
    b558:	2201      	movs	r2, #1
    b55a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b55e:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    b562:	9004      	str	r0, [sp, #16]
    b564:	4610      	mov	r0, r2
    b566:	9904      	ldr	r1, [sp, #16]
    b568:	461a      	mov	r2, r3
    b56a:	4663      	mov	r3, ip
    b56c:	f00c f81c 	bl	175a8 <hal_i2c_master_write>
    b570:	9012      	str	r0, [sp, #72]	; 0x48
    b572:	e7ff      	b.n	b574 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    b574:	f240 2014 	movw	r0, #532	; 0x214
    b578:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b57c:	2100      	movs	r1, #0
    b57e:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    b580:	f240 200c 	movw	r0, #524	; 0x20c
    b584:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b588:	9909      	ldr	r1, [sp, #36]	; 0x24
    b58a:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    b58c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b58e:	b2d3      	uxtb	r3, r2
    b590:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    b592:	980d      	ldr	r0, [sp, #52]	; 0x34
    b594:	990c      	ldr	r1, [sp, #48]	; 0x30
    b596:	f006 f915 	bl	117c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    b59a:	9003      	str	r0, [sp, #12]
    b59c:	e7ff      	b.n	b59e <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x12c>
    b59e:	f240 200c 	movw	r0, #524	; 0x20c
    b5a2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b5a6:	9903      	ldr	r1, [sp, #12]
    b5a8:	6041      	str	r1, [r0, #4]
    b5aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b5ae:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    b5b0:	9002      	str	r0, [sp, #8]
    b5b2:	4618      	mov	r0, r3
    b5b4:	9902      	ldr	r1, [sp, #8]
    b5b6:	f00c f88b 	bl	176d0 <hal_i2c_master_read>
    b5ba:	4601      	mov	r1, r0
    b5bc:	9013      	str	r0, [sp, #76]	; 0x4c
    b5be:	9101      	str	r1, [sp, #4]
    b5c0:	e7ff      	b.n	b5c2 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    b5c2:	9801      	ldr	r0, [sp, #4]
    b5c4:	2804      	cmp	r0, #4
    b5c6:	d005      	beq.n	b5d4 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x162>
    b5c8:	e7ff      	b.n	b5ca <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x158>
    b5ca:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    b5cc:	900e      	str	r0, [sp, #56]	; 0x38
    b5ce:	2001      	movs	r0, #1
    b5d0:	900e      	str	r0, [sp, #56]	; 0x38
}
    b5d2:	e00c      	b.n	b5ee <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
        console::print("i2c fail\n"); ////
    b5d4:	f24c 0074 	movw	r0, #49268	; 0xc074
    b5d8:	f2c0 0001 	movt	r0, #1
    b5dc:	2109      	movs	r1, #9
    b5de:	f7fd fc72 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b5e2:	e7ff      	b.n	b5e4 <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x172>
    b5e4:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    b5e6:	900e      	str	r0, [sp, #56]	; 0x38
    b5e8:	2001      	movs	r0, #1
    b5ea:	900e      	str	r0, [sp, #56]	; 0x38
    b5ec:	e7ff      	b.n	b5ee <_ZN3app12touch_sensor19read_register_range17h168e29c3a61048a3E+0x17c>
}
    b5ee:	980e      	ldr	r0, [sp, #56]	; 0x38
    b5f0:	b014      	add	sp, #80	; 0x50
    b5f2:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    b5f4:	f64b 6000 	movw	r0, #48640	; 0xbe00
    b5f8:	f2c0 0001 	movt	r0, #1
    b5fc:	f24c 0254 	movw	r2, #49236	; 0xc054
    b600:	f2c0 0201 	movt	r2, #1
    b604:	211c      	movs	r1, #28
    b606:	f009 fda9 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b60a:	defe      	udf	#254	; 0xfe

0000b60c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 4096;  //  Must be 4096 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    b60c:	b580      	push	{r7, lr}
    b60e:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    b610:	f24c 007d 	movw	r0, #49277	; 0xc07d
    b614:	f2c0 0001 	movt	r0, #1
    b618:	210b      	movs	r1, #11
    b61a:	f7fd fc54 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b61e:	e7ff      	b.n	b620 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x14>
    b620:	f7fd fc97 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b624:	e7ff      	b.n	b626 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x1a>
    b626:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    b628:	900e      	str	r0, [sp, #56]	; 0x38
    b62a:	990e      	ldr	r1, [sp, #56]	; 0x38
    b62c:	f005 fe83 	bl	11336 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b630:	900d      	str	r0, [sp, #52]	; 0x34
    b632:	910c      	str	r1, [sp, #48]	; 0x30
    b634:	e7ff      	b.n	b636 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x2a>
    b636:	20ef      	movs	r0, #239	; 0xef
    b638:	900b      	str	r0, [sp, #44]	; 0x2c
    b63a:	990b      	ldr	r1, [sp, #44]	; 0x2c
    b63c:	f005 fe7b 	bl	11336 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    b640:	900a      	str	r0, [sp, #40]	; 0x28
    b642:	9109      	str	r1, [sp, #36]	; 0x24
    b644:	e7ff      	b.n	b646 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x3a>
    let background = Rectangle::<Rgb565>
    b646:	4668      	mov	r0, sp
    b648:	9909      	ldr	r1, [sp, #36]	; 0x24
    b64a:	6001      	str	r1, [r0, #0]
    b64c:	a817      	add	r0, sp, #92	; 0x5c
    b64e:	990d      	ldr	r1, [sp, #52]	; 0x34
    b650:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    b654:	f008 fe6d 	bl	14332 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    b658:	e7ff      	b.n	b65a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x4e>
    b65a:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    b65c:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    b660:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    b664:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    b668:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    b66c:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    b670:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    b674:	f005 fe68 	bl	11348 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    b678:	9008      	str	r0, [sp, #32]
    b67a:	e7ff      	b.n	b67c <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x70>
    b67c:	9808      	ldr	r0, [sp, #32]
    b67e:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    b682:	2101      	movs	r1, #1
    b684:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    b688:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    b68c:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    b690:	a810      	add	r0, sp, #64	; 0x40
    b692:	a917      	add	r1, sp, #92	; 0x5c
    b694:	f008 fe3b 	bl	1430e <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    b698:	e7ff      	b.n	b69a <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x8e>
    //  druid::draw_to_display(background);

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    b69a:	f24c 009c 	movw	r0, #49308	; 0xc09c
    b69e:	f2c0 0001 	movt	r0, #1
    b6a2:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    b6a4:	f24b 7025 	movw	r0, #46885	; 0xb725
    b6a8:	f2c0 0000 	movt	r0, #0
    b6ac:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    b6ae:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b6b0:	4668      	mov	r0, sp
    b6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    b6b6:	6103      	str	r3, [r0, #16]
    b6b8:	60c3      	str	r3, [r0, #12]
    b6ba:	f240 2368 	movw	r3, #616	; 0x268
    b6be:	f2c2 0300 	movt	r3, #8192	; 0x2000
    b6c2:	6083      	str	r3, [r0, #8]
    b6c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b6c8:	6043      	str	r3, [r0, #4]
    b6ca:	2314      	movs	r3, #20
    b6cc:	6003      	str	r3, [r0, #0]
    b6ce:	f240 2018 	movw	r0, #536	; 0x218
    b6d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6d6:	2300      	movs	r3, #0
    b6d8:	f7fd fa6b 	bl	8bb2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    b6dc:	9007      	str	r0, [sp, #28]
    b6de:	e7ff      	b.n	b6e0 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xd4>
    b6e0:	9807      	ldr	r0, [sp, #28]
    b6e2:	f7fd fa49 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    b6e6:	9020      	str	r0, [sp, #128]	; 0x80
    b6e8:	e7ff      	b.n	b6ea <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xde>
        NULL,  //  Argument to be passed to above function
        20,    //  Task priority: highest is 0, lowest is 255 (main task is 127), SPI is 10
        os::OS_WAIT_FOREVER as u32,       //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                                 //  `?` means check for error
    b6ea:	9820      	ldr	r0, [sp, #128]	; 0x80
    b6ec:	1e41      	subs	r1, r0, #1
    b6ee:	bf18      	it	ne
    b6f0:	2101      	movne	r1, #1
    b6f2:	2801      	cmp	r0, #1
    b6f4:	d001      	beq.n	b6fa <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xee>
    b6f6:	e7ff      	b.n	b6f8 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xec>
    b6f8:	e005      	b.n	b706 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0xfa>
    b6fa:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    b6fc:	900f      	str	r0, [sp, #60]	; 0x3c
    b6fe:	2001      	movs	r0, #1
    b700:	900f      	str	r0, [sp, #60]	; 0x3c
}
    b702:	e006      	b.n	b712 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>
    os::task_init(                  //  Create a new task and start it...
    b704:	defe      	udf	#254	; 0xfe
    ) ? ;                                 //  `?` means check for error
    b706:	9820      	ldr	r0, [sp, #128]	; 0x80
    b708:	9023      	str	r0, [sp, #140]	; 0x8c
    b70a:	f006 fcfd 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    b70e:	9006      	str	r0, [sp, #24]
    b710:	e002      	b.n	b718 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x10c>
}
    b712:	980f      	ldr	r0, [sp, #60]	; 0x3c
    b714:	b024      	add	sp, #144	; 0x90
    b716:	bd80      	pop	{r7, pc}
    ) ? ;                                 //  `?` means check for error
    b718:	9806      	ldr	r0, [sp, #24]
    b71a:	f7fd fa21 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    b71e:	900f      	str	r0, [sp, #60]	; 0x3c
    b720:	e7ff      	b.n	b722 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x116>
    b722:	e7f6      	b.n	b712 <_ZN3app5chip88on_start17h473d234c4f7ef3a3E+0x106>

0000b724 <_ZN3app5chip89task_func17h385831a0096277b5E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {    
    b724:	b580      	push	{r7, lr}
    b726:	f5ad 5d03 	sub.w	sp, sp, #8384	; 0x20c0
    b72a:	b082      	sub	sp, #8
    b72c:	f50d 5103 	add.w	r1, sp, #8384	; 0x20c0
    b730:	f10d 0e0c 	add.w	lr, sp, #12
    b734:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    b738:	6008      	str	r0, [r1, #0]
    b73a:	a804      	add	r0, sp, #16
    //  Create the hardware API for rendering the emulator
    let hardware = Hardware::new();
    b73c:	9103      	str	r1, [sp, #12]
    b73e:	9202      	str	r2, [sp, #8]
    b740:	f000 fb82 	bl	be48 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E>
    b744:	e7ff      	b.n	b746 <_ZN3app5chip89task_func17h385831a0096277b5E+0x22>

    //  Create the emulator
    let chip8 = libchip8::Chip8::new(hardware);
    b746:	9804      	ldr	r0, [sp, #16]
    b748:	9905      	ldr	r1, [sp, #20]
    b74a:	9a02      	ldr	r2, [sp, #8]
    b74c:	6011      	str	r1, [r2, #0]
    b74e:	f842 0c04 	str.w	r0, [r2, #-4]
    b752:	a806      	add	r0, sp, #24
    b754:	f10d 0e08 	add.w	lr, sp, #8
    b758:	f50e 5183 	add.w	r1, lr, #4192	; 0x1060
    b75c:	f001 f916 	bl	c98c <_ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E>
    b760:	e7ff      	b.n	b762 <_ZN3app5chip89task_func17h385831a0096277b5E+0x3e>
    console::print("CHIP8 started\n"); console::flush();
    b762:	f24c 00a0 	movw	r0, #49312	; 0xc0a0
    b766:	f2c0 0001 	movt	r0, #1
    b76a:	210e      	movs	r1, #14
    b76c:	f7fd fbab 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b770:	e7ff      	b.n	b772 <_ZN3app5chip89task_func17h385831a0096277b5E+0x4e>
    b772:	f7fd fbee 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b776:	e7ff      	b.n	b778 <_ZN3app5chip89task_func17h385831a0096277b5E+0x54>

    //  Load the emulator ROM
    let rom = include_bytes!("../roms/invaders.ch8");
    b778:	f24c 00ae 	movw	r0, #49326	; 0xc0ae
    b77c:	f2c0 0001 	movt	r0, #1
    b780:	9903      	ldr	r1, [sp, #12]
    b782:	6048      	str	r0, [r1, #4]
    b784:	f10d 0e10 	add.w	lr, sp, #16
    b788:	f50e 5283 	add.w	r2, lr, #4192	; 0x1060
    b78c:	a906      	add	r1, sp, #24
    b78e:	f241 0350 	movw	r3, #4176	; 0x1050
    //  let rom = include_bytes!("../roms/pong.ch8");

    //  Run the emulator ROM. This will block until emulator terminates
    chip8.run(rom);
    b792:	9001      	str	r0, [sp, #4]
    b794:	4610      	mov	r0, r2
    b796:	9200      	str	r2, [sp, #0]
    b798:	461a      	mov	r2, r3
    b79a:	f00f ffeb 	bl	1b774 <__aeabi_memcpy>
    b79e:	f240 5215 	movw	r2, #1301	; 0x515
    b7a2:	9800      	ldr	r0, [sp, #0]
    b7a4:	9901      	ldr	r1, [sp, #4]
    b7a6:	f001 f99c 	bl	cae2 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E>
    b7aa:	e7ff      	b.n	b7ac <_ZN3app5chip89task_func17h385831a0096277b5E+0x88>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    b7ac:	f24c 50c3 	movw	r0, #50627	; 0xc5c3
    b7b0:	f2c0 0001 	movt	r0, #1
    b7b4:	210b      	movs	r1, #11
    b7b6:	f7fd fb86 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    b7ba:	e7ff      	b.n	b7bc <_ZN3app5chip89task_func17h385831a0096277b5E+0x98>
    b7bc:	f7fd fbc9 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    b7c0:	e7ff      	b.n	b7c2 <_ZN3app5chip89task_func17h385831a0096277b5E+0x9e>
    assert!(false, "CHIP8 should not end");
    b7c2:	f24c 50ce 	movw	r0, #50638	; 0xc5ce
    b7c6:	f2c0 0001 	movt	r0, #1
    b7ca:	f24c 52f8 	movw	r2, #50680	; 0xc5f8
    b7ce:	f2c0 0201 	movt	r2, #1
    b7d2:	2114      	movs	r1, #20
    b7d4:	f009 fcc2 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    b7d8:	defe      	udf	#254	; 0xfe

0000b7da <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>:
    block_bottom:    u8,
}

impl PixelIterator {
    /// Return a new PixelInterator for the block dimensions
    pub fn new(
    b7da:	b570      	push	{r4, r5, r6, lr}
    b7dc:	b081      	sub	sp, #4
    b7de:	f8dd c014 	ldr.w	ip, [sp, #20]
    b7e2:	469e      	mov	lr, r3
    b7e4:	4614      	mov	r4, r2
    b7e6:	460d      	mov	r5, r1
    b7e8:	f88d 1000 	strb.w	r1, [sp]
    b7ec:	f88d 2001 	strb.w	r2, [sp, #1]
    b7f0:	f88d 3002 	strb.w	r3, [sp, #2]
    b7f4:	f88d c003 	strb.w	ip, [sp, #3]
        //  End column number for block
        block_right:     u8,
        //  End row number for block
        block_bottom:    u8,        
    ) -> PixelIterator {
        PixelIterator {
    b7f8:	7001      	strb	r1, [r0, #0]
    b7fa:	7042      	strb	r2, [r0, #1]
    b7fc:	2600      	movs	r6, #0
    b7fe:	7086      	strb	r6, [r0, #2]
    b800:	70c6      	strb	r6, [r0, #3]
    b802:	7101      	strb	r1, [r0, #4]
    b804:	7143      	strb	r3, [r0, #5]
    b806:	7182      	strb	r2, [r0, #6]
    b808:	f880 c007 	strb.w	ip, [r0, #7]
            x_offset: 0, 
            y_offset: 0,
            block_left, block_right,
            block_top, block_bottom,
        }
    }
    b80c:	b001      	add	sp, #4
    b80e:	bd70      	pop	{r4, r5, r6, pc}

0000b810 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E>:
        self.x == self.block_left && self.y == self.block_top &&
            self.x_offset == 0 && self.y_offset == 0
    }
    */
    /// Return true if the Virtual Pixel is in the block
    pub fn contains(&self, x: u8, y: u8) -> bool {
    b810:	b580      	push	{r7, lr}
    b812:	b086      	sub	sp, #24
    b814:	b2cb      	uxtb	r3, r1
    b816:	4694      	mov	ip, r2
    b818:	468e      	mov	lr, r1
    b81a:	9004      	str	r0, [sp, #16]
    b81c:	f88d 1016 	strb.w	r1, [sp, #22]
    b820:	f88d 2017 	strb.w	r2, [sp, #23]
        x >= self.block_left && x <= self.block_right &&
    b824:	7901      	ldrb	r1, [r0, #4]
    b826:	428b      	cmp	r3, r1
    b828:	9002      	str	r0, [sp, #8]
    b82a:	f8cd c004 	str.w	ip, [sp, #4]
    b82e:	f8cd e000 	str.w	lr, [sp]
    b832:	d230      	bcs.n	b896 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x86>
    b834:	e02b      	b.n	b88e <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x7e>
    b836:	2001      	movs	r0, #1
    b838:	f88d 000d 	strb.w	r0, [sp, #13]
    b83c:	e00a      	b.n	b854 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x44>
    b83e:	2000      	movs	r0, #0
    b840:	f88d 000d 	strb.w	r0, [sp, #13]
    b844:	e006      	b.n	b854 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x44>
            y >= self.block_top && y <= self.block_bottom
    b846:	9802      	ldr	r0, [sp, #8]
    b848:	79c1      	ldrb	r1, [r0, #7]
    b84a:	9a01      	ldr	r2, [sp, #4]
    b84c:	b2d3      	uxtb	r3, r2
        x >= self.block_left && x <= self.block_right &&
    b84e:	428b      	cmp	r3, r1
    b850:	d9f1      	bls.n	b836 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x26>
    b852:	e7f4      	b.n	b83e <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x2e>
    }
    b854:	f89d 000d 	ldrb.w	r0, [sp, #13]
    b858:	b006      	add	sp, #24
    b85a:	bd80      	pop	{r7, pc}
    b85c:	2001      	movs	r0, #1
        x >= self.block_left && x <= self.block_right &&
    b85e:	f88d 000e 	strb.w	r0, [sp, #14]
    b862:	e00a      	b.n	b87a <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x6a>
    b864:	2000      	movs	r0, #0
    b866:	f88d 000e 	strb.w	r0, [sp, #14]
    b86a:	e006      	b.n	b87a <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x6a>
            y >= self.block_top && y <= self.block_bottom
    b86c:	9802      	ldr	r0, [sp, #8]
    b86e:	7981      	ldrb	r1, [r0, #6]
    b870:	9a01      	ldr	r2, [sp, #4]
    b872:	b2d3      	uxtb	r3, r2
        x >= self.block_left && x <= self.block_right &&
    b874:	428b      	cmp	r3, r1
    b876:	d2f1      	bcs.n	b85c <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x4c>
    b878:	e7f4      	b.n	b864 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x54>
    b87a:	f89d 000e 	ldrb.w	r0, [sp, #14]
    b87e:	07c0      	lsls	r0, r0, #31
    b880:	2800      	cmp	r0, #0
    b882:	d1e0      	bne.n	b846 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x36>
    b884:	e7db      	b.n	b83e <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x2e>
    b886:	2001      	movs	r0, #1
    b888:	f88d 000f 	strb.w	r0, [sp, #15]
    b88c:	e00a      	b.n	b8a4 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x94>
    b88e:	2000      	movs	r0, #0
    b890:	f88d 000f 	strb.w	r0, [sp, #15]
    b894:	e006      	b.n	b8a4 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x94>
    b896:	9802      	ldr	r0, [sp, #8]
    b898:	7941      	ldrb	r1, [r0, #5]
    b89a:	9a00      	ldr	r2, [sp, #0]
    b89c:	b2d3      	uxtb	r3, r2
    b89e:	428b      	cmp	r3, r1
    b8a0:	d9f1      	bls.n	b886 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x76>
    b8a2:	e7f4      	b.n	b88e <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x7e>
    b8a4:	f89d 000f 	ldrb.w	r0, [sp, #15]
    b8a8:	07c0      	lsls	r0, r0, #31
    b8aa:	2800      	cmp	r0, #0
    b8ac:	d1de      	bne.n	b86c <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x5c>
    b8ae:	e7d9      	b.n	b864 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E+0x54>

0000b8b0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>:
    /// Return window of Physical Pixels: (left, top, right, bottom)
    pub fn get_window(&self) -> (u8, u8, u8, u8) {
    b8b0:	b580      	push	{r7, lr}
    b8b2:	b092      	sub	sp, #72	; 0x48
    b8b4:	9010      	str	r0, [sp, #64]	; 0x40
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    b8b6:	7901      	ldrb	r1, [r0, #4]
    b8b8:	2203      	movs	r2, #3
    b8ba:	fba1 1202 	umull	r1, r2, r1, r2
    b8be:	0a0b      	lsrs	r3, r1, #8
    b8c0:	f04f 0c00 	mov.w	ip, #0
    b8c4:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    b8c8:	bf18      	it	ne
    b8ca:	2301      	movne	r3, #1
    b8cc:	2a00      	cmp	r2, #0
    b8ce:	bf18      	it	ne
    b8d0:	2201      	movne	r2, #1
    b8d2:	ea42 0203 	orr.w	r2, r2, r3
    b8d6:	2a00      	cmp	r2, #0
    b8d8:	900d      	str	r0, [sp, #52]	; 0x34
    b8da:	910c      	str	r1, [sp, #48]	; 0x30
    b8dc:	f040 810a 	bne.w	baf4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x244>
    b8e0:	e7ff      	b.n	b8e2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x32>
    b8e2:	980c      	ldr	r0, [sp, #48]	; 0x30
    b8e4:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    b8e8:	990d      	ldr	r1, [sp, #52]	; 0x34
    b8ea:	798a      	ldrb	r2, [r1, #6]
    b8ec:	2305      	movs	r3, #5
    b8ee:	fba2 2303 	umull	r2, r3, r2, r3
    b8f2:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    b8f6:	f04f 0e00 	mov.w	lr, #0
    b8fa:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    b8fe:	bf18      	it	ne
    b900:	f04f 0c01 	movne.w	ip, #1
    b904:	2b00      	cmp	r3, #0
    b906:	bf18      	it	ne
    b908:	2301      	movne	r3, #1
    b90a:	ea43 030c 	orr.w	r3, r3, ip
    b90e:	2b00      	cmp	r3, #0
    b910:	920b      	str	r2, [sp, #44]	; 0x2c
    b912:	f040 80fb 	bne.w	bb0c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x25c>
    b916:	e7ff      	b.n	b918 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x68>
    b918:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b91a:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    b91e:	990d      	ldr	r1, [sp, #52]	; 0x34
    b920:	790a      	ldrb	r2, [r1, #4]
    b922:	794b      	ldrb	r3, [r1, #5]
    b924:	1a9a      	subs	r2, r3, r2
    b926:	b2d3      	uxtb	r3, r2
    b928:	4694      	mov	ip, r2
    b92a:	4293      	cmp	r3, r2
    b92c:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    b930:	f040 80f8 	bne.w	bb24 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x274>
    b934:	e7ff      	b.n	b936 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x86>
    b936:	2001      	movs	r0, #1
    b938:	990a      	ldr	r1, [sp, #40]	; 0x28
    b93a:	fa50 f081 	uxtab	r0, r0, r1
    b93e:	b2c2      	uxtb	r2, r0
    b940:	4603      	mov	r3, r0
    b942:	4282      	cmp	r2, r0
    b944:	9309      	str	r3, [sp, #36]	; 0x24
    b946:	f040 80f9 	bne.w	bb3c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x28c>
    b94a:	e7ff      	b.n	b94c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x9c>
    b94c:	9809      	ldr	r0, [sp, #36]	; 0x24
    b94e:	b2c1      	uxtb	r1, r0
    b950:	2203      	movs	r2, #3
    b952:	fba1 1202 	umull	r1, r2, r1, r2
    b956:	0a0b      	lsrs	r3, r1, #8
    b958:	f04f 0c00 	mov.w	ip, #0
    b95c:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    b960:	bf18      	it	ne
    b962:	2301      	movne	r3, #1
    b964:	2a00      	cmp	r2, #0
    b966:	bf18      	it	ne
    b968:	2201      	movne	r2, #1
    b96a:	ea42 0203 	orr.w	r2, r2, r3
    b96e:	2a00      	cmp	r2, #0
    b970:	9108      	str	r1, [sp, #32]
    b972:	f040 80ef 	bne.w	bb54 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2a4>
    b976:	e7ff      	b.n	b978 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xc8>
    b978:	980c      	ldr	r0, [sp, #48]	; 0x30
    b97a:	b2c1      	uxtb	r1, r0
    b97c:	9a08      	ldr	r2, [sp, #32]
    b97e:	fa51 f182 	uxtab	r1, r1, r2
    b982:	b2cb      	uxtb	r3, r1
    b984:	468c      	mov	ip, r1
    b986:	428b      	cmp	r3, r1
    b988:	f8cd c01c 	str.w	ip, [sp, #28]
    b98c:	f040 80ee 	bne.w	bb6c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2bc>
    b990:	e7ff      	b.n	b992 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xe2>
    b992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b996:	9907      	ldr	r1, [sp, #28]
    b998:	fa50 f081 	uxtab	r0, r0, r1
    b99c:	b2c2      	uxtb	r2, r0
    b99e:	4603      	mov	r3, r0
    b9a0:	4282      	cmp	r2, r0
    b9a2:	9306      	str	r3, [sp, #24]
    b9a4:	f040 80ee 	bne.w	bb84 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2d4>
    b9a8:	e7ff      	b.n	b9aa <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0xfa>
    b9aa:	9806      	ldr	r0, [sp, #24]
    b9ac:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    b9b0:	990d      	ldr	r1, [sp, #52]	; 0x34
    b9b2:	798a      	ldrb	r2, [r1, #6]
    b9b4:	79cb      	ldrb	r3, [r1, #7]
    b9b6:	1a9a      	subs	r2, r3, r2
    b9b8:	b2d3      	uxtb	r3, r2
    b9ba:	4694      	mov	ip, r2
    b9bc:	4293      	cmp	r3, r2
    b9be:	f8cd c014 	str.w	ip, [sp, #20]
    b9c2:	f040 80eb 	bne.w	bb9c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x2ec>
    b9c6:	e7ff      	b.n	b9c8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x118>
    b9c8:	2001      	movs	r0, #1
    b9ca:	9905      	ldr	r1, [sp, #20]
    b9cc:	fa50 f081 	uxtab	r0, r0, r1
    b9d0:	b2c2      	uxtb	r2, r0
    b9d2:	4603      	mov	r3, r0
    b9d4:	4282      	cmp	r2, r0
    b9d6:	9304      	str	r3, [sp, #16]
    b9d8:	f040 80ec 	bne.w	bbb4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x304>
    b9dc:	e7ff      	b.n	b9de <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x12e>
    b9de:	9804      	ldr	r0, [sp, #16]
    b9e0:	b2c1      	uxtb	r1, r0
    b9e2:	2205      	movs	r2, #5
    b9e4:	fba1 1202 	umull	r1, r2, r1, r2
    b9e8:	0a0b      	lsrs	r3, r1, #8
    b9ea:	f04f 0c00 	mov.w	ip, #0
    b9ee:	ebbc 2f11 	cmp.w	ip, r1, lsr #8
    b9f2:	bf18      	it	ne
    b9f4:	2301      	movne	r3, #1
    b9f6:	2a00      	cmp	r2, #0
    b9f8:	bf18      	it	ne
    b9fa:	2201      	movne	r2, #1
    b9fc:	ea42 0203 	orr.w	r2, r2, r3
    ba00:	2a00      	cmp	r2, #0
    ba02:	9103      	str	r1, [sp, #12]
    ba04:	f040 80e2 	bne.w	bbcc <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x31c>
    ba08:	e7ff      	b.n	ba0a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x15a>
    ba0a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ba0c:	b2c1      	uxtb	r1, r0
    ba0e:	9a03      	ldr	r2, [sp, #12]
    ba10:	fa51 f182 	uxtab	r1, r1, r2
    ba14:	b2cb      	uxtb	r3, r1
    ba16:	468c      	mov	ip, r1
    ba18:	428b      	cmp	r3, r1
    ba1a:	f8cd c008 	str.w	ip, [sp, #8]
    ba1e:	f040 80e1 	bne.w	bbe4 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x334>
    ba22:	e7ff      	b.n	ba24 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x174>
    ba24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ba28:	9902      	ldr	r1, [sp, #8]
    ba2a:	fa50 f081 	uxtab	r0, r0, r1
    ba2e:	b2c2      	uxtb	r2, r0
    ba30:	4603      	mov	r3, r0
    ba32:	4282      	cmp	r2, r0
    ba34:	9301      	str	r3, [sp, #4]
    ba36:	f040 80e1 	bne.w	bbfc <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x34c>
    ba3a:	e7ff      	b.n	ba3c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x18c>
    ba3c:	9801      	ldr	r0, [sp, #4]
    ba3e:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    ba42:	990c      	ldr	r1, [sp, #48]	; 0x30
    ba44:	b2ca      	uxtb	r2, r1
    ba46:	2af0      	cmp	r2, #240	; 0xf0
    ba48:	d32e      	bcc.n	baa8 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f8>
    ba4a:	e029      	b.n	baa0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    ba4c:	2001      	movs	r0, #1
    ba4e:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    ba52:	e008      	b.n	ba66 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    ba54:	2000      	movs	r0, #0
    ba56:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    ba5a:	e004      	b.n	ba66 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1b6>
    ba5c:	9801      	ldr	r0, [sp, #4]
    ba5e:	b2c1      	uxtb	r1, r0
    ba60:	29f0      	cmp	r1, #240	; 0xf0
    ba62:	d3f3      	bcc.n	ba4c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x19c>
    ba64:	e7f6      	b.n	ba54 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    ba66:	f89d 003d 	ldrb.w	r0, [sp, #61]	; 0x3d
    ba6a:	07c0      	lsls	r0, r0, #31
    ba6c:	2800      	cmp	r0, #0
    ba6e:	d035      	beq.n	badc <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x22c>
    ba70:	e025      	b.n	babe <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x20e>
    ba72:	2001      	movs	r0, #1
    ba74:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    ba78:	e008      	b.n	ba8c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    ba7a:	2000      	movs	r0, #0
    ba7c:	f88d 003e 	strb.w	r0, [sp, #62]	; 0x3e
    ba80:	e004      	b.n	ba8c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1dc>
    ba82:	9806      	ldr	r0, [sp, #24]
    ba84:	b2c1      	uxtb	r1, r0
    ba86:	29f0      	cmp	r1, #240	; 0xf0
    ba88:	d3f3      	bcc.n	ba72 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1c2>
    ba8a:	e7f6      	b.n	ba7a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
    ba8c:	f89d 003e 	ldrb.w	r0, [sp, #62]	; 0x3e
    ba90:	07c0      	lsls	r0, r0, #31
    ba92:	2800      	cmp	r0, #0
    ba94:	d1e2      	bne.n	ba5c <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ac>
    ba96:	e7dd      	b.n	ba54 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1a4>
    ba98:	2001      	movs	r0, #1
    ba9a:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    ba9e:	e008      	b.n	bab2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    baa0:	2000      	movs	r0, #0
    baa2:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    baa6:	e004      	b.n	bab2 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x202>
    baa8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    baaa:	b2c1      	uxtb	r1, r0
    baac:	29f0      	cmp	r1, #240	; 0xf0
    baae:	d3f3      	bcc.n	ba98 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1e8>
    bab0:	e7f6      	b.n	baa0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1f0>
    bab2:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
    bab6:	07c0      	lsls	r0, r0, #31
    bab8:	2800      	cmp	r0, #0
    baba:	d1e2      	bne.n	ba82 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1d2>
    babc:	e7dd      	b.n	ba7a <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E+0x1ca>
        ( left, top, right, bottom )
    babe:	980c      	ldr	r0, [sp, #48]	; 0x30
    bac0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    bac4:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bac6:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
    baca:	9a06      	ldr	r2, [sp, #24]
    bacc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
    bad0:	9b01      	ldr	r3, [sp, #4]
    bad2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
    }
    bad6:	980e      	ldr	r0, [sp, #56]	; 0x38
    bad8:	b012      	add	sp, #72	; 0x48
    bada:	bd80      	pop	{r7, pc}
        assert!(left < 240 && top < 240 && right < 240 && bottom < 240, "overflow");
    badc:	f24c 700c 	movw	r0, #50956	; 0xc70c
    bae0:	f2c0 0001 	movt	r0, #1
    bae4:	f24c 722c 	movw	r2, #50988	; 0xc72c
    bae8:	f2c0 0201 	movt	r2, #1
    baec:	2108      	movs	r1, #8
    baee:	f009 fb35 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    baf2:	defe      	udf	#254	; 0xfe
        let left: u8 = self.block_left as u8 * PIXEL_WIDTH as u8;
    baf4:	f24c 6020 	movw	r0, #50720	; 0xc620
    baf8:	f2c0 0001 	movt	r0, #1
    bafc:	f24c 6208 	movw	r2, #50696	; 0xc608
    bb00:	f2c0 0201 	movt	r2, #1
    bb04:	2121      	movs	r1, #33	; 0x21
    bb06:	f009 fb29 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb0a:	defe      	udf	#254	; 0xfe
        let top: u8 = self.block_top as u8 * PIXEL_HEIGHT as u8; 
    bb0c:	f24c 6020 	movw	r0, #50720	; 0xc620
    bb10:	f2c0 0001 	movt	r0, #1
    bb14:	f24c 6244 	movw	r2, #50756	; 0xc644
    bb18:	f2c0 0201 	movt	r2, #1
    bb1c:	2121      	movs	r1, #33	; 0x21
    bb1e:	f009 fb1d 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb22:	defe      	udf	#254	; 0xfe
        let right: u8 = left + (self.block_right - self.block_left + 1) * PIXEL_WIDTH as u8 - 1;
    bb24:	f24c 6070 	movw	r0, #50800	; 0xc670
    bb28:	f2c0 0001 	movt	r0, #1
    bb2c:	f24c 6254 	movw	r2, #50772	; 0xc654
    bb30:	f2c0 0201 	movt	r2, #1
    bb34:	2121      	movs	r1, #33	; 0x21
    bb36:	f009 fb11 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb3a:	defe      	udf	#254	; 0xfe
    bb3c:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bb40:	f2c0 0001 	movt	r0, #1
    bb44:	f24c 6294 	movw	r2, #50836	; 0xc694
    bb48:	f2c0 0201 	movt	r2, #1
    bb4c:	211c      	movs	r1, #28
    bb4e:	f009 fb05 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb52:	defe      	udf	#254	; 0xfe
    bb54:	f24c 6020 	movw	r0, #50720	; 0xc620
    bb58:	f2c0 0001 	movt	r0, #1
    bb5c:	f24c 6294 	movw	r2, #50836	; 0xc694
    bb60:	f2c0 0201 	movt	r2, #1
    bb64:	2121      	movs	r1, #33	; 0x21
    bb66:	f009 faf9 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb6a:	defe      	udf	#254	; 0xfe
    bb6c:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bb70:	f2c0 0001 	movt	r0, #1
    bb74:	f24c 62cc 	movw	r2, #50892	; 0xc6cc
    bb78:	f2c0 0201 	movt	r2, #1
    bb7c:	211c      	movs	r1, #28
    bb7e:	f009 faed 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb82:	defe      	udf	#254	; 0xfe
    bb84:	f24c 6070 	movw	r0, #50800	; 0xc670
    bb88:	f2c0 0001 	movt	r0, #1
    bb8c:	f24c 62cc 	movw	r2, #50892	; 0xc6cc
    bb90:	f2c0 0201 	movt	r2, #1
    bb94:	2121      	movs	r1, #33	; 0x21
    bb96:	f009 fae1 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bb9a:	defe      	udf	#254	; 0xfe
        let bottom: u8 = top + (self.block_bottom - self.block_top + 1) * PIXEL_HEIGHT as u8 - 1;
    bb9c:	f24c 6070 	movw	r0, #50800	; 0xc670
    bba0:	f2c0 0001 	movt	r0, #1
    bba4:	f24c 62dc 	movw	r2, #50908	; 0xc6dc
    bba8:	f2c0 0201 	movt	r2, #1
    bbac:	2121      	movs	r1, #33	; 0x21
    bbae:	f009 fad5 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbb2:	defe      	udf	#254	; 0xfe
    bbb4:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bbb8:	f2c0 0001 	movt	r0, #1
    bbbc:	f24c 62ec 	movw	r2, #50924	; 0xc6ec
    bbc0:	f2c0 0201 	movt	r2, #1
    bbc4:	211c      	movs	r1, #28
    bbc6:	f009 fac9 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbca:	defe      	udf	#254	; 0xfe
    bbcc:	f24c 6020 	movw	r0, #50720	; 0xc620
    bbd0:	f2c0 0001 	movt	r0, #1
    bbd4:	f24c 62ec 	movw	r2, #50924	; 0xc6ec
    bbd8:	f2c0 0201 	movt	r2, #1
    bbdc:	2121      	movs	r1, #33	; 0x21
    bbde:	f009 fabd 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbe2:	defe      	udf	#254	; 0xfe
    bbe4:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bbe8:	f2c0 0001 	movt	r0, #1
    bbec:	f24c 62fc 	movw	r2, #50940	; 0xc6fc
    bbf0:	f2c0 0201 	movt	r2, #1
    bbf4:	211c      	movs	r1, #28
    bbf6:	f009 fab1 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bbfa:	defe      	udf	#254	; 0xfe
    bbfc:	f24c 6070 	movw	r0, #50800	; 0xc670
    bc00:	f2c0 0001 	movt	r0, #1
    bc04:	f24c 62fc 	movw	r2, #50940	; 0xc6fc
    bc08:	f2c0 0201 	movt	r2, #1
    bc0c:	2121      	movs	r1, #33	; 0x21
    bc0e:	f009 faa5 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc12:	defe      	udf	#254	; 0xfe

0000bc14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>:
impl Iterator for PixelIterator {
    /// This Iterator returns Physical Pixel colour words (16-bit)
    type Item = u16;

    /// Return the next Physical Pixel colour
    fn next(&mut self) -> Option<Self::Item> {
    bc14:	b08c      	sub	sp, #48	; 0x30
    bc16:	900a      	str	r0, [sp, #40]	; 0x28
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    bc18:	7841      	ldrb	r1, [r0, #1]
    bc1a:	79c2      	ldrb	r2, [r0, #7]
    bc1c:	4291      	cmp	r1, r2
    bc1e:	9007      	str	r0, [sp, #28]
    bc20:	d805      	bhi.n	bc2e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a>
    bc22:	e7ff      	b.n	bc24 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x10>

        if self.x >= SCREEN_WIDTH as u8 ||
    bc24:	9807      	ldr	r0, [sp, #28]
    bc26:	7801      	ldrb	r1, [r0, #0]
    bc28:	293f      	cmp	r1, #63	; 0x3f
    bc2a:	d80a      	bhi.n	bc42 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    bc2c:	e011      	b.n	bc52 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x3e>
    bc2e:	2000      	movs	r0, #0
        if self.y > self.block_bottom { return None; }  //  No more Physical Pixels
    bc30:	f8ad 0020 	strh.w	r0, [sp, #32]
    bc34:	e7ff      	b.n	bc36 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
                }
            }
        }
        //  Return the Physical Pixel color
        return Some(color);
    }
    bc36:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    bc3a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
    bc3e:	b00c      	add	sp, #48	; 0x30
    bc40:	4770      	bx	lr
    bc42:	2001      	movs	r0, #1
        if self.x >= SCREEN_WIDTH as u8 ||
    bc44:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    bc48:	e008      	b.n	bc5c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
    bc4a:	2000      	movs	r0, #0
    bc4c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    bc50:	e004      	b.n	bc5c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x48>
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    bc52:	9807      	ldr	r0, [sp, #28]
    bc54:	7841      	ldrb	r1, [r0, #1]
        if self.x >= SCREEN_WIDTH as u8 ||
    bc56:	291f      	cmp	r1, #31
    bc58:	d8f3      	bhi.n	bc42 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x2e>
    bc5a:	e7f6      	b.n	bc4a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x36>
    bc5c:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    bc60:	07c0      	lsls	r0, r0, #31
    bc62:	2800      	cmp	r0, #0
    bc64:	d003      	beq.n	bc6e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
    bc66:	e7ff      	b.n	bc68 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x54>
    bc68:	be00      	bkpt	0x0000
            self.y >= SCREEN_HEIGHT as u8 { cortex_m::asm::bkpt(); }
    bc6a:	e7ff      	b.n	bc6c <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x58>
        if self.x >= SCREEN_WIDTH as u8 ||
    bc6c:	e7ff      	b.n	bc6e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x5a>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    bc6e:	9807      	ldr	r0, [sp, #28]
    bc70:	7801      	ldrb	r1, [r0, #0]
    bc72:	293f      	cmp	r1, #63	; 0x3f
    bc74:	d805      	bhi.n	bc82 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x6e>
    bc76:	e7ff      	b.n	bc78 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x64>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    bc78:	9807      	ldr	r0, [sp, #28]
    bc7a:	7841      	ldrb	r1, [r0, #1]
    bc7c:	291f      	cmp	r1, #31
    bc7e:	d816      	bhi.n	bcae <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x9a>
    bc80:	e00b      	b.n	bc9a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x86>
        assert!(self.x < SCREEN_WIDTH as u8, "x overflow");
    bc82:	f24c 703c 	movw	r0, #51004	; 0xc73c
    bc86:	f2c0 0001 	movt	r0, #1
    bc8a:	f24c 7248 	movw	r2, #51016	; 0xc748
    bc8e:	f2c0 0201 	movt	r2, #1
    bc92:	210a      	movs	r1, #10
    bc94:	f009 fa62 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bc98:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    bc9a:	9807      	ldr	r0, [sp, #28]
    bc9c:	7801      	ldrb	r1, [r0, #0]
    bc9e:	7842      	ldrb	r2, [r0, #1]
    bca0:	0192      	lsls	r2, r2, #6
    bca2:	2300      	movs	r3, #0
    bca4:	2b00      	cmp	r3, #0
    bca6:	9106      	str	r1, [sp, #24]
    bca8:	9205      	str	r2, [sp, #20]
    bcaa:	d17b      	bne.n	bda4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x190>
    bcac:	e00b      	b.n	bcc6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xb2>
        assert!(self.y < SCREEN_HEIGHT as u8, "y overflow");
    bcae:	f24c 7058 	movw	r0, #51032	; 0xc758
    bcb2:	f2c0 0001 	movt	r0, #1
    bcb6:	f24c 7264 	movw	r2, #51044	; 0xc764
    bcba:	f2c0 0201 	movt	r2, #1
    bcbe:	210a      	movs	r1, #10
    bcc0:	f009 fa4c 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bcc4:	defe      	udf	#254	; 0xfe
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    bcc6:	9806      	ldr	r0, [sp, #24]
    bcc8:	9905      	ldr	r1, [sp, #20]
    bcca:	1842      	adds	r2, r0, r1
    bccc:	4613      	mov	r3, r2
    bcce:	4282      	cmp	r2, r0
    bcd0:	9304      	str	r3, [sp, #16]
    bcd2:	d373      	bcc.n	bdbc <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1a8>
    bcd4:	e7ff      	b.n	bcd6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xc2>
    bcd6:	9804      	ldr	r0, [sp, #16]
    bcd8:	900b      	str	r0, [sp, #44]	; 0x2c
    bcda:	2100      	movs	r1, #0
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    bcdc:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    bce0:	d178      	bne.n	bdd4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1c0>
    bce2:	e7ff      	b.n	bce4 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xd0>
    bce4:	f244 2068 	movw	r0, #17000	; 0x4268
    bce8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bcec:	9904      	ldr	r1, [sp, #16]
    bcee:	5c40      	ldrb	r0, [r0, r1]
    bcf0:	2800      	cmp	r0, #0
    bcf2:	d104      	bne.n	bcfe <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xea>
    bcf4:	e7ff      	b.n	bcf6 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xe2>
    bcf6:	2000      	movs	r0, #0
    bcf8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    bcfc:	e004      	b.n	bd08 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
    bcfe:	f64f 70ff 	movw	r0, #65535	; 0xffff
    bd02:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    bd06:	e7ff      	b.n	bd08 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0xf4>
        self.x_offset += 1;
    bd08:	9807      	ldr	r0, [sp, #28]
    bd0a:	7881      	ldrb	r1, [r0, #2]
    bd0c:	3101      	adds	r1, #1
    bd0e:	b2ca      	uxtb	r2, r1
    bd10:	460b      	mov	r3, r1
    bd12:	428a      	cmp	r2, r1
    bd14:	9303      	str	r3, [sp, #12]
    bd16:	d167      	bne.n	bde8 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1d4>
    bd18:	e7ff      	b.n	bd1a <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x106>
    bd1a:	9803      	ldr	r0, [sp, #12]
    bd1c:	9907      	ldr	r1, [sp, #28]
    bd1e:	7088      	strb	r0, [r1, #2]
        if self.x_offset >= PIXEL_WIDTH as u8 {
    bd20:	788a      	ldrb	r2, [r1, #2]
    bd22:	2a03      	cmp	r2, #3
    bd24:	d336      	bcc.n	bd94 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
    bd26:	e7ff      	b.n	bd28 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x114>
    bd28:	2000      	movs	r0, #0
            self.x_offset = 0;
    bd2a:	9907      	ldr	r1, [sp, #28]
    bd2c:	7088      	strb	r0, [r1, #2]
            self.x += 1;
    bd2e:	7808      	ldrb	r0, [r1, #0]
    bd30:	3001      	adds	r0, #1
    bd32:	b2c2      	uxtb	r2, r0
    bd34:	4603      	mov	r3, r0
    bd36:	4282      	cmp	r2, r0
    bd38:	9302      	str	r3, [sp, #8]
    bd3a:	d161      	bne.n	be00 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x1ec>
    bd3c:	e7ff      	b.n	bd3e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x12a>
    bd3e:	9802      	ldr	r0, [sp, #8]
    bd40:	9907      	ldr	r1, [sp, #28]
    bd42:	7008      	strb	r0, [r1, #0]
            if self.x > self.block_right {
    bd44:	780a      	ldrb	r2, [r1, #0]
    bd46:	794b      	ldrb	r3, [r1, #5]
    bd48:	429a      	cmp	r2, r3
    bd4a:	d922      	bls.n	bd92 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
    bd4c:	e7ff      	b.n	bd4e <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x13a>
                self.x = self.block_left;
    bd4e:	9807      	ldr	r0, [sp, #28]
    bd50:	7901      	ldrb	r1, [r0, #4]
    bd52:	7001      	strb	r1, [r0, #0]
                self.y_offset += 1;
    bd54:	78c1      	ldrb	r1, [r0, #3]
    bd56:	3101      	adds	r1, #1
    bd58:	b2ca      	uxtb	r2, r1
    bd5a:	460b      	mov	r3, r1
    bd5c:	428a      	cmp	r2, r1
    bd5e:	9301      	str	r3, [sp, #4]
    bd60:	d15a      	bne.n	be18 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x204>
    bd62:	e7ff      	b.n	bd64 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x150>
    bd64:	9801      	ldr	r0, [sp, #4]
    bd66:	9907      	ldr	r1, [sp, #28]
    bd68:	70c8      	strb	r0, [r1, #3]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    bd6a:	78ca      	ldrb	r2, [r1, #3]
    bd6c:	2a05      	cmp	r2, #5
    bd6e:	d30f      	bcc.n	bd90 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
    bd70:	e7ff      	b.n	bd72 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x15e>
    bd72:	2000      	movs	r0, #0
                    self.y_offset = 0;
    bd74:	9907      	ldr	r1, [sp, #28]
    bd76:	70c8      	strb	r0, [r1, #3]
                    self.y += 1;
    bd78:	7848      	ldrb	r0, [r1, #1]
    bd7a:	3001      	adds	r0, #1
    bd7c:	b2c2      	uxtb	r2, r0
    bd7e:	4603      	mov	r3, r0
    bd80:	4282      	cmp	r2, r0
    bd82:	9300      	str	r3, [sp, #0]
    bd84:	d154      	bne.n	be30 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x21c>
    bd86:	e7ff      	b.n	bd88 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x174>
    bd88:	9800      	ldr	r0, [sp, #0]
    bd8a:	9907      	ldr	r1, [sp, #28]
    bd8c:	7048      	strb	r0, [r1, #1]
                if self.y_offset >= PIXEL_HEIGHT as u8 {
    bd8e:	e7ff      	b.n	bd90 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17c>
            if self.x > self.block_right {
    bd90:	e7ff      	b.n	bd92 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x17e>
        if self.x_offset >= PIXEL_WIDTH as u8 {
    bd92:	e7ff      	b.n	bd94 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x180>
        return Some(color);
    bd94:	f8bd 0026 	ldrh.w	r0, [sp, #38]	; 0x26
    bd98:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
    bd9c:	2001      	movs	r0, #1
    bd9e:	f8ad 0020 	strh.w	r0, [sp, #32]
    bda2:	e748      	b.n	bc36 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E+0x22>
        let i = self.x as usize + self.y as usize * SCREEN_WIDTH;
    bda4:	f24c 6020 	movw	r0, #50720	; 0xc620
    bda8:	f2c0 0001 	movt	r0, #1
    bdac:	f24c 7274 	movw	r2, #51060	; 0xc774
    bdb0:	f2c0 0201 	movt	r2, #1
    bdb4:	2121      	movs	r1, #33	; 0x21
    bdb6:	f009 f9d1 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bdba:	defe      	udf	#254	; 0xfe
    bdbc:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bdc0:	f2c0 0001 	movt	r0, #1
    bdc4:	f24c 7284 	movw	r2, #51076	; 0xc784
    bdc8:	f2c0 0201 	movt	r2, #1
    bdcc:	211c      	movs	r1, #28
    bdce:	f009 f9c5 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bdd2:	defe      	udf	#254	; 0xfe
            if SCREEN_BUFFER[i] != 0 { 0xffff } else { 0x0 }
    bdd4:	f24c 7094 	movw	r0, #51092	; 0xc794
    bdd8:	f2c0 0001 	movt	r0, #1
    bddc:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bde0:	9904      	ldr	r1, [sp, #16]
    bde2:	f009 f9d1 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    bde6:	defe      	udf	#254	; 0xfe
        self.x_offset += 1;
    bde8:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    bdec:	f2c0 0001 	movt	r0, #1
    bdf0:	f24c 72a4 	movw	r2, #51108	; 0xc7a4
    bdf4:	f2c0 0201 	movt	r2, #1
    bdf8:	211c      	movs	r1, #28
    bdfa:	f009 f9af 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bdfe:	defe      	udf	#254	; 0xfe
            self.x += 1;
    be00:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    be04:	f2c0 0001 	movt	r0, #1
    be08:	f24c 72b4 	movw	r2, #51124	; 0xc7b4
    be0c:	f2c0 0201 	movt	r2, #1
    be10:	211c      	movs	r1, #28
    be12:	f009 f9a3 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be16:	defe      	udf	#254	; 0xfe
                self.y_offset += 1;
    be18:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    be1c:	f2c0 0001 	movt	r0, #1
    be20:	f24c 72c4 	movw	r2, #51140	; 0xc7c4
    be24:	f2c0 0201 	movt	r2, #1
    be28:	211c      	movs	r1, #28
    be2a:	f009 f997 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be2e:	defe      	udf	#254	; 0xfe
                    self.y += 1;
    be30:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    be34:	f2c0 0001 	movt	r0, #1
    be38:	f24c 72d4 	movw	r2, #51156	; 0xc7d4
    be3c:	f2c0 0201 	movt	r2, #1
    be40:	211c      	movs	r1, #28
    be42:	f009 f98b 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    be46:	defe      	udf	#254	; 0xfe

0000be48 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E>:
    block: PixelIterator,
}

impl Hardware {
    /// Return a new Hardware API for rendering CHIP8 Emulator
    pub fn new() -> Hardware {
    be48:	b580      	push	{r7, lr}
    be4a:	b08a      	sub	sp, #40	; 0x28
    be4c:	2100      	movs	r1, #0
        let left = 0 as u8;
    be4e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
        let top = 0 as u8;
    be52:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    be56:	2210      	movs	r2, #16
        let right = left + BLOCK_WIDTH as u8  - 1;
    be58:	2900      	cmp	r1, #0
    be5a:	9006      	str	r0, [sp, #24]
    be5c:	9205      	str	r2, [sp, #20]
    be5e:	d133      	bne.n	bec8 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x80>
    be60:	e7ff      	b.n	be62 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x1a>
    be62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be66:	9905      	ldr	r1, [sp, #20]
    be68:	fa50 f081 	uxtab	r0, r0, r1
    be6c:	b2c2      	uxtb	r2, r0
    be6e:	4603      	mov	r3, r0
    be70:	4282      	cmp	r2, r0
    be72:	9304      	str	r3, [sp, #16]
    be74:	d134      	bne.n	bee0 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x98>
    be76:	e7ff      	b.n	be78 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x30>
    be78:	9804      	ldr	r0, [sp, #16]
    be7a:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    be7e:	2108      	movs	r1, #8
    be80:	2200      	movs	r2, #0
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    be82:	2a00      	cmp	r2, #0
    be84:	9103      	str	r1, [sp, #12]
    be86:	d137      	bne.n	bef8 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0xb0>
    be88:	e7ff      	b.n	be8a <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x42>
    be8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    be8e:	9903      	ldr	r1, [sp, #12]
    be90:	fa50 f081 	uxtab	r0, r0, r1
    be94:	b2c2      	uxtb	r2, r0
    be96:	4603      	mov	r3, r0
    be98:	4282      	cmp	r2, r0
    be9a:	9302      	str	r3, [sp, #8]
    be9c:	d138      	bne.n	bf10 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0xc8>
    be9e:	e7ff      	b.n	bea0 <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x58>
    bea0:	9802      	ldr	r0, [sp, #8]
    bea2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
        Hardware {
            block: PixelIterator::new(
    bea6:	4669      	mov	r1, sp
    bea8:	6008      	str	r0, [r1, #0]
    beaa:	a807      	add	r0, sp, #28
    beac:	2100      	movs	r1, #0
    beae:	9101      	str	r1, [sp, #4]
    beb0:	9a01      	ldr	r2, [sp, #4]
    beb2:	9b04      	ldr	r3, [sp, #16]
    beb4:	f7ff fc91 	bl	b7da <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>
    beb8:	e7ff      	b.n	beba <_ZN3app5chip88Hardware3new17h2513f3a9e68453b3E+0x72>
        Hardware {
    beba:	9807      	ldr	r0, [sp, #28]
    bebc:	9908      	ldr	r1, [sp, #32]
    bebe:	9a06      	ldr	r2, [sp, #24]
    bec0:	6051      	str	r1, [r2, #4]
    bec2:	6010      	str	r0, [r2, #0]
                left, top, 
                right, bottom
            ),
        }
    }
    bec4:	b00a      	add	sp, #40	; 0x28
    bec6:	bd80      	pop	{r7, pc}
        let right = left + BLOCK_WIDTH as u8  - 1;
    bec8:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    becc:	f2c0 0001 	movt	r0, #1
    bed0:	f24c 72e4 	movw	r2, #51172	; 0xc7e4
    bed4:	f2c0 0201 	movt	r2, #1
    bed8:	211c      	movs	r1, #28
    beda:	f009 f93f 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bede:	defe      	udf	#254	; 0xfe
    bee0:	f24c 6070 	movw	r0, #50800	; 0xc670
    bee4:	f2c0 0001 	movt	r0, #1
    bee8:	f24c 72e4 	movw	r2, #51172	; 0xc7e4
    beec:	f2c0 0201 	movt	r2, #1
    bef0:	2121      	movs	r1, #33	; 0x21
    bef2:	f009 f933 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bef6:	defe      	udf	#254	; 0xfe
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    bef8:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    befc:	f2c0 0001 	movt	r0, #1
    bf00:	f24c 72f4 	movw	r2, #51188	; 0xc7f4
    bf04:	f2c0 0201 	movt	r2, #1
    bf08:	211c      	movs	r1, #28
    bf0a:	f009 f927 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf0e:	defe      	udf	#254	; 0xfe
    bf10:	f24c 6070 	movw	r0, #50800	; 0xc670
    bf14:	f2c0 0001 	movt	r0, #1
    bf18:	f24c 72f4 	movw	r2, #51188	; 0xc7f4
    bf1c:	f2c0 0201 	movt	r2, #1
    bf20:	2121      	movs	r1, #33	; 0x21
    bf22:	f009 f91b 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf26:	defe      	udf	#254	; 0xfe

0000bf28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E>:
}

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    bf28:	b081      	sub	sp, #4
    bf2a:	9000      	str	r0, [sp, #0]
    bf2c:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    bf2e:	b001      	add	sp, #4
    bf30:	4770      	bx	lr

0000bf32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>:

    fn key(&mut self, _key: u8) -> bool {
    bf32:	b082      	sub	sp, #8
    bf34:	460a      	mov	r2, r1
    bf36:	9000      	str	r0, [sp, #0]
    bf38:	f88d 1007 	strb.w	r1, [sp, #7]
    bf3c:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    bf3e:	b002      	add	sp, #8
    bf40:	4770      	bx	lr

0000bf42 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    bf42:	b510      	push	{r4, lr}
    bf44:	b09e      	sub	sp, #120	; 0x78
    bf46:	469c      	mov	ip, r3
    bf48:	9016      	str	r0, [sp, #88]	; 0x58
    bf4a:	9117      	str	r1, [sp, #92]	; 0x5c
    bf4c:	9218      	str	r2, [sp, #96]	; 0x60
    bf4e:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        //  console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf52:	293f      	cmp	r1, #63	; 0x3f
    bf54:	920e      	str	r2, [sp, #56]	; 0x38
    bf56:	910d      	str	r1, [sp, #52]	; 0x34
    bf58:	900c      	str	r0, [sp, #48]	; 0x30
    bf5a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    bf5e:	d804      	bhi.n	bf6a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x28>
    bf60:	e7ff      	b.n	bf62 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x20>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf62:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf64:	281f      	cmp	r0, #31
    bf66:	d814      	bhi.n	bf92 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x50>
    bf68:	e00b      	b.n	bf82 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x40>
        assert!(x < SCREEN_WIDTH, "x overflow");
    bf6a:	f24c 703c 	movw	r0, #51004	; 0xc73c
    bf6e:	f2c0 0001 	movt	r0, #1
    bf72:	f64c 0204 	movw	r2, #51204	; 0xc804
    bf76:	f2c0 0201 	movt	r2, #1
    bf7a:	210a      	movs	r1, #10
    bf7c:	f009 f8ee 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bf80:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bf82:	980e      	ldr	r0, [sp, #56]	; 0x38
    bf84:	0181      	lsls	r1, r0, #6
    bf86:	0e82      	lsrs	r2, r0, #26
    bf88:	2a00      	cmp	r2, #0
    bf8a:	910a      	str	r1, [sp, #40]	; 0x28
    bf8c:	f040 80ec 	bne.w	c168 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x226>
    bf90:	e00b      	b.n	bfaa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x68>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    bf92:	f24c 7058 	movw	r0, #51032	; 0xc758
    bf96:	f2c0 0001 	movt	r0, #1
    bf9a:	f64c 0214 	movw	r2, #51220	; 0xc814
    bf9e:	f2c0 0201 	movt	r2, #1
    bfa2:	210a      	movs	r1, #10
    bfa4:	f009 f8da 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    bfa8:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    bfaa:	980d      	ldr	r0, [sp, #52]	; 0x34
    bfac:	990a      	ldr	r1, [sp, #40]	; 0x28
    bfae:	1842      	adds	r2, r0, r1
    bfb0:	4613      	mov	r3, r2
    bfb2:	4282      	cmp	r2, r0
    bfb4:	9309      	str	r3, [sp, #36]	; 0x24
    bfb6:	f0c0 80e3 	bcc.w	c180 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x23e>
    bfba:	e7ff      	b.n	bfbc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x7a>
    bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    bfbe:	901a      	str	r0, [sp, #104]	; 0x68
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    bfc0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    bfc2:	07ca      	lsls	r2, r1, #31
    bfc4:	2a00      	cmp	r2, #0
    bfc6:	d104      	bne.n	bfd2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x90>
    bfc8:	e7ff      	b.n	bfca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x88>
    bfca:	2000      	movs	r0, #0
    bfcc:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    bfd0:	e003      	b.n	bfda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x98>
    bfd2:	2001      	movs	r0, #1
    bfd4:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
    bfd8:	e7ff      	b.n	bfda <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x98>
    bfda:	2000      	movs	r0, #0
    bfdc:	9909      	ldr	r1, [sp, #36]	; 0x24
    bfde:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    bfe2:	f040 80d9 	bne.w	c198 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x256>
    bfe6:	e7ff      	b.n	bfe8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xa6>
    bfe8:	f244 2068 	movw	r0, #17000	; 0x4268
    bfec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bff0:	f89d 103f 	ldrb.w	r1, [sp, #63]	; 0x3f
    bff4:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bff6:	5481      	strb	r1, [r0, r2]

        //  If (x,y) are inside the current block, do nothing.
        if self.block.contains(x as u8, y as u8) { return; }
    bff8:	980c      	ldr	r0, [sp, #48]	; 0x30
    bffa:	990d      	ldr	r1, [sp, #52]	; 0x34
    bffc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bffe:	f7ff fc07 	bl	b810 <_ZN3app5chip813PixelIterator8contains17h2f765aeb72a8bf17E>
    c002:	9008      	str	r0, [sp, #32]
    c004:	e7ff      	b.n	c006 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xc4>
    c006:	9808      	ldr	r0, [sp, #32]
    c008:	07c1      	lsls	r1, r0, #31
    c00a:	2900      	cmp	r1, #0
    c00c:	d107      	bne.n	c01e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xdc>
    c00e:	e7ff      	b.n	c010 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xce>

        //  If (x,y) are outside the current block, render the previous block (if any).
        //  if !self.block.is_empty() {
            let (left, top, right, bottom) = self.block.get_window();
    c010:	980c      	ldr	r0, [sp, #48]	; 0x30
    c012:	f7ff fc4d 	bl	b8b0 <_ZN3app5chip813PixelIterator10get_window17hb74afec73b7fceb6E>
    c016:	901b      	str	r0, [sp, #108]	; 0x6c
    c018:	981b      	ldr	r0, [sp, #108]	; 0x6c
    c01a:	9010      	str	r0, [sp, #64]	; 0x40
    c01c:	e002      	b.n	c024 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xe2>
        if self.block.contains(x as u8, y as u8) { return; }
    c01e:	e7ff      	b.n	c020 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xde>
            .fill( Some( color ) );
        druid::draw_to_display(pixel);
        */
        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    c020:	b01e      	add	sp, #120	; 0x78
    c022:	bd10      	pop	{r4, pc}
            let (left, top, right, bottom) = self.block.get_window();
    c024:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
    c028:	f88d 0070 	strb.w	r0, [sp, #112]	; 0x70
    c02c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    c030:	f88d 1071 	strb.w	r1, [sp, #113]	; 0x71
    c034:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
    c038:	f88d 2072 	strb.w	r2, [sp, #114]	; 0x72
    c03c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    c040:	f88d 3073 	strb.w	r3, [sp, #115]	; 0x73
            druid::set_display_pixels(left as u16, top as u16, right as u16, bottom as u16,
    c044:	46ec      	mov	ip, sp
    c046:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
    c04a:	f8cc e000 	str.w	lr, [ip]
    c04e:	f000 fb23 	bl	c698 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>
    c052:	9007      	str	r0, [sp, #28]
    c054:	e7ff      	b.n	c056 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x114>
    c056:	9807      	ldr	r0, [sp, #28]
    c058:	f000 0001 	and.w	r0, r0, #1
    c05c:	f64c 0154 	movw	r1, #51284	; 0xc854
    c060:	f2c0 0101 	movt	r1, #1
    c064:	f64c 0368 	movw	r3, #51304	; 0xc868
    c068:	f2c0 0301 	movt	r3, #1
    c06c:	2211      	movs	r2, #17
    c06e:	f008 f81e 	bl	140ae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
    c072:	e7ff      	b.n	c074 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x132>
        let left = x as u8;
    c074:	980d      	ldr	r0, [sp, #52]	; 0x34
    c076:	990d      	ldr	r1, [sp, #52]	; 0x34
    c078:	f88d 1074 	strb.w	r1, [sp, #116]	; 0x74
        let top = y as u8;
    c07c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c07e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c080:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
    c084:	f04f 0c10 	mov.w	ip, #16
        let right = left + BLOCK_WIDTH as u8  - 1;
    c088:	fa5c fc81 	uxtab	ip, ip, r1
    c08c:	fa5f fe8c 	uxtb.w	lr, ip
    c090:	4664      	mov	r4, ip
    c092:	45e6      	cmp	lr, ip
    c094:	9006      	str	r0, [sp, #24]
    c096:	9205      	str	r2, [sp, #20]
    c098:	9404      	str	r4, [sp, #16]
    c09a:	f040 8087 	bne.w	c1ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x26a>
    c09e:	e7ff      	b.n	c0a0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x15e>
    c0a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0a4:	9904      	ldr	r1, [sp, #16]
    c0a6:	fa50 f081 	uxtab	r0, r0, r1
    c0aa:	b2c2      	uxtb	r2, r0
    c0ac:	4603      	mov	r3, r0
    c0ae:	4282      	cmp	r2, r0
    c0b0:	9303      	str	r3, [sp, #12]
    c0b2:	f040 8087 	bne.w	c1c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x282>
    c0b6:	e7ff      	b.n	c0b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x176>
    c0b8:	9803      	ldr	r0, [sp, #12]
    c0ba:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
    c0be:	2108      	movs	r1, #8
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c0c0:	9a05      	ldr	r2, [sp, #20]
    c0c2:	fa51 f182 	uxtab	r1, r1, r2
    c0c6:	b2cb      	uxtb	r3, r1
    c0c8:	468c      	mov	ip, r1
    c0ca:	428b      	cmp	r3, r1
    c0cc:	f8cd c008 	str.w	ip, [sp, #8]
    c0d0:	f040 8084 	bne.w	c1dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x29a>
    c0d4:	e7ff      	b.n	c0d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x194>
    c0d6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c0da:	9902      	ldr	r1, [sp, #8]
    c0dc:	fa50 f081 	uxtab	r0, r0, r1
    c0e0:	b2c2      	uxtb	r2, r0
    c0e2:	4603      	mov	r3, r0
    c0e4:	4282      	cmp	r2, r0
    c0e6:	9301      	str	r3, [sp, #4]
    c0e8:	f040 8084 	bne.w	c1f4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x2b2>
    c0ec:	e7ff      	b.n	c0ee <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1ac>
    c0ee:	9801      	ldr	r0, [sp, #4]
    c0f0:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
            if right < SCREEN_WIDTH as u8 { right } else { SCREEN_WIDTH as u8 - 1 }, 
    c0f4:	9903      	ldr	r1, [sp, #12]
    c0f6:	b2ca      	uxtb	r2, r1
    c0f8:	2a40      	cmp	r2, #64	; 0x40
    c0fa:	d30b      	bcc.n	c114 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1d2>
    c0fc:	e7ff      	b.n	c0fe <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1bc>
    c0fe:	203f      	movs	r0, #63	; 0x3f
    c100:	f88d 0050 	strb.w	r0, [sp, #80]	; 0x50
    c104:	2000      	movs	r0, #0
    c106:	f88d 0051 	strb.w	r0, [sp, #81]	; 0x51
    c10a:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
    c10e:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c112:	e003      	b.n	c11c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1da>
    c114:	9803      	ldr	r0, [sp, #12]
    c116:	f88d 004f 	strb.w	r0, [sp, #79]	; 0x4f
    c11a:	e7ff      	b.n	c11c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1da>
            if bottom < SCREEN_HEIGHT as u8 { bottom } else { SCREEN_HEIGHT as u8 - 1 }
    c11c:	9801      	ldr	r0, [sp, #4]
    c11e:	b2c1      	uxtb	r1, r0
    c120:	2920      	cmp	r1, #32
    c122:	d30b      	bcc.n	c13c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1fa>
    c124:	e7ff      	b.n	c126 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x1e4>
    c126:	201f      	movs	r0, #31
    c128:	f88d 0054 	strb.w	r0, [sp, #84]	; 0x54
    c12c:	2000      	movs	r0, #0
    c12e:	f88d 0055 	strb.w	r0, [sp, #85]	; 0x55
    c132:	f89d 0054 	ldrb.w	r0, [sp, #84]	; 0x54
    c136:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    c13a:	e003      	b.n	c144 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x202>
    c13c:	9801      	ldr	r0, [sp, #4]
    c13e:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
    c142:	e7ff      	b.n	c144 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x202>
        self.block = PixelIterator::new(
    c144:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    c148:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
    c14c:	4669      	mov	r1, sp
    c14e:	6008      	str	r0, [r1, #0]
    c150:	a811      	add	r0, sp, #68	; 0x44
    c152:	9906      	ldr	r1, [sp, #24]
    c154:	9a05      	ldr	r2, [sp, #20]
    c156:	f7ff fb40 	bl	b7da <_ZN3app5chip813PixelIterator3new17h8011ce45451de010E>
    c15a:	e7ff      	b.n	c15c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0x21a>
    c15c:	9811      	ldr	r0, [sp, #68]	; 0x44
    c15e:	9912      	ldr	r1, [sp, #72]	; 0x48
    c160:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c162:	6051      	str	r1, [r2, #4]
    c164:	6010      	str	r0, [r2, #0]
    }
    c166:	e75b      	b.n	c020 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE+0xde>
        let i = x + y * SCREEN_WIDTH;
    c168:	f24c 6020 	movw	r0, #50720	; 0xc620
    c16c:	f2c0 0001 	movt	r0, #1
    c170:	f64c 0224 	movw	r2, #51236	; 0xc824
    c174:	f2c0 0201 	movt	r2, #1
    c178:	2121      	movs	r1, #33	; 0x21
    c17a:	f008 ffef 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c17e:	defe      	udf	#254	; 0xfe
    c180:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    c184:	f2c0 0001 	movt	r0, #1
    c188:	f64c 0234 	movw	r2, #51252	; 0xc834
    c18c:	f2c0 0201 	movt	r2, #1
    c190:	211c      	movs	r1, #28
    c192:	f008 ffe3 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c196:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    c198:	f64c 0044 	movw	r0, #51268	; 0xc844
    c19c:	f2c0 0001 	movt	r0, #1
    c1a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c1a4:	9909      	ldr	r1, [sp, #36]	; 0x24
    c1a6:	f008 ffef 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c1aa:	defe      	udf	#254	; 0xfe
        let right = left + BLOCK_WIDTH as u8  - 1;
    c1ac:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    c1b0:	f2c0 0001 	movt	r0, #1
    c1b4:	f64c 0278 	movw	r2, #51320	; 0xc878
    c1b8:	f2c0 0201 	movt	r2, #1
    c1bc:	211c      	movs	r1, #28
    c1be:	f008 ffcd 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1c2:	defe      	udf	#254	; 0xfe
    c1c4:	f24c 6070 	movw	r0, #50800	; 0xc670
    c1c8:	f2c0 0001 	movt	r0, #1
    c1cc:	f64c 0278 	movw	r2, #51320	; 0xc878
    c1d0:	f2c0 0201 	movt	r2, #1
    c1d4:	2121      	movs	r1, #33	; 0x21
    c1d6:	f008 ffc1 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1da:	defe      	udf	#254	; 0xfe
        let bottom = top  + BLOCK_HEIGHT as u8 - 1;
    c1dc:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    c1e0:	f2c0 0001 	movt	r0, #1
    c1e4:	f64c 0288 	movw	r2, #51336	; 0xc888
    c1e8:	f2c0 0201 	movt	r2, #1
    c1ec:	211c      	movs	r1, #28
    c1ee:	f008 ffb5 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c1f2:	defe      	udf	#254	; 0xfe
    c1f4:	f24c 6070 	movw	r0, #50800	; 0xc670
    c1f8:	f2c0 0001 	movt	r0, #1
    c1fc:	f64c 0288 	movw	r2, #51336	; 0xc888
    c200:	f2c0 0201 	movt	r2, #1
    c204:	2121      	movs	r1, #33	; 0x21
    c206:	f008 ffa9 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c20a:	defe      	udf	#254	; 0xfe

0000c20c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    c20c:	b088      	sub	sp, #32
    c20e:	9004      	str	r0, [sp, #16]
    c210:	9105      	str	r1, [sp, #20]
    c212:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        //  console::print("get "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
        assert!(x < SCREEN_WIDTH, "x overflow");
    c214:	293f      	cmp	r1, #63	; 0x3f
    c216:	9203      	str	r2, [sp, #12]
    c218:	9102      	str	r1, [sp, #8]
    c21a:	d804      	bhi.n	c226 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x1a>
    c21c:	e7ff      	b.n	c21e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x12>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c21e:	9803      	ldr	r0, [sp, #12]
    c220:	281f      	cmp	r0, #31
    c222:	d813      	bhi.n	c24c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x40>
    c224:	e00b      	b.n	c23e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x32>
        assert!(x < SCREEN_WIDTH, "x overflow");
    c226:	f24c 703c 	movw	r0, #51004	; 0xc73c
    c22a:	f2c0 0001 	movt	r0, #1
    c22e:	f64c 0298 	movw	r2, #51352	; 0xc898
    c232:	f2c0 0201 	movt	r2, #1
    c236:	210a      	movs	r1, #10
    c238:	f008 ff90 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c23c:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c23e:	9803      	ldr	r0, [sp, #12]
    c240:	0181      	lsls	r1, r0, #6
    c242:	0e82      	lsrs	r2, r0, #26
    c244:	2a00      	cmp	r2, #0
    c246:	9101      	str	r1, [sp, #4]
    c248:	d126      	bne.n	c298 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x8c>
    c24a:	e00b      	b.n	c264 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x58>
        assert!(y < SCREEN_HEIGHT, "y overflow");
    c24c:	f24c 7058 	movw	r0, #51032	; 0xc758
    c250:	f2c0 0001 	movt	r0, #1
    c254:	f64c 02a8 	movw	r2, #51368	; 0xc8a8
    c258:	f2c0 0201 	movt	r2, #1
    c25c:	210a      	movs	r1, #10
    c25e:	f008 ff7d 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c262:	defe      	udf	#254	; 0xfe
        let i = x + y * SCREEN_WIDTH;
    c264:	9802      	ldr	r0, [sp, #8]
    c266:	9901      	ldr	r1, [sp, #4]
    c268:	1842      	adds	r2, r0, r1
    c26a:	4613      	mov	r3, r2
    c26c:	4282      	cmp	r2, r0
    c26e:	9300      	str	r3, [sp, #0]
    c270:	d31e      	bcc.n	c2b0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0xa4>
    c272:	e7ff      	b.n	c274 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x68>
    c274:	9800      	ldr	r0, [sp, #0]
    c276:	9007      	str	r0, [sp, #28]
    c278:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    c27a:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    c27e:	d123      	bne.n	c2c8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0xbc>
    c280:	e7ff      	b.n	c282 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE+0x76>
    c282:	f244 2068 	movw	r0, #17000	; 0x4268
    c286:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c28a:	9900      	ldr	r1, [sp, #0]
    c28c:	5c40      	ldrb	r0, [r0, r1]
    c28e:	2800      	cmp	r0, #0
    c290:	bf18      	it	ne
    c292:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    c294:	b008      	add	sp, #32
    c296:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    c298:	f24c 6020 	movw	r0, #50720	; 0xc620
    c29c:	f2c0 0001 	movt	r0, #1
    c2a0:	f64c 02b8 	movw	r2, #51384	; 0xc8b8
    c2a4:	f2c0 0201 	movt	r2, #1
    c2a8:	2121      	movs	r1, #33	; 0x21
    c2aa:	f008 ff57 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2ae:	defe      	udf	#254	; 0xfe
    c2b0:	f24c 60b0 	movw	r0, #50864	; 0xc6b0
    c2b4:	f2c0 0001 	movt	r0, #1
    c2b8:	f64c 02c8 	movw	r2, #51400	; 0xc8c8
    c2bc:	f2c0 0201 	movt	r2, #1
    c2c0:	211c      	movs	r1, #28
    c2c2:	f008 ff4b 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c2c6:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    c2c8:	f64c 00d8 	movw	r0, #51416	; 0xc8d8
    c2cc:	f2c0 0001 	movt	r0, #1
    c2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    c2d4:	9900      	ldr	r1, [sp, #0]
    c2d6:	f008 ff57 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    c2da:	defe      	udf	#254	; 0xfe

0000c2dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E>:

    fn vram_setsize(&mut self, size: (usize, usize)) {
    c2dc:	b580      	push	{r7, lr}
    c2de:	b086      	sub	sp, #24
    c2e0:	9003      	str	r0, [sp, #12]
    c2e2:	9104      	str	r1, [sp, #16]
    c2e4:	9205      	str	r2, [sp, #20]
        //  Set the size of the screen.
        console::print("setsize "); console::printint(size.0 as i32); console::print(", "); console::printint(size.1 as i32); console::print("\n"); console::flush(); ////
    c2e6:	f24c 7014 	movw	r0, #50964	; 0xc714
    c2ea:	f2c0 0001 	movt	r0, #1
    c2ee:	2308      	movs	r3, #8
    c2f0:	9102      	str	r1, [sp, #8]
    c2f2:	4619      	mov	r1, r3
    c2f4:	9201      	str	r2, [sp, #4]
    c2f6:	f7fc fde6 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c2fa:	e7ff      	b.n	c2fc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x20>
    c2fc:	9802      	ldr	r0, [sp, #8]
    c2fe:	f7fc fe20 	bl	8f42 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c302:	e7ff      	b.n	c304 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x28>
    c304:	f64c 00e8 	movw	r0, #51432	; 0xc8e8
    c308:	f2c0 0001 	movt	r0, #1
    c30c:	2102      	movs	r1, #2
    c30e:	f7fc fdda 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c312:	e7ff      	b.n	c314 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x38>
    c314:	9801      	ldr	r0, [sp, #4]
    c316:	f7fc fe14 	bl	8f42 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    c31a:	e7ff      	b.n	c31c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x40>
    c31c:	f64c 00ea 	movw	r0, #51434	; 0xc8ea
    c320:	f2c0 0001 	movt	r0, #1
    c324:	2101      	movs	r1, #1
    c326:	f7fc fdce 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c32a:	e7ff      	b.n	c32c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x50>
    c32c:	f7fc fe11 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c330:	e7ff      	b.n	c332 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E+0x56>
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    c332:	b006      	add	sp, #24
    c334:	bd80      	pop	{r7, pc}

0000c336 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>:

    fn vram_size(&mut self) -> (usize, usize) {
    c336:	b083      	sub	sp, #12
    c338:	9002      	str	r0, [sp, #8]
    c33a:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    c33c:	9000      	str	r0, [sp, #0]
    c33e:	2020      	movs	r0, #32
    c340:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    c342:	9800      	ldr	r0, [sp, #0]
    c344:	9901      	ldr	r1, [sp, #4]
    c346:	b003      	add	sp, #12
    c348:	4770      	bx	lr

0000c34a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>:

    fn clock(&mut self) -> u64 {
    c34a:	b5b0      	push	{r4, r5, r7, lr}
    c34c:	b086      	sub	sp, #24
    c34e:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c350:	f00c ffa2 	bl	19298 <os_time_get>
    c354:	9004      	str	r0, [sp, #16]
    c356:	e7ff      	b.n	c358 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0xe>
    c358:	2000      	movs	r0, #0
    c35a:	9904      	ldr	r1, [sp, #16]
    c35c:	fba0 2301 	umull	r2, r3, r0, r1
    c360:	2b00      	cmp	r3, #0
    c362:	bf18      	it	ne
    c364:	2301      	movne	r3, #1
    c366:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    c36a:	fba0 e40c 	umull	lr, r4, r0, ip
    c36e:	2c00      	cmp	r4, #0
    c370:	bf18      	it	ne
    c372:	2401      	movne	r4, #1
    c374:	ea43 0304 	orr.w	r3, r3, r4
    c378:	4472      	add	r2, lr
    c37a:	fba1 ce0c 	umull	ip, lr, r1, ip
    c37e:	eb12 020e 	adds.w	r2, r2, lr
    c382:	f140 0000 	adc.w	r0, r0, #0
    c386:	ea40 0003 	orr.w	r0, r0, r3
    c38a:	2800      	cmp	r0, #0
    c38c:	f8cd c00c 	str.w	ip, [sp, #12]
    c390:	9202      	str	r2, [sp, #8]
    c392:	d124      	bne.n	c3de <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x94>
    c394:	e7ff      	b.n	c396 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x4c>
    c396:	2000      	movs	r0, #0
    c398:	9903      	ldr	r1, [sp, #12]
    c39a:	fba0 2301 	umull	r2, r3, r0, r1
    c39e:	2b00      	cmp	r3, #0
    c3a0:	bf18      	it	ne
    c3a2:	2301      	movne	r3, #1
    c3a4:	f44f 6cfa 	mov.w	ip, #2000	; 0x7d0
    c3a8:	f8dd e008 	ldr.w	lr, [sp, #8]
    c3ac:	fbae 450c 	umull	r4, r5, lr, ip
    c3b0:	2d00      	cmp	r5, #0
    c3b2:	bf18      	it	ne
    c3b4:	2501      	movne	r5, #1
    c3b6:	ea43 0305 	orr.w	r3, r3, r5
    c3ba:	4422      	add	r2, r4
    c3bc:	fba1 c40c 	umull	ip, r4, r1, ip
    c3c0:	1912      	adds	r2, r2, r4
    c3c2:	f140 0000 	adc.w	r0, r0, #0
    c3c6:	ea40 0003 	orr.w	r0, r0, r3
    c3ca:	2800      	cmp	r0, #0
    c3cc:	f8cd c004 	str.w	ip, [sp, #4]
    c3d0:	9200      	str	r2, [sp, #0]
    c3d2:	d110      	bne.n	c3f6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0xac>
    c3d4:	e7ff      	b.n	c3d6 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E+0x8c>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    c3d6:	9801      	ldr	r0, [sp, #4]
    c3d8:	9900      	ldr	r1, [sp, #0]
    c3da:	b006      	add	sp, #24
    c3dc:	bdb0      	pop	{r4, r5, r7, pc}
        unsafe { os::os_time_get() as u64 * 1000_u64 * 2000_u64 }
    c3de:	f24c 6020 	movw	r0, #50720	; 0xc620
    c3e2:	f2c0 0001 	movt	r0, #1
    c3e6:	f64c 02ec 	movw	r2, #51436	; 0xc8ec
    c3ea:	f2c0 0201 	movt	r2, #1
    c3ee:	2121      	movs	r1, #33	; 0x21
    c3f0:	f008 feb4 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c3f4:	defe      	udf	#254	; 0xfe
    c3f6:	f24c 6020 	movw	r0, #50720	; 0xc620
    c3fa:	f2c0 0001 	movt	r0, #1
    c3fe:	f64c 02ec 	movw	r2, #51436	; 0xc8ec
    c402:	f2c0 0201 	movt	r2, #1
    c406:	2121      	movs	r1, #33	; 0x21
    c408:	f008 fea8 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c40c:	defe      	udf	#254	; 0xfe

0000c40e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE>:

    fn beep(&mut self) {
    c40e:	b081      	sub	sp, #4
    c410:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    c412:	b001      	add	sp, #4
    c414:	4770      	bx	lr

0000c416 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E>:

    fn sched(&mut self) -> bool {
    c416:	b580      	push	{r7, lr}
    c418:	b082      	sub	sp, #8
    c41a:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        //  console::print("sched\n"); console::flush(); ////
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    c41c:	f00b fd14 	bl	17e48 <hal_watchdog_tickle>
    c420:	e7ff      	b.n	c422 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E+0xc>
    c422:	2001      	movs	r0, #1
        unsafe { os::os_time_delay(1) };
    c424:	f00c ff5e 	bl	192e4 <os_time_delay>
    c428:	e7ff      	b.n	c42a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E+0x14>
    c42a:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    c42c:	b002      	add	sp, #8
    c42e:	bd80      	pop	{r7, pc}

0000c430 <_ZN3app5chip812handle_touch17habca32c74e5cefadE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    c430:	b580      	push	{r7, lr}
    c432:	b084      	sub	sp, #16
    c434:	460a      	mov	r2, r1
    c436:	4603      	mov	r3, r0
    c438:	f8ad 000c 	strh.w	r0, [sp, #12]
    c43c:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    c440:	f64c 00fc 	movw	r0, #51452	; 0xc8fc
    c444:	f2c0 0001 	movt	r0, #1
    c448:	2118      	movs	r1, #24
    c44a:	9202      	str	r2, [sp, #8]
    c44c:	9301      	str	r3, [sp, #4]
    c44e:	f7fc fd3a 	bl	8ec6 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    c452:	e7ff      	b.n	c454 <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x24>
    c454:	f7fc fd7d 	bl	8f52 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    c458:	e7ff      	b.n	c45a <_ZN3app5chip812handle_touch17habca32c74e5cefadE+0x2a>
}
    c45a:	b004      	add	sp, #16
    c45c:	bd80      	pop	{r7, pc}

0000c45e <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE>:
    c45e:	b580      	push	{r7, lr}
    c460:	b08c      	sub	sp, #48	; 0x30
    c462:	9103      	str	r1, [sp, #12]
    c464:	9204      	str	r2, [sp, #16]
    c466:	930a      	str	r3, [sp, #40]	; 0x28
    c468:	2100      	movs	r1, #0
    c46a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c46e:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c472:	2101      	movs	r1, #1
    c474:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    c478:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    c47c:	9903      	ldr	r1, [sp, #12]
    c47e:	2900      	cmp	r1, #0
    c480:	9302      	str	r3, [sp, #8]
    c482:	9001      	str	r0, [sp, #4]
    c484:	d001      	beq.n	c48a <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x2c>
    c486:	e7ff      	b.n	c488 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x2a>
    c488:	e004      	b.n	c494 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x36>
    c48a:	2000      	movs	r0, #0
    c48c:	9901      	ldr	r1, [sp, #4]
    c48e:	6008      	str	r0, [r1, #0]
    c490:	e020      	b.n	c4d4 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x76>
    c492:	defe      	udf	#254	; 0xfe
    c494:	2000      	movs	r0, #0
    c496:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c49a:	9904      	ldr	r1, [sp, #16]
    c49c:	910b      	str	r1, [sp, #44]	; 0x2c
    c49e:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c4a2:	9108      	str	r1, [sp, #32]
    c4a4:	9a08      	ldr	r2, [sp, #32]
    c4a6:	a805      	add	r0, sp, #20
    c4a8:	9902      	ldr	r1, [sp, #8]
    c4aa:	f000 fa65 	bl	c978 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E>
    c4ae:	e7ff      	b.n	c4b0 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x52>
    c4b0:	9805      	ldr	r0, [sp, #20]
    c4b2:	9906      	ldr	r1, [sp, #24]
    c4b4:	9a07      	ldr	r2, [sp, #28]
    c4b6:	9b01      	ldr	r3, [sp, #4]
    c4b8:	60da      	str	r2, [r3, #12]
    c4ba:	6099      	str	r1, [r3, #8]
    c4bc:	6058      	str	r0, [r3, #4]
    c4be:	2001      	movs	r0, #1
    c4c0:	6018      	str	r0, [r3, #0]
    c4c2:	e007      	b.n	c4d4 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x76>
    c4c4:	9803      	ldr	r0, [sp, #12]
    c4c6:	2801      	cmp	r0, #1
    c4c8:	d00c      	beq.n	c4e4 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x86>
    c4ca:	e015      	b.n	c4f8 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x9a>
    c4cc:	2000      	movs	r0, #0
    c4ce:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c4d2:	e7f7      	b.n	c4c4 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x66>
    c4d4:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c4d8:	07c0      	lsls	r0, r0, #31
    c4da:	2800      	cmp	r0, #0
    c4dc:	d1f6      	bne.n	c4cc <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x6e>
    c4de:	e7f1      	b.n	c4c4 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x66>
    c4e0:	b00c      	add	sp, #48	; 0x30
    c4e2:	bd80      	pop	{r7, pc}
    c4e4:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c4e8:	07c0      	lsls	r0, r0, #31
    c4ea:	2800      	cmp	r0, #0
    c4ec:	d0f8      	beq.n	c4e0 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>
    c4ee:	e7ff      	b.n	c4f0 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x92>
    c4f0:	2000      	movs	r0, #0
    c4f2:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c4f6:	e7f3      	b.n	c4e0 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>
    c4f8:	e7f2      	b.n	c4e0 <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE+0x82>

0000c4fa <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE>:
    c4fa:	b580      	push	{r7, lr}
    c4fc:	b08a      	sub	sp, #40	; 0x28
    c4fe:	9104      	str	r1, [sp, #16]
    c500:	9205      	str	r2, [sp, #20]
    c502:	9308      	str	r3, [sp, #32]
    c504:	2100      	movs	r1, #0
    c506:	f88d 101e 	strb.w	r1, [sp, #30]
    c50a:	f88d 101f 	strb.w	r1, [sp, #31]
    c50e:	2101      	movs	r1, #1
    c510:	f88d 101f 	strb.w	r1, [sp, #31]
    c514:	f88d 101e 	strb.w	r1, [sp, #30]
    c518:	9904      	ldr	r1, [sp, #16]
    c51a:	2900      	cmp	r1, #0
    c51c:	9303      	str	r3, [sp, #12]
    c51e:	9002      	str	r0, [sp, #8]
    c520:	d001      	beq.n	c526 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x2c>
    c522:	e7ff      	b.n	c524 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x2a>
    c524:	e004      	b.n	c530 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x36>
    c526:	2000      	movs	r0, #0
    c528:	9902      	ldr	r1, [sp, #8]
    c52a:	6008      	str	r0, [r1, #0]
    c52c:	e01f      	b.n	c56e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x74>
    c52e:	defe      	udf	#254	; 0xfe
    c530:	2000      	movs	r0, #0
    c532:	f88d 001f 	strb.w	r0, [sp, #31]
    c536:	9905      	ldr	r1, [sp, #20]
    c538:	9109      	str	r1, [sp, #36]	; 0x24
    c53a:	f88d 001e 	strb.w	r0, [sp, #30]
    c53e:	9106      	str	r1, [sp, #24]
    c540:	9906      	ldr	r1, [sp, #24]
    c542:	9803      	ldr	r0, [sp, #12]
    c544:	f000 fa0a 	bl	c95c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E>
    c548:	9001      	str	r0, [sp, #4]
    c54a:	9100      	str	r1, [sp, #0]
    c54c:	e7ff      	b.n	c54e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x54>
    c54e:	9801      	ldr	r0, [sp, #4]
    c550:	9902      	ldr	r1, [sp, #8]
    c552:	6048      	str	r0, [r1, #4]
    c554:	9a00      	ldr	r2, [sp, #0]
    c556:	608a      	str	r2, [r1, #8]
    c558:	2301      	movs	r3, #1
    c55a:	600b      	str	r3, [r1, #0]
    c55c:	e007      	b.n	c56e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x74>
    c55e:	9804      	ldr	r0, [sp, #16]
    c560:	2801      	cmp	r0, #1
    c562:	d00c      	beq.n	c57e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x84>
    c564:	e015      	b.n	c592 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x98>
    c566:	2000      	movs	r0, #0
    c568:	f88d 001e 	strb.w	r0, [sp, #30]
    c56c:	e7f7      	b.n	c55e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x64>
    c56e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    c572:	07c0      	lsls	r0, r0, #31
    c574:	2800      	cmp	r0, #0
    c576:	d1f6      	bne.n	c566 <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x6c>
    c578:	e7f1      	b.n	c55e <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x64>
    c57a:	b00a      	add	sp, #40	; 0x28
    c57c:	bd80      	pop	{r7, pc}
    c57e:	f89d 001f 	ldrb.w	r0, [sp, #31]
    c582:	07c0      	lsls	r0, r0, #31
    c584:	2800      	cmp	r0, #0
    c586:	d0f8      	beq.n	c57a <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>
    c588:	e7ff      	b.n	c58a <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x90>
    c58a:	2000      	movs	r0, #0
    c58c:	f88d 001f 	strb.w	r0, [sp, #31]
    c590:	e7f3      	b.n	c57a <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>
    c592:	e7f2      	b.n	c57a <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE+0x80>

0000c594 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E>:
    c594:	b085      	sub	sp, #20
    c596:	9000      	str	r0, [sp, #0]
    c598:	2000      	movs	r0, #0
    c59a:	f88d 000b 	strb.w	r0, [sp, #11]
    c59e:	f88d 000a 	strb.w	r0, [sp, #10]
    c5a2:	2001      	movs	r0, #1
    c5a4:	f88d 000b 	strb.w	r0, [sp, #11]
    c5a8:	f88d 000a 	strb.w	r0, [sp, #10]
    c5ac:	9800      	ldr	r0, [sp, #0]
    c5ae:	2800      	cmp	r0, #0
    c5b0:	4601      	mov	r1, r0
    c5b2:	bf18      	it	ne
    c5b4:	2101      	movne	r1, #1
    c5b6:	2800      	cmp	r0, #0
    c5b8:	d001      	beq.n	c5be <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x2a>
    c5ba:	e7ff      	b.n	c5bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x28>
    c5bc:	e005      	b.n	c5ca <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x36>
    c5be:	2000      	movs	r0, #0
    c5c0:	f88d 000a 	strb.w	r0, [sp, #10]
    c5c4:	9001      	str	r0, [sp, #4]
    c5c6:	e007      	b.n	c5d8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x44>
    c5c8:	defe      	udf	#254	; 0xfe
    c5ca:	2000      	movs	r0, #0
    c5cc:	f88d 000b 	strb.w	r0, [sp, #11]
    c5d0:	9800      	ldr	r0, [sp, #0]
    c5d2:	9004      	str	r0, [sp, #16]
    c5d4:	9001      	str	r0, [sp, #4]
    c5d6:	e7ff      	b.n	c5d8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x44>
    c5d8:	f89d 000a 	ldrb.w	r0, [sp, #10]
    c5dc:	07c0      	lsls	r0, r0, #31
    c5de:	2800      	cmp	r0, #0
    c5e0:	d104      	bne.n	c5ec <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x58>
    c5e2:	e7ff      	b.n	c5e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x50>
    c5e4:	9800      	ldr	r0, [sp, #0]
    c5e6:	2800      	cmp	r0, #0
    c5e8:	d107      	bne.n	c5fa <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x66>
    c5ea:	e010      	b.n	c60e <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x7a>
    c5ec:	2000      	movs	r0, #0
    c5ee:	f88d 000a 	strb.w	r0, [sp, #10]
    c5f2:	e7f7      	b.n	c5e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x50>
    c5f4:	9801      	ldr	r0, [sp, #4]
    c5f6:	b005      	add	sp, #20
    c5f8:	4770      	bx	lr
    c5fa:	f89d 000b 	ldrb.w	r0, [sp, #11]
    c5fe:	07c0      	lsls	r0, r0, #31
    c600:	2800      	cmp	r0, #0
    c602:	d0f7      	beq.n	c5f4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>
    c604:	e7ff      	b.n	c606 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x72>
    c606:	2000      	movs	r0, #0
    c608:	f88d 000b 	strb.w	r0, [sp, #11]
    c60c:	e7f2      	b.n	c5f4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>
    c60e:	e7f1      	b.n	c5f4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E+0x60>

0000c610 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE>:
    c610:	b084      	sub	sp, #16
    c612:	9002      	str	r0, [sp, #8]
    c614:	6801      	ldr	r1, [r0, #0]
    c616:	2900      	cmp	r1, #0
    c618:	9000      	str	r0, [sp, #0]
    c61a:	d001      	beq.n	c620 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x10>
    c61c:	e7ff      	b.n	c61e <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0xe>
    c61e:	e003      	b.n	c628 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x18>
    c620:	2000      	movs	r0, #0
    c622:	9001      	str	r0, [sp, #4]
    c624:	e005      	b.n	c632 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x22>
    c626:	defe      	udf	#254	; 0xfe
    c628:	9800      	ldr	r0, [sp, #0]
    c62a:	1d01      	adds	r1, r0, #4
    c62c:	9103      	str	r1, [sp, #12]
    c62e:	9101      	str	r1, [sp, #4]
    c630:	e7ff      	b.n	c632 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE+0x22>
    c632:	9801      	ldr	r0, [sp, #4]
    c634:	b004      	add	sp, #16
    c636:	4770      	bx	lr

0000c638 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E>:
    c638:	b084      	sub	sp, #16
    c63a:	9002      	str	r0, [sp, #8]
    c63c:	9802      	ldr	r0, [sp, #8]
    c63e:	2800      	cmp	r0, #0
    c640:	4602      	mov	r2, r0
    c642:	bf18      	it	ne
    c644:	2201      	movne	r2, #1
    c646:	2800      	cmp	r0, #0
    c648:	9101      	str	r1, [sp, #4]
    c64a:	d001      	beq.n	c650 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x18>
    c64c:	e7ff      	b.n	c64e <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x16>
    c64e:	e009      	b.n	c664 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x2c>
    c650:	f64c 1014 	movw	r0, #51476	; 0xc914
    c654:	f2c0 0001 	movt	r0, #1
    c658:	212b      	movs	r1, #43	; 0x2b
    c65a:	9a01      	ldr	r2, [sp, #4]
    c65c:	f008 fd7e 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    c660:	defe      	udf	#254	; 0xfe
    c662:	defe      	udf	#254	; 0xfe
    c664:	9802      	ldr	r0, [sp, #8]
    c666:	9003      	str	r0, [sp, #12]
    c668:	9902      	ldr	r1, [sp, #8]
    c66a:	2900      	cmp	r1, #0
    c66c:	9000      	str	r0, [sp, #0]
    c66e:	d003      	beq.n	c678 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x40>
    c670:	e7ff      	b.n	c672 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>
    c672:	9800      	ldr	r0, [sp, #0]
    c674:	b004      	add	sp, #16
    c676:	4770      	bx	lr
    c678:	e7fb      	b.n	c672 <_ZN4core6option15Option$LT$T$GT$6unwrap17hd711bcba4f6eac71E+0x3a>

0000c67a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>:
    c67a:	b081      	sub	sp, #4
    c67c:	2100      	movs	r1, #0
    c67e:	6001      	str	r1, [r0, #0]
    c680:	b001      	add	sp, #4
    c682:	4770      	bx	lr

0000c684 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE>:
    c684:	b580      	push	{r7, lr}
    c686:	b082      	sub	sp, #8
    c688:	9001      	str	r0, [sp, #4]
    c68a:	f7ff ff83 	bl	c594 <_ZN4core6option15Option$LT$T$GT$5ok_or17h816831229b5416c9E>
    c68e:	9000      	str	r0, [sp, #0]
    c690:	e7ff      	b.n	c692 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE+0xe>
    c692:	9800      	ldr	r0, [sp, #0]
    c694:	b002      	add	sp, #8
    c696:	bd80      	pop	{r7, pc}

0000c698 <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E>:
        item
    ).expect("draw blocks fail");
}

/// Draw the pixel colours to the display at the window from (sx,sy) to (ex,ey)
pub fn set_display_pixels<P: IntoIterator<Item = u16>>(sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c698:	b5f0      	push	{r4, r5, r6, r7, lr}
    c69a:	b08d      	sub	sp, #52	; 0x34
    c69c:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    c6a0:	469e      	mov	lr, r3
    c6a2:	4614      	mov	r4, r2
    c6a4:	460d      	mov	r5, r1
    c6a6:	4606      	mov	r6, r0
    c6a8:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    c6ac:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    c6b0:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    c6b4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    unsafe { DISPLAY.set_pixels(sx, sy, ex, ey, colors) }
    c6b8:	466f      	mov	r7, sp
    c6ba:	f8c7 c004 	str.w	ip, [r7, #4]
    c6be:	603b      	str	r3, [r7, #0]
    c6c0:	f240 1348 	movw	r3, #328	; 0x148
    c6c4:	f2c2 0300 	movt	r3, #8192	; 0x2000
    c6c8:	900a      	str	r0, [sp, #40]	; 0x28
    c6ca:	4618      	mov	r0, r3
    c6cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c6ce:	9109      	str	r1, [sp, #36]	; 0x24
    c6d0:	4619      	mov	r1, r3
    c6d2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    c6d6:	9208      	str	r2, [sp, #32]
    c6d8:	4662      	mov	r2, ip
    c6da:	9b08      	ldr	r3, [sp, #32]
    c6dc:	f8cd e01c 	str.w	lr, [sp, #28]
    c6e0:	9406      	str	r4, [sp, #24]
    c6e2:	9505      	str	r5, [sp, #20]
    c6e4:	9604      	str	r6, [sp, #16]
    c6e6:	f000 f807 	bl	c6f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>
    c6ea:	9003      	str	r0, [sp, #12]
    c6ec:	e7ff      	b.n	c6ee <_ZN22piet_embedded_graphics7display18set_display_pixels17hd0f20e3b4184e9a6E+0x56>
}
    c6ee:	9803      	ldr	r0, [sp, #12]
    c6f0:	f000 0001 	and.w	r0, r0, #1
    c6f4:	b00d      	add	sp, #52	; 0x34
    c6f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000c6f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
    c6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c6fa:	b091      	sub	sp, #68	; 0x44
    c6fc:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
    c700:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
    c704:	461c      	mov	r4, r3
    c706:	4615      	mov	r5, r2
    c708:	460e      	mov	r6, r1
    c70a:	900a      	str	r0, [sp, #40]	; 0x28
    c70c:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
    c710:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
    c714:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
    c718:	f8ad e032 	strh.w	lr, [sp, #50]	; 0x32
    c71c:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
    c71e:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    c722:	2701      	movs	r7, #1
    c724:	f88d 7027 	strb.w	r7, [sp, #39]	; 0x27
    c728:	466f      	mov	r7, sp
    c72a:	f8c7 e000 	str.w	lr, [r7]
    c72e:	9008      	str	r0, [sp, #32]
    c730:	f8cd c01c 	str.w	ip, [sp, #28]
    c734:	9406      	str	r4, [sp, #24]
    c736:	9505      	str	r5, [sp, #20]
    c738:	9604      	str	r6, [sp, #16]
    c73a:	f7fd f8c0 	bl	98be <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
    c73e:	9003      	str	r0, [sp, #12]
    c740:	e7ff      	b.n	c742 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x4a>
    c742:	9803      	ldr	r0, [sp, #12]
    c744:	f000 0001 	and.w	r0, r0, #1
    c748:	f7fc fa10 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c74c:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    c750:	e7ff      	b.n	c752 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x5a>
    c752:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    c756:	07c1      	lsls	r1, r0, #31
    c758:	2900      	cmp	r1, #0
    c75a:	d001      	beq.n	c760 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x68>
    c75c:	e7ff      	b.n	c75e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x66>
    c75e:	e009      	b.n	c774 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x7c>
    c760:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
    c762:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c766:	9808      	ldr	r0, [sp, #32]
    c768:	9907      	ldr	r1, [sp, #28]
    c76a:	f000 f848 	bl	c7fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>
    c76e:	9002      	str	r0, [sp, #8]
    c770:	e00d      	b.n	c78e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x96>
        self.set_address_window(sx, sy, ex, ey)?;
    c772:	defe      	udf	#254	; 0xfe
    c774:	f005 f97b 	bl	11a6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c778:	e003      	b.n	c782 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x8a>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
    c77a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    c77e:	b011      	add	sp, #68	; 0x44
    c780:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
    c782:	f007 fdbc 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c786:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    c78a:	e7ff      	b.n	c78c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x94>
    c78c:	e031      	b.n	c7f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        self.write_pixels(colors) ? ;
    c78e:	9802      	ldr	r0, [sp, #8]
    c790:	f000 0001 	and.w	r0, r0, #1
    c794:	f7fc f9ea 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c798:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    c79c:	e7ff      	b.n	c79e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xa6>
    c79e:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    c7a2:	07c1      	lsls	r1, r0, #31
    c7a4:	2900      	cmp	r1, #0
    c7a6:	d001      	beq.n	c7ac <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb4>
    c7a8:	e7ff      	b.n	c7aa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xb2>
    c7aa:	e004      	b.n	c7b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xbe>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c7ac:	f006 fb6d 	bl	12e8a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    c7b0:	9001      	str	r0, [sp, #4]
    c7b2:	e009      	b.n	c7c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xd0>
        self.write_pixels(colors) ? ;
    c7b4:	defe      	udf	#254	; 0xfe
    c7b6:	f005 f95a 	bl	11a6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c7ba:	e7ff      	b.n	c7bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xc4>
    c7bc:	f007 fd9f 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c7c0:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    c7c4:	e7ff      	b.n	c7c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xce>
    c7c6:	e014      	b.n	c7f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xfa>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c7c8:	f64c 113f 	movw	r1, #51519	; 0xc93f
    c7cc:	f2c0 0101 	movt	r1, #1
    c7d0:	f64c 139c 	movw	r3, #51612	; 0xc99c
    c7d4:	f2c0 0301 	movt	r3, #1
    c7d8:	220e      	movs	r2, #14
    c7da:	9801      	ldr	r0, [sp, #4]
    c7dc:	f7fc f98d 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    c7e0:	e7ff      	b.n	c7e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xea>
    c7e2:	2000      	movs	r0, #0
        Ok(())
    c7e4:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    }
    c7e8:	e7c7      	b.n	c77a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    c7ea:	2000      	movs	r0, #0
    c7ec:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    c7f0:	e7c3      	b.n	c77a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>
    c7f2:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    c7f6:	07c0      	lsls	r0, r0, #31
    c7f8:	2800      	cmp	r0, #0
    c7fa:	d1f6      	bne.n	c7ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0xf2>
    c7fc:	e7bd      	b.n	c77a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17h505f9183f5a7bf53E+0x82>

0000c7fe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
    c7fe:	b580      	push	{r7, lr}
    c800:	b094      	sub	sp, #80	; 0x50
    c802:	900d      	str	r0, [sp, #52]	; 0x34
    c804:	910e      	str	r1, [sp, #56]	; 0x38
    c806:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
    c808:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
    c80c:	2301      	movs	r3, #1
    c80e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    c812:	232c      	movs	r3, #44	; 0x2c
    c814:	f88d 301f 	strb.w	r3, [sp, #31]
    c818:	9209      	str	r2, [sp, #36]	; 0x24
    c81a:	9208      	str	r2, [sp, #32]
    c81c:	9208      	str	r2, [sp, #32]
    c81e:	9a08      	ldr	r2, [sp, #32]
    c820:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c822:	f89d c01f 	ldrb.w	ip, [sp, #31]
    c826:	9006      	str	r0, [sp, #24]
    c828:	9105      	str	r1, [sp, #20]
    c82a:	4661      	mov	r1, ip
    c82c:	f7fc ff56 	bl	96dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
    c830:	9004      	str	r0, [sp, #16]
    c832:	e7ff      	b.n	c834 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x36>
    c834:	9804      	ldr	r0, [sp, #16]
    c836:	f000 0001 	and.w	r0, r0, #1
    c83a:	f7fc f997 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c83e:	f88d 001e 	strb.w	r0, [sp, #30]
    c842:	e7ff      	b.n	c844 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x46>
    c844:	f89d 001e 	ldrb.w	r0, [sp, #30]
    c848:	07c1      	lsls	r1, r0, #31
    c84a:	2900      	cmp	r1, #0
    c84c:	d001      	beq.n	c852 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x54>
    c84e:	e7ff      	b.n	c850 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x52>
    c850:	e008      	b.n	c864 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x66>
    c852:	2000      	movs	r0, #0
        for color in colors {
    c854:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    c858:	9805      	ldr	r0, [sp, #20]
    c85a:	f000 f86e 	bl	c93a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>
    c85e:	9003      	str	r0, [sp, #12]
    c860:	e00d      	b.n	c87e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x80>
        self.write_command(Instruction::RAMWR, None)?;
    c862:	defe      	udf	#254	; 0xfe
    c864:	f005 f903 	bl	11a6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c868:	e003      	b.n	c872 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x74>
    }
    c86a:	f89d 001d 	ldrb.w	r0, [sp, #29]
    c86e:	b014      	add	sp, #80	; 0x50
    c870:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
    c872:	f007 fd44 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c876:	f88d 001d 	strb.w	r0, [sp, #29]
    c87a:	e7ff      	b.n	c87c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x7e>
    c87c:	e057      	b.n	c92e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        for color in colors {
    c87e:	9803      	ldr	r0, [sp, #12]
    c880:	900a      	str	r0, [sp, #40]	; 0x28
    c882:	e7ff      	b.n	c884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
    c884:	a80a      	add	r0, sp, #40	; 0x28
    c886:	f000 f85c 	bl	c942 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>
    c88a:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
    c88e:	f8ad 002c 	strh.w	r0, [sp, #44]	; 0x2c
    c892:	e7ff      	b.n	c894 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x96>
    c894:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
    c898:	4601      	mov	r1, r0
    c89a:	2800      	cmp	r0, #0
    c89c:	d001      	beq.n	c8a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa4>
    c89e:	e7ff      	b.n	c8a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa2>
    c8a0:	e001      	b.n	c8a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xa8>
        }
    c8a2:	e02b      	b.n	c8fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfe>
        for color in colors {
    c8a4:	defe      	udf	#254	; 0xfe
    c8a6:	f8bd 002e 	ldrh.w	r0, [sp, #46]	; 0x2e
    c8aa:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    c8ae:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    c8b2:	f8ad 004e 	strh.w	r0, [sp, #78]	; 0x4e
            self.write_word(color)?;
    c8b6:	9906      	ldr	r1, [sp, #24]
    c8b8:	9002      	str	r0, [sp, #8]
    c8ba:	4608      	mov	r0, r1
    c8bc:	9902      	ldr	r1, [sp, #8]
    c8be:	f7fc feef 	bl	96a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
    c8c2:	9001      	str	r0, [sp, #4]
    c8c4:	e7ff      	b.n	c8c6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xc8>
    c8c6:	9801      	ldr	r0, [sp, #4]
    c8c8:	f000 0001 	and.w	r0, r0, #1
    c8cc:	f7fc f94e 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
    c8d0:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
    c8d4:	e7ff      	b.n	c8d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xd8>
    c8d6:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
    c8da:	07c1      	lsls	r1, r0, #31
    c8dc:	2900      	cmp	r1, #0
    c8de:	d001      	beq.n	c8e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe6>
    c8e0:	e7ff      	b.n	c8e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xe4>
    c8e2:	e001      	b.n	c8e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xea>
        for color in colors {
    c8e4:	e7ce      	b.n	c884 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x86>
            self.write_word(color)?;
    c8e6:	defe      	udf	#254	; 0xfe
    c8e8:	f005 f8c1 	bl	11a6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>
    c8ec:	e7ff      	b.n	c8ee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xf0>
    c8ee:	f007 fd06 	bl	142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
    c8f2:	f88d 001d 	strb.w	r0, [sp, #29]
    c8f6:	e7ff      	b.n	c8f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfa>
        }
    c8f8:	e7ff      	b.n	c8fa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0xfc>
    }
    c8fa:	e018      	b.n	c92e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x130>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
    c8fc:	f006 fac5 	bl	12e8a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
    c900:	9000      	str	r0, [sp, #0]
    c902:	e7ff      	b.n	c904 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x106>
    c904:	f64c 113f 	movw	r1, #51519	; 0xc93f
    c908:	f2c0 0101 	movt	r1, #1
    c90c:	f64c 13ac 	movw	r3, #51628	; 0xc9ac
    c910:	f2c0 0301 	movt	r3, #1
    c914:	220e      	movs	r2, #14
    c916:	9800      	ldr	r0, [sp, #0]
    c918:	f7fc f8ef 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    c91c:	e7ff      	b.n	c91e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x120>
    c91e:	2000      	movs	r0, #0
        Ok(())
    c920:	f88d 001d 	strb.w	r0, [sp, #29]
    }
    c924:	e7a1      	b.n	c86a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    c926:	2000      	movs	r0, #0
    c928:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
    c92c:	e79d      	b.n	c86a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>
    c92e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    c932:	07c0      	lsls	r0, r0, #31
    c934:	2800      	cmp	r0, #0
    c936:	d1f6      	bne.n	c926 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x128>
    c938:	e797      	b.n	c86a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17h709fee276164c164E+0x6c>

0000c93a <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hcdf096192109e52aE>:
    c93a:	b081      	sub	sp, #4
    c93c:	9000      	str	r0, [sp, #0]
    c93e:	b001      	add	sp, #4
    c940:	4770      	bx	lr

0000c942 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE>:
    c942:	b580      	push	{r7, lr}
    c944:	b084      	sub	sp, #16
    c946:	9003      	str	r0, [sp, #12]
    c948:	6800      	ldr	r0, [r0, #0]
    c94a:	f7ff f963 	bl	bc14 <_ZN84_$LT$app..chip8..PixelIterator$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h923e0f1944f005a4E>
    c94e:	9002      	str	r0, [sp, #8]
    c950:	9101      	str	r1, [sp, #4]
    c952:	e7ff      	b.n	c954 <_ZN72_$LT$$RF$mut$u20$I$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4e486716e9c6f20bE+0x12>
    c954:	9802      	ldr	r0, [sp, #8]
    c956:	9901      	ldr	r1, [sp, #4]
    c958:	b004      	add	sp, #16
    c95a:	bd80      	pop	{r7, pc}

0000c95c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E>:
    c95c:	b580      	push	{r7, lr}
    c95e:	b084      	sub	sp, #16
    c960:	9102      	str	r1, [sp, #8]
    c962:	9003      	str	r0, [sp, #12]
    c964:	9902      	ldr	r1, [sp, #8]
    c966:	f003 fe97 	bl	10698 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E>
    c96a:	9001      	str	r0, [sp, #4]
    c96c:	9100      	str	r1, [sp, #0]
    c96e:	e7ff      	b.n	c970 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd0fe86659c92dab9E+0x14>
    c970:	9801      	ldr	r0, [sp, #4]
    c972:	9900      	ldr	r1, [sp, #0]
    c974:	b004      	add	sp, #16
    c976:	bd80      	pop	{r7, pc}

0000c978 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E>:
    c978:	b580      	push	{r7, lr}
    c97a:	b082      	sub	sp, #8
    c97c:	9200      	str	r2, [sp, #0]
    c97e:	9101      	str	r1, [sp, #4]
    c980:	9a00      	ldr	r2, [sp, #0]
    c982:	f003 fe77 	bl	10674 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE>
    c986:	e7ff      	b.n	c988 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17hd8717a35acbf0f87E+0x10>
    c988:	b002      	add	sp, #8
    c98a:	bd80      	pop	{r7, pc}

0000c98c <_ZN8libchip814Chip8$LT$T$GT$3new17h365c56fd6f683110E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    c98c:	b5b0      	push	{r4, r5, r7, lr}
    c98e:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    c992:	b082      	sub	sp, #8
    c994:	f10d 0e0c 	add.w	lr, sp, #12
    c998:	f50e 5282 	add.w	r2, lr, #4160	; 0x1040
    c99c:	2300      	movs	r3, #0
        Self {
            v: [0; REGS],
    c99e:	930b      	str	r3, [sp, #44]	; 0x2c
    c9a0:	930a      	str	r3, [sp, #40]	; 0x28
    c9a2:	9309      	str	r3, [sp, #36]	; 0x24
    c9a4:	9308      	str	r3, [sp, #32]
    c9a6:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
    c9aa:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    c9ae:	9007      	str	r0, [sp, #28]
    c9b0:	4660      	mov	r0, ip
    c9b2:	9106      	str	r1, [sp, #24]
    c9b4:	4671      	mov	r1, lr
    c9b6:	9205      	str	r2, [sp, #20]
    c9b8:	9304      	str	r3, [sp, #16]
    c9ba:	f8cd c00c 	str.w	ip, [sp, #12]
    c9be:	f8cd e008 	str.w	lr, [sp, #8]
    c9c2:	f00e fed3 	bl	1b76c <__aeabi_memclr>
            stack: [0; STACKS],
    c9c6:	9804      	ldr	r0, [sp, #16]
    c9c8:	9905      	ldr	r1, [sp, #20]
    c9ca:	6008      	str	r0, [r1, #0]
    c9cc:	f841 0c04 	str.w	r0, [r1, #-4]
    c9d0:	f841 0c08 	str.w	r0, [r1, #-8]
    c9d4:	f841 0c0c 	str.w	r0, [r1, #-12]
    c9d8:	f841 0c10 	str.w	r0, [r1, #-16]
    c9dc:	f841 0c14 	str.w	r0, [r1, #-20]
    c9e0:	f841 0c18 	str.w	r0, [r1, #-24]
    c9e4:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    c9e8:	6088      	str	r0, [r1, #8]
    c9ea:	6048      	str	r0, [r1, #4]
            running: false,
            hw,
    c9ec:	9a06      	ldr	r2, [sp, #24]
    c9ee:	6813      	ldr	r3, [r2, #0]
    c9f0:	f8d2 c004 	ldr.w	ip, [r2, #4]
    c9f4:	f8c1 c018 	str.w	ip, [r1, #24]
    c9f8:	614b      	str	r3, [r1, #20]
        Self {
    c9fa:	9b08      	ldr	r3, [sp, #32]
    c9fc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    ca00:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
    ca04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    ca06:	9d07      	ldr	r5, [sp, #28]
    ca08:	642c      	str	r4, [r5, #64]	; 0x40
    ca0a:	f8c5 e03c 	str.w	lr, [r5, #60]	; 0x3c
    ca0e:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
    ca12:	636b      	str	r3, [r5, #52]	; 0x34
    ca14:	8228      	strh	r0, [r5, #16]
    ca16:	f885 0044 	strb.w	r0, [r5, #68]	; 0x44
    ca1a:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
    ca1e:	8268      	strh	r0, [r5, #18]
    ca20:	f885 0046 	strb.w	r0, [r5, #70]	; 0x46
    ca24:	f105 0047 	add.w	r0, r5, #71	; 0x47
    ca28:	9903      	ldr	r1, [sp, #12]
    ca2a:	9a02      	ldr	r2, [sp, #8]
    ca2c:	f00e fea2 	bl	1b774 <__aeabi_memcpy>
    ca30:	9907      	ldr	r1, [sp, #28]
    ca32:	f101 0214 	add.w	r2, r1, #20
    ca36:	f10d 0e10 	add.w	lr, sp, #16
    ca3a:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    ca3e:	2320      	movs	r3, #32
    ca40:	9001      	str	r0, [sp, #4]
    ca42:	4610      	mov	r0, r2
    ca44:	461a      	mov	r2, r3
    ca46:	f00e fe95 	bl	1b774 <__aeabi_memcpy>
    ca4a:	9905      	ldr	r1, [sp, #20]
    ca4c:	684a      	ldr	r2, [r1, #4]
    ca4e:	688b      	ldr	r3, [r1, #8]
    ca50:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    ca54:	f8d1 e010 	ldr.w	lr, [r1, #16]
    ca58:	9c07      	ldr	r4, [sp, #28]
    ca5a:	6063      	str	r3, [r4, #4]
    ca5c:	6022      	str	r2, [r4, #0]
    ca5e:	f8c4 e00c 	str.w	lr, [r4, #12]
    ca62:	f8c4 c008 	str.w	ip, [r4, #8]
    ca66:	f241 0247 	movw	r2, #4167	; 0x1047
    ca6a:	9b04      	ldr	r3, [sp, #16]
    ca6c:	54a3      	strb	r3, [r4, r2]
    ca6e:	f241 0248 	movw	r2, #4168	; 0x1048
    ca72:	eb04 0c02 	add.w	ip, r4, r2
    ca76:	f8d1 e014 	ldr.w	lr, [r1, #20]
    ca7a:	698d      	ldr	r5, [r1, #24]
    ca7c:	f844 e002 	str.w	lr, [r4, r2]
    ca80:	f8cc 5004 	str.w	r5, [ip, #4]
        }
    }
    ca84:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    ca88:	b002      	add	sp, #8
    ca8a:	bdb0      	pop	{r4, r5, r7, pc}

0000ca8c <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    ca8c:	b580      	push	{r7, lr}
    ca8e:	b086      	sub	sp, #24
    ca90:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    ca92:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    ca96:	2201      	movs	r2, #1
    ca98:	9003      	str	r0, [sp, #12]
    ca9a:	4608      	mov	r0, r1
    ca9c:	4611      	mov	r1, r2
    ca9e:	f007 fd2a 	bl	144f6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>
    caa2:	9002      	str	r0, [sp, #8]
    caa4:	e7ff      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x1a>
    caa6:	9802      	ldr	r0, [sp, #8]
    caa8:	9903      	ldr	r1, [sp, #12]
    caaa:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    caae:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    cab2:	4613      	mov	r3, r2
    cab4:	2a0f      	cmp	r2, #15
    cab6:	9301      	str	r3, [sp, #4]
    cab8:	d80a      	bhi.n	cad0 <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x44>
    caba:	e7ff      	b.n	cabc <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E+0x30>
    cabc:	9803      	ldr	r0, [sp, #12]
    cabe:	9901      	ldr	r1, [sp, #4]
    cac0:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    cac4:	8a92      	ldrh	r2, [r2, #20]
    cac6:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    caca:	4610      	mov	r0, r2
    cacc:	b006      	add	sp, #24
    cace:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    cad0:	f64c 2014 	movw	r0, #51732	; 0xca14
    cad4:	f2c0 0001 	movt	r0, #1
    cad8:	2210      	movs	r2, #16
    cada:	9901      	ldr	r1, [sp, #4]
    cadc:	f008 fb54 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    cae0:	defe      	udf	#254	; 0xfe

0000cae2 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E>:
    pub fn run(mut self, rom: &[u8]) {
    cae2:	b580      	push	{r7, lr}
    cae4:	b086      	sub	sp, #24
    cae6:	9104      	str	r1, [sp, #16]
    cae8:	9205      	str	r2, [sp, #20]
        self.setup();
    caea:	9003      	str	r0, [sp, #12]
    caec:	9202      	str	r2, [sp, #8]
    caee:	9101      	str	r1, [sp, #4]
    caf0:	f003 ff34 	bl	1095c <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE>
    caf4:	e7ff      	b.n	caf6 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x14>
        self.load(rom);
    caf6:	9803      	ldr	r0, [sp, #12]
    caf8:	9901      	ldr	r1, [sp, #4]
    cafa:	9a02      	ldr	r2, [sp, #8]
    cafc:	f003 fdde 	bl	106bc <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE>
    cb00:	e7ff      	b.n	cb02 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x20>
        while self.running {
    cb02:	e7ff      	b.n	cb04 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x22>
    cb04:	f241 0047 	movw	r0, #4167	; 0x1047
    cb08:	9903      	ldr	r1, [sp, #12]
    cb0a:	5c08      	ldrb	r0, [r1, r0]
    cb0c:	07c0      	lsls	r0, r0, #31
    cb0e:	2800      	cmp	r0, #0
    cb10:	d101      	bne.n	cb16 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x34>
    cb12:	e7ff      	b.n	cb14 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x32>
    }
    cb14:	e00c      	b.n	cb30 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x4e>
            self.sched();
    cb16:	9803      	ldr	r0, [sp, #12]
    cb18:	f003 fe9d 	bl	10856 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>
    cb1c:	e7ff      	b.n	cb1e <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x3c>
            self.eval();
    cb1e:	9803      	ldr	r0, [sp, #12]
    cb20:	f000 f808 	bl	cb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE>
    cb24:	e7ff      	b.n	cb26 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x44>
            self.next();
    cb26:	9803      	ldr	r0, [sp, #12]
    cb28:	f003 fe03 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    cb2c:	e7ff      	b.n	cb2e <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x4c>
        while self.running {
    cb2e:	e7e9      	b.n	cb04 <_ZN8libchip814Chip8$LT$T$GT$3run17h4e92651ba4288443E+0x22>
    }
    cb30:	b006      	add	sp, #24
    cb32:	bd80      	pop	{r7, pc}

0000cb34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    cb34:	b570      	push	{r4, r5, r6, lr}
    cb36:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    cb3a:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    cb3e:	8a41      	ldrh	r1, [r0, #18]
    cb40:	460a      	mov	r2, r1
    cb42:	2300      	movs	r3, #0
    cb44:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    cb48:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    cb4c:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    cb50:	f043 82c0 	bne.w	100d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35a0>
    cb54:	e7ff      	b.n	cb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22>
    cb56:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb5a:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    cb5e:	1842      	adds	r2, r0, r1
    cb60:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    cb64:	4613      	mov	r3, r2
    cb66:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    cb6a:	8a42      	ldrh	r2, [r0, #18]
    cb6c:	3201      	adds	r2, #1
    cb6e:	fa1f fc82 	uxth.w	ip, r2
    cb72:	4696      	mov	lr, r2
    cb74:	4594      	cmp	ip, r2
    cb76:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    cb7a:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    cb7e:	f043 82b4 	bne.w	100ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35b6>
    cb82:	e7ff      	b.n	cb84 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x50>
    cb84:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    cb88:	b281      	uxth	r1, r0
    cb8a:	460a      	mov	r2, r1
    cb8c:	2300      	movs	r3, #0
    cb8e:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    cb92:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    cb96:	f043 82b4 	bne.w	10102 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35ce>
    cb9a:	e7ff      	b.n	cb9c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x68>
    cb9c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cba0:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    cba4:	1842      	adds	r2, r0, r1
    cba6:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    cbaa:	4613      	mov	r3, r2
    cbac:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    cbb0:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    cbb4:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    cbb8:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    cbbc:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    cbc0:	e7ff      	b.n	cbc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8e>
    cbc2:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    cbc6:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    cbca:	ea40 0201 	orr.w	r2, r0, r1
    cbce:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    cbd2:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cbd6:	f36f 321f 	bfc	r2, #12, #20
    cbda:	4613      	mov	r3, r2
    cbdc:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    cbe0:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cbe4:	f002 020f 	and.w	r2, r2, #15
    cbe8:	4694      	mov	ip, r2
    cbea:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    cbee:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cbf2:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    cbf6:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    cbfa:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    cbfe:	e7ff      	b.n	cc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc>
    cc00:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    cc04:	f000 010f 	and.w	r1, r0, #15
    cc08:	460a      	mov	r2, r1
    cc0a:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    cc0e:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cc12:	0909      	lsrs	r1, r1, #4
    cc14:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    cc18:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    cc1c:	e7ff      	b.n	cc1e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xea>
    cc1e:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    cc22:	f000 010f 	and.w	r1, r0, #15
    cc26:	460a      	mov	r2, r1
    cc28:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    cc2c:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cc30:	b2cb      	uxtb	r3, r1
    cc32:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    cc36:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    cc3a:	0b09      	lsrs	r1, r1, #12
    cc3c:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    cc40:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    cc44:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    cc48:	e7ff      	b.n	cc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x116>
    cc4a:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    cc4e:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    cc52:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    cc56:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    cc5a:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    cc5e:	e7ff      	b.n	cc60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12c>
    cc60:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    cc64:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    cc68:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cc6c:	0912      	lsrs	r2, r2, #4
    cc6e:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    cc72:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    cc76:	e7ff      	b.n	cc78 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144>
    cc78:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    cc7c:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    cc80:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    cc84:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    cc88:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    cc8c:	e7ff      	b.n	cc8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15a>
    cc8e:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    cc92:	f000 010f 	and.w	r1, r0, #15
        match (
    cc96:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    cc9a:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    cc9e:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    cca2:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    cca6:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    ccaa:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    ccae:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    ccb2:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    ccb6:	468e      	mov	lr, r1
    ccb8:	290f      	cmp	r1, #15
    ccba:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    ccbe:	d84f      	bhi.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    ccc0:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    ccc4:	e8df f011 	tbh	[pc, r1, lsl #1]
    ccc8:	03060010 	.word	0x03060010
    cccc:	04320399 	.word	0x04320399
    ccd0:	002c04d2 	.word	0x002c04d2
    ccd4:	06b4061f 	.word	0x06b4061f
    ccd8:	00750032 	.word	0x00750032
    ccdc:	0ee40e59 	.word	0x0ee40e59
    cce0:	10260f85 	.word	0x10260f85
    cce4:	0095007b 	.word	0x0095007b
    cce8:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    ccec:	2800      	cmp	r0, #0
    ccee:	f040 8261 	bne.w	d1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
    ccf2:	e7ff      	b.n	ccf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c0>
    ccf4:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    ccf8:	280e      	cmp	r0, #14
    ccfa:	f040 825b 	bne.w	d1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
    ccfe:	e7ff      	b.n	cd00 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cc>
    cd00:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cd04:	4601      	mov	r1, r0
    cd06:	2800      	cmp	r0, #0
    cd08:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    cd0c:	f000 80c0 	beq.w	ce90 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35c>
    cd10:	e7ff      	b.n	cd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1de>
    cd12:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    cd16:	b281      	uxth	r1, r0
    cd18:	290e      	cmp	r1, #14
    cd1a:	f000 81b6 	beq.w	d08a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x556>
    cd1e:	e249      	b.n	d1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x680>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    cd20:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cd24:	2800      	cmp	r0, #0
    cd26:	f000 8541 	beq.w	d7ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc78>
    cd2a:	e019      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    cd2c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cd30:	4601      	mov	r1, r0
    cd32:	280e      	cmp	r0, #14
    cd34:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    cd38:	d812      	bhi.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cd3a:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    cd3e:	e8df f011 	tbh	[pc, r1, lsl #1]
    cd42:	071e      	.short	0x071e
    cd44:	086707c0 	.word	0x086707c0
    cd48:	09b5090e 	.word	0x09b5090e
    cd4c:	0b3b0a77 	.word	0x0b3b0a77
    cd50:	000f0bf0 	.word	0x000f0bf0
    cd54:	000f000f 	.word	0x000f000f
    cd58:	000f000f 	.word	0x000f000f
    cd5c:	0cb4000f 	.word	0x0cb4000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    cd60:	f24d 6028 	movw	r0, #54824	; 0xd628
    cd64:	f2c0 0001 	movt	r0, #1
    cd68:	6801      	ldr	r1, [r0, #0]
    cd6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd6e:	f100 0212 	add.w	r2, r0, #18
    cd72:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    cd76:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    cd7a:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    cd7e:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    cd82:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    cd86:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    cd8a:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    cd8e:	f646 1c77 	movw	ip, #26999	; 0x6977
    cd92:	f2c0 0c01 	movt	ip, #1
    cd96:	4610      	mov	r0, r2
    cd98:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    cd9c:	4661      	mov	r1, ip
    cd9e:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    cda2:	f7fd fab0 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cda6:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    cdaa:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    cdae:	f003 b94f 	b.w	10050 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x351c>
            (9, _, _, 0) => {
    cdb2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cdb6:	2800      	cmp	r0, #0
    cdb8:	f001 8532 	beq.w	e820 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cec>
    cdbc:	e7d0      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xe, _, 9, 0xe) => {
    cdbe:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cdc2:	4601      	mov	r1, r0
    cdc4:	2809      	cmp	r0, #9
    cdc6:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    cdca:	d006      	beq.n	cdda <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a6>
    cdcc:	e7ff      	b.n	cdce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29a>
    cdce:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    cdd2:	b281      	uxth	r1, r0
    cdd4:	290a      	cmp	r1, #10
    cdd6:	d006      	beq.n	cde6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b2>
    cdd8:	e7c2      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    cdda:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cdde:	280e      	cmp	r0, #14
    cde0:	f002 815b 	beq.w	f09a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2566>
    cde4:	e7bc      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xe, _, 0xa, 0x1) => {
    cde6:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    cdea:	2801      	cmp	r0, #1
    cdec:	f002 81fe 	beq.w	f1ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b8>
    cdf0:	e7b6      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 0, 7) => {
    cdf2:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    cdf6:	4601      	mov	r1, r0
    cdf8:	2806      	cmp	r0, #6
    cdfa:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    cdfe:	d8af      	bhi.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    ce00:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    ce04:	e8df f001 	tbb	[pc, r1]
    ce08:	322c1505 	.word	0x322c1505
    ce0c:	003e3804 	.word	0x003e3804
    ce10:	e7a6      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    ce12:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce16:	4601      	mov	r1, r0
    ce18:	2807      	cmp	r0, #7
    ce1a:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    ce1e:	f002 828e 	beq.w	f33e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x280a>
    ce22:	e7ff      	b.n	ce24 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f0>
    ce24:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    ce28:	b281      	uxth	r1, r0
    ce2a:	290a      	cmp	r1, #10
    ce2c:	f002 8320 	beq.w	f470 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x293c>
    ce30:	e796      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 1, 5) => {
    ce32:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce36:	4601      	mov	r1, r0
    ce38:	2805      	cmp	r0, #5
    ce3a:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    ce3e:	f002 83b1 	beq.w	f5a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a70>
    ce42:	e7ff      	b.n	ce44 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x310>
    ce44:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    ce48:	b281      	uxth	r1, r0
    ce4a:	2908      	cmp	r1, #8
    ce4c:	f002 843f 	beq.w	f6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b9a>
    ce50:	e7ff      	b.n	ce52 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31e>
    ce52:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    ce56:	b281      	uxth	r1, r0
    ce58:	290e      	cmp	r1, #14
    ce5a:	f002 84cd 	beq.w	f7f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cc4>
    ce5e:	e77f      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 2, 9) => {
    ce60:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce64:	2809      	cmp	r0, #9
    ce66:	f002 856b 	beq.w	f940 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e0c>
    ce6a:	e779      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 3, 3) => {
    ce6c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce70:	2803      	cmp	r0, #3
    ce72:	f002 8616 	beq.w	faa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f6e>
    ce76:	e773      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 5, 5) => {
    ce78:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce7c:	2805      	cmp	r0, #5
    ce7e:	f002 871f 	beq.w	fcc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x318c>
    ce82:	e76d      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
            (0xf, _, 6, 5) => {
    ce84:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    ce88:	2805      	cmp	r0, #5
    ce8a:	f002 87fc 	beq.w	fe86 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3352>
    ce8e:	e767      	b.n	cd60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22c>
    ce90:	2005      	movs	r0, #5
    ce92:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    ce96:	f64c 2080 	movw	r0, #51840	; 0xca80
    ce9a:	f2c0 0001 	movt	r0, #1
    ce9e:	6801      	ldr	r1, [r0, #0]
    cea0:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    cea4:	f007 fbc9 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    cea8:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    ceac:	e01f      	b.n	ceee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ba>
    ceae:	2001      	movs	r0, #1
    ceb0:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    ceb4:	e015      	b.n	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ae>
    ceb6:	2000      	movs	r0, #0
    ceb8:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    cebc:	e011      	b.n	cee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ae>
    cebe:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    cec0:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    cec4:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    cec8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    cecc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ced0:	f003 fed5 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ced4:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    ced8:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    cedc:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    cee0:	e00b      	b.n	cefa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3c6>
    cee2:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    cee6:	07c0      	lsls	r0, r0, #31
    cee8:	2800      	cmp	r0, #0
    ceea:	d115      	bne.n	cf18 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3e4>
    ceec:	e05e      	b.n	cfac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x478>
    ceee:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    cef2:	07c1      	lsls	r1, r0, #31
    cef4:	2900      	cmp	r1, #0
    cef6:	d1e2      	bne.n	cebe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38a>
    cef8:	e7dd      	b.n	ceb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x382>
    cefa:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    cefe:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    cf02:	f007 fb9a 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    cf06:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    cf0a:	e7ff      	b.n	cf0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3d8>
    cf0c:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    cf10:	07c1      	lsls	r1, r0, #31
    cf12:	2900      	cmp	r1, #0
    cf14:	d1cb      	bne.n	ceae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37a>
    cf16:	e7ce      	b.n	ceb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x382>
                trace!("[{:04x}] CLS", self.pc);
    cf18:	f64d 00c8 	movw	r0, #55496	; 0xd8c8
    cf1c:	f2c0 0001 	movt	r0, #1
    cf20:	6801      	ldr	r1, [r0, #0]
    cf22:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf26:	f100 0212 	add.w	r2, r0, #18
    cf2a:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    cf2e:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    cf32:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    cf36:	f646 1377 	movw	r3, #26999	; 0x6977
    cf3a:	f2c0 0301 	movt	r3, #1
    cf3e:	4610      	mov	r0, r2
    cf40:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    cf44:	4619      	mov	r1, r3
    cf46:	f7fd f9de 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cf4a:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    cf4e:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    cf52:	e7ff      	b.n	cf54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x420>
    cf54:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    cf58:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    cf5c:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    cf60:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    cf64:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    cf68:	f2c0 0201 	movt	r2, #1
    cf6c:	6812      	ldr	r2, [r2, #0]
    cf6e:	466b      	mov	r3, sp
    cf70:	f04f 0c01 	mov.w	ip, #1
    cf74:	f8c3 c008 	str.w	ip, [r3, #8]
    cf78:	605a      	str	r2, [r3, #4]
    cf7a:	f8c3 c000 	str.w	ip, [r3]
    cf7e:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    cf82:	2202      	movs	r2, #2
    cf84:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    cf88:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    cf8c:	f007 fa1a 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    cf90:	e7ff      	b.n	cf92 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x45e>
    cf92:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    cf96:	f64d 00e8 	movw	r0, #55528	; 0xd8e8
    cf9a:	f2c0 0001 	movt	r0, #1
    cf9e:	6802      	ldr	r2, [r0, #0]
    cfa0:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    cfa4:	f004 fec0 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cfa8:	e7ff      	b.n	cfaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x476>
    cfaa:	e7ff      	b.n	cfac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x478>
    cfac:	f241 0048 	movw	r0, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    cfb0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cfb4:	4408      	add	r0, r1
    cfb6:	f7ff f9be 	bl	c336 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>
    cfba:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    cfbc:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    cfbe:	e7ff      	b.n	cfc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x48c>
    cfc0:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    cfc2:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    cfc6:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    cfc8:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    cfcc:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    cfce:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    cfd2:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    cfd6:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    cfda:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    cfde:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    cfe2:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    cfe6:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    cfea:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    cfee:	f003 ff0a 	bl	10e06 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE>
    cff2:	e7ff      	b.n	cff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4c0>
    cff4:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    cff8:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    cffc:	f003 fe53 	bl	10ca6 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE>
    d000:	e7ff      	b.n	d002 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4ce>
    d002:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d006:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    d00a:	f003 fe21 	bl	10c50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E>
    d00e:	e7ff      	b.n	d010 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4dc>
    d010:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    d014:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d018:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    d01c:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    d020:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    d024:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    d028:	e7ff      	b.n	d02a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4f6>
    d02a:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    d02e:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    d032:	f003 fd3a 	bl	10aaa <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E>
    d036:	e7ff      	b.n	d038 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x504>
    d038:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    d03c:	2800      	cmp	r0, #0
    d03e:	d001      	beq.n	d044 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x510>
    d040:	e7ff      	b.n	d042 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x50e>
    d042:	e002      	b.n	d04a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x516>
        match (
    d044:	f003 b843 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d048:	defe      	udf	#254	; 0xfe
    d04a:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    d04e:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    d052:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    d056:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    d05a:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    d05e:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    d062:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    d066:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    d06a:	f241 0248 	movw	r2, #4168	; 0x1048
                    self.hw.vram_set(x, y, false);
    d06e:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    d072:	441a      	add	r2, r3
    d074:	2300      	movs	r3, #0
    d076:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    d078:	4610      	mov	r0, r2
    d07a:	9afd      	ldr	r2, [sp, #1012]	; 0x3f4
    d07c:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    d07e:	4611      	mov	r1, r2
    d080:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    d082:	f7fe ff5e 	bl	bf42 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>
    d086:	e7ff      	b.n	d088 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x554>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d088:	e7cf      	b.n	d02a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x4f6>
    d08a:	2005      	movs	r0, #5
    d08c:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    d090:	f64c 2080 	movw	r0, #51840	; 0xca80
    d094:	f2c0 0001 	movt	r0, #1
    d098:	6801      	ldr	r1, [r0, #0]
    d09a:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d09e:	f007 facc 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d0a2:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    d0a4:	e01f      	b.n	d0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5b2>
    d0a6:	2001      	movs	r0, #1
    d0a8:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d0ac:	e015      	b.n	d0da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5a6>
    d0ae:	2000      	movs	r0, #0
    d0b0:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    d0b4:	e011      	b.n	d0da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5a6>
    d0b6:	2000      	movs	r0, #0
    d0b8:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    d0bc:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    d0c0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d0c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d0c8:	f003 fdd9 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d0cc:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    d0d0:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    d0d4:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    d0d8:	e00a      	b.n	d0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5bc>
    d0da:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    d0de:	07c0      	lsls	r0, r0, #31
    d0e0:	2800      	cmp	r0, #0
    d0e2:	d112      	bne.n	d10a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5d6>
    d0e4:	e055      	b.n	d192 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65e>
    d0e6:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    d0e8:	07c1      	lsls	r1, r0, #31
    d0ea:	2900      	cmp	r1, #0
    d0ec:	d1e3      	bne.n	d0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x582>
    d0ee:	e7de      	b.n	d0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x57a>
    d0f0:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    d0f4:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    d0f8:	f007 fa9f 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d0fc:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    d0fe:	e7ff      	b.n	d100 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x5cc>
    d100:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    d102:	07c1      	lsls	r1, r0, #31
    d104:	2900      	cmp	r1, #0
    d106:	d1ce      	bne.n	d0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x572>
    d108:	e7d1      	b.n	d0ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x57a>
                trace!("[{:04x}] RET", self.pc);
    d10a:	f64d 008c 	movw	r0, #55436	; 0xd88c
    d10e:	f2c0 0001 	movt	r0, #1
    d112:	6801      	ldr	r1, [r0, #0]
    d114:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d118:	f100 0212 	add.w	r2, r0, #18
    d11c:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    d120:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    d124:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    d128:	f646 1377 	movw	r3, #26999	; 0x6977
    d12c:	f2c0 0301 	movt	r3, #1
    d130:	4610      	mov	r0, r2
    d132:	91f9      	str	r1, [sp, #996]	; 0x3e4
    d134:	4619      	mov	r1, r3
    d136:	f7fd f8e6 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d13a:	90f8      	str	r0, [sp, #992]	; 0x3e0
    d13c:	91f7      	str	r1, [sp, #988]	; 0x3dc
    d13e:	e7ff      	b.n	d140 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x60c>
    d140:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    d142:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    d146:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    d148:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    d14c:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d150:	f2c0 0201 	movt	r2, #1
    d154:	6812      	ldr	r2, [r2, #0]
    d156:	466b      	mov	r3, sp
    d158:	f04f 0c01 	mov.w	ip, #1
    d15c:	f8c3 c008 	str.w	ip, [r3, #8]
    d160:	605a      	str	r2, [r3, #4]
    d162:	f8c3 c000 	str.w	ip, [r3]
    d166:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d16a:	2202      	movs	r2, #2
    d16c:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    d170:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    d172:	f007 f927 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d176:	e7ff      	b.n	d178 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x644>
    d178:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    d17c:	f64d 00ac 	movw	r0, #55468	; 0xd8ac
    d180:	f2c0 0001 	movt	r0, #1
    d184:	6802      	ldr	r2, [r0, #0]
    d186:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    d18a:	f004 fdcd 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d18e:	e7ff      	b.n	d190 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65c>
    d190:	e7ff      	b.n	d192 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x65e>
                let addr = self.pop();
    d192:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d196:	f7ff fc79 	bl	ca8c <_ZN8libchip814Chip8$LT$T$GT$3pop17h546dd78d13a1b914E>
    d19a:	4601      	mov	r1, r0
    d19c:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    d1a0:	91f6      	str	r1, [sp, #984]	; 0x3d8
    d1a2:	e7ff      	b.n	d1a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x670>
                self.jump(addr);
    d1a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d1a8:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    d1aa:	f003 fa7f 	bl	106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d1ae:	e7ff      	b.n	d1b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x67c>
        match (
    d1b0:	f002 bf8d 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d1b4:	2005      	movs	r0, #5
    d1b6:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    d1ba:	f64c 2080 	movw	r0, #51840	; 0xca80
    d1be:	f2c0 0001 	movt	r0, #1
    d1c2:	6801      	ldr	r1, [r0, #0]
    d1c4:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d1c8:	f007 fa37 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d1cc:	90f5      	str	r0, [sp, #980]	; 0x3d4
    d1ce:	e01f      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6dc>
    d1d0:	2001      	movs	r0, #1
    d1d2:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d1d6:	e015      	b.n	d204 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6d0>
    d1d8:	2000      	movs	r0, #0
    d1da:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    d1de:	e011      	b.n	d204 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6d0>
    d1e0:	2000      	movs	r0, #0
    d1e2:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    d1e6:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    d1ea:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d1ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d1f2:	f003 fd44 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d1f6:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    d1fa:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    d1fe:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    d202:	e00a      	b.n	d21a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6e6>
    d204:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    d208:	07c0      	lsls	r0, r0, #31
    d20a:	2800      	cmp	r0, #0
    d20c:	d112      	bne.n	d234 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x700>
    d20e:	e055      	b.n	d2bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x788>
    d210:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    d212:	07c1      	lsls	r1, r0, #31
    d214:	2900      	cmp	r1, #0
    d216:	d1e3      	bne.n	d1e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6ac>
    d218:	e7de      	b.n	d1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6a4>
    d21a:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    d21e:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    d222:	f007 fa0a 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d226:	90f4      	str	r0, [sp, #976]	; 0x3d0
    d228:	e7ff      	b.n	d22a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6f6>
    d22a:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    d22c:	07c1      	lsls	r1, r0, #31
    d22e:	2900      	cmp	r1, #0
    d230:	d1ce      	bne.n	d1d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x69c>
    d232:	e7d1      	b.n	d1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x6a4>
                trace!("[{:04x}] SYS nnn", self.pc);
    d234:	f64d 0030 	movw	r0, #55344	; 0xd830
    d238:	f2c0 0001 	movt	r0, #1
    d23c:	6801      	ldr	r1, [r0, #0]
    d23e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d242:	f100 0212 	add.w	r2, r0, #18
    d246:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    d24a:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    d24e:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    d252:	f646 1377 	movw	r3, #26999	; 0x6977
    d256:	f2c0 0301 	movt	r3, #1
    d25a:	4610      	mov	r0, r2
    d25c:	91f3      	str	r1, [sp, #972]	; 0x3cc
    d25e:	4619      	mov	r1, r3
    d260:	f7fd f851 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d264:	90f2      	str	r0, [sp, #968]	; 0x3c8
    d266:	91f1      	str	r1, [sp, #964]	; 0x3c4
    d268:	e7ff      	b.n	d26a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x736>
    d26a:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    d26c:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    d270:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    d272:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    d276:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d27a:	f2c0 0201 	movt	r2, #1
    d27e:	6812      	ldr	r2, [r2, #0]
    d280:	466b      	mov	r3, sp
    d282:	f04f 0c01 	mov.w	ip, #1
    d286:	f8c3 c008 	str.w	ip, [r3, #8]
    d28a:	605a      	str	r2, [r3, #4]
    d28c:	f8c3 c000 	str.w	ip, [r3]
    d290:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d294:	2202      	movs	r2, #2
    d296:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    d29a:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    d29c:	f007 f892 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d2a0:	e7ff      	b.n	d2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x76e>
    d2a2:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    d2a6:	f64d 0050 	movw	r0, #55376	; 0xd850
    d2aa:	f2c0 0001 	movt	r0, #1
    d2ae:	6802      	ldr	r2, [r0, #0]
    d2b0:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    d2b4:	f004 fd38 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d2b8:	e7ff      	b.n	d2ba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x786>
    d2ba:	e7ff      	b.n	d2bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x788>
    d2bc:	f64d 0054 	movw	r0, #55380	; 0xd854
    d2c0:	f2c0 0001 	movt	r0, #1
    d2c4:	f64d 0264 	movw	r2, #55396	; 0xd864
    d2c8:	f2c0 0201 	movt	r2, #1
    d2cc:	210f      	movs	r1, #15
    d2ce:	f007 ff45 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2d2:	defe      	udf	#254	; 0xfe
    d2d4:	2005      	movs	r0, #5
    d2d6:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    d2da:	f64c 2080 	movw	r0, #51840	; 0xca80
    d2de:	f2c0 0001 	movt	r0, #1
    d2e2:	6801      	ldr	r1, [r0, #0]
    d2e4:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d2e8:	f007 f9a7 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d2ec:	90f0      	str	r0, [sp, #960]	; 0x3c0
    d2ee:	e01f      	b.n	d330 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7fc>
    d2f0:	2001      	movs	r0, #1
    d2f2:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d2f6:	e015      	b.n	d324 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7f0>
    d2f8:	2000      	movs	r0, #0
    d2fa:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    d2fe:	e011      	b.n	d324 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7f0>
    d300:	2000      	movs	r0, #0
    d302:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    d306:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    d30a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d30e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d312:	f003 fcb4 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d316:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    d31a:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    d31e:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    d322:	e00a      	b.n	d33a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x806>
    d324:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    d328:	07c0      	lsls	r0, r0, #31
    d32a:	2800      	cmp	r0, #0
    d32c:	d112      	bne.n	d354 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x820>
    d32e:	e055      	b.n	d3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a8>
    d330:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    d332:	07c1      	lsls	r1, r0, #31
    d334:	2900      	cmp	r1, #0
    d336:	d1e3      	bne.n	d300 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7cc>
    d338:	e7de      	b.n	d2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7c4>
    d33a:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    d33e:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    d342:	f007 f97a 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d346:	90ef      	str	r0, [sp, #956]	; 0x3bc
    d348:	e7ff      	b.n	d34a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x816>
    d34a:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    d34c:	07c1      	lsls	r1, r0, #31
    d34e:	2900      	cmp	r1, #0
    d350:	d1ce      	bne.n	d2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7bc>
    d352:	e7d1      	b.n	d2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x7c4>
                trace!("[{:04x}] JP nnn", self.pc);
    d354:	f24d 70f0 	movw	r0, #55280	; 0xd7f0
    d358:	f2c0 0001 	movt	r0, #1
    d35c:	6801      	ldr	r1, [r0, #0]
    d35e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d362:	f100 0212 	add.w	r2, r0, #18
    d366:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    d36a:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    d36e:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    d372:	f646 1377 	movw	r3, #26999	; 0x6977
    d376:	f2c0 0301 	movt	r3, #1
    d37a:	4610      	mov	r0, r2
    d37c:	91ee      	str	r1, [sp, #952]	; 0x3b8
    d37e:	4619      	mov	r1, r3
    d380:	f7fc ffc1 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d384:	90ed      	str	r0, [sp, #948]	; 0x3b4
    d386:	91ec      	str	r1, [sp, #944]	; 0x3b0
    d388:	e7ff      	b.n	d38a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x856>
    d38a:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    d38c:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    d390:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    d392:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    d396:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d39a:	f2c0 0201 	movt	r2, #1
    d39e:	6812      	ldr	r2, [r2, #0]
    d3a0:	466b      	mov	r3, sp
    d3a2:	f04f 0c01 	mov.w	ip, #1
    d3a6:	f8c3 c008 	str.w	ip, [r3, #8]
    d3aa:	605a      	str	r2, [r3, #4]
    d3ac:	f8c3 c000 	str.w	ip, [r3]
    d3b0:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d3b4:	2202      	movs	r2, #2
    d3b6:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    d3ba:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    d3bc:	f007 f802 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d3c0:	e7ff      	b.n	d3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x88e>
    d3c2:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    d3c6:	f64d 0010 	movw	r0, #55312	; 0xd810
    d3ca:	f2c0 0001 	movt	r0, #1
    d3ce:	6802      	ldr	r2, [r0, #0]
    d3d0:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    d3d4:	f004 fca8 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d3d8:	e7ff      	b.n	d3da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a6>
    d3da:	e7ff      	b.n	d3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8a8>
    d3dc:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d3de:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d3e2:	f007 f901 	bl	145e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d3e6:	90eb      	str	r0, [sp, #940]	; 0x3ac
    d3e8:	e7ff      	b.n	d3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8b6>
    d3ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d3ee:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    d3f0:	f003 f95c 	bl	106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d3f4:	e7ff      	b.n	d3f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8c2>
        match (
    d3f6:	f002 be6a 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d3fa:	2005      	movs	r0, #5
    d3fc:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    d400:	f64c 2080 	movw	r0, #51840	; 0xca80
    d404:	f2c0 0001 	movt	r0, #1
    d408:	6801      	ldr	r1, [r0, #0]
    d40a:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d40e:	f007 f914 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d412:	90ea      	str	r0, [sp, #936]	; 0x3a8
    d414:	e01f      	b.n	d456 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x922>
    d416:	2001      	movs	r0, #1
    d418:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d41c:	e015      	b.n	d44a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x916>
    d41e:	2000      	movs	r0, #0
    d420:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    d424:	e011      	b.n	d44a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x916>
    d426:	2000      	movs	r0, #0
    d428:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    d42c:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    d430:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d434:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d438:	f003 fc21 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d43c:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    d440:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    d444:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    d448:	e00a      	b.n	d460 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x92c>
    d44a:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    d44e:	07c0      	lsls	r0, r0, #31
    d450:	2800      	cmp	r0, #0
    d452:	d112      	bne.n	d47a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x946>
    d454:	e055      	b.n	d502 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9ce>
    d456:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    d458:	07c1      	lsls	r1, r0, #31
    d45a:	2900      	cmp	r1, #0
    d45c:	d1e3      	bne.n	d426 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8f2>
    d45e:	e7de      	b.n	d41e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8ea>
    d460:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    d464:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    d468:	f007 f8e7 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d46c:	90e9      	str	r0, [sp, #932]	; 0x3a4
    d46e:	e7ff      	b.n	d470 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x93c>
    d470:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    d472:	07c1      	lsls	r1, r0, #31
    d474:	2900      	cmp	r1, #0
    d476:	d1ce      	bne.n	d416 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8e2>
    d478:	e7d1      	b.n	d41e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x8ea>
                trace!("[{:04x}] CALL nnn", self.pc);
    d47a:	f24d 70bc 	movw	r0, #55228	; 0xd7bc
    d47e:	f2c0 0001 	movt	r0, #1
    d482:	6801      	ldr	r1, [r0, #0]
    d484:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d488:	f100 0212 	add.w	r2, r0, #18
    d48c:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    d490:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    d494:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    d498:	f646 1377 	movw	r3, #26999	; 0x6977
    d49c:	f2c0 0301 	movt	r3, #1
    d4a0:	4610      	mov	r0, r2
    d4a2:	91e8      	str	r1, [sp, #928]	; 0x3a0
    d4a4:	4619      	mov	r1, r3
    d4a6:	f7fc ff2e 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d4aa:	90e7      	str	r0, [sp, #924]	; 0x39c
    d4ac:	91e6      	str	r1, [sp, #920]	; 0x398
    d4ae:	e7ff      	b.n	d4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x97c>
    d4b0:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    d4b2:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    d4b6:	99e6      	ldr	r1, [sp, #920]	; 0x398
    d4b8:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    d4bc:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d4c0:	f2c0 0201 	movt	r2, #1
    d4c4:	6812      	ldr	r2, [r2, #0]
    d4c6:	466b      	mov	r3, sp
    d4c8:	f04f 0c01 	mov.w	ip, #1
    d4cc:	f8c3 c008 	str.w	ip, [r3, #8]
    d4d0:	605a      	str	r2, [r3, #4]
    d4d2:	f8c3 c000 	str.w	ip, [r3]
    d4d6:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d4da:	2202      	movs	r2, #2
    d4dc:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    d4e0:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    d4e2:	f006 ff6f 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d4e6:	e7ff      	b.n	d4e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9b4>
    d4e8:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    d4ec:	f24d 70dc 	movw	r0, #55260	; 0xd7dc
    d4f0:	f2c0 0001 	movt	r0, #1
    d4f4:	6802      	ldr	r2, [r0, #0]
    d4f6:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    d4fa:	f004 fc15 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d4fe:	e7ff      	b.n	d500 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9cc>
    d500:	e7ff      	b.n	d502 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9ce>
                self.push(self.pc);
    d502:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d506:	8a41      	ldrh	r1, [r0, #18]
    d508:	f003 f926 	bl	10758 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E>
    d50c:	e7ff      	b.n	d50e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9da>
    d50e:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    d510:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    d514:	f007 f868 	bl	145e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    d518:	90e5      	str	r0, [sp, #916]	; 0x394
    d51a:	e7ff      	b.n	d51c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9e8>
    d51c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d520:	99e5      	ldr	r1, [sp, #916]	; 0x394
    d522:	f003 f8c3 	bl	106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    d526:	e7ff      	b.n	d528 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x9f4>
        match (
    d528:	f002 bdd1 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d52c:	2005      	movs	r0, #5
    d52e:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    d532:	f64c 2080 	movw	r0, #51840	; 0xca80
    d536:	f2c0 0001 	movt	r0, #1
    d53a:	6801      	ldr	r1, [r0, #0]
    d53c:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d540:	f007 f87b 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d544:	90e4      	str	r0, [sp, #912]	; 0x390
    d546:	e01f      	b.n	d588 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa54>
    d548:	2001      	movs	r0, #1
    d54a:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d54e:	e015      	b.n	d57c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa48>
    d550:	2000      	movs	r0, #0
    d552:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    d556:	e011      	b.n	d57c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa48>
    d558:	2000      	movs	r0, #0
    d55a:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    d55e:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    d562:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d566:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d56a:	f003 fb88 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d56e:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    d572:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    d576:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    d57a:	e00a      	b.n	d592 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa5e>
    d57c:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    d580:	07c0      	lsls	r0, r0, #31
    d582:	2800      	cmp	r0, #0
    d584:	d112      	bne.n	d5ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa78>
    d586:	e055      	b.n	d634 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb00>
    d588:	98e4      	ldr	r0, [sp, #912]	; 0x390
    d58a:	07c1      	lsls	r1, r0, #31
    d58c:	2900      	cmp	r1, #0
    d58e:	d1e3      	bne.n	d558 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa24>
    d590:	e7de      	b.n	d550 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa1c>
    d592:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    d596:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    d59a:	f007 f84e 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d59e:	90e3      	str	r0, [sp, #908]	; 0x38c
    d5a0:	e7ff      	b.n	d5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa6e>
    d5a2:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    d5a4:	07c1      	lsls	r1, r0, #31
    d5a6:	2900      	cmp	r1, #0
    d5a8:	d1ce      	bne.n	d548 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa14>
    d5aa:	e7d1      	b.n	d550 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xa1c>
                trace!("[{:04x}] SE Vx kk", self.pc);
    d5ac:	f24d 706c 	movw	r0, #55148	; 0xd76c
    d5b0:	f2c0 0001 	movt	r0, #1
    d5b4:	6801      	ldr	r1, [r0, #0]
    d5b6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d5ba:	f100 0212 	add.w	r2, r0, #18
    d5be:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    d5c2:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    d5c6:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    d5ca:	f646 1377 	movw	r3, #26999	; 0x6977
    d5ce:	f2c0 0301 	movt	r3, #1
    d5d2:	4610      	mov	r0, r2
    d5d4:	91e2      	str	r1, [sp, #904]	; 0x388
    d5d6:	4619      	mov	r1, r3
    d5d8:	f7fc fe95 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d5dc:	90e1      	str	r0, [sp, #900]	; 0x384
    d5de:	91e0      	str	r1, [sp, #896]	; 0x380
    d5e0:	e7ff      	b.n	d5e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xaae>
    d5e2:	98e1      	ldr	r0, [sp, #900]	; 0x384
    d5e4:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    d5e8:	99e0      	ldr	r1, [sp, #896]	; 0x380
    d5ea:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    d5ee:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d5f2:	f2c0 0201 	movt	r2, #1
    d5f6:	6812      	ldr	r2, [r2, #0]
    d5f8:	466b      	mov	r3, sp
    d5fa:	f04f 0c01 	mov.w	ip, #1
    d5fe:	f8c3 c008 	str.w	ip, [r3, #8]
    d602:	605a      	str	r2, [r3, #4]
    d604:	f8c3 c000 	str.w	ip, [r3]
    d608:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d60c:	2202      	movs	r2, #2
    d60e:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    d612:	99e2      	ldr	r1, [sp, #904]	; 0x388
    d614:	f006 fed6 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d618:	e7ff      	b.n	d61a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xae6>
    d61a:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    d61e:	f24d 708c 	movw	r0, #55180	; 0xd78c
    d622:	f2c0 0001 	movt	r0, #1
    d626:	6802      	ldr	r2, [r0, #0]
    d628:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    d62c:	f004 fb7c 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d630:	e7ff      	b.n	d632 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xafe>
    d632:	e7ff      	b.n	d634 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb00>
                if self.v[x] == kk {
    d634:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d638:	280f      	cmp	r0, #15
    d63a:	f203 8011 	bhi.w	10660 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b2c>
    d63e:	e7ff      	b.n	d640 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb0c>
    d640:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d644:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d648:	1842      	adds	r2, r0, r1
    d64a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d64e:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d652:	fa5f fc83 	uxtb.w	ip, r3
    d656:	4562      	cmp	r2, ip
    d658:	d106      	bne.n	d668 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb34>
    d65a:	e7ff      	b.n	d65c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb28>
                    self.next();
    d65c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d660:	f003 f867 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    d664:	e7ff      	b.n	d666 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb32>
                if self.v[x] == kk {
    d666:	e7ff      	b.n	d668 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb34>
        match (
    d668:	f002 bd31 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d66c:	2005      	movs	r0, #5
    d66e:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    d672:	f64c 2080 	movw	r0, #51840	; 0xca80
    d676:	f2c0 0001 	movt	r0, #1
    d67a:	6801      	ldr	r1, [r0, #0]
    d67c:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d680:	f006 ffdb 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d684:	90df      	str	r0, [sp, #892]	; 0x37c
    d686:	e01f      	b.n	d6c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb94>
    d688:	2001      	movs	r0, #1
    d68a:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d68e:	e015      	b.n	d6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb88>
    d690:	2000      	movs	r0, #0
    d692:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    d696:	e011      	b.n	d6bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb88>
    d698:	2000      	movs	r0, #0
    d69a:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    d69e:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    d6a2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d6a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d6aa:	f003 fae8 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d6ae:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    d6b2:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    d6b6:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    d6ba:	e00a      	b.n	d6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb9e>
    d6bc:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    d6c0:	07c0      	lsls	r0, r0, #31
    d6c2:	2800      	cmp	r0, #0
    d6c4:	d112      	bne.n	d6ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbb8>
    d6c6:	e055      	b.n	d774 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc40>
    d6c8:	98df      	ldr	r0, [sp, #892]	; 0x37c
    d6ca:	07c1      	lsls	r1, r0, #31
    d6cc:	2900      	cmp	r1, #0
    d6ce:	d1e3      	bne.n	d698 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb64>
    d6d0:	e7de      	b.n	d690 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb5c>
    d6d2:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    d6d6:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    d6da:	f006 ffae 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d6de:	90de      	str	r0, [sp, #888]	; 0x378
    d6e0:	e7ff      	b.n	d6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbae>
    d6e2:	98de      	ldr	r0, [sp, #888]	; 0x378
    d6e4:	07c1      	lsls	r1, r0, #31
    d6e6:	2900      	cmp	r1, #0
    d6e8:	d1ce      	bne.n	d688 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb54>
    d6ea:	e7d1      	b.n	d690 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xb5c>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    d6ec:	f24d 701c 	movw	r0, #55068	; 0xd71c
    d6f0:	f2c0 0001 	movt	r0, #1
    d6f4:	6801      	ldr	r1, [r0, #0]
    d6f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d6fa:	f100 0212 	add.w	r2, r0, #18
    d6fe:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    d702:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    d706:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    d70a:	f646 1377 	movw	r3, #26999	; 0x6977
    d70e:	f2c0 0301 	movt	r3, #1
    d712:	4610      	mov	r0, r2
    d714:	91dd      	str	r1, [sp, #884]	; 0x374
    d716:	4619      	mov	r1, r3
    d718:	f7fc fdf5 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d71c:	90dc      	str	r0, [sp, #880]	; 0x370
    d71e:	91db      	str	r1, [sp, #876]	; 0x36c
    d720:	e7ff      	b.n	d722 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xbee>
    d722:	98dc      	ldr	r0, [sp, #880]	; 0x370
    d724:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    d728:	99db      	ldr	r1, [sp, #876]	; 0x36c
    d72a:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    d72e:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d732:	f2c0 0201 	movt	r2, #1
    d736:	6812      	ldr	r2, [r2, #0]
    d738:	466b      	mov	r3, sp
    d73a:	f04f 0c01 	mov.w	ip, #1
    d73e:	f8c3 c008 	str.w	ip, [r3, #8]
    d742:	605a      	str	r2, [r3, #4]
    d744:	f8c3 c000 	str.w	ip, [r3]
    d748:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d74c:	2202      	movs	r2, #2
    d74e:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    d752:	99dd      	ldr	r1, [sp, #884]	; 0x374
    d754:	f006 fe36 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d758:	e7ff      	b.n	d75a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc26>
    d75a:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    d75e:	f24d 703c 	movw	r0, #55100	; 0xd73c
    d762:	f2c0 0001 	movt	r0, #1
    d766:	6802      	ldr	r2, [r0, #0]
    d768:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    d76c:	f004 fadc 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d770:	e7ff      	b.n	d772 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc3e>
    d772:	e7ff      	b.n	d774 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc40>
                if self.v[x] != kk {
    d774:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d778:	280f      	cmp	r0, #15
    d77a:	f202 8767 	bhi.w	1064c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b18>
    d77e:	e7ff      	b.n	d780 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc4c>
    d780:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d784:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d788:	1842      	adds	r2, r0, r1
    d78a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d78e:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    d792:	fa5f fc83 	uxtb.w	ip, r3
    d796:	4562      	cmp	r2, ip
    d798:	d006      	beq.n	d7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc74>
    d79a:	e7ff      	b.n	d79c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc68>
                    self.next();
    d79c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d7a0:	f002 ffc7 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    d7a4:	e7ff      	b.n	d7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc72>
                if self.v[x] != kk {
    d7a6:	e7ff      	b.n	d7a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc74>
        match (
    d7a8:	f002 bc91 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d7ac:	2005      	movs	r0, #5
    d7ae:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    d7b2:	f64c 2080 	movw	r0, #51840	; 0xca80
    d7b6:	f2c0 0001 	movt	r0, #1
    d7ba:	6801      	ldr	r1, [r0, #0]
    d7bc:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d7c0:	f006 ff3b 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d7c4:	90da      	str	r0, [sp, #872]	; 0x368
    d7c6:	e01f      	b.n	d808 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcd4>
    d7c8:	2001      	movs	r0, #1
    d7ca:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d7ce:	e015      	b.n	d7fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc8>
    d7d0:	2000      	movs	r0, #0
    d7d2:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    d7d6:	e011      	b.n	d7fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcc8>
    d7d8:	2000      	movs	r0, #0
    d7da:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    d7de:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    d7e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d7e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d7ea:	f003 fa48 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d7ee:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    d7f2:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    d7f6:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    d7fa:	e00a      	b.n	d812 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcde>
    d7fc:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    d800:	07c0      	lsls	r0, r0, #31
    d802:	2800      	cmp	r0, #0
    d804:	d112      	bne.n	d82c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcf8>
    d806:	e055      	b.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd80>
    d808:	98da      	ldr	r0, [sp, #872]	; 0x368
    d80a:	07c1      	lsls	r1, r0, #31
    d80c:	2900      	cmp	r1, #0
    d80e:	d1e3      	bne.n	d7d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xca4>
    d810:	e7de      	b.n	d7d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc9c>
    d812:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    d816:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    d81a:	f006 ff0e 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d81e:	90d9      	str	r0, [sp, #868]	; 0x364
    d820:	e7ff      	b.n	d822 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xcee>
    d822:	98d9      	ldr	r0, [sp, #868]	; 0x364
    d824:	07c1      	lsls	r1, r0, #31
    d826:	2900      	cmp	r1, #0
    d828:	d1ce      	bne.n	d7c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc94>
    d82a:	e7d1      	b.n	d7d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xc9c>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    d82c:	f24d 60bc 	movw	r0, #54972	; 0xd6bc
    d830:	f2c0 0001 	movt	r0, #1
    d834:	6801      	ldr	r1, [r0, #0]
    d836:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d83a:	f100 0212 	add.w	r2, r0, #18
    d83e:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    d842:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    d846:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    d84a:	f646 1377 	movw	r3, #26999	; 0x6977
    d84e:	f2c0 0301 	movt	r3, #1
    d852:	4610      	mov	r0, r2
    d854:	91d8      	str	r1, [sp, #864]	; 0x360
    d856:	4619      	mov	r1, r3
    d858:	f7fc fd55 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d85c:	90d7      	str	r0, [sp, #860]	; 0x35c
    d85e:	91d6      	str	r1, [sp, #856]	; 0x358
    d860:	e7ff      	b.n	d862 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd2e>
    d862:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    d864:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    d868:	99d6      	ldr	r1, [sp, #856]	; 0x358
    d86a:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    d86e:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d872:	f2c0 0201 	movt	r2, #1
    d876:	6812      	ldr	r2, [r2, #0]
    d878:	466b      	mov	r3, sp
    d87a:	f04f 0c01 	mov.w	ip, #1
    d87e:	f8c3 c008 	str.w	ip, [r3, #8]
    d882:	605a      	str	r2, [r3, #4]
    d884:	f8c3 c000 	str.w	ip, [r3]
    d888:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    d88c:	2202      	movs	r2, #2
    d88e:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    d892:	99d8      	ldr	r1, [sp, #864]	; 0x360
    d894:	f006 fd96 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d898:	e7ff      	b.n	d89a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd66>
    d89a:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    d89e:	f24d 60dc 	movw	r0, #55004	; 0xd6dc
    d8a2:	f2c0 0001 	movt	r0, #1
    d8a6:	6802      	ldr	r2, [r0, #0]
    d8a8:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    d8ac:	f004 fa3c 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d8b0:	e7ff      	b.n	d8b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd7e>
    d8b2:	e7ff      	b.n	d8b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd80>
                if self.v[x] == self.v[y] {
    d8b4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d8b8:	280f      	cmp	r0, #15
    d8ba:	f202 86b3 	bhi.w	10624 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3af0>
    d8be:	e7ff      	b.n	d8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xd8c>
    d8c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d8c8:	1842      	adds	r2, r0, r1
    d8ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d8ce:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    d8d2:	2b0f      	cmp	r3, #15
    d8d4:	92d5      	str	r2, [sp, #852]	; 0x354
    d8d6:	f202 86af 	bhi.w	10638 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3b04>
    d8da:	e7ff      	b.n	d8dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xda8>
    d8dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8e0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d8e4:	1842      	adds	r2, r0, r1
    d8e6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    d8ea:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    d8ec:	fa5f fc83 	uxtb.w	ip, r3
    d8f0:	4594      	cmp	ip, r2
    d8f2:	d106      	bne.n	d902 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdce>
    d8f4:	e7ff      	b.n	d8f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdc2>
                    self.next();
    d8f6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d8fa:	f002 ff1a 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    d8fe:	e7ff      	b.n	d900 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdcc>
                if self.v[x] == self.v[y] {
    d900:	e7ff      	b.n	d902 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdce>
        match (
    d902:	f002 bbe4 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    d906:	2005      	movs	r0, #5
    d908:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    d90c:	f64c 2080 	movw	r0, #51840	; 0xca80
    d910:	f2c0 0001 	movt	r0, #1
    d914:	6801      	ldr	r1, [r0, #0]
    d916:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    d91a:	f006 fe8e 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d91e:	90d4      	str	r0, [sp, #848]	; 0x350
    d920:	e01f      	b.n	d962 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe2e>
    d922:	2001      	movs	r0, #1
    d924:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    d928:	e015      	b.n	d956 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe22>
    d92a:	2000      	movs	r0, #0
    d92c:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    d930:	e011      	b.n	d956 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe22>
    d932:	2000      	movs	r0, #0
    d934:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    d938:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    d93c:	f644 206c 	movw	r0, #19052	; 0x4a6c
    d940:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d944:	f003 f99b 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    d948:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    d94c:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    d950:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    d954:	e00a      	b.n	d96c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe38>
    d956:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    d95a:	07c0      	lsls	r0, r0, #31
    d95c:	2800      	cmp	r0, #0
    d95e:	d112      	bne.n	d986 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe52>
    d960:	e055      	b.n	da0e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xeda>
    d962:	98d4      	ldr	r0, [sp, #848]	; 0x350
    d964:	07c1      	lsls	r1, r0, #31
    d966:	2900      	cmp	r1, #0
    d968:	d1e3      	bne.n	d932 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdfe>
    d96a:	e7de      	b.n	d92a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdf6>
    d96c:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    d970:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    d974:	f006 fe61 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    d978:	90d3      	str	r0, [sp, #844]	; 0x34c
    d97a:	e7ff      	b.n	d97c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe48>
    d97c:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    d97e:	07c1      	lsls	r1, r0, #31
    d980:	2900      	cmp	r1, #0
    d982:	d1ce      	bne.n	d922 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdee>
    d984:	e7d1      	b.n	d92a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xdf6>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    d986:	f24d 50d4 	movw	r0, #54740	; 0xd5d4
    d98a:	f2c0 0001 	movt	r0, #1
    d98e:	6801      	ldr	r1, [r0, #0]
    d990:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d994:	f100 0212 	add.w	r2, r0, #18
    d998:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    d99c:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    d9a0:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    d9a4:	f646 1377 	movw	r3, #26999	; 0x6977
    d9a8:	f2c0 0301 	movt	r3, #1
    d9ac:	4610      	mov	r0, r2
    d9ae:	91d2      	str	r1, [sp, #840]	; 0x348
    d9b0:	4619      	mov	r1, r3
    d9b2:	f7fc fca8 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d9b6:	90d1      	str	r0, [sp, #836]	; 0x344
    d9b8:	91d0      	str	r1, [sp, #832]	; 0x340
    d9ba:	e7ff      	b.n	d9bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xe88>
    d9bc:	98d1      	ldr	r0, [sp, #836]	; 0x344
    d9be:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    d9c2:	99d0      	ldr	r1, [sp, #832]	; 0x340
    d9c4:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    d9c8:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    d9cc:	f2c0 0201 	movt	r2, #1
    d9d0:	6812      	ldr	r2, [r2, #0]
    d9d2:	466b      	mov	r3, sp
    d9d4:	f04f 0c01 	mov.w	ip, #1
    d9d8:	f8c3 c008 	str.w	ip, [r3, #8]
    d9dc:	605a      	str	r2, [r3, #4]
    d9de:	f8c3 c000 	str.w	ip, [r3]
    d9e2:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    d9e6:	2202      	movs	r2, #2
    d9e8:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    d9ec:	99d2      	ldr	r1, [sp, #840]	; 0x348
    d9ee:	f006 fce9 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    d9f2:	e7ff      	b.n	d9f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xec0>
    d9f4:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    d9f8:	f24d 50f4 	movw	r0, #54772	; 0xd5f4
    d9fc:	f2c0 0001 	movt	r0, #1
    da00:	6802      	ldr	r2, [r0, #0]
    da02:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    da06:	f004 f98f 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    da0a:	e7ff      	b.n	da0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xed8>
    da0c:	e7ff      	b.n	da0e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xeda>
                self.v[x] = kk;
    da0e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    da12:	280f      	cmp	r0, #15
    da14:	f202 85fc 	bhi.w	10610 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3adc>
    da18:	e7ff      	b.n	da1a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xee6>
    da1a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    da1e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    da22:	1842      	adds	r2, r0, r1
    da24:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    da28:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    da2c:	f002 bb4f 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    da30:	2005      	movs	r0, #5
    da32:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    da36:	f64c 2080 	movw	r0, #51840	; 0xca80
    da3a:	f2c0 0001 	movt	r0, #1
    da3e:	6801      	ldr	r1, [r0, #0]
    da40:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    da44:	f006 fdf9 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    da48:	90cf      	str	r0, [sp, #828]	; 0x33c
    da4a:	e01f      	b.n	da8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf58>
    da4c:	2001      	movs	r0, #1
    da4e:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    da52:	e015      	b.n	da80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf4c>
    da54:	2000      	movs	r0, #0
    da56:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    da5a:	e011      	b.n	da80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf4c>
    da5c:	2000      	movs	r0, #0
    da5e:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    da62:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    da66:	f644 206c 	movw	r0, #19052	; 0x4a6c
    da6a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    da6e:	f003 f906 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    da72:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    da76:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    da7a:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    da7e:	e00a      	b.n	da96 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf62>
    da80:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    da84:	07c0      	lsls	r0, r0, #31
    da86:	2800      	cmp	r0, #0
    da88:	d112      	bne.n	dab0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf7c>
    da8a:	e055      	b.n	db38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1004>
    da8c:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    da8e:	07c1      	lsls	r1, r0, #31
    da90:	2900      	cmp	r1, #0
    da92:	d1e3      	bne.n	da5c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf28>
    da94:	e7de      	b.n	da54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf20>
    da96:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    da9a:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    da9e:	f006 fdcc 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    daa2:	90ce      	str	r0, [sp, #824]	; 0x338
    daa4:	e7ff      	b.n	daa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf72>
    daa6:	98ce      	ldr	r0, [sp, #824]	; 0x338
    daa8:	07c1      	lsls	r1, r0, #31
    daaa:	2900      	cmp	r1, #0
    daac:	d1ce      	bne.n	da4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf18>
    daae:	e7d1      	b.n	da54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xf20>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    dab0:	f24d 5074 	movw	r0, #54644	; 0xd574
    dab4:	f2c0 0001 	movt	r0, #1
    dab8:	6801      	ldr	r1, [r0, #0]
    daba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dabe:	f100 0212 	add.w	r2, r0, #18
    dac2:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    dac6:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    daca:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    dace:	f646 1377 	movw	r3, #26999	; 0x6977
    dad2:	f2c0 0301 	movt	r3, #1
    dad6:	4610      	mov	r0, r2
    dad8:	91cd      	str	r1, [sp, #820]	; 0x334
    dada:	4619      	mov	r1, r3
    dadc:	f7fc fc13 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dae0:	90cc      	str	r0, [sp, #816]	; 0x330
    dae2:	91cb      	str	r1, [sp, #812]	; 0x32c
    dae4:	e7ff      	b.n	dae6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xfb2>
    dae6:	98cc      	ldr	r0, [sp, #816]	; 0x330
    dae8:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    daec:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    daee:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    daf2:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    daf6:	f2c0 0201 	movt	r2, #1
    dafa:	6812      	ldr	r2, [r2, #0]
    dafc:	466b      	mov	r3, sp
    dafe:	f04f 0c01 	mov.w	ip, #1
    db02:	f8c3 c008 	str.w	ip, [r3, #8]
    db06:	605a      	str	r2, [r3, #4]
    db08:	f8c3 c000 	str.w	ip, [r3]
    db0c:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    db10:	2202      	movs	r2, #2
    db12:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    db16:	99cd      	ldr	r1, [sp, #820]	; 0x334
    db18:	f006 fc54 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    db1c:	e7ff      	b.n	db1e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0xfea>
    db1e:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    db22:	f24d 5094 	movw	r0, #54676	; 0xd594
    db26:	f2c0 0001 	movt	r0, #1
    db2a:	6802      	ldr	r2, [r0, #0]
    db2c:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    db30:	f004 f8fa 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    db34:	e7ff      	b.n	db36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1002>
    db36:	e7ff      	b.n	db38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1004>
                self.v[x] = self.v[x].wrapping_add(kk);
    db38:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    db3c:	280f      	cmp	r0, #15
    db3e:	f202 8553 	bhi.w	105e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ab4>
    db42:	e7ff      	b.n	db44 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1010>
    db44:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db48:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    db4c:	1842      	adds	r2, r0, r1
    db4e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    db52:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    db56:	f006 fc99 	bl	1448c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
    db5a:	90ca      	str	r0, [sp, #808]	; 0x328
    db5c:	e7ff      	b.n	db5e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x102a>
    db5e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    db62:	280f      	cmp	r0, #15
    db64:	f202 854a 	bhi.w	105fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3ac8>
    db68:	e7ff      	b.n	db6a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1036>
    db6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    db6e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    db72:	1842      	adds	r2, r0, r1
    db74:	9bca      	ldr	r3, [sp, #808]	; 0x328
    db76:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    db7a:	f002 baa8 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    db7e:	2005      	movs	r0, #5
    db80:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    db84:	f64c 2080 	movw	r0, #51840	; 0xca80
    db88:	f2c0 0001 	movt	r0, #1
    db8c:	6801      	ldr	r1, [r0, #0]
    db8e:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    db92:	f006 fd52 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    db96:	90c9      	str	r0, [sp, #804]	; 0x324
    db98:	e01f      	b.n	dbda <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10a6>
    db9a:	2001      	movs	r0, #1
    db9c:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dba0:	e015      	b.n	dbce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x109a>
    dba2:	2000      	movs	r0, #0
    dba4:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    dba8:	e011      	b.n	dbce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x109a>
    dbaa:	2000      	movs	r0, #0
    dbac:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    dbb0:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    dbb4:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dbb8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dbbc:	f003 f85f 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dbc0:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    dbc4:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    dbc8:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    dbcc:	e00a      	b.n	dbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10b0>
    dbce:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    dbd2:	07c0      	lsls	r0, r0, #31
    dbd4:	2800      	cmp	r0, #0
    dbd6:	d112      	bne.n	dbfe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10ca>
    dbd8:	e055      	b.n	dc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1152>
    dbda:	98c9      	ldr	r0, [sp, #804]	; 0x324
    dbdc:	07c1      	lsls	r1, r0, #31
    dbde:	2900      	cmp	r1, #0
    dbe0:	d1e3      	bne.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1076>
    dbe2:	e7de      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x106e>
    dbe4:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    dbe8:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    dbec:	f006 fd25 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dbf0:	90c8      	str	r0, [sp, #800]	; 0x320
    dbf2:	e7ff      	b.n	dbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x10c0>
    dbf4:	98c8      	ldr	r0, [sp, #800]	; 0x320
    dbf6:	07c1      	lsls	r1, r0, #31
    dbf8:	2900      	cmp	r1, #0
    dbfa:	d1ce      	bne.n	db9a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1066>
    dbfc:	e7d1      	b.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x106e>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    dbfe:	f24d 5014 	movw	r0, #54548	; 0xd514
    dc02:	f2c0 0001 	movt	r0, #1
    dc06:	6801      	ldr	r1, [r0, #0]
    dc08:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc0c:	f100 0212 	add.w	r2, r0, #18
    dc10:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    dc14:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    dc18:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    dc1c:	f646 1377 	movw	r3, #26999	; 0x6977
    dc20:	f2c0 0301 	movt	r3, #1
    dc24:	4610      	mov	r0, r2
    dc26:	91c7      	str	r1, [sp, #796]	; 0x31c
    dc28:	4619      	mov	r1, r3
    dc2a:	f7fc fb6c 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dc2e:	90c6      	str	r0, [sp, #792]	; 0x318
    dc30:	91c5      	str	r1, [sp, #788]	; 0x314
    dc32:	e7ff      	b.n	dc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1100>
    dc34:	98c6      	ldr	r0, [sp, #792]	; 0x318
    dc36:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    dc3a:	99c5      	ldr	r1, [sp, #788]	; 0x314
    dc3c:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    dc40:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    dc44:	f2c0 0201 	movt	r2, #1
    dc48:	6812      	ldr	r2, [r2, #0]
    dc4a:	466b      	mov	r3, sp
    dc4c:	f04f 0c01 	mov.w	ip, #1
    dc50:	f8c3 c008 	str.w	ip, [r3, #8]
    dc54:	605a      	str	r2, [r3, #4]
    dc56:	f8c3 c000 	str.w	ip, [r3]
    dc5a:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    dc5e:	2202      	movs	r2, #2
    dc60:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    dc64:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    dc66:	f006 fbad 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    dc6a:	e7ff      	b.n	dc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1138>
    dc6c:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    dc70:	f24d 5034 	movw	r0, #54580	; 0xd534
    dc74:	f2c0 0001 	movt	r0, #1
    dc78:	6802      	ldr	r2, [r0, #0]
    dc7a:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    dc7e:	f004 f853 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    dc82:	e7ff      	b.n	dc84 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1150>
    dc84:	e7ff      	b.n	dc86 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1152>
                self.v[x] = self.v[y];
    dc86:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    dc8a:	280f      	cmp	r0, #15
    dc8c:	f202 8498 	bhi.w	105c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a8c>
    dc90:	e7ff      	b.n	dc92 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x115e>
    dc92:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dc96:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    dc9a:	1842      	adds	r2, r0, r1
    dc9c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dca0:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    dca4:	2b0f      	cmp	r3, #15
    dca6:	92c4      	str	r2, [sp, #784]	; 0x310
    dca8:	f202 8494 	bhi.w	105d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3aa0>
    dcac:	e7ff      	b.n	dcae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x117a>
    dcae:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dcb2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    dcb6:	1842      	adds	r2, r0, r1
    dcb8:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    dcba:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    dcbe:	f002 ba06 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    dcc2:	2005      	movs	r0, #5
    dcc4:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    dcc8:	f64c 2080 	movw	r0, #51840	; 0xca80
    dccc:	f2c0 0001 	movt	r0, #1
    dcd0:	6801      	ldr	r1, [r0, #0]
    dcd2:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    dcd6:	f006 fcb0 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dcda:	90c3      	str	r0, [sp, #780]	; 0x30c
    dcdc:	e01f      	b.n	dd1e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11ea>
    dcde:	2001      	movs	r0, #1
    dce0:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    dce4:	e015      	b.n	dd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11de>
    dce6:	2000      	movs	r0, #0
    dce8:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    dcec:	e011      	b.n	dd12 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11de>
    dcee:	2000      	movs	r0, #0
    dcf0:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    dcf4:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    dcf8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    dcfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    dd00:	f002 ffbd 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dd04:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    dd08:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    dd0c:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    dd10:	e00a      	b.n	dd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11f4>
    dd12:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    dd16:	07c0      	lsls	r0, r0, #31
    dd18:	2800      	cmp	r0, #0
    dd1a:	d112      	bne.n	dd42 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x120e>
    dd1c:	e055      	b.n	ddca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1296>
    dd1e:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    dd20:	07c1      	lsls	r1, r0, #31
    dd22:	2900      	cmp	r1, #0
    dd24:	d1e3      	bne.n	dcee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11ba>
    dd26:	e7de      	b.n	dce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11b2>
    dd28:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    dd2c:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    dd30:	f006 fc83 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dd34:	90c2      	str	r0, [sp, #776]	; 0x308
    dd36:	e7ff      	b.n	dd38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1204>
    dd38:	98c2      	ldr	r0, [sp, #776]	; 0x308
    dd3a:	07c1      	lsls	r1, r0, #31
    dd3c:	2900      	cmp	r1, #0
    dd3e:	d1ce      	bne.n	dcde <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11aa>
    dd40:	e7d1      	b.n	dce6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x11b2>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    dd42:	f24d 40b4 	movw	r0, #54452	; 0xd4b4
    dd46:	f2c0 0001 	movt	r0, #1
    dd4a:	6801      	ldr	r1, [r0, #0]
    dd4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dd50:	f100 0212 	add.w	r2, r0, #18
    dd54:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    dd58:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    dd5c:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    dd60:	f646 1377 	movw	r3, #26999	; 0x6977
    dd64:	f2c0 0301 	movt	r3, #1
    dd68:	4610      	mov	r0, r2
    dd6a:	91c1      	str	r1, [sp, #772]	; 0x304
    dd6c:	4619      	mov	r1, r3
    dd6e:	f7fc faca 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dd72:	90c0      	str	r0, [sp, #768]	; 0x300
    dd74:	91bf      	str	r1, [sp, #764]	; 0x2fc
    dd76:	e7ff      	b.n	dd78 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1244>
    dd78:	98c0      	ldr	r0, [sp, #768]	; 0x300
    dd7a:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    dd7e:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    dd80:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    dd84:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    dd88:	f2c0 0201 	movt	r2, #1
    dd8c:	6812      	ldr	r2, [r2, #0]
    dd8e:	466b      	mov	r3, sp
    dd90:	f04f 0c01 	mov.w	ip, #1
    dd94:	f8c3 c008 	str.w	ip, [r3, #8]
    dd98:	605a      	str	r2, [r3, #4]
    dd9a:	f8c3 c000 	str.w	ip, [r3]
    dd9e:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    dda2:	2202      	movs	r2, #2
    dda4:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    dda8:	99c1      	ldr	r1, [sp, #772]	; 0x304
    ddaa:	f006 fb0b 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ddae:	e7ff      	b.n	ddb0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x127c>
    ddb0:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    ddb4:	f24d 40d4 	movw	r0, #54484	; 0xd4d4
    ddb8:	f2c0 0001 	movt	r0, #1
    ddbc:	6802      	ldr	r2, [r0, #0]
    ddbe:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    ddc2:	f003 ffb1 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ddc6:	e7ff      	b.n	ddc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1294>
    ddc8:	e7ff      	b.n	ddca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1296>
                self.v[x] |= self.v[y];
    ddca:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    ddce:	280f      	cmp	r0, #15
    ddd0:	f202 83e2 	bhi.w	10598 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a64>
    ddd4:	e7ff      	b.n	ddd6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12a2>
    ddd6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddda:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ddde:	1842      	adds	r2, r0, r1
    dde0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    dde4:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    dde8:	2b0f      	cmp	r3, #15
    ddea:	92be      	str	r2, [sp, #760]	; 0x2f8
    ddec:	f202 83de 	bhi.w	105ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a78>
    ddf0:	e7ff      	b.n	ddf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12be>
    ddf2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ddf6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ddfa:	1842      	adds	r2, r0, r1
    ddfc:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    de00:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    de04:	ea43 030c 	orr.w	r3, r3, ip
    de08:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    de0c:	f002 b95f 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    de10:	2005      	movs	r0, #5
    de12:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    de16:	f64c 2080 	movw	r0, #51840	; 0xca80
    de1a:	f2c0 0001 	movt	r0, #1
    de1e:	6801      	ldr	r1, [r0, #0]
    de20:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    de24:	f006 fc09 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de28:	90bd      	str	r0, [sp, #756]	; 0x2f4
    de2a:	e01f      	b.n	de6c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1338>
    de2c:	2001      	movs	r0, #1
    de2e:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    de32:	e015      	b.n	de60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x132c>
    de34:	2000      	movs	r0, #0
    de36:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    de3a:	e011      	b.n	de60 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x132c>
    de3c:	2000      	movs	r0, #0
    de3e:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    de42:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    de46:	f644 206c 	movw	r0, #19052	; 0x4a6c
    de4a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    de4e:	f002 ff16 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    de52:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    de56:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    de5a:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    de5e:	e00a      	b.n	de76 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1342>
    de60:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    de64:	07c0      	lsls	r0, r0, #31
    de66:	2800      	cmp	r0, #0
    de68:	d112      	bne.n	de90 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x135c>
    de6a:	e055      	b.n	df18 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e4>
    de6c:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    de6e:	07c1      	lsls	r1, r0, #31
    de70:	2900      	cmp	r1, #0
    de72:	d1e3      	bne.n	de3c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1308>
    de74:	e7de      	b.n	de34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1300>
    de76:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    de7a:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    de7e:	f006 fbdc 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    de82:	90bc      	str	r0, [sp, #752]	; 0x2f0
    de84:	e7ff      	b.n	de86 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1352>
    de86:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    de88:	07c1      	lsls	r1, r0, #31
    de8a:	2900      	cmp	r1, #0
    de8c:	d1ce      	bne.n	de2c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x12f8>
    de8e:	e7d1      	b.n	de34 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1300>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    de90:	f24d 4054 	movw	r0, #54356	; 0xd454
    de94:	f2c0 0001 	movt	r0, #1
    de98:	6801      	ldr	r1, [r0, #0]
    de9a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    de9e:	f100 0212 	add.w	r2, r0, #18
    dea2:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    dea6:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    deaa:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    deae:	f646 1377 	movw	r3, #26999	; 0x6977
    deb2:	f2c0 0301 	movt	r3, #1
    deb6:	4610      	mov	r0, r2
    deb8:	91bb      	str	r1, [sp, #748]	; 0x2ec
    deba:	4619      	mov	r1, r3
    debc:	f7fc fa23 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    dec0:	90ba      	str	r0, [sp, #744]	; 0x2e8
    dec2:	91b9      	str	r1, [sp, #740]	; 0x2e4
    dec4:	e7ff      	b.n	dec6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1392>
    dec6:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    dec8:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    decc:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    dece:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    ded2:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    ded6:	f2c0 0201 	movt	r2, #1
    deda:	6812      	ldr	r2, [r2, #0]
    dedc:	466b      	mov	r3, sp
    dede:	f04f 0c01 	mov.w	ip, #1
    dee2:	f8c3 c008 	str.w	ip, [r3, #8]
    dee6:	605a      	str	r2, [r3, #4]
    dee8:	f8c3 c000 	str.w	ip, [r3]
    deec:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    def0:	2202      	movs	r2, #2
    def2:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    def6:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    def8:	f006 fa64 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    defc:	e7ff      	b.n	defe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13ca>
    defe:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    df02:	f24d 4074 	movw	r0, #54388	; 0xd474
    df06:	f2c0 0001 	movt	r0, #1
    df0a:	6802      	ldr	r2, [r0, #0]
    df0c:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    df10:	f003 ff0a 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    df14:	e7ff      	b.n	df16 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e2>
    df16:	e7ff      	b.n	df18 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13e4>
                self.v[x] &= self.v[y];
    df18:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    df1c:	280f      	cmp	r0, #15
    df1e:	f202 8327 	bhi.w	10570 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a3c>
    df22:	e7ff      	b.n	df24 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x13f0>
    df24:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df28:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    df2c:	1842      	adds	r2, r0, r1
    df2e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    df32:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    df36:	2b0f      	cmp	r3, #15
    df38:	92b8      	str	r2, [sp, #736]	; 0x2e0
    df3a:	f202 8323 	bhi.w	10584 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a50>
    df3e:	e7ff      	b.n	df40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x140c>
    df40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    df44:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    df48:	1842      	adds	r2, r0, r1
    df4a:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    df4e:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    df52:	ea03 030c 	and.w	r3, r3, ip
    df56:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    df5a:	f002 b8b8 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    df5e:	2005      	movs	r0, #5
    df60:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    df64:	f64c 2080 	movw	r0, #51840	; 0xca80
    df68:	f2c0 0001 	movt	r0, #1
    df6c:	6801      	ldr	r1, [r0, #0]
    df6e:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    df72:	f006 fb62 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    df76:	90b7      	str	r0, [sp, #732]	; 0x2dc
    df78:	e01f      	b.n	dfba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1486>
    df7a:	2001      	movs	r0, #1
    df7c:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    df80:	e015      	b.n	dfae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x147a>
    df82:	2000      	movs	r0, #0
    df84:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    df88:	e011      	b.n	dfae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x147a>
    df8a:	2000      	movs	r0, #0
    df8c:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    df90:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    df94:	f644 206c 	movw	r0, #19052	; 0x4a6c
    df98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    df9c:	f002 fe6f 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    dfa0:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    dfa4:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    dfa8:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    dfac:	e00a      	b.n	dfc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1490>
    dfae:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    dfb2:	07c0      	lsls	r0, r0, #31
    dfb4:	2800      	cmp	r0, #0
    dfb6:	d112      	bne.n	dfde <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14aa>
    dfb8:	e055      	b.n	e066 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1532>
    dfba:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    dfbc:	07c1      	lsls	r1, r0, #31
    dfbe:	2900      	cmp	r1, #0
    dfc0:	d1e3      	bne.n	df8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1456>
    dfc2:	e7de      	b.n	df82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144e>
    dfc4:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    dfc8:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    dfcc:	f006 fb35 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    dfd0:	90b6      	str	r0, [sp, #728]	; 0x2d8
    dfd2:	e7ff      	b.n	dfd4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14a0>
    dfd4:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    dfd6:	07c1      	lsls	r1, r0, #31
    dfd8:	2900      	cmp	r1, #0
    dfda:	d1ce      	bne.n	df7a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1446>
    dfdc:	e7d1      	b.n	df82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x144e>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    dfde:	f24d 30f4 	movw	r0, #54260	; 0xd3f4
    dfe2:	f2c0 0001 	movt	r0, #1
    dfe6:	6801      	ldr	r1, [r0, #0]
    dfe8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    dfec:	f100 0212 	add.w	r2, r0, #18
    dff0:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    dff4:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    dff8:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    dffc:	f646 1377 	movw	r3, #26999	; 0x6977
    e000:	f2c0 0301 	movt	r3, #1
    e004:	4610      	mov	r0, r2
    e006:	91b5      	str	r1, [sp, #724]	; 0x2d4
    e008:	4619      	mov	r1, r3
    e00a:	f7fc f97c 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e00e:	90b4      	str	r0, [sp, #720]	; 0x2d0
    e010:	91b3      	str	r1, [sp, #716]	; 0x2cc
    e012:	e7ff      	b.n	e014 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x14e0>
    e014:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    e016:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    e01a:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    e01c:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    e020:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e024:	f2c0 0201 	movt	r2, #1
    e028:	6812      	ldr	r2, [r2, #0]
    e02a:	466b      	mov	r3, sp
    e02c:	f04f 0c01 	mov.w	ip, #1
    e030:	f8c3 c008 	str.w	ip, [r3, #8]
    e034:	605a      	str	r2, [r3, #4]
    e036:	f8c3 c000 	str.w	ip, [r3]
    e03a:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e03e:	2202      	movs	r2, #2
    e040:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    e044:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    e046:	f006 f9bd 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e04a:	e7ff      	b.n	e04c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1518>
    e04c:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    e050:	f24d 4014 	movw	r0, #54292	; 0xd414
    e054:	f2c0 0001 	movt	r0, #1
    e058:	6802      	ldr	r2, [r0, #0]
    e05a:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    e05e:	f003 fe63 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e062:	e7ff      	b.n	e064 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1530>
    e064:	e7ff      	b.n	e066 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1532>
                self.v[x] ^= self.v[y];
    e066:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e06a:	280f      	cmp	r0, #15
    e06c:	f202 826c 	bhi.w	10548 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a14>
    e070:	e7ff      	b.n	e072 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x153e>
    e072:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e076:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e07a:	1842      	adds	r2, r0, r1
    e07c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e080:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e084:	2b0f      	cmp	r3, #15
    e086:	92b2      	str	r2, [sp, #712]	; 0x2c8
    e088:	f202 8268 	bhi.w	1055c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a28>
    e08c:	e7ff      	b.n	e08e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x155a>
    e08e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e092:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e096:	1842      	adds	r2, r0, r1
    e098:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    e09c:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    e0a0:	ea83 030c 	eor.w	r3, r3, ip
    e0a4:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e0a8:	f002 b811 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e0ac:	2005      	movs	r0, #5
    e0ae:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    e0b2:	f64c 2080 	movw	r0, #51840	; 0xca80
    e0b6:	f2c0 0001 	movt	r0, #1
    e0ba:	6801      	ldr	r1, [r0, #0]
    e0bc:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e0c0:	f006 fabb 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e0c4:	90b1      	str	r0, [sp, #708]	; 0x2c4
    e0c6:	e01f      	b.n	e108 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15d4>
    e0c8:	2001      	movs	r0, #1
    e0ca:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e0ce:	e015      	b.n	e0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15c8>
    e0d0:	2000      	movs	r0, #0
    e0d2:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    e0d6:	e011      	b.n	e0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15c8>
    e0d8:	2000      	movs	r0, #0
    e0da:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    e0de:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    e0e2:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e0e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e0ea:	f002 fdc8 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e0ee:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    e0f2:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    e0f6:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    e0fa:	e00a      	b.n	e112 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15de>
    e0fc:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    e100:	07c0      	lsls	r0, r0, #31
    e102:	2800      	cmp	r0, #0
    e104:	d112      	bne.n	e12c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15f8>
    e106:	e055      	b.n	e1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1680>
    e108:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    e10a:	07c1      	lsls	r1, r0, #31
    e10c:	2900      	cmp	r1, #0
    e10e:	d1e3      	bne.n	e0d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15a4>
    e110:	e7de      	b.n	e0d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x159c>
    e112:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    e116:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    e11a:	f006 fa8e 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e11e:	90b0      	str	r0, [sp, #704]	; 0x2c0
    e120:	e7ff      	b.n	e122 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x15ee>
    e122:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    e124:	07c1      	lsls	r1, r0, #31
    e126:	2900      	cmp	r1, #0
    e128:	d1ce      	bne.n	e0c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1594>
    e12a:	e7d1      	b.n	e0d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x159c>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    e12c:	f24d 3084 	movw	r0, #54148	; 0xd384
    e130:	f2c0 0001 	movt	r0, #1
    e134:	6801      	ldr	r1, [r0, #0]
    e136:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e13a:	f100 0212 	add.w	r2, r0, #18
    e13e:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    e142:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    e146:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    e14a:	f646 1377 	movw	r3, #26999	; 0x6977
    e14e:	f2c0 0301 	movt	r3, #1
    e152:	4610      	mov	r0, r2
    e154:	91af      	str	r1, [sp, #700]	; 0x2bc
    e156:	4619      	mov	r1, r3
    e158:	f7fc f8d5 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e15c:	90ae      	str	r0, [sp, #696]	; 0x2b8
    e15e:	91ad      	str	r1, [sp, #692]	; 0x2b4
    e160:	e7ff      	b.n	e162 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x162e>
    e162:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    e164:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    e168:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    e16a:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    e16e:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e172:	f2c0 0201 	movt	r2, #1
    e176:	6812      	ldr	r2, [r2, #0]
    e178:	466b      	mov	r3, sp
    e17a:	f04f 0c01 	mov.w	ip, #1
    e17e:	f8c3 c008 	str.w	ip, [r3, #8]
    e182:	605a      	str	r2, [r3, #4]
    e184:	f8c3 c000 	str.w	ip, [r3]
    e188:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e18c:	2202      	movs	r2, #2
    e18e:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    e192:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    e194:	f006 f916 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e198:	e7ff      	b.n	e19a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1666>
    e19a:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    e19e:	f24d 30a4 	movw	r0, #54180	; 0xd3a4
    e1a2:	f2c0 0001 	movt	r0, #1
    e1a6:	6802      	ldr	r2, [r0, #0]
    e1a8:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    e1ac:	f003 fdbc 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e1b0:	e7ff      	b.n	e1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x167e>
    e1b2:	e7ff      	b.n	e1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1680>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    e1b4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e1b8:	280f      	cmp	r0, #15
    e1ba:	f202 81a7 	bhi.w	1050c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39d8>
    e1be:	e7ff      	b.n	e1c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x168c>
    e1c0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1c4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e1c8:	1842      	adds	r2, r0, r1
    e1ca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e1ce:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e1d2:	2b0f      	cmp	r3, #15
    e1d4:	92ac      	str	r2, [sp, #688]	; 0x2b0
    e1d6:	f202 81a3 	bhi.w	10520 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39ec>
    e1da:	e7ff      	b.n	e1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16a8>
    e1dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e1e0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e1e4:	1842      	adds	r2, r0, r1
    e1e6:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e1ea:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    e1ec:	f006 f994 	bl	14518 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
    e1f0:	90ab      	str	r0, [sp, #684]	; 0x2ac
    e1f2:	91aa      	str	r1, [sp, #680]	; 0x2a8
    e1f4:	e7ff      	b.n	e1f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16c2>
    e1f6:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    e1f8:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    e1fc:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    e1fe:	f001 0201 	and.w	r2, r1, #1
    e202:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    e206:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e20a:	2a0f      	cmp	r2, #15
    e20c:	f202 8192 	bhi.w	10534 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3a00>
    e210:	e7ff      	b.n	e212 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x16de>
    e212:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e216:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e21a:	1842      	adds	r2, r0, r1
    e21c:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    e21e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    e222:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    e224:	f002 0c01 	and.w	ip, r2, #1
    e228:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    e22c:	f001 bf4f 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e230:	2005      	movs	r0, #5
    e232:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    e236:	f64c 2080 	movw	r0, #51840	; 0xca80
    e23a:	f2c0 0001 	movt	r0, #1
    e23e:	6801      	ldr	r1, [r0, #0]
    e240:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e244:	f006 f9f9 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e248:	90a9      	str	r0, [sp, #676]	; 0x2a4
    e24a:	e01f      	b.n	e28c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1758>
    e24c:	2001      	movs	r0, #1
    e24e:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e252:	e015      	b.n	e280 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x174c>
    e254:	2000      	movs	r0, #0
    e256:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    e25a:	e011      	b.n	e280 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x174c>
    e25c:	2000      	movs	r0, #0
    e25e:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    e262:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    e266:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e26a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e26e:	f002 fd06 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e272:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    e276:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    e27a:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    e27e:	e00a      	b.n	e296 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1762>
    e280:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    e284:	07c0      	lsls	r0, r0, #31
    e286:	2800      	cmp	r0, #0
    e288:	d112      	bne.n	e2b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x177c>
    e28a:	e055      	b.n	e338 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1804>
    e28c:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    e28e:	07c1      	lsls	r1, r0, #31
    e290:	2900      	cmp	r1, #0
    e292:	d1e3      	bne.n	e25c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1728>
    e294:	e7de      	b.n	e254 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1720>
    e296:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    e29a:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    e29e:	f006 f9cc 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e2a2:	90a8      	str	r0, [sp, #672]	; 0x2a0
    e2a4:	e7ff      	b.n	e2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1772>
    e2a6:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    e2a8:	07c1      	lsls	r1, r0, #31
    e2aa:	2900      	cmp	r1, #0
    e2ac:	d1ce      	bne.n	e24c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1718>
    e2ae:	e7d1      	b.n	e254 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1720>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    e2b0:	f24d 3014 	movw	r0, #54036	; 0xd314
    e2b4:	f2c0 0001 	movt	r0, #1
    e2b8:	6801      	ldr	r1, [r0, #0]
    e2ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e2be:	f100 0212 	add.w	r2, r0, #18
    e2c2:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    e2c6:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    e2ca:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    e2ce:	f646 1377 	movw	r3, #26999	; 0x6977
    e2d2:	f2c0 0301 	movt	r3, #1
    e2d6:	4610      	mov	r0, r2
    e2d8:	91a7      	str	r1, [sp, #668]	; 0x29c
    e2da:	4619      	mov	r1, r3
    e2dc:	f7fc f813 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e2e0:	90a6      	str	r0, [sp, #664]	; 0x298
    e2e2:	91a5      	str	r1, [sp, #660]	; 0x294
    e2e4:	e7ff      	b.n	e2e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x17b2>
    e2e6:	98a6      	ldr	r0, [sp, #664]	; 0x298
    e2e8:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    e2ec:	99a5      	ldr	r1, [sp, #660]	; 0x294
    e2ee:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    e2f2:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e2f6:	f2c0 0201 	movt	r2, #1
    e2fa:	6812      	ldr	r2, [r2, #0]
    e2fc:	466b      	mov	r3, sp
    e2fe:	f04f 0c01 	mov.w	ip, #1
    e302:	f8c3 c008 	str.w	ip, [r3, #8]
    e306:	605a      	str	r2, [r3, #4]
    e308:	f8c3 c000 	str.w	ip, [r3]
    e30c:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e310:	2202      	movs	r2, #2
    e312:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    e316:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    e318:	f006 f854 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e31c:	e7ff      	b.n	e31e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x17ea>
    e31e:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    e322:	f24d 3034 	movw	r0, #54068	; 0xd334
    e326:	f2c0 0001 	movt	r0, #1
    e32a:	6802      	ldr	r2, [r0, #0]
    e32c:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    e330:	f003 fcfa 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e334:	e7ff      	b.n	e336 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1802>
    e336:	e7ff      	b.n	e338 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1804>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    e338:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e33c:	280f      	cmp	r0, #15
    e33e:	f202 80c7 	bhi.w	104d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x399c>
    e342:	e7ff      	b.n	e344 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1810>
    e344:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e348:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e34c:	1842      	adds	r2, r0, r1
    e34e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e352:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e356:	2b0f      	cmp	r3, #15
    e358:	92a4      	str	r2, [sp, #656]	; 0x290
    e35a:	f202 80c3 	bhi.w	104e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39b0>
    e35e:	e7ff      	b.n	e360 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x182c>
    e360:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e364:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e368:	1842      	adds	r2, r0, r1
    e36a:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e36e:	98a4      	ldr	r0, [sp, #656]	; 0x290
    e370:	f006 f8fd 	bl	1456e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e374:	90a3      	str	r0, [sp, #652]	; 0x28c
    e376:	91a2      	str	r1, [sp, #648]	; 0x288
    e378:	e7ff      	b.n	e37a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1846>
    e37a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    e37c:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    e380:	99a2      	ldr	r1, [sp, #648]	; 0x288
    e382:	f001 0201 	and.w	r2, r1, #1
    e386:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    e38a:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e38e:	2a0f      	cmp	r2, #15
    e390:	f202 80b2 	bhi.w	104f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x39c4>
    e394:	e7ff      	b.n	e396 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1862>
    e396:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e39a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e39e:	1842      	adds	r2, r0, r1
    e3a0:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    e3a2:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e3a6:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e3a8:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    e3ac:	ea22 020c 	bic.w	r2, r2, ip
    e3b0:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e3b4:	f001 be8b 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e3b8:	2005      	movs	r0, #5
    e3ba:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    e3be:	f64c 2080 	movw	r0, #51840	; 0xca80
    e3c2:	f2c0 0001 	movt	r0, #1
    e3c6:	6801      	ldr	r1, [r0, #0]
    e3c8:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e3cc:	f006 f935 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e3d0:	90a1      	str	r0, [sp, #644]	; 0x284
    e3d2:	e01f      	b.n	e414 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18e0>
    e3d4:	2001      	movs	r0, #1
    e3d6:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e3da:	e015      	b.n	e408 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18d4>
    e3dc:	2000      	movs	r0, #0
    e3de:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    e3e2:	e011      	b.n	e408 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18d4>
    e3e4:	2000      	movs	r0, #0
    e3e6:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    e3ea:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    e3ee:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e3f2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e3f6:	f002 fc42 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e3fa:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    e3fe:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    e402:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    e406:	e00a      	b.n	e41e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18ea>
    e408:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    e40c:	07c0      	lsls	r0, r0, #31
    e40e:	2800      	cmp	r0, #0
    e410:	d112      	bne.n	e438 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1904>
    e412:	e055      	b.n	e4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198c>
    e414:	98a1      	ldr	r0, [sp, #644]	; 0x284
    e416:	07c1      	lsls	r1, r0, #31
    e418:	2900      	cmp	r1, #0
    e41a:	d1e3      	bne.n	e3e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18b0>
    e41c:	e7de      	b.n	e3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a8>
    e41e:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    e422:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    e426:	f006 f908 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e42a:	90a0      	str	r0, [sp, #640]	; 0x280
    e42c:	e7ff      	b.n	e42e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18fa>
    e42e:	98a0      	ldr	r0, [sp, #640]	; 0x280
    e430:	07c1      	lsls	r1, r0, #31
    e432:	2900      	cmp	r1, #0
    e434:	d1ce      	bne.n	e3d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a0>
    e436:	e7d1      	b.n	e3dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x18a8>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    e438:	f24d 20a4 	movw	r0, #53924	; 0xd2a4
    e43c:	f2c0 0001 	movt	r0, #1
    e440:	6801      	ldr	r1, [r0, #0]
    e442:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e446:	f100 0212 	add.w	r2, r0, #18
    e44a:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    e44e:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    e452:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    e456:	f646 1377 	movw	r3, #26999	; 0x6977
    e45a:	f2c0 0301 	movt	r3, #1
    e45e:	4610      	mov	r0, r2
    e460:	919f      	str	r1, [sp, #636]	; 0x27c
    e462:	4619      	mov	r1, r3
    e464:	f7fb ff4f 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e468:	909e      	str	r0, [sp, #632]	; 0x278
    e46a:	919d      	str	r1, [sp, #628]	; 0x274
    e46c:	e7ff      	b.n	e46e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x193a>
    e46e:	989e      	ldr	r0, [sp, #632]	; 0x278
    e470:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    e474:	999d      	ldr	r1, [sp, #628]	; 0x274
    e476:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    e47a:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e47e:	f2c0 0201 	movt	r2, #1
    e482:	6812      	ldr	r2, [r2, #0]
    e484:	466b      	mov	r3, sp
    e486:	f04f 0c01 	mov.w	ip, #1
    e48a:	f8c3 c008 	str.w	ip, [r3, #8]
    e48e:	605a      	str	r2, [r3, #4]
    e490:	f8c3 c000 	str.w	ip, [r3]
    e494:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e498:	2202      	movs	r2, #2
    e49a:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    e49e:	999f      	ldr	r1, [sp, #636]	; 0x27c
    e4a0:	f005 ff90 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e4a4:	e7ff      	b.n	e4a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1972>
    e4a6:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    e4aa:	f24d 20c4 	movw	r0, #53956	; 0xd2c4
    e4ae:	f2c0 0001 	movt	r0, #1
    e4b2:	6802      	ldr	r2, [r0, #0]
    e4b4:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    e4b8:	f003 fc36 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e4bc:	e7ff      	b.n	e4be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198a>
    e4be:	e7ff      	b.n	e4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x198c>
                self.v[0xf] = self.v[x] & 1;
    e4c0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e4c4:	280f      	cmp	r0, #15
    e4c6:	f201 87e5 	bhi.w	10494 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3960>
    e4ca:	e7ff      	b.n	e4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1998>
    e4cc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4d4:	1842      	adds	r2, r0, r1
    e4d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e4da:	f002 0201 	and.w	r2, r2, #1
    e4de:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    e4e2:	290f      	cmp	r1, #15
    e4e4:	f201 87e0 	bhi.w	104a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3974>
    e4e8:	e7ff      	b.n	e4ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19b6>
    e4ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e4ee:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e4f2:	1842      	adds	r2, r0, r1
    e4f4:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e4f8:	2101      	movs	r1, #1
    e4fa:	f005 ffe9 	bl	144d0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>
    e4fe:	909c      	str	r0, [sp, #624]	; 0x270
    e500:	e7ff      	b.n	e502 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19ce>
    e502:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e506:	280f      	cmp	r0, #15
    e508:	f201 87d8 	bhi.w	104bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3988>
    e50c:	e7ff      	b.n	e50e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x19da>
    e50e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e512:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e516:	1842      	adds	r2, r0, r1
    e518:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    e51a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e51e:	f001 bdd6 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e522:	2005      	movs	r0, #5
    e524:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    e528:	f64c 2080 	movw	r0, #51840	; 0xca80
    e52c:	f2c0 0001 	movt	r0, #1
    e530:	6801      	ldr	r1, [r0, #0]
    e532:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e536:	f006 f880 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e53a:	909b      	str	r0, [sp, #620]	; 0x26c
    e53c:	e01f      	b.n	e57e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a4a>
    e53e:	2001      	movs	r0, #1
    e540:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e544:	e015      	b.n	e572 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a3e>
    e546:	2000      	movs	r0, #0
    e548:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    e54c:	e011      	b.n	e572 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a3e>
    e54e:	2000      	movs	r0, #0
    e550:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    e554:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    e558:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e55c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e560:	f002 fb8d 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e564:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    e568:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    e56c:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    e570:	e00a      	b.n	e588 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a54>
    e572:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    e576:	07c0      	lsls	r0, r0, #31
    e578:	2800      	cmp	r0, #0
    e57a:	d112      	bne.n	e5a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a6e>
    e57c:	e055      	b.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af6>
    e57e:	989b      	ldr	r0, [sp, #620]	; 0x26c
    e580:	07c1      	lsls	r1, r0, #31
    e582:	2900      	cmp	r1, #0
    e584:	d1e3      	bne.n	e54e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a1a>
    e586:	e7de      	b.n	e546 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a12>
    e588:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    e58c:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    e590:	f006 f853 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e594:	909a      	str	r0, [sp, #616]	; 0x268
    e596:	e7ff      	b.n	e598 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a64>
    e598:	989a      	ldr	r0, [sp, #616]	; 0x268
    e59a:	07c1      	lsls	r1, r0, #31
    e59c:	2900      	cmp	r1, #0
    e59e:	d1ce      	bne.n	e53e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a0a>
    e5a0:	e7d1      	b.n	e546 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1a12>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    e5a2:	f24d 2034 	movw	r0, #53812	; 0xd234
    e5a6:	f2c0 0001 	movt	r0, #1
    e5aa:	6801      	ldr	r1, [r0, #0]
    e5ac:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e5b0:	f100 0212 	add.w	r2, r0, #18
    e5b4:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    e5b8:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    e5bc:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    e5c0:	f646 1377 	movw	r3, #26999	; 0x6977
    e5c4:	f2c0 0301 	movt	r3, #1
    e5c8:	4610      	mov	r0, r2
    e5ca:	9199      	str	r1, [sp, #612]	; 0x264
    e5cc:	4619      	mov	r1, r3
    e5ce:	f7fb fe9a 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e5d2:	9098      	str	r0, [sp, #608]	; 0x260
    e5d4:	9197      	str	r1, [sp, #604]	; 0x25c
    e5d6:	e7ff      	b.n	e5d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1aa4>
    e5d8:	9898      	ldr	r0, [sp, #608]	; 0x260
    e5da:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    e5de:	9997      	ldr	r1, [sp, #604]	; 0x25c
    e5e0:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    e5e4:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e5e8:	f2c0 0201 	movt	r2, #1
    e5ec:	6812      	ldr	r2, [r2, #0]
    e5ee:	466b      	mov	r3, sp
    e5f0:	f04f 0c01 	mov.w	ip, #1
    e5f4:	f8c3 c008 	str.w	ip, [r3, #8]
    e5f8:	605a      	str	r2, [r3, #4]
    e5fa:	f8c3 c000 	str.w	ip, [r3]
    e5fe:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e602:	2202      	movs	r2, #2
    e604:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    e608:	9999      	ldr	r1, [sp, #612]	; 0x264
    e60a:	f005 fedb 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e60e:	e7ff      	b.n	e610 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1adc>
    e610:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    e614:	f24d 2054 	movw	r0, #53844	; 0xd254
    e618:	f2c0 0001 	movt	r0, #1
    e61c:	6802      	ldr	r2, [r0, #0]
    e61e:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    e622:	f003 fb81 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e626:	e7ff      	b.n	e628 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af4>
    e628:	e7ff      	b.n	e62a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1af6>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    e62a:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    e62e:	280f      	cmp	r0, #15
    e630:	f201 8712 	bhi.w	10458 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3924>
    e634:	e7ff      	b.n	e636 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b02>
    e636:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e63a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e63e:	1842      	adds	r2, r0, r1
    e640:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e644:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    e648:	2b0f      	cmp	r3, #15
    e64a:	9296      	str	r2, [sp, #600]	; 0x258
    e64c:	f201 870e 	bhi.w	1046c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3938>
    e650:	e7ff      	b.n	e652 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b1e>
    e652:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e656:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e65a:	1842      	adds	r2, r0, r1
    e65c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    e660:	9896      	ldr	r0, [sp, #600]	; 0x258
    e662:	f005 ff84 	bl	1456e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>
    e666:	9095      	str	r0, [sp, #596]	; 0x254
    e668:	9194      	str	r1, [sp, #592]	; 0x250
    e66a:	e7ff      	b.n	e66c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b38>
    e66c:	9895      	ldr	r0, [sp, #596]	; 0x254
    e66e:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    e672:	9994      	ldr	r1, [sp, #592]	; 0x250
    e674:	f001 0201 	and.w	r2, r1, #1
    e678:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    e67c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e680:	2a0f      	cmp	r2, #15
    e682:	f201 86fd 	bhi.w	10480 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x394c>
    e686:	e7ff      	b.n	e688 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b54>
    e688:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e68c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e690:	1842      	adds	r2, r0, r1
    e692:	9b95      	ldr	r3, [sp, #596]	; 0x254
    e694:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    e698:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    e69a:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    e69e:	ea22 020c 	bic.w	r2, r2, ip
    e6a2:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    e6a6:	f001 bd12 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e6aa:	2005      	movs	r0, #5
    e6ac:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    e6b0:	f64c 2080 	movw	r0, #51840	; 0xca80
    e6b4:	f2c0 0001 	movt	r0, #1
    e6b8:	6801      	ldr	r1, [r0, #0]
    e6ba:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e6be:	f005 ffbc 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e6c2:	9093      	str	r0, [sp, #588]	; 0x24c
    e6c4:	e01f      	b.n	e706 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bd2>
    e6c6:	2001      	movs	r0, #1
    e6c8:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e6cc:	e015      	b.n	e6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bc6>
    e6ce:	2000      	movs	r0, #0
    e6d0:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    e6d4:	e011      	b.n	e6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bc6>
    e6d6:	2000      	movs	r0, #0
    e6d8:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    e6dc:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    e6e0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e6e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e6e8:	f002 fac9 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e6ec:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    e6f0:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    e6f4:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    e6f8:	e00a      	b.n	e710 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bdc>
    e6fa:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    e6fe:	07c0      	lsls	r0, r0, #31
    e700:	2800      	cmp	r0, #0
    e702:	d112      	bne.n	e72a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bf6>
    e704:	e055      	b.n	e7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7e>
    e706:	9893      	ldr	r0, [sp, #588]	; 0x24c
    e708:	07c1      	lsls	r1, r0, #31
    e70a:	2900      	cmp	r1, #0
    e70c:	d1e3      	bne.n	e6d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ba2>
    e70e:	e7de      	b.n	e6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b9a>
    e710:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    e714:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    e718:	f005 ff8f 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e71c:	9092      	str	r0, [sp, #584]	; 0x248
    e71e:	e7ff      	b.n	e720 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1bec>
    e720:	9892      	ldr	r0, [sp, #584]	; 0x248
    e722:	07c1      	lsls	r1, r0, #31
    e724:	2900      	cmp	r1, #0
    e726:	d1ce      	bne.n	e6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b92>
    e728:	e7d1      	b.n	e6ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1b9a>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    e72a:	f24d 10c0 	movw	r0, #53696	; 0xd1c0
    e72e:	f2c0 0001 	movt	r0, #1
    e732:	6801      	ldr	r1, [r0, #0]
    e734:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e738:	f100 0212 	add.w	r2, r0, #18
    e73c:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    e740:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    e744:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    e748:	f646 1377 	movw	r3, #26999	; 0x6977
    e74c:	f2c0 0301 	movt	r3, #1
    e750:	4610      	mov	r0, r2
    e752:	9191      	str	r1, [sp, #580]	; 0x244
    e754:	4619      	mov	r1, r3
    e756:	f7fb fdd6 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e75a:	9090      	str	r0, [sp, #576]	; 0x240
    e75c:	918f      	str	r1, [sp, #572]	; 0x23c
    e75e:	e7ff      	b.n	e760 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c2c>
    e760:	9890      	ldr	r0, [sp, #576]	; 0x240
    e762:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    e766:	998f      	ldr	r1, [sp, #572]	; 0x23c
    e768:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    e76c:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e770:	f2c0 0201 	movt	r2, #1
    e774:	6812      	ldr	r2, [r2, #0]
    e776:	466b      	mov	r3, sp
    e778:	f04f 0c01 	mov.w	ip, #1
    e77c:	f8c3 c008 	str.w	ip, [r3, #8]
    e780:	605a      	str	r2, [r3, #4]
    e782:	f8c3 c000 	str.w	ip, [r3]
    e786:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e78a:	2202      	movs	r2, #2
    e78c:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    e790:	9991      	ldr	r1, [sp, #580]	; 0x244
    e792:	f005 fe17 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e796:	e7ff      	b.n	e798 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c64>
    e798:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    e79c:	f24d 10e0 	movw	r0, #53728	; 0xd1e0
    e7a0:	f2c0 0001 	movt	r0, #1
    e7a4:	6802      	ldr	r2, [r0, #0]
    e7a6:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    e7aa:	f003 fabd 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e7ae:	e7ff      	b.n	e7b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7c>
    e7b0:	e7ff      	b.n	e7b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c7e>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    e7b2:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e7b6:	280f      	cmp	r0, #15
    e7b8:	f201 8630 	bhi.w	1041c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38e8>
    e7bc:	e7ff      	b.n	e7be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c8a>
    e7be:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7c2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7c6:	1842      	adds	r2, r0, r1
    e7c8:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e7cc:	09d2      	lsrs	r2, r2, #7
    e7ce:	928e      	str	r2, [sp, #568]	; 0x238
    e7d0:	e7ff      	b.n	e7d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1c9e>
    e7d2:	988e      	ldr	r0, [sp, #568]	; 0x238
    e7d4:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    e7d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    e7dc:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    e7e0:	2a0f      	cmp	r2, #15
    e7e2:	f201 8625 	bhi.w	10430 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38fc>
    e7e6:	e7ff      	b.n	e7e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cb4>
    e7e8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e7ec:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e7f0:	1842      	adds	r2, r0, r1
    e7f2:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    e7f6:	2101      	movs	r1, #1
    e7f8:	f005 fe59 	bl	144ae <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>
    e7fc:	908d      	str	r0, [sp, #564]	; 0x234
    e7fe:	e7ff      	b.n	e800 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ccc>
    e800:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e804:	280f      	cmp	r0, #15
    e806:	f201 861d 	bhi.w	10444 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3910>
    e80a:	e7ff      	b.n	e80c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1cd8>
    e80c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e810:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e814:	1842      	adds	r2, r0, r1
    e816:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    e818:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    e81c:	f001 bc57 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e820:	2005      	movs	r0, #5
    e822:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    e826:	f64c 2080 	movw	r0, #51840	; 0xca80
    e82a:	f2c0 0001 	movt	r0, #1
    e82e:	6801      	ldr	r1, [r0, #0]
    e830:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    e834:	f005 ff01 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e838:	908c      	str	r0, [sp, #560]	; 0x230
    e83a:	e01f      	b.n	e87c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d48>
    e83c:	2001      	movs	r0, #1
    e83e:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e842:	e015      	b.n	e870 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d3c>
    e844:	2000      	movs	r0, #0
    e846:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    e84a:	e011      	b.n	e870 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d3c>
    e84c:	2000      	movs	r0, #0
    e84e:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    e852:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    e856:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e85a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e85e:	f002 fa0e 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e862:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    e866:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    e86a:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    e86e:	e00a      	b.n	e886 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d52>
    e870:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    e874:	07c0      	lsls	r0, r0, #31
    e876:	2800      	cmp	r0, #0
    e878:	d112      	bne.n	e8a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d6c>
    e87a:	e055      	b.n	e928 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df4>
    e87c:	988c      	ldr	r0, [sp, #560]	; 0x230
    e87e:	07c1      	lsls	r1, r0, #31
    e880:	2900      	cmp	r1, #0
    e882:	d1e3      	bne.n	e84c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d18>
    e884:	e7de      	b.n	e844 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d10>
    e886:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    e88a:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    e88e:	f005 fed4 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e892:	908b      	str	r0, [sp, #556]	; 0x22c
    e894:	e7ff      	b.n	e896 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d62>
    e896:	988b      	ldr	r0, [sp, #556]	; 0x22c
    e898:	07c1      	lsls	r1, r0, #31
    e89a:	2900      	cmp	r1, #0
    e89c:	d1ce      	bne.n	e83c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d08>
    e89e:	e7d1      	b.n	e844 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1d10>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    e8a0:	f24d 1060 	movw	r0, #53600	; 0xd160
    e8a4:	f2c0 0001 	movt	r0, #1
    e8a8:	6801      	ldr	r1, [r0, #0]
    e8aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e8ae:	f100 0212 	add.w	r2, r0, #18
    e8b2:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    e8b6:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    e8ba:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    e8be:	f646 1377 	movw	r3, #26999	; 0x6977
    e8c2:	f2c0 0301 	movt	r3, #1
    e8c6:	4610      	mov	r0, r2
    e8c8:	918a      	str	r1, [sp, #552]	; 0x228
    e8ca:	4619      	mov	r1, r3
    e8cc:	f7fb fd1b 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    e8d0:	9089      	str	r0, [sp, #548]	; 0x224
    e8d2:	9188      	str	r1, [sp, #544]	; 0x220
    e8d4:	e7ff      	b.n	e8d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1da2>
    e8d6:	9889      	ldr	r0, [sp, #548]	; 0x224
    e8d8:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    e8dc:	9988      	ldr	r1, [sp, #544]	; 0x220
    e8de:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    e8e2:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    e8e6:	f2c0 0201 	movt	r2, #1
    e8ea:	6812      	ldr	r2, [r2, #0]
    e8ec:	466b      	mov	r3, sp
    e8ee:	f04f 0c01 	mov.w	ip, #1
    e8f2:	f8c3 c008 	str.w	ip, [r3, #8]
    e8f6:	605a      	str	r2, [r3, #4]
    e8f8:	f8c3 c000 	str.w	ip, [r3]
    e8fc:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    e900:	2202      	movs	r2, #2
    e902:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    e906:	998a      	ldr	r1, [sp, #552]	; 0x228
    e908:	f005 fd5c 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    e90c:	e7ff      	b.n	e90e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1dda>
    e90e:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    e912:	f24d 1080 	movw	r0, #53632	; 0xd180
    e916:	f2c0 0001 	movt	r0, #1
    e91a:	6802      	ldr	r2, [r0, #0]
    e91c:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    e920:	f003 fa02 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    e924:	e7ff      	b.n	e926 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df2>
    e926:	e7ff      	b.n	e928 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1df4>
                if self.v[x] != self.v[y] {
    e928:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    e92c:	280f      	cmp	r0, #15
    e92e:	f201 8561 	bhi.w	103f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38c0>
    e932:	e7ff      	b.n	e934 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e00>
    e934:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e938:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    e93c:	1842      	adds	r2, r0, r1
    e93e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e942:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    e946:	2b0f      	cmp	r3, #15
    e948:	9287      	str	r2, [sp, #540]	; 0x21c
    e94a:	f201 855d 	bhi.w	10408 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38d4>
    e94e:	e7ff      	b.n	e950 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e1c>
    e950:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e954:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    e958:	1842      	adds	r2, r0, r1
    e95a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    e95e:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    e960:	fa5f fc83 	uxtb.w	ip, r3
    e964:	4594      	cmp	ip, r2
    e966:	d006      	beq.n	e976 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e42>
    e968:	e7ff      	b.n	e96a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e36>
                    self.next();
    e96a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    e96e:	f001 fee0 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    e972:	e7ff      	b.n	e974 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e40>
                if self.v[x] != self.v[y] {
    e974:	e7ff      	b.n	e976 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e42>
        match (
    e976:	f001 bbaa 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    e97a:	2005      	movs	r0, #5
    e97c:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    e980:	f64c 2080 	movw	r0, #51840	; 0xca80
    e984:	f2c0 0001 	movt	r0, #1
    e988:	6801      	ldr	r1, [r0, #0]
    e98a:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    e98e:	f005 fe54 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e992:	9086      	str	r0, [sp, #536]	; 0x218
    e994:	e01f      	b.n	e9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ea2>
    e996:	2001      	movs	r0, #1
    e998:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    e99c:	e015      	b.n	e9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e96>
    e99e:	2000      	movs	r0, #0
    e9a0:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    e9a4:	e011      	b.n	e9ca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e96>
    e9a6:	2000      	movs	r0, #0
    e9a8:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    e9ac:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    e9b0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    e9b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    e9b8:	f002 f961 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    e9bc:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    e9c0:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    e9c4:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    e9c8:	e00a      	b.n	e9e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1eac>
    e9ca:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    e9ce:	07c0      	lsls	r0, r0, #31
    e9d0:	2800      	cmp	r0, #0
    e9d2:	d112      	bne.n	e9fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ec6>
    e9d4:	e055      	b.n	ea82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4e>
    e9d6:	9886      	ldr	r0, [sp, #536]	; 0x218
    e9d8:	07c1      	lsls	r1, r0, #31
    e9da:	2900      	cmp	r1, #0
    e9dc:	d1e3      	bne.n	e9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e72>
    e9de:	e7de      	b.n	e99e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e6a>
    e9e0:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    e9e4:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    e9e8:	f005 fe27 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    e9ec:	9085      	str	r0, [sp, #532]	; 0x214
    e9ee:	e7ff      	b.n	e9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1ebc>
    e9f0:	9885      	ldr	r0, [sp, #532]	; 0x214
    e9f2:	07c1      	lsls	r1, r0, #31
    e9f4:	2900      	cmp	r1, #0
    e9f6:	d1ce      	bne.n	e996 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e62>
    e9f8:	e7d1      	b.n	e99e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1e6a>
                trace!("[{:04x}] LD I, nnn", self.pc);
    e9fa:	f24d 1020 	movw	r0, #53536	; 0xd120
    e9fe:	f2c0 0001 	movt	r0, #1
    ea02:	6801      	ldr	r1, [r0, #0]
    ea04:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ea08:	f100 0212 	add.w	r2, r0, #18
    ea0c:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    ea10:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    ea14:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    ea18:	f646 1377 	movw	r3, #26999	; 0x6977
    ea1c:	f2c0 0301 	movt	r3, #1
    ea20:	4610      	mov	r0, r2
    ea22:	9184      	str	r1, [sp, #528]	; 0x210
    ea24:	4619      	mov	r1, r3
    ea26:	f7fb fc6e 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ea2a:	9083      	str	r0, [sp, #524]	; 0x20c
    ea2c:	9182      	str	r1, [sp, #520]	; 0x208
    ea2e:	e7ff      	b.n	ea30 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1efc>
    ea30:	9883      	ldr	r0, [sp, #524]	; 0x20c
    ea32:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    ea36:	9982      	ldr	r1, [sp, #520]	; 0x208
    ea38:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    ea3c:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    ea40:	f2c0 0201 	movt	r2, #1
    ea44:	6812      	ldr	r2, [r2, #0]
    ea46:	466b      	mov	r3, sp
    ea48:	f04f 0c01 	mov.w	ip, #1
    ea4c:	f8c3 c008 	str.w	ip, [r3, #8]
    ea50:	605a      	str	r2, [r3, #4]
    ea52:	f8c3 c000 	str.w	ip, [r3]
    ea56:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ea5a:	2202      	movs	r2, #2
    ea5c:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    ea60:	9984      	ldr	r1, [sp, #528]	; 0x210
    ea62:	f005 fcaf 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ea66:	e7ff      	b.n	ea68 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f34>
    ea68:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    ea6c:	f24d 1040 	movw	r0, #53568	; 0xd140
    ea70:	f2c0 0001 	movt	r0, #1
    ea74:	6802      	ldr	r2, [r0, #0]
    ea76:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    ea7a:	f003 f955 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ea7e:	e7ff      	b.n	ea80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4c>
    ea80:	e7ff      	b.n	ea82 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f4e>
                self.i = nnn;
    ea82:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ea86:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ea8a:	8208      	strh	r0, [r1, #16]
        match (
    ea8c:	f001 bb1f 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    ea90:	2005      	movs	r0, #5
    ea92:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    ea96:	f64c 2080 	movw	r0, #51840	; 0xca80
    ea9a:	f2c0 0001 	movt	r0, #1
    ea9e:	6801      	ldr	r1, [r0, #0]
    eaa0:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    eaa4:	f005 fdc9 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eaa8:	9081      	str	r0, [sp, #516]	; 0x204
    eaaa:	e01f      	b.n	eaec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fb8>
    eaac:	2001      	movs	r0, #1
    eaae:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    eab2:	e015      	b.n	eae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fac>
    eab4:	2000      	movs	r0, #0
    eab6:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    eaba:	e011      	b.n	eae0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fac>
    eabc:	2000      	movs	r0, #0
    eabe:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    eac2:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    eac6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    eaca:	f2c2 0000 	movt	r0, #8192	; 0x2000
    eace:	f002 f8d6 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ead2:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    ead6:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    eada:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    eade:	e00a      	b.n	eaf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fc2>
    eae0:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    eae4:	07c0      	lsls	r0, r0, #31
    eae6:	2800      	cmp	r0, #0
    eae8:	d112      	bne.n	eb10 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fdc>
    eaea:	e055      	b.n	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2064>
    eaec:	9881      	ldr	r0, [sp, #516]	; 0x204
    eaee:	07c1      	lsls	r1, r0, #31
    eaf0:	2900      	cmp	r1, #0
    eaf2:	d1e3      	bne.n	eabc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f88>
    eaf4:	e7de      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f80>
    eaf6:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    eafa:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    eafe:	f005 fd9c 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    eb02:	9080      	str	r0, [sp, #512]	; 0x200
    eb04:	e7ff      	b.n	eb06 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1fd2>
    eb06:	9880      	ldr	r0, [sp, #512]	; 0x200
    eb08:	07c1      	lsls	r1, r0, #31
    eb0a:	2900      	cmp	r1, #0
    eb0c:	d1ce      	bne.n	eaac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f78>
    eb0e:	e7d1      	b.n	eab4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x1f80>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    eb10:	f24d 00e0 	movw	r0, #53472	; 0xd0e0
    eb14:	f2c0 0001 	movt	r0, #1
    eb18:	6801      	ldr	r1, [r0, #0]
    eb1a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb1e:	f100 0212 	add.w	r2, r0, #18
    eb22:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    eb26:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    eb2a:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    eb2e:	f646 1377 	movw	r3, #26999	; 0x6977
    eb32:	f2c0 0301 	movt	r3, #1
    eb36:	4610      	mov	r0, r2
    eb38:	917f      	str	r1, [sp, #508]	; 0x1fc
    eb3a:	4619      	mov	r1, r3
    eb3c:	f7fb fbe3 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    eb40:	907e      	str	r0, [sp, #504]	; 0x1f8
    eb42:	917d      	str	r1, [sp, #500]	; 0x1f4
    eb44:	e7ff      	b.n	eb46 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2012>
    eb46:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    eb48:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    eb4c:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    eb4e:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    eb52:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    eb56:	f2c0 0201 	movt	r2, #1
    eb5a:	6812      	ldr	r2, [r2, #0]
    eb5c:	466b      	mov	r3, sp
    eb5e:	f04f 0c01 	mov.w	ip, #1
    eb62:	f8c3 c008 	str.w	ip, [r3, #8]
    eb66:	605a      	str	r2, [r3, #4]
    eb68:	f8c3 c000 	str.w	ip, [r3]
    eb6c:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    eb70:	2202      	movs	r2, #2
    eb72:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    eb76:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    eb78:	f005 fc24 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    eb7c:	e7ff      	b.n	eb7e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x204a>
    eb7e:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    eb82:	f24d 1000 	movw	r0, #53504	; 0xd100
    eb86:	f2c0 0001 	movt	r0, #1
    eb8a:	6802      	ldr	r2, [r0, #0]
    eb8c:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    eb90:	f003 f8ca 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    eb94:	e7ff      	b.n	eb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2062>
    eb96:	e7ff      	b.n	eb98 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2064>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    eb98:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eb9c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    eba0:	f002 f860 	bl	10c64 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    eba4:	907c      	str	r0, [sp, #496]	; 0x1f0
    eba6:	e7ff      	b.n	eba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2074>
    eba8:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    ebac:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    ebae:	f005 fd0a 	bl	145c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    ebb2:	907b      	str	r0, [sp, #492]	; 0x1ec
    ebb4:	e7ff      	b.n	ebb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2082>
    ebb6:	2102      	movs	r1, #2
    ebb8:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    ebba:	f005 fd15 	bl	145e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>
    ebbe:	907a      	str	r0, [sp, #488]	; 0x1e8
    ebc0:	e7ff      	b.n	ebc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x208e>
    ebc2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ebc6:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    ebc8:	f001 fd70 	bl	106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
    ebcc:	e7ff      	b.n	ebce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x209a>
        match (
    ebce:	f001 ba7e 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    ebd2:	2005      	movs	r0, #5
    ebd4:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    ebd8:	f64c 2080 	movw	r0, #51840	; 0xca80
    ebdc:	f2c0 0001 	movt	r0, #1
    ebe0:	6801      	ldr	r1, [r0, #0]
    ebe2:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ebe6:	f005 fd28 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ebea:	9079      	str	r0, [sp, #484]	; 0x1e4
    ebec:	e01f      	b.n	ec2e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20fa>
    ebee:	2001      	movs	r0, #1
    ebf0:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ebf4:	e015      	b.n	ec22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ee>
    ebf6:	2000      	movs	r0, #0
    ebf8:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    ebfc:	e011      	b.n	ec22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ee>
    ebfe:	2000      	movs	r0, #0
    ec00:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    ec04:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    ec08:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ec0c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ec10:	f002 f835 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ec14:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    ec18:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    ec1c:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    ec20:	e00a      	b.n	ec38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2104>
    ec22:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    ec26:	07c0      	lsls	r0, r0, #31
    ec28:	2800      	cmp	r0, #0
    ec2a:	d112      	bne.n	ec52 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x211e>
    ec2c:	e055      	b.n	ecda <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a6>
    ec2e:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    ec30:	07c1      	lsls	r1, r0, #31
    ec32:	2900      	cmp	r1, #0
    ec34:	d1e3      	bne.n	ebfe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ca>
    ec36:	e7de      	b.n	ebf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20c2>
    ec38:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    ec3c:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    ec40:	f005 fcfb 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ec44:	9078      	str	r0, [sp, #480]	; 0x1e0
    ec46:	e7ff      	b.n	ec48 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2114>
    ec48:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    ec4a:	07c1      	lsls	r1, r0, #31
    ec4c:	2900      	cmp	r1, #0
    ec4e:	d1ce      	bne.n	ebee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20ba>
    ec50:	e7d1      	b.n	ebf6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x20c2>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    ec52:	f24d 0090 	movw	r0, #53392	; 0xd090
    ec56:	f2c0 0001 	movt	r0, #1
    ec5a:	6801      	ldr	r1, [r0, #0]
    ec5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ec60:	f100 0212 	add.w	r2, r0, #18
    ec64:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    ec68:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    ec6c:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    ec70:	f646 1377 	movw	r3, #26999	; 0x6977
    ec74:	f2c0 0301 	movt	r3, #1
    ec78:	4610      	mov	r0, r2
    ec7a:	9177      	str	r1, [sp, #476]	; 0x1dc
    ec7c:	4619      	mov	r1, r3
    ec7e:	f7fb fb42 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ec82:	9076      	str	r0, [sp, #472]	; 0x1d8
    ec84:	9175      	str	r1, [sp, #468]	; 0x1d4
    ec86:	e7ff      	b.n	ec88 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2154>
    ec88:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    ec8a:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    ec8e:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    ec90:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    ec94:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    ec98:	f2c0 0201 	movt	r2, #1
    ec9c:	6812      	ldr	r2, [r2, #0]
    ec9e:	466b      	mov	r3, sp
    eca0:	f04f 0c01 	mov.w	ip, #1
    eca4:	f8c3 c008 	str.w	ip, [r3, #8]
    eca8:	605a      	str	r2, [r3, #4]
    ecaa:	f8c3 c000 	str.w	ip, [r3]
    ecae:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ecb2:	2202      	movs	r2, #2
    ecb4:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    ecb8:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    ecba:	f005 fb83 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ecbe:	e7ff      	b.n	ecc0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x218c>
    ecc0:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    ecc4:	f24d 00b0 	movw	r0, #53424	; 0xd0b0
    ecc8:	f2c0 0001 	movt	r0, #1
    eccc:	6802      	ldr	r2, [r0, #0]
    ecce:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    ecd2:	f003 f829 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ecd6:	e7ff      	b.n	ecd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a4>
    ecd8:	e7ff      	b.n	ecda <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21a6>
    ecda:	f241 0048 	movw	r0, #4168	; 0x1048
                self.v[x] = self.hw.rand() & kk;
    ecde:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ece2:	4408      	add	r0, r1
    ece4:	f7fd f920 	bl	bf28 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h884056a56ab77b84E>
    ece8:	9074      	str	r0, [sp, #464]	; 0x1d0
    ecea:	e7ff      	b.n	ecec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21b8>
    ecec:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ecf0:	280f      	cmp	r0, #15
    ecf2:	f201 8375 	bhi.w	103e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x38ac>
    ecf6:	e7ff      	b.n	ecf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21c4>
    ecf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ecfc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ed00:	1842      	adds	r2, r0, r1
    ed02:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    ed04:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    ed08:	ea03 0e0c 	and.w	lr, r3, ip
    ed0c:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    ed10:	f001 b9dd 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    ed14:	2005      	movs	r0, #5
    ed16:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    ed1a:	f64c 2080 	movw	r0, #51840	; 0xca80
    ed1e:	f2c0 0001 	movt	r0, #1
    ed22:	6801      	ldr	r1, [r0, #0]
    ed24:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    ed28:	f005 fc87 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed2c:	9073      	str	r0, [sp, #460]	; 0x1cc
    ed2e:	e01f      	b.n	ed70 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x223c>
    ed30:	2001      	movs	r0, #1
    ed32:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    ed36:	e015      	b.n	ed64 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2230>
    ed38:	2000      	movs	r0, #0
    ed3a:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    ed3e:	e011      	b.n	ed64 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2230>
    ed40:	2000      	movs	r0, #0
    ed42:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    ed46:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    ed4a:	f644 206c 	movw	r0, #19052	; 0x4a6c
    ed4e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ed52:	f001 ff94 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    ed56:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    ed5a:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    ed5e:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    ed62:	e00a      	b.n	ed7a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2246>
    ed64:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    ed68:	07c0      	lsls	r0, r0, #31
    ed6a:	2800      	cmp	r0, #0
    ed6c:	d112      	bne.n	ed94 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2260>
    ed6e:	e055      	b.n	ee1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e8>
    ed70:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    ed72:	07c1      	lsls	r1, r0, #31
    ed74:	2900      	cmp	r1, #0
    ed76:	d1e3      	bne.n	ed40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x220c>
    ed78:	e7de      	b.n	ed38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2204>
    ed7a:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    ed7e:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    ed82:	f005 fc5a 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    ed86:	9072      	str	r0, [sp, #456]	; 0x1c8
    ed88:	e7ff      	b.n	ed8a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2256>
    ed8a:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    ed8c:	07c1      	lsls	r1, r0, #31
    ed8e:	2900      	cmp	r1, #0
    ed90:	d1ce      	bne.n	ed30 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x21fc>
    ed92:	e7d1      	b.n	ed38 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2204>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    ed94:	f64c 7034 	movw	r0, #53044	; 0xcf34
    ed98:	f2c0 0001 	movt	r0, #1
    ed9c:	6801      	ldr	r1, [r0, #0]
    ed9e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    eda2:	f100 0212 	add.w	r2, r0, #18
    eda6:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    edaa:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    edae:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    edb2:	f646 1377 	movw	r3, #26999	; 0x6977
    edb6:	f2c0 0301 	movt	r3, #1
    edba:	4610      	mov	r0, r2
    edbc:	9171      	str	r1, [sp, #452]	; 0x1c4
    edbe:	4619      	mov	r1, r3
    edc0:	f7fb faa1 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    edc4:	9070      	str	r0, [sp, #448]	; 0x1c0
    edc6:	916f      	str	r1, [sp, #444]	; 0x1bc
    edc8:	e7ff      	b.n	edca <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2296>
    edca:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    edcc:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    edd0:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    edd2:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    edd6:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    edda:	f2c0 0201 	movt	r2, #1
    edde:	6812      	ldr	r2, [r2, #0]
    ede0:	466b      	mov	r3, sp
    ede2:	f04f 0c01 	mov.w	ip, #1
    ede6:	f8c3 c008 	str.w	ip, [r3, #8]
    edea:	605a      	str	r2, [r3, #4]
    edec:	f8c3 c000 	str.w	ip, [r3]
    edf0:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    edf4:	2202      	movs	r2, #2
    edf6:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    edfa:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    edfc:	f005 fae2 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ee00:	e7ff      	b.n	ee02 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22ce>
    ee02:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    ee06:	f64c 7054 	movw	r0, #53076	; 0xcf54
    ee0a:	f2c0 0001 	movt	r0, #1
    ee0e:	6802      	ldr	r2, [r0, #0]
    ee10:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    ee14:	f002 ff88 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ee18:	e7ff      	b.n	ee1a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e6>
    ee1a:	e7ff      	b.n	ee1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22e8>
                let basex = self.v[x] as usize;
    ee1c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ee20:	280f      	cmp	r0, #15
    ee22:	f201 826b 	bhi.w	102fc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37c8>
    ee26:	e7ff      	b.n	ee28 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x22f4>
    ee28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee2c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ee30:	1842      	adds	r2, r0, r1
    ee32:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ee36:	4613      	mov	r3, r2
    ee38:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    ee3c:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    ee40:	2a0f      	cmp	r2, #15
    ee42:	936e      	str	r3, [sp, #440]	; 0x1b8
    ee44:	f201 8264 	bhi.w	10310 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37dc>
    ee48:	e7ff      	b.n	ee4a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2316>
    ee4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ee4e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ee52:	1842      	adds	r2, r0, r1
    ee54:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ee58:	4613      	mov	r3, r2
    ee5a:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
    ee5e:	f241 0248 	movw	r2, #4168	; 0x1048
                let (w, h) = self.hw.vram_size();
    ee62:	4410      	add	r0, r2
    ee64:	936d      	str	r3, [sp, #436]	; 0x1b4
    ee66:	f7fd fa66 	bl	c336 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17h053e341fed74a29fE>
    ee6a:	906c      	str	r0, [sp, #432]	; 0x1b0
    ee6c:	916b      	str	r1, [sp, #428]	; 0x1ac
    ee6e:	e7ff      	b.n	ee70 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x233c>
    ee70:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    ee72:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    ee76:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    ee78:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    ee7c:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    ee7e:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    ee82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    ee86:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    ee8a:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    ee8e:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    ee92:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    ee96:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    ee9a:	f002 fcd1 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ee9e:	906a      	str	r0, [sp, #424]	; 0x1a8
    eea0:	9169      	str	r1, [sp, #420]	; 0x1a4
    eea2:	e7ff      	b.n	eea4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2370>
    eea4:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    eea6:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    eeaa:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    eeac:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    eeb0:	e7ff      	b.n	eeb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x237e>
    eeb2:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    eeb6:	f002 fc38 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    eeba:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    eebe:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    eec2:	e7ff      	b.n	eec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2390>
    eec4:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    eec8:	2800      	cmp	r0, #0
    eeca:	d001      	beq.n	eed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x239c>
    eecc:	e7ff      	b.n	eece <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x239a>
    eece:	e002      	b.n	eed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23a2>
        match (
    eed0:	f001 b8fd 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for y in 0..n {
    eed4:	defe      	udf	#254	; 0xfe
    eed6:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    eeda:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    eede:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    eee2:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    eee6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    eeea:	8a0a      	ldrh	r2, [r1, #16]
    eeec:	1813      	adds	r3, r2, r0
    eeee:	469c      	mov	ip, r3
    eef0:	4293      	cmp	r3, r2
    eef2:	9068      	str	r0, [sp, #416]	; 0x1a0
    eef4:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    eef8:	f0c1 8214 	bcc.w	10324 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37f0>
    eefc:	e7ff      	b.n	eefe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23ca>
    eefe:	2000      	movs	r0, #0
    ef00:	9967      	ldr	r1, [sp, #412]	; 0x19c
    ef02:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    ef06:	f041 8219 	bne.w	1033c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3808>
    ef0a:	e7ff      	b.n	ef0c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x23d8>
    ef0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ef10:	9967      	ldr	r1, [sp, #412]	; 0x19c
    ef12:	1842      	adds	r2, r0, r1
    ef14:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    ef18:	4613      	mov	r3, r2
    ef1a:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    ef1e:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    ef20:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    ef24:	eb02 0e0c 	add.w	lr, r2, ip
    ef28:	4674      	mov	r4, lr
    ef2a:	4596      	cmp	lr, r2
    ef2c:	9366      	str	r3, [sp, #408]	; 0x198
    ef2e:	9465      	str	r4, [sp, #404]	; 0x194
    ef30:	f0c1 820e 	bcc.w	10350 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x381c>
    ef34:	e7ff      	b.n	ef36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2402>
    ef36:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    ef38:	2800      	cmp	r0, #0
    ef3a:	f001 8215 	beq.w	10368 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3834>
    ef3e:	e7ff      	b.n	ef40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x240c>
    ef40:	9865      	ldr	r0, [sp, #404]	; 0x194
    ef42:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    ef44:	fbb0 f2f1 	udiv	r2, r0, r1
    ef48:	fb02 0211 	mls	r2, r2, r1, r0
    ef4c:	4613      	mov	r3, r2
    ef4e:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    ef52:	2200      	movs	r2, #0
                    for x in 0..8 {
    ef54:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    ef58:	2208      	movs	r2, #8
    ef5a:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    ef5e:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    ef62:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    ef66:	9364      	str	r3, [sp, #400]	; 0x190
    ef68:	f002 fc6a 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ef6c:	9063      	str	r0, [sp, #396]	; 0x18c
    ef6e:	9162      	str	r1, [sp, #392]	; 0x188
    ef70:	e7ff      	b.n	ef72 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x243e>
    ef72:	9863      	ldr	r0, [sp, #396]	; 0x18c
    ef74:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    ef78:	9962      	ldr	r1, [sp, #392]	; 0x188
    ef7a:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    ef7e:	e7ff      	b.n	ef80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x244c>
    ef80:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    ef84:	f002 fbd1 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ef88:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    ef8c:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    ef90:	e7ff      	b.n	ef92 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x245e>
    ef92:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    ef96:	2800      	cmp	r0, #0
    ef98:	d001      	beq.n	ef9e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x246a>
    ef9a:	e7ff      	b.n	ef9c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2468>
    ef9c:	e001      	b.n	efa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x246e>
                for y in 0..n {
    ef9e:	e788      	b.n	eeb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x237e>
                    for x in 0..8 {
    efa0:	defe      	udf	#254	; 0xfe
    efa2:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    efa6:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    efaa:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    efae:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    efb2:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    efb4:	1842      	adds	r2, r0, r1
    efb6:	4613      	mov	r3, r2
    efb8:	4282      	cmp	r2, r0
    efba:	9061      	str	r0, [sp, #388]	; 0x184
    efbc:	9360      	str	r3, [sp, #384]	; 0x180
    efbe:	f0c1 81df 	bcc.w	10380 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x384c>
    efc2:	e7ff      	b.n	efc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2490>
    efc4:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    efc6:	2800      	cmp	r0, #0
    efc8:	f001 81e6 	beq.w	10398 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3864>
    efcc:	e7ff      	b.n	efce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x249a>
    efce:	9860      	ldr	r0, [sp, #384]	; 0x180
    efd0:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    efd2:	fbb0 f2f1 	udiv	r2, r0, r1
    efd6:	fb02 0211 	mls	r2, r2, r1, r0
    efda:	4613      	mov	r3, r2
    efdc:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    efe0:	9a61      	ldr	r2, [sp, #388]	; 0x184
    efe2:	f1c2 0c07 	rsb	ip, r2, #7
    efe6:	f04f 0e07 	mov.w	lr, #7
    efea:	4596      	cmp	lr, r2
    efec:	935f      	str	r3, [sp, #380]	; 0x17c
    efee:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    eff2:	f0c1 81dd 	bcc.w	103b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x387c>
    eff6:	e7ff      	b.n	eff8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x24c4>
    eff8:	985e      	ldr	r0, [sp, #376]	; 0x178
    effa:	f000 0107 	and.w	r1, r0, #7
    effe:	2201      	movs	r2, #1
    f000:	fa02 f101 	lsl.w	r1, r2, r1
    f004:	08c2      	lsrs	r2, r0, #3
    f006:	2a00      	cmp	r2, #0
    f008:	915d      	str	r1, [sp, #372]	; 0x174
    f00a:	f041 81dd 	bne.w	103c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3894>
    f00e:	e7ff      	b.n	f010 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x24dc>
    f010:	9866      	ldr	r0, [sp, #408]	; 0x198
    f012:	995d      	ldr	r1, [sp, #372]	; 0x174
    f014:	ea00 0201 	and.w	r2, r0, r1
    f018:	b2d2      	uxtb	r2, r2
    f01a:	2a00      	cmp	r2, #0
    f01c:	bf18      	it	ne
    f01e:	2201      	movne	r2, #1
    f020:	4613      	mov	r3, r2
    f022:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
    f026:	f241 0248 	movw	r2, #4168	; 0x1048
                        let dst = self.hw.vram_get(vramx, vramy);
    f02a:	f8dd c490 	ldr.w	ip, [sp, #1168]	; 0x490
    f02e:	eb0c 0002 	add.w	r0, ip, r2
    f032:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f034:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f036:	935c      	str	r3, [sp, #368]	; 0x170
    f038:	f7fd f8e8 	bl	c20c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h1601acf13a15824cE>
    f03c:	4601      	mov	r1, r0
    f03e:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    f042:	915b      	str	r1, [sp, #364]	; 0x16c
    f044:	e7ff      	b.n	f046 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2512>
                        self.v[0xf] |= (src && dst) as u8;
    f046:	985c      	ldr	r0, [sp, #368]	; 0x170
    f048:	07c1      	lsls	r1, r0, #31
    f04a:	2900      	cmp	r1, #0
    f04c:	d108      	bne.n	f060 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x252c>
    f04e:	e003      	b.n	f058 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2524>
    f050:	2001      	movs	r0, #1
    f052:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f056:	e008      	b.n	f06a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2536>
    f058:	2000      	movs	r0, #0
    f05a:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    f05e:	e004      	b.n	f06a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2536>
    f060:	985b      	ldr	r0, [sp, #364]	; 0x16c
    f062:	07c1      	lsls	r1, r0, #31
    f064:	2900      	cmp	r1, #0
    f066:	d1f3      	bne.n	f050 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x251c>
    f068:	e7f6      	b.n	f058 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2524>
    f06a:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    f06e:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f072:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    f076:	4310      	orrs	r0, r2
    f078:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
    f07c:	f241 0048 	movw	r0, #4168	; 0x1048
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    f080:	4408      	add	r0, r1
    f082:	9a5c      	ldr	r2, [sp, #368]	; 0x170
    f084:	9b5b      	ldr	r3, [sp, #364]	; 0x16c
    f086:	ea82 0c03 	eor.w	ip, r2, r3
    f08a:	f00c 0301 	and.w	r3, ip, #1
    f08e:	995f      	ldr	r1, [sp, #380]	; 0x17c
    f090:	9a64      	ldr	r2, [sp, #400]	; 0x190
    f092:	f7fc ff56 	bl	bf42 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb676d565c6339c9dE>
    f096:	e7ff      	b.n	f098 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2564>
                    for x in 0..8 {
    f098:	e772      	b.n	ef80 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x244c>
    f09a:	2005      	movs	r0, #5
    f09c:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    f0a0:	f64c 2080 	movw	r0, #51840	; 0xca80
    f0a4:	f2c0 0001 	movt	r0, #1
    f0a8:	6801      	ldr	r1, [r0, #0]
    f0aa:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f0ae:	f005 fac4 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f0b2:	905a      	str	r0, [sp, #360]	; 0x168
    f0b4:	e01f      	b.n	f0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25c2>
    f0b6:	2001      	movs	r0, #1
    f0b8:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f0bc:	e015      	b.n	f0ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25b6>
    f0be:	2000      	movs	r0, #0
    f0c0:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    f0c4:	e011      	b.n	f0ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25b6>
    f0c6:	2000      	movs	r0, #0
    f0c8:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    f0cc:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    f0d0:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f0d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f0d8:	f001 fdd1 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f0dc:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    f0e0:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    f0e4:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    f0e8:	e00a      	b.n	f100 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25cc>
    f0ea:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    f0ee:	07c0      	lsls	r0, r0, #31
    f0f0:	2800      	cmp	r0, #0
    f0f2:	d112      	bne.n	f11a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25e6>
    f0f4:	e055      	b.n	f1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266e>
    f0f6:	985a      	ldr	r0, [sp, #360]	; 0x168
    f0f8:	07c1      	lsls	r1, r0, #31
    f0fa:	2900      	cmp	r1, #0
    f0fc:	d1e3      	bne.n	f0c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2592>
    f0fe:	e7de      	b.n	f0be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x258a>
    f100:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    f104:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    f108:	f005 fa97 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f10c:	9059      	str	r0, [sp, #356]	; 0x164
    f10e:	e7ff      	b.n	f110 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x25dc>
    f110:	9859      	ldr	r0, [sp, #356]	; 0x164
    f112:	07c1      	lsls	r1, r0, #31
    f114:	2900      	cmp	r1, #0
    f116:	d1ce      	bne.n	f0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2582>
    f118:	e7d1      	b.n	f0be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x258a>
                trace!("[{:04x}] SKP Vx", self.pc);
    f11a:	f64c 60e0 	movw	r0, #52960	; 0xcee0
    f11e:	f2c0 0001 	movt	r0, #1
    f122:	6801      	ldr	r1, [r0, #0]
    f124:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f128:	f100 0212 	add.w	r2, r0, #18
    f12c:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    f130:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    f134:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    f138:	f646 1377 	movw	r3, #26999	; 0x6977
    f13c:	f2c0 0301 	movt	r3, #1
    f140:	4610      	mov	r0, r2
    f142:	9158      	str	r1, [sp, #352]	; 0x160
    f144:	4619      	mov	r1, r3
    f146:	f7fb f8de 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f14a:	9057      	str	r0, [sp, #348]	; 0x15c
    f14c:	9156      	str	r1, [sp, #344]	; 0x158
    f14e:	e7ff      	b.n	f150 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x261c>
    f150:	9857      	ldr	r0, [sp, #348]	; 0x15c
    f152:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    f156:	9956      	ldr	r1, [sp, #344]	; 0x158
    f158:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    f15c:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f160:	f2c0 0201 	movt	r2, #1
    f164:	6812      	ldr	r2, [r2, #0]
    f166:	466b      	mov	r3, sp
    f168:	f04f 0c01 	mov.w	ip, #1
    f16c:	f8c3 c008 	str.w	ip, [r3, #8]
    f170:	605a      	str	r2, [r3, #4]
    f172:	f8c3 c000 	str.w	ip, [r3]
    f176:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f17a:	2202      	movs	r2, #2
    f17c:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    f180:	9958      	ldr	r1, [sp, #352]	; 0x160
    f182:	f005 f91f 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f186:	e7ff      	b.n	f188 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2654>
    f188:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    f18c:	f64c 7000 	movw	r0, #52992	; 0xcf00
    f190:	f2c0 0001 	movt	r0, #1
    f194:	6802      	ldr	r2, [r0, #0]
    f196:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    f19a:	f002 fdc5 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f19e:	e7ff      	b.n	f1a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266c>
    f1a0:	e7ff      	b.n	f1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x266e>
    f1a2:	f241 0048 	movw	r0, #4168	; 0x1048
                if self.hw.key(self.v[x]) {
    f1a6:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f1aa:	4408      	add	r0, r1
    f1ac:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f1b0:	2a0f      	cmp	r2, #15
    f1b2:	9055      	str	r0, [sp, #340]	; 0x154
    f1b4:	f201 8098 	bhi.w	102e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37b4>
    f1b8:	e7ff      	b.n	f1ba <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2686>
    f1ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f1be:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f1c2:	1842      	adds	r2, r0, r1
    f1c4:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f1c8:	9855      	ldr	r0, [sp, #340]	; 0x154
    f1ca:	f7fc feb2 	bl	bf32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
    f1ce:	9054      	str	r0, [sp, #336]	; 0x150
    f1d0:	e7ff      	b.n	f1d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x269e>
    f1d2:	9854      	ldr	r0, [sp, #336]	; 0x150
    f1d4:	07c1      	lsls	r1, r0, #31
    f1d6:	2900      	cmp	r1, #0
    f1d8:	d006      	beq.n	f1e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b4>
    f1da:	e7ff      	b.n	f1dc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26a8>
                    self.next();
    f1dc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f1e0:	f001 faa7 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    f1e4:	e7ff      	b.n	f1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b2>
                if self.hw.key(self.v[x]) {
    f1e6:	e7ff      	b.n	f1e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26b4>
        match (
    f1e8:	f000 bf71 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f1ec:	2005      	movs	r0, #5
    f1ee:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    f1f2:	f64c 2080 	movw	r0, #51840	; 0xca80
    f1f6:	f2c0 0001 	movt	r0, #1
    f1fa:	6801      	ldr	r1, [r0, #0]
    f1fc:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f200:	f005 fa1b 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f204:	9053      	str	r0, [sp, #332]	; 0x14c
    f206:	e01f      	b.n	f248 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2714>
    f208:	2001      	movs	r0, #1
    f20a:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f20e:	e015      	b.n	f23c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2708>
    f210:	2000      	movs	r0, #0
    f212:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    f216:	e011      	b.n	f23c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2708>
    f218:	2000      	movs	r0, #0
    f21a:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    f21e:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    f222:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f226:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f22a:	f001 fd28 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f22e:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    f232:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    f236:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    f23a:	e00a      	b.n	f252 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x271e>
    f23c:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    f240:	07c0      	lsls	r0, r0, #31
    f242:	2800      	cmp	r0, #0
    f244:	d112      	bne.n	f26c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2738>
    f246:	e055      	b.n	f2f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27c0>
    f248:	9853      	ldr	r0, [sp, #332]	; 0x14c
    f24a:	07c1      	lsls	r1, r0, #31
    f24c:	2900      	cmp	r1, #0
    f24e:	d1e3      	bne.n	f218 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26e4>
    f250:	e7de      	b.n	f210 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26dc>
    f252:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    f256:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    f25a:	f005 f9ee 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f25e:	9052      	str	r0, [sp, #328]	; 0x148
    f260:	e7ff      	b.n	f262 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x272e>
    f262:	9852      	ldr	r0, [sp, #328]	; 0x148
    f264:	07c1      	lsls	r1, r0, #31
    f266:	2900      	cmp	r1, #0
    f268:	d1ce      	bne.n	f208 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26d4>
    f26a:	e7d1      	b.n	f210 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x26dc>
                trace!("[{:04x}] SKNP Vx", self.pc);
    f26c:	f64c 609c 	movw	r0, #52892	; 0xce9c
    f270:	f2c0 0001 	movt	r0, #1
    f274:	6801      	ldr	r1, [r0, #0]
    f276:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f27a:	f100 0212 	add.w	r2, r0, #18
    f27e:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    f282:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    f286:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    f28a:	f646 1377 	movw	r3, #26999	; 0x6977
    f28e:	f2c0 0301 	movt	r3, #1
    f292:	4610      	mov	r0, r2
    f294:	9151      	str	r1, [sp, #324]	; 0x144
    f296:	4619      	mov	r1, r3
    f298:	f7fb f835 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f29c:	9050      	str	r0, [sp, #320]	; 0x140
    f29e:	914f      	str	r1, [sp, #316]	; 0x13c
    f2a0:	e7ff      	b.n	f2a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x276e>
    f2a2:	9850      	ldr	r0, [sp, #320]	; 0x140
    f2a4:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    f2a8:	994f      	ldr	r1, [sp, #316]	; 0x13c
    f2aa:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    f2ae:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f2b2:	f2c0 0201 	movt	r2, #1
    f2b6:	6812      	ldr	r2, [r2, #0]
    f2b8:	466b      	mov	r3, sp
    f2ba:	f04f 0c01 	mov.w	ip, #1
    f2be:	f8c3 c008 	str.w	ip, [r3, #8]
    f2c2:	605a      	str	r2, [r3, #4]
    f2c4:	f8c3 c000 	str.w	ip, [r3]
    f2c8:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f2cc:	2202      	movs	r2, #2
    f2ce:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    f2d2:	9951      	ldr	r1, [sp, #324]	; 0x144
    f2d4:	f005 f876 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f2d8:	e7ff      	b.n	f2da <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27a6>
    f2da:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    f2de:	f64c 60bc 	movw	r0, #52924	; 0xcebc
    f2e2:	f2c0 0001 	movt	r0, #1
    f2e6:	6802      	ldr	r2, [r0, #0]
    f2e8:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    f2ec:	f002 fd1c 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f2f0:	e7ff      	b.n	f2f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27be>
    f2f2:	e7ff      	b.n	f2f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27c0>
    f2f4:	f241 0048 	movw	r0, #4168	; 0x1048
                if !self.hw.key(self.v[x]) {
    f2f8:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f2fc:	4408      	add	r0, r1
    f2fe:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f302:	2a0f      	cmp	r2, #15
    f304:	904e      	str	r0, [sp, #312]	; 0x138
    f306:	f200 87e5 	bhi.w	102d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x37a0>
    f30a:	e7ff      	b.n	f30c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27d8>
    f30c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f310:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f314:	1842      	adds	r2, r0, r1
    f316:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    f31a:	984e      	ldr	r0, [sp, #312]	; 0x138
    f31c:	f7fc fe09 	bl	bf32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
    f320:	904d      	str	r0, [sp, #308]	; 0x134
    f322:	e7ff      	b.n	f324 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27f0>
    f324:	984d      	ldr	r0, [sp, #308]	; 0x134
    f326:	07c1      	lsls	r1, r0, #31
    f328:	2900      	cmp	r1, #0
    f32a:	d106      	bne.n	f33a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2806>
    f32c:	e7ff      	b.n	f32e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x27fa>
                    self.next();
    f32e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f332:	f001 f9fe 	bl	10732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>
    f336:	e7ff      	b.n	f338 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2804>
                if !self.hw.key(self.v[x]) {
    f338:	e7ff      	b.n	f33a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2806>
        match (
    f33a:	f000 bec8 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f33e:	2005      	movs	r0, #5
    f340:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    f344:	f64c 2080 	movw	r0, #51840	; 0xca80
    f348:	f2c0 0001 	movt	r0, #1
    f34c:	6801      	ldr	r1, [r0, #0]
    f34e:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f352:	f005 f972 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f356:	904c      	str	r0, [sp, #304]	; 0x130
    f358:	e01f      	b.n	f39a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2866>
    f35a:	2001      	movs	r0, #1
    f35c:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f360:	e015      	b.n	f38e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x285a>
    f362:	2000      	movs	r0, #0
    f364:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    f368:	e011      	b.n	f38e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x285a>
    f36a:	2000      	movs	r0, #0
    f36c:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    f370:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    f374:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f378:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f37c:	f001 fc7f 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f380:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    f384:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    f388:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    f38c:	e00a      	b.n	f3a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2870>
    f38e:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    f392:	07c0      	lsls	r0, r0, #31
    f394:	2800      	cmp	r0, #0
    f396:	d112      	bne.n	f3be <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x288a>
    f398:	e055      	b.n	f446 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2912>
    f39a:	984c      	ldr	r0, [sp, #304]	; 0x130
    f39c:	07c1      	lsls	r1, r0, #31
    f39e:	2900      	cmp	r1, #0
    f3a0:	d1e3      	bne.n	f36a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2836>
    f3a2:	e7de      	b.n	f362 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x282e>
    f3a4:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    f3a8:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    f3ac:	f005 f945 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f3b0:	904b      	str	r0, [sp, #300]	; 0x12c
    f3b2:	e7ff      	b.n	f3b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2880>
    f3b4:	984b      	ldr	r0, [sp, #300]	; 0x12c
    f3b6:	07c1      	lsls	r1, r0, #31
    f3b8:	2900      	cmp	r1, #0
    f3ba:	d1ce      	bne.n	f35a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2826>
    f3bc:	e7d1      	b.n	f362 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x282e>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    f3be:	f64c 604c 	movw	r0, #52812	; 0xce4c
    f3c2:	f2c0 0001 	movt	r0, #1
    f3c6:	6801      	ldr	r1, [r0, #0]
    f3c8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f3cc:	f100 0212 	add.w	r2, r0, #18
    f3d0:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    f3d4:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    f3d8:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    f3dc:	f646 1377 	movw	r3, #26999	; 0x6977
    f3e0:	f2c0 0301 	movt	r3, #1
    f3e4:	4610      	mov	r0, r2
    f3e6:	914a      	str	r1, [sp, #296]	; 0x128
    f3e8:	4619      	mov	r1, r3
    f3ea:	f7fa ff8c 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f3ee:	9049      	str	r0, [sp, #292]	; 0x124
    f3f0:	9148      	str	r1, [sp, #288]	; 0x120
    f3f2:	e7ff      	b.n	f3f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x28c0>
    f3f4:	9849      	ldr	r0, [sp, #292]	; 0x124
    f3f6:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    f3fa:	9948      	ldr	r1, [sp, #288]	; 0x120
    f3fc:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    f400:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f404:	f2c0 0201 	movt	r2, #1
    f408:	6812      	ldr	r2, [r2, #0]
    f40a:	466b      	mov	r3, sp
    f40c:	f04f 0c01 	mov.w	ip, #1
    f410:	f8c3 c008 	str.w	ip, [r3, #8]
    f414:	605a      	str	r2, [r3, #4]
    f416:	f8c3 c000 	str.w	ip, [r3]
    f41a:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f41e:	2202      	movs	r2, #2
    f420:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    f424:	994a      	ldr	r1, [sp, #296]	; 0x128
    f426:	f004 ffcd 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f42a:	e7ff      	b.n	f42c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x28f8>
    f42c:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    f430:	f64c 606c 	movw	r0, #52844	; 0xce6c
    f434:	f2c0 0001 	movt	r0, #1
    f438:	6802      	ldr	r2, [r0, #0]
    f43a:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    f43e:	f002 fc73 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f442:	e7ff      	b.n	f444 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2910>
    f444:	e7ff      	b.n	f446 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2912>
                self.v[x] = self.dt;
    f446:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f44a:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    f44e:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f452:	2a0f      	cmp	r2, #15
    f454:	9147      	str	r1, [sp, #284]	; 0x11c
    f456:	f200 8733 	bhi.w	102c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x378c>
    f45a:	e7ff      	b.n	f45c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2928>
    f45c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f460:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f464:	1842      	adds	r2, r0, r1
    f466:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    f468:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f46c:	f000 be2f 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f470:	2005      	movs	r0, #5
    f472:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    f476:	f64c 2080 	movw	r0, #51840	; 0xca80
    f47a:	f2c0 0001 	movt	r0, #1
    f47e:	6801      	ldr	r1, [r0, #0]
    f480:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f484:	f005 f8d9 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f488:	9046      	str	r0, [sp, #280]	; 0x118
    f48a:	e01f      	b.n	f4cc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2998>
    f48c:	2001      	movs	r0, #1
    f48e:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f492:	e015      	b.n	f4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x298c>
    f494:	2000      	movs	r0, #0
    f496:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    f49a:	e011      	b.n	f4c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x298c>
    f49c:	2000      	movs	r0, #0
    f49e:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    f4a2:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    f4a6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f4aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f4ae:	f001 fbe6 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f4b2:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    f4b6:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    f4ba:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    f4be:	e00a      	b.n	f4d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29a2>
    f4c0:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    f4c4:	07c0      	lsls	r0, r0, #31
    f4c6:	2800      	cmp	r0, #0
    f4c8:	d112      	bne.n	f4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29bc>
    f4ca:	e055      	b.n	f578 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a44>
    f4cc:	9846      	ldr	r0, [sp, #280]	; 0x118
    f4ce:	07c1      	lsls	r1, r0, #31
    f4d0:	2900      	cmp	r1, #0
    f4d2:	d1e3      	bne.n	f49c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2968>
    f4d4:	e7de      	b.n	f494 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2960>
    f4d6:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    f4da:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    f4de:	f005 f8ac 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f4e2:	9045      	str	r0, [sp, #276]	; 0x114
    f4e4:	e7ff      	b.n	f4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29b2>
    f4e6:	9845      	ldr	r0, [sp, #276]	; 0x114
    f4e8:	07c1      	lsls	r1, r0, #31
    f4ea:	2900      	cmp	r1, #0
    f4ec:	d1ce      	bne.n	f48c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2958>
    f4ee:	e7d1      	b.n	f494 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2960>
                trace!("[{:04x}] LD Vx, K", self.pc);
    f4f0:	f64c 50fc 	movw	r0, #52732	; 0xcdfc
    f4f4:	f2c0 0001 	movt	r0, #1
    f4f8:	6801      	ldr	r1, [r0, #0]
    f4fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f4fe:	f100 0212 	add.w	r2, r0, #18
    f502:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    f506:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    f50a:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    f50e:	f646 1377 	movw	r3, #26999	; 0x6977
    f512:	f2c0 0301 	movt	r3, #1
    f516:	4610      	mov	r0, r2
    f518:	9144      	str	r1, [sp, #272]	; 0x110
    f51a:	4619      	mov	r1, r3
    f51c:	f7fa fef3 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f520:	9043      	str	r0, [sp, #268]	; 0x10c
    f522:	9142      	str	r1, [sp, #264]	; 0x108
    f524:	e7ff      	b.n	f526 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x29f2>
    f526:	9843      	ldr	r0, [sp, #268]	; 0x10c
    f528:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    f52c:	9942      	ldr	r1, [sp, #264]	; 0x108
    f52e:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    f532:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f536:	f2c0 0201 	movt	r2, #1
    f53a:	6812      	ldr	r2, [r2, #0]
    f53c:	466b      	mov	r3, sp
    f53e:	f04f 0c01 	mov.w	ip, #1
    f542:	f8c3 c008 	str.w	ip, [r3, #8]
    f546:	605a      	str	r2, [r3, #4]
    f548:	f8c3 c000 	str.w	ip, [r3]
    f54c:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f550:	2202      	movs	r2, #2
    f552:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    f556:	9944      	ldr	r1, [sp, #272]	; 0x110
    f558:	f004 ff34 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f55c:	e7ff      	b.n	f55e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a2a>
    f55e:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    f562:	f64c 601c 	movw	r0, #52764	; 0xce1c
    f566:	f2c0 0001 	movt	r0, #1
    f56a:	6802      	ldr	r2, [r0, #0]
    f56c:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    f570:	f002 fbda 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f574:	e7ff      	b.n	f576 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a42>
    f576:	e7ff      	b.n	f578 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a44>
                self.v[x] = self.waitkey();
    f578:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f57c:	f001 fa2d 	bl	109da <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E>
    f580:	9041      	str	r0, [sp, #260]	; 0x104
    f582:	e7ff      	b.n	f584 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a50>
    f584:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f588:	280f      	cmp	r0, #15
    f58a:	f200 868f 	bhi.w	102ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3778>
    f58e:	e7ff      	b.n	f590 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a5c>
    f590:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f594:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f598:	1842      	adds	r2, r0, r1
    f59a:	9b41      	ldr	r3, [sp, #260]	; 0x104
    f59c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    f5a0:	f000 bd95 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f5a4:	2005      	movs	r0, #5
    f5a6:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    f5aa:	f64c 2080 	movw	r0, #51840	; 0xca80
    f5ae:	f2c0 0001 	movt	r0, #1
    f5b2:	6801      	ldr	r1, [r0, #0]
    f5b4:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f5b8:	f005 f83f 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f5bc:	9040      	str	r0, [sp, #256]	; 0x100
    f5be:	e01f      	b.n	f600 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2acc>
    f5c0:	2001      	movs	r0, #1
    f5c2:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f5c6:	e015      	b.n	f5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ac0>
    f5c8:	2000      	movs	r0, #0
    f5ca:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    f5ce:	e011      	b.n	f5f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ac0>
    f5d0:	2000      	movs	r0, #0
    f5d2:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    f5d6:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    f5da:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f5de:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f5e2:	f001 fb4c 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f5e6:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    f5ea:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    f5ee:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    f5f2:	e00a      	b.n	f60a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ad6>
    f5f4:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    f5f8:	07c0      	lsls	r0, r0, #31
    f5fa:	2800      	cmp	r0, #0
    f5fc:	d112      	bne.n	f624 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2af0>
    f5fe:	e055      	b.n	f6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b78>
    f600:	9840      	ldr	r0, [sp, #256]	; 0x100
    f602:	07c1      	lsls	r1, r0, #31
    f604:	2900      	cmp	r1, #0
    f606:	d1e3      	bne.n	f5d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a9c>
    f608:	e7de      	b.n	f5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a94>
    f60a:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    f60e:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    f612:	f005 f812 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f616:	903f      	str	r0, [sp, #252]	; 0xfc
    f618:	e7ff      	b.n	f61a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ae6>
    f61a:	983f      	ldr	r0, [sp, #252]	; 0xfc
    f61c:	07c1      	lsls	r1, r0, #31
    f61e:	2900      	cmp	r1, #0
    f620:	d1ce      	bne.n	f5c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a8c>
    f622:	e7d1      	b.n	f5c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2a94>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    f624:	f64c 50ac 	movw	r0, #52652	; 0xcdac
    f628:	f2c0 0001 	movt	r0, #1
    f62c:	6801      	ldr	r1, [r0, #0]
    f62e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f632:	f100 0212 	add.w	r2, r0, #18
    f636:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    f63a:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    f63e:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    f642:	f646 1377 	movw	r3, #26999	; 0x6977
    f646:	f2c0 0301 	movt	r3, #1
    f64a:	4610      	mov	r0, r2
    f64c:	913e      	str	r1, [sp, #248]	; 0xf8
    f64e:	4619      	mov	r1, r3
    f650:	f7fa fe59 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f654:	903d      	str	r0, [sp, #244]	; 0xf4
    f656:	913c      	str	r1, [sp, #240]	; 0xf0
    f658:	e7ff      	b.n	f65a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b26>
    f65a:	983d      	ldr	r0, [sp, #244]	; 0xf4
    f65c:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    f660:	993c      	ldr	r1, [sp, #240]	; 0xf0
    f662:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    f666:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f66a:	f2c0 0201 	movt	r2, #1
    f66e:	6812      	ldr	r2, [r2, #0]
    f670:	466b      	mov	r3, sp
    f672:	f04f 0c01 	mov.w	ip, #1
    f676:	f8c3 c008 	str.w	ip, [r3, #8]
    f67a:	605a      	str	r2, [r3, #4]
    f67c:	f8c3 c000 	str.w	ip, [r3]
    f680:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f684:	2202      	movs	r2, #2
    f686:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    f68a:	993e      	ldr	r1, [sp, #248]	; 0xf8
    f68c:	f004 fe9a 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f690:	e7ff      	b.n	f692 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b5e>
    f692:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    f696:	f64c 50cc 	movw	r0, #52684	; 0xcdcc
    f69a:	f2c0 0001 	movt	r0, #1
    f69e:	6802      	ldr	r2, [r0, #0]
    f6a0:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    f6a4:	f002 fb40 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f6a8:	e7ff      	b.n	f6aa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b76>
    f6aa:	e7ff      	b.n	f6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b78>
                self.dt = self.v[x];
    f6ac:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f6b0:	280f      	cmp	r0, #15
    f6b2:	f200 85f1 	bhi.w	10298 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3764>
    f6b6:	e7ff      	b.n	f6b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2b84>
    f6b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f6bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f6c0:	1842      	adds	r2, r0, r1
    f6c2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f6c6:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    f6ca:	f000 bd00 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f6ce:	2005      	movs	r0, #5
    f6d0:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    f6d4:	f64c 2080 	movw	r0, #51840	; 0xca80
    f6d8:	f2c0 0001 	movt	r0, #1
    f6dc:	6801      	ldr	r1, [r0, #0]
    f6de:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f6e2:	f004 ffaa 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f6e6:	903b      	str	r0, [sp, #236]	; 0xec
    f6e8:	e01f      	b.n	f72a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bf6>
    f6ea:	2001      	movs	r0, #1
    f6ec:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f6f0:	e015      	b.n	f71e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bea>
    f6f2:	2000      	movs	r0, #0
    f6f4:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    f6f8:	e011      	b.n	f71e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bea>
    f6fa:	2000      	movs	r0, #0
    f6fc:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    f700:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    f704:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f708:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f70c:	f001 fab7 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f710:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    f714:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    f718:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    f71c:	e00a      	b.n	f734 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c00>
    f71e:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    f722:	07c0      	lsls	r0, r0, #31
    f724:	2800      	cmp	r0, #0
    f726:	d112      	bne.n	f74e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c1a>
    f728:	e055      	b.n	f7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca2>
    f72a:	983b      	ldr	r0, [sp, #236]	; 0xec
    f72c:	07c1      	lsls	r1, r0, #31
    f72e:	2900      	cmp	r1, #0
    f730:	d1e3      	bne.n	f6fa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bc6>
    f732:	e7de      	b.n	f6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bbe>
    f734:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    f738:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    f73c:	f004 ff7d 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f740:	903a      	str	r0, [sp, #232]	; 0xe8
    f742:	e7ff      	b.n	f744 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c10>
    f744:	983a      	ldr	r0, [sp, #232]	; 0xe8
    f746:	07c1      	lsls	r1, r0, #31
    f748:	2900      	cmp	r1, #0
    f74a:	d1ce      	bne.n	f6ea <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bb6>
    f74c:	e7d1      	b.n	f6f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2bbe>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    f74e:	f64c 505c 	movw	r0, #52572	; 0xcd5c
    f752:	f2c0 0001 	movt	r0, #1
    f756:	6801      	ldr	r1, [r0, #0]
    f758:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f75c:	f100 0212 	add.w	r2, r0, #18
    f760:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    f764:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    f768:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    f76c:	f646 1377 	movw	r3, #26999	; 0x6977
    f770:	f2c0 0301 	movt	r3, #1
    f774:	4610      	mov	r0, r2
    f776:	9139      	str	r1, [sp, #228]	; 0xe4
    f778:	4619      	mov	r1, r3
    f77a:	f7fa fdc4 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f77e:	9038      	str	r0, [sp, #224]	; 0xe0
    f780:	9137      	str	r1, [sp, #220]	; 0xdc
    f782:	e7ff      	b.n	f784 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c50>
    f784:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f786:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    f78a:	9937      	ldr	r1, [sp, #220]	; 0xdc
    f78c:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    f790:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f794:	f2c0 0201 	movt	r2, #1
    f798:	6812      	ldr	r2, [r2, #0]
    f79a:	466b      	mov	r3, sp
    f79c:	f04f 0c01 	mov.w	ip, #1
    f7a0:	f8c3 c008 	str.w	ip, [r3, #8]
    f7a4:	605a      	str	r2, [r3, #4]
    f7a6:	f8c3 c000 	str.w	ip, [r3]
    f7aa:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f7ae:	2202      	movs	r2, #2
    f7b0:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    f7b4:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f7b6:	f004 fe05 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f7ba:	e7ff      	b.n	f7bc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2c88>
    f7bc:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    f7c0:	f64c 507c 	movw	r0, #52604	; 0xcd7c
    f7c4:	f2c0 0001 	movt	r0, #1
    f7c8:	6802      	ldr	r2, [r0, #0]
    f7ca:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    f7ce:	f002 faab 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f7d2:	e7ff      	b.n	f7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca0>
    f7d4:	e7ff      	b.n	f7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ca2>
                self.st = self.v[x];
    f7d6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    f7da:	280f      	cmp	r0, #15
    f7dc:	f200 8552 	bhi.w	10284 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3750>
    f7e0:	e7ff      	b.n	f7e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cae>
    f7e2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f7e6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f7ea:	1842      	adds	r2, r0, r1
    f7ec:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    f7f0:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    f7f4:	f000 bc6b 	b.w	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f7f8:	2005      	movs	r0, #5
    f7fa:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    f7fe:	f64c 2080 	movw	r0, #51840	; 0xca80
    f802:	f2c0 0001 	movt	r0, #1
    f806:	6801      	ldr	r1, [r0, #0]
    f808:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f80c:	f004 ff15 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f810:	9036      	str	r0, [sp, #216]	; 0xd8
    f812:	e01f      	b.n	f854 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d20>
    f814:	2001      	movs	r0, #1
    f816:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f81a:	e015      	b.n	f848 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d14>
    f81c:	2000      	movs	r0, #0
    f81e:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    f822:	e011      	b.n	f848 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d14>
    f824:	2000      	movs	r0, #0
    f826:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    f82a:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    f82e:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f832:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f836:	f001 fa22 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f83a:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    f83e:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    f842:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    f846:	e00a      	b.n	f85e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d2a>
    f848:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    f84c:	07c0      	lsls	r0, r0, #31
    f84e:	2800      	cmp	r0, #0
    f850:	d112      	bne.n	f878 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d44>
    f852:	e055      	b.n	f900 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dcc>
    f854:	9836      	ldr	r0, [sp, #216]	; 0xd8
    f856:	07c1      	lsls	r1, r0, #31
    f858:	2900      	cmp	r1, #0
    f85a:	d1e3      	bne.n	f824 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2cf0>
    f85c:	e7de      	b.n	f81c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce8>
    f85e:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    f862:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    f866:	f004 fee8 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f86a:	9035      	str	r0, [sp, #212]	; 0xd4
    f86c:	e7ff      	b.n	f86e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d3a>
    f86e:	9835      	ldr	r0, [sp, #212]	; 0xd4
    f870:	07c1      	lsls	r1, r0, #31
    f872:	2900      	cmp	r1, #0
    f874:	d1ce      	bne.n	f814 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce0>
    f876:	e7d1      	b.n	f81c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ce8>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    f878:	f64c 500c 	movw	r0, #52492	; 0xcd0c
    f87c:	f2c0 0001 	movt	r0, #1
    f880:	6801      	ldr	r1, [r0, #0]
    f882:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f886:	f100 0212 	add.w	r2, r0, #18
    f88a:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    f88e:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    f892:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    f896:	f646 1377 	movw	r3, #26999	; 0x6977
    f89a:	f2c0 0301 	movt	r3, #1
    f89e:	4610      	mov	r0, r2
    f8a0:	9134      	str	r1, [sp, #208]	; 0xd0
    f8a2:	4619      	mov	r1, r3
    f8a4:	f7fa fd2f 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f8a8:	9033      	str	r0, [sp, #204]	; 0xcc
    f8aa:	9132      	str	r1, [sp, #200]	; 0xc8
    f8ac:	e7ff      	b.n	f8ae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2d7a>
    f8ae:	9833      	ldr	r0, [sp, #204]	; 0xcc
    f8b0:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    f8b4:	9932      	ldr	r1, [sp, #200]	; 0xc8
    f8b6:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    f8ba:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    f8be:	f2c0 0201 	movt	r2, #1
    f8c2:	6812      	ldr	r2, [r2, #0]
    f8c4:	466b      	mov	r3, sp
    f8c6:	f04f 0c01 	mov.w	ip, #1
    f8ca:	f8c3 c008 	str.w	ip, [r3, #8]
    f8ce:	605a      	str	r2, [r3, #4]
    f8d0:	f8c3 c000 	str.w	ip, [r3]
    f8d4:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    f8d8:	2202      	movs	r2, #2
    f8da:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    f8de:	9934      	ldr	r1, [sp, #208]	; 0xd0
    f8e0:	f004 fd70 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    f8e4:	e7ff      	b.n	f8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2db2>
    f8e6:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    f8ea:	f64c 502c 	movw	r0, #52524	; 0xcd2c
    f8ee:	f2c0 0001 	movt	r0, #1
    f8f2:	6802      	ldr	r2, [r0, #0]
    f8f4:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    f8f8:	f002 fa16 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    f8fc:	e7ff      	b.n	f8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dca>
    f8fe:	e7ff      	b.n	f900 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2dcc>
                self.i = self.i.wrapping_add(self.v[x].into());
    f900:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f904:	8a01      	ldrh	r1, [r0, #16]
    f906:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    f90a:	2a0f      	cmp	r2, #15
    f90c:	9131      	str	r1, [sp, #196]	; 0xc4
    f90e:	f200 84af 	bhi.w	10270 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x373c>
    f912:	e7ff      	b.n	f914 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2de0>
    f914:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f918:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    f91c:	1842      	adds	r2, r0, r1
    f91e:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    f922:	f001 f99f 	bl	10c64 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    f926:	9030      	str	r0, [sp, #192]	; 0xc0
    f928:	e7ff      	b.n	f92a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2df6>
    f92a:	9831      	ldr	r0, [sp, #196]	; 0xc4
    f92c:	9930      	ldr	r1, [sp, #192]	; 0xc0
    f92e:	f004 fe4a 	bl	145c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
    f932:	902f      	str	r0, [sp, #188]	; 0xbc
    f934:	e7ff      	b.n	f936 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e02>
    f936:	982f      	ldr	r0, [sp, #188]	; 0xbc
    f938:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    f93c:	8208      	strh	r0, [r1, #16]
        match (
    f93e:	e3c6      	b.n	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    f940:	2005      	movs	r0, #5
    f942:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    f946:	f64c 2080 	movw	r0, #51840	; 0xca80
    f94a:	f2c0 0001 	movt	r0, #1
    f94e:	6801      	ldr	r1, [r0, #0]
    f950:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    f954:	f004 fe71 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f958:	902e      	str	r0, [sp, #184]	; 0xb8
    f95a:	e01f      	b.n	f99c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e68>
    f95c:	2001      	movs	r0, #1
    f95e:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    f962:	e015      	b.n	f990 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e5c>
    f964:	2000      	movs	r0, #0
    f966:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    f96a:	e011      	b.n	f990 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e5c>
    f96c:	2000      	movs	r0, #0
    f96e:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    f972:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    f976:	f644 206c 	movw	r0, #19052	; 0x4a6c
    f97a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    f97e:	f001 f97e 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    f982:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    f986:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    f98a:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    f98e:	e00a      	b.n	f9a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e72>
    f990:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    f994:	07c0      	lsls	r0, r0, #31
    f996:	2800      	cmp	r0, #0
    f998:	d112      	bne.n	f9c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e8c>
    f99a:	e055      	b.n	fa48 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f14>
    f99c:	982e      	ldr	r0, [sp, #184]	; 0xb8
    f99e:	07c1      	lsls	r1, r0, #31
    f9a0:	2900      	cmp	r1, #0
    f9a2:	d1e3      	bne.n	f96c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e38>
    f9a4:	e7de      	b.n	f964 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e30>
    f9a6:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    f9aa:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    f9ae:	f004 fe44 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    f9b2:	902d      	str	r0, [sp, #180]	; 0xb4
    f9b4:	e7ff      	b.n	f9b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e82>
    f9b6:	982d      	ldr	r0, [sp, #180]	; 0xb4
    f9b8:	07c1      	lsls	r1, r0, #31
    f9ba:	2900      	cmp	r1, #0
    f9bc:	d1ce      	bne.n	f95c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e28>
    f9be:	e7d1      	b.n	f964 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2e30>
                trace!("[{:04x}] LD F, Vx", self.pc);
    f9c0:	f64c 4088 	movw	r0, #52360	; 0xcc88
    f9c4:	f2c0 0001 	movt	r0, #1
    f9c8:	6801      	ldr	r1, [r0, #0]
    f9ca:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    f9ce:	f100 0212 	add.w	r2, r0, #18
    f9d2:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    f9d6:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    f9da:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    f9de:	f646 1377 	movw	r3, #26999	; 0x6977
    f9e2:	f2c0 0301 	movt	r3, #1
    f9e6:	4610      	mov	r0, r2
    f9e8:	912c      	str	r1, [sp, #176]	; 0xb0
    f9ea:	4619      	mov	r1, r3
    f9ec:	f7fa fc8b 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    f9f0:	902b      	str	r0, [sp, #172]	; 0xac
    f9f2:	912a      	str	r1, [sp, #168]	; 0xa8
    f9f4:	e7ff      	b.n	f9f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2ec2>
    f9f6:	982b      	ldr	r0, [sp, #172]	; 0xac
    f9f8:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    f9fc:	992a      	ldr	r1, [sp, #168]	; 0xa8
    f9fe:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    fa02:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    fa06:	f2c0 0201 	movt	r2, #1
    fa0a:	6812      	ldr	r2, [r2, #0]
    fa0c:	466b      	mov	r3, sp
    fa0e:	f04f 0c01 	mov.w	ip, #1
    fa12:	f8c3 c008 	str.w	ip, [r3, #8]
    fa16:	605a      	str	r2, [r3, #4]
    fa18:	f8c3 c000 	str.w	ip, [r3]
    fa1c:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fa20:	2202      	movs	r2, #2
    fa22:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    fa26:	992c      	ldr	r1, [sp, #176]	; 0xb0
    fa28:	f004 fccc 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fa2c:	e7ff      	b.n	fa2e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2efa>
    fa2e:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    fa32:	f64c 40a8 	movw	r0, #52392	; 0xcca8
    fa36:	f2c0 0001 	movt	r0, #1
    fa3a:	6802      	ldr	r2, [r0, #0]
    fa3c:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    fa40:	f002 f972 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fa44:	e7ff      	b.n	fa46 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f12>
    fa46:	e7ff      	b.n	fa48 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f14>
                self.i = (self.v[x] * 5).into();
    fa48:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fa4c:	280f      	cmp	r0, #15
    fa4e:	f200 83f9 	bhi.w	10244 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3710>
    fa52:	e7ff      	b.n	fa54 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f20>
    fa54:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fa58:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fa5c:	1842      	adds	r2, r0, r1
    fa5e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fa62:	2305      	movs	r3, #5
    fa64:	fba2 2303 	umull	r2, r3, r2, r3
    fa68:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    fa6c:	f04f 0e00 	mov.w	lr, #0
    fa70:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    fa74:	bf18      	it	ne
    fa76:	f04f 0c01 	movne.w	ip, #1
    fa7a:	2b00      	cmp	r3, #0
    fa7c:	bf18      	it	ne
    fa7e:	2301      	movne	r3, #1
    fa80:	ea43 030c 	orr.w	r3, r3, ip
    fa84:	2b00      	cmp	r3, #0
    fa86:	9229      	str	r2, [sp, #164]	; 0xa4
    fa88:	f040 83e6 	bne.w	10258 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3724>
    fa8c:	e7ff      	b.n	fa8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f5a>
    fa8e:	9829      	ldr	r0, [sp, #164]	; 0xa4
    fa90:	f001 f8e8 	bl	10c64 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>
    fa94:	9028      	str	r0, [sp, #160]	; 0xa0
    fa96:	e7ff      	b.n	fa98 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f64>
    fa98:	9828      	ldr	r0, [sp, #160]	; 0xa0
    fa9a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    fa9e:	8208      	strh	r0, [r1, #16]
        match (
    faa0:	e315      	b.n	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    faa2:	2005      	movs	r0, #5
    faa4:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    faa8:	f64c 2080 	movw	r0, #51840	; 0xca80
    faac:	f2c0 0001 	movt	r0, #1
    fab0:	6801      	ldr	r1, [r0, #0]
    fab2:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fab6:	f004 fdc0 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    faba:	9027      	str	r0, [sp, #156]	; 0x9c
    fabc:	e01f      	b.n	fafe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fca>
    fabe:	2001      	movs	r0, #1
    fac0:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    fac4:	e015      	b.n	faf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fbe>
    fac6:	2000      	movs	r0, #0
    fac8:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    facc:	e011      	b.n	faf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fbe>
    face:	2000      	movs	r0, #0
    fad0:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    fad4:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    fad8:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fadc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fae0:	f001 f8cd 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fae4:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    fae8:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    faec:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    faf0:	e00a      	b.n	fb08 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fd4>
    faf2:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    faf6:	07c0      	lsls	r0, r0, #31
    faf8:	2800      	cmp	r0, #0
    fafa:	d112      	bne.n	fb22 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fee>
    fafc:	e055      	b.n	fbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3076>
    fafe:	9827      	ldr	r0, [sp, #156]	; 0x9c
    fb00:	07c1      	lsls	r1, r0, #31
    fb02:	2900      	cmp	r1, #0
    fb04:	d1e3      	bne.n	face <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f9a>
    fb06:	e7de      	b.n	fac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f92>
    fb08:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    fb0c:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    fb10:	f004 fd93 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fb14:	9026      	str	r0, [sp, #152]	; 0x98
    fb16:	e7ff      	b.n	fb18 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2fe4>
    fb18:	9826      	ldr	r0, [sp, #152]	; 0x98
    fb1a:	07c1      	lsls	r1, r0, #31
    fb1c:	2900      	cmp	r1, #0
    fb1e:	d1ce      	bne.n	fabe <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f8a>
    fb20:	e7d1      	b.n	fac6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x2f92>
                trace!("[{:04x}] LD B, Vx", self.pc);
    fb22:	f64c 30e8 	movw	r0, #52200	; 0xcbe8
    fb26:	f2c0 0001 	movt	r0, #1
    fb2a:	6801      	ldr	r1, [r0, #0]
    fb2c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fb30:	f100 0212 	add.w	r2, r0, #18
    fb34:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    fb38:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    fb3c:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    fb40:	f646 1377 	movw	r3, #26999	; 0x6977
    fb44:	f2c0 0301 	movt	r3, #1
    fb48:	4610      	mov	r0, r2
    fb4a:	9125      	str	r1, [sp, #148]	; 0x94
    fb4c:	4619      	mov	r1, r3
    fb4e:	f7fa fbda 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fb52:	9024      	str	r0, [sp, #144]	; 0x90
    fb54:	9123      	str	r1, [sp, #140]	; 0x8c
    fb56:	e7ff      	b.n	fb58 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3024>
    fb58:	9824      	ldr	r0, [sp, #144]	; 0x90
    fb5a:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    fb5e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    fb60:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    fb64:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    fb68:	f2c0 0201 	movt	r2, #1
    fb6c:	6812      	ldr	r2, [r2, #0]
    fb6e:	466b      	mov	r3, sp
    fb70:	f04f 0c01 	mov.w	ip, #1
    fb74:	f8c3 c008 	str.w	ip, [r3, #8]
    fb78:	605a      	str	r2, [r3, #4]
    fb7a:	f8c3 c000 	str.w	ip, [r3]
    fb7e:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fb82:	2202      	movs	r2, #2
    fb84:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    fb88:	9925      	ldr	r1, [sp, #148]	; 0x94
    fb8a:	f004 fc1b 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fb8e:	e7ff      	b.n	fb90 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x305c>
    fb90:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    fb94:	f64c 4008 	movw	r0, #52232	; 0xcc08
    fb98:	f2c0 0001 	movt	r0, #1
    fb9c:	6802      	ldr	r2, [r0, #0]
    fb9e:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    fba2:	f002 f8c1 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fba6:	e7ff      	b.n	fba8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3074>
    fba8:	e7ff      	b.n	fbaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3076>
                let bcd = self.v[x];
    fbaa:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fbae:	280f      	cmp	r0, #15
    fbb0:	f200 8308 	bhi.w	101c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3690>
    fbb4:	e7ff      	b.n	fbb6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3082>
    fbb6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbba:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    fbbe:	1842      	adds	r2, r0, r1
    fbc0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fbc4:	4613      	mov	r3, r2
    fbc6:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    fbca:	f248 5c1f 	movw	ip, #34079	; 0x851f
    fbce:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    fbd2:	fba2 2c0c 	umull	r2, ip, r2, ip
    fbd6:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    fbda:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    fbde:	4674      	mov	r4, lr
    fbe0:	2500      	movs	r5, #0
    fbe2:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    fbe6:	9322      	str	r3, [sp, #136]	; 0x88
    fbe8:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    fbec:	9420      	str	r4, [sp, #128]	; 0x80
    fbee:	f040 82f3 	bne.w	101d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36a4>
    fbf2:	e7ff      	b.n	fbf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x30c0>
    fbf4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fbf8:	9920      	ldr	r1, [sp, #128]	; 0x80
    fbfa:	1842      	adds	r2, r0, r1
    fbfc:	9b21      	ldr	r3, [sp, #132]	; 0x84
    fbfe:	fa5f fc83 	uxtb.w	ip, r3
    fc02:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fc06:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fc0a:	fbac 450e 	umull	r4, r5, ip, lr
    fc0e:	08ed      	lsrs	r5, r5, #3
    fc10:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    fc14:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    fc18:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    fc1c:	9a22      	ldr	r2, [sp, #136]	; 0x88
    fc1e:	fa5f fc82 	uxtb.w	ip, r2
    fc22:	fbac ce0e 	umull	ip, lr, ip, lr
    fc26:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    fc2a:	8a05      	ldrh	r5, [r0, #16]
    fc2c:	3501      	adds	r5, #1
    fc2e:	2600      	movs	r6, #0
    fc30:	2e00      	cmp	r6, #0
    fc32:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    fc36:	951e      	str	r5, [sp, #120]	; 0x78
    fc38:	f040 82d8 	bne.w	101ec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36b8>
    fc3c:	e7ff      	b.n	fc3e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x310a>
    fc3e:	2000      	movs	r0, #0
    fc40:	991e      	ldr	r1, [sp, #120]	; 0x78
    fc42:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fc46:	f040 82dd 	bne.w	10204 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36d0>
    fc4a:	e7ff      	b.n	fc4c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3118>
    fc4c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc50:	991e      	ldr	r1, [sp, #120]	; 0x78
    fc52:	1842      	adds	r2, r0, r1
    fc54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    fc56:	fa5f fc83 	uxtb.w	ip, r3
    fc5a:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fc5e:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fc62:	fbac e40e 	umull	lr, r4, ip, lr
    fc66:	08e4      	lsrs	r4, r4, #3
    fc68:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fc6c:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fc70:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    fc74:	8a02      	ldrh	r2, [r0, #16]
    fc76:	3202      	adds	r2, #2
    fc78:	f04f 0c00 	mov.w	ip, #0
    fc7c:	f1bc 0f00 	cmp.w	ip, #0
    fc80:	921d      	str	r2, [sp, #116]	; 0x74
    fc82:	f040 82c9 	bne.w	10218 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36e4>
    fc86:	e7ff      	b.n	fc88 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3154>
    fc88:	2000      	movs	r0, #0
    fc8a:	991d      	ldr	r1, [sp, #116]	; 0x74
    fc8c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fc90:	f040 82ce 	bne.w	10230 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x36fc>
    fc94:	e7ff      	b.n	fc96 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3162>
    fc96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fc9a:	991d      	ldr	r1, [sp, #116]	; 0x74
    fc9c:	1842      	adds	r2, r0, r1
    fc9e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    fca0:	fa5f fc83 	uxtb.w	ip, r3
    fca4:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    fca8:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    fcac:	fbac e40e 	umull	lr, r4, ip, lr
    fcb0:	08e4      	lsrs	r4, r4, #3
    fcb2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    fcb6:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    fcba:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    fcbe:	e206      	b.n	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
    fcc0:	2005      	movs	r0, #5
    fcc2:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    fcc6:	f64c 2080 	movw	r0, #51840	; 0xca80
    fcca:	f2c0 0001 	movt	r0, #1
    fcce:	6801      	ldr	r1, [r0, #0]
    fcd0:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    fcd4:	f004 fcb1 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fcd8:	901c      	str	r0, [sp, #112]	; 0x70
    fcda:	e01f      	b.n	fd1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31e8>
    fcdc:	2001      	movs	r0, #1
    fcde:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fce2:	e015      	b.n	fd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31dc>
    fce4:	2000      	movs	r0, #0
    fce6:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    fcea:	e011      	b.n	fd10 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31dc>
    fcec:	2000      	movs	r0, #0
    fcee:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    fcf2:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    fcf6:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fcfa:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fcfe:	f000 ffbe 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fd02:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    fd06:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    fd0a:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    fd0e:	e00a      	b.n	fd26 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31f2>
    fd10:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    fd14:	07c0      	lsls	r0, r0, #31
    fd16:	2800      	cmp	r0, #0
    fd18:	d112      	bne.n	fd40 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x320c>
    fd1a:	e055      	b.n	fdc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3294>
    fd1c:	981c      	ldr	r0, [sp, #112]	; 0x70
    fd1e:	07c1      	lsls	r1, r0, #31
    fd20:	2900      	cmp	r1, #0
    fd22:	d1e3      	bne.n	fcec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b8>
    fd24:	e7de      	b.n	fce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b0>
    fd26:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    fd2a:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    fd2e:	f004 fc84 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fd32:	901b      	str	r0, [sp, #108]	; 0x6c
    fd34:	e7ff      	b.n	fd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3202>
    fd36:	981b      	ldr	r0, [sp, #108]	; 0x6c
    fd38:	07c1      	lsls	r1, r0, #31
    fd3a:	2900      	cmp	r1, #0
    fd3c:	d1ce      	bne.n	fcdc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31a8>
    fd3e:	e7d1      	b.n	fce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x31b0>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    fd40:	f64c 3068 	movw	r0, #52072	; 0xcb68
    fd44:	f2c0 0001 	movt	r0, #1
    fd48:	6801      	ldr	r1, [r0, #0]
    fd4a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fd4e:	f100 0212 	add.w	r2, r0, #18
    fd52:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    fd56:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    fd5a:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    fd5e:	f646 1377 	movw	r3, #26999	; 0x6977
    fd62:	f2c0 0301 	movt	r3, #1
    fd66:	4610      	mov	r0, r2
    fd68:	911a      	str	r1, [sp, #104]	; 0x68
    fd6a:	4619      	mov	r1, r3
    fd6c:	f7fa facb 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    fd70:	9019      	str	r0, [sp, #100]	; 0x64
    fd72:	9118      	str	r1, [sp, #96]	; 0x60
    fd74:	e7ff      	b.n	fd76 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3242>
    fd76:	9819      	ldr	r0, [sp, #100]	; 0x64
    fd78:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    fd7c:	9918      	ldr	r1, [sp, #96]	; 0x60
    fd7e:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    fd82:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    fd86:	f2c0 0201 	movt	r2, #1
    fd8a:	6812      	ldr	r2, [r2, #0]
    fd8c:	466b      	mov	r3, sp
    fd8e:	f04f 0c01 	mov.w	ip, #1
    fd92:	f8c3 c008 	str.w	ip, [r3, #8]
    fd96:	605a      	str	r2, [r3, #4]
    fd98:	f8c3 c000 	str.w	ip, [r3]
    fd9c:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    fda0:	2202      	movs	r2, #2
    fda2:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    fda6:	991a      	ldr	r1, [sp, #104]	; 0x68
    fda8:	f004 fb0c 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    fdac:	e7ff      	b.n	fdae <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x327a>
    fdae:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    fdb2:	f64c 3088 	movw	r0, #52104	; 0xcb88
    fdb6:	f2c0 0001 	movt	r0, #1
    fdba:	6802      	ldr	r2, [r0, #0]
    fdbc:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    fdc0:	f001 ffb2 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    fdc4:	e7ff      	b.n	fdc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3292>
    fdc6:	e7ff      	b.n	fdc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3294>
                let x = x as usize;
    fdc8:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    fdcc:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    fdd0:	1c41      	adds	r1, r0, #1
    fdd2:	460a      	mov	r2, r1
    fdd4:	4281      	cmp	r1, r0
    fdd6:	9217      	str	r2, [sp, #92]	; 0x5c
    fdd8:	f0c0 81c9 	bcc.w	1016e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x363a>
    fddc:	e7ff      	b.n	fdde <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32aa>
    fdde:	2000      	movs	r0, #0
    fde0:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    fde4:	9817      	ldr	r0, [sp, #92]	; 0x5c
    fde6:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    fdea:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    fdee:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    fdf2:	f001 fd25 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    fdf6:	9016      	str	r0, [sp, #88]	; 0x58
    fdf8:	9115      	str	r1, [sp, #84]	; 0x54
    fdfa:	e7ff      	b.n	fdfc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32c8>
    fdfc:	9816      	ldr	r0, [sp, #88]	; 0x58
    fdfe:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    fe02:	9915      	ldr	r1, [sp, #84]	; 0x54
    fe04:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    fe08:	e7ff      	b.n	fe0a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32d6>
    fe0a:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    fe0e:	f001 fc8c 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    fe12:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    fe16:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    fe1a:	e7ff      	b.n	fe1c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32e8>
    fe1c:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    fe20:	2800      	cmp	r0, #0
    fe22:	d001      	beq.n	fe28 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f4>
    fe24:	e7ff      	b.n	fe26 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f2>
    fe26:	e001      	b.n	fe2c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32f8>
        match (
    fe28:	e151      	b.n	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for i in 0..(x + 1) {
    fe2a:	defe      	udf	#254	; 0xfe
    fe2c:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    fe30:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    fe34:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    fe38:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    fe3c:	280f      	cmp	r0, #15
    fe3e:	9014      	str	r0, [sp, #80]	; 0x50
    fe40:	f200 81a1 	bhi.w	10186 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3652>
    fe44:	e7ff      	b.n	fe46 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3312>
    fe46:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe4a:	9914      	ldr	r1, [sp, #80]	; 0x50
    fe4c:	1842      	adds	r2, r0, r1
    fe4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    fe52:	8a03      	ldrh	r3, [r0, #16]
    fe54:	eb03 0c01 	add.w	ip, r3, r1
    fe58:	46e6      	mov	lr, ip
    fe5a:	459c      	cmp	ip, r3
    fe5c:	9213      	str	r2, [sp, #76]	; 0x4c
    fe5e:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    fe62:	f0c0 8199 	bcc.w	10198 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3664>
    fe66:	e7ff      	b.n	fe68 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3334>
    fe68:	2000      	movs	r0, #0
    fe6a:	9912      	ldr	r1, [sp, #72]	; 0x48
    fe6c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    fe70:	f040 819e 	bne.w	101b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x367c>
    fe74:	e7ff      	b.n	fe76 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3342>
    fe76:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    fe7a:	9912      	ldr	r1, [sp, #72]	; 0x48
    fe7c:	1842      	adds	r2, r0, r1
    fe7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fe80:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    fe84:	e7c1      	b.n	fe0a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x32d6>
    fe86:	2005      	movs	r0, #5
    fe88:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    fe8c:	f64c 2080 	movw	r0, #51840	; 0xca80
    fe90:	f2c0 0001 	movt	r0, #1
    fe94:	6801      	ldr	r1, [r0, #0]
    fe96:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    fe9a:	f004 fbce 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fe9e:	9011      	str	r0, [sp, #68]	; 0x44
    fea0:	e01f      	b.n	fee2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33ae>
    fea2:	2001      	movs	r0, #1
    fea4:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    fea8:	e015      	b.n	fed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33a2>
    feaa:	2000      	movs	r0, #0
    feac:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    feb0:	e011      	b.n	fed6 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33a2>
    feb2:	2000      	movs	r0, #0
    feb4:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    feb8:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    febc:	f644 206c 	movw	r0, #19052	; 0x4a6c
    fec0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    fec4:	f000 fedb 	bl	10c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>
    fec8:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    fecc:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    fed0:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    fed4:	e00a      	b.n	feec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33b8>
    fed6:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    feda:	07c0      	lsls	r0, r0, #31
    fedc:	2800      	cmp	r0, #0
    fede:	d112      	bne.n	ff06 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33d2>
    fee0:	e055      	b.n	ff8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x345a>
    fee2:	9811      	ldr	r0, [sp, #68]	; 0x44
    fee4:	07c1      	lsls	r1, r0, #31
    fee6:	2900      	cmp	r1, #0
    fee8:	d1e3      	bne.n	feb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x337e>
    feea:	e7de      	b.n	feaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3376>
    feec:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    fef0:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    fef4:	f004 fba1 	bl	1463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>
    fef8:	9010      	str	r0, [sp, #64]	; 0x40
    fefa:	e7ff      	b.n	fefc <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x33c8>
    fefc:	9810      	ldr	r0, [sp, #64]	; 0x40
    fefe:	07c1      	lsls	r1, r0, #31
    ff00:	2900      	cmp	r1, #0
    ff02:	d1ce      	bne.n	fea2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x336e>
    ff04:	e7d1      	b.n	feaa <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3376>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    ff06:	f64c 20a4 	movw	r0, #51876	; 0xcaa4
    ff0a:	f2c0 0001 	movt	r0, #1
    ff0e:	6801      	ldr	r1, [r0, #0]
    ff10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ff14:	f100 0212 	add.w	r2, r0, #18
    ff18:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    ff1c:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    ff20:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    ff24:	f646 1377 	movw	r3, #26999	; 0x6977
    ff28:	f2c0 0301 	movt	r3, #1
    ff2c:	4610      	mov	r0, r2
    ff2e:	910f      	str	r1, [sp, #60]	; 0x3c
    ff30:	4619      	mov	r1, r3
    ff32:	f7fa f9e8 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ff36:	900e      	str	r0, [sp, #56]	; 0x38
    ff38:	910d      	str	r1, [sp, #52]	; 0x34
    ff3a:	e7ff      	b.n	ff3c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3408>
    ff3c:	980e      	ldr	r0, [sp, #56]	; 0x38
    ff3e:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    ff42:	990d      	ldr	r1, [sp, #52]	; 0x34
    ff44:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    ff48:	f64c 22c8 	movw	r2, #51912	; 0xcac8
    ff4c:	f2c0 0201 	movt	r2, #1
    ff50:	6812      	ldr	r2, [r2, #0]
    ff52:	466b      	mov	r3, sp
    ff54:	f04f 0c01 	mov.w	ip, #1
    ff58:	f8c3 c008 	str.w	ip, [r3, #8]
    ff5c:	605a      	str	r2, [r3, #4]
    ff5e:	f8c3 c000 	str.w	ip, [r3]
    ff62:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    ff66:	2202      	movs	r2, #2
    ff68:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    ff6c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    ff6e:	f004 fa29 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
    ff72:	e7ff      	b.n	ff74 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3440>
    ff74:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    ff78:	f64c 3008 	movw	r0, #51976	; 0xcb08
    ff7c:	f2c0 0001 	movt	r0, #1
    ff80:	6802      	ldr	r2, [r0, #0]
    ff82:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    ff86:	f001 fecf 	bl	11d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ff8a:	e7ff      	b.n	ff8c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3458>
    ff8c:	e7ff      	b.n	ff8e <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x345a>
                let x = x as usize;
    ff8e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ff92:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    ff96:	1c41      	adds	r1, r0, #1
    ff98:	460a      	mov	r2, r1
    ff9a:	4281      	cmp	r1, r0
    ff9c:	920c      	str	r2, [sp, #48]	; 0x30
    ff9e:	f0c0 80bb 	bcc.w	10118 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35e4>
    ffa2:	e7ff      	b.n	ffa4 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3470>
    ffa4:	2000      	movs	r0, #0
    ffa6:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    ffaa:	980c      	ldr	r0, [sp, #48]	; 0x30
    ffac:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    ffb0:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    ffb4:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    ffb8:	f001 fc42 	bl	11840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    ffbc:	900b      	str	r0, [sp, #44]	; 0x2c
    ffbe:	910a      	str	r1, [sp, #40]	; 0x28
    ffc0:	e7ff      	b.n	ffc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x348e>
    ffc2:	980b      	ldr	r0, [sp, #44]	; 0x2c
    ffc4:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    ffc8:	990a      	ldr	r1, [sp, #40]	; 0x28
    ffca:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    ffce:	e7ff      	b.n	ffd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x349c>
    ffd0:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    ffd4:	f001 fba9 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    ffd8:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    ffdc:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    ffe0:	e7ff      	b.n	ffe2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34ae>
    ffe2:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    ffe6:	2800      	cmp	r0, #0
    ffe8:	d001      	beq.n	ffee <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34ba>
    ffea:	e7ff      	b.n	ffec <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34b8>
    ffec:	e001      	b.n	fff2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34be>
        match (
    ffee:	e06e      	b.n	100ce <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x359a>
                for i in 0..(x + 1) {
    fff0:	defe      	udf	#254	; 0xfe
    fff2:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    fff6:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    fffa:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    fffe:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
   10002:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   10006:	8a0a      	ldrh	r2, [r1, #16]
   10008:	1813      	adds	r3, r2, r0
   1000a:	469c      	mov	ip, r3
   1000c:	4293      	cmp	r3, r2
   1000e:	9009      	str	r0, [sp, #36]	; 0x24
   10010:	f8cd c020 	str.w	ip, [sp, #32]
   10014:	f0c0 808c 	bcc.w	10130 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x35fc>
   10018:	e7ff      	b.n	1001a <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34e6>
   1001a:	2000      	movs	r0, #0
   1001c:	9908      	ldr	r1, [sp, #32]
   1001e:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
   10022:	f040 8091 	bne.w	10148 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3614>
   10026:	e7ff      	b.n	10028 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x34f4>
   10028:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   1002c:	9908      	ldr	r1, [sp, #32]
   1002e:	1842      	adds	r2, r0, r1
   10030:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
   10034:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10036:	2b0f      	cmp	r3, #15
   10038:	9207      	str	r2, [sp, #28]
   1003a:	f200 808f 	bhi.w	1015c <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3628>
   1003e:	e7ff      	b.n	10040 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x350c>
   10040:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
   10044:	9909      	ldr	r1, [sp, #36]	; 0x24
   10046:	1842      	adds	r2, r0, r1
   10048:	9b07      	ldr	r3, [sp, #28]
   1004a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
   1004e:	e7bf      	b.n	ffd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x349c>
   10050:	f646 1177 	movw	r1, #26999	; 0x6977
   10054:	f2c0 0101 	movt	r1, #1
   10058:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
   1005c:	f7fa f953 	bl	a306 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
   10060:	9006      	str	r0, [sp, #24]
   10062:	9105      	str	r1, [sp, #20]
   10064:	e7ff      	b.n	10066 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x3532>
   10066:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
   1006a:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
   1006e:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   10072:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
   10076:	9a06      	ldr	r2, [sp, #24]
   10078:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
   1007c:	9b05      	ldr	r3, [sp, #20]
   1007e:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
   10082:	f24d 6c6c 	movw	ip, #54892	; 0xd66c
   10086:	f2c0 0c01 	movt	ip, #1
   1008a:	f8dc c000 	ldr.w	ip, [ip]
   1008e:	46ee      	mov	lr, sp
   10090:	2402      	movs	r4, #2
   10092:	f8ce 4008 	str.w	r4, [lr, #8]
   10096:	f8ce c004 	str.w	ip, [lr, #4]
   1009a:	f8ce 4000 	str.w	r4, [lr]
   1009e:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   100a2:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
   100a6:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
   100aa:	4622      	mov	r2, r4
   100ac:	f004 f98a 	bl	143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>
   100b0:	e7ff      	b.n	100b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x357e>
   100b2:	f24d 6090 	movw	r0, #54928	; 0xd690
   100b6:	f2c0 0001 	movt	r0, #1
   100ba:	f005 f848 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   100be:	9004      	str	r0, [sp, #16]
   100c0:	e7ff      	b.n	100c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17haccb9285ed549c9eE+0x358e>
   100c2:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
   100c6:	9904      	ldr	r1, [sp, #16]
   100c8:	f005 f87e 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   100cc:	defe      	udf	#254	; 0xfe
        }
    }
   100ce:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
   100d2:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
   100d4:	f64c 2024 	movw	r0, #51748	; 0xca24
   100d8:	f2c0 0001 	movt	r0, #1
   100dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   100e0:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
   100e4:	f005 f850 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   100e8:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
   100ea:	f64c 2050 	movw	r0, #51792	; 0xca50
   100ee:	f2c0 0001 	movt	r0, #1
   100f2:	f64c 2234 	movw	r2, #51764	; 0xca34
   100f6:	f2c0 0201 	movt	r2, #1
   100fa:	211c      	movs	r1, #28
   100fc:	f005 f82e 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10100:	defe      	udf	#254	; 0xfe
   10102:	f64c 206c 	movw	r0, #51820	; 0xca6c
   10106:	f2c0 0001 	movt	r0, #1
   1010a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1010e:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
   10112:	f005 f839 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10116:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   10118:	f64c 2050 	movw	r0, #51792	; 0xca50
   1011c:	f2c0 0001 	movt	r0, #1
   10120:	f64c 320c 	movw	r2, #51980	; 0xcb0c
   10124:	f2c0 0201 	movt	r2, #1
   10128:	211c      	movs	r1, #28
   1012a:	f005 f817 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1012e:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
   10130:	f64c 2050 	movw	r0, #51792	; 0xca50
   10134:	f2c0 0001 	movt	r0, #1
   10138:	f64c 321c 	movw	r2, #51996	; 0xcb1c
   1013c:	f2c0 0201 	movt	r2, #1
   10140:	211c      	movs	r1, #28
   10142:	f005 f80b 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10146:	defe      	udf	#254	; 0xfe
   10148:	f64c 302c 	movw	r0, #52012	; 0xcb2c
   1014c:	f2c0 0001 	movt	r0, #1
   10150:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10154:	9908      	ldr	r1, [sp, #32]
   10156:	f005 f817 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1015a:	defe      	udf	#254	; 0xfe
   1015c:	f64c 303c 	movw	r0, #52028	; 0xcb3c
   10160:	f2c0 0001 	movt	r0, #1
   10164:	2210      	movs	r2, #16
   10166:	9909      	ldr	r1, [sp, #36]	; 0x24
   10168:	f005 f80e 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1016c:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
   1016e:	f64c 2050 	movw	r0, #51792	; 0xca50
   10172:	f2c0 0001 	movt	r0, #1
   10176:	f64c 328c 	movw	r2, #52108	; 0xcb8c
   1017a:	f2c0 0201 	movt	r2, #1
   1017e:	211c      	movs	r1, #28
   10180:	f004 ffec 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10184:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
   10186:	f64c 309c 	movw	r0, #52124	; 0xcb9c
   1018a:	f2c0 0001 	movt	r0, #1
   1018e:	2210      	movs	r2, #16
   10190:	9914      	ldr	r1, [sp, #80]	; 0x50
   10192:	f004 fff9 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10196:	defe      	udf	#254	; 0xfe
   10198:	f64c 2050 	movw	r0, #51792	; 0xca50
   1019c:	f2c0 0001 	movt	r0, #1
   101a0:	f64c 32ac 	movw	r2, #52140	; 0xcbac
   101a4:	f2c0 0201 	movt	r2, #1
   101a8:	211c      	movs	r1, #28
   101aa:	f004 ffd7 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   101ae:	defe      	udf	#254	; 0xfe
   101b0:	f64c 30bc 	movw	r0, #52156	; 0xcbbc
   101b4:	f2c0 0001 	movt	r0, #1
   101b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   101bc:	9912      	ldr	r1, [sp, #72]	; 0x48
   101be:	f004 ffe3 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   101c2:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
   101c4:	f64c 400c 	movw	r0, #52236	; 0xcc0c
   101c8:	f2c0 0001 	movt	r0, #1
   101cc:	2210      	movs	r2, #16
   101ce:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   101d2:	f004 ffd9 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   101d6:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
   101d8:	f64c 401c 	movw	r0, #52252	; 0xcc1c
   101dc:	f2c0 0001 	movt	r0, #1
   101e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   101e4:	9920      	ldr	r1, [sp, #128]	; 0x80
   101e6:	f004 ffcf 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   101ea:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
   101ec:	f64c 2050 	movw	r0, #51792	; 0xca50
   101f0:	f2c0 0001 	movt	r0, #1
   101f4:	f64c 422c 	movw	r2, #52268	; 0xcc2c
   101f8:	f2c0 0201 	movt	r2, #1
   101fc:	211c      	movs	r1, #28
   101fe:	f004 ffad 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10202:	defe      	udf	#254	; 0xfe
   10204:	f64c 403c 	movw	r0, #52284	; 0xcc3c
   10208:	f2c0 0001 	movt	r0, #1
   1020c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10210:	991e      	ldr	r1, [sp, #120]	; 0x78
   10212:	f004 ffb9 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10216:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
   10218:	f64c 2050 	movw	r0, #51792	; 0xca50
   1021c:	f2c0 0001 	movt	r0, #1
   10220:	f64c 424c 	movw	r2, #52300	; 0xcc4c
   10224:	f2c0 0201 	movt	r2, #1
   10228:	211c      	movs	r1, #28
   1022a:	f004 ff97 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1022e:	defe      	udf	#254	; 0xfe
   10230:	f64c 405c 	movw	r0, #52316	; 0xcc5c
   10234:	f2c0 0001 	movt	r0, #1
   10238:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1023c:	991d      	ldr	r1, [sp, #116]	; 0x74
   1023e:	f004 ffa3 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10242:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
   10244:	f64c 40ac 	movw	r0, #52396	; 0xccac
   10248:	f2c0 0001 	movt	r0, #1
   1024c:	2210      	movs	r2, #16
   1024e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10252:	f004 ff99 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10256:	defe      	udf	#254	; 0xfe
   10258:	f64c 40d0 	movw	r0, #52432	; 0xccd0
   1025c:	f2c0 0001 	movt	r0, #1
   10260:	f64c 42bc 	movw	r2, #52412	; 0xccbc
   10264:	f2c0 0201 	movt	r2, #1
   10268:	2121      	movs	r1, #33	; 0x21
   1026a:	f004 ff77 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1026e:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
   10270:	f64c 5030 	movw	r0, #52528	; 0xcd30
   10274:	f2c0 0001 	movt	r0, #1
   10278:	2210      	movs	r2, #16
   1027a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1027e:	f004 ff83 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10282:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
   10284:	f64c 5080 	movw	r0, #52608	; 0xcd80
   10288:	f2c0 0001 	movt	r0, #1
   1028c:	2210      	movs	r2, #16
   1028e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10292:	f004 ff79 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10296:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
   10298:	f64c 50d0 	movw	r0, #52688	; 0xcdd0
   1029c:	f2c0 0001 	movt	r0, #1
   102a0:	2210      	movs	r2, #16
   102a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102a6:	f004 ff6f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102aa:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
   102ac:	f64c 6020 	movw	r0, #52768	; 0xce20
   102b0:	f2c0 0001 	movt	r0, #1
   102b4:	2210      	movs	r2, #16
   102b6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102ba:	f004 ff65 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102be:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
   102c0:	f64c 6070 	movw	r0, #52848	; 0xce70
   102c4:	f2c0 0001 	movt	r0, #1
   102c8:	2210      	movs	r2, #16
   102ca:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102ce:	f004 ff5b 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102d2:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
   102d4:	f64c 60c0 	movw	r0, #52928	; 0xcec0
   102d8:	f2c0 0001 	movt	r0, #1
   102dc:	2210      	movs	r2, #16
   102de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102e2:	f004 ff51 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102e6:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
   102e8:	f64c 7004 	movw	r0, #52996	; 0xcf04
   102ec:	f2c0 0001 	movt	r0, #1
   102f0:	2210      	movs	r2, #16
   102f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   102f6:	f004 ff47 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   102fa:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
   102fc:	f64c 7058 	movw	r0, #53080	; 0xcf58
   10300:	f2c0 0001 	movt	r0, #1
   10304:	2210      	movs	r2, #16
   10306:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1030a:	f004 ff3d 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1030e:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
   10310:	f64c 7068 	movw	r0, #53096	; 0xcf68
   10314:	f2c0 0001 	movt	r0, #1
   10318:	2210      	movs	r2, #16
   1031a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1031e:	f004 ff33 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10322:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
   10324:	f64c 2050 	movw	r0, #51792	; 0xca50
   10328:	f2c0 0001 	movt	r0, #1
   1032c:	f64c 7278 	movw	r2, #53112	; 0xcf78
   10330:	f2c0 0201 	movt	r2, #1
   10334:	211c      	movs	r1, #28
   10336:	f004 ff11 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1033a:	defe      	udf	#254	; 0xfe
   1033c:	f64c 7088 	movw	r0, #53128	; 0xcf88
   10340:	f2c0 0001 	movt	r0, #1
   10344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   10348:	9967      	ldr	r1, [sp, #412]	; 0x19c
   1034a:	f004 ff1d 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1034e:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
   10350:	f64c 2050 	movw	r0, #51792	; 0xca50
   10354:	f2c0 0001 	movt	r0, #1
   10358:	f64c 7298 	movw	r2, #53144	; 0xcf98
   1035c:	f2c0 0201 	movt	r2, #1
   10360:	211c      	movs	r1, #28
   10362:	f004 fefb 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10366:	defe      	udf	#254	; 0xfe
   10368:	f64c 70b0 	movw	r0, #53168	; 0xcfb0
   1036c:	f2c0 0001 	movt	r0, #1
   10370:	f64c 7298 	movw	r2, #53144	; 0xcf98
   10374:	f2c0 0201 	movt	r2, #1
   10378:	2139      	movs	r1, #57	; 0x39
   1037a:	f004 feef 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1037e:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
   10380:	f64c 2050 	movw	r0, #51792	; 0xca50
   10384:	f2c0 0001 	movt	r0, #1
   10388:	f64c 72ec 	movw	r2, #53228	; 0xcfec
   1038c:	f2c0 0201 	movt	r2, #1
   10390:	211c      	movs	r1, #28
   10392:	f004 fee3 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10396:	defe      	udf	#254	; 0xfe
   10398:	f64c 70b0 	movw	r0, #53168	; 0xcfb0
   1039c:	f2c0 0001 	movt	r0, #1
   103a0:	f64c 72ec 	movw	r2, #53228	; 0xcfec
   103a4:	f2c0 0201 	movt	r2, #1
   103a8:	2139      	movs	r1, #57	; 0x39
   103aa:	f004 fed7 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103ae:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
   103b0:	f24d 0010 	movw	r0, #53264	; 0xd010
   103b4:	f2c0 0001 	movt	r0, #1
   103b8:	f64c 72fc 	movw	r2, #53244	; 0xcffc
   103bc:	f2c0 0201 	movt	r2, #1
   103c0:	2121      	movs	r1, #33	; 0x21
   103c2:	f004 fecb 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103c6:	defe      	udf	#254	; 0xfe
   103c8:	f24d 0050 	movw	r0, #53328	; 0xd050
   103cc:	f2c0 0001 	movt	r0, #1
   103d0:	f24d 0234 	movw	r2, #53300	; 0xd034
   103d4:	f2c0 0201 	movt	r2, #1
   103d8:	2123      	movs	r1, #35	; 0x23
   103da:	f004 febf 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   103de:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
   103e0:	f24d 00b4 	movw	r0, #53428	; 0xd0b4
   103e4:	f2c0 0001 	movt	r0, #1
   103e8:	2210      	movs	r2, #16
   103ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   103ee:	f004 fecb 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   103f2:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
   103f4:	f24d 1084 	movw	r0, #53636	; 0xd184
   103f8:	f2c0 0001 	movt	r0, #1
   103fc:	2210      	movs	r2, #16
   103fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10402:	f004 fec1 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10406:	defe      	udf	#254	; 0xfe
   10408:	f24d 1094 	movw	r0, #53652	; 0xd194
   1040c:	f2c0 0001 	movt	r0, #1
   10410:	2210      	movs	r2, #16
   10412:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10416:	f004 feb7 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1041a:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
   1041c:	f24d 10e4 	movw	r0, #53732	; 0xd1e4
   10420:	f2c0 0001 	movt	r0, #1
   10424:	2210      	movs	r2, #16
   10426:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1042a:	f004 fead 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1042e:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
   10430:	f24d 10f4 	movw	r0, #53748	; 0xd1f4
   10434:	f2c0 0001 	movt	r0, #1
   10438:	2210      	movs	r2, #16
   1043a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1043e:	f004 fea3 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10442:	defe      	udf	#254	; 0xfe
   10444:	f24d 2004 	movw	r0, #53764	; 0xd204
   10448:	f2c0 0001 	movt	r0, #1
   1044c:	2210      	movs	r2, #16
   1044e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10452:	f004 fe99 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10456:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
   10458:	f24d 2058 	movw	r0, #53848	; 0xd258
   1045c:	f2c0 0001 	movt	r0, #1
   10460:	2210      	movs	r2, #16
   10462:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10466:	f004 fe8f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1046a:	defe      	udf	#254	; 0xfe
   1046c:	f24d 2068 	movw	r0, #53864	; 0xd268
   10470:	f2c0 0001 	movt	r0, #1
   10474:	2210      	movs	r2, #16
   10476:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1047a:	f004 fe85 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1047e:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10480:	f24d 2078 	movw	r0, #53880	; 0xd278
   10484:	f2c0 0001 	movt	r0, #1
   10488:	2210      	movs	r2, #16
   1048a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1048e:	f004 fe7b 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10492:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
   10494:	f24d 20c8 	movw	r0, #53960	; 0xd2c8
   10498:	f2c0 0001 	movt	r0, #1
   1049c:	2210      	movs	r2, #16
   1049e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   104a2:	f004 fe71 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104a6:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
   104a8:	f24d 20d8 	movw	r0, #53976	; 0xd2d8
   104ac:	f2c0 0001 	movt	r0, #1
   104b0:	2210      	movs	r2, #16
   104b2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   104b6:	f004 fe67 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104ba:	defe      	udf	#254	; 0xfe
   104bc:	f24d 20e8 	movw	r0, #53992	; 0xd2e8
   104c0:	f2c0 0001 	movt	r0, #1
   104c4:	2210      	movs	r2, #16
   104c6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   104ca:	f004 fe5d 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104ce:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
   104d0:	f24d 3038 	movw	r0, #54072	; 0xd338
   104d4:	f2c0 0001 	movt	r0, #1
   104d8:	2210      	movs	r2, #16
   104da:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   104de:	f004 fe53 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104e2:	defe      	udf	#254	; 0xfe
   104e4:	f24d 3048 	movw	r0, #54088	; 0xd348
   104e8:	f2c0 0001 	movt	r0, #1
   104ec:	2210      	movs	r2, #16
   104ee:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   104f2:	f004 fe49 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   104f6:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   104f8:	f24d 3058 	movw	r0, #54104	; 0xd358
   104fc:	f2c0 0001 	movt	r0, #1
   10500:	2210      	movs	r2, #16
   10502:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10506:	f004 fe3f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1050a:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
   1050c:	f24d 30a8 	movw	r0, #54184	; 0xd3a8
   10510:	f2c0 0001 	movt	r0, #1
   10514:	2210      	movs	r2, #16
   10516:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1051a:	f004 fe35 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1051e:	defe      	udf	#254	; 0xfe
   10520:	f24d 30b8 	movw	r0, #54200	; 0xd3b8
   10524:	f2c0 0001 	movt	r0, #1
   10528:	2210      	movs	r2, #16
   1052a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1052e:	f004 fe2b 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10532:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
   10534:	f24d 30c8 	movw	r0, #54216	; 0xd3c8
   10538:	f2c0 0001 	movt	r0, #1
   1053c:	2210      	movs	r2, #16
   1053e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10542:	f004 fe21 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10546:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
   10548:	f24d 4018 	movw	r0, #54296	; 0xd418
   1054c:	f2c0 0001 	movt	r0, #1
   10550:	2210      	movs	r2, #16
   10552:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10556:	f004 fe17 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1055a:	defe      	udf	#254	; 0xfe
   1055c:	f24d 4028 	movw	r0, #54312	; 0xd428
   10560:	f2c0 0001 	movt	r0, #1
   10564:	2210      	movs	r2, #16
   10566:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1056a:	f004 fe0d 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1056e:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
   10570:	f24d 4078 	movw	r0, #54392	; 0xd478
   10574:	f2c0 0001 	movt	r0, #1
   10578:	2210      	movs	r2, #16
   1057a:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   1057e:	f004 fe03 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10582:	defe      	udf	#254	; 0xfe
   10584:	f24d 4088 	movw	r0, #54408	; 0xd488
   10588:	f2c0 0001 	movt	r0, #1
   1058c:	2210      	movs	r2, #16
   1058e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10592:	f004 fdf9 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10596:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
   10598:	f24d 40d8 	movw	r0, #54488	; 0xd4d8
   1059c:	f2c0 0001 	movt	r0, #1
   105a0:	2210      	movs	r2, #16
   105a2:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   105a6:	f004 fdef 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105aa:	defe      	udf	#254	; 0xfe
   105ac:	f24d 40e8 	movw	r0, #54504	; 0xd4e8
   105b0:	f2c0 0001 	movt	r0, #1
   105b4:	2210      	movs	r2, #16
   105b6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105ba:	f004 fde5 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105be:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
   105c0:	f24d 5038 	movw	r0, #54584	; 0xd538
   105c4:	f2c0 0001 	movt	r0, #1
   105c8:	2210      	movs	r2, #16
   105ca:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   105ce:	f004 fddb 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105d2:	defe      	udf	#254	; 0xfe
   105d4:	f24d 5048 	movw	r0, #54600	; 0xd548
   105d8:	f2c0 0001 	movt	r0, #1
   105dc:	2210      	movs	r2, #16
   105de:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105e2:	f004 fdd1 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105e6:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
   105e8:	f24d 5098 	movw	r0, #54680	; 0xd598
   105ec:	f2c0 0001 	movt	r0, #1
   105f0:	2210      	movs	r2, #16
   105f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   105f6:	f004 fdc7 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   105fa:	defe      	udf	#254	; 0xfe
   105fc:	f24d 50a8 	movw	r0, #54696	; 0xd5a8
   10600:	f2c0 0001 	movt	r0, #1
   10604:	2210      	movs	r2, #16
   10606:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1060a:	f004 fdbd 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1060e:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
   10610:	f24d 50f8 	movw	r0, #54776	; 0xd5f8
   10614:	f2c0 0001 	movt	r0, #1
   10618:	2210      	movs	r2, #16
   1061a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1061e:	f004 fdb3 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10622:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
   10624:	f24d 60e0 	movw	r0, #55008	; 0xd6e0
   10628:	f2c0 0001 	movt	r0, #1
   1062c:	2210      	movs	r2, #16
   1062e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   10632:	f004 fda9 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10636:	defe      	udf	#254	; 0xfe
   10638:	f24d 60f0 	movw	r0, #55024	; 0xd6f0
   1063c:	f2c0 0001 	movt	r0, #1
   10640:	2210      	movs	r2, #16
   10642:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   10646:	f004 fd9f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1064a:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
   1064c:	f24d 7040 	movw	r0, #55104	; 0xd740
   10650:	f2c0 0001 	movt	r0, #1
   10654:	2210      	movs	r2, #16
   10656:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1065a:	f004 fd95 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1065e:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
   10660:	f24d 7090 	movw	r0, #55184	; 0xd790
   10664:	f2c0 0001 	movt	r0, #1
   10668:	2210      	movs	r2, #16
   1066a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
   1066e:	f004 fd8b 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   10672:	defe      	udf	#254	; 0xfe

00010674 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
   10674:	b580      	push	{r7, lr}
   10676:	b086      	sub	sp, #24
   10678:	9104      	str	r1, [sp, #16]
   1067a:	9205      	str	r2, [sp, #20]
   1067c:	6809      	ldr	r1, [r1, #0]
   1067e:	6809      	ldr	r1, [r1, #0]
   10680:	2300      	movs	r3, #0
   10682:	9301      	str	r3, [sp, #4]
   10684:	9102      	str	r1, [sp, #8]
   10686:	9203      	str	r2, [sp, #12]
   10688:	9901      	ldr	r1, [sp, #4]
   1068a:	9a02      	ldr	r2, [sp, #8]
   1068c:	9b03      	ldr	r3, [sp, #12]
   1068e:	f000 fbc4 	bl	10e1a <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE>
   10692:	e7ff      	b.n	10694 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h226696baba7295abE+0x20>
   10694:	b006      	add	sp, #24
   10696:	bd80      	pop	{r7, pc}

00010698 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h21f208ed1261e104E>:
   10698:	b084      	sub	sp, #16
   1069a:	9002      	str	r0, [sp, #8]
   1069c:	9103      	str	r1, [sp, #12]
   1069e:	6800      	ldr	r0, [r0, #0]
   106a0:	9000      	str	r0, [sp, #0]
   106a2:	9101      	str	r1, [sp, #4]
   106a4:	9800      	ldr	r0, [sp, #0]
   106a6:	9901      	ldr	r1, [sp, #4]
   106a8:	b004      	add	sp, #16
   106aa:	4770      	bx	lr

000106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>:
    fn jump(&mut self, pc: u16) {
   106ac:	b082      	sub	sp, #8
   106ae:	460a      	mov	r2, r1
   106b0:	9000      	str	r0, [sp, #0]
   106b2:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
   106b6:	8241      	strh	r1, [r0, #18]
    }
   106b8:	b002      	add	sp, #8
   106ba:	4770      	bx	lr

000106bc <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE>:
    fn load(&mut self, rom: &[u8]) {
   106bc:	b580      	push	{r7, lr}
   106be:	b08a      	sub	sp, #40	; 0x28
   106c0:	9105      	str	r1, [sp, #20]
   106c2:	9206      	str	r2, [sp, #24]
   106c4:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   106c6:	3047      	adds	r0, #71	; 0x47
   106c8:	9905      	ldr	r1, [sp, #20]
   106ca:	9a06      	ldr	r2, [sp, #24]
   106cc:	9004      	str	r0, [sp, #16]
   106ce:	4608      	mov	r0, r1
   106d0:	4611      	mov	r1, r2
   106d2:	f001 f88e 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   106d6:	9003      	str	r0, [sp, #12]
   106d8:	e7ff      	b.n	106da <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x1e>
   106da:	9803      	ldr	r0, [sp, #12]
   106dc:	f500 7100 	add.w	r1, r0, #512	; 0x200
   106e0:	460a      	mov	r2, r1
   106e2:	4281      	cmp	r1, r0
   106e4:	9202      	str	r2, [sp, #8]
   106e6:	d318      	bcc.n	1071a <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x5e>
   106e8:	e7ff      	b.n	106ea <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x2e>
   106ea:	f44f 7000 	mov.w	r0, #512	; 0x200
   106ee:	9007      	str	r0, [sp, #28]
   106f0:	9802      	ldr	r0, [sp, #8]
   106f2:	9008      	str	r0, [sp, #32]
   106f4:	9a07      	ldr	r2, [sp, #28]
   106f6:	9b08      	ldr	r3, [sp, #32]
   106f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   106fc:	9804      	ldr	r0, [sp, #16]
   106fe:	f003 ffb8 	bl	14672 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>
   10702:	9001      	str	r0, [sp, #4]
   10704:	9100      	str	r1, [sp, #0]
   10706:	e7ff      	b.n	10708 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x4c>
   10708:	9a05      	ldr	r2, [sp, #20]
   1070a:	9b06      	ldr	r3, [sp, #24]
   1070c:	9801      	ldr	r0, [sp, #4]
   1070e:	9900      	ldr	r1, [sp, #0]
   10710:	f7f8 fab1 	bl	8c76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   10714:	e7ff      	b.n	10716 <_ZN8libchip814Chip8$LT$T$GT$4load17h2b06a7158db4d30fE+0x5a>
    }
   10716:	b00a      	add	sp, #40	; 0x28
   10718:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
   1071a:	f64c 2050 	movw	r0, #51792	; 0xca50
   1071e:	f2c0 0001 	movt	r0, #1
   10722:	f64d 02ec 	movw	r2, #55532	; 0xd8ec
   10726:	f2c0 0201 	movt	r2, #1
   1072a:	211c      	movs	r1, #28
   1072c:	f004 fd16 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10730:	defe      	udf	#254	; 0xfe

00010732 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE>:
    fn next(&mut self) {
   10732:	b580      	push	{r7, lr}
   10734:	b084      	sub	sp, #16
   10736:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
   10738:	8a41      	ldrh	r1, [r0, #18]
   1073a:	2202      	movs	r2, #2
   1073c:	9002      	str	r0, [sp, #8]
   1073e:	4608      	mov	r0, r1
   10740:	4611      	mov	r1, r2
   10742:	f003 ff40 	bl	145c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>
   10746:	9001      	str	r0, [sp, #4]
   10748:	e7ff      	b.n	1074a <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE+0x18>
   1074a:	9802      	ldr	r0, [sp, #8]
   1074c:	9901      	ldr	r1, [sp, #4]
   1074e:	f7ff ffad 	bl	106ac <_ZN8libchip814Chip8$LT$T$GT$4jump17h540e15868f502c03E>
   10752:	e7ff      	b.n	10754 <_ZN8libchip814Chip8$LT$T$GT$4next17ha7709cdef6399a5fE+0x22>
    }
   10754:	b004      	add	sp, #16
   10756:	bd80      	pop	{r7, pc}

00010758 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E>:
    fn push(&mut self, item: u16) {
   10758:	b580      	push	{r7, lr}
   1075a:	b086      	sub	sp, #24
   1075c:	460a      	mov	r2, r1
   1075e:	9004      	str	r0, [sp, #16]
   10760:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
   10764:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
   10768:	460b      	mov	r3, r1
   1076a:	290f      	cmp	r1, #15
   1076c:	9003      	str	r0, [sp, #12]
   1076e:	9202      	str	r2, [sp, #8]
   10770:	9301      	str	r3, [sp, #4]
   10772:	d813      	bhi.n	1079c <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x44>
   10774:	e7ff      	b.n	10776 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x1e>
   10776:	9803      	ldr	r0, [sp, #12]
   10778:	9901      	ldr	r1, [sp, #4]
   1077a:	eb00 0241 	add.w	r2, r0, r1, lsl #1
   1077e:	9b02      	ldr	r3, [sp, #8]
   10780:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
   10782:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
   10786:	2101      	movs	r1, #1
   10788:	f003 fe80 	bl	1448c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>
   1078c:	9000      	str	r0, [sp, #0]
   1078e:	e7ff      	b.n	10790 <_ZN8libchip814Chip8$LT$T$GT$4push17hc14f02b11e8cd9f9E+0x38>
   10790:	9800      	ldr	r0, [sp, #0]
   10792:	9903      	ldr	r1, [sp, #12]
   10794:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
   10798:	b006      	add	sp, #24
   1079a:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
   1079c:	f64d 00fc 	movw	r0, #55548	; 0xd8fc
   107a0:	f2c0 0001 	movt	r0, #1
   107a4:	2210      	movs	r2, #16
   107a6:	9901      	ldr	r1, [sp, #4]
   107a8:	f004 fcee 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   107ac:	defe      	udf	#254	; 0xfe

000107ae <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E>:
    fn tick(&mut self) {
   107ae:	b580      	push	{r7, lr}
   107b0:	b084      	sub	sp, #16
   107b2:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
   107b4:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   107b8:	2900      	cmp	r1, #0
   107ba:	9002      	str	r0, [sp, #8]
   107bc:	d00f      	beq.n	107de <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x30>
   107be:	e7ff      	b.n	107c0 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x12>
            self.dt -= 1;
   107c0:	9802      	ldr	r0, [sp, #8]
   107c2:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
   107c6:	3901      	subs	r1, #1
   107c8:	b2ca      	uxtb	r2, r1
   107ca:	460b      	mov	r3, r1
   107cc:	428a      	cmp	r2, r1
   107ce:	9301      	str	r3, [sp, #4]
   107d0:	d129      	bne.n	10826 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x78>
   107d2:	e7ff      	b.n	107d4 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x26>
   107d4:	9801      	ldr	r0, [sp, #4]
   107d6:	9902      	ldr	r1, [sp, #8]
   107d8:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
   107dc:	e7ff      	b.n	107de <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x30>
        if self.st > 0 {
   107de:	9802      	ldr	r0, [sp, #8]
   107e0:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   107e4:	2900      	cmp	r1, #0
   107e6:	d01c      	beq.n	10822 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x74>
   107e8:	e7ff      	b.n	107ea <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x3c>
            self.st -= 1;
   107ea:	9802      	ldr	r0, [sp, #8]
   107ec:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
   107f0:	3901      	subs	r1, #1
   107f2:	b2ca      	uxtb	r2, r1
   107f4:	460b      	mov	r3, r1
   107f6:	428a      	cmp	r2, r1
   107f8:	9300      	str	r3, [sp, #0]
   107fa:	d120      	bne.n	1083e <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x90>
   107fc:	e7ff      	b.n	107fe <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x50>
   107fe:	9800      	ldr	r0, [sp, #0]
   10800:	9902      	ldr	r1, [sp, #8]
   10802:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
   10806:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
   1080a:	2a00      	cmp	r2, #0
   1080c:	d108      	bne.n	10820 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x72>
   1080e:	e7ff      	b.n	10810 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x62>
   10810:	f241 0048 	movw	r0, #4168	; 0x1048
                self.hw.beep();
   10814:	9902      	ldr	r1, [sp, #8]
   10816:	4408      	add	r0, r1
   10818:	f7fb fdf9 	bl	c40e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17h82c48d5866118aadE>
   1081c:	e7ff      	b.n	1081e <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x70>
            if self.st == 0 {
   1081e:	e7ff      	b.n	10820 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x72>
        if self.st > 0 {
   10820:	e7ff      	b.n	10822 <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E+0x74>
    }
   10822:	b004      	add	sp, #16
   10824:	bd80      	pop	{r7, pc}
            self.dt -= 1;
   10826:	f24d 0010 	movw	r0, #53264	; 0xd010
   1082a:	f2c0 0001 	movt	r0, #1
   1082e:	f64d 120c 	movw	r2, #55564	; 0xd90c
   10832:	f2c0 0201 	movt	r2, #1
   10836:	2121      	movs	r1, #33	; 0x21
   10838:	f004 fc90 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1083c:	defe      	udf	#254	; 0xfe
            self.st -= 1;
   1083e:	f24d 0010 	movw	r0, #53264	; 0xd010
   10842:	f2c0 0001 	movt	r0, #1
   10846:	f64d 121c 	movw	r2, #55580	; 0xd91c
   1084a:	f2c0 0201 	movt	r2, #1
   1084e:	2121      	movs	r1, #33	; 0x21
   10850:	f004 fc84 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10854:	defe      	udf	#254	; 0xfe

00010856 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>:
    fn sched(&mut self) {
   10856:	b510      	push	{r4, lr}
   10858:	b098      	sub	sp, #96	; 0x60
   1085a:	9015      	str	r0, [sp, #84]	; 0x54
   1085c:	f241 0148 	movw	r1, #4168	; 0x1048
        if self.hw.sched() {
   10860:	4401      	add	r1, r0
   10862:	900b      	str	r0, [sp, #44]	; 0x2c
   10864:	4608      	mov	r0, r1
   10866:	f7fb fdd6 	bl	c416 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h503f35a0857e45c1E>
   1086a:	900a      	str	r0, [sp, #40]	; 0x28
   1086c:	e7ff      	b.n	1086e <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x18>
   1086e:	980a      	ldr	r0, [sp, #40]	; 0x28
   10870:	07c1      	lsls	r1, r0, #31
   10872:	2900      	cmp	r1, #0
   10874:	d005      	beq.n	10882 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2c>
   10876:	e7ff      	b.n	10878 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x22>
            self.shutdown();
   10878:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1087a:	f000 f90e 	bl	10a9a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E>
   1087e:	e7ff      	b.n	10880 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2a>
        if self.hw.sched() {
   10880:	e7ff      	b.n	10882 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x2c>
        if let Some(t) = self.time {
   10882:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10884:	6801      	ldr	r1, [r0, #0]
   10886:	2901      	cmp	r1, #1
   10888:	d009      	beq.n	1089e <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x48>
   1088a:	e7ff      	b.n	1088c <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x36>
   1088c:	f241 0048 	movw	r0, #4168	; 0x1048
            self.time = Some(self.hw.clock());
   10890:	990b      	ldr	r1, [sp, #44]	; 0x2c
   10892:	4408      	add	r0, r1
   10894:	f7fb fd59 	bl	c34a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   10898:	9109      	str	r1, [sp, #36]	; 0x24
   1089a:	9008      	str	r0, [sp, #32]
   1089c:	e046      	b.n	1092c <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd6>
        if let Some(t) = self.time {
   1089e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   108a0:	6881      	ldr	r1, [r0, #8]
   108a2:	68c2      	ldr	r2, [r0, #12]
   108a4:	9217      	str	r2, [sp, #92]	; 0x5c
   108a6:	9116      	str	r1, [sp, #88]	; 0x58
   108a8:	f241 0348 	movw	r3, #4168	; 0x1048
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   108ac:	4418      	add	r0, r3
   108ae:	9107      	str	r1, [sp, #28]
   108b0:	9206      	str	r2, [sp, #24]
   108b2:	f7fb fd4a 	bl	c34a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   108b6:	9105      	str	r1, [sp, #20]
   108b8:	9004      	str	r0, [sp, #16]
   108ba:	e7ff      	b.n	108bc <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x66>
   108bc:	9804      	ldr	r0, [sp, #16]
   108be:	9905      	ldr	r1, [sp, #20]
   108c0:	9a07      	ldr	r2, [sp, #28]
   108c2:	9b06      	ldr	r3, [sp, #24]
   108c4:	f003 fea1 	bl	1460a <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>
   108c8:	9103      	str	r1, [sp, #12]
   108ca:	9002      	str	r0, [sp, #8]
   108cc:	e7ff      	b.n	108ce <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x78>
   108ce:	f245 002b 	movw	r0, #20523	; 0x502b
   108d2:	f2c0 00fe 	movt	r0, #254	; 0xfe
   108d6:	9902      	ldr	r1, [sp, #8]
   108d8:	1a08      	subs	r0, r1, r0
   108da:	9a03      	ldr	r2, [sp, #12]
   108dc:	f172 0300 	sbcs.w	r3, r2, #0
   108e0:	d323      	bcc.n	1092a <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd4>
   108e2:	e7ff      	b.n	108e4 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x8e>
                self.tick();
   108e4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   108e6:	f7ff ff62 	bl	107ae <_ZN8libchip814Chip8$LT$T$GT$4tick17hc8c94460b9b57cb7E>
   108ea:	e7ff      	b.n	108ec <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x96>
   108ec:	f241 0048 	movw	r0, #4168	; 0x1048
                self.time = Some(self.hw.clock());
   108f0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   108f2:	4408      	add	r0, r1
   108f4:	f7fb fd29 	bl	c34a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hc0964a0a3563dfc6E>
   108f8:	9101      	str	r1, [sp, #4]
   108fa:	9000      	str	r0, [sp, #0]
   108fc:	e7ff      	b.n	108fe <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xa8>
   108fe:	9800      	ldr	r0, [sp, #0]
   10900:	900e      	str	r0, [sp, #56]	; 0x38
   10902:	9901      	ldr	r1, [sp, #4]
   10904:	910f      	str	r1, [sp, #60]	; 0x3c
   10906:	2200      	movs	r2, #0
   10908:	920d      	str	r2, [sp, #52]	; 0x34
   1090a:	2201      	movs	r2, #1
   1090c:	920c      	str	r2, [sp, #48]	; 0x30
   1090e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10912:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   10916:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   1091a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1091c:	6063      	str	r3, [r4, #4]
   1091e:	6022      	str	r2, [r4, #0]
   10920:	f8c4 e00c 	str.w	lr, [r4, #12]
   10924:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
   10928:	e7ff      	b.n	1092a <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0xd4>
        if let Some(t) = self.time {
   1092a:	e015      	b.n	10958 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x102>
            self.time = Some(self.hw.clock());
   1092c:	9808      	ldr	r0, [sp, #32]
   1092e:	9012      	str	r0, [sp, #72]	; 0x48
   10930:	9909      	ldr	r1, [sp, #36]	; 0x24
   10932:	9113      	str	r1, [sp, #76]	; 0x4c
   10934:	2200      	movs	r2, #0
   10936:	9211      	str	r2, [sp, #68]	; 0x44
   10938:	2201      	movs	r2, #1
   1093a:	9210      	str	r2, [sp, #64]	; 0x40
   1093c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1093e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10940:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   10944:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
   10948:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   1094a:	6063      	str	r3, [r4, #4]
   1094c:	6022      	str	r2, [r4, #0]
   1094e:	f8c4 e00c 	str.w	lr, [r4, #12]
   10952:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
   10956:	e7ff      	b.n	10958 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E+0x102>
    }
   10958:	b018      	add	sp, #96	; 0x60
   1095a:	bd10      	pop	{r4, pc}

0001095c <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE>:
    fn setup(&mut self) {
   1095c:	b580      	push	{r7, lr}
   1095e:	b088      	sub	sp, #32
   10960:	9007      	str	r0, [sp, #28]
   10962:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
   10966:	8241      	strh	r1, [r0, #18]
   10968:	f241 0148 	movw	r1, #4168	; 0x1048
        self.hw.vram_setsize(DISPS);
   1096c:	4401      	add	r1, r0
   1096e:	f64c 22e4 	movw	r2, #51940	; 0xcae4
   10972:	f2c0 0201 	movt	r2, #1
   10976:	6813      	ldr	r3, [r2, #0]
   10978:	6852      	ldr	r2, [r2, #4]
   1097a:	9005      	str	r0, [sp, #20]
   1097c:	4608      	mov	r0, r1
   1097e:	4619      	mov	r1, r3
   10980:	f7fb fcac 	bl	c2dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17h9499037185629181E>
   10984:	e7ff      	b.n	10986 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x2a>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
   10986:	9805      	ldr	r0, [sp, #20]
   10988:	f100 0147 	add.w	r1, r0, #71	; 0x47
   1098c:	f64d 102c 	movw	r0, #55596	; 0xd92c
   10990:	f2c0 0001 	movt	r0, #1
   10994:	2250      	movs	r2, #80	; 0x50
   10996:	9104      	str	r1, [sp, #16]
   10998:	4611      	mov	r1, r2
   1099a:	f000 ff2a 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1099e:	9003      	str	r0, [sp, #12]
   109a0:	e7ff      	b.n	109a2 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x46>
   109a2:	9803      	ldr	r0, [sp, #12]
   109a4:	9006      	str	r0, [sp, #24]
   109a6:	9a06      	ldr	r2, [sp, #24]
   109a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   109ac:	9804      	ldr	r0, [sp, #16]
   109ae:	f000 fb2c 	bl	1100a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h81569b4ba1b6bc4bE>
   109b2:	9002      	str	r0, [sp, #8]
   109b4:	9101      	str	r1, [sp, #4]
   109b6:	e7ff      	b.n	109b8 <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x5c>
   109b8:	f64d 122c 	movw	r2, #55596	; 0xd92c
   109bc:	f2c0 0201 	movt	r2, #1
   109c0:	2350      	movs	r3, #80	; 0x50
   109c2:	9802      	ldr	r0, [sp, #8]
   109c4:	9901      	ldr	r1, [sp, #4]
   109c6:	f7f8 f956 	bl	8c76 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
   109ca:	e7ff      	b.n	109cc <_ZN8libchip814Chip8$LT$T$GT$5setup17h3c03dcb93f2ead3cE+0x70>
   109cc:	f241 0047 	movw	r0, #4167	; 0x1047
   109d0:	2101      	movs	r1, #1
        self.running = true;
   109d2:	9a05      	ldr	r2, [sp, #20]
   109d4:	5411      	strb	r1, [r2, r0]
    }
   109d6:	b008      	add	sp, #32
   109d8:	bd80      	pop	{r7, pc}

000109da <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E>:
    fn waitkey(&mut self) -> u8 {
   109da:	b580      	push	{r7, lr}
   109dc:	b08c      	sub	sp, #48	; 0x30
   109de:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
   109e0:	9005      	str	r0, [sp, #20]
   109e2:	e7ff      	b.n	109e4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa>
   109e4:	f241 0047 	movw	r0, #4167	; 0x1047
   109e8:	9905      	ldr	r1, [sp, #20]
   109ea:	5c08      	ldrb	r0, [r1, r0]
   109ec:	07c0      	lsls	r0, r0, #31
   109ee:	2800      	cmp	r0, #0
   109f0:	d104      	bne.n	109fc <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x22>
   109f2:	e7ff      	b.n	109f4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x1a>
   109f4:	2020      	movs	r0, #32
        return b' ';
   109f6:	f88d 001b 	strb.w	r0, [sp, #27]
   109fa:	e04a      	b.n	10a92 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb8>
            self.sched();
   109fc:	9805      	ldr	r0, [sp, #20]
   109fe:	f7ff ff2a 	bl	10856 <_ZN8libchip814Chip8$LT$T$GT$5sched17hd41e493afe2f6ae8E>
   10a02:	e7ff      	b.n	10a04 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x2a>
   10a04:	2000      	movs	r0, #0
            for i in 0..0xf {
   10a06:	f88d 001c 	strb.w	r0, [sp, #28]
   10a0a:	200f      	movs	r0, #15
   10a0c:	f88d 001d 	strb.w	r0, [sp, #29]
   10a10:	f89d 001c 	ldrb.w	r0, [sp, #28]
   10a14:	f89d 101d 	ldrb.w	r1, [sp, #29]
   10a18:	f000 fa09 	bl	10e2e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>
   10a1c:	9004      	str	r0, [sp, #16]
   10a1e:	9103      	str	r1, [sp, #12]
   10a20:	e7ff      	b.n	10a22 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x48>
   10a22:	9804      	ldr	r0, [sp, #16]
   10a24:	f88d 0020 	strb.w	r0, [sp, #32]
   10a28:	9903      	ldr	r1, [sp, #12]
   10a2a:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
   10a2e:	e7ff      	b.n	10a30 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x56>
   10a30:	a808      	add	r0, sp, #32
   10a32:	f000 f98b 	bl	10d4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>
   10a36:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
   10a3a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
   10a3e:	e7ff      	b.n	10a40 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x66>
   10a40:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
   10a44:	07c1      	lsls	r1, r0, #31
   10a46:	2900      	cmp	r1, #0
   10a48:	d001      	beq.n	10a4e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x74>
   10a4a:	e7ff      	b.n	10a4c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x72>
   10a4c:	e001      	b.n	10a52 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x78>
        while self.running {
   10a4e:	e7c9      	b.n	109e4 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa>
            for i in 0..0xf {
   10a50:	defe      	udf	#254	; 0xfe
   10a52:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
   10a56:	4601      	mov	r1, r0
   10a58:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10a5c:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10a60:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10a64:	f241 0248 	movw	r2, #4168	; 0x1048
                if self.hw.key(i) {
   10a68:	9b05      	ldr	r3, [sp, #20]
   10a6a:	441a      	add	r2, r3
   10a6c:	9002      	str	r0, [sp, #8]
   10a6e:	4610      	mov	r0, r2
   10a70:	9a02      	ldr	r2, [sp, #8]
   10a72:	9101      	str	r1, [sp, #4]
   10a74:	4611      	mov	r1, r2
   10a76:	f7fb fa5c 	bl	bf32 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17h0c9c0ea69806c430E>
   10a7a:	9000      	str	r0, [sp, #0]
   10a7c:	e7ff      	b.n	10a7e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xa4>
   10a7e:	9800      	ldr	r0, [sp, #0]
   10a80:	07c1      	lsls	r1, r0, #31
   10a82:	2900      	cmp	r1, #0
   10a84:	d101      	bne.n	10a8a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb0>
   10a86:	e7ff      	b.n	10a88 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xae>
            for i in 0..0xf {
   10a88:	e7d2      	b.n	10a30 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0x56>
                    return i;
   10a8a:	9801      	ldr	r0, [sp, #4]
   10a8c:	f88d 001b 	strb.w	r0, [sp, #27]
   10a90:	e7ff      	b.n	10a92 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17h0569764577a64070E+0xb8>
    }
   10a92:	f89d 001b 	ldrb.w	r0, [sp, #27]
   10a96:	b00c      	add	sp, #48	; 0x30
   10a98:	bd80      	pop	{r7, pc}

00010a9a <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h045ae3f7c372d833E>:
    fn shutdown(&mut self) {
   10a9a:	b081      	sub	sp, #4
   10a9c:	9000      	str	r0, [sp, #0]
   10a9e:	f241 0147 	movw	r1, #4167	; 0x1047
   10aa2:	2200      	movs	r2, #0
        self.running = false;
   10aa4:	5442      	strb	r2, [r0, r1]
    }
   10aa6:	b001      	add	sp, #4
   10aa8:	4770      	bx	lr

00010aaa <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E>:
   10aaa:	b580      	push	{r7, lr}
   10aac:	b082      	sub	sp, #8
   10aae:	9101      	str	r1, [sp, #4]
   10ab0:	f000 f803 	bl	10aba <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE>
   10ab4:	e7ff      	b.n	10ab6 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h4d2a701a3a95fad3E+0xc>
   10ab6:	b002      	add	sp, #8
   10ab8:	bd80      	pop	{r7, pc}

00010aba <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE>:
   10aba:	b580      	push	{r7, lr}
   10abc:	b0a0      	sub	sp, #128	; 0x80
   10abe:	911c      	str	r1, [sp, #112]	; 0x70
   10ac0:	9103      	str	r1, [sp, #12]
   10ac2:	9002      	str	r0, [sp, #8]
   10ac4:	e7ff      	b.n	10ac6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc>
   10ac6:	9803      	ldr	r0, [sp, #12]
   10ac8:	68c1      	ldr	r1, [r0, #12]
   10aca:	2901      	cmp	r1, #1
   10acc:	d11e      	bne.n	10b0c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x52>
   10ace:	e7ff      	b.n	10ad0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x16>
   10ad0:	9803      	ldr	r0, [sp, #12]
   10ad2:	f100 0110 	add.w	r1, r0, #16
   10ad6:	911e      	str	r1, [sp, #120]	; 0x78
   10ad8:	a804      	add	r0, sp, #16
   10ada:	f000 f921 	bl	10d20 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>
   10ade:	e7ff      	b.n	10ae0 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x26>
   10ae0:	9804      	ldr	r0, [sp, #16]
   10ae2:	2801      	cmp	r0, #1
   10ae4:	d001      	beq.n	10aea <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x30>
   10ae6:	e7ff      	b.n	10ae8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x2e>
   10ae8:	e00f      	b.n	10b0a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x50>
   10aea:	9804      	ldr	r0, [sp, #16]
   10aec:	9905      	ldr	r1, [sp, #20]
   10aee:	9a06      	ldr	r2, [sp, #24]
   10af0:	9209      	str	r2, [sp, #36]	; 0x24
   10af2:	9108      	str	r1, [sp, #32]
   10af4:	9007      	str	r0, [sp, #28]
   10af6:	9807      	ldr	r0, [sp, #28]
   10af8:	9908      	ldr	r1, [sp, #32]
   10afa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10afc:	9b02      	ldr	r3, [sp, #8]
   10afe:	609a      	str	r2, [r3, #8]
   10b00:	6059      	str	r1, [r3, #4]
   10b02:	6018      	str	r0, [r3, #0]
   10b04:	e7ff      	b.n	10b06 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x4c>
   10b06:	b020      	add	sp, #128	; 0x80
   10b08:	bd80      	pop	{r7, pc}
   10b0a:	e7ff      	b.n	10b0c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x52>
   10b0c:	a80a      	add	r0, sp, #40	; 0x28
   10b0e:	9903      	ldr	r1, [sp, #12]
   10b10:	f000 f8f0 	bl	10cf4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE>
   10b14:	e7ff      	b.n	10b16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x5c>
   10b16:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b18:	2800      	cmp	r0, #0
   10b1a:	d012      	beq.n	10b42 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x88>
   10b1c:	e7ff      	b.n	10b1e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x64>
   10b1e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b20:	990c      	ldr	r1, [sp, #48]	; 0x30
   10b22:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   10b24:	9211      	str	r2, [sp, #68]	; 0x44
   10b26:	9110      	str	r1, [sp, #64]	; 0x40
   10b28:	900f      	str	r0, [sp, #60]	; 0x3c
   10b2a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10b2c:	9910      	ldr	r1, [sp, #64]	; 0x40
   10b2e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10b30:	921b      	str	r2, [sp, #108]	; 0x6c
   10b32:	911a      	str	r1, [sp, #104]	; 0x68
   10b34:	9019      	str	r0, [sp, #100]	; 0x64
   10b36:	a816      	add	r0, sp, #88	; 0x58
   10b38:	a919      	add	r1, sp, #100	; 0x64
   10b3a:	f000 f8d4 	bl	10ce6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE>
   10b3e:	e028      	b.n	10b92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd8>
   10b40:	defe      	udf	#254	; 0xfe
   10b42:	9803      	ldr	r0, [sp, #12]
   10b44:	301c      	adds	r0, #28
   10b46:	f7fb fd63 	bl	c610 <_ZN4core6option15Option$LT$T$GT$6as_mut17h3866f51e6ea0c99dE>
   10b4a:	9001      	str	r0, [sp, #4]
   10b4c:	e7ff      	b.n	10b4e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x94>
   10b4e:	9801      	ldr	r0, [sp, #4]
   10b50:	f7fb fd98 	bl	c684 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7a3371e7991cb79cE>
   10b54:	900e      	str	r0, [sp, #56]	; 0x38
   10b56:	e7ff      	b.n	10b58 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x9e>
   10b58:	980e      	ldr	r0, [sp, #56]	; 0x38
   10b5a:	fab0 f180 	clz	r1, r0
   10b5e:	0949      	lsrs	r1, r1, #5
   10b60:	2800      	cmp	r0, #0
   10b62:	d101      	bne.n	10b68 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xae>
   10b64:	e7ff      	b.n	10b66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xac>
   10b66:	e009      	b.n	10b7c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc2>
   10b68:	980e      	ldr	r0, [sp, #56]	; 0x38
   10b6a:	901f      	str	r0, [sp, #124]	; 0x7c
   10b6c:	9902      	ldr	r1, [sp, #8]
   10b6e:	9000      	str	r0, [sp, #0]
   10b70:	4608      	mov	r0, r1
   10b72:	9900      	ldr	r1, [sp, #0]
   10b74:	f000 f8d4 	bl	10d20 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>
   10b78:	e00a      	b.n	10b90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd6>
   10b7a:	defe      	udf	#254	; 0xfe
   10b7c:	f003 f97f 	bl	13e7e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
   10b80:	e7ff      	b.n	10b82 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc8>
   10b82:	9802      	ldr	r0, [sp, #8]
   10b84:	f7fb fd79 	bl	c67a <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h430caac74862e039E>
   10b88:	e7ff      	b.n	10b8a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd0>
   10b8a:	e7ff      	b.n	10b8c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd2>
   10b8c:	e7ff      	b.n	10b8e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd4>
   10b8e:	e7ba      	b.n	10b06 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x4c>
   10b90:	e7fc      	b.n	10b8c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xd2>
   10b92:	9816      	ldr	r0, [sp, #88]	; 0x58
   10b94:	9917      	ldr	r1, [sp, #92]	; 0x5c
   10b96:	9a18      	ldr	r2, [sp, #96]	; 0x60
   10b98:	9215      	str	r2, [sp, #84]	; 0x54
   10b9a:	9114      	str	r1, [sp, #80]	; 0x50
   10b9c:	9013      	str	r0, [sp, #76]	; 0x4c
   10b9e:	2001      	movs	r0, #1
   10ba0:	9012      	str	r0, [sp, #72]	; 0x48
   10ba2:	e7ff      	b.n	10ba4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xea>
   10ba4:	9812      	ldr	r0, [sp, #72]	; 0x48
   10ba6:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10ba8:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10baa:	9b15      	ldr	r3, [sp, #84]	; 0x54
   10bac:	f8dd c00c 	ldr.w	ip, [sp, #12]
   10bb0:	f8cc 3018 	str.w	r3, [ip, #24]
   10bb4:	f8cc 2014 	str.w	r2, [ip, #20]
   10bb8:	f8cc 1010 	str.w	r1, [ip, #16]
   10bbc:	f8cc 000c 	str.w	r0, [ip, #12]
   10bc0:	980a      	ldr	r0, [sp, #40]	; 0x28
   10bc2:	2801      	cmp	r0, #1
   10bc4:	d101      	bne.n	10bca <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x110>
   10bc6:	e7ff      	b.n	10bc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x10e>
   10bc8:	e77d      	b.n	10ac6 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0xc>
   10bca:	e7fd      	b.n	10bc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h2be338256cc9548fE+0x10e>

00010bcc <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E>:
   10bcc:	b5b0      	push	{r4, r5, r7, lr}
   10bce:	b090      	sub	sp, #64	; 0x40
   10bd0:	680a      	ldr	r2, [r1, #0]
   10bd2:	684b      	ldr	r3, [r1, #4]
   10bd4:	6889      	ldr	r1, [r1, #8]
   10bd6:	910f      	str	r1, [sp, #60]	; 0x3c
   10bd8:	930e      	str	r3, [sp, #56]	; 0x38
   10bda:	920d      	str	r2, [sp, #52]	; 0x34
   10bdc:	a902      	add	r1, sp, #8
   10bde:	aa0d      	add	r2, sp, #52	; 0x34
   10be0:	9001      	str	r0, [sp, #4]
   10be2:	4608      	mov	r0, r1
   10be4:	4611      	mov	r1, r2
   10be6:	f000 f80d 	bl	10c04 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE>
   10bea:	e7ff      	b.n	10bec <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E+0x20>
   10bec:	a802      	add	r0, sp, #8
   10bee:	9901      	ldr	r1, [sp, #4]
   10bf0:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
   10bf4:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
   10bf8:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10bfc:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10c00:	b010      	add	sp, #64	; 0x40
   10c02:	bdb0      	pop	{r4, r5, r7, pc}

00010c04 <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h956bec499bd3b07aE>:
   10c04:	b08b      	sub	sp, #44	; 0x2c
   10c06:	680a      	ldr	r2, [r1, #0]
   10c08:	684b      	ldr	r3, [r1, #4]
   10c0a:	6889      	ldr	r1, [r1, #8]
   10c0c:	9102      	str	r1, [sp, #8]
   10c0e:	9301      	str	r3, [sp, #4]
   10c10:	9200      	str	r2, [sp, #0]
   10c12:	2100      	movs	r1, #0
   10c14:	9103      	str	r1, [sp, #12]
   10c16:	9107      	str	r1, [sp, #28]
   10c18:	9900      	ldr	r1, [sp, #0]
   10c1a:	9a01      	ldr	r2, [sp, #4]
   10c1c:	9b02      	ldr	r3, [sp, #8]
   10c1e:	6083      	str	r3, [r0, #8]
   10c20:	6042      	str	r2, [r0, #4]
   10c22:	6001      	str	r1, [r0, #0]
   10c24:	9903      	ldr	r1, [sp, #12]
   10c26:	9a04      	ldr	r2, [sp, #16]
   10c28:	9b05      	ldr	r3, [sp, #20]
   10c2a:	f8dd c018 	ldr.w	ip, [sp, #24]
   10c2e:	f8c0 c018 	str.w	ip, [r0, #24]
   10c32:	6143      	str	r3, [r0, #20]
   10c34:	6102      	str	r2, [r0, #16]
   10c36:	60c1      	str	r1, [r0, #12]
   10c38:	9907      	ldr	r1, [sp, #28]
   10c3a:	9a08      	ldr	r2, [sp, #32]
   10c3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c3e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   10c42:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
   10c46:	6243      	str	r3, [r0, #36]	; 0x24
   10c48:	6202      	str	r2, [r0, #32]
   10c4a:	61c1      	str	r1, [r0, #28]
   10c4c:	b00b      	add	sp, #44	; 0x2c
   10c4e:	4770      	bx	lr

00010c50 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17had19db2520282693E>:
   10c50:	b5b0      	push	{r4, r5, r7, lr}
   10c52:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
   10c56:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
   10c5a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   10c5e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   10c62:	bdb0      	pop	{r4, r5, r7, pc}

00010c64 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E>:
   10c64:	b580      	push	{r7, lr}
   10c66:	b084      	sub	sp, #16
   10c68:	4601      	mov	r1, r0
   10c6a:	f88d 000f 	strb.w	r0, [sp, #15]
   10c6e:	9102      	str	r1, [sp, #8]
   10c70:	f003 fcef 	bl	14652 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>
   10c74:	9001      	str	r0, [sp, #4]
   10c76:	e7ff      	b.n	10c78 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17h0b920448a37fc341E+0x14>
   10c78:	9801      	ldr	r0, [sp, #4]
   10c7a:	b004      	add	sp, #16
   10c7c:	bd80      	pop	{r7, pc}

00010c7e <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E>:
   10c7e:	b580      	push	{r7, lr}
   10c80:	b086      	sub	sp, #24
   10c82:	460a      	mov	r2, r1
   10c84:	9004      	str	r0, [sp, #16]
   10c86:	f88d 1017 	strb.w	r1, [sp, #23]
   10c8a:	9203      	str	r2, [sp, #12]
   10c8c:	f000 fe35 	bl	118fa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   10c90:	9002      	str	r0, [sp, #8]
   10c92:	e7ff      	b.n	10c94 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x16>
   10c94:	9802      	ldr	r0, [sp, #8]
   10c96:	9903      	ldr	r1, [sp, #12]
   10c98:	f000 fe48 	bl	1192c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   10c9c:	9001      	str	r0, [sp, #4]
   10c9e:	e7ff      	b.n	10ca0 <_ZN4core4sync6atomic11AtomicUsize4load17h3320f43fa139de48E+0x22>
   10ca0:	9801      	ldr	r0, [sp, #4]
   10ca2:	b006      	add	sp, #24
   10ca4:	bd80      	pop	{r7, pc}

00010ca6 <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE>:
   10ca6:	b580      	push	{r7, lr}
   10ca8:	b084      	sub	sp, #16
   10caa:	680a      	ldr	r2, [r1, #0]
   10cac:	684b      	ldr	r3, [r1, #4]
   10cae:	6889      	ldr	r1, [r1, #8]
   10cb0:	9103      	str	r1, [sp, #12]
   10cb2:	9302      	str	r3, [sp, #8]
   10cb4:	9201      	str	r2, [sp, #4]
   10cb6:	a901      	add	r1, sp, #4
   10cb8:	f7ff ff88 	bl	10bcc <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17hf7b7027ee351a5b4E>
   10cbc:	e7ff      	b.n	10cbe <_ZN4core4iter6traits8iterator8Iterator7flatten17ha34ce885336863ffE+0x18>
   10cbe:	b004      	add	sp, #16
   10cc0:	bd80      	pop	{r7, pc}

00010cc2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E>:
   10cc2:	b083      	sub	sp, #12
   10cc4:	9100      	str	r1, [sp, #0]
   10cc6:	9201      	str	r2, [sp, #4]
   10cc8:	9302      	str	r3, [sp, #8]
   10cca:	6001      	str	r1, [r0, #0]
   10ccc:	6042      	str	r2, [r0, #4]
   10cce:	6083      	str	r3, [r0, #8]
   10cd0:	b003      	add	sp, #12
   10cd2:	4770      	bx	lr

00010cd4 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E>:
   10cd4:	b083      	sub	sp, #12
   10cd6:	9100      	str	r1, [sp, #0]
   10cd8:	9201      	str	r2, [sp, #4]
   10cda:	9302      	str	r3, [sp, #8]
   10cdc:	6001      	str	r1, [r0, #0]
   10cde:	6042      	str	r2, [r0, #4]
   10ce0:	6083      	str	r3, [r0, #8]
   10ce2:	b003      	add	sp, #12
   10ce4:	4770      	bx	lr

00010ce6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc7e73cb793d71c2aE>:
   10ce6:	680a      	ldr	r2, [r1, #0]
   10ce8:	684b      	ldr	r3, [r1, #4]
   10cea:	6889      	ldr	r1, [r1, #8]
   10cec:	6081      	str	r1, [r0, #8]
   10cee:	6043      	str	r3, [r0, #4]
   10cf0:	6002      	str	r2, [r0, #0]
   10cf2:	4770      	bx	lr

00010cf4 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE>:
   10cf4:	b580      	push	{r7, lr}
   10cf6:	b086      	sub	sp, #24
   10cf8:	9105      	str	r1, [sp, #20]
   10cfa:	9004      	str	r0, [sp, #16]
   10cfc:	4608      	mov	r0, r1
   10cfe:	9103      	str	r1, [sp, #12]
   10d00:	f000 fd13 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10d04:	9002      	str	r0, [sp, #8]
   10d06:	9101      	str	r1, [sp, #4]
   10d08:	e7ff      	b.n	10d0a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE+0x16>
   10d0a:	9803      	ldr	r0, [sp, #12]
   10d0c:	f100 0308 	add.w	r3, r0, #8
   10d10:	9804      	ldr	r0, [sp, #16]
   10d12:	9902      	ldr	r1, [sp, #8]
   10d14:	9a01      	ldr	r2, [sp, #4]
   10d16:	f7fb fba2 	bl	c45e <_ZN4core6option15Option$LT$T$GT$3map17h9d3fd01bad5caf4aE>
   10d1a:	e7ff      	b.n	10d1c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h9cfda26b22c645cdE+0x28>
   10d1c:	b006      	add	sp, #24
   10d1e:	bd80      	pop	{r7, pc}

00010d20 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE>:
   10d20:	b580      	push	{r7, lr}
   10d22:	b086      	sub	sp, #24
   10d24:	9105      	str	r1, [sp, #20]
   10d26:	9004      	str	r0, [sp, #16]
   10d28:	4608      	mov	r0, r1
   10d2a:	9103      	str	r1, [sp, #12]
   10d2c:	f000 fcfd 	bl	1172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
   10d30:	9002      	str	r0, [sp, #8]
   10d32:	9101      	str	r1, [sp, #4]
   10d34:	e7ff      	b.n	10d36 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE+0x16>
   10d36:	9803      	ldr	r0, [sp, #12]
   10d38:	f100 0308 	add.w	r3, r0, #8
   10d3c:	9804      	ldr	r0, [sp, #16]
   10d3e:	9902      	ldr	r1, [sp, #8]
   10d40:	9a01      	ldr	r2, [sp, #4]
   10d42:	f7fb fbda 	bl	c4fa <_ZN4core6option15Option$LT$T$GT$3map17hec9c4628eedc7f9eE>
   10d46:	e7ff      	b.n	10d48 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17ha982fd823125d67dE+0x28>
   10d48:	b006      	add	sp, #24
   10d4a:	bd80      	pop	{r7, pc}

00010d4c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E>:
   10d4c:	b580      	push	{r7, lr}
   10d4e:	b086      	sub	sp, #24
   10d50:	9005      	str	r0, [sp, #20]
   10d52:	2100      	movs	r1, #0
   10d54:	f88d 1013 	strb.w	r1, [sp, #19]
   10d58:	1c41      	adds	r1, r0, #1
   10d5a:	9002      	str	r0, [sp, #8]
   10d5c:	f003 fc9e 	bl	1469c <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>
   10d60:	9001      	str	r0, [sp, #4]
   10d62:	e7ff      	b.n	10d64 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x18>
   10d64:	9801      	ldr	r0, [sp, #4]
   10d66:	07c1      	lsls	r1, r0, #31
   10d68:	2900      	cmp	r1, #0
   10d6a:	d104      	bne.n	10d76 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x2a>
   10d6c:	e7ff      	b.n	10d6e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x22>
   10d6e:	2000      	movs	r0, #0
   10d70:	f88d 000c 	strb.w	r0, [sp, #12]
   10d74:	e02c      	b.n	10dd0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10d76:	2001      	movs	r0, #1
   10d78:	f88d 0013 	strb.w	r0, [sp, #19]
   10d7c:	9902      	ldr	r1, [sp, #8]
   10d7e:	9000      	str	r0, [sp, #0]
   10d80:	4608      	mov	r0, r1
   10d82:	9900      	ldr	r1, [sp, #0]
   10d84:	f003 fc96 	bl	146b4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>
   10d88:	f88d 1011 	strb.w	r1, [sp, #17]
   10d8c:	f88d 0010 	strb.w	r0, [sp, #16]
   10d90:	e7ff      	b.n	10d92 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x46>
   10d92:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10d96:	07c0      	lsls	r0, r0, #31
   10d98:	2800      	cmp	r0, #0
   10d9a:	d104      	bne.n	10da6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x5a>
   10d9c:	e7ff      	b.n	10d9e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x52>
   10d9e:	2000      	movs	r0, #0
   10da0:	f88d 000c 	strb.w	r0, [sp, #12]
   10da4:	e029      	b.n	10dfa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10da6:	2000      	movs	r0, #0
   10da8:	f88d 0013 	strb.w	r0, [sp, #19]
   10dac:	f89d 0011 	ldrb.w	r0, [sp, #17]
   10db0:	f88d 0012 	strb.w	r0, [sp, #18]
   10db4:	f10d 0012 	add.w	r0, sp, #18
   10db8:	9902      	ldr	r1, [sp, #8]
   10dba:	f003 fc51 	bl	14660 <_ZN4core3mem4swap17h206518364108b51fE>
   10dbe:	e7ff      	b.n	10dc0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x74>
   10dc0:	f89d 0012 	ldrb.w	r0, [sp, #18]
   10dc4:	f88d 000d 	strb.w	r0, [sp, #13]
   10dc8:	2001      	movs	r0, #1
   10dca:	f88d 000c 	strb.w	r0, [sp, #12]
   10dce:	e014      	b.n	10dfa <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xae>
   10dd0:	f89d 000c 	ldrb.w	r0, [sp, #12]
   10dd4:	f89d 100d 	ldrb.w	r1, [sp, #13]
   10dd8:	b006      	add	sp, #24
   10dda:	bd80      	pop	{r7, pc}
   10ddc:	2000      	movs	r0, #0
   10dde:	f88d 0013 	strb.w	r0, [sp, #19]
   10de2:	e7f5      	b.n	10dd0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x84>
   10de4:	f89d 0013 	ldrb.w	r0, [sp, #19]
   10de8:	07c0      	lsls	r0, r0, #31
   10dea:	2800      	cmp	r0, #0
   10dec:	d0f6      	beq.n	10ddc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10dee:	e7ff      	b.n	10df0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xa4>
   10df0:	2000      	movs	r0, #0
   10df2:	f88d 0013 	strb.w	r0, [sp, #19]
   10df6:	e7f1      	b.n	10ddc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10df8:	e7f0      	b.n	10ddc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x90>
   10dfa:	f89d 0010 	ldrb.w	r0, [sp, #16]
   10dfe:	07c0      	lsls	r0, r0, #31
   10e00:	2800      	cmp	r0, #0
   10e02:	d1ef      	bne.n	10de4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0x98>
   10e04:	e7f8      	b.n	10df8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17hd2cdea3f31a93e13E+0xac>

00010e06 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE>:
   10e06:	b580      	push	{r7, lr}
   10e08:	b084      	sub	sp, #16
   10e0a:	9101      	str	r1, [sp, #4]
   10e0c:	9202      	str	r2, [sp, #8]
   10e0e:	9303      	str	r3, [sp, #12]
   10e10:	f7ff ff57 	bl	10cc2 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h437121d4373158a5E>
   10e14:	e7ff      	b.n	10e16 <_ZN4core4iter6traits8iterator8Iterator3map17h40aa6bcbda6fa69bE+0x10>
   10e16:	b004      	add	sp, #16
   10e18:	bd80      	pop	{r7, pc}

00010e1a <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE>:
   10e1a:	b580      	push	{r7, lr}
   10e1c:	b084      	sub	sp, #16
   10e1e:	9101      	str	r1, [sp, #4]
   10e20:	9202      	str	r2, [sp, #8]
   10e22:	9303      	str	r3, [sp, #12]
   10e24:	f7ff ff56 	bl	10cd4 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h6d2e3c3113406242E>
   10e28:	e7ff      	b.n	10e2a <_ZN4core4iter6traits8iterator8Iterator3map17h88e9f4c09ee31b4dE+0x10>
   10e2a:	b004      	add	sp, #16
   10e2c:	bd80      	pop	{r7, pc}

00010e2e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h179b2f35245cc0dcE>:
   10e2e:	b081      	sub	sp, #4
   10e30:	460a      	mov	r2, r1
   10e32:	4603      	mov	r3, r0
   10e34:	f88d 0000 	strb.w	r0, [sp]
   10e38:	f88d 1001 	strb.w	r1, [sp, #1]
   10e3c:	b001      	add	sp, #4
   10e3e:	4770      	bx	lr

00010e40 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6c8f50f7f2b7e54fE>:
   10e40:	b580      	push	{r7, lr}
   10e42:	b08a      	sub	sp, #40	; 0x28
   10e44:	9007      	str	r0, [sp, #28]
   10e46:	9108      	str	r1, [sp, #32]
   10e48:	9209      	str	r2, [sp, #36]	; 0x24
   10e4a:	2300      	movs	r3, #0
   10e4c:	9305      	str	r3, [sp, #20]
   10e4e:	9006      	str	r0, [sp, #24]
   10e50:	9805      	ldr	r0, [sp, #20]
   10e52:	9b06      	ldr	r3, [sp, #24]
   10e54:	9104      	str	r1, [sp, #16]
   10e56:	4619      	mov	r1, r3
   10e58:	9b04      	ldr	r3, [sp, #16]
   10e5a:	9203      	str	r2, [sp, #12]
   10e5c:	461a      	mov	r2, r3
   10e5e:	9b03      	ldr	r3, [sp, #12]
   10e60:	f000 f908 	bl	11074 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE>
   10e64:	9002      	str	r0, [sp, #8]
   10e66:	9101      	str	r1, [sp, #4]
   10e68:	e7ff      	b.n	10e6a <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6c8f50f7f2b7e54fE+0x2a>
   10e6a:	9802      	ldr	r0, [sp, #8]
   10e6c:	9901      	ldr	r1, [sp, #4]
   10e6e:	b00a      	add	sp, #40	; 0x28
   10e70:	bd80      	pop	{r7, pc}

00010e72 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2c0667b2b5cae01eE>:
   10e72:	b580      	push	{r7, lr}
   10e74:	b084      	sub	sp, #16
   10e76:	9002      	str	r0, [sp, #8]
   10e78:	9103      	str	r1, [sp, #12]
   10e7a:	6800      	ldr	r0, [r0, #0]
   10e7c:	f000 f815 	bl	10eaa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E>
   10e80:	9001      	str	r0, [sp, #4]
   10e82:	e7ff      	b.n	10e84 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2c0667b2b5cae01eE+0x12>
   10e84:	9801      	ldr	r0, [sp, #4]
   10e86:	f000 0001 	and.w	r0, r0, #1
   10e8a:	b004      	add	sp, #16
   10e8c:	bd80      	pop	{r7, pc}

00010e8e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf36c1f7e73dea779E>:
   10e8e:	b580      	push	{r7, lr}
   10e90:	b084      	sub	sp, #16
   10e92:	9002      	str	r0, [sp, #8]
   10e94:	9103      	str	r1, [sp, #12]
   10e96:	6800      	ldr	r0, [r0, #0]
   10e98:	f000 f83e 	bl	10f18 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E>
   10e9c:	9001      	str	r0, [sp, #4]
   10e9e:	e7ff      	b.n	10ea0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17hf36c1f7e73dea779E+0x12>
   10ea0:	9801      	ldr	r0, [sp, #4]
   10ea2:	f000 0001 	and.w	r0, r0, #1
   10ea6:	b004      	add	sp, #16
   10ea8:	bd80      	pop	{r7, pc}

00010eaa <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E>:
   10eaa:	b580      	push	{r7, lr}
   10eac:	b088      	sub	sp, #32
   10eae:	9006      	str	r0, [sp, #24]
   10eb0:	9107      	str	r1, [sp, #28]
   10eb2:	9004      	str	r0, [sp, #16]
   10eb4:	4608      	mov	r0, r1
   10eb6:	9103      	str	r1, [sp, #12]
   10eb8:	f004 fff1 	bl	15e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   10ebc:	9002      	str	r0, [sp, #8]
   10ebe:	e7ff      	b.n	10ec0 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x16>
   10ec0:	9802      	ldr	r0, [sp, #8]
   10ec2:	07c1      	lsls	r1, r0, #31
   10ec4:	2900      	cmp	r1, #0
   10ec6:	d105      	bne.n	10ed4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x2a>
   10ec8:	e7ff      	b.n	10eca <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x20>
   10eca:	9803      	ldr	r0, [sp, #12]
   10ecc:	f004 ffeb 	bl	15ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   10ed0:	9001      	str	r0, [sp, #4]
   10ed2:	e007      	b.n	10ee4 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x3a>
   10ed4:	9804      	ldr	r0, [sp, #16]
   10ed6:	9903      	ldr	r1, [sp, #12]
   10ed8:	f005 fcef 	bl	168ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   10edc:	f88d 0017 	strb.w	r0, [sp, #23]
   10ee0:	e7ff      	b.n	10ee2 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x38>
   10ee2:	e015      	b.n	10f10 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x66>
   10ee4:	9801      	ldr	r0, [sp, #4]
   10ee6:	07c1      	lsls	r1, r0, #31
   10ee8:	2900      	cmp	r1, #0
   10eea:	d107      	bne.n	10efc <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x52>
   10eec:	e7ff      	b.n	10eee <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x44>
   10eee:	9804      	ldr	r0, [sp, #16]
   10ef0:	9903      	ldr	r1, [sp, #12]
   10ef2:	f005 fe75 	bl	16be0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   10ef6:	f88d 0017 	strb.w	r0, [sp, #23]
   10efa:	e007      	b.n	10f0c <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x62>
   10efc:	9804      	ldr	r0, [sp, #16]
   10efe:	9903      	ldr	r1, [sp, #12]
   10f00:	f005 fd0a 	bl	16918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   10f04:	f88d 0017 	strb.w	r0, [sp, #23]
   10f08:	e7ff      	b.n	10f0a <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x60>
   10f0a:	e000      	b.n	10f0e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x64>
   10f0c:	e7ff      	b.n	10f0e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x64>
   10f0e:	e7ff      	b.n	10f10 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h7f31954517468e24E+0x66>
   10f10:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10f14:	b008      	add	sp, #32
   10f16:	bd80      	pop	{r7, pc}

00010f18 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E>:
   10f18:	b580      	push	{r7, lr}
   10f1a:	b088      	sub	sp, #32
   10f1c:	9006      	str	r0, [sp, #24]
   10f1e:	9107      	str	r1, [sp, #28]
   10f20:	9004      	str	r0, [sp, #16]
   10f22:	4608      	mov	r0, r1
   10f24:	9103      	str	r1, [sp, #12]
   10f26:	f004 ffba 	bl	15e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   10f2a:	9002      	str	r0, [sp, #8]
   10f2c:	e7ff      	b.n	10f2e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x16>
   10f2e:	9802      	ldr	r0, [sp, #8]
   10f30:	07c1      	lsls	r1, r0, #31
   10f32:	2900      	cmp	r1, #0
   10f34:	d105      	bne.n	10f42 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x2a>
   10f36:	e7ff      	b.n	10f38 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x20>
   10f38:	9803      	ldr	r0, [sp, #12]
   10f3a:	f004 ffb4 	bl	15ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   10f3e:	9001      	str	r0, [sp, #4]
   10f40:	e007      	b.n	10f52 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x3a>
   10f42:	9804      	ldr	r0, [sp, #16]
   10f44:	9903      	ldr	r1, [sp, #12]
   10f46:	f005 fd75 	bl	16a34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   10f4a:	f88d 0017 	strb.w	r0, [sp, #23]
   10f4e:	e7ff      	b.n	10f50 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x38>
   10f50:	e015      	b.n	10f7e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x66>
   10f52:	9801      	ldr	r0, [sp, #4]
   10f54:	07c1      	lsls	r1, r0, #31
   10f56:	2900      	cmp	r1, #0
   10f58:	d107      	bne.n	10f6a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x52>
   10f5a:	e7ff      	b.n	10f5c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x44>
   10f5c:	9804      	ldr	r0, [sp, #16]
   10f5e:	9903      	ldr	r1, [sp, #12]
   10f60:	f005 fef5 	bl	16d4e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   10f64:	f88d 0017 	strb.w	r0, [sp, #23]
   10f68:	e007      	b.n	10f7a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x62>
   10f6a:	9804      	ldr	r0, [sp, #16]
   10f6c:	9903      	ldr	r1, [sp, #12]
   10f6e:	f005 fdcc 	bl	16b0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   10f72:	f88d 0017 	strb.w	r0, [sp, #23]
   10f76:	e7ff      	b.n	10f78 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x60>
   10f78:	e000      	b.n	10f7c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x64>
   10f7a:	e7ff      	b.n	10f7c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x64>
   10f7c:	e7ff      	b.n	10f7e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h73b4b4eb965a1544E+0x66>
   10f7e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   10f82:	b008      	add	sp, #32
   10f84:	bd80      	pop	{r7, pc}

00010f86 <_ZN4core3ptr24slice_from_raw_parts_mut17h31e2ffef0517a991E>:
   10f86:	b086      	sub	sp, #24
   10f88:	9004      	str	r0, [sp, #16]
   10f8a:	9105      	str	r1, [sp, #20]
   10f8c:	9002      	str	r0, [sp, #8]
   10f8e:	9103      	str	r1, [sp, #12]
   10f90:	9802      	ldr	r0, [sp, #8]
   10f92:	9903      	ldr	r1, [sp, #12]
   10f94:	9000      	str	r0, [sp, #0]
   10f96:	9101      	str	r1, [sp, #4]
   10f98:	9800      	ldr	r0, [sp, #0]
   10f9a:	9901      	ldr	r1, [sp, #4]
   10f9c:	b006      	add	sp, #24
   10f9e:	4770      	bx	lr

00010fa0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hafdbd8f68c60a5deE>:
   10fa0:	b580      	push	{r7, lr}
   10fa2:	b084      	sub	sp, #16
   10fa4:	9002      	str	r0, [sp, #8]
   10fa6:	9103      	str	r1, [sp, #12]
   10fa8:	f000 f805 	bl	10fb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h503d5702cc1a9c8dE>
   10fac:	9001      	str	r0, [sp, #4]
   10fae:	e7ff      	b.n	10fb0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hafdbd8f68c60a5deE+0x10>
   10fb0:	9801      	ldr	r0, [sp, #4]
   10fb2:	b004      	add	sp, #16
   10fb4:	bd80      	pop	{r7, pc}

00010fb6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h503d5702cc1a9c8dE>:
   10fb6:	b084      	sub	sp, #16
   10fb8:	9001      	str	r0, [sp, #4]
   10fba:	9102      	str	r1, [sp, #8]
   10fbc:	4408      	add	r0, r1
   10fbe:	9003      	str	r0, [sp, #12]
   10fc0:	9803      	ldr	r0, [sp, #12]
   10fc2:	9000      	str	r0, [sp, #0]
   10fc4:	e7ff      	b.n	10fc6 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h503d5702cc1a9c8dE+0x10>
   10fc6:	9800      	ldr	r0, [sp, #0]
   10fc8:	b004      	add	sp, #16
   10fca:	4770      	bx	lr

00010fcc <_ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE>:
   10fcc:	b580      	push	{r7, lr}
   10fce:	b084      	sub	sp, #16
   10fd0:	9002      	str	r0, [sp, #8]
   10fd2:	9103      	str	r1, [sp, #12]
   10fd4:	f7ff ffd7 	bl	10f86 <_ZN4core3ptr24slice_from_raw_parts_mut17h31e2ffef0517a991E>
   10fd8:	9001      	str	r0, [sp, #4]
   10fda:	9100      	str	r1, [sp, #0]
   10fdc:	e7ff      	b.n	10fde <_ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE+0x12>
   10fde:	9801      	ldr	r0, [sp, #4]
   10fe0:	9900      	ldr	r1, [sp, #0]
   10fe2:	b004      	add	sp, #16
   10fe4:	bd80      	pop	{r7, pc}

00010fe6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h59fb34749d9b73deE>:
   10fe6:	b082      	sub	sp, #8
   10fe8:	9000      	str	r0, [sp, #0]
   10fea:	9101      	str	r1, [sp, #4]
   10fec:	b002      	add	sp, #8
   10fee:	4770      	bx	lr

00010ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha74ffb5bb738cd30E>:
   10ff0:	b084      	sub	sp, #16
   10ff2:	9002      	str	r0, [sp, #8]
   10ff4:	9103      	str	r1, [sp, #12]
   10ff6:	9000      	str	r0, [sp, #0]
   10ff8:	9101      	str	r1, [sp, #4]
   10ffa:	9801      	ldr	r0, [sp, #4]
   10ffc:	b004      	add	sp, #16
   10ffe:	4770      	bx	lr

00011000 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hc956e9044d663b76E>:
   11000:	b082      	sub	sp, #8
   11002:	9000      	str	r0, [sp, #0]
   11004:	9101      	str	r1, [sp, #4]
   11006:	b002      	add	sp, #8
   11008:	4770      	bx	lr

0001100a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h81569b4ba1b6bc4bE>:
   1100a:	b580      	push	{r7, lr}
   1100c:	b088      	sub	sp, #32
   1100e:	9005      	str	r0, [sp, #20]
   11010:	9106      	str	r1, [sp, #24]
   11012:	9207      	str	r2, [sp, #28]
   11014:	9004      	str	r0, [sp, #16]
   11016:	4610      	mov	r0, r2
   11018:	9a04      	ldr	r2, [sp, #16]
   1101a:	9103      	str	r1, [sp, #12]
   1101c:	4611      	mov	r1, r2
   1101e:	9a03      	ldr	r2, [sp, #12]
   11020:	f7ff ff0e 	bl	10e40 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h6c8f50f7f2b7e54fE>
   11024:	9002      	str	r0, [sp, #8]
   11026:	9101      	str	r1, [sp, #4]
   11028:	e7ff      	b.n	1102a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h81569b4ba1b6bc4bE+0x20>
   1102a:	9802      	ldr	r0, [sp, #8]
   1102c:	9901      	ldr	r1, [sp, #4]
   1102e:	b008      	add	sp, #32
   11030:	bd80      	pop	{r7, pc}

00011032 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E>:
   11032:	b580      	push	{r7, lr}
   11034:	b08a      	sub	sp, #40	; 0x28
   11036:	9006      	str	r0, [sp, #24]
   11038:	9107      	str	r1, [sp, #28]
   1103a:	9208      	str	r2, [sp, #32]
   1103c:	9309      	str	r3, [sp, #36]	; 0x24
   1103e:	9005      	str	r0, [sp, #20]
   11040:	4610      	mov	r0, r2
   11042:	9104      	str	r1, [sp, #16]
   11044:	4619      	mov	r1, r3
   11046:	f7ff ffce 	bl	10fe6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h59fb34749d9b73deE>
   1104a:	9003      	str	r0, [sp, #12]
   1104c:	e7ff      	b.n	1104e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E+0x1c>
   1104e:	9803      	ldr	r0, [sp, #12]
   11050:	9905      	ldr	r1, [sp, #20]
   11052:	f7ff ffa5 	bl	10fa0 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17hafdbd8f68c60a5deE>
   11056:	9002      	str	r0, [sp, #8]
   11058:	e7ff      	b.n	1105a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E+0x28>
   1105a:	9804      	ldr	r0, [sp, #16]
   1105c:	9905      	ldr	r1, [sp, #20]
   1105e:	1a41      	subs	r1, r0, r1
   11060:	9802      	ldr	r0, [sp, #8]
   11062:	f7ff ffb3 	bl	10fcc <_ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE>
   11066:	9001      	str	r0, [sp, #4]
   11068:	9100      	str	r1, [sp, #0]
   1106a:	e7ff      	b.n	1106c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E+0x3a>
   1106c:	9801      	ldr	r0, [sp, #4]
   1106e:	9900      	ldr	r1, [sp, #0]
   11070:	b00a      	add	sp, #40	; 0x28
   11072:	bd80      	pop	{r7, pc}

00011074 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE>:
   11074:	b580      	push	{r7, lr}
   11076:	b08c      	sub	sp, #48	; 0x30
   11078:	9008      	str	r0, [sp, #32]
   1107a:	9109      	str	r1, [sp, #36]	; 0x24
   1107c:	920a      	str	r2, [sp, #40]	; 0x28
   1107e:	930b      	str	r3, [sp, #44]	; 0x2c
   11080:	4288      	cmp	r0, r1
   11082:	9307      	str	r3, [sp, #28]
   11084:	9206      	str	r2, [sp, #24]
   11086:	9105      	str	r1, [sp, #20]
   11088:	9004      	str	r0, [sp, #16]
   1108a:	d806      	bhi.n	1109a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x26>
   1108c:	e7ff      	b.n	1108e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x1a>
   1108e:	9806      	ldr	r0, [sp, #24]
   11090:	9907      	ldr	r1, [sp, #28]
   11092:	f7ff ffad 	bl	10ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha74ffb5bb738cd30E>
   11096:	9003      	str	r0, [sp, #12]
   11098:	e004      	b.n	110a4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x30>
   1109a:	9804      	ldr	r0, [sp, #16]
   1109c:	9905      	ldr	r1, [sp, #20]
   1109e:	f004 ffd2 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   110a2:	defe      	udf	#254	; 0xfe
   110a4:	9805      	ldr	r0, [sp, #20]
   110a6:	9903      	ldr	r1, [sp, #12]
   110a8:	4288      	cmp	r0, r1
   110aa:	d809      	bhi.n	110c0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x4c>
   110ac:	e7ff      	b.n	110ae <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x3a>
   110ae:	9804      	ldr	r0, [sp, #16]
   110b0:	9905      	ldr	r1, [sp, #20]
   110b2:	9a06      	ldr	r2, [sp, #24]
   110b4:	9b07      	ldr	r3, [sp, #28]
   110b6:	f7ff ffbc 	bl	11032 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hdc6a8eb27d83d7c8E>
   110ba:	9002      	str	r0, [sp, #8]
   110bc:	9101      	str	r1, [sp, #4]
   110be:	e00a      	b.n	110d6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x62>
   110c0:	9806      	ldr	r0, [sp, #24]
   110c2:	9907      	ldr	r1, [sp, #28]
   110c4:	f7ff ff94 	bl	10ff0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17ha74ffb5bb738cd30E>
   110c8:	9000      	str	r0, [sp, #0]
   110ca:	e7ff      	b.n	110cc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE+0x58>
   110cc:	9805      	ldr	r0, [sp, #20]
   110ce:	9900      	ldr	r1, [sp, #0]
   110d0:	f004 ff97 	bl	16002 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   110d4:	defe      	udf	#254	; 0xfe
   110d6:	9802      	ldr	r0, [sp, #8]
   110d8:	9901      	ldr	r1, [sp, #4]
   110da:	b00c      	add	sp, #48	; 0x30
   110dc:	bd80      	pop	{r7, pc}

000110de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   110de:	b084      	sub	sp, #16
   110e0:	9001      	str	r0, [sp, #4]
   110e2:	9102      	str	r1, [sp, #8]
   110e4:	4408      	add	r0, r1
   110e6:	9003      	str	r0, [sp, #12]
   110e8:	9803      	ldr	r0, [sp, #12]
   110ea:	9000      	str	r0, [sp, #0]
   110ec:	e7ff      	b.n	110ee <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   110ee:	9800      	ldr	r0, [sp, #0]
   110f0:	b004      	add	sp, #16
   110f2:	4770      	bx	lr

000110f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   110f4:	b082      	sub	sp, #8
   110f6:	9001      	str	r0, [sp, #4]
   110f8:	9000      	str	r0, [sp, #0]
   110fa:	e7ff      	b.n	110fc <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   110fc:	9800      	ldr	r0, [sp, #0]
   110fe:	fab0 f180 	clz	r1, r0
   11102:	0948      	lsrs	r0, r1, #5
   11104:	b002      	add	sp, #8
   11106:	4770      	bx	lr

00011108 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   11108:	b082      	sub	sp, #8
   1110a:	9001      	str	r0, [sp, #4]
   1110c:	9000      	str	r0, [sp, #0]
   1110e:	9800      	ldr	r0, [sp, #0]
   11110:	b002      	add	sp, #8
   11112:	4770      	bx	lr

00011114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   11114:	b081      	sub	sp, #4
   11116:	9000      	str	r0, [sp, #0]
   11118:	b001      	add	sp, #4
   1111a:	4770      	bx	lr

0001111c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   1111c:	b580      	push	{r7, lr}
   1111e:	b084      	sub	sp, #16
   11120:	9002      	str	r0, [sp, #8]
   11122:	9103      	str	r1, [sp, #12]
   11124:	f000 f805 	bl	11132 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11128:	9001      	str	r0, [sp, #4]
   1112a:	e7ff      	b.n	1112c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   1112c:	9801      	ldr	r0, [sp, #4]
   1112e:	b004      	add	sp, #16
   11130:	bd80      	pop	{r7, pc}

00011132 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   11132:	b084      	sub	sp, #16
   11134:	9001      	str	r0, [sp, #4]
   11136:	9102      	str	r1, [sp, #8]
   11138:	4408      	add	r0, r1
   1113a:	9003      	str	r0, [sp, #12]
   1113c:	9803      	ldr	r0, [sp, #12]
   1113e:	9000      	str	r0, [sp, #0]
   11140:	e7ff      	b.n	11142 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   11142:	9800      	ldr	r0, [sp, #0]
   11144:	b004      	add	sp, #16
   11146:	4770      	bx	lr

00011148 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   11148:	b082      	sub	sp, #8
   1114a:	9001      	str	r0, [sp, #4]
   1114c:	9000      	str	r0, [sp, #0]
   1114e:	e7ff      	b.n	11150 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   11150:	9800      	ldr	r0, [sp, #0]
   11152:	fab0 f180 	clz	r1, r0
   11156:	0948      	lsrs	r0, r1, #5
   11158:	b002      	add	sp, #8
   1115a:	4770      	bx	lr

0001115c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   1115c:	b580      	push	{r7, lr}
   1115e:	b090      	sub	sp, #64	; 0x40
   11160:	900c      	str	r0, [sp, #48]	; 0x30
   11162:	910d      	str	r1, [sp, #52]	; 0x34
   11164:	9007      	str	r0, [sp, #28]
   11166:	9106      	str	r1, [sp, #24]
   11168:	f000 ff6c 	bl	12044 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   1116c:	4601      	mov	r1, r0
   1116e:	900e      	str	r0, [sp, #56]	; 0x38
   11170:	9105      	str	r1, [sp, #20]
   11172:	e7ff      	b.n	11174 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   11174:	9805      	ldr	r0, [sp, #20]
   11176:	f7ff ffe7 	bl	11148 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   1117a:	e7ff      	b.n	1117c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   1117c:	e7ff      	b.n	1117e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   1117e:	2001      	movs	r0, #1
   11180:	900f      	str	r0, [sp, #60]	; 0x3c
   11182:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11184:	9004      	str	r0, [sp, #16]
   11186:	e7ff      	b.n	11188 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   11188:	9804      	ldr	r0, [sp, #16]
   1118a:	2800      	cmp	r0, #0
   1118c:	d006      	beq.n	1119c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   1118e:	e7ff      	b.n	11190 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   11190:	9807      	ldr	r0, [sp, #28]
   11192:	9906      	ldr	r1, [sp, #24]
   11194:	f000 ff4e 	bl	12034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   11198:	9003      	str	r0, [sp, #12]
   1119a:	e00e      	b.n	111ba <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1119c:	9807      	ldr	r0, [sp, #28]
   1119e:	9906      	ldr	r1, [sp, #24]
   111a0:	f000 ff48 	bl	12034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   111a4:	9002      	str	r0, [sp, #8]
   111a6:	e7ff      	b.n	111a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   111a8:	9805      	ldr	r0, [sp, #20]
   111aa:	9902      	ldr	r1, [sp, #8]
   111ac:	f7ff ffb6 	bl	1111c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   111b0:	9001      	str	r0, [sp, #4]
   111b2:	e7ff      	b.n	111b4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   111b4:	9801      	ldr	r0, [sp, #4]
   111b6:	900a      	str	r0, [sp, #40]	; 0x28
   111b8:	e006      	b.n	111c8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   111ba:	9805      	ldr	r0, [sp, #20]
   111bc:	9903      	ldr	r1, [sp, #12]
   111be:	f000 ff16 	bl	11fee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   111c2:	900a      	str	r0, [sp, #40]	; 0x28
   111c4:	e7ff      	b.n	111c6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   111c6:	e7ff      	b.n	111c8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   111c8:	9805      	ldr	r0, [sp, #20]
   111ca:	f7ff ff9d 	bl	11108 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   111ce:	9000      	str	r0, [sp, #0]
   111d0:	e7ff      	b.n	111d2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   111d2:	980a      	ldr	r0, [sp, #40]	; 0x28
   111d4:	9900      	ldr	r1, [sp, #0]
   111d6:	9108      	str	r1, [sp, #32]
   111d8:	9009      	str	r0, [sp, #36]	; 0x24
   111da:	9808      	ldr	r0, [sp, #32]
   111dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   111de:	b010      	add	sp, #64	; 0x40
   111e0:	bd80      	pop	{r7, pc}

000111e2 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   111e2:	b081      	sub	sp, #4
   111e4:	b001      	add	sp, #4
   111e6:	4770      	bx	lr

000111e8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   111e8:	b580      	push	{r7, lr}
   111ea:	b08e      	sub	sp, #56	; 0x38
   111ec:	9007      	str	r0, [sp, #28]
   111ee:	6801      	ldr	r1, [r0, #0]
   111f0:	9005      	str	r0, [sp, #20]
   111f2:	4608      	mov	r0, r1
   111f4:	f7ff ff8e 	bl	11114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   111f8:	9004      	str	r0, [sp, #16]
   111fa:	e7ff      	b.n	111fc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   111fc:	9804      	ldr	r0, [sp, #16]
   111fe:	f7ff ff79 	bl	110f4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   11202:	e7ff      	b.n	11204 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   11204:	e7ff      	b.n	11206 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   11206:	2001      	movs	r0, #1
   11208:	9008      	str	r0, [sp, #32]
   1120a:	9808      	ldr	r0, [sp, #32]
   1120c:	9003      	str	r0, [sp, #12]
   1120e:	e7ff      	b.n	11210 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   11210:	9803      	ldr	r0, [sp, #12]
   11212:	2800      	cmp	r0, #0
   11214:	d007      	beq.n	11226 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11216:	e7ff      	b.n	11218 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   11218:	9805      	ldr	r0, [sp, #20]
   1121a:	6840      	ldr	r0, [r0, #4]
   1121c:	f7ff ff94 	bl	11148 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   11220:	e7ff      	b.n	11222 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   11222:	e7ff      	b.n	11224 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   11224:	e7ff      	b.n	11226 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   11226:	9805      	ldr	r0, [sp, #20]
   11228:	6800      	ldr	r0, [r0, #0]
   1122a:	f7ff ff73 	bl	11114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   1122e:	9002      	str	r0, [sp, #8]
   11230:	e7ff      	b.n	11232 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   11232:	9805      	ldr	r0, [sp, #20]
   11234:	6841      	ldr	r1, [r0, #4]
   11236:	9a02      	ldr	r2, [sp, #8]
   11238:	428a      	cmp	r2, r1
   1123a:	d02e      	beq.n	1129a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   1123c:	e7ff      	b.n	1123e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   1123e:	9805      	ldr	r0, [sp, #20]
   11240:	900a      	str	r0, [sp, #40]	; 0x28
   11242:	2101      	movs	r1, #1
   11244:	910b      	str	r1, [sp, #44]	; 0x2c
   11246:	910d      	str	r1, [sp, #52]	; 0x34
   11248:	990d      	ldr	r1, [sp, #52]	; 0x34
   1124a:	2900      	cmp	r1, #0
   1124c:	d015      	beq.n	1127a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   1124e:	e7ff      	b.n	11250 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   11250:	9805      	ldr	r0, [sp, #20]
   11252:	6800      	ldr	r0, [r0, #0]
   11254:	f7ff ff5e 	bl	11114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11258:	900c      	str	r0, [sp, #48]	; 0x30
   1125a:	9905      	ldr	r1, [sp, #20]
   1125c:	680a      	ldr	r2, [r1, #0]
   1125e:	9001      	str	r0, [sp, #4]
   11260:	4610      	mov	r0, r2
   11262:	f7ff ff57 	bl	11114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11266:	2101      	movs	r1, #1
   11268:	f7ff ff39 	bl	110de <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   1126c:	f7ff ff4c 	bl	11108 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   11270:	9905      	ldr	r1, [sp, #20]
   11272:	6008      	str	r0, [r1, #0]
   11274:	9801      	ldr	r0, [sp, #4]
   11276:	9009      	str	r0, [sp, #36]	; 0x24
   11278:	e00c      	b.n	11294 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   1127a:	9805      	ldr	r0, [sp, #20]
   1127c:	6840      	ldr	r0, [r0, #4]
   1127e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   11282:	f7ff ff56 	bl	11132 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   11286:	9905      	ldr	r1, [sp, #20]
   11288:	6048      	str	r0, [r1, #4]
   1128a:	6808      	ldr	r0, [r1, #0]
   1128c:	f7ff ff42 	bl	11114 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   11290:	9009      	str	r0, [sp, #36]	; 0x24
   11292:	e7ff      	b.n	11294 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   11294:	9809      	ldr	r0, [sp, #36]	; 0x24
   11296:	9000      	str	r0, [sp, #0]
   11298:	e002      	b.n	112a0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1129a:	2000      	movs	r0, #0
   1129c:	9006      	str	r0, [sp, #24]
   1129e:	e002      	b.n	112a6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   112a0:	9800      	ldr	r0, [sp, #0]
   112a2:	9006      	str	r0, [sp, #24]
   112a4:	e7ff      	b.n	112a6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   112a6:	9806      	ldr	r0, [sp, #24]
   112a8:	b00e      	add	sp, #56	; 0x38
   112aa:	bd80      	pop	{r7, pc}

000112ac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
   112ac:	b580      	push	{r7, lr}
   112ae:	b084      	sub	sp, #16
   112b0:	9002      	str	r0, [sp, #8]
   112b2:	9103      	str	r1, [sp, #12]
   112b4:	6800      	ldr	r0, [r0, #0]
   112b6:	f000 f807 	bl	112c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
   112ba:	9001      	str	r0, [sp, #4]
   112bc:	e7ff      	b.n	112be <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
   112be:	9801      	ldr	r0, [sp, #4]
   112c0:	f000 0001 	and.w	r0, r0, #1
   112c4:	b004      	add	sp, #16
   112c6:	bd80      	pop	{r7, pc}

000112c8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
   112c8:	b580      	push	{r7, lr}
   112ca:	b088      	sub	sp, #32
   112cc:	9006      	str	r0, [sp, #24]
   112ce:	9107      	str	r1, [sp, #28]
   112d0:	9004      	str	r0, [sp, #16]
   112d2:	4608      	mov	r0, r1
   112d4:	9103      	str	r1, [sp, #12]
   112d6:	f004 fde2 	bl	15e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   112da:	9002      	str	r0, [sp, #8]
   112dc:	e7ff      	b.n	112de <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
   112de:	9802      	ldr	r0, [sp, #8]
   112e0:	07c1      	lsls	r1, r0, #31
   112e2:	2900      	cmp	r1, #0
   112e4:	d105      	bne.n	112f2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
   112e6:	e7ff      	b.n	112e8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
   112e8:	9803      	ldr	r0, [sp, #12]
   112ea:	f004 fddc 	bl	15ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   112ee:	9001      	str	r0, [sp, #4]
   112f0:	e007      	b.n	11302 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
   112f2:	9804      	ldr	r0, [sp, #16]
   112f4:	9903      	ldr	r1, [sp, #12]
   112f6:	f005 fb9d 	bl	16a34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   112fa:	f88d 0017 	strb.w	r0, [sp, #23]
   112fe:	e7ff      	b.n	11300 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
   11300:	e015      	b.n	1132e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   11302:	9801      	ldr	r0, [sp, #4]
   11304:	07c1      	lsls	r1, r0, #31
   11306:	2900      	cmp	r1, #0
   11308:	d107      	bne.n	1131a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
   1130a:	e7ff      	b.n	1130c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
   1130c:	9804      	ldr	r0, [sp, #16]
   1130e:	9903      	ldr	r1, [sp, #12]
   11310:	f005 fca3 	bl	16c5a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   11314:	f88d 0017 	strb.w	r0, [sp, #23]
   11318:	e007      	b.n	1132a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
   1131a:	9804      	ldr	r0, [sp, #16]
   1131c:	9903      	ldr	r1, [sp, #12]
   1131e:	f005 fbf4 	bl	16b0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11322:	f88d 0017 	strb.w	r0, [sp, #23]
   11326:	e7ff      	b.n	11328 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
   11328:	e000      	b.n	1132c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1132a:	e7ff      	b.n	1132c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
   1132c:	e7ff      	b.n	1132e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
   1132e:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11332:	b008      	add	sp, #32
   11334:	bd80      	pop	{r7, pc}

00011336 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
   11336:	b084      	sub	sp, #16
   11338:	9002      	str	r0, [sp, #8]
   1133a:	9103      	str	r1, [sp, #12]
            Coord(x, y)
   1133c:	9000      	str	r0, [sp, #0]
   1133e:	9101      	str	r1, [sp, #4]
        }
   11340:	9800      	ldr	r0, [sp, #0]
   11342:	9901      	ldr	r1, [sp, #4]
   11344:	b004      	add	sp, #16
   11346:	4770      	bx	lr

00011348 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
   11348:	b08b      	sub	sp, #44	; 0x2c
   1134a:	4601      	mov	r1, r0
   1134c:	f8ad 0020 	strh.w	r0, [sp, #32]
   11350:	0c00      	lsrs	r0, r0, #16
   11352:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11356:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   1135a:	f88d 001e 	strb.w	r0, [sp, #30]
   1135e:	f8bd 0020 	ldrh.w	r0, [sp, #32]
   11362:	f8ad 001c 	strh.w	r0, [sp, #28]
   11366:	f89d 001c 	ldrb.w	r0, [sp, #28]
   1136a:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   1136e:	f89d 201d 	ldrb.w	r2, [sp, #29]
   11372:	4613      	mov	r3, r2
   11374:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   11378:	f89d 201e 	ldrb.w	r2, [sp, #30]
   1137c:	4694      	mov	ip, r2
   1137e:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
   11382:	0200      	lsls	r0, r0, #8
   11384:	9306      	str	r3, [sp, #24]
   11386:	f8cd c014 	str.w	ip, [sp, #20]
   1138a:	9004      	str	r0, [sp, #16]
   1138c:	e7ff      	b.n	1138e <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
   1138e:	9804      	ldr	r0, [sp, #16]
   11390:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
   11394:	9a06      	ldr	r2, [sp, #24]
   11396:	b2d3      	uxtb	r3, r2
   11398:	00db      	lsls	r3, r3, #3
   1139a:	9103      	str	r1, [sp, #12]
   1139c:	9302      	str	r3, [sp, #8]
   1139e:	e7ff      	b.n	113a0 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
   113a0:	9802      	ldr	r0, [sp, #8]
   113a2:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
   113a6:	9a03      	ldr	r2, [sp, #12]
   113a8:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
   113aa:	9b05      	ldr	r3, [sp, #20]
   113ac:	fa5f fc83 	uxtb.w	ip, r3
   113b0:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
   113b4:	9101      	str	r1, [sp, #4]
   113b6:	f8cd c000 	str.w	ip, [sp]
   113ba:	e7ff      	b.n	113bc <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
   113bc:	9800      	ldr	r0, [sp, #0]
   113be:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
   113c2:	9a01      	ldr	r2, [sp, #4]
   113c4:	4311      	orrs	r1, r2
   113c6:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
   113ca:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
   113ce:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   113d2:	b00b      	add	sp, #44	; 0x2c
   113d4:	4770      	bx	lr

000113d6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
   113d6:	b580      	push	{r7, lr}
   113d8:	b088      	sub	sp, #32
   113da:	9005      	str	r0, [sp, #20]
   113dc:	9106      	str	r1, [sp, #24]
   113de:	9003      	str	r0, [sp, #12]
   113e0:	4608      	mov	r0, r1
   113e2:	f000 fa21 	bl	11828 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
   113e6:	9004      	str	r0, [sp, #16]
   113e8:	e7ff      	b.n	113ea <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
   113ea:	9804      	ldr	r0, [sp, #16]
   113ec:	9007      	str	r0, [sp, #28]
   113ee:	9903      	ldr	r1, [sp, #12]
   113f0:	680a      	ldr	r2, [r1, #0]
   113f2:	9002      	str	r0, [sp, #8]
   113f4:	4610      	mov	r0, r2
   113f6:	9902      	ldr	r1, [sp, #8]
   113f8:	f000 f837 	bl	1146a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
   113fc:	9001      	str	r0, [sp, #4]
   113fe:	9100      	str	r1, [sp, #0]
   11400:	e7ff      	b.n	11402 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
   11402:	9801      	ldr	r0, [sp, #4]
   11404:	9900      	ldr	r1, [sp, #0]
   11406:	b008      	add	sp, #32
   11408:	bd80      	pop	{r7, pc}

0001140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
   1140a:	b580      	push	{r7, lr}
   1140c:	b084      	sub	sp, #16
   1140e:	9001      	str	r0, [sp, #4]
   11410:	9102      	str	r1, [sp, #8]
   11412:	9203      	str	r2, [sp, #12]
   11414:	9000      	str	r0, [sp, #0]
   11416:	4608      	mov	r0, r1
   11418:	9900      	ldr	r1, [sp, #0]
   1141a:	f00a f9ab 	bl	1b774 <__aeabi_memcpy>
   1141e:	e7ff      	b.n	11420 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
   11420:	b004      	add	sp, #16
   11422:	bd80      	pop	{r7, pc}

00011424 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
   11424:	b580      	push	{r7, lr}
   11426:	b084      	sub	sp, #16
   11428:	9001      	str	r0, [sp, #4]
   1142a:	9102      	str	r1, [sp, #8]
   1142c:	9203      	str	r2, [sp, #12]
   1142e:	0092      	lsls	r2, r2, #2
   11430:	9000      	str	r0, [sp, #0]
   11432:	4608      	mov	r0, r1
   11434:	9900      	ldr	r1, [sp, #0]
   11436:	f00a f99d 	bl	1b774 <__aeabi_memcpy>
   1143a:	e7ff      	b.n	1143c <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
   1143c:	b004      	add	sp, #16
   1143e:	bd80      	pop	{r7, pc}

00011440 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
   11440:	b082      	sub	sp, #8
   11442:	9000      	str	r0, [sp, #0]
   11444:	9101      	str	r1, [sp, #4]
   11446:	6800      	ldr	r0, [r0, #0]
   11448:	6809      	ldr	r1, [r1, #0]
   1144a:	2200      	movs	r2, #0
   1144c:	4288      	cmp	r0, r1
   1144e:	bf38      	it	cc
   11450:	2201      	movcc	r2, #1
   11452:	4610      	mov	r0, r2
   11454:	b002      	add	sp, #8
   11456:	4770      	bx	lr

00011458 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
   11458:	b580      	push	{r7, lr}
   1145a:	b082      	sub	sp, #8
   1145c:	9000      	str	r0, [sp, #0]
   1145e:	9101      	str	r1, [sp, #4]
   11460:	f000 f85f 	bl	11522 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
   11464:	e7ff      	b.n	11466 <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
   11466:	b002      	add	sp, #8
   11468:	bd80      	pop	{r7, pc}

0001146a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
   1146a:	b580      	push	{r7, lr}
   1146c:	b088      	sub	sp, #32
   1146e:	9004      	str	r0, [sp, #16]
   11470:	9105      	str	r1, [sp, #20]
   11472:	f000 f819 	bl	114a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
   11476:	9001      	str	r0, [sp, #4]
   11478:	9100      	str	r1, [sp, #0]
   1147a:	e7ff      	b.n	1147c <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
   1147c:	9801      	ldr	r0, [sp, #4]
   1147e:	9006      	str	r0, [sp, #24]
   11480:	9900      	ldr	r1, [sp, #0]
   11482:	f001 0201 	and.w	r2, r1, #1
   11486:	f88d 201f 	strb.w	r2, [sp, #31]
   1148a:	2a00      	cmp	r2, #0
   1148c:	d105      	bne.n	1149a <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
   1148e:	e7ff      	b.n	11490 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
   11490:	9801      	ldr	r0, [sp, #4]
   11492:	9003      	str	r0, [sp, #12]
   11494:	2101      	movs	r1, #1
   11496:	9102      	str	r1, [sp, #8]
   11498:	e002      	b.n	114a0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   1149a:	2000      	movs	r0, #0
   1149c:	9002      	str	r0, [sp, #8]
   1149e:	e7ff      	b.n	114a0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
   114a0:	9802      	ldr	r0, [sp, #8]
   114a2:	9903      	ldr	r1, [sp, #12]
   114a4:	b008      	add	sp, #32
   114a6:	bd80      	pop	{r7, pc}

000114a8 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
   114a8:	b08a      	sub	sp, #40	; 0x28
   114aa:	9004      	str	r0, [sp, #16]
   114ac:	9105      	str	r1, [sp, #20]
   114ae:	1840      	adds	r0, r0, r1
   114b0:	f04f 0100 	mov.w	r1, #0
   114b4:	f141 0100 	adc.w	r1, r1, #0
   114b8:	9006      	str	r0, [sp, #24]
   114ba:	f88d 101c 	strb.w	r1, [sp, #28]
   114be:	9806      	ldr	r0, [sp, #24]
   114c0:	f89d 101c 	ldrb.w	r1, [sp, #28]
   114c4:	9001      	str	r0, [sp, #4]
   114c6:	9100      	str	r1, [sp, #0]
   114c8:	e7ff      	b.n	114ca <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
   114ca:	9801      	ldr	r0, [sp, #4]
   114cc:	9008      	str	r0, [sp, #32]
   114ce:	9900      	ldr	r1, [sp, #0]
   114d0:	f001 0201 	and.w	r2, r1, #1
   114d4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   114d8:	9002      	str	r0, [sp, #8]
   114da:	f88d 200c 	strb.w	r2, [sp, #12]
   114de:	9802      	ldr	r0, [sp, #8]
   114e0:	f89d 100c 	ldrb.w	r1, [sp, #12]
   114e4:	b00a      	add	sp, #40	; 0x28
   114e6:	4770      	bx	lr

000114e8 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
   114e8:	b580      	push	{r7, lr}
   114ea:	b08c      	sub	sp, #48	; 0x30
   114ec:	9005      	str	r0, [sp, #20]
   114ee:	9106      	str	r1, [sp, #24]
   114f0:	9207      	str	r2, [sp, #28]
   114f2:	4603      	mov	r3, r0
   114f4:	9008      	str	r0, [sp, #32]
   114f6:	4608      	mov	r0, r1
   114f8:	9109      	str	r1, [sp, #36]	; 0x24
   114fa:	2104      	movs	r1, #4
   114fc:	910b      	str	r1, [sp, #44]	; 0x2c
   114fe:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11500:	9204      	str	r2, [sp, #16]
   11502:	9303      	str	r3, [sp, #12]
   11504:	9002      	str	r0, [sp, #8]
   11506:	9101      	str	r1, [sp, #4]
   11508:	e7ff      	b.n	1150a <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
   1150a:	9801      	ldr	r0, [sp, #4]
   1150c:	9904      	ldr	r1, [sp, #16]
   1150e:	fb00 f201 	mul.w	r2, r0, r1
   11512:	920a      	str	r2, [sp, #40]	; 0x28
   11514:	9803      	ldr	r0, [sp, #12]
   11516:	9902      	ldr	r1, [sp, #8]
   11518:	f000 f82e 	bl	11578 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
   1151c:	e7ff      	b.n	1151e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
   1151e:	b00c      	add	sp, #48	; 0x30
   11520:	bd80      	pop	{r7, pc}

00011522 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
   11522:	b580      	push	{r7, lr}
   11524:	b088      	sub	sp, #32
   11526:	9004      	str	r0, [sp, #16]
   11528:	9105      	str	r1, [sp, #20]
   1152a:	2204      	movs	r2, #4
   1152c:	9207      	str	r2, [sp, #28]
   1152e:	9a07      	ldr	r2, [sp, #28]
   11530:	9103      	str	r1, [sp, #12]
   11532:	9002      	str	r0, [sp, #8]
   11534:	9201      	str	r2, [sp, #4]
   11536:	e7ff      	b.n	11538 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
   11538:	9801      	ldr	r0, [sp, #4]
   1153a:	2820      	cmp	r0, #32
   1153c:	d306      	bcc.n	1154c <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
   1153e:	e7ff      	b.n	11540 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
   11540:	2201      	movs	r2, #1
   11542:	9802      	ldr	r0, [sp, #8]
   11544:	9903      	ldr	r1, [sp, #12]
   11546:	f7ff ffcf 	bl	114e8 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
   1154a:	e012      	b.n	11572 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
   1154c:	9802      	ldr	r0, [sp, #8]
   1154e:	f000 f8a1 	bl	11694 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
   11552:	4601      	mov	r1, r0
   11554:	9006      	str	r0, [sp, #24]
   11556:	9100      	str	r1, [sp, #0]
   11558:	e7ff      	b.n	1155a <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
   1155a:	2201      	movs	r2, #1
   1155c:	9803      	ldr	r0, [sp, #12]
   1155e:	9902      	ldr	r1, [sp, #8]
   11560:	f7ff ff60 	bl	11424 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   11564:	e7ff      	b.n	11566 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
   11566:	9803      	ldr	r0, [sp, #12]
   11568:	9900      	ldr	r1, [sp, #0]
   1156a:	f000 f8ac 	bl	116c6 <_ZN4core3ptr5write17h4a80332de2cee3d3E>
   1156e:	e7ff      	b.n	11570 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
   11570:	e000      	b.n	11574 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11572:	e7ff      	b.n	11574 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
   11574:	b008      	add	sp, #32
   11576:	bd80      	pop	{r7, pc}

00011578 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
   11578:	b5d0      	push	{r4, r6, r7, lr}
   1157a:	af02      	add	r7, sp, #8
   1157c:	b0b4      	sub	sp, #208	; 0xd0
   1157e:	466c      	mov	r4, sp
   11580:	f36f 0404 	bfc	r4, #0, #5
   11584:	46a5      	mov	sp, r4
   11586:	9024      	str	r0, [sp, #144]	; 0x90
   11588:	9125      	str	r1, [sp, #148]	; 0x94
   1158a:	9226      	str	r2, [sp, #152]	; 0x98
   1158c:	2320      	movs	r3, #32
   1158e:	932f      	str	r3, [sp, #188]	; 0xbc
   11590:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   11592:	9327      	str	r3, [sp, #156]	; 0x9c
   11594:	920e      	str	r2, [sp, #56]	; 0x38
   11596:	910d      	str	r1, [sp, #52]	; 0x34
   11598:	900c      	str	r0, [sp, #48]	; 0x30
   1159a:	930b      	str	r3, [sp, #44]	; 0x2c
   1159c:	e7ff      	b.n	1159e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
   1159e:	2000      	movs	r0, #0
   115a0:	900f      	str	r0, [sp, #60]	; 0x3c
   115a2:	e7ff      	b.n	115a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   115a4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   115a6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   115a8:	4408      	add	r0, r1
   115aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   115ac:	4290      	cmp	r0, r2
   115ae:	d905      	bls.n	115bc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
   115b0:	e7ff      	b.n	115b2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
   115b2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   115b4:	990e      	ldr	r1, [sp, #56]	; 0x38
   115b6:	4288      	cmp	r0, r1
   115b8:	d334      	bcc.n	11624 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
   115ba:	e067      	b.n	1168c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   115bc:	e7ff      	b.n	115be <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
   115be:	a810      	add	r0, sp, #64	; 0x40
   115c0:	9030      	str	r0, [sp, #192]	; 0xc0
   115c2:	9031      	str	r0, [sp, #196]	; 0xc4
   115c4:	e7ff      	b.n	115c6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
   115c6:	a810      	add	r0, sp, #64	; 0x40
   115c8:	4601      	mov	r1, r0
   115ca:	9028      	str	r0, [sp, #160]	; 0xa0
   115cc:	980f      	ldr	r0, [sp, #60]	; 0x3c
   115ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   115d0:	900a      	str	r0, [sp, #40]	; 0x28
   115d2:	4610      	mov	r0, r2
   115d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115d6:	9109      	str	r1, [sp, #36]	; 0x24
   115d8:	4619      	mov	r1, r3
   115da:	f000 f87a 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   115de:	4601      	mov	r1, r0
   115e0:	9029      	str	r0, [sp, #164]	; 0xa4
   115e2:	9108      	str	r1, [sp, #32]
   115e4:	e7ff      	b.n	115e6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
   115e6:	990f      	ldr	r1, [sp, #60]	; 0x3c
   115e8:	980d      	ldr	r0, [sp, #52]	; 0x34
   115ea:	f000 f872 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   115ee:	4601      	mov	r1, r0
   115f0:	902a      	str	r0, [sp, #168]	; 0xa8
   115f2:	9107      	str	r1, [sp, #28]
   115f4:	e7ff      	b.n	115f6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
   115f6:	9808      	ldr	r0, [sp, #32]
   115f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   115fa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   115fc:	f7ff ff05 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11600:	e7ff      	b.n	11602 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
   11602:	9807      	ldr	r0, [sp, #28]
   11604:	9908      	ldr	r1, [sp, #32]
   11606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11608:	f7ff feff 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1160c:	e7ff      	b.n	1160e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
   1160e:	9809      	ldr	r0, [sp, #36]	; 0x24
   11610:	9907      	ldr	r1, [sp, #28]
   11612:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11614:	f7ff fef9 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11618:	e7ff      	b.n	1161a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
   1161a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1161c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1161e:	4408      	add	r0, r1
   11620:	900f      	str	r0, [sp, #60]	; 0x3c
   11622:	e7bf      	b.n	115a4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
   11624:	e7ff      	b.n	11626 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
   11626:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11628:	990e      	ldr	r1, [sp, #56]	; 0x38
   1162a:	1a08      	subs	r0, r1, r0
   1162c:	4602      	mov	r2, r0
   1162e:	902b      	str	r0, [sp, #172]	; 0xac
   11630:	a81c      	add	r0, sp, #112	; 0x70
   11632:	9032      	str	r0, [sp, #200]	; 0xc8
   11634:	9033      	str	r0, [sp, #204]	; 0xcc
   11636:	9206      	str	r2, [sp, #24]
   11638:	9005      	str	r0, [sp, #20]
   1163a:	e7ff      	b.n	1163c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
   1163c:	9805      	ldr	r0, [sp, #20]
   1163e:	9905      	ldr	r1, [sp, #20]
   11640:	912c      	str	r1, [sp, #176]	; 0xb0
   11642:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11644:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11646:	9004      	str	r0, [sp, #16]
   11648:	4610      	mov	r0, r2
   1164a:	f000 f842 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1164e:	4601      	mov	r1, r0
   11650:	902d      	str	r0, [sp, #180]	; 0xb4
   11652:	9103      	str	r1, [sp, #12]
   11654:	e7ff      	b.n	11656 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
   11656:	990f      	ldr	r1, [sp, #60]	; 0x3c
   11658:	980d      	ldr	r0, [sp, #52]	; 0x34
   1165a:	f000 f83a 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1165e:	4601      	mov	r1, r0
   11660:	902e      	str	r0, [sp, #184]	; 0xb8
   11662:	9102      	str	r1, [sp, #8]
   11664:	e7ff      	b.n	11666 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
   11666:	9803      	ldr	r0, [sp, #12]
   11668:	9904      	ldr	r1, [sp, #16]
   1166a:	9a06      	ldr	r2, [sp, #24]
   1166c:	f7ff fecd 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11670:	e7ff      	b.n	11672 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
   11672:	9802      	ldr	r0, [sp, #8]
   11674:	9903      	ldr	r1, [sp, #12]
   11676:	9a06      	ldr	r2, [sp, #24]
   11678:	f7ff fec7 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1167c:	e7ff      	b.n	1167e <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
   1167e:	9804      	ldr	r0, [sp, #16]
   11680:	9902      	ldr	r1, [sp, #8]
   11682:	9a06      	ldr	r2, [sp, #24]
   11684:	f7ff fec1 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   11688:	e7ff      	b.n	1168a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
   1168a:	e7ff      	b.n	1168c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
   1168c:	f1a7 0408 	sub.w	r4, r7, #8
   11690:	46a5      	mov	sp, r4
   11692:	bdd0      	pop	{r4, r6, r7, pc}

00011694 <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
   11694:	b580      	push	{r7, lr}
   11696:	b08a      	sub	sp, #40	; 0x28
   11698:	9004      	str	r0, [sp, #16]
   1169a:	9905      	ldr	r1, [sp, #20]
   1169c:	9103      	str	r1, [sp, #12]
   1169e:	9002      	str	r0, [sp, #8]
   116a0:	e7ff      	b.n	116a2 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
   116a2:	a803      	add	r0, sp, #12
   116a4:	9008      	str	r0, [sp, #32]
   116a6:	9009      	str	r0, [sp, #36]	; 0x24
   116a8:	e7ff      	b.n	116aa <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
   116aa:	a903      	add	r1, sp, #12
   116ac:	2201      	movs	r2, #1
   116ae:	9802      	ldr	r0, [sp, #8]
   116b0:	f7ff feb8 	bl	11424 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
   116b4:	e7ff      	b.n	116b6 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
   116b6:	9803      	ldr	r0, [sp, #12]
   116b8:	9006      	str	r0, [sp, #24]
   116ba:	9007      	str	r0, [sp, #28]
   116bc:	9001      	str	r0, [sp, #4]
   116be:	e7ff      	b.n	116c0 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
   116c0:	9801      	ldr	r0, [sp, #4]
   116c2:	b00a      	add	sp, #40	; 0x28
   116c4:	bd80      	pop	{r7, pc}

000116c6 <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
   116c6:	b082      	sub	sp, #8
   116c8:	9000      	str	r0, [sp, #0]
   116ca:	9101      	str	r1, [sp, #4]
   116cc:	6001      	str	r1, [r0, #0]
   116ce:	b002      	add	sp, #8
   116d0:	4770      	bx	lr

000116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
   116d2:	b580      	push	{r7, lr}
   116d4:	b084      	sub	sp, #16
   116d6:	9002      	str	r0, [sp, #8]
   116d8:	9103      	str	r1, [sp, #12]
   116da:	f000 f805 	bl	116e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
   116de:	9001      	str	r0, [sp, #4]
   116e0:	e7ff      	b.n	116e2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
   116e2:	9801      	ldr	r0, [sp, #4]
   116e4:	b004      	add	sp, #16
   116e6:	bd80      	pop	{r7, pc}

000116e8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
   116e8:	b084      	sub	sp, #16
   116ea:	9001      	str	r0, [sp, #4]
   116ec:	9102      	str	r1, [sp, #8]
   116ee:	4408      	add	r0, r1
   116f0:	9003      	str	r0, [sp, #12]
   116f2:	9803      	ldr	r0, [sp, #12]
   116f4:	9000      	str	r0, [sp, #0]
   116f6:	e7ff      	b.n	116f8 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
   116f8:	9800      	ldr	r0, [sp, #0]
   116fa:	b004      	add	sp, #16
   116fc:	4770      	bx	lr

000116fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
   116fe:	b580      	push	{r7, lr}
   11700:	b084      	sub	sp, #16
   11702:	9002      	str	r0, [sp, #8]
   11704:	9103      	str	r1, [sp, #12]
   11706:	f000 f805 	bl	11714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
   1170a:	9001      	str	r0, [sp, #4]
   1170c:	e7ff      	b.n	1170e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
   1170e:	9801      	ldr	r0, [sp, #4]
   11710:	b004      	add	sp, #16
   11712:	bd80      	pop	{r7, pc}

00011714 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
   11714:	b084      	sub	sp, #16
   11716:	9001      	str	r0, [sp, #4]
   11718:	9102      	str	r1, [sp, #8]
   1171a:	4408      	add	r0, r1
   1171c:	9003      	str	r0, [sp, #12]
   1171e:	9803      	ldr	r0, [sp, #12]
   11720:	9000      	str	r0, [sp, #0]
   11722:	e7ff      	b.n	11724 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
   11724:	9800      	ldr	r0, [sp, #0]
   11726:	b004      	add	sp, #16
   11728:	4770      	bx	lr

0001172a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
   1172a:	b580      	push	{r7, lr}
   1172c:	b08a      	sub	sp, #40	; 0x28
   1172e:	9009      	str	r0, [sp, #36]	; 0x24
   11730:	2100      	movs	r1, #0
   11732:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   11736:	1d01      	adds	r1, r0, #4
   11738:	9002      	str	r0, [sp, #8]
   1173a:	f7ff fe81 	bl	11440 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
   1173e:	9001      	str	r0, [sp, #4]
   11740:	e7ff      	b.n	11742 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
   11742:	9801      	ldr	r0, [sp, #4]
   11744:	07c1      	lsls	r1, r0, #31
   11746:	2900      	cmp	r1, #0
   11748:	d103      	bne.n	11752 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
   1174a:	e7ff      	b.n	1174c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
   1174c:	2000      	movs	r0, #0
   1174e:	9003      	str	r0, [sp, #12]
   11750:	e021      	b.n	11796 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   11752:	2001      	movs	r0, #1
   11754:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11758:	9902      	ldr	r1, [sp, #8]
   1175a:	9000      	str	r0, [sp, #0]
   1175c:	4608      	mov	r0, r1
   1175e:	9900      	ldr	r1, [sp, #0]
   11760:	f7ff fe39 	bl	113d6 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
   11764:	9106      	str	r1, [sp, #24]
   11766:	9005      	str	r0, [sp, #20]
   11768:	e7ff      	b.n	1176a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
   1176a:	9805      	ldr	r0, [sp, #20]
   1176c:	2801      	cmp	r0, #1
   1176e:	d003      	beq.n	11778 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
   11770:	e7ff      	b.n	11772 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
   11772:	2000      	movs	r0, #0
   11774:	9003      	str	r0, [sp, #12]
   11776:	e021      	b.n	117bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11778:	2000      	movs	r0, #0
   1177a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   1177e:	9806      	ldr	r0, [sp, #24]
   11780:	9007      	str	r0, [sp, #28]
   11782:	a807      	add	r0, sp, #28
   11784:	9902      	ldr	r1, [sp, #8]
   11786:	f7ff fe67 	bl	11458 <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
   1178a:	e7ff      	b.n	1178c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
   1178c:	9807      	ldr	r0, [sp, #28]
   1178e:	9004      	str	r0, [sp, #16]
   11790:	2001      	movs	r0, #1
   11792:	9003      	str	r0, [sp, #12]
   11794:	e012      	b.n	117bc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
   11796:	9803      	ldr	r0, [sp, #12]
   11798:	9904      	ldr	r1, [sp, #16]
   1179a:	b00a      	add	sp, #40	; 0x28
   1179c:	bd80      	pop	{r7, pc}
   1179e:	2000      	movs	r0, #0
   117a0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   117a4:	e7f7      	b.n	11796 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
   117a6:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   117aa:	07c0      	lsls	r0, r0, #31
   117ac:	2800      	cmp	r0, #0
   117ae:	d0f6      	beq.n	1179e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   117b0:	e7ff      	b.n	117b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
   117b2:	2000      	movs	r0, #0
   117b4:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   117b8:	e7f1      	b.n	1179e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   117ba:	e7f0      	b.n	1179e <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
   117bc:	9805      	ldr	r0, [sp, #20]
   117be:	2801      	cmp	r0, #1
   117c0:	d0f1      	beq.n	117a6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
   117c2:	e7fa      	b.n	117ba <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

000117c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
   117c4:	b082      	sub	sp, #8
   117c6:	9000      	str	r0, [sp, #0]
   117c8:	9101      	str	r1, [sp, #4]
   117ca:	b002      	add	sp, #8
   117cc:	4770      	bx	lr

000117ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
   117ce:	b580      	push	{r7, lr}
   117d0:	b086      	sub	sp, #24
   117d2:	9003      	str	r0, [sp, #12]
   117d4:	9104      	str	r1, [sp, #16]
   117d6:	9205      	str	r2, [sp, #20]
   117d8:	9002      	str	r0, [sp, #8]
   117da:	4610      	mov	r0, r2
   117dc:	9a02      	ldr	r2, [sp, #8]
   117de:	9101      	str	r1, [sp, #4]
   117e0:	4611      	mov	r1, r2
   117e2:	9a01      	ldr	r2, [sp, #4]
   117e4:	f000 f846 	bl	11874 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
   117e8:	9000      	str	r0, [sp, #0]
   117ea:	e7ff      	b.n	117ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
   117ec:	9800      	ldr	r0, [sp, #0]
   117ee:	b006      	add	sp, #24
   117f0:	bd80      	pop	{r7, pc}

000117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
   117f2:	b084      	sub	sp, #16
   117f4:	9002      	str	r0, [sp, #8]
   117f6:	9103      	str	r1, [sp, #12]
   117f8:	9000      	str	r0, [sp, #0]
   117fa:	9101      	str	r1, [sp, #4]
   117fc:	9801      	ldr	r0, [sp, #4]
   117fe:	b004      	add	sp, #16
   11800:	4770      	bx	lr

00011802 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
   11802:	b082      	sub	sp, #8
   11804:	9000      	str	r0, [sp, #0]
   11806:	9101      	str	r1, [sp, #4]
   11808:	b002      	add	sp, #8
   1180a:	4770      	bx	lr

0001180c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
   1180c:	b081      	sub	sp, #4
   1180e:	9000      	str	r0, [sp, #0]
   11810:	b001      	add	sp, #4
   11812:	4770      	bx	lr

00011814 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
   11814:	b580      	push	{r7, lr}
   11816:	b082      	sub	sp, #8
   11818:	9001      	str	r0, [sp, #4]
   1181a:	f7ff fff7 	bl	1180c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
   1181e:	9000      	str	r0, [sp, #0]
   11820:	e7ff      	b.n	11822 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
   11822:	9800      	ldr	r0, [sp, #0]
   11824:	b002      	add	sp, #8
   11826:	bd80      	pop	{r7, pc}

00011828 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
   11828:	b580      	push	{r7, lr}
   1182a:	b084      	sub	sp, #16
   1182c:	9003      	str	r0, [sp, #12]
   1182e:	f7ff fff1 	bl	11814 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
   11832:	9001      	str	r0, [sp, #4]
   11834:	e7ff      	b.n	11836 <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
   11836:	9801      	ldr	r0, [sp, #4]
   11838:	9002      	str	r0, [sp, #8]
   1183a:	9802      	ldr	r0, [sp, #8]
   1183c:	b004      	add	sp, #16
   1183e:	bd80      	pop	{r7, pc}

00011840 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
   11840:	b082      	sub	sp, #8
   11842:	9000      	str	r0, [sp, #0]
   11844:	9101      	str	r1, [sp, #4]
   11846:	b002      	add	sp, #8
   11848:	4770      	bx	lr

0001184a <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
   1184a:	b580      	push	{r7, lr}
   1184c:	b086      	sub	sp, #24
   1184e:	9003      	str	r0, [sp, #12]
   11850:	9104      	str	r1, [sp, #16]
   11852:	9205      	str	r2, [sp, #20]
   11854:	9002      	str	r0, [sp, #8]
   11856:	4608      	mov	r0, r1
   11858:	4611      	mov	r1, r2
   1185a:	f7ff ffd2 	bl	11802 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1185e:	9001      	str	r0, [sp, #4]
   11860:	e7ff      	b.n	11862 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
   11862:	9801      	ldr	r0, [sp, #4]
   11864:	9902      	ldr	r1, [sp, #8]
   11866:	f7ff ff4a 	bl	116fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
   1186a:	9000      	str	r0, [sp, #0]
   1186c:	e7ff      	b.n	1186e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
   1186e:	9800      	ldr	r0, [sp, #0]
   11870:	b006      	add	sp, #24
   11872:	bd80      	pop	{r7, pc}

00011874 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
   11874:	b580      	push	{r7, lr}
   11876:	b086      	sub	sp, #24
   11878:	9003      	str	r0, [sp, #12]
   1187a:	9104      	str	r1, [sp, #16]
   1187c:	9205      	str	r2, [sp, #20]
   1187e:	9002      	str	r0, [sp, #8]
   11880:	4608      	mov	r0, r1
   11882:	4611      	mov	r1, r2
   11884:	f7ff ff9e 	bl	117c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
   11888:	9001      	str	r0, [sp, #4]
   1188a:	e7ff      	b.n	1188c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
   1188c:	9801      	ldr	r0, [sp, #4]
   1188e:	9902      	ldr	r1, [sp, #8]
   11890:	f7ff ff1f 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   11894:	9000      	str	r0, [sp, #0]
   11896:	e7ff      	b.n	11898 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
   11898:	9800      	ldr	r0, [sp, #0]
   1189a:	b006      	add	sp, #24
   1189c:	bd80      	pop	{r7, pc}

0001189e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1189e:	b081      	sub	sp, #4
   118a0:	b001      	add	sp, #4
   118a2:	4770      	bx	lr

000118a4 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
   118a4:	b580      	push	{r7, lr}
   118a6:	b086      	sub	sp, #24
   118a8:	f8dd c020 	ldr.w	ip, [sp, #32]
   118ac:	9102      	str	r1, [sp, #8]
   118ae:	9203      	str	r2, [sp, #12]
   118b0:	9304      	str	r3, [sp, #16]
   118b2:	f8cd c014 	str.w	ip, [sp, #20]
   118b6:	f04f 0e00 	mov.w	lr, #0
   118ba:	f8cd e004 	str.w	lr, [sp, #4]
   118be:	f8cd e000 	str.w	lr, [sp]
   118c2:	f8cd e000 	str.w	lr, [sp]
   118c6:	6001      	str	r1, [r0, #0]
   118c8:	6042      	str	r2, [r0, #4]
   118ca:	9900      	ldr	r1, [sp, #0]
   118cc:	9a01      	ldr	r2, [sp, #4]
   118ce:	6081      	str	r1, [r0, #8]
   118d0:	60c2      	str	r2, [r0, #12]
   118d2:	6103      	str	r3, [r0, #16]
   118d4:	f8c0 c014 	str.w	ip, [r0, #20]
   118d8:	b006      	add	sp, #24
   118da:	bd80      	pop	{r7, pc}

000118dc <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
   118dc:	b580      	push	{r7, lr}
   118de:	b084      	sub	sp, #16
   118e0:	9101      	str	r1, [sp, #4]
   118e2:	9202      	str	r2, [sp, #8]
   118e4:	9901      	ldr	r1, [sp, #4]
   118e6:	9a02      	ldr	r2, [sp, #8]
   118e8:	f000 fa95 	bl	11e16 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
   118ec:	e7ff      	b.n	118ee <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
   118ee:	b004      	add	sp, #16
   118f0:	bd80      	pop	{r7, pc}

000118f2 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
   118f2:	b081      	sub	sp, #4
   118f4:	9000      	str	r0, [sp, #0]
   118f6:	b001      	add	sp, #4
   118f8:	4770      	bx	lr

000118fa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
   118fa:	b081      	sub	sp, #4
   118fc:	9000      	str	r0, [sp, #0]
   118fe:	b001      	add	sp, #4
   11900:	4770      	bx	lr

00011902 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
   11902:	b580      	push	{r7, lr}
   11904:	b086      	sub	sp, #24
   11906:	460a      	mov	r2, r1
   11908:	9004      	str	r0, [sp, #16]
   1190a:	f88d 1017 	strb.w	r1, [sp, #23]
   1190e:	9203      	str	r2, [sp, #12]
   11910:	f7ff fff3 	bl	118fa <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   11914:	9002      	str	r0, [sp, #8]
   11916:	e7ff      	b.n	11918 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
   11918:	9802      	ldr	r0, [sp, #8]
   1191a:	9903      	ldr	r1, [sp, #12]
   1191c:	f000 f806 	bl	1192c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   11920:	9001      	str	r0, [sp, #4]
   11922:	e7ff      	b.n	11924 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
   11924:	9801      	ldr	r0, [sp, #4]
   11926:	b006      	add	sp, #24
   11928:	bd80      	pop	{r7, pc}
	...

0001192c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
   1192c:	b086      	sub	sp, #24
   1192e:	460a      	mov	r2, r1
   11930:	f88d 100f 	strb.w	r1, [sp, #15]
   11934:	9005      	str	r0, [sp, #20]
   11936:	f89d 100f 	ldrb.w	r1, [sp, #15]
   1193a:	9002      	str	r0, [sp, #8]
   1193c:	9101      	str	r1, [sp, #4]
   1193e:	9901      	ldr	r1, [sp, #4]
   11940:	e8df f001 	tbb	[pc, r1]
   11944:	03102317 	.word	0x03102317
   11948:	001c      	.short	0x001c
   1194a:	f64d 107c 	movw	r0, #55676	; 0xd97c
   1194e:	f2c0 0001 	movt	r0, #1
   11952:	f64d 12f8 	movw	r2, #55800	; 0xd9f8
   11956:	f2c0 0201 	movt	r2, #1
   1195a:	2131      	movs	r1, #49	; 0x31
   1195c:	f003 fbfe 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   11960:	defe      	udf	#254	; 0xfe
   11962:	defe      	udf	#254	; 0xfe
   11964:	9802      	ldr	r0, [sp, #8]
   11966:	6801      	ldr	r1, [r0, #0]
   11968:	f3bf 8f5f 	dmb	sy
   1196c:	9104      	str	r1, [sp, #16]
   1196e:	e7ff      	b.n	11970 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
   11970:	e017      	b.n	119a2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   11972:	9802      	ldr	r0, [sp, #8]
   11974:	6801      	ldr	r1, [r0, #0]
   11976:	9104      	str	r1, [sp, #16]
   11978:	e7ff      	b.n	1197a <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
   1197a:	e012      	b.n	119a2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1197c:	9802      	ldr	r0, [sp, #8]
   1197e:	6801      	ldr	r1, [r0, #0]
   11980:	f3bf 8f5f 	dmb	sy
   11984:	9104      	str	r1, [sp, #16]
   11986:	e7ff      	b.n	11988 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
   11988:	e00b      	b.n	119a2 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
   1198a:	f64d 2008 	movw	r0, #55816	; 0xda08
   1198e:	f2c0 0001 	movt	r0, #1
   11992:	f64d 12f8 	movw	r2, #55800	; 0xd9f8
   11996:	f2c0 0201 	movt	r2, #1
   1199a:	2128      	movs	r1, #40	; 0x28
   1199c:	f003 fbde 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   119a0:	defe      	udf	#254	; 0xfe
   119a2:	9804      	ldr	r0, [sp, #16]
   119a4:	b006      	add	sp, #24
   119a6:	4770      	bx	lr

000119a8 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
   119a8:	b081      	sub	sp, #4
   119aa:	9000      	str	r0, [sp, #0]
   119ac:	6800      	ldr	r0, [r0, #0]
   119ae:	b001      	add	sp, #4
   119b0:	4770      	bx	lr

000119b2 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
   119b2:	b082      	sub	sp, #8
   119b4:	9001      	str	r0, [sp, #4]
   119b6:	6801      	ldr	r1, [r0, #0]
   119b8:	6840      	ldr	r0, [r0, #4]
   119ba:	9000      	str	r0, [sp, #0]
   119bc:	4608      	mov	r0, r1
   119be:	9900      	ldr	r1, [sp, #0]
   119c0:	b002      	add	sp, #8
   119c2:	4770      	bx	lr

000119c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
   119c4:	b580      	push	{r7, lr}
   119c6:	b08c      	sub	sp, #48	; 0x30
   119c8:	9101      	str	r1, [sp, #4]
   119ca:	9202      	str	r2, [sp, #8]
   119cc:	2100      	movs	r1, #0
   119ce:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   119d2:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   119d6:	2101      	movs	r1, #1
   119d8:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
   119dc:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
   119e0:	9901      	ldr	r1, [sp, #4]
   119e2:	2900      	cmp	r1, #0
   119e4:	460a      	mov	r2, r1
   119e6:	bf18      	it	ne
   119e8:	2201      	movne	r2, #1
   119ea:	2900      	cmp	r1, #0
   119ec:	9000      	str	r0, [sp, #0]
   119ee:	d001      	beq.n	119f4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
   119f0:	e7ff      	b.n	119f2 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
   119f2:	e008      	b.n	11a06 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
   119f4:	2000      	movs	r0, #0
   119f6:	9900      	ldr	r1, [sp, #0]
   119f8:	6088      	str	r0, [r1, #8]
   119fa:	6048      	str	r0, [r1, #4]
   119fc:	6008      	str	r0, [r1, #0]
   119fe:	2002      	movs	r0, #2
   11a00:	6008      	str	r0, [r1, #0]
   11a02:	e021      	b.n	11a48 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11a04:	defe      	udf	#254	; 0xfe
   11a06:	2000      	movs	r0, #0
   11a08:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11a0c:	9901      	ldr	r1, [sp, #4]
   11a0e:	9a02      	ldr	r2, [sp, #8]
   11a10:	910a      	str	r1, [sp, #40]	; 0x28
   11a12:	920b      	str	r2, [sp, #44]	; 0x2c
   11a14:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11a18:	9106      	str	r1, [sp, #24]
   11a1a:	9207      	str	r2, [sp, #28]
   11a1c:	9906      	ldr	r1, [sp, #24]
   11a1e:	9a07      	ldr	r2, [sp, #28]
   11a20:	a803      	add	r0, sp, #12
   11a22:	f7ff ff5b 	bl	118dc <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
   11a26:	e7ff      	b.n	11a28 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
   11a28:	9803      	ldr	r0, [sp, #12]
   11a2a:	9904      	ldr	r1, [sp, #16]
   11a2c:	9a05      	ldr	r2, [sp, #20]
   11a2e:	9b00      	ldr	r3, [sp, #0]
   11a30:	609a      	str	r2, [r3, #8]
   11a32:	6059      	str	r1, [r3, #4]
   11a34:	6018      	str	r0, [r3, #0]
   11a36:	e007      	b.n	11a48 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
   11a38:	9801      	ldr	r0, [sp, #4]
   11a3a:	2800      	cmp	r0, #0
   11a3c:	d10c      	bne.n	11a58 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
   11a3e:	e015      	b.n	11a6c <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
   11a40:	2000      	movs	r0, #0
   11a42:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   11a46:	e7f7      	b.n	11a38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11a48:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   11a4c:	07c0      	lsls	r0, r0, #31
   11a4e:	2800      	cmp	r0, #0
   11a50:	d1f6      	bne.n	11a40 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
   11a52:	e7f1      	b.n	11a38 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
   11a54:	b00c      	add	sp, #48	; 0x30
   11a56:	bd80      	pop	{r7, pc}
   11a58:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   11a5c:	07c0      	lsls	r0, r0, #31
   11a5e:	2800      	cmp	r0, #0
   11a60:	d0f8      	beq.n	11a54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11a62:	e7ff      	b.n	11a64 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
   11a64:	2000      	movs	r0, #0
   11a66:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   11a6a:	e7f3      	b.n	11a54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
   11a6c:	e7f2      	b.n	11a54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

00011a6e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hfa8fedc38dd84b50E>:
   11a6e:	b081      	sub	sp, #4
   11a70:	b001      	add	sp, #4
   11a72:	4770      	bx	lr

00011a74 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
   11a74:	b5b0      	push	{r4, r5, r7, lr}
   11a76:	b081      	sub	sp, #4
   11a78:	9100      	str	r1, [sp, #0]
   11a7a:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11a7e:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
   11a82:	b001      	add	sp, #4
   11a84:	bdb0      	pop	{r4, r5, r7, pc}

00011a86 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
   11a86:	b580      	push	{r7, lr}
   11a88:	b088      	sub	sp, #32
   11a8a:	9106      	str	r1, [sp, #24]
   11a8c:	680a      	ldr	r2, [r1, #0]
   11a8e:	1e93      	subs	r3, r2, #2
   11a90:	bf18      	it	ne
   11a92:	2301      	movne	r3, #1
   11a94:	2a02      	cmp	r2, #2
   11a96:	9102      	str	r1, [sp, #8]
   11a98:	9001      	str	r0, [sp, #4]
   11a9a:	d001      	beq.n	11aa0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
   11a9c:	e7ff      	b.n	11a9e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
   11a9e:	e008      	b.n	11ab2 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
   11aa0:	2000      	movs	r0, #0
   11aa2:	9901      	ldr	r1, [sp, #4]
   11aa4:	6088      	str	r0, [r1, #8]
   11aa6:	6048      	str	r0, [r1, #4]
   11aa8:	6008      	str	r0, [r1, #0]
   11aaa:	2002      	movs	r0, #2
   11aac:	6008      	str	r0, [r1, #0]
   11aae:	e00f      	b.n	11ad0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11ab0:	defe      	udf	#254	; 0xfe
   11ab2:	9802      	ldr	r0, [sp, #8]
   11ab4:	9007      	str	r0, [sp, #28]
   11ab6:	a803      	add	r0, sp, #12
   11ab8:	9902      	ldr	r1, [sp, #8]
   11aba:	f000 f9b5 	bl	11e28 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
   11abe:	e7ff      	b.n	11ac0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
   11ac0:	9803      	ldr	r0, [sp, #12]
   11ac2:	9904      	ldr	r1, [sp, #16]
   11ac4:	9a05      	ldr	r2, [sp, #20]
   11ac6:	9b01      	ldr	r3, [sp, #4]
   11ac8:	609a      	str	r2, [r3, #8]
   11aca:	6059      	str	r1, [r3, #4]
   11acc:	6018      	str	r0, [r3, #0]
   11ace:	e7ff      	b.n	11ad0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
   11ad0:	b008      	add	sp, #32
   11ad2:	bd80      	pop	{r7, pc}

00011ad4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
   11ad4:	b580      	push	{r7, lr}
   11ad6:	b086      	sub	sp, #24
   11ad8:	9004      	str	r0, [sp, #16]
   11ada:	6801      	ldr	r1, [r0, #0]
   11adc:	2900      	cmp	r1, #0
   11ade:	9001      	str	r0, [sp, #4]
   11ae0:	d001      	beq.n	11ae6 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
   11ae2:	e7ff      	b.n	11ae4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
   11ae4:	e003      	b.n	11aee <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
   11ae6:	2000      	movs	r0, #0
   11ae8:	9002      	str	r0, [sp, #8]
   11aea:	e00d      	b.n	11b08 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11aec:	defe      	udf	#254	; 0xfe
   11aee:	9801      	ldr	r0, [sp, #4]
   11af0:	1d01      	adds	r1, r0, #4
   11af2:	9105      	str	r1, [sp, #20]
   11af4:	4608      	mov	r0, r1
   11af6:	f7ff ff57 	bl	119a8 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
   11afa:	9000      	str	r0, [sp, #0]
   11afc:	e7ff      	b.n	11afe <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
   11afe:	9800      	ldr	r0, [sp, #0]
   11b00:	9003      	str	r0, [sp, #12]
   11b02:	2101      	movs	r1, #1
   11b04:	9102      	str	r1, [sp, #8]
   11b06:	e7ff      	b.n	11b08 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
   11b08:	9802      	ldr	r0, [sp, #8]
   11b0a:	9903      	ldr	r1, [sp, #12]
   11b0c:	b006      	add	sp, #24
   11b0e:	bd80      	pop	{r7, pc}

00011b10 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
   11b10:	b081      	sub	sp, #4
   11b12:	9000      	str	r0, [sp, #0]
        *self
   11b14:	6800      	ldr	r0, [r0, #0]
    }
   11b16:	b001      	add	sp, #4
   11b18:	4770      	bx	lr

00011b1a <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
   11b1a:	b580      	push	{r7, lr}
        RecordBuilder::new()
   11b1c:	f000 f802 	bl	11b24 <_ZN3log13RecordBuilder3new17haca8312579858419E>
   11b20:	e7ff      	b.n	11b22 <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
   11b22:	bd80      	pop	{r7, pc}

00011b24 <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
   11b24:	b570      	push	{r4, r5, r6, lr}
   11b26:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
   11b28:	f64d 2148 	movw	r1, #55880	; 0xda48
   11b2c:	f2c0 0101 	movt	r1, #1
   11b30:	6809      	ldr	r1, [r1, #0]
   11b32:	466a      	mov	r2, sp
   11b34:	2300      	movs	r3, #0
   11b36:	6013      	str	r3, [r2, #0]
   11b38:	aa16      	add	r2, sp, #88	; 0x58
   11b3a:	9004      	str	r0, [sp, #16]
   11b3c:	4610      	mov	r0, r2
   11b3e:	9103      	str	r1, [sp, #12]
   11b40:	461a      	mov	r2, r3
   11b42:	9b03      	ldr	r3, [sp, #12]
   11b44:	f7ff feae 	bl	118a4 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
   11b48:	e7ff      	b.n	11b4a <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
   11b4a:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
   11b4c:	f000 f891 	bl	11c72 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
   11b50:	e7ff      	b.n	11b52 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
   11b52:	a81c      	add	r0, sp, #112	; 0x70
   11b54:	a91f      	add	r1, sp, #124	; 0x7c
   11b56:	f000 f8a5 	bl	11ca4 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
   11b5a:	e7ff      	b.n	11b5c <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
   11b5c:	2000      	movs	r0, #0
                module_path: None,
   11b5e:	9024      	str	r0, [sp, #144]	; 0x90
   11b60:	9023      	str	r0, [sp, #140]	; 0x8c
   11b62:	9022      	str	r0, [sp, #136]	; 0x88
   11b64:	2102      	movs	r1, #2
   11b66:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
   11b68:	9027      	str	r0, [sp, #156]	; 0x9c
   11b6a:	9026      	str	r0, [sp, #152]	; 0x98
   11b6c:	9025      	str	r0, [sp, #148]	; 0x94
   11b6e:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
   11b70:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
   11b72:	981c      	ldr	r0, [sp, #112]	; 0x70
   11b74:	991d      	ldr	r1, [sp, #116]	; 0x74
   11b76:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   11b78:	9207      	str	r2, [sp, #28]
   11b7a:	9106      	str	r1, [sp, #24]
   11b7c:	9005      	str	r0, [sp, #20]
   11b7e:	a805      	add	r0, sp, #20
   11b80:	f100 010c 	add.w	r1, r0, #12
   11b84:	aa16      	add	r2, sp, #88	; 0x58
   11b86:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11b8a:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11b8e:	9922      	ldr	r1, [sp, #136]	; 0x88
   11b90:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   11b92:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11b94:	9310      	str	r3, [sp, #64]	; 0x40
   11b96:	920f      	str	r2, [sp, #60]	; 0x3c
   11b98:	910e      	str	r1, [sp, #56]	; 0x38
   11b9a:	9925      	ldr	r1, [sp, #148]	; 0x94
   11b9c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11b9e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   11ba0:	9313      	str	r3, [sp, #76]	; 0x4c
   11ba2:	9212      	str	r2, [sp, #72]	; 0x48
   11ba4:	9111      	str	r1, [sp, #68]	; 0x44
   11ba6:	9928      	ldr	r1, [sp, #160]	; 0xa0
   11ba8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   11baa:	9114      	str	r1, [sp, #80]	; 0x50
   11bac:	9215      	str	r2, [sp, #84]	; 0x54
   11bae:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
   11bb0:	9904      	ldr	r1, [sp, #16]
   11bb2:	9002      	str	r0, [sp, #8]
   11bb4:	4608      	mov	r0, r1
   11bb6:	9902      	ldr	r1, [sp, #8]
   11bb8:	f009 fddc 	bl	1b774 <__aeabi_memcpy>
    }
   11bbc:	b02a      	add	sp, #168	; 0xa8
   11bbe:	bd70      	pop	{r4, r5, r6, pc}

00011bc0 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
   11bc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   11bc2:	b087      	sub	sp, #28
   11bc4:	9006      	str	r0, [sp, #24]
   11bc6:	466a      	mov	r2, sp
        self.record.args = args;
   11bc8:	4613      	mov	r3, r2
   11bca:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
   11bce:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
   11bd2:	f100 010c 	add.w	r1, r0, #12
   11bd6:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11bda:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
   11bde:	b007      	add	sp, #28
   11be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

00011be2 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
   11be2:	b082      	sub	sp, #8
   11be4:	9000      	str	r0, [sp, #0]
   11be6:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
   11be8:	6001      	str	r1, [r0, #0]
    }
   11bea:	b002      	add	sp, #8
   11bec:	4770      	bx	lr

00011bee <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
   11bee:	b083      	sub	sp, #12
   11bf0:	9000      	str	r0, [sp, #0]
   11bf2:	9101      	str	r1, [sp, #4]
   11bf4:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
   11bf6:	6041      	str	r1, [r0, #4]
   11bf8:	6082      	str	r2, [r0, #8]
    }
   11bfa:	b003      	add	sp, #12
   11bfc:	4770      	bx	lr

00011bfe <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11bfe:	b580      	push	{r7, lr}
   11c00:	b088      	sub	sp, #32
   11c02:	9005      	str	r0, [sp, #20]
   11c04:	9106      	str	r1, [sp, #24]
   11c06:	9207      	str	r2, [sp, #28]
   11c08:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
   11c0a:	9001      	str	r0, [sp, #4]
   11c0c:	4618      	mov	r0, r3
   11c0e:	f7ff fed9 	bl	119c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11c12:	e7ff      	b.n	11c14 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
   11c14:	9802      	ldr	r0, [sp, #8]
   11c16:	9903      	ldr	r1, [sp, #12]
   11c18:	9a04      	ldr	r2, [sp, #16]
   11c1a:	9b01      	ldr	r3, [sp, #4]
   11c1c:	62da      	str	r2, [r3, #44]	; 0x2c
   11c1e:	6299      	str	r1, [r3, #40]	; 0x28
   11c20:	6258      	str	r0, [r3, #36]	; 0x24
    }
   11c22:	4618      	mov	r0, r3
   11c24:	b008      	add	sp, #32
   11c26:	bd80      	pop	{r7, pc}

00011c28 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
   11c28:	b580      	push	{r7, lr}
   11c2a:	b088      	sub	sp, #32
   11c2c:	9005      	str	r0, [sp, #20]
   11c2e:	9106      	str	r1, [sp, #24]
   11c30:	9207      	str	r2, [sp, #28]
   11c32:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
   11c34:	9001      	str	r0, [sp, #4]
   11c36:	4618      	mov	r0, r3
   11c38:	f7ff fec4 	bl	119c4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
   11c3c:	e7ff      	b.n	11c3e <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
   11c3e:	9802      	ldr	r0, [sp, #8]
   11c40:	9903      	ldr	r1, [sp, #12]
   11c42:	9a04      	ldr	r2, [sp, #16]
   11c44:	9b01      	ldr	r3, [sp, #4]
   11c46:	639a      	str	r2, [r3, #56]	; 0x38
   11c48:	6359      	str	r1, [r3, #52]	; 0x34
   11c4a:	6318      	str	r0, [r3, #48]	; 0x30
    }
   11c4c:	4618      	mov	r0, r3
   11c4e:	b008      	add	sp, #32
   11c50:	bd80      	pop	{r7, pc}

00011c52 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
   11c52:	b083      	sub	sp, #12
   11c54:	9000      	str	r0, [sp, #0]
   11c56:	9101      	str	r1, [sp, #4]
   11c58:	9202      	str	r2, [sp, #8]
        self.record.line = line;
   11c5a:	63c1      	str	r1, [r0, #60]	; 0x3c
   11c5c:	6402      	str	r2, [r0, #64]	; 0x40
    }
   11c5e:	b003      	add	sp, #12
   11c60:	4770      	bx	lr

00011c62 <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
   11c62:	b580      	push	{r7, lr}
   11c64:	b082      	sub	sp, #8
   11c66:	9101      	str	r1, [sp, #4]
        self.record.clone()
   11c68:	f000 f8e8 	bl	11e3c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
   11c6c:	e7ff      	b.n	11c6e <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
   11c6e:	b002      	add	sp, #8
   11c70:	bd80      	pop	{r7, pc}

00011c72 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
   11c72:	b580      	push	{r7, lr}
        MetadataBuilder::new()
   11c74:	f000 f802 	bl	11c7c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
   11c78:	e7ff      	b.n	11c7a <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
   11c7a:	bd80      	pop	{r7, pc}

00011c7c <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
   11c7c:	b084      	sub	sp, #16
   11c7e:	2103      	movs	r1, #3
                level: Level::Info,
   11c80:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
   11c82:	9903      	ldr	r1, [sp, #12]
   11c84:	9100      	str	r1, [sp, #0]
   11c86:	f64d 2130 	movw	r1, #55856	; 0xda30
   11c8a:	f2c0 0101 	movt	r1, #1
   11c8e:	9101      	str	r1, [sp, #4]
   11c90:	2100      	movs	r1, #0
   11c92:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
   11c94:	9900      	ldr	r1, [sp, #0]
   11c96:	9a01      	ldr	r2, [sp, #4]
   11c98:	9b02      	ldr	r3, [sp, #8]
   11c9a:	6083      	str	r3, [r0, #8]
   11c9c:	6042      	str	r2, [r0, #4]
   11c9e:	6001      	str	r1, [r0, #0]
    }
   11ca0:	b004      	add	sp, #16
   11ca2:	4770      	bx	lr

00011ca4 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
   11ca4:	b580      	push	{r7, lr}
   11ca6:	b082      	sub	sp, #8
   11ca8:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
   11caa:	f000 f91c 	bl	11ee6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11cae:	e7ff      	b.n	11cb0 <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
   11cb0:	b002      	add	sp, #8
   11cb2:	bd80      	pop	{r7, pc}

00011cb4 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
   11cb4:	b082      	sub	sp, #8
   11cb6:	9000      	str	r0, [sp, #0]
   11cb8:	9101      	str	r1, [sp, #4]
   11cba:	2000      	movs	r0, #0
    }
   11cbc:	b002      	add	sp, #8
   11cbe:	4770      	bx	lr

00011cc0 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
   11cc0:	b082      	sub	sp, #8
   11cc2:	9000      	str	r0, [sp, #0]
   11cc4:	9101      	str	r1, [sp, #4]
   11cc6:	b002      	add	sp, #8
   11cc8:	4770      	bx	lr

00011cca <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
   11cca:	b081      	sub	sp, #4
   11ccc:	9000      	str	r0, [sp, #0]
   11cce:	b001      	add	sp, #4
   11cd0:	4770      	bx	lr

00011cd2 <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
   11cd2:	b580      	push	{r7, lr}
   11cd4:	b084      	sub	sp, #16
   11cd6:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11cd8:	f88d 000f 	strb.w	r0, [sp, #15]
   11cdc:	f89d 100f 	ldrb.w	r1, [sp, #15]
   11ce0:	f644 2068 	movw	r0, #19048	; 0x4a68
   11ce4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11ce8:	f7ff fe0b 	bl	11902 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
   11cec:	9000      	str	r0, [sp, #0]
   11cee:	e7ff      	b.n	11cf0 <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
   11cf0:	9800      	ldr	r0, [sp, #0]
   11cf2:	2802      	cmp	r0, #2
   11cf4:	d109      	bne.n	11d0a <_ZN3log6logger17hf609e7cc1c031552E+0x38>
   11cf6:	e7ff      	b.n	11cf8 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
   11cf8:	f240 00f0 	movw	r0, #240	; 0xf0
   11cfc:	f2c2 0000 	movt	r0, #8192	; 0x2000
   11d00:	6801      	ldr	r1, [r0, #0]
   11d02:	6840      	ldr	r0, [r0, #4]
   11d04:	9101      	str	r1, [sp, #4]
   11d06:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11d08:	e00a      	b.n	11d20 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
   11d0a:	f64d 2064 	movw	r0, #55908	; 0xda64
   11d0e:	f2c0 0001 	movt	r0, #1
   11d12:	9001      	str	r0, [sp, #4]
   11d14:	f64d 204c 	movw	r0, #55884	; 0xda4c
   11d18:	f2c0 0001 	movt	r0, #1
   11d1c:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
   11d1e:	e7ff      	b.n	11d20 <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
   11d20:	9801      	ldr	r0, [sp, #4]
   11d22:	9902      	ldr	r1, [sp, #8]
        }
    }
}
   11d24:	b004      	add	sp, #16
   11d26:	bd80      	pop	{r7, pc}

00011d28 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
   11d28:	b570      	push	{r4, r5, r6, lr}
   11d2a:	b0ca      	sub	sp, #296	; 0x128
   11d2c:	9141      	str	r1, [sp, #260]	; 0x104
   11d2e:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
   11d30:	6813      	ldr	r3, [r2, #0]
   11d32:	f8d2 c004 	ldr.w	ip, [r2, #4]
   11d36:	9343      	str	r3, [sp, #268]	; 0x10c
   11d38:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
   11d3c:	f8d2 e008 	ldr.w	lr, [r2, #8]
   11d40:	68d4      	ldr	r4, [r2, #12]
   11d42:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
   11d46:	9446      	str	r4, [sp, #280]	; 0x118
   11d48:	6915      	ldr	r5, [r2, #16]
   11d4a:	6956      	ldr	r6, [r2, #20]
   11d4c:	9547      	str	r5, [sp, #284]	; 0x11c
   11d4e:	9648      	str	r6, [sp, #288]	; 0x120
   11d50:	6992      	ldr	r2, [r2, #24]
   11d52:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
   11d54:	9112      	str	r1, [sp, #72]	; 0x48
   11d56:	9011      	str	r0, [sp, #68]	; 0x44
   11d58:	9310      	str	r3, [sp, #64]	; 0x40
   11d5a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
   11d5e:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
   11d62:	940d      	str	r4, [sp, #52]	; 0x34
   11d64:	950c      	str	r5, [sp, #48]	; 0x30
   11d66:	960b      	str	r6, [sp, #44]	; 0x2c
   11d68:	920a      	str	r2, [sp, #40]	; 0x28
   11d6a:	f7ff ffb2 	bl	11cd2 <_ZN3log6logger17hf609e7cc1c031552E>
   11d6e:	9009      	str	r0, [sp, #36]	; 0x24
   11d70:	9108      	str	r1, [sp, #32]
   11d72:	e7ff      	b.n	11d74 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
   11d74:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
   11d76:	f7ff fed0 	bl	11b1a <_ZN3log6Record7builder17hde62ab0132265febE>
   11d7a:	e7ff      	b.n	11d7c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
   11d7c:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
   11d7e:	4601      	mov	r1, r0
   11d80:	9a11      	ldr	r2, [sp, #68]	; 0x44
   11d82:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
   11d86:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
   11d8a:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
   11d8c:	9007      	str	r0, [sp, #28]
   11d8e:	4608      	mov	r0, r1
   11d90:	9907      	ldr	r1, [sp, #28]
   11d92:	f7ff ff15 	bl	11bc0 <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
   11d96:	9006      	str	r0, [sp, #24]
   11d98:	e7ff      	b.n	11d9a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
   11d9a:	9806      	ldr	r0, [sp, #24]
   11d9c:	9912      	ldr	r1, [sp, #72]	; 0x48
   11d9e:	f7ff ff20 	bl	11be2 <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
   11da2:	9005      	str	r0, [sp, #20]
   11da4:	e7ff      	b.n	11da6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
   11da6:	9805      	ldr	r0, [sp, #20]
   11da8:	9910      	ldr	r1, [sp, #64]	; 0x40
   11daa:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11dac:	f7ff ff1f 	bl	11bee <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
   11db0:	9004      	str	r0, [sp, #16]
   11db2:	e7ff      	b.n	11db4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
   11db4:	980e      	ldr	r0, [sp, #56]	; 0x38
   11db6:	903b      	str	r0, [sp, #236]	; 0xec
   11db8:	990d      	ldr	r1, [sp, #52]	; 0x34
   11dba:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
   11dbc:	993b      	ldr	r1, [sp, #236]	; 0xec
   11dbe:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   11dc0:	9804      	ldr	r0, [sp, #16]
   11dc2:	f7ff ff1c 	bl	11bfe <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
   11dc6:	9003      	str	r0, [sp, #12]
   11dc8:	e7ff      	b.n	11dca <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
   11dca:	980c      	ldr	r0, [sp, #48]	; 0x30
   11dcc:	903d      	str	r0, [sp, #244]	; 0xf4
   11dce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11dd0:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
   11dd2:	993d      	ldr	r1, [sp, #244]	; 0xf4
   11dd4:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
   11dd6:	9803      	ldr	r0, [sp, #12]
   11dd8:	f7ff ff26 	bl	11c28 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
   11ddc:	9002      	str	r0, [sp, #8]
   11dde:	e7ff      	b.n	11de0 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
   11de0:	980a      	ldr	r0, [sp, #40]	; 0x28
   11de2:	9040      	str	r0, [sp, #256]	; 0x100
   11de4:	2101      	movs	r1, #1
   11de6:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
   11de8:	993f      	ldr	r1, [sp, #252]	; 0xfc
   11dea:	9a40      	ldr	r2, [sp, #256]	; 0x100
   11dec:	9802      	ldr	r0, [sp, #8]
   11dee:	f7ff ff30 	bl	11c52 <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
   11df2:	9001      	str	r0, [sp, #4]
   11df4:	e7ff      	b.n	11df6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
   11df6:	a813      	add	r0, sp, #76	; 0x4c
   11df8:	9901      	ldr	r1, [sp, #4]
   11dfa:	f7ff ff32 	bl	11c62 <_ZN3log13RecordBuilder5build17h83529556a009112eE>
   11dfe:	e7ff      	b.n	11e00 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
   11e00:	9808      	ldr	r0, [sp, #32]
   11e02:	6901      	ldr	r1, [r0, #16]
   11e04:	aa13      	add	r2, sp, #76	; 0x4c
   11e06:	9809      	ldr	r0, [sp, #36]	; 0x24
   11e08:	9100      	str	r1, [sp, #0]
   11e0a:	4611      	mov	r1, r2
   11e0c:	9a00      	ldr	r2, [sp, #0]
   11e0e:	4790      	blx	r2
   11e10:	e7ff      	b.n	11e12 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
   11e12:	b04a      	add	sp, #296	; 0x128
   11e14:	bd70      	pop	{r4, r5, r6, pc}

00011e16 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
   11e16:	b082      	sub	sp, #8
   11e18:	9100      	str	r1, [sp, #0]
   11e1a:	9201      	str	r2, [sp, #4]
   11e1c:	6041      	str	r1, [r0, #4]
   11e1e:	6082      	str	r2, [r0, #8]
   11e20:	2100      	movs	r1, #0
   11e22:	6001      	str	r1, [r0, #0]
   11e24:	b002      	add	sp, #8
   11e26:	4770      	bx	lr

00011e28 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11e28:	b081      	sub	sp, #4
   11e2a:	9100      	str	r1, [sp, #0]
   11e2c:	680a      	ldr	r2, [r1, #0]
   11e2e:	684b      	ldr	r3, [r1, #4]
   11e30:	6889      	ldr	r1, [r1, #8]
   11e32:	6081      	str	r1, [r0, #8]
   11e34:	6043      	str	r3, [r0, #4]
   11e36:	6002      	str	r2, [r0, #0]
   11e38:	b001      	add	sp, #4
   11e3a:	4770      	bx	lr

00011e3c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
   11e3c:	b570      	push	{r4, r5, r6, lr}
   11e3e:	b09c      	sub	sp, #112	; 0x70
   11e40:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
   11e42:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
   11e44:	f101 020c 	add.w	r2, r1, #12
   11e48:	4613      	mov	r3, r2
   11e4a:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
   11e4c:	f101 0224 	add.w	r2, r1, #36	; 0x24
   11e50:	4694      	mov	ip, r2
   11e52:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
   11e54:	f101 0230 	add.w	r2, r1, #48	; 0x30
   11e58:	4696      	mov	lr, r2
   11e5a:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
   11e5c:	f101 023c 	add.w	r2, r1, #60	; 0x3c
   11e60:	4614      	mov	r4, r2
   11e62:	921b      	str	r2, [sp, #108]	; 0x6c
   11e64:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
   11e66:	9006      	str	r0, [sp, #24]
   11e68:	4610      	mov	r0, r2
   11e6a:	9305      	str	r3, [sp, #20]
   11e6c:	f8cd c010 	str.w	ip, [sp, #16]
   11e70:	f8cd e00c 	str.w	lr, [sp, #12]
   11e74:	9402      	str	r4, [sp, #8]
   11e76:	f000 f836 	bl	11ee6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
   11e7a:	e7ff      	b.n	11e7c <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
   11e7c:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
   11e7e:	9905      	ldr	r1, [sp, #20]
   11e80:	f7ff fdf8 	bl	11a74 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
   11e84:	e7ff      	b.n	11e86 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
   11e86:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
   11e88:	9904      	ldr	r1, [sp, #16]
   11e8a:	f7ff fdfc 	bl	11a86 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11e8e:	e7ff      	b.n	11e90 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
   11e90:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
   11e92:	9903      	ldr	r1, [sp, #12]
   11e94:	f7ff fdf7 	bl	11a86 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
   11e98:	e7ff      	b.n	11e9a <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
   11e9a:	9802      	ldr	r0, [sp, #8]
   11e9c:	f7ff fe1a 	bl	11ad4 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
   11ea0:	9001      	str	r0, [sp, #4]
   11ea2:	9100      	str	r1, [sp, #0]
   11ea4:	e7ff      	b.n	11ea6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
   11ea6:	9807      	ldr	r0, [sp, #28]
   11ea8:	9908      	ldr	r1, [sp, #32]
   11eaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11eac:	9b06      	ldr	r3, [sp, #24]
   11eae:	609a      	str	r2, [r3, #8]
   11eb0:	6059      	str	r1, [r3, #4]
   11eb2:	6018      	str	r0, [r3, #0]
   11eb4:	f103 000c 	add.w	r0, r3, #12
   11eb8:	a90a      	add	r1, sp, #40	; 0x28
   11eba:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
   11ebe:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
   11ec2:	9810      	ldr	r0, [sp, #64]	; 0x40
   11ec4:	9911      	ldr	r1, [sp, #68]	; 0x44
   11ec6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   11ec8:	62da      	str	r2, [r3, #44]	; 0x2c
   11eca:	6299      	str	r1, [r3, #40]	; 0x28
   11ecc:	6258      	str	r0, [r3, #36]	; 0x24
   11ece:	9813      	ldr	r0, [sp, #76]	; 0x4c
   11ed0:	9914      	ldr	r1, [sp, #80]	; 0x50
   11ed2:	9a15      	ldr	r2, [sp, #84]	; 0x54
   11ed4:	639a      	str	r2, [r3, #56]	; 0x38
   11ed6:	6359      	str	r1, [r3, #52]	; 0x34
   11ed8:	6318      	str	r0, [r3, #48]	; 0x30
   11eda:	9801      	ldr	r0, [sp, #4]
   11edc:	63d8      	str	r0, [r3, #60]	; 0x3c
   11ede:	9900      	ldr	r1, [sp, #0]
   11ee0:	6419      	str	r1, [r3, #64]	; 0x40
   11ee2:	b01c      	add	sp, #112	; 0x70
   11ee4:	bd70      	pop	{r4, r5, r6, pc}

00011ee6 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11ee6:	b580      	push	{r7, lr}
   11ee8:	b088      	sub	sp, #32
   11eea:	9105      	str	r1, [sp, #20]
    level: Level,
   11eec:	9106      	str	r1, [sp, #24]
    target: &'a str,
   11eee:	1d0a      	adds	r2, r1, #4
   11ef0:	4613      	mov	r3, r2
   11ef2:	9207      	str	r2, [sp, #28]
    level: Level,
   11ef4:	9004      	str	r0, [sp, #16]
   11ef6:	4608      	mov	r0, r1
   11ef8:	9303      	str	r3, [sp, #12]
   11efa:	f7ff fe09 	bl	11b10 <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
   11efe:	9002      	str	r0, [sp, #8]
   11f00:	e7ff      	b.n	11f02 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
   11f02:	9803      	ldr	r0, [sp, #12]
   11f04:	f7ff fd55 	bl	119b2 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
   11f08:	9001      	str	r0, [sp, #4]
   11f0a:	9100      	str	r1, [sp, #0]
   11f0c:	e7ff      	b.n	11f0e <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
   11f0e:	9802      	ldr	r0, [sp, #8]
   11f10:	9904      	ldr	r1, [sp, #16]
   11f12:	6008      	str	r0, [r1, #0]
   11f14:	9a01      	ldr	r2, [sp, #4]
   11f16:	604a      	str	r2, [r1, #4]
   11f18:	9b00      	ldr	r3, [sp, #0]
   11f1a:	608b      	str	r3, [r1, #8]
   11f1c:	b008      	add	sp, #32
   11f1e:	bd80      	pop	{r7, pc}

00011f20 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   11f20:	b580      	push	{r7, lr}
   11f22:	b084      	sub	sp, #16
   11f24:	9002      	str	r0, [sp, #8]
   11f26:	9103      	str	r1, [sp, #12]
   11f28:	6800      	ldr	r0, [r0, #0]
   11f2a:	f000 f81c 	bl	11f66 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   11f2e:	9001      	str	r0, [sp, #4]
   11f30:	e7ff      	b.n	11f32 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   11f32:	9801      	ldr	r0, [sp, #4]
   11f34:	f000 0001 	and.w	r0, r0, #1
   11f38:	b004      	add	sp, #16
   11f3a:	bd80      	pop	{r7, pc}

00011f3c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   11f3c:	b089      	sub	sp, #36	; 0x24
   11f3e:	9005      	str	r0, [sp, #20]
   11f40:	9106      	str	r1, [sp, #24]
   11f42:	9107      	str	r1, [sp, #28]
   11f44:	9907      	ldr	r1, [sp, #28]
   11f46:	9002      	str	r0, [sp, #8]
   11f48:	9101      	str	r1, [sp, #4]
   11f4a:	e7ff      	b.n	11f4c <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   11f4c:	9802      	ldr	r0, [sp, #8]
   11f4e:	9008      	str	r0, [sp, #32]
   11f50:	9908      	ldr	r1, [sp, #32]
   11f52:	9100      	str	r1, [sp, #0]
   11f54:	e7ff      	b.n	11f56 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   11f56:	9800      	ldr	r0, [sp, #0]
   11f58:	9003      	str	r0, [sp, #12]
   11f5a:	9901      	ldr	r1, [sp, #4]
   11f5c:	9104      	str	r1, [sp, #16]
   11f5e:	9803      	ldr	r0, [sp, #12]
   11f60:	9904      	ldr	r1, [sp, #16]
   11f62:	b009      	add	sp, #36	; 0x24
   11f64:	4770      	bx	lr

00011f66 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   11f66:	b580      	push	{r7, lr}
   11f68:	b088      	sub	sp, #32
   11f6a:	9006      	str	r0, [sp, #24]
   11f6c:	9107      	str	r1, [sp, #28]
   11f6e:	9004      	str	r0, [sp, #16]
   11f70:	4608      	mov	r0, r1
   11f72:	9103      	str	r1, [sp, #12]
   11f74:	f003 ff93 	bl	15e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   11f78:	9002      	str	r0, [sp, #8]
   11f7a:	e7ff      	b.n	11f7c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   11f7c:	9802      	ldr	r0, [sp, #8]
   11f7e:	07c1      	lsls	r1, r0, #31
   11f80:	2900      	cmp	r1, #0
   11f82:	d105      	bne.n	11f90 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   11f84:	e7ff      	b.n	11f86 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   11f86:	9803      	ldr	r0, [sp, #12]
   11f88:	f003 ff8d 	bl	15ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   11f8c:	9001      	str	r0, [sp, #4]
   11f8e:	e007      	b.n	11fa0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   11f90:	9804      	ldr	r0, [sp, #16]
   11f92:	9903      	ldr	r1, [sp, #12]
   11f94:	f004 fd4e 	bl	16a34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   11f98:	f88d 0017 	strb.w	r0, [sp, #23]
   11f9c:	e7ff      	b.n	11f9e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   11f9e:	e015      	b.n	11fcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11fa0:	9801      	ldr	r0, [sp, #4]
   11fa2:	07c1      	lsls	r1, r0, #31
   11fa4:	2900      	cmp	r1, #0
   11fa6:	d107      	bne.n	11fb8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   11fa8:	e7ff      	b.n	11faa <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   11faa:	9804      	ldr	r0, [sp, #16]
   11fac:	9903      	ldr	r1, [sp, #12]
   11fae:	f004 fece 	bl	16d4e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   11fb2:	f88d 0017 	strb.w	r0, [sp, #23]
   11fb6:	e007      	b.n	11fc8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   11fb8:	9804      	ldr	r0, [sp, #16]
   11fba:	9903      	ldr	r1, [sp, #12]
   11fbc:	f004 fda5 	bl	16b0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   11fc0:	f88d 0017 	strb.w	r0, [sp, #23]
   11fc4:	e7ff      	b.n	11fc6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   11fc6:	e000      	b.n	11fca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11fc8:	e7ff      	b.n	11fca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   11fca:	e7ff      	b.n	11fcc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   11fcc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   11fd0:	b008      	add	sp, #32
   11fd2:	bd80      	pop	{r7, pc}

00011fd4 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   11fd4:	b086      	sub	sp, #24
   11fd6:	9004      	str	r0, [sp, #16]
   11fd8:	9105      	str	r1, [sp, #20]
   11fda:	9002      	str	r0, [sp, #8]
   11fdc:	9103      	str	r1, [sp, #12]
   11fde:	9802      	ldr	r0, [sp, #8]
   11fe0:	9903      	ldr	r1, [sp, #12]
   11fe2:	9000      	str	r0, [sp, #0]
   11fe4:	9101      	str	r1, [sp, #4]
   11fe6:	9800      	ldr	r0, [sp, #0]
   11fe8:	9901      	ldr	r1, [sp, #4]
   11fea:	b006      	add	sp, #24
   11fec:	4770      	bx	lr

00011fee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   11fee:	b580      	push	{r7, lr}
   11ff0:	b084      	sub	sp, #16
   11ff2:	9002      	str	r0, [sp, #8]
   11ff4:	9103      	str	r1, [sp, #12]
   11ff6:	f000 f805 	bl	12004 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   11ffa:	9001      	str	r0, [sp, #4]
   11ffc:	e7ff      	b.n	11ffe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   11ffe:	9801      	ldr	r0, [sp, #4]
   12000:	b004      	add	sp, #16
   12002:	bd80      	pop	{r7, pc}

00012004 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   12004:	b084      	sub	sp, #16
   12006:	9001      	str	r0, [sp, #4]
   12008:	9102      	str	r1, [sp, #8]
   1200a:	4408      	add	r0, r1
   1200c:	9003      	str	r0, [sp, #12]
   1200e:	9803      	ldr	r0, [sp, #12]
   12010:	9000      	str	r0, [sp, #0]
   12012:	e7ff      	b.n	12014 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   12014:	9800      	ldr	r0, [sp, #0]
   12016:	b004      	add	sp, #16
   12018:	4770      	bx	lr

0001201a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1201a:	b580      	push	{r7, lr}
   1201c:	b084      	sub	sp, #16
   1201e:	9002      	str	r0, [sp, #8]
   12020:	9103      	str	r1, [sp, #12]
   12022:	f7ff ffd7 	bl	11fd4 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   12026:	9001      	str	r0, [sp, #4]
   12028:	9100      	str	r1, [sp, #0]
   1202a:	e7ff      	b.n	1202c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1202c:	9801      	ldr	r0, [sp, #4]
   1202e:	9900      	ldr	r1, [sp, #0]
   12030:	b004      	add	sp, #16
   12032:	bd80      	pop	{r7, pc}

00012034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   12034:	b084      	sub	sp, #16
   12036:	9002      	str	r0, [sp, #8]
   12038:	9103      	str	r1, [sp, #12]
   1203a:	9000      	str	r0, [sp, #0]
   1203c:	9101      	str	r1, [sp, #4]
   1203e:	9801      	ldr	r0, [sp, #4]
   12040:	b004      	add	sp, #16
   12042:	4770      	bx	lr

00012044 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   12044:	b082      	sub	sp, #8
   12046:	9000      	str	r0, [sp, #0]
   12048:	9101      	str	r1, [sp, #4]
   1204a:	b002      	add	sp, #8
   1204c:	4770      	bx	lr

0001204e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   1204e:	b082      	sub	sp, #8
   12050:	9000      	str	r0, [sp, #0]
   12052:	9101      	str	r1, [sp, #4]
   12054:	7800      	ldrb	r0, [r0, #0]
   12056:	7809      	ldrb	r1, [r1, #0]
   12058:	1a40      	subs	r0, r0, r1
   1205a:	fab0 f080 	clz	r0, r0
   1205e:	0940      	lsrs	r0, r0, #5
   12060:	b002      	add	sp, #8
   12062:	4770      	bx	lr

00012064 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   12064:	b580      	push	{r7, lr}
   12066:	b084      	sub	sp, #16
   12068:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   1206a:	f002 fc93 	bl	14994 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hc3941f5f2cf5d6d6E>
   1206e:	9002      	str	r0, [sp, #8]
   12070:	9101      	str	r1, [sp, #4]
   12072:	e7ff      	b.n	12074 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E+0x10>
    }
   12074:	9802      	ldr	r0, [sp, #8]
   12076:	9901      	ldr	r1, [sp, #4]
   12078:	b004      	add	sp, #16
   1207a:	bd80      	pop	{r7, pc}

0001207c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   1207c:	b580      	push	{r7, lr}
   1207e:	b084      	sub	sp, #16
   12080:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   12082:	f002 fc72 	bl	1496a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   12086:	9002      	str	r0, [sp, #8]
   12088:	9101      	str	r1, [sp, #4]
   1208a:	e7ff      	b.n	1208c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   1208c:	9802      	ldr	r0, [sp, #8]
   1208e:	9901      	ldr	r1, [sp, #4]
   12090:	b004      	add	sp, #16
   12092:	bd80      	pop	{r7, pc}

00012094 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h0cfb45c01aa96099E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   12094:	b580      	push	{r7, lr}
   12096:	b084      	sub	sp, #16
   12098:	9001      	str	r0, [sp, #4]
   1209a:	9102      	str	r1, [sp, #8]
   1209c:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   1209e:	f002 fbc6 	bl	1482e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E>
   120a2:	9000      	str	r0, [sp, #0]
   120a4:	e7ff      	b.n	120a6 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h0cfb45c01aa96099E+0x12>
    }
   120a6:	9800      	ldr	r0, [sp, #0]
   120a8:	f000 0001 	and.w	r0, r0, #1
   120ac:	b004      	add	sp, #16
   120ae:	bd80      	pop	{r7, pc}

000120b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   120b0:	b580      	push	{r7, lr}
   120b2:	b086      	sub	sp, #24
   120b4:	460a      	mov	r2, r1
   120b6:	9004      	str	r0, [sp, #16]
   120b8:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   120bc:	9203      	str	r2, [sp, #12]
   120be:	f002 fc19 	bl	148f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   120c2:	9002      	str	r0, [sp, #8]
   120c4:	9101      	str	r1, [sp, #4]
   120c6:	e7ff      	b.n	120c8 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   120c8:	9802      	ldr	r0, [sp, #8]
   120ca:	f000 0001 	and.w	r0, r0, #1
   120ce:	9901      	ldr	r1, [sp, #4]
   120d0:	b006      	add	sp, #24
   120d2:	bd80      	pop	{r7, pc}

000120d4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   120d4:	b580      	push	{r7, lr}
   120d6:	b082      	sub	sp, #8
   120d8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   120da:	f002 fc34 	bl	14946 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   120de:	e7ff      	b.n	120e0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   120e0:	b002      	add	sp, #8
   120e2:	bd80      	pop	{r7, pc}

000120e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf245ed9d33da7eb8E>:
    pub fn clear(&mut self) {
   120e4:	b580      	push	{r7, lr}
   120e6:	b082      	sub	sp, #8
   120e8:	9001      	str	r0, [sp, #4]
        self.0.clear()
   120ea:	f002 fc35 	bl	14958 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17hfb0b120a86d4002aE>
   120ee:	e7ff      	b.n	120f0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf245ed9d33da7eb8E+0xc>
    }
   120f0:	b002      	add	sp, #8
   120f2:	bd80      	pop	{r7, pc}

000120f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17h034a10ccec9203c6E>:
    pub fn capacity(&self) -> usize {
   120f4:	b580      	push	{r7, lr}
   120f6:	b082      	sub	sp, #8
   120f8:	9001      	str	r0, [sp, #4]
        self.0.capacity()
   120fa:	f002 fc60 	bl	149be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h5acc6f9d6d8ec673E>
   120fe:	9000      	str	r0, [sp, #0]
   12100:	e7ff      	b.n	12102 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17h034a10ccec9203c6E+0xe>
    }
   12102:	9800      	ldr	r0, [sp, #0]
   12104:	b002      	add	sp, #8
   12106:	bd80      	pop	{r7, pc}

00012108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
   12108:	b081      	sub	sp, #4
   1210a:	9000      	str	r0, [sp, #0]
   1210c:	b001      	add	sp, #4
   1210e:	4770      	bx	lr

00012110 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   12110:	b580      	push	{r7, lr}
   12112:	b088      	sub	sp, #32
   12114:	9006      	str	r0, [sp, #24]
   12116:	9107      	str	r1, [sp, #28]
   12118:	9004      	str	r0, [sp, #16]
   1211a:	4608      	mov	r0, r1
   1211c:	9103      	str	r1, [sp, #12]
   1211e:	f003 febe 	bl	15e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   12122:	9002      	str	r0, [sp, #8]
   12124:	e7ff      	b.n	12126 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   12126:	9802      	ldr	r0, [sp, #8]
   12128:	07c1      	lsls	r1, r0, #31
   1212a:	2900      	cmp	r1, #0
   1212c:	d105      	bne.n	1213a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   1212e:	e7ff      	b.n	12130 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   12130:	9803      	ldr	r0, [sp, #12]
   12132:	f003 feb8 	bl	15ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   12136:	9001      	str	r0, [sp, #4]
   12138:	e007      	b.n	1214a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   1213a:	9804      	ldr	r0, [sp, #16]
   1213c:	9903      	ldr	r1, [sp, #12]
   1213e:	f004 fc79 	bl	16a34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   12142:	f88d 0017 	strb.w	r0, [sp, #23]
   12146:	e7ff      	b.n	12148 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   12148:	e015      	b.n	12176 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   1214a:	9801      	ldr	r0, [sp, #4]
   1214c:	07c1      	lsls	r1, r0, #31
   1214e:	2900      	cmp	r1, #0
   12150:	d107      	bne.n	12162 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   12152:	e7ff      	b.n	12154 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   12154:	9804      	ldr	r0, [sp, #16]
   12156:	9903      	ldr	r1, [sp, #12]
   12158:	f004 fd7f 	bl	16c5a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   1215c:	f88d 0017 	strb.w	r0, [sp, #23]
   12160:	e007      	b.n	12172 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   12162:	9804      	ldr	r0, [sp, #16]
   12164:	9903      	ldr	r1, [sp, #12]
   12166:	f004 fcd0 	bl	16b0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   1216a:	f88d 0017 	strb.w	r0, [sp, #23]
   1216e:	e7ff      	b.n	12170 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   12170:	e000      	b.n	12174 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12172:	e7ff      	b.n	12174 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   12174:	e7ff      	b.n	12176 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   12176:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1217a:	b008      	add	sp, #32
   1217c:	bd80      	pop	{r7, pc}

0001217e <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   1217e:	b580      	push	{r7, lr}
   12180:	b084      	sub	sp, #16
   12182:	9002      	str	r0, [sp, #8]
   12184:	9103      	str	r1, [sp, #12]
   12186:	6800      	ldr	r0, [r0, #0]
   12188:	6809      	ldr	r1, [r1, #0]
   1218a:	f7ff ff60 	bl	1204e <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   1218e:	9001      	str	r0, [sp, #4]
   12190:	e7ff      	b.n	12192 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   12192:	9801      	ldr	r0, [sp, #4]
   12194:	f000 0001 	and.w	r0, r0, #1
   12198:	b004      	add	sp, #16
   1219a:	bd80      	pop	{r7, pc}

0001219c <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
   1219c:	b082      	sub	sp, #8
   1219e:	460a      	mov	r2, r1
   121a0:	9000      	str	r0, [sp, #0]
   121a2:	f88d 1007 	strb.w	r1, [sp, #7]
   121a6:	7001      	strb	r1, [r0, #0]
   121a8:	b002      	add	sp, #8
   121aa:	4770      	bx	lr

000121ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   121ac:	b5b0      	push	{r4, r5, r7, lr}
   121ae:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   121b2:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   121b4:	f005 fcac 	bl	17b10 <hal_spi_disable>
   121b8:	e7ff      	b.n	121ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   121ba:	f240 01f8 	movw	r1, #248	; 0xf8
   121be:	f2c2 0100 	movt	r1, #8192	; 0x2000
   121c2:	2000      	movs	r0, #0
   121c4:	f005 fc62 	bl	17a8c <hal_spi_config>
   121c8:	906a      	str	r0, [sp, #424]	; 0x1a8
   121ca:	e7ff      	b.n	121cc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   121cc:	f64d 2068 	movw	r0, #55912	; 0xda68
   121d0:	f2c0 0001 	movt	r0, #1
   121d4:	6800      	ldr	r0, [r0, #0]
   121d6:	a96a      	add	r1, sp, #424	; 0x1a8
   121d8:	916b      	str	r1, [sp, #428]	; 0x1ac
   121da:	906c      	str	r0, [sp, #432]	; 0x1b0
   121dc:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   121de:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   121e2:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   121e4:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   121e8:	6802      	ldr	r2, [r0, #0]
   121ea:	680b      	ldr	r3, [r1, #0]
   121ec:	429a      	cmp	r2, r3
   121ee:	9068      	str	r0, [sp, #416]	; 0x1a0
   121f0:	9167      	str	r1, [sp, #412]	; 0x19c
   121f2:	d10c      	bne.n	1220e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   121f4:	e7ff      	b.n	121f6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   121f6:	f645 7004 	movw	r0, #24324	; 0x5f04
   121fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   121fe:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   12202:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   12206:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   1220a:	9066      	str	r0, [sp, #408]	; 0x198
   1220c:	e075      	b.n	122fa <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   1220e:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   12212:	f2c0 0001 	movt	r0, #1
   12216:	6801      	ldr	r1, [r0, #0]
   12218:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   1221a:	907c      	str	r0, [sp, #496]	; 0x1f0
   1221c:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   1221e:	927d      	str	r2, [sp, #500]	; 0x1f4
   12220:	f64d 23dc 	movw	r3, #56028	; 0xdadc
   12224:	f2c0 0301 	movt	r3, #1
   12228:	681b      	ldr	r3, [r3, #0]
   1222a:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   1222e:	f2c0 0c01 	movt	ip, #1
   12232:	f8dc c000 	ldr.w	ip, [ip]
   12236:	46ee      	mov	lr, sp
   12238:	2400      	movs	r4, #0
   1223a:	f8ce 4000 	str.w	r4, [lr]
   1223e:	a87e      	add	r0, sp, #504	; 0x1f8
   12240:	2201      	movs	r2, #1
   12242:	9165      	str	r1, [sp, #404]	; 0x194
   12244:	4619      	mov	r1, r3
   12246:	4663      	mov	r3, ip
   12248:	f7f6 fc28 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1224c:	e7ff      	b.n	1224e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   1224e:	a87c      	add	r0, sp, #496	; 0x1f0
   12250:	9079      	str	r0, [sp, #484]	; 0x1e4
   12252:	a87d      	add	r0, sp, #500	; 0x1f4
   12254:	907a      	str	r0, [sp, #488]	; 0x1e8
   12256:	a87e      	add	r0, sp, #504	; 0x1f8
   12258:	907b      	str	r0, [sp, #492]	; 0x1ec
   1225a:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   1225c:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   12260:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   12262:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   12266:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   12268:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   1226c:	f249 1397 	movw	r3, #37271	; 0x9197
   12270:	f2c0 0300 	movt	r3, #0
   12274:	9164      	str	r1, [sp, #400]	; 0x190
   12276:	4619      	mov	r1, r3
   12278:	9263      	str	r2, [sp, #396]	; 0x18c
   1227a:	f7f6 ffa8 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1227e:	9062      	str	r0, [sp, #392]	; 0x188
   12280:	9161      	str	r1, [sp, #388]	; 0x184
   12282:	e7ff      	b.n	12284 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   12284:	f249 1197 	movw	r1, #37271	; 0x9197
   12288:	f2c0 0100 	movt	r1, #0
   1228c:	9864      	ldr	r0, [sp, #400]	; 0x190
   1228e:	f7f6 ff9e 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12292:	9060      	str	r0, [sp, #384]	; 0x180
   12294:	915f      	str	r1, [sp, #380]	; 0x17c
   12296:	e7ff      	b.n	12298 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   12298:	f245 712b 	movw	r1, #22315	; 0x572b
   1229c:	f2c0 0101 	movt	r1, #1
   122a0:	9863      	ldr	r0, [sp, #396]	; 0x18c
   122a2:	f7f6 ffd3 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   122a6:	905e      	str	r0, [sp, #376]	; 0x178
   122a8:	915d      	str	r1, [sp, #372]	; 0x174
   122aa:	e7ff      	b.n	122ac <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   122ac:	9862      	ldr	r0, [sp, #392]	; 0x188
   122ae:	9073      	str	r0, [sp, #460]	; 0x1cc
   122b0:	9961      	ldr	r1, [sp, #388]	; 0x184
   122b2:	9174      	str	r1, [sp, #464]	; 0x1d0
   122b4:	9a60      	ldr	r2, [sp, #384]	; 0x180
   122b6:	9275      	str	r2, [sp, #468]	; 0x1d4
   122b8:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   122ba:	9376      	str	r3, [sp, #472]	; 0x1d8
   122bc:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   122c0:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   122c4:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   122c8:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   122cc:	466c      	mov	r4, sp
   122ce:	2503      	movs	r5, #3
   122d0:	6025      	str	r5, [r4, #0]
   122d2:	a86d      	add	r0, sp, #436	; 0x1b4
   122d4:	ab73      	add	r3, sp, #460	; 0x1cc
   122d6:	9965      	ldr	r1, [sp, #404]	; 0x194
   122d8:	462a      	mov	r2, r5
   122da:	f7f6 fbdf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   122de:	e7ff      	b.n	122e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   122e0:	f64d 20fc 	movw	r0, #56060	; 0xdafc
   122e4:	f2c0 0001 	movt	r0, #1
   122e8:	f002 ff31 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   122ec:	905c      	str	r0, [sp, #368]	; 0x170
   122ee:	e7ff      	b.n	122f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   122f0:	a86d      	add	r0, sp, #436	; 0x1b4
   122f2:	995c      	ldr	r1, [sp, #368]	; 0x170
   122f4:	f002 ff68 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   122f8:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   122fa:	f243 70b9 	movw	r0, #14265	; 0x37b9
   122fe:	f2c0 0001 	movt	r0, #1
   12302:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   12304:	9985      	ldr	r1, [sp, #532]	; 0x214
   12306:	2000      	movs	r0, #0
   12308:	9a66      	ldr	r2, [sp, #408]	; 0x198
   1230a:	f005 fc65 	bl	17bd8 <hal_spi_set_txrx_cb>
   1230e:	9084      	str	r0, [sp, #528]	; 0x210
   12310:	e7ff      	b.n	12312 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12312:	f64d 2068 	movw	r0, #55912	; 0xda68
   12316:	f2c0 0001 	movt	r0, #1
   1231a:	6800      	ldr	r0, [r0, #0]
   1231c:	a984      	add	r1, sp, #528	; 0x210
   1231e:	9186      	str	r1, [sp, #536]	; 0x218
   12320:	9087      	str	r0, [sp, #540]	; 0x21c
   12322:	9886      	ldr	r0, [sp, #536]	; 0x218
   12324:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   12328:	9987      	ldr	r1, [sp, #540]	; 0x21c
   1232a:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   1232e:	6802      	ldr	r2, [r0, #0]
   12330:	680b      	ldr	r3, [r1, #0]
   12332:	429a      	cmp	r2, r3
   12334:	905b      	str	r0, [sp, #364]	; 0x16c
   12336:	915a      	str	r1, [sp, #360]	; 0x168
   12338:	d105      	bne.n	12346 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   1233a:	e7ff      	b.n	1233c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   1233c:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1233e:	f005 fbc1 	bl	17ac4 <hal_spi_enable>
   12342:	909f      	str	r0, [sp, #636]	; 0x27c
   12344:	e075      	b.n	12432 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   12346:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   1234a:	f2c0 0001 	movt	r0, #1
   1234e:	6801      	ldr	r1, [r0, #0]
   12350:	985b      	ldr	r0, [sp, #364]	; 0x16c
   12352:	9097      	str	r0, [sp, #604]	; 0x25c
   12354:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   12356:	9298      	str	r2, [sp, #608]	; 0x260
   12358:	f64d 3320 	movw	r3, #56096	; 0xdb20
   1235c:	f2c0 0301 	movt	r3, #1
   12360:	681b      	ldr	r3, [r3, #0]
   12362:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   12366:	f2c0 0c01 	movt	ip, #1
   1236a:	f8dc c000 	ldr.w	ip, [ip]
   1236e:	46ee      	mov	lr, sp
   12370:	2400      	movs	r4, #0
   12372:	f8ce 4000 	str.w	r4, [lr]
   12376:	a899      	add	r0, sp, #612	; 0x264
   12378:	2201      	movs	r2, #1
   1237a:	9159      	str	r1, [sp, #356]	; 0x164
   1237c:	4619      	mov	r1, r3
   1237e:	4663      	mov	r3, ip
   12380:	f7f6 fb8c 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12384:	e7ff      	b.n	12386 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   12386:	a897      	add	r0, sp, #604	; 0x25c
   12388:	9094      	str	r0, [sp, #592]	; 0x250
   1238a:	a898      	add	r0, sp, #608	; 0x260
   1238c:	9095      	str	r0, [sp, #596]	; 0x254
   1238e:	a899      	add	r0, sp, #612	; 0x264
   12390:	9096      	str	r0, [sp, #600]	; 0x258
   12392:	9894      	ldr	r0, [sp, #592]	; 0x250
   12394:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   12398:	9995      	ldr	r1, [sp, #596]	; 0x254
   1239a:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   1239e:	9a96      	ldr	r2, [sp, #600]	; 0x258
   123a0:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   123a4:	f249 1397 	movw	r3, #37271	; 0x9197
   123a8:	f2c0 0300 	movt	r3, #0
   123ac:	9158      	str	r1, [sp, #352]	; 0x160
   123ae:	4619      	mov	r1, r3
   123b0:	9257      	str	r2, [sp, #348]	; 0x15c
   123b2:	f7f6 ff0c 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   123b6:	9056      	str	r0, [sp, #344]	; 0x158
   123b8:	9155      	str	r1, [sp, #340]	; 0x154
   123ba:	e7ff      	b.n	123bc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   123bc:	f249 1197 	movw	r1, #37271	; 0x9197
   123c0:	f2c0 0100 	movt	r1, #0
   123c4:	9858      	ldr	r0, [sp, #352]	; 0x160
   123c6:	f7f6 ff02 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   123ca:	9054      	str	r0, [sp, #336]	; 0x150
   123cc:	9153      	str	r1, [sp, #332]	; 0x14c
   123ce:	e7ff      	b.n	123d0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   123d0:	f245 712b 	movw	r1, #22315	; 0x572b
   123d4:	f2c0 0101 	movt	r1, #1
   123d8:	9857      	ldr	r0, [sp, #348]	; 0x15c
   123da:	f7f6 ff37 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   123de:	9052      	str	r0, [sp, #328]	; 0x148
   123e0:	9151      	str	r1, [sp, #324]	; 0x144
   123e2:	e7ff      	b.n	123e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   123e4:	9856      	ldr	r0, [sp, #344]	; 0x158
   123e6:	908e      	str	r0, [sp, #568]	; 0x238
   123e8:	9955      	ldr	r1, [sp, #340]	; 0x154
   123ea:	918f      	str	r1, [sp, #572]	; 0x23c
   123ec:	9a54      	ldr	r2, [sp, #336]	; 0x150
   123ee:	9290      	str	r2, [sp, #576]	; 0x240
   123f0:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   123f2:	9391      	str	r3, [sp, #580]	; 0x244
   123f4:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   123f8:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   123fc:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   12400:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   12404:	466c      	mov	r4, sp
   12406:	2503      	movs	r5, #3
   12408:	6025      	str	r5, [r4, #0]
   1240a:	a888      	add	r0, sp, #544	; 0x220
   1240c:	ab8e      	add	r3, sp, #568	; 0x238
   1240e:	9959      	ldr	r1, [sp, #356]	; 0x164
   12410:	462a      	mov	r2, r5
   12412:	f7f6 fb43 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12416:	e7ff      	b.n	12418 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   12418:	f64d 3024 	movw	r0, #56100	; 0xdb24
   1241c:	f2c0 0001 	movt	r0, #1
   12420:	f002 fe95 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12424:	9050      	str	r0, [sp, #320]	; 0x140
   12426:	e7ff      	b.n	12428 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   12428:	a888      	add	r0, sp, #544	; 0x220
   1242a:	9950      	ldr	r1, [sp, #320]	; 0x140
   1242c:	f002 fecc 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12430:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12432:	f64d 2068 	movw	r0, #55912	; 0xda68
   12436:	f2c0 0001 	movt	r0, #1
   1243a:	6800      	ldr	r0, [r0, #0]
   1243c:	a99f      	add	r1, sp, #636	; 0x27c
   1243e:	91a0      	str	r1, [sp, #640]	; 0x280
   12440:	90a1      	str	r0, [sp, #644]	; 0x284
   12442:	98a0      	ldr	r0, [sp, #640]	; 0x280
   12444:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   12448:	99a1      	ldr	r1, [sp, #644]	; 0x284
   1244a:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   1244e:	6802      	ldr	r2, [r0, #0]
   12450:	680b      	ldr	r3, [r1, #0]
   12452:	429a      	cmp	r2, r3
   12454:	904f      	str	r0, [sp, #316]	; 0x13c
   12456:	914e      	str	r1, [sp, #312]	; 0x138
   12458:	d106      	bne.n	12468 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   1245a:	e7ff      	b.n	1245c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   1245c:	2019      	movs	r0, #25
   1245e:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12460:	f004 ff06 	bl	17270 <hal_gpio_init_out>
   12464:	90b9      	str	r0, [sp, #740]	; 0x2e4
   12466:	e075      	b.n	12554 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   12468:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   1246c:	f2c0 0001 	movt	r0, #1
   12470:	6801      	ldr	r1, [r0, #0]
   12472:	984f      	ldr	r0, [sp, #316]	; 0x13c
   12474:	90b1      	str	r0, [sp, #708]	; 0x2c4
   12476:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   12478:	92b2      	str	r2, [sp, #712]	; 0x2c8
   1247a:	f64d 334c 	movw	r3, #56140	; 0xdb4c
   1247e:	f2c0 0301 	movt	r3, #1
   12482:	681b      	ldr	r3, [r3, #0]
   12484:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   12488:	f2c0 0c01 	movt	ip, #1
   1248c:	f8dc c000 	ldr.w	ip, [ip]
   12490:	46ee      	mov	lr, sp
   12492:	2400      	movs	r4, #0
   12494:	f8ce 4000 	str.w	r4, [lr]
   12498:	a8b3      	add	r0, sp, #716	; 0x2cc
   1249a:	2201      	movs	r2, #1
   1249c:	914d      	str	r1, [sp, #308]	; 0x134
   1249e:	4619      	mov	r1, r3
   124a0:	4663      	mov	r3, ip
   124a2:	f7f6 fafb 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   124a6:	e7ff      	b.n	124a8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   124a8:	a8b1      	add	r0, sp, #708	; 0x2c4
   124aa:	90ae      	str	r0, [sp, #696]	; 0x2b8
   124ac:	a8b2      	add	r0, sp, #712	; 0x2c8
   124ae:	90af      	str	r0, [sp, #700]	; 0x2bc
   124b0:	a8b3      	add	r0, sp, #716	; 0x2cc
   124b2:	90b0      	str	r0, [sp, #704]	; 0x2c0
   124b4:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   124b6:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   124ba:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   124bc:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   124c0:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   124c2:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   124c6:	f249 1397 	movw	r3, #37271	; 0x9197
   124ca:	f2c0 0300 	movt	r3, #0
   124ce:	914c      	str	r1, [sp, #304]	; 0x130
   124d0:	4619      	mov	r1, r3
   124d2:	924b      	str	r2, [sp, #300]	; 0x12c
   124d4:	f7f6 fe7b 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   124d8:	904a      	str	r0, [sp, #296]	; 0x128
   124da:	9149      	str	r1, [sp, #292]	; 0x124
   124dc:	e7ff      	b.n	124de <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   124de:	f249 1197 	movw	r1, #37271	; 0x9197
   124e2:	f2c0 0100 	movt	r1, #0
   124e6:	984c      	ldr	r0, [sp, #304]	; 0x130
   124e8:	f7f6 fe71 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   124ec:	9048      	str	r0, [sp, #288]	; 0x120
   124ee:	9147      	str	r1, [sp, #284]	; 0x11c
   124f0:	e7ff      	b.n	124f2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   124f2:	f245 712b 	movw	r1, #22315	; 0x572b
   124f6:	f2c0 0101 	movt	r1, #1
   124fa:	984b      	ldr	r0, [sp, #300]	; 0x12c
   124fc:	f7f6 fea6 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12500:	9046      	str	r0, [sp, #280]	; 0x118
   12502:	9145      	str	r1, [sp, #276]	; 0x114
   12504:	e7ff      	b.n	12506 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   12506:	984a      	ldr	r0, [sp, #296]	; 0x128
   12508:	90a8      	str	r0, [sp, #672]	; 0x2a0
   1250a:	9949      	ldr	r1, [sp, #292]	; 0x124
   1250c:	91a9      	str	r1, [sp, #676]	; 0x2a4
   1250e:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12510:	92aa      	str	r2, [sp, #680]	; 0x2a8
   12512:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   12514:	93ab      	str	r3, [sp, #684]	; 0x2ac
   12516:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1251a:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   1251e:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   12522:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   12526:	466c      	mov	r4, sp
   12528:	2503      	movs	r5, #3
   1252a:	6025      	str	r5, [r4, #0]
   1252c:	a8a2      	add	r0, sp, #648	; 0x288
   1252e:	aba8      	add	r3, sp, #672	; 0x2a0
   12530:	994d      	ldr	r1, [sp, #308]	; 0x134
   12532:	462a      	mov	r2, r5
   12534:	f7f6 fab2 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12538:	e7ff      	b.n	1253a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   1253a:	f64d 3050 	movw	r0, #56144	; 0xdb50
   1253e:	f2c0 0001 	movt	r0, #1
   12542:	f002 fe04 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12546:	9044      	str	r0, [sp, #272]	; 0x110
   12548:	e7ff      	b.n	1254a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   1254a:	a8a2      	add	r0, sp, #648	; 0x288
   1254c:	9944      	ldr	r1, [sp, #272]	; 0x110
   1254e:	f002 fe3b 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12552:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12554:	f64d 2068 	movw	r0, #55912	; 0xda68
   12558:	f2c0 0001 	movt	r0, #1
   1255c:	6800      	ldr	r0, [r0, #0]
   1255e:	a9b9      	add	r1, sp, #740	; 0x2e4
   12560:	91ba      	str	r1, [sp, #744]	; 0x2e8
   12562:	90bb      	str	r0, [sp, #748]	; 0x2ec
   12564:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   12566:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   1256a:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   1256c:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   12570:	6802      	ldr	r2, [r0, #0]
   12572:	680b      	ldr	r3, [r1, #0]
   12574:	429a      	cmp	r2, r3
   12576:	9043      	str	r0, [sp, #268]	; 0x10c
   12578:	9142      	str	r1, [sp, #264]	; 0x108
   1257a:	d106      	bne.n	1258a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   1257c:	e7ff      	b.n	1257e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   1257e:	2012      	movs	r0, #18
   12580:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12582:	f004 fe75 	bl	17270 <hal_gpio_init_out>
   12586:	90d3      	str	r0, [sp, #844]	; 0x34c
   12588:	e075      	b.n	12676 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1258a:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   1258e:	f2c0 0001 	movt	r0, #1
   12592:	6801      	ldr	r1, [r0, #0]
   12594:	9843      	ldr	r0, [sp, #268]	; 0x10c
   12596:	90cb      	str	r0, [sp, #812]	; 0x32c
   12598:	9a42      	ldr	r2, [sp, #264]	; 0x108
   1259a:	92cc      	str	r2, [sp, #816]	; 0x330
   1259c:	f64d 3374 	movw	r3, #56180	; 0xdb74
   125a0:	f2c0 0301 	movt	r3, #1
   125a4:	681b      	ldr	r3, [r3, #0]
   125a6:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   125aa:	f2c0 0c01 	movt	ip, #1
   125ae:	f8dc c000 	ldr.w	ip, [ip]
   125b2:	46ee      	mov	lr, sp
   125b4:	2400      	movs	r4, #0
   125b6:	f8ce 4000 	str.w	r4, [lr]
   125ba:	a8cd      	add	r0, sp, #820	; 0x334
   125bc:	2201      	movs	r2, #1
   125be:	9141      	str	r1, [sp, #260]	; 0x104
   125c0:	4619      	mov	r1, r3
   125c2:	4663      	mov	r3, ip
   125c4:	f7f6 fa6a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   125c8:	e7ff      	b.n	125ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   125ca:	a8cb      	add	r0, sp, #812	; 0x32c
   125cc:	90c8      	str	r0, [sp, #800]	; 0x320
   125ce:	a8cc      	add	r0, sp, #816	; 0x330
   125d0:	90c9      	str	r0, [sp, #804]	; 0x324
   125d2:	a8cd      	add	r0, sp, #820	; 0x334
   125d4:	90ca      	str	r0, [sp, #808]	; 0x328
   125d6:	98c8      	ldr	r0, [sp, #800]	; 0x320
   125d8:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   125dc:	99c9      	ldr	r1, [sp, #804]	; 0x324
   125de:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   125e2:	9aca      	ldr	r2, [sp, #808]	; 0x328
   125e4:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   125e8:	f249 1397 	movw	r3, #37271	; 0x9197
   125ec:	f2c0 0300 	movt	r3, #0
   125f0:	9140      	str	r1, [sp, #256]	; 0x100
   125f2:	4619      	mov	r1, r3
   125f4:	923f      	str	r2, [sp, #252]	; 0xfc
   125f6:	f7f6 fdea 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   125fa:	903e      	str	r0, [sp, #248]	; 0xf8
   125fc:	913d      	str	r1, [sp, #244]	; 0xf4
   125fe:	e7ff      	b.n	12600 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   12600:	f249 1197 	movw	r1, #37271	; 0x9197
   12604:	f2c0 0100 	movt	r1, #0
   12608:	9840      	ldr	r0, [sp, #256]	; 0x100
   1260a:	f7f6 fde0 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1260e:	903c      	str	r0, [sp, #240]	; 0xf0
   12610:	913b      	str	r1, [sp, #236]	; 0xec
   12612:	e7ff      	b.n	12614 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   12614:	f245 712b 	movw	r1, #22315	; 0x572b
   12618:	f2c0 0101 	movt	r1, #1
   1261c:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1261e:	f7f6 fe15 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12622:	903a      	str	r0, [sp, #232]	; 0xe8
   12624:	9139      	str	r1, [sp, #228]	; 0xe4
   12626:	e7ff      	b.n	12628 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   12628:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1262a:	90c2      	str	r0, [sp, #776]	; 0x308
   1262c:	993d      	ldr	r1, [sp, #244]	; 0xf4
   1262e:	91c3      	str	r1, [sp, #780]	; 0x30c
   12630:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   12632:	92c4      	str	r2, [sp, #784]	; 0x310
   12634:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   12636:	93c5      	str	r3, [sp, #788]	; 0x314
   12638:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   1263c:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   12640:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   12644:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   12648:	466c      	mov	r4, sp
   1264a:	2503      	movs	r5, #3
   1264c:	6025      	str	r5, [r4, #0]
   1264e:	a8bc      	add	r0, sp, #752	; 0x2f0
   12650:	abc2      	add	r3, sp, #776	; 0x308
   12652:	9941      	ldr	r1, [sp, #260]	; 0x104
   12654:	462a      	mov	r2, r5
   12656:	f7f6 fa21 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1265a:	e7ff      	b.n	1265c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   1265c:	f64d 3078 	movw	r0, #56184	; 0xdb78
   12660:	f2c0 0001 	movt	r0, #1
   12664:	f002 fd73 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12668:	9038      	str	r0, [sp, #224]	; 0xe0
   1266a:	e7ff      	b.n	1266c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   1266c:	a8bc      	add	r0, sp, #752	; 0x2f0
   1266e:	9938      	ldr	r1, [sp, #224]	; 0xe0
   12670:	f002 fdaa 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12674:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   12676:	f64d 2068 	movw	r0, #55912	; 0xda68
   1267a:	f2c0 0001 	movt	r0, #1
   1267e:	6800      	ldr	r0, [r0, #0]
   12680:	a9d3      	add	r1, sp, #844	; 0x34c
   12682:	91d4      	str	r1, [sp, #848]	; 0x350
   12684:	90d5      	str	r0, [sp, #852]	; 0x354
   12686:	98d4      	ldr	r0, [sp, #848]	; 0x350
   12688:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   1268c:	99d5      	ldr	r1, [sp, #852]	; 0x354
   1268e:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   12692:	6802      	ldr	r2, [r0, #0]
   12694:	680b      	ldr	r3, [r1, #0]
   12696:	429a      	cmp	r2, r3
   12698:	9037      	str	r0, [sp, #220]	; 0xdc
   1269a:	9136      	str	r1, [sp, #216]	; 0xd8
   1269c:	d107      	bne.n	126ae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   1269e:	e7ff      	b.n	126a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   126a0:	f645 20a4 	movw	r0, #23204	; 0x5aa4
   126a4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   126a8:	f005 feec 	bl	18484 <os_eventq_init>
   126ac:	e075      	b.n	1279a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   126ae:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   126b2:	f2c0 0001 	movt	r0, #1
   126b6:	6801      	ldr	r1, [r0, #0]
   126b8:	9837      	ldr	r0, [sp, #220]	; 0xdc
   126ba:	90e5      	str	r0, [sp, #916]	; 0x394
   126bc:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   126be:	92e6      	str	r2, [sp, #920]	; 0x398
   126c0:	f64d 3374 	movw	r3, #56180	; 0xdb74
   126c4:	f2c0 0301 	movt	r3, #1
   126c8:	681b      	ldr	r3, [r3, #0]
   126ca:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   126ce:	f2c0 0c01 	movt	ip, #1
   126d2:	f8dc c000 	ldr.w	ip, [ip]
   126d6:	46ee      	mov	lr, sp
   126d8:	2400      	movs	r4, #0
   126da:	f8ce 4000 	str.w	r4, [lr]
   126de:	a8e7      	add	r0, sp, #924	; 0x39c
   126e0:	2201      	movs	r2, #1
   126e2:	9135      	str	r1, [sp, #212]	; 0xd4
   126e4:	4619      	mov	r1, r3
   126e6:	4663      	mov	r3, ip
   126e8:	f7f6 f9d8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   126ec:	e7ff      	b.n	126ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   126ee:	a8e5      	add	r0, sp, #916	; 0x394
   126f0:	90e2      	str	r0, [sp, #904]	; 0x388
   126f2:	a8e6      	add	r0, sp, #920	; 0x398
   126f4:	90e3      	str	r0, [sp, #908]	; 0x38c
   126f6:	a8e7      	add	r0, sp, #924	; 0x39c
   126f8:	90e4      	str	r0, [sp, #912]	; 0x390
   126fa:	98e2      	ldr	r0, [sp, #904]	; 0x388
   126fc:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   12700:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   12702:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   12706:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   12708:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   1270c:	f249 1397 	movw	r3, #37271	; 0x9197
   12710:	f2c0 0300 	movt	r3, #0
   12714:	9134      	str	r1, [sp, #208]	; 0xd0
   12716:	4619      	mov	r1, r3
   12718:	9233      	str	r2, [sp, #204]	; 0xcc
   1271a:	f7f6 fd58 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1271e:	9032      	str	r0, [sp, #200]	; 0xc8
   12720:	9131      	str	r1, [sp, #196]	; 0xc4
   12722:	e7ff      	b.n	12724 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   12724:	f249 1197 	movw	r1, #37271	; 0x9197
   12728:	f2c0 0100 	movt	r1, #0
   1272c:	9834      	ldr	r0, [sp, #208]	; 0xd0
   1272e:	f7f6 fd4e 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12732:	9030      	str	r0, [sp, #192]	; 0xc0
   12734:	912f      	str	r1, [sp, #188]	; 0xbc
   12736:	e7ff      	b.n	12738 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   12738:	f245 712b 	movw	r1, #22315	; 0x572b
   1273c:	f2c0 0101 	movt	r1, #1
   12740:	9833      	ldr	r0, [sp, #204]	; 0xcc
   12742:	f7f6 fd83 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12746:	902e      	str	r0, [sp, #184]	; 0xb8
   12748:	912d      	str	r1, [sp, #180]	; 0xb4
   1274a:	e7ff      	b.n	1274c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   1274c:	9832      	ldr	r0, [sp, #200]	; 0xc8
   1274e:	90dc      	str	r0, [sp, #880]	; 0x370
   12750:	9931      	ldr	r1, [sp, #196]	; 0xc4
   12752:	91dd      	str	r1, [sp, #884]	; 0x374
   12754:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   12756:	92de      	str	r2, [sp, #888]	; 0x378
   12758:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1275a:	93df      	str	r3, [sp, #892]	; 0x37c
   1275c:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   12760:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   12764:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   12768:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   1276c:	466c      	mov	r4, sp
   1276e:	2503      	movs	r5, #3
   12770:	6025      	str	r5, [r4, #0]
   12772:	a8d6      	add	r0, sp, #856	; 0x358
   12774:	abdc      	add	r3, sp, #880	; 0x370
   12776:	9935      	ldr	r1, [sp, #212]	; 0xd4
   12778:	462a      	mov	r2, r5
   1277a:	f7f6 f98f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1277e:	e7ff      	b.n	12780 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   12780:	f64d 3088 	movw	r0, #56200	; 0xdb88
   12784:	f2c0 0001 	movt	r0, #1
   12788:	f002 fce1 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1278c:	902c      	str	r0, [sp, #176]	; 0xb0
   1278e:	e7ff      	b.n	12790 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   12790:	a8d6      	add	r0, sp, #856	; 0x358
   12792:	992c      	ldr	r1, [sp, #176]	; 0xb0
   12794:	f002 fd18 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12798:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   1279a:	f243 109b 	movw	r0, #12699	; 0x319b
   1279e:	f2c0 0001 	movt	r0, #1
   127a2:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   127a4:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   127a6:	f645 208c 	movw	r0, #23180	; 0x5a8c
   127aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   127ae:	2200      	movs	r2, #0
   127b0:	f005 ff16 	bl	185e0 <os_mqueue_init>
   127b4:	90ed      	str	r0, [sp, #948]	; 0x3b4
   127b6:	e7ff      	b.n	127b8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   127b8:	f64d 2068 	movw	r0, #55912	; 0xda68
   127bc:	f2c0 0001 	movt	r0, #1
   127c0:	6800      	ldr	r0, [r0, #0]
   127c2:	a9ed      	add	r1, sp, #948	; 0x3b4
   127c4:	91ef      	str	r1, [sp, #956]	; 0x3bc
   127c6:	90f0      	str	r0, [sp, #960]	; 0x3c0
   127c8:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   127ca:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   127ce:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   127d0:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   127d4:	6802      	ldr	r2, [r0, #0]
   127d6:	680b      	ldr	r3, [r1, #0]
   127d8:	429a      	cmp	r2, r3
   127da:	902b      	str	r0, [sp, #172]	; 0xac
   127dc:	912a      	str	r1, [sp, #168]	; 0xa8
   127de:	d10a      	bne.n	127f6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   127e0:	e7ff      	b.n	127e2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   127e2:	f645 207c 	movw	r0, #23164	; 0x5a7c
   127e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   127ea:	2100      	movs	r1, #0
   127ec:	f006 fbf2 	bl	18fd4 <os_sem_init>
   127f0:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   127f4:	e07b      	b.n	128ee <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   127f6:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   127fa:	f2c0 0001 	movt	r0, #1
   127fe:	6801      	ldr	r1, [r0, #0]
   12800:	982b      	ldr	r0, [sp, #172]	; 0xac
   12802:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   12806:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   12808:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   1280c:	f64d 33ac 	movw	r3, #56236	; 0xdbac
   12810:	f2c0 0301 	movt	r3, #1
   12814:	681b      	ldr	r3, [r3, #0]
   12816:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   1281a:	f2c0 0c01 	movt	ip, #1
   1281e:	f8dc c000 	ldr.w	ip, [ip]
   12822:	46ee      	mov	lr, sp
   12824:	2400      	movs	r4, #0
   12826:	f8ce 4000 	str.w	r4, [lr]
   1282a:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   1282e:	2201      	movs	r2, #1
   12830:	9129      	str	r1, [sp, #164]	; 0xa4
   12832:	4619      	mov	r1, r3
   12834:	4663      	mov	r3, ip
   12836:	f7f6 f931 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1283a:	e7ff      	b.n	1283c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   1283c:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   12840:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   12842:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   12846:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   12848:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   1284c:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   1284e:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   12850:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   12854:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   12856:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   1285a:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   1285c:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   12860:	f249 1397 	movw	r3, #37271	; 0x9197
   12864:	f2c0 0300 	movt	r3, #0
   12868:	9128      	str	r1, [sp, #160]	; 0xa0
   1286a:	4619      	mov	r1, r3
   1286c:	9227      	str	r2, [sp, #156]	; 0x9c
   1286e:	f7f6 fcae 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12872:	9026      	str	r0, [sp, #152]	; 0x98
   12874:	9125      	str	r1, [sp, #148]	; 0x94
   12876:	e7ff      	b.n	12878 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   12878:	f249 1197 	movw	r1, #37271	; 0x9197
   1287c:	f2c0 0100 	movt	r1, #0
   12880:	9828      	ldr	r0, [sp, #160]	; 0xa0
   12882:	f7f6 fca4 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   12886:	9024      	str	r0, [sp, #144]	; 0x90
   12888:	9123      	str	r1, [sp, #140]	; 0x8c
   1288a:	e7ff      	b.n	1288c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   1288c:	f245 712b 	movw	r1, #22315	; 0x572b
   12890:	f2c0 0101 	movt	r1, #1
   12894:	9827      	ldr	r0, [sp, #156]	; 0x9c
   12896:	f7f6 fcd9 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1289a:	9022      	str	r0, [sp, #136]	; 0x88
   1289c:	9121      	str	r1, [sp, #132]	; 0x84
   1289e:	e7ff      	b.n	128a0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   128a0:	9826      	ldr	r0, [sp, #152]	; 0x98
   128a2:	90f7      	str	r0, [sp, #988]	; 0x3dc
   128a4:	9925      	ldr	r1, [sp, #148]	; 0x94
   128a6:	91f8      	str	r1, [sp, #992]	; 0x3e0
   128a8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   128aa:	92f9      	str	r2, [sp, #996]	; 0x3e4
   128ac:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   128ae:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   128b0:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   128b4:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   128b8:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   128bc:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   128c0:	466c      	mov	r4, sp
   128c2:	2503      	movs	r5, #3
   128c4:	6025      	str	r5, [r4, #0]
   128c6:	a8f1      	add	r0, sp, #964	; 0x3c4
   128c8:	abf7      	add	r3, sp, #988	; 0x3dc
   128ca:	9929      	ldr	r1, [sp, #164]	; 0xa4
   128cc:	462a      	mov	r2, r5
   128ce:	f7f6 f8e5 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   128d2:	e7ff      	b.n	128d4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   128d4:	f64d 30b0 	movw	r0, #56240	; 0xdbb0
   128d8:	f2c0 0001 	movt	r0, #1
   128dc:	f002 fc37 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   128e0:	9020      	str	r0, [sp, #128]	; 0x80
   128e2:	e7ff      	b.n	128e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   128e4:	a8f1      	add	r0, sp, #964	; 0x3c4
   128e6:	9920      	ldr	r1, [sp, #128]	; 0x80
   128e8:	f002 fc6e 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   128ec:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   128ee:	f64d 2068 	movw	r0, #55912	; 0xda68
   128f2:	f2c0 0001 	movt	r0, #1
   128f6:	6800      	ldr	r0, [r0, #0]
   128f8:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   128fc:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   12900:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   12904:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   12908:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   1290c:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   12910:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   12914:	6802      	ldr	r2, [r0, #0]
   12916:	680b      	ldr	r3, [r1, #0]
   12918:	429a      	cmp	r2, r3
   1291a:	901f      	str	r0, [sp, #124]	; 0x7c
   1291c:	911e      	str	r1, [sp, #120]	; 0x78
   1291e:	d10a      	bne.n	12936 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   12920:	e7ff      	b.n	12922 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   12922:	f645 2084 	movw	r0, #23172	; 0x5a84
   12926:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1292a:	2102      	movs	r1, #2
   1292c:	f006 fb52 	bl	18fd4 <os_sem_init>
   12930:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   12934:	e088      	b.n	12a48 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12936:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   1293a:	f2c0 0001 	movt	r0, #1
   1293e:	6801      	ldr	r1, [r0, #0]
   12940:	981f      	ldr	r0, [sp, #124]	; 0x7c
   12942:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   12946:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   12948:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   1294c:	f64d 33d8 	movw	r3, #56280	; 0xdbd8
   12950:	f2c0 0301 	movt	r3, #1
   12954:	681b      	ldr	r3, [r3, #0]
   12956:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   1295a:	f2c0 0c01 	movt	ip, #1
   1295e:	f8dc c000 	ldr.w	ip, [ip]
   12962:	46ee      	mov	lr, sp
   12964:	2400      	movs	r4, #0
   12966:	f8ce 4000 	str.w	r4, [lr]
   1296a:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   1296e:	2201      	movs	r2, #1
   12970:	911d      	str	r1, [sp, #116]	; 0x74
   12972:	4619      	mov	r1, r3
   12974:	4663      	mov	r3, ip
   12976:	f7f6 f891 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1297a:	e7ff      	b.n	1297c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   1297c:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   12980:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   12984:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   12988:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   1298c:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   12990:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   12994:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   12998:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   1299c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   129a0:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   129a4:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   129a8:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   129ac:	f640 638f 	movw	r3, #3727	; 0xe8f
   129b0:	f2c0 0301 	movt	r3, #1
   129b4:	911c      	str	r1, [sp, #112]	; 0x70
   129b6:	4619      	mov	r1, r3
   129b8:	921b      	str	r2, [sp, #108]	; 0x6c
   129ba:	f7f6 fc32 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   129be:	901a      	str	r0, [sp, #104]	; 0x68
   129c0:	9119      	str	r1, [sp, #100]	; 0x64
   129c2:	e7ff      	b.n	129c4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   129c4:	f640 618f 	movw	r1, #3727	; 0xe8f
   129c8:	f2c0 0101 	movt	r1, #1
   129cc:	981c      	ldr	r0, [sp, #112]	; 0x70
   129ce:	f7f6 fc28 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   129d2:	9018      	str	r0, [sp, #96]	; 0x60
   129d4:	9117      	str	r1, [sp, #92]	; 0x5c
   129d6:	e7ff      	b.n	129d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   129d8:	f245 712b 	movw	r1, #22315	; 0x572b
   129dc:	f2c0 0101 	movt	r1, #1
   129e0:	981b      	ldr	r0, [sp, #108]	; 0x6c
   129e2:	f7f6 fc33 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   129e6:	9016      	str	r0, [sp, #88]	; 0x58
   129e8:	9115      	str	r1, [sp, #84]	; 0x54
   129ea:	e7ff      	b.n	129ec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   129ec:	981a      	ldr	r0, [sp, #104]	; 0x68
   129ee:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   129f2:	9919      	ldr	r1, [sp, #100]	; 0x64
   129f4:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   129f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
   129fa:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   129fe:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   12a00:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   12a04:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   12a08:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   12a0c:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   12a10:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   12a14:	466c      	mov	r4, sp
   12a16:	2503      	movs	r5, #3
   12a18:	6025      	str	r5, [r4, #0]
   12a1a:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12a1e:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   12a22:	991d      	ldr	r1, [sp, #116]	; 0x74
   12a24:	462a      	mov	r2, r5
   12a26:	f7f6 f839 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12a2a:	e7ff      	b.n	12a2c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   12a2c:	f64d 30dc 	movw	r0, #56284	; 0xdbdc
   12a30:	f2c0 0001 	movt	r0, #1
   12a34:	f002 fb8b 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12a38:	9014      	str	r0, [sp, #80]	; 0x50
   12a3a:	e7ff      	b.n	12a3c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   12a3c:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   12a40:	9914      	ldr	r1, [sp, #80]	; 0x50
   12a42:	f002 fbc1 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12a46:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12a48:	f64d 2068 	movw	r0, #55912	; 0xda68
   12a4c:	f2c0 0001 	movt	r0, #1
   12a50:	6800      	ldr	r0, [r0, #0]
   12a52:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   12a56:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   12a5a:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   12a5e:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   12a62:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   12a66:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   12a6a:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   12a6e:	6802      	ldr	r2, [r0, #0]
   12a70:	680b      	ldr	r3, [r1, #0]
   12a72:	429a      	cmp	r2, r3
   12a74:	9013      	str	r0, [sp, #76]	; 0x4c
   12a76:	9112      	str	r1, [sp, #72]	; 0x48
   12a78:	d125      	bne.n	12ac6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   12a7a:	e7ff      	b.n	12a7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   12a7c:	f64d 4008 	movw	r0, #56328	; 0xdc08
   12a80:	f2c0 0001 	movt	r0, #1
   12a84:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   12a86:	f642 4027 	movw	r0, #11303	; 0x2c27
   12a8a:	f2c0 0001 	movt	r0, #1
   12a8e:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   12a92:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   12a96:	4668      	mov	r0, sp
   12a98:	f44f 7380 	mov.w	r3, #256	; 0x100
   12a9c:	6103      	str	r3, [r0, #16]
   12a9e:	60c3      	str	r3, [r0, #12]
   12aa0:	f645 3304 	movw	r3, #23300	; 0x5b04
   12aa4:	f2c2 0300 	movt	r3, #8192	; 0x2000
   12aa8:	6083      	str	r3, [r0, #8]
   12aaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   12aae:	6043      	str	r3, [r0, #4]
   12ab0:	230a      	movs	r3, #10
   12ab2:	6003      	str	r3, [r0, #0]
   12ab4:	f645 20b4 	movw	r0, #23220	; 0x5ab4
   12ab8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12abc:	2300      	movs	r3, #0
   12abe:	f7f6 f878 	bl	8bb2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   12ac2:	9011      	str	r0, [sp, #68]	; 0x44
   12ac4:	e088      	b.n	12bd8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   12ac6:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   12aca:	f2c0 0001 	movt	r0, #1
   12ace:	6801      	ldr	r1, [r0, #0]
   12ad0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12ad2:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   12ad6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12ad8:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   12adc:	f64d 33d8 	movw	r3, #56280	; 0xdbd8
   12ae0:	f2c0 0301 	movt	r3, #1
   12ae4:	681b      	ldr	r3, [r3, #0]
   12ae6:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   12aea:	f2c0 0c01 	movt	ip, #1
   12aee:	f8dc c000 	ldr.w	ip, [ip]
   12af2:	46ee      	mov	lr, sp
   12af4:	2400      	movs	r4, #0
   12af6:	f8ce 4000 	str.w	r4, [lr]
   12afa:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12afe:	2201      	movs	r2, #1
   12b00:	9110      	str	r1, [sp, #64]	; 0x40
   12b02:	4619      	mov	r1, r3
   12b04:	4663      	mov	r3, ip
   12b06:	f7f5 ffc9 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12b0a:	e7ff      	b.n	12b0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   12b0c:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   12b10:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   12b14:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   12b18:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   12b1c:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   12b20:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   12b24:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   12b28:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   12b2c:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   12b30:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   12b34:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   12b38:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   12b3c:	f640 638f 	movw	r3, #3727	; 0xe8f
   12b40:	f2c0 0301 	movt	r3, #1
   12b44:	910f      	str	r1, [sp, #60]	; 0x3c
   12b46:	4619      	mov	r1, r3
   12b48:	920e      	str	r2, [sp, #56]	; 0x38
   12b4a:	f7f6 fb6a 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12b4e:	900d      	str	r0, [sp, #52]	; 0x34
   12b50:	910c      	str	r1, [sp, #48]	; 0x30
   12b52:	e7ff      	b.n	12b54 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   12b54:	f640 618f 	movw	r1, #3727	; 0xe8f
   12b58:	f2c0 0101 	movt	r1, #1
   12b5c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12b5e:	f7f6 fb60 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   12b62:	900b      	str	r0, [sp, #44]	; 0x2c
   12b64:	910a      	str	r1, [sp, #40]	; 0x28
   12b66:	e7ff      	b.n	12b68 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   12b68:	f245 712b 	movw	r1, #22315	; 0x572b
   12b6c:	f2c0 0101 	movt	r1, #1
   12b70:	980e      	ldr	r0, [sp, #56]	; 0x38
   12b72:	f7f6 fb6b 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   12b76:	9009      	str	r0, [sp, #36]	; 0x24
   12b78:	9108      	str	r1, [sp, #32]
   12b7a:	e7ff      	b.n	12b7c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   12b7c:	980d      	ldr	r0, [sp, #52]	; 0x34
   12b7e:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   12b82:	990c      	ldr	r1, [sp, #48]	; 0x30
   12b84:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   12b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12b8a:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   12b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12b90:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   12b94:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   12b98:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   12b9c:	f8dd e020 	ldr.w	lr, [sp, #32]
   12ba0:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   12ba4:	466c      	mov	r4, sp
   12ba6:	2503      	movs	r5, #3
   12ba8:	6025      	str	r5, [r4, #0]
   12baa:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12bae:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   12bb2:	9910      	ldr	r1, [sp, #64]	; 0x40
   12bb4:	462a      	mov	r2, r5
   12bb6:	f7f5 ff71 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   12bba:	e7ff      	b.n	12bbc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   12bbc:	f64d 30ec 	movw	r0, #56300	; 0xdbec
   12bc0:	f2c0 0001 	movt	r0, #1
   12bc4:	f002 fac3 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   12bc8:	9007      	str	r0, [sp, #28]
   12bca:	e7ff      	b.n	12bcc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   12bcc:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   12bd0:	9907      	ldr	r1, [sp, #28]
   12bd2:	f002 faf9 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   12bd6:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   12bd8:	9811      	ldr	r0, [sp, #68]	; 0x44
   12bda:	f7f5 ffcd 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12bde:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   12be2:	e7ff      	b.n	12be4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   12be4:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12be8:	1e41      	subs	r1, r0, #1
   12bea:	bf18      	it	ne
   12bec:	2101      	movne	r1, #1
   12bee:	2801      	cmp	r0, #1
   12bf0:	d001      	beq.n	12bf6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   12bf2:	e7ff      	b.n	12bf4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   12bf4:	e005      	b.n	12c02 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   12bf6:	2000      	movs	r0, #0
    Ok(())
   12bf8:	9069      	str	r0, [sp, #420]	; 0x1a4
   12bfa:	2001      	movs	r0, #1
   12bfc:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   12bfe:	e008      	b.n	12c12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   12c00:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   12c02:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   12c06:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   12c0a:	f7ff fa7d 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12c0e:	9006      	str	r0, [sp, #24]
   12c10:	e003      	b.n	12c1a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   12c12:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   12c14:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   12c18:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   12c1a:	9806      	ldr	r0, [sp, #24]
   12c1c:	f7f5 ffa0 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12c20:	9069      	str	r0, [sp, #420]	; 0x1a4
   12c22:	e7ff      	b.n	12c24 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   12c24:	e7f5      	b.n	12c12 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00012c26 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   12c26:	b580      	push	{r7, lr}
   12c28:	b082      	sub	sp, #8
   12c2a:	9001      	str	r0, [sp, #4]
    loop {
   12c2c:	e7ff      	b.n	12c2e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   12c2e:	f645 20a4 	movw	r0, #23204	; 0x5aa4
   12c32:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c36:	f7f5 ffa3 	bl	8b80 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   12c3a:	9000      	str	r0, [sp, #0]
   12c3c:	e7ff      	b.n	12c3e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   12c3e:	f64d 410c 	movw	r1, #56332	; 0xdc0c
   12c42:	f2c0 0101 	movt	r1, #1
   12c46:	f64d 4318 	movw	r3, #56344	; 0xdc18
   12c4a:	f2c0 0301 	movt	r3, #1
   12c4e:	220b      	movs	r2, #11
   12c50:	9800      	ldr	r0, [sp, #0]
   12c52:	f7f5 ff52 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   12c56:	e7ff      	b.n	12c58 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   12c58:	f005 f8f6 	bl	17e48 <hal_watchdog_tickle>
   12c5c:	e7ff      	b.n	12c5e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   12c5e:	e7e6      	b.n	12c2e <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00012c60 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   12c60:	b580      	push	{r7, lr}
   12c62:	b08c      	sub	sp, #48	; 0x30
   12c64:	4601      	mov	r1, r0
   12c66:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   12c6a:	9104      	str	r1, [sp, #16]
   12c6c:	f000 f90d 	bl	12e8a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   12c70:	9003      	str	r0, [sp, #12]
   12c72:	e7ff      	b.n	12c74 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   12c74:	9803      	ldr	r0, [sp, #12]
   12c76:	f7f5 ff7f 	bl	8b78 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   12c7a:	9006      	str	r0, [sp, #24]
   12c7c:	e7ff      	b.n	12c7e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   12c7e:	9806      	ldr	r0, [sp, #24]
   12c80:	1e41      	subs	r1, r0, #1
   12c82:	bf18      	it	ne
   12c84:	2101      	movne	r1, #1
   12c86:	2801      	cmp	r0, #1
   12c88:	d001      	beq.n	12c8e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   12c8a:	e7ff      	b.n	12c8c <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   12c8c:	e00c      	b.n	12ca8 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12c8e:	f644 2070 	movw	r0, #19056	; 0x4a70
   12c92:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12c96:	9904      	ldr	r1, [sp, #16]
   12c98:	f7ff fa0a 	bl	120b0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   12c9c:	f88d 101d 	strb.w	r1, [sp, #29]
   12ca0:	f88d 001c 	strb.w	r0, [sp, #28]
   12ca4:	e00f      	b.n	12cc6 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   12ca6:	defe      	udf	#254	; 0xfe
   12ca8:	9806      	ldr	r0, [sp, #24]
   12caa:	900b      	str	r0, [sp, #44]	; 0x2c
   12cac:	f7ff fa2c 	bl	12108 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   12cb0:	9002      	str	r0, [sp, #8]
   12cb2:	e002      	b.n	12cba <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   12cb4:	9805      	ldr	r0, [sp, #20]
   12cb6:	b00c      	add	sp, #48	; 0x30
   12cb8:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   12cba:	9802      	ldr	r0, [sp, #8]
   12cbc:	f7f5 ff50 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12cc0:	9005      	str	r0, [sp, #20]
   12cc2:	e7ff      	b.n	12cc4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   12cc4:	e7f6      	b.n	12cb4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12cc6:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   12cc8:	f7f5 ff3e 	bl	8b48 <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   12ccc:	9001      	str	r0, [sp, #4]
   12cce:	e7ff      	b.n	12cd0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   12cd0:	9801      	ldr	r0, [sp, #4]
   12cd2:	07c1      	lsls	r1, r0, #31
   12cd4:	2900      	cmp	r1, #0
   12cd6:	d105      	bne.n	12ce4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   12cd8:	e7ff      	b.n	12cda <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   12cda:	2000      	movs	r0, #0
    Ok(())
   12cdc:	9005      	str	r0, [sp, #20]
   12cde:	2001      	movs	r0, #1
   12ce0:	9005      	str	r0, [sp, #20]
}
   12ce2:	e7e7      	b.n	12cb4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   12ce4:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   12ce8:	9008      	str	r0, [sp, #32]
   12cea:	9808      	ldr	r0, [sp, #32]
   12cec:	9005      	str	r0, [sp, #20]
   12cee:	e7e1      	b.n	12cb4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00012cf0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   12cf0:	b580      	push	{r7, lr}
   12cf2:	b09a      	sub	sp, #104	; 0x68
   12cf4:	9016      	str	r0, [sp, #88]	; 0x58
   12cf6:	9117      	str	r1, [sp, #92]	; 0x5c
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   12cf8:	f644 2270 	movw	r2, #19056	; 0x4a70
   12cfc:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12d00:	9013      	str	r0, [sp, #76]	; 0x4c
   12d02:	4610      	mov	r0, r2
   12d04:	9112      	str	r1, [sp, #72]	; 0x48
   12d06:	f7ff f9b9 	bl	1207c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12d0a:	9011      	str	r0, [sp, #68]	; 0x44
   12d0c:	9110      	str	r1, [sp, #64]	; 0x40
   12d0e:	e7ff      	b.n	12d10 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   12d10:	9811      	ldr	r0, [sp, #68]	; 0x44
   12d12:	9910      	ldr	r1, [sp, #64]	; 0x40
   12d14:	f7fe fd6d 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d18:	900f      	str	r0, [sp, #60]	; 0x3c
   12d1a:	e7ff      	b.n	12d1c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   12d1c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   12d1e:	2800      	cmp	r0, #0
   12d20:	d009      	beq.n	12d36 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x46>
   12d22:	e7ff      	b.n	12d24 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
   12d24:	f644 2078 	movw	r0, #19064	; 0x4a78
   12d28:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d2c:	f7ff f99a 	bl	12064 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E>
   12d30:	900e      	str	r0, [sp, #56]	; 0x38
   12d32:	910d      	str	r1, [sp, #52]	; 0x34
   12d34:	e00b      	b.n	12d4e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x5e>
    assert!(unsafe { PENDING_CMD.len() } > 0, "no cmd byte");  //  Must have Command Byte before Data Bytes
   12d36:	f64d 4028 	movw	r0, #56360	; 0xdc28
   12d3a:	f2c0 0001 	movt	r0, #1
   12d3e:	f64d 4234 	movw	r2, #56372	; 0xdc34
   12d42:	f2c0 0201 	movt	r2, #1
   12d46:	210b      	movs	r1, #11
   12d48:	f002 fa08 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12d4c:	defe      	udf	#254	; 0xfe
    if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
   12d4e:	980e      	ldr	r0, [sp, #56]	; 0x38
   12d50:	990d      	ldr	r1, [sp, #52]	; 0x34
   12d52:	f7fe fd4e 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d56:	900c      	str	r0, [sp, #48]	; 0x30
   12d58:	e7ff      	b.n	12d5a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x6a>
   12d5a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12d5c:	9912      	ldr	r1, [sp, #72]	; 0x48
   12d5e:	f7fe fd48 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12d62:	900b      	str	r0, [sp, #44]	; 0x2c
   12d64:	e7ff      	b.n	12d66 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x76>
   12d66:	980c      	ldr	r0, [sp, #48]	; 0x30
   12d68:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12d6a:	1842      	adds	r2, r0, r1
   12d6c:	4613      	mov	r3, r2
   12d6e:	4282      	cmp	r2, r0
   12d70:	930a      	str	r3, [sp, #40]	; 0x28
   12d72:	d372      	bcc.n	12e5a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x16a>
   12d74:	e7ff      	b.n	12d76 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x86>
   12d76:	f644 2078 	movw	r0, #19064	; 0x4a78
   12d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d7e:	f7ff f9b9 	bl	120f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17h034a10ccec9203c6E>
   12d82:	9009      	str	r0, [sp, #36]	; 0x24
   12d84:	e7ff      	b.n	12d86 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x96>
   12d86:	980a      	ldr	r0, [sp, #40]	; 0x28
   12d88:	9909      	ldr	r1, [sp, #36]	; 0x24
   12d8a:	4288      	cmp	r0, r1
   12d8c:	d903      	bls.n	12d96 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa6>
   12d8e:	e7ff      	b.n	12d90 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa0>
   12d90:	be00      	bkpt	0x0000
   12d92:	e7ff      	b.n	12d94 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa4>
   12d94:	e7ff      	b.n	12d96 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa6>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12d96:	f644 2078 	movw	r0, #19064	; 0x4a78
   12d9a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12d9e:	f7ff f961 	bl	12064 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E>
   12da2:	9008      	str	r0, [sp, #32]
   12da4:	9107      	str	r1, [sp, #28]
   12da6:	e7ff      	b.n	12da8 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xb8>
   12da8:	9808      	ldr	r0, [sp, #32]
   12daa:	9907      	ldr	r1, [sp, #28]
   12dac:	f7fe fd21 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12db0:	9006      	str	r0, [sp, #24]
   12db2:	e7ff      	b.n	12db4 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xc4>
   12db4:	9813      	ldr	r0, [sp, #76]	; 0x4c
   12db6:	9912      	ldr	r1, [sp, #72]	; 0x48
   12db8:	f7fe fd1b 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12dbc:	9005      	str	r0, [sp, #20]
   12dbe:	e7ff      	b.n	12dc0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xd0>
   12dc0:	9806      	ldr	r0, [sp, #24]
   12dc2:	9905      	ldr	r1, [sp, #20]
   12dc4:	1842      	adds	r2, r0, r1
   12dc6:	4613      	mov	r3, r2
   12dc8:	4282      	cmp	r2, r0
   12dca:	9304      	str	r3, [sp, #16]
   12dcc:	d351      	bcc.n	12e72 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x182>
   12dce:	e7ff      	b.n	12dd0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xe0>
   12dd0:	f644 2078 	movw	r0, #19064	; 0x4a78
   12dd4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12dd8:	f7ff f98c 	bl	120f4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$8capacity17h034a10ccec9203c6E>
   12ddc:	9003      	str	r0, [sp, #12]
   12dde:	e7ff      	b.n	12de0 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xf0>
   12de0:	9804      	ldr	r0, [sp, #16]
   12de2:	9903      	ldr	r1, [sp, #12]
   12de4:	4288      	cmp	r0, r1
   12de6:	d80a      	bhi.n	12dfe <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x10e>
   12de8:	e7ff      	b.n	12dea <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xfa>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12dea:	f644 2078 	movw	r0, #19064	; 0x4a78
   12dee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12df2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   12df4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12df6:	f7ff f94d 	bl	12094 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h0cfb45c01aa96099E>
   12dfa:	9002      	str	r0, [sp, #8]
   12dfc:	e00b      	b.n	12e16 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x126>
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12dfe:	f64d 408c 	movw	r0, #56460	; 0xdc8c
   12e02:	f2c0 0001 	movt	r0, #1
   12e06:	f64d 4298 	movw	r2, #56472	; 0xdc98
   12e0a:	f2c0 0201 	movt	r2, #1
   12e0e:	210c      	movs	r1, #12
   12e10:	f002 f9a4 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12e14:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12e16:	9802      	ldr	r0, [sp, #8]
   12e18:	f000 0001 	and.w	r0, r0, #1
   12e1c:	f7f5 fea6 	bl	8b6c <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   12e20:	f88d 0057 	strb.w	r0, [sp, #87]	; 0x57
   12e24:	e7ff      	b.n	12e26 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x136>
   12e26:	f89d 0057 	ldrb.w	r0, [sp, #87]	; 0x57
   12e2a:	07c1      	lsls	r1, r0, #31
   12e2c:	2900      	cmp	r1, #0
   12e2e:	d001      	beq.n	12e34 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x144>
   12e30:	e7ff      	b.n	12e32 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x142>
   12e32:	e005      	b.n	12e40 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x150>
   12e34:	2000      	movs	r0, #0
    Ok(())
   12e36:	9014      	str	r0, [sp, #80]	; 0x50
   12e38:	2001      	movs	r0, #1
   12e3a:	9014      	str	r0, [sp, #80]	; 0x50
}
   12e3c:	e004      	b.n	12e48 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x158>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12e3e:	defe      	udf	#254	; 0xfe
   12e40:	f7f5 fe21 	bl	8a86 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   12e44:	9001      	str	r0, [sp, #4]
   12e46:	e002      	b.n	12e4e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x15e>
}
   12e48:	9814      	ldr	r0, [sp, #80]	; 0x50
   12e4a:	b01a      	add	sp, #104	; 0x68
   12e4c:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   12e4e:	9801      	ldr	r0, [sp, #4]
   12e50:	f7f5 fe86 	bl	8b60 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   12e54:	9014      	str	r0, [sp, #80]	; 0x50
   12e56:	e7ff      	b.n	12e58 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x168>
   12e58:	e7f6      	b.n	12e48 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x158>
    if unsafe { PENDING_DATA.len() + data.len() > PENDING_DATA.capacity() } { cortex_m::asm::bkpt(); } ////
   12e5a:	f64d 4060 	movw	r0, #56416	; 0xdc60
   12e5e:	f2c0 0001 	movt	r0, #1
   12e62:	f64d 4244 	movw	r2, #56388	; 0xdc44
   12e66:	f2c0 0201 	movt	r2, #1
   12e6a:	211c      	movs	r1, #28
   12e6c:	f002 f976 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12e70:	defe      	udf	#254	; 0xfe
    assert!(unsafe { PENDING_DATA.len() + data.len() <= PENDING_DATA.capacity() }, "spi overflow");
   12e72:	f64d 4060 	movw	r0, #56416	; 0xdc60
   12e76:	f2c0 0001 	movt	r0, #1
   12e7a:	f64d 427c 	movw	r2, #56444	; 0xdc7c
   12e7e:	f2c0 0201 	movt	r2, #1
   12e82:	211c      	movs	r1, #28
   12e84:	f002 f96a 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12e88:	defe      	udf	#254	; 0xfe

00012e8a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   12e8a:	b580      	push	{r7, lr}
   12e8c:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   12e8e:	f644 2070 	movw	r0, #19056	; 0x4a70
   12e92:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12e96:	f7ff f8f1 	bl	1207c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12e9a:	900b      	str	r0, [sp, #44]	; 0x2c
   12e9c:	910a      	str	r1, [sp, #40]	; 0x28
   12e9e:	e016      	b.n	12ece <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   12ea0:	2001      	movs	r0, #1
   12ea2:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12ea6:	e00c      	b.n	12ec2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   12ea8:	2000      	movs	r0, #0
   12eaa:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   12eae:	e008      	b.n	12ec2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   12eb0:	f644 2078 	movw	r0, #19064	; 0x4a78
   12eb4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12eb8:	f7ff f8d4 	bl	12064 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E>
   12ebc:	9009      	str	r0, [sp, #36]	; 0x24
   12ebe:	9108      	str	r1, [sp, #32]
   12ec0:	e00f      	b.n	12ee2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12ec2:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   12ec6:	07c0      	lsls	r0, r0, #31
   12ec8:	2800      	cmp	r0, #0
   12eca:	d11d      	bne.n	12f08 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   12ecc:	e013      	b.n	12ef6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   12ece:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12ed0:	990a      	ldr	r1, [sp, #40]	; 0x28
   12ed2:	f7fe fc8e 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12ed6:	9007      	str	r0, [sp, #28]
   12ed8:	e7ff      	b.n	12eda <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   12eda:	9807      	ldr	r0, [sp, #28]
   12edc:	2800      	cmp	r0, #0
   12ede:	d0e7      	beq.n	12eb0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   12ee0:	e7e2      	b.n	12ea8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   12ee2:	9809      	ldr	r0, [sp, #36]	; 0x24
   12ee4:	9908      	ldr	r1, [sp, #32]
   12ee6:	f7fe fc84 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   12eea:	9006      	str	r0, [sp, #24]
   12eec:	e7ff      	b.n	12eee <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   12eee:	9806      	ldr	r0, [sp, #24]
   12ef0:	2800      	cmp	r0, #0
   12ef2:	d0d5      	beq.n	12ea0 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   12ef4:	e7d8      	b.n	12ea8 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12ef6:	f644 2070 	movw	r0, #19056	; 0x4a70
   12efa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12efe:	f7ff f8bd 	bl	1207c <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   12f02:	9005      	str	r0, [sp, #20]
   12f04:	9104      	str	r1, [sp, #16]
   12f06:	e007      	b.n	12f18 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   12f08:	2000      	movs	r0, #0
        return Ok(());
   12f0a:	900c      	str	r0, [sp, #48]	; 0x30
   12f0c:	2001      	movs	r0, #1
   12f0e:	900c      	str	r0, [sp, #48]	; 0x30
   12f10:	e7ff      	b.n	12f12 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   12f12:	980c      	ldr	r0, [sp, #48]	; 0x30
   12f14:	b010      	add	sp, #64	; 0x40
   12f16:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12f18:	9804      	ldr	r0, [sp, #16]
   12f1a:	2800      	cmp	r0, #0
   12f1c:	d03f      	beq.n	12f9e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   12f1e:	e7ff      	b.n	12f20 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   12f20:	9805      	ldr	r0, [sp, #20]
   12f22:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   12f24:	f644 2078 	movw	r0, #19064	; 0x4a78
   12f28:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f2c:	9103      	str	r1, [sp, #12]
   12f2e:	f7ff f899 	bl	12064 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h262fab90cd402550E>
   12f32:	9002      	str	r0, [sp, #8]
   12f34:	9101      	str	r1, [sp, #4]
   12f36:	e7ff      	b.n	12f38 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   12f38:	9803      	ldr	r0, [sp, #12]
   12f3a:	9902      	ldr	r1, [sp, #8]
   12f3c:	9a01      	ldr	r2, [sp, #4]
   12f3e:	f000 f837 	bl	12fb0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   12f42:	900e      	str	r0, [sp, #56]	; 0x38
   12f44:	e7ff      	b.n	12f46 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   12f46:	980e      	ldr	r0, [sp, #56]	; 0x38
   12f48:	2801      	cmp	r0, #1
   12f4a:	d107      	bne.n	12f5c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   12f4c:	e7ff      	b.n	12f4e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   12f4e:	f644 2070 	movw	r0, #19056	; 0x4a70
   12f52:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f56:	f7ff f8bd 	bl	120d4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12f5a:	e014      	b.n	12f86 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   12f5c:	980e      	ldr	r0, [sp, #56]	; 0x38
   12f5e:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   12f60:	f644 2170 	movw	r1, #19056	; 0x4a70
   12f64:	f2c2 0100 	movt	r1, #8192	; 0x2000
   12f68:	9000      	str	r0, [sp, #0]
   12f6a:	4608      	mov	r0, r1
   12f6c:	f7ff f8b2 	bl	120d4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   12f70:	e7ff      	b.n	12f72 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   12f72:	f644 2078 	movw	r0, #19064	; 0x4a78
   12f76:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f7a:	f7ff f8b3 	bl	120e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf245ed9d33da7eb8E>
   12f7e:	e7ff      	b.n	12f80 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   12f80:	9800      	ldr	r0, [sp, #0]
   12f82:	900c      	str	r0, [sp, #48]	; 0x30
   12f84:	e7c5      	b.n	12f12 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   12f86:	f644 2078 	movw	r0, #19064	; 0x4a78
   12f8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   12f8e:	f7ff f8a9 	bl	120e4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf245ed9d33da7eb8E>
   12f92:	e7ff      	b.n	12f94 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   12f94:	2000      	movs	r0, #0
    Ok(())
   12f96:	900c      	str	r0, [sp, #48]	; 0x30
   12f98:	2001      	movs	r0, #1
   12f9a:	900c      	str	r0, [sp, #48]	; 0x30
}
   12f9c:	e7b9      	b.n	12f12 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   12f9e:	f64d 40a8 	movw	r0, #56488	; 0xdca8
   12fa2:	f2c0 0001 	movt	r0, #1
   12fa6:	2100      	movs	r1, #0
   12fa8:	9a04      	ldr	r2, [sp, #16]
   12faa:	f002 f8ed 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   12fae:	defe      	udf	#254	; 0xfe

00012fb0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   12fb0:	b580      	push	{r7, lr}
   12fb2:	b0a0      	sub	sp, #128	; 0x80
   12fb4:	4603      	mov	r3, r0
   12fb6:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12fba:	9116      	str	r1, [sp, #88]	; 0x58
   12fbc:	9217      	str	r2, [sp, #92]	; 0x5c
   12fbe:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   12fc2:	9018      	str	r0, [sp, #96]	; 0x60
   12fc4:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   12fc8:	fba0 0c0c 	umull	r0, ip, r0, ip
   12fcc:	f1bc 0f00 	cmp.w	ip, #0
   12fd0:	920f      	str	r2, [sp, #60]	; 0x3c
   12fd2:	910e      	str	r1, [sp, #56]	; 0x38
   12fd4:	900d      	str	r0, [sp, #52]	; 0x34
   12fd6:	f040 80c8 	bne.w	1316a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   12fda:	e7ff      	b.n	12fdc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   12fdc:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   12fe0:	f2c1 0062 	movt	r0, #4194	; 0x1062
   12fe4:	990d      	ldr	r1, [sp, #52]	; 0x34
   12fe6:	fba1 0200 	umull	r0, r2, r1, r0
   12fea:	0991      	lsrs	r1, r2, #6
   12fec:	f645 2284 	movw	r2, #23172	; 0x5a84
   12ff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
   12ff4:	900c      	str	r0, [sp, #48]	; 0x30
   12ff6:	4610      	mov	r0, r2
   12ff8:	f006 f826 	bl	19048 <os_sem_pend>
   12ffc:	e7ff      	b.n	12ffe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   12ffe:	980e      	ldr	r0, [sp, #56]	; 0x38
   13000:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13002:	f7fe fbf6 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   13006:	900b      	str	r0, [sp, #44]	; 0x2c
   13008:	e7ff      	b.n	1300a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   1300a:	2001      	movs	r0, #1
   1300c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1300e:	fa10 f081 	uxtah	r0, r0, r1
   13012:	b282      	uxth	r2, r0
   13014:	4603      	mov	r3, r0
   13016:	4282      	cmp	r2, r0
   13018:	930a      	str	r3, [sp, #40]	; 0x28
   1301a:	f040 80b2 	bne.w	13182 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   1301e:	e7ff      	b.n	13020 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   13020:	980a      	ldr	r0, [sp, #40]	; 0x28
   13022:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   13026:	b280      	uxth	r0, r0
   13028:	2100      	movs	r1, #0
   1302a:	f005 fd1b 	bl	18a64 <os_msys_get_pkthdr>
   1302e:	4601      	mov	r1, r0
   13030:	901a      	str	r0, [sp, #104]	; 0x68
   13032:	9109      	str	r1, [sp, #36]	; 0x24
   13034:	e7ff      	b.n	13036 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   13036:	9809      	ldr	r0, [sp, #36]	; 0x24
   13038:	f000 ff17 	bl	13e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   1303c:	9008      	str	r0, [sp, #32]
   1303e:	e7ff      	b.n	13040 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   13040:	9808      	ldr	r0, [sp, #32]
   13042:	07c1      	lsls	r1, r0, #31
   13044:	2900      	cmp	r1, #0
   13046:	d106      	bne.n	13056 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   13048:	e7ff      	b.n	1304a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1304a:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   1304e:	901b      	str	r0, [sp, #108]	; 0x6c
   13050:	991b      	ldr	r1, [sp, #108]	; 0x6c
   13052:	9107      	str	r1, [sp, #28]
   13054:	e010      	b.n	13078 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13056:	f645 2084 	movw	r0, #23172	; 0x5a84
   1305a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1305e:	f005 ffc1 	bl	18fe4 <os_sem_release>
   13062:	e7ff      	b.n	13064 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   13064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   13068:	9012      	str	r0, [sp, #72]	; 0x48
   1306a:	9812      	ldr	r0, [sp, #72]	; 0x48
   1306c:	9011      	str	r0, [sp, #68]	; 0x44
   1306e:	e002      	b.n	13076 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   13070:	9811      	ldr	r0, [sp, #68]	; 0x44
   13072:	b020      	add	sp, #128	; 0x80
   13074:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   13076:	e7fb      	b.n	13070 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   13078:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1307a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1307c:	9907      	ldr	r1, [sp, #28]
   1307e:	f005 fb49 	bl	18714 <os_mbuf_append>
   13082:	4601      	mov	r1, r0
   13084:	901c      	str	r0, [sp, #112]	; 0x70
   13086:	9106      	str	r1, [sp, #24]
   13088:	e7ff      	b.n	1308a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1308a:	9806      	ldr	r0, [sp, #24]
   1308c:	2800      	cmp	r0, #0
   1308e:	d106      	bne.n	1309e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   13090:	e7ff      	b.n	13092 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   13092:	980e      	ldr	r0, [sp, #56]	; 0x38
   13094:	990f      	ldr	r1, [sp, #60]	; 0x3c
   13096:	f7fe fbb4 	bl	11802 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1309a:	9005      	str	r0, [sp, #20]
   1309c:	e011      	b.n	130c2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1309e:	9809      	ldr	r0, [sp, #36]	; 0x24
   130a0:	f005 fb1c 	bl	186dc <os_mbuf_free_chain>
   130a4:	e7ff      	b.n	130a6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   130a6:	f645 2084 	movw	r0, #23172	; 0x5a84
   130aa:	f2c2 0000 	movt	r0, #8192	; 0x2000
   130ae:	f005 ff99 	bl	18fe4 <os_sem_release>
   130b2:	e7ff      	b.n	130b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   130b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   130b8:	9013      	str	r0, [sp, #76]	; 0x4c
   130ba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   130bc:	9011      	str	r0, [sp, #68]	; 0x44
   130be:	e7ff      	b.n	130c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   130c0:	e7d9      	b.n	13076 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   130c2:	9805      	ldr	r0, [sp, #20]
   130c4:	901d      	str	r0, [sp, #116]	; 0x74
   130c6:	991d      	ldr	r1, [sp, #116]	; 0x74
   130c8:	9104      	str	r1, [sp, #16]
   130ca:	e7ff      	b.n	130cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   130cc:	980e      	ldr	r0, [sp, #56]	; 0x38
   130ce:	990f      	ldr	r1, [sp, #60]	; 0x3c
   130d0:	f7fe fb8f 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   130d4:	9003      	str	r0, [sp, #12]
   130d6:	e7ff      	b.n	130d8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   130d8:	9803      	ldr	r0, [sp, #12]
   130da:	b282      	uxth	r2, r0
   130dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   130de:	9904      	ldr	r1, [sp, #16]
   130e0:	f005 fb18 	bl	18714 <os_mbuf_append>
   130e4:	4601      	mov	r1, r0
   130e6:	901e      	str	r0, [sp, #120]	; 0x78
   130e8:	9102      	str	r1, [sp, #8]
   130ea:	e7ff      	b.n	130ec <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   130ec:	9802      	ldr	r0, [sp, #8]
   130ee:	2800      	cmp	r0, #0
   130f0:	d10f      	bne.n	13112 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   130f2:	e7ff      	b.n	130f4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   130f4:	f645 208c 	movw	r0, #23180	; 0x5a8c
   130f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   130fc:	f645 21a4 	movw	r1, #23204	; 0x5aa4
   13100:	f2c2 0100 	movt	r1, #8192	; 0x2000
   13104:	9a09      	ldr	r2, [sp, #36]	; 0x24
   13106:	f005 fa87 	bl	18618 <os_mqueue_put>
   1310a:	4601      	mov	r1, r0
   1310c:	901f      	str	r0, [sp, #124]	; 0x7c
   1310e:	9101      	str	r1, [sp, #4]
   13110:	e011      	b.n	13136 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13112:	9809      	ldr	r0, [sp, #36]	; 0x24
   13114:	f005 fae2 	bl	186dc <os_mbuf_free_chain>
   13118:	e7ff      	b.n	1311a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1311a:	f645 2084 	movw	r0, #23172	; 0x5a84
   1311e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13122:	f005 ff5f 	bl	18fe4 <os_sem_release>
   13126:	e7ff      	b.n	13128 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   13128:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1312c:	9014      	str	r0, [sp, #80]	; 0x50
   1312e:	9814      	ldr	r0, [sp, #80]	; 0x50
   13130:	9011      	str	r0, [sp, #68]	; 0x44
   13132:	e7ff      	b.n	13134 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   13134:	e7c4      	b.n	130c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   13136:	9801      	ldr	r0, [sp, #4]
   13138:	2800      	cmp	r0, #0
   1313a:	d105      	bne.n	13148 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   1313c:	e7ff      	b.n	1313e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   1313e:	2000      	movs	r0, #0
    Ok(())
   13140:	9011      	str	r0, [sp, #68]	; 0x44
   13142:	2001      	movs	r0, #1
   13144:	9011      	str	r0, [sp, #68]	; 0x44
}
   13146:	e793      	b.n	13070 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   13148:	9809      	ldr	r0, [sp, #36]	; 0x24
   1314a:	f005 fac7 	bl	186dc <os_mbuf_free_chain>
   1314e:	e7ff      	b.n	13150 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   13150:	f645 2084 	movw	r0, #23172	; 0x5a84
   13154:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13158:	f005 ff44 	bl	18fe4 <os_sem_release>
   1315c:	e7ff      	b.n	1315e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   1315e:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   13162:	9015      	str	r0, [sp, #84]	; 0x54
   13164:	9815      	ldr	r0, [sp, #84]	; 0x54
   13166:	9011      	str	r0, [sp, #68]	; 0x44
   13168:	e7e4      	b.n	13134 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1316a:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
   1316e:	f2c0 0001 	movt	r0, #1
   13172:	f64d 42b8 	movw	r2, #56504	; 0xdcb8
   13176:	f2c0 0201 	movt	r2, #1
   1317a:	2121      	movs	r1, #33	; 0x21
   1317c:	f001 ffee 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13180:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   13182:	f64d 4060 	movw	r0, #56416	; 0xdc60
   13186:	f2c0 0001 	movt	r0, #1
   1318a:	f64d 42f4 	movw	r2, #56564	; 0xdcf4
   1318e:	f2c0 0201 	movt	r2, #1
   13192:	211c      	movs	r1, #28
   13194:	f001 ffe2 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13198:	defe      	udf	#254	; 0xfe

0001319a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1319a:	b5b0      	push	{r4, r5, r7, lr}
   1319c:	b0c4      	sub	sp, #272	; 0x110
   1319e:	9038      	str	r0, [sp, #224]	; 0xe0
   131a0:	e7ff      	b.n	131a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   131a2:	f645 208c 	movw	r0, #23180	; 0x5a8c
   131a6:	f2c2 0000 	movt	r0, #8192	; 0x2000
   131aa:	f005 fa22 	bl	185f2 <os_mqueue_get>
   131ae:	4601      	mov	r1, r0
   131b0:	9039      	str	r0, [sp, #228]	; 0xe4
   131b2:	911b      	str	r1, [sp, #108]	; 0x6c
   131b4:	e7ff      	b.n	131b6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   131b6:	981b      	ldr	r0, [sp, #108]	; 0x6c
   131b8:	f000 fe57 	bl	13e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   131bc:	901a      	str	r0, [sp, #104]	; 0x68
   131be:	e7ff      	b.n	131c0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   131c0:	981a      	ldr	r0, [sp, #104]	; 0x68
   131c2:	07c1      	lsls	r1, r0, #31
   131c4:	2900      	cmp	r1, #0
   131c6:	d106      	bne.n	131d6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   131c8:	e7ff      	b.n	131ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   131ca:	981b      	ldr	r0, [sp, #108]	; 0x6c
   131cc:	901c      	str	r0, [sp, #112]	; 0x70
   131ce:	2101      	movs	r1, #1
        let mut first_byte = true;
   131d0:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   131d4:	e001      	b.n	131da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   131d6:	b044      	add	sp, #272	; 0x110
   131d8:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   131da:	981c      	ldr	r0, [sp, #112]	; 0x70
   131dc:	f000 fe45 	bl	13e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   131e0:	9019      	str	r0, [sp, #100]	; 0x64
   131e2:	e7ff      	b.n	131e4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   131e4:	9819      	ldr	r0, [sp, #100]	; 0x64
   131e6:	07c1      	lsls	r1, r0, #31
   131e8:	2900      	cmp	r1, #0
   131ea:	d004      	beq.n	131f6 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   131ec:	e7ff      	b.n	131ee <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   131ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
   131f0:	f005 fa74 	bl	186dc <os_mbuf_free_chain>
   131f4:	e0aa      	b.n	1334c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   131f6:	981c      	ldr	r0, [sp, #112]	; 0x70
   131f8:	6800      	ldr	r0, [r0, #0]
   131fa:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   131fc:	991c      	ldr	r1, [sp, #112]	; 0x70
   131fe:	88c9      	ldrh	r1, [r1, #6]
   13200:	460a      	mov	r2, r1
   13202:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13206:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   1320a:	07c9      	lsls	r1, r1, #31
   1320c:	2900      	cmp	r1, #0
   1320e:	9018      	str	r0, [sp, #96]	; 0x60
   13210:	9217      	str	r2, [sp, #92]	; 0x5c
   13212:	d105      	bne.n	13220 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   13214:	e7ff      	b.n	13216 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   13216:	9818      	ldr	r0, [sp, #96]	; 0x60
   13218:	903e      	str	r0, [sp, #248]	; 0xf8
   1321a:	983e      	ldr	r0, [sp, #248]	; 0xf8
   1321c:	9016      	str	r0, [sp, #88]	; 0x58
   1321e:	e07b      	b.n	13318 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   13220:	2000      	movs	r0, #0
                first_byte = false;
   13222:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   13226:	9818      	ldr	r0, [sp, #96]	; 0x60
   13228:	903c      	str	r0, [sp, #240]	; 0xf0
   1322a:	983c      	ldr	r0, [sp, #240]	; 0xf0
   1322c:	9015      	str	r0, [sp, #84]	; 0x54
   1322e:	e7ff      	b.n	13230 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   13230:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   13232:	9915      	ldr	r1, [sp, #84]	; 0x54
   13234:	9014      	str	r0, [sp, #80]	; 0x50
   13236:	4608      	mov	r0, r1
   13238:	9914      	ldr	r1, [sp, #80]	; 0x50
   1323a:	9a14      	ldr	r2, [sp, #80]	; 0x50
   1323c:	f000 f921 	bl	13482 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13240:	9013      	str	r0, [sp, #76]	; 0x4c
   13242:	e7ff      	b.n	13244 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   13244:	f64d 5104 	movw	r1, #56580	; 0xdd04
   13248:	f2c0 0101 	movt	r1, #1
   1324c:	f64d 5310 	movw	r3, #56592	; 0xdd10
   13250:	f2c0 0301 	movt	r3, #1
   13254:	220c      	movs	r2, #12
   13256:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13258:	f7f5 fc4f 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1325c:	e7ff      	b.n	1325e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   1325e:	9818      	ldr	r0, [sp, #96]	; 0x60
   13260:	7801      	ldrb	r1, [r0, #0]
   13262:	2901      	cmp	r1, #1
   13264:	d013      	beq.n	1328e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   13266:	e01a      	b.n	1329e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   13268:	2001      	movs	r0, #1
   1326a:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   1326e:	e008      	b.n	13282 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   13270:	2000      	movs	r0, #0
   13272:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   13276:	e004      	b.n	13282 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   13278:	9818      	ldr	r0, [sp, #96]	; 0x60
   1327a:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   1327c:	2929      	cmp	r1, #41	; 0x29
   1327e:	d0f3      	beq.n	13268 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   13280:	e7f6      	b.n	13270 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   13282:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   13286:	07c0      	lsls	r0, r0, #31
   13288:	2800      	cmp	r0, #0
   1328a:	d113      	bne.n	132b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   1328c:	e017      	b.n	132be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   1328e:	2001      	movs	r0, #1
   13290:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   13294:	e008      	b.n	132a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   13296:	2000      	movs	r0, #0
   13298:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   1329c:	e004      	b.n	132a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   1329e:	9818      	ldr	r0, [sp, #96]	; 0x60
   132a0:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   132a2:	2911      	cmp	r1, #17
   132a4:	d0f3      	beq.n	1328e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   132a6:	e7f6      	b.n	13296 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   132a8:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   132ac:	07c0      	lsls	r0, r0, #31
   132ae:	2800      	cmp	r0, #0
   132b0:	d1da      	bne.n	13268 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   132b2:	e7e1      	b.n	13278 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   132b4:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   132b6:	f000 fb13 	bl	138e0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   132ba:	e7ff      	b.n	132bc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   132bc:	e7ff      	b.n	132be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   132be:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   132c0:	9818      	ldr	r0, [sp, #96]	; 0x60
   132c2:	f7fe fa06 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   132c6:	9012      	str	r0, [sp, #72]	; 0x48
   132c8:	e7ff      	b.n	132ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   132ca:	9812      	ldr	r0, [sp, #72]	; 0x48
   132cc:	903d      	str	r0, [sp, #244]	; 0xf4
   132ce:	983d      	ldr	r0, [sp, #244]	; 0xf4
   132d0:	9011      	str	r0, [sp, #68]	; 0x44
   132d2:	e7ff      	b.n	132d4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   132d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   132d8:	9917      	ldr	r1, [sp, #92]	; 0x5c
   132da:	fa10 f081 	uxtah	r0, r0, r1
   132de:	b282      	uxth	r2, r0
   132e0:	4603      	mov	r3, r0
   132e2:	4282      	cmp	r2, r0
   132e4:	9310      	str	r3, [sp, #64]	; 0x40
   132e6:	f040 80c0 	bne.w	1346a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   132ea:	e7ff      	b.n	132ec <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   132ec:	9810      	ldr	r0, [sp, #64]	; 0x40
   132ee:	b281      	uxth	r1, r0
   132f0:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   132f2:	9811      	ldr	r0, [sp, #68]	; 0x44
   132f4:	f000 f8c5 	bl	13482 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   132f8:	900f      	str	r0, [sp, #60]	; 0x3c
   132fa:	e7ff      	b.n	132fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   132fc:	f64d 5104 	movw	r1, #56580	; 0xdd04
   13300:	f2c0 0101 	movt	r1, #1
   13304:	f64d 5354 	movw	r3, #56660	; 0xdd54
   13308:	f2c0 0301 	movt	r3, #1
   1330c:	220c      	movs	r2, #12
   1330e:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13310:	f7f5 fbf3 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13314:	e7ff      	b.n	13316 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13316:	e015      	b.n	13344 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   13318:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1331a:	b281      	uxth	r1, r0
   1331c:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   1331e:	9816      	ldr	r0, [sp, #88]	; 0x58
   13320:	f000 f8af 	bl	13482 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   13324:	900e      	str	r0, [sp, #56]	; 0x38
   13326:	e7ff      	b.n	13328 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   13328:	f64d 5104 	movw	r1, #56580	; 0xdd04
   1332c:	f2c0 0101 	movt	r1, #1
   13330:	f64d 5364 	movw	r3, #56676	; 0xdd64
   13334:	f2c0 0301 	movt	r3, #1
   13338:	220c      	movs	r2, #12
   1333a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1333c:	f7f5 fbdd 	bl	8afa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13340:	e7ff      	b.n	13342 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   13342:	e7ff      	b.n	13344 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   13344:	981c      	ldr	r0, [sp, #112]	; 0x70
   13346:	68c0      	ldr	r0, [r0, #12]
   13348:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1334a:	e746      	b.n	131da <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   1334c:	f645 2084 	movw	r0, #23172	; 0x5a84
   13350:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13354:	f005 fe46 	bl	18fe4 <os_sem_release>
   13358:	901e      	str	r0, [sp, #120]	; 0x78
   1335a:	e7ff      	b.n	1335c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   1335c:	f64d 2068 	movw	r0, #55912	; 0xda68
   13360:	f2c0 0001 	movt	r0, #1
   13364:	6800      	ldr	r0, [r0, #0]
   13366:	a91e      	add	r1, sp, #120	; 0x78
   13368:	911f      	str	r1, [sp, #124]	; 0x7c
   1336a:	9020      	str	r0, [sp, #128]	; 0x80
   1336c:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1336e:	903f      	str	r0, [sp, #252]	; 0xfc
   13370:	9920      	ldr	r1, [sp, #128]	; 0x80
   13372:	9140      	str	r1, [sp, #256]	; 0x100
   13374:	6802      	ldr	r2, [r0, #0]
   13376:	680b      	ldr	r3, [r1, #0]
   13378:	429a      	cmp	r2, r3
   1337a:	900d      	str	r0, [sp, #52]	; 0x34
   1337c:	910c      	str	r1, [sp, #48]	; 0x30
   1337e:	d101      	bne.n	13384 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   13380:	e7ff      	b.n	13382 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   13382:	e70e      	b.n	131a2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   13384:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   13388:	f2c0 0001 	movt	r0, #1
   1338c:	6801      	ldr	r1, [r0, #0]
   1338e:	980d      	ldr	r0, [sp, #52]	; 0x34
   13390:	9030      	str	r0, [sp, #192]	; 0xc0
   13392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13394:	9231      	str	r2, [sp, #196]	; 0xc4
   13396:	f64d 33d8 	movw	r3, #56280	; 0xdbd8
   1339a:	f2c0 0301 	movt	r3, #1
   1339e:	681b      	ldr	r3, [r3, #0]
   133a0:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   133a4:	f2c0 0c01 	movt	ip, #1
   133a8:	f8dc c000 	ldr.w	ip, [ip]
   133ac:	46ee      	mov	lr, sp
   133ae:	2400      	movs	r4, #0
   133b0:	f8ce 4000 	str.w	r4, [lr]
   133b4:	a832      	add	r0, sp, #200	; 0xc8
   133b6:	2201      	movs	r2, #1
   133b8:	910b      	str	r1, [sp, #44]	; 0x2c
   133ba:	4619      	mov	r1, r3
   133bc:	4663      	mov	r3, ip
   133be:	f7f5 fb6d 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   133c2:	e7ff      	b.n	133c4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   133c4:	a830      	add	r0, sp, #192	; 0xc0
   133c6:	902d      	str	r0, [sp, #180]	; 0xb4
   133c8:	a831      	add	r0, sp, #196	; 0xc4
   133ca:	902e      	str	r0, [sp, #184]	; 0xb8
   133cc:	a832      	add	r0, sp, #200	; 0xc8
   133ce:	902f      	str	r0, [sp, #188]	; 0xbc
   133d0:	982d      	ldr	r0, [sp, #180]	; 0xb4
   133d2:	9041      	str	r0, [sp, #260]	; 0x104
   133d4:	992e      	ldr	r1, [sp, #184]	; 0xb8
   133d6:	9142      	str	r1, [sp, #264]	; 0x108
   133d8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   133da:	9243      	str	r2, [sp, #268]	; 0x10c
   133dc:	f640 638f 	movw	r3, #3727	; 0xe8f
   133e0:	f2c0 0301 	movt	r3, #1
   133e4:	910a      	str	r1, [sp, #40]	; 0x28
   133e6:	4619      	mov	r1, r3
   133e8:	9209      	str	r2, [sp, #36]	; 0x24
   133ea:	f7f5 ff1a 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   133ee:	9008      	str	r0, [sp, #32]
   133f0:	9107      	str	r1, [sp, #28]
   133f2:	e7ff      	b.n	133f4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   133f4:	f640 618f 	movw	r1, #3727	; 0xe8f
   133f8:	f2c0 0101 	movt	r1, #1
   133fc:	980a      	ldr	r0, [sp, #40]	; 0x28
   133fe:	f7f5 ff10 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13402:	9006      	str	r0, [sp, #24]
   13404:	9105      	str	r1, [sp, #20]
   13406:	e7ff      	b.n	13408 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   13408:	f245 712b 	movw	r1, #22315	; 0x572b
   1340c:	f2c0 0101 	movt	r1, #1
   13410:	9809      	ldr	r0, [sp, #36]	; 0x24
   13412:	f7f5 ff1b 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13416:	9004      	str	r0, [sp, #16]
   13418:	9103      	str	r1, [sp, #12]
   1341a:	e7ff      	b.n	1341c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   1341c:	9808      	ldr	r0, [sp, #32]
   1341e:	9027      	str	r0, [sp, #156]	; 0x9c
   13420:	9907      	ldr	r1, [sp, #28]
   13422:	9128      	str	r1, [sp, #160]	; 0xa0
   13424:	9a06      	ldr	r2, [sp, #24]
   13426:	9229      	str	r2, [sp, #164]	; 0xa4
   13428:	9b05      	ldr	r3, [sp, #20]
   1342a:	932a      	str	r3, [sp, #168]	; 0xa8
   1342c:	f8dd c010 	ldr.w	ip, [sp, #16]
   13430:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   13434:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13438:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   1343c:	466c      	mov	r4, sp
   1343e:	2503      	movs	r5, #3
   13440:	6025      	str	r5, [r4, #0]
   13442:	a821      	add	r0, sp, #132	; 0x84
   13444:	ab27      	add	r3, sp, #156	; 0x9c
   13446:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13448:	462a      	mov	r2, r5
   1344a:	f7f5 fb27 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1344e:	e7ff      	b.n	13450 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   13450:	f64d 5074 	movw	r0, #56692	; 0xdd74
   13454:	f2c0 0001 	movt	r0, #1
   13458:	f001 fe79 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1345c:	9002      	str	r0, [sp, #8]
   1345e:	e7ff      	b.n	13460 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   13460:	a821      	add	r0, sp, #132	; 0x84
   13462:	9902      	ldr	r1, [sp, #8]
   13464:	f001 feb0 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13468:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1346a:	f64d 5030 	movw	r0, #56624	; 0xdd30
   1346e:	f2c0 0001 	movt	r0, #1
   13472:	f64d 5220 	movw	r2, #56608	; 0xdd20
   13476:	f2c0 0201 	movt	r2, #1
   1347a:	2121      	movs	r1, #33	; 0x21
   1347c:	f001 fe6e 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13480:	defe      	udf	#254	; 0xfe

00013482 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   13482:	b5b0      	push	{r4, r5, r7, lr}
   13484:	b0e8      	sub	sp, #416	; 0x1a0
   13486:	4613      	mov	r3, r2
   13488:	9058      	str	r0, [sp, #352]	; 0x160
   1348a:	9159      	str	r1, [sp, #356]	; 0x164
   1348c:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   13490:	2900      	cmp	r1, #0
   13492:	9121      	str	r1, [sp, #132]	; 0x84
   13494:	9020      	str	r0, [sp, #128]	; 0x80
   13496:	931f      	str	r3, [sp, #124]	; 0x7c
   13498:	d004      	beq.n	134a4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1349a:	e7ff      	b.n	1349c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   1349c:	9821      	ldr	r0, [sp, #132]	; 0x84
   1349e:	2801      	cmp	r0, #1
   134a0:	db0d      	blt.n	134be <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   134a2:	e007      	b.n	134b4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   134a4:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   134a6:	9022      	str	r0, [sp, #136]	; 0x88
   134a8:	2001      	movs	r0, #1
   134aa:	9022      	str	r0, [sp, #136]	; 0x88
   134ac:	e7ff      	b.n	134ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   134ae:	9822      	ldr	r0, [sp, #136]	; 0x88
   134b0:	b068      	add	sp, #416	; 0x1a0
   134b2:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   134b4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   134b6:	07c1      	lsls	r1, r0, #31
   134b8:	2900      	cmp	r1, #0
   134ba:	d10f      	bne.n	134dc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   134bc:	e00b      	b.n	134d6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   134be:	f64d 5084 	movw	r0, #56708	; 0xdd84
   134c2:	f2c0 0001 	movt	r0, #1
   134c6:	f64d 5290 	movw	r2, #56720	; 0xdd90
   134ca:	f2c0 0201 	movt	r2, #1
   134ce:	210b      	movs	r1, #11
   134d0:	f001 fe44 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   134d4:	defe      	udf	#254	; 0xfe
   134d6:	2001      	movs	r0, #1
        else { 1 }
   134d8:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   134da:	e002      	b.n	134e2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   134dc:	2000      	movs	r0, #0
   134de:	9023      	str	r0, [sp, #140]	; 0x8c
   134e0:	e7ff      	b.n	134e2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   134e2:	9923      	ldr	r1, [sp, #140]	; 0x8c
   134e4:	2012      	movs	r0, #18
   134e6:	f003 fedf 	bl	172a8 <hal_gpio_write>
   134ea:	e7ff      	b.n	134ec <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   134ec:	2019      	movs	r0, #25
   134ee:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   134f0:	f003 feda 	bl	172a8 <hal_gpio_write>
   134f4:	e7ff      	b.n	134f6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   134f6:	9821      	ldr	r0, [sp, #132]	; 0x84
   134f8:	2801      	cmp	r0, #1
   134fa:	d005      	beq.n	13508 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   134fc:	e7ff      	b.n	134fe <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   134fe:	9820      	ldr	r0, [sp, #128]	; 0x80
   13500:	9061      	str	r0, [sp, #388]	; 0x184
   13502:	9961      	ldr	r1, [sp, #388]	; 0x184
   13504:	911e      	str	r1, [sp, #120]	; 0x78
   13506:	e094      	b.n	13632 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   13508:	9820      	ldr	r0, [sp, #128]	; 0x80
   1350a:	905b      	str	r0, [sp, #364]	; 0x16c
   1350c:	995b      	ldr	r1, [sp, #364]	; 0x16c
   1350e:	911d      	str	r1, [sp, #116]	; 0x74
   13510:	e7ff      	b.n	13512 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   13512:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   13514:	901c      	str	r0, [sp, #112]	; 0x70
   13516:	991d      	ldr	r1, [sp, #116]	; 0x74
   13518:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1351a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1351c:	f004 fb72 	bl	17c04 <hal_spi_txrx>
   13520:	9024      	str	r0, [sp, #144]	; 0x90
   13522:	e7ff      	b.n	13524 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13524:	f64d 2068 	movw	r0, #55912	; 0xda68
   13528:	f2c0 0001 	movt	r0, #1
   1352c:	6800      	ldr	r0, [r0, #0]
   1352e:	a924      	add	r1, sp, #144	; 0x90
   13530:	9125      	str	r1, [sp, #148]	; 0x94
   13532:	9026      	str	r0, [sp, #152]	; 0x98
   13534:	9825      	ldr	r0, [sp, #148]	; 0x94
   13536:	905c      	str	r0, [sp, #368]	; 0x170
   13538:	9926      	ldr	r1, [sp, #152]	; 0x98
   1353a:	915d      	str	r1, [sp, #372]	; 0x174
   1353c:	6802      	ldr	r2, [r0, #0]
   1353e:	680b      	ldr	r3, [r1, #0]
   13540:	429a      	cmp	r2, r3
   13542:	901b      	str	r0, [sp, #108]	; 0x6c
   13544:	911a      	str	r1, [sp, #104]	; 0x68
   13546:	d101      	bne.n	1354c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   13548:	e7ff      	b.n	1354a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1354a:	e11f      	b.n	1378c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   1354c:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   13550:	f2c0 0001 	movt	r0, #1
   13554:	6801      	ldr	r1, [r0, #0]
   13556:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13558:	9036      	str	r0, [sp, #216]	; 0xd8
   1355a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1355c:	9237      	str	r2, [sp, #220]	; 0xdc
   1355e:	f64d 53a8 	movw	r3, #56744	; 0xdda8
   13562:	f2c0 0301 	movt	r3, #1
   13566:	681b      	ldr	r3, [r3, #0]
   13568:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   1356c:	f2c0 0c01 	movt	ip, #1
   13570:	f8dc c000 	ldr.w	ip, [ip]
   13574:	46ee      	mov	lr, sp
   13576:	2400      	movs	r4, #0
   13578:	f8ce 4000 	str.w	r4, [lr]
   1357c:	a838      	add	r0, sp, #224	; 0xe0
   1357e:	2201      	movs	r2, #1
   13580:	9119      	str	r1, [sp, #100]	; 0x64
   13582:	4619      	mov	r1, r3
   13584:	4663      	mov	r3, ip
   13586:	f7f5 fa89 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1358a:	e7ff      	b.n	1358c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   1358c:	a836      	add	r0, sp, #216	; 0xd8
   1358e:	9033      	str	r0, [sp, #204]	; 0xcc
   13590:	a837      	add	r0, sp, #220	; 0xdc
   13592:	9034      	str	r0, [sp, #208]	; 0xd0
   13594:	a838      	add	r0, sp, #224	; 0xe0
   13596:	9035      	str	r0, [sp, #212]	; 0xd4
   13598:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1359a:	905e      	str	r0, [sp, #376]	; 0x178
   1359c:	9934      	ldr	r1, [sp, #208]	; 0xd0
   1359e:	915f      	str	r1, [sp, #380]	; 0x17c
   135a0:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   135a2:	9260      	str	r2, [sp, #384]	; 0x180
   135a4:	f249 1397 	movw	r3, #37271	; 0x9197
   135a8:	f2c0 0300 	movt	r3, #0
   135ac:	9118      	str	r1, [sp, #96]	; 0x60
   135ae:	4619      	mov	r1, r3
   135b0:	9217      	str	r2, [sp, #92]	; 0x5c
   135b2:	f7f5 fe0c 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   135b6:	9016      	str	r0, [sp, #88]	; 0x58
   135b8:	9115      	str	r1, [sp, #84]	; 0x54
   135ba:	e7ff      	b.n	135bc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   135bc:	f249 1197 	movw	r1, #37271	; 0x9197
   135c0:	f2c0 0100 	movt	r1, #0
   135c4:	9818      	ldr	r0, [sp, #96]	; 0x60
   135c6:	f7f5 fe02 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   135ca:	9014      	str	r0, [sp, #80]	; 0x50
   135cc:	9113      	str	r1, [sp, #76]	; 0x4c
   135ce:	e7ff      	b.n	135d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   135d0:	f245 712b 	movw	r1, #22315	; 0x572b
   135d4:	f2c0 0101 	movt	r1, #1
   135d8:	9817      	ldr	r0, [sp, #92]	; 0x5c
   135da:	f7f5 fe37 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   135de:	9012      	str	r0, [sp, #72]	; 0x48
   135e0:	9111      	str	r1, [sp, #68]	; 0x44
   135e2:	e7ff      	b.n	135e4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   135e4:	9816      	ldr	r0, [sp, #88]	; 0x58
   135e6:	902d      	str	r0, [sp, #180]	; 0xb4
   135e8:	9915      	ldr	r1, [sp, #84]	; 0x54
   135ea:	912e      	str	r1, [sp, #184]	; 0xb8
   135ec:	9a14      	ldr	r2, [sp, #80]	; 0x50
   135ee:	922f      	str	r2, [sp, #188]	; 0xbc
   135f0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   135f2:	9330      	str	r3, [sp, #192]	; 0xc0
   135f4:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   135f8:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   135fc:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   13600:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   13604:	466c      	mov	r4, sp
   13606:	2503      	movs	r5, #3
   13608:	6025      	str	r5, [r4, #0]
   1360a:	a827      	add	r0, sp, #156	; 0x9c
   1360c:	ab2d      	add	r3, sp, #180	; 0xb4
   1360e:	9919      	ldr	r1, [sp, #100]	; 0x64
   13610:	462a      	mov	r2, r5
   13612:	f7f5 fa43 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13616:	e7ff      	b.n	13618 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   13618:	f64d 50ac 	movw	r0, #56748	; 0xddac
   1361c:	f2c0 0001 	movt	r0, #1
   13620:	f001 fd95 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13624:	9010      	str	r0, [sp, #64]	; 0x40
   13626:	e7ff      	b.n	13628 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   13628:	a827      	add	r0, sp, #156	; 0x9c
   1362a:	9910      	ldr	r1, [sp, #64]	; 0x40
   1362c:	f001 fdcc 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13630:	defe      	udf	#254	; 0xfe
   13632:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   13634:	900f      	str	r0, [sp, #60]	; 0x3c
   13636:	991e      	ldr	r1, [sp, #120]	; 0x78
   13638:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1363a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   1363c:	f004 fb38 	bl	17cb0 <hal_spi_txrx_noblock>
   13640:	903e      	str	r0, [sp, #248]	; 0xf8
   13642:	e7ff      	b.n	13644 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13644:	f64d 2068 	movw	r0, #55912	; 0xda68
   13648:	f2c0 0001 	movt	r0, #1
   1364c:	6800      	ldr	r0, [r0, #0]
   1364e:	a93e      	add	r1, sp, #248	; 0xf8
   13650:	913f      	str	r1, [sp, #252]	; 0xfc
   13652:	9040      	str	r0, [sp, #256]	; 0x100
   13654:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13656:	9062      	str	r0, [sp, #392]	; 0x188
   13658:	9940      	ldr	r1, [sp, #256]	; 0x100
   1365a:	9163      	str	r1, [sp, #396]	; 0x18c
   1365c:	6802      	ldr	r2, [r0, #0]
   1365e:	680b      	ldr	r3, [r1, #0]
   13660:	429a      	cmp	r2, r3
   13662:	900e      	str	r0, [sp, #56]	; 0x38
   13664:	910d      	str	r1, [sp, #52]	; 0x34
   13666:	d10c      	bne.n	13682 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   13668:	e7ff      	b.n	1366a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1366a:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   1366e:	9067      	str	r0, [sp, #412]	; 0x19c
   13670:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13674:	fba0 0101 	umull	r0, r1, r0, r1
   13678:	2900      	cmp	r1, #0
   1367a:	900c      	str	r0, [sp, #48]	; 0x30
   1367c:	f040 8090 	bne.w	137a0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   13680:	e072      	b.n	13768 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   13682:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   13686:	f2c0 0001 	movt	r0, #1
   1368a:	6801      	ldr	r1, [r0, #0]
   1368c:	980e      	ldr	r0, [sp, #56]	; 0x38
   1368e:	9050      	str	r0, [sp, #320]	; 0x140
   13690:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   13692:	9251      	str	r2, [sp, #324]	; 0x144
   13694:	f64d 53a8 	movw	r3, #56744	; 0xdda8
   13698:	f2c0 0301 	movt	r3, #1
   1369c:	681b      	ldr	r3, [r3, #0]
   1369e:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   136a2:	f2c0 0c01 	movt	ip, #1
   136a6:	f8dc c000 	ldr.w	ip, [ip]
   136aa:	46ee      	mov	lr, sp
   136ac:	2400      	movs	r4, #0
   136ae:	f8ce 4000 	str.w	r4, [lr]
   136b2:	a852      	add	r0, sp, #328	; 0x148
   136b4:	2201      	movs	r2, #1
   136b6:	910b      	str	r1, [sp, #44]	; 0x2c
   136b8:	4619      	mov	r1, r3
   136ba:	4663      	mov	r3, ip
   136bc:	f7f5 f9ee 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   136c0:	e7ff      	b.n	136c2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   136c2:	a850      	add	r0, sp, #320	; 0x140
   136c4:	904d      	str	r0, [sp, #308]	; 0x134
   136c6:	a851      	add	r0, sp, #324	; 0x144
   136c8:	904e      	str	r0, [sp, #312]	; 0x138
   136ca:	a852      	add	r0, sp, #328	; 0x148
   136cc:	904f      	str	r0, [sp, #316]	; 0x13c
   136ce:	984d      	ldr	r0, [sp, #308]	; 0x134
   136d0:	9064      	str	r0, [sp, #400]	; 0x190
   136d2:	994e      	ldr	r1, [sp, #312]	; 0x138
   136d4:	9165      	str	r1, [sp, #404]	; 0x194
   136d6:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   136d8:	9266      	str	r2, [sp, #408]	; 0x198
   136da:	f249 1397 	movw	r3, #37271	; 0x9197
   136de:	f2c0 0300 	movt	r3, #0
   136e2:	910a      	str	r1, [sp, #40]	; 0x28
   136e4:	4619      	mov	r1, r3
   136e6:	9209      	str	r2, [sp, #36]	; 0x24
   136e8:	f7f5 fd71 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136ec:	9008      	str	r0, [sp, #32]
   136ee:	9107      	str	r1, [sp, #28]
   136f0:	e7ff      	b.n	136f2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   136f2:	f249 1197 	movw	r1, #37271	; 0x9197
   136f6:	f2c0 0100 	movt	r1, #0
   136fa:	980a      	ldr	r0, [sp, #40]	; 0x28
   136fc:	f7f5 fd67 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13700:	9006      	str	r0, [sp, #24]
   13702:	9105      	str	r1, [sp, #20]
   13704:	e7ff      	b.n	13706 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   13706:	f245 712b 	movw	r1, #22315	; 0x572b
   1370a:	f2c0 0101 	movt	r1, #1
   1370e:	9809      	ldr	r0, [sp, #36]	; 0x24
   13710:	f7f5 fd9c 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13714:	9004      	str	r0, [sp, #16]
   13716:	9103      	str	r1, [sp, #12]
   13718:	e7ff      	b.n	1371a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1371a:	9808      	ldr	r0, [sp, #32]
   1371c:	9047      	str	r0, [sp, #284]	; 0x11c
   1371e:	9907      	ldr	r1, [sp, #28]
   13720:	9148      	str	r1, [sp, #288]	; 0x120
   13722:	9a06      	ldr	r2, [sp, #24]
   13724:	9249      	str	r2, [sp, #292]	; 0x124
   13726:	9b05      	ldr	r3, [sp, #20]
   13728:	934a      	str	r3, [sp, #296]	; 0x128
   1372a:	f8dd c010 	ldr.w	ip, [sp, #16]
   1372e:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   13732:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13736:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1373a:	466c      	mov	r4, sp
   1373c:	2503      	movs	r5, #3
   1373e:	6025      	str	r5, [r4, #0]
   13740:	a841      	add	r0, sp, #260	; 0x104
   13742:	ab47      	add	r3, sp, #284	; 0x11c
   13744:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13746:	462a      	mov	r2, r5
   13748:	f7f5 f9a8 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1374c:	e7ff      	b.n	1374e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   1374e:	f64d 50bc 	movw	r0, #56764	; 0xddbc
   13752:	f2c0 0001 	movt	r0, #1
   13756:	f001 fcfa 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1375a:	9002      	str	r0, [sp, #8]
   1375c:	e7ff      	b.n	1375e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   1375e:	a841      	add	r0, sp, #260	; 0x104
   13760:	9902      	ldr	r1, [sp, #8]
   13762:	f001 fd31 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13766:	defe      	udf	#254	; 0xfe
   13768:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   1376c:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   13770:	990c      	ldr	r1, [sp, #48]	; 0x30
   13772:	fba1 0200 	umull	r0, r2, r1, r0
   13776:	0991      	lsrs	r1, r2, #6
   13778:	f645 227c 	movw	r2, #23164	; 0x5a7c
   1377c:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13780:	9001      	str	r0, [sp, #4]
   13782:	4610      	mov	r0, r2
   13784:	f005 fc60 	bl	19048 <os_sem_pend>
   13788:	e7ff      	b.n	1378a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   1378a:	e7ff      	b.n	1378c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   1378c:	2019      	movs	r0, #25
   1378e:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   13790:	f003 fd8a 	bl	172a8 <hal_gpio_write>
   13794:	e7ff      	b.n	13796 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   13796:	2000      	movs	r0, #0
    Ok(())
   13798:	9022      	str	r0, [sp, #136]	; 0x88
   1379a:	2001      	movs	r0, #1
   1379c:	9022      	str	r0, [sp, #136]	; 0x88
}
   1379e:	e686      	b.n	134ae <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   137a0:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
   137a4:	f2c0 0001 	movt	r0, #1
   137a8:	f64d 52cc 	movw	r2, #56780	; 0xddcc
   137ac:	f2c0 0201 	movt	r2, #1
   137b0:	2121      	movs	r1, #33	; 0x21
   137b2:	f001 fcd3 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   137b6:	defe      	udf	#254	; 0xfe

000137b8 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   137b8:	b5b0      	push	{r4, r5, r7, lr}
   137ba:	b0ae      	sub	sp, #184	; 0xb8
   137bc:	9027      	str	r0, [sp, #156]	; 0x9c
   137be:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   137c0:	f645 207c 	movw	r0, #23164	; 0x5a7c
   137c4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   137c8:	f005 fc0c 	bl	18fe4 <os_sem_release>
   137cc:	900d      	str	r0, [sp, #52]	; 0x34
   137ce:	e7ff      	b.n	137d0 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   137d0:	f64d 2068 	movw	r0, #55912	; 0xda68
   137d4:	f2c0 0001 	movt	r0, #1
   137d8:	6800      	ldr	r0, [r0, #0]
   137da:	a90d      	add	r1, sp, #52	; 0x34
   137dc:	910e      	str	r1, [sp, #56]	; 0x38
   137de:	900f      	str	r0, [sp, #60]	; 0x3c
   137e0:	980e      	ldr	r0, [sp, #56]	; 0x38
   137e2:	9029      	str	r0, [sp, #164]	; 0xa4
   137e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   137e6:	912a      	str	r1, [sp, #168]	; 0xa8
   137e8:	6802      	ldr	r2, [r0, #0]
   137ea:	680b      	ldr	r3, [r1, #0]
   137ec:	429a      	cmp	r2, r3
   137ee:	900c      	str	r0, [sp, #48]	; 0x30
   137f0:	910b      	str	r1, [sp, #44]	; 0x2c
   137f2:	d102      	bne.n	137fa <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   137f4:	e7ff      	b.n	137f6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   137f6:	b02e      	add	sp, #184	; 0xb8
   137f8:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   137fa:	f64d 20c0 	movw	r0, #56000	; 0xdac0
   137fe:	f2c0 0001 	movt	r0, #1
   13802:	6801      	ldr	r1, [r0, #0]
   13804:	980c      	ldr	r0, [sp, #48]	; 0x30
   13806:	901f      	str	r0, [sp, #124]	; 0x7c
   13808:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1380a:	9220      	str	r2, [sp, #128]	; 0x80
   1380c:	f64d 33d8 	movw	r3, #56280	; 0xdbd8
   13810:	f2c0 0301 	movt	r3, #1
   13814:	681b      	ldr	r3, [r3, #0]
   13816:	f64d 2ce0 	movw	ip, #56032	; 0xdae0
   1381a:	f2c0 0c01 	movt	ip, #1
   1381e:	f8dc c000 	ldr.w	ip, [ip]
   13822:	46ee      	mov	lr, sp
   13824:	2400      	movs	r4, #0
   13826:	f8ce 4000 	str.w	r4, [lr]
   1382a:	a821      	add	r0, sp, #132	; 0x84
   1382c:	2201      	movs	r2, #1
   1382e:	910a      	str	r1, [sp, #40]	; 0x28
   13830:	4619      	mov	r1, r3
   13832:	4663      	mov	r3, ip
   13834:	f7f5 f932 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13838:	e7ff      	b.n	1383a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   1383a:	a81f      	add	r0, sp, #124	; 0x7c
   1383c:	901c      	str	r0, [sp, #112]	; 0x70
   1383e:	a820      	add	r0, sp, #128	; 0x80
   13840:	901d      	str	r0, [sp, #116]	; 0x74
   13842:	a821      	add	r0, sp, #132	; 0x84
   13844:	901e      	str	r0, [sp, #120]	; 0x78
   13846:	981c      	ldr	r0, [sp, #112]	; 0x70
   13848:	902b      	str	r0, [sp, #172]	; 0xac
   1384a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1384c:	912c      	str	r1, [sp, #176]	; 0xb0
   1384e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13850:	922d      	str	r2, [sp, #180]	; 0xb4
   13852:	f640 638f 	movw	r3, #3727	; 0xe8f
   13856:	f2c0 0301 	movt	r3, #1
   1385a:	9109      	str	r1, [sp, #36]	; 0x24
   1385c:	4619      	mov	r1, r3
   1385e:	9208      	str	r2, [sp, #32]
   13860:	f7f5 fcdf 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13864:	9007      	str	r0, [sp, #28]
   13866:	9106      	str	r1, [sp, #24]
   13868:	e7ff      	b.n	1386a <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   1386a:	f640 618f 	movw	r1, #3727	; 0xe8f
   1386e:	f2c0 0101 	movt	r1, #1
   13872:	9809      	ldr	r0, [sp, #36]	; 0x24
   13874:	f7f5 fcd5 	bl	9222 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13878:	9005      	str	r0, [sp, #20]
   1387a:	9104      	str	r1, [sp, #16]
   1387c:	e7ff      	b.n	1387e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   1387e:	f245 712b 	movw	r1, #22315	; 0x572b
   13882:	f2c0 0101 	movt	r1, #1
   13886:	9808      	ldr	r0, [sp, #32]
   13888:	f7f5 fce0 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1388c:	9003      	str	r0, [sp, #12]
   1388e:	9102      	str	r1, [sp, #8]
   13890:	e7ff      	b.n	13892 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   13892:	9807      	ldr	r0, [sp, #28]
   13894:	9016      	str	r0, [sp, #88]	; 0x58
   13896:	9906      	ldr	r1, [sp, #24]
   13898:	9117      	str	r1, [sp, #92]	; 0x5c
   1389a:	9a05      	ldr	r2, [sp, #20]
   1389c:	9218      	str	r2, [sp, #96]	; 0x60
   1389e:	9b04      	ldr	r3, [sp, #16]
   138a0:	9319      	str	r3, [sp, #100]	; 0x64
   138a2:	f8dd c00c 	ldr.w	ip, [sp, #12]
   138a6:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   138aa:	f8dd e008 	ldr.w	lr, [sp, #8]
   138ae:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   138b2:	466c      	mov	r4, sp
   138b4:	2503      	movs	r5, #3
   138b6:	6025      	str	r5, [r4, #0]
   138b8:	a810      	add	r0, sp, #64	; 0x40
   138ba:	ab16      	add	r3, sp, #88	; 0x58
   138bc:	990a      	ldr	r1, [sp, #40]	; 0x28
   138be:	462a      	mov	r2, r5
   138c0:	f7f5 f8ec 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138c4:	e7ff      	b.n	138c6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   138c6:	f64d 50dc 	movw	r0, #56796	; 0xdddc
   138ca:	f2c0 0001 	movt	r0, #1
   138ce:	f001 fc3e 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   138d2:	9001      	str	r0, [sp, #4]
   138d4:	e7ff      	b.n	138d6 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   138d6:	a810      	add	r0, sp, #64	; 0x40
   138d8:	9901      	ldr	r1, [sp, #4]
   138da:	f001 fc75 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   138de:	defe      	udf	#254	; 0xfe

000138e0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   138e0:	b580      	push	{r7, lr}
   138e2:	b084      	sub	sp, #16
   138e4:	4601      	mov	r1, r0
   138e6:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   138ea:	b2c0      	uxtb	r0, r0
   138ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   138f0:	fba0 0202 	umull	r0, r2, r0, r2
   138f4:	2a00      	cmp	r2, #0
   138f6:	9001      	str	r0, [sp, #4]
   138f8:	d110      	bne.n	1391c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   138fa:	e7ff      	b.n	138fc <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   138fc:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13900:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13904:	9901      	ldr	r1, [sp, #4]
   13906:	fba1 0200 	umull	r0, r2, r1, r0
   1390a:	0992      	lsrs	r2, r2, #6
   1390c:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   1390e:	9000      	str	r0, [sp, #0]
   13910:	4610      	mov	r0, r2
   13912:	f005 fce7 	bl	192e4 <os_time_delay>
   13916:	e7ff      	b.n	13918 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   13918:	b004      	add	sp, #16
   1391a:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   1391c:	f64d 40d0 	movw	r0, #56528	; 0xdcd0
   13920:	f2c0 0001 	movt	r0, #1
   13924:	f64d 52ec 	movw	r2, #56812	; 0xddec
   13928:	f2c0 0201 	movt	r2, #1
   1392c:	2121      	movs	r1, #33	; 0x21
   1392e:	f001 fc15 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13932:	defe      	udf	#254	; 0xfe

00013934 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
   13934:	b082      	sub	sp, #8
   13936:	2000      	movs	r0, #0
        SPI {
   13938:	9000      	str	r0, [sp, #0]
   1393a:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
   1393c:	9800      	ldr	r0, [sp, #0]
   1393e:	9901      	ldr	r1, [sp, #4]
   13940:	b002      	add	sp, #8
   13942:	4770      	bx	lr

00013944 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
   13944:	b5b0      	push	{r4, r5, r7, lr}
   13946:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
   1394a:	9077      	str	r0, [sp, #476]	; 0x1dc
   1394c:	9178      	str	r1, [sp, #480]	; 0x1e0
   1394e:	9279      	str	r2, [sp, #484]	; 0x1e4
   13950:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
   13952:	9028      	str	r0, [sp, #160]	; 0xa0
   13954:	4608      	mov	r0, r1
   13956:	9127      	str	r1, [sp, #156]	; 0x9c
   13958:	4619      	mov	r1, r3
   1395a:	9226      	str	r2, [sp, #152]	; 0x98
   1395c:	f004 f896 	bl	17a8c <hal_spi_config>
   13960:	9029      	str	r0, [sp, #164]	; 0xa4
   13962:	e7ff      	b.n	13964 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
   13964:	f64d 50fc 	movw	r0, #56828	; 0xddfc
   13968:	f2c0 0001 	movt	r0, #1
   1396c:	6800      	ldr	r0, [r0, #0]
   1396e:	a929      	add	r1, sp, #164	; 0xa4
   13970:	912a      	str	r1, [sp, #168]	; 0xa8
   13972:	902b      	str	r0, [sp, #172]	; 0xac
   13974:	982a      	ldr	r0, [sp, #168]	; 0xa8
   13976:	907b      	str	r0, [sp, #492]	; 0x1ec
   13978:	992b      	ldr	r1, [sp, #172]	; 0xac
   1397a:	917c      	str	r1, [sp, #496]	; 0x1f0
   1397c:	6802      	ldr	r2, [r0, #0]
   1397e:	680b      	ldr	r3, [r1, #0]
   13980:	429a      	cmp	r2, r3
   13982:	9025      	str	r0, [sp, #148]	; 0x94
   13984:	9124      	str	r1, [sp, #144]	; 0x90
   13986:	d105      	bne.n	13994 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
   13988:	e7ff      	b.n	1398a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
   1398a:	9827      	ldr	r0, [sp, #156]	; 0x9c
   1398c:	f004 f89a 	bl	17ac4 <hal_spi_enable>
   13990:	9043      	str	r0, [sp, #268]	; 0x10c
   13992:	e072      	b.n	13a7a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
   13994:	f64d 6054 	movw	r0, #56916	; 0xde54
   13998:	f2c0 0001 	movt	r0, #1
   1399c:	6801      	ldr	r1, [r0, #0]
   1399e:	9825      	ldr	r0, [sp, #148]	; 0x94
   139a0:	903b      	str	r0, [sp, #236]	; 0xec
   139a2:	9a24      	ldr	r2, [sp, #144]	; 0x90
   139a4:	923c      	str	r2, [sp, #240]	; 0xf0
   139a6:	f64d 6370 	movw	r3, #56944	; 0xde70
   139aa:	f2c0 0301 	movt	r3, #1
   139ae:	681b      	ldr	r3, [r3, #0]
   139b0:	f64d 6c74 	movw	ip, #56948	; 0xde74
   139b4:	f2c0 0c01 	movt	ip, #1
   139b8:	f8dc c000 	ldr.w	ip, [ip]
   139bc:	46ee      	mov	lr, sp
   139be:	2400      	movs	r4, #0
   139c0:	f8ce 4000 	str.w	r4, [lr]
   139c4:	a83d      	add	r0, sp, #244	; 0xf4
   139c6:	2201      	movs	r2, #1
   139c8:	9123      	str	r1, [sp, #140]	; 0x8c
   139ca:	4619      	mov	r1, r3
   139cc:	4663      	mov	r3, ip
   139ce:	f7f5 f865 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139d2:	e7ff      	b.n	139d4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
   139d4:	a83b      	add	r0, sp, #236	; 0xec
   139d6:	9038      	str	r0, [sp, #224]	; 0xe0
   139d8:	a83c      	add	r0, sp, #240	; 0xf0
   139da:	9039      	str	r0, [sp, #228]	; 0xe4
   139dc:	a83d      	add	r0, sp, #244	; 0xf4
   139de:	903a      	str	r0, [sp, #232]	; 0xe8
   139e0:	9838      	ldr	r0, [sp, #224]	; 0xe0
   139e2:	907d      	str	r0, [sp, #500]	; 0x1f4
   139e4:	9939      	ldr	r1, [sp, #228]	; 0xe4
   139e6:	917e      	str	r1, [sp, #504]	; 0x1f8
   139e8:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   139ea:	927f      	str	r2, [sp, #508]	; 0x1fc
   139ec:	f249 1397 	movw	r3, #37271	; 0x9197
   139f0:	f2c0 0300 	movt	r3, #0
   139f4:	9122      	str	r1, [sp, #136]	; 0x88
   139f6:	4619      	mov	r1, r3
   139f8:	9221      	str	r2, [sp, #132]	; 0x84
   139fa:	f7f5 fbe8 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   139fe:	9020      	str	r0, [sp, #128]	; 0x80
   13a00:	911f      	str	r1, [sp, #124]	; 0x7c
   13a02:	e7ff      	b.n	13a04 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
   13a04:	f249 1197 	movw	r1, #37271	; 0x9197
   13a08:	f2c0 0100 	movt	r1, #0
   13a0c:	9822      	ldr	r0, [sp, #136]	; 0x88
   13a0e:	f7f5 fbde 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a12:	901e      	str	r0, [sp, #120]	; 0x78
   13a14:	911d      	str	r1, [sp, #116]	; 0x74
   13a16:	e7ff      	b.n	13a18 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
   13a18:	f245 712b 	movw	r1, #22315	; 0x572b
   13a1c:	f2c0 0101 	movt	r1, #1
   13a20:	9821      	ldr	r0, [sp, #132]	; 0x84
   13a22:	f7f5 fc13 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a26:	901c      	str	r0, [sp, #112]	; 0x70
   13a28:	911b      	str	r1, [sp, #108]	; 0x6c
   13a2a:	e7ff      	b.n	13a2c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
   13a2c:	9820      	ldr	r0, [sp, #128]	; 0x80
   13a2e:	9032      	str	r0, [sp, #200]	; 0xc8
   13a30:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13a32:	9133      	str	r1, [sp, #204]	; 0xcc
   13a34:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13a36:	9234      	str	r2, [sp, #208]	; 0xd0
   13a38:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   13a3a:	9335      	str	r3, [sp, #212]	; 0xd4
   13a3c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
   13a40:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
   13a44:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
   13a48:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
   13a4c:	466c      	mov	r4, sp
   13a4e:	2503      	movs	r5, #3
   13a50:	6025      	str	r5, [r4, #0]
   13a52:	a82c      	add	r0, sp, #176	; 0xb0
   13a54:	ab32      	add	r3, sp, #200	; 0xc8
   13a56:	9923      	ldr	r1, [sp, #140]	; 0x8c
   13a58:	462a      	mov	r2, r5
   13a5a:	f7f5 f81f 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a5e:	e7ff      	b.n	13a60 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
   13a60:	f64d 6090 	movw	r0, #56976	; 0xde90
   13a64:	f2c0 0001 	movt	r0, #1
   13a68:	f001 fb71 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a6c:	901a      	str	r0, [sp, #104]	; 0x68
   13a6e:	e7ff      	b.n	13a70 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
   13a70:	a82c      	add	r0, sp, #176	; 0xb0
   13a72:	991a      	ldr	r1, [sp, #104]	; 0x68
   13a74:	f001 fba8 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a78:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
   13a7a:	f64d 50fc 	movw	r0, #56828	; 0xddfc
   13a7e:	f2c0 0001 	movt	r0, #1
   13a82:	6800      	ldr	r0, [r0, #0]
   13a84:	a943      	add	r1, sp, #268	; 0x10c
   13a86:	9144      	str	r1, [sp, #272]	; 0x110
   13a88:	9045      	str	r0, [sp, #276]	; 0x114
   13a8a:	9844      	ldr	r0, [sp, #272]	; 0x110
   13a8c:	9080      	str	r0, [sp, #512]	; 0x200
   13a8e:	9945      	ldr	r1, [sp, #276]	; 0x114
   13a90:	9181      	str	r1, [sp, #516]	; 0x204
   13a92:	6802      	ldr	r2, [r0, #0]
   13a94:	680b      	ldr	r3, [r1, #0]
   13a96:	429a      	cmp	r2, r3
   13a98:	9019      	str	r0, [sp, #100]	; 0x64
   13a9a:	9118      	str	r1, [sp, #96]	; 0x60
   13a9c:	d106      	bne.n	13aac <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
   13a9e:	e7ff      	b.n	13aa0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
   13aa0:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
   13aa2:	9826      	ldr	r0, [sp, #152]	; 0x98
   13aa4:	f003 fbe4 	bl	17270 <hal_gpio_init_out>
   13aa8:	905d      	str	r0, [sp, #372]	; 0x174
   13aaa:	e072      	b.n	13b92 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
   13aac:	f64d 6054 	movw	r0, #56916	; 0xde54
   13ab0:	f2c0 0001 	movt	r0, #1
   13ab4:	6801      	ldr	r1, [r0, #0]
   13ab6:	9819      	ldr	r0, [sp, #100]	; 0x64
   13ab8:	9055      	str	r0, [sp, #340]	; 0x154
   13aba:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13abc:	9256      	str	r2, [sp, #344]	; 0x158
   13abe:	f64d 63b8 	movw	r3, #57016	; 0xdeb8
   13ac2:	f2c0 0301 	movt	r3, #1
   13ac6:	681b      	ldr	r3, [r3, #0]
   13ac8:	f64d 6c74 	movw	ip, #56948	; 0xde74
   13acc:	f2c0 0c01 	movt	ip, #1
   13ad0:	f8dc c000 	ldr.w	ip, [ip]
   13ad4:	46ee      	mov	lr, sp
   13ad6:	2400      	movs	r4, #0
   13ad8:	f8ce 4000 	str.w	r4, [lr]
   13adc:	a857      	add	r0, sp, #348	; 0x15c
   13ade:	2201      	movs	r2, #1
   13ae0:	9117      	str	r1, [sp, #92]	; 0x5c
   13ae2:	4619      	mov	r1, r3
   13ae4:	4663      	mov	r3, ip
   13ae6:	f7f4 ffd9 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13aea:	e7ff      	b.n	13aec <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
   13aec:	a855      	add	r0, sp, #340	; 0x154
   13aee:	9052      	str	r0, [sp, #328]	; 0x148
   13af0:	a856      	add	r0, sp, #344	; 0x158
   13af2:	9053      	str	r0, [sp, #332]	; 0x14c
   13af4:	a857      	add	r0, sp, #348	; 0x15c
   13af6:	9054      	str	r0, [sp, #336]	; 0x150
   13af8:	9852      	ldr	r0, [sp, #328]	; 0x148
   13afa:	9082      	str	r0, [sp, #520]	; 0x208
   13afc:	9953      	ldr	r1, [sp, #332]	; 0x14c
   13afe:	9183      	str	r1, [sp, #524]	; 0x20c
   13b00:	9a54      	ldr	r2, [sp, #336]	; 0x150
   13b02:	9284      	str	r2, [sp, #528]	; 0x210
   13b04:	f249 1397 	movw	r3, #37271	; 0x9197
   13b08:	f2c0 0300 	movt	r3, #0
   13b0c:	9116      	str	r1, [sp, #88]	; 0x58
   13b0e:	4619      	mov	r1, r3
   13b10:	9215      	str	r2, [sp, #84]	; 0x54
   13b12:	f7f5 fb5c 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b16:	9014      	str	r0, [sp, #80]	; 0x50
   13b18:	9113      	str	r1, [sp, #76]	; 0x4c
   13b1a:	e7ff      	b.n	13b1c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
   13b1c:	f249 1197 	movw	r1, #37271	; 0x9197
   13b20:	f2c0 0100 	movt	r1, #0
   13b24:	9816      	ldr	r0, [sp, #88]	; 0x58
   13b26:	f7f5 fb52 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b2a:	9012      	str	r0, [sp, #72]	; 0x48
   13b2c:	9111      	str	r1, [sp, #68]	; 0x44
   13b2e:	e7ff      	b.n	13b30 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
   13b30:	f245 712b 	movw	r1, #22315	; 0x572b
   13b34:	f2c0 0101 	movt	r1, #1
   13b38:	9815      	ldr	r0, [sp, #84]	; 0x54
   13b3a:	f7f5 fb87 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b3e:	9010      	str	r0, [sp, #64]	; 0x40
   13b40:	910f      	str	r1, [sp, #60]	; 0x3c
   13b42:	e7ff      	b.n	13b44 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
   13b44:	9814      	ldr	r0, [sp, #80]	; 0x50
   13b46:	904c      	str	r0, [sp, #304]	; 0x130
   13b48:	9913      	ldr	r1, [sp, #76]	; 0x4c
   13b4a:	914d      	str	r1, [sp, #308]	; 0x134
   13b4c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13b4e:	924e      	str	r2, [sp, #312]	; 0x138
   13b50:	9b11      	ldr	r3, [sp, #68]	; 0x44
   13b52:	934f      	str	r3, [sp, #316]	; 0x13c
   13b54:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   13b58:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
   13b5c:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   13b60:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
   13b64:	466c      	mov	r4, sp
   13b66:	2503      	movs	r5, #3
   13b68:	6025      	str	r5, [r4, #0]
   13b6a:	a846      	add	r0, sp, #280	; 0x118
   13b6c:	ab4c      	add	r3, sp, #304	; 0x130
   13b6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
   13b70:	462a      	mov	r2, r5
   13b72:	f7f4 ff93 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b76:	e7ff      	b.n	13b78 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
   13b78:	f64d 60bc 	movw	r0, #57020	; 0xdebc
   13b7c:	f2c0 0001 	movt	r0, #1
   13b80:	f001 fae5 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13b84:	900e      	str	r0, [sp, #56]	; 0x38
   13b86:	e7ff      	b.n	13b88 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
   13b88:	a846      	add	r0, sp, #280	; 0x118
   13b8a:	990e      	ldr	r1, [sp, #56]	; 0x38
   13b8c:	f001 fb1c 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13b90:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
   13b92:	f64d 50fc 	movw	r0, #56828	; 0xddfc
   13b96:	f2c0 0001 	movt	r0, #1
   13b9a:	6800      	ldr	r0, [r0, #0]
   13b9c:	a95d      	add	r1, sp, #372	; 0x174
   13b9e:	915e      	str	r1, [sp, #376]	; 0x178
   13ba0:	905f      	str	r0, [sp, #380]	; 0x17c
   13ba2:	985e      	ldr	r0, [sp, #376]	; 0x178
   13ba4:	9085      	str	r0, [sp, #532]	; 0x214
   13ba6:	995f      	ldr	r1, [sp, #380]	; 0x17c
   13ba8:	9186      	str	r1, [sp, #536]	; 0x218
   13baa:	6802      	ldr	r2, [r0, #0]
   13bac:	680b      	ldr	r3, [r1, #0]
   13bae:	429a      	cmp	r2, r3
   13bb0:	900d      	str	r0, [sp, #52]	; 0x34
   13bb2:	910c      	str	r1, [sp, #48]	; 0x30
   13bb4:	d109      	bne.n	13bca <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
   13bb6:	e7ff      	b.n	13bb8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
   13bb8:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13bba:	9928      	ldr	r1, [sp, #160]	; 0xa0
   13bbc:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
   13bbe:	9a26      	ldr	r2, [sp, #152]	; 0x98
   13bc0:	604a      	str	r2, [r1, #4]
   13bc2:	2001      	movs	r0, #1
        Ok(())
    }
   13bc4:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
   13bc8:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
   13bca:	f64d 6054 	movw	r0, #56916	; 0xde54
   13bce:	f2c0 0001 	movt	r0, #1
   13bd2:	6801      	ldr	r1, [r0, #0]
   13bd4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13bd6:	906f      	str	r0, [sp, #444]	; 0x1bc
   13bd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   13bda:	9270      	str	r2, [sp, #448]	; 0x1c0
   13bdc:	f64d 63e4 	movw	r3, #57060	; 0xdee4
   13be0:	f2c0 0301 	movt	r3, #1
   13be4:	681b      	ldr	r3, [r3, #0]
   13be6:	f64d 6c74 	movw	ip, #56948	; 0xde74
   13bea:	f2c0 0c01 	movt	ip, #1
   13bee:	f8dc c000 	ldr.w	ip, [ip]
   13bf2:	46ee      	mov	lr, sp
   13bf4:	2400      	movs	r4, #0
   13bf6:	f8ce 4000 	str.w	r4, [lr]
   13bfa:	a871      	add	r0, sp, #452	; 0x1c4
   13bfc:	2201      	movs	r2, #1
   13bfe:	910b      	str	r1, [sp, #44]	; 0x2c
   13c00:	4619      	mov	r1, r3
   13c02:	4663      	mov	r3, ip
   13c04:	f7f4 ff4a 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c08:	e7ff      	b.n	13c0a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
   13c0a:	a86f      	add	r0, sp, #444	; 0x1bc
   13c0c:	906c      	str	r0, [sp, #432]	; 0x1b0
   13c0e:	a870      	add	r0, sp, #448	; 0x1c0
   13c10:	906d      	str	r0, [sp, #436]	; 0x1b4
   13c12:	a871      	add	r0, sp, #452	; 0x1c4
   13c14:	906e      	str	r0, [sp, #440]	; 0x1b8
   13c16:	986c      	ldr	r0, [sp, #432]	; 0x1b0
   13c18:	9087      	str	r0, [sp, #540]	; 0x21c
   13c1a:	996d      	ldr	r1, [sp, #436]	; 0x1b4
   13c1c:	9188      	str	r1, [sp, #544]	; 0x220
   13c1e:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
   13c20:	9289      	str	r2, [sp, #548]	; 0x224
   13c22:	f249 1397 	movw	r3, #37271	; 0x9197
   13c26:	f2c0 0300 	movt	r3, #0
   13c2a:	910a      	str	r1, [sp, #40]	; 0x28
   13c2c:	4619      	mov	r1, r3
   13c2e:	9209      	str	r2, [sp, #36]	; 0x24
   13c30:	f7f5 facd 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c34:	9008      	str	r0, [sp, #32]
   13c36:	9107      	str	r1, [sp, #28]
   13c38:	e7ff      	b.n	13c3a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
   13c3a:	f249 1197 	movw	r1, #37271	; 0x9197
   13c3e:	f2c0 0100 	movt	r1, #0
   13c42:	980a      	ldr	r0, [sp, #40]	; 0x28
   13c44:	f7f5 fac3 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13c48:	9006      	str	r0, [sp, #24]
   13c4a:	9105      	str	r1, [sp, #20]
   13c4c:	e7ff      	b.n	13c4e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
   13c4e:	f245 712b 	movw	r1, #22315	; 0x572b
   13c52:	f2c0 0101 	movt	r1, #1
   13c56:	9809      	ldr	r0, [sp, #36]	; 0x24
   13c58:	f7f5 faf8 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13c5c:	9004      	str	r0, [sp, #16]
   13c5e:	9103      	str	r1, [sp, #12]
   13c60:	e7ff      	b.n	13c62 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
   13c62:	9808      	ldr	r0, [sp, #32]
   13c64:	9066      	str	r0, [sp, #408]	; 0x198
   13c66:	9907      	ldr	r1, [sp, #28]
   13c68:	9167      	str	r1, [sp, #412]	; 0x19c
   13c6a:	9a06      	ldr	r2, [sp, #24]
   13c6c:	9268      	str	r2, [sp, #416]	; 0x1a0
   13c6e:	9b05      	ldr	r3, [sp, #20]
   13c70:	9369      	str	r3, [sp, #420]	; 0x1a4
   13c72:	f8dd c010 	ldr.w	ip, [sp, #16]
   13c76:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
   13c7a:	f8dd e00c 	ldr.w	lr, [sp, #12]
   13c7e:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
   13c82:	466c      	mov	r4, sp
   13c84:	2503      	movs	r5, #3
   13c86:	6025      	str	r5, [r4, #0]
   13c88:	a860      	add	r0, sp, #384	; 0x180
   13c8a:	ab66      	add	r3, sp, #408	; 0x198
   13c8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13c8e:	462a      	mov	r2, r5
   13c90:	f7f4 ff04 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c94:	e7ff      	b.n	13c96 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
   13c96:	f64d 60e8 	movw	r0, #57064	; 0xdee8
   13c9a:	f2c0 0001 	movt	r0, #1
   13c9e:	f001 fa56 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13ca2:	9002      	str	r0, [sp, #8]
   13ca4:	e7ff      	b.n	13ca6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
   13ca6:	a860      	add	r0, sp, #384	; 0x180
   13ca8:	9902      	ldr	r1, [sp, #8]
   13caa:	f001 fa8d 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13cae:	defe      	udf	#254	; 0xfe

00013cb0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
   13cb0:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
   13cb2:	4770      	bx	lr

00013cb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
   13cb4:	b5b0      	push	{r4, r5, r7, lr}
   13cb6:	b0b0      	sub	sp, #192	; 0xc0
   13cb8:	9029      	str	r0, [sp, #164]	; 0xa4
   13cba:	912a      	str	r1, [sp, #168]	; 0xa8
   13cbc:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
   13cbe:	900e      	str	r0, [sp, #56]	; 0x38
   13cc0:	4608      	mov	r0, r1
   13cc2:	910d      	str	r1, [sp, #52]	; 0x34
   13cc4:	4611      	mov	r1, r2
   13cc6:	f003 fad3 	bl	17270 <hal_gpio_init_out>
   13cca:	900f      	str	r0, [sp, #60]	; 0x3c
   13ccc:	e7ff      	b.n	13cce <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
   13cce:	f64d 50fc 	movw	r0, #56828	; 0xddfc
   13cd2:	f2c0 0001 	movt	r0, #1
   13cd6:	6800      	ldr	r0, [r0, #0]
   13cd8:	a90f      	add	r1, sp, #60	; 0x3c
   13cda:	9110      	str	r1, [sp, #64]	; 0x40
   13cdc:	9011      	str	r0, [sp, #68]	; 0x44
   13cde:	9810      	ldr	r0, [sp, #64]	; 0x40
   13ce0:	902b      	str	r0, [sp, #172]	; 0xac
   13ce2:	9911      	ldr	r1, [sp, #68]	; 0x44
   13ce4:	912c      	str	r1, [sp, #176]	; 0xb0
   13ce6:	6802      	ldr	r2, [r0, #0]
   13ce8:	680b      	ldr	r3, [r1, #0]
   13cea:	429a      	cmp	r2, r3
   13cec:	900c      	str	r0, [sp, #48]	; 0x30
   13cee:	910b      	str	r1, [sp, #44]	; 0x2c
   13cf0:	d106      	bne.n	13d00 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
   13cf2:	e7ff      	b.n	13cf4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
   13cf4:	980d      	ldr	r0, [sp, #52]	; 0x34
   13cf6:	990e      	ldr	r1, [sp, #56]	; 0x38
   13cf8:	6008      	str	r0, [r1, #0]
   13cfa:	2001      	movs	r0, #1
        Ok(())
    }
   13cfc:	b030      	add	sp, #192	; 0xc0
   13cfe:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
   13d00:	f64d 6054 	movw	r0, #56916	; 0xde54
   13d04:	f2c0 0001 	movt	r0, #1
   13d08:	6801      	ldr	r1, [r0, #0]
   13d0a:	980c      	ldr	r0, [sp, #48]	; 0x30
   13d0c:	9021      	str	r0, [sp, #132]	; 0x84
   13d0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13d10:	9222      	str	r2, [sp, #136]	; 0x88
   13d12:	f64d 730c 	movw	r3, #57100	; 0xdf0c
   13d16:	f2c0 0301 	movt	r3, #1
   13d1a:	681b      	ldr	r3, [r3, #0]
   13d1c:	f64d 6c74 	movw	ip, #56948	; 0xde74
   13d20:	f2c0 0c01 	movt	ip, #1
   13d24:	f8dc c000 	ldr.w	ip, [ip]
   13d28:	46ee      	mov	lr, sp
   13d2a:	2400      	movs	r4, #0
   13d2c:	f8ce 4000 	str.w	r4, [lr]
   13d30:	a823      	add	r0, sp, #140	; 0x8c
   13d32:	2201      	movs	r2, #1
   13d34:	910a      	str	r1, [sp, #40]	; 0x28
   13d36:	4619      	mov	r1, r3
   13d38:	4663      	mov	r3, ip
   13d3a:	f7f4 feaf 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d3e:	e7ff      	b.n	13d40 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
   13d40:	a821      	add	r0, sp, #132	; 0x84
   13d42:	901e      	str	r0, [sp, #120]	; 0x78
   13d44:	a822      	add	r0, sp, #136	; 0x88
   13d46:	901f      	str	r0, [sp, #124]	; 0x7c
   13d48:	a823      	add	r0, sp, #140	; 0x8c
   13d4a:	9020      	str	r0, [sp, #128]	; 0x80
   13d4c:	981e      	ldr	r0, [sp, #120]	; 0x78
   13d4e:	902d      	str	r0, [sp, #180]	; 0xb4
   13d50:	991f      	ldr	r1, [sp, #124]	; 0x7c
   13d52:	912e      	str	r1, [sp, #184]	; 0xb8
   13d54:	9a20      	ldr	r2, [sp, #128]	; 0x80
   13d56:	922f      	str	r2, [sp, #188]	; 0xbc
   13d58:	f249 1397 	movw	r3, #37271	; 0x9197
   13d5c:	f2c0 0300 	movt	r3, #0
   13d60:	9109      	str	r1, [sp, #36]	; 0x24
   13d62:	4619      	mov	r1, r3
   13d64:	9208      	str	r2, [sp, #32]
   13d66:	f7f5 fa32 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d6a:	9007      	str	r0, [sp, #28]
   13d6c:	9106      	str	r1, [sp, #24]
   13d6e:	e7ff      	b.n	13d70 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
   13d70:	f249 1197 	movw	r1, #37271	; 0x9197
   13d74:	f2c0 0100 	movt	r1, #0
   13d78:	9809      	ldr	r0, [sp, #36]	; 0x24
   13d7a:	f7f5 fa28 	bl	91ce <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13d7e:	9005      	str	r0, [sp, #20]
   13d80:	9104      	str	r1, [sp, #16]
   13d82:	e7ff      	b.n	13d84 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
   13d84:	f245 712b 	movw	r1, #22315	; 0x572b
   13d88:	f2c0 0101 	movt	r1, #1
   13d8c:	9808      	ldr	r0, [sp, #32]
   13d8e:	f7f5 fa5d 	bl	924c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13d92:	9003      	str	r0, [sp, #12]
   13d94:	9102      	str	r1, [sp, #8]
   13d96:	e7ff      	b.n	13d98 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
   13d98:	9807      	ldr	r0, [sp, #28]
   13d9a:	9018      	str	r0, [sp, #96]	; 0x60
   13d9c:	9906      	ldr	r1, [sp, #24]
   13d9e:	9119      	str	r1, [sp, #100]	; 0x64
   13da0:	9a05      	ldr	r2, [sp, #20]
   13da2:	921a      	str	r2, [sp, #104]	; 0x68
   13da4:	9b04      	ldr	r3, [sp, #16]
   13da6:	931b      	str	r3, [sp, #108]	; 0x6c
   13da8:	f8dd c00c 	ldr.w	ip, [sp, #12]
   13dac:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
   13db0:	f8dd e008 	ldr.w	lr, [sp, #8]
   13db4:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
   13db8:	466c      	mov	r4, sp
   13dba:	2503      	movs	r5, #3
   13dbc:	6025      	str	r5, [r4, #0]
   13dbe:	a812      	add	r0, sp, #72	; 0x48
   13dc0:	ab18      	add	r3, sp, #96	; 0x60
   13dc2:	990a      	ldr	r1, [sp, #40]	; 0x28
   13dc4:	462a      	mov	r2, r5
   13dc6:	f7f4 fe69 	bl	8a9c <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13dca:	e7ff      	b.n	13dcc <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
   13dcc:	f64d 7010 	movw	r0, #57104	; 0xdf10
   13dd0:	f2c0 0001 	movt	r0, #1
   13dd4:	f001 f9bb 	bl	1514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13dd8:	9001      	str	r0, [sp, #4]
   13dda:	e7ff      	b.n	13ddc <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
   13ddc:	a812      	add	r0, sp, #72	; 0x48
   13dde:	9901      	ldr	r1, [sp, #4]
   13de0:	f001 f9f2 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13de4:	defe      	udf	#254	; 0xfe

00013de6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
   13de6:	b580      	push	{r7, lr}
   13de8:	b082      	sub	sp, #8
   13dea:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
   13dec:	6800      	ldr	r0, [r0, #0]
   13dee:	2100      	movs	r1, #0
   13df0:	f003 fa5a 	bl	172a8 <hal_gpio_write>
   13df4:	e7ff      	b.n	13df6 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
   13df6:	2001      	movs	r0, #1
        Ok(())
    }
   13df8:	b002      	add	sp, #8
   13dfa:	bd80      	pop	{r7, pc}

00013dfc <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
   13dfc:	b580      	push	{r7, lr}
   13dfe:	b082      	sub	sp, #8
   13e00:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
   13e02:	6800      	ldr	r0, [r0, #0]
   13e04:	2101      	movs	r1, #1
   13e06:	f003 fa4f 	bl	172a8 <hal_gpio_write>
   13e0a:	e7ff      	b.n	13e0c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
   13e0c:	2001      	movs	r0, #1
        Ok(())
    }
   13e0e:	b002      	add	sp, #8
   13e10:	bd80      	pop	{r7, pc}

00013e12 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
   13e12:	4770      	bx	lr

00013e14 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
   13e14:	b580      	push	{r7, lr}
   13e16:	b086      	sub	sp, #24
   13e18:	460a      	mov	r2, r1
   13e1a:	9003      	str	r0, [sp, #12]
   13e1c:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13e20:	b2c8      	uxtb	r0, r1
   13e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13e26:	fba0 0101 	umull	r0, r1, r0, r1
   13e2a:	2900      	cmp	r1, #0
   13e2c:	9002      	str	r0, [sp, #8]
   13e2e:	d110      	bne.n	13e52 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
   13e30:	e7ff      	b.n	13e32 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
   13e32:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   13e36:	f2c1 0062 	movt	r0, #4194	; 0x1062
   13e3a:	9902      	ldr	r1, [sp, #8]
   13e3c:	fba1 0200 	umull	r0, r2, r1, r0
   13e40:	0992      	lsrs	r2, r2, #6
   13e42:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
   13e44:	9001      	str	r0, [sp, #4]
   13e46:	4610      	mov	r0, r2
   13e48:	f005 fa4c 	bl	192e4 <os_time_delay>
   13e4c:	e7ff      	b.n	13e4e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
   13e4e:	b006      	add	sp, #24
   13e50:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   13e52:	f64d 7030 	movw	r0, #57136	; 0xdf30
   13e56:	f2c0 0001 	movt	r0, #1
   13e5a:	f64d 7220 	movw	r2, #57120	; 0xdf20
   13e5e:	f2c0 0201 	movt	r2, #1
   13e62:	2121      	movs	r1, #33	; 0x21
   13e64:	f001 f97a 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13e68:	defe      	udf	#254	; 0xfe

00013e6a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   13e6a:	b082      	sub	sp, #8
   13e6c:	9001      	str	r0, [sp, #4]
   13e6e:	9000      	str	r0, [sp, #0]
   13e70:	e7ff      	b.n	13e72 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   13e72:	9800      	ldr	r0, [sp, #0]
   13e74:	fab0 f180 	clz	r1, r0
   13e78:	0948      	lsrs	r0, r1, #5
   13e7a:	b002      	add	sp, #8
   13e7c:	4770      	bx	lr

00013e7e <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   13e7e:	b081      	sub	sp, #4
   13e80:	b001      	add	sp, #4
   13e82:	4770      	bx	lr

00013e84 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   13e84:	b08a      	sub	sp, #40	; 0x28
   13e86:	9005      	str	r0, [sp, #20]
   13e88:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   13e8a:	9107      	str	r1, [sp, #28]
   13e8c:	21ff      	movs	r1, #255	; 0xff
   13e8e:	9106      	str	r1, [sp, #24]
   13e90:	2108      	movs	r1, #8
   13e92:	9108      	str	r1, [sp, #32]
   13e94:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13e96:	9003      	str	r0, [sp, #12]
   13e98:	9102      	str	r1, [sp, #8]
   13e9a:	e016      	b.n	13eca <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   13e9c:	2001      	movs	r0, #1
   13e9e:	f88d 0013 	strb.w	r0, [sp, #19]
   13ea2:	e00c      	b.n	13ebe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13ea4:	2000      	movs	r0, #0
   13ea6:	f88d 0013 	strb.w	r0, [sp, #19]
   13eaa:	e008      	b.n	13ebe <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   13eac:	9803      	ldr	r0, [sp, #12]
   13eae:	6801      	ldr	r1, [r0, #0]
   13eb0:	6842      	ldr	r2, [r0, #4]
   13eb2:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   13eb6:	f172 0200 	sbcs.w	r2, r2, #0
   13eba:	d3ef      	bcc.n	13e9c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13ebc:	e7f2      	b.n	13ea4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   13ebe:	f89d 0013 	ldrb.w	r0, [sp, #19]
   13ec2:	07c0      	lsls	r0, r0, #31
   13ec4:	2800      	cmp	r0, #0
   13ec6:	d10e      	bne.n	13ee6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   13ec8:	e009      	b.n	13ede <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   13eca:	2001      	movs	r0, #1
   13ecc:	9009      	str	r0, [sp, #36]	; 0x24
   13ece:	9809      	ldr	r0, [sp, #36]	; 0x24
   13ed0:	9001      	str	r0, [sp, #4]
   13ed2:	e7ff      	b.n	13ed4 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   13ed4:	9802      	ldr	r0, [sp, #8]
   13ed6:	9901      	ldr	r1, [sp, #4]
   13ed8:	4288      	cmp	r0, r1
   13eda:	d9df      	bls.n	13e9c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   13edc:	e7e6      	b.n	13eac <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   13ede:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   13ee0:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13ee4:	e007      	b.n	13ef6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   13ee6:	9803      	ldr	r0, [sp, #12]
   13ee8:	7801      	ldrb	r1, [r0, #0]
   13eea:	f88d 1011 	strb.w	r1, [sp, #17]
   13eee:	2101      	movs	r1, #1
   13ef0:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   13ef4:	e7ff      	b.n	13ef6 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   13ef6:	f89d 0010 	ldrb.w	r0, [sp, #16]
   13efa:	f89d 1011 	ldrb.w	r1, [sp, #17]
   13efe:	b00a      	add	sp, #40	; 0x28
   13f00:	4770      	bx	lr

00013f02 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   13f02:	b084      	sub	sp, #16
   13f04:	9002      	str	r0, [sp, #8]
   13f06:	6801      	ldr	r1, [r0, #0]
   13f08:	2900      	cmp	r1, #0
   13f0a:	9000      	str	r0, [sp, #0]
   13f0c:	d001      	beq.n	13f12 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   13f0e:	e7ff      	b.n	13f10 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   13f10:	e003      	b.n	13f1a <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   13f12:	2000      	movs	r0, #0
   13f14:	9001      	str	r0, [sp, #4]
   13f16:	e006      	b.n	13f26 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13f18:	defe      	udf	#254	; 0xfe
   13f1a:	9800      	ldr	r0, [sp, #0]
   13f1c:	f100 0108 	add.w	r1, r0, #8
   13f20:	9103      	str	r1, [sp, #12]
   13f22:	9101      	str	r1, [sp, #4]
   13f24:	e7ff      	b.n	13f26 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   13f26:	9801      	ldr	r0, [sp, #4]
   13f28:	b004      	add	sp, #16
   13f2a:	4770      	bx	lr

00013f2c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   13f2c:	b084      	sub	sp, #16
   13f2e:	460b      	mov	r3, r1
   13f30:	4684      	mov	ip, r0
   13f32:	f88d 000c 	strb.w	r0, [sp, #12]
   13f36:	f88d 100d 	strb.w	r1, [sp, #13]
   13f3a:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13f3e:	07c1      	lsls	r1, r0, #31
   13f40:	2900      	cmp	r1, #0
   13f42:	9202      	str	r2, [sp, #8]
   13f44:	d001      	beq.n	13f4a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   13f46:	e7ff      	b.n	13f48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   13f48:	e009      	b.n	13f5e <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   13f4a:	f64d 7051 	movw	r0, #57169	; 0xdf51
   13f4e:	f2c0 0001 	movt	r0, #1
   13f52:	212b      	movs	r1, #43	; 0x2b
   13f54:	9a02      	ldr	r2, [sp, #8]
   13f56:	f001 f901 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13f5a:	defe      	udf	#254	; 0xfe
   13f5c:	defe      	udf	#254	; 0xfe
   13f5e:	f89d 000d 	ldrb.w	r0, [sp, #13]
   13f62:	4601      	mov	r1, r0
   13f64:	f88d 000f 	strb.w	r0, [sp, #15]
   13f68:	f89d 000c 	ldrb.w	r0, [sp, #12]
   13f6c:	07c0      	lsls	r0, r0, #31
   13f6e:	2800      	cmp	r0, #0
   13f70:	9101      	str	r1, [sp, #4]
   13f72:	d003      	beq.n	13f7c <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   13f74:	e7ff      	b.n	13f76 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   13f76:	9801      	ldr	r0, [sp, #4]
   13f78:	b004      	add	sp, #16
   13f7a:	4770      	bx	lr
   13f7c:	e7fb      	b.n	13f76 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00013f7e <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   13f7e:	b088      	sub	sp, #32
   13f80:	9004      	str	r0, [sp, #16]
   13f82:	9105      	str	r1, [sp, #20]
   13f84:	9804      	ldr	r0, [sp, #16]
   13f86:	2800      	cmp	r0, #0
   13f88:	4601      	mov	r1, r0
   13f8a:	bf18      	it	ne
   13f8c:	2101      	movne	r1, #1
   13f8e:	2800      	cmp	r0, #0
   13f90:	9203      	str	r2, [sp, #12]
   13f92:	d001      	beq.n	13f98 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   13f94:	e7ff      	b.n	13f96 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   13f96:	e009      	b.n	13fac <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   13f98:	f64d 7051 	movw	r0, #57169	; 0xdf51
   13f9c:	f2c0 0001 	movt	r0, #1
   13fa0:	212b      	movs	r1, #43	; 0x2b
   13fa2:	9a03      	ldr	r2, [sp, #12]
   13fa4:	f001 f8da 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   13fa8:	defe      	udf	#254	; 0xfe
   13faa:	defe      	udf	#254	; 0xfe
   13fac:	9804      	ldr	r0, [sp, #16]
   13fae:	9905      	ldr	r1, [sp, #20]
   13fb0:	9006      	str	r0, [sp, #24]
   13fb2:	9107      	str	r1, [sp, #28]
   13fb4:	9a04      	ldr	r2, [sp, #16]
   13fb6:	2a00      	cmp	r2, #0
   13fb8:	9002      	str	r0, [sp, #8]
   13fba:	9101      	str	r1, [sp, #4]
   13fbc:	d004      	beq.n	13fc8 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   13fbe:	e7ff      	b.n	13fc0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   13fc0:	9802      	ldr	r0, [sp, #8]
   13fc2:	9901      	ldr	r1, [sp, #4]
   13fc4:	b008      	add	sp, #32
   13fc6:	4770      	bx	lr
   13fc8:	e7fa      	b.n	13fc0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00013fca <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   13fca:	b082      	sub	sp, #8
   13fcc:	9001      	str	r0, [sp, #4]
   13fce:	6800      	ldr	r0, [r0, #0]
   13fd0:	2800      	cmp	r0, #0
   13fd2:	d104      	bne.n	13fde <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   13fd4:	e7ff      	b.n	13fd6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   13fd6:	2000      	movs	r0, #0
   13fd8:	f88d 0003 	strb.w	r0, [sp, #3]
   13fdc:	e003      	b.n	13fe6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13fde:	2001      	movs	r0, #1
   13fe0:	f88d 0003 	strb.w	r0, [sp, #3]
   13fe4:	e7ff      	b.n	13fe6 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   13fe6:	f89d 0003 	ldrb.w	r0, [sp, #3]
   13fea:	b002      	add	sp, #8
   13fec:	4770      	bx	lr

00013fee <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   13fee:	b580      	push	{r7, lr}
   13ff0:	b086      	sub	sp, #24
   13ff2:	9000      	str	r0, [sp, #0]
   13ff4:	2000      	movs	r0, #0
   13ff6:	f88d 000f 	strb.w	r0, [sp, #15]
   13ffa:	f88d 000e 	strb.w	r0, [sp, #14]
   13ffe:	2001      	movs	r0, #1
   14000:	f88d 000f 	strb.w	r0, [sp, #15]
   14004:	f88d 000e 	strb.w	r0, [sp, #14]
   14008:	9800      	ldr	r0, [sp, #0]
   1400a:	2800      	cmp	r0, #0
   1400c:	4601      	mov	r1, r0
   1400e:	bf18      	it	ne
   14010:	2101      	movne	r1, #1
   14012:	2800      	cmp	r0, #0
   14014:	d001      	beq.n	1401a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14016:	e7ff      	b.n	14018 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14018:	e004      	b.n	14024 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   1401a:	2000      	movs	r0, #0
   1401c:	f88d 0004 	strb.w	r0, [sp, #4]
   14020:	e019      	b.n	14056 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14022:	defe      	udf	#254	; 0xfe
   14024:	2000      	movs	r0, #0
   14026:	f88d 000f 	strb.w	r0, [sp, #15]
   1402a:	9900      	ldr	r1, [sp, #0]
   1402c:	9105      	str	r1, [sp, #20]
   1402e:	f88d 000e 	strb.w	r0, [sp, #14]
   14032:	9102      	str	r1, [sp, #8]
   14034:	9802      	ldr	r0, [sp, #8]
   14036:	f7f6 f953 	bl	a2e0 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   1403a:	f88d 1005 	strb.w	r1, [sp, #5]
   1403e:	f88d 0004 	strb.w	r0, [sp, #4]
   14042:	e7ff      	b.n	14044 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14044:	e007      	b.n	14056 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14046:	9800      	ldr	r0, [sp, #0]
   14048:	2800      	cmp	r0, #0
   1404a:	d110      	bne.n	1406e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   1404c:	e019      	b.n	14082 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   1404e:	2000      	movs	r0, #0
   14050:	f88d 000e 	strb.w	r0, [sp, #14]
   14054:	e7f7      	b.n	14046 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14056:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1405a:	07c0      	lsls	r0, r0, #31
   1405c:	2800      	cmp	r0, #0
   1405e:	d1f6      	bne.n	1404e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14060:	e7f1      	b.n	14046 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14062:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14066:	f89d 1005 	ldrb.w	r1, [sp, #5]
   1406a:	b006      	add	sp, #24
   1406c:	bd80      	pop	{r7, pc}
   1406e:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14072:	07c0      	lsls	r0, r0, #31
   14074:	2800      	cmp	r0, #0
   14076:	d0f4      	beq.n	14062 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14078:	e7ff      	b.n	1407a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   1407a:	2000      	movs	r0, #0
   1407c:	f88d 000f 	strb.w	r0, [sp, #15]
   14080:	e7ef      	b.n	14062 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14082:	e7ee      	b.n	14062 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014084 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   14084:	b580      	push	{r7, lr}
   14086:	b084      	sub	sp, #16
   14088:	9002      	str	r0, [sp, #8]
   1408a:	9103      	str	r1, [sp, #12]
   1408c:	f64d 707c 	movw	r0, #57212	; 0xdf7c
   14090:	f2c0 0001 	movt	r0, #1
   14094:	2202      	movs	r2, #2
   14096:	9001      	str	r0, [sp, #4]
   14098:	4608      	mov	r0, r1
   1409a:	9901      	ldr	r1, [sp, #4]
   1409c:	f001 fd7e 	bl	15b9c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   140a0:	9000      	str	r0, [sp, #0]
   140a2:	e7ff      	b.n	140a4 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   140a4:	9800      	ldr	r0, [sp, #0]
   140a6:	f000 0001 	and.w	r0, r0, #1
   140aa:	b004      	add	sp, #16
   140ac:	bd80      	pop	{r7, pc}

000140ae <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   140ae:	b580      	push	{r7, lr}
   140b0:	b08a      	sub	sp, #40	; 0x28
   140b2:	4684      	mov	ip, r0
   140b4:	f88d 0017 	strb.w	r0, [sp, #23]
   140b8:	9107      	str	r1, [sp, #28]
   140ba:	9208      	str	r2, [sp, #32]
   140bc:	f89d 0017 	ldrb.w	r0, [sp, #23]
   140c0:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   140c4:	f1be 0f00 	cmp.w	lr, #0
   140c8:	9304      	str	r3, [sp, #16]
   140ca:	9203      	str	r2, [sp, #12]
   140cc:	9102      	str	r1, [sp, #8]
   140ce:	d00e      	beq.n	140ee <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   140d0:	e7ff      	b.n	140d2 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   140d2:	4668      	mov	r0, sp
   140d4:	9904      	ldr	r1, [sp, #16]
   140d6:	6001      	str	r1, [r0, #0]
   140d8:	f64d 7380 	movw	r3, #57216	; 0xdf80
   140dc:	f2c0 0301 	movt	r3, #1
   140e0:	aa06      	add	r2, sp, #24
   140e2:	9802      	ldr	r0, [sp, #8]
   140e4:	9903      	ldr	r1, [sp, #12]
   140e6:	f001 f80b 	bl	15100 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   140ea:	defe      	udf	#254	; 0xfe
   140ec:	defe      	udf	#254	; 0xfe
   140ee:	f89d 0017 	ldrb.w	r0, [sp, #23]
   140f2:	07c0      	lsls	r0, r0, #31
   140f4:	2800      	cmp	r0, #0
   140f6:	d102      	bne.n	140fe <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   140f8:	e7ff      	b.n	140fa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   140fa:	b00a      	add	sp, #40	; 0x28
   140fc:	bd80      	pop	{r7, pc}
   140fe:	e7fc      	b.n	140fa <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

00014100 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   14100:	b580      	push	{r7, lr}
   14102:	b088      	sub	sp, #32
   14104:	9001      	str	r0, [sp, #4]
   14106:	2000      	movs	r0, #0
   14108:	f88d 0013 	strb.w	r0, [sp, #19]
   1410c:	f88d 0011 	strb.w	r0, [sp, #17]
   14110:	f88d 0012 	strb.w	r0, [sp, #18]
   14114:	2001      	movs	r0, #1
   14116:	f88d 0012 	strb.w	r0, [sp, #18]
   1411a:	f88d 0013 	strb.w	r0, [sp, #19]
   1411e:	f88d 0011 	strb.w	r0, [sp, #17]
   14122:	9801      	ldr	r0, [sp, #4]
   14124:	1e41      	subs	r1, r0, #1
   14126:	bf18      	it	ne
   14128:	2101      	movne	r1, #1
   1412a:	2801      	cmp	r0, #1
   1412c:	d00d      	beq.n	1414a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   1412e:	e7ff      	b.n	14130 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   14130:	2000      	movs	r0, #0
   14132:	f88d 0013 	strb.w	r0, [sp, #19]
   14136:	9901      	ldr	r1, [sp, #4]
   14138:	9107      	str	r1, [sp, #28]
   1413a:	f88d 0011 	strb.w	r0, [sp, #17]
   1413e:	9103      	str	r1, [sp, #12]
   14140:	9803      	ldr	r0, [sp, #12]
   14142:	f7f5 fa8d 	bl	9660 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   14146:	e006      	b.n	14156 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   14148:	defe      	udf	#254	; 0xfe
   1414a:	2000      	movs	r0, #0
   1414c:	f88d 0012 	strb.w	r0, [sp, #18]
   14150:	f88d 000b 	strb.w	r0, [sp, #11]
   14154:	e003      	b.n	1415e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   14156:	2001      	movs	r0, #1
   14158:	f88d 000b 	strb.w	r0, [sp, #11]
   1415c:	e7ff      	b.n	1415e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1415e:	f89d 0011 	ldrb.w	r0, [sp, #17]
   14162:	07c0      	lsls	r0, r0, #31
   14164:	2800      	cmp	r0, #0
   14166:	d104      	bne.n	14172 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   14168:	e7ff      	b.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1416a:	9801      	ldr	r0, [sp, #4]
   1416c:	2801      	cmp	r0, #1
   1416e:	d008      	beq.n	14182 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   14170:	e011      	b.n	14196 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   14172:	2000      	movs	r0, #0
   14174:	f88d 0011 	strb.w	r0, [sp, #17]
   14178:	e7f7      	b.n	1416a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1417a:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1417e:	b008      	add	sp, #32
   14180:	bd80      	pop	{r7, pc}
   14182:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14186:	07c0      	lsls	r0, r0, #31
   14188:	2800      	cmp	r0, #0
   1418a:	d0f6      	beq.n	1417a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1418c:	e7ff      	b.n	1418e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   1418e:	2000      	movs	r0, #0
   14190:	f88d 0012 	strb.w	r0, [sp, #18]
   14194:	e7f1      	b.n	1417a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   14196:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1419a:	07c0      	lsls	r0, r0, #31
   1419c:	2800      	cmp	r0, #0
   1419e:	d0ec      	beq.n	1417a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   141a0:	e7ff      	b.n	141a2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   141a2:	2000      	movs	r0, #0
   141a4:	f88d 0013 	strb.w	r0, [sp, #19]
   141a8:	e7e7      	b.n	1417a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

000141aa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   141aa:	b580      	push	{r7, lr}
   141ac:	b088      	sub	sp, #32
   141ae:	9001      	str	r0, [sp, #4]
   141b0:	2000      	movs	r0, #0
   141b2:	f88d 0013 	strb.w	r0, [sp, #19]
   141b6:	f88d 0011 	strb.w	r0, [sp, #17]
   141ba:	f88d 0012 	strb.w	r0, [sp, #18]
   141be:	2001      	movs	r0, #1
   141c0:	f88d 0012 	strb.w	r0, [sp, #18]
   141c4:	f88d 0013 	strb.w	r0, [sp, #19]
   141c8:	f88d 0011 	strb.w	r0, [sp, #17]
   141cc:	9801      	ldr	r0, [sp, #4]
   141ce:	1e41      	subs	r1, r0, #1
   141d0:	bf18      	it	ne
   141d2:	2101      	movne	r1, #1
   141d4:	2801      	cmp	r0, #1
   141d6:	d00d      	beq.n	141f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   141d8:	e7ff      	b.n	141da <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   141da:	2000      	movs	r0, #0
   141dc:	f88d 0013 	strb.w	r0, [sp, #19]
   141e0:	9901      	ldr	r1, [sp, #4]
   141e2:	9107      	str	r1, [sp, #28]
   141e4:	f88d 0011 	strb.w	r0, [sp, #17]
   141e8:	9103      	str	r1, [sp, #12]
   141ea:	9803      	ldr	r0, [sp, #12]
   141ec:	f7f5 fa2e 	bl	964c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   141f0:	e006      	b.n	14200 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   141f2:	defe      	udf	#254	; 0xfe
   141f4:	2000      	movs	r0, #0
   141f6:	f88d 0012 	strb.w	r0, [sp, #18]
   141fa:	f88d 000b 	strb.w	r0, [sp, #11]
   141fe:	e003      	b.n	14208 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14200:	2001      	movs	r0, #1
   14202:	f88d 000b 	strb.w	r0, [sp, #11]
   14206:	e7ff      	b.n	14208 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   14208:	f89d 0011 	ldrb.w	r0, [sp, #17]
   1420c:	07c0      	lsls	r0, r0, #31
   1420e:	2800      	cmp	r0, #0
   14210:	d104      	bne.n	1421c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   14212:	e7ff      	b.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14214:	9801      	ldr	r0, [sp, #4]
   14216:	2801      	cmp	r0, #1
   14218:	d008      	beq.n	1422c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   1421a:	e011      	b.n	14240 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   1421c:	2000      	movs	r0, #0
   1421e:	f88d 0011 	strb.w	r0, [sp, #17]
   14222:	e7f7      	b.n	14214 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   14224:	f89d 000b 	ldrb.w	r0, [sp, #11]
   14228:	b008      	add	sp, #32
   1422a:	bd80      	pop	{r7, pc}
   1422c:	f89d 0012 	ldrb.w	r0, [sp, #18]
   14230:	07c0      	lsls	r0, r0, #31
   14232:	2800      	cmp	r0, #0
   14234:	d0f6      	beq.n	14224 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14236:	e7ff      	b.n	14238 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   14238:	2000      	movs	r0, #0
   1423a:	f88d 0012 	strb.w	r0, [sp, #18]
   1423e:	e7f1      	b.n	14224 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   14240:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14244:	07c0      	lsls	r0, r0, #31
   14246:	2800      	cmp	r0, #0
   14248:	d0ec      	beq.n	14224 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1424a:	e7ff      	b.n	1424c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   1424c:	2000      	movs	r0, #0
   1424e:	f88d 0013 	strb.w	r0, [sp, #19]
   14252:	e7e7      	b.n	14224 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00014254 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   14254:	b580      	push	{r7, lr}
   14256:	b088      	sub	sp, #32
   14258:	9001      	str	r0, [sp, #4]
   1425a:	2000      	movs	r0, #0
   1425c:	f88d 0013 	strb.w	r0, [sp, #19]
   14260:	f88d 0011 	strb.w	r0, [sp, #17]
   14264:	f88d 0012 	strb.w	r0, [sp, #18]
   14268:	2001      	movs	r0, #1
   1426a:	f88d 0012 	strb.w	r0, [sp, #18]
   1426e:	f88d 0013 	strb.w	r0, [sp, #19]
   14272:	f88d 0011 	strb.w	r0, [sp, #17]
   14276:	9801      	ldr	r0, [sp, #4]
   14278:	1e41      	subs	r1, r0, #1
   1427a:	bf18      	it	ne
   1427c:	2101      	movne	r1, #1
   1427e:	2801      	cmp	r0, #1
   14280:	d00d      	beq.n	1429e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   14282:	e7ff      	b.n	14284 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   14284:	2000      	movs	r0, #0
   14286:	f88d 0013 	strb.w	r0, [sp, #19]
   1428a:	9901      	ldr	r1, [sp, #4]
   1428c:	9107      	str	r1, [sp, #28]
   1428e:	f88d 0011 	strb.w	r0, [sp, #17]
   14292:	9103      	str	r1, [sp, #12]
   14294:	9803      	ldr	r0, [sp, #12]
   14296:	f7f5 f9de 	bl	9656 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   1429a:	e006      	b.n	142aa <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   1429c:	defe      	udf	#254	; 0xfe
   1429e:	2000      	movs	r0, #0
   142a0:	f88d 0012 	strb.w	r0, [sp, #18]
   142a4:	f88d 000b 	strb.w	r0, [sp, #11]
   142a8:	e003      	b.n	142b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   142aa:	2001      	movs	r0, #1
   142ac:	f88d 000b 	strb.w	r0, [sp, #11]
   142b0:	e7ff      	b.n	142b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   142b2:	f89d 0011 	ldrb.w	r0, [sp, #17]
   142b6:	07c0      	lsls	r0, r0, #31
   142b8:	2800      	cmp	r0, #0
   142ba:	d104      	bne.n	142c6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   142bc:	e7ff      	b.n	142be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   142be:	9801      	ldr	r0, [sp, #4]
   142c0:	2801      	cmp	r0, #1
   142c2:	d008      	beq.n	142d6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   142c4:	e011      	b.n	142ea <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   142c6:	2000      	movs	r0, #0
   142c8:	f88d 0011 	strb.w	r0, [sp, #17]
   142cc:	e7f7      	b.n	142be <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   142ce:	f89d 000b 	ldrb.w	r0, [sp, #11]
   142d2:	b008      	add	sp, #32
   142d4:	bd80      	pop	{r7, pc}
   142d6:	f89d 0012 	ldrb.w	r0, [sp, #18]
   142da:	07c0      	lsls	r0, r0, #31
   142dc:	2800      	cmp	r0, #0
   142de:	d0f6      	beq.n	142ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   142e0:	e7ff      	b.n	142e2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   142e2:	2000      	movs	r0, #0
   142e4:	f88d 0012 	strb.w	r0, [sp, #18]
   142e8:	e7f1      	b.n	142ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   142ea:	f89d 0013 	ldrb.w	r0, [sp, #19]
   142ee:	07c0      	lsls	r0, r0, #31
   142f0:	2800      	cmp	r0, #0
   142f2:	d0ec      	beq.n	142ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   142f4:	e7ff      	b.n	142f6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   142f6:	2000      	movs	r0, #0
   142f8:	f88d 0013 	strb.w	r0, [sp, #19]
   142fc:	e7e7      	b.n	142ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

000142fe <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   142fe:	b082      	sub	sp, #8
   14300:	2001      	movs	r0, #1
   14302:	f88d 0003 	strb.w	r0, [sp, #3]
   14306:	f89d 0003 	ldrb.w	r0, [sp, #3]
   1430a:	b002      	add	sp, #8
   1430c:	4770      	bx	lr

0001430e <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
        self.style.stroke_width = width;

        self
    }

    fn fill(mut self, color: Option<C>) -> Self {
   1430e:	b5b0      	push	{r4, r5, r7, lr}
   14310:	b081      	sub	sp, #4
   14312:	469c      	mov	ip, r3
   14314:	4696      	mov	lr, r2
   14316:	f8ad 2000 	strh.w	r2, [sp]
   1431a:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   1431e:	820a      	strh	r2, [r1, #16]
   14320:	824b      	strh	r3, [r1, #18]

        self
   14322:	c91c      	ldmia	r1!, {r2, r3, r4}
   14324:	c01c      	stmia	r0!, {r2, r3, r4}
   14326:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   1432a:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   1432e:	b001      	add	sp, #4
   14330:	bdb0      	pop	{r4, r5, r7, pc}

00014332 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   14332:	b510      	push	{r4, lr}
   14334:	b08c      	sub	sp, #48	; 0x30
   14336:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   1433a:	9108      	str	r1, [sp, #32]
   1433c:	9209      	str	r2, [sp, #36]	; 0x24
   1433e:	930a      	str	r3, [sp, #40]	; 0x28
   14340:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   14344:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   14348:	9004      	str	r0, [sp, #16]
   1434a:	4670      	mov	r0, lr
   1434c:	9303      	str	r3, [sp, #12]
   1434e:	9202      	str	r2, [sp, #8]
   14350:	9101      	str	r1, [sp, #4]
   14352:	f8cd c000 	str.w	ip, [sp]
   14356:	f000 f818 	bl	1438a <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   1435a:	e7ff      	b.n	1435c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   1435c:	9801      	ldr	r0, [sp, #4]
   1435e:	9904      	ldr	r1, [sp, #16]
   14360:	6008      	str	r0, [r1, #0]
   14362:	9a02      	ldr	r2, [sp, #8]
   14364:	604a      	str	r2, [r1, #4]
   14366:	9b03      	ldr	r3, [sp, #12]
   14368:	608b      	str	r3, [r1, #8]
   1436a:	f8dd c000 	ldr.w	ip, [sp]
   1436e:	f8c1 c00c 	str.w	ip, [r1, #12]
   14372:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   14376:	f8a1 e018 	strh.w	lr, [r1, #24]
   1437a:	f8dd e014 	ldr.w	lr, [sp, #20]
   1437e:	9c06      	ldr	r4, [sp, #24]
   14380:	614c      	str	r4, [r1, #20]
   14382:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   14386:	b00c      	add	sp, #48	; 0x30
   14388:	bd10      	pop	{r4, pc}

0001438a <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   1438a:	b082      	sub	sp, #8
   1438c:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   1438e:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   14392:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   14396:	f8bd 1000 	ldrh.w	r1, [sp]
   1439a:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   1439e:	8001      	strh	r1, [r0, #0]
   143a0:	8042      	strh	r2, [r0, #2]
   143a2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   143a6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   143aa:	8081      	strh	r1, [r0, #4]
   143ac:	80c2      	strh	r2, [r0, #6]
   143ae:	2101      	movs	r1, #1
   143b0:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   143b2:	b002      	add	sp, #8
   143b4:	4770      	bx	lr

000143b6 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
#[derive(ToPrimitive)]
   143b6:	b084      	sub	sp, #16
   143b8:	460a      	mov	r2, r1
   143ba:	4603      	mov	r3, r0
   143bc:	9103      	str	r1, [sp, #12]
   143be:	9002      	str	r0, [sp, #8]
   143c0:	b004      	add	sp, #16
   143c2:	4770      	bx	lr

000143c4 <_ZN4core3fmt9Arguments16new_v1_formatted17h182016ac15d0d40fE>:
   143c4:	b510      	push	{r4, lr}
   143c6:	b088      	sub	sp, #32
   143c8:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   143cc:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
   143d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   143d2:	9102      	str	r1, [sp, #8]
   143d4:	9203      	str	r2, [sp, #12]
   143d6:	9304      	str	r3, [sp, #16]
   143d8:	9405      	str	r4, [sp, #20]
   143da:	f8cd e018 	str.w	lr, [sp, #24]
   143de:	f8cd c01c 	str.w	ip, [sp, #28]
   143e2:	f8cd e000 	str.w	lr, [sp]
   143e6:	f8cd c004 	str.w	ip, [sp, #4]
   143ea:	6001      	str	r1, [r0, #0]
   143ec:	6042      	str	r2, [r0, #4]
   143ee:	9900      	ldr	r1, [sp, #0]
   143f0:	9a01      	ldr	r2, [sp, #4]
   143f2:	6081      	str	r1, [r0, #8]
   143f4:	60c2      	str	r2, [r0, #12]
   143f6:	6103      	str	r3, [r0, #16]
   143f8:	6144      	str	r4, [r0, #20]
   143fa:	b008      	add	sp, #32
   143fc:	bd10      	pop	{r4, pc}

000143fe <_ZN4core3fmt9Arguments6new_v117hdc09c81c55dd3f27E>:
   143fe:	b580      	push	{r7, lr}
   14400:	b086      	sub	sp, #24
   14402:	f8dd c020 	ldr.w	ip, [sp, #32]
   14406:	9102      	str	r1, [sp, #8]
   14408:	9203      	str	r2, [sp, #12]
   1440a:	9304      	str	r3, [sp, #16]
   1440c:	f8cd c014 	str.w	ip, [sp, #20]
   14410:	f04f 0e00 	mov.w	lr, #0
   14414:	f8cd e004 	str.w	lr, [sp, #4]
   14418:	f8cd e000 	str.w	lr, [sp]
   1441c:	f8cd e000 	str.w	lr, [sp]
   14420:	6001      	str	r1, [r0, #0]
   14422:	6042      	str	r2, [r0, #4]
   14424:	9900      	ldr	r1, [sp, #0]
   14426:	9a01      	ldr	r2, [sp, #4]
   14428:	6081      	str	r1, [r0, #8]
   1442a:	60c2      	str	r2, [r0, #12]
   1442c:	6103      	str	r3, [r0, #16]
   1442e:	f8c0 c014 	str.w	ip, [r0, #20]
   14432:	b006      	add	sp, #24
   14434:	bd80      	pop	{r7, pc}

00014436 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>:
   14436:	b580      	push	{r7, lr}
   14438:	b086      	sub	sp, #24
   1443a:	460a      	mov	r2, r1
   1443c:	4603      	mov	r3, r0
   1443e:	f88d 0014 	strb.w	r0, [sp, #20]
   14442:	f88d 1015 	strb.w	r1, [sp, #21]
   14446:	9203      	str	r2, [sp, #12]
   14448:	9302      	str	r3, [sp, #8]
   1444a:	f000 f865 	bl	14518 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>
   1444e:	9001      	str	r0, [sp, #4]
   14450:	9100      	str	r1, [sp, #0]
   14452:	e7ff      	b.n	14454 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x1e>
   14454:	9801      	ldr	r0, [sp, #4]
   14456:	f88d 0016 	strb.w	r0, [sp, #22]
   1445a:	9900      	ldr	r1, [sp, #0]
   1445c:	f001 0201 	and.w	r2, r1, #1
   14460:	f88d 2017 	strb.w	r2, [sp, #23]
   14464:	2a00      	cmp	r2, #0
   14466:	d107      	bne.n	14478 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x42>
   14468:	e7ff      	b.n	1446a <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x34>
   1446a:	9801      	ldr	r0, [sp, #4]
   1446c:	f88d 0011 	strb.w	r0, [sp, #17]
   14470:	2101      	movs	r1, #1
   14472:	f88d 1010 	strb.w	r1, [sp, #16]
   14476:	e003      	b.n	14480 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   14478:	2000      	movs	r0, #0
   1447a:	f88d 0010 	strb.w	r0, [sp, #16]
   1447e:	e7ff      	b.n	14480 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E+0x4a>
   14480:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14484:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14488:	b006      	add	sp, #24
   1448a:	bd80      	pop	{r7, pc}

0001448c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE>:
   1448c:	b082      	sub	sp, #8
   1448e:	460a      	mov	r2, r1
   14490:	4603      	mov	r3, r0
   14492:	f88d 0005 	strb.w	r0, [sp, #5]
   14496:	f88d 1006 	strb.w	r1, [sp, #6]
   1449a:	4408      	add	r0, r1
   1449c:	f88d 0007 	strb.w	r0, [sp, #7]
   144a0:	f89d 0007 	ldrb.w	r0, [sp, #7]
   144a4:	9000      	str	r0, [sp, #0]
   144a6:	e7ff      	b.n	144a8 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17h36873c51bbd4f21cE+0x1c>
   144a8:	9800      	ldr	r0, [sp, #0]
   144aa:	b002      	add	sp, #8
   144ac:	4770      	bx	lr

000144ae <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E>:
   144ae:	b084      	sub	sp, #16
   144b0:	4602      	mov	r2, r0
   144b2:	f88d 0007 	strb.w	r0, [sp, #7]
   144b6:	9102      	str	r1, [sp, #8]
   144b8:	f001 0107 	and.w	r1, r1, #7
   144bc:	4088      	lsls	r0, r1
   144be:	f88d 000f 	strb.w	r0, [sp, #15]
   144c2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   144c6:	9000      	str	r0, [sp, #0]
   144c8:	e7ff      	b.n	144ca <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17hd4e34d1323470418E+0x1c>
   144ca:	9800      	ldr	r0, [sp, #0]
   144cc:	b004      	add	sp, #16
   144ce:	4770      	bx	lr

000144d0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E>:
   144d0:	b084      	sub	sp, #16
   144d2:	b2c2      	uxtb	r2, r0
   144d4:	4603      	mov	r3, r0
   144d6:	f88d 0007 	strb.w	r0, [sp, #7]
   144da:	9102      	str	r1, [sp, #8]
   144dc:	f001 0007 	and.w	r0, r1, #7
   144e0:	fa22 f000 	lsr.w	r0, r2, r0
   144e4:	f88d 000f 	strb.w	r0, [sp, #15]
   144e8:	f89d 000f 	ldrb.w	r0, [sp, #15]
   144ec:	9000      	str	r0, [sp, #0]
   144ee:	e7ff      	b.n	144f0 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17h0b64f2ebc21519c0E+0x20>
   144f0:	9800      	ldr	r0, [sp, #0]
   144f2:	b004      	add	sp, #16
   144f4:	4770      	bx	lr

000144f6 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E>:
   144f6:	b082      	sub	sp, #8
   144f8:	460a      	mov	r2, r1
   144fa:	4603      	mov	r3, r0
   144fc:	f88d 0005 	strb.w	r0, [sp, #5]
   14500:	f88d 1006 	strb.w	r1, [sp, #6]
   14504:	1a40      	subs	r0, r0, r1
   14506:	f88d 0007 	strb.w	r0, [sp, #7]
   1450a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1450e:	9000      	str	r0, [sp, #0]
   14510:	e7ff      	b.n	14512 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h84bf0bac3f755209E+0x1c>
   14512:	9800      	ldr	r0, [sp, #0]
   14514:	b002      	add	sp, #8
   14516:	4770      	bx	lr

00014518 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E>:
   14518:	b084      	sub	sp, #16
   1451a:	b2c2      	uxtb	r2, r0
   1451c:	460b      	mov	r3, r1
   1451e:	4684      	mov	ip, r0
   14520:	f88d 000a 	strb.w	r0, [sp, #10]
   14524:	f88d 100b 	strb.w	r1, [sp, #11]
   14528:	fa52 f081 	uxtab	r0, r2, r1
   1452c:	b2c1      	uxtb	r1, r0
   1452e:	1a09      	subs	r1, r1, r0
   14530:	bf18      	it	ne
   14532:	2101      	movne	r1, #1
   14534:	f88d 000c 	strb.w	r0, [sp, #12]
   14538:	f88d 100d 	strb.w	r1, [sp, #13]
   1453c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14540:	f89d 100d 	ldrb.w	r1, [sp, #13]
   14544:	9001      	str	r0, [sp, #4]
   14546:	9100      	str	r1, [sp, #0]
   14548:	e7ff      	b.n	1454a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h9deeb58ac32fcce2E+0x32>
   1454a:	9801      	ldr	r0, [sp, #4]
   1454c:	f88d 000e 	strb.w	r0, [sp, #14]
   14550:	9900      	ldr	r1, [sp, #0]
   14552:	f001 0201 	and.w	r2, r1, #1
   14556:	f88d 200f 	strb.w	r2, [sp, #15]
   1455a:	f88d 0008 	strb.w	r0, [sp, #8]
   1455e:	f88d 2009 	strb.w	r2, [sp, #9]
   14562:	f89d 0008 	ldrb.w	r0, [sp, #8]
   14566:	f89d 1009 	ldrb.w	r1, [sp, #9]
   1456a:	b004      	add	sp, #16
   1456c:	4770      	bx	lr

0001456e <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E>:
   1456e:	b580      	push	{r7, lr}
   14570:	b084      	sub	sp, #16
   14572:	b2ca      	uxtb	r2, r1
   14574:	b2c3      	uxtb	r3, r0
   14576:	468c      	mov	ip, r1
   14578:	4686      	mov	lr, r0
   1457a:	f88d 000a 	strb.w	r0, [sp, #10]
   1457e:	f88d 100b 	strb.w	r1, [sp, #11]
   14582:	1a98      	subs	r0, r3, r2
   14584:	b2c1      	uxtb	r1, r0
   14586:	1a09      	subs	r1, r1, r0
   14588:	bf18      	it	ne
   1458a:	2101      	movne	r1, #1
   1458c:	f88d 000c 	strb.w	r0, [sp, #12]
   14590:	f88d 100d 	strb.w	r1, [sp, #13]
   14594:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14598:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1459c:	9001      	str	r0, [sp, #4]
   1459e:	9100      	str	r1, [sp, #0]
   145a0:	e7ff      	b.n	145a2 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h08678e9b9db328d7E+0x34>
   145a2:	9801      	ldr	r0, [sp, #4]
   145a4:	f88d 000e 	strb.w	r0, [sp, #14]
   145a8:	9900      	ldr	r1, [sp, #0]
   145aa:	f001 0201 	and.w	r2, r1, #1
   145ae:	f88d 200f 	strb.w	r2, [sp, #15]
   145b2:	f88d 0008 	strb.w	r0, [sp, #8]
   145b6:	f88d 2009 	strb.w	r2, [sp, #9]
   145ba:	f89d 0008 	ldrb.w	r0, [sp, #8]
   145be:	f89d 1009 	ldrb.w	r1, [sp, #9]
   145c2:	b004      	add	sp, #16
   145c4:	bd80      	pop	{r7, pc}

000145c6 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E>:
   145c6:	b083      	sub	sp, #12
   145c8:	460a      	mov	r2, r1
   145ca:	4603      	mov	r3, r0
   145cc:	f8ad 0006 	strh.w	r0, [sp, #6]
   145d0:	f8ad 1008 	strh.w	r1, [sp, #8]
   145d4:	4408      	add	r0, r1
   145d6:	f8ad 000a 	strh.w	r0, [sp, #10]
   145da:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   145de:	9000      	str	r0, [sp, #0]
   145e0:	e7ff      	b.n	145e2 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hff14b3a4bb4b9934E+0x1c>
   145e2:	9800      	ldr	r0, [sp, #0]
   145e4:	b003      	add	sp, #12
   145e6:	4770      	bx	lr

000145e8 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E>:
   145e8:	b083      	sub	sp, #12
   145ea:	460a      	mov	r2, r1
   145ec:	4603      	mov	r3, r0
   145ee:	f8ad 0006 	strh.w	r0, [sp, #6]
   145f2:	f8ad 1008 	strh.w	r1, [sp, #8]
   145f6:	1a40      	subs	r0, r0, r1
   145f8:	f8ad 000a 	strh.w	r0, [sp, #10]
   145fc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   14600:	9000      	str	r0, [sp, #0]
   14602:	e7ff      	b.n	14604 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17h8805c0304f38d076E+0x1c>
   14604:	9800      	ldr	r0, [sp, #0]
   14606:	b003      	add	sp, #12
   14608:	4770      	bx	lr

0001460a <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE>:
   1460a:	b5b0      	push	{r4, r5, r7, lr}
   1460c:	b088      	sub	sp, #32
   1460e:	469c      	mov	ip, r3
   14610:	4696      	mov	lr, r2
   14612:	460c      	mov	r4, r1
   14614:	4605      	mov	r5, r0
   14616:	9103      	str	r1, [sp, #12]
   14618:	9002      	str	r0, [sp, #8]
   1461a:	9305      	str	r3, [sp, #20]
   1461c:	9204      	str	r2, [sp, #16]
   1461e:	1a80      	subs	r0, r0, r2
   14620:	eb61 0103 	sbc.w	r1, r1, r3
   14624:	9107      	str	r1, [sp, #28]
   14626:	9006      	str	r0, [sp, #24]
   14628:	9806      	ldr	r0, [sp, #24]
   1462a:	9907      	ldr	r1, [sp, #28]
   1462c:	9001      	str	r0, [sp, #4]
   1462e:	9100      	str	r1, [sp, #0]
   14630:	e7ff      	b.n	14632 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h91461b58eecc5a2aE+0x28>
   14632:	9801      	ldr	r0, [sp, #4]
   14634:	9900      	ldr	r1, [sp, #0]
   14636:	b008      	add	sp, #32
   14638:	bdb0      	pop	{r4, r5, r7, pc}

0001463a <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hacacd06b217cf676E>:
    fn le(&self, other: &LevelFilter) -> bool {
   1463a:	b082      	sub	sp, #8
   1463c:	9000      	str	r0, [sp, #0]
   1463e:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   14640:	6800      	ldr	r0, [r0, #0]
   14642:	6809      	ldr	r1, [r1, #0]
   14644:	2200      	movs	r2, #0
   14646:	4288      	cmp	r0, r1
   14648:	bf98      	it	ls
   1464a:	2201      	movls	r2, #1
    }
   1464c:	4610      	mov	r0, r2
   1464e:	b002      	add	sp, #8
   14650:	4770      	bx	lr

00014652 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h32b550ec8df70192E>:
   14652:	b081      	sub	sp, #4
   14654:	4601      	mov	r1, r0
   14656:	f88d 0003 	strb.w	r0, [sp, #3]
   1465a:	b2c0      	uxtb	r0, r0
   1465c:	b001      	add	sp, #4
   1465e:	4770      	bx	lr

00014660 <_ZN4core3mem4swap17h206518364108b51fE>:
   14660:	b580      	push	{r7, lr}
   14662:	b082      	sub	sp, #8
   14664:	9000      	str	r0, [sp, #0]
   14666:	9101      	str	r1, [sp, #4]
   14668:	f000 fb8d 	bl	14d86 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>
   1466c:	e7ff      	b.n	1466e <_ZN4core3mem4swap17h206518364108b51fE+0xe>
   1466e:	b002      	add	sp, #8
   14670:	bd80      	pop	{r7, pc}

00014672 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE>:
   14672:	b580      	push	{r7, lr}
   14674:	b088      	sub	sp, #32
   14676:	9004      	str	r0, [sp, #16]
   14678:	9105      	str	r1, [sp, #20]
   1467a:	9206      	str	r2, [sp, #24]
   1467c:	9307      	str	r3, [sp, #28]
   1467e:	9003      	str	r0, [sp, #12]
   14680:	4610      	mov	r0, r2
   14682:	9102      	str	r1, [sp, #8]
   14684:	4619      	mov	r1, r3
   14686:	9a03      	ldr	r2, [sp, #12]
   14688:	9b02      	ldr	r3, [sp, #8]
   1468a:	f7fc fcf3 	bl	11074 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h4f3191a60c034b5fE>
   1468e:	9001      	str	r0, [sp, #4]
   14690:	9100      	str	r1, [sp, #0]
   14692:	e7ff      	b.n	14694 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17h7f385561cf81b0ffE+0x22>
   14694:	9801      	ldr	r0, [sp, #4]
   14696:	9900      	ldr	r1, [sp, #0]
   14698:	b008      	add	sp, #32
   1469a:	bd80      	pop	{r7, pc}

0001469c <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17hc283e26c72ff63bbE>:
   1469c:	b082      	sub	sp, #8
   1469e:	9000      	str	r0, [sp, #0]
   146a0:	9101      	str	r1, [sp, #4]
   146a2:	7800      	ldrb	r0, [r0, #0]
   146a4:	7809      	ldrb	r1, [r1, #0]
   146a6:	2200      	movs	r2, #0
   146a8:	4288      	cmp	r0, r1
   146aa:	bf38      	it	cc
   146ac:	2201      	movcc	r2, #1
   146ae:	4610      	mov	r0, r2
   146b0:	b002      	add	sp, #8
   146b2:	4770      	bx	lr

000146b4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE>:
   146b4:	b580      	push	{r7, lr}
   146b6:	b088      	sub	sp, #32
   146b8:	9005      	str	r0, [sp, #20]
   146ba:	9106      	str	r1, [sp, #24]
   146bc:	9002      	str	r0, [sp, #8]
   146be:	4608      	mov	r0, r1
   146c0:	f000 fc3c 	bl	14f3c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>
   146c4:	f88d 1011 	strb.w	r1, [sp, #17]
   146c8:	f88d 0010 	strb.w	r0, [sp, #16]
   146cc:	e7ff      	b.n	146ce <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x1a>
   146ce:	f89d 0010 	ldrb.w	r0, [sp, #16]
   146d2:	07c1      	lsls	r1, r0, #31
   146d4:	2900      	cmp	r1, #0
   146d6:	d005      	beq.n	146e4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x30>
   146d8:	e7ff      	b.n	146da <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x26>
   146da:	2000      	movs	r0, #0
   146dc:	f88d 000c 	strb.w	r0, [sp, #12]
   146e0:	e011      	b.n	14706 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   146e2:	defe      	udf	#254	; 0xfe
   146e4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   146e8:	f88d 001f 	strb.w	r0, [sp, #31]
   146ec:	9902      	ldr	r1, [sp, #8]
   146ee:	780a      	ldrb	r2, [r1, #0]
   146f0:	9001      	str	r0, [sp, #4]
   146f2:	4610      	mov	r0, r2
   146f4:	9901      	ldr	r1, [sp, #4]
   146f6:	f7ff fe9e 	bl	14436 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17h16a667af388462c4E>
   146fa:	f88d 100d 	strb.w	r1, [sp, #13]
   146fe:	f88d 000c 	strb.w	r0, [sp, #12]
   14702:	e7ff      	b.n	14704 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x50>
   14704:	e7ff      	b.n	14706 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17h6da5a6530c8e59dbE+0x52>
   14706:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1470a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   1470e:	b008      	add	sp, #32
   14710:	bd80      	pop	{r7, pc}

00014712 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h130fbb0563cc5e62E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   14712:	b580      	push	{r7, lr}
   14714:	b088      	sub	sp, #32
   14716:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14718:	1d01      	adds	r1, r0, #4
   1471a:	9106      	str	r1, [sp, #24]
   1471c:	9107      	str	r1, [sp, #28]
   1471e:	9004      	str	r0, [sp, #16]
   14720:	9103      	str	r1, [sp, #12]
   14722:	e7ff      	b.n	14724 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h130fbb0563cc5e62E+0x12>
   14724:	9804      	ldr	r0, [sp, #16]
   14726:	6801      	ldr	r1, [r0, #0]
   14728:	9803      	ldr	r0, [sp, #12]
   1472a:	f7fc fc4f 	bl	10fcc <_ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE>
   1472e:	9002      	str	r0, [sp, #8]
   14730:	9101      	str	r1, [sp, #4]
   14732:	e7ff      	b.n	14734 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h130fbb0563cc5e62E+0x22>
    }
   14734:	9802      	ldr	r0, [sp, #8]
   14736:	9901      	ldr	r1, [sp, #4]
   14738:	b008      	add	sp, #32
   1473a:	bd80      	pop	{r7, pc}

0001473c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1473c:	b580      	push	{r7, lr}
   1473e:	b088      	sub	sp, #32
   14740:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   14742:	1d01      	adds	r1, r0, #4
   14744:	9106      	str	r1, [sp, #24]
   14746:	9107      	str	r1, [sp, #28]
   14748:	9004      	str	r0, [sp, #16]
   1474a:	9103      	str	r1, [sp, #12]
   1474c:	e7ff      	b.n	1474e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   1474e:	9804      	ldr	r0, [sp, #16]
   14750:	6801      	ldr	r1, [r0, #0]
   14752:	9803      	ldr	r0, [sp, #12]
   14754:	f7fc fc3a 	bl	10fcc <_ZN4core5slice18from_raw_parts_mut17hd4ae3c23f8b8324bE>
   14758:	9002      	str	r0, [sp, #8]
   1475a:	9101      	str	r1, [sp, #4]
   1475c:	e7ff      	b.n	1475e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   1475e:	9802      	ldr	r0, [sp, #8]
   14760:	9901      	ldr	r1, [sp, #4]
   14762:	b008      	add	sp, #32
   14764:	bd80      	pop	{r7, pc}

00014766 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   14766:	b580      	push	{r7, lr}
   14768:	b08a      	sub	sp, #40	; 0x28
   1476a:	460a      	mov	r2, r1
   1476c:	9006      	str	r0, [sp, #24]
   1476e:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   14772:	1d01      	adds	r1, r0, #4
   14774:	9108      	str	r1, [sp, #32]
   14776:	9109      	str	r1, [sp, #36]	; 0x24
   14778:	9005      	str	r0, [sp, #20]
   1477a:	9204      	str	r2, [sp, #16]
   1477c:	9103      	str	r1, [sp, #12]
   1477e:	e7ff      	b.n	14780 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E+0x1a>
            .add(self.len)
   14780:	9805      	ldr	r0, [sp, #20]
   14782:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   14784:	9803      	ldr	r0, [sp, #12]
   14786:	f7fc ffa4 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1478a:	9002      	str	r0, [sp, #8]
   1478c:	e7ff      	b.n	1478e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E+0x28>
   1478e:	9802      	ldr	r0, [sp, #8]
   14790:	9904      	ldr	r1, [sp, #16]
   14792:	f000 f994 	bl	14abe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   14796:	e7ff      	b.n	14798 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E+0x32>
        self.len += 1;
   14798:	9805      	ldr	r0, [sp, #20]
   1479a:	6801      	ldr	r1, [r0, #0]
   1479c:	1c4a      	adds	r2, r1, #1
   1479e:	4613      	mov	r3, r2
   147a0:	428a      	cmp	r2, r1
   147a2:	9301      	str	r3, [sp, #4]
   147a4:	d305      	bcc.n	147b2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E+0x4c>
   147a6:	e7ff      	b.n	147a8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E+0x42>
   147a8:	9801      	ldr	r0, [sp, #4]
   147aa:	9905      	ldr	r1, [sp, #20]
   147ac:	6008      	str	r0, [r1, #0]
    }
   147ae:	b00a      	add	sp, #40	; 0x28
   147b0:	bd80      	pop	{r7, pc}
        self.len += 1;
   147b2:	f24e 0000 	movw	r0, #57344	; 0xe000
   147b6:	f2c0 0001 	movt	r0, #1
   147ba:	f64d 72e8 	movw	r2, #57320	; 0xdfe8
   147be:	f2c0 0201 	movt	r2, #1
   147c2:	211c      	movs	r1, #28
   147c4:	f000 fcca 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   147c8:	defe      	udf	#254	; 0xfe

000147ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   147ca:	b580      	push	{r7, lr}
   147cc:	b08a      	sub	sp, #40	; 0x28
   147ce:	460a      	mov	r2, r1
   147d0:	9006      	str	r0, [sp, #24]
   147d2:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   147d6:	1d01      	adds	r1, r0, #4
   147d8:	9108      	str	r1, [sp, #32]
   147da:	9109      	str	r1, [sp, #36]	; 0x24
   147dc:	9005      	str	r0, [sp, #20]
   147de:	9204      	str	r2, [sp, #16]
   147e0:	9103      	str	r1, [sp, #12]
   147e2:	e7ff      	b.n	147e4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   147e4:	9805      	ldr	r0, [sp, #20]
   147e6:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   147e8:	9803      	ldr	r0, [sp, #12]
   147ea:	f7fc ff72 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   147ee:	9002      	str	r0, [sp, #8]
   147f0:	e7ff      	b.n	147f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   147f2:	9802      	ldr	r0, [sp, #8]
   147f4:	9904      	ldr	r1, [sp, #16]
   147f6:	f000 f962 	bl	14abe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   147fa:	e7ff      	b.n	147fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   147fc:	9805      	ldr	r0, [sp, #20]
   147fe:	6801      	ldr	r1, [r0, #0]
   14800:	1c4a      	adds	r2, r1, #1
   14802:	4613      	mov	r3, r2
   14804:	428a      	cmp	r2, r1
   14806:	9301      	str	r3, [sp, #4]
   14808:	d305      	bcc.n	14816 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   1480a:	e7ff      	b.n	1480c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   1480c:	9801      	ldr	r0, [sp, #4]
   1480e:	9905      	ldr	r1, [sp, #20]
   14810:	6008      	str	r0, [r1, #0]
    }
   14812:	b00a      	add	sp, #40	; 0x28
   14814:	bd80      	pop	{r7, pc}
        self.len += 1;
   14816:	f24e 0000 	movw	r0, #57344	; 0xe000
   1481a:	f2c0 0001 	movt	r0, #1
   1481e:	f64d 72e8 	movw	r2, #57320	; 0xdfe8
   14822:	f2c0 0201 	movt	r2, #1
   14826:	211c      	movs	r1, #28
   14828:	f000 fc98 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1482c:	defe      	udf	#254	; 0xfe

0001482e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1482e:	b580      	push	{r7, lr}
   14830:	b094      	sub	sp, #80	; 0x50
   14832:	900e      	str	r0, [sp, #56]	; 0x38
   14834:	910f      	str	r1, [sp, #60]	; 0x3c
   14836:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   14838:	6803      	ldr	r3, [r0, #0]
   1483a:	9009      	str	r0, [sp, #36]	; 0x24
   1483c:	4608      	mov	r0, r1
   1483e:	9108      	str	r1, [sp, #32]
   14840:	4611      	mov	r1, r2
   14842:	9207      	str	r2, [sp, #28]
   14844:	9306      	str	r3, [sp, #24]
   14846:	f7fc ffd4 	bl	117f2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   1484a:	9005      	str	r0, [sp, #20]
   1484c:	e7ff      	b.n	1484e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x20>
   1484e:	9806      	ldr	r0, [sp, #24]
   14850:	9905      	ldr	r1, [sp, #20]
   14852:	1842      	adds	r2, r0, r1
   14854:	4613      	mov	r3, r2
   14856:	4282      	cmp	r2, r0
   14858:	9304      	str	r3, [sp, #16]
   1485a:	d33f      	bcc.n	148dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0xae>
   1485c:	e7ff      	b.n	1485e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x30>
   1485e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14860:	f000 f8ad 	bl	149be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h5acc6f9d6d8ec673E>
   14864:	9003      	str	r0, [sp, #12]
   14866:	e7ff      	b.n	14868 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x3a>
   14868:	9804      	ldr	r0, [sp, #16]
   1486a:	9903      	ldr	r1, [sp, #12]
   1486c:	4288      	cmp	r0, r1
   1486e:	d807      	bhi.n	14880 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x52>
   14870:	e7ff      	b.n	14872 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x44>
            for elem in other {
   14872:	9808      	ldr	r0, [sp, #32]
   14874:	9907      	ldr	r1, [sp, #28]
   14876:	f7f4 faf6 	bl	8e66 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   1487a:	9002      	str	r0, [sp, #8]
   1487c:	9101      	str	r1, [sp, #4]
   1487e:	e003      	b.n	14888 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x5a>
   14880:	2001      	movs	r0, #1
            Err(())
   14882:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   14886:	e025      	b.n	148d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0xa6>
            for elem in other {
   14888:	9802      	ldr	r0, [sp, #8]
   1488a:	900b      	str	r0, [sp, #44]	; 0x2c
   1488c:	9901      	ldr	r1, [sp, #4]
   1488e:	910c      	str	r1, [sp, #48]	; 0x30
   14890:	e7ff      	b.n	14892 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x64>
   14892:	a80b      	add	r0, sp, #44	; 0x2c
   14894:	f7fc fca8 	bl	111e8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   14898:	900d      	str	r0, [sp, #52]	; 0x34
   1489a:	e7ff      	b.n	1489c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x6e>
   1489c:	980d      	ldr	r0, [sp, #52]	; 0x34
   1489e:	2800      	cmp	r0, #0
   148a0:	4601      	mov	r1, r0
   148a2:	bf18      	it	ne
   148a4:	2101      	movne	r1, #1
   148a6:	2800      	cmp	r0, #0
   148a8:	d001      	beq.n	148ae <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x80>
   148aa:	e7ff      	b.n	148ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x7e>
   148ac:	e004      	b.n	148b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x8a>
   148ae:	2000      	movs	r0, #0
            Ok(())
   148b0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   148b4:	e00e      	b.n	148d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0xa6>
            for elem in other {
   148b6:	defe      	udf	#254	; 0xfe
   148b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   148ba:	9011      	str	r0, [sp, #68]	; 0x44
   148bc:	9012      	str	r0, [sp, #72]	; 0x48
   148be:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   148c0:	f000 f909 	bl	14ad6 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   148c4:	9000      	str	r0, [sp, #0]
   148c6:	e7ff      	b.n	148c8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x9a>
   148c8:	9809      	ldr	r0, [sp, #36]	; 0x24
   148ca:	9900      	ldr	r1, [sp, #0]
   148cc:	f7ff ff4b 	bl	14766 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h0364fcff8f499c85E>
   148d0:	e7ff      	b.n	148d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0xa4>
            for elem in other {
   148d2:	e7de      	b.n	14892 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h4eedb637bdc29da6E+0x64>
    }
   148d4:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   148d8:	b014      	add	sp, #80	; 0x50
   148da:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   148dc:	f24e 0000 	movw	r0, #57344	; 0xe000
   148e0:	f2c0 0001 	movt	r0, #1
   148e4:	f24e 021c 	movw	r2, #57372	; 0xe01c
   148e8:	f2c0 0201 	movt	r2, #1
   148ec:	211c      	movs	r1, #28
   148ee:	f000 fc35 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   148f2:	defe      	udf	#254	; 0xfe

000148f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   148f4:	b580      	push	{r7, lr}
   148f6:	b088      	sub	sp, #32
   148f8:	460a      	mov	r2, r1
   148fa:	9006      	str	r0, [sp, #24]
   148fc:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   14900:	6801      	ldr	r1, [r0, #0]
   14902:	9004      	str	r0, [sp, #16]
   14904:	9203      	str	r2, [sp, #12]
   14906:	9102      	str	r1, [sp, #8]
   14908:	f000 f863 	bl	149d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   1490c:	9001      	str	r0, [sp, #4]
   1490e:	e7ff      	b.n	14910 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   14910:	9802      	ldr	r0, [sp, #8]
   14912:	9901      	ldr	r1, [sp, #4]
   14914:	4288      	cmp	r0, r1
   14916:	d307      	bcc.n	14928 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   14918:	e7ff      	b.n	1491a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   1491a:	9803      	ldr	r0, [sp, #12]
   1491c:	f88d 0015 	strb.w	r0, [sp, #21]
   14920:	2101      	movs	r1, #1
   14922:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   14926:	e008      	b.n	1493a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   14928:	9804      	ldr	r0, [sp, #16]
   1492a:	9903      	ldr	r1, [sp, #12]
   1492c:	f7ff ff4d 	bl	147ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   14930:	e7ff      	b.n	14932 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   14932:	2000      	movs	r0, #0
            Ok(())
   14934:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   14938:	e7ff      	b.n	1493a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   1493a:	f89d 0014 	ldrb.w	r0, [sp, #20]
   1493e:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14942:	b008      	add	sp, #32
   14944:	bd80      	pop	{r7, pc}

00014946 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   14946:	b580      	push	{r7, lr}
   14948:	b082      	sub	sp, #8
   1494a:	9001      	str	r0, [sp, #4]
   1494c:	2100      	movs	r1, #0
        self.truncate(0);
   1494e:	f000 f84a 	bl	149e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   14952:	e7ff      	b.n	14954 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   14954:	b002      	add	sp, #8
   14956:	bd80      	pop	{r7, pc}

00014958 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17hfb0b120a86d4002aE>:
    pub(crate) fn clear(&mut self) {
   14958:	b580      	push	{r7, lr}
   1495a:	b082      	sub	sp, #8
   1495c:	9001      	str	r0, [sp, #4]
   1495e:	2100      	movs	r1, #0
        self.truncate(0);
   14960:	f000 f877 	bl	14a52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E>
   14964:	e7ff      	b.n	14966 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17hfb0b120a86d4002aE+0xe>
    }
   14966:	b002      	add	sp, #8
   14968:	bd80      	pop	{r7, pc}

0001496a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1496a:	b580      	push	{r7, lr}
   1496c:	b088      	sub	sp, #32
   1496e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   14970:	1d01      	adds	r1, r0, #4
   14972:	9106      	str	r1, [sp, #24]
   14974:	9107      	str	r1, [sp, #28]
   14976:	9004      	str	r0, [sp, #16]
   14978:	9103      	str	r1, [sp, #12]
   1497a:	e7ff      	b.n	1497c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   1497c:	9804      	ldr	r0, [sp, #16]
   1497e:	6801      	ldr	r1, [r0, #0]
   14980:	9803      	ldr	r0, [sp, #12]
   14982:	f7fd fb4a 	bl	1201a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   14986:	9002      	str	r0, [sp, #8]
   14988:	9101      	str	r1, [sp, #4]
   1498a:	e7ff      	b.n	1498c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   1498c:	9802      	ldr	r0, [sp, #8]
   1498e:	9901      	ldr	r1, [sp, #4]
   14990:	b008      	add	sp, #32
   14992:	bd80      	pop	{r7, pc}

00014994 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hc3941f5f2cf5d6d6E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   14994:	b580      	push	{r7, lr}
   14996:	b088      	sub	sp, #32
   14998:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1499a:	1d01      	adds	r1, r0, #4
   1499c:	9106      	str	r1, [sp, #24]
   1499e:	9107      	str	r1, [sp, #28]
   149a0:	9004      	str	r0, [sp, #16]
   149a2:	9103      	str	r1, [sp, #12]
   149a4:	e7ff      	b.n	149a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hc3941f5f2cf5d6d6E+0x12>
   149a6:	9804      	ldr	r0, [sp, #16]
   149a8:	6801      	ldr	r1, [r0, #0]
   149aa:	9803      	ldr	r0, [sp, #12]
   149ac:	f7fd fb35 	bl	1201a <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   149b0:	9002      	str	r0, [sp, #8]
   149b2:	9101      	str	r1, [sp, #4]
   149b4:	e7ff      	b.n	149b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hc3941f5f2cf5d6d6E+0x22>
    }
   149b6:	9802      	ldr	r0, [sp, #8]
   149b8:	9901      	ldr	r1, [sp, #4]
   149ba:	b008      	add	sp, #32
   149bc:	bd80      	pop	{r7, pc}

000149be <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h5acc6f9d6d8ec673E>:
    pub(crate) fn capacity(&self) -> usize {
   149be:	b580      	push	{r7, lr}
   149c0:	b082      	sub	sp, #8
   149c2:	9001      	str	r0, [sp, #4]
        N::to_usize()
   149c4:	f000 f9ac 	bl	14d20 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>
   149c8:	9000      	str	r0, [sp, #0]
   149ca:	e7ff      	b.n	149cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h5acc6f9d6d8ec673E+0xe>
    }
   149cc:	9800      	ldr	r0, [sp, #0]
   149ce:	b002      	add	sp, #8
   149d0:	bd80      	pop	{r7, pc}

000149d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   149d2:	b580      	push	{r7, lr}
   149d4:	b082      	sub	sp, #8
   149d6:	9001      	str	r0, [sp, #4]
        N::to_usize()
   149d8:	f000 f942 	bl	14c60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   149dc:	9000      	str	r0, [sp, #0]
   149de:	e7ff      	b.n	149e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   149e0:	9800      	ldr	r0, [sp, #0]
   149e2:	b002      	add	sp, #8
   149e4:	bd80      	pop	{r7, pc}

000149e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   149e6:	b580      	push	{r7, lr}
   149e8:	b08a      	sub	sp, #40	; 0x28
   149ea:	9007      	str	r0, [sp, #28]
   149ec:	9108      	str	r1, [sp, #32]
   149ee:	9106      	str	r1, [sp, #24]
   149f0:	9005      	str	r0, [sp, #20]
   149f2:	e7ff      	b.n	149f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   149f4:	9805      	ldr	r0, [sp, #20]
   149f6:	6801      	ldr	r1, [r0, #0]
   149f8:	9a06      	ldr	r2, [sp, #24]
   149fa:	428a      	cmp	r2, r1
   149fc:	d302      	bcc.n	14a04 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   149fe:	e7ff      	b.n	14a00 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   14a00:	b00a      	add	sp, #40	; 0x28
   14a02:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14a04:	9805      	ldr	r0, [sp, #20]
   14a06:	6801      	ldr	r1, [r0, #0]
   14a08:	1e4a      	subs	r2, r1, #1
   14a0a:	2901      	cmp	r1, #1
   14a0c:	9204      	str	r2, [sp, #16]
   14a0e:	d314      	bcc.n	14a3a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   14a10:	e7ff      	b.n	14a12 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   14a12:	9804      	ldr	r0, [sp, #16]
   14a14:	9905      	ldr	r1, [sp, #20]
   14a16:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14a18:	680a      	ldr	r2, [r1, #0]
   14a1a:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14a1c:	4608      	mov	r0, r1
   14a1e:	9203      	str	r2, [sp, #12]
   14a20:	f7ff fe8c 	bl	1473c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   14a24:	9002      	str	r0, [sp, #8]
   14a26:	9101      	str	r1, [sp, #4]
   14a28:	e7ff      	b.n	14a2a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   14a2a:	9802      	ldr	r0, [sp, #8]
   14a2c:	9901      	ldr	r1, [sp, #4]
   14a2e:	9a03      	ldr	r2, [sp, #12]
   14a30:	f7fc fecd 	bl	117ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14a34:	e7ff      	b.n	14a36 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   14a36:	e7ff      	b.n	14a38 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   14a38:	e7dc      	b.n	149f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   14a3a:	f24e 0040 	movw	r0, #57408	; 0xe040
   14a3e:	f2c0 0001 	movt	r0, #1
   14a42:	f24e 022c 	movw	r2, #57388	; 0xe02c
   14a46:	f2c0 0201 	movt	r2, #1
   14a4a:	2121      	movs	r1, #33	; 0x21
   14a4c:	f000 fb86 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14a50:	defe      	udf	#254	; 0xfe

00014a52 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   14a52:	b580      	push	{r7, lr}
   14a54:	b08a      	sub	sp, #40	; 0x28
   14a56:	9007      	str	r0, [sp, #28]
   14a58:	9108      	str	r1, [sp, #32]
   14a5a:	9106      	str	r1, [sp, #24]
   14a5c:	9005      	str	r0, [sp, #20]
   14a5e:	e7ff      	b.n	14a60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0xe>
            while len < self.len {
   14a60:	9805      	ldr	r0, [sp, #20]
   14a62:	6801      	ldr	r1, [r0, #0]
   14a64:	9a06      	ldr	r2, [sp, #24]
   14a66:	428a      	cmp	r2, r1
   14a68:	d302      	bcc.n	14a70 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x1e>
   14a6a:	e7ff      	b.n	14a6c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x1a>
    }
   14a6c:	b00a      	add	sp, #40	; 0x28
   14a6e:	bd80      	pop	{r7, pc}
                self.len -= 1;
   14a70:	9805      	ldr	r0, [sp, #20]
   14a72:	6801      	ldr	r1, [r0, #0]
   14a74:	1e4a      	subs	r2, r1, #1
   14a76:	2901      	cmp	r1, #1
   14a78:	9204      	str	r2, [sp, #16]
   14a7a:	d314      	bcc.n	14aa6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x54>
   14a7c:	e7ff      	b.n	14a7e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x2c>
   14a7e:	9804      	ldr	r0, [sp, #16]
   14a80:	9905      	ldr	r1, [sp, #20]
   14a82:	6008      	str	r0, [r1, #0]
                let len = self.len;
   14a84:	680a      	ldr	r2, [r1, #0]
   14a86:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   14a88:	4608      	mov	r0, r1
   14a8a:	9203      	str	r2, [sp, #12]
   14a8c:	f7ff fe41 	bl	14712 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h130fbb0563cc5e62E>
   14a90:	9002      	str	r0, [sp, #8]
   14a92:	9101      	str	r1, [sp, #4]
   14a94:	e7ff      	b.n	14a96 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x44>
   14a96:	9802      	ldr	r0, [sp, #8]
   14a98:	9901      	ldr	r1, [sp, #4]
   14a9a:	9a03      	ldr	r2, [sp, #12]
   14a9c:	f7fc fe97 	bl	117ce <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   14aa0:	e7ff      	b.n	14aa2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x50>
   14aa2:	e7ff      	b.n	14aa4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0x52>
            while len < self.len {
   14aa4:	e7dc      	b.n	14a60 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he355888be6287a98E+0xe>
                self.len -= 1;
   14aa6:	f24e 0040 	movw	r0, #57408	; 0xe040
   14aaa:	f2c0 0001 	movt	r0, #1
   14aae:	f24e 022c 	movw	r2, #57388	; 0xe02c
   14ab2:	f2c0 0201 	movt	r2, #1
   14ab6:	2121      	movs	r1, #33	; 0x21
   14ab8:	f000 fb50 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14abc:	defe      	udf	#254	; 0xfe

00014abe <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   14abe:	b580      	push	{r7, lr}
   14ac0:	b084      	sub	sp, #16
   14ac2:	460a      	mov	r2, r1
   14ac4:	9002      	str	r0, [sp, #8]
   14ac6:	f88d 100f 	strb.w	r1, [sp, #15]
   14aca:	9201      	str	r2, [sp, #4]
   14acc:	f7fd fb66 	bl	1219c <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14ad0:	e7ff      	b.n	14ad2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   14ad2:	b004      	add	sp, #16
   14ad4:	bd80      	pop	{r7, pc}

00014ad6 <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   14ad6:	b081      	sub	sp, #4
   14ad8:	9000      	str	r0, [sp, #0]
   14ada:	7800      	ldrb	r0, [r0, #0]
   14adc:	b001      	add	sp, #4
   14ade:	4770      	bx	lr

00014ae0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   14ae0:	b580      	push	{r7, lr}
   14ae2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14ae4:	f000 fa43 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14ae8:	9003      	str	r0, [sp, #12]
   14aea:	e7ff      	b.n	14aec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   14aec:	9803      	ldr	r0, [sp, #12]
   14aee:	f000 fa44 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14af2:	9002      	str	r0, [sp, #8]
   14af4:	e7ff      	b.n	14af6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   14af6:	f000 f8b3 	bl	14c60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   14afa:	9001      	str	r0, [sp, #4]
   14afc:	e7ff      	b.n	14afe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   14afe:	9801      	ldr	r0, [sp, #4]
   14b00:	0041      	lsls	r1, r0, #1
   14b02:	9100      	str	r1, [sp, #0]
   14b04:	e7ff      	b.n	14b06 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   14b06:	9802      	ldr	r0, [sp, #8]
   14b08:	9900      	ldr	r1, [sp, #0]
   14b0a:	4308      	orrs	r0, r1
    }
   14b0c:	b004      	add	sp, #16
   14b0e:	bd80      	pop	{r7, pc}

00014b10 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   14b10:	b580      	push	{r7, lr}
   14b12:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b14:	f000 fa2b 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b18:	9003      	str	r0, [sp, #12]
   14b1a:	e7ff      	b.n	14b1c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   14b1c:	9803      	ldr	r0, [sp, #12]
   14b1e:	f000 fa2c 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b22:	9002      	str	r0, [sp, #8]
   14b24:	e7ff      	b.n	14b26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   14b26:	f000 f853 	bl	14bd0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   14b2a:	9001      	str	r0, [sp, #4]
   14b2c:	e7ff      	b.n	14b2e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   14b2e:	9801      	ldr	r0, [sp, #4]
   14b30:	0041      	lsls	r1, r0, #1
   14b32:	9100      	str	r1, [sp, #0]
   14b34:	e7ff      	b.n	14b36 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   14b36:	9802      	ldr	r0, [sp, #8]
   14b38:	9900      	ldr	r1, [sp, #0]
   14b3a:	4308      	orrs	r0, r1
    }
   14b3c:	b004      	add	sp, #16
   14b3e:	bd80      	pop	{r7, pc}

00014b40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   14b40:	b580      	push	{r7, lr}
   14b42:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b44:	f000 fa13 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b48:	9003      	str	r0, [sp, #12]
   14b4a:	e7ff      	b.n	14b4c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   14b4c:	9803      	ldr	r0, [sp, #12]
   14b4e:	f000 fa14 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b52:	9002      	str	r0, [sp, #8]
   14b54:	e7ff      	b.n	14b56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   14b56:	f000 f80b 	bl	14b70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   14b5a:	9001      	str	r0, [sp, #4]
   14b5c:	e7ff      	b.n	14b5e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   14b5e:	9801      	ldr	r0, [sp, #4]
   14b60:	0041      	lsls	r1, r0, #1
   14b62:	9100      	str	r1, [sp, #0]
   14b64:	e7ff      	b.n	14b66 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   14b66:	9802      	ldr	r0, [sp, #8]
   14b68:	9900      	ldr	r1, [sp, #0]
   14b6a:	4308      	orrs	r0, r1
    }
   14b6c:	b004      	add	sp, #16
   14b6e:	bd80      	pop	{r7, pc}

00014b70 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   14b70:	b580      	push	{r7, lr}
   14b72:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14b74:	f000 f9fb 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14b78:	9003      	str	r0, [sp, #12]
   14b7a:	e7ff      	b.n	14b7c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   14b7c:	9803      	ldr	r0, [sp, #12]
   14b7e:	f000 f9fc 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14b82:	9002      	str	r0, [sp, #8]
   14b84:	e7ff      	b.n	14b86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   14b86:	f000 f89b 	bl	14cc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   14b8a:	9001      	str	r0, [sp, #4]
   14b8c:	e7ff      	b.n	14b8e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   14b8e:	9801      	ldr	r0, [sp, #4]
   14b90:	0041      	lsls	r1, r0, #1
   14b92:	9100      	str	r1, [sp, #0]
   14b94:	e7ff      	b.n	14b96 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   14b96:	9802      	ldr	r0, [sp, #8]
   14b98:	9900      	ldr	r1, [sp, #0]
   14b9a:	4308      	orrs	r0, r1
    }
   14b9c:	b004      	add	sp, #16
   14b9e:	bd80      	pop	{r7, pc}

00014ba0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   14ba0:	b580      	push	{r7, lr}
   14ba2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14ba4:	f000 f9e3 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14ba8:	9003      	str	r0, [sp, #12]
   14baa:	e7ff      	b.n	14bac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   14bac:	9803      	ldr	r0, [sp, #12]
   14bae:	f000 f9e4 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14bb2:	9002      	str	r0, [sp, #8]
   14bb4:	e7ff      	b.n	14bb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   14bb6:	f7ff ff93 	bl	14ae0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   14bba:	9001      	str	r0, [sp, #4]
   14bbc:	e7ff      	b.n	14bbe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   14bbe:	9801      	ldr	r0, [sp, #4]
   14bc0:	0041      	lsls	r1, r0, #1
   14bc2:	9100      	str	r1, [sp, #0]
   14bc4:	e7ff      	b.n	14bc6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   14bc6:	9802      	ldr	r0, [sp, #8]
   14bc8:	9900      	ldr	r1, [sp, #0]
   14bca:	4308      	orrs	r0, r1
    }
   14bcc:	b004      	add	sp, #16
   14bce:	bd80      	pop	{r7, pc}

00014bd0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   14bd0:	b580      	push	{r7, lr}
   14bd2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14bd4:	f000 f9cb 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14bd8:	9003      	str	r0, [sp, #12]
   14bda:	e7ff      	b.n	14bdc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   14bdc:	9803      	ldr	r0, [sp, #12]
   14bde:	f000 f9cc 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14be2:	9002      	str	r0, [sp, #8]
   14be4:	e7ff      	b.n	14be6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   14be6:	f000 f823 	bl	14c30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   14bea:	9001      	str	r0, [sp, #4]
   14bec:	e7ff      	b.n	14bee <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   14bee:	9801      	ldr	r0, [sp, #4]
   14bf0:	0041      	lsls	r1, r0, #1
   14bf2:	9100      	str	r1, [sp, #0]
   14bf4:	e7ff      	b.n	14bf6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   14bf6:	9802      	ldr	r0, [sp, #8]
   14bf8:	9900      	ldr	r1, [sp, #0]
   14bfa:	4308      	orrs	r0, r1
    }
   14bfc:	b004      	add	sp, #16
   14bfe:	bd80      	pop	{r7, pc}

00014c00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   14c00:	b580      	push	{r7, lr}
   14c02:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c04:	f000 f9b3 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c08:	9003      	str	r0, [sp, #12]
   14c0a:	e7ff      	b.n	14c0c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   14c0c:	9803      	ldr	r0, [sp, #12]
   14c0e:	f000 f9b4 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c12:	9002      	str	r0, [sp, #8]
   14c14:	e7ff      	b.n	14c16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   14c16:	f000 f86b 	bl	14cf0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   14c1a:	9001      	str	r0, [sp, #4]
   14c1c:	e7ff      	b.n	14c1e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   14c1e:	9801      	ldr	r0, [sp, #4]
   14c20:	0041      	lsls	r1, r0, #1
   14c22:	9100      	str	r1, [sp, #0]
   14c24:	e7ff      	b.n	14c26 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   14c26:	9802      	ldr	r0, [sp, #8]
   14c28:	9900      	ldr	r1, [sp, #0]
   14c2a:	4308      	orrs	r0, r1
    }
   14c2c:	b004      	add	sp, #16
   14c2e:	bd80      	pop	{r7, pc}

00014c30 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   14c30:	b580      	push	{r7, lr}
   14c32:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c34:	f000 f99b 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c38:	9003      	str	r0, [sp, #12]
   14c3a:	e7ff      	b.n	14c3c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   14c3c:	9803      	ldr	r0, [sp, #12]
   14c3e:	f000 f99c 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c42:	9002      	str	r0, [sp, #8]
   14c44:	e7ff      	b.n	14c46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   14c46:	f000 f823 	bl	14c90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   14c4a:	9001      	str	r0, [sp, #4]
   14c4c:	e7ff      	b.n	14c4e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   14c4e:	9801      	ldr	r0, [sp, #4]
   14c50:	0041      	lsls	r1, r0, #1
   14c52:	9100      	str	r1, [sp, #0]
   14c54:	e7ff      	b.n	14c56 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   14c56:	9802      	ldr	r0, [sp, #8]
   14c58:	9900      	ldr	r1, [sp, #0]
   14c5a:	4308      	orrs	r0, r1
    }
   14c5c:	b004      	add	sp, #16
   14c5e:	bd80      	pop	{r7, pc}

00014c60 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   14c60:	b580      	push	{r7, lr}
   14c62:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c64:	f000 f985 	bl	14f72 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   14c68:	9003      	str	r0, [sp, #12]
   14c6a:	e7ff      	b.n	14c6c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   14c6c:	9803      	ldr	r0, [sp, #12]
   14c6e:	f000 f984 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14c72:	9002      	str	r0, [sp, #8]
   14c74:	e7ff      	b.n	14c76 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   14c76:	f000 f97e 	bl	14f76 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   14c7a:	9001      	str	r0, [sp, #4]
   14c7c:	e7ff      	b.n	14c7e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   14c7e:	9801      	ldr	r0, [sp, #4]
   14c80:	0041      	lsls	r1, r0, #1
   14c82:	9100      	str	r1, [sp, #0]
   14c84:	e7ff      	b.n	14c86 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   14c86:	9802      	ldr	r0, [sp, #8]
   14c88:	9900      	ldr	r1, [sp, #0]
   14c8a:	4308      	orrs	r0, r1
    }
   14c8c:	b004      	add	sp, #16
   14c8e:	bd80      	pop	{r7, pc}

00014c90 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   14c90:	b580      	push	{r7, lr}
   14c92:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14c94:	f000 f96b 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14c98:	9003      	str	r0, [sp, #12]
   14c9a:	e7ff      	b.n	14c9c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   14c9c:	9803      	ldr	r0, [sp, #12]
   14c9e:	f000 f96c 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14ca2:	9002      	str	r0, [sp, #8]
   14ca4:	e7ff      	b.n	14ca6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   14ca6:	f7ff ff7b 	bl	14ba0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   14caa:	9001      	str	r0, [sp, #4]
   14cac:	e7ff      	b.n	14cae <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   14cae:	9801      	ldr	r0, [sp, #4]
   14cb0:	0041      	lsls	r1, r0, #1
   14cb2:	9100      	str	r1, [sp, #0]
   14cb4:	e7ff      	b.n	14cb6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   14cb6:	9802      	ldr	r0, [sp, #8]
   14cb8:	9900      	ldr	r1, [sp, #0]
   14cba:	4308      	orrs	r0, r1
    }
   14cbc:	b004      	add	sp, #16
   14cbe:	bd80      	pop	{r7, pc}

00014cc0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   14cc0:	b580      	push	{r7, lr}
   14cc2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14cc4:	f000 f953 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14cc8:	9003      	str	r0, [sp, #12]
   14cca:	e7ff      	b.n	14ccc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   14ccc:	9803      	ldr	r0, [sp, #12]
   14cce:	f000 f954 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14cd2:	9002      	str	r0, [sp, #8]
   14cd4:	e7ff      	b.n	14cd6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   14cd6:	f7ff ff1b 	bl	14b10 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   14cda:	9001      	str	r0, [sp, #4]
   14cdc:	e7ff      	b.n	14cde <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   14cde:	9801      	ldr	r0, [sp, #4]
   14ce0:	0041      	lsls	r1, r0, #1
   14ce2:	9100      	str	r1, [sp, #0]
   14ce4:	e7ff      	b.n	14ce6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   14ce6:	9802      	ldr	r0, [sp, #8]
   14ce8:	9900      	ldr	r1, [sp, #0]
   14cea:	4308      	orrs	r0, r1
    }
   14cec:	b004      	add	sp, #16
   14cee:	bd80      	pop	{r7, pc}

00014cf0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   14cf0:	b580      	push	{r7, lr}
   14cf2:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14cf4:	f000 f93b 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14cf8:	9003      	str	r0, [sp, #12]
   14cfa:	e7ff      	b.n	14cfc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   14cfc:	9803      	ldr	r0, [sp, #12]
   14cfe:	f000 f93c 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14d02:	9002      	str	r0, [sp, #8]
   14d04:	e7ff      	b.n	14d06 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   14d06:	f7ff ff1b 	bl	14b40 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   14d0a:	9001      	str	r0, [sp, #4]
   14d0c:	e7ff      	b.n	14d0e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   14d0e:	9801      	ldr	r0, [sp, #4]
   14d10:	0041      	lsls	r1, r0, #1
   14d12:	9100      	str	r1, [sp, #0]
   14d14:	e7ff      	b.n	14d16 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   14d16:	9802      	ldr	r0, [sp, #8]
   14d18:	9900      	ldr	r1, [sp, #0]
   14d1a:	4308      	orrs	r0, r1
    }
   14d1c:	b004      	add	sp, #16
   14d1e:	bd80      	pop	{r7, pc}

00014d20 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE>:
    fn to_usize() -> usize {
   14d20:	b580      	push	{r7, lr}
   14d22:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   14d24:	f000 f923 	bl	14f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   14d28:	9003      	str	r0, [sp, #12]
   14d2a:	e7ff      	b.n	14d2c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0xc>
   14d2c:	9803      	ldr	r0, [sp, #12]
   14d2e:	f000 f924 	bl	14f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   14d32:	9002      	str	r0, [sp, #8]
   14d34:	e7ff      	b.n	14d36 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x16>
   14d36:	f7ff ff63 	bl	14c00 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   14d3a:	9001      	str	r0, [sp, #4]
   14d3c:	e7ff      	b.n	14d3e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x1e>
   14d3e:	9801      	ldr	r0, [sp, #4]
   14d40:	0041      	lsls	r1, r0, #1
   14d42:	9100      	str	r1, [sp, #0]
   14d44:	e7ff      	b.n	14d46 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hed5f5132b9230dbfE+0x26>
   14d46:	9802      	ldr	r0, [sp, #8]
   14d48:	9900      	ldr	r1, [sp, #0]
   14d4a:	4308      	orrs	r0, r1
    }
   14d4c:	b004      	add	sp, #16
   14d4e:	bd80      	pop	{r7, pc}

00014d50 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>:
   14d50:	b580      	push	{r7, lr}
   14d52:	b08c      	sub	sp, #48	; 0x30
   14d54:	9005      	str	r0, [sp, #20]
   14d56:	9106      	str	r1, [sp, #24]
   14d58:	9207      	str	r2, [sp, #28]
   14d5a:	9008      	str	r0, [sp, #32]
   14d5c:	9109      	str	r1, [sp, #36]	; 0x24
   14d5e:	2301      	movs	r3, #1
   14d60:	930b      	str	r3, [sp, #44]	; 0x2c
   14d62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14d64:	9204      	str	r2, [sp, #16]
   14d66:	9103      	str	r1, [sp, #12]
   14d68:	9002      	str	r0, [sp, #8]
   14d6a:	9301      	str	r3, [sp, #4]
   14d6c:	e7ff      	b.n	14d6e <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x1e>
   14d6e:	9801      	ldr	r0, [sp, #4]
   14d70:	9904      	ldr	r1, [sp, #16]
   14d72:	fb00 f201 	mul.w	r2, r0, r1
   14d76:	920a      	str	r2, [sp, #40]	; 0x28
   14d78:	9802      	ldr	r0, [sp, #8]
   14d7a:	9903      	ldr	r1, [sp, #12]
   14d7c:	f000 f850 	bl	14e20 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>
   14d80:	e7ff      	b.n	14d82 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE+0x32>
   14d82:	b00c      	add	sp, #48	; 0x30
   14d84:	bd80      	pop	{r7, pc}

00014d86 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE>:
   14d86:	b580      	push	{r7, lr}
   14d88:	b088      	sub	sp, #32
   14d8a:	9004      	str	r0, [sp, #16]
   14d8c:	9105      	str	r1, [sp, #20]
   14d8e:	2201      	movs	r2, #1
   14d90:	9207      	str	r2, [sp, #28]
   14d92:	9a07      	ldr	r2, [sp, #28]
   14d94:	9103      	str	r1, [sp, #12]
   14d96:	9002      	str	r0, [sp, #8]
   14d98:	9201      	str	r2, [sp, #4]
   14d9a:	e7ff      	b.n	14d9c <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x16>
   14d9c:	9801      	ldr	r0, [sp, #4]
   14d9e:	2820      	cmp	r0, #32
   14da0:	d306      	bcc.n	14db0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x2a>
   14da2:	e7ff      	b.n	14da4 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x1e>
   14da4:	2201      	movs	r2, #1
   14da6:	9802      	ldr	r0, [sp, #8]
   14da8:	9903      	ldr	r1, [sp, #12]
   14daa:	f7ff ffd1 	bl	14d50 <_ZN4core3ptr19swap_nonoverlapping17h5601a9928b22da9aE>
   14dae:	e013      	b.n	14dd8 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x52>
   14db0:	9802      	ldr	r0, [sp, #8]
   14db2:	f000 f814 	bl	14dde <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>
   14db6:	4601      	mov	r1, r0
   14db8:	f88d 001b 	strb.w	r0, [sp, #27]
   14dbc:	9100      	str	r1, [sp, #0]
   14dbe:	e7ff      	b.n	14dc0 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x3a>
   14dc0:	2201      	movs	r2, #1
   14dc2:	9803      	ldr	r0, [sp, #12]
   14dc4:	9902      	ldr	r1, [sp, #8]
   14dc6:	f7fc fb20 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14dca:	e7ff      	b.n	14dcc <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x46>
   14dcc:	9803      	ldr	r0, [sp, #12]
   14dce:	9900      	ldr	r1, [sp, #0]
   14dd0:	f7fd f9e4 	bl	1219c <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   14dd4:	e7ff      	b.n	14dd6 <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x50>
   14dd6:	e000      	b.n	14dda <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14dd8:	e7ff      	b.n	14dda <_ZN4core3ptr23swap_nonoverlapping_one17heaf174feb40e1a8fE+0x54>
   14dda:	b008      	add	sp, #32
   14ddc:	bd80      	pop	{r7, pc}

00014dde <_ZN4core3ptr4read17h38cf3848f1a0f2ccE>:
   14dde:	b580      	push	{r7, lr}
   14de0:	b088      	sub	sp, #32
   14de2:	9004      	str	r0, [sp, #16]
   14de4:	f89d 1015 	ldrb.w	r1, [sp, #21]
   14de8:	f88d 100f 	strb.w	r1, [sp, #15]
   14dec:	9002      	str	r0, [sp, #8]
   14dee:	e7ff      	b.n	14df0 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x12>
   14df0:	f10d 000f 	add.w	r0, sp, #15
   14df4:	9006      	str	r0, [sp, #24]
   14df6:	9007      	str	r0, [sp, #28]
   14df8:	e7ff      	b.n	14dfa <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x1c>
   14dfa:	f10d 010f 	add.w	r1, sp, #15
   14dfe:	2201      	movs	r2, #1
   14e00:	9802      	ldr	r0, [sp, #8]
   14e02:	f7fc fb02 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14e06:	e7ff      	b.n	14e08 <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x2a>
   14e08:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14e0c:	4601      	mov	r1, r0
   14e0e:	f88d 0016 	strb.w	r0, [sp, #22]
   14e12:	f88d 0017 	strb.w	r0, [sp, #23]
   14e16:	9101      	str	r1, [sp, #4]
   14e18:	e7ff      	b.n	14e1a <_ZN4core3ptr4read17h38cf3848f1a0f2ccE+0x3c>
   14e1a:	9801      	ldr	r0, [sp, #4]
   14e1c:	b008      	add	sp, #32
   14e1e:	bd80      	pop	{r7, pc}

00014e20 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE>:
   14e20:	b5d0      	push	{r4, r6, r7, lr}
   14e22:	af02      	add	r7, sp, #8
   14e24:	b0b4      	sub	sp, #208	; 0xd0
   14e26:	466c      	mov	r4, sp
   14e28:	f36f 0404 	bfc	r4, #0, #5
   14e2c:	46a5      	mov	sp, r4
   14e2e:	9024      	str	r0, [sp, #144]	; 0x90
   14e30:	9125      	str	r1, [sp, #148]	; 0x94
   14e32:	9226      	str	r2, [sp, #152]	; 0x98
   14e34:	2320      	movs	r3, #32
   14e36:	932f      	str	r3, [sp, #188]	; 0xbc
   14e38:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   14e3a:	9327      	str	r3, [sp, #156]	; 0x9c
   14e3c:	920e      	str	r2, [sp, #56]	; 0x38
   14e3e:	910d      	str	r1, [sp, #52]	; 0x34
   14e40:	900c      	str	r0, [sp, #48]	; 0x30
   14e42:	930b      	str	r3, [sp, #44]	; 0x2c
   14e44:	e7ff      	b.n	14e46 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x26>
   14e46:	2000      	movs	r0, #0
   14e48:	900f      	str	r0, [sp, #60]	; 0x3c
   14e4a:	e7ff      	b.n	14e4c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14e4c:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14e50:	4408      	add	r0, r1
   14e52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   14e54:	4290      	cmp	r0, r2
   14e56:	d905      	bls.n	14e64 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x44>
   14e58:	e7ff      	b.n	14e5a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x3a>
   14e5a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e5c:	990e      	ldr	r1, [sp, #56]	; 0x38
   14e5e:	4288      	cmp	r0, r1
   14e60:	d334      	bcc.n	14ecc <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xac>
   14e62:	e067      	b.n	14f34 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14e64:	e7ff      	b.n	14e66 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x46>
   14e66:	a810      	add	r0, sp, #64	; 0x40
   14e68:	9032      	str	r0, [sp, #200]	; 0xc8
   14e6a:	9033      	str	r0, [sp, #204]	; 0xcc
   14e6c:	e7ff      	b.n	14e6e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x4e>
   14e6e:	a810      	add	r0, sp, #64	; 0x40
   14e70:	4601      	mov	r1, r0
   14e72:	9028      	str	r0, [sp, #160]	; 0xa0
   14e74:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14e78:	900a      	str	r0, [sp, #40]	; 0x28
   14e7a:	4610      	mov	r0, r2
   14e7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14e7e:	9109      	str	r1, [sp, #36]	; 0x24
   14e80:	4619      	mov	r1, r3
   14e82:	f7fc fc26 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e86:	4601      	mov	r1, r0
   14e88:	9029      	str	r0, [sp, #164]	; 0xa4
   14e8a:	9108      	str	r1, [sp, #32]
   14e8c:	e7ff      	b.n	14e8e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x6e>
   14e8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14e90:	980d      	ldr	r0, [sp, #52]	; 0x34
   14e92:	f7fc fc1e 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14e96:	4601      	mov	r1, r0
   14e98:	902a      	str	r0, [sp, #168]	; 0xa8
   14e9a:	9107      	str	r1, [sp, #28]
   14e9c:	e7ff      	b.n	14e9e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x7e>
   14e9e:	9808      	ldr	r0, [sp, #32]
   14ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
   14ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ea4:	f7fc fab1 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14ea8:	e7ff      	b.n	14eaa <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x8a>
   14eaa:	9807      	ldr	r0, [sp, #28]
   14eac:	9908      	ldr	r1, [sp, #32]
   14eae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14eb0:	f7fc faab 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14eb4:	e7ff      	b.n	14eb6 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x96>
   14eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   14eb8:	9907      	ldr	r1, [sp, #28]
   14eba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   14ebc:	f7fc faa5 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14ec0:	e7ff      	b.n	14ec2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xa2>
   14ec2:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14ec4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14ec6:	4408      	add	r0, r1
   14ec8:	900f      	str	r0, [sp, #60]	; 0x3c
   14eca:	e7bf      	b.n	14e4c <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x2c>
   14ecc:	e7ff      	b.n	14ece <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xae>
   14ece:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14ed0:	990e      	ldr	r1, [sp, #56]	; 0x38
   14ed2:	1a08      	subs	r0, r1, r0
   14ed4:	4602      	mov	r2, r0
   14ed6:	902b      	str	r0, [sp, #172]	; 0xac
   14ed8:	a81c      	add	r0, sp, #112	; 0x70
   14eda:	9030      	str	r0, [sp, #192]	; 0xc0
   14edc:	9031      	str	r0, [sp, #196]	; 0xc4
   14ede:	9206      	str	r2, [sp, #24]
   14ee0:	9005      	str	r0, [sp, #20]
   14ee2:	e7ff      	b.n	14ee4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xc4>
   14ee4:	9805      	ldr	r0, [sp, #20]
   14ee6:	9905      	ldr	r1, [sp, #20]
   14ee8:	912c      	str	r1, [sp, #176]	; 0xb0
   14eea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14eee:	9004      	str	r0, [sp, #16]
   14ef0:	4610      	mov	r0, r2
   14ef2:	f7fc fbee 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14ef6:	4601      	mov	r1, r0
   14ef8:	902d      	str	r0, [sp, #180]	; 0xb4
   14efa:	9103      	str	r1, [sp, #12]
   14efc:	e7ff      	b.n	14efe <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xde>
   14efe:	990f      	ldr	r1, [sp, #60]	; 0x3c
   14f00:	980d      	ldr	r0, [sp, #52]	; 0x34
   14f02:	f7fc fbe6 	bl	116d2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   14f06:	4601      	mov	r1, r0
   14f08:	902e      	str	r0, [sp, #184]	; 0xb8
   14f0a:	9102      	str	r1, [sp, #8]
   14f0c:	e7ff      	b.n	14f0e <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xee>
   14f0e:	9803      	ldr	r0, [sp, #12]
   14f10:	9904      	ldr	r1, [sp, #16]
   14f12:	9a06      	ldr	r2, [sp, #24]
   14f14:	f7fc fa79 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14f18:	e7ff      	b.n	14f1a <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0xfa>
   14f1a:	9802      	ldr	r0, [sp, #8]
   14f1c:	9903      	ldr	r1, [sp, #12]
   14f1e:	9a06      	ldr	r2, [sp, #24]
   14f20:	f7fc fa73 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14f24:	e7ff      	b.n	14f26 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x106>
   14f26:	9804      	ldr	r0, [sp, #16]
   14f28:	9902      	ldr	r1, [sp, #8]
   14f2a:	9a06      	ldr	r2, [sp, #24]
   14f2c:	f7fc fa6d 	bl	1140a <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   14f30:	e7ff      	b.n	14f32 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x112>
   14f32:	e7ff      	b.n	14f34 <_ZN4core3ptr25swap_nonoverlapping_bytes17h9f4800014528e07cE+0x114>
   14f34:	f1a7 0408 	sub.w	r4, r7, #8
   14f38:	46a5      	mov	sp, r4
   14f3a:	bdd0      	pop	{r4, r6, r7, pc}

00014f3c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE>:
   14f3c:	b083      	sub	sp, #12
   14f3e:	9002      	str	r0, [sp, #8]
   14f40:	9000      	str	r0, [sp, #0]
   14f42:	e7ff      	b.n	14f44 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x8>
   14f44:	9800      	ldr	r0, [sp, #0]
   14f46:	28ff      	cmp	r0, #255	; 0xff
   14f48:	d807      	bhi.n	14f5a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x1e>
   14f4a:	e7ff      	b.n	14f4c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x10>
   14f4c:	9800      	ldr	r0, [sp, #0]
   14f4e:	f88d 0005 	strb.w	r0, [sp, #5]
   14f52:	2100      	movs	r1, #0
   14f54:	f88d 1004 	strb.w	r1, [sp, #4]
   14f58:	e003      	b.n	14f62 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14f5a:	2001      	movs	r0, #1
   14f5c:	f88d 0004 	strb.w	r0, [sp, #4]
   14f60:	e7ff      	b.n	14f62 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17hddcdc87bdb2f03adE+0x26>
   14f62:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14f66:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14f6a:	b003      	add	sp, #12
   14f6c:	4770      	bx	lr

00014f6e <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   14f6e:	2000      	movs	r0, #0
        0
    }
   14f70:	4770      	bx	lr

00014f72 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   14f72:	2001      	movs	r0, #1
        1
    }
   14f74:	4770      	bx	lr

00014f76 <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   14f76:	2000      	movs	r0, #0
    }
   14f78:	4770      	bx	lr

00014f7a <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   14f7a:	b081      	sub	sp, #4
   14f7c:	4601      	mov	r1, r0
   14f7e:	f88d 0003 	strb.w	r0, [sp, #3]
   14f82:	b2c0      	uxtb	r0, r0
   14f84:	b001      	add	sp, #4
   14f86:	4770      	bx	lr

00014f88 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   14f88:	4770      	bx	lr

00014f8a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   14f8a:	b5b0      	push	{r4, r5, r7, lr}
   14f8c:	b086      	sub	sp, #24
   14f8e:	460c      	mov	r4, r1
   14f90:	4605      	mov	r5, r0
   14f92:	f001 fb6c 	bl	1666e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   14f96:	b9a8      	cbnz	r0, 14fc4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   14f98:	f24e 0364 	movw	r3, #57444	; 0xe064
   14f9c:	2200      	movs	r2, #0
   14f9e:	f2c0 0301 	movt	r3, #1
   14fa2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   14fa6:	9205      	str	r2, [sp, #20]
   14fa8:	9304      	str	r3, [sp, #16]
   14faa:	e9cd 2202 	strd	r2, r2, [sp, #8]
   14fae:	2201      	movs	r2, #1
   14fb0:	9201      	str	r2, [sp, #4]
   14fb2:	f24e 1228 	movw	r2, #57640	; 0xe128
   14fb6:	f2c0 0201 	movt	r2, #1
   14fba:	9200      	str	r2, [sp, #0]
   14fbc:	466a      	mov	r2, sp
   14fbe:	f000 fbc5 	bl	1574c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   14fc2:	b110      	cbz	r0, 14fca <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   14fc4:	2001      	movs	r0, #1
   14fc6:	b006      	add	sp, #24
   14fc8:	bdb0      	pop	{r4, r5, r7, pc}
   14fca:	1d28      	adds	r0, r5, #4
   14fcc:	4621      	mov	r1, r4
   14fce:	b006      	add	sp, #24
   14fd0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   14fd4:	f001 bb4b 	b.w	1666e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

00014fd8 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   14fd8:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   14fdc:	f243 6134 	movw	r1, #13876	; 0x3634
   14fe0:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   14fe4:	f6cd 0131 	movt	r1, #55345	; 0xd831
   14fe8:	4770      	bx	lr
	...

00014fec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   14fec:	b570      	push	{r4, r5, r6, lr}
   14fee:	460e      	mov	r6, r1
   14ff0:	3909      	subs	r1, #9
   14ff2:	4604      	mov	r4, r0
   14ff4:	291e      	cmp	r1, #30
   14ff6:	d818      	bhi.n	1502a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   14ff8:	2002      	movs	r0, #2
   14ffa:	2574      	movs	r5, #116	; 0x74
   14ffc:	e8df f001 	tbb	[pc, r1]
   15000:	1c1c1019 	.word	0x1c1c1019
   15004:	1c1c1c29 	.word	0x1c1c1c29
   15008:	1c1c1c1c 	.word	0x1c1c1c1c
   1500c:	1c1c1c1c 	.word	0x1c1c1c1c
   15010:	1c1c1c1c 	.word	0x1c1c1c1c
   15014:	1c1c1c1c 	.word	0x1c1c1c1c
   15018:	1c1c171c 	.word	0x1c1c171c
   1501c:	00171c1c 	.word	0x00171c1c
   15020:	2002      	movs	r0, #2
   15022:	256e      	movs	r5, #110	; 0x6e
   15024:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   15028:	bd70      	pop	{r4, r5, r6, pc}
   1502a:	2e5c      	cmp	r6, #92	; 0x5c
   1502c:	d104      	bne.n	15038 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   1502e:	2002      	movs	r0, #2
   15030:	4635      	mov	r5, r6
   15032:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   15036:	bd70      	pop	{r4, r5, r6, pc}
   15038:	2a00      	cmp	r2, #0
   1503a:	d040      	beq.n	150be <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1503c:	f3c6 1083 	ubfx	r0, r6, #6, #4
   15040:	0ab1      	lsrs	r1, r6, #10
   15042:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   15046:	d309      	bcc.n	1505c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   15048:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   1504c:	d137      	bne.n	150be <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1504e:	211e      	movs	r1, #30
   15050:	e00b      	b.n	1506a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   15052:	2002      	movs	r0, #2
   15054:	2572      	movs	r5, #114	; 0x72
   15056:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1505a:	bd70      	pop	{r4, r5, r6, pc}
   1505c:	f64e 3294 	movw	r2, #60308	; 0xeb94
   15060:	f2c0 0201 	movt	r2, #1
   15064:	5c51      	ldrb	r1, [r2, r1]
   15066:	291e      	cmp	r1, #30
   15068:	d842      	bhi.n	150f0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   1506a:	f64e 420f 	movw	r2, #60431	; 0xec0f
   1506e:	f2c0 0201 	movt	r2, #1
   15072:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   15076:	5c09      	ldrb	r1, [r1, r0]
   15078:	298b      	cmp	r1, #139	; 0x8b
   1507a:	d231      	bcs.n	150e0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   1507c:	f64e 6000 	movw	r0, #60928	; 0xee00
   15080:	2301      	movs	r3, #1
   15082:	f2c0 0001 	movt	r0, #1
   15086:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1508a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1508e:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   15092:	f8d2 c004 	ldr.w	ip, [r2, #4]
   15096:	fa03 f501 	lsl.w	r5, r3, r1
   1509a:	f1b1 0220 	subs.w	r2, r1, #32
   1509e:	f1c1 0120 	rsb	r1, r1, #32
   150a2:	bf58      	it	pl
   150a4:	2500      	movpl	r5, #0
   150a6:	2a00      	cmp	r2, #0
   150a8:	ea00 0005 	and.w	r0, r0, r5
   150ac:	fa23 f101 	lsr.w	r1, r3, r1
   150b0:	bf58      	it	pl
   150b2:	fa03 f102 	lslpl.w	r1, r3, r2
   150b6:	ea01 010c 	and.w	r1, r1, ip
   150ba:	4308      	orrs	r0, r1
   150bc:	d105      	bne.n	150ca <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   150be:	4630      	mov	r0, r6
   150c0:	f001 f989 	bl	163d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   150c4:	b108      	cbz	r0, 150ca <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   150c6:	2001      	movs	r0, #1
   150c8:	e7b2      	b.n	15030 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   150ca:	f046 0001 	orr.w	r0, r6, #1
   150ce:	2107      	movs	r1, #7
   150d0:	fab0 f080 	clz	r0, r0
   150d4:	f04f 0e05 	mov.w	lr, #5
   150d8:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   150dc:	2003      	movs	r0, #3
   150de:	e7a7      	b.n	15030 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   150e0:	f64e 3084 	movw	r0, #60292	; 0xeb84
   150e4:	228b      	movs	r2, #139	; 0x8b
   150e6:	f2c0 0001 	movt	r0, #1
   150ea:	f000 f84d 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   150ee:	defe      	udf	#254	; 0xfe
   150f0:	f64e 3074 	movw	r0, #60276	; 0xeb74
   150f4:	221f      	movs	r2, #31
   150f6:	f2c0 0001 	movt	r0, #1
   150fa:	f000 f845 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   150fe:	defe      	udf	#254	; 0xfe

00015100 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   15100:	b08e      	sub	sp, #56	; 0x38
   15102:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   15106:	2002      	movs	r0, #2
   15108:	a90a      	add	r1, sp, #40	; 0x28
   1510a:	9009      	str	r0, [sp, #36]	; 0x24
   1510c:	9108      	str	r1, [sp, #32]
   1510e:	2100      	movs	r1, #0
   15110:	9107      	str	r1, [sp, #28]
   15112:	e9cd 0105 	strd	r0, r1, [sp, #20]
   15116:	f24e 2030 	movw	r0, #57904	; 0xe230
   1511a:	f2c0 0001 	movt	r0, #1
   1511e:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   15122:	9004      	str	r0, [sp, #16]
   15124:	f646 6033 	movw	r0, #28211	; 0x6e33
   15128:	f2c0 0001 	movt	r0, #1
   1512c:	900d      	str	r0, [sp, #52]	; 0x34
   1512e:	a802      	add	r0, sp, #8
   15130:	900c      	str	r0, [sp, #48]	; 0x30
   15132:	f646 603d 	movw	r0, #28221	; 0x6e3d
   15136:	f2c0 0001 	movt	r0, #1
   1513a:	4661      	mov	r1, ip
   1513c:	900b      	str	r0, [sp, #44]	; 0x2c
   1513e:	4668      	mov	r0, sp
   15140:	900a      	str	r0, [sp, #40]	; 0x28
   15142:	a804      	add	r0, sp, #16
   15144:	f000 f840 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15148:	defe      	udf	#254	; 0xfe

0001514a <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   1514a:	68c0      	ldr	r0, [r0, #12]
   1514c:	4770      	bx	lr

0001514e <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   1514e:	4770      	bx	lr

00015150 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   15150:	e9d0 2100 	ldrd	r2, r1, [r0]
   15154:	4610      	mov	r0, r2
   15156:	4770      	bx	lr

00015158 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   15158:	6880      	ldr	r0, [r0, #8]
   1515a:	4770      	bx	lr

0001515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   1515c:	b088      	sub	sp, #32
   1515e:	4694      	mov	ip, r2
   15160:	f24e 0264 	movw	r2, #57444	; 0xe064
   15164:	2300      	movs	r3, #0
   15166:	f2c0 0201 	movt	r2, #1
   1516a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1516e:	4668      	mov	r0, sp
   15170:	9305      	str	r3, [sp, #20]
   15172:	4661      	mov	r1, ip
   15174:	9204      	str	r2, [sp, #16]
   15176:	2201      	movs	r2, #1
   15178:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1517c:	9201      	str	r2, [sp, #4]
   1517e:	aa06      	add	r2, sp, #24
   15180:	9200      	str	r2, [sp, #0]
   15182:	f000 f821 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   15186:	defe      	udf	#254	; 0xfe

00015188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   15188:	b08c      	sub	sp, #48	; 0x30
   1518a:	4603      	mov	r3, r0
   1518c:	e9cd 1200 	strd	r1, r2, [sp]
   15190:	2002      	movs	r0, #2
   15192:	a908      	add	r1, sp, #32
   15194:	9007      	str	r0, [sp, #28]
   15196:	9106      	str	r1, [sp, #24]
   15198:	2100      	movs	r1, #0
   1519a:	9105      	str	r1, [sp, #20]
   1519c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   151a0:	f24e 2064 	movw	r0, #57956	; 0xe264
   151a4:	f2c0 0001 	movt	r0, #1
   151a8:	4669      	mov	r1, sp
   151aa:	9002      	str	r0, [sp, #8]
   151ac:	f646 504f 	movw	r0, #27983	; 0x6d4f
   151b0:	f2c0 0001 	movt	r0, #1
   151b4:	900b      	str	r0, [sp, #44]	; 0x2c
   151b6:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   151ba:	a801      	add	r0, sp, #4
   151bc:	9008      	str	r0, [sp, #32]
   151be:	a802      	add	r0, sp, #8
   151c0:	4619      	mov	r1, r3
   151c2:	f000 f801 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   151c6:	defe      	udf	#254	; 0xfe

000151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   151c8:	b084      	sub	sp, #16
   151ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
   151ce:	f24e 2040 	movw	r0, #57920	; 0xe240
   151d2:	f2c0 0001 	movt	r0, #1
   151d6:	9001      	str	r0, [sp, #4]
   151d8:	f24e 0064 	movw	r0, #57444	; 0xe064
   151dc:	f2c0 0001 	movt	r0, #1
   151e0:	9000      	str	r0, [sp, #0]
   151e2:	4668      	mov	r0, sp
   151e4:	f7f3 fa74 	bl	86d0 <rust_begin_unwind>
   151e8:	defe      	udf	#254	; 0xfe

000151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   151ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151ee:	b081      	sub	sp, #4
   151f0:	2a00      	cmp	r2, #0
   151f2:	f000 80fe 	beq.w	153f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   151f6:	4690      	mov	r8, r2
   151f8:	468a      	mov	sl, r1
   151fa:	4681      	mov	r9, r0
   151fc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15200:	7800      	ldrb	r0, [r0, #0]
   15202:	b948      	cbnz	r0, 15218 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   15204:	e014      	b.n	15230 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15206:	44da      	add	sl, fp
   15208:	2c00      	cmp	r4, #0
   1520a:	46a0      	mov	r8, r4
   1520c:	f000 80f1 	beq.w	153f2 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   15210:	f8d9 0008 	ldr.w	r0, [r9, #8]
   15214:	7800      	ldrb	r0, [r0, #0]
   15216:	b158      	cbz	r0, 15230 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   15218:	e9d9 0100 	ldrd	r0, r1, [r9]
   1521c:	2204      	movs	r2, #4
   1521e:	68cb      	ldr	r3, [r1, #12]
   15220:	f24e 1184 	movw	r1, #57732	; 0xe184
   15224:	f2c0 0101 	movt	r1, #1
   15228:	4798      	blx	r3
   1522a:	2800      	cmp	r0, #0
   1522c:	f040 80e5 	bne.w	153fa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   15230:	f04f 0b00 	mov.w	fp, #0
   15234:	4641      	mov	r1, r8
   15236:	e008      	b.n	1524a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   15238:	ebb8 010b 	subs.w	r1, r8, fp
   1523c:	f04f 0000 	mov.w	r0, #0
   15240:	bf38      	it	cc
   15242:	4601      	movcc	r1, r0
   15244:	45c3      	cmp	fp, r8
   15246:	f200 80a5 	bhi.w	15394 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   1524a:	eb0a 0e0b 	add.w	lr, sl, fp
   1524e:	2000      	movs	r0, #0
   15250:	f01e 0203 	ands.w	r2, lr, #3
   15254:	bf18      	it	ne
   15256:	f1d2 0c04 	rsbsne	ip, r2, #4
   1525a:	d120      	bne.n	1529e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   1525c:	2908      	cmp	r1, #8
   1525e:	d357      	bcc.n	15310 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15260:	f1a1 0208 	sub.w	r2, r1, #8
   15264:	4290      	cmp	r0, r2
   15266:	d853      	bhi.n	15310 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   15268:	f85e 3000 	ldr.w	r3, [lr, r0]
   1526c:	eb0e 0700 	add.w	r7, lr, r0
   15270:	687f      	ldr	r7, [r7, #4]
   15272:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   15276:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   1527a:	ea26 0303 	bic.w	r3, r6, r3
   1527e:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   15282:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   15286:	ea26 0707 	bic.w	r7, r6, r7
   1528a:	433b      	orrs	r3, r7
   1528c:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   15290:	d102      	bne.n	15298 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   15292:	3008      	adds	r0, #8
   15294:	4290      	cmp	r0, r2
   15296:	d9e7      	bls.n	15268 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   15298:	4288      	cmp	r0, r1
   1529a:	d939      	bls.n	15310 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   1529c:	e0b1      	b.n	15402 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   1529e:	458c      	cmp	ip, r1
   152a0:	bf88      	it	hi
   152a2:	468c      	movhi	ip, r1
   152a4:	eb0e 060c 	add.w	r6, lr, ip
   152a8:	2000      	movs	r0, #0
   152aa:	4663      	mov	r3, ip
   152ac:	4677      	mov	r7, lr
   152ae:	b363      	cbz	r3, 1530a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152b0:	463a      	mov	r2, r7
   152b2:	f812 4b01 	ldrb.w	r4, [r2], #1
   152b6:	f1b4 050a 	subs.w	r5, r4, #10
   152ba:	bf18      	it	ne
   152bc:	2501      	movne	r5, #1
   152be:	4428      	add	r0, r5
   152c0:	2c0a      	cmp	r4, #10
   152c2:	d059      	beq.n	15378 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152c4:	42b2      	cmp	r2, r6
   152c6:	d020      	beq.n	1530a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152c8:	787a      	ldrb	r2, [r7, #1]
   152ca:	f1b2 040a 	subs.w	r4, r2, #10
   152ce:	bf18      	it	ne
   152d0:	2401      	movne	r4, #1
   152d2:	4420      	add	r0, r4
   152d4:	2a0a      	cmp	r2, #10
   152d6:	d04f      	beq.n	15378 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152d8:	1cba      	adds	r2, r7, #2
   152da:	42b2      	cmp	r2, r6
   152dc:	d015      	beq.n	1530a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152de:	78ba      	ldrb	r2, [r7, #2]
   152e0:	f1b2 040a 	subs.w	r4, r2, #10
   152e4:	bf18      	it	ne
   152e6:	2401      	movne	r4, #1
   152e8:	4420      	add	r0, r4
   152ea:	2a0a      	cmp	r2, #10
   152ec:	d044      	beq.n	15378 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   152ee:	1cfa      	adds	r2, r7, #3
   152f0:	42b2      	cmp	r2, r6
   152f2:	d00a      	beq.n	1530a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   152f4:	78fa      	ldrb	r2, [r7, #3]
   152f6:	3b04      	subs	r3, #4
   152f8:	3704      	adds	r7, #4
   152fa:	f1b2 040a 	subs.w	r4, r2, #10
   152fe:	bf18      	it	ne
   15300:	2401      	movne	r4, #1
   15302:	4420      	add	r0, r4
   15304:	2a0a      	cmp	r2, #10
   15306:	d1d2      	bne.n	152ae <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   15308:	e036      	b.n	15378 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   1530a:	4660      	mov	r0, ip
   1530c:	2908      	cmp	r1, #8
   1530e:	d2a7      	bcs.n	15260 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   15310:	eb0e 0700 	add.w	r7, lr, r0
   15314:	eb0e 0201 	add.w	r2, lr, r1
   15318:	1a0e      	subs	r6, r1, r0
   1531a:	2100      	movs	r1, #0
   1531c:	b3ce      	cbz	r6, 15392 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1531e:	463b      	mov	r3, r7
   15320:	f813 5b01 	ldrb.w	r5, [r3], #1
   15324:	f1b5 040a 	subs.w	r4, r5, #10
   15328:	bf18      	it	ne
   1532a:	2401      	movne	r4, #1
   1532c:	4421      	add	r1, r4
   1532e:	2d0a      	cmp	r5, #10
   15330:	d021      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15332:	4293      	cmp	r3, r2
   15334:	d02d      	beq.n	15392 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15336:	787b      	ldrb	r3, [r7, #1]
   15338:	f1b3 050a 	subs.w	r5, r3, #10
   1533c:	bf18      	it	ne
   1533e:	2501      	movne	r5, #1
   15340:	4429      	add	r1, r5
   15342:	2b0a      	cmp	r3, #10
   15344:	d017      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   15346:	1cbb      	adds	r3, r7, #2
   15348:	4293      	cmp	r3, r2
   1534a:	d022      	beq.n	15392 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   1534c:	78bb      	ldrb	r3, [r7, #2]
   1534e:	f1b3 050a 	subs.w	r5, r3, #10
   15352:	bf18      	it	ne
   15354:	2501      	movne	r5, #1
   15356:	4429      	add	r1, r5
   15358:	2b0a      	cmp	r3, #10
   1535a:	d00c      	beq.n	15376 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   1535c:	1cfb      	adds	r3, r7, #3
   1535e:	4293      	cmp	r3, r2
   15360:	d017      	beq.n	15392 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   15362:	78fb      	ldrb	r3, [r7, #3]
   15364:	3e04      	subs	r6, #4
   15366:	3704      	adds	r7, #4
   15368:	f1b3 050a 	subs.w	r5, r3, #10
   1536c:	bf18      	it	ne
   1536e:	2501      	movne	r5, #1
   15370:	4429      	add	r1, r5
   15372:	2b0a      	cmp	r3, #10
   15374:	d1d2      	bne.n	1531c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   15376:	4408      	add	r0, r1
   15378:	4458      	add	r0, fp
   1537a:	f100 0b01 	add.w	fp, r0, #1
   1537e:	4540      	cmp	r0, r8
   15380:	f4bf af5a 	bcs.w	15238 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   15384:	f81a 0000 	ldrb.w	r0, [sl, r0]
   15388:	280a      	cmp	r0, #10
   1538a:	f47f af55 	bne.w	15238 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   1538e:	2001      	movs	r0, #1
   15390:	e001      	b.n	15396 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   15392:	2000      	movs	r0, #0
   15394:	46c3      	mov	fp, r8
   15396:	f8d9 1008 	ldr.w	r1, [r9, #8]
   1539a:	eba8 040b 	sub.w	r4, r8, fp
   1539e:	7008      	strb	r0, [r1, #0]
   153a0:	fab4 f084 	clz	r0, r4
   153a4:	0942      	lsrs	r2, r0, #5
   153a6:	fabb f08b 	clz	r0, fp
   153aa:	0943      	lsrs	r3, r0, #5
   153ac:	e9d9 0100 	ldrd	r0, r1, [r9]
   153b0:	ea53 0602 	orrs.w	r6, r3, r2
   153b4:	d106      	bne.n	153c4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   153b6:	45d8      	cmp	r8, fp
   153b8:	d926      	bls.n	15408 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   153ba:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   153be:	f112 0f41 	cmn.w	r2, #65	; 0x41
   153c2:	dd21      	ble.n	15408 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   153c4:	68cb      	ldr	r3, [r1, #12]
   153c6:	4651      	mov	r1, sl
   153c8:	465a      	mov	r2, fp
   153ca:	4798      	blx	r3
   153cc:	b9a8      	cbnz	r0, 153fa <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   153ce:	2e00      	cmp	r6, #0
   153d0:	f47f af19 	bne.w	15206 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   153d4:	45d8      	cmp	r8, fp
   153d6:	d905      	bls.n	153e4 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   153d8:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   153dc:	f110 0f41 	cmn.w	r0, #65	; 0x41
   153e0:	f73f af11 	bgt.w	15206 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   153e4:	4650      	mov	r0, sl
   153e6:	4641      	mov	r1, r8
   153e8:	465a      	mov	r2, fp
   153ea:	4643      	mov	r3, r8
   153ec:	f000 fe4d 	bl	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   153f0:	defe      	udf	#254	; 0xfe
   153f2:	2000      	movs	r0, #0
   153f4:	b001      	add	sp, #4
   153f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153fa:	2001      	movs	r0, #1
   153fc:	b001      	add	sp, #4
   153fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15402:	f000 fe20 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15406:	defe      	udf	#254	; 0xfe
   15408:	4650      	mov	r0, sl
   1540a:	4641      	mov	r1, r8
   1540c:	2200      	movs	r2, #0
   1540e:	465b      	mov	r3, fp
   15410:	f000 fe3b 	bl	1608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   15414:	defe      	udf	#254	; 0xfe

00015416 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   15416:	b5f0      	push	{r4, r5, r6, r7, lr}
   15418:	b08d      	sub	sp, #52	; 0x34
   1541a:	4604      	mov	r4, r0
   1541c:	7a00      	ldrb	r0, [r0, #8]
   1541e:	b138      	cbz	r0, 15430 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   15420:	2001      	movs	r0, #1
   15422:	6861      	ldr	r1, [r4, #4]
   15424:	7220      	strb	r0, [r4, #8]
   15426:	1c48      	adds	r0, r1, #1
   15428:	6060      	str	r0, [r4, #4]
   1542a:	4620      	mov	r0, r4
   1542c:	b00d      	add	sp, #52	; 0x34
   1542e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   15430:	4616      	mov	r6, r2
   15432:	460d      	mov	r5, r1
   15434:	e9d4 1200 	ldrd	r1, r2, [r4]
   15438:	7808      	ldrb	r0, [r1, #0]
   1543a:	0740      	lsls	r0, r0, #29
   1543c:	d419      	bmi.n	15472 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   1543e:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   15442:	f24e 218e 	movw	r1, #57998	; 0xe28e
   15446:	f24e 2c92 	movw	ip, #58002	; 0xe292
   1544a:	f2c0 0101 	movt	r1, #1
   1544e:	2a00      	cmp	r2, #0
   15450:	f2c0 0c01 	movt	ip, #1
   15454:	bf08      	it	eq
   15456:	4661      	moveq	r1, ip
   15458:	68db      	ldr	r3, [r3, #12]
   1545a:	f04f 0202 	mov.w	r2, #2
   1545e:	bf08      	it	eq
   15460:	2201      	moveq	r2, #1
   15462:	4798      	blx	r3
   15464:	2800      	cmp	r0, #0
   15466:	d1db      	bne.n	15420 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   15468:	68f2      	ldr	r2, [r6, #12]
   1546a:	4628      	mov	r0, r5
   1546c:	6821      	ldr	r1, [r4, #0]
   1546e:	4790      	blx	r2
   15470:	e7d7      	b.n	15422 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   15472:	b95a      	cbnz	r2, 1548c <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   15474:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15478:	2202      	movs	r2, #2
   1547a:	68cb      	ldr	r3, [r1, #12]
   1547c:	f24e 2190 	movw	r1, #58000	; 0xe290
   15480:	f2c0 0101 	movt	r1, #1
   15484:	4798      	blx	r3
   15486:	2800      	cmp	r0, #0
   15488:	d1ca      	bne.n	15420 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   1548a:	6821      	ldr	r1, [r4, #0]
   1548c:	2001      	movs	r0, #1
   1548e:	f10d 030f 	add.w	r3, sp, #15
   15492:	f88d 000f 	strb.w	r0, [sp, #15]
   15496:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   1549a:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   1549e:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   154a2:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   154a6:	f891 1020 	ldrb.w	r1, [r1, #32]
   154aa:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   154ae:	a904      	add	r1, sp, #16
   154b0:	e9cd 0204 	strd	r0, r2, [sp, #16]
   154b4:	f24e 2074 	movw	r0, #57972	; 0xe274
   154b8:	f2c0 0001 	movt	r0, #1
   154bc:	68f2      	ldr	r2, [r6, #12]
   154be:	900b      	str	r0, [sp, #44]	; 0x2c
   154c0:	4668      	mov	r0, sp
   154c2:	900a      	str	r0, [sp, #40]	; 0x28
   154c4:	4628      	mov	r0, r5
   154c6:	e9cd 3708 	strd	r3, r7, [sp, #32]
   154ca:	e9cd ce06 	strd	ip, lr, [sp, #24]
   154ce:	4790      	blx	r2
   154d0:	2800      	cmp	r0, #0
   154d2:	d1a5      	bne.n	15420 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   154d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   154d8:	2202      	movs	r2, #2
   154da:	68cb      	ldr	r3, [r1, #12]
   154dc:	f24e 218c 	movw	r1, #57996	; 0xe28c
   154e0:	f2c0 0101 	movt	r1, #1
   154e4:	4798      	blx	r3
   154e6:	e79c      	b.n	15422 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

000154e8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   154e8:	b5b0      	push	{r4, r5, r7, lr}
   154ea:	4604      	mov	r4, r0
   154ec:	7a05      	ldrb	r5, [r0, #8]
   154ee:	6840      	ldr	r0, [r0, #4]
   154f0:	b308      	cbz	r0, 15536 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   154f2:	b10d      	cbz	r5, 154f8 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   154f4:	2501      	movs	r5, #1
   154f6:	e01d      	b.n	15534 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   154f8:	2801      	cmp	r0, #1
   154fa:	d110      	bne.n	1551e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   154fc:	7a60      	ldrb	r0, [r4, #9]
   154fe:	b170      	cbz	r0, 1551e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15500:	6821      	ldr	r1, [r4, #0]
   15502:	7808      	ldrb	r0, [r1, #0]
   15504:	0740      	lsls	r0, r0, #29
   15506:	d40a      	bmi.n	1551e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   15508:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1550c:	2201      	movs	r2, #1
   1550e:	68cb      	ldr	r3, [r1, #12]
   15510:	f24e 2193 	movw	r1, #58003	; 0xe293
   15514:	f2c0 0101 	movt	r1, #1
   15518:	2501      	movs	r5, #1
   1551a:	4798      	blx	r3
   1551c:	b950      	cbnz	r0, 15534 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   1551e:	6821      	ldr	r1, [r4, #0]
   15520:	2201      	movs	r2, #1
   15522:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15526:	68cb      	ldr	r3, [r1, #12]
   15528:	f24e 2194 	movw	r1, #58004	; 0xe294
   1552c:	f2c0 0101 	movt	r1, #1
   15530:	4798      	blx	r3
   15532:	4605      	mov	r5, r0
   15534:	7225      	strb	r5, [r4, #8]
   15536:	2d00      	cmp	r5, #0
   15538:	bf18      	it	ne
   1553a:	2501      	movne	r5, #1
   1553c:	4628      	mov	r0, r5
   1553e:	bdb0      	pop	{r4, r5, r7, pc}

00015540 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   15540:	b580      	push	{r7, lr}
   15542:	b082      	sub	sp, #8
   15544:	468c      	mov	ip, r1
   15546:	2100      	movs	r1, #0
   15548:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   1554c:	9101      	str	r1, [sp, #4]
   1554e:	d207      	bcs.n	15560 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   15550:	f88d c004 	strb.w	ip, [sp, #4]
   15554:	a901      	add	r1, sp, #4
   15556:	2201      	movs	r2, #1
   15558:	f7ff fe47 	bl	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   1555c:	b002      	add	sp, #8
   1555e:	bd80      	pop	{r7, pc}
   15560:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   15564:	d210      	bcs.n	15588 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   15566:	ea4f 119c 	mov.w	r1, ip, lsr #6
   1556a:	2306      	movs	r3, #6
   1556c:	2202      	movs	r2, #2
   1556e:	f363 115f 	bfi	r1, r3, #5, #27
   15572:	f362 1c9f 	bfi	ip, r2, #6, #26
   15576:	f88d c005 	strb.w	ip, [sp, #5]
   1557a:	f88d 1004 	strb.w	r1, [sp, #4]
   1557e:	a901      	add	r1, sp, #4
   15580:	f7ff fe33 	bl	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   15584:	b002      	add	sp, #8
   15586:	bd80      	pop	{r7, pc}
   15588:	2202      	movs	r2, #2
   1558a:	4663      	mov	r3, ip
   1558c:	a901      	add	r1, sp, #4
   1558e:	f362 139f 	bfi	r3, r2, #6, #26
   15592:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   15596:	d213      	bcs.n	155c0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   15598:	f88d 3006 	strb.w	r3, [sp, #6]
   1559c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   155a0:	f362 139f 	bfi	r3, r2, #6, #26
   155a4:	f88d 3005 	strb.w	r3, [sp, #5]
   155a8:	ea4f 321c 	mov.w	r2, ip, lsr #12
   155ac:	230e      	movs	r3, #14
   155ae:	f363 121f 	bfi	r2, r3, #4, #28
   155b2:	f88d 2004 	strb.w	r2, [sp, #4]
   155b6:	2203      	movs	r2, #3
   155b8:	f7ff fe17 	bl	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   155bc:	b002      	add	sp, #8
   155be:	bd80      	pop	{r7, pc}
   155c0:	f88d 3007 	strb.w	r3, [sp, #7]
   155c4:	ea4f 139c 	mov.w	r3, ip, lsr #6
   155c8:	f362 139f 	bfi	r3, r2, #6, #26
   155cc:	f88d 3006 	strb.w	r3, [sp, #6]
   155d0:	ea4f 331c 	mov.w	r3, ip, lsr #12
   155d4:	f362 139f 	bfi	r3, r2, #6, #26
   155d8:	22f0      	movs	r2, #240	; 0xf0
   155da:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   155de:	f88d 3005 	strb.w	r3, [sp, #5]
   155e2:	f88d 2004 	strb.w	r2, [sp, #4]
   155e6:	2204      	movs	r2, #4
   155e8:	f7ff fdff 	bl	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   155ec:	b002      	add	sp, #8
   155ee:	bd80      	pop	{r7, pc}

000155f0 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   155f0:	b570      	push	{r4, r5, r6, lr}
   155f2:	b088      	sub	sp, #32
   155f4:	9001      	str	r0, [sp, #4]
   155f6:	aa02      	add	r2, sp, #8
   155f8:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   155fc:	f24e 3160 	movw	r1, #58208	; 0xe360
   15600:	4610      	mov	r0, r2
   15602:	f2c0 0101 	movt	r1, #1
   15606:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   1560a:	a801      	add	r0, sp, #4
   1560c:	f000 f89e 	bl	1574c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15610:	b008      	add	sp, #32
   15612:	bd70      	pop	{r4, r5, r6, pc}

00015614 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   15614:	6800      	ldr	r0, [r0, #0]
   15616:	f7ff bde8 	b.w	151ea <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

0001561a <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   1561a:	6800      	ldr	r0, [r0, #0]
   1561c:	f7ff bf90 	b.w	15540 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00015620 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   15620:	b570      	push	{r4, r5, r6, lr}
   15622:	b088      	sub	sp, #32
   15624:	6800      	ldr	r0, [r0, #0]
   15626:	aa02      	add	r2, sp, #8
   15628:	9001      	str	r0, [sp, #4]
   1562a:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   1562e:	4610      	mov	r0, r2
   15630:	f24e 3160 	movw	r1, #58208	; 0xe360
   15634:	f2c0 0101 	movt	r1, #1
   15638:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   1563c:	a801      	add	r0, sp, #4
   1563e:	f000 f885 	bl	1574c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15642:	b008      	add	sp, #32
   15644:	bd70      	pop	{r4, r5, r6, pc}

00015646 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   15646:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1564a:	b08d      	sub	sp, #52	; 0x34
   1564c:	468c      	mov	ip, r1
   1564e:	6801      	ldr	r1, [r0, #0]
   15650:	f248 5e1f 	movw	lr, #34079	; 0x851f
   15654:	f24e 2097 	movw	r0, #58007	; 0xe297
   15658:	f242 7810 	movw	r8, #10000	; 0x2710
   1565c:	4541      	cmp	r1, r8
   1565e:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   15662:	f2c0 0001 	movt	r0, #1
   15666:	d337      	bcc.n	156d8 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   15668:	f241 7959 	movw	r9, #5977	; 0x1759
   1566c:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   15670:	f10d 0b0c 	add.w	fp, sp, #12
   15674:	2300      	movs	r3, #0
   15676:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   1567a:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1567e:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   15682:	fba1 2409 	umull	r2, r4, r1, r9
   15686:	42b9      	cmp	r1, r7
   15688:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1568c:	fb02 1418 	mls	r4, r2, r8, r1
   15690:	4611      	mov	r1, r2
   15692:	b2a5      	uxth	r5, r4
   15694:	fba5 560e 	umull	r5, r6, r5, lr
   15698:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1569c:	eb0b 0603 	add.w	r6, fp, r3
   156a0:	fb05 441a 	mls	r4, r5, sl, r4
   156a4:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   156a8:	f1a3 0304 	sub.w	r3, r3, #4
   156ac:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   156b0:	b2a4      	uxth	r4, r4
   156b2:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   156b6:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   156ba:	d8e2      	bhi.n	15682 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   156bc:	f103 0427 	add.w	r4, r3, #39	; 0x27
   156c0:	4611      	mov	r1, r2
   156c2:	2963      	cmp	r1, #99	; 0x63
   156c4:	dc0b      	bgt.n	156de <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   156c6:	460b      	mov	r3, r1
   156c8:	2b0a      	cmp	r3, #10
   156ca:	db17      	blt.n	156fc <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   156cc:	1ea1      	subs	r1, r4, #2
   156ce:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   156d2:	aa03      	add	r2, sp, #12
   156d4:	5250      	strh	r0, [r2, r1]
   156d6:	e016      	b.n	15706 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   156d8:	2427      	movs	r4, #39	; 0x27
   156da:	2963      	cmp	r1, #99	; 0x63
   156dc:	ddf3      	ble.n	156c6 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   156de:	b28a      	uxth	r2, r1
   156e0:	3c02      	subs	r4, #2
   156e2:	fba2 230e 	umull	r2, r3, r2, lr
   156e6:	2264      	movs	r2, #100	; 0x64
   156e8:	095b      	lsrs	r3, r3, #5
   156ea:	fb03 1112 	mls	r1, r3, r2, r1
   156ee:	aa03      	add	r2, sp, #12
   156f0:	b289      	uxth	r1, r1
   156f2:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   156f6:	5311      	strh	r1, [r2, r4]
   156f8:	2b0a      	cmp	r3, #10
   156fa:	dae7      	bge.n	156cc <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   156fc:	1e61      	subs	r1, r4, #1
   156fe:	aa03      	add	r2, sp, #12
   15700:	f103 0030 	add.w	r0, r3, #48	; 0x30
   15704:	5450      	strb	r0, [r2, r1]
   15706:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   1570a:	aa03      	add	r2, sp, #12
   1570c:	4411      	add	r1, r2
   1570e:	f24e 0264 	movw	r2, #57444	; 0xe064
   15712:	e9cd 1000 	strd	r1, r0, [sp]
   15716:	f2c0 0201 	movt	r2, #1
   1571a:	4660      	mov	r0, ip
   1571c:	2101      	movs	r1, #1
   1571e:	2300      	movs	r3, #0
   15720:	f000 f8f4 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   15724:	b00d      	add	sp, #52	; 0x34
   15726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001572a <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   1572a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1572e:	b086      	sub	sp, #24
   15730:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   15734:	466a      	mov	r2, sp
   15736:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   1573a:	4613      	mov	r3, r2
   1573c:	4660      	mov	r0, ip
   1573e:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   15742:	f000 f803 	bl	1574c <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   15746:	b006      	add	sp, #24
   15748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001574c <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   1574c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15750:	b08b      	sub	sp, #44	; 0x2c
   15752:	2303      	movs	r3, #3
   15754:	6897      	ldr	r7, [r2, #8]
   15756:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   1575a:	2320      	movs	r3, #32
   1575c:	9303      	str	r3, [sp, #12]
   1575e:	2300      	movs	r3, #0
   15760:	2f00      	cmp	r7, #0
   15762:	9302      	str	r3, [sp, #8]
   15764:	e9cd 0108 	strd	r0, r1, [sp, #32]
   15768:	9306      	str	r3, [sp, #24]
   1576a:	9304      	str	r3, [sp, #16]
   1576c:	d07c      	beq.n	15868 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   1576e:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   15772:	e9d2 9400 	ldrd	r9, r4, [r2]
   15776:	45a3      	cmp	fp, r4
   15778:	bf88      	it	hi
   1577a:	46a3      	movhi	fp, r4
   1577c:	f1bb 0f00 	cmp.w	fp, #0
   15780:	f000 809b 	beq.w	158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15784:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   15788:	68cd      	ldr	r5, [r1, #12]
   1578a:	9201      	str	r2, [sp, #4]
   1578c:	e9d9 3200 	ldrd	r3, r2, [r9]
   15790:	4619      	mov	r1, r3
   15792:	47a8      	blx	r5
   15794:	2800      	cmp	r0, #0
   15796:	f040 809e 	bne.w	158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1579a:	464d      	mov	r5, r9
   1579c:	f04f 0a01 	mov.w	sl, #1
   157a0:	f04f 0800 	mov.w	r8, #0
   157a4:	f04f 0910 	mov.w	r9, #16
   157a8:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   157ac:	6841      	ldr	r1, [r0, #4]
   157ae:	9103      	str	r1, [sp, #12]
   157b0:	7f01      	ldrb	r1, [r0, #28]
   157b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   157b6:	6881      	ldr	r1, [r0, #8]
   157b8:	9102      	str	r1, [sp, #8]
   157ba:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   157be:	b18a      	cbz	r2, 157e4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   157c0:	2a02      	cmp	r2, #2
   157c2:	d011      	beq.n	157e8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   157c4:	9a01      	ldr	r2, [sp, #4]
   157c6:	4291      	cmp	r1, r2
   157c8:	f080 8098 	bcs.w	158fc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   157cc:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   157d0:	f245 6347 	movw	r3, #22087	; 0x5647
   157d4:	f2c0 0301 	movt	r3, #1
   157d8:	6852      	ldr	r2, [r2, #4]
   157da:	429a      	cmp	r2, r3
   157dc:	d104      	bne.n	157e8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   157de:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   157e2:	6809      	ldr	r1, [r1, #0]
   157e4:	2201      	movs	r2, #1
   157e6:	e000      	b.n	157ea <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   157e8:	2200      	movs	r2, #0
   157ea:	e9cd 2104 	strd	r2, r1, [sp, #16]
   157ee:	f857 1009 	ldr.w	r1, [r7, r9]
   157f2:	68c0      	ldr	r0, [r0, #12]
   157f4:	b180      	cbz	r0, 15818 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   157f6:	2802      	cmp	r0, #2
   157f8:	d010      	beq.n	1581c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   157fa:	9801      	ldr	r0, [sp, #4]
   157fc:	4281      	cmp	r1, r0
   157fe:	d27d      	bcs.n	158fc <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   15800:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   15804:	f245 6247 	movw	r2, #22087	; 0x5647
   15808:	f2c0 0201 	movt	r2, #1
   1580c:	6840      	ldr	r0, [r0, #4]
   1580e:	4290      	cmp	r0, r2
   15810:	d104      	bne.n	1581c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   15812:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15816:	6801      	ldr	r1, [r0, #0]
   15818:	2001      	movs	r0, #1
   1581a:	e000      	b.n	1581e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   1581c:	2000      	movs	r0, #0
   1581e:	eb07 0209 	add.w	r2, r7, r9
   15822:	e9cd 0106 	strd	r0, r1, [sp, #24]
   15826:	9801      	ldr	r0, [sp, #4]
   15828:	f852 1c10 	ldr.w	r1, [r2, #-16]
   1582c:	4281      	cmp	r1, r0
   1582e:	d25d      	bcs.n	158ec <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   15830:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   15834:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   15838:	684a      	ldr	r2, [r1, #4]
   1583a:	a902      	add	r1, sp, #8
   1583c:	4790      	blx	r2
   1583e:	2800      	cmp	r0, #0
   15840:	d149      	bne.n	158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15842:	45da      	cmp	sl, fp
   15844:	d24b      	bcs.n	158de <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   15846:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   1584a:	eb05 0208 	add.w	r2, r5, r8
   1584e:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   15852:	68db      	ldr	r3, [r3, #12]
   15854:	4798      	blx	r3
   15856:	f109 0920 	add.w	r9, r9, #32
   1585a:	f108 0808 	add.w	r8, r8, #8
   1585e:	f10a 0a01 	add.w	sl, sl, #1
   15862:	2800      	cmp	r0, #0
   15864:	d0a0      	beq.n	157a8 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   15866:	e036      	b.n	158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15868:	6956      	ldr	r6, [r2, #20]
   1586a:	e9d2 9400 	ldrd	r9, r4, [r2]
   1586e:	42a6      	cmp	r6, r4
   15870:	bf88      	it	hi
   15872:	4626      	movhi	r6, r4
   15874:	b30e      	cbz	r6, 158ba <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   15876:	6917      	ldr	r7, [r2, #16]
   15878:	e9d9 3200 	ldrd	r3, r2, [r9]
   1587c:	68cd      	ldr	r5, [r1, #12]
   1587e:	4619      	mov	r1, r3
   15880:	47a8      	blx	r5
   15882:	bb40      	cbnz	r0, 158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   15884:	f10d 0808 	add.w	r8, sp, #8
   15888:	2500      	movs	r5, #0
   1588a:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   1588e:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   15892:	684a      	ldr	r2, [r1, #4]
   15894:	4641      	mov	r1, r8
   15896:	4790      	blx	r2
   15898:	b9e8      	cbnz	r0, 158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1589a:	f105 0a01 	add.w	sl, r5, #1
   1589e:	45b2      	cmp	sl, r6
   158a0:	d20d      	bcs.n	158be <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   158a2:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   158a6:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   158aa:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   158ae:	68db      	ldr	r3, [r3, #12]
   158b0:	4798      	blx	r3
   158b2:	2800      	cmp	r0, #0
   158b4:	4655      	mov	r5, sl
   158b6:	d0e8      	beq.n	1588a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   158b8:	e00d      	b.n	158d6 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   158ba:	f04f 0a00 	mov.w	sl, #0
   158be:	4554      	cmp	r4, sl
   158c0:	d910      	bls.n	158e4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   158c2:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   158c6:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   158ca:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   158ce:	6852      	ldr	r2, [r2, #4]
   158d0:	68db      	ldr	r3, [r3, #12]
   158d2:	4798      	blx	r3
   158d4:	b130      	cbz	r0, 158e4 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   158d6:	2001      	movs	r0, #1
   158d8:	b00b      	add	sp, #44	; 0x2c
   158da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158de:	46a9      	mov	r9, r5
   158e0:	4554      	cmp	r4, sl
   158e2:	d8ee      	bhi.n	158c2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   158e4:	2000      	movs	r0, #0
   158e6:	b00b      	add	sp, #44	; 0x2c
   158e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158ec:	f24e 3090 	movw	r0, #58256	; 0xe390
   158f0:	f2c0 0001 	movt	r0, #1
   158f4:	9a01      	ldr	r2, [sp, #4]
   158f6:	f7ff fc47 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   158fa:	defe      	udf	#254	; 0xfe
   158fc:	f24e 30a0 	movw	r0, #58272	; 0xe3a0
   15900:	f2c0 0001 	movt	r0, #1
   15904:	9a01      	ldr	r2, [sp, #4]
   15906:	f7ff fc3f 	bl	15188 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   1590a:	defe      	udf	#254	; 0xfe

0001590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   1590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15910:	b083      	sub	sp, #12
   15912:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   15916:	469a      	mov	sl, r3
   15918:	4604      	mov	r4, r0
   1591a:	b1e1      	cbz	r1, 15956 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   1591c:	f8d4 e000 	ldr.w	lr, [r4]
   15920:	f04f 082b 	mov.w	r8, #43	; 0x2b
   15924:	f01e 0101 	ands.w	r1, lr, #1
   15928:	bf08      	it	eq
   1592a:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   1592e:	eb01 0907 	add.w	r9, r1, r7
   15932:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15936:	d517      	bpl.n	15968 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   15938:	f1ba 0f00 	cmp.w	sl, #0
   1593c:	d033      	beq.n	159a6 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   1593e:	f1aa 0101 	sub.w	r1, sl, #1
   15942:	f00a 0c03 	and.w	ip, sl, #3
   15946:	2903      	cmp	r1, #3
   15948:	d22f      	bcs.n	159aa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   1594a:	2100      	movs	r1, #0
   1594c:	4613      	mov	r3, r2
   1594e:	f1bc 0f00 	cmp.w	ip, #0
   15952:	d152      	bne.n	159fa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   15954:	e069      	b.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15956:	f8d4 e000 	ldr.w	lr, [r4]
   1595a:	f107 0901 	add.w	r9, r7, #1
   1595e:	f04f 082d 	mov.w	r8, #45	; 0x2d
   15962:	ea5f 714e 	movs.w	r1, lr, lsl #29
   15966:	d4e7      	bmi.n	15938 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   15968:	f04f 0a00 	mov.w	sl, #0
   1596c:	2200      	movs	r2, #0
   1596e:	68a0      	ldr	r0, [r4, #8]
   15970:	2801      	cmp	r0, #1
   15972:	d161      	bne.n	15a38 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   15974:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   15978:	45cb      	cmp	fp, r9
   1597a:	d95d      	bls.n	15a38 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   1597c:	ea5f 700e 	movs.w	r0, lr, lsl #28
   15980:	d46e      	bmi.n	15a60 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   15982:	9202      	str	r2, [sp, #8]
   15984:	ebab 0109 	sub.w	r1, fp, r9
   15988:	f894 2020 	ldrb.w	r2, [r4, #32]
   1598c:	2000      	movs	r0, #0
   1598e:	46a9      	mov	r9, r5
   15990:	460e      	mov	r6, r1
   15992:	2a03      	cmp	r2, #3
   15994:	bf08      	it	eq
   15996:	2201      	moveq	r2, #1
   15998:	e8df f002 	tbb	[pc, r2]
   1599c:	02840287 	.word	0x02840287
   159a0:	2600      	movs	r6, #0
   159a2:	4608      	mov	r0, r1
   159a4:	e081      	b.n	15aaa <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   159a6:	2100      	movs	r1, #0
   159a8:	e03f      	b.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   159aa:	ebac 060a 	sub.w	r6, ip, sl
   159ae:	2100      	movs	r1, #0
   159b0:	4693      	mov	fp, r2
   159b2:	4613      	mov	r3, r2
   159b4:	e9cd 7501 	strd	r7, r5, [sp, #4]
   159b8:	781a      	ldrb	r2, [r3, #0]
   159ba:	785d      	ldrb	r5, [r3, #1]
   159bc:	7898      	ldrb	r0, [r3, #2]
   159be:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   159c2:	78df      	ldrb	r7, [r3, #3]
   159c4:	2a80      	cmp	r2, #128	; 0x80
   159c6:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   159ca:	bf08      	it	eq
   159cc:	3101      	addeq	r1, #1
   159ce:	2a80      	cmp	r2, #128	; 0x80
   159d0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   159d4:	bf08      	it	eq
   159d6:	3101      	addeq	r1, #1
   159d8:	2880      	cmp	r0, #128	; 0x80
   159da:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   159de:	bf08      	it	eq
   159e0:	3101      	addeq	r1, #1
   159e2:	2880      	cmp	r0, #128	; 0x80
   159e4:	bf08      	it	eq
   159e6:	3101      	addeq	r1, #1
   159e8:	3304      	adds	r3, #4
   159ea:	3604      	adds	r6, #4
   159ec:	d1e4      	bne.n	159b8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   159ee:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   159f2:	465a      	mov	r2, fp
   159f4:	f1bc 0f00 	cmp.w	ip, #0
   159f8:	d017      	beq.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   159fa:	7818      	ldrb	r0, [r3, #0]
   159fc:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15a00:	2880      	cmp	r0, #128	; 0x80
   15a02:	bf08      	it	eq
   15a04:	3101      	addeq	r1, #1
   15a06:	f1bc 0f01 	cmp.w	ip, #1
   15a0a:	d00e      	beq.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15a0c:	7858      	ldrb	r0, [r3, #1]
   15a0e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15a12:	2880      	cmp	r0, #128	; 0x80
   15a14:	bf08      	it	eq
   15a16:	3101      	addeq	r1, #1
   15a18:	f1bc 0f02 	cmp.w	ip, #2
   15a1c:	d005      	beq.n	15a2a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   15a1e:	7898      	ldrb	r0, [r3, #2]
   15a20:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15a24:	2880      	cmp	r0, #128	; 0x80
   15a26:	bf08      	it	eq
   15a28:	3101      	addeq	r1, #1
   15a2a:	eb09 000a 	add.w	r0, r9, sl
   15a2e:	eba0 0901 	sub.w	r9, r0, r1
   15a32:	68a0      	ldr	r0, [r4, #8]
   15a34:	2801      	cmp	r0, #1
   15a36:	d09d      	beq.n	15974 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   15a38:	4620      	mov	r0, r4
   15a3a:	4641      	mov	r1, r8
   15a3c:	4653      	mov	r3, sl
   15a3e:	f000 f893 	bl	15b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15a42:	b120      	cbz	r0, 15a4e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   15a44:	2601      	movs	r6, #1
   15a46:	4630      	mov	r0, r6
   15a48:	b003      	add	sp, #12
   15a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a4e:	69e1      	ldr	r1, [r4, #28]
   15a50:	463a      	mov	r2, r7
   15a52:	69a0      	ldr	r0, [r4, #24]
   15a54:	68cb      	ldr	r3, [r1, #12]
   15a56:	4629      	mov	r1, r5
   15a58:	b003      	add	sp, #12
   15a5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a5e:	4718      	bx	r3
   15a60:	6860      	ldr	r0, [r4, #4]
   15a62:	2601      	movs	r6, #1
   15a64:	9002      	str	r0, [sp, #8]
   15a66:	2030      	movs	r0, #48	; 0x30
   15a68:	f894 1020 	ldrb.w	r1, [r4, #32]
   15a6c:	4653      	mov	r3, sl
   15a6e:	6060      	str	r0, [r4, #4]
   15a70:	4620      	mov	r0, r4
   15a72:	9101      	str	r1, [sp, #4]
   15a74:	4641      	mov	r1, r8
   15a76:	f884 6020 	strb.w	r6, [r4, #32]
   15a7a:	f000 f875 	bl	15b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15a7e:	2800      	cmp	r0, #0
   15a80:	d1e1      	bne.n	15a46 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15a82:	f894 2020 	ldrb.w	r2, [r4, #32]
   15a86:	ebab 0109 	sub.w	r1, fp, r9
   15a8a:	2000      	movs	r0, #0
   15a8c:	46a9      	mov	r9, r5
   15a8e:	2a03      	cmp	r2, #3
   15a90:	bf08      	it	eq
   15a92:	2201      	moveq	r2, #1
   15a94:	460e      	mov	r6, r1
   15a96:	e8df f002 	tbb	[pc, r2]
   15a9a:	0235      	.short	0x0235
   15a9c:	0232      	.short	0x0232
   15a9e:	2600      	movs	r6, #0
   15aa0:	4608      	mov	r0, r1
   15aa2:	e02f      	b.n	15b04 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   15aa4:	0848      	lsrs	r0, r1, #1
   15aa6:	3101      	adds	r1, #1
   15aa8:	084e      	lsrs	r6, r1, #1
   15aaa:	1c45      	adds	r5, r0, #1
   15aac:	3d01      	subs	r5, #1
   15aae:	d007      	beq.n	15ac0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   15ab0:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15ab4:	6861      	ldr	r1, [r4, #4]
   15ab6:	6912      	ldr	r2, [r2, #16]
   15ab8:	4790      	blx	r2
   15aba:	2800      	cmp	r0, #0
   15abc:	d0f6      	beq.n	15aac <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   15abe:	e7c1      	b.n	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15ac0:	9a02      	ldr	r2, [sp, #8]
   15ac2:	4620      	mov	r0, r4
   15ac4:	4641      	mov	r1, r8
   15ac6:	4653      	mov	r3, sl
   15ac8:	f8d4 b004 	ldr.w	fp, [r4, #4]
   15acc:	f000 f84c 	bl	15b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   15ad0:	2800      	cmp	r0, #0
   15ad2:	d1b7      	bne.n	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15ad4:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15ad8:	463a      	mov	r2, r7
   15ada:	68cb      	ldr	r3, [r1, #12]
   15adc:	4649      	mov	r1, r9
   15ade:	4798      	blx	r3
   15ae0:	2800      	cmp	r0, #0
   15ae2:	d1af      	bne.n	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15ae4:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   15ae8:	1c77      	adds	r7, r6, #1
   15aea:	2601      	movs	r6, #1
   15aec:	3f01      	subs	r7, #1
   15aee:	d02c      	beq.n	15b4a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   15af0:	6922      	ldr	r2, [r4, #16]
   15af2:	4628      	mov	r0, r5
   15af4:	4659      	mov	r1, fp
   15af6:	4790      	blx	r2
   15af8:	2800      	cmp	r0, #0
   15afa:	d0f7      	beq.n	15aec <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   15afc:	e7a3      	b.n	15a46 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15afe:	0848      	lsrs	r0, r1, #1
   15b00:	3101      	adds	r1, #1
   15b02:	084e      	lsrs	r6, r1, #1
   15b04:	1c45      	adds	r5, r0, #1
   15b06:	3d01      	subs	r5, #1
   15b08:	d007      	beq.n	15b1a <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   15b0a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15b0e:	6861      	ldr	r1, [r4, #4]
   15b10:	6912      	ldr	r2, [r2, #16]
   15b12:	4790      	blx	r2
   15b14:	2800      	cmp	r0, #0
   15b16:	d0f6      	beq.n	15b06 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   15b18:	e794      	b.n	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15b1a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15b1e:	463a      	mov	r2, r7
   15b20:	68cb      	ldr	r3, [r1, #12]
   15b22:	4649      	mov	r1, r9
   15b24:	f8d4 8004 	ldr.w	r8, [r4, #4]
   15b28:	4798      	blx	r3
   15b2a:	2800      	cmp	r0, #0
   15b2c:	f47f af8a 	bne.w	15a44 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   15b30:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   15b34:	1c77      	adds	r7, r6, #1
   15b36:	2601      	movs	r6, #1
   15b38:	3f01      	subs	r7, #1
   15b3a:	d00b      	beq.n	15b54 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   15b3c:	692a      	ldr	r2, [r5, #16]
   15b3e:	4648      	mov	r0, r9
   15b40:	4641      	mov	r1, r8
   15b42:	4790      	blx	r2
   15b44:	2800      	cmp	r0, #0
   15b46:	d0f7      	beq.n	15b38 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   15b48:	e77d      	b.n	15a46 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   15b4a:	2600      	movs	r6, #0
   15b4c:	4630      	mov	r0, r6
   15b4e:	b003      	add	sp, #12
   15b50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b54:	9801      	ldr	r0, [sp, #4]
   15b56:	2600      	movs	r6, #0
   15b58:	f884 0020 	strb.w	r0, [r4, #32]
   15b5c:	9802      	ldr	r0, [sp, #8]
   15b5e:	6060      	str	r0, [r4, #4]
   15b60:	4630      	mov	r0, r6
   15b62:	b003      	add	sp, #12
   15b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015b68 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   15b68:	b570      	push	{r4, r5, r6, lr}
   15b6a:	461c      	mov	r4, r3
   15b6c:	4615      	mov	r5, r2
   15b6e:	4606      	mov	r6, r0
   15b70:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   15b74:	d006      	beq.n	15b84 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15b76:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   15b7a:	6912      	ldr	r2, [r2, #16]
   15b7c:	4790      	blx	r2
   15b7e:	b108      	cbz	r0, 15b84 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   15b80:	2001      	movs	r0, #1
   15b82:	bd70      	pop	{r4, r5, r6, pc}
   15b84:	b13d      	cbz	r5, 15b96 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   15b86:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   15b8a:	4622      	mov	r2, r4
   15b8c:	68cb      	ldr	r3, [r1, #12]
   15b8e:	4629      	mov	r1, r5
   15b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15b94:	4718      	bx	r3
   15b96:	2000      	movs	r0, #0
   15b98:	bd70      	pop	{r4, r5, r6, pc}
	...

00015b9c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   15b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ba0:	b081      	sub	sp, #4
   15ba2:	f8d0 e008 	ldr.w	lr, [r0, #8]
   15ba6:	4682      	mov	sl, r0
   15ba8:	6900      	ldr	r0, [r0, #16]
   15baa:	4691      	mov	r9, r2
   15bac:	4688      	mov	r8, r1
   15bae:	f1be 0f01 	cmp.w	lr, #1
   15bb2:	d111      	bne.n	15bd8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   15bb4:	2801      	cmp	r0, #1
   15bb6:	d012      	beq.n	15bde <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   15bb8:	f1b9 0f00 	cmp.w	r9, #0
   15bbc:	f000 80c5 	beq.w	15d4a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   15bc0:	f1a9 0101 	sub.w	r1, r9, #1
   15bc4:	f009 0003 	and.w	r0, r9, #3
   15bc8:	2903      	cmp	r1, #3
   15bca:	d267      	bcs.n	15c9c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   15bcc:	2100      	movs	r1, #0
   15bce:	4642      	mov	r2, r8
   15bd0:	2800      	cmp	r0, #0
   15bd2:	f040 8083 	bne.w	15cdc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   15bd6:	e097      	b.n	15d08 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15bd8:	2801      	cmp	r0, #1
   15bda:	f040 80bd 	bne.w	15d58 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15bde:	f1b9 0f00 	cmp.w	r9, #0
   15be2:	d054      	beq.n	15c8e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   15be4:	f8da 0014 	ldr.w	r0, [sl, #20]
   15be8:	eb08 0109 	add.w	r1, r8, r9
   15bec:	2200      	movs	r2, #0
   15bee:	4647      	mov	r7, r8
   15bf0:	1c43      	adds	r3, r0, #1
   15bf2:	4646      	mov	r6, r8
   15bf4:	463c      	mov	r4, r7
   15bf6:	f914 5b01 	ldrsb.w	r5, [r4], #1
   15bfa:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   15bfe:	b2e8      	uxtb	r0, r5
   15c00:	dc2e      	bgt.n	15c60 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15c02:	428c      	cmp	r4, r1
   15c04:	d01a      	beq.n	15c3c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   15c06:	787d      	ldrb	r5, [r7, #1]
   15c08:	1cbc      	adds	r4, r7, #2
   15c0a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   15c0e:	4627      	mov	r7, r4
   15c10:	f000 0b1f 	and.w	fp, r0, #31
   15c14:	28df      	cmp	r0, #223	; 0xdf
   15c16:	d917      	bls.n	15c48 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   15c18:	428f      	cmp	r7, r1
   15c1a:	d018      	beq.n	15c4e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   15c1c:	f817 4b01 	ldrb.w	r4, [r7], #1
   15c20:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   15c24:	463c      	mov	r4, r7
   15c26:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15c2a:	28f0      	cmp	r0, #240	; 0xf0
   15c2c:	d316      	bcc.n	15c5c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   15c2e:	428f      	cmp	r7, r1
   15c30:	d020      	beq.n	15c74 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   15c32:	f817 0b01 	ldrb.w	r0, [r7], #1
   15c36:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   15c3a:	e01d      	b.n	15c78 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   15c3c:	2500      	movs	r5, #0
   15c3e:	460f      	mov	r7, r1
   15c40:	f000 0b1f 	and.w	fp, r0, #31
   15c44:	28df      	cmp	r0, #223	; 0xdf
   15c46:	d8e7      	bhi.n	15c18 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   15c48:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   15c4c:	e008      	b.n	15c60 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   15c4e:	f04f 0c00 	mov.w	ip, #0
   15c52:	460f      	mov	r7, r1
   15c54:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   15c58:	28f0      	cmp	r0, #240	; 0xf0
   15c5a:	d2e8      	bcs.n	15c2e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   15c5c:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   15c60:	4627      	mov	r7, r4
   15c62:	3b01      	subs	r3, #1
   15c64:	d065      	beq.n	15d32 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   15c66:	1b90      	subs	r0, r2, r6
   15c68:	42b9      	cmp	r1, r7
   15c6a:	eb00 0207 	add.w	r2, r0, r7
   15c6e:	463e      	mov	r6, r7
   15c70:	d1c0      	bne.n	15bf4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   15c72:	e061      	b.n	15d38 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15c74:	2000      	movs	r0, #0
   15c76:	4627      	mov	r7, r4
   15c78:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   15c7c:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   15c80:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   15c84:	4428      	add	r0, r5
   15c86:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15c8a:	d1ea      	bne.n	15c62 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   15c8c:	e054      	b.n	15d38 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   15c8e:	2200      	movs	r2, #0
   15c90:	f1be 0f01 	cmp.w	lr, #1
   15c94:	d054      	beq.n	15d40 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15c96:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15c9a:	e062      	b.n	15d62 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   15c9c:	eba0 0309 	sub.w	r3, r0, r9
   15ca0:	2100      	movs	r1, #0
   15ca2:	4642      	mov	r2, r8
   15ca4:	7817      	ldrb	r7, [r2, #0]
   15ca6:	7856      	ldrb	r6, [r2, #1]
   15ca8:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   15cac:	7895      	ldrb	r5, [r2, #2]
   15cae:	78d4      	ldrb	r4, [r2, #3]
   15cb0:	2f80      	cmp	r7, #128	; 0x80
   15cb2:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   15cb6:	bf08      	it	eq
   15cb8:	3101      	addeq	r1, #1
   15cba:	2f80      	cmp	r7, #128	; 0x80
   15cbc:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   15cc0:	bf08      	it	eq
   15cc2:	3101      	addeq	r1, #1
   15cc4:	2f80      	cmp	r7, #128	; 0x80
   15cc6:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   15cca:	bf08      	it	eq
   15ccc:	3101      	addeq	r1, #1
   15cce:	2f80      	cmp	r7, #128	; 0x80
   15cd0:	bf08      	it	eq
   15cd2:	3101      	addeq	r1, #1
   15cd4:	3204      	adds	r2, #4
   15cd6:	3304      	adds	r3, #4
   15cd8:	d1e4      	bne.n	15ca4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   15cda:	b1a8      	cbz	r0, 15d08 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15cdc:	7813      	ldrb	r3, [r2, #0]
   15cde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15ce2:	2b80      	cmp	r3, #128	; 0x80
   15ce4:	bf08      	it	eq
   15ce6:	3101      	addeq	r1, #1
   15ce8:	2801      	cmp	r0, #1
   15cea:	d00d      	beq.n	15d08 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15cec:	7853      	ldrb	r3, [r2, #1]
   15cee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   15cf2:	2b80      	cmp	r3, #128	; 0x80
   15cf4:	bf08      	it	eq
   15cf6:	3101      	addeq	r1, #1
   15cf8:	2802      	cmp	r0, #2
   15cfa:	d005      	beq.n	15d08 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   15cfc:	7890      	ldrb	r0, [r2, #2]
   15cfe:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   15d02:	2880      	cmp	r0, #128	; 0x80
   15d04:	bf08      	it	eq
   15d06:	3101      	addeq	r1, #1
   15d08:	f8da 000c 	ldr.w	r0, [sl, #12]
   15d0c:	eba9 0101 	sub.w	r1, r9, r1
   15d10:	4281      	cmp	r1, r0
   15d12:	d221      	bcs.n	15d58 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   15d14:	f1b9 0f00 	cmp.w	r9, #0
   15d18:	d029      	beq.n	15d6e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   15d1a:	f1a9 0101 	sub.w	r1, r9, #1
   15d1e:	f009 0c03 	and.w	ip, r9, #3
   15d22:	2903      	cmp	r1, #3
   15d24:	d225      	bcs.n	15d72 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   15d26:	2100      	movs	r1, #0
   15d28:	4643      	mov	r3, r8
   15d2a:	f1bc 0f00 	cmp.w	ip, #0
   15d2e:	d142      	bne.n	15db6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   15d30:	e059      	b.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d32:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   15d36:	d167      	bne.n	15e08 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   15d38:	464a      	mov	r2, r9
   15d3a:	f1be 0f01 	cmp.w	lr, #1
   15d3e:	d1aa      	bne.n	15c96 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15d40:	4691      	mov	r9, r2
   15d42:	f1b9 0f00 	cmp.w	r9, #0
   15d46:	f47f af3b 	bne.w	15bc0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   15d4a:	2100      	movs	r1, #0
   15d4c:	f8da 000c 	ldr.w	r0, [sl, #12]
   15d50:	eba9 0101 	sub.w	r1, r9, r1
   15d54:	4281      	cmp	r1, r0
   15d56:	d3dd      	bcc.n	15d14 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   15d58:	f8da 101c 	ldr.w	r1, [sl, #28]
   15d5c:	464a      	mov	r2, r9
   15d5e:	f8da 0018 	ldr.w	r0, [sl, #24]
   15d62:	68cb      	ldr	r3, [r1, #12]
   15d64:	4641      	mov	r1, r8
   15d66:	b001      	add	sp, #4
   15d68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d6c:	4718      	bx	r3
   15d6e:	2100      	movs	r1, #0
   15d70:	e039      	b.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15d72:	ebac 0709 	sub.w	r7, ip, r9
   15d76:	2100      	movs	r1, #0
   15d78:	4643      	mov	r3, r8
   15d7a:	781e      	ldrb	r6, [r3, #0]
   15d7c:	785d      	ldrb	r5, [r3, #1]
   15d7e:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   15d82:	789c      	ldrb	r4, [r3, #2]
   15d84:	78da      	ldrb	r2, [r3, #3]
   15d86:	2e80      	cmp	r6, #128	; 0x80
   15d88:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   15d8c:	bf08      	it	eq
   15d8e:	3101      	addeq	r1, #1
   15d90:	2e80      	cmp	r6, #128	; 0x80
   15d92:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   15d96:	bf08      	it	eq
   15d98:	3101      	addeq	r1, #1
   15d9a:	2e80      	cmp	r6, #128	; 0x80
   15d9c:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15da0:	bf08      	it	eq
   15da2:	3101      	addeq	r1, #1
   15da4:	2a80      	cmp	r2, #128	; 0x80
   15da6:	bf08      	it	eq
   15da8:	3101      	addeq	r1, #1
   15daa:	3304      	adds	r3, #4
   15dac:	3704      	adds	r7, #4
   15dae:	d1e4      	bne.n	15d7a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   15db0:	f1bc 0f00 	cmp.w	ip, #0
   15db4:	d017      	beq.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15db6:	781a      	ldrb	r2, [r3, #0]
   15db8:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15dbc:	2a80      	cmp	r2, #128	; 0x80
   15dbe:	bf08      	it	eq
   15dc0:	3101      	addeq	r1, #1
   15dc2:	f1bc 0f01 	cmp.w	ip, #1
   15dc6:	d00e      	beq.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15dc8:	785a      	ldrb	r2, [r3, #1]
   15dca:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15dce:	2a80      	cmp	r2, #128	; 0x80
   15dd0:	bf08      	it	eq
   15dd2:	3101      	addeq	r1, #1
   15dd4:	f1bc 0f02 	cmp.w	ip, #2
   15dd8:	d005      	beq.n	15de6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   15dda:	789a      	ldrb	r2, [r3, #2]
   15ddc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   15de0:	2a80      	cmp	r2, #128	; 0x80
   15de2:	bf08      	it	eq
   15de4:	3101      	addeq	r1, #1
   15de6:	f89a 3020 	ldrb.w	r3, [sl, #32]
   15dea:	eba1 0109 	sub.w	r1, r1, r9
   15dee:	4401      	add	r1, r0
   15df0:	2000      	movs	r0, #0
   15df2:	1eda      	subs	r2, r3, #3
   15df4:	bf18      	it	ne
   15df6:	461a      	movne	r2, r3
   15df8:	460e      	mov	r6, r1
   15dfa:	e8df f002 	tbb	[pc, r2]
   15dfe:	0216      	.short	0x0216
   15e00:	0213      	.short	0x0213
   15e02:	2600      	movs	r6, #0
   15e04:	4608      	mov	r0, r1
   15e06:	e010      	b.n	15e2a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   15e08:	2a00      	cmp	r2, #0
   15e0a:	bf18      	it	ne
   15e0c:	454a      	cmpne	r2, r9
   15e0e:	d134      	bne.n	15e7a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   15e10:	4640      	mov	r0, r8
   15e12:	2800      	cmp	r0, #0
   15e14:	bf0c      	ite	eq
   15e16:	464a      	moveq	r2, r9
   15e18:	4680      	movne	r8, r0
   15e1a:	f1be 0f01 	cmp.w	lr, #1
   15e1e:	f43f af8f 	beq.w	15d40 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15e22:	e738      	b.n	15c96 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   15e24:	0848      	lsrs	r0, r1, #1
   15e26:	3101      	adds	r1, #1
   15e28:	084e      	lsrs	r6, r1, #1
   15e2a:	1c44      	adds	r4, r0, #1
   15e2c:	3c01      	subs	r4, #1
   15e2e:	d008      	beq.n	15e42 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   15e30:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   15e34:	f8da 1004 	ldr.w	r1, [sl, #4]
   15e38:	6912      	ldr	r2, [r2, #16]
   15e3a:	4790      	blx	r2
   15e3c:	2800      	cmp	r0, #0
   15e3e:	d0f5      	beq.n	15e2c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   15e40:	e013      	b.n	15e6a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15e42:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   15e46:	464a      	mov	r2, r9
   15e48:	68cb      	ldr	r3, [r1, #12]
   15e4a:	4641      	mov	r1, r8
   15e4c:	f8da 7004 	ldr.w	r7, [sl, #4]
   15e50:	4798      	blx	r3
   15e52:	b950      	cbnz	r0, 15e6a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   15e54:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   15e58:	3601      	adds	r6, #1
   15e5a:	3e01      	subs	r6, #1
   15e5c:	d009      	beq.n	15e72 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   15e5e:	692a      	ldr	r2, [r5, #16]
   15e60:	4620      	mov	r0, r4
   15e62:	4639      	mov	r1, r7
   15e64:	4790      	blx	r2
   15e66:	2800      	cmp	r0, #0
   15e68:	d0f7      	beq.n	15e5a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   15e6a:	2001      	movs	r0, #1
   15e6c:	b001      	add	sp, #4
   15e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e72:	2000      	movs	r0, #0
   15e74:	b001      	add	sp, #4
   15e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e7a:	454a      	cmp	r2, r9
   15e7c:	d204      	bcs.n	15e88 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   15e7e:	f918 0002 	ldrsb.w	r0, [r8, r2]
   15e82:	f110 0f40 	cmn.w	r0, #64	; 0x40
   15e86:	dac3      	bge.n	15e10 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   15e88:	2000      	movs	r0, #0
   15e8a:	2200      	movs	r2, #0
   15e8c:	2800      	cmp	r0, #0
   15e8e:	bf0c      	ite	eq
   15e90:	464a      	moveq	r2, r9
   15e92:	4680      	movne	r8, r0
   15e94:	f1be 0f01 	cmp.w	lr, #1
   15e98:	f43f af52 	beq.w	15d40 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   15e9c:	e6fb      	b.n	15c96 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

00015e9e <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   15e9e:	7800      	ldrb	r0, [r0, #0]
   15ea0:	f3c0 1000 	ubfx	r0, r0, #4, #1
   15ea4:	4770      	bx	lr

00015ea6 <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   15ea6:	7800      	ldrb	r0, [r0, #0]
   15ea8:	f3c0 1040 	ubfx	r0, r0, #5, #1
   15eac:	4770      	bx	lr

00015eae <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   15eae:	b570      	push	{r4, r5, r6, lr}
   15eb0:	460d      	mov	r5, r1
   15eb2:	4606      	mov	r6, r0
   15eb4:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15eb8:	461c      	mov	r4, r3
   15eba:	68cb      	ldr	r3, [r1, #12]
   15ebc:	4611      	mov	r1, r2
   15ebe:	4622      	mov	r2, r4
   15ec0:	4798      	blx	r3
   15ec2:	7230      	strb	r0, [r6, #8]
   15ec4:	fab4 f084 	clz	r0, r4
   15ec8:	0940      	lsrs	r0, r0, #5
   15eca:	7270      	strb	r0, [r6, #9]
   15ecc:	2000      	movs	r0, #0
   15ece:	e9c6 5000 	strd	r5, r0, [r6]
   15ed2:	bd70      	pop	{r4, r5, r6, pc}

00015ed4 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   15ed4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15ed8:	b085      	sub	sp, #20
   15eda:	460c      	mov	r4, r1
   15edc:	4605      	mov	r5, r0
   15ede:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   15ee2:	690a      	ldr	r2, [r1, #16]
   15ee4:	2127      	movs	r1, #39	; 0x27
   15ee6:	4790      	blx	r2
   15ee8:	b118      	cbz	r0, 15ef2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   15eea:	2001      	movs	r0, #1
   15eec:	b005      	add	sp, #20
   15eee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   15ef2:	6829      	ldr	r1, [r5, #0]
   15ef4:	a801      	add	r0, sp, #4
   15ef6:	2201      	movs	r2, #1
   15ef8:	f7ff f878 	bl	14fec <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   15efc:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   15f00:	f04f 091c 	mov.w	r9, #28
   15f04:	f8dd 800c 	ldr.w	r8, [sp, #12]
   15f08:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   15f0c:	f89d 6010 	ldrb.w	r6, [sp, #16]
   15f10:	d139      	bne.n	15f86 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   15f12:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   15f16:	2f02      	cmp	r7, #2
   15f18:	f0c0 806b 	bcc.w	15ff2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   15f1c:	d00c      	beq.n	15f38 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   15f1e:	b2f0      	uxtb	r0, r6
   15f20:	2604      	movs	r6, #4
   15f22:	2703      	movs	r7, #3
   15f24:	215c      	movs	r1, #92	; 0x5c
   15f26:	e8df f000 	tbb	[pc, r0]
   15f2a:	0364      	.short	0x0364
   15f2c:	09242010 	.word	0x09242010
   15f30:	2600      	movs	r6, #0
   15f32:	2703      	movs	r7, #3
   15f34:	217d      	movs	r1, #125	; 0x7d
   15f36:	e001      	b.n	15f3c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f38:	2701      	movs	r7, #1
   15f3a:	215c      	movs	r1, #92	; 0x5c
   15f3c:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f40:	6912      	ldr	r2, [r2, #16]
   15f42:	4790      	blx	r2
   15f44:	2800      	cmp	r0, #0
   15f46:	d0e6      	beq.n	15f16 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   15f48:	e7cf      	b.n	15eea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15f4a:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15f4e:	2602      	movs	r6, #2
   15f50:	2703      	movs	r7, #3
   15f52:	f1b8 0f00 	cmp.w	r8, #0
   15f56:	fa25 f100 	lsr.w	r1, r5, r0
   15f5a:	bf08      	it	eq
   15f5c:	2601      	moveq	r6, #1
   15f5e:	bf18      	it	ne
   15f60:	f1a8 0801 	subne.w	r8, r8, #1
   15f64:	f367 111f 	bfi	r1, r7, #4, #28
   15f68:	e7e8      	b.n	15f3c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f6a:	2602      	movs	r6, #2
   15f6c:	2703      	movs	r7, #3
   15f6e:	217b      	movs	r1, #123	; 0x7b
   15f70:	e7e4      	b.n	15f3c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f72:	2703      	movs	r7, #3
   15f74:	2175      	movs	r1, #117	; 0x75
   15f76:	2603      	movs	r6, #3
   15f78:	e7e0      	b.n	15f3c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   15f7a:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   15f7e:	6912      	ldr	r2, [r2, #16]
   15f80:	4790      	blx	r2
   15f82:	2800      	cmp	r0, #0
   15f84:	d1b1      	bne.n	15eea <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   15f86:	4638      	mov	r0, r7
   15f88:	2701      	movs	r7, #1
   15f8a:	215c      	movs	r1, #92	; 0x5c
   15f8c:	e8df f000 	tbb	[pc, r0]
   15f90:	06020331 	.word	0x06020331
   15f94:	e7f1      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f96:	2700      	movs	r7, #0
   15f98:	4629      	mov	r1, r5
   15f9a:	e7ee      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15f9c:	b2f0      	uxtb	r0, r6
   15f9e:	2604      	movs	r6, #4
   15fa0:	2703      	movs	r7, #3
   15fa2:	215c      	movs	r1, #92	; 0x5c
   15fa4:	e8df f000 	tbb	[pc, r0]
   15fa8:	1d080425 	.word	0x1d080425
   15fac:	0321      	.short	0x0321
   15fae:	e7e4      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fb0:	2600      	movs	r6, #0
   15fb2:	2703      	movs	r7, #3
   15fb4:	217d      	movs	r1, #125	; 0x7d
   15fb6:	e7e0      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fb8:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   15fbc:	2602      	movs	r6, #2
   15fbe:	2703      	movs	r7, #3
   15fc0:	fa25 f000 	lsr.w	r0, r5, r0
   15fc4:	f000 000f 	and.w	r0, r0, #15
   15fc8:	f100 0157 	add.w	r1, r0, #87	; 0x57
   15fcc:	280a      	cmp	r0, #10
   15fce:	bf38      	it	cc
   15fd0:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   15fd4:	f1b8 0f00 	cmp.w	r8, #0
   15fd8:	bf0c      	ite	eq
   15fda:	2601      	moveq	r6, #1
   15fdc:	f1a8 0801 	subne.w	r8, r8, #1
   15fe0:	e7cb      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fe2:	2602      	movs	r6, #2
   15fe4:	2703      	movs	r7, #3
   15fe6:	217b      	movs	r1, #123	; 0x7b
   15fe8:	e7c7      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15fea:	2703      	movs	r7, #3
   15fec:	2175      	movs	r1, #117	; 0x75
   15fee:	2603      	movs	r6, #3
   15ff0:	e7c3      	b.n	15f7a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   15ff2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   15ff6:	690a      	ldr	r2, [r1, #16]
   15ff8:	2127      	movs	r1, #39	; 0x27
   15ffa:	b005      	add	sp, #20
   15ffc:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16000:	4710      	bx	r2

00016002 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   16002:	b08c      	sub	sp, #48	; 0x30
   16004:	e9cd 0100 	strd	r0, r1, [sp]
   16008:	2002      	movs	r0, #2
   1600a:	a908      	add	r1, sp, #32
   1600c:	9007      	str	r0, [sp, #28]
   1600e:	9106      	str	r1, [sp, #24]
   16010:	2100      	movs	r1, #0
   16012:	9105      	str	r1, [sp, #20]
   16014:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16018:	f24e 30f0 	movw	r0, #58352	; 0xe3f0
   1601c:	f2c0 0001 	movt	r0, #1
   16020:	a901      	add	r1, sp, #4
   16022:	9002      	str	r0, [sp, #8]
   16024:	f646 504f 	movw	r0, #27983	; 0x6d4f
   16028:	f2c0 0001 	movt	r0, #1
   1602c:	900b      	str	r0, [sp, #44]	; 0x2c
   1602e:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16032:	4668      	mov	r0, sp
   16034:	f24e 4100 	movw	r1, #58368	; 0xe400
   16038:	9008      	str	r0, [sp, #32]
   1603a:	a802      	add	r0, sp, #8
   1603c:	f2c0 0101 	movt	r1, #1
   16040:	f7ff f8c2 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16044:	defe      	udf	#254	; 0xfe

00016046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   16046:	b08c      	sub	sp, #48	; 0x30
   16048:	e9cd 0100 	strd	r0, r1, [sp]
   1604c:	2002      	movs	r0, #2
   1604e:	a908      	add	r1, sp, #32
   16050:	9007      	str	r0, [sp, #28]
   16052:	9106      	str	r1, [sp, #24]
   16054:	2100      	movs	r1, #0
   16056:	9105      	str	r1, [sp, #20]
   16058:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1605c:	f24e 4034 	movw	r0, #58420	; 0xe434
   16060:	f2c0 0001 	movt	r0, #1
   16064:	a901      	add	r1, sp, #4
   16066:	9002      	str	r0, [sp, #8]
   16068:	f646 504f 	movw	r0, #27983	; 0x6d4f
   1606c:	f2c0 0001 	movt	r0, #1
   16070:	900b      	str	r0, [sp, #44]	; 0x2c
   16072:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16076:	4668      	mov	r0, sp
   16078:	f24e 4144 	movw	r1, #58436	; 0xe444
   1607c:	9008      	str	r0, [sp, #32]
   1607e:	a802      	add	r0, sp, #8
   16080:	f2c0 0101 	movt	r1, #1
   16084:	f7ff f8a0 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16088:	defe      	udf	#254	; 0xfe

0001608a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   1608a:	b09a      	sub	sp, #104	; 0x68
   1608c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   16090:	e9cd 2300 	strd	r2, r3, [sp]
   16094:	d802      	bhi.n	1609c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   16096:	2501      	movs	r5, #1
   16098:	468c      	mov	ip, r1
   1609a:	e03e      	b.n	1611a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   1609c:	f1c1 0e00 	rsb	lr, r1, #0
   160a0:	f44f 7c80 	mov.w	ip, #256	; 0x100
   160a4:	458c      	cmp	ip, r1
   160a6:	d205      	bcs.n	160b4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   160a8:	f910 400c 	ldrsb.w	r4, [r0, ip]
   160ac:	f114 0f41 	cmn.w	r4, #65	; 0x41
   160b0:	f300 8108 	bgt.w	162c4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   160b4:	eb0e 040c 	add.w	r4, lr, ip
   160b8:	f1ac 0601 	sub.w	r6, ip, #1
   160bc:	2c01      	cmp	r4, #1
   160be:	d02a      	beq.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160c0:	428e      	cmp	r6, r1
   160c2:	d206      	bcs.n	160d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   160c4:	eb00 050c 	add.w	r5, r0, ip
   160c8:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   160cc:	f115 0f41 	cmn.w	r5, #65	; 0x41
   160d0:	dc21      	bgt.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160d2:	f1ac 0602 	sub.w	r6, ip, #2
   160d6:	2c02      	cmp	r4, #2
   160d8:	d01d      	beq.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160da:	428e      	cmp	r6, r1
   160dc:	d206      	bcs.n	160ec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   160de:	eb00 050c 	add.w	r5, r0, ip
   160e2:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   160e6:	f115 0f41 	cmn.w	r5, #65	; 0x41
   160ea:	dc14      	bgt.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160ec:	f1ac 0603 	sub.w	r6, ip, #3
   160f0:	2c03      	cmp	r4, #3
   160f2:	d010      	beq.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   160f4:	428e      	cmp	r6, r1
   160f6:	d206      	bcs.n	16106 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   160f8:	eb00 050c 	add.w	r5, r0, ip
   160fc:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   16100:	f115 0f41 	cmn.w	r5, #65	; 0x41
   16104:	dc07      	bgt.n	16116 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   16106:	f1bc 0c04 	subs.w	ip, ip, #4
   1610a:	f04f 0500 	mov.w	r5, #0
   1610e:	d004      	beq.n	1611a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16110:	2c04      	cmp	r4, #4
   16112:	d1c7      	bne.n	160a4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   16114:	e001      	b.n	1611a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   16116:	2500      	movs	r5, #0
   16118:	46b4      	mov	ip, r6
   1611a:	2605      	movs	r6, #5
   1611c:	2d00      	cmp	r5, #0
   1611e:	f24e 5512 	movw	r5, #58642	; 0xe512
   16122:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   16126:	bf18      	it	ne
   16128:	2600      	movne	r6, #0
   1612a:	9605      	str	r6, [sp, #20]
   1612c:	f24e 0664 	movw	r6, #57444	; 0xe064
   16130:	f2c0 0501 	movt	r5, #1
   16134:	f2c0 0601 	movt	r6, #1
   16138:	bf18      	it	ne
   1613a:	4635      	movne	r5, r6
   1613c:	428a      	cmp	r2, r1
   1613e:	9504      	str	r5, [sp, #16]
   16140:	bf98      	it	ls
   16142:	428b      	cmpls	r3, r1
   16144:	d92a      	bls.n	1619c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   16146:	428a      	cmp	r2, r1
   16148:	f04f 0003 	mov.w	r0, #3
   1614c:	a910      	add	r1, sp, #64	; 0x40
   1614e:	bf88      	it	hi
   16150:	4613      	movhi	r3, r2
   16152:	900f      	str	r0, [sp, #60]	; 0x3c
   16154:	910e      	str	r1, [sp, #56]	; 0x38
   16156:	2100      	movs	r1, #0
   16158:	910d      	str	r1, [sp, #52]	; 0x34
   1615a:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   1615e:	f24e 5038 	movw	r0, #58680	; 0xe538
   16162:	f2c0 0001 	movt	r0, #1
   16166:	a904      	add	r1, sp, #16
   16168:	900a      	str	r0, [sp, #40]	; 0x28
   1616a:	f646 603d 	movw	r0, #28221	; 0x6e3d
   1616e:	f2c0 0001 	movt	r0, #1
   16172:	9308      	str	r3, [sp, #32]
   16174:	9015      	str	r0, [sp, #84]	; 0x54
   16176:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   1617a:	a802      	add	r0, sp, #8
   1617c:	f24e 5150 	movw	r1, #58704	; 0xe550
   16180:	9012      	str	r0, [sp, #72]	; 0x48
   16182:	f646 504f 	movw	r0, #27983	; 0x6d4f
   16186:	f2c0 0101 	movt	r1, #1
   1618a:	f2c0 0001 	movt	r0, #1
   1618e:	9011      	str	r0, [sp, #68]	; 0x44
   16190:	a808      	add	r0, sp, #32
   16192:	9010      	str	r0, [sp, #64]	; 0x40
   16194:	a80a      	add	r0, sp, #40	; 0x28
   16196:	f7ff f817 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1619a:	defe      	udf	#254	; 0xfe
   1619c:	429a      	cmp	r2, r3
   1619e:	f200 80f1 	bhi.w	16384 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   161a2:	2a00      	cmp	r2, #0
   161a4:	bf18      	it	ne
   161a6:	4291      	cmpne	r1, r2
   161a8:	d109      	bne.n	161be <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   161aa:	461a      	mov	r2, r3
   161ac:	2a00      	cmp	r2, #0
   161ae:	9206      	str	r2, [sp, #24]
   161b0:	bf18      	it	ne
   161b2:	428a      	cmpne	r2, r1
   161b4:	d10e      	bne.n	161d4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   161b6:	4613      	mov	r3, r2
   161b8:	428b      	cmp	r3, r1
   161ba:	d047      	beq.n	1624c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   161bc:	e052      	b.n	16264 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   161be:	d9f5      	bls.n	161ac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   161c0:	5686      	ldrsb	r6, [r0, r2]
   161c2:	f116 0f40 	cmn.w	r6, #64	; 0x40
   161c6:	bfa8      	it	ge
   161c8:	461a      	movge	r2, r3
   161ca:	2a00      	cmp	r2, #0
   161cc:	9206      	str	r2, [sp, #24]
   161ce:	bf18      	it	ne
   161d0:	428a      	cmpne	r2, r1
   161d2:	d0f0      	beq.n	161b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   161d4:	f1a0 0c01 	sub.w	ip, r0, #1
   161d8:	f101 0e02 	add.w	lr, r1, #2
   161dc:	1ccc      	adds	r4, r1, #3
   161de:	1c4d      	adds	r5, r1, #1
   161e0:	1d0e      	adds	r6, r1, #4
   161e2:	428a      	cmp	r2, r1
   161e4:	d206      	bcs.n	161f4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   161e6:	eb0c 0302 	add.w	r3, ip, r2
   161ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
   161ee:	f113 0f41 	cmn.w	r3, #65	; 0x41
   161f2:	dce0      	bgt.n	161b6 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   161f4:	1e53      	subs	r3, r2, #1
   161f6:	bf18      	it	ne
   161f8:	4295      	cmpne	r5, r2
   161fa:	d025      	beq.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   161fc:	428b      	cmp	r3, r1
   161fe:	d204      	bcs.n	1620a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   16200:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   16204:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16208:	dc1e      	bgt.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1620a:	1e93      	subs	r3, r2, #2
   1620c:	bf18      	it	ne
   1620e:	4596      	cmpne	lr, r2
   16210:	d01a      	beq.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16212:	428b      	cmp	r3, r1
   16214:	d206      	bcs.n	16224 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   16216:	eb0c 0702 	add.w	r7, ip, r2
   1621a:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   1621e:	f117 0f41 	cmn.w	r7, #65	; 0x41
   16222:	dc11      	bgt.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16224:	1ed3      	subs	r3, r2, #3
   16226:	bf18      	it	ne
   16228:	4294      	cmpne	r4, r2
   1622a:	d00d      	beq.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1622c:	428b      	cmp	r3, r1
   1622e:	d206      	bcs.n	1623e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   16230:	eb0c 0702 	add.w	r7, ip, r2
   16234:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   16238:	f117 0f41 	cmn.w	r7, #65	; 0x41
   1623c:	dc04      	bgt.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   1623e:	1f13      	subs	r3, r2, #4
   16240:	d002      	beq.n	16248 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   16242:	4296      	cmp	r6, r2
   16244:	461a      	mov	r2, r3
   16246:	d1cc      	bne.n	161e2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   16248:	428b      	cmp	r3, r1
   1624a:	d10b      	bne.n	16264 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   1624c:	f24e 2000 	movw	r0, #57856	; 0xe200
   16250:	f24e 52a0 	movw	r2, #58784	; 0xe5a0
   16254:	f2c0 0001 	movt	r0, #1
   16258:	f2c0 0201 	movt	r2, #1
   1625c:	212b      	movs	r1, #43	; 0x2b
   1625e:	f7fe ff7d 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16262:	defe      	udf	#254	; 0xfe
   16264:	18c5      	adds	r5, r0, r3
   16266:	462e      	mov	r6, r5
   16268:	f916 4b01 	ldrsb.w	r4, [r6], #1
   1626c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   16270:	b2e2      	uxtb	r2, r4
   16272:	dd02      	ble.n	1627a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   16274:	9207      	str	r2, [sp, #28]
   16276:	2101      	movs	r1, #1
   16278:	e04d      	b.n	16316 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1627a:	4408      	add	r0, r1
   1627c:	4286      	cmp	r6, r0
   1627e:	d10b      	bne.n	16298 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   16280:	2500      	movs	r5, #0
   16282:	4606      	mov	r6, r0
   16284:	f002 011f 	and.w	r1, r2, #31
   16288:	2adf      	cmp	r2, #223	; 0xdf
   1628a:	d80d      	bhi.n	162a8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   1628c:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   16290:	2880      	cmp	r0, #128	; 0x80
   16292:	9007      	str	r0, [sp, #28]
   16294:	d333      	bcc.n	162fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   16296:	e034      	b.n	16302 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   16298:	7869      	ldrb	r1, [r5, #1]
   1629a:	1cae      	adds	r6, r5, #2
   1629c:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   162a0:	f002 011f 	and.w	r1, r2, #31
   162a4:	2adf      	cmp	r2, #223	; 0xdf
   162a6:	d9f1      	bls.n	1628c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   162a8:	4286      	cmp	r6, r0
   162aa:	d10d      	bne.n	162c8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   162ac:	2400      	movs	r4, #0
   162ae:	4606      	mov	r6, r0
   162b0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   162b4:	2af0      	cmp	r2, #240	; 0xf0
   162b6:	d20f      	bcs.n	162d8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   162b8:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   162bc:	2880      	cmp	r0, #128	; 0x80
   162be:	9007      	str	r0, [sp, #28]
   162c0:	d31d      	bcc.n	162fe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   162c2:	e01e      	b.n	16302 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   162c4:	2500      	movs	r5, #0
   162c6:	e728      	b.n	1611a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   162c8:	f816 4b01 	ldrb.w	r4, [r6], #1
   162cc:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   162d0:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   162d4:	2af0      	cmp	r2, #240	; 0xf0
   162d6:	d3ef      	bcc.n	162b8 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   162d8:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   162dc:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   162e0:	4286      	cmp	r6, r0
   162e2:	bf1a      	itte	ne
   162e4:	7830      	ldrbne	r0, [r6, #0]
   162e6:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   162ea:	2000      	moveq	r0, #0
   162ec:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   162f0:	4408      	add	r0, r1
   162f2:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   162f6:	d0a9      	beq.n	1624c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   162f8:	2880      	cmp	r0, #128	; 0x80
   162fa:	9007      	str	r0, [sp, #28]
   162fc:	d201      	bcs.n	16302 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   162fe:	2101      	movs	r1, #1
   16300:	e009      	b.n	16316 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   16302:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16306:	d201      	bcs.n	1630c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   16308:	2102      	movs	r1, #2
   1630a:	e004      	b.n	16316 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   1630c:	2104      	movs	r1, #4
   1630e:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   16312:	bf38      	it	cc
   16314:	2103      	movcc	r1, #3
   16316:	4419      	add	r1, r3
   16318:	aa10      	add	r2, sp, #64	; 0x40
   1631a:	a808      	add	r0, sp, #32
   1631c:	e9cd 3108 	strd	r3, r1, [sp, #32]
   16320:	2105      	movs	r1, #5
   16322:	910f      	str	r1, [sp, #60]	; 0x3c
   16324:	920e      	str	r2, [sp, #56]	; 0x38
   16326:	2200      	movs	r2, #0
   16328:	920d      	str	r2, [sp, #52]	; 0x34
   1632a:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   1632e:	f24e 51dc 	movw	r1, #58844	; 0xe5dc
   16332:	f2c0 0101 	movt	r1, #1
   16336:	aa04      	add	r2, sp, #16
   16338:	910a      	str	r1, [sp, #40]	; 0x28
   1633a:	f646 613d 	movw	r1, #28221	; 0x6e3d
   1633e:	f2c0 0101 	movt	r1, #1
   16342:	9119      	str	r1, [sp, #100]	; 0x64
   16344:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   16348:	a902      	add	r1, sp, #8
   1634a:	9116      	str	r1, [sp, #88]	; 0x58
   1634c:	f644 718b 	movw	r1, #20363	; 0x4f8b
   16350:	f2c0 0101 	movt	r1, #1
   16354:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   16358:	f645 60d5 	movw	r0, #24277	; 0x5ed5
   1635c:	f2c0 0001 	movt	r0, #1
   16360:	f24e 6104 	movw	r1, #58884	; 0xe604
   16364:	9013      	str	r0, [sp, #76]	; 0x4c
   16366:	a807      	add	r0, sp, #28
   16368:	9012      	str	r0, [sp, #72]	; 0x48
   1636a:	f646 504f 	movw	r0, #27983	; 0x6d4f
   1636e:	f2c0 0001 	movt	r0, #1
   16372:	f2c0 0101 	movt	r1, #1
   16376:	9011      	str	r0, [sp, #68]	; 0x44
   16378:	a806      	add	r0, sp, #24
   1637a:	9010      	str	r0, [sp, #64]	; 0x40
   1637c:	a80a      	add	r0, sp, #40	; 0x28
   1637e:	f7fe ff23 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16382:	defe      	udf	#254	; 0xfe
   16384:	2004      	movs	r0, #4
   16386:	a910      	add	r1, sp, #64	; 0x40
   16388:	900f      	str	r0, [sp, #60]	; 0x3c
   1638a:	910e      	str	r1, [sp, #56]	; 0x38
   1638c:	2100      	movs	r1, #0
   1638e:	910d      	str	r1, [sp, #52]	; 0x34
   16390:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   16394:	f24e 5070 	movw	r0, #58736	; 0xe570
   16398:	f2c0 0001 	movt	r0, #1
   1639c:	a904      	add	r1, sp, #16
   1639e:	900a      	str	r0, [sp, #40]	; 0x28
   163a0:	f646 603d 	movw	r0, #28221	; 0x6e3d
   163a4:	f2c0 0001 	movt	r0, #1
   163a8:	9017      	str	r0, [sp, #92]	; 0x5c
   163aa:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   163ae:	a802      	add	r0, sp, #8
   163b0:	9014      	str	r0, [sp, #80]	; 0x50
   163b2:	f646 504f 	movw	r0, #27983	; 0x6d4f
   163b6:	a901      	add	r1, sp, #4
   163b8:	f2c0 0001 	movt	r0, #1
   163bc:	9013      	str	r0, [sp, #76]	; 0x4c
   163be:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   163c2:	f24e 5190 	movw	r1, #58768	; 0xe590
   163c6:	4668      	mov	r0, sp
   163c8:	f2c0 0101 	movt	r1, #1
   163cc:	9010      	str	r0, [sp, #64]	; 0x40
   163ce:	a80a      	add	r0, sp, #40	; 0x28
   163d0:	f7fe fefa 	bl	151c8 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   163d4:	defe      	udf	#254	; 0xfe

000163d6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   163d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   163da:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   163de:	d270      	bcs.n	164c2 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   163e0:	f24e 6e24 	movw	lr, #58916	; 0xe624
   163e4:	f24e 6876 	movw	r8, #58998	; 0xe676
   163e8:	fa1f f980 	uxth.w	r9, r0
   163ec:	f2c0 0e01 	movt	lr, #1
   163f0:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   163f4:	f04f 0a00 	mov.w	sl, #0
   163f8:	f2c0 0801 	movt	r8, #1
   163fc:	4675      	mov	r5, lr
   163fe:	786e      	ldrb	r6, [r5, #1]
   16400:	4652      	mov	r2, sl
   16402:	782b      	ldrb	r3, [r5, #0]
   16404:	3502      	adds	r5, #2
   16406:	44b2      	add	sl, r6
   16408:	4563      	cmp	r3, ip
   1640a:	d129      	bne.n	16460 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   1640c:	4592      	cmp	sl, r2
   1640e:	f0c0 8112 	bcc.w	16636 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   16412:	ea4f 035a 	mov.w	r3, sl, lsr #1
   16416:	2b92      	cmp	r3, #146	; 0x92
   16418:	f200 8112 	bhi.w	16640 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   1641c:	eb08 0302 	add.w	r3, r8, r2
   16420:	199a      	adds	r2, r3, r6
   16422:	b31e      	cbz	r6, 1646c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16424:	461f      	mov	r7, r3
   16426:	b2c4      	uxtb	r4, r0
   16428:	f817 1b01 	ldrb.w	r1, [r7], #1
   1642c:	42a1      	cmp	r1, r4
   1642e:	f000 80b6 	beq.w	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16432:	4297      	cmp	r7, r2
   16434:	d01a      	beq.n	1646c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16436:	7859      	ldrb	r1, [r3, #1]
   16438:	42a1      	cmp	r1, r4
   1643a:	f000 80b0 	beq.w	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1643e:	1c99      	adds	r1, r3, #2
   16440:	4291      	cmp	r1, r2
   16442:	d013      	beq.n	1646c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16444:	7899      	ldrb	r1, [r3, #2]
   16446:	42a1      	cmp	r1, r4
   16448:	f000 80a9 	beq.w	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1644c:	1cd9      	adds	r1, r3, #3
   1644e:	4291      	cmp	r1, r2
   16450:	d00c      	beq.n	1646c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   16452:	1d19      	adds	r1, r3, #4
   16454:	78db      	ldrb	r3, [r3, #3]
   16456:	3e04      	subs	r6, #4
   16458:	42a3      	cmp	r3, r4
   1645a:	460b      	mov	r3, r1
   1645c:	d1e1      	bne.n	16422 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   1645e:	e09e      	b.n	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16460:	d808      	bhi.n	16474 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   16462:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   16466:	4295      	cmp	r5, r2
   16468:	d1c9      	bne.n	163fe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   1646a:	e003      	b.n	16474 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   1646c:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   16470:	428d      	cmp	r5, r1
   16472:	d1c4      	bne.n	163fe <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   16474:	f24e 759b 	movw	r5, #59291	; 0xe79b
   16478:	2101      	movs	r1, #1
   1647a:	f2c0 0501 	movt	r5, #1
   1647e:	4628      	mov	r0, r5
   16480:	4602      	mov	r2, r0
   16482:	f812 7b01 	ldrb.w	r7, [r2], #1
   16486:	b27e      	sxtb	r6, r7
   16488:	2e00      	cmp	r6, #0
   1648a:	d404      	bmi.n	16496 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   1648c:	4610      	mov	r0, r2
   1648e:	ebb9 0907 	subs.w	r9, r9, r7
   16492:	d50f      	bpl.n	164b4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   16494:	e0bd      	b.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16496:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   1649a:	429a      	cmp	r2, r3
   1649c:	f000 80db 	beq.w	16656 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   164a0:	7842      	ldrb	r2, [r0, #1]
   164a2:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   164a6:	3002      	adds	r0, #2
   164a8:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   164ac:	ebb9 0907 	subs.w	r9, r9, r7
   164b0:	f100 80af 	bmi.w	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   164b4:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   164b8:	f081 0101 	eor.w	r1, r1, #1
   164bc:	4290      	cmp	r0, r2
   164be:	d1df      	bne.n	16480 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   164c0:	e0a7      	b.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   164c2:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   164c6:	d26f      	bcs.n	165a8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   164c8:	f64e 0ed5 	movw	lr, #59605	; 0xe8d5
   164cc:	f64e 181b 	movw	r8, #59675	; 0xe91b
   164d0:	fa1f f980 	uxth.w	r9, r0
   164d4:	f2c0 0e01 	movt	lr, #1
   164d8:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   164dc:	f04f 0a00 	mov.w	sl, #0
   164e0:	f2c0 0801 	movt	r8, #1
   164e4:	4675      	mov	r5, lr
   164e6:	786e      	ldrb	r6, [r5, #1]
   164e8:	4652      	mov	r2, sl
   164ea:	782b      	ldrb	r3, [r5, #0]
   164ec:	3502      	adds	r5, #2
   164ee:	44b2      	add	sl, r6
   164f0:	4563      	cmp	r3, ip
   164f2:	d125      	bne.n	16540 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   164f4:	4592      	cmp	sl, r2
   164f6:	f0c0 809e 	bcc.w	16636 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   164fa:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   164fe:	f200 80a5 	bhi.w	1664c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   16502:	eb08 0302 	add.w	r3, r8, r2
   16506:	199a      	adds	r2, r3, r6
   16508:	b306      	cbz	r6, 1654c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1650a:	461f      	mov	r7, r3
   1650c:	b2c4      	uxtb	r4, r0
   1650e:	f817 1b01 	ldrb.w	r1, [r7], #1
   16512:	42a1      	cmp	r1, r4
   16514:	d043      	beq.n	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16516:	4297      	cmp	r7, r2
   16518:	d018      	beq.n	1654c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   1651a:	7859      	ldrb	r1, [r3, #1]
   1651c:	42a1      	cmp	r1, r4
   1651e:	d03e      	beq.n	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16520:	1c99      	adds	r1, r3, #2
   16522:	4291      	cmp	r1, r2
   16524:	d012      	beq.n	1654c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16526:	7899      	ldrb	r1, [r3, #2]
   16528:	42a1      	cmp	r1, r4
   1652a:	d038      	beq.n	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   1652c:	1cd9      	adds	r1, r3, #3
   1652e:	4291      	cmp	r1, r2
   16530:	d00c      	beq.n	1654c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   16532:	1d19      	adds	r1, r3, #4
   16534:	78db      	ldrb	r3, [r3, #3]
   16536:	3e04      	subs	r6, #4
   16538:	42a3      	cmp	r3, r4
   1653a:	460b      	mov	r3, r1
   1653c:	d1e4      	bne.n	16508 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   1653e:	e02e      	b.n	1659e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   16540:	d808      	bhi.n	16554 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   16542:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   16546:	4295      	cmp	r5, r2
   16548:	d1cd      	bne.n	164e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   1654a:	e003      	b.n	16554 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   1654c:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   16550:	428d      	cmp	r5, r1
   16552:	d1c8      	bne.n	164e6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   16554:	f64e 15c1 	movw	r5, #59841	; 0xe9c1
   16558:	2101      	movs	r1, #1
   1655a:	f2c0 0501 	movt	r5, #1
   1655e:	4628      	mov	r0, r5
   16560:	4602      	mov	r2, r0
   16562:	f812 7b01 	ldrb.w	r7, [r2], #1
   16566:	b27e      	sxtb	r6, r7
   16568:	2e00      	cmp	r6, #0
   1656a:	d40a      	bmi.n	16582 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   1656c:	4610      	mov	r0, r2
   1656e:	ebb9 0907 	subs.w	r9, r9, r7
   16572:	d44e      	bmi.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16574:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   16578:	f081 0101 	eor.w	r1, r1, #1
   1657c:	4290      	cmp	r0, r2
   1657e:	d1ef      	bne.n	16560 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   16580:	e047      	b.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   16582:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   16586:	429a      	cmp	r2, r3
   16588:	d065      	beq.n	16656 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   1658a:	7842      	ldrb	r2, [r0, #1]
   1658c:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   16590:	3002      	adds	r0, #2
   16592:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   16596:	ebb9 0907 	subs.w	r9, r9, r7
   1659a:	d5eb      	bpl.n	16574 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   1659c:	e039      	b.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   1659e:	2100      	movs	r1, #0
   165a0:	f001 0001 	and.w	r0, r1, #1
   165a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   165a8:	f240 51e2 	movw	r1, #1506	; 0x5e2
   165ac:	f240 63e2 	movw	r3, #1762	; 0x6e2
   165b0:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   165b4:	1842      	adds	r2, r0, r1
   165b6:	f2c0 030b 	movt	r3, #11
   165ba:	2100      	movs	r1, #0
   165bc:	429a      	cmp	r2, r3
   165be:	d328      	bcc.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165c0:	f241 421f 	movw	r2, #5151	; 0x141f
   165c4:	f640 431f 	movw	r3, #3103	; 0xc1f
   165c8:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   165cc:	4402      	add	r2, r0
   165ce:	429a      	cmp	r2, r3
   165d0:	bf21      	itttt	cs
   165d2:	f243 125e 	movwcs	r2, #12638	; 0x315e
   165d6:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   165da:	4402      	addcs	r2, r0
   165dc:	2a0e      	cmpcs	r2, #14
   165de:	d318      	bcc.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   165e4:	f64b 031e 	movw	r3, #47134	; 0xb81e
   165e8:	f2c0 021f 	movt	r2, #31
   165ec:	f2c0 0302 	movt	r3, #2
   165f0:	4002      	ands	r2, r0
   165f2:	429a      	cmp	r2, r3
   165f4:	d00d      	beq.n	16612 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   165f6:	f645 1229 	movw	r2, #22825	; 0x5929
   165fa:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   165fe:	4402      	add	r2, r0
   16600:	2a29      	cmp	r2, #41	; 0x29
   16602:	bf21      	itttt	cs
   16604:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   16608:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   1660c:	4402      	addcs	r2, r0
   1660e:	2a0b      	cmpcs	r2, #11
   16610:	d203      	bcs.n	1661a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   16612:	f001 0001 	and.w	r0, r1, #1
   16616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1661a:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   1661e:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   16622:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   16626:	2000      	movs	r0, #0
   16628:	f2c0 0202 	movt	r2, #2
   1662c:	4291      	cmp	r1, r2
   1662e:	bf88      	it	hi
   16630:	2001      	movhi	r0, #1
   16632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   16636:	4610      	mov	r0, r2
   16638:	4651      	mov	r1, sl
   1663a:	f7ff fd04 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1663e:	defe      	udf	#254	; 0xfe
   16640:	4650      	mov	r0, sl
   16642:	f240 1125 	movw	r1, #293	; 0x125
   16646:	f7ff fcdc 	bl	16002 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   1664a:	defe      	udf	#254	; 0xfe
   1664c:	4650      	mov	r0, sl
   1664e:	21a6      	movs	r1, #166	; 0xa6
   16650:	f7ff fcd7 	bl	16002 <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   16654:	defe      	udf	#254	; 0xfe
   16656:	f24e 2000 	movw	r0, #57856	; 0xe200
   1665a:	f24e 6214 	movw	r2, #58900	; 0xe614
   1665e:	f2c0 0001 	movt	r0, #1
   16662:	f2c0 0201 	movt	r2, #1
   16666:	212b      	movs	r1, #43	; 0x2b
   16668:	f7fe fd78 	bl	1515c <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1666c:	defe      	udf	#254	; 0xfe

0001666e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   1666e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16672:	b0a3      	sub	sp, #140	; 0x8c
   16674:	468c      	mov	ip, r1
   16676:	6809      	ldr	r1, [r1, #0]
   16678:	06ca      	lsls	r2, r1, #27
   1667a:	d44a      	bmi.n	16712 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   1667c:	6804      	ldr	r4, [r0, #0]
   1667e:	0688      	lsls	r0, r1, #26
   16680:	f100 8089 	bmi.w	16796 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   16684:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16688:	f24e 2297 	movw	r2, #58007	; 0xe297
   1668c:	f242 7810 	movw	r8, #10000	; 0x2710
   16690:	4544      	cmp	r4, r8
   16692:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16696:	f2c0 0201 	movt	r2, #1
   1669a:	f0c0 80e3 	bcc.w	16864 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   1669e:	f241 7959 	movw	r9, #5977	; 0x1759
   166a2:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   166a6:	f10d 0b0c 	add.w	fp, sp, #12
   166aa:	2300      	movs	r3, #0
   166ac:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   166b0:	f04f 0a64 	mov.w	sl, #100	; 0x64
   166b4:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   166b8:	fba4 0109 	umull	r0, r1, r4, r9
   166bc:	42bc      	cmp	r4, r7
   166be:	ea4f 3051 	mov.w	r0, r1, lsr #13
   166c2:	fb00 4118 	mls	r1, r0, r8, r4
   166c6:	4604      	mov	r4, r0
   166c8:	b28d      	uxth	r5, r1
   166ca:	fba5 560e 	umull	r5, r6, r5, lr
   166ce:	ea4f 1556 	mov.w	r5, r6, lsr #5
   166d2:	eb0b 0603 	add.w	r6, fp, r3
   166d6:	fb05 111a 	mls	r1, r5, sl, r1
   166da:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   166de:	f1a3 0304 	sub.w	r3, r3, #4
   166e2:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   166e6:	b289      	uxth	r1, r1
   166e8:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   166ec:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   166f0:	d8e2      	bhi.n	166b8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   166f2:	f103 0127 	add.w	r1, r3, #39	; 0x27
   166f6:	4604      	mov	r4, r0
   166f8:	2c63      	cmp	r4, #99	; 0x63
   166fa:	f300 80b7 	bgt.w	1686c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   166fe:	4623      	mov	r3, r4
   16700:	2b0a      	cmp	r3, #10
   16702:	f2c0 80c3 	blt.w	1688c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   16706:	1e88      	subs	r0, r1, #2
   16708:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   1670c:	aa03      	add	r2, sp, #12
   1670e:	5211      	strh	r1, [r2, r0]
   16710:	e0c1      	b.n	16896 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   16712:	6800      	ldr	r0, [r0, #0]
   16714:	f10d 0e0c 	add.w	lr, sp, #12
   16718:	2381      	movs	r3, #129	; 0x81
   1671a:	2100      	movs	r1, #0
   1671c:	f000 020f 	and.w	r2, r0, #15
   16720:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16724:	2a0a      	cmp	r2, #10
   16726:	bf38      	it	cc
   16728:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1672c:	eb0e 0203 	add.w	r2, lr, r3
   16730:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16734:	f802 4c02 	strb.w	r4, [r2, #-2]
   16738:	d071      	beq.n	1681e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   1673a:	0904      	lsrs	r4, r0, #4
   1673c:	f004 040f 	and.w	r4, r4, #15
   16740:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16744:	2c0a      	cmp	r4, #10
   16746:	bf38      	it	cc
   16748:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1674c:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16750:	f802 5c03 	strb.w	r5, [r2, #-3]
   16754:	d079      	beq.n	1684a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   16756:	0a04      	lsrs	r4, r0, #8
   16758:	f004 040f 	and.w	r4, r4, #15
   1675c:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16760:	2c0a      	cmp	r4, #10
   16762:	bf38      	it	cc
   16764:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16768:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1676c:	f802 5c04 	strb.w	r5, [r2, #-4]
   16770:	d073      	beq.n	1685a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   16772:	0b04      	lsrs	r4, r0, #12
   16774:	3b04      	subs	r3, #4
   16776:	f004 040f 	and.w	r4, r4, #15
   1677a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1677e:	2c0a      	cmp	r4, #10
   16780:	bf38      	it	cc
   16782:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16786:	f802 5c05 	strb.w	r5, [r2, #-5]
   1678a:	0c02      	lsrs	r2, r0, #16
   1678c:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16790:	4610      	mov	r0, r2
   16792:	d1c3      	bne.n	1671c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   16794:	e03f      	b.n	16816 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   16796:	f10d 0e0c 	add.w	lr, sp, #12
   1679a:	2381      	movs	r3, #129	; 0x81
   1679c:	2100      	movs	r1, #0
   1679e:	f004 000f 	and.w	r0, r4, #15
   167a2:	eb0e 0203 	add.w	r2, lr, r3
   167a6:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167aa:	280a      	cmp	r0, #10
   167ac:	bf38      	it	cc
   167ae:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167b2:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   167b6:	f802 5c02 	strb.w	r5, [r2, #-2]
   167ba:	d030      	beq.n	1681e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   167bc:	0920      	lsrs	r0, r4, #4
   167be:	f000 000f 	and.w	r0, r0, #15
   167c2:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167c6:	280a      	cmp	r0, #10
   167c8:	bf38      	it	cc
   167ca:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167ce:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   167d2:	f802 5c03 	strb.w	r5, [r2, #-3]
   167d6:	d038      	beq.n	1684a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   167d8:	0a20      	lsrs	r0, r4, #8
   167da:	f000 000f 	and.w	r0, r0, #15
   167de:	f100 0537 	add.w	r5, r0, #55	; 0x37
   167e2:	280a      	cmp	r0, #10
   167e4:	bf38      	it	cc
   167e6:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   167ea:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   167ee:	f802 5c04 	strb.w	r5, [r2, #-4]
   167f2:	d032      	beq.n	1685a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   167f4:	0b20      	lsrs	r0, r4, #12
   167f6:	3b04      	subs	r3, #4
   167f8:	f000 000f 	and.w	r0, r0, #15
   167fc:	f100 0537 	add.w	r5, r0, #55	; 0x37
   16800:	280a      	cmp	r0, #10
   16802:	bf38      	it	cc
   16804:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   16808:	0c20      	lsrs	r0, r4, #16
   1680a:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   1680e:	4604      	mov	r4, r0
   16810:	f802 5c05 	strb.w	r5, [r2, #-5]
   16814:	d1c3      	bne.n	1679e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   16816:	1e58      	subs	r0, r3, #1
   16818:	2881      	cmp	r0, #129	; 0x81
   1681a:	d305      	bcc.n	16828 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1681c:	e019      	b.n	16852 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   1681e:	1e59      	subs	r1, r3, #1
   16820:	1e98      	subs	r0, r3, #2
   16822:	460b      	mov	r3, r1
   16824:	2881      	cmp	r0, #129	; 0x81
   16826:	d214      	bcs.n	16852 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16828:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   1682c:	f24e 2295 	movw	r2, #58005	; 0xe295
   16830:	4470      	add	r0, lr
   16832:	f2c0 0201 	movt	r2, #1
   16836:	e9cd 0100 	strd	r0, r1, [sp]
   1683a:	4660      	mov	r0, ip
   1683c:	2101      	movs	r1, #1
   1683e:	2302      	movs	r3, #2
   16840:	f7ff f864 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16844:	b023      	add	sp, #140	; 0x8c
   16846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1684a:	1ed8      	subs	r0, r3, #3
   1684c:	3b02      	subs	r3, #2
   1684e:	2881      	cmp	r0, #129	; 0x81
   16850:	d3ea      	bcc.n	16828 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16852:	2180      	movs	r1, #128	; 0x80
   16854:	f7ff fbf7 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16858:	defe      	udf	#254	; 0xfe
   1685a:	1f18      	subs	r0, r3, #4
   1685c:	3b03      	subs	r3, #3
   1685e:	2881      	cmp	r0, #129	; 0x81
   16860:	d3e2      	bcc.n	16828 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   16862:	e7f6      	b.n	16852 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   16864:	2127      	movs	r1, #39	; 0x27
   16866:	2c63      	cmp	r4, #99	; 0x63
   16868:	f77f af49 	ble.w	166fe <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   1686c:	b2a0      	uxth	r0, r4
   1686e:	3902      	subs	r1, #2
   16870:	fba0 030e 	umull	r0, r3, r0, lr
   16874:	af03      	add	r7, sp, #12
   16876:	2064      	movs	r0, #100	; 0x64
   16878:	095b      	lsrs	r3, r3, #5
   1687a:	fb03 4010 	mls	r0, r3, r0, r4
   1687e:	b280      	uxth	r0, r0
   16880:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16884:	5278      	strh	r0, [r7, r1]
   16886:	2b0a      	cmp	r3, #10
   16888:	f6bf af3d 	bge.w	16706 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   1688c:	1e48      	subs	r0, r1, #1
   1688e:	aa03      	add	r2, sp, #12
   16890:	f103 0130 	add.w	r1, r3, #48	; 0x30
   16894:	5411      	strb	r1, [r2, r0]
   16896:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   1689a:	aa03      	add	r2, sp, #12
   1689c:	4410      	add	r0, r2
   1689e:	f24e 0264 	movw	r2, #57444	; 0xe064
   168a2:	e9cd 0100 	strd	r0, r1, [sp]
   168a6:	f2c0 0201 	movt	r2, #1
   168aa:	4660      	mov	r0, ip
   168ac:	2101      	movs	r1, #1
   168ae:	2300      	movs	r3, #0
   168b0:	f7ff f82c 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   168b4:	b023      	add	sp, #140	; 0x8c
   168b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000168ba <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   168ba:	b580      	push	{r7, lr}
   168bc:	b0a2      	sub	sp, #136	; 0x88
   168be:	7802      	ldrb	r2, [r0, #0]
   168c0:	468c      	mov	ip, r1
   168c2:	f002 030f 	and.w	r3, r2, #15
   168c6:	f103 0057 	add.w	r0, r3, #87	; 0x57
   168ca:	2b0a      	cmp	r3, #10
   168cc:	bf38      	it	cc
   168ce:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   168d2:	2300      	movs	r3, #0
   168d4:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   168d8:	d00b      	beq.n	168f2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   168da:	0913      	lsrs	r3, r2, #4
   168dc:	f103 0157 	add.w	r1, r3, #87	; 0x57
   168e0:	2aa0      	cmp	r2, #160	; 0xa0
   168e2:	bf38      	it	cc
   168e4:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   168e8:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   168ec:	227e      	movs	r2, #126	; 0x7e
   168ee:	2302      	movs	r3, #2
   168f0:	e001      	b.n	168f6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   168f2:	227f      	movs	r2, #127	; 0x7f
   168f4:	2301      	movs	r3, #1
   168f6:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   168fa:	a802      	add	r0, sp, #8
   168fc:	4410      	add	r0, r2
   168fe:	f24e 2295 	movw	r2, #58005	; 0xe295
   16902:	e9cd 0300 	strd	r0, r3, [sp]
   16906:	f2c0 0201 	movt	r2, #1
   1690a:	4660      	mov	r0, ip
   1690c:	2101      	movs	r1, #1
   1690e:	2302      	movs	r3, #2
   16910:	f7fe fffc 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16914:	b022      	add	sp, #136	; 0x88
   16916:	bd80      	pop	{r7, pc}

00016918 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   16918:	b580      	push	{r7, lr}
   1691a:	b0a2      	sub	sp, #136	; 0x88
   1691c:	7802      	ldrb	r2, [r0, #0]
   1691e:	468c      	mov	ip, r1
   16920:	f002 030f 	and.w	r3, r2, #15
   16924:	f103 0037 	add.w	r0, r3, #55	; 0x37
   16928:	2b0a      	cmp	r3, #10
   1692a:	bf38      	it	cc
   1692c:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   16930:	2300      	movs	r3, #0
   16932:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   16936:	d00b      	beq.n	16950 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   16938:	0913      	lsrs	r3, r2, #4
   1693a:	f103 0137 	add.w	r1, r3, #55	; 0x37
   1693e:	2aa0      	cmp	r2, #160	; 0xa0
   16940:	bf38      	it	cc
   16942:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   16946:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   1694a:	227e      	movs	r2, #126	; 0x7e
   1694c:	2302      	movs	r3, #2
   1694e:	e001      	b.n	16954 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   16950:	227f      	movs	r2, #127	; 0x7f
   16952:	2301      	movs	r3, #1
   16954:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   16958:	a802      	add	r0, sp, #8
   1695a:	4410      	add	r0, r2
   1695c:	f24e 2295 	movw	r2, #58005	; 0xe295
   16960:	e9cd 0300 	strd	r0, r3, [sp]
   16964:	f2c0 0201 	movt	r2, #1
   16968:	4660      	mov	r0, ip
   1696a:	2101      	movs	r1, #1
   1696c:	2302      	movs	r3, #2
   1696e:	f7fe ffcd 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16972:	b022      	add	sp, #136	; 0x88
   16974:	bd80      	pop	{r7, pc}

00016976 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   16976:	b580      	push	{r7, lr}
   16978:	b0a2      	sub	sp, #136	; 0x88
   1697a:	8800      	ldrh	r0, [r0, #0]
   1697c:	468c      	mov	ip, r1
   1697e:	f000 020f 	and.w	r2, r0, #15
   16982:	f102 0357 	add.w	r3, r2, #87	; 0x57
   16986:	2a0a      	cmp	r2, #10
   16988:	bf38      	it	cc
   1698a:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   1698e:	2200      	movs	r2, #0
   16990:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   16994:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   16998:	d02a      	beq.n	169f0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   1699a:	0903      	lsrs	r3, r0, #4
   1699c:	f003 030f 	and.w	r3, r3, #15
   169a0:	f103 0157 	add.w	r1, r3, #87	; 0x57
   169a4:	2b0a      	cmp	r3, #10
   169a6:	bf38      	it	cc
   169a8:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   169ac:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   169b0:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   169b4:	d031      	beq.n	16a1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   169b6:	0a01      	lsrs	r1, r0, #8
   169b8:	f001 010f 	and.w	r1, r1, #15
   169bc:	f101 0257 	add.w	r2, r1, #87	; 0x57
   169c0:	290a      	cmp	r1, #10
   169c2:	bf38      	it	cc
   169c4:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   169c8:	2100      	movs	r1, #0
   169ca:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   169ce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   169d2:	d027      	beq.n	16a24 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   169d4:	0b00      	lsrs	r0, r0, #12
   169d6:	f100 0157 	add.w	r1, r0, #87	; 0x57
   169da:	280a      	cmp	r0, #10
   169dc:	bf38      	it	cc
   169de:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   169e2:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   169e6:	227d      	movs	r2, #125	; 0x7d
   169e8:	207c      	movs	r0, #124	; 0x7c
   169ea:	2881      	cmp	r0, #129	; 0x81
   169ec:	d304      	bcc.n	169f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   169ee:	e01d      	b.n	16a2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   169f0:	2280      	movs	r2, #128	; 0x80
   169f2:	207f      	movs	r0, #127	; 0x7f
   169f4:	2881      	cmp	r0, #129	; 0x81
   169f6:	d219      	bcs.n	16a2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   169f8:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   169fc:	ab02      	add	r3, sp, #8
   169fe:	4418      	add	r0, r3
   16a00:	2101      	movs	r1, #1
   16a02:	e9cd 0200 	strd	r0, r2, [sp]
   16a06:	f24e 2295 	movw	r2, #58005	; 0xe295
   16a0a:	f2c0 0201 	movt	r2, #1
   16a0e:	4660      	mov	r0, ip
   16a10:	2302      	movs	r3, #2
   16a12:	f7fe ff7b 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16a16:	b022      	add	sp, #136	; 0x88
   16a18:	bd80      	pop	{r7, pc}
   16a1a:	207e      	movs	r0, #126	; 0x7e
   16a1c:	227f      	movs	r2, #127	; 0x7f
   16a1e:	2881      	cmp	r0, #129	; 0x81
   16a20:	d3ea      	bcc.n	169f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16a22:	e003      	b.n	16a2c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   16a24:	207d      	movs	r0, #125	; 0x7d
   16a26:	227e      	movs	r2, #126	; 0x7e
   16a28:	2881      	cmp	r0, #129	; 0x81
   16a2a:	d3e5      	bcc.n	169f8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   16a2c:	2180      	movs	r1, #128	; 0x80
   16a2e:	f7ff fb0a 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16a32:	defe      	udf	#254	; 0xfe

00016a34 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   16a34:	b5b0      	push	{r4, r5, r7, lr}
   16a36:	b0a2      	sub	sp, #136	; 0x88
   16a38:	6800      	ldr	r0, [r0, #0]
   16a3a:	f10d 0e08 	add.w	lr, sp, #8
   16a3e:	468c      	mov	ip, r1
   16a40:	2381      	movs	r3, #129	; 0x81
   16a42:	2100      	movs	r1, #0
   16a44:	f000 020f 	and.w	r2, r0, #15
   16a48:	f102 0457 	add.w	r4, r2, #87	; 0x57
   16a4c:	2a0a      	cmp	r2, #10
   16a4e:	bf38      	it	cc
   16a50:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16a54:	eb0e 0203 	add.w	r2, lr, r3
   16a58:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16a5c:	f802 4c02 	strb.w	r4, [r2, #-2]
   16a60:	d030      	beq.n	16ac4 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   16a62:	0904      	lsrs	r4, r0, #4
   16a64:	f004 040f 	and.w	r4, r4, #15
   16a68:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a6c:	2c0a      	cmp	r4, #10
   16a6e:	bf38      	it	cc
   16a70:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a74:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16a78:	f802 5c03 	strb.w	r5, [r2, #-3]
   16a7c:	d028      	beq.n	16ad0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   16a7e:	0a04      	lsrs	r4, r0, #8
   16a80:	f004 040f 	and.w	r4, r4, #15
   16a84:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16a88:	2c0a      	cmp	r4, #10
   16a8a:	bf38      	it	cc
   16a8c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16a90:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16a94:	f802 5c04 	strb.w	r5, [r2, #-4]
   16a98:	d01f      	beq.n	16ada <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   16a9a:	0b04      	lsrs	r4, r0, #12
   16a9c:	3b04      	subs	r3, #4
   16a9e:	f004 040f 	and.w	r4, r4, #15
   16aa2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   16aa6:	2c0a      	cmp	r4, #10
   16aa8:	bf38      	it	cc
   16aaa:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16aae:	f802 5c05 	strb.w	r5, [r2, #-5]
   16ab2:	0c02      	lsrs	r2, r0, #16
   16ab4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16ab8:	4610      	mov	r0, r2
   16aba:	d1c3      	bne.n	16a44 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   16abc:	1e58      	subs	r0, r3, #1
   16abe:	2881      	cmp	r0, #129	; 0x81
   16ac0:	d30f      	bcc.n	16ae2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16ac2:	e01e      	b.n	16b02 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ac4:	1e59      	subs	r1, r3, #1
   16ac6:	1e98      	subs	r0, r3, #2
   16ac8:	460b      	mov	r3, r1
   16aca:	2881      	cmp	r0, #129	; 0x81
   16acc:	d309      	bcc.n	16ae2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16ace:	e018      	b.n	16b02 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ad0:	1ed8      	subs	r0, r3, #3
   16ad2:	3b02      	subs	r3, #2
   16ad4:	2881      	cmp	r0, #129	; 0x81
   16ad6:	d304      	bcc.n	16ae2 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   16ad8:	e013      	b.n	16b02 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ada:	1f18      	subs	r0, r3, #4
   16adc:	3b03      	subs	r3, #3
   16ade:	2881      	cmp	r0, #129	; 0x81
   16ae0:	d20f      	bcs.n	16b02 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   16ae2:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16ae6:	f24e 2295 	movw	r2, #58005	; 0xe295
   16aea:	4470      	add	r0, lr
   16aec:	f2c0 0201 	movt	r2, #1
   16af0:	e9cd 0100 	strd	r0, r1, [sp]
   16af4:	4660      	mov	r0, ip
   16af6:	2101      	movs	r1, #1
   16af8:	2302      	movs	r3, #2
   16afa:	f7fe ff07 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16afe:	b022      	add	sp, #136	; 0x88
   16b00:	bdb0      	pop	{r4, r5, r7, pc}
   16b02:	2180      	movs	r1, #128	; 0x80
   16b04:	f7ff fa9f 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16b08:	defe      	udf	#254	; 0xfe

00016b0a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   16b0a:	b5b0      	push	{r4, r5, r7, lr}
   16b0c:	b0a2      	sub	sp, #136	; 0x88
   16b0e:	6800      	ldr	r0, [r0, #0]
   16b10:	f10d 0e08 	add.w	lr, sp, #8
   16b14:	468c      	mov	ip, r1
   16b16:	2381      	movs	r3, #129	; 0x81
   16b18:	2100      	movs	r1, #0
   16b1a:	f000 020f 	and.w	r2, r0, #15
   16b1e:	f102 0437 	add.w	r4, r2, #55	; 0x37
   16b22:	2a0a      	cmp	r2, #10
   16b24:	bf38      	it	cc
   16b26:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   16b2a:	eb0e 0203 	add.w	r2, lr, r3
   16b2e:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   16b32:	f802 4c02 	strb.w	r4, [r2, #-2]
   16b36:	d030      	beq.n	16b9a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   16b38:	0904      	lsrs	r4, r0, #4
   16b3a:	f004 040f 	and.w	r4, r4, #15
   16b3e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b42:	2c0a      	cmp	r4, #10
   16b44:	bf38      	it	cc
   16b46:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b4a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   16b4e:	f802 5c03 	strb.w	r5, [r2, #-3]
   16b52:	d028      	beq.n	16ba6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   16b54:	0a04      	lsrs	r4, r0, #8
   16b56:	f004 040f 	and.w	r4, r4, #15
   16b5a:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b5e:	2c0a      	cmp	r4, #10
   16b60:	bf38      	it	cc
   16b62:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b66:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   16b6a:	f802 5c04 	strb.w	r5, [r2, #-4]
   16b6e:	d01f      	beq.n	16bb0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   16b70:	0b04      	lsrs	r4, r0, #12
   16b72:	3b04      	subs	r3, #4
   16b74:	f004 040f 	and.w	r4, r4, #15
   16b78:	f104 0537 	add.w	r5, r4, #55	; 0x37
   16b7c:	2c0a      	cmp	r4, #10
   16b7e:	bf38      	it	cc
   16b80:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   16b84:	f802 5c05 	strb.w	r5, [r2, #-5]
   16b88:	0c02      	lsrs	r2, r0, #16
   16b8a:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   16b8e:	4610      	mov	r0, r2
   16b90:	d1c3      	bne.n	16b1a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   16b92:	1e58      	subs	r0, r3, #1
   16b94:	2881      	cmp	r0, #129	; 0x81
   16b96:	d30f      	bcc.n	16bb8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16b98:	e01e      	b.n	16bd8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16b9a:	1e59      	subs	r1, r3, #1
   16b9c:	1e98      	subs	r0, r3, #2
   16b9e:	460b      	mov	r3, r1
   16ba0:	2881      	cmp	r0, #129	; 0x81
   16ba2:	d309      	bcc.n	16bb8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16ba4:	e018      	b.n	16bd8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16ba6:	1ed8      	subs	r0, r3, #3
   16ba8:	3b02      	subs	r3, #2
   16baa:	2881      	cmp	r0, #129	; 0x81
   16bac:	d304      	bcc.n	16bb8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   16bae:	e013      	b.n	16bd8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16bb0:	1f18      	subs	r0, r3, #4
   16bb2:	3b03      	subs	r3, #3
   16bb4:	2881      	cmp	r0, #129	; 0x81
   16bb6:	d20f      	bcs.n	16bd8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   16bb8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   16bbc:	f24e 2295 	movw	r2, #58005	; 0xe295
   16bc0:	4470      	add	r0, lr
   16bc2:	f2c0 0201 	movt	r2, #1
   16bc6:	e9cd 0100 	strd	r0, r1, [sp]
   16bca:	4660      	mov	r0, ip
   16bcc:	2101      	movs	r1, #1
   16bce:	2302      	movs	r3, #2
   16bd0:	f7fe fe9c 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16bd4:	b022      	add	sp, #136	; 0x88
   16bd6:	bdb0      	pop	{r4, r5, r7, pc}
   16bd8:	2180      	movs	r1, #128	; 0x80
   16bda:	f7ff fa34 	bl	16046 <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16bde:	defe      	udf	#254	; 0xfe

00016be0 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   16be0:	b580      	push	{r7, lr}
   16be2:	b08c      	sub	sp, #48	; 0x30
   16be4:	7802      	ldrb	r2, [r0, #0]
   16be6:	2a64      	cmp	r2, #100	; 0x64
   16be8:	d314      	bcc.n	16c14 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   16bea:	f248 501f 	movw	r0, #34079	; 0x851f
   16bee:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   16bf2:	fba2 0300 	umull	r0, r3, r2, r0
   16bf6:	2064      	movs	r0, #100	; 0x64
   16bf8:	095b      	lsrs	r3, r3, #5
   16bfa:	fb03 2010 	mls	r0, r3, r0, r2
   16bfe:	f24e 2297 	movw	r2, #58007	; 0xe297
   16c02:	f2c0 0201 	movt	r2, #1
   16c06:	b2c0      	uxtb	r0, r0
   16c08:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   16c0c:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16c10:	2024      	movs	r0, #36	; 0x24
   16c12:	e003      	b.n	16c1c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   16c14:	2a0a      	cmp	r2, #10
   16c16:	d206      	bcs.n	16c26 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   16c18:	2026      	movs	r0, #38	; 0x26
   16c1a:	4613      	mov	r3, r2
   16c1c:	f103 0230 	add.w	r2, r3, #48	; 0x30
   16c20:	ab02      	add	r3, sp, #8
   16c22:	541a      	strb	r2, [r3, r0]
   16c24:	e008      	b.n	16c38 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   16c26:	f24e 2097 	movw	r0, #58007	; 0xe297
   16c2a:	f2c0 0001 	movt	r0, #1
   16c2e:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   16c32:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   16c36:	2025      	movs	r0, #37	; 0x25
   16c38:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   16c3c:	ab02      	add	r3, sp, #8
   16c3e:	4418      	add	r0, r3
   16c40:	2300      	movs	r3, #0
   16c42:	e9cd 0200 	strd	r0, r2, [sp]
   16c46:	f24e 0264 	movw	r2, #57444	; 0xe064
   16c4a:	4608      	mov	r0, r1
   16c4c:	f2c0 0201 	movt	r2, #1
   16c50:	2101      	movs	r1, #1
   16c52:	f7fe fe5b 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16c56:	b00c      	add	sp, #48	; 0x30
   16c58:	bd80      	pop	{r7, pc}

00016c5a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   16c5a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c5e:	b08f      	sub	sp, #60	; 0x3c
   16c60:	6805      	ldr	r5, [r0, #0]
   16c62:	f248 581f 	movw	r8, #34079	; 0x851f
   16c66:	460e      	mov	r6, r1
   16c68:	f24e 2197 	movw	r1, #58007	; 0xe297
   16c6c:	2d00      	cmp	r5, #0
   16c6e:	f242 7910 	movw	r9, #10000	; 0x2710
   16c72:	462b      	mov	r3, r5
   16c74:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   16c78:	bf48      	it	mi
   16c7a:	426b      	negmi	r3, r5
   16c7c:	454b      	cmp	r3, r9
   16c7e:	f2c0 0101 	movt	r1, #1
   16c82:	d33a      	bcc.n	16cfa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   16c84:	f241 7a59 	movw	sl, #5977	; 0x1759
   16c88:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   16c8c:	f10d 0e14 	add.w	lr, sp, #20
   16c90:	2400      	movs	r4, #0
   16c92:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   16c96:	f04f 0b64 	mov.w	fp, #100	; 0x64
   16c9a:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   16c9e:	e9cd 5603 	strd	r5, r6, [sp, #12]
   16ca2:	fba3 250a 	umull	r2, r5, r3, sl
   16ca6:	eb0e 0704 	add.w	r7, lr, r4
   16caa:	3c04      	subs	r4, #4
   16cac:	4283      	cmp	r3, r0
   16cae:	ea4f 3255 	mov.w	r2, r5, lsr #13
   16cb2:	fb02 3519 	mls	r5, r2, r9, r3
   16cb6:	4613      	mov	r3, r2
   16cb8:	b2ae      	uxth	r6, r5
   16cba:	fba6 6c08 	umull	r6, ip, r6, r8
   16cbe:	ea4f 165c 	mov.w	r6, ip, lsr #5
   16cc2:	fb06 551b 	mls	r5, r6, fp, r5
   16cc6:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   16cca:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   16cce:	b2ad      	uxth	r5, r5
   16cd0:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   16cd4:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   16cd8:	d8e3      	bhi.n	16ca2 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   16cda:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   16cde:	f104 0027 	add.w	r0, r4, #39	; 0x27
   16ce2:	4613      	mov	r3, r2
   16ce4:	2b63      	cmp	r3, #99	; 0x63
   16ce6:	dc0b      	bgt.n	16d00 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   16ce8:	461a      	mov	r2, r3
   16cea:	2a0a      	cmp	r2, #10
   16cec:	db17      	blt.n	16d1e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   16cee:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   16cf2:	3802      	subs	r0, #2
   16cf4:	aa05      	add	r2, sp, #20
   16cf6:	5211      	strh	r1, [r2, r0]
   16cf8:	e016      	b.n	16d28 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   16cfa:	2027      	movs	r0, #39	; 0x27
   16cfc:	2b63      	cmp	r3, #99	; 0x63
   16cfe:	ddf3      	ble.n	16ce8 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   16d00:	b29a      	uxth	r2, r3
   16d02:	3802      	subs	r0, #2
   16d04:	fba2 2708 	umull	r2, r7, r2, r8
   16d08:	097a      	lsrs	r2, r7, #5
   16d0a:	2764      	movs	r7, #100	; 0x64
   16d0c:	fb02 3317 	mls	r3, r2, r7, r3
   16d10:	af05      	add	r7, sp, #20
   16d12:	b29b      	uxth	r3, r3
   16d14:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   16d18:	523b      	strh	r3, [r7, r0]
   16d1a:	2a0a      	cmp	r2, #10
   16d1c:	dae7      	bge.n	16cee <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   16d1e:	3801      	subs	r0, #1
   16d20:	f102 0130 	add.w	r1, r2, #48	; 0x30
   16d24:	aa05      	add	r2, sp, #20
   16d26:	5411      	strb	r1, [r2, r0]
   16d28:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   16d2c:	aa05      	add	r2, sp, #20
   16d2e:	4410      	add	r0, r2
   16d30:	f24e 0264 	movw	r2, #57444	; 0xe064
   16d34:	e9cd 0100 	strd	r0, r1, [sp]
   16d38:	43e8      	mvns	r0, r5
   16d3a:	0fc1      	lsrs	r1, r0, #31
   16d3c:	f2c0 0201 	movt	r2, #1
   16d40:	4630      	mov	r0, r6
   16d42:	2300      	movs	r3, #0
   16d44:	f7fe fde2 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16d48:	b00f      	add	sp, #60	; 0x3c
   16d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016d4e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   16d4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d52:	b08d      	sub	sp, #52	; 0x34
   16d54:	468c      	mov	ip, r1
   16d56:	6801      	ldr	r1, [r0, #0]
   16d58:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16d5c:	f24e 2097 	movw	r0, #58007	; 0xe297
   16d60:	f242 7810 	movw	r8, #10000	; 0x2710
   16d64:	4541      	cmp	r1, r8
   16d66:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16d6a:	f2c0 0001 	movt	r0, #1
   16d6e:	d337      	bcc.n	16de0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   16d70:	f241 7959 	movw	r9, #5977	; 0x1759
   16d74:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16d78:	f10d 0b0c 	add.w	fp, sp, #12
   16d7c:	2300      	movs	r3, #0
   16d7e:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16d82:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16d86:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16d8a:	fba1 2409 	umull	r2, r4, r1, r9
   16d8e:	42b9      	cmp	r1, r7
   16d90:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16d94:	fb02 1418 	mls	r4, r2, r8, r1
   16d98:	4611      	mov	r1, r2
   16d9a:	b2a5      	uxth	r5, r4
   16d9c:	fba5 560e 	umull	r5, r6, r5, lr
   16da0:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16da4:	eb0b 0603 	add.w	r6, fp, r3
   16da8:	fb05 441a 	mls	r4, r5, sl, r4
   16dac:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16db0:	f1a3 0304 	sub.w	r3, r3, #4
   16db4:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16db8:	b2a4      	uxth	r4, r4
   16dba:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16dbe:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   16dc2:	d8e2      	bhi.n	16d8a <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   16dc4:	f103 0427 	add.w	r4, r3, #39	; 0x27
   16dc8:	4611      	mov	r1, r2
   16dca:	2963      	cmp	r1, #99	; 0x63
   16dcc:	dc0b      	bgt.n	16de6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   16dce:	460b      	mov	r3, r1
   16dd0:	2b0a      	cmp	r3, #10
   16dd2:	db17      	blt.n	16e04 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   16dd4:	1ea1      	subs	r1, r4, #2
   16dd6:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   16dda:	aa03      	add	r2, sp, #12
   16ddc:	5250      	strh	r0, [r2, r1]
   16dde:	e016      	b.n	16e0e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   16de0:	2427      	movs	r4, #39	; 0x27
   16de2:	2963      	cmp	r1, #99	; 0x63
   16de4:	ddf3      	ble.n	16dce <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   16de6:	b28a      	uxth	r2, r1
   16de8:	3c02      	subs	r4, #2
   16dea:	fba2 230e 	umull	r2, r3, r2, lr
   16dee:	2264      	movs	r2, #100	; 0x64
   16df0:	095b      	lsrs	r3, r3, #5
   16df2:	fb03 1112 	mls	r1, r3, r2, r1
   16df6:	aa03      	add	r2, sp, #12
   16df8:	b289      	uxth	r1, r1
   16dfa:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   16dfe:	5311      	strh	r1, [r2, r4]
   16e00:	2b0a      	cmp	r3, #10
   16e02:	dae7      	bge.n	16dd4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   16e04:	1e61      	subs	r1, r4, #1
   16e06:	aa03      	add	r2, sp, #12
   16e08:	f103 0030 	add.w	r0, r3, #48	; 0x30
   16e0c:	5450      	strb	r0, [r2, r1]
   16e0e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   16e12:	aa03      	add	r2, sp, #12
   16e14:	4411      	add	r1, r2
   16e16:	f24e 0264 	movw	r2, #57444	; 0xe064
   16e1a:	e9cd 1000 	strd	r1, r0, [sp]
   16e1e:	f2c0 0201 	movt	r2, #1
   16e22:	4660      	mov	r0, ip
   16e24:	2101      	movs	r1, #1
   16e26:	2300      	movs	r3, #0
   16e28:	f7fe fd70 	bl	1590c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   16e2c:	b00d      	add	sp, #52	; 0x34
   16e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00016e32 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   16e32:	e9d0 2000 	ldrd	r2, r0, [r0]
   16e36:	68c3      	ldr	r3, [r0, #12]
   16e38:	4610      	mov	r0, r2
   16e3a:	4718      	bx	r3

00016e3c <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   16e3c:	460b      	mov	r3, r1
   16e3e:	e9d0 1200 	ldrd	r1, r2, [r0]
   16e42:	4618      	mov	r0, r3
   16e44:	f7fe beaa 	b.w	15b9c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>

00016e48 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   16e48:	4b07      	ldr	r3, [pc, #28]	; (16e68 <__semihost+0x20>)
   16e4a:	781b      	ldrb	r3, [r3, #0]
   16e4c:	b14b      	cbz	r3, 16e62 <__semihost+0x1a>
static int __semihost(int command, void* message) {
   16e4e:	b410      	push	{r4}
   16e50:	4602      	mov	r2, r0
   16e52:	460c      	mov	r4, r1
    __asm( 
   16e54:	4610      	mov	r0, r2
   16e56:	4621      	mov	r1, r4
   16e58:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   16e5a:	2000      	movs	r0, #0
}
   16e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
   16e60:	4770      	bx	lr
    if (!log_enabled) return -1;
   16e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   16e66:	4770      	bx	lr
   16e68:	20000100 	.word	0x20000100

00016e6c <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   16e6c:	4b02      	ldr	r3, [pc, #8]	; (16e78 <debugger_connected+0xc>)
   16e6e:	6818      	ldr	r0, [r3, #0]
}
   16e70:	f000 0001 	and.w	r0, r0, #1
   16e74:	4770      	bx	lr
   16e76:	bf00      	nop
   16e78:	e000edf0 	.word	0xe000edf0

00016e7c <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   16e7c:	b570      	push	{r4, r5, r6, lr}
   16e7e:	b084      	sub	sp, #16
   16e80:	4606      	mov	r6, r0
   16e82:	460d      	mov	r5, r1
   16e84:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   16e86:	f7ff fff1 	bl	16e6c <debugger_connected>
   16e8a:	4603      	mov	r3, r0
   16e8c:	b108      	cbz	r0, 16e92 <semihost_write+0x16>
    if (length == 0) { return 0; }
   16e8e:	b91c      	cbnz	r4, 16e98 <semihost_write+0x1c>
   16e90:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   16e92:	4618      	mov	r0, r3
   16e94:	b004      	add	sp, #16
   16e96:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   16e98:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   16e9a:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   16e9c:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   16e9e:	a901      	add	r1, sp, #4
   16ea0:	2005      	movs	r0, #5
   16ea2:	f7ff ffd1 	bl	16e48 <__semihost>
   16ea6:	4603      	mov	r3, r0
   16ea8:	e7f3      	b.n	16e92 <semihost_write+0x16>
	...

00016eac <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   16eac:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   16eae:	4b0e      	ldr	r3, [pc, #56]	; (16ee8 <console_flush+0x3c>)
   16eb0:	781b      	ldrb	r3, [r3, #0]
   16eb2:	b1bb      	cbz	r3, 16ee4 <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   16eb4:	4b0d      	ldr	r3, [pc, #52]	; (16eec <console_flush+0x40>)
   16eb6:	681d      	ldr	r5, [r3, #0]
   16eb8:	b1a5      	cbz	r5, 16ee4 <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   16eba:	4b0d      	ldr	r3, [pc, #52]	; (16ef0 <console_flush+0x44>)
   16ebc:	685b      	ldr	r3, [r3, #4]
   16ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   16ec2:	b97b      	cbnz	r3, 16ee4 <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   16ec4:	4b09      	ldr	r3, [pc, #36]	; (16eec <console_flush+0x40>)
   16ec6:	2200      	movs	r2, #0
   16ec8:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   16eca:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   16ecc:	e005      	b.n	16eda <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   16ece:	88e2      	ldrh	r2, [r4, #6]
   16ed0:	6821      	ldr	r1, [r4, #0]
   16ed2:	2002      	movs	r0, #2
   16ed4:	f7ff ffd2 	bl	16e7c <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   16ed8:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   16eda:	2c00      	cmp	r4, #0
   16edc:	d1f7      	bne.n	16ece <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   16ede:	4628      	mov	r0, r5
   16ee0:	f001 fbfc 	bl	186dc <os_mbuf_free_chain>
}
   16ee4:	bd38      	pop	{r3, r4, r5, pc}
   16ee6:	bf00      	nop
   16ee8:	20000100 	.word	0x20000100
   16eec:	20005f04 	.word	0x20005f04
   16ef0:	e000ed00 	.word	0xe000ed00

00016ef4 <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   16ef4:	b508      	push	{r3, lr}
   16ef6:	f7ff ffd9 	bl	16eac <console_flush>
   16efa:	bd08      	pop	{r3, pc}

00016efc <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   16efc:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   16efe:	4b12      	ldr	r3, [pc, #72]	; (16f48 <console_buffer+0x4c>)
   16f00:	781b      	ldrb	r3, [r3, #0]
   16f02:	b903      	cbnz	r3, 16f06 <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   16f04:	bd38      	pop	{r3, r4, r5, pc}
   16f06:	460d      	mov	r5, r1
   16f08:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   16f0a:	f7ff ffaf 	bl	16e6c <debugger_connected>
   16f0e:	2800      	cmp	r0, #0
   16f10:	d0f8      	beq.n	16f04 <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   16f12:	4b0e      	ldr	r3, [pc, #56]	; (16f4c <console_buffer+0x50>)
   16f14:	681b      	ldr	r3, [r3, #0]
   16f16:	b173      	cbz	r3, 16f36 <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   16f18:	4b0c      	ldr	r3, [pc, #48]	; (16f4c <console_buffer+0x50>)
   16f1a:	6818      	ldr	r0, [r3, #0]
   16f1c:	f001 fbf0 	bl	18700 <os_mbuf_len>
   16f20:	4428      	add	r0, r5
   16f22:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   16f26:	d2ed      	bcs.n	16f04 <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   16f28:	b2aa      	uxth	r2, r5
   16f2a:	4621      	mov	r1, r4
   16f2c:	4b07      	ldr	r3, [pc, #28]	; (16f4c <console_buffer+0x50>)
   16f2e:	6818      	ldr	r0, [r3, #0]
   16f30:	f001 fbf0 	bl	18714 <os_mbuf_append>
   16f34:	e7e6      	b.n	16f04 <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   16f36:	2100      	movs	r1, #0
   16f38:	b2a8      	uxth	r0, r5
   16f3a:	f001 fd93 	bl	18a64 <os_msys_get_pkthdr>
   16f3e:	4b03      	ldr	r3, [pc, #12]	; (16f4c <console_buffer+0x50>)
   16f40:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   16f42:	2800      	cmp	r0, #0
   16f44:	d1e8      	bne.n	16f18 <console_buffer+0x1c>
   16f46:	e7dd      	b.n	16f04 <console_buffer+0x8>
   16f48:	20000100 	.word	0x20000100
   16f4c:	20005f04 	.word	0x20005f04

00016f50 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   16f50:	b500      	push	{lr}
   16f52:	b083      	sub	sp, #12
   16f54:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   16f58:	280d      	cmp	r0, #13
   16f5a:	d004      	beq.n	16f66 <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   16f5c:	2101      	movs	r1, #1
   16f5e:	f10d 0007 	add.w	r0, sp, #7
   16f62:	f7ff ffcb 	bl	16efc <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   16f66:	b003      	add	sp, #12
   16f68:	f85d fb04 	ldr.w	pc, [sp], #4

00016f6c <console_printhex>:
void console_printhex(uint8_t v) {
   16f6c:	b510      	push	{r4, lr}
   16f6e:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f70:	2310      	movs	r3, #16
    int length = 0;
   16f72:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f74:	e005      	b.n	16f82 <console_printhex+0x16>
        v = v % divisor;
   16f76:	fbb0 f1f3 	udiv	r1, r0, r3
   16f7a:	fb03 0011 	mls	r0, r3, r1, r0
   16f7e:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   16f80:	091b      	lsrs	r3, r3, #4
   16f82:	b18b      	cbz	r3, 16fa8 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   16f84:	fbb0 f4f3 	udiv	r4, r0, r3
   16f88:	f104 0130 	add.w	r1, r4, #48	; 0x30
   16f8c:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   16f8e:	2939      	cmp	r1, #57	; 0x39
   16f90:	d902      	bls.n	16f98 <console_printhex+0x2c>
   16f92:	f104 0157 	add.w	r1, r4, #87	; 0x57
   16f96:	b2c9      	uxtb	r1, r1
            if (length < size) {
   16f98:	2a02      	cmp	r2, #2
   16f9a:	dcec      	bgt.n	16f76 <console_printhex+0xa>
                buffer[length++] = digit;
   16f9c:	ac02      	add	r4, sp, #8
   16f9e:	4414      	add	r4, r2
   16fa0:	f804 1c04 	strb.w	r1, [r4, #-4]
   16fa4:	3201      	adds	r2, #1
   16fa6:	e7e6      	b.n	16f76 <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   16fa8:	b92a      	cbnz	r2, 16fb6 <console_printhex+0x4a>
   16faa:	ab02      	add	r3, sp, #8
   16fac:	4413      	add	r3, r2
   16fae:	2130      	movs	r1, #48	; 0x30
   16fb0:	f803 1c04 	strb.w	r1, [r3, #-4]
   16fb4:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   16fb6:	2a02      	cmp	r2, #2
   16fb8:	dc04      	bgt.n	16fc4 <console_printhex+0x58>
   16fba:	ab02      	add	r3, sp, #8
   16fbc:	441a      	add	r2, r3
   16fbe:	2300      	movs	r3, #0
   16fc0:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   16fc4:	2300      	movs	r3, #0
   16fc6:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   16fca:	a801      	add	r0, sp, #4
   16fcc:	f002 fb73 	bl	196b6 <strlen>
   16fd0:	4601      	mov	r1, r0
   16fd2:	a801      	add	r0, sp, #4
   16fd4:	f7ff ff92 	bl	16efc <console_buffer>
}
   16fd8:	b002      	add	sp, #8
   16fda:	bd10      	pop	{r4, pc}

00016fdc <console_printint>:
void console_printint(int i) {
   16fdc:	b508      	push	{r3, lr}
    console_printf("%d", i);
   16fde:	4601      	mov	r1, r0
   16fe0:	4801      	ldr	r0, [pc, #4]	; (16fe8 <console_printint+0xc>)
   16fe2:	f000 f873 	bl	170cc <console_printf>
}
   16fe6:	bd08      	pop	{r3, pc}
   16fe8:	0001f25c 	.word	0x0001f25c

00016fec <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   16fec:	b180      	cbz	r0, 17010 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   16fee:	b570      	push	{r4, r5, r6, lr}
   16ff0:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   16ff2:	b161      	cbz	r1, 1700e <console_dump+0x22>
   16ff4:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   16ff6:	2400      	movs	r4, #0
   16ff8:	e007      	b.n	1700a <console_dump+0x1e>
   16ffa:	5d30      	ldrb	r0, [r6, r4]
   16ffc:	f7ff ffb6 	bl	16f6c <console_printhex>
   17000:	2101      	movs	r1, #1
   17002:	4804      	ldr	r0, [pc, #16]	; (17014 <console_dump+0x28>)
   17004:	f7ff ff7a 	bl	16efc <console_buffer>
   17008:	3401      	adds	r4, #1
   1700a:	42ac      	cmp	r4, r5
   1700c:	d3f5      	bcc.n	16ffa <console_dump+0xe>
}
   1700e:	bd70      	pop	{r4, r5, r6, pc}
   17010:	4770      	bx	lr
   17012:	bf00      	nop
   17014:	0001f258 	.word	0x0001f258

00017018 <console_out_nolock>:

int console_out_nolock(int character) {
   17018:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   1701a:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   1701c:	4b0b      	ldr	r3, [pc, #44]	; (1704c <console_out_nolock+0x34>)
   1701e:	781b      	ldrb	r3, [r3, #0]
   17020:	b953      	cbnz	r3, 17038 <console_out_nolock+0x20>
   17022:	4604      	mov	r4, r0
    if ('\n' == c) {
   17024:	2d0a      	cmp	r5, #10
   17026:	d009      	beq.n	1703c <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   17028:	4b09      	ldr	r3, [pc, #36]	; (17050 <console_out_nolock+0x38>)
   1702a:	2201      	movs	r2, #1
   1702c:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   1702e:	4628      	mov	r0, r5
   17030:	f7ff ff8e 	bl	16f50 <semihosting_console_write_ch>
    return character;
   17034:	4620      	mov	r0, r4
}
   17036:	bd38      	pop	{r3, r4, r5, pc}
   17038:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   1703a:	e7fc      	b.n	17036 <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   1703c:	200d      	movs	r0, #13
   1703e:	f7ff ff87 	bl	16f50 <semihosting_console_write_ch>
        console_is_midline = 0;
   17042:	4b03      	ldr	r3, [pc, #12]	; (17050 <console_out_nolock+0x38>)
   17044:	2200      	movs	r2, #0
   17046:	601a      	str	r2, [r3, #0]
   17048:	e7f1      	b.n	1702e <console_out_nolock+0x16>
   1704a:	bf00      	nop
   1704c:	2000cdb4 	.word	0x2000cdb4
   17050:	2000cdb8 	.word	0x2000cdb8

00017054 <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   17054:	2000      	movs	r0, #0
   17056:	4770      	bx	lr

00017058 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   17058:	b570      	push	{r4, r5, r6, lr}
   1705a:	4606      	mov	r6, r0
   1705c:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   1705e:	2400      	movs	r4, #0
   17060:	42ac      	cmp	r4, r5
   17062:	da07      	bge.n	17074 <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   17064:	5d30      	ldrb	r0, [r6, r4]
   17066:	f7ff ffd7 	bl	17018 <console_out_nolock>
   1706a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   1706e:	d001      	beq.n	17074 <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   17070:	3401      	adds	r4, #1
   17072:	e7f5      	b.n	17060 <console_write+0x8>
    }
}
   17074:	bd70      	pop	{r4, r5, r6, pc}

00017076 <console_blocking_mode>:

void console_blocking_mode(void) {
   17076:	b508      	push	{r3, lr}
    disable_buffer();
   17078:	f7ff ff3c 	bl	16ef4 <disable_buffer>
}
   1707c:	bd08      	pop	{r3, pc}
	...

00017080 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   17080:	b510      	push	{r4, lr}
   17082:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   17084:	4b0d      	ldr	r3, [pc, #52]	; (170bc <console_pkg_init+0x3c>)
   17086:	781b      	ldrb	r3, [r3, #0]
   17088:	b193      	cbz	r3, 170b0 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   1708a:	480d      	ldr	r0, [pc, #52]	; (170c0 <console_pkg_init+0x40>)
   1708c:	f001 f9fa 	bl	18484 <os_eventq_init>
    os_mutex_init(&console_write_lock);
   17090:	480c      	ldr	r0, [pc, #48]	; (170c4 <console_pkg_init+0x44>)
   17092:	f001 fd15 	bl	18ac0 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   17096:	f7ff ffdd 	bl	17054 <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   1709a:	b138      	cbz	r0, 170ac <console_pkg_init+0x2c>
   1709c:	2000      	movs	r0, #0
   1709e:	9000      	str	r0, [sp, #0]
   170a0:	4b09      	ldr	r3, [pc, #36]	; (170c8 <console_pkg_init+0x48>)
   170a2:	681c      	ldr	r4, [r3, #0]
   170a4:	4603      	mov	r3, r0
   170a6:	4602      	mov	r2, r0
   170a8:	4601      	mov	r1, r0
   170aa:	47a0      	blx	r4
}
   170ac:	b002      	add	sp, #8
   170ae:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   170b0:	461a      	mov	r2, r3
   170b2:	4619      	mov	r1, r3
   170b4:	4618      	mov	r0, r3
   170b6:	f000 fed1 	bl	17e5c <__assert_func>
   170ba:	bf00      	nop
   170bc:	2000cdbc 	.word	0x2000cdbc
   170c0:	20005f08 	.word	0x20005f08
   170c4:	20005f18 	.word	0x20005f18
   170c8:	20000104 	.word	0x20000104

000170cc <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   170cc:	b40f      	push	{r0, r1, r2, r3}
   170ce:	b510      	push	{r4, lr}
   170d0:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   170d2:	f000 f81f 	bl	17114 <console_get_ticks>
   170d6:	b160      	cbz	r0, 170f2 <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   170d8:	4b0c      	ldr	r3, [pc, #48]	; (1710c <console_printf+0x40>)
   170da:	681b      	ldr	r3, [r3, #0]
   170dc:	b10b      	cbz	r3, 170e2 <console_printf+0x16>
    num_chars = 0;
   170de:	2400      	movs	r4, #0
   170e0:	e008      	b.n	170f4 <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   170e2:	f002 f8d9 	bl	19298 <os_time_get>
   170e6:	4601      	mov	r1, r0
   170e8:	4809      	ldr	r0, [pc, #36]	; (17110 <console_printf+0x44>)
   170ea:	f002 fd97 	bl	19c1c <printf>
   170ee:	4604      	mov	r4, r0
   170f0:	e000      	b.n	170f4 <console_printf+0x28>
    num_chars = 0;
   170f2:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   170f4:	a905      	add	r1, sp, #20
   170f6:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   170f8:	9804      	ldr	r0, [sp, #16]
   170fa:	f002 fdbf 	bl	19c7c <vprintf>
    va_end(args);

    return num_chars;
}
   170fe:	4420      	add	r0, r4
   17100:	b002      	add	sp, #8
   17102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17106:	b004      	add	sp, #16
   17108:	4770      	bx	lr
   1710a:	bf00      	nop
   1710c:	2000cdb8 	.word	0x2000cdb8
   17110:	0001f260 	.word	0x0001f260

00017114 <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   17114:	4b01      	ldr	r3, [pc, #4]	; (1711c <console_get_ticks+0x8>)
   17116:	7818      	ldrb	r0, [r3, #0]
   17118:	4770      	bx	lr
   1711a:	bf00      	nop
   1711c:	20005f24 	.word	0x20005f24

00017120 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   17120:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   17122:	f000 fe9b 	bl	17e5c <__assert_func>
	...

00017128 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   17128:	4b01      	ldr	r3, [pc, #4]	; (17130 <sysinit_start+0x8>)
   1712a:	2201      	movs	r2, #1
   1712c:	701a      	strb	r2, [r3, #0]
}
   1712e:	4770      	bx	lr
   17130:	2000cdbc 	.word	0x2000cdbc

00017134 <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   17134:	4b01      	ldr	r3, [pc, #4]	; (1713c <sysinit_end+0x8>)
   17136:	2200      	movs	r2, #0
   17138:	701a      	strb	r2, [r3, #0]
}
   1713a:	4770      	bx	lr
   1713c:	2000cdbc 	.word	0x2000cdbc

00017140 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   17140:	4a09      	ldr	r2, [pc, #36]	; (17168 <NVIC_Relocate+0x28>)
   17142:	4b0a      	ldr	r3, [pc, #40]	; (1716c <NVIC_Relocate+0x2c>)
   17144:	429a      	cmp	r2, r3
   17146:	d00a      	beq.n	1715e <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   17148:	2300      	movs	r3, #0
   1714a:	e006      	b.n	1715a <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   1714c:	4a07      	ldr	r2, [pc, #28]	; (1716c <NVIC_Relocate+0x2c>)
   1714e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   17152:	4a05      	ldr	r2, [pc, #20]	; (17168 <NVIC_Relocate+0x28>)
   17154:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   17158:	3301      	adds	r3, #1
   1715a:	2b35      	cmp	r3, #53	; 0x35
   1715c:	ddf6      	ble.n	1714c <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   1715e:	4a02      	ldr	r2, [pc, #8]	; (17168 <NVIC_Relocate+0x28>)
   17160:	4b03      	ldr	r3, [pc, #12]	; (17170 <NVIC_Relocate+0x30>)
   17162:	609a      	str	r2, [r3, #8]
#endif
}
   17164:	4770      	bx	lr
   17166:	bf00      	nop
   17168:	20000000 	.word	0x20000000
   1716c:	00008020 	.word	0x00008020
   17170:	e000ed00 	.word	0xe000ed00

00017174 <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   17174:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   17176:	2400      	movs	r4, #0
   17178:	e000      	b.n	1717c <hal_gpio_irq_handler+0x8>
   1717a:	3401      	adds	r4, #1
   1717c:	2c07      	cmp	r4, #7
   1717e:	dc1c      	bgt.n	171ba <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   17180:	f104 0340 	add.w	r3, r4, #64	; 0x40
   17184:	4a0d      	ldr	r2, [pc, #52]	; (171bc <hal_gpio_irq_handler+0x48>)
   17186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1718a:	2b00      	cmp	r3, #0
   1718c:	d0f5      	beq.n	1717a <hal_gpio_irq_handler+0x6>
   1718e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   17192:	2301      	movs	r3, #1
   17194:	40a3      	lsls	r3, r4
   17196:	421a      	tst	r2, r3
   17198:	d0ef      	beq.n	1717a <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   1719a:	f104 0340 	add.w	r3, r4, #64	; 0x40
   1719e:	4a07      	ldr	r2, [pc, #28]	; (171bc <hal_gpio_irq_handler+0x48>)
   171a0:	2100      	movs	r1, #0
   171a2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   171a6:	4b06      	ldr	r3, [pc, #24]	; (171c0 <hal_gpio_irq_handler+0x4c>)
   171a8:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   171ac:	2a00      	cmp	r2, #0
   171ae:	d0e4      	beq.n	1717a <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   171b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   171b4:	6858      	ldr	r0, [r3, #4]
   171b6:	4790      	blx	r2
   171b8:	e7df      	b.n	1717a <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   171ba:	bd10      	pop	{r4, pc}
   171bc:	40006000 	.word	0x40006000
   171c0:	20005f28 	.word	0x20005f28

000171c4 <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   171c4:	4b06      	ldr	r3, [pc, #24]	; (171e0 <hal_gpio_irq_setup+0x1c>)
   171c6:	781b      	ldrb	r3, [r3, #0]
   171c8:	b94b      	cbnz	r3, 171de <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   171ca:	4b06      	ldr	r3, [pc, #24]	; (171e4 <hal_gpio_irq_setup+0x20>)
   171cc:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   171ce:	4a06      	ldr	r2, [pc, #24]	; (171e8 <hal_gpio_irq_setup+0x24>)
   171d0:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   171d2:	4b06      	ldr	r3, [pc, #24]	; (171ec <hal_gpio_irq_setup+0x28>)
   171d4:	2240      	movs	r2, #64	; 0x40
   171d6:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   171d8:	4b01      	ldr	r3, [pc, #4]	; (171e0 <hal_gpio_irq_setup+0x1c>)
   171da:	2201      	movs	r2, #1
   171dc:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   171de:	4770      	bx	lr
   171e0:	20005f68 	.word	0x20005f68
   171e4:	e000ed00 	.word	0xe000ed00
   171e8:	00017175 	.word	0x00017175
   171ec:	e000e100 	.word	0xe000e100

000171f0 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   171f0:	2000      	movs	r0, #0
   171f2:	2807      	cmp	r0, #7
   171f4:	dc05      	bgt.n	17202 <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   171f6:	4b04      	ldr	r3, [pc, #16]	; (17208 <hal_gpio_find_empty_slot+0x18>)
   171f8:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   171fc:	b11b      	cbz	r3, 17206 <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   171fe:	3001      	adds	r0, #1
   17200:	e7f7      	b.n	171f2 <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   17202:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   17206:	4770      	bx	lr
   17208:	20005f28 	.word	0x20005f28

0001720c <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   1720c:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   1720e:	2000      	movs	r0, #0
   17210:	e000      	b.n	17214 <hal_gpio_find_pin+0x8>
   17212:	3001      	adds	r0, #1
   17214:	2807      	cmp	r0, #7
   17216:	dc0e      	bgt.n	17236 <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   17218:	4b08      	ldr	r3, [pc, #32]	; (1723c <hal_gpio_find_pin+0x30>)
   1721a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   1721e:	2b00      	cmp	r3, #0
   17220:	d0f7      	beq.n	17212 <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   17222:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   17226:	4a06      	ldr	r2, [pc, #24]	; (17240 <hal_gpio_find_pin+0x34>)
   17228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   1722c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   17230:	428b      	cmp	r3, r1
   17232:	d1ee      	bne.n	17212 <hal_gpio_find_pin+0x6>
   17234:	e001      	b.n	1723a <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   17236:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1723a:	4770      	bx	lr
   1723c:	20005f28 	.word	0x20005f28
   17240:	40006000 	.word	0x40006000

00017244 <hal_gpio_init_in>:
    switch (pull) {
   17244:	2901      	cmp	r1, #1
   17246:	d003      	beq.n	17250 <hal_gpio_init_in+0xc>
   17248:	2902      	cmp	r1, #2
   1724a:	d00f      	beq.n	1726c <hal_gpio_init_in+0x28>
        conf = 0;
   1724c:	2100      	movs	r1, #0
        break;
   1724e:	e000      	b.n	17252 <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   17250:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   17252:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17256:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   1725a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   1725e:	2301      	movs	r3, #1
   17260:	fa03 f000 	lsl.w	r0, r3, r0
   17264:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   17268:	2000      	movs	r0, #0
   1726a:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   1726c:	2104      	movs	r1, #4
   1726e:	e7f0      	b.n	17252 <hal_gpio_init_in+0xe>

00017270 <hal_gpio_init_out>:
    if (val) {
   17270:	b999      	cbnz	r1, 1729a <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   17272:	2301      	movs	r3, #1
   17274:	4083      	lsls	r3, r0
   17276:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1727a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   1727e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17282:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   17286:	2103      	movs	r1, #3
   17288:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   1728c:	2301      	movs	r3, #1
   1728e:	fa03 f000 	lsl.w	r0, r3, r0
   17292:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   17296:	2000      	movs	r0, #0
   17298:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   1729a:	2301      	movs	r3, #1
   1729c:	4083      	lsls	r3, r0
   1729e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   172a2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   172a6:	e7ea      	b.n	1727e <hal_gpio_init_out+0xe>

000172a8 <hal_gpio_write>:
    if (val) {
   172a8:	b939      	cbnz	r1, 172ba <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   172aa:	2301      	movs	r3, #1
   172ac:	fa03 f000 	lsl.w	r0, r3, r0
   172b0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172b4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   172b8:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   172ba:	2301      	movs	r3, #1
   172bc:	fa03 f000 	lsl.w	r0, r3, r0
   172c0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172c4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   172c8:	4770      	bx	lr

000172ca <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   172ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172ce:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   172d2:	2301      	movs	r3, #1
   172d4:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172d6:	421a      	tst	r2, r3
   172d8:	d108      	bne.n	172ec <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   172da:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172de:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   172e2:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172e6:	f000 0001 	and.w	r0, r0, #1
}
   172ea:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   172ec:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   172f0:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   172f4:	fa23 f000 	lsr.w	r0, r3, r0
   172f8:	f000 0001 	and.w	r0, r0, #1
   172fc:	4770      	bx	lr
	...

00017300 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   17300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17304:	4680      	mov	r8, r0
   17306:	460f      	mov	r7, r1
   17308:	4616      	mov	r6, r2
   1730a:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   1730c:	f7ff ff5a 	bl	171c4 <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   17310:	f7ff ff6e 	bl	171f0 <hal_gpio_find_empty_slot>
    if (i < 0) {
   17314:	1e05      	subs	r5, r0, #0
   17316:	db27      	blt.n	17368 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   17318:	f89d 1018 	ldrb.w	r1, [sp, #24]
   1731c:	4640      	mov	r0, r8
   1731e:	f7ff ff91 	bl	17244 <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   17322:	2c02      	cmp	r4, #2
   17324:	d01d      	beq.n	17362 <hal_gpio_irq_init+0x62>
   17326:	2c03      	cmp	r4, #3
   17328:	d018      	beq.n	1735c <hal_gpio_irq_init+0x5c>
   1732a:	2c01      	cmp	r4, #1
   1732c:	d002      	beq.n	17334 <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   1732e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17332:	e011      	b.n	17358 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   17334:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   17338:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   1733c:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   17340:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   17344:	4b0a      	ldr	r3, [pc, #40]	; (17370 <hal_gpio_irq_init+0x70>)
   17346:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   1734a:	4b0a      	ldr	r3, [pc, #40]	; (17374 <hal_gpio_irq_init+0x74>)
   1734c:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   17350:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   17354:	605e      	str	r6, [r3, #4]

    return 0;
   17356:	2000      	movs	r0, #0
}
   17358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   1735c:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   17360:	e7ea      	b.n	17338 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   17362:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   17366:	e7e7      	b.n	17338 <hal_gpio_irq_init+0x38>
        return -1;
   17368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1736c:	e7f4      	b.n	17358 <hal_gpio_irq_init+0x58>
   1736e:	bf00      	nop
   17370:	40006000 	.word	0x40006000
   17374:	20005f28 	.word	0x20005f28

00017378 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   17378:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   1737a:	f7ff ff47 	bl	1720c <hal_gpio_find_pin>
    if (i < 0) {
   1737e:	2800      	cmp	r0, #0
   17380:	db0a      	blt.n	17398 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   17382:	4a06      	ldr	r2, [pc, #24]	; (1739c <hal_gpio_irq_enable+0x24>)
   17384:	f100 0340 	add.w	r3, r0, #64	; 0x40
   17388:	2100      	movs	r1, #0
   1738a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   1738e:	2301      	movs	r3, #1
   17390:	fa03 f000 	lsl.w	r0, r3, r0
   17394:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   17398:	bd08      	pop	{r3, pc}
   1739a:	bf00      	nop
   1739c:	40006000 	.word	0x40006000

000173a0 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   173a0:	3801      	subs	r0, #1
   173a2:	bf00      	nop
   173a4:	bf00      	nop
   173a6:	bf00      	nop
   173a8:	bf00      	nop
   173aa:	bf00      	nop
   173ac:	bf00      	nop
   173ae:	bf00      	nop
   173b0:	bf00      	nop
   173b2:	bf00      	nop
   173b4:	bf00      	nop
   173b6:	bf00      	nop
   173b8:	bf00      	nop
   173ba:	bf00      	nop
   173bc:	bf00      	nop
   173be:	bf00      	nop
   173c0:	bf00      	nop
   173c2:	bf00      	nop
   173c4:	bf00      	nop
   173c6:	bf00      	nop
   173c8:	bf00      	nop
   173ca:	bf00      	nop
   173cc:	bf00      	nop
   173ce:	bf00      	nop
   173d0:	bf00      	nop
   173d2:	bf00      	nop
   173d4:	bf00      	nop
   173d6:	bf00      	nop
   173d8:	bf00      	nop
   173da:	bf00      	nop
   173dc:	bf00      	nop
   173de:	bf00      	nop
   173e0:	bf00      	nop
   173e2:	bf00      	nop
   173e4:	bf00      	nop
   173e6:	bf00      	nop
   173e8:	bf00      	nop
   173ea:	bf00      	nop
   173ec:	bf00      	nop
   173ee:	bf00      	nop
   173f0:	bf00      	nop
   173f2:	bf00      	nop
   173f4:	bf00      	nop
   173f6:	bf00      	nop
   173f8:	bf00      	nop
   173fa:	bf00      	nop
   173fc:	bf00      	nop
   173fe:	bf00      	nop
   17400:	bf00      	nop
   17402:	bf00      	nop
   17404:	bf00      	nop
   17406:	bf00      	nop
   17408:	bf00      	nop
   1740a:	bf00      	nop
   1740c:	bf00      	nop
   1740e:	bf00      	nop
   17410:	bf00      	nop
   17412:	bf00      	nop
   17414:	bf00      	nop
   17416:	d1c3      	bne.n	173a0 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   17418:	4770      	bx	lr
	...

0001741c <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   1741c:	2801      	cmp	r0, #1
   1741e:	d806      	bhi.n	1742e <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   17420:	4b06      	ldr	r3, [pc, #24]	; (1743c <hal_i2c_resolve+0x20>)
   17422:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17426:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   17428:	b12b      	cbz	r3, 17436 <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   1742a:	2000      	movs	r0, #0
}
   1742c:	4770      	bx	lr
        *out_i2c = NULL;
   1742e:	2300      	movs	r3, #0
   17430:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   17432:	2002      	movs	r0, #2
   17434:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   17436:	2002      	movs	r0, #2
   17438:	4770      	bx	lr
   1743a:	bf00      	nop
   1743c:	0001f268 	.word	0x0001f268

00017440 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   17440:	b148      	cbz	r0, 17456 <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   17442:	f010 0f04 	tst.w	r0, #4
   17446:	d107      	bne.n	17458 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   17448:	f010 0f02 	tst.w	r0, #2
   1744c:	d101      	bne.n	17452 <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   1744e:	2001      	movs	r0, #1
    }
}
   17450:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   17452:	2004      	movs	r0, #4
   17454:	4770      	bx	lr
   17456:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   17458:	2005      	movs	r0, #5
   1745a:	4770      	bx	lr

0001745c <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   1745c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   17460:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   17464:	fa23 f000 	lsr.w	r0, r3, r0
}
   17468:	f000 0001 	and.w	r0, r0, #1
   1746c:	4770      	bx	lr

0001746e <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   1746e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17472:	4605      	mov	r5, r0
   17474:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   17476:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   1747a:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   1747e:	f240 630c 	movw	r3, #1548	; 0x60c
   17482:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17486:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   1748a:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   1748e:	2101      	movs	r1, #1
   17490:	f7ff ff0a 	bl	172a8 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   17494:	2101      	movs	r1, #1
   17496:	4630      	mov	r0, r6
   17498:	f7ff ff06 	bl	172a8 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   1749c:	f240 630d 	movw	r3, #1549	; 0x60d
   174a0:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   174a4:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   174a8:	2004      	movs	r0, #4
   174aa:	f7ff ff79 	bl	173a0 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   174ae:	2400      	movs	r4, #0
   174b0:	2c08      	cmp	r4, #8
   174b2:	dc14      	bgt.n	174de <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   174b4:	4630      	mov	r0, r6
   174b6:	f7ff ffd1 	bl	1745c <read_gpio_inbuffer>
   174ba:	b978      	cbnz	r0, 174dc <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   174bc:	2100      	movs	r1, #0
   174be:	4628      	mov	r0, r5
   174c0:	f7ff fef2 	bl	172a8 <hal_gpio_write>
        hal_i2c_delay_us(4);
   174c4:	2004      	movs	r0, #4
   174c6:	f7ff ff6b 	bl	173a0 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   174ca:	2101      	movs	r1, #1
   174cc:	4628      	mov	r0, r5
   174ce:	f7ff feeb 	bl	172a8 <hal_gpio_write>
        hal_i2c_delay_us(4);
   174d2:	2004      	movs	r0, #4
   174d4:	f7ff ff64 	bl	173a0 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   174d8:	3401      	adds	r4, #1
   174da:	e7e9      	b.n	174b0 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   174dc:	b154      	cbz	r4, 174f4 <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   174de:	2100      	movs	r1, #0
   174e0:	4630      	mov	r0, r6
   174e2:	f7ff fee1 	bl	172a8 <hal_gpio_write>
    hal_i2c_delay_us(4);
   174e6:	2004      	movs	r0, #4
   174e8:	f7ff ff5a 	bl	173a0 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   174ec:	2101      	movs	r1, #1
   174ee:	4630      	mov	r0, r6
   174f0:	f7ff feda 	bl	172a8 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   174f4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   174f8:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   174fc:	f240 620c 	movw	r2, #1548	; 0x60c
   17500:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   17504:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   17508:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   1750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017510 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   17510:	b5f0      	push	{r4, r5, r6, r7, lr}
   17512:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   17514:	b1a1      	cbz	r1, 17540 <hal_i2c_init+0x30>
   17516:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   17518:	a901      	add	r1, sp, #4
   1751a:	f7ff ff7f 	bl	1741c <hal_i2c_resolve>
    if (rc != 0) {
   1751e:	4606      	mov	r6, r0
   17520:	bba8      	cbnz	r0, 1758e <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   17522:	9b01      	ldr	r3, [sp, #4]
   17524:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   17526:	68a3      	ldr	r3, [r4, #8]
   17528:	2bfa      	cmp	r3, #250	; 0xfa
   1752a:	d035      	beq.n	17598 <hal_i2c_init+0x88>
   1752c:	d90e      	bls.n	1754c <hal_i2c_init+0x3c>
   1752e:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   17532:	d02f      	beq.n	17594 <hal_i2c_init+0x84>
   17534:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   17538:	d131      	bne.n	1759e <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   1753a:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   1753e:	e009      	b.n	17554 <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   17540:	2300      	movs	r3, #0
   17542:	461a      	mov	r2, r3
   17544:	4619      	mov	r1, r3
   17546:	4618      	mov	r0, r3
   17548:	f000 fc88 	bl	17e5c <__assert_func>
    switch (cfg->i2c_frequency) {
   1754c:	2b64      	cmp	r3, #100	; 0x64
   1754e:	d126      	bne.n	1759e <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   17550:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   17554:	6861      	ldr	r1, [r4, #4]
   17556:	6820      	ldr	r0, [r4, #0]
   17558:	f7ff ff89 	bl	1746e <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   1755c:	6823      	ldr	r3, [r4, #0]
   1755e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   17562:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17566:	f240 610c 	movw	r1, #1548	; 0x60c
   1756a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   1756e:	6863      	ldr	r3, [r4, #4]
   17570:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17574:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   17578:	6823      	ldr	r3, [r4, #0]
   1757a:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   1757e:	6863      	ldr	r3, [r4, #4]
   17580:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   17584:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17588:	2305      	movs	r3, #5
   1758a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   1758e:	4630      	mov	r0, r6
   17590:	b003      	add	sp, #12
   17592:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   17594:	4f03      	ldr	r7, [pc, #12]	; (175a4 <hal_i2c_init+0x94>)
        break;
   17596:	e7dd      	b.n	17554 <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   17598:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   1759c:	e7da      	b.n	17554 <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   1759e:	2602      	movs	r6, #2
   175a0:	e7f5      	b.n	1758e <hal_i2c_init+0x7e>
   175a2:	bf00      	nop
   175a4:	06147ae9 	.word	0x06147ae9

000175a8 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   175a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175ac:	b083      	sub	sp, #12
   175ae:	4688      	mov	r8, r1
   175b0:	4615      	mov	r5, r2
   175b2:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   175b4:	a901      	add	r1, sp, #4
   175b6:	f7ff ff31 	bl	1741c <hal_i2c_resolve>
    if (rc != 0) {
   175ba:	4681      	mov	r9, r0
   175bc:	b118      	cbz	r0, 175c6 <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   175be:	4648      	mov	r0, r9
   175c0:	b003      	add	sp, #12
   175c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   175c6:	9b01      	ldr	r3, [sp, #4]
   175c8:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   175ca:	f898 3000 	ldrb.w	r3, [r8]
   175ce:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   175d2:	2300      	movs	r3, #0
   175d4:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   175d8:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   175dc:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   175e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   175e4:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   175e8:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   175ec:	2300      	movs	r3, #0
   175ee:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   175f2:	2301      	movs	r3, #1
   175f4:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   175f6:	f000 fe61 	bl	182bc <os_cputime_get32>
   175fa:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   175fe:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17602:	f7ff fe62 	bl	172ca <hal_gpio_read>
   17606:	b1b0      	cbz	r0, 17636 <hal_i2c_master_write+0x8e>
   17608:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1760c:	b99b      	cbnz	r3, 17636 <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1760e:	f000 fe55 	bl	182bc <os_cputime_get32>
   17612:	1b80      	subs	r0, r0, r6
   17614:	2800      	cmp	r0, #0
   17616:	dbf2      	blt.n	175fe <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17618:	2300      	movs	r3, #0
   1761a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1761e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17622:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   17626:	f7ff ff22 	bl	1746e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1762a:	2305      	movs	r3, #5
   1762c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17630:	f1bb 0b01 	subs.w	fp, fp, #1
   17634:	d1da      	bne.n	175ec <hal_i2c_master_write+0x44>
    start = os_time_get();
   17636:	f001 fe2f 	bl	19298 <os_time_get>
   1763a:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   1763c:	464f      	mov	r7, r9
   1763e:	e003      	b.n	17648 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   17640:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17644:	b9db      	cbnz	r3, 1767e <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   17646:	3701      	adds	r7, #1
   17648:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   1764c:	42bb      	cmp	r3, r7
   1764e:	dd24      	ble.n	1769a <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   17650:	2300      	movs	r3, #0
   17652:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   17656:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1765a:	5ddb      	ldrb	r3, [r3, r7]
   1765c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   17660:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   17664:	2b00      	cmp	r3, #0
   17666:	d1eb      	bne.n	17640 <hal_i2c_master_write+0x98>
   17668:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1766c:	2b00      	cmp	r3, #0
   1766e:	d1e7      	bne.n	17640 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   17670:	f001 fe12 	bl	19298 <os_time_get>
   17674:	1b80      	subs	r0, r0, r6
   17676:	42a8      	cmp	r0, r5
   17678:	d9f2      	bls.n	17660 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   1767a:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   1767e:	2301      	movs	r3, #1
   17680:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   17682:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17686:	2b00      	cmp	r3, #0
   17688:	d099      	beq.n	175be <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   1768a:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   1768e:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   17692:	f7ff fed5 	bl	17440 <hal_i2c_convert_status>
   17696:	4681      	mov	r9, r0
   17698:	e791      	b.n	175be <hal_i2c_master_write+0x16>
    if (last_op) {
   1769a:	f1ba 0f00 	cmp.w	sl, #0
   1769e:	d08e      	beq.n	175be <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   176a0:	2300      	movs	r3, #0
   176a2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   176a6:	2301      	movs	r3, #1
   176a8:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   176aa:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   176ae:	b953      	cbnz	r3, 176c6 <hal_i2c_master_write+0x11e>
   176b0:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176b4:	b93b      	cbnz	r3, 176c6 <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   176b6:	f001 fdef 	bl	19298 <os_time_get>
   176ba:	1b80      	subs	r0, r0, r6
   176bc:	42a8      	cmp	r0, r5
   176be:	d9f4      	bls.n	176aa <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   176c0:	f04f 0903 	mov.w	r9, #3
   176c4:	e7db      	b.n	1767e <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   176c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   176ca:	2b00      	cmp	r3, #0
   176cc:	d1d7      	bne.n	1767e <hal_i2c_master_write+0xd6>
   176ce:	e776      	b.n	175be <hal_i2c_master_write+0x16>

000176d0 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   176d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176d4:	b085      	sub	sp, #20
   176d6:	460f      	mov	r7, r1
   176d8:	4615      	mov	r5, r2
   176da:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   176dc:	a903      	add	r1, sp, #12
   176de:	f7ff fe9d 	bl	1741c <hal_i2c_resolve>
    if (rc != 0) {
   176e2:	4681      	mov	r9, r0
   176e4:	b118      	cbz	r0, 176ee <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   176e6:	4648      	mov	r0, r9
   176e8:	b005      	add	sp, #20
   176ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   176ee:	9b03      	ldr	r3, [sp, #12]
   176f0:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   176f2:	f001 fdd1 	bl	19298 <os_time_get>
   176f6:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   176f8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   176fc:	b11b      	cbz	r3, 17706 <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   176fe:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   17702:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   17706:	2300      	movs	r3, #0
   17708:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   1770c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   17710:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   17714:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   17718:	783b      	ldrb	r3, [r7, #0]
   1771a:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   1771e:	887b      	ldrh	r3, [r7, #2]
   17720:	2b01      	cmp	r3, #1
   17722:	d02e      	beq.n	17782 <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   17724:	2301      	movs	r3, #1
   17726:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   1772a:	46a2      	mov	sl, r4
    int retry = 2;
   1772c:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   17730:	2300      	movs	r3, #0
   17732:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   17736:	2301      	movs	r3, #1
   17738:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   1773c:	f000 fdbe 	bl	182bc <os_cputime_get32>
   17740:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   17744:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   17748:	f7ff fdbf 	bl	172ca <hal_gpio_read>
   1774c:	b1b8      	cbz	r0, 1777e <hal_i2c_master_read+0xae>
   1774e:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   17752:	b9a3      	cbnz	r3, 1777e <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   17754:	f000 fdb2 	bl	182bc <os_cputime_get32>
   17758:	eba0 0008 	sub.w	r0, r0, r8
   1775c:	2800      	cmp	r0, #0
   1775e:	dbf1      	blt.n	17744 <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   17760:	2300      	movs	r3, #0
   17762:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   17766:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   1776a:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   1776e:	f7ff fe7e 	bl	1746e <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   17772:	2305      	movs	r3, #5
   17774:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   17778:	f1bb 0b01 	subs.w	fp, fp, #1
   1777c:	d1d8      	bne.n	17730 <hal_i2c_master_read+0x60>
    int retry = 2;
   1777e:	46c8      	mov	r8, r9
   17780:	e017      	b.n	177b2 <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   17782:	9b01      	ldr	r3, [sp, #4]
   17784:	2b00      	cmp	r3, #0
   17786:	d0cd      	beq.n	17724 <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17788:	2302      	movs	r3, #2
   1778a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1778e:	e7cc      	b.n	1772a <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   17790:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   17794:	bb0b      	cbnz	r3, 177da <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   17796:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   1779a:	687b      	ldr	r3, [r7, #4]
   1779c:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   177a0:	887b      	ldrh	r3, [r7, #2]
   177a2:	3b02      	subs	r3, #2
   177a4:	4543      	cmp	r3, r8
   177a6:	d02a      	beq.n	177fe <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   177a8:	2300      	movs	r3, #0
   177aa:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   177ae:	f108 0801 	add.w	r8, r8, #1
   177b2:	887b      	ldrh	r3, [r7, #2]
   177b4:	4543      	cmp	r3, r8
   177b6:	dd96      	ble.n	176e6 <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   177b8:	2301      	movs	r3, #1
   177ba:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   177bc:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   177c0:	2b00      	cmp	r3, #0
   177c2:	d1e5      	bne.n	17790 <hal_i2c_master_read+0xc0>
   177c4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177c8:	2b00      	cmp	r3, #0
   177ca:	d1e1      	bne.n	17790 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   177cc:	f001 fd64 	bl	19298 <os_time_get>
   177d0:	1b80      	subs	r0, r0, r6
   177d2:	42a8      	cmp	r0, r5
   177d4:	d9f2      	bls.n	177bc <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   177d6:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   177da:	2301      	movs	r3, #1
   177dc:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   177de:	2300      	movs	r3, #0
   177e0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   177e4:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   177e8:	2b00      	cmp	r3, #0
   177ea:	f43f af7c 	beq.w	176e6 <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   177ee:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   177f2:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   177f6:	f7ff fe23 	bl	17440 <hal_i2c_convert_status>
   177fa:	4681      	mov	r9, r0
   177fc:	e773      	b.n	176e6 <hal_i2c_master_read+0x16>
            if (last_op) {
   177fe:	9b01      	ldr	r3, [sp, #4]
   17800:	2b00      	cmp	r3, #0
   17802:	d0d1      	beq.n	177a8 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   17804:	2302      	movs	r3, #2
   17806:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   1780a:	e7cd      	b.n	177a8 <hal_i2c_master_read+0xd8>

0001780c <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   1780c:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   1780e:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   17810:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   17814:	b32b      	cbz	r3, 17862 <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   17816:	2300      	movs	r3, #0
   17818:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   1781c:	7843      	ldrb	r3, [r0, #1]
   1781e:	b303      	cbz	r3, 17862 <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   17820:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   17824:	88c3      	ldrh	r3, [r0, #6]
   17826:	fa13 f382 	uxtah	r3, r3, r2
   1782a:	b29b      	uxth	r3, r3
   1782c:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   1782e:	8881      	ldrh	r1, [r0, #4]
   17830:	428b      	cmp	r3, r1
   17832:	d217      	bcs.n	17864 <nrf52_irqm_handler+0x58>
   17834:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   17836:	6984      	ldr	r4, [r0, #24]
   17838:	4414      	add	r4, r2
   1783a:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   1783c:	1acb      	subs	r3, r1, r3
   1783e:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   17840:	2bff      	cmp	r3, #255	; 0xff
   17842:	bf28      	it	cs
   17844:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   17846:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   1784a:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   1784e:	69c1      	ldr	r1, [r0, #28]
   17850:	b129      	cbz	r1, 1785e <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   17852:	440a      	add	r2, r1
   17854:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   17856:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   1785a:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   1785e:	2301      	movs	r3, #1
   17860:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   17862:	bd38      	pop	{r3, r4, r5, pc}
   17864:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   17866:	6a03      	ldr	r3, [r0, #32]
   17868:	b10b      	cbz	r3, 1786e <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   1786a:	6a40      	ldr	r0, [r0, #36]	; 0x24
   1786c:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   1786e:	2300      	movs	r3, #0
   17870:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   17872:	2340      	movs	r3, #64	; 0x40
   17874:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   17878:	e7f3      	b.n	17862 <nrf52_irqm_handler+0x56>
	...

0001787c <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   1787c:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   1787e:	4b04      	ldr	r3, [pc, #16]	; (17890 <nrf52_spi0_irq_handler+0x14>)
   17880:	781b      	ldrb	r3, [r3, #0]
   17882:	b103      	cbz	r3, 17886 <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   17884:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   17886:	4802      	ldr	r0, [pc, #8]	; (17890 <nrf52_spi0_irq_handler+0x14>)
   17888:	f7ff ffc0 	bl	1780c <nrf52_irqm_handler>
}
   1788c:	e7fa      	b.n	17884 <nrf52_spi0_irq_handler+0x8>
   1788e:	bf00      	nop
   17890:	2000cdc0 	.word	0x2000cdc0

00017894 <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   17894:	2301      	movs	r3, #1
   17896:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   17898:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   1789c:	2b00      	cmp	r3, #0
   1789e:	d0fb      	beq.n	17898 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   178a0:	2300      	movs	r3, #0
   178a2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   178a6:	4770      	bx	lr

000178a8 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   178a8:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   178aa:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   178ac:	780b      	ldrb	r3, [r1, #0]
   178ae:	2b03      	cmp	r3, #3
   178b0:	d80c      	bhi.n	178cc <hal_spi_config_slave+0x24>
   178b2:	e8df f003 	tbb	[pc, r3]
   178b6:	0e02      	.short	0x0e02
   178b8:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   178ba:	2300      	movs	r3, #0
    rc = 0;
   178bc:	4618      	mov	r0, r3
   178be:	e00a      	b.n	178d6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   178c0:	2304      	movs	r3, #4
    rc = 0;
   178c2:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   178c4:	e007      	b.n	178d6 <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   178c6:	2306      	movs	r3, #6
    rc = 0;
   178c8:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   178ca:	e004      	b.n	178d6 <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   178cc:	2300      	movs	r3, #0
            rc = EINVAL;
   178ce:	2016      	movs	r0, #22
            break;
   178d0:	e001      	b.n	178d6 <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   178d2:	2302      	movs	r3, #2
    rc = 0;
   178d4:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   178d6:	784c      	ldrb	r4, [r1, #1]
   178d8:	2c01      	cmp	r4, #1
   178da:	d006      	beq.n	178ea <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   178dc:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   178e0:	788b      	ldrb	r3, [r1, #2]
   178e2:	b92b      	cbnz	r3, 178f0 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   178e4:	f85d 4b04 	ldr.w	r4, [sp], #4
   178e8:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   178ea:	f043 0301 	orr.w	r3, r3, #1
   178ee:	e7f5      	b.n	178dc <hal_spi_config_slave+0x34>
            rc = EINVAL;
   178f0:	2016      	movs	r0, #22
    return rc;
   178f2:	e7f7      	b.n	178e4 <hal_spi_config_slave+0x3c>

000178f4 <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   178f4:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   178f6:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   178f8:	2501      	movs	r5, #1
   178fa:	409d      	lsls	r5, r3
   178fc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   17900:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   17904:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17908:	2503      	movs	r5, #3
   1790a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   1790e:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   17910:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   17914:	2500      	movs	r5, #0
   17916:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   1791a:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   1791c:	780c      	ldrb	r4, [r1, #0]
   1791e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   17922:	784c      	ldrb	r4, [r1, #1]
   17924:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   17928:	7889      	ldrb	r1, [r1, #2]
   1792a:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   1792e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   17932:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   17936:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1793a:	4919      	ldr	r1, [pc, #100]	; (179a0 <hal_spi_init_master+0xac>)
   1793c:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1793e:	3310      	adds	r3, #16
   17940:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   17944:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17948:	42ab      	cmp	r3, r5
   1794a:	db22      	blt.n	17992 <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1794c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   17950:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   17954:	22e0      	movs	r2, #224	; 0xe0
   17956:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   1795a:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   1795e:	2b00      	cmp	r3, #0
   17960:	db08      	blt.n	17974 <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17962:	f003 011f 	and.w	r1, r3, #31
   17966:	095b      	lsrs	r3, r3, #5
   17968:	2201      	movs	r2, #1
   1796a:	408a      	lsls	r2, r1
   1796c:	3360      	adds	r3, #96	; 0x60
   1796e:	490d      	ldr	r1, [pc, #52]	; (179a4 <hal_spi_init_master+0xb0>)
   17970:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   17974:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   17978:	2b00      	cmp	r3, #0
   1797a:	db07      	blt.n	1798c <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1797c:	f003 011f 	and.w	r1, r3, #31
   17980:	095b      	lsrs	r3, r3, #5
   17982:	2201      	movs	r2, #1
   17984:	408a      	lsls	r2, r1
   17986:	4907      	ldr	r1, [pc, #28]	; (179a4 <hal_spi_init_master+0xb0>)
   17988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   1798c:	2000      	movs	r0, #0
   1798e:	bc30      	pop	{r4, r5}
   17990:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17992:	f003 030f 	and.w	r3, r3, #15
   17996:	4a04      	ldr	r2, [pc, #16]	; (179a8 <hal_spi_init_master+0xb4>)
   17998:	441a      	add	r2, r3
   1799a:	23e0      	movs	r3, #224	; 0xe0
   1799c:	7613      	strb	r3, [r2, #24]
   1799e:	e7dc      	b.n	1795a <hal_spi_init_master+0x66>
   179a0:	e000ed00 	.word	0xe000ed00
   179a4:	e000e100 	.word	0xe000e100
   179a8:	e000ecfc 	.word	0xe000ecfc

000179ac <hal_spi_config_master>:
{
   179ac:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   179ae:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   179b0:	680c      	ldr	r4, [r1, #0]
   179b2:	684b      	ldr	r3, [r1, #4]
   179b4:	6084      	str	r4, [r0, #8]
   179b6:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   179b8:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   179bc:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   179c0:	7808      	ldrb	r0, [r1, #0]
   179c2:	2801      	cmp	r0, #1
   179c4:	d916      	bls.n	179f4 <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   179c6:	2001      	movs	r0, #1
   179c8:	4098      	lsls	r0, r3
   179ca:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   179ce:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   179d2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   179d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   179da:	2403      	movs	r4, #3
   179dc:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   179e0:	788b      	ldrb	r3, [r1, #2]
   179e2:	b973      	cbnz	r3, 17a02 <hal_spi_config_master+0x56>
    rc = 0;
   179e4:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   179e6:	780b      	ldrb	r3, [r1, #0]
   179e8:	2b03      	cmp	r3, #3
   179ea:	d812      	bhi.n	17a12 <hal_spi_config_master+0x66>
   179ec:	e8df f003 	tbb	[pc, r3]
   179f0:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   179f4:	2001      	movs	r0, #1
   179f6:	4098      	lsls	r0, r3
   179f8:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   179fc:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   17a00:	e7e7      	b.n	179d2 <hal_spi_config_master+0x26>
            rc = EINVAL;
   17a02:	2016      	movs	r0, #22
   17a04:	e7ef      	b.n	179e6 <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17a06:	2300      	movs	r3, #0
   17a08:	e007      	b.n	17a1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17a0a:	2304      	movs	r3, #4
            break;
   17a0c:	e005      	b.n	17a1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   17a0e:	2306      	movs	r3, #6
            break;
   17a10:	e003      	b.n	17a1a <hal_spi_config_master+0x6e>
            nrf_config = 0;
   17a12:	2300      	movs	r3, #0
            rc = EINVAL;
   17a14:	2016      	movs	r0, #22
            break;
   17a16:	e000      	b.n	17a1a <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   17a18:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   17a1a:	784c      	ldrb	r4, [r1, #1]
   17a1c:	2c01      	cmp	r4, #1
   17a1e:	d010      	beq.n	17a42 <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   17a20:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   17a24:	684b      	ldr	r3, [r1, #4]
   17a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   17a2a:	d023      	beq.n	17a74 <hal_spi_config_master+0xc8>
   17a2c:	d80c      	bhi.n	17a48 <hal_spi_config_master+0x9c>
   17a2e:	2bfa      	cmp	r3, #250	; 0xfa
   17a30:	d029      	beq.n	17a86 <hal_spi_config_master+0xda>
   17a32:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   17a36:	d01a      	beq.n	17a6e <hal_spi_config_master+0xc2>
   17a38:	2b7d      	cmp	r3, #125	; 0x7d
   17a3a:	d011      	beq.n	17a60 <hal_spi_config_master+0xb4>
            frequency = 0;
   17a3c:	2300      	movs	r3, #0
            rc = EINVAL;
   17a3e:	2016      	movs	r0, #22
            break;
   17a40:	e010      	b.n	17a64 <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   17a42:	f043 0301 	orr.w	r3, r3, #1
   17a46:	e7eb      	b.n	17a20 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   17a48:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   17a4c:	d015      	beq.n	17a7a <hal_spi_config_master+0xce>
   17a4e:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   17a52:	d015      	beq.n	17a80 <hal_spi_config_master+0xd4>
   17a54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   17a58:	d1f0      	bne.n	17a3c <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   17a5a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   17a5e:	e001      	b.n	17a64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   17a60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   17a64:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   17a68:	f85d 4b04 	ldr.w	r4, [sp], #4
   17a6c:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   17a6e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   17a72:	e7f7      	b.n	17a64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   17a74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   17a78:	e7f4      	b.n	17a64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   17a7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   17a7e:	e7f1      	b.n	17a64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   17a80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   17a84:	e7ee      	b.n	17a64 <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   17a86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   17a8a:	e7eb      	b.n	17a64 <hal_spi_config_master+0xb8>

00017a8c <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a8c:	2802      	cmp	r0, #2
   17a8e:	dc10      	bgt.n	17ab2 <hal_spi_config+0x26>
{
   17a90:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17a92:	4b0b      	ldr	r3, [pc, #44]	; (17ac0 <hal_spi_config+0x34>)
   17a94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   17a98:	b168      	cbz	r0, 17ab6 <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17a9a:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   17a9c:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   17aa0:	b95b      	cbnz	r3, 17aba <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17aa2:	7803      	ldrb	r3, [r0, #0]
   17aa4:	b113      	cbz	r3, 17aac <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   17aa6:	f7ff feff 	bl	178a8 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   17aaa:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   17aac:	f7ff ff7e 	bl	179ac <hal_spi_config_master>
   17ab0:	e7fb      	b.n	17aaa <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ab2:	2016      	movs	r0, #22
}
   17ab4:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ab6:	2016      	movs	r0, #22
   17ab8:	e7f7      	b.n	17aaa <hal_spi_config+0x1e>
        return -1;
   17aba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17abe:	e7f4      	b.n	17aaa <hal_spi_config+0x1e>
   17ac0:	0001f270 	.word	0x0001f270

00017ac4 <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17ac4:	2802      	cmp	r0, #2
   17ac6:	dc1b      	bgt.n	17b00 <hal_spi_enable+0x3c>
   17ac8:	4b10      	ldr	r3, [pc, #64]	; (17b0c <hal_spi_enable+0x48>)
   17aca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17ace:	b1cb      	cbz	r3, 17b04 <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17ad0:	781a      	ldrb	r2, [r3, #0]
   17ad2:	b17a      	cbz	r2, 17af4 <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   17ad4:	6a1a      	ldr	r2, [r3, #32]
   17ad6:	b1ba      	cbz	r2, 17b08 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   17ad8:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   17ada:	2000      	movs	r0, #0
   17adc:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17ae0:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   17ae4:	f240 4202 	movw	r2, #1026	; 0x402
   17ae8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   17aec:	2202      	movs	r2, #2
   17aee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   17af2:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   17af4:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17af6:	2201      	movs	r2, #1
   17af8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   17afc:	2000      	movs	r0, #0
   17afe:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b00:	2016      	movs	r0, #22
   17b02:	4770      	bx	lr
   17b04:	2016      	movs	r0, #22
   17b06:	4770      	bx	lr
            rc = EINVAL;
   17b08:	2016      	movs	r0, #22

err:
    return rc;
}
   17b0a:	4770      	bx	lr
   17b0c:	0001f270 	.word	0x0001f270

00017b10 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b10:	2802      	cmp	r0, #2
   17b12:	dc2a      	bgt.n	17b6a <hal_spi_disable+0x5a>
{
   17b14:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b16:	4b17      	ldr	r3, [pc, #92]	; (17b74 <hal_spi_disable+0x64>)
   17b18:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17b1c:	b33c      	cbz	r4, 17b6e <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17b1e:	7823      	ldrb	r3, [r4, #0]
   17b20:	b9ab      	cbnz	r3, 17b4e <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   17b22:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17b24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b28:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   17b2c:	7863      	ldrb	r3, [r4, #1]
   17b2e:	b943      	cbnz	r3, 17b42 <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   17b30:	2300      	movs	r3, #0
   17b32:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   17b36:	2000      	movs	r0, #0
   17b38:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   17b3a:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   17b3c:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   17b3e:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   17b40:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   17b42:	4628      	mov	r0, r5
   17b44:	f7ff fea6 	bl	17894 <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   17b48:	2300      	movs	r3, #0
   17b4a:	7063      	strb	r3, [r4, #1]
   17b4c:	e7f0      	b.n	17b30 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   17b4e:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   17b50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17b54:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   17b58:	2300      	movs	r3, #0
   17b5a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   17b5e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   17b62:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   17b66:	70e3      	strb	r3, [r4, #3]
   17b68:	e7e5      	b.n	17b36 <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b6a:	2016      	movs	r0, #22
}
   17b6c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b6e:	2016      	movs	r0, #22
    return rc;
   17b70:	e7e6      	b.n	17b40 <hal_spi_disable+0x30>
   17b72:	bf00      	nop
   17b74:	0001f270 	.word	0x0001f270

00017b78 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b78:	2802      	cmp	r0, #2
   17b7a:	dc1d      	bgt.n	17bb8 <hal_spi_init+0x40>
{
   17b7c:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17b7e:	4b13      	ldr	r3, [pc, #76]	; (17bcc <hal_spi_init+0x54>)
   17b80:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   17b84:	b1d4      	cbz	r4, 17bbc <hal_spi_init+0x44>
    if (cfg == NULL) {
   17b86:	b1d9      	cbz	r1, 17bc0 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   17b88:	2a01      	cmp	r2, #1
   17b8a:	d81b      	bhi.n	17bc4 <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   17b8c:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   17b8e:	b9d8      	cbnz	r0, 17bc8 <hal_spi_init+0x50>
   17b90:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   17b92:	2303      	movs	r3, #3
   17b94:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   17b96:	b94a      	cbnz	r2, 17bac <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   17b98:	4b0d      	ldr	r3, [pc, #52]	; (17bd0 <hal_spi_init+0x58>)
   17b9a:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   17b9c:	f7ff ffb8 	bl	17b10 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   17ba0:	4a0c      	ldr	r2, [pc, #48]	; (17bd4 <hal_spi_init+0x5c>)
   17ba2:	4629      	mov	r1, r5
   17ba4:	4620      	mov	r0, r4
   17ba6:	f7ff fea5 	bl	178f4 <hal_spi_init_master>
   17baa:	e00c      	b.n	17bc6 <hal_spi_init+0x4e>
            assert(0);
   17bac:	2300      	movs	r3, #0
   17bae:	461a      	mov	r2, r3
   17bb0:	4619      	mov	r1, r3
   17bb2:	4618      	mov	r0, r3
   17bb4:	f000 f952 	bl	17e5c <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bb8:	2016      	movs	r0, #22
}
   17bba:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bbc:	2016      	movs	r0, #22
   17bbe:	e002      	b.n	17bc6 <hal_spi_init+0x4e>
    rc = EINVAL;
   17bc0:	2016      	movs	r0, #22
   17bc2:	e000      	b.n	17bc6 <hal_spi_init+0x4e>
   17bc4:	2016      	movs	r0, #22
}
   17bc6:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   17bc8:	2016      	movs	r0, #22
    return (rc);
   17bca:	e7fc      	b.n	17bc6 <hal_spi_init+0x4e>
   17bcc:	0001f270 	.word	0x0001f270
   17bd0:	40003000 	.word	0x40003000
   17bd4:	0001787d 	.word	0x0001787d

00017bd8 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bd8:	2802      	cmp	r0, #2
   17bda:	dc0a      	bgt.n	17bf2 <hal_spi_set_txrx_cb+0x1a>
   17bdc:	4b08      	ldr	r3, [pc, #32]	; (17c00 <hal_spi_set_txrx_cb+0x28>)
   17bde:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17be2:	b143      	cbz	r3, 17bf6 <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   17be4:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   17be6:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   17bea:	b930      	cbnz	r0, 17bfa <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   17bec:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   17bee:	625a      	str	r2, [r3, #36]	; 0x24
   17bf0:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17bf2:	2016      	movs	r0, #22
   17bf4:	4770      	bx	lr
   17bf6:	2016      	movs	r0, #22
   17bf8:	4770      	bx	lr
        rc = -1;
   17bfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   17bfe:	4770      	bx	lr
   17c00:	0001f270 	.word	0x0001f270

00017c04 <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   17c04:	2b00      	cmp	r3, #0
   17c06:	d046      	beq.n	17c96 <hal_spi_txrx+0x92>
{
   17c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17c0a:	460d      	mov	r5, r1
   17c0c:	4617      	mov	r7, r2
   17c0e:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   17c10:	2802      	cmp	r0, #2
   17c12:	dc42      	bgt.n	17c9a <hal_spi_txrx+0x96>
   17c14:	4b25      	ldr	r3, [pc, #148]	; (17cac <hal_spi_txrx+0xa8>)
   17c16:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   17c1a:	2b00      	cmp	r3, #0
   17c1c:	d03f      	beq.n	17c9e <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17c1e:	781a      	ldrb	r2, [r3, #0]
   17c20:	2a00      	cmp	r2, #0
   17c22:	d13e      	bne.n	17ca2 <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17c24:	2900      	cmp	r1, #0
   17c26:	d03e      	beq.n	17ca6 <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   17c28:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   17c2a:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   17c2e:	2b07      	cmp	r3, #7
   17c30:	d004      	beq.n	17c3c <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   17c32:	b95b      	cbnz	r3, 17c4c <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   17c34:	2301      	movs	r3, #1
   17c36:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   17c3a:	e007      	b.n	17c4c <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   17c3c:	f7ff ff68 	bl	17b10 <hal_spi_disable>
   17c40:	e7f8      	b.n	17c34 <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   17c42:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   17c46:	2300      	movs	r3, #0
   17c48:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   17c4c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c50:	2b00      	cmp	r3, #0
   17c52:	d1f6      	bne.n	17c42 <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   17c54:	782b      	ldrb	r3, [r5, #0]
   17c56:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   17c5a:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   17c5c:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   17c5e:	2200      	movs	r2, #0
   17c60:	e00d      	b.n	17c7e <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   17c62:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   17c66:	2b00      	cmp	r3, #0
   17c68:	d0fb      	beq.n	17c62 <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   17c6a:	2300      	movs	r3, #0
   17c6c:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   17c70:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   17c74:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   17c76:	b10f      	cbz	r7, 17c7c <hal_spi_txrx+0x78>
                *rxd = rxval;
   17c78:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   17c7c:	3201      	adds	r2, #1
   17c7e:	42b2      	cmp	r2, r6
   17c80:	da07      	bge.n	17c92 <hal_spi_txrx+0x8e>
            if (txcnt) {
   17c82:	2900      	cmp	r1, #0
   17c84:	d0ed      	beq.n	17c62 <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   17c86:	786b      	ldrb	r3, [r5, #1]
   17c88:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   17c8c:	3901      	subs	r1, #1
                ++txd;
   17c8e:	3501      	adds	r5, #1
   17c90:	e7e7      	b.n	17c62 <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   17c92:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   17c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   17c96:	2016      	movs	r0, #22
}
   17c98:	4770      	bx	lr
    return rc;
   17c9a:	2016      	movs	r0, #22
   17c9c:	e7fa      	b.n	17c94 <hal_spi_txrx+0x90>
   17c9e:	2016      	movs	r0, #22
   17ca0:	e7f8      	b.n	17c94 <hal_spi_txrx+0x90>
   17ca2:	2016      	movs	r0, #22
   17ca4:	e7f6      	b.n	17c94 <hal_spi_txrx+0x90>
   17ca6:	2016      	movs	r0, #22
   17ca8:	e7f4      	b.n	17c94 <hal_spi_txrx+0x90>
   17caa:	bf00      	nop
   17cac:	0001f270 	.word	0x0001f270

00017cb0 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17cb0:	2802      	cmp	r0, #2
   17cb2:	dc57      	bgt.n	17d64 <hal_spi_txrx_noblock+0xb4>
{
   17cb4:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17cb6:	4c35      	ldr	r4, [pc, #212]	; (17d8c <hal_spi_txrx_noblock+0xdc>)
   17cb8:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   17cbc:	2800      	cmp	r0, #0
   17cbe:	d053      	beq.n	17d68 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   17cc0:	6a04      	ldr	r4, [r0, #32]
   17cc2:	2c00      	cmp	r4, #0
   17cc4:	d052      	beq.n	17d6c <hal_spi_txrx_noblock+0xbc>
   17cc6:	2b00      	cmp	r3, #0
   17cc8:	d052      	beq.n	17d70 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   17cca:	7804      	ldrb	r4, [r0, #0]
   17ccc:	2c00      	cmp	r4, #0
   17cce:	d137      	bne.n	17d40 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   17cd0:	2900      	cmp	r1, #0
   17cd2:	d050      	beq.n	17d76 <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   17cd4:	7844      	ldrb	r4, [r0, #1]
   17cd6:	2c00      	cmp	r4, #0
   17cd8:	d14f      	bne.n	17d7a <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   17cda:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   17cdc:	2540      	movs	r5, #64	; 0x40
   17cde:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   17ce2:	2501      	movs	r5, #1
   17ce4:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   17ce6:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   17cea:	2d07      	cmp	r5, #7
   17cec:	d005      	beq.n	17cfa <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   17cee:	2500      	movs	r5, #0
   17cf0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   17cf4:	2507      	movs	r5, #7
   17cf6:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   17cfa:	2500      	movs	r5, #0
   17cfc:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   17cfe:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   17d00:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   17d02:	2bff      	cmp	r3, #255	; 0xff
   17d04:	bfa8      	it	ge
   17d06:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   17d08:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   17d0c:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   17d10:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   17d12:	b172      	cbz	r2, 17d32 <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   17d14:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   17d18:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   17d1c:	2000      	movs	r0, #0
   17d1e:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   17d22:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   17d26:	2301      	movs	r3, #1
   17d28:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   17d2a:	2340      	movs	r3, #64	; 0x40
   17d2c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   17d30:	e01f      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   17d32:	3002      	adds	r0, #2
   17d34:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   17d38:	2301      	movs	r3, #1
   17d3a:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   17d3e:	e7ed      	b.n	17d1c <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17d40:	b161      	cbz	r1, 17d5c <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   17d42:	2bff      	cmp	r3, #255	; 0xff
   17d44:	dc1c      	bgt.n	17d80 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   17d46:	78c4      	ldrb	r4, [r0, #3]
   17d48:	b9e4      	cbnz	r4, 17d84 <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   17d4a:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   17d4c:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   17d4e:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   17d50:	2301      	movs	r3, #1
   17d52:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   17d54:	6902      	ldr	r2, [r0, #16]
   17d56:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   17d58:	2000      	movs	r0, #0
   17d5a:	e00a      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   17d5c:	2a00      	cmp	r2, #0
   17d5e:	d1f0      	bne.n	17d42 <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   17d60:	2016      	movs	r0, #22
   17d62:	e006      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d64:	2016      	movs	r0, #22

err:
    return rc;
}
   17d66:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   17d68:	2016      	movs	r0, #22
   17d6a:	e002      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17d6c:	2016      	movs	r0, #22
   17d6e:	e000      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
   17d70:	2016      	movs	r0, #22
}
   17d72:	bc30      	pop	{r4, r5}
   17d74:	4770      	bx	lr
    rc = EINVAL;
   17d76:	2016      	movs	r0, #22
   17d78:	e7fb      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17d7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d7e:	e7f8      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   17d80:	2016      	movs	r0, #22
   17d82:	e7f6      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   17d84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   17d88:	e7f3      	b.n	17d72 <hal_spi_txrx_noblock+0xc2>
   17d8a:	bf00      	nop
   17d8c:	0001f270 	.word	0x0001f270

00017d90 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   17d90:	b508      	push	{r3, lr}
    assert(0);
   17d92:	2300      	movs	r3, #0
   17d94:	461a      	mov	r2, r3
   17d96:	4619      	mov	r1, r3
   17d98:	4618      	mov	r0, r3
   17d9a:	f000 f85f 	bl	17e5c <__assert_func>
	...

00017da0 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   17da0:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   17da2:	4b06      	ldr	r3, [pc, #24]	; (17dbc <nrf52_wdt_irq_handler+0x1c>)
   17da4:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   17da8:	f013 0f01 	tst.w	r3, #1
   17dac:	d100      	bne.n	17db0 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   17dae:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   17db0:	4b02      	ldr	r3, [pc, #8]	; (17dbc <nrf52_wdt_irq_handler+0x1c>)
   17db2:	2200      	movs	r2, #0
   17db4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   17db8:	f7ff ffea 	bl	17d90 <nrf52_hal_wdt_default_handler>
   17dbc:	40010000 	.word	0x40010000

00017dc0 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   17dc0:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   17dc2:	4b17      	ldr	r3, [pc, #92]	; (17e20 <hal_watchdog_init+0x60>)
   17dc4:	2201      	movs	r2, #1
   17dc6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   17dca:	4b16      	ldr	r3, [pc, #88]	; (17e24 <hal_watchdog_init+0x64>)
   17dcc:	4298      	cmp	r0, r3
   17dce:	d821      	bhi.n	17e14 <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   17dd0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   17dd4:	0153      	lsls	r3, r2, #5
   17dd6:	4a14      	ldr	r2, [pc, #80]	; (17e28 <hal_watchdog_init+0x68>)
   17dd8:	fba2 2303 	umull	r2, r3, r2, r3
   17ddc:	08db      	lsrs	r3, r3, #3
   17dde:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   17de2:	4b0f      	ldr	r3, [pc, #60]	; (17e20 <hal_watchdog_init+0x60>)
   17de4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   17de8:	4a10      	ldr	r2, [pc, #64]	; (17e2c <hal_watchdog_init+0x6c>)
   17dea:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   17dec:	4910      	ldr	r1, [pc, #64]	; (17e30 <hal_watchdog_init+0x70>)
   17dee:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17df2:	4a10      	ldr	r2, [pc, #64]	; (17e34 <hal_watchdog_init+0x74>)
   17df4:	21e0      	movs	r1, #224	; 0xe0
   17df6:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   17dfe:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17e02:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   17e04:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   17e08:	f042 0201 	orr.w	r2, r2, #1
   17e0c:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   17e10:	2000      	movs	r0, #0
   17e12:	bd08      	pop	{r3, pc}
        assert(0);
   17e14:	2300      	movs	r3, #0
   17e16:	461a      	mov	r2, r3
   17e18:	4619      	mov	r1, r3
   17e1a:	4618      	mov	r0, r3
   17e1c:	f000 f81e 	bl	17e5c <__assert_func>
   17e20:	40010000 	.word	0x40010000
   17e24:	02aaaaaa 	.word	0x02aaaaaa
   17e28:	10624dd3 	.word	0x10624dd3
   17e2c:	e000ed00 	.word	0xe000ed00
   17e30:	00017da1 	.word	0x00017da1
   17e34:	e000e100 	.word	0xe000e100

00017e38 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   17e38:	4b02      	ldr	r3, [pc, #8]	; (17e44 <hal_watchdog_enable+0xc>)
   17e3a:	2201      	movs	r2, #1
   17e3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   17e40:	601a      	str	r2, [r3, #0]
}
   17e42:	4770      	bx	lr
   17e44:	40010000 	.word	0x40010000

00017e48 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   17e48:	4b02      	ldr	r3, [pc, #8]	; (17e54 <hal_watchdog_tickle+0xc>)
   17e4a:	4a03      	ldr	r2, [pc, #12]	; (17e58 <hal_watchdog_tickle+0x10>)
   17e4c:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   17e50:	4770      	bx	lr
   17e52:	bf00      	nop
   17e54:	40010000 	.word	0x40010000
   17e58:	6e524635 	.word	0x6e524635

00017e5c <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   17e5c:	b508      	push	{r3, lr}
   17e5e:	4675      	mov	r5, lr
   17e60:	4604      	mov	r4, r0
   17e62:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   17e64:	f001 fa90 	bl	19388 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   17e68:	f7ff f905 	bl	17076 <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   17e6c:	b18c      	cbz	r4, 17e92 <__assert_func+0x36>
   17e6e:	4633      	mov	r3, r6
   17e70:	4622      	mov	r2, r4
   17e72:	4629      	mov	r1, r5
   17e74:	4809      	ldr	r0, [pc, #36]	; (17e9c <__assert_func+0x40>)
   17e76:	f7ff f929 	bl	170cc <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   17e7a:	f7f0 f983 	bl	8184 <hal_debugger_connected>
   17e7e:	b100      	cbz	r0, 17e82 <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   17e80:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   17e82:	4b07      	ldr	r3, [pc, #28]	; (17ea0 <__assert_func+0x44>)
   17e84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17e88:	605a      	str	r2, [r3, #4]
    asm("isb");
   17e8a:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   17e8e:	f7f0 f981 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   17e92:	4629      	mov	r1, r5
   17e94:	4803      	ldr	r0, [pc, #12]	; (17ea4 <__assert_func+0x48>)
   17e96:	f7ff f919 	bl	170cc <console_printf>
   17e9a:	e7ee      	b.n	17e7a <__assert_func+0x1e>
   17e9c:	0001f28c 	.word	0x0001f28c
   17ea0:	e000ed00 	.word	0xe000ed00
   17ea4:	0001f27c 	.word	0x0001f27c

00017ea8 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   17ea8:	b500      	push	{lr}
   17eaa:	b083      	sub	sp, #12
   17eac:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   17eae:	f7ff f8e2 	bl	17076 <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   17eb2:	4d1b      	ldr	r5, [pc, #108]	; (17f20 <os_default_irq+0x78>)
   17eb4:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   17eb6:	6822      	ldr	r2, [r4, #0]
   17eb8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   17ebc:	4819      	ldr	r0, [pc, #100]	; (17f24 <os_default_irq+0x7c>)
   17ebe:	f7ff f905 	bl	170cc <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   17ec2:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   17ec4:	6883      	ldr	r3, [r0, #8]
   17ec6:	6842      	ldr	r2, [r0, #4]
   17ec8:	6801      	ldr	r1, [r0, #0]
   17eca:	68c0      	ldr	r0, [r0, #12]
   17ecc:	9000      	str	r0, [sp, #0]
   17ece:	4816      	ldr	r0, [pc, #88]	; (17f28 <os_default_irq+0x80>)
   17ed0:	f7ff f8fc 	bl	170cc <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   17ed4:	6923      	ldr	r3, [r4, #16]
   17ed6:	9300      	str	r3, [sp, #0]
   17ed8:	68e3      	ldr	r3, [r4, #12]
   17eda:	68a2      	ldr	r2, [r4, #8]
   17edc:	6861      	ldr	r1, [r4, #4]
   17ede:	4813      	ldr	r0, [pc, #76]	; (17f2c <os_default_irq+0x84>)
   17ee0:	f7ff f8f4 	bl	170cc <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   17ee4:	6a23      	ldr	r3, [r4, #32]
   17ee6:	9300      	str	r3, [sp, #0]
   17ee8:	69e3      	ldr	r3, [r4, #28]
   17eea:	69a2      	ldr	r2, [r4, #24]
   17eec:	6961      	ldr	r1, [r4, #20]
   17eee:	4810      	ldr	r0, [pc, #64]	; (17f30 <os_default_irq+0x88>)
   17ef0:	f7ff f8ec 	bl	170cc <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   17ef4:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   17ef6:	6983      	ldr	r3, [r0, #24]
   17ef8:	6942      	ldr	r2, [r0, #20]
   17efa:	6901      	ldr	r1, [r0, #16]
   17efc:	69c0      	ldr	r0, [r0, #28]
   17efe:	9000      	str	r0, [sp, #0]
   17f00:	480c      	ldr	r0, [pc, #48]	; (17f34 <os_default_irq+0x8c>)
   17f02:	f7ff f8e3 	bl	170cc <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   17f06:	6869      	ldr	r1, [r5, #4]
   17f08:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   17f0a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   17f0c:	480a      	ldr	r0, [pc, #40]	; (17f38 <os_default_irq+0x90>)
   17f0e:	f7ff f8dd 	bl	170cc <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   17f12:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   17f14:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   17f16:	4809      	ldr	r0, [pc, #36]	; (17f3c <os_default_irq+0x94>)
   17f18:	f7ff f8d8 	bl	170cc <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   17f1c:	f7f0 f93a 	bl	8194 <hal_system_reset>
   17f20:	e000ed00 	.word	0xe000ed00
   17f24:	0001f2a4 	.word	0x0001f2a4
   17f28:	0001f2d8 	.word	0x0001f2d8
   17f2c:	0001f30c 	.word	0x0001f30c
   17f30:	0001f340 	.word	0x0001f340
   17f34:	0001f374 	.word	0x0001f374
   17f38:	0001f3a8 	.word	0x0001f3a8
   17f3c:	0001f3d0 	.word	0x0001f3d0

00017f40 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   17f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   17f42:	f7ff ff81 	bl	17e48 <hal_watchdog_tickle>
    sanity_last = 0;
   17f46:	2500      	movs	r5, #0
   17f48:	e00b      	b.n	17f62 <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   17f4a:	f000 fec7 	bl	18cdc <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   17f4e:	f7ff ff7b 	bl	17e48 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   17f52:	4625      	mov	r5, r4
   17f54:	e011      	b.n	17f7a <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   17f56:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   17f58:	f002 f842 	bl	19fe0 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   17f5c:	4638      	mov	r0, r7
   17f5e:	f001 fa19 	bl	19394 <os_arch_restore_sr>
        ++g_os_idle_ctr;
   17f62:	4a14      	ldr	r2, [pc, #80]	; (17fb4 <os_idle_task+0x74>)
   17f64:	6813      	ldr	r3, [r2, #0]
   17f66:	3301      	adds	r3, #1
   17f68:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   17f6a:	f001 f995 	bl	19298 <os_time_get>
   17f6e:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   17f70:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17f74:	1ac3      	subs	r3, r0, r3
   17f76:	2b00      	cmp	r3, #0
   17f78:	dce7      	bgt.n	17f4a <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   17f7a:	f001 fa05 	bl	19388 <os_arch_save_sr>
   17f7e:	4607      	mov	r7, r0
        now = os_time_get();
   17f80:	f001 f98a 	bl	19298 <os_time_get>
   17f84:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   17f86:	f000 ffd7 	bl	18f38 <os_sched_wakeup_ticks>
   17f8a:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   17f8c:	4630      	mov	r0, r6
   17f8e:	f000 f975 	bl	1827c <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   17f92:	42a0      	cmp	r0, r4
   17f94:	bf28      	it	cs
   17f96:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   17f98:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   17f9c:	1b9b      	subs	r3, r3, r6
   17f9e:	4298      	cmp	r0, r3
   17fa0:	bf28      	it	cs
   17fa2:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   17fa4:	280b      	cmp	r0, #11
   17fa6:	d9d6      	bls.n	17f56 <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   17fa8:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   17fac:	d9d4      	bls.n	17f58 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   17fae:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   17fb2:	e7d1      	b.n	17f58 <os_idle_task+0x18>
   17fb4:	2000ce8c 	.word	0x2000ce8c

00017fb8 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   17fb8:	b508      	push	{r3, lr}
   17fba:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   17fbc:	2100      	movs	r1, #0
   17fbe:	4608      	mov	r0, r1
   17fc0:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   17fc2:	2300      	movs	r3, #0
   17fc4:	461a      	mov	r2, r3
   17fc6:	4619      	mov	r1, r3
   17fc8:	4618      	mov	r0, r3
   17fca:	f7ff ff47 	bl	17e5c <__assert_func>
	...

00017fd0 <os_started>:
}
   17fd0:	4b01      	ldr	r3, [pc, #4]	; (17fd8 <os_started+0x8>)
   17fd2:	6818      	ldr	r0, [r3, #0]
   17fd4:	4770      	bx	lr
   17fd6:	bf00      	nop
   17fd8:	2000ce88 	.word	0x2000ce88

00017fdc <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   17fdc:	b500      	push	{lr}
   17fde:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   17fe0:	2340      	movs	r3, #64	; 0x40
   17fe2:	9303      	str	r3, [sp, #12]
   17fe4:	4b15      	ldr	r3, [pc, #84]	; (1803c <os_init_idle_task+0x60>)
   17fe6:	9302      	str	r3, [sp, #8]
   17fe8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17fec:	9301      	str	r3, [sp, #4]
   17fee:	23ff      	movs	r3, #255	; 0xff
   17ff0:	9300      	str	r3, [sp, #0]
   17ff2:	2300      	movs	r3, #0
   17ff4:	4a12      	ldr	r2, [pc, #72]	; (18040 <os_init_idle_task+0x64>)
   17ff6:	4913      	ldr	r1, [pc, #76]	; (18044 <os_init_idle_task+0x68>)
   17ff8:	4813      	ldr	r0, [pc, #76]	; (18048 <os_init_idle_task+0x6c>)
   17ffa:	f001 f88d 	bl	19118 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   17ffe:	b950      	cbnz	r0, 18016 <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   18000:	f000 fea2 	bl	18d48 <os_sanity_init>
    assert(rc == 0);
   18004:	b968      	cbnz	r0, 18022 <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   18006:	f247 5030 	movw	r0, #30000	; 0x7530
   1800a:	f7ff fed9 	bl	17dc0 <hal_watchdog_init>
    assert(rc == 0);
   1800e:	b970      	cbnz	r0, 1802e <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   18010:	b005      	add	sp, #20
   18012:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   18016:	2300      	movs	r3, #0
   18018:	461a      	mov	r2, r3
   1801a:	4619      	mov	r1, r3
   1801c:	4618      	mov	r0, r3
   1801e:	f7ff ff1d 	bl	17e5c <__assert_func>
    assert(rc == 0);
   18022:	2300      	movs	r3, #0
   18024:	461a      	mov	r2, r3
   18026:	4619      	mov	r1, r3
   18028:	4618      	mov	r0, r3
   1802a:	f7ff ff17 	bl	17e5c <__assert_func>
    assert(rc == 0);
   1802e:	2300      	movs	r3, #0
   18030:	461a      	mov	r2, r3
   18032:	4619      	mov	r1, r3
   18034:	4618      	mov	r0, r3
   18036:	f7ff ff11 	bl	17e5c <__assert_func>
   1803a:	bf00      	nop
   1803c:	20005f70 	.word	0x20005f70
   18040:	00017f41 	.word	0x00017f41
   18044:	0001f3f4 	.word	0x0001f3f4
   18048:	2000cde8 	.word	0x2000cde8

0001804c <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   1804c:	b510      	push	{r4, lr}
   1804e:	b084      	sub	sp, #16
   18050:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   18052:	4b24      	ldr	r3, [pc, #144]	; (180e4 <os_init+0x98>)
   18054:	2200      	movs	r2, #0
   18056:	601a      	str	r2, [r3, #0]
   18058:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   1805a:	4b23      	ldr	r3, [pc, #140]	; (180e8 <os_init+0x9c>)
   1805c:	601a      	str	r2, [r3, #0]
   1805e:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   18060:	f000 faba 	bl	185d8 <os_eventq_dflt_get>
   18064:	f000 fa0e 	bl	18484 <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   18068:	f000 fa04 	bl	18474 <os_dev_reset>

    err = os_arch_os_init();
   1806c:	f001 f9c6 	bl	193fc <os_arch_os_init>
    assert(err == OS_OK);
   18070:	bb00      	cbnz	r0, 180b4 <os_init+0x68>

    if (main_fn) {
   18072:	b18c      	cbz	r4, 18098 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   18074:	f44f 6300 	mov.w	r3, #2048	; 0x800
   18078:	9303      	str	r3, [sp, #12]
   1807a:	4b1c      	ldr	r3, [pc, #112]	; (180ec <os_init+0xa0>)
   1807c:	9302      	str	r3, [sp, #8]
   1807e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   18082:	9301      	str	r3, [sp, #4]
   18084:	237f      	movs	r3, #127	; 0x7f
   18086:	9300      	str	r3, [sp, #0]
   18088:	4623      	mov	r3, r4
   1808a:	4a19      	ldr	r2, [pc, #100]	; (180f0 <os_init+0xa4>)
   1808c:	4919      	ldr	r1, [pc, #100]	; (180f4 <os_init+0xa8>)
   1808e:	481a      	ldr	r0, [pc, #104]	; (180f8 <os_init+0xac>)
   18090:	f001 f842 	bl	19118 <os_task_init>
   18094:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   18096:	b998      	cbnz	r0, 180c0 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   18098:	f001 fe72 	bl	19d80 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   1809c:	2001      	movs	r0, #1
   1809e:	f000 f985 	bl	183ac <os_dev_initialize_all>
   180a2:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   180a4:	b990      	cbnz	r0, 180cc <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   180a6:	2002      	movs	r0, #2
   180a8:	f000 f980 	bl	183ac <os_dev_initialize_all>
   180ac:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   180ae:	b998      	cbnz	r0, 180d8 <os_init+0x8c>
}
   180b0:	b004      	add	sp, #16
   180b2:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   180b4:	2300      	movs	r3, #0
   180b6:	461a      	mov	r2, r3
   180b8:	4619      	mov	r1, r3
   180ba:	4618      	mov	r0, r3
   180bc:	f7ff fece 	bl	17e5c <__assert_func>
        assert(err == 0);
   180c0:	2300      	movs	r3, #0
   180c2:	461a      	mov	r2, r3
   180c4:	4619      	mov	r1, r3
   180c6:	4618      	mov	r0, r3
   180c8:	f7ff fec8 	bl	17e5c <__assert_func>
    assert(err == OS_OK);
   180cc:	2300      	movs	r3, #0
   180ce:	461a      	mov	r2, r3
   180d0:	4619      	mov	r1, r3
   180d2:	4618      	mov	r0, r3
   180d4:	f7ff fec2 	bl	17e5c <__assert_func>
    assert(err == OS_OK);
   180d8:	2300      	movs	r3, #0
   180da:	461a      	mov	r2, r3
   180dc:	4619      	mov	r1, r3
   180de:	4618      	mov	r0, r3
   180e0:	f7ff febc 	bl	17e5c <__assert_func>
   180e4:	2000ce90 	.word	0x2000ce90
   180e8:	2000ceb8 	.word	0x2000ceb8
   180ec:	20006070 	.word	0x20006070
   180f0:	00017fb9 	.word	0x00017fb9
   180f4:	0001f3ec 	.word	0x0001f3ec
   180f8:	2000ce38 	.word	0x2000ce38

000180fc <os_start>:

void
os_start(void)
{
   180fc:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   180fe:	f7ff fe9b 	bl	17e38 <hal_watchdog_enable>

    err = os_arch_os_start();
   18102:	f001 f9db 	bl	194bc <os_arch_os_start>
    assert(err == OS_OK);
   18106:	b900      	cbnz	r0, 1810a <os_start+0xe>
#else
    assert(0);
#endif
}
   18108:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   1810a:	2300      	movs	r3, #0
   1810c:	461a      	mov	r2, r3
   1810e:	4619      	mov	r1, r3
   18110:	4618      	mov	r0, r3
   18112:	f7ff fea3 	bl	17e5c <__assert_func>
	...

00018118 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   18118:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1811a:	4b0c      	ldr	r3, [pc, #48]	; (1814c <os_pkg_init+0x34>)
   1811c:	781b      	ldrb	r3, [r3, #0]
   1811e:	b14b      	cbz	r3, 18134 <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   18120:	2003      	movs	r0, #3
   18122:	f000 f943 	bl	183ac <os_dev_initialize_all>
   18126:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   18128:	b948      	cbnz	r0, 1813e <os_pkg_init+0x26>

    os_mempool_module_init();
   1812a:	f000 fc25 	bl	18978 <os_mempool_module_init>
    os_msys_init();
   1812e:	f000 fcad 	bl	18a8c <os_msys_init>
}
   18132:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   18134:	461a      	mov	r2, r3
   18136:	4619      	mov	r1, r3
   18138:	4618      	mov	r0, r3
   1813a:	f7ff fe8f 	bl	17e5c <__assert_func>
    assert(err == OS_OK);
   1813e:	2300      	movs	r3, #0
   18140:	461a      	mov	r2, r3
   18142:	4619      	mov	r1, r3
   18144:	4618      	mov	r0, r3
   18146:	f7ff fe89 	bl	17e5c <__assert_func>
   1814a:	bf00      	nop
   1814c:	2000cdbc 	.word	0x2000cdbc

00018150 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   18150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18152:	4604      	mov	r4, r0
   18154:	460d      	mov	r5, r1
   18156:	4617      	mov	r7, r2
   18158:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   1815a:	2220      	movs	r2, #32
   1815c:	2100      	movs	r1, #0
   1815e:	f001 fa80 	bl	19662 <memset>
    c->c_ev.ev_cb = ev_cb;
   18162:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   18164:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   18166:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   18168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001816c <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   1816c:	b538      	push	{r3, r4, r5, lr}
   1816e:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   18170:	f001 f90a 	bl	19388 <os_arch_save_sr>
   18174:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   18176:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   18178:	b13b      	cbz	r3, 1818a <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1817a:	69a2      	ldr	r2, [r4, #24]
   1817c:	b172      	cbz	r2, 1819c <os_callout_stop+0x30>
   1817e:	61d3      	str	r3, [r2, #28]
   18180:	69e3      	ldr	r3, [r4, #28]
   18182:	69a2      	ldr	r2, [r4, #24]
   18184:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   18186:	2300      	movs	r3, #0
   18188:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   1818a:	6920      	ldr	r0, [r4, #16]
   1818c:	b110      	cbz	r0, 18194 <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   1818e:	4621      	mov	r1, r4
   18190:	f000 fa02 	bl	18598 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   18194:	4628      	mov	r0, r5
   18196:	f001 f8fd 	bl	19394 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   1819a:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   1819c:	4a01      	ldr	r2, [pc, #4]	; (181a4 <os_callout_stop+0x38>)
   1819e:	6053      	str	r3, [r2, #4]
   181a0:	e7ee      	b.n	18180 <os_callout_stop+0x14>
   181a2:	bf00      	nop
   181a4:	2000ce90 	.word	0x2000ce90

000181a8 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   181a8:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   181aa:	6903      	ldr	r3, [r0, #16]
   181ac:	b1c3      	cbz	r3, 181e0 <os_callout_reset+0x38>
   181ae:	4605      	mov	r5, r0
   181b0:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   181b2:	2900      	cmp	r1, #0
   181b4:	db2f      	blt.n	18216 <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   181b6:	f001 f8e7 	bl	19388 <os_arch_save_sr>
   181ba:	4606      	mov	r6, r0

    os_callout_stop(c);
   181bc:	4628      	mov	r0, r5
   181be:	f7ff ffd5 	bl	1816c <os_callout_stop>

    if (ticks == 0) {
   181c2:	b904      	cbnz	r4, 181c6 <os_callout_reset+0x1e>
        ticks = 1;
   181c4:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   181c6:	f001 f867 	bl	19298 <os_time_get>
   181ca:	4420      	add	r0, r4
   181cc:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   181ce:	4b13      	ldr	r3, [pc, #76]	; (1821c <os_callout_reset+0x74>)
   181d0:	681b      	ldr	r3, [r3, #0]
   181d2:	b153      	cbz	r3, 181ea <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   181d4:	695a      	ldr	r2, [r3, #20]
   181d6:	1a82      	subs	r2, r0, r2
   181d8:	2a00      	cmp	r2, #0
   181da:	db06      	blt.n	181ea <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   181dc:	699b      	ldr	r3, [r3, #24]
   181de:	e7f8      	b.n	181d2 <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   181e0:	461a      	mov	r2, r3
   181e2:	4619      	mov	r1, r3
   181e4:	4618      	mov	r0, r3
   181e6:	f7ff fe39 	bl	17e5c <__assert_func>
            break;
        }
    }

    if (entry) {
   181ea:	b15b      	cbz	r3, 18204 <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   181ec:	69da      	ldr	r2, [r3, #28]
   181ee:	61ea      	str	r2, [r5, #28]
   181f0:	61ab      	str	r3, [r5, #24]
   181f2:	69da      	ldr	r2, [r3, #28]
   181f4:	6015      	str	r5, [r2, #0]
   181f6:	3518      	adds	r5, #24
   181f8:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   181fa:	4630      	mov	r0, r6
   181fc:	f001 f8ca 	bl	19394 <os_arch_restore_sr>

    ret = OS_OK;
   18200:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   18202:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   18204:	2300      	movs	r3, #0
   18206:	61ab      	str	r3, [r5, #24]
   18208:	4b04      	ldr	r3, [pc, #16]	; (1821c <os_callout_reset+0x74>)
   1820a:	685a      	ldr	r2, [r3, #4]
   1820c:	61ea      	str	r2, [r5, #28]
   1820e:	6015      	str	r5, [r2, #0]
   18210:	3518      	adds	r5, #24
   18212:	605d      	str	r5, [r3, #4]
   18214:	e7f1      	b.n	181fa <os_callout_reset+0x52>
        ret = OS_EINVAL;
   18216:	2002      	movs	r0, #2
    return ret;
   18218:	e7f3      	b.n	18202 <os_callout_reset+0x5a>
   1821a:	bf00      	nop
   1821c:	2000ce90 	.word	0x2000ce90

00018220 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   18220:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   18222:	f001 f839 	bl	19298 <os_time_get>
   18226:	4605      	mov	r5, r0
   18228:	e00f      	b.n	1824a <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1822a:	69e2      	ldr	r2, [r4, #28]
   1822c:	4b12      	ldr	r3, [pc, #72]	; (18278 <os_callout_tick+0x58>)
   1822e:	605a      	str	r2, [r3, #4]
   18230:	69e3      	ldr	r3, [r4, #28]
   18232:	69a2      	ldr	r2, [r4, #24]
   18234:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   18236:	2300      	movs	r3, #0
   18238:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   1823a:	f001 f8ab 	bl	19394 <os_arch_restore_sr>

        if (c) {
   1823e:	b1d4      	cbz	r4, 18276 <os_callout_tick+0x56>
            if (c->c_evq) {
   18240:	6920      	ldr	r0, [r4, #16]
   18242:	b9a0      	cbnz	r0, 1826e <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   18244:	6863      	ldr	r3, [r4, #4]
   18246:	4620      	mov	r0, r4
   18248:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   1824a:	f001 f89d 	bl	19388 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   1824e:	4b0a      	ldr	r3, [pc, #40]	; (18278 <os_callout_tick+0x58>)
   18250:	681c      	ldr	r4, [r3, #0]
        if (c) {
   18252:	2c00      	cmp	r4, #0
   18254:	d0f1      	beq.n	1823a <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   18256:	6963      	ldr	r3, [r4, #20]
   18258:	1aeb      	subs	r3, r5, r3
   1825a:	2b00      	cmp	r3, #0
   1825c:	db05      	blt.n	1826a <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   1825e:	69a3      	ldr	r3, [r4, #24]
   18260:	2b00      	cmp	r3, #0
   18262:	d0e2      	beq.n	1822a <os_callout_tick+0xa>
   18264:	69e2      	ldr	r2, [r4, #28]
   18266:	61da      	str	r2, [r3, #28]
   18268:	e7e2      	b.n	18230 <os_callout_tick+0x10>
                c = NULL;
   1826a:	2400      	movs	r4, #0
   1826c:	e7e5      	b.n	1823a <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   1826e:	4621      	mov	r1, r4
   18270:	f000 f915 	bl	1849e <os_eventq_put>
   18274:	e7e9      	b.n	1824a <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   18276:	bd38      	pop	{r3, r4, r5, pc}
   18278:	2000ce90 	.word	0x2000ce90

0001827c <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   1827c:	b510      	push	{r4, lr}
   1827e:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   18280:	f001 f88b 	bl	1939a <os_arch_in_critical>
   18284:	b130      	cbz	r0, 18294 <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   18286:	4b09      	ldr	r3, [pc, #36]	; (182ac <os_callout_wakeup_ticks+0x30>)
   18288:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   1828a:	b15b      	cbz	r3, 182a4 <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   1828c:	6958      	ldr	r0, [r3, #20]
   1828e:	1b00      	subs	r0, r0, r4
   18290:	d406      	bmi.n	182a0 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   18292:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18294:	2300      	movs	r3, #0
   18296:	461a      	mov	r2, r3
   18298:	4619      	mov	r1, r3
   1829a:	4618      	mov	r0, r3
   1829c:	f7ff fdde 	bl	17e5c <__assert_func>
            rt = 0;     /* callout time is in the past */
   182a0:	2000      	movs	r0, #0
   182a2:	e7f6      	b.n	18292 <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   182a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   182a8:	e7f3      	b.n	18292 <os_callout_wakeup_ticks+0x16>
   182aa:	bf00      	nop
   182ac:	2000ce90 	.word	0x2000ce90

000182b0 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   182b0:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   182b2:	4601      	mov	r1, r0
   182b4:	2000      	movs	r0, #0
   182b6:	f002 f84d 	bl	1a354 <hal_timer_config>
    return rc;
}
   182ba:	bd08      	pop	{r3, pc}

000182bc <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   182bc:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   182be:	2000      	movs	r0, #0
   182c0:	f002 f8c4 	bl	1a44c <hal_timer_read>
    return cpu_time;
}
   182c4:	bd08      	pop	{r3, pc}
	...

000182c8 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   182c8:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   182ca:	4b15      	ldr	r3, [pc, #84]	; (18320 <os_dev_add+0x58>)
   182cc:	681d      	ldr	r5, [r3, #0]
   182ce:	b115      	cbz	r5, 182d6 <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   182d0:	462b      	mov	r3, r5
    prev_dev = NULL;
   182d2:	2400      	movs	r4, #0
   182d4:	e008      	b.n	182e8 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   182d6:	4603      	mov	r3, r0
   182d8:	f843 5f20 	str.w	r5, [r3, #32]!
   182dc:	4a10      	ldr	r2, [pc, #64]	; (18320 <os_dev_add+0x58>)
   182de:	6053      	str	r3, [r2, #4]
   182e0:	6010      	str	r0, [r2, #0]
        return (0);
   182e2:	e010      	b.n	18306 <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   182e4:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   182e6:	6a1b      	ldr	r3, [r3, #32]
   182e8:	b143      	cbz	r3, 182fc <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   182ea:	7e01      	ldrb	r1, [r0, #24]
   182ec:	7e1a      	ldrb	r2, [r3, #24]
   182ee:	4291      	cmp	r1, r2
   182f0:	d304      	bcc.n	182fc <os_dev_add+0x34>
   182f2:	d1f7      	bne.n	182e4 <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   182f4:	7e41      	ldrb	r1, [r0, #25]
   182f6:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   182f8:	4291      	cmp	r1, r2
   182fa:	d2f3      	bcs.n	182e4 <os_dev_add+0x1c>
    }

    if (prev_dev) {
   182fc:	b15c      	cbz	r4, 18316 <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   182fe:	6a23      	ldr	r3, [r4, #32]
   18300:	6203      	str	r3, [r0, #32]
   18302:	b11b      	cbz	r3, 1830c <os_dev_add+0x44>
   18304:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   18306:	2000      	movs	r0, #0
   18308:	bc30      	pop	{r4, r5}
   1830a:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   1830c:	f100 0320 	add.w	r3, r0, #32
   18310:	4a03      	ldr	r2, [pc, #12]	; (18320 <os_dev_add+0x58>)
   18312:	6053      	str	r3, [r2, #4]
   18314:	e7f6      	b.n	18304 <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   18316:	6205      	str	r5, [r0, #32]
   18318:	4b01      	ldr	r3, [pc, #4]	; (18320 <os_dev_add+0x58>)
   1831a:	6018      	str	r0, [r3, #0]
   1831c:	e7f3      	b.n	18306 <os_dev_add+0x3e>
   1831e:	bf00      	nop
   18320:	20008070 	.word	0x20008070

00018324 <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   18324:	b510      	push	{r4, lr}
   18326:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   18328:	6903      	ldr	r3, [r0, #16]
   1832a:	6941      	ldr	r1, [r0, #20]
   1832c:	4798      	blx	r3
    if (rc != 0) {
   1832e:	4603      	mov	r3, r0
   18330:	b128      	cbz	r0, 1833e <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   18332:	7ee2      	ldrb	r2, [r4, #27]
   18334:	f012 0f08 	tst.w	r2, #8
   18338:	d105      	bne.n	18346 <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   1833a:	2300      	movs	r3, #0
   1833c:	e003      	b.n	18346 <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   1833e:	7ee2      	ldrb	r2, [r4, #27]
   18340:	f042 0201 	orr.w	r2, r2, #1
   18344:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   18346:	4618      	mov	r0, r3
   18348:	bd10      	pop	{r4, pc}

0001834a <os_dev_init>:
    dev->od_name = name;
   1834a:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   1834c:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   1834e:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   18350:	2300      	movs	r3, #0
   18352:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   18354:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   18356:	9a00      	ldr	r2, [sp, #0]
   18358:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   1835a:	9a01      	ldr	r2, [sp, #4]
   1835c:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   1835e:	6003      	str	r3, [r0, #0]
   18360:	6043      	str	r3, [r0, #4]
   18362:	6083      	str	r3, [r0, #8]
   18364:	60c3      	str	r3, [r0, #12]
}
   18366:	4618      	mov	r0, r3
   18368:	4770      	bx	lr
	...

0001836c <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   1836c:	b530      	push	{r4, r5, lr}
   1836e:	b083      	sub	sp, #12
   18370:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   18372:	9c07      	ldr	r4, [sp, #28]
   18374:	9401      	str	r4, [sp, #4]
   18376:	9c06      	ldr	r4, [sp, #24]
   18378:	9400      	str	r4, [sp, #0]
   1837a:	f7ff ffe6 	bl	1834a <os_dev_init>
    if (rc != 0) {
   1837e:	4603      	mov	r3, r0
   18380:	b110      	cbz	r0, 18388 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   18382:	4618      	mov	r0, r3
   18384:	b003      	add	sp, #12
   18386:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   18388:	4628      	mov	r0, r5
   1838a:	f7ff ff9d 	bl	182c8 <os_dev_add>
    if (rc != 0) {
   1838e:	4603      	mov	r3, r0
   18390:	2800      	cmp	r0, #0
   18392:	d1f6      	bne.n	18382 <os_dev_create+0x16>
    if (g_os_started) {
   18394:	4a04      	ldr	r2, [pc, #16]	; (183a8 <os_dev_create+0x3c>)
   18396:	6812      	ldr	r2, [r2, #0]
   18398:	2a00      	cmp	r2, #0
   1839a:	d0f2      	beq.n	18382 <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   1839c:	4628      	mov	r0, r5
   1839e:	f7ff ffc1 	bl	18324 <os_dev_initialize>
   183a2:	4603      	mov	r3, r0
    return (rc);
   183a4:	e7ed      	b.n	18382 <os_dev_create+0x16>
   183a6:	bf00      	nop
   183a8:	2000ce88 	.word	0x2000ce88

000183ac <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   183ac:	b538      	push	{r3, r4, r5, lr}
   183ae:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183b0:	4b08      	ldr	r3, [pc, #32]	; (183d4 <os_dev_initialize_all+0x28>)
   183b2:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   183b4:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183b6:	e000      	b.n	183ba <os_dev_initialize_all+0xe>
   183b8:	6a24      	ldr	r4, [r4, #32]
   183ba:	b144      	cbz	r4, 183ce <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   183bc:	7e23      	ldrb	r3, [r4, #24]
   183be:	42ab      	cmp	r3, r5
   183c0:	d1fa      	bne.n	183b8 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   183c2:	4620      	mov	r0, r4
   183c4:	f7ff ffae 	bl	18324 <os_dev_initialize>
            if (rc) {
   183c8:	4602      	mov	r2, r0
   183ca:	2800      	cmp	r0, #0
   183cc:	d0f4      	beq.n	183b8 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   183ce:	4610      	mov	r0, r2
   183d0:	bd38      	pop	{r3, r4, r5, pc}
   183d2:	bf00      	nop
   183d4:	20008070 	.word	0x20008070

000183d8 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   183d8:	b538      	push	{r3, r4, r5, lr}
   183da:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183dc:	4b05      	ldr	r3, [pc, #20]	; (183f4 <os_dev_lookup+0x1c>)
   183de:	681c      	ldr	r4, [r3, #0]
   183e0:	b134      	cbz	r4, 183f0 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   183e2:	4629      	mov	r1, r5
   183e4:	69e0      	ldr	r0, [r4, #28]
   183e6:	f001 f958 	bl	1969a <strcmp>
   183ea:	b108      	cbz	r0, 183f0 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   183ec:	6a24      	ldr	r4, [r4, #32]
   183ee:	e7f7      	b.n	183e0 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   183f0:	4620      	mov	r0, r4
   183f2:	bd38      	pop	{r3, r4, r5, pc}
   183f4:	20008070 	.word	0x20008070

000183f8 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   183f8:	b570      	push	{r4, r5, r6, lr}
   183fa:	460d      	mov	r5, r1
   183fc:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   183fe:	f7ff ffeb 	bl	183d8 <os_dev_lookup>
    if (dev == NULL) {
   18402:	4604      	mov	r4, r0
   18404:	b1a0      	cbz	r0, 18430 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   18406:	7ec3      	ldrb	r3, [r0, #27]
   18408:	f013 0f01 	tst.w	r3, #1
   1840c:	d012      	beq.n	18434 <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   1840e:	6803      	ldr	r3, [r0, #0]
   18410:	b11b      	cbz	r3, 1841a <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   18412:	4632      	mov	r2, r6
   18414:	4629      	mov	r1, r5
   18416:	4798      	blx	r3
        if (rc != 0) {
   18418:	b970      	cbnz	r0, 18438 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1841a:	f000 ffb5 	bl	19388 <os_arch_save_sr>
    ++dev->od_open_ref;
   1841e:	7ea3      	ldrb	r3, [r4, #26]
   18420:	3301      	adds	r3, #1
   18422:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   18424:	7ee3      	ldrb	r3, [r4, #27]
   18426:	f043 0302 	orr.w	r3, r3, #2
   1842a:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   1842c:	f000 ffb2 	bl	19394 <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   18430:	4620      	mov	r0, r4
   18432:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   18434:	2400      	movs	r4, #0
   18436:	e7fb      	b.n	18430 <os_dev_open+0x38>
    return (NULL);
   18438:	2400      	movs	r4, #0
   1843a:	e7f9      	b.n	18430 <os_dev_open+0x38>

0001843c <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   1843c:	b1b0      	cbz	r0, 1846c <os_dev_close+0x30>
{
   1843e:	b510      	push	{r4, lr}
   18440:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   18442:	68c3      	ldr	r3, [r0, #12]
   18444:	b113      	cbz	r3, 1844c <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   18446:	4798      	blx	r3
        if (rc != 0) {
   18448:	4603      	mov	r3, r0
   1844a:	b968      	cbnz	r0, 18468 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   1844c:	f000 ff9c 	bl	19388 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   18450:	7ea3      	ldrb	r3, [r4, #26]
   18452:	3b01      	subs	r3, #1
   18454:	b2db      	uxtb	r3, r3
   18456:	76a3      	strb	r3, [r4, #26]
   18458:	b91b      	cbnz	r3, 18462 <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   1845a:	7ee3      	ldrb	r3, [r4, #27]
   1845c:	f023 0306 	bic.w	r3, r3, #6
   18460:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   18462:	f000 ff97 	bl	19394 <os_arch_restore_sr>

    return (0);
   18466:	2300      	movs	r3, #0
err:
    return (rc);
}
   18468:	4618      	mov	r0, r3
   1846a:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   1846c:	2302      	movs	r3, #2
}
   1846e:	4618      	mov	r0, r3
   18470:	4770      	bx	lr
	...

00018474 <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   18474:	4b02      	ldr	r3, [pc, #8]	; (18480 <os_dev_reset+0xc>)
   18476:	2200      	movs	r2, #0
   18478:	601a      	str	r2, [r3, #0]
   1847a:	605b      	str	r3, [r3, #4]
}
   1847c:	4770      	bx	lr
   1847e:	bf00      	nop
   18480:	20008070 	.word	0x20008070

00018484 <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   18484:	2200      	movs	r2, #0
   18486:	6002      	str	r2, [r0, #0]
   18488:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   1848a:	4603      	mov	r3, r0
   1848c:	f843 2f08 	str.w	r2, [r3, #8]!
   18490:	60c3      	str	r3, [r0, #12]
}
   18492:	4770      	bx	lr

00018494 <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   18494:	68c0      	ldr	r0, [r0, #12]
}
   18496:	3000      	adds	r0, #0
   18498:	bf18      	it	ne
   1849a:	2001      	movne	r0, #1
   1849c:	4770      	bx	lr

0001849e <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   1849e:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   184a0:	b1f0      	cbz	r0, 184e0 <os_eventq_put+0x42>
   184a2:	460c      	mov	r4, r1
   184a4:	4605      	mov	r5, r0
   184a6:	f7ff fff5 	bl	18494 <os_eventq_inited>
   184aa:	b1c8      	cbz	r0, 184e0 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   184ac:	f000 ff6c 	bl	19388 <os_arch_save_sr>
   184b0:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   184b2:	7823      	ldrb	r3, [r4, #0]
   184b4:	b9d3      	cbnz	r3, 184ec <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   184b6:	2301      	movs	r3, #1
   184b8:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   184ba:	2300      	movs	r3, #0
   184bc:	60e3      	str	r3, [r4, #12]
   184be:	68eb      	ldr	r3, [r5, #12]
   184c0:	601c      	str	r4, [r3, #0]
   184c2:	340c      	adds	r4, #12
   184c4:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   184c6:	6868      	ldr	r0, [r5, #4]
   184c8:	b1b8      	cbz	r0, 184fa <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   184ca:	7b03      	ldrb	r3, [r0, #12]
   184cc:	2b02      	cmp	r3, #2
   184ce:	d010      	beq.n	184f2 <os_eventq_put+0x54>
    resched = 0;
   184d0:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   184d2:	2300      	movs	r3, #0
   184d4:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   184d6:	4630      	mov	r0, r6
   184d8:	f000 ff5c 	bl	19394 <os_arch_restore_sr>

    if (resched) {
   184dc:	b97c      	cbnz	r4, 184fe <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   184de:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   184e0:	2300      	movs	r3, #0
   184e2:	461a      	mov	r2, r3
   184e4:	4619      	mov	r1, r3
   184e6:	4618      	mov	r0, r3
   184e8:	f7ff fcb8 	bl	17e5c <__assert_func>
        OS_EXIT_CRITICAL(sr);
   184ec:	f000 ff52 	bl	19394 <os_arch_restore_sr>
   184f0:	e7f5      	b.n	184de <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   184f2:	f000 fcc7 	bl	18e84 <os_sched_wakeup>
            resched = 1;
   184f6:	2401      	movs	r4, #1
   184f8:	e7eb      	b.n	184d2 <os_eventq_put+0x34>
    resched = 0;
   184fa:	2400      	movs	r4, #0
   184fc:	e7eb      	b.n	184d6 <os_eventq_put+0x38>
        os_sched(NULL);
   184fe:	2000      	movs	r0, #0
   18500:	f000 fd40 	bl	18f84 <os_sched>
   18504:	e7eb      	b.n	184de <os_eventq_put+0x40>

00018506 <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   18506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18508:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   1850a:	f000 fc67 	bl	18ddc <os_sched_get_current_task>
   1850e:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   18510:	682b      	ldr	r3, [r5, #0]
   18512:	4283      	cmp	r3, r0
   18514:	d001      	beq.n	1851a <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   18516:	b9db      	cbnz	r3, 18550 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   18518:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   1851a:	f000 ff35 	bl	19388 <os_arch_save_sr>
   1851e:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   18520:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   18522:	b9de      	cbnz	r6, 1855c <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   18524:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   18526:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1852a:	4620      	mov	r0, r4
   1852c:	f000 fc62 	bl	18df4 <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   18530:	7b63      	ldrb	r3, [r4, #13]
   18532:	f043 0308 	orr.w	r3, r3, #8
   18536:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   18538:	4638      	mov	r0, r7
   1853a:	f000 ff2b 	bl	19394 <os_arch_restore_sr>

        os_sched(NULL);
   1853e:	2000      	movs	r0, #0
   18540:	f000 fd20 	bl	18f84 <os_sched>

        OS_ENTER_CRITICAL(sr);
   18544:	f000 ff20 	bl	19388 <os_arch_save_sr>
   18548:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1854a:	2300      	movs	r3, #0
   1854c:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1854e:	e7e7      	b.n	18520 <os_eventq_get+0x1a>
            assert(0);
   18550:	2300      	movs	r3, #0
   18552:	461a      	mov	r2, r3
   18554:	4619      	mov	r1, r3
   18556:	4618      	mov	r0, r3
   18558:	f7ff fc80 	bl	17e5c <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1855c:	68f3      	ldr	r3, [r6, #12]
   1855e:	60ab      	str	r3, [r5, #8]
   18560:	b153      	cbz	r3, 18578 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   18562:	2300      	movs	r3, #0
   18564:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   18566:	7b63      	ldrb	r3, [r4, #13]
   18568:	f023 0308 	bic.w	r3, r3, #8
   1856c:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1856e:	4638      	mov	r0, r7
   18570:	f000 ff10 	bl	19394 <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   18574:	4630      	mov	r0, r6
   18576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   18578:	f105 0308 	add.w	r3, r5, #8
   1857c:	60eb      	str	r3, [r5, #12]
   1857e:	e7f0      	b.n	18562 <os_eventq_get+0x5c>

00018580 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   18580:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   18582:	f7ff ffc0 	bl	18506 <os_eventq_get>
    assert(ev->ev_cb != NULL);
   18586:	6843      	ldr	r3, [r0, #4]
   18588:	b10b      	cbz	r3, 1858e <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1858a:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1858c:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1858e:	461a      	mov	r2, r3
   18590:	4619      	mov	r1, r3
   18592:	4618      	mov	r0, r3
   18594:	f7ff fc62 	bl	17e5c <__assert_func>

00018598 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   18598:	b538      	push	{r3, r4, r5, lr}
   1859a:	4605      	mov	r5, r0
   1859c:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1859e:	f000 fef3 	bl	19388 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   185a2:	7823      	ldrb	r3, [r4, #0]
   185a4:	b183      	cbz	r3, 185c8 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   185a6:	68aa      	ldr	r2, [r5, #8]
   185a8:	42a2      	cmp	r2, r4
   185aa:	d107      	bne.n	185bc <os_eventq_remove+0x24>
   185ac:	68d3      	ldr	r3, [r2, #12]
   185ae:	60ab      	str	r3, [r5, #8]
   185b0:	b953      	cbnz	r3, 185c8 <os_eventq_remove+0x30>
   185b2:	f105 0308 	add.w	r3, r5, #8
   185b6:	60eb      	str	r3, [r5, #12]
   185b8:	e006      	b.n	185c8 <os_eventq_remove+0x30>
   185ba:	461a      	mov	r2, r3
   185bc:	68d3      	ldr	r3, [r2, #12]
   185be:	42a3      	cmp	r3, r4
   185c0:	d1fb      	bne.n	185ba <os_eventq_remove+0x22>
   185c2:	68db      	ldr	r3, [r3, #12]
   185c4:	60d3      	str	r3, [r2, #12]
   185c6:	b123      	cbz	r3, 185d2 <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   185c8:	2300      	movs	r3, #0
   185ca:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   185cc:	f000 fee2 	bl	19394 <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   185d0:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   185d2:	320c      	adds	r2, #12
   185d4:	60ea      	str	r2, [r5, #12]
   185d6:	e7f7      	b.n	185c8 <os_eventq_remove+0x30>

000185d8 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   185d8:	4800      	ldr	r0, [pc, #0]	; (185dc <os_eventq_dflt_get+0x4>)
   185da:	4770      	bx	lr
   185dc:	20008078 	.word	0x20008078

000185e0 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   185e0:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   185e2:	2000      	movs	r0, #0
   185e4:	6018      	str	r0, [r3, #0]
   185e6:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   185e8:	6098      	str	r0, [r3, #8]
   185ea:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   185ec:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   185ee:	611a      	str	r2, [r3, #16]

    return (0);
}
   185f0:	4770      	bx	lr

000185f2 <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   185f2:	b538      	push	{r3, r4, r5, lr}
   185f4:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   185f6:	f000 fec7 	bl	19388 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   185fa:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   185fc:	b114      	cbz	r4, 18604 <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   185fe:	6863      	ldr	r3, [r4, #4]
   18600:	602b      	str	r3, [r5, #0]
   18602:	b12b      	cbz	r3, 18610 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   18604:	f000 fec6 	bl	19394 <os_arch_restore_sr>

    if (mp) {
   18608:	b124      	cbz	r4, 18614 <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1860a:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1860e:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   18610:	606d      	str	r5, [r5, #4]
   18612:	e7f7      	b.n	18604 <os_mqueue_get+0x12>
        m = NULL;
   18614:	2000      	movs	r0, #0
    return (m);
   18616:	e7fa      	b.n	1860e <os_mqueue_get+0x1c>

00018618 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   18618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1861a:	7953      	ldrb	r3, [r2, #5]
   1861c:	2b07      	cmp	r3, #7
   1861e:	d916      	bls.n	1864e <os_mqueue_put+0x36>
   18620:	4614      	mov	r4, r2
   18622:	460e      	mov	r6, r1
   18624:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   18626:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1862a:	f000 fead 	bl	19388 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1862e:	2300      	movs	r3, #0
   18630:	f844 3f14 	str.w	r3, [r4, #20]!
   18634:	686b      	ldr	r3, [r5, #4]
   18636:	601f      	str	r7, [r3, #0]
   18638:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1863a:	f000 feab 	bl	19394 <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1863e:	b146      	cbz	r6, 18652 <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   18640:	f105 0108 	add.w	r1, r5, #8
   18644:	4630      	mov	r0, r6
   18646:	f7ff ff2a 	bl	1849e <os_eventq_put>
    }

    return (0);
   1864a:	2000      	movs	r0, #0
   1864c:	e000      	b.n	18650 <os_mqueue_put+0x38>
err:
    return (rc);
   1864e:	2002      	movs	r0, #2
}
   18650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   18652:	2000      	movs	r0, #0
   18654:	e7fc      	b.n	18650 <os_mqueue_put+0x38>

00018656 <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   18656:	3a10      	subs	r2, #16
   18658:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1865a:	6041      	str	r1, [r0, #4]

    return (0);
}
   1865c:	2000      	movs	r0, #0
   1865e:	4770      	bx	lr

00018660 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   18660:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   18662:	8803      	ldrh	r3, [r0, #0]
   18664:	428b      	cmp	r3, r1
   18666:	d312      	bcc.n	1868e <os_mbuf_get+0x2e>
   18668:	460d      	mov	r5, r1
   1866a:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1866c:	6840      	ldr	r0, [r0, #4]
   1866e:	f000 f947 	bl	18900 <os_memblock_get>
    if (!om) {
   18672:	4603      	mov	r3, r0
   18674:	b148      	cbz	r0, 1868a <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   18676:	2200      	movs	r2, #0
   18678:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1867a:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1867c:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1867e:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   18680:	f100 0110 	add.w	r1, r0, #16
   18684:	4429      	add	r1, r5
   18686:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   18688:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1868a:	4618      	mov	r0, r3
   1868c:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1868e:	2300      	movs	r3, #0
    return om;
   18690:	e7fb      	b.n	1868a <os_mbuf_get+0x2a>

00018692 <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   18692:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   18694:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   18698:	8803      	ldrh	r3, [r0, #0]
   1869a:	42ab      	cmp	r3, r5
   1869c:	d310      	bcc.n	186c0 <os_mbuf_get_pkthdr+0x2e>
   1869e:	2dff      	cmp	r5, #255	; 0xff
   186a0:	d810      	bhi.n	186c4 <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   186a2:	2100      	movs	r1, #0
   186a4:	f7ff ffdc 	bl	18660 <os_mbuf_get>
    if (om) {
   186a8:	4603      	mov	r3, r0
   186aa:	b138      	cbz	r0, 186bc <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   186ac:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   186ae:	6802      	ldr	r2, [r0, #0]
   186b0:	4415      	add	r5, r2
   186b2:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   186b4:	2200      	movs	r2, #0
   186b6:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   186b8:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   186ba:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   186bc:	4618      	mov	r0, r3
   186be:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   186c0:	2300      	movs	r3, #0
   186c2:	e7fb      	b.n	186bc <os_mbuf_get_pkthdr+0x2a>
   186c4:	2300      	movs	r3, #0
    return om;
   186c6:	e7f9      	b.n	186bc <os_mbuf_get_pkthdr+0x2a>

000186c8 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   186c8:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   186ca:	6883      	ldr	r3, [r0, #8]
   186cc:	b123      	cbz	r3, 186d8 <os_mbuf_free+0x10>
   186ce:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   186d0:	6858      	ldr	r0, [r3, #4]
   186d2:	f000 f93d 	bl	18950 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   186d6:	bd08      	pop	{r3, pc}
    rc = 0;
   186d8:	2000      	movs	r0, #0
    return (rc);
   186da:	e7fc      	b.n	186d6 <os_mbuf_free+0xe>

000186dc <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   186dc:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   186de:	b160      	cbz	r0, 186fa <os_mbuf_free_chain+0x1e>
{
   186e0:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   186e2:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   186e4:	4618      	mov	r0, r3
   186e6:	f7ff ffef 	bl	186c8 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   186ea:	4623      	mov	r3, r4
        if (rc != 0) {
   186ec:	4602      	mov	r2, r0
   186ee:	b910      	cbnz	r0, 186f6 <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   186f0:	2c00      	cmp	r4, #0
   186f2:	d1f6      	bne.n	186e2 <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   186f4:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   186f6:	4610      	mov	r0, r2
   186f8:	bd10      	pop	{r4, pc}
    rc = 0;
   186fa:	2200      	movs	r2, #0
}
   186fc:	4610      	mov	r0, r2
   186fe:	4770      	bx	lr

00018700 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   18700:	2300      	movs	r3, #0
    while (om != NULL) {
   18702:	e003      	b.n	1870c <os_mbuf_len+0xc>
        len += om->om_len;
   18704:	88c2      	ldrh	r2, [r0, #6]
   18706:	4413      	add	r3, r2
   18708:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1870a:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1870c:	2800      	cmp	r0, #0
   1870e:	d1f9      	bne.n	18704 <os_mbuf_len+0x4>
    }

    return len;
}
   18710:	4618      	mov	r0, r3
   18712:	4770      	bx	lr

00018714 <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   18714:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   18718:	2800      	cmp	r0, #0
   1871a:	d04d      	beq.n	187b8 <os_mbuf_append+0xa4>
   1871c:	460f      	mov	r7, r1
   1871e:	4691      	mov	r9, r2
   18720:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   18722:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   18726:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   18728:	e000      	b.n	1872c <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1872a:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1872c:	68eb      	ldr	r3, [r5, #12]
   1872e:	2b00      	cmp	r3, #0
   18730:	d1fb      	bne.n	1872a <os_mbuf_append+0x16>
    }

    remainder = len;
   18732:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   18734:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18736:	f105 0410 	add.w	r4, r5, #16
   1873a:	881b      	ldrh	r3, [r3, #0]
   1873c:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1873e:	6828      	ldr	r0, [r5, #0]
   18740:	88eb      	ldrh	r3, [r5, #6]
   18742:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   18744:	1a24      	subs	r4, r4, r0
   18746:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   18748:	b164      	cbz	r4, 18764 <os_mbuf_append+0x50>
        if (space > remainder) {
   1874a:	454c      	cmp	r4, r9
   1874c:	dd00      	ble.n	18750 <os_mbuf_append+0x3c>
            space = remainder;
   1874e:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   18750:	4622      	mov	r2, r4
   18752:	4639      	mov	r1, r7
   18754:	f000 ff78 	bl	19648 <memcpy>

        last->om_len += space;
   18758:	88eb      	ldrh	r3, [r5, #6]
   1875a:	4423      	add	r3, r4
   1875c:	80eb      	strh	r3, [r5, #6]
        data += space;
   1875e:	4427      	add	r7, r4
        remainder -= space;
   18760:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   18764:	2e00      	cmp	r6, #0
   18766:	dd16      	ble.n	18796 <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   18768:	2100      	movs	r1, #0
   1876a:	4640      	mov	r0, r8
   1876c:	f7ff ff78 	bl	18660 <os_mbuf_get>
        if (!new) {
   18770:	4604      	mov	r4, r0
   18772:	b180      	cbz	r0, 18796 <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   18774:	f8b8 2000 	ldrh.w	r2, [r8]
   18778:	42b2      	cmp	r2, r6
   1877a:	bfa8      	it	ge
   1877c:	4632      	movge	r2, r6
   1877e:	b292      	uxth	r2, r2
   18780:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   18782:	4639      	mov	r1, r7
   18784:	6800      	ldr	r0, [r0, #0]
   18786:	f000 ff5f 	bl	19648 <memcpy>
        data += new->om_len;
   1878a:	88e3      	ldrh	r3, [r4, #6]
   1878c:	441f      	add	r7, r3
        remainder -= new->om_len;
   1878e:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   18790:	60ec      	str	r4, [r5, #12]
        last = new;
   18792:	4625      	mov	r5, r4
   18794:	e7e6      	b.n	18764 <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   18796:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1879a:	2b07      	cmp	r3, #7
   1879c:	d907      	bls.n	187ae <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1879e:	eba9 0906 	sub.w	r9, r9, r6
   187a2:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   187a6:	fa13 f989 	uxtah	r9, r3, r9
   187aa:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   187ae:	b106      	cbz	r6, 187b2 <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   187b0:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   187b2:	4630      	mov	r0, r6
   187b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   187b8:	2602      	movs	r6, #2
   187ba:	e7fa      	b.n	187b2 <os_mbuf_append+0x9e>

000187bc <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   187bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187c0:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   187c2:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   187c6:	2700      	movs	r7, #0
    head = NULL;
   187c8:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   187ca:	e017      	b.n	187fc <os_mbuf_dup+0x40>
    startoff = 0;
   187cc:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   187ce:	4623      	mov	r3, r4
   187d0:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   187d4:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   187d6:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   187d8:	b299      	uxth	r1, r3
   187da:	4640      	mov	r0, r8
   187dc:	f7ff ff40 	bl	18660 <os_mbuf_get>
   187e0:	4605      	mov	r5, r0
   187e2:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   187e4:	b188      	cbz	r0, 1880a <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   187e6:	7923      	ldrb	r3, [r4, #4]
   187e8:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   187ea:	88e3      	ldrh	r3, [r4, #6]
   187ec:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   187ee:	88e2      	ldrh	r2, [r4, #6]
   187f0:	6821      	ldr	r1, [r4, #0]
   187f2:	6828      	ldr	r0, [r5, #0]
   187f4:	f000 ff28 	bl	19648 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   187f8:	68e4      	ldr	r4, [r4, #12]
   187fa:	462f      	mov	r7, r5
   187fc:	b14c      	cbz	r4, 18812 <os_mbuf_dup+0x56>
        if (head) {
   187fe:	b15e      	cbz	r6, 18818 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   18800:	7963      	ldrb	r3, [r4, #5]
   18802:	2b07      	cmp	r3, #7
   18804:	d9e2      	bls.n	187cc <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   18806:	b299      	uxth	r1, r3
   18808:	e7e1      	b.n	187ce <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1880a:	4630      	mov	r0, r6
   1880c:	f7ff ff66 	bl	186dc <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   18810:	462e      	mov	r6, r5
}
   18812:	4630      	mov	r0, r6
   18814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   18818:	7963      	ldrb	r3, [r4, #5]
   1881a:	2b07      	cmp	r3, #7
   1881c:	d911      	bls.n	18842 <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1881e:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18820:	4623      	mov	r3, r4
   18822:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   18826:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   18828:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1882a:	b299      	uxth	r1, r3
   1882c:	4640      	mov	r0, r8
   1882e:	f7ff ff17 	bl	18660 <os_mbuf_get>
            if (!head) {
   18832:	4606      	mov	r6, r0
   18834:	2800      	cmp	r0, #0
   18836:	d0ec      	beq.n	18812 <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   18838:	7963      	ldrb	r3, [r4, #5]
   1883a:	2b07      	cmp	r3, #7
   1883c:	d803      	bhi.n	18846 <os_mbuf_dup+0x8a>
            copy = head;
   1883e:	4605      	mov	r5, r0
   18840:	e7d1      	b.n	187e6 <os_mbuf_dup+0x2a>
    startoff = 0;
   18842:	2100      	movs	r1, #0
   18844:	e7ec      	b.n	18820 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   18846:	88c3      	ldrh	r3, [r0, #6]
   18848:	b973      	cbnz	r3, 18868 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1884a:	f100 0510 	add.w	r5, r0, #16
   1884e:	7962      	ldrb	r2, [r4, #5]
   18850:	f104 0110 	add.w	r1, r4, #16
   18854:	4628      	mov	r0, r5
   18856:	f000 fef7 	bl	19648 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1885a:	7963      	ldrb	r3, [r4, #5]
   1885c:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1885e:	7963      	ldrb	r3, [r4, #5]
   18860:	441d      	add	r5, r3
   18862:	6035      	str	r5, [r6, #0]
            copy = head;
   18864:	4635      	mov	r5, r6
   18866:	e7be      	b.n	187e6 <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   18868:	2300      	movs	r3, #0
   1886a:	461a      	mov	r2, r3
   1886c:	4619      	mov	r1, r3
   1886e:	4618      	mov	r0, r3
   18870:	f7ff faf4 	bl	17e5c <__assert_func>

00018874 <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   18874:	2800      	cmp	r0, #0
   18876:	d031      	beq.n	188dc <os_mempool_init_internal+0x68>
{
   18878:	b430      	push	{r4, r5}
   1887a:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1887c:	2a00      	cmp	r2, #0
   1887e:	d02f      	beq.n	188e0 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   18880:	b1bb      	cbz	r3, 188b2 <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   18882:	b113      	cbz	r3, 1888a <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   18884:	f013 0f03 	tst.w	r3, #3
   18888:	d12c      	bne.n	188e4 <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1888a:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1888c:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1888e:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   18890:	f89d 000c 	ldrb.w	r0, [sp, #12]
   18894:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   18896:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   18898:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1889a:	9802      	ldr	r0, [sp, #8]
   1889c:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1889e:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   188a0:	b199      	cbz	r1, 188ca <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   188a2:	f012 0f03 	tst.w	r2, #3
   188a6:	d002      	beq.n	188ae <os_mempool_init_internal+0x3a>
   188a8:	f022 0203 	bic.w	r2, r2, #3
   188ac:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   188ae:	2001      	movs	r0, #1
   188b0:	e007      	b.n	188c2 <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   188b2:	2900      	cmp	r1, #0
   188b4:	d0e5      	beq.n	18882 <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   188b6:	2003      	movs	r0, #3
   188b8:	e00e      	b.n	188d8 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   188ba:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   188bc:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   188be:	3001      	adds	r0, #1
            block_addr += true_block_size;
   188c0:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   188c2:	4281      	cmp	r1, r0
   188c4:	dcf9      	bgt.n	188ba <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   188c6:	2200      	movs	r2, #0
   188c8:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   188ca:	2000      	movs	r0, #0
   188cc:	6120      	str	r0, [r4, #16]
   188ce:	4b06      	ldr	r3, [pc, #24]	; (188e8 <os_mempool_init_internal+0x74>)
   188d0:	685a      	ldr	r2, [r3, #4]
   188d2:	6014      	str	r4, [r2, #0]
   188d4:	3410      	adds	r4, #16
   188d6:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   188d8:	bc30      	pop	{r4, r5}
   188da:	4770      	bx	lr
        return OS_INVALID_PARM;
   188dc:	2003      	movs	r0, #3
}
   188de:	4770      	bx	lr
        return OS_INVALID_PARM;
   188e0:	2003      	movs	r0, #3
   188e2:	e7f9      	b.n	188d8 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   188e4:	2004      	movs	r0, #4
   188e6:	e7f7      	b.n	188d8 <os_mempool_init_internal+0x64>
   188e8:	2000ce98 	.word	0x2000ce98

000188ec <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   188ec:	b510      	push	{r4, lr}
   188ee:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   188f0:	2400      	movs	r4, #0
   188f2:	9401      	str	r4, [sp, #4]
   188f4:	9c04      	ldr	r4, [sp, #16]
   188f6:	9400      	str	r4, [sp, #0]
   188f8:	f7ff ffbc 	bl	18874 <os_mempool_init_internal>
}
   188fc:	b002      	add	sp, #8
   188fe:	bd10      	pop	{r4, pc}

00018900 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   18900:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   18902:	b1a0      	cbz	r0, 1892e <os_memblock_get+0x2e>
   18904:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   18906:	f000 fd3f 	bl	19388 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1890a:	88e3      	ldrh	r3, [r4, #6]
   1890c:	b153      	cbz	r3, 18924 <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1890e:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   18910:	682a      	ldr	r2, [r5, #0]
   18912:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   18914:	3b01      	subs	r3, #1
   18916:	b29b      	uxth	r3, r3
   18918:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1891a:	8922      	ldrh	r2, [r4, #8]
   1891c:	4293      	cmp	r3, r2
   1891e:	d202      	bcs.n	18926 <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   18920:	8123      	strh	r3, [r4, #8]
   18922:	e000      	b.n	18926 <os_memblock_get+0x26>
    block = NULL;
   18924:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   18926:	f000 fd35 	bl	19394 <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1892a:	4628      	mov	r0, r5
   1892c:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1892e:	2500      	movs	r5, #0
    return (void *)block;
   18930:	e7fb      	b.n	1892a <os_memblock_get+0x2a>

00018932 <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   18932:	b538      	push	{r3, r4, r5, lr}
   18934:	4604      	mov	r4, r0
   18936:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   18938:	f000 fd26 	bl	19388 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1893c:	6963      	ldr	r3, [r4, #20]
   1893e:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   18940:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   18942:	88e3      	ldrh	r3, [r4, #6]
   18944:	3301      	adds	r3, #1
   18946:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   18948:	f000 fd24 	bl	19394 <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1894c:	2000      	movs	r0, #0
   1894e:	bd38      	pop	{r3, r4, r5, pc}

00018950 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   18950:	b168      	cbz	r0, 1896e <os_memblock_put+0x1e>
{
   18952:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   18954:	b169      	cbz	r1, 18972 <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   18956:	7a83      	ldrb	r3, [r0, #10]
   18958:	f013 0f01 	tst.w	r3, #1
   1895c:	d004      	beq.n	18968 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1895e:	69c3      	ldr	r3, [r0, #28]
   18960:	b113      	cbz	r3, 18968 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   18962:	6a02      	ldr	r2, [r0, #32]
   18964:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   18966:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   18968:	f7ff ffe3 	bl	18932 <os_memblock_put_from_cb>
   1896c:	e7fb      	b.n	18966 <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1896e:	2003      	movs	r0, #3
}
   18970:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18972:	2003      	movs	r0, #3
   18974:	e7f7      	b.n	18966 <os_memblock_put+0x16>
	...

00018978 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   18978:	4b02      	ldr	r3, [pc, #8]	; (18984 <os_mempool_module_init+0xc>)
   1897a:	2200      	movs	r2, #0
   1897c:	601a      	str	r2, [r3, #0]
   1897e:	605b      	str	r3, [r3, #4]
}
   18980:	4770      	bx	lr
   18982:	bf00      	nop
   18984:	2000ce98 	.word	0x2000ce98

00018988 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   18988:	4b02      	ldr	r3, [pc, #8]	; (18994 <os_msys_find_biggest_pool+0xc>)
   1898a:	6818      	ldr	r0, [r3, #0]
   1898c:	b108      	cbz	r0, 18992 <os_msys_find_biggest_pool+0xa>
   1898e:	6858      	ldr	r0, [r3, #4]
   18990:	3808      	subs	r0, #8
}
   18992:	4770      	bx	lr
   18994:	2000010c 	.word	0x2000010c

00018998 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   18998:	4b09      	ldr	r3, [pc, #36]	; (189c0 <os_msys_find_pool+0x28>)
   1899a:	6819      	ldr	r1, [r3, #0]
   1899c:	460b      	mov	r3, r1
   1899e:	b123      	cbz	r3, 189aa <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   189a0:	881a      	ldrh	r2, [r3, #0]
   189a2:	4282      	cmp	r2, r0
   189a4:	d201      	bcs.n	189aa <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189a6:	689b      	ldr	r3, [r3, #8]
   189a8:	e7f9      	b.n	1899e <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   189aa:	b10b      	cbz	r3, 189b0 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   189ac:	4618      	mov	r0, r3
   189ae:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   189b0:	b119      	cbz	r1, 189ba <os_msys_find_pool+0x22>
   189b2:	4b03      	ldr	r3, [pc, #12]	; (189c0 <os_msys_find_pool+0x28>)
   189b4:	685b      	ldr	r3, [r3, #4]
   189b6:	3b08      	subs	r3, #8
   189b8:	e7f8      	b.n	189ac <os_msys_find_pool+0x14>
   189ba:	460b      	mov	r3, r1
    return (pool);
   189bc:	e7f6      	b.n	189ac <os_msys_find_pool+0x14>
   189be:	bf00      	nop
   189c0:	2000010c 	.word	0x2000010c

000189c4 <os_msys_register>:
{
   189c4:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189c6:	4b11      	ldr	r3, [pc, #68]	; (18a0c <os_msys_register+0x48>)
   189c8:	681d      	ldr	r5, [r3, #0]
   189ca:	462b      	mov	r3, r5
    prev = NULL;
   189cc:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189ce:	b133      	cbz	r3, 189de <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   189d0:	8801      	ldrh	r1, [r0, #0]
   189d2:	881a      	ldrh	r2, [r3, #0]
   189d4:	4291      	cmp	r1, r2
   189d6:	d302      	bcc.n	189de <os_msys_register+0x1a>
        prev = pool;
   189d8:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   189da:	689b      	ldr	r3, [r3, #8]
   189dc:	e7f7      	b.n	189ce <os_msys_register+0xa>
    if (prev) {
   189de:	b15c      	cbz	r4, 189f8 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   189e0:	68a3      	ldr	r3, [r4, #8]
   189e2:	6083      	str	r3, [r0, #8]
   189e4:	b11b      	cbz	r3, 189ee <os_msys_register+0x2a>
   189e6:	60a0      	str	r0, [r4, #8]
}
   189e8:	2000      	movs	r0, #0
   189ea:	bc30      	pop	{r4, r5}
   189ec:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   189ee:	f100 0308 	add.w	r3, r0, #8
   189f2:	4a06      	ldr	r2, [pc, #24]	; (18a0c <os_msys_register+0x48>)
   189f4:	6053      	str	r3, [r2, #4]
   189f6:	e7f6      	b.n	189e6 <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   189f8:	6085      	str	r5, [r0, #8]
   189fa:	b115      	cbz	r5, 18a02 <os_msys_register+0x3e>
   189fc:	4b03      	ldr	r3, [pc, #12]	; (18a0c <os_msys_register+0x48>)
   189fe:	6018      	str	r0, [r3, #0]
   18a00:	e7f2      	b.n	189e8 <os_msys_register+0x24>
   18a02:	f100 0308 	add.w	r3, r0, #8
   18a06:	4a01      	ldr	r2, [pc, #4]	; (18a0c <os_msys_register+0x48>)
   18a08:	6053      	str	r3, [r2, #4]
   18a0a:	e7f7      	b.n	189fc <os_msys_register+0x38>
   18a0c:	2000010c 	.word	0x2000010c

00018a10 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   18a10:	b530      	push	{r4, r5, lr}
   18a12:	b083      	sub	sp, #12
   18a14:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   18a16:	9d07      	ldr	r5, [sp, #28]
   18a18:	9501      	str	r5, [sp, #4]
   18a1a:	9d06      	ldr	r5, [sp, #24]
   18a1c:	9500      	str	r5, [sp, #0]
   18a1e:	f001 f96d 	bl	19cfc <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   18a22:	b138      	cbz	r0, 18a34 <os_msys_init_once+0x24>
   18a24:	2000      	movs	r0, #0
   18a26:	9000      	str	r0, [sp, #0]
   18a28:	4b09      	ldr	r3, [pc, #36]	; (18a50 <os_msys_init_once+0x40>)
   18a2a:	681d      	ldr	r5, [r3, #0]
   18a2c:	4603      	mov	r3, r0
   18a2e:	4602      	mov	r2, r0
   18a30:	4601      	mov	r1, r0
   18a32:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   18a34:	4620      	mov	r0, r4
   18a36:	f7ff ffc5 	bl	189c4 <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   18a3a:	b138      	cbz	r0, 18a4c <os_msys_init_once+0x3c>
   18a3c:	2000      	movs	r0, #0
   18a3e:	9000      	str	r0, [sp, #0]
   18a40:	4b03      	ldr	r3, [pc, #12]	; (18a50 <os_msys_init_once+0x40>)
   18a42:	681c      	ldr	r4, [r3, #0]
   18a44:	4603      	mov	r3, r0
   18a46:	4602      	mov	r2, r0
   18a48:	4601      	mov	r1, r0
   18a4a:	47a0      	blx	r4
}
   18a4c:	b003      	add	sp, #12
   18a4e:	bd30      	pop	{r4, r5, pc}
   18a50:	20000104 	.word	0x20000104

00018a54 <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   18a54:	4b02      	ldr	r3, [pc, #8]	; (18a60 <os_msys_reset+0xc>)
   18a56:	2200      	movs	r2, #0
   18a58:	601a      	str	r2, [r3, #0]
   18a5a:	605b      	str	r3, [r3, #4]
}
   18a5c:	4770      	bx	lr
   18a5e:	bf00      	nop
   18a60:	2000010c 	.word	0x2000010c

00018a64 <os_msys_get_pkthdr>:
{
   18a64:	b510      	push	{r4, lr}
   18a66:	460c      	mov	r4, r1
    if (dsize == 0) {
   18a68:	b930      	cbnz	r0, 18a78 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   18a6a:	f7ff ff8d 	bl	18988 <os_msys_find_biggest_pool>
    if (!pool) {
   18a6e:	b158      	cbz	r0, 18a88 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   18a70:	b2e1      	uxtb	r1, r4
   18a72:	f7ff fe0e 	bl	18692 <os_mbuf_get_pkthdr>
}
   18a76:	bd10      	pop	{r4, pc}
   18a78:	f101 0308 	add.w	r3, r1, #8
   18a7c:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   18a7e:	4403      	add	r3, r0
   18a80:	b298      	uxth	r0, r3
   18a82:	f7ff ff89 	bl	18998 <os_msys_find_pool>
   18a86:	e7f2      	b.n	18a6e <os_msys_get_pkthdr+0xa>
    return (NULL);
   18a88:	2000      	movs	r0, #0
   18a8a:	e7f4      	b.n	18a76 <os_msys_get_pkthdr+0x12>

00018a8c <os_msys_init>:

void
os_msys_init(void)
{
   18a8c:	b500      	push	{lr}
   18a8e:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   18a90:	f7ff ffe0 	bl	18a54 <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   18a94:	4b06      	ldr	r3, [pc, #24]	; (18ab0 <os_msys_init+0x24>)
   18a96:	9301      	str	r3, [sp, #4]
   18a98:	f44f 7392 	mov.w	r3, #292	; 0x124
   18a9c:	9300      	str	r3, [sp, #0]
   18a9e:	2340      	movs	r3, #64	; 0x40
   18aa0:	4a04      	ldr	r2, [pc, #16]	; (18ab4 <os_msys_init+0x28>)
   18aa2:	4905      	ldr	r1, [pc, #20]	; (18ab8 <os_msys_init+0x2c>)
   18aa4:	4805      	ldr	r0, [pc, #20]	; (18abc <os_msys_init+0x30>)
   18aa6:	f7ff ffb3 	bl	18a10 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   18aaa:	b003      	add	sp, #12
   18aac:	f85d fb04 	ldr.w	pc, [sp], #4
   18ab0:	0001f3fc 	.word	0x0001f3fc
   18ab4:	2000c988 	.word	0x2000c988
   18ab8:	2000c994 	.word	0x2000c994
   18abc:	20008088 	.word	0x20008088

00018ac0 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   18ac0:	4603      	mov	r3, r0
   18ac2:	b128      	cbz	r0, 18ad0 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   18ac4:	2000      	movs	r0, #0
   18ac6:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   18ac8:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   18aca:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   18acc:	6018      	str	r0, [r3, #0]
   18ace:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18ad0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   18ad2:	4770      	bx	lr

00018ad4 <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   18ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   18ad6:	4b2c      	ldr	r3, [pc, #176]	; (18b88 <os_mutex_release+0xb4>)
   18ad8:	681b      	ldr	r3, [r3, #0]
   18ada:	2b00      	cmp	r3, #0
   18adc:	d04d      	beq.n	18b7a <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18ade:	2800      	cmp	r0, #0
   18ae0:	d04d      	beq.n	18b7e <os_mutex_release+0xaa>
   18ae2:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   18ae4:	f000 f97a 	bl	18ddc <os_sched_get_current_task>
   18ae8:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   18aea:	88e3      	ldrh	r3, [r4, #6]
   18aec:	2b00      	cmp	r3, #0
   18aee:	d048      	beq.n	18b82 <os_mutex_release+0xae>
   18af0:	68a2      	ldr	r2, [r4, #8]
   18af2:	4282      	cmp	r2, r0
   18af4:	d001      	beq.n	18afa <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   18af6:	2005      	movs	r0, #5
   18af8:	e040      	b.n	18b7c <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   18afa:	2b01      	cmp	r3, #1
   18afc:	d003      	beq.n	18b06 <os_mutex_release+0x32>
        --mu->mu_level;
   18afe:	3b01      	subs	r3, #1
   18b00:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   18b02:	2000      	movs	r0, #0
        goto done;
   18b04:	e03a      	b.n	18b7c <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   18b06:	f000 fc3f 	bl	19388 <os_arch_save_sr>
   18b0a:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   18b0c:	88e3      	ldrh	r3, [r4, #6]
   18b0e:	3b01      	subs	r3, #1
   18b10:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   18b12:	7aea      	ldrb	r2, [r5, #11]
   18b14:	7963      	ldrb	r3, [r4, #5]
   18b16:	429a      	cmp	r2, r3
   18b18:	d11e      	bne.n	18b58 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   18b1a:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   18b1c:	b146      	cbz	r6, 18b30 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   18b1e:	69f3      	ldr	r3, [r6, #28]
   18b20:	b1fb      	cbz	r3, 18b62 <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   18b22:	4630      	mov	r0, r6
   18b24:	f000 f9ae 	bl	18e84 <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   18b28:	2301      	movs	r3, #1
   18b2a:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   18b2c:	7af3      	ldrb	r3, [r6, #11]
   18b2e:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   18b30:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   18b32:	b116      	cbz	r6, 18b3a <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   18b34:	7bb3      	ldrb	r3, [r6, #14]
   18b36:	3301      	adds	r3, #1
   18b38:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   18b3a:	7bab      	ldrb	r3, [r5, #14]
   18b3c:	3b01      	subs	r3, #1
   18b3e:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   18b40:	f000 fa1a 	bl	18f78 <os_sched_next_task>
   18b44:	4604      	mov	r4, r0
    if (rdy != current) {
   18b46:	4285      	cmp	r5, r0
   18b48:	d010      	beq.n	18b6c <os_mutex_release+0x98>
        resched = 1;
   18b4a:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   18b4c:	4638      	mov	r0, r7
   18b4e:	f000 fc21 	bl	19394 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   18b52:	b96d      	cbnz	r5, 18b70 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   18b54:	2000      	movs	r0, #0
   18b56:	e011      	b.n	18b7c <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   18b58:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   18b5a:	4628      	mov	r0, r5
   18b5c:	f000 fa24 	bl	18fa8 <os_sched_resort>
   18b60:	e7db      	b.n	18b1a <os_mutex_release+0x46>
        assert(rdy->t_obj);
   18b62:	461a      	mov	r2, r3
   18b64:	4619      	mov	r1, r3
   18b66:	4618      	mov	r0, r3
   18b68:	f7ff f978 	bl	17e5c <__assert_func>
    resched = 0;
   18b6c:	2500      	movs	r5, #0
   18b6e:	e7ed      	b.n	18b4c <os_mutex_release+0x78>
        os_sched(rdy);
   18b70:	4620      	mov	r0, r4
   18b72:	f000 fa07 	bl	18f84 <os_sched>
    ret = OS_OK;
   18b76:	2000      	movs	r0, #0
   18b78:	e000      	b.n	18b7c <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   18b7a:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   18b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   18b7e:	2003      	movs	r0, #3
   18b80:	e7fc      	b.n	18b7c <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   18b82:	2005      	movs	r0, #5
   18b84:	e7fa      	b.n	18b7c <os_mutex_release+0xa8>
   18b86:	bf00      	nop
   18b88:	2000ce88 	.word	0x2000ce88

00018b8c <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   18b8c:	4b36      	ldr	r3, [pc, #216]	; (18c68 <os_mutex_pend+0xdc>)
   18b8e:	681b      	ldr	r3, [r3, #0]
   18b90:	2b00      	cmp	r3, #0
   18b92:	d065      	beq.n	18c60 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   18b94:	2800      	cmp	r0, #0
   18b96:	d065      	beq.n	18c64 <os_mutex_pend+0xd8>
{
   18b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18b9c:	460f      	mov	r7, r1
   18b9e:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   18ba0:	f000 fbf2 	bl	19388 <os_arch_save_sr>
   18ba4:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   18ba6:	f000 f919 	bl	18ddc <os_sched_get_current_task>
   18baa:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   18bac:	88e3      	ldrh	r3, [r4, #6]
   18bae:	b19b      	cbz	r3, 18bd8 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   18bb0:	68a2      	ldr	r2, [r4, #8]
   18bb2:	4282      	cmp	r2, r0
   18bb4:	d01e      	beq.n	18bf4 <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   18bb6:	b327      	cbz	r7, 18c02 <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   18bb8:	7ad1      	ldrb	r1, [r2, #11]
   18bba:	7ac3      	ldrb	r3, [r0, #11]
   18bbc:	4299      	cmp	r1, r3
   18bbe:	d825      	bhi.n	18c0c <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   18bc0:	6821      	ldr	r1, [r4, #0]
   18bc2:	b369      	cbz	r1, 18c20 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18bc4:	460b      	mov	r3, r1
    last = NULL;
   18bc6:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18bc8:	b32b      	cbz	r3, 18c16 <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   18bca:	7ae8      	ldrb	r0, [r5, #11]
   18bcc:	7ada      	ldrb	r2, [r3, #11]
   18bce:	4290      	cmp	r0, r2
   18bd0:	d321      	bcc.n	18c16 <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   18bd2:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   18bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18bd6:	e7f7      	b.n	18bc8 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   18bd8:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   18bda:	7ac3      	ldrb	r3, [r0, #11]
   18bdc:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   18bde:	7b83      	ldrb	r3, [r0, #14]
   18be0:	3301      	adds	r3, #1
   18be2:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   18be4:	2301      	movs	r3, #1
   18be6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18be8:	4640      	mov	r0, r8
   18bea:	f000 fbd3 	bl	19394 <os_arch_restore_sr>
        ret = OS_OK;
   18bee:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   18bf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   18bf4:	3301      	adds	r3, #1
   18bf6:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   18bf8:	4640      	mov	r0, r8
   18bfa:	f000 fbcb 	bl	19394 <os_arch_restore_sr>
        ret = OS_OK;
   18bfe:	2000      	movs	r0, #0
        goto done;
   18c00:	e7f6      	b.n	18bf0 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   18c02:	4640      	mov	r0, r8
   18c04:	f000 fbc6 	bl	19394 <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   18c08:	2006      	movs	r0, #6
        goto done;
   18c0a:	e7f1      	b.n	18bf0 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   18c0c:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   18c0e:	68a0      	ldr	r0, [r4, #8]
   18c10:	f000 f9ca 	bl	18fa8 <os_sched_resort>
   18c14:	e7d4      	b.n	18bc0 <os_mutex_pend+0x34>
    if (last) {
   18c16:	b11e      	cbz	r6, 18c20 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   18c18:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   18c1a:	64eb      	str	r3, [r5, #76]	; 0x4c
   18c1c:	64f5      	str	r5, [r6, #76]	; 0x4c
   18c1e:	e001      	b.n	18c24 <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   18c20:	64e9      	str	r1, [r5, #76]	; 0x4c
   18c22:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   18c24:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   18c26:	7b6b      	ldrb	r3, [r5, #13]
   18c28:	f043 0304 	orr.w	r3, r3, #4
   18c2c:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   18c2e:	4639      	mov	r1, r7
   18c30:	4628      	mov	r0, r5
   18c32:	f000 f8df 	bl	18df4 <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   18c36:	4640      	mov	r0, r8
   18c38:	f000 fbac 	bl	19394 <os_arch_restore_sr>
    os_sched(NULL);
   18c3c:	2000      	movs	r0, #0
   18c3e:	f000 f9a1 	bl	18f84 <os_sched>
    OS_ENTER_CRITICAL(sr);
   18c42:	f000 fba1 	bl	19388 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   18c46:	7b6b      	ldrb	r3, [r5, #13]
   18c48:	f023 0304 	bic.w	r3, r3, #4
   18c4c:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   18c4e:	f000 fba1 	bl	19394 <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   18c52:	68a3      	ldr	r3, [r4, #8]
   18c54:	42ab      	cmp	r3, r5
   18c56:	d001      	beq.n	18c5c <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   18c58:	2006      	movs	r0, #6
   18c5a:	e7c9      	b.n	18bf0 <os_mutex_pend+0x64>
        ret = OS_OK;
   18c5c:	2000      	movs	r0, #0
   18c5e:	e7c7      	b.n	18bf0 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   18c60:	2009      	movs	r0, #9
   18c62:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18c64:	2003      	movs	r0, #3
}
   18c66:	4770      	bx	lr
   18c68:	2000ce88 	.word	0x2000ce88

00018c6c <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   18c6c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18c6e:	4b05      	ldr	r3, [pc, #20]	; (18c84 <os_sanity_check_list_lock+0x18>)
   18c70:	6818      	ldr	r0, [r3, #0]
   18c72:	b900      	cbnz	r0, 18c76 <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18c74:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   18c76:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   18c7a:	4803      	ldr	r0, [pc, #12]	; (18c88 <os_sanity_check_list_lock+0x1c>)
   18c7c:	f7ff ff86 	bl	18b8c <os_mutex_pend>
err:
   18c80:	e7f8      	b.n	18c74 <os_sanity_check_list_lock+0x8>
   18c82:	bf00      	nop
   18c84:	2000ce88 	.word	0x2000ce88
   18c88:	2000cea0 	.word	0x2000cea0

00018c8c <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   18c8c:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   18c8e:	4b04      	ldr	r3, [pc, #16]	; (18ca0 <os_sanity_check_list_unlock+0x14>)
   18c90:	6818      	ldr	r0, [r3, #0]
   18c92:	b900      	cbnz	r0, 18c96 <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   18c94:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   18c96:	4803      	ldr	r0, [pc, #12]	; (18ca4 <os_sanity_check_list_unlock+0x18>)
   18c98:	f7ff ff1c 	bl	18ad4 <os_mutex_release>
err:
   18c9c:	e7fa      	b.n	18c94 <os_sanity_check_list_unlock+0x8>
   18c9e:	bf00      	nop
   18ca0:	2000ce88 	.word	0x2000ce88
   18ca4:	2000cea0 	.word	0x2000cea0

00018ca8 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   18ca8:	2300      	movs	r3, #0
   18caa:	6003      	str	r3, [r0, #0]
   18cac:	6043      	str	r3, [r0, #4]
   18cae:	6083      	str	r3, [r0, #8]
   18cb0:	60c3      	str	r3, [r0, #12]
   18cb2:	6103      	str	r3, [r0, #16]
}
   18cb4:	4618      	mov	r0, r3
   18cb6:	4770      	bx	lr

00018cb8 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   18cb8:	b510      	push	{r4, lr}
   18cba:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   18cbc:	f7ff ffd6 	bl	18c6c <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   18cc0:	4603      	mov	r3, r0
   18cc2:	b108      	cbz	r0, 18cc8 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   18cc4:	4618      	mov	r0, r3
   18cc6:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   18cc8:	4b03      	ldr	r3, [pc, #12]	; (18cd8 <os_sanity_check_register+0x20>)
   18cca:	681a      	ldr	r2, [r3, #0]
   18ccc:	6122      	str	r2, [r4, #16]
   18cce:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   18cd0:	f7ff ffdc 	bl	18c8c <os_sanity_check_list_unlock>
   18cd4:	4603      	mov	r3, r0
err:
   18cd6:	e7f5      	b.n	18cc4 <os_sanity_check_register+0xc>
   18cd8:	2000c9b0 	.word	0x2000c9b0

00018cdc <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   18cdc:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   18cde:	f7ff ffc5 	bl	18c6c <os_sanity_check_list_lock>
    if (rc != 0) {
   18ce2:	b910      	cbnz	r0, 18cea <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18ce4:	4b17      	ldr	r3, [pc, #92]	; (18d44 <os_sanity_run+0x68>)
   18ce6:	681c      	ldr	r4, [r3, #0]
   18ce8:	e00e      	b.n	18d08 <os_sanity_run+0x2c>
        assert(0);
   18cea:	2300      	movs	r3, #0
   18cec:	461a      	mov	r2, r3
   18cee:	4619      	mov	r1, r3
   18cf0:	4618      	mov	r0, r3
   18cf2:	f7ff f8b3 	bl	17e5c <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   18cf6:	f000 facf 	bl	19298 <os_time_get>
   18cfa:	6823      	ldr	r3, [r4, #0]
   18cfc:	6862      	ldr	r2, [r4, #4]
   18cfe:	4413      	add	r3, r2
   18d00:	1ac3      	subs	r3, r0, r3
   18d02:	2b00      	cmp	r3, #0
   18d04:	dc0d      	bgt.n	18d22 <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   18d06:	6924      	ldr	r4, [r4, #16]
   18d08:	b18c      	cbz	r4, 18d2e <os_sanity_run+0x52>
        if (sc->sc_func) {
   18d0a:	68a3      	ldr	r3, [r4, #8]
   18d0c:	2b00      	cmp	r3, #0
   18d0e:	d0f2      	beq.n	18cf6 <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   18d10:	68e1      	ldr	r1, [r4, #12]
   18d12:	4620      	mov	r0, r4
   18d14:	4798      	blx	r3
            if (rc == OS_OK) {
   18d16:	2800      	cmp	r0, #0
   18d18:	d1ed      	bne.n	18cf6 <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   18d1a:	f000 fabd 	bl	19298 <os_time_get>
   18d1e:	6020      	str	r0, [r4, #0]
                continue;
   18d20:	e7f1      	b.n	18d06 <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   18d22:	2300      	movs	r3, #0
   18d24:	461a      	mov	r2, r3
   18d26:	4619      	mov	r1, r3
   18d28:	4618      	mov	r0, r3
   18d2a:	f7ff f897 	bl	17e5c <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   18d2e:	f7ff ffad 	bl	18c8c <os_sanity_check_list_unlock>
    if (rc != 0) {
   18d32:	b900      	cbnz	r0, 18d36 <os_sanity_run+0x5a>
        assert(0);
    }
}
   18d34:	bd10      	pop	{r4, pc}
        assert(0);
   18d36:	2300      	movs	r3, #0
   18d38:	461a      	mov	r2, r3
   18d3a:	4619      	mov	r1, r3
   18d3c:	4618      	mov	r0, r3
   18d3e:	f7ff f88d 	bl	17e5c <__assert_func>
   18d42:	bf00      	nop
   18d44:	2000c9b0 	.word	0x2000c9b0

00018d48 <os_sanity_init>:

int
os_sanity_init(void)
{
   18d48:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   18d4a:	4802      	ldr	r0, [pc, #8]	; (18d54 <os_sanity_init+0xc>)
   18d4c:	f7ff feb8 	bl	18ac0 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   18d50:	bd08      	pop	{r3, pc}
   18d52:	bf00      	nop
   18d54:	2000cea0 	.word	0x2000cea0

00018d58 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   18d58:	7b03      	ldrb	r3, [r0, #12]
   18d5a:	2b01      	cmp	r3, #1
   18d5c:	d001      	beq.n	18d62 <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   18d5e:	2002      	movs	r0, #2
}
   18d60:	4770      	bx	lr
{
   18d62:	b510      	push	{r4, lr}
   18d64:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18d66:	f000 fb0f 	bl	19388 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18d6a:	4b0f      	ldr	r3, [pc, #60]	; (18da8 <os_sched_insert+0x50>)
   18d6c:	681b      	ldr	r3, [r3, #0]
   18d6e:	b12b      	cbz	r3, 18d7c <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   18d70:	7ae1      	ldrb	r1, [r4, #11]
   18d72:	7ada      	ldrb	r2, [r3, #11]
   18d74:	4291      	cmp	r1, r2
   18d76:	d301      	bcc.n	18d7c <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   18d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18d7a:	e7f8      	b.n	18d6e <os_sched_insert+0x16>
    if (entry) {
   18d7c:	b153      	cbz	r3, 18d94 <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   18d7e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18d80:	64a2      	str	r2, [r4, #72]	; 0x48
   18d82:	6463      	str	r3, [r4, #68]	; 0x44
   18d84:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18d86:	6014      	str	r4, [r2, #0]
   18d88:	3444      	adds	r4, #68	; 0x44
   18d8a:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   18d8c:	f000 fb02 	bl	19394 <os_arch_restore_sr>
    return (0);
   18d90:	2000      	movs	r0, #0
}
   18d92:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   18d94:	2300      	movs	r3, #0
   18d96:	6463      	str	r3, [r4, #68]	; 0x44
   18d98:	4b03      	ldr	r3, [pc, #12]	; (18da8 <os_sched_insert+0x50>)
   18d9a:	685a      	ldr	r2, [r3, #4]
   18d9c:	64a2      	str	r2, [r4, #72]	; 0x48
   18d9e:	6014      	str	r4, [r2, #0]
   18da0:	3444      	adds	r4, #68	; 0x44
   18da2:	605c      	str	r4, [r3, #4]
   18da4:	e7f2      	b.n	18d8c <os_sched_insert+0x34>
   18da6:	bf00      	nop
   18da8:	20000114 	.word	0x20000114

00018dac <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   18dac:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   18dae:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   18db0:	3301      	adds	r3, #1
   18db2:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   18db4:	4b06      	ldr	r3, [pc, #24]	; (18dd0 <os_sched_ctx_sw_hook+0x24>)
   18db6:	681c      	ldr	r4, [r3, #0]
   18db8:	4b06      	ldr	r3, [pc, #24]	; (18dd4 <os_sched_ctx_sw_hook+0x28>)
   18dba:	6818      	ldr	r0, [r3, #0]
   18dbc:	4906      	ldr	r1, [pc, #24]	; (18dd8 <os_sched_ctx_sw_hook+0x2c>)
   18dbe:	680b      	ldr	r3, [r1, #0]
   18dc0:	1ac2      	subs	r2, r0, r3
   18dc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   18dc4:	4413      	add	r3, r2
   18dc6:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   18dc8:	6008      	str	r0, [r1, #0]
}
   18dca:	f85d 4b04 	ldr.w	r4, [sp], #4
   18dce:	4770      	bx	lr
   18dd0:	2000ceb0 	.word	0x2000ceb0
   18dd4:	2000cec0 	.word	0x2000cec0
   18dd8:	2000ceac 	.word	0x2000ceac

00018ddc <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   18ddc:	4b01      	ldr	r3, [pc, #4]	; (18de4 <os_sched_get_current_task+0x8>)
   18dde:	6818      	ldr	r0, [r3, #0]
   18de0:	4770      	bx	lr
   18de2:	bf00      	nop
   18de4:	2000ceb0 	.word	0x2000ceb0

00018de8 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   18de8:	4b01      	ldr	r3, [pc, #4]	; (18df0 <os_sched_set_current_task+0x8>)
   18dea:	6018      	str	r0, [r3, #0]
}
   18dec:	4770      	bx	lr
   18dee:	bf00      	nop
   18df0:	2000ceb0 	.word	0x2000ceb0

00018df4 <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   18df4:	b538      	push	{r3, r4, r5, lr}
   18df6:	4604      	mov	r4, r0
   18df8:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18dfa:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18dfc:	b1d3      	cbz	r3, 18e34 <os_sched_sleep+0x40>
   18dfe:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18e00:	649a      	str	r2, [r3, #72]	; 0x48
   18e02:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   18e04:	6c62      	ldr	r2, [r4, #68]	; 0x44
   18e06:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   18e08:	2302      	movs	r3, #2
   18e0a:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   18e0c:	f000 fa44 	bl	19298 <os_time_get>
   18e10:	4428      	add	r0, r5
   18e12:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   18e14:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   18e18:	d010      	beq.n	18e3c <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18e1a:	4b18      	ldr	r3, [pc, #96]	; (18e7c <os_sched_sleep+0x88>)
   18e1c:	681b      	ldr	r3, [r3, #0]
   18e1e:	b1d3      	cbz	r3, 18e56 <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18e20:	7b5a      	ldrb	r2, [r3, #13]
   18e22:	f012 0f01 	tst.w	r2, #1
   18e26:	d116      	bne.n	18e56 <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   18e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   18e2a:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   18e2c:	2a00      	cmp	r2, #0
   18e2e:	dc12      	bgt.n	18e56 <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   18e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   18e32:	e7f4      	b.n	18e1e <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18e34:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18e36:	4b12      	ldr	r3, [pc, #72]	; (18e80 <os_sched_sleep+0x8c>)
   18e38:	605a      	str	r2, [r3, #4]
   18e3a:	e7e2      	b.n	18e02 <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   18e3c:	7b63      	ldrb	r3, [r4, #13]
   18e3e:	f043 0301 	orr.w	r3, r3, #1
   18e42:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18e44:	2300      	movs	r3, #0
   18e46:	6463      	str	r3, [r4, #68]	; 0x44
   18e48:	4b0c      	ldr	r3, [pc, #48]	; (18e7c <os_sched_sleep+0x88>)
   18e4a:	685a      	ldr	r2, [r3, #4]
   18e4c:	64a2      	str	r2, [r4, #72]	; 0x48
   18e4e:	6014      	str	r4, [r2, #0]
   18e50:	3444      	adds	r4, #68	; 0x44
   18e52:	605c      	str	r4, [r3, #4]
   18e54:	e007      	b.n	18e66 <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   18e56:	b143      	cbz	r3, 18e6a <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   18e58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18e5a:	64a2      	str	r2, [r4, #72]	; 0x48
   18e5c:	6463      	str	r3, [r4, #68]	; 0x44
   18e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   18e60:	6014      	str	r4, [r2, #0]
   18e62:	3444      	adds	r4, #68	; 0x44
   18e64:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   18e66:	2000      	movs	r0, #0
   18e68:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   18e6a:	2300      	movs	r3, #0
   18e6c:	6463      	str	r3, [r4, #68]	; 0x44
   18e6e:	4b03      	ldr	r3, [pc, #12]	; (18e7c <os_sched_sleep+0x88>)
   18e70:	685a      	ldr	r2, [r3, #4]
   18e72:	64a2      	str	r2, [r4, #72]	; 0x48
   18e74:	6014      	str	r4, [r2, #0]
   18e76:	3444      	adds	r4, #68	; 0x44
   18e78:	605c      	str	r4, [r3, #4]
   18e7a:	e7f4      	b.n	18e66 <os_sched_sleep+0x72>
   18e7c:	2000011c 	.word	0x2000011c
   18e80:	20000114 	.word	0x20000114

00018e84 <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   18e84:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   18e86:	7b03      	ldrb	r3, [r0, #12]
   18e88:	2b02      	cmp	r3, #2
   18e8a:	d108      	bne.n	18e9e <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   18e8c:	69c3      	ldr	r3, [r0, #28]
   18e8e:	b1db      	cbz	r3, 18ec8 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18e90:	681a      	ldr	r2, [r3, #0]
   18e92:	b152      	cbz	r2, 18eaa <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18e94:	4282      	cmp	r2, r0
   18e96:	d10f      	bne.n	18eb8 <os_sched_wakeup+0x34>
   18e98:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   18e9a:	601a      	str	r2, [r3, #0]
   18e9c:	e011      	b.n	18ec2 <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   18e9e:	2300      	movs	r3, #0
   18ea0:	461a      	mov	r2, r3
   18ea2:	4619      	mov	r1, r3
   18ea4:	4618      	mov	r0, r3
   18ea6:	f7fe ffd9 	bl	17e5c <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   18eaa:	2300      	movs	r3, #0
   18eac:	461a      	mov	r2, r3
   18eae:	4619      	mov	r1, r3
   18eb0:	4618      	mov	r0, r3
   18eb2:	f7fe ffd3 	bl	17e5c <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   18eb6:	461a      	mov	r2, r3
   18eb8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   18eba:	4283      	cmp	r3, r0
   18ebc:	d1fb      	bne.n	18eb6 <os_sched_wakeup+0x32>
   18ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   18ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   18ec2:	2300      	movs	r3, #0
   18ec4:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   18ec6:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   18ec8:	2301      	movs	r3, #1
   18eca:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   18ecc:	2300      	movs	r3, #0
   18ece:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   18ed0:	7b43      	ldrb	r3, [r0, #13]
   18ed2:	f023 0301 	bic.w	r3, r3, #1
   18ed6:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18ed8:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18eda:	b143      	cbz	r3, 18eee <os_sched_wakeup+0x6a>
   18edc:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18ede:	649a      	str	r2, [r3, #72]	; 0x48
   18ee0:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18ee2:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18ee4:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   18ee6:	f7ff ff37 	bl	18d58 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   18eea:	2000      	movs	r0, #0
   18eec:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   18eee:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18ef0:	4b01      	ldr	r3, [pc, #4]	; (18ef8 <os_sched_wakeup+0x74>)
   18ef2:	605a      	str	r2, [r3, #4]
   18ef4:	e7f4      	b.n	18ee0 <os_sched_wakeup+0x5c>
   18ef6:	bf00      	nop
   18ef8:	2000011c 	.word	0x2000011c

00018efc <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   18efc:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   18efe:	f000 f9cb 	bl	19298 <os_time_get>
   18f02:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   18f04:	f000 fa40 	bl	19388 <os_arch_save_sr>
   18f08:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   18f0a:	4b0a      	ldr	r3, [pc, #40]	; (18f34 <os_sched_os_timer_exp+0x38>)
   18f0c:	6818      	ldr	r0, [r3, #0]
    while (t) {
   18f0e:	b160      	cbz	r0, 18f2a <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   18f10:	7b43      	ldrb	r3, [r0, #13]
   18f12:	f013 0f01 	tst.w	r3, #1
   18f16:	d108      	bne.n	18f2a <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   18f18:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   18f1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   18f1c:	1aeb      	subs	r3, r5, r3
   18f1e:	2b00      	cmp	r3, #0
   18f20:	db03      	blt.n	18f2a <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   18f22:	f7ff ffaf 	bl	18e84 <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   18f26:	4620      	mov	r0, r4
   18f28:	e7f1      	b.n	18f0e <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   18f2a:	4630      	mov	r0, r6
   18f2c:	f000 fa32 	bl	19394 <os_arch_restore_sr>
}
   18f30:	bd70      	pop	{r4, r5, r6, pc}
   18f32:	bf00      	nop
   18f34:	2000011c 	.word	0x2000011c

00018f38 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   18f38:	b510      	push	{r4, lr}
   18f3a:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   18f3c:	f000 fa2d 	bl	1939a <os_arch_in_critical>
   18f40:	b150      	cbz	r0, 18f58 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   18f42:	4b0c      	ldr	r3, [pc, #48]	; (18f74 <os_sched_wakeup_ticks+0x3c>)
   18f44:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   18f46:	b17b      	cbz	r3, 18f68 <os_sched_wakeup_ticks+0x30>
   18f48:	7b5a      	ldrb	r2, [r3, #13]
   18f4a:	f012 0f01 	tst.w	r2, #1
   18f4e:	d10e      	bne.n	18f6e <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   18f50:	6b58      	ldr	r0, [r3, #52]	; 0x34
   18f52:	1b00      	subs	r0, r0, r4
   18f54:	d406      	bmi.n	18f64 <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   18f56:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   18f58:	2300      	movs	r3, #0
   18f5a:	461a      	mov	r2, r3
   18f5c:	4619      	mov	r1, r3
   18f5e:	4618      	mov	r0, r3
   18f60:	f7fe ff7c 	bl	17e5c <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   18f64:	2000      	movs	r0, #0
   18f66:	e7f6      	b.n	18f56 <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   18f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f6c:	e7f3      	b.n	18f56 <os_sched_wakeup_ticks+0x1e>
   18f6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   18f72:	e7f0      	b.n	18f56 <os_sched_wakeup_ticks+0x1e>
   18f74:	2000011c 	.word	0x2000011c

00018f78 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   18f78:	4b01      	ldr	r3, [pc, #4]	; (18f80 <os_sched_next_task+0x8>)
   18f7a:	6818      	ldr	r0, [r3, #0]
   18f7c:	4770      	bx	lr
   18f7e:	bf00      	nop
   18f80:	20000114 	.word	0x20000114

00018f84 <os_sched>:
{
   18f84:	b538      	push	{r3, r4, r5, lr}
   18f86:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   18f88:	f000 f9fe 	bl	19388 <os_arch_save_sr>
   18f8c:	4605      	mov	r5, r0
    if (!next_t) {
   18f8e:	b134      	cbz	r4, 18f9e <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   18f90:	4620      	mov	r0, r4
   18f92:	f000 f9ef 	bl	19374 <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   18f96:	4628      	mov	r0, r5
   18f98:	f000 f9fc 	bl	19394 <os_arch_restore_sr>
}
   18f9c:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   18f9e:	f7ff ffeb 	bl	18f78 <os_sched_next_task>
   18fa2:	4604      	mov	r4, r0
   18fa4:	e7f4      	b.n	18f90 <os_sched+0xc>
	...

00018fa8 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   18fa8:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   18faa:	7b03      	ldrb	r3, [r0, #12]
   18fac:	2b01      	cmp	r3, #1
   18fae:	d000      	beq.n	18fb2 <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   18fb0:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18fb2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   18fb4:	b13b      	cbz	r3, 18fc6 <os_sched_resort+0x1e>
   18fb6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18fb8:	649a      	str	r2, [r3, #72]	; 0x48
   18fba:	6c83      	ldr	r3, [r0, #72]	; 0x48
   18fbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
   18fbe:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   18fc0:	f7ff feca 	bl	18d58 <os_sched_insert>
}
   18fc4:	e7f4      	b.n	18fb0 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   18fc6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   18fc8:	4b01      	ldr	r3, [pc, #4]	; (18fd0 <os_sched_resort+0x28>)
   18fca:	605a      	str	r2, [r3, #4]
   18fcc:	e7f5      	b.n	18fba <os_sched_resort+0x12>
   18fce:	bf00      	nop
   18fd0:	20000114 	.word	0x20000114

00018fd4 <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   18fd4:	4603      	mov	r3, r0
   18fd6:	b118      	cbz	r0, 18fe0 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   18fd8:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   18fda:	2000      	movs	r0, #0
   18fdc:	6018      	str	r0, [r3, #0]
   18fde:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   18fe0:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   18fe2:	4770      	bx	lr

00018fe4 <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   18fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   18fe6:	4b17      	ldr	r3, [pc, #92]	; (19044 <os_sem_release+0x60>)
   18fe8:	681b      	ldr	r3, [r3, #0]
   18fea:	b33b      	cbz	r3, 1903c <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   18fec:	b340      	cbz	r0, 19040 <os_sem_release+0x5c>
   18fee:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   18ff0:	f7ff fef4 	bl	18ddc <os_sched_get_current_task>
   18ff4:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   18ff6:	f000 f9c7 	bl	19388 <os_arch_save_sr>
   18ffa:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   18ffc:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   18ffe:	b165      	cbz	r5, 1901a <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   19000:	7b6b      	ldrb	r3, [r5, #13]
   19002:	f023 0302 	bic.w	r3, r3, #2
   19006:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   19008:	4628      	mov	r0, r5
   1900a:	f7ff ff3b 	bl	18e84 <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1900e:	7afa      	ldrb	r2, [r7, #11]
   19010:	7aeb      	ldrb	r3, [r5, #11]
   19012:	429a      	cmp	r2, r3
   19014:	d80b      	bhi.n	1902e <os_sem_release+0x4a>
    resched = 0;
   19016:	2400      	movs	r4, #0
   19018:	e003      	b.n	19022 <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1901a:	88e3      	ldrh	r3, [r4, #6]
   1901c:	3301      	adds	r3, #1
   1901e:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   19020:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   19022:	4630      	mov	r0, r6
   19024:	f000 f9b6 	bl	19394 <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   19028:	b91c      	cbnz	r4, 19032 <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1902a:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1902c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1902e:	2401      	movs	r4, #1
   19030:	e7f7      	b.n	19022 <os_sem_release+0x3e>
        os_sched(rdy);
   19032:	4628      	mov	r0, r5
   19034:	f7ff ffa6 	bl	18f84 <os_sched>
    ret = OS_OK;
   19038:	2000      	movs	r0, #0
   1903a:	e7f7      	b.n	1902c <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1903c:	2009      	movs	r0, #9
   1903e:	e7f5      	b.n	1902c <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   19040:	2003      	movs	r0, #3
   19042:	e7f3      	b.n	1902c <os_sem_release+0x48>
   19044:	2000ce88 	.word	0x2000ce88

00019048 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   19048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1904a:	4b2c      	ldr	r3, [pc, #176]	; (190fc <os_sem_pend+0xb4>)
   1904c:	681b      	ldr	r3, [r3, #0]
   1904e:	2b00      	cmp	r3, #0
   19050:	d04f      	beq.n	190f2 <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   19052:	2800      	cmp	r0, #0
   19054:	d04f      	beq.n	190f6 <os_sem_pend+0xae>
   19056:	460d      	mov	r5, r1
   19058:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1905a:	f7ff febf 	bl	18ddc <os_sched_get_current_task>
   1905e:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   19060:	f000 f992 	bl	19388 <os_arch_save_sr>
   19064:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   19066:	88e3      	ldrh	r3, [r4, #6]
   19068:	b14b      	cbz	r3, 1907e <os_sem_pend+0x36>
        sem->sem_tokens--;
   1906a:	3b01      	subs	r3, #1
   1906c:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1906e:	2400      	movs	r4, #0
    sched = 0;
   19070:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   19072:	4638      	mov	r0, r7
   19074:	f000 f98e 	bl	19394 <os_arch_restore_sr>

    if (sched) {
   19078:	bb45      	cbnz	r5, 190cc <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1907a:	4620      	mov	r0, r4
   1907c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1907e:	b315      	cbz	r5, 190c6 <os_sem_pend+0x7e>
        current->t_obj = sem;
   19080:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   19082:	7b73      	ldrb	r3, [r6, #13]
   19084:	f043 0302 	orr.w	r3, r3, #2
   19088:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1908a:	f8d4 c000 	ldr.w	ip, [r4]
   1908e:	f1bc 0f00 	cmp.w	ip, #0
   19092:	d00e      	beq.n	190b2 <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19094:	4663      	mov	r3, ip
        last = NULL;
   19096:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   19098:	b133      	cbz	r3, 190a8 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1909a:	7af1      	ldrb	r1, [r6, #11]
   1909c:	7ada      	ldrb	r2, [r3, #11]
   1909e:	4291      	cmp	r1, r2
   190a0:	d302      	bcc.n	190a8 <os_sem_pend+0x60>
                last = entry;
   190a2:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   190a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   190a6:	e7f7      	b.n	19098 <os_sem_pend+0x50>
        if (last) {
   190a8:	b118      	cbz	r0, 190b2 <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   190aa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   190ac:	64f3      	str	r3, [r6, #76]	; 0x4c
   190ae:	64c6      	str	r6, [r0, #76]	; 0x4c
   190b0:	e002      	b.n	190b8 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   190b2:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   190b6:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   190b8:	4629      	mov	r1, r5
   190ba:	4630      	mov	r0, r6
   190bc:	f7ff fe9a 	bl	18df4 <os_sched_sleep>
        ret = OS_OK;
   190c0:	2400      	movs	r4, #0
        sched = 1;
   190c2:	2501      	movs	r5, #1
   190c4:	e7d5      	b.n	19072 <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   190c6:	2406      	movs	r4, #6
    sched = 0;
   190c8:	2500      	movs	r5, #0
   190ca:	e7d2      	b.n	19072 <os_sem_pend+0x2a>
        os_sched(NULL);
   190cc:	2000      	movs	r0, #0
   190ce:	f7ff ff59 	bl	18f84 <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   190d2:	7b73      	ldrb	r3, [r6, #13]
   190d4:	f013 0f02 	tst.w	r3, #2
   190d8:	d101      	bne.n	190de <os_sem_pend+0x96>
            ret = OS_OK;
   190da:	2400      	movs	r4, #0
   190dc:	e7cd      	b.n	1907a <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   190de:	f000 f953 	bl	19388 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   190e2:	7b73      	ldrb	r3, [r6, #13]
   190e4:	f023 0302 	bic.w	r3, r3, #2
   190e8:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   190ea:	f000 f953 	bl	19394 <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   190ee:	2406      	movs	r4, #6
   190f0:	e7c3      	b.n	1907a <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   190f2:	2409      	movs	r4, #9
   190f4:	e7c1      	b.n	1907a <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   190f6:	2403      	movs	r4, #3
   190f8:	e7bf      	b.n	1907a <os_sem_pend+0x32>
   190fa:	bf00      	nop
   190fc:	2000ce88 	.word	0x2000ce88

00019100 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   19100:	2300      	movs	r3, #0
   19102:	e003      	b.n	1910c <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   19104:	4a03      	ldr	r2, [pc, #12]	; (19114 <_clear_stack+0x14>)
   19106:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1910a:	3301      	adds	r3, #1
   1910c:	428b      	cmp	r3, r1
   1910e:	dbf9      	blt.n	19104 <_clear_stack+0x4>
    }
}
   19110:	4770      	bx	lr
   19112:	bf00      	nop
   19114:	deadbeef 	.word	0xdeadbeef

00019118 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   19118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1911c:	4604      	mov	r4, r0
   1911e:	460f      	mov	r7, r1
   19120:	4690      	mov	r8, r2
   19122:	461d      	mov	r5, r3
   19124:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   19128:	2250      	movs	r2, #80	; 0x50
   1912a:	2100      	movs	r1, #0
   1912c:	f000 fa99 	bl	19662 <memset>

    t->t_func = func;
   19130:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   19134:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   19136:	f000 f927 	bl	19388 <os_arch_save_sr>
    rc = g_task_id;
   1913a:	4b2b      	ldr	r3, [pc, #172]	; (191e8 <os_task_init+0xd0>)
   1913c:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1913e:	1c6a      	adds	r2, r5, #1
   19140:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   19142:	f000 f927 	bl	19394 <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   19146:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   19148:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1914c:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1914e:	2301      	movs	r3, #1
   19150:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   19152:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   19154:	2300      	movs	r3, #0
   19156:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   19158:	f104 0720 	add.w	r7, r4, #32
   1915c:	4638      	mov	r0, r7
   1915e:	f7ff fda3 	bl	18ca8 <os_sanity_check_init>
    if (rc != OS_OK) {
   19162:	4605      	mov	r5, r0
   19164:	2800      	cmp	r0, #0
   19166:	d132      	bne.n	191ce <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   19168:	9b07      	ldr	r3, [sp, #28]
   1916a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1916e:	d005      	beq.n	1917c <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   19170:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   19172:	4638      	mov	r0, r7
   19174:	f7ff fda0 	bl	18cb8 <os_sanity_check_register>
        if (rc != OS_OK) {
   19178:	4605      	mov	r5, r0
   1917a:	bb40      	cbnz	r0, 191ce <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1917c:	4631      	mov	r1, r6
   1917e:	9808      	ldr	r0, [sp, #32]
   19180:	f7ff ffbe 	bl	19100 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   19184:	9b08      	ldr	r3, [sp, #32]
   19186:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1918a:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1918c:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1918e:	4632      	mov	r2, r6
   19190:	4620      	mov	r0, r4
   19192:	f000 f907 	bl	193a4 <os_arch_task_stack_init>
   19196:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   19198:	4b14      	ldr	r3, [pc, #80]	; (191ec <os_task_init+0xd4>)
   1919a:	681b      	ldr	r3, [r3, #0]
   1919c:	b15b      	cbz	r3, 191b6 <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1919e:	7ae1      	ldrb	r1, [r4, #11]
   191a0:	7ada      	ldrb	r2, [r3, #11]
   191a2:	4291      	cmp	r1, r2
   191a4:	d001      	beq.n	191aa <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   191a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   191a8:	e7f8      	b.n	1919c <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   191aa:	2300      	movs	r3, #0
   191ac:	461a      	mov	r2, r3
   191ae:	4619      	mov	r1, r3
   191b0:	4618      	mov	r0, r3
   191b2:	f7fe fe53 	bl	17e5c <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   191b6:	6423      	str	r3, [r4, #64]	; 0x40
   191b8:	4b0c      	ldr	r3, [pc, #48]	; (191ec <os_task_init+0xd4>)
   191ba:	685a      	ldr	r2, [r3, #4]
   191bc:	6014      	str	r4, [r2, #0]
   191be:	f104 0240 	add.w	r2, r4, #64	; 0x40
   191c2:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   191c4:	4620      	mov	r0, r4
   191c6:	f7ff fdc7 	bl	18d58 <os_sched_insert>
   191ca:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   191cc:	b110      	cbz	r0, 191d4 <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   191ce:	4628      	mov	r0, r5
   191d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   191d4:	f7fe fefc 	bl	17fd0 <os_started>
   191d8:	b908      	cbnz	r0, 191de <os_task_init+0xc6>
    return (0);
   191da:	4605      	mov	r5, r0
   191dc:	e7f7      	b.n	191ce <os_task_init+0xb6>
        os_sched(NULL);
   191de:	2000      	movs	r0, #0
   191e0:	f7ff fed0 	bl	18f84 <os_sched>
   191e4:	e7f3      	b.n	191ce <os_task_init+0xb6>
   191e6:	bf00      	nop
   191e8:	2000ceb4 	.word	0x2000ceb4
   191ec:	2000ceb8 	.word	0x2000ceb8

000191f0 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   191f0:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   191f4:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   191f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   191fa:	e9d1 4500 	ldrd	r4, r5, [r1]
   191fe:	eb14 0b03 	adds.w	fp, r4, r3
   19202:	f145 0c00 	adc.w	ip, r5, #0
   19206:	e9c2 bc00 	strd	fp, ip, [r2]
   1920a:	688b      	ldr	r3, [r1, #8]
   1920c:	f641 6184 	movw	r1, #7812	; 0x1e84
   19210:	fb01 3000 	mla	r0, r1, r0, r3
   19214:	6090      	str	r0, [r2, #8]
   19216:	4b08      	ldr	r3, [pc, #32]	; (19238 <os_deltatime+0x48>)
   19218:	4298      	cmp	r0, r3
   1921a:	dd0a      	ble.n	19232 <os_deltatime+0x42>
   1921c:	f11b 0401 	adds.w	r4, fp, #1
   19220:	f14c 0500 	adc.w	r5, ip, #0
   19224:	e9c2 4500 	strd	r4, r5, [r2]
   19228:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1922c:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   19230:	6090      	str	r0, [r2, #8]
}
   19232:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   19236:	4770      	bx	lr
   19238:	000f423f 	.word	0x000f423f

0001923c <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1923c:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1923e:	1e04      	subs	r4, r0, #0
   19240:	db0d      	blt.n	1925e <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   19242:	f000 f8a1 	bl	19388 <os_arch_save_sr>
   19246:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   19248:	4a11      	ldr	r2, [pc, #68]	; (19290 <os_time_tick+0x54>)
   1924a:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1924c:	18e0      	adds	r0, r4, r3
   1924e:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   19250:	ea90 0f03 	teq	r0, r3
   19254:	d409      	bmi.n	1926a <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   19256:	4628      	mov	r0, r5
   19258:	f000 f89c 	bl	19394 <os_arch_restore_sr>
}
   1925c:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1925e:	2300      	movs	r3, #0
   19260:	461a      	mov	r2, r3
   19262:	4619      	mov	r1, r3
   19264:	4618      	mov	r0, r3
   19266:	f7fe fdf9 	bl	17e5c <__assert_func>
        delta = g_os_time - basetod.ostime;
   1926a:	4e0a      	ldr	r6, [pc, #40]	; (19294 <os_time_tick+0x58>)
   1926c:	4631      	mov	r1, r6
   1926e:	f851 4b08 	ldr.w	r4, [r1], #8
   19272:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   19274:	460a      	mov	r2, r1
   19276:	4620      	mov	r0, r4
   19278:	f7ff ffba 	bl	191f0 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1927c:	f106 0118 	add.w	r1, r6, #24
   19280:	460a      	mov	r2, r1
   19282:	4620      	mov	r0, r4
   19284:	f7ff ffb4 	bl	191f0 <os_deltatime>
        basetod.ostime = g_os_time;
   19288:	4b01      	ldr	r3, [pc, #4]	; (19290 <os_time_tick+0x54>)
   1928a:	681b      	ldr	r3, [r3, #0]
   1928c:	6033      	str	r3, [r6, #0]
   1928e:	e7e2      	b.n	19256 <os_time_tick+0x1a>
   19290:	2000cec0 	.word	0x2000cec0
   19294:	2000c9b8 	.word	0x2000c9b8

00019298 <os_time_get>:
}
   19298:	4b01      	ldr	r3, [pc, #4]	; (192a0 <os_time_get+0x8>)
   1929a:	6818      	ldr	r0, [r3, #0]
   1929c:	4770      	bx	lr
   1929e:	bf00      	nop
   192a0:	2000cec0 	.word	0x2000cec0

000192a4 <os_time_advance>:

void
os_time_advance(int ticks)
{
   192a4:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   192a6:	1e04      	subs	r4, r0, #0
   192a8:	db09      	blt.n	192be <os_time_advance+0x1a>

    if (ticks > 0) {
   192aa:	2c00      	cmp	r4, #0
   192ac:	dd06      	ble.n	192bc <os_time_advance+0x18>
        if (!os_started()) {
   192ae:	f7fe fe8f 	bl	17fd0 <os_started>
   192b2:	b950      	cbnz	r0, 192ca <os_time_advance+0x26>
            g_os_time += ticks;
   192b4:	4a0a      	ldr	r2, [pc, #40]	; (192e0 <os_time_advance+0x3c>)
   192b6:	6813      	ldr	r3, [r2, #0]
   192b8:	441c      	add	r4, r3
   192ba:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   192bc:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   192be:	2300      	movs	r3, #0
   192c0:	461a      	mov	r2, r3
   192c2:	4619      	mov	r1, r3
   192c4:	4618      	mov	r0, r3
   192c6:	f7fe fdc9 	bl	17e5c <__assert_func>
            os_time_tick(ticks);
   192ca:	4620      	mov	r0, r4
   192cc:	f7ff ffb6 	bl	1923c <os_time_tick>
            os_callout_tick();
   192d0:	f7fe ffa6 	bl	18220 <os_callout_tick>
            os_sched_os_timer_exp();
   192d4:	f7ff fe12 	bl	18efc <os_sched_os_timer_exp>
            os_sched(NULL);
   192d8:	2000      	movs	r0, #0
   192da:	f7ff fe53 	bl	18f84 <os_sched>
}
   192de:	e7ed      	b.n	192bc <os_time_advance+0x18>
   192e0:	2000cec0 	.word	0x2000cec0

000192e4 <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   192e4:	b900      	cbnz	r0, 192e8 <os_time_delay+0x4>
   192e6:	4770      	bx	lr
{
   192e8:	b538      	push	{r3, r4, r5, lr}
   192ea:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   192ec:	f000 f84c 	bl	19388 <os_arch_save_sr>
   192f0:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   192f2:	f7ff fd73 	bl	18ddc <os_sched_get_current_task>
   192f6:	4621      	mov	r1, r4
   192f8:	f7ff fd7c 	bl	18df4 <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   192fc:	4628      	mov	r0, r5
   192fe:	f000 f849 	bl	19394 <os_arch_restore_sr>
        os_sched(NULL);
   19302:	2000      	movs	r0, #0
   19304:	f7ff fe3e 	bl	18f84 <os_sched>
    }
}
   19308:	bd38      	pop	{r3, r4, r5, pc}
	...

0001930c <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1930c:	b570      	push	{r4, r5, r6, lr}
   1930e:	4605      	mov	r5, r0
   19310:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   19312:	f000 f839 	bl	19388 <os_arch_save_sr>
   19316:	4606      	mov	r6, r0
    if (tv != NULL) {
   19318:	b145      	cbz	r5, 1932c <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1931a:	f7ff ffbd 	bl	19298 <os_time_get>
   1931e:	4908      	ldr	r1, [pc, #32]	; (19340 <os_gettimeofday+0x34>)
   19320:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   19324:	462a      	mov	r2, r5
   19326:	1ac0      	subs	r0, r0, r3
   19328:	f7ff ff62 	bl	191f0 <os_deltatime>
    }

    if (tz != NULL) {
   1932c:	b114      	cbz	r4, 19334 <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1932e:	4b04      	ldr	r3, [pc, #16]	; (19340 <os_gettimeofday+0x34>)
   19330:	6a98      	ldr	r0, [r3, #40]	; 0x28
   19332:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   19334:	4630      	mov	r0, r6
   19336:	f000 f82d 	bl	19394 <os_arch_restore_sr>

    return (0);
}
   1933a:	2000      	movs	r0, #0
   1933c:	bd70      	pop	{r4, r5, r6, pc}
   1933e:	bf00      	nop
   19340:	2000c9b8 	.word	0x2000c9b8

00019344 <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   19344:	b538      	push	{r3, r4, r5, lr}
   19346:	4604      	mov	r4, r0
   19348:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1934a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1934e:	2300      	movs	r3, #0
   19350:	01c0      	lsls	r0, r0, #7
   19352:	0e61      	lsrs	r1, r4, #25
   19354:	f002 f88a 	bl	1b46c <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   19358:	2901      	cmp	r1, #1
   1935a:	bf08      	it	eq
   1935c:	2800      	cmpeq	r0, #0
   1935e:	d202      	bcs.n	19366 <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   19360:	6028      	str	r0, [r5, #0]
    return 0;
   19362:	2000      	movs	r0, #0
}
   19364:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   19366:	2002      	movs	r0, #2
   19368:	e7fc      	b.n	19364 <os_time_ms_to_ticks+0x20>

0001936a <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1936a:	b508      	push	{r3, lr}
    os_time_advance(1);
   1936c:	2001      	movs	r0, #1
   1936e:	f7ff ff99 	bl	192a4 <os_time_advance>
}
   19372:	bd08      	pop	{r3, pc}

00019374 <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   19374:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   19376:	f7ff fd19 	bl	18dac <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1937a:	4b02      	ldr	r3, [pc, #8]	; (19384 <os_arch_ctx_sw+0x10>)
   1937c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   19380:	605a      	str	r2, [r3, #4]
}
   19382:	bd08      	pop	{r3, pc}
   19384:	e000ed00 	.word	0xe000ed00

00019388 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19388:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1938c:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1938e:	f000 0001 	and.w	r0, r0, #1
   19392:	4770      	bx	lr

00019394 <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   19394:	b900      	cbnz	r0, 19398 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   19396:	b662      	cpsie	i
        __enable_irq();
    }
}
   19398:	4770      	bx	lr

0001939a <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1939a:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1939e:	f000 0001 	and.w	r0, r0, #1
   193a2:	4770      	bx	lr

000193a4 <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   193a4:	b570      	push	{r4, r5, r6, lr}
   193a6:	4606      	mov	r6, r0
   193a8:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   193aa:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   193ae:	2309      	movs	r3, #9
   193b0:	e003      	b.n	193ba <os_arch_task_stack_init+0x16>
        s[i] = 0;
   193b2:	2200      	movs	r2, #0
   193b4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   193b8:	3301      	adds	r3, #1
   193ba:	2b0d      	cmp	r3, #13
   193bc:	ddf9      	ble.n	193b2 <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   193be:	4620      	mov	r0, r4
   193c0:	f000 f8b6 	bl	19530 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   193c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   193c8:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   193cc:	6973      	ldr	r3, [r6, #20]
   193ce:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   193d2:	69b3      	ldr	r3, [r6, #24]
   193d4:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   193d8:	f06f 0302 	mvn.w	r3, #2
   193dc:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   193e0:	4620      	mov	r0, r4
   193e2:	bd70      	pop	{r4, r5, r6, pc}

000193e4 <os_arch_init>:

void
os_arch_init(void)
{
   193e4:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   193e6:	4a04      	ldr	r2, [pc, #16]	; (193f8 <os_arch_init+0x14>)
   193e8:	6953      	ldr	r3, [r2, #20]
   193ea:	f043 0310 	orr.w	r3, r3, #16
   193ee:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   193f0:	f7fe fdf4 	bl	17fdc <os_init_idle_task>
}
   193f4:	bd08      	pop	{r3, pc}
   193f6:	bf00      	nop
   193f8:	e000ed00 	.word	0xe000ed00

000193fc <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   193fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   193fe:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   19402:	b90c      	cbnz	r4, 19408 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   19404:	2400      	movs	r4, #0
   19406:	e009      	b.n	1941c <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   19408:	2007      	movs	r0, #7
   1940a:	e02e      	b.n	1946a <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1940c:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   19410:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   19414:	26ff      	movs	r6, #255	; 0xff
   19416:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1941a:	3401      	adds	r4, #1
   1941c:	2cef      	cmp	r4, #239	; 0xef
   1941e:	d9f5      	bls.n	1940c <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   19420:	f06f 040d 	mvn.w	r4, #13
   19424:	e007      	b.n	19436 <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   19426:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19428:	4e12      	ldr	r6, [pc, #72]	; (19474 <os_arch_os_init+0x78>)
   1942a:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1942c:	3510      	adds	r5, #16
   1942e:	4f12      	ldr	r7, [pc, #72]	; (19478 <os_arch_os_init+0x7c>)
   19430:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   19434:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   19436:	2c25      	cmp	r4, #37	; 0x25
   19438:	ddf5      	ble.n	19426 <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1943a:	4c0e      	ldr	r4, [pc, #56]	; (19474 <os_arch_os_init+0x78>)
   1943c:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1943e:	4e0f      	ldr	r6, [pc, #60]	; (1947c <os_arch_os_init+0x80>)
   19440:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19442:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19444:	4e0e      	ldr	r6, [pc, #56]	; (19480 <os_arch_os_init+0x84>)
   19446:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19448:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1944a:	4e0e      	ldr	r6, [pc, #56]	; (19484 <os_arch_os_init+0x88>)
   1944c:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1944e:	25e0      	movs	r5, #224	; 0xe0
   19450:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   19454:	2520      	movs	r5, #32
   19456:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   19458:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1945c:	f014 0f01 	tst.w	r4, #1
   19460:	d004      	beq.n	1946c <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   19462:	f8df c024 	ldr.w	ip, [pc, #36]	; 19488 <os_arch_os_init+0x8c>
   19466:	df00      	svc	0
        err = OS_OK;
   19468:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1946a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1946c:	f7ff ffba 	bl	193e4 <os_arch_init>
        err = OS_OK;
   19470:	2000      	movs	r0, #0
   19472:	e7fa      	b.n	1946a <os_arch_os_init+0x6e>
   19474:	e000ed00 	.word	0xe000ed00
   19478:	000195cf 	.word	0x000195cf
   1947c:	00019537 	.word	0x00019537
   19480:	0001957d 	.word	0x0001957d
   19484:	000195c3 	.word	0x000195c3
   19488:	000193e5 	.word	0x000193e5

0001948c <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1948c:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1948e:	f7ff fd73 	bl	18f78 <os_sched_next_task>
   19492:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   19494:	f7ff fca8 	bl	18de8 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   19498:	6823      	ldr	r3, [r4, #0]
   1949a:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1949c:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   194a0:	2106      	movs	r1, #6
   194a2:	2080      	movs	r0, #128	; 0x80
   194a4:	f000 fde8 	bl	1a078 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   194a8:	4b03      	ldr	r3, [pc, #12]	; (194b8 <os_arch_start+0x2c>)
   194aa:	2201      	movs	r2, #1
   194ac:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   194ae:	4620      	mov	r0, r4
   194b0:	f7ff ff60 	bl	19374 <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   194b4:	69a0      	ldr	r0, [r4, #24]
   194b6:	bd10      	pop	{r4, pc}
   194b8:	2000ce88 	.word	0x2000ce88

000194bc <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   194bc:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   194be:	4814      	ldr	r0, [pc, #80]	; (19510 <os_arch_os_start+0x54>)
   194c0:	6800      	ldr	r0, [r0, #0]
   194c2:	3804      	subs	r0, #4
   194c4:	f000 f82a 	bl	1951c <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   194c8:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   194cc:	b9d4      	cbnz	r4, 19504 <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   194ce:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   194d2:	f004 0403 	and.w	r4, r4, #3
   194d6:	2c03      	cmp	r4, #3
   194d8:	d808      	bhi.n	194ec <os_arch_os_start+0x30>
   194da:	e8df f004 	tbb	[pc, r4]
   194de:	1515      	.short	0x1515
   194e0:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   194e2:	4c0c      	ldr	r4, [pc, #48]	; (19514 <os_arch_os_start+0x58>)
   194e4:	6824      	ldr	r4, [r4, #0]
   194e6:	f014 0f01 	tst.w	r4, #1
   194ea:	d10f      	bne.n	1950c <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   194ec:	f8df c028 	ldr.w	ip, [pc, #40]	; 19518 <os_arch_os_start+0x5c>
   194f0:	df00      	svc	0
   194f2:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   194f4:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   194f6:	4c07      	ldr	r4, [pc, #28]	; (19514 <os_arch_os_start+0x58>)
   194f8:	6824      	ldr	r4, [r4, #0]
   194fa:	f014 0f01 	tst.w	r4, #1
   194fe:	d1f5      	bne.n	194ec <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   19500:	2008      	movs	r0, #8
   19502:	e7f7      	b.n	194f4 <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   19504:	2007      	movs	r0, #7
   19506:	e7f5      	b.n	194f4 <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   19508:	2008      	movs	r0, #8
   1950a:	e7f3      	b.n	194f4 <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1950c:	2008      	movs	r0, #8
   1950e:	e7f1      	b.n	194f4 <os_arch_os_start+0x38>
   19510:	2000cde8 	.word	0x2000cde8
   19514:	2000c9e8 	.word	0x2000c9e8
   19518:	0001948d 	.word	0x0001948d

0001951c <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1951c:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   19520:	4832      	ldr	r0, [pc, #200]	; (195ec <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   19522:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   19524:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   19526:	f380 8814 	msr	CONTROL, r0
        ISB
   1952a:	f3bf 8f6f 	isb	sy
        BX      LR
   1952e:	4770      	bx	lr

00019530 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   19530:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   19534:	4770      	bx	lr

00019536 <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   19536:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1953a:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1953c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   19540:	b951      	cbnz	r1, 19558 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   19542:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19546:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   19548:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1954a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1954e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   19552:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   19556:	4770      	bx	lr

00019558 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   19558:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1955a:	4a25      	ldr	r2, [pc, #148]	; (195f0 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1955c:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1955e:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   19560:	d809      	bhi.n	19576 <SVC_Done>

        LDR     R4,=SVC_Table-4
   19562:	4c24      	ldr	r4, [pc, #144]	; (195f4 <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   19564:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   19568:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1956c:	47a0      	blx	r4

        MRS     R12,PSP
   1956e:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   19572:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

00019576 <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   19576:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1957a:	4770      	bx	lr

0001957c <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1957c:	4b1e      	ldr	r3, [pc, #120]	; (195f8 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1957e:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   19580:	4b1e      	ldr	r3, [pc, #120]	; (195fc <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   19582:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   19584:	4291      	cmp	r1, r2
        IT      EQ
   19586:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   19588:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1958a:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1958e:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   19592:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   19594:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   19598:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1959c:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   195a0:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   195a2:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   195a6:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   195aa:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   195ae:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   195b0:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   195b4:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   195b8:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   195bc:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   195c0:	4770      	bx	lr

000195c2 <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   195c2:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   195c4:	f7ff fed1 	bl	1936a <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   195c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   195cc:	4770      	bx	lr

000195ce <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   195ce:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   195d2:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   195d4:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   195d8:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   195dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   195e0:	4668      	mov	r0, sp
        BL      os_default_irq
   195e2:	f7fe fc61 	bl	17ea8 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   195e6:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   195ea:	4770      	bx	lr
        LDR     R0,=os_flags
   195ec:	2000c9e8 	.word	0x2000c9e8
        LDR     R2,=SVC_Count
   195f0:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   195f4:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   195f8:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   195fc:	2000ceb0 	.word	0x2000ceb0

00019600 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   19600:	b470      	push	{r4, r5, r6}
   19602:	f04f 0500 	mov.w	r5, #0
   19606:	f022 0603 	bic.w	r6, r2, #3
   1960a:	e005      	b.n	19618 <test1>

0001960c <loop1>:
   1960c:	5943      	ldr	r3, [r0, r5]
   1960e:	594c      	ldr	r4, [r1, r5]
   19610:	42a3      	cmp	r3, r4
   19612:	d104      	bne.n	1961e <res1>
   19614:	f105 0504 	add.w	r5, r5, #4

00019618 <test1>:
   19618:	42b5      	cmp	r5, r6
   1961a:	d1f7      	bne.n	1960c <loop1>
   1961c:	e00d      	b.n	1963a <test2>

0001961e <res1>:
   1961e:	ba1b      	rev	r3, r3
   19620:	ba24      	rev	r4, r4
   19622:	1b1b      	subs	r3, r3, r4
   19624:	bf8c      	ite	hi
   19626:	2301      	movhi	r3, #1
   19628:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1962c:	e009      	b.n	19642 <done>

0001962e <loop2>:
   1962e:	5d43      	ldrb	r3, [r0, r5]
   19630:	5d4c      	ldrb	r4, [r1, r5]
   19632:	1b1b      	subs	r3, r3, r4
   19634:	d105      	bne.n	19642 <done>
   19636:	f105 0501 	add.w	r5, r5, #1

0001963a <test2>:
   1963a:	4295      	cmp	r5, r2
   1963c:	d1f7      	bne.n	1962e <loop2>
   1963e:	f04f 0300 	mov.w	r3, #0

00019642 <done>:
   19642:	4618      	mov	r0, r3
   19644:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   19646:	4770      	bx	lr

00019648 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   19648:	e001      	b.n	1964e <test1>

0001964a <loop1>:
   1964a:	588b      	ldr	r3, [r1, r2]
   1964c:	5083      	str	r3, [r0, r2]

0001964e <test1>:
   1964e:	3a04      	subs	r2, #4
   19650:	d5fb      	bpl.n	1964a <loop1>
   19652:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   19656:	e001      	b.n	1965c <test2>

00019658 <loop2>:
   19658:	5c8b      	ldrb	r3, [r1, r2]
   1965a:	5483      	strb	r3, [r0, r2]

0001965c <test2>:
   1965c:	3a01      	subs	r2, #1
   1965e:	d5fb      	bpl.n	19658 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   19660:	4770      	bx	lr

00019662 <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   19662:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   19664:	4605      	mov	r5, r0
   19666:	b2c9      	uxtb	r1, r1
   19668:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1966c:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   19670:	18ab      	adds	r3, r5, r2
   19672:	2403      	movs	r4, #3
   19674:	4023      	ands	r3, r4
   19676:	1ad3      	subs	r3, r2, r3
   19678:	d40b      	bmi.n	19692 <memset+0x30>
   1967a:	e001      	b.n	19680 <memset+0x1e>
   1967c:	3a01      	subs	r2, #1
   1967e:	54a9      	strb	r1, [r5, r2]
   19680:	429a      	cmp	r2, r3
   19682:	d1fb      	bne.n	1967c <memset+0x1a>
   19684:	e000      	b.n	19688 <memset+0x26>
   19686:	50a9      	str	r1, [r5, r2]
   19688:	3a04      	subs	r2, #4
   1968a:	d5fc      	bpl.n	19686 <memset+0x24>
   1968c:	3204      	adds	r2, #4
   1968e:	e000      	b.n	19692 <memset+0x30>
   19690:	54a9      	strb	r1, [r5, r2]
   19692:	3a01      	subs	r2, #1
   19694:	d5fc      	bpl.n	19690 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   19696:	bc30      	pop	{r4, r5}
   19698:	4770      	bx	lr

0001969a <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1969a:	b430      	push	{r4, r5}
   1969c:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1969e:	1c55      	adds	r5, r2, #1
   196a0:	7813      	ldrb	r3, [r2, #0]
   196a2:	1c4c      	adds	r4, r1, #1
   196a4:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   196a6:	1a18      	subs	r0, r3, r0
   196a8:	d103      	bne.n	196b2 <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   196aa:	462a      	mov	r2, r5
   196ac:	4621      	mov	r1, r4
		if (d || !ch)
   196ae:	2b00      	cmp	r3, #0
   196b0:	d1f5      	bne.n	1969e <strcmp+0x4>
			break;
	}

	return d;
}
   196b2:	bc30      	pop	{r4, r5}
   196b4:	4770      	bx	lr

000196b6 <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   196b6:	4603      	mov	r3, r0
	while (*ss)
   196b8:	e000      	b.n	196bc <strlen+0x6>
		ss++;
   196ba:	3301      	adds	r3, #1
	while (*ss)
   196bc:	781a      	ldrb	r2, [r3, #0]
   196be:	2a00      	cmp	r2, #0
   196c0:	d1fb      	bne.n	196ba <strlen+0x4>
	return ss - s;
}
   196c2:	1a18      	subs	r0, r3, r0
   196c4:	4770      	bx	lr

000196c6 <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   196c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   196ca:	b082      	sub	sp, #8
   196cc:	e9cd 0100 	strd	r0, r1, [sp]
   196d0:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   196d2:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   196d6:	2401      	movs	r4, #1
   196d8:	2500      	movs	r5, #0
    while (num / d >= p->base)
   196da:	e004      	b.n	196e6 <ui2a+0x20>
        d *= p->base;
   196dc:	fb06 f305 	mul.w	r3, r6, r5
   196e0:	fba4 4506 	umull	r4, r5, r4, r6
   196e4:	441d      	add	r5, r3
    while (num / d >= p->base)
   196e6:	4622      	mov	r2, r4
   196e8:	462b      	mov	r3, r5
   196ea:	e9dd 0100 	ldrd	r0, r1, [sp]
   196ee:	f001 febd 	bl	1b46c <__aeabi_uldivmod>
   196f2:	f899 6003 	ldrb.w	r6, [r9, #3]
   196f6:	2700      	movs	r7, #0
   196f8:	42b9      	cmp	r1, r7
   196fa:	bf08      	it	eq
   196fc:	42b0      	cmpeq	r0, r6
   196fe:	d2ed      	bcs.n	196dc <ui2a+0x16>
    int n = 0;
   19700:	f04f 0a00 	mov.w	sl, #0
   19704:	e007      	b.n	19716 <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19706:	2330      	movs	r3, #48	; 0x30
   19708:	441e      	add	r6, r3
   1970a:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1970e:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19712:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   19716:	ea54 0305 	orrs.w	r3, r4, r5
   1971a:	d02e      	beq.n	1977a <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1971c:	4622      	mov	r2, r4
   1971e:	462b      	mov	r3, r5
   19720:	e9dd 0100 	ldrd	r0, r1, [sp]
   19724:	f001 fea2 	bl	1b46c <__aeabi_uldivmod>
   19728:	4606      	mov	r6, r0
   1972a:	460f      	mov	r7, r1
        num %= d;
   1972c:	4622      	mov	r2, r4
   1972e:	462b      	mov	r3, r5
   19730:	e9dd 0100 	ldrd	r0, r1, [sp]
   19734:	f001 fe9a 	bl	1b46c <__aeabi_uldivmod>
   19738:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1973c:	f899 2003 	ldrb.w	r2, [r9, #3]
   19740:	2300      	movs	r3, #0
   19742:	4620      	mov	r0, r4
   19744:	4629      	mov	r1, r5
   19746:	f001 fe91 	bl	1b46c <__aeabi_uldivmod>
   1974a:	4604      	mov	r4, r0
   1974c:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1974e:	f1ba 0f00 	cmp.w	sl, #0
   19752:	d105      	bne.n	19760 <ui2a+0x9a>
   19754:	ea56 0307 	orrs.w	r3, r6, r7
   19758:	d102      	bne.n	19760 <ui2a+0x9a>
   1975a:	ea54 0305 	orrs.w	r3, r4, r5
   1975e:	d1da      	bne.n	19716 <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   19760:	2f00      	cmp	r7, #0
   19762:	bf08      	it	eq
   19764:	2e0a      	cmpeq	r6, #10
   19766:	d3ce      	bcc.n	19706 <ui2a+0x40>
   19768:	f899 3002 	ldrb.w	r3, [r9, #2]
   1976c:	f013 0f04 	tst.w	r3, #4
   19770:	d001      	beq.n	19776 <ui2a+0xb0>
   19772:	2337      	movs	r3, #55	; 0x37
   19774:	e7c8      	b.n	19708 <ui2a+0x42>
   19776:	2357      	movs	r3, #87	; 0x57
   19778:	e7c6      	b.n	19708 <ui2a+0x42>
        }
    }
    *bf = 0;
   1977a:	2300      	movs	r3, #0
   1977c:	f888 3000 	strb.w	r3, [r8]
}
   19780:	b002      	add	sp, #8
   19782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00019786 <i2a>:

static void i2a(long long int num, struct param *p)
{
   19786:	b508      	push	{r3, lr}
    if (num < 0) {
   19788:	2800      	cmp	r0, #0
   1978a:	f171 0300 	sbcs.w	r3, r1, #0
   1978e:	db02      	blt.n	19796 <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   19790:	f7ff ff99 	bl	196c6 <ui2a>
}
   19794:	bd08      	pop	{r3, pc}
        num = -num;
   19796:	4240      	negs	r0, r0
   19798:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1979c:	7893      	ldrb	r3, [r2, #2]
   1979e:	f043 0301 	orr.w	r3, r3, #1
   197a2:	7093      	strb	r3, [r2, #2]
   197a4:	e7f4      	b.n	19790 <i2a+0xa>

000197a6 <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   197a6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   197aa:	b2db      	uxtb	r3, r3
   197ac:	2b09      	cmp	r3, #9
   197ae:	d90b      	bls.n	197c8 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   197b0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   197b4:	b2db      	uxtb	r3, r3
   197b6:	2b05      	cmp	r3, #5
   197b8:	d908      	bls.n	197cc <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   197ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   197be:	b2db      	uxtb	r3, r3
   197c0:	2b05      	cmp	r3, #5
   197c2:	d805      	bhi.n	197d0 <a2d+0x2a>
        return ch - 'A' + 10;
   197c4:	3837      	subs	r0, #55	; 0x37
   197c6:	4770      	bx	lr
        return ch - '0';
   197c8:	3830      	subs	r0, #48	; 0x30
   197ca:	4770      	bx	lr
        return ch - 'a' + 10;
   197cc:	3857      	subs	r0, #87	; 0x57
   197ce:	4770      	bx	lr
    else
        return -1;
   197d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   197d4:	4770      	bx	lr

000197d6 <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   197d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   197da:	4605      	mov	r5, r0
   197dc:	4688      	mov	r8, r1
   197de:	4617      	mov	r7, r2
   197e0:	4699      	mov	r9, r3
    const char *p = *src;
   197e2:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   197e4:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   197e6:	4628      	mov	r0, r5
   197e8:	f7ff ffdd 	bl	197a6 <a2d>
   197ec:	2800      	cmp	r0, #0
   197ee:	db06      	blt.n	197fe <a2i+0x28>
        if (digit > base)
   197f0:	42b8      	cmp	r0, r7
   197f2:	dc04      	bgt.n	197fe <a2i+0x28>
            break;
        num = num * base + digit;
   197f4:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   197f8:	7825      	ldrb	r5, [r4, #0]
   197fa:	3401      	adds	r4, #1
   197fc:	e7f3      	b.n	197e6 <a2i+0x10>
    }
    *src = p;
   197fe:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   19802:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   19806:	4628      	mov	r0, r5
   19808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001980c <putf>:

static int putf(FILE *putp, char c)
{
   1980c:	b500      	push	{lr}
   1980e:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   19810:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   19814:	6803      	ldr	r3, [r0, #0]
   19816:	681b      	ldr	r3, [r3, #0]
   19818:	b14b      	cbz	r3, 1982e <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1981a:	2201      	movs	r2, #1
   1981c:	f10d 0107 	add.w	r1, sp, #7
   19820:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   19822:	2801      	cmp	r0, #1
   19824:	d005      	beq.n	19832 <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   19826:	2000      	movs	r0, #0
    else
        return 1;
}
   19828:	b003      	add	sp, #12
   1982a:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1982e:	2000      	movs	r0, #0
   19830:	e7fa      	b.n	19828 <putf+0x1c>
        return 1;
   19832:	2001      	movs	r0, #1
   19834:	e7f8      	b.n	19828 <putf+0x1c>
	...

00019838 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   19838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1983c:	4606      	mov	r6, r0
   1983e:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   19840:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   19842:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   19844:	e001      	b.n	1984a <putchw+0x12>
        n--;
   19846:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   19848:	4613      	mov	r3, r2
   1984a:	1c5a      	adds	r2, r3, #1
   1984c:	781b      	ldrb	r3, [r3, #0]
   1984e:	b10b      	cbz	r3, 19854 <putchw+0x1c>
   19850:	2c00      	cmp	r4, #0
   19852:	dcf8      	bgt.n	19846 <putchw+0xe>
    if (p->sign)
   19854:	78bb      	ldrb	r3, [r7, #2]
   19856:	f013 0f01 	tst.w	r3, #1
   1985a:	d000      	beq.n	1985e <putchw+0x26>
        n--;
   1985c:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1985e:	887b      	ldrh	r3, [r7, #2]
   19860:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   19864:	b29b      	uxth	r3, r3
   19866:	f241 0202 	movw	r2, #4098	; 0x1002
   1986a:	4293      	cmp	r3, r2
   1986c:	d01c      	beq.n	198a8 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1986e:	f640 0202 	movw	r2, #2050	; 0x802
   19872:	4293      	cmp	r3, r2
   19874:	d01a      	beq.n	198ac <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   19876:	683b      	ldr	r3, [r7, #0]
   19878:	4d35      	ldr	r5, [pc, #212]	; (19950 <putchw+0x118>)
   1987a:	401d      	ands	r5, r3
   1987c:	b1f5      	cbz	r5, 198bc <putchw+0x84>
    unsigned written = 0;
   1987e:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   19880:	78bb      	ldrb	r3, [r7, #2]
   19882:	f013 0f01 	tst.w	r3, #1
   19886:	d11f      	bne.n	198c8 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   19888:	887b      	ldrh	r3, [r7, #2]
   1988a:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1988e:	b29b      	uxth	r3, r3
   19890:	f241 0202 	movw	r2, #4098	; 0x1002
   19894:	4293      	cmp	r3, r2
   19896:	d01d      	beq.n	198d4 <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   19898:	f640 0202 	movw	r2, #2050	; 0x802
   1989c:	4293      	cmp	r3, r2
   1989e:	d02a      	beq.n	198f6 <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   198a0:	787b      	ldrb	r3, [r7, #1]
   198a2:	bba3      	cbnz	r3, 1990e <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   198a4:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   198a6:	e03d      	b.n	19924 <putchw+0xec>
        n -= 2;
   198a8:	3c02      	subs	r4, #2
   198aa:	e7e4      	b.n	19876 <putchw+0x3e>
        n--;
   198ac:	3c01      	subs	r4, #1
   198ae:	e7e2      	b.n	19876 <putchw+0x3e>
            written += putf(putp, ' ');
   198b0:	2120      	movs	r1, #32
   198b2:	4630      	mov	r0, r6
   198b4:	f7ff ffaa 	bl	1980c <putf>
   198b8:	4405      	add	r5, r0
        while (n-- > 0)
   198ba:	4644      	mov	r4, r8
   198bc:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   198c0:	2c00      	cmp	r4, #0
   198c2:	dcf5      	bgt.n	198b0 <putchw+0x78>
   198c4:	4644      	mov	r4, r8
   198c6:	e7db      	b.n	19880 <putchw+0x48>
        written += putf(putp, '-');
   198c8:	212d      	movs	r1, #45	; 0x2d
   198ca:	4630      	mov	r0, r6
   198cc:	f7ff ff9e 	bl	1980c <putf>
   198d0:	4405      	add	r5, r0
   198d2:	e7d9      	b.n	19888 <putchw+0x50>
        written += putf(putp, '0');
   198d4:	2130      	movs	r1, #48	; 0x30
   198d6:	4630      	mov	r0, r6
   198d8:	f7ff ff98 	bl	1980c <putf>
   198dc:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   198de:	78bb      	ldrb	r3, [r7, #2]
   198e0:	f013 0f04 	tst.w	r3, #4
   198e4:	d005      	beq.n	198f2 <putchw+0xba>
   198e6:	2158      	movs	r1, #88	; 0x58
   198e8:	4630      	mov	r0, r6
   198ea:	f7ff ff8f 	bl	1980c <putf>
   198ee:	4405      	add	r5, r0
   198f0:	e7d6      	b.n	198a0 <putchw+0x68>
   198f2:	2178      	movs	r1, #120	; 0x78
   198f4:	e7f8      	b.n	198e8 <putchw+0xb0>
        written += putf(putp, '0');
   198f6:	2130      	movs	r1, #48	; 0x30
   198f8:	4630      	mov	r0, r6
   198fa:	f7ff ff87 	bl	1980c <putf>
   198fe:	4405      	add	r5, r0
   19900:	e7ce      	b.n	198a0 <putchw+0x68>
            written += putf(putp, '0');
   19902:	2130      	movs	r1, #48	; 0x30
   19904:	4630      	mov	r0, r6
   19906:	f7ff ff81 	bl	1980c <putf>
   1990a:	4405      	add	r5, r0
        while (n-- > 0)
   1990c:	4644      	mov	r4, r8
   1990e:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   19912:	2c00      	cmp	r4, #0
   19914:	dcf5      	bgt.n	19902 <putchw+0xca>
   19916:	4644      	mov	r4, r8
   19918:	e7c4      	b.n	198a4 <putchw+0x6c>
        written += putf(putp, ch);
   1991a:	4630      	mov	r0, r6
   1991c:	f7ff ff76 	bl	1980c <putf>
   19920:	4405      	add	r5, r0
    while ((ch = *bf++))
   19922:	4643      	mov	r3, r8
   19924:	f103 0801 	add.w	r8, r3, #1
   19928:	7819      	ldrb	r1, [r3, #0]
   1992a:	2900      	cmp	r1, #0
   1992c:	d1f5      	bne.n	1991a <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1992e:	78bb      	ldrb	r3, [r7, #2]
   19930:	f013 0f08 	tst.w	r3, #8
   19934:	d106      	bne.n	19944 <putchw+0x10c>
   19936:	e008      	b.n	1994a <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   19938:	2120      	movs	r1, #32
   1993a:	4630      	mov	r0, r6
   1993c:	f7ff ff66 	bl	1980c <putf>
   19940:	4405      	add	r5, r0
        while (n-- > 0)
   19942:	463c      	mov	r4, r7
   19944:	1e67      	subs	r7, r4, #1
   19946:	2c00      	cmp	r4, #0
   19948:	dcf6      	bgt.n	19938 <putchw+0x100>
    }
    
    return written;
}
   1994a:	4628      	mov	r0, r5
   1994c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19950:	0008ff00 	.word	0x0008ff00

00019954 <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   19954:	b160      	cbz	r0, 19970 <intarg+0x1c>
   19956:	2801      	cmp	r0, #1
   19958:	d017      	beq.n	1998a <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1995a:	bb19      	cbnz	r1, 199a4 <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1995c:	6813      	ldr	r3, [r2, #0]
   1995e:	3307      	adds	r3, #7
   19960:	f023 0307 	bic.w	r3, r3, #7
   19964:	f103 0108 	add.w	r1, r3, #8
   19968:	6011      	str	r1, [r2, #0]
   1996a:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1996e:	4770      	bx	lr
        if (sign) {
   19970:	b129      	cbz	r1, 1997e <intarg+0x2a>
            val = va_arg(*va, int);
   19972:	6813      	ldr	r3, [r2, #0]
   19974:	1d19      	adds	r1, r3, #4
   19976:	6011      	str	r1, [r2, #0]
   19978:	6818      	ldr	r0, [r3, #0]
   1997a:	17c1      	asrs	r1, r0, #31
   1997c:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1997e:	6813      	ldr	r3, [r2, #0]
   19980:	1d19      	adds	r1, r3, #4
   19982:	6011      	str	r1, [r2, #0]
   19984:	6818      	ldr	r0, [r3, #0]
   19986:	2100      	movs	r1, #0
   19988:	4770      	bx	lr
        if (sign) {
   1998a:	b129      	cbz	r1, 19998 <intarg+0x44>
            val = va_arg(*va, long);
   1998c:	6813      	ldr	r3, [r2, #0]
   1998e:	1d19      	adds	r1, r3, #4
   19990:	6011      	str	r1, [r2, #0]
   19992:	6818      	ldr	r0, [r3, #0]
   19994:	17c1      	asrs	r1, r0, #31
   19996:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   19998:	6813      	ldr	r3, [r2, #0]
   1999a:	1d19      	adds	r1, r3, #4
   1999c:	6011      	str	r1, [r2, #0]
   1999e:	6818      	ldr	r0, [r3, #0]
   199a0:	2100      	movs	r1, #0
   199a2:	4770      	bx	lr
            val = va_arg(*va, long long);
   199a4:	6813      	ldr	r3, [r2, #0]
   199a6:	3307      	adds	r3, #7
   199a8:	f023 0307 	bic.w	r3, r3, #7
   199ac:	f103 0108 	add.w	r1, r3, #8
   199b0:	6011      	str	r1, [r2, #0]
   199b2:	e9d3 0100 	ldrd	r0, r1, [r3]
   199b6:	4770      	bx	lr

000199b8 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   199b8:	b570      	push	{r4, r5, r6, lr}
   199ba:	b08a      	sub	sp, #40	; 0x28
   199bc:	4605      	mov	r5, r0
   199be:	9101      	str	r1, [sp, #4]
   199c0:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   199c2:	ab02      	add	r3, sp, #8
   199c4:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   199c6:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   199c8:	9b01      	ldr	r3, [sp, #4]
   199ca:	1c5a      	adds	r2, r3, #1
   199cc:	9201      	str	r2, [sp, #4]
   199ce:	7819      	ldrb	r1, [r3, #0]
   199d0:	2900      	cmp	r1, #0
   199d2:	f000 811c 	beq.w	19c0e <tfp_format+0x256>
        if (ch != '%') {
   199d6:	2925      	cmp	r1, #37	; 0x25
   199d8:	d004      	beq.n	199e4 <tfp_format+0x2c>
            written += putf(putp, ch);
   199da:	4628      	mov	r0, r5
   199dc:	f7ff ff16 	bl	1980c <putf>
   199e0:	4404      	add	r4, r0
   199e2:	e7f1      	b.n	199c8 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   199e4:	2200      	movs	r2, #0
   199e6:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   199ea:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   199ee:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   199f2:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   199f6:	f362 0382 	bfi	r3, r2, #2, #1
   199fa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   199fe:	9b01      	ldr	r3, [sp, #4]
   19a00:	1c5a      	adds	r2, r3, #1
   19a02:	9201      	str	r2, [sp, #4]
   19a04:	7818      	ldrb	r0, [r3, #0]
   19a06:	b128      	cbz	r0, 19a14 <tfp_format+0x5c>
                switch (ch) {
   19a08:	282d      	cmp	r0, #45	; 0x2d
   19a0a:	d04e      	beq.n	19aaa <tfp_format+0xf2>
   19a0c:	2830      	cmp	r0, #48	; 0x30
   19a0e:	d03c      	beq.n	19a8a <tfp_format+0xd2>
   19a10:	2823      	cmp	r0, #35	; 0x23
   19a12:	d043      	beq.n	19a9c <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   19a14:	282a      	cmp	r0, #42	; 0x2a
   19a16:	d052      	beq.n	19abe <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   19a18:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19a1c:	b2db      	uxtb	r3, r3
   19a1e:	2b09      	cmp	r3, #9
   19a20:	d961      	bls.n	19ae6 <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   19a22:	286c      	cmp	r0, #108	; 0x6c
   19a24:	d065      	beq.n	19af2 <tfp_format+0x13a>
            lng = 0;
   19a26:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   19a28:	287a      	cmp	r0, #122	; 0x7a
   19a2a:	d06f      	beq.n	19b0c <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   19a2c:	2869      	cmp	r0, #105	; 0x69
   19a2e:	f000 808e 	beq.w	19b4e <tfp_format+0x196>
   19a32:	d970      	bls.n	19b16 <tfp_format+0x15e>
   19a34:	2873      	cmp	r0, #115	; 0x73
   19a36:	f000 80dd 	beq.w	19bf4 <tfp_format+0x23c>
   19a3a:	f200 8099 	bhi.w	19b70 <tfp_format+0x1b8>
   19a3e:	286f      	cmp	r0, #111	; 0x6f
   19a40:	f000 80c7 	beq.w	19bd2 <tfp_format+0x21a>
   19a44:	2870      	cmp	r0, #112	; 0x70
   19a46:	d1bf      	bne.n	199c8 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   19a48:	9b00      	ldr	r3, [sp, #0]
   19a4a:	1d1a      	adds	r2, r3, #4
   19a4c:	9200      	str	r2, [sp, #0]
   19a4e:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   19a50:	2310      	movs	r3, #16
   19a52:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   19a56:	aa08      	add	r2, sp, #32
   19a58:	2100      	movs	r1, #0
   19a5a:	f7ff fe34 	bl	196c6 <ui2a>
                p.width = 2 * sizeof(void*);
   19a5e:	2308      	movs	r3, #8
   19a60:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   19a64:	2301      	movs	r3, #1
   19a66:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   19a6a:	2130      	movs	r1, #48	; 0x30
   19a6c:	4628      	mov	r0, r5
   19a6e:	f7ff fecd 	bl	1980c <putf>
   19a72:	4404      	add	r4, r0
                written += putf(putp, 'x');
   19a74:	2178      	movs	r1, #120	; 0x78
   19a76:	4628      	mov	r0, r5
   19a78:	f7ff fec8 	bl	1980c <putf>
   19a7c:	4404      	add	r4, r0
                written += putchw(putp, &p);
   19a7e:	a908      	add	r1, sp, #32
   19a80:	4628      	mov	r0, r5
   19a82:	f7ff fed9 	bl	19838 <putchw>
   19a86:	4404      	add	r4, r0
                break;
   19a88:	e79e      	b.n	199c8 <tfp_format+0x10>
                    if (!p.left) {
   19a8a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19a8e:	f013 0f08 	tst.w	r3, #8
   19a92:	d1b4      	bne.n	199fe <tfp_format+0x46>
                        p.lz = 1;
   19a94:	2301      	movs	r3, #1
   19a96:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19a9a:	e7b0      	b.n	199fe <tfp_format+0x46>
                    p.alt = 1;
   19a9c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19aa0:	f043 0302 	orr.w	r3, r3, #2
   19aa4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   19aa8:	e7a9      	b.n	199fe <tfp_format+0x46>
                    p.left = 1;
   19aaa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   19aae:	f043 0308 	orr.w	r3, r3, #8
   19ab2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   19ab6:	2300      	movs	r3, #0
   19ab8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   19abc:	e79f      	b.n	199fe <tfp_format+0x46>
                i = intarg(0, 1, &va);
   19abe:	466a      	mov	r2, sp
   19ac0:	2101      	movs	r1, #1
   19ac2:	2000      	movs	r0, #0
   19ac4:	f7ff ff46 	bl	19954 <intarg>
                if (i > UCHAR_MAX) {
   19ac8:	28ff      	cmp	r0, #255	; 0xff
   19aca:	dd07      	ble.n	19adc <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   19acc:	23ff      	movs	r3, #255	; 0xff
   19ace:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   19ad2:	9b01      	ldr	r3, [sp, #4]
   19ad4:	1c5a      	adds	r2, r3, #1
   19ad6:	9201      	str	r2, [sp, #4]
   19ad8:	7818      	ldrb	r0, [r3, #0]
   19ada:	e7a2      	b.n	19a22 <tfp_format+0x6a>
                } else if (i > 0) {
   19adc:	2800      	cmp	r0, #0
   19ade:	ddf8      	ble.n	19ad2 <tfp_format+0x11a>
                    p.width = i;
   19ae0:	f88d 0020 	strb.w	r0, [sp, #32]
   19ae4:	e7f5      	b.n	19ad2 <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   19ae6:	ab08      	add	r3, sp, #32
   19ae8:	220a      	movs	r2, #10
   19aea:	a901      	add	r1, sp, #4
   19aec:	f7ff fe73 	bl	197d6 <a2i>
   19af0:	e797      	b.n	19a22 <tfp_format+0x6a>
                ch = *(fmt++);
   19af2:	9b01      	ldr	r3, [sp, #4]
   19af4:	1c5a      	adds	r2, r3, #1
   19af6:	9201      	str	r2, [sp, #4]
   19af8:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   19afa:	286c      	cmp	r0, #108	; 0x6c
   19afc:	d001      	beq.n	19b02 <tfp_format+0x14a>
                lng = 1;
   19afe:	2601      	movs	r6, #1
   19b00:	e792      	b.n	19a28 <tfp_format+0x70>
                    ch = *(fmt++);
   19b02:	1c9a      	adds	r2, r3, #2
   19b04:	9201      	str	r2, [sp, #4]
   19b06:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   19b08:	2602      	movs	r6, #2
   19b0a:	e78d      	b.n	19a28 <tfp_format+0x70>
                ch = *(fmt++);
   19b0c:	9b01      	ldr	r3, [sp, #4]
   19b0e:	1c5a      	adds	r2, r3, #1
   19b10:	9201      	str	r2, [sp, #4]
   19b12:	7818      	ldrb	r0, [r3, #0]
   19b14:	e78a      	b.n	19a2c <tfp_format+0x74>
            switch (ch) {
   19b16:	2858      	cmp	r0, #88	; 0x58
   19b18:	d040      	beq.n	19b9c <tfp_format+0x1e4>
   19b1a:	d80a      	bhi.n	19b32 <tfp_format+0x17a>
   19b1c:	2800      	cmp	r0, #0
   19b1e:	d076      	beq.n	19c0e <tfp_format+0x256>
   19b20:	2825      	cmp	r0, #37	; 0x25
   19b22:	f47f af51 	bne.w	199c8 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   19b26:	4601      	mov	r1, r0
   19b28:	4628      	mov	r0, r5
   19b2a:	f7ff fe6f 	bl	1980c <putf>
   19b2e:	4404      	add	r4, r0
                break;
   19b30:	e74a      	b.n	199c8 <tfp_format+0x10>
            switch (ch) {
   19b32:	2863      	cmp	r0, #99	; 0x63
   19b34:	d108      	bne.n	19b48 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   19b36:	9b00      	ldr	r3, [sp, #0]
   19b38:	1d1a      	adds	r2, r3, #4
   19b3a:	9200      	str	r2, [sp, #0]
   19b3c:	7819      	ldrb	r1, [r3, #0]
   19b3e:	4628      	mov	r0, r5
   19b40:	f7ff fe64 	bl	1980c <putf>
   19b44:	4404      	add	r4, r0
                break;
   19b46:	e73f      	b.n	199c8 <tfp_format+0x10>
            switch (ch) {
   19b48:	2864      	cmp	r0, #100	; 0x64
   19b4a:	f47f af3d 	bne.w	199c8 <tfp_format+0x10>
                p.base = 10;
   19b4e:	230a      	movs	r3, #10
   19b50:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   19b54:	466a      	mov	r2, sp
   19b56:	2101      	movs	r1, #1
   19b58:	4630      	mov	r0, r6
   19b5a:	f7ff fefb 	bl	19954 <intarg>
   19b5e:	aa08      	add	r2, sp, #32
   19b60:	f7ff fe11 	bl	19786 <i2a>
                written += putchw(putp, &p);
   19b64:	a908      	add	r1, sp, #32
   19b66:	4628      	mov	r0, r5
   19b68:	f7ff fe66 	bl	19838 <putchw>
   19b6c:	4404      	add	r4, r0
                break;
   19b6e:	e72b      	b.n	199c8 <tfp_format+0x10>
            switch (ch) {
   19b70:	2875      	cmp	r0, #117	; 0x75
   19b72:	d110      	bne.n	19b96 <tfp_format+0x1de>
                p.base = 10;
   19b74:	230a      	movs	r3, #10
   19b76:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19b7a:	466a      	mov	r2, sp
   19b7c:	2100      	movs	r1, #0
   19b7e:	4630      	mov	r0, r6
   19b80:	f7ff fee8 	bl	19954 <intarg>
   19b84:	aa08      	add	r2, sp, #32
   19b86:	f7ff fd9e 	bl	196c6 <ui2a>
                written += putchw(putp, &p);
   19b8a:	a908      	add	r1, sp, #32
   19b8c:	4628      	mov	r0, r5
   19b8e:	f7ff fe53 	bl	19838 <putchw>
   19b92:	4404      	add	r4, r0
                break;
   19b94:	e718      	b.n	199c8 <tfp_format+0x10>
            switch (ch) {
   19b96:	2878      	cmp	r0, #120	; 0x78
   19b98:	f47f af16 	bne.w	199c8 <tfp_format+0x10>
                p.base = 16;
   19b9c:	2310      	movs	r3, #16
   19b9e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   19ba2:	2858      	cmp	r0, #88	; 0x58
   19ba4:	bf14      	ite	ne
   19ba6:	2300      	movne	r3, #0
   19ba8:	2301      	moveq	r3, #1
   19baa:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   19bae:	f363 0282 	bfi	r2, r3, #2, #1
   19bb2:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   19bb6:	466a      	mov	r2, sp
   19bb8:	2100      	movs	r1, #0
   19bba:	4630      	mov	r0, r6
   19bbc:	f7ff feca 	bl	19954 <intarg>
   19bc0:	aa08      	add	r2, sp, #32
   19bc2:	f7ff fd80 	bl	196c6 <ui2a>
                written += putchw(putp, &p);
   19bc6:	a908      	add	r1, sp, #32
   19bc8:	4628      	mov	r0, r5
   19bca:	f7ff fe35 	bl	19838 <putchw>
   19bce:	4404      	add	r4, r0
                break;
   19bd0:	e6fa      	b.n	199c8 <tfp_format+0x10>
                p.base = 8;
   19bd2:	2308      	movs	r3, #8
   19bd4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   19bd8:	466a      	mov	r2, sp
   19bda:	2100      	movs	r1, #0
   19bdc:	4630      	mov	r0, r6
   19bde:	f7ff feb9 	bl	19954 <intarg>
   19be2:	aa08      	add	r2, sp, #32
   19be4:	f7ff fd6f 	bl	196c6 <ui2a>
                written += putchw(putp, &p);
   19be8:	a908      	add	r1, sp, #32
   19bea:	4628      	mov	r0, r5
   19bec:	f7ff fe24 	bl	19838 <putchw>
   19bf0:	4404      	add	r4, r0
                break;
   19bf2:	e6e9      	b.n	199c8 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   19bf4:	9b00      	ldr	r3, [sp, #0]
   19bf6:	1d1a      	adds	r2, r3, #4
   19bf8:	9200      	str	r2, [sp, #0]
   19bfa:	681b      	ldr	r3, [r3, #0]
   19bfc:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   19bfe:	a908      	add	r1, sp, #32
   19c00:	4628      	mov	r0, r5
   19c02:	f7ff fe19 	bl	19838 <putchw>
   19c06:	4404      	add	r4, r0
                p.bf = bf;
   19c08:	ab02      	add	r3, sp, #8
   19c0a:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   19c0c:	e6dc      	b.n	199c8 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   19c0e:	4620      	mov	r0, r4
   19c10:	b00a      	add	sp, #40	; 0x28
   19c12:	bd70      	pop	{r4, r5, r6, pc}

00019c14 <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   19c14:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   19c16:	f7ff fecf 	bl	199b8 <tfp_format>
}
   19c1a:	bd08      	pop	{r3, pc}

00019c1c <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   19c1c:	b40f      	push	{r0, r1, r2, r3}
   19c1e:	b500      	push	{lr}
   19c20:	b083      	sub	sp, #12
   19c22:	aa04      	add	r2, sp, #16
   19c24:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   19c28:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   19c2a:	4b04      	ldr	r3, [pc, #16]	; (19c3c <printf+0x20>)
   19c2c:	6818      	ldr	r0, [r3, #0]
   19c2e:	f7ff fff1 	bl	19c14 <vfprintf>
    va_end(va);
    return rv;
}
   19c32:	b003      	add	sp, #12
   19c34:	f85d eb04 	ldr.w	lr, [sp], #4
   19c38:	b004      	add	sp, #16
   19c3a:	4770      	bx	lr
   19c3c:	0001f40c 	.word	0x0001f40c

00019c40 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   19c40:	b5f0      	push	{r4, r5, r6, r7, lr}
   19c42:	b085      	sub	sp, #20
   19c44:	4605      	mov	r5, r0
   19c46:	460c      	mov	r4, r1
   19c48:	4616      	mov	r6, r2
   19c4a:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   19c4c:	460a      	mov	r2, r1
   19c4e:	4601      	mov	r1, r0
   19c50:	4668      	mov	r0, sp
   19c52:	f000 f835 	bl	19cc0 <fmemopen_w>
    tfp_format(f, fmt, va);
   19c56:	463a      	mov	r2, r7
   19c58:	4631      	mov	r1, r6
   19c5a:	f7ff fead 	bl	199b8 <tfp_format>
    if (size > 0) {
   19c5e:	b12c      	cbz	r4, 19c6c <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   19c60:	9b02      	ldr	r3, [sp, #8]
   19c62:	42a3      	cmp	r3, r4
   19c64:	d305      	bcc.n	19c72 <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   19c66:	3c01      	subs	r4, #1
   19c68:	2300      	movs	r3, #0
   19c6a:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   19c6c:	9802      	ldr	r0, [sp, #8]
   19c6e:	b005      	add	sp, #20
   19c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   19c72:	9b01      	ldr	r3, [sp, #4]
   19c74:	2200      	movs	r2, #0
   19c76:	701a      	strb	r2, [r3, #0]
   19c78:	e7f8      	b.n	19c6c <vsnprintf+0x2c>
	...

00019c7c <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   19c7c:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   19c7e:	460a      	mov	r2, r1
   19c80:	4601      	mov	r1, r0
   19c82:	4b02      	ldr	r3, [pc, #8]	; (19c8c <vprintf+0x10>)
   19c84:	6818      	ldr	r0, [r3, #0]
   19c86:	f7ff ffc5 	bl	19c14 <vfprintf>
}
   19c8a:	bd08      	pop	{r3, pc}
   19c8c:	0001f40c 	.word	0x0001f40c

00019c90 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   19c90:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   19c92:	2500      	movs	r5, #0
    
    while (n--)
   19c94:	e000      	b.n	19c98 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   19c96:	4622      	mov	r2, r4
    while (n--)
   19c98:	1e54      	subs	r4, r2, #1
   19c9a:	b16a      	cbz	r2, 19cb8 <memfile_write+0x28>
        f->bytes_written++;
   19c9c:	6883      	ldr	r3, [r0, #8]
   19c9e:	3301      	adds	r3, #1
   19ca0:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   19ca2:	68c2      	ldr	r2, [r0, #12]
   19ca4:	4293      	cmp	r3, r2
   19ca6:	d8f6      	bhi.n	19c96 <memfile_write+0x6>
            *f->buffer++ = *bp++;
   19ca8:	6843      	ldr	r3, [r0, #4]
   19caa:	1c5a      	adds	r2, r3, #1
   19cac:	6042      	str	r2, [r0, #4]
   19cae:	780a      	ldrb	r2, [r1, #0]
   19cb0:	701a      	strb	r2, [r3, #0]
            i++;
   19cb2:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   19cb4:	3101      	adds	r1, #1
   19cb6:	e7ee      	b.n	19c96 <memfile_write+0x6>
        }
    }
    
    return i;
}
   19cb8:	4628      	mov	r0, r5
   19cba:	bc30      	pop	{r4, r5}
   19cbc:	4770      	bx	lr
	...

00019cc0 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   19cc0:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   19cc2:	4c04      	ldr	r4, [pc, #16]	; (19cd4 <fmemopen_w+0x14>)
   19cc4:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   19cc6:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   19cc8:	2100      	movs	r1, #0
   19cca:	6081      	str	r1, [r0, #8]
    storage->size = size;
   19ccc:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   19cce:	f85d 4b04 	ldr.w	r4, [sp], #4
   19cd2:	4770      	bx	lr
   19cd4:	0001f404 	.word	0x0001f404

00019cd8 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   19cd8:	2000      	movs	r0, #0
   19cda:	4770      	bx	lr

00019cdc <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   19cdc:	b510      	push	{r4, lr}
   19cde:	4608      	mov	r0, r1
   19ce0:	4614      	mov	r4, r2
    console_write(bp, n);
   19ce2:	4611      	mov	r1, r2
   19ce4:	f7fd f9b8 	bl	17058 <console_write>
    return n;
}
   19ce8:	4620      	mov	r0, r4
   19cea:	bd10      	pop	{r4, pc}

00019cec <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   19cec:	b508      	push	{r3, lr}
    sysinit();
   19cee:	f7fd fa1b 	bl	17128 <sysinit_start>
   19cf2:	f000 f81b 	bl	19d2c <sysinit_app>
   19cf6:	f7fd fa1d 	bl	17134 <sysinit_end>
}
   19cfa:	bd08      	pop	{r3, pc}

00019cfc <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   19cfc:	b570      	push	{r4, r5, r6, lr}
   19cfe:	b082      	sub	sp, #8
   19d00:	460c      	mov	r4, r1
   19d02:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   19d04:	b29d      	uxth	r5, r3
   19d06:	9b07      	ldr	r3, [sp, #28]
   19d08:	9300      	str	r3, [sp, #0]
   19d0a:	4603      	mov	r3, r0
   19d0c:	9a06      	ldr	r2, [sp, #24]
   19d0e:	4629      	mov	r1, r5
   19d10:	4620      	mov	r0, r4
   19d12:	f7fe fdeb 	bl	188ec <os_mempool_init>
    if (rc != 0) {
   19d16:	b108      	cbz	r0, 19d1c <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   19d18:	b002      	add	sp, #8
   19d1a:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   19d1c:	462b      	mov	r3, r5
   19d1e:	9a06      	ldr	r2, [sp, #24]
   19d20:	b292      	uxth	r2, r2
   19d22:	4621      	mov	r1, r4
   19d24:	4630      	mov	r0, r6
   19d26:	f7fe fc96 	bl	18656 <os_mbuf_pool_init>
   19d2a:	e7f5      	b.n	19d18 <mem_init_mbuf_pool+0x1c>

00019d2c <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   19d2c:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   19d2e:	f7fe f9f3 	bl	18118 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   19d32:	f001 f985 	bl	1b040 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   19d36:	f7fd f9a3 	bl	17080 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   19d3a:	f001 fac7 	bl	1b2cc <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   19d3e:	f001 f9b7 	bl	1b0b0 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   19d42:	f001 f8e1 	bl	1af08 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   19d46:	f001 f8f1 	bl	1af2c <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   19d4a:	f001 f8f0 	bl	1af2e <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   19d4e:	f001 f8ef 	bl	1af30 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   19d52:	f001 f8ee 	bl	1af32 <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   19d56:	f001 f8ed 	bl	1af34 <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   19d5a:	f000 fbd1 	bl	1a500 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   19d5e:	f000 fd1f 	bl	1a7a0 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   19d62:	f000 ff3d 	bl	1abe0 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   19d66:	f000 feb3 	bl	1aad0 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   19d6a:	f000 fe3d 	bl	1a9e8 <init_sensor_coap>
}
   19d6e:	bd08      	pop	{r3, pc}

00019d70 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   19d70:	b908      	cbnz	r0, 19d76 <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   19d72:	4802      	ldr	r0, [pc, #8]	; (19d7c <hal_bsp_flash_dev+0xc>)
   19d74:	4770      	bx	lr
    }

    return NULL;
   19d76:	2000      	movs	r0, #0
}
   19d78:	4770      	bx	lr
   19d7a:	bf00      	nop
   19d7c:	0001f410 	.word	0x0001f410

00019d80 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   19d80:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   19d82:	f7ee fa1d 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   19d86:	f000 fbb3 	bl	1a4f0 <nrf52_periph_create>
}
   19d8a:	bd08      	pop	{r3, pc}

00019d8c <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   19d8c:	2300      	movs	r3, #0
   19d8e:	4a07      	ldr	r2, [pc, #28]	; (19dac <nrf52k_flash_wait_ready+0x20>)
   19d90:	4293      	cmp	r3, r2
   19d92:	dc06      	bgt.n	19da2 <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   19d94:	4a06      	ldr	r2, [pc, #24]	; (19db0 <nrf52k_flash_wait_ready+0x24>)
   19d96:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   19d9a:	2a01      	cmp	r2, #1
   19d9c:	d004      	beq.n	19da8 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   19d9e:	3301      	adds	r3, #1
   19da0:	e7f5      	b.n	19d8e <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   19da2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19da6:	4770      	bx	lr
            return 0;
   19da8:	2000      	movs	r0, #0
}
   19daa:	4770      	bx	lr
   19dac:	0001869f 	.word	0x0001869f
   19db0:	4001e000 	.word	0x4001e000

00019db4 <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   19db4:	b538      	push	{r3, r4, r5, lr}
   19db6:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   19db8:	f7ff ffe8 	bl	19d8c <nrf52k_flash_wait_ready>
   19dbc:	b9f0      	cbnz	r0, 19dfc <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19dbe:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19dc2:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   19dc4:	4b0f      	ldr	r3, [pc, #60]	; (19e04 <nrf52k_flash_erase_sector+0x50>)
   19dc6:	2202      	movs	r2, #2
   19dc8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   19dcc:	f7ff ffde 	bl	19d8c <nrf52k_flash_wait_ready>
   19dd0:	b148      	cbz	r0, 19de6 <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   19dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   19dd6:	4a0b      	ldr	r2, [pc, #44]	; (19e04 <nrf52k_flash_erase_sector+0x50>)
   19dd8:	2100      	movs	r1, #0
   19dda:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19dde:	b904      	cbnz	r4, 19de2 <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   19de0:	b662      	cpsie	i
    return rc;
}
   19de2:	4618      	mov	r0, r3
   19de4:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   19de6:	4b07      	ldr	r3, [pc, #28]	; (19e04 <nrf52k_flash_erase_sector+0x50>)
   19de8:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   19dec:	f7ff ffce 	bl	19d8c <nrf52k_flash_wait_ready>
   19df0:	4603      	mov	r3, r0
   19df2:	2800      	cmp	r0, #0
   19df4:	d0ef      	beq.n	19dd6 <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   19df6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19dfa:	e7ec      	b.n	19dd6 <nrf52k_flash_erase_sector+0x22>
        return -1;
   19dfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19e00:	e7ef      	b.n	19de2 <nrf52k_flash_erase_sector+0x2e>
   19e02:	bf00      	nop
   19e04:	4001e000 	.word	0x4001e000

00019e08 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   19e08:	2000      	movs	r0, #0
   19e0a:	4770      	bx	lr

00019e0c <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19e0c:	297f      	cmp	r1, #127	; 0x7f
   19e0e:	dc06      	bgt.n	19e1e <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   19e10:	0309      	lsls	r1, r1, #12
   19e12:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   19e14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   19e18:	601a      	str	r2, [r3, #0]
}
   19e1a:	2000      	movs	r0, #0
   19e1c:	4770      	bx	lr
{
   19e1e:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   19e20:	2300      	movs	r3, #0
   19e22:	461a      	mov	r2, r3
   19e24:	4619      	mov	r1, r3
   19e26:	4618      	mov	r0, r3
   19e28:	f7fe f818 	bl	17e5c <__assert_func>

00019e2c <nrf52k_flash_write>:
{
   19e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19e30:	b082      	sub	sp, #8
   19e32:	460d      	mov	r5, r1
   19e34:	4616      	mov	r6, r2
   19e36:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   19e38:	f7ff ffa8 	bl	19d8c <nrf52k_flash_wait_ready>
   19e3c:	2800      	cmp	r0, #0
   19e3e:	d158      	bne.n	19ef2 <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   19e40:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   19e44:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   19e46:	4b2c      	ldr	r3, [pc, #176]	; (19ef8 <nrf52k_flash_write+0xcc>)
   19e48:	2201      	movs	r2, #1
   19e4a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   19e4e:	f015 0803 	ands.w	r8, r5, #3
   19e52:	d10b      	bne.n	19e6c <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   19e54:	2c03      	cmp	r4, #3
   19e56:	d925      	bls.n	19ea4 <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   19e58:	f7ff ff98 	bl	19d8c <nrf52k_flash_wait_ready>
   19e5c:	2800      	cmp	r0, #0
   19e5e:	d139      	bne.n	19ed4 <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   19e60:	f856 3b04 	ldr.w	r3, [r6], #4
   19e64:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   19e68:	3c04      	subs	r4, #4
   19e6a:	e7f3      	b.n	19e54 <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   19e6c:	f7ff ff8e 	bl	19d8c <nrf52k_flash_wait_ready>
   19e70:	bb68      	cbnz	r0, 19ece <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   19e72:	f025 0a03 	bic.w	sl, r5, #3
   19e76:	f8da 3000 	ldr.w	r3, [sl]
   19e7a:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   19e7c:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   19e80:	45a1      	cmp	r9, r4
   19e82:	d900      	bls.n	19e86 <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   19e84:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   19e86:	464a      	mov	r2, r9
   19e88:	4631      	mov	r1, r6
   19e8a:	ab01      	add	r3, sp, #4
   19e8c:	eb03 0008 	add.w	r0, r3, r8
   19e90:	f7ff fbda 	bl	19648 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   19e94:	9b01      	ldr	r3, [sp, #4]
   19e96:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   19e9a:	444d      	add	r5, r9
        num_bytes -= cnt;
   19e9c:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   19ea0:	444e      	add	r6, r9
   19ea2:	e7d7      	b.n	19e54 <nrf52k_flash_write+0x28>
    if (num_bytes) {
   19ea4:	b164      	cbz	r4, 19ec0 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   19ea6:	682b      	ldr	r3, [r5, #0]
   19ea8:	a802      	add	r0, sp, #8
   19eaa:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   19eae:	4622      	mov	r2, r4
   19eb0:	4631      	mov	r1, r6
   19eb2:	f7ff fbc9 	bl	19648 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   19eb6:	f7ff ff69 	bl	19d8c <nrf52k_flash_wait_ready>
   19eba:	b9b8      	cbnz	r0, 19eec <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   19ebc:	9b01      	ldr	r3, [sp, #4]
   19ebe:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   19ec0:	f7ff ff64 	bl	19d8c <nrf52k_flash_wait_ready>
   19ec4:	4603      	mov	r3, r0
   19ec6:	b138      	cbz	r0, 19ed8 <nrf52k_flash_write+0xac>
        rc = -1;
   19ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ecc:	e004      	b.n	19ed8 <nrf52k_flash_write+0xac>
    int rc = -1;
   19ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ed2:	e001      	b.n	19ed8 <nrf52k_flash_write+0xac>
   19ed4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   19ed8:	4a07      	ldr	r2, [pc, #28]	; (19ef8 <nrf52k_flash_write+0xcc>)
   19eda:	2100      	movs	r1, #0
   19edc:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   19ee0:	b907      	cbnz	r7, 19ee4 <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   19ee2:	b662      	cpsie	i
}
   19ee4:	4618      	mov	r0, r3
   19ee6:	b002      	add	sp, #8
   19ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   19eec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ef0:	e7f2      	b.n	19ed8 <nrf52k_flash_write+0xac>
        return -1;
   19ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ef6:	e7f5      	b.n	19ee4 <nrf52k_flash_write+0xb8>
   19ef8:	4001e000 	.word	0x4001e000

00019efc <nrf52k_flash_read>:
{
   19efc:	b508      	push	{r3, lr}
   19efe:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   19f00:	461a      	mov	r2, r3
   19f02:	f7ff fba1 	bl	19648 <memcpy>
}
   19f06:	2000      	movs	r0, #0
   19f08:	bd08      	pop	{r3, pc}
	...

00019f0c <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   19f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   19f0e:	f7ff fa3b 	bl	19388 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   19f12:	4b31      	ldr	r3, [pc, #196]	; (19fd8 <nrf52_timer_handler+0xcc>)
   19f14:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   19f18:	4b30      	ldr	r3, [pc, #192]	; (19fdc <nrf52_timer_handler+0xd0>)
   19f1a:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   19f1c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   19f20:	d225      	bcs.n	19f6e <nrf52_timer_handler+0x62>
   19f22:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   19f24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   19f28:	d227      	bcs.n	19f7a <nrf52_timer_handler+0x6e>
    result = x - y;
   19f2a:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   19f2c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   19f30:	d129      	bne.n	19f86 <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   19f32:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   19f36:	4f29      	ldr	r7, [pc, #164]	; (19fdc <nrf52_timer_handler+0xd0>)
   19f38:	683c      	ldr	r4, [r7, #0]
   19f3a:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   19f3e:	4628      	mov	r0, r5
   19f40:	f7ff f9b0 	bl	192a4 <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   19f44:	4b24      	ldr	r3, [pc, #144]	; (19fd8 <nrf52_timer_handler+0xcc>)
   19f46:	2200      	movs	r2, #0
   19f48:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f4c:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19f4e:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f50:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   19f54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   19f58:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   19f5a:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   19f5c:	f7ff fa1d 	bl	1939a <os_arch_in_critical>
   19f60:	bb28      	cbnz	r0, 19fae <nrf52_timer_handler+0xa2>
   19f62:	2300      	movs	r3, #0
   19f64:	461a      	mov	r2, r3
   19f66:	4619      	mov	r1, r3
   19f68:	4618      	mov	r0, r3
   19f6a:	f7fd ff77 	bl	17e5c <__assert_func>
    assert(x <= 0xffffff);
   19f6e:	2300      	movs	r3, #0
   19f70:	461a      	mov	r2, r3
   19f72:	4619      	mov	r1, r3
   19f74:	4618      	mov	r0, r3
   19f76:	f7fd ff71 	bl	17e5c <__assert_func>
    assert(y <= 0xffffff);
   19f7a:	2300      	movs	r3, #0
   19f7c:	461a      	mov	r2, r3
   19f7e:	4619      	mov	r1, r3
   19f80:	4618      	mov	r0, r3
   19f82:	f7fd ff6b 	bl	17e5c <__assert_func>
        return (result | 0xff800000);
   19f86:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   19f8a:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   19f8e:	e7d2      	b.n	19f36 <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   19f90:	2300      	movs	r3, #0
   19f92:	461a      	mov	r2, r3
   19f94:	4619      	mov	r1, r3
   19f96:	4618      	mov	r0, r3
   19f98:	f7fd ff60 	bl	17e5c <__assert_func>
        return (result | 0xff800000);
   19f9c:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   19fa0:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   19fa4:	2a02      	cmp	r2, #2
   19fa6:	dc13      	bgt.n	19fd0 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   19fa8:	4a0c      	ldr	r2, [pc, #48]	; (19fdc <nrf52_timer_handler+0xd0>)
   19faa:	6814      	ldr	r4, [r2, #0]
   19fac:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   19fae:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   19fb2:	4a09      	ldr	r2, [pc, #36]	; (19fd8 <nrf52_timer_handler+0xcc>)
   19fb4:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   19fb8:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   19fbc:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   19fc0:	d2e6      	bcs.n	19f90 <nrf52_timer_handler+0x84>
    result = x - y;
   19fc2:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   19fc4:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   19fc8:	d1e8      	bne.n	19f9c <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   19fca:	f3c2 0216 	ubfx	r2, r2, #0, #23
   19fce:	e7e9      	b.n	19fa4 <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   19fd0:	4630      	mov	r0, r6
   19fd2:	f7ff f9df 	bl	19394 <os_arch_restore_sr>
    os_trace_isr_exit();
}
   19fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fd8:	40011000 	.word	0x40011000
   19fdc:	2000cec4 	.word	0x2000cec4

00019fe0 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   19fe0:	b538      	push	{r3, r4, r5, lr}
   19fe2:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   19fe4:	f7ff f9d9 	bl	1939a <os_arch_in_critical>
   19fe8:	b1a0      	cbz	r0, 1a014 <os_tick_idle+0x34>

    if (ticks > 0) {
   19fea:	2d00      	cmp	r5, #0
   19fec:	d038      	beq.n	1a060 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   19fee:	4b20      	ldr	r3, [pc, #128]	; (1a070 <os_tick_idle+0x90>)
   19ff0:	685b      	ldr	r3, [r3, #4]
   19ff2:	42ab      	cmp	r3, r5
   19ff4:	d200      	bcs.n	19ff8 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   19ff6:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   19ff8:	4b1d      	ldr	r3, [pc, #116]	; (1a070 <os_tick_idle+0x90>)
   19ffa:	689c      	ldr	r4, [r3, #8]
   19ffc:	681a      	ldr	r2, [r3, #0]
   19ffe:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1a002:	f7ff f9ca 	bl	1939a <os_arch_in_critical>
   1a006:	b9d0      	cbnz	r0, 1a03e <os_tick_idle+0x5e>
   1a008:	2300      	movs	r3, #0
   1a00a:	461a      	mov	r2, r3
   1a00c:	4619      	mov	r1, r3
   1a00e:	4618      	mov	r0, r3
   1a010:	f7fd ff24 	bl	17e5c <__assert_func>
    OS_ASSERT_CRITICAL();
   1a014:	2300      	movs	r3, #0
   1a016:	461a      	mov	r2, r3
   1a018:	4619      	mov	r1, r3
   1a01a:	4618      	mov	r0, r3
   1a01c:	f7fd ff1e 	bl	17e5c <__assert_func>
    assert(y <= 0xffffff);
   1a020:	2300      	movs	r3, #0
   1a022:	461a      	mov	r2, r3
   1a024:	4619      	mov	r1, r3
   1a026:	4618      	mov	r0, r3
   1a028:	f7fd ff18 	bl	17e5c <__assert_func>
        return (result | 0xff800000);
   1a02c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1a030:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1a034:	2b02      	cmp	r3, #2
   1a036:	dc13      	bgt.n	1a060 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1a038:	4b0d      	ldr	r3, [pc, #52]	; (1a070 <os_tick_idle+0x90>)
   1a03a:	681c      	ldr	r4, [r3, #0]
   1a03c:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1a03e:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1a042:	4b0c      	ldr	r3, [pc, #48]	; (1a074 <os_tick_idle+0x94>)
   1a044:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1a048:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1a04c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a050:	d2e6      	bcs.n	1a020 <os_tick_idle+0x40>
    result = x - y;
   1a052:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1a054:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1a058:	d1e8      	bne.n	1a02c <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1a05a:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1a05e:	e7e9      	b.n	1a034 <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1a060:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1a064:	bf30      	wfi

    if (ticks > 0) {
   1a066:	b905      	cbnz	r5, 1a06a <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1a068:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1a06a:	f7ff ff4f 	bl	19f0c <nrf52_timer_handler>
}
   1a06e:	e7fb      	b.n	1a068 <os_tick_idle+0x88>
   1a070:	2000cec4 	.word	0x2000cec4
   1a074:	40011000 	.word	0x40011000

0001a078 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1a078:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a07a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a07e:	fbb3 f3f0 	udiv	r3, r3, r0
   1a082:	fb00 f303 	mul.w	r3, r0, r3
   1a086:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a08a:	d136      	bne.n	1a0fa <os_tick_init+0x82>
   1a08c:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1a08e:	4d1e      	ldr	r5, [pc, #120]	; (1a108 <os_tick_init+0x90>)
   1a090:	2600      	movs	r6, #0
   1a092:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1a094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a098:	fbb3 f0f0 	udiv	r0, r3, r0
   1a09c:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1a09e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1a0a2:	fbb3 f0f0 	udiv	r0, r3, r0
   1a0a6:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1a0a8:	f7ff f96e 	bl	19388 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a0ac:	0164      	lsls	r4, r4, #5
   1a0ae:	b2e4      	uxtb	r4, r4
   1a0b0:	4b16      	ldr	r3, [pc, #88]	; (1a10c <os_tick_init+0x94>)
   1a0b2:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a0b6:	4a16      	ldr	r2, [pc, #88]	; (1a110 <os_tick_init+0x98>)
   1a0b8:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a0ba:	4916      	ldr	r1, [pc, #88]	; (1a114 <os_tick_init+0x9c>)
   1a0bc:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a0c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1a0c4:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1a0c6:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1a0ca:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1a0ce:	2201      	movs	r2, #1
   1a0d0:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1a0d2:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1a0d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a0d8:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1a0dc:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1a0e0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1a0e4:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1a0e8:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1a0ec:	6829      	ldr	r1, [r5, #0]
   1a0ee:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1a0f2:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1a0f4:	f7ff f94e 	bl	19394 <os_arch_restore_sr>
}
   1a0f8:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1a0fa:	2300      	movs	r3, #0
   1a0fc:	461a      	mov	r2, r3
   1a0fe:	4619      	mov	r1, r3
   1a100:	4618      	mov	r0, r3
   1a102:	f7fd feab 	bl	17e5c <__assert_func>
   1a106:	bf00      	nop
   1a108:	2000cec4 	.word	0x2000cec4
   1a10c:	e000e100 	.word	0xe000e100
   1a110:	e000ed00 	.word	0xe000ed00
   1a114:	00019f0d 	.word	0x00019f0d

0001a118 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1a118:	2301      	movs	r3, #1
   1a11a:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1a11c:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1a120:	4770      	bx	lr
	...

0001a124 <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1a124:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1a126:	7883      	ldrb	r3, [r0, #2]
   1a128:	b393      	cbz	r3, 1a190 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a12a:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a12c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a130:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1a134:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1a136:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1a13a:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a13e:	b11d      	cbz	r5, 1a148 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1a140:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1a144:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1a148:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1a14a:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1a14c:	2b02      	cmp	r3, #2
   1a14e:	dc0e      	bgt.n	1a16e <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a150:	7842      	ldrb	r2, [r0, #1]
   1a152:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a154:	2b00      	cmp	r3, #0
   1a156:	db15      	blt.n	1a184 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a158:	f002 021f 	and.w	r2, r2, #31
   1a15c:	095b      	lsrs	r3, r3, #5
   1a15e:	2101      	movs	r1, #1
   1a160:	fa01 f202 	lsl.w	r2, r1, r2
   1a164:	3340      	adds	r3, #64	; 0x40
   1a166:	491b      	ldr	r1, [pc, #108]	; (1a1d4 <nrf_timer_set_ocmp+0xb0>)
   1a168:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1a16c:	e00a      	b.n	1a184 <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1a16e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1a172:	d208      	bcs.n	1a186 <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1a174:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1a178:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a17c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a180:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1a184:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1a186:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1a18a:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1a18e:	e7f5      	b.n	1a17c <nrf_timer_set_ocmp+0x58>
   1a190:	460d      	mov	r5, r1
   1a192:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1a194:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a196:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a19a:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1a19e:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a1a2:	2200      	movs	r2, #0
   1a1a4:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a1a8:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1a1ac:	f7ff ffb4 	bl	1a118 <nrf_read_timer_cntr>
   1a1b0:	1b40      	subs	r0, r0, r5
   1a1b2:	2800      	cmp	r0, #0
   1a1b4:	dbe6      	blt.n	1a184 <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a1b6:	7862      	ldrb	r2, [r4, #1]
   1a1b8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a1ba:	2b00      	cmp	r3, #0
   1a1bc:	dbe2      	blt.n	1a184 <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a1be:	f002 021f 	and.w	r2, r2, #31
   1a1c2:	095b      	lsrs	r3, r3, #5
   1a1c4:	2101      	movs	r1, #1
   1a1c6:	fa01 f202 	lsl.w	r2, r1, r2
   1a1ca:	3340      	adds	r3, #64	; 0x40
   1a1cc:	4901      	ldr	r1, [pc, #4]	; (1a1d4 <nrf_timer_set_ocmp+0xb0>)
   1a1ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1a1d2:	e7d7      	b.n	1a184 <nrf_timer_set_ocmp+0x60>
   1a1d4:	e000e100 	.word	0xe000e100

0001a1d8 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1a1d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1a1dc:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a1e0:	4770      	bx	lr

0001a1e2 <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1a1e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1a1e6:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1a1ea:	4770      	bx	lr

0001a1ec <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1a1ec:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1a1ee:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a1f0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a1f4:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1a1f6:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1a1f8:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1a1fc:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1a200:	b1ad      	cbz	r5, 1a22e <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1a202:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1a206:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1a208:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1a20c:	2500      	movs	r5, #0
   1a20e:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1a212:	7840      	ldrb	r0, [r0, #1]
   1a214:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1a216:	42aa      	cmp	r2, r5
   1a218:	db09      	blt.n	1a22e <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a21a:	f000 001f 	and.w	r0, r0, #31
   1a21e:	0952      	lsrs	r2, r2, #5
   1a220:	2501      	movs	r5, #1
   1a222:	fa05 f000 	lsl.w	r0, r5, r0
   1a226:	3240      	adds	r2, #64	; 0x40
   1a228:	4d04      	ldr	r5, [pc, #16]	; (1a23c <hal_timer_read_bsptimer+0x50>)
   1a22a:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1a22e:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a232:	b904      	cbnz	r4, 1a236 <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1a234:	b662      	cpsie	i

    return tcntr;
}
   1a236:	bc30      	pop	{r4, r5}
   1a238:	4770      	bx	lr
   1a23a:	bf00      	nop
   1a23c:	e000e100 	.word	0xe000e100

0001a240 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1a240:	b570      	push	{r4, r5, r6, lr}
   1a242:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a244:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a248:	b672      	cpsid	i
   1a24a:	e013      	b.n	1a274 <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a24c:	6928      	ldr	r0, [r5, #16]
   1a24e:	f7ff ff63 	bl	1a118 <nrf_read_timer_cntr>
            delta = 0;
   1a252:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1a254:	68e3      	ldr	r3, [r4, #12]
   1a256:	1ac0      	subs	r0, r0, r3
   1a258:	4290      	cmp	r0, r2
   1a25a:	db19      	blt.n	1a290 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a25c:	6923      	ldr	r3, [r4, #16]
   1a25e:	b1a3      	cbz	r3, 1a28a <hal_timer_chk_queue+0x4a>
   1a260:	6962      	ldr	r2, [r4, #20]
   1a262:	615a      	str	r2, [r3, #20]
   1a264:	6963      	ldr	r3, [r4, #20]
   1a266:	6922      	ldr	r2, [r4, #16]
   1a268:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1a26a:	2300      	movs	r3, #0
   1a26c:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1a26e:	6863      	ldr	r3, [r4, #4]
   1a270:	68a0      	ldr	r0, [r4, #8]
   1a272:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1a274:	696c      	ldr	r4, [r5, #20]
   1a276:	b15c      	cbz	r4, 1a290 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1a278:	78ab      	ldrb	r3, [r5, #2]
   1a27a:	2b00      	cmp	r3, #0
   1a27c:	d0e6      	beq.n	1a24c <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1a27e:	4628      	mov	r0, r5
   1a280:	f7ff ffb4 	bl	1a1ec <hal_timer_read_bsptimer>
            delta = -3;
   1a284:	f06f 0202 	mvn.w	r2, #2
   1a288:	e7e4      	b.n	1a254 <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1a28a:	6963      	ldr	r3, [r4, #20]
   1a28c:	61ab      	str	r3, [r5, #24]
   1a28e:	e7e9      	b.n	1a264 <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1a290:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1a292:	b133      	cbz	r3, 1a2a2 <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1a294:	68d9      	ldr	r1, [r3, #12]
   1a296:	4628      	mov	r0, r5
   1a298:	f7ff ff44 	bl	1a124 <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1a29c:	b906      	cbnz	r6, 1a2a0 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1a29e:	b662      	cpsie	i
}
   1a2a0:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1a2a2:	78ab      	ldrb	r3, [r5, #2]
   1a2a4:	b11b      	cbz	r3, 1a2ae <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1a2a6:	6928      	ldr	r0, [r5, #16]
   1a2a8:	f7ff ff9b 	bl	1a1e2 <nrf_rtc_disable_ocmp>
   1a2ac:	e7f6      	b.n	1a29c <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1a2ae:	6928      	ldr	r0, [r5, #16]
   1a2b0:	f7ff ff92 	bl	1a1d8 <nrf_timer_disable_ocmp>
   1a2b4:	e7f2      	b.n	1a29c <hal_timer_chk_queue+0x5c>

0001a2b6 <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1a2b6:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1a2b8:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a2ba:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1a2be:	b113      	cbz	r3, 1a2c6 <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1a2c0:	2300      	movs	r3, #0
   1a2c2:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1a2c6:	6883      	ldr	r3, [r0, #8]
   1a2c8:	3301      	adds	r3, #1
   1a2ca:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1a2cc:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1a2d0:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1a2d4:	d100      	bne.n	1a2d8 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1a2d6:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1a2d8:	f7ff ffb2 	bl	1a240 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1a2dc:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1a2e0:	e7f9      	b.n	1a2d6 <hal_timer_irq_handler+0x20>
	...

0001a2e4 <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1a2e4:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1a2e6:	4802      	ldr	r0, [pc, #8]	; (1a2f0 <nrf52_timer0_irq_handler+0xc>)
   1a2e8:	f7ff ffe5 	bl	1a2b6 <hal_timer_irq_handler>
}
   1a2ec:	bd08      	pop	{r3, pc}
   1a2ee:	bf00      	nop
   1a2f0:	2000ced0 	.word	0x2000ced0

0001a2f4 <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a2f4:	2805      	cmp	r0, #5
   1a2f6:	dc1c      	bgt.n	1a332 <hal_timer_init+0x3e>
   1a2f8:	4b12      	ldr	r3, [pc, #72]	; (1a344 <hal_timer_init+0x50>)
   1a2fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1a2fe:	b1d3      	cbz	r3, 1a336 <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1a300:	781a      	ldrb	r2, [r3, #0]
   1a302:	b9d2      	cbnz	r2, 1a33a <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1a304:	b9d8      	cbnz	r0, 1a33e <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1a306:	4a10      	ldr	r2, [pc, #64]	; (1a348 <hal_timer_init+0x54>)
   1a308:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1a30a:	2208      	movs	r2, #8
   1a30c:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a30e:	4b0f      	ldr	r3, [pc, #60]	; (1a34c <hal_timer_init+0x58>)
   1a310:	f44f 7280 	mov.w	r2, #256	; 0x100
   1a314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1a318:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1a31c:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1a320:	22e0      	movs	r2, #224	; 0xe0
   1a322:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1a326:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1a32a:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1a32c:	4a08      	ldr	r2, [pc, #32]	; (1a350 <hal_timer_init+0x5c>)
   1a32e:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1a330:	4770      	bx	lr

err:
    return rc;
   1a332:	2016      	movs	r0, #22
   1a334:	4770      	bx	lr
   1a336:	2016      	movs	r0, #22
   1a338:	4770      	bx	lr
   1a33a:	2016      	movs	r0, #22
   1a33c:	4770      	bx	lr
   1a33e:	2016      	movs	r0, #22
}
   1a340:	4770      	bx	lr
   1a342:	bf00      	nop
   1a344:	0001f444 	.word	0x0001f444
   1a348:	40008000 	.word	0x40008000
   1a34c:	e000e100 	.word	0xe000e100
   1a350:	0001a2e5 	.word	0x0001a2e5

0001a354 <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a354:	2805      	cmp	r0, #5
   1a356:	dc65      	bgt.n	1a424 <hal_timer_config+0xd0>
   1a358:	4b39      	ldr	r3, [pc, #228]	; (1a440 <hal_timer_config+0xec>)
   1a35a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a35e:	2800      	cmp	r0, #0
   1a360:	d062      	beq.n	1a428 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1a362:	4b38      	ldr	r3, [pc, #224]	; (1a444 <hal_timer_config+0xf0>)
   1a364:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a368:	7803      	ldrb	r3, [r0, #0]
   1a36a:	2b00      	cmp	r3, #0
   1a36c:	d15e      	bne.n	1a42c <hal_timer_config+0xd8>
   1a36e:	2900      	cmp	r1, #0
   1a370:	d05e      	beq.n	1a430 <hal_timer_config+0xdc>
   1a372:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1a376:	d85d      	bhi.n	1a434 <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1a378:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1a37a:	2a00      	cmp	r2, #0
   1a37c:	d05c      	beq.n	1a438 <hal_timer_config+0xe4>
{
   1a37e:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1a380:	2901      	cmp	r1, #1
   1a382:	d013      	beq.n	1a3ac <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a384:	2301      	movs	r3, #1
   1a386:	2b09      	cmp	r3, #9
   1a388:	d810      	bhi.n	1a3ac <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1a38a:	2201      	movs	r2, #1
   1a38c:	409a      	lsls	r2, r3
   1a38e:	428a      	cmp	r2, r1
   1a390:	d202      	bcs.n	1a398 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1a392:	3301      	adds	r3, #1
   1a394:	b2db      	uxtb	r3, r3
   1a396:	e7f6      	b.n	1a386 <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1a398:	1e5c      	subs	r4, r3, #1
   1a39a:	2501      	movs	r5, #1
   1a39c:	fa05 f404 	lsl.w	r4, r5, r4
   1a3a0:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1a3a2:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1a3a4:	428c      	cmp	r4, r1
   1a3a6:	d201      	bcs.n	1a3ac <hal_timer_config+0x58>
                    prescaler -= 1;
   1a3a8:	3b01      	subs	r3, #1
   1a3aa:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1a3ac:	4a25      	ldr	r2, [pc, #148]	; (1a444 <hal_timer_config+0xf0>)
   1a3ae:	411a      	asrs	r2, r3
   1a3b0:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1a3b2:	2201      	movs	r2, #1
   1a3b4:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1a3b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1a3ba:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1a3bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3c0:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1a3c4:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1a3c8:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1a3cc:	d00c      	beq.n	1a3e8 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1a3ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3d2:	2100      	movs	r1, #0
   1a3d4:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1a3d8:	2101      	movs	r1, #1
   1a3da:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1a3dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1a3e0:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1a3e4:	2a00      	cmp	r2, #0
   1a3e6:	d0f9      	beq.n	1a3dc <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1a3e8:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1a3ea:	2101      	movs	r1, #1
   1a3ec:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1a3ee:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1a3f0:	2500      	movs	r5, #0
   1a3f2:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1a3f6:	2503      	movs	r5, #3
   1a3f8:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1a3fc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1a400:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1a402:	7842      	ldrb	r2, [r0, #1]
   1a404:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1a406:	2b00      	cmp	r3, #0
   1a408:	db07      	blt.n	1a41a <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1a40a:	f002 021f 	and.w	r2, r2, #31
   1a40e:	095b      	lsrs	r3, r3, #5
   1a410:	fa01 f202 	lsl.w	r2, r1, r2
   1a414:	490c      	ldr	r1, [pc, #48]	; (1a448 <hal_timer_config+0xf4>)
   1a416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1a41a:	b97c      	cbnz	r4, 1a43c <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1a41c:	b662      	cpsie	i

    return 0;
   1a41e:	2000      	movs	r0, #0

err:
    return rc;
}
   1a420:	bc30      	pop	{r4, r5}
   1a422:	4770      	bx	lr
    return rc;
   1a424:	2016      	movs	r0, #22
   1a426:	4770      	bx	lr
   1a428:	2016      	movs	r0, #22
   1a42a:	4770      	bx	lr
   1a42c:	2016      	movs	r0, #22
   1a42e:	4770      	bx	lr
   1a430:	2016      	movs	r0, #22
   1a432:	4770      	bx	lr
   1a434:	2016      	movs	r0, #22
   1a436:	4770      	bx	lr
   1a438:	2016      	movs	r0, #22
}
   1a43a:	4770      	bx	lr
    return 0;
   1a43c:	2000      	movs	r0, #0
   1a43e:	e7ef      	b.n	1a420 <hal_timer_config+0xcc>
   1a440:	0001f444 	.word	0x0001f444
   1a444:	00f42400 	.word	0x00f42400
   1a448:	e000e100 	.word	0xe000e100

0001a44c <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1a44c:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1a44e:	2805      	cmp	r0, #5
   1a450:	dc0c      	bgt.n	1a46c <hal_timer_read+0x20>
   1a452:	4b09      	ldr	r3, [pc, #36]	; (1a478 <hal_timer_read+0x2c>)
   1a454:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1a458:	b140      	cbz	r0, 1a46c <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1a45a:	7883      	ldrb	r3, [r0, #2]
   1a45c:	b91b      	cbnz	r3, 1a466 <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1a45e:	6900      	ldr	r0, [r0, #16]
   1a460:	f7ff fe5a 	bl	1a118 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1a464:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1a466:	f7ff fec1 	bl	1a1ec <hal_timer_read_bsptimer>
   1a46a:	e7fb      	b.n	1a464 <hal_timer_read+0x18>
    assert(0);
   1a46c:	2300      	movs	r3, #0
   1a46e:	461a      	mov	r2, r3
   1a470:	4619      	mov	r1, r3
   1a472:	4618      	mov	r0, r3
   1a474:	f7fd fcf2 	bl	17e5c <__assert_func>
   1a478:	0001f444 	.word	0x0001f444

0001a47c <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1a47c:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1a47e:	2100      	movs	r1, #0
   1a480:	4608      	mov	r0, r1
   1a482:	f7ff ff37 	bl	1a2f4 <hal_timer_init>
    assert(rc == 0);
   1a486:	b920      	cbnz	r0, 1a492 <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1a488:	4808      	ldr	r0, [pc, #32]	; (1a4ac <nrf52_periph_create_timers+0x30>)
   1a48a:	f7fd ff11 	bl	182b0 <os_cputime_init>
    assert(rc == 0);
   1a48e:	b930      	cbnz	r0, 1a49e <nrf52_periph_create_timers+0x22>
#endif
}
   1a490:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a492:	2300      	movs	r3, #0
   1a494:	461a      	mov	r2, r3
   1a496:	4619      	mov	r1, r3
   1a498:	4618      	mov	r0, r3
   1a49a:	f7fd fcdf 	bl	17e5c <__assert_func>
    assert(rc == 0);
   1a49e:	2300      	movs	r3, #0
   1a4a0:	461a      	mov	r2, r3
   1a4a2:	4619      	mov	r1, r3
   1a4a4:	4618      	mov	r0, r3
   1a4a6:	f7fd fcd9 	bl	17e5c <__assert_func>
   1a4aa:	bf00      	nop
   1a4ac:	000f4240 	.word	0x000f4240

0001a4b0 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1a4b0:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1a4b2:	4906      	ldr	r1, [pc, #24]	; (1a4cc <nrf52_periph_create_i2c+0x1c>)
   1a4b4:	2001      	movs	r0, #1
   1a4b6:	f7fd f82b 	bl	17510 <hal_i2c_init>
    assert(rc == 0);
   1a4ba:	b900      	cbnz	r0, 1a4be <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1a4bc:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a4be:	2300      	movs	r3, #0
   1a4c0:	461a      	mov	r2, r3
   1a4c2:	4619      	mov	r1, r3
   1a4c4:	4618      	mov	r0, r3
   1a4c6:	f7fd fcc9 	bl	17e5c <__assert_func>
   1a4ca:	bf00      	nop
   1a4cc:	0001f45c 	.word	0x0001f45c

0001a4d0 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1a4d0:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1a4d2:	2200      	movs	r2, #0
   1a4d4:	4905      	ldr	r1, [pc, #20]	; (1a4ec <nrf52_periph_create_spi+0x1c>)
   1a4d6:	4610      	mov	r0, r2
   1a4d8:	f7fd fb4e 	bl	17b78 <hal_spi_init>
    assert(rc == 0);
   1a4dc:	b900      	cbnz	r0, 1a4e0 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1a4de:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1a4e0:	2300      	movs	r3, #0
   1a4e2:	461a      	mov	r2, r3
   1a4e4:	4619      	mov	r1, r3
   1a4e6:	4618      	mov	r0, r3
   1a4e8:	f7fd fcb8 	bl	17e5c <__assert_func>
   1a4ec:	0001f468 	.word	0x0001f468

0001a4f0 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1a4f0:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1a4f2:	f7ff ffc3 	bl	1a47c <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1a4f6:	f7ff ffdb 	bl	1a4b0 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1a4fa:	f7ff ffe9 	bl	1a4d0 <nrf52_periph_create_spi>
}
   1a4fe:	bd08      	pop	{r3, pc}

0001a500 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1a500:	4770      	bx	lr
	...

0001a504 <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1a504:	4b08      	ldr	r3, [pc, #32]	; (1a528 <sensor_mgr_remove+0x24>)
   1a506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a508:	4282      	cmp	r2, r0
   1a50a:	d104      	bne.n	1a516 <sensor_mgr_remove+0x12>
   1a50c:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1a510:	631a      	str	r2, [r3, #48]	; 0x30
   1a512:	4770      	bx	lr
   1a514:	461a      	mov	r2, r3
   1a516:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1a51a:	4283      	cmp	r3, r0
   1a51c:	d1fa      	bne.n	1a514 <sensor_mgr_remove+0x10>
   1a51e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a522:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1a526:	4770      	bx	lr
   1a528:	2000cef0 	.word	0x2000cef0

0001a52c <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1a52c:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1a52e:	6a03      	ldr	r3, [r0, #32]
   1a530:	b993      	cbnz	r3, 1a558 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a532:	4b15      	ldr	r3, [pc, #84]	; (1a588 <sensor_mgr_insert+0x5c>)
   1a534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a536:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a538:	e002      	b.n	1a540 <sensor_mgr_insert+0x14>
            prev = cursor;
   1a53a:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a53c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a540:	2b00      	cmp	r3, #0
   1a542:	d1fa      	bne.n	1a53a <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1a544:	b1c9      	cbz	r1, 1a57a <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1a546:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1a54a:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1a54e:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1a552:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a556:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a558:	4b0b      	ldr	r3, [pc, #44]	; (1a588 <sensor_mgr_insert+0x5c>)
   1a55a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1a55c:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a55e:	2b00      	cmp	r3, #0
   1a560:	d0f0      	beq.n	1a544 <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1a562:	6a1a      	ldr	r2, [r3, #32]
   1a564:	2a00      	cmp	r2, #0
   1a566:	d0ed      	beq.n	1a544 <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1a568:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1a56a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1a56c:	1b12      	subs	r2, r2, r4
   1a56e:	2a00      	cmp	r2, #0
   1a570:	dbe8      	blt.n	1a544 <sensor_mgr_insert+0x18>
        prev = cursor;
   1a572:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1a574:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1a578:	e7f1      	b.n	1a55e <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1a57a:	4b03      	ldr	r3, [pc, #12]	; (1a588 <sensor_mgr_insert+0x5c>)
   1a57c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1a57e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1a582:	6318      	str	r0, [r3, #48]	; 0x30
   1a584:	e7e5      	b.n	1a552 <sensor_mgr_insert+0x26>
   1a586:	bf00      	nop
   1a588:	2000cef0 	.word	0x2000cef0

0001a58c <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1a58c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1a58e:	fab0 f080 	clz	r0, r0
   1a592:	0940      	lsrs	r0, r0, #5
   1a594:	4770      	bx	lr
	...

0001a598 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1a598:	4b01      	ldr	r3, [pc, #4]	; (1a5a0 <sensor_mgr_evq_set+0x8>)
   1a59a:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1a59c:	4770      	bx	lr
   1a59e:	bf00      	nop
   1a5a0:	2000cef0 	.word	0x2000cef0

0001a5a4 <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1a5a4:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1a5a8:	e9d1 2300 	ldrd	r2, r3, [r1]
   1a5ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1a5b0:	ea02 0b04 	and.w	fp, r2, r4
   1a5b4:	ea03 0c05 	and.w	ip, r3, r5
   1a5b8:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1a5bc:	ea0b 0200 	and.w	r2, fp, r0
   1a5c0:	ea0c 0301 	and.w	r3, ip, r1
   1a5c4:	4313      	orrs	r3, r2
}
   1a5c6:	bf14      	ite	ne
   1a5c8:	2001      	movne	r0, #1
   1a5ca:	2000      	moveq	r0, #0
   1a5cc:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1a5d0:	4770      	bx	lr

0001a5d2 <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1a5d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a5d6:	b083      	sub	sp, #12
   1a5d8:	4605      	mov	r5, r0
   1a5da:	4689      	mov	r9, r1
   1a5dc:	4690      	mov	r8, r2
   1a5de:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1a5e2:	790b      	ldrb	r3, [r1, #4]
   1a5e4:	2b01      	cmp	r3, #1
   1a5e6:	d013      	beq.n	1a610 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1a5e8:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1a5ea:	e000      	b.n	1a5ee <sensor_read_data_func+0x1c>
   1a5ec:	6924      	ldr	r4, [r4, #16]
   1a5ee:	b17c      	cbz	r4, 1a610 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1a5f0:	e9d4 0100 	ldrd	r0, r1, [r4]
   1a5f4:	ea00 0206 	and.w	r2, r0, r6
   1a5f8:	ea01 0307 	and.w	r3, r1, r7
   1a5fc:	4313      	orrs	r3, r2
   1a5fe:	d0f5      	beq.n	1a5ec <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1a600:	68a3      	ldr	r3, [r4, #8]
   1a602:	68e1      	ldr	r1, [r4, #12]
   1a604:	e9cd 6700 	strd	r6, r7, [sp]
   1a608:	4642      	mov	r2, r8
   1a60a:	4628      	mov	r0, r5
   1a60c:	4798      	blx	r3
   1a60e:	e7ed      	b.n	1a5ec <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1a610:	f8d9 3000 	ldr.w	r3, [r9]
   1a614:	b14b      	cbz	r3, 1a62a <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1a616:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1a61a:	e9cd 6700 	strd	r6, r7, [sp]
   1a61e:	4642      	mov	r2, r8
   1a620:	4628      	mov	r0, r5
   1a622:	4798      	blx	r3
    }

    return (0);
}
   1a624:	b003      	add	sp, #12
   1a626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1a62a:	2000      	movs	r0, #0
   1a62c:	e7fa      	b.n	1a624 <sensor_read_data_func+0x52>
	...

0001a630 <sensor_base_ts_update_event>:
{
   1a630:	b530      	push	{r4, r5, lr}
   1a632:	b087      	sub	sp, #28
    ticks = os_time_get();
   1a634:	f7fe fe30 	bl	19298 <os_time_get>
   1a638:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1a63a:	a901      	add	r1, sp, #4
   1a63c:	a802      	add	r0, sp, #8
   1a63e:	f7fe fe65 	bl	1930c <os_gettimeofday>
    if (rc) {
   1a642:	b138      	cbz	r0, 1a654 <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1a644:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1a648:	4621      	mov	r1, r4
   1a64a:	4809      	ldr	r0, [pc, #36]	; (1a670 <sensor_base_ts_update_event+0x40>)
   1a64c:	f7fd fdac 	bl	181a8 <os_callout_reset>
}
   1a650:	b007      	add	sp, #28
   1a652:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1a654:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1a658:	4d06      	ldr	r5, [pc, #24]	; (1a674 <sensor_base_ts_update_event+0x44>)
   1a65a:	ab06      	add	r3, sp, #24
   1a65c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a660:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a664:	9b01      	ldr	r3, [sp, #4]
   1a666:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a668:	f7fd fe28 	bl	182bc <os_cputime_get32>
   1a66c:	6168      	str	r0, [r5, #20]
   1a66e:	e7eb      	b.n	1a648 <sensor_base_ts_update_event+0x18>
   1a670:	2000cf24 	.word	0x2000cf24
   1a674:	2000cf48 	.word	0x2000cf48

0001a678 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1a678:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1a67c:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1a67e:	f7fd fe1d 	bl	182bc <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1a682:	4a0e      	ldr	r2, [pc, #56]	; (1a6bc <sensor_up_timestamp+0x44>)
   1a684:	6955      	ldr	r5, [r2, #20]
   1a686:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1a688:	6460      	str	r0, [r4, #68]	; 0x44
   1a68a:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a68c:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a690:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a692:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1a694:	4b0a      	ldr	r3, [pc, #40]	; (1a6c0 <sensor_up_timestamp+0x48>)
   1a696:	fba3 c305 	umull	ip, r3, r3, r5
   1a69a:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1a69c:	eb10 0b03 	adds.w	fp, r0, r3
   1a6a0:	f141 0c00 	adc.w	ip, r1, #0
   1a6a4:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1a6a8:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1a6ac:	4905      	ldr	r1, [pc, #20]	; (1a6c4 <sensor_up_timestamp+0x4c>)
   1a6ae:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1a6b2:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1a6b4:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1a6b6:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1a6ba:	bf00      	nop
   1a6bc:	2000cf48 	.word	0x2000cf48
   1a6c0:	431bde83 	.word	0x431bde83
   1a6c4:	000f4240 	.word	0x000f4240

0001a6c8 <sensor_mgr_lock>:
{
   1a6c8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1a6ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a6ce:	4804      	ldr	r0, [pc, #16]	; (1a6e0 <sensor_mgr_lock+0x18>)
   1a6d0:	f7fe fa5c 	bl	18b8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a6d4:	b108      	cbz	r0, 1a6da <sensor_mgr_lock+0x12>
   1a6d6:	2809      	cmp	r0, #9
   1a6d8:	d000      	beq.n	1a6dc <sensor_mgr_lock+0x14>
}
   1a6da:	bd08      	pop	{r3, pc}
        return (0);
   1a6dc:	2000      	movs	r0, #0
   1a6de:	e7fc      	b.n	1a6da <sensor_mgr_lock+0x12>
   1a6e0:	2000cef0 	.word	0x2000cef0

0001a6e4 <sensor_mgr_unlock>:
{
   1a6e4:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1a6e6:	4802      	ldr	r0, [pc, #8]	; (1a6f0 <sensor_mgr_unlock+0xc>)
   1a6e8:	f7fe f9f4 	bl	18ad4 <os_mutex_release>
}
   1a6ec:	bd08      	pop	{r3, pc}
   1a6ee:	bf00      	nop
   1a6f0:	2000cef0 	.word	0x2000cef0

0001a6f4 <sensor_mgr_evq_get>:
}
   1a6f4:	4b01      	ldr	r3, [pc, #4]	; (1a6fc <sensor_mgr_evq_get+0x8>)
   1a6f6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1a6f8:	4770      	bx	lr
   1a6fa:	bf00      	nop
   1a6fc:	2000cef0 	.word	0x2000cef0

0001a700 <sensor_mgr_init>:
{
   1a700:	b570      	push	{r4, r5, r6, lr}
   1a702:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1a704:	f7fd ff68 	bl	185d8 <os_eventq_dflt_get>
   1a708:	f7ff ff46 	bl	1a598 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1a70c:	4b1c      	ldr	r3, [pc, #112]	; (1a780 <sensor_mgr_init+0x80>)
   1a70e:	9300      	str	r3, [sp, #0]
   1a710:	4b1c      	ldr	r3, [pc, #112]	; (1a784 <sensor_mgr_init+0x84>)
   1a712:	2218      	movs	r2, #24
   1a714:	2105      	movs	r1, #5
   1a716:	481c      	ldr	r0, [pc, #112]	; (1a788 <sensor_mgr_init+0x88>)
   1a718:	f7fe f8e8 	bl	188ec <os_mempool_init>
    assert(rc == OS_OK);
   1a71c:	bb50      	cbnz	r0, 1a774 <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1a71e:	f7ff ffe9 	bl	1a6f4 <sensor_mgr_evq_get>
   1a722:	4e1a      	ldr	r6, [pc, #104]	; (1a78c <sensor_mgr_init+0x8c>)
   1a724:	2300      	movs	r3, #0
   1a726:	4a1a      	ldr	r2, [pc, #104]	; (1a790 <sensor_mgr_init+0x90>)
   1a728:	4601      	mov	r1, r0
   1a72a:	4630      	mov	r0, r6
   1a72c:	f7fd fd10 	bl	18150 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1a730:	ad04      	add	r5, sp, #16
   1a732:	a903      	add	r1, sp, #12
   1a734:	4628      	mov	r0, r5
   1a736:	f7fe fde9 	bl	1930c <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1a73a:	4c16      	ldr	r4, [pc, #88]	; (1a794 <sensor_mgr_init+0x94>)
   1a73c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1a740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1a744:	9b03      	ldr	r3, [sp, #12]
   1a746:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1a748:	f7fd fdb8 	bl	182bc <os_cputime_get32>
   1a74c:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1a74e:	f7ff ffd1 	bl	1a6f4 <sensor_mgr_evq_get>
   1a752:	4c11      	ldr	r4, [pc, #68]	; (1a798 <sensor_mgr_init+0x98>)
   1a754:	2300      	movs	r3, #0
   1a756:	4a11      	ldr	r2, [pc, #68]	; (1a79c <sensor_mgr_init+0x9c>)
   1a758:	4601      	mov	r1, r0
   1a75a:	4620      	mov	r0, r4
   1a75c:	f7fd fcf8 	bl	18150 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1a760:	2180      	movs	r1, #128	; 0x80
   1a762:	4620      	mov	r0, r4
   1a764:	f7fd fd20 	bl	181a8 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1a768:	f1a6 000c 	sub.w	r0, r6, #12
   1a76c:	f7fe f9a8 	bl	18ac0 <os_mutex_init>
}
   1a770:	b008      	add	sp, #32
   1a772:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1a774:	2300      	movs	r3, #0
   1a776:	461a      	mov	r2, r3
   1a778:	4619      	mov	r1, r3
   1a77a:	4618      	mov	r0, r3
   1a77c:	f7fd fb6e 	bl	17e5c <__assert_func>
   1a780:	0001f46c 	.word	0x0001f46c
   1a784:	2000c9ec 	.word	0x2000c9ec
   1a788:	2000ca64 	.word	0x2000ca64
   1a78c:	2000cefc 	.word	0x2000cefc
   1a790:	0001a96d 	.word	0x0001a96d
   1a794:	2000cf48 	.word	0x2000cf48
   1a798:	2000cf24 	.word	0x2000cf24
   1a79c:	0001a631 	.word	0x0001a631

0001a7a0 <sensor_pkg_init>:
{
   1a7a0:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1a7a2:	f7ff ffad 	bl	1a700 <sensor_mgr_init>
}
   1a7a6:	bd08      	pop	{r3, pc}

0001a7a8 <sensor_lock>:
{
   1a7a8:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1a7aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a7ae:	3004      	adds	r0, #4
   1a7b0:	f7fe f9ec 	bl	18b8c <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1a7b4:	b108      	cbz	r0, 1a7ba <sensor_lock+0x12>
   1a7b6:	2809      	cmp	r0, #9
   1a7b8:	d000      	beq.n	1a7bc <sensor_lock+0x14>
}
   1a7ba:	bd08      	pop	{r3, pc}
        return (0);
   1a7bc:	2000      	movs	r0, #0
   1a7be:	e7fc      	b.n	1a7ba <sensor_lock+0x12>

0001a7c0 <sensor_unlock>:
{
   1a7c0:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1a7c2:	3004      	adds	r0, #4
   1a7c4:	f7fe f986 	bl	18ad4 <os_mutex_release>
}
   1a7c8:	bd08      	pop	{r3, pc}

0001a7ca <sensor_update_nextrun>:
{
   1a7ca:	b530      	push	{r4, r5, lr}
   1a7cc:	b083      	sub	sp, #12
   1a7ce:	4604      	mov	r4, r0
   1a7d0:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1a7d2:	a901      	add	r1, sp, #4
   1a7d4:	6a00      	ldr	r0, [r0, #32]
   1a7d6:	f7fe fdb5 	bl	19344 <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1a7da:	4620      	mov	r0, r4
   1a7dc:	f7ff ffe4 	bl	1a7a8 <sensor_lock>
    sensor_mgr_remove(sensor);
   1a7e0:	4620      	mov	r0, r4
   1a7e2:	f7ff fe8f 	bl	1a504 <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1a7e6:	9b01      	ldr	r3, [sp, #4]
   1a7e8:	441d      	add	r5, r3
   1a7ea:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1a7ec:	4620      	mov	r0, r4
   1a7ee:	f7ff fe9d 	bl	1a52c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a7f2:	4620      	mov	r0, r4
   1a7f4:	f7ff ffe4 	bl	1a7c0 <sensor_unlock>
}
   1a7f8:	b003      	add	sp, #12
   1a7fa:	bd30      	pop	{r4, r5, pc}

0001a7fc <sensor_calc_nextrun_delta>:
{
   1a7fc:	b538      	push	{r3, r4, r5, lr}
   1a7fe:	4605      	mov	r5, r0
   1a800:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1a802:	f7ff ffd1 	bl	1a7a8 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1a806:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1a808:	1b0c      	subs	r4, r1, r4
   1a80a:	d404      	bmi.n	1a816 <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1a80c:	4628      	mov	r0, r5
   1a80e:	f7ff ffd7 	bl	1a7c0 <sensor_unlock>
}
   1a812:	4620      	mov	r0, r4
   1a814:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1a816:	2400      	movs	r4, #0
   1a818:	e7f8      	b.n	1a80c <sensor_calc_nextrun_delta+0x10>
	...

0001a81c <sensor_find_min_nextrun_sensor>:
{
   1a81c:	b570      	push	{r4, r5, r6, lr}
   1a81e:	4606      	mov	r6, r0
   1a820:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1a822:	f7ff ff51 	bl	1a6c8 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1a826:	4b05      	ldr	r3, [pc, #20]	; (1a83c <sensor_find_min_nextrun_sensor+0x20>)
   1a828:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1a82a:	4631      	mov	r1, r6
   1a82c:	4620      	mov	r0, r4
   1a82e:	f7ff ffe5 	bl	1a7fc <sensor_calc_nextrun_delta>
   1a832:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1a834:	f7ff ff56 	bl	1a6e4 <sensor_mgr_unlock>
}
   1a838:	4620      	mov	r0, r4
   1a83a:	bd70      	pop	{r4, r5, r6, pc}
   1a83c:	2000cef0 	.word	0x2000cef0

0001a840 <sensor_mgr_register>:
{
   1a840:	b538      	push	{r3, r4, r5, lr}
   1a842:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1a844:	f7ff ff40 	bl	1a6c8 <sensor_mgr_lock>
    if (rc != 0) {
   1a848:	4604      	mov	r4, r0
   1a84a:	b108      	cbz	r0, 1a850 <sensor_mgr_register+0x10>
}
   1a84c:	4620      	mov	r0, r4
   1a84e:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1a850:	4628      	mov	r0, r5
   1a852:	f7ff ffa9 	bl	1a7a8 <sensor_lock>
    if (rc != 0) {
   1a856:	4604      	mov	r4, r0
   1a858:	2800      	cmp	r0, #0
   1a85a:	d1f7      	bne.n	1a84c <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1a85c:	4628      	mov	r0, r5
   1a85e:	f7ff fe65 	bl	1a52c <sensor_mgr_insert>
    sensor_unlock(sensor);
   1a862:	4628      	mov	r0, r5
   1a864:	f7ff ffac 	bl	1a7c0 <sensor_unlock>
    sensor_mgr_unlock();
   1a868:	f7ff ff3c 	bl	1a6e4 <sensor_mgr_unlock>
    return (0);
   1a86c:	e7ee      	b.n	1a84c <sensor_mgr_register+0xc>

0001a86e <sensor_init>:
{
   1a86e:	b538      	push	{r3, r4, r5, lr}
   1a870:	4604      	mov	r4, r0
   1a872:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1a874:	2288      	movs	r2, #136	; 0x88
   1a876:	2100      	movs	r1, #0
   1a878:	f7fe fef3 	bl	19662 <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1a87c:	1d20      	adds	r0, r4, #4
   1a87e:	f7fe f91f 	bl	18ac0 <os_mutex_init>
    if (rc != 0) {
   1a882:	4603      	mov	r3, r0
   1a884:	b900      	cbnz	r0, 1a888 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1a886:	6025      	str	r5, [r4, #0]
}
   1a888:	4618      	mov	r0, r3
   1a88a:	bd38      	pop	{r3, r4, r5, pc}

0001a88c <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1a88c:	b530      	push	{r4, r5, lr}
   1a88e:	b089      	sub	sp, #36	; 0x24
   1a890:	4604      	mov	r4, r0
   1a892:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1a896:	f7ff ff87 	bl	1a7a8 <sensor_lock>
    if (rc) {
   1a89a:	4605      	mov	r5, r0
   1a89c:	b9f8      	cbnz	r0, 1a8de <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1a89e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1a8a0:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1a8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1a8a4:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1a8a6:	a904      	add	r1, sp, #16
   1a8a8:	4620      	mov	r0, r4
   1a8aa:	f7ff fe7b 	bl	1a5a4 <sensor_mgr_match_bytype>
   1a8ae:	b1e0      	cbz	r0, 1a8ea <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1a8b0:	4620      	mov	r0, r4
   1a8b2:	f7ff fee1 	bl	1a678 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1a8b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1a8b8:	6819      	ldr	r1, [r3, #0]
   1a8ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1a8bc:	9302      	str	r3, [sp, #8]
   1a8be:	ab06      	add	r3, sp, #24
   1a8c0:	9301      	str	r3, [sp, #4]
   1a8c2:	4b0b      	ldr	r3, [pc, #44]	; (1a8f0 <sensor_read+0x64>)
   1a8c4:	9300      	str	r3, [sp, #0]
   1a8c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1a8ca:	4620      	mov	r0, r4
   1a8cc:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1a8ce:	4605      	mov	r5, r0
   1a8d0:	b128      	cbz	r0, 1a8de <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1a8d2:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1a8d4:	b11b      	cbz	r3, 1a8de <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1a8d6:	4602      	mov	r2, r0
   1a8d8:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1a8da:	4620      	mov	r0, r4
   1a8dc:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1a8de:	4620      	mov	r0, r4
   1a8e0:	f7ff ff6e 	bl	1a7c0 <sensor_unlock>
    return (rc);
}
   1a8e4:	4628      	mov	r0, r5
   1a8e6:	b009      	add	sp, #36	; 0x24
   1a8e8:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1a8ea:	f06f 0503 	mvn.w	r5, #3
   1a8ee:	e7f6      	b.n	1a8de <sensor_read+0x52>
   1a8f0:	0001a5d3 	.word	0x0001a5d3

0001a8f4 <sensor_mgr_poll_bytype>:
{
   1a8f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a8f6:	b085      	sub	sp, #20
   1a8f8:	4616      	mov	r6, r2
   1a8fa:	461f      	mov	r7, r3
   1a8fc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1a8fe:	b10c      	cbz	r4, 1a904 <sensor_mgr_poll_bytype+0x10>
   1a900:	8aa3      	ldrh	r3, [r4, #20]
   1a902:	b9cb      	cbnz	r3, 1a938 <sensor_mgr_poll_bytype+0x44>
   1a904:	4632      	mov	r2, r6
   1a906:	463b      	mov	r3, r7
   1a908:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1a90a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a90e:	9102      	str	r1, [sp, #8]
   1a910:	2100      	movs	r1, #0
   1a912:	9101      	str	r1, [sp, #4]
   1a914:	9100      	str	r1, [sp, #0]
   1a916:	f7ff ffb9 	bl	1a88c <sensor_read>
        sensor_lock(sensor);
   1a91a:	4628      	mov	r0, r5
   1a91c:	f7ff ff44 	bl	1a7a8 <sensor_lock>
        if (stt) {
   1a920:	b12c      	cbz	r4, 1a92e <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1a922:	8aa3      	ldrh	r3, [r4, #20]
   1a924:	b91b      	cbnz	r3, 1a92e <sensor_mgr_poll_bytype+0x3a>
   1a926:	8a63      	ldrh	r3, [r4, #18]
   1a928:	b10b      	cbz	r3, 1a92e <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1a92a:	3b01      	subs	r3, #1
   1a92c:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1a92e:	4628      	mov	r0, r5
   1a930:	f7ff ff46 	bl	1a7c0 <sensor_unlock>
}
   1a934:	b005      	add	sp, #20
   1a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1a938:	3b01      	subs	r3, #1
   1a93a:	82a3      	strh	r3, [r4, #20]
}
   1a93c:	e7fa      	b.n	1a934 <sensor_mgr_poll_bytype+0x40>

0001a93e <sensor_poll_per_type_trait>:
{
   1a93e:	b570      	push	{r4, r5, r6, lr}
   1a940:	b082      	sub	sp, #8
   1a942:	4605      	mov	r5, r0
   1a944:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1a946:	f7ff ff2f 	bl	1a7a8 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a94a:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1a94c:	e007      	b.n	1a95e <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1a94e:	e9d4 2300 	ldrd	r2, r3, [r4]
   1a952:	9601      	str	r6, [sp, #4]
   1a954:	9400      	str	r4, [sp, #0]
   1a956:	4628      	mov	r0, r5
   1a958:	f7ff ffcc 	bl	1a8f4 <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1a95c:	6a24      	ldr	r4, [r4, #32]
   1a95e:	2c00      	cmp	r4, #0
   1a960:	d1f5      	bne.n	1a94e <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1a962:	4628      	mov	r0, r5
   1a964:	f7ff ff2c 	bl	1a7c0 <sensor_unlock>
}
   1a968:	b002      	add	sp, #8
   1a96a:	bd70      	pop	{r4, r5, r6, pc}

0001a96c <sensor_mgr_wakeup_event>:
{
   1a96c:	b570      	push	{r4, r5, r6, lr}
   1a96e:	b084      	sub	sp, #16
    now = os_time_get();
   1a970:	f7fe fc92 	bl	19298 <os_time_get>
   1a974:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1a976:	f7ff fea7 	bl	1a6c8 <sensor_mgr_lock>
   1a97a:	e012      	b.n	1a9a2 <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1a97c:	4620      	mov	r0, r4
   1a97e:	f7ff ff1f 	bl	1a7c0 <sensor_unlock>
            sensor_mgr_unlock();
   1a982:	f7ff feaf 	bl	1a6e4 <sensor_mgr_unlock>
}
   1a986:	b004      	add	sp, #16
   1a988:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1a98a:	4632      	mov	r2, r6
   1a98c:	4629      	mov	r1, r5
   1a98e:	4620      	mov	r0, r4
   1a990:	f7ff ffd5 	bl	1a93e <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1a994:	4629      	mov	r1, r5
   1a996:	4620      	mov	r0, r4
   1a998:	f7ff ff17 	bl	1a7ca <sensor_update_nextrun>
        sensor_unlock(cursor);
   1a99c:	4620      	mov	r0, r4
   1a99e:	f7ff ff0f 	bl	1a7c0 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1a9a2:	a903      	add	r1, sp, #12
   1a9a4:	4628      	mov	r0, r5
   1a9a6:	f7ff ff39 	bl	1a81c <sensor_find_min_nextrun_sensor>
   1a9aa:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1a9ac:	f7ff fefc 	bl	1a7a8 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1a9b0:	6a23      	ldr	r3, [r4, #32]
   1a9b2:	2b00      	cmp	r3, #0
   1a9b4:	d0e2      	beq.n	1a97c <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1a9b6:	9e03      	ldr	r6, [sp, #12]
   1a9b8:	b96e      	cbnz	r6, 1a9d6 <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1a9ba:	4620      	mov	r0, r4
   1a9bc:	f7ff fde6 	bl	1a58c <sensor_type_traits_empty>
   1a9c0:	2800      	cmp	r0, #0
   1a9c2:	d0e2      	beq.n	1a98a <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1a9c4:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1a9c8:	9501      	str	r5, [sp, #4]
   1a9ca:	2100      	movs	r1, #0
   1a9cc:	9100      	str	r1, [sp, #0]
   1a9ce:	4620      	mov	r0, r4
   1a9d0:	f7ff ff90 	bl	1a8f4 <sensor_mgr_poll_bytype>
   1a9d4:	e7de      	b.n	1a994 <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1a9d6:	f7ff fe85 	bl	1a6e4 <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1a9da:	9903      	ldr	r1, [sp, #12]
   1a9dc:	4801      	ldr	r0, [pc, #4]	; (1a9e4 <sensor_mgr_wakeup_event+0x78>)
   1a9de:	f7fd fbe3 	bl	181a8 <os_callout_reset>
   1a9e2:	e7d0      	b.n	1a986 <sensor_mgr_wakeup_event+0x1a>
   1a9e4:	2000cefc 	.word	0x2000cefc

0001a9e8 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1a9e8:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1a9ea:	2101      	movs	r1, #1
   1a9ec:	4806      	ldr	r0, [pc, #24]	; (1aa08 <init_sensor_coap+0x20>)
   1a9ee:	f7fe faf1 	bl	18fd4 <os_sem_init>
    assert(rc == OS_OK);
   1a9f2:	b918      	cbnz	r0, 1a9fc <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1a9f4:	4b05      	ldr	r3, [pc, #20]	; (1aa0c <init_sensor_coap+0x24>)
   1a9f6:	2201      	movs	r2, #1
   1a9f8:	701a      	strb	r2, [r3, #0]
}
   1a9fa:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1a9fc:	2300      	movs	r3, #0
   1a9fe:	461a      	mov	r2, r3
   1aa00:	4619      	mov	r1, r3
   1aa02:	4618      	mov	r0, r3
   1aa04:	f7fd fa2a 	bl	17e5c <__assert_func>
   1aa08:	2000ca80 	.word	0x2000ca80
   1aa0c:	2000ca88 	.word	0x2000ca88

0001aa10 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1aa10:	4b04      	ldr	r3, [pc, #16]	; (1aa24 <is_sensor_node+0x14>)
   1aa12:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aa16:	4313      	orrs	r3, r2
   1aa18:	d101      	bne.n	1aa1e <is_sensor_node+0xe>
    return false;
   1aa1a:	2000      	movs	r0, #0
}
   1aa1c:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1aa1e:	2001      	movs	r0, #1
   1aa20:	4770      	bx	lr
   1aa22:	bf00      	nop
   1aa24:	2000caa0 	.word	0x2000caa0

0001aa28 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1aa28:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1aa2a:	4b16      	ldr	r3, [pc, #88]	; (1aa84 <get_hardware_id+0x5c>)
   1aa2c:	681b      	ldr	r3, [r3, #0]
   1aa2e:	b10b      	cbz	r3, 1aa34 <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1aa30:	4815      	ldr	r0, [pc, #84]	; (1aa88 <get_hardware_id+0x60>)
   1aa32:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1aa34:	f000 fcee 	bl	1b414 <hal_bsp_hw_id_len>
   1aa38:	4b12      	ldr	r3, [pc, #72]	; (1aa84 <get_hardware_id+0x5c>)
   1aa3a:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aa3c:	280b      	cmp	r0, #11
   1aa3e:	d914      	bls.n	1aa6a <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1aa40:	210c      	movs	r1, #12
   1aa42:	4811      	ldr	r0, [pc, #68]	; (1aa88 <get_hardware_id+0x60>)
   1aa44:	f000 fce8 	bl	1b418 <hal_bsp_hw_id>
   1aa48:	4b0e      	ldr	r3, [pc, #56]	; (1aa84 <get_hardware_id+0x5c>)
   1aa4a:	6018      	str	r0, [r3, #0]
   1aa4c:	2800      	cmp	r0, #0
   1aa4e:	dd12      	ble.n	1aa76 <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1aa50:	490e      	ldr	r1, [pc, #56]	; (1aa8c <get_hardware_id+0x64>)
   1aa52:	480f      	ldr	r0, [pc, #60]	; (1aa90 <get_hardware_id+0x68>)
   1aa54:	f7fc fb3a 	bl	170cc <console_printf>
   1aa58:	4b0a      	ldr	r3, [pc, #40]	; (1aa84 <get_hardware_id+0x5c>)
   1aa5a:	6819      	ldr	r1, [r3, #0]
   1aa5c:	480a      	ldr	r0, [pc, #40]	; (1aa88 <get_hardware_id+0x60>)
   1aa5e:	f7fc fac5 	bl	16fec <console_dump>
   1aa62:	480c      	ldr	r0, [pc, #48]	; (1aa94 <get_hardware_id+0x6c>)
   1aa64:	f7fc fb32 	bl	170cc <console_printf>
   1aa68:	e7e2      	b.n	1aa30 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1aa6a:	2300      	movs	r3, #0
   1aa6c:	461a      	mov	r2, r3
   1aa6e:	4619      	mov	r1, r3
   1aa70:	4618      	mov	r0, r3
   1aa72:	f7fd f9f3 	bl	17e5c <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1aa76:	2300      	movs	r3, #0
   1aa78:	461a      	mov	r2, r3
   1aa7a:	4619      	mov	r1, r3
   1aa7c:	4618      	mov	r0, r3
   1aa7e:	f7fd f9ed 	bl	17e5c <__assert_func>
   1aa82:	bf00      	nop
   1aa84:	2000ca98 	.word	0x2000ca98
   1aa88:	2000ca8c 	.word	0x2000ca8c
   1aa8c:	0001f510 	.word	0x0001f510
   1aa90:	0001f4c8 	.word	0x0001f4c8
   1aa94:	0001f628 	.word	0x0001f628

0001aa98 <is_collector_node>:
bool is_collector_node(void) {
   1aa98:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1aa9a:	f7ff ffc5 	bl	1aa28 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aa9e:	220c      	movs	r2, #12
   1aaa0:	4903      	ldr	r1, [pc, #12]	; (1aab0 <is_collector_node+0x18>)
   1aaa2:	f7fe fdad 	bl	19600 <memcmp>
   1aaa6:	b108      	cbz	r0, 1aaac <is_collector_node+0x14>
    return false; 
   1aaa8:	2000      	movs	r0, #0
}
   1aaaa:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1aaac:	2001      	movs	r0, #1
   1aaae:	e7fc      	b.n	1aaaa <is_collector_node+0x12>
   1aab0:	0001f480 	.word	0x0001f480

0001aab4 <is_standalone_node>:
bool is_standalone_node(void) {
   1aab4:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1aab6:	f7ff ffef 	bl	1aa98 <is_collector_node>
   1aaba:	b928      	cbnz	r0, 1aac8 <is_standalone_node+0x14>
   1aabc:	4604      	mov	r4, r0
   1aabe:	f7ff ffa7 	bl	1aa10 <is_sensor_node>
   1aac2:	b910      	cbnz	r0, 1aaca <is_standalone_node+0x16>
   1aac4:	2401      	movs	r4, #1
   1aac6:	e000      	b.n	1aaca <is_standalone_node+0x16>
    return false;
   1aac8:	2400      	movs	r4, #0
}
   1aaca:	4620      	mov	r0, r4
   1aacc:	bd10      	pop	{r4, pc}
	...

0001aad0 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1aad0:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aad2:	2400      	movs	r4, #0
   1aad4:	2c04      	cmp	r4, #4
   1aad6:	dc15      	bgt.n	1ab04 <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1aad8:	4b23      	ldr	r3, [pc, #140]	; (1ab68 <sensor_network_init+0x98>)
   1aada:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1aade:	e9d3 2300 	ldrd	r2, r3, [r3]
   1aae2:	4922      	ldr	r1, [pc, #136]	; (1ab6c <sensor_network_init+0x9c>)
   1aae4:	4822      	ldr	r0, [pc, #136]	; (1ab70 <sensor_network_init+0xa0>)
   1aae6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1aaea:	f000 fcaf 	bl	1b44c <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aaee:	3001      	adds	r0, #1
   1aaf0:	280b      	cmp	r0, #11
   1aaf2:	dc01      	bgt.n	1aaf8 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1aaf4:	3401      	adds	r4, #1
   1aaf6:	e7ed      	b.n	1aad4 <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1aaf8:	2300      	movs	r3, #0
   1aafa:	461a      	mov	r2, r3
   1aafc:	4619      	mov	r1, r3
   1aafe:	4618      	mov	r0, r3
   1ab00:	f7fd f9ac 	bl	17e5c <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1ab04:	f7ff ff90 	bl	1aa28 <get_hardware_id>
   1ab08:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ab0a:	2400      	movs	r4, #0
   1ab0c:	2c04      	cmp	r4, #4
   1ab0e:	dc19      	bgt.n	1ab44 <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1ab10:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ab14:	0093      	lsls	r3, r2, #2
   1ab16:	220c      	movs	r2, #12
   1ab18:	4916      	ldr	r1, [pc, #88]	; (1ab74 <sensor_network_init+0xa4>)
   1ab1a:	4419      	add	r1, r3
   1ab1c:	4628      	mov	r0, r5
   1ab1e:	f7fe fd6f 	bl	19600 <memcmp>
   1ab22:	b108      	cbz	r0, 1ab28 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1ab24:	3401      	adds	r4, #1
   1ab26:	e7f1      	b.n	1ab0c <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1ab28:	4b0f      	ldr	r3, [pc, #60]	; (1ab68 <sensor_network_init+0x98>)
   1ab2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1ab2e:	e9d3 0100 	ldrd	r0, r1, [r3]
   1ab32:	4b11      	ldr	r3, [pc, #68]	; (1ab78 <sensor_network_init+0xa8>)
   1ab34:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1ab38:	1c63      	adds	r3, r4, #1
   1ab3a:	4a10      	ldr	r2, [pc, #64]	; (1ab7c <sensor_network_init+0xac>)
   1ab3c:	4910      	ldr	r1, [pc, #64]	; (1ab80 <sensor_network_init+0xb0>)
   1ab3e:	4811      	ldr	r0, [pc, #68]	; (1ab84 <sensor_network_init+0xb4>)
   1ab40:	f7fc fac4 	bl	170cc <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ab44:	f7ff ffa8 	bl	1aa98 <is_collector_node>
   1ab48:	b940      	cbnz	r0, 1ab5c <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1ab4a:	f7ff ffb3 	bl	1aab4 <is_standalone_node>
   1ab4e:	b150      	cbz	r0, 1ab66 <sensor_network_init+0x96>
   1ab50:	4a0a      	ldr	r2, [pc, #40]	; (1ab7c <sensor_network_init+0xac>)
   1ab52:	490b      	ldr	r1, [pc, #44]	; (1ab80 <sensor_network_init+0xb0>)
   1ab54:	480c      	ldr	r0, [pc, #48]	; (1ab88 <sensor_network_init+0xb8>)
   1ab56:	f7fc fab9 	bl	170cc <console_printf>
}
   1ab5a:	e004      	b.n	1ab66 <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1ab5c:	4a07      	ldr	r2, [pc, #28]	; (1ab7c <sensor_network_init+0xac>)
   1ab5e:	4908      	ldr	r1, [pc, #32]	; (1ab80 <sensor_network_init+0xb0>)
   1ab60:	480a      	ldr	r0, [pc, #40]	; (1ab8c <sensor_network_init+0xbc>)
   1ab62:	f7fc fab3 	bl	170cc <console_printf>
}
   1ab66:	bd38      	pop	{r3, r4, r5, pc}
   1ab68:	0001f528 	.word	0x0001f528
   1ab6c:	0001f4d0 	.word	0x0001f4d0
   1ab70:	20000130 	.word	0x20000130
   1ab74:	0001f48c 	.word	0x0001f48c
   1ab78:	2000caa0 	.word	0x2000caa0
   1ab7c:	0001f4d8 	.word	0x0001f4d8
   1ab80:	0001f510 	.word	0x0001f510
   1ab84:	0001f4e0 	.word	0x0001f4e0
   1ab88:	0001f500 	.word	0x0001f500
   1ab8c:	0001f4f0 	.word	0x0001f4f0

0001ab90 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1ab90:	b530      	push	{r4, r5, lr}
   1ab92:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1ab94:	2200      	movs	r2, #0
   1ab96:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ab9a:	4810      	ldr	r0, [pc, #64]	; (1abdc <config_device+0x4c>)
   1ab9c:	f7fd fc2c 	bl	183f8 <os_dev_open>
    assert(dev != NULL);
   1aba0:	b178      	cbz	r0, 1abc2 <config_device+0x32>
   1aba2:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1aba4:	4668      	mov	r0, sp
   1aba6:	f000 f86c 	bl	1ac82 <temp_stub_default_cfg>
    assert(rc == 0);
   1abaa:	b980      	cbnz	r0, 1abce <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1abac:	4669      	mov	r1, sp
   1abae:	4620      	mov	r0, r4
   1abb0:	f000 f900 	bl	1adb4 <temp_stub_config>
   1abb4:	4605      	mov	r5, r0
    os_dev_close(dev);
   1abb6:	4620      	mov	r0, r4
   1abb8:	f7fd fc40 	bl	1843c <os_dev_close>
    return rc;
}
   1abbc:	4628      	mov	r0, r5
   1abbe:	b003      	add	sp, #12
   1abc0:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1abc2:	2300      	movs	r3, #0
   1abc4:	461a      	mov	r2, r3
   1abc6:	4619      	mov	r1, r3
   1abc8:	4618      	mov	r0, r3
   1abca:	f7fd f947 	bl	17e5c <__assert_func>
    assert(rc == 0);
   1abce:	2300      	movs	r3, #0
   1abd0:	461a      	mov	r2, r3
   1abd2:	4619      	mov	r1, r3
   1abd4:	4618      	mov	r0, r3
   1abd6:	f7fd f941 	bl	17e5c <__assert_func>
   1abda:	bf00      	nop
   1abdc:	0001f550 	.word	0x0001f550

0001abe0 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1abe0:	b510      	push	{r4, lr}
   1abe2:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1abe4:	4c10      	ldr	r4, [pc, #64]	; (1ac28 <temp_stub_create+0x48>)
   1abe6:	4621      	mov	r1, r4
   1abe8:	4810      	ldr	r0, [pc, #64]	; (1ac2c <temp_stub_create+0x4c>)
   1abea:	f7fc fa6f 	bl	170cc <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1abee:	4b10      	ldr	r3, [pc, #64]	; (1ac30 <temp_stub_create+0x50>)
   1abf0:	9301      	str	r3, [sp, #4]
   1abf2:	4b10      	ldr	r3, [pc, #64]	; (1ac34 <temp_stub_create+0x54>)
   1abf4:	9300      	str	r3, [sp, #0]
   1abf6:	2300      	movs	r3, #0
   1abf8:	2201      	movs	r2, #1
   1abfa:	4621      	mov	r1, r4
   1abfc:	480e      	ldr	r0, [pc, #56]	; (1ac38 <temp_stub_create+0x58>)
   1abfe:	f7fd fbb5 	bl	1836c <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1ac02:	b920      	cbnz	r0, 1ac0e <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1ac04:	f7ff ffc4 	bl	1ab90 <config_device>
    assert(rc == 0);
   1ac08:	b938      	cbnz	r0, 1ac1a <temp_stub_create+0x3a>
}
   1ac0a:	b002      	add	sp, #8
   1ac0c:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1ac0e:	2300      	movs	r3, #0
   1ac10:	461a      	mov	r2, r3
   1ac12:	4619      	mov	r1, r3
   1ac14:	4618      	mov	r0, r3
   1ac16:	f7fd f921 	bl	17e5c <__assert_func>
    assert(rc == 0);
   1ac1a:	2300      	movs	r3, #0
   1ac1c:	461a      	mov	r2, r3
   1ac1e:	4619      	mov	r1, r3
   1ac20:	4618      	mov	r0, r3
   1ac22:	f7fd f91b 	bl	17e5c <__assert_func>
   1ac26:	bf00      	nop
   1ac28:	0001f550 	.word	0x0001f550
   1ac2c:	0001f55c 	.word	0x0001f55c
   1ac30:	2000cae0 	.word	0x2000cae0
   1ac34:	0001ac91 	.word	0x0001ac91
   1ac38:	2000caf8 	.word	0x2000caf8

0001ac3c <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1ac3c:	2000      	movs	r0, #0
   1ac3e:	4770      	bx	lr

0001ac40 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1ac40:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1ac44:	2100      	movs	r1, #0
   1ac46:	ea50 0301 	orrs.w	r3, r0, r1
   1ac4a:	d004      	beq.n	1ac56 <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1ac4c:	9b00      	ldr	r3, [sp, #0]
   1ac4e:	2201      	movs	r2, #1
   1ac50:	701a      	strb	r2, [r3, #0]
    return (0);
   1ac52:	2000      	movs	r0, #0
   1ac54:	4770      	bx	lr
err:
    return (rc);
   1ac56:	f06f 0001 	mvn.w	r0, #1
}
   1ac5a:	4770      	bx	lr

0001ac5c <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1ac5c:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ac5e:	b120      	cbz	r0, 1ac6a <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1ac60:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1ac64:	d007      	beq.n	1ac76 <temp_stub_open+0x1a>
}
   1ac66:	2000      	movs	r0, #0
   1ac68:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1ac6a:	2300      	movs	r3, #0
   1ac6c:	461a      	mov	r2, r3
   1ac6e:	4619      	mov	r1, r3
   1ac70:	4618      	mov	r0, r3
   1ac72:	f7fd f8f3 	bl	17e5c <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1ac76:	2300      	movs	r3, #0
   1ac78:	461a      	mov	r2, r3
   1ac7a:	4619      	mov	r1, r3
   1ac7c:	4618      	mov	r0, r3
   1ac7e:	f7fd f8ed 	bl	17e5c <__assert_func>

0001ac82 <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1ac82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1ac86:	2300      	movs	r3, #0
   1ac88:	e9c0 2300 	strd	r2, r3, [r0]
}
   1ac8c:	2000      	movs	r0, #0
   1ac8e:	4770      	bx	lr

0001ac90 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1ac90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1ac92:	b379      	cbz	r1, 1acf4 <temp_stub_init+0x64>
   1ac94:	460d      	mov	r5, r1
   1ac96:	b380      	cbz	r0, 1acfa <temp_stub_init+0x6a>
   1ac98:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1ac9a:	30b0      	adds	r0, #176	; 0xb0
   1ac9c:	f7ff fff1 	bl	1ac82 <temp_stub_default_cfg>
    if (rc) { goto err; }
   1aca0:	4603      	mov	r3, r0
   1aca2:	b108      	cbz	r0, 1aca8 <temp_stub_init+0x18>
}
   1aca4:	4618      	mov	r0, r3
   1aca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1aca8:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1acac:	4621      	mov	r1, r4
   1acae:	4630      	mov	r0, r6
   1acb0:	f7ff fddd 	bl	1a86e <sensor_init>
    if (rc != 0) { goto err; }
   1acb4:	4603      	mov	r3, r0
   1acb6:	2800      	cmp	r0, #0
   1acb8:	d1f4      	bne.n	1aca4 <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1acba:	4b11      	ldr	r3, [pc, #68]	; (1ad00 <temp_stub_init+0x70>)
   1acbc:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1acbe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1acc2:	2300      	movs	r3, #0
   1acc4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1acc8:	682a      	ldr	r2, [r5, #0]
   1acca:	686f      	ldr	r7, [r5, #4]
   1accc:	68a8      	ldr	r0, [r5, #8]
   1acce:	68e9      	ldr	r1, [r5, #12]
   1acd0:	6722      	str	r2, [r4, #112]	; 0x70
   1acd2:	6767      	str	r7, [r4, #116]	; 0x74
   1acd4:	67a0      	str	r0, [r4, #120]	; 0x78
   1acd6:	67e1      	str	r1, [r4, #124]	; 0x7c
   1acd8:	692a      	ldr	r2, [r5, #16]
   1acda:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1acde:	4630      	mov	r0, r6
   1ace0:	f7ff fdae 	bl	1a840 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1ace4:	4603      	mov	r3, r0
   1ace6:	2800      	cmp	r0, #0
   1ace8:	d1dc      	bne.n	1aca4 <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1acea:	4a06      	ldr	r2, [pc, #24]	; (1ad04 <temp_stub_init+0x74>)
   1acec:	6022      	str	r2, [r4, #0]
   1acee:	4a06      	ldr	r2, [pc, #24]	; (1ad08 <temp_stub_init+0x78>)
   1acf0:	60e2      	str	r2, [r4, #12]
    return (0);
   1acf2:	e7d7      	b.n	1aca4 <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1acf4:	f06f 0308 	mvn.w	r3, #8
   1acf8:	e7d4      	b.n	1aca4 <temp_stub_init+0x14>
   1acfa:	f06f 0308 	mvn.w	r3, #8
   1acfe:	e7d1      	b.n	1aca4 <temp_stub_init+0x14>
   1ad00:	0001f56c 	.word	0x0001f56c
   1ad04:	0001ac5d 	.word	0x0001ac5d
   1ad08:	0001ac3d 	.word	0x0001ac3d

0001ad0c <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1ad0c:	b538      	push	{r3, r4, r5, lr}
   1ad0e:	460d      	mov	r5, r1
   1ad10:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1ad12:	4808      	ldr	r0, [pc, #32]	; (1ad34 <temp_stub_get_raw_temperature+0x28>)
   1ad14:	f7fc f9da 	bl	170cc <console_printf>
    assert(temp_sum);
   1ad18:	b134      	cbz	r4, 1ad28 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1ad1a:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1ad1e:	fb01 f105 	mul.w	r1, r1, r5
   1ad22:	6021      	str	r1, [r4, #0]
}
   1ad24:	2000      	movs	r0, #0
   1ad26:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1ad28:	2300      	movs	r3, #0
   1ad2a:	461a      	mov	r2, r3
   1ad2c:	4619      	mov	r1, r3
   1ad2e:	4618      	mov	r0, r3
   1ad30:	f7fd f894 	bl	17e5c <__assert_func>
   1ad34:	0001f594 	.word	0x0001f594

0001ad38 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1ad38:	b530      	push	{r4, r5, lr}
   1ad3a:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1ad3c:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1ad40:	2500      	movs	r5, #0
   1ad42:	ea54 0305 	orrs.w	r3, r4, r5
   1ad46:	d032      	beq.n	1adae <temp_stub_sensor_read+0x76>
   1ad48:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1ad4a:	6805      	ldr	r5, [r0, #0]
   1ad4c:	b165      	cbz	r5, 1ad68 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1ad4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ad52:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1ad54:	2200      	movs	r2, #0
   1ad56:	4611      	mov	r1, r2
   1ad58:	4628      	mov	r0, r5
   1ad5a:	f7ff ff7f 	bl	1ac5c <temp_stub_open>
        if (rc) { goto err; }
   1ad5e:	4603      	mov	r3, r0
   1ad60:	b140      	cbz	r0, 1ad74 <temp_stub_sensor_read+0x3c>
}
   1ad62:	4618      	mov	r0, r3
   1ad64:	b007      	add	sp, #28
   1ad66:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1ad68:	2300      	movs	r3, #0
   1ad6a:	461a      	mov	r2, r3
   1ad6c:	4619      	mov	r1, r3
   1ad6e:	4618      	mov	r0, r3
   1ad70:	f7fd f874 	bl	17e5c <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1ad74:	2300      	movs	r3, #0
   1ad76:	aa03      	add	r2, sp, #12
   1ad78:	2101      	movs	r1, #1
   1ad7a:	4628      	mov	r0, r5
   1ad7c:	f7ff ffc6 	bl	1ad0c <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1ad80:	4603      	mov	r3, r0
   1ad82:	2800      	cmp	r0, #0
   1ad84:	d1ed      	bne.n	1ad62 <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1ad86:	9a03      	ldr	r2, [sp, #12]
   1ad88:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1ad8a:	2201      	movs	r2, #1
   1ad8c:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1ad90:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1ad92:	2a00      	cmp	r2, #0
   1ad94:	d0e5      	beq.n	1ad62 <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1ad96:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1ad9a:	2300      	movs	r3, #0
   1ad9c:	e9cd 2300 	strd	r2, r3, [sp]
   1ada0:	aa04      	add	r2, sp, #16
   1ada2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1ada4:	4620      	mov	r0, r4
   1ada6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1ada8:	4798      	blx	r3
   1adaa:	4603      	mov	r3, r0
   1adac:	e7d9      	b.n	1ad62 <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1adae:	f06f 0301 	mvn.w	r3, #1
   1adb2:	e7d6      	b.n	1ad62 <temp_stub_sensor_read+0x2a>

0001adb4 <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1adb4:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1adb6:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1adba:	d009      	beq.n	1add0 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1adbc:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1adc0:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1adc4:	e9d1 2300 	ldrd	r2, r3, [r1]
   1adc8:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1adcc:	2000      	movs	r0, #0
   1adce:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1add0:	2300      	movs	r3, #0
   1add2:	461a      	mov	r2, r3
   1add4:	4619      	mov	r1, r3
   1add6:	4618      	mov	r0, r3
   1add8:	f7fd f840 	bl	17e5c <__assert_func>

0001addc <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1addc:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1adde:	e002      	b.n	1ade6 <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1ade0:	4618      	mov	r0, r3
   1ade2:	f000 f85b 	bl	1ae9c <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1ade6:	4808      	ldr	r0, [pc, #32]	; (1ae08 <oc_buffer_tx+0x2c>)
   1ade8:	f7fd fc03 	bl	185f2 <os_mqueue_get>
   1adec:	4603      	mov	r3, r0
   1adee:	b148      	cbz	r0, 1ae04 <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1adf0:	2200      	movs	r2, #0
   1adf2:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1adf4:	7e1a      	ldrb	r2, [r3, #24]
   1adf6:	f012 0f08 	tst.w	r2, #8
   1adfa:	d0f1      	beq.n	1ade0 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1adfc:	4618      	mov	r0, r3
   1adfe:	f000 f85d 	bl	1aebc <oc_send_multicast_message>
   1ae02:	e7f0      	b.n	1ade6 <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1ae04:	bd08      	pop	{r3, pc}
   1ae06:	bf00      	nop
   1ae08:	2000cbd0 	.word	0x2000cbd0

0001ae0c <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1ae0c:	b500      	push	{lr}
   1ae0e:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1ae10:	4808      	ldr	r0, [pc, #32]	; (1ae34 <oc_buffer_rx+0x28>)
   1ae12:	f7fd fbee 	bl	185f2 <os_mqueue_get>
   1ae16:	9001      	str	r0, [sp, #4]
   1ae18:	b140      	cbz	r0, 1ae2c <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1ae1a:	a801      	add	r0, sp, #4
   1ae1c:	f000 faa2 	bl	1b364 <__wrap_coap_receive>
#endif
        if (m) {
   1ae20:	9801      	ldr	r0, [sp, #4]
   1ae22:	2800      	cmp	r0, #0
   1ae24:	d0f4      	beq.n	1ae10 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1ae26:	f7fd fc59 	bl	186dc <os_mbuf_free_chain>
   1ae2a:	e7f1      	b.n	1ae10 <oc_buffer_rx+0x4>
        }
    }
}
   1ae2c:	b003      	add	sp, #12
   1ae2e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae32:	bf00      	nop
   1ae34:	2000cbb8 	.word	0x2000cbb8

0001ae38 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1ae38:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1ae3a:	2200      	movs	r2, #0
   1ae3c:	4904      	ldr	r1, [pc, #16]	; (1ae50 <oc_buffer_init+0x18>)
   1ae3e:	4805      	ldr	r0, [pc, #20]	; (1ae54 <oc_buffer_init+0x1c>)
   1ae40:	f7fd fbce 	bl	185e0 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1ae44:	2200      	movs	r2, #0
   1ae46:	4904      	ldr	r1, [pc, #16]	; (1ae58 <oc_buffer_init+0x20>)
   1ae48:	4804      	ldr	r0, [pc, #16]	; (1ae5c <oc_buffer_init+0x24>)
   1ae4a:	f7fd fbc9 	bl	185e0 <os_mqueue_init>
}
   1ae4e:	bd08      	pop	{r3, pc}
   1ae50:	0001ae0d 	.word	0x0001ae0d
   1ae54:	2000cbb8 	.word	0x2000cbb8
   1ae58:	0001addd 	.word	0x0001addd
   1ae5c:	2000cbd0 	.word	0x2000cbd0

0001ae60 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1ae60:	b500      	push	{lr}
   1ae62:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1ae64:	4b07      	ldr	r3, [pc, #28]	; (1ae84 <oc_ri_mem_init+0x24>)
   1ae66:	9300      	str	r3, [sp, #0]
   1ae68:	4b07      	ldr	r3, [pc, #28]	; (1ae88 <oc_ri_mem_init+0x28>)
   1ae6a:	2264      	movs	r2, #100	; 0x64
   1ae6c:	2102      	movs	r1, #2
   1ae6e:	4807      	ldr	r0, [pc, #28]	; (1ae8c <oc_ri_mem_init+0x2c>)
   1ae70:	f7fd fd3c 	bl	188ec <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1ae74:	f000 f860 	bl	1af38 <oc_rep_init>
#endif
    oc_buffer_init();
   1ae78:	f7ff ffde 	bl	1ae38 <oc_buffer_init>
}
   1ae7c:	b003      	add	sp, #12
   1ae7e:	f85d fb04 	ldr.w	pc, [sp], #4
   1ae82:	bf00      	nop
   1ae84:	0001f5ac 	.word	0x0001f5ac
   1ae88:	2000cbe8 	.word	0x2000cbe8
   1ae8c:	2000ccb0 	.word	0x2000ccb0

0001ae90 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1ae90:	4b01      	ldr	r3, [pc, #4]	; (1ae98 <oc_evq_set+0x8>)
   1ae92:	6018      	str	r0, [r3, #0]
}
   1ae94:	4770      	bx	lr
   1ae96:	bf00      	nop
   1ae98:	2000cccc 	.word	0x2000cccc

0001ae9c <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1ae9c:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1ae9e:	7e03      	ldrb	r3, [r0, #24]
   1aea0:	f003 0307 	and.w	r3, r3, #7
   1aea4:	4a04      	ldr	r2, [pc, #16]	; (1aeb8 <oc_send_buffer+0x1c>)
   1aea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1aeaa:	b113      	cbz	r3, 1aeb2 <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1aeac:	68db      	ldr	r3, [r3, #12]
   1aeae:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1aeb0:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1aeb2:	f7fd fc13 	bl	186dc <os_mbuf_free_chain>
}
   1aeb6:	e7fb      	b.n	1aeb0 <oc_send_buffer+0x14>
   1aeb8:	2000cf60 	.word	0x2000cf60

0001aebc <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1aebc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aec0:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1aec2:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1aec4:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1aec6:	e002      	b.n	1aece <oc_send_multicast_message+0x12>
   1aec8:	4635      	mov	r5, r6
   1aeca:	3401      	adds	r4, #1
   1aecc:	462e      	mov	r6, r5
   1aece:	2c07      	cmp	r4, #7
   1aed0:	dc12      	bgt.n	1aef8 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1aed2:	4b0c      	ldr	r3, [pc, #48]	; (1af04 <oc_send_multicast_message+0x48>)
   1aed4:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1aed8:	2d00      	cmp	r5, #0
   1aeda:	d0f5      	beq.n	1aec8 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1aedc:	2e00      	cmp	r6, #0
   1aede:	d0f4      	beq.n	1aeca <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1aee0:	4638      	mov	r0, r7
   1aee2:	f7fd fc6b 	bl	187bc <os_mbuf_dup>
   1aee6:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1aee8:	6933      	ldr	r3, [r6, #16]
   1aeea:	4638      	mov	r0, r7
   1aeec:	4798      	blx	r3
            if (!n) {
   1aeee:	f1b8 0f00 	cmp.w	r8, #0
   1aef2:	d005      	beq.n	1af00 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1aef4:	4647      	mov	r7, r8
   1aef6:	e7e8      	b.n	1aeca <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1aef8:	b116      	cbz	r6, 1af00 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1aefa:	6933      	ldr	r3, [r6, #16]
   1aefc:	4638      	mov	r0, r7
   1aefe:	4798      	blx	r3
    }
}
   1af00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1af04:	2000cf60 	.word	0x2000cf60

0001af08 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1af08:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1af0a:	4b07      	ldr	r3, [pc, #28]	; (1af28 <oc_init+0x20>)
   1af0c:	781b      	ldrb	r3, [r3, #0]
   1af0e:	b133      	cbz	r3, 1af1e <oc_init+0x16>
    oc_ri_mem_init();
   1af10:	f7ff ffa6 	bl	1ae60 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1af14:	f7fd fb60 	bl	185d8 <os_eventq_dflt_get>
   1af18:	f7ff ffba 	bl	1ae90 <oc_evq_set>
}
   1af1c:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1af1e:	461a      	mov	r2, r3
   1af20:	4619      	mov	r1, r3
   1af22:	4618      	mov	r0, r3
   1af24:	f7fc ff9a 	bl	17e5c <__assert_func>
   1af28:	2000cdbc 	.word	0x2000cdbc

0001af2c <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1af2c:	4770      	bx	lr

0001af2e <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1af2e:	4770      	bx	lr

0001af30 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1af30:	4770      	bx	lr

0001af32 <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1af32:	4770      	bx	lr

0001af34 <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1af34:	4770      	bx	lr
	...

0001af38 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1af38:	b500      	push	{lr}
   1af3a:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1af3c:	4b05      	ldr	r3, [pc, #20]	; (1af54 <oc_rep_init+0x1c>)
   1af3e:	9300      	str	r3, [sp, #0]
   1af40:	4b05      	ldr	r3, [pc, #20]	; (1af58 <oc_rep_init+0x20>)
   1af42:	2218      	movs	r2, #24
   1af44:	2102      	movs	r1, #2
   1af46:	4805      	ldr	r0, [pc, #20]	; (1af5c <oc_rep_init+0x24>)
   1af48:	f7fd fcd0 	bl	188ec <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1af4c:	b003      	add	sp, #12
   1af4e:	f85d fb04 	ldr.w	pc, [sp], #4
   1af52:	bf00      	nop
   1af54:	0001f5b8 	.word	0x0001f5b8
   1af58:	2000ccec 	.word	0x2000ccec
   1af5c:	2000ccd0 	.word	0x2000ccd0

0001af60 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1af60:	b570      	push	{r4, r5, r6, lr}
   1af62:	b086      	sub	sp, #24
   1af64:	4605      	mov	r5, r0
   1af66:	460e      	mov	r6, r1
   1af68:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1af6a:	2300      	movs	r3, #0
   1af6c:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1af6e:	f000 f9ad 	bl	1b2cc <mfg_init>

    mfg_open(&reader);
   1af72:	a801      	add	r0, sp, #4
   1af74:	f000 f9c6 	bl	1b304 <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1af78:	6823      	ldr	r3, [r4, #0]
   1af7a:	42ab      	cmp	r3, r5
   1af7c:	da29      	bge.n	1afd2 <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1af7e:	2102      	movs	r1, #2
   1af80:	a801      	add	r0, sp, #4
   1af82:	f000 f98c 	bl	1b29e <mfg_seek_next_with_type>
   1af86:	4603      	mov	r3, r0
        switch (rc) {
   1af88:	f110 0f0f 	cmn.w	r0, #15
   1af8c:	d003      	beq.n	1af96 <flash_map_read_mfg+0x36>
   1af8e:	b120      	cbz	r0, 1af9a <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1af90:	4618      	mov	r0, r3
   1af92:	b006      	add	sp, #24
   1af94:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1af96:	2300      	movs	r3, #0
   1af98:	e7fa      	b.n	1af90 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1af9a:	a903      	add	r1, sp, #12
   1af9c:	a801      	add	r0, sp, #4
   1af9e:	f000 f98b 	bl	1b2b8 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1afa2:	4603      	mov	r3, r0
   1afa4:	2800      	cmp	r0, #0
   1afa6:	d1f3      	bne.n	1af90 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1afa8:	6823      	ldr	r3, [r4, #0]
   1afaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1afae:	009a      	lsls	r2, r3, #2
   1afb0:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1afb2:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1afb6:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1afb8:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1afbc:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1afbe:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1afc2:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1afc4:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1afc8:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1afca:	6823      	ldr	r3, [r4, #0]
   1afcc:	3301      	adds	r3, #1
   1afce:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1afd0:	e7d2      	b.n	1af78 <flash_map_read_mfg+0x18>
            return -1;
   1afd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1afd6:	e7db      	b.n	1af90 <flash_map_read_mfg+0x30>

0001afd8 <flash_area_open>:
{
   1afd8:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1afda:	4b0d      	ldr	r3, [pc, #52]	; (1b010 <flash_area_open+0x38>)
   1afdc:	681d      	ldr	r5, [r3, #0]
   1afde:	b1a5      	cbz	r5, 1b00a <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1afe0:	2300      	movs	r3, #0
   1afe2:	4a0c      	ldr	r2, [pc, #48]	; (1b014 <flash_area_open+0x3c>)
   1afe4:	6812      	ldr	r2, [r2, #0]
   1afe6:	429a      	cmp	r2, r3
   1afe8:	dd0b      	ble.n	1b002 <flash_area_open+0x2a>
        area = flash_map + i;
   1afea:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1afee:	00a2      	lsls	r2, r4, #2
   1aff0:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1aff2:	5caa      	ldrb	r2, [r5, r2]
   1aff4:	4282      	cmp	r2, r0
   1aff6:	d001      	beq.n	1affc <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1aff8:	3301      	adds	r3, #1
   1affa:	e7f2      	b.n	1afe2 <flash_area_open+0xa>
            *fap = area;
   1affc:	600c      	str	r4, [r1, #0]
            return 0;
   1affe:	2000      	movs	r0, #0
   1b000:	e001      	b.n	1b006 <flash_area_open+0x2e>
    return SYS_ENOENT;
   1b002:	f06f 0003 	mvn.w	r0, #3
}
   1b006:	bc30      	pop	{r4, r5}
   1b008:	4770      	bx	lr
        return SYS_EACCES;
   1b00a:	f06f 0006 	mvn.w	r0, #6
   1b00e:	e7fa      	b.n	1b006 <flash_area_open+0x2e>
   1b010:	2000cf84 	.word	0x2000cf84
   1b014:	2000cf80 	.word	0x2000cf80

0001b018 <flash_area_read>:
{
   1b018:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1b01a:	6884      	ldr	r4, [r0, #8]
   1b01c:	428c      	cmp	r4, r1
   1b01e:	d308      	bcc.n	1b032 <flash_area_read+0x1a>
   1b020:	18cd      	adds	r5, r1, r3
   1b022:	42ac      	cmp	r4, r5
   1b024:	d308      	bcc.n	1b038 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1b026:	6844      	ldr	r4, [r0, #4]
   1b028:	4421      	add	r1, r4
   1b02a:	7840      	ldrb	r0, [r0, #1]
   1b02c:	f000 f9c8 	bl	1b3c0 <hal_flash_read>
}
   1b030:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1b032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b036:	e7fb      	b.n	1b030 <flash_area_read+0x18>
   1b038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b03c:	e7f8      	b.n	1b030 <flash_area_read+0x18>
	...

0001b040 <flash_map_init>:

void
flash_map_init(void)
{
   1b040:	b510      	push	{r4, lr}
   1b042:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b044:	4b14      	ldr	r3, [pc, #80]	; (1b098 <flash_map_init+0x58>)
   1b046:	781b      	ldrb	r3, [r3, #0]
   1b048:	b303      	cbz	r3, 1b08c <flash_map_init+0x4c>

    rc = hal_flash_init();
   1b04a:	f000 f9a5 	bl	1b398 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1b04e:	b138      	cbz	r0, 1b060 <flash_map_init+0x20>
   1b050:	2000      	movs	r0, #0
   1b052:	9000      	str	r0, [sp, #0]
   1b054:	4b11      	ldr	r3, [pc, #68]	; (1b09c <flash_map_init+0x5c>)
   1b056:	681c      	ldr	r4, [r3, #0]
   1b058:	4603      	mov	r3, r0
   1b05a:	4602      	mov	r2, r0
   1b05c:	4601      	mov	r1, r0
   1b05e:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1b060:	4b0f      	ldr	r3, [pc, #60]	; (1b0a0 <flash_map_init+0x60>)
   1b062:	4a10      	ldr	r2, [pc, #64]	; (1b0a4 <flash_map_init+0x64>)
   1b064:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1b066:	4b10      	ldr	r3, [pc, #64]	; (1b0a8 <flash_map_init+0x68>)
   1b068:	2206      	movs	r2, #6
   1b06a:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1b06c:	aa03      	add	r2, sp, #12
   1b06e:	490f      	ldr	r1, [pc, #60]	; (1b0ac <flash_map_init+0x6c>)
   1b070:	200a      	movs	r0, #10
   1b072:	f7ff ff75 	bl	1af60 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1b076:	b938      	cbnz	r0, 1b088 <flash_map_init+0x48>
   1b078:	9b03      	ldr	r3, [sp, #12]
   1b07a:	2b00      	cmp	r3, #0
   1b07c:	dd04      	ble.n	1b088 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1b07e:	4a08      	ldr	r2, [pc, #32]	; (1b0a0 <flash_map_init+0x60>)
   1b080:	490a      	ldr	r1, [pc, #40]	; (1b0ac <flash_map_init+0x6c>)
   1b082:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1b084:	4a08      	ldr	r2, [pc, #32]	; (1b0a8 <flash_map_init+0x68>)
   1b086:	6013      	str	r3, [r2, #0]
    }
}
   1b088:	b004      	add	sp, #16
   1b08a:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b08c:	461a      	mov	r2, r3
   1b08e:	4619      	mov	r1, r3
   1b090:	4618      	mov	r0, r3
   1b092:	f7fc fee3 	bl	17e5c <__assert_func>
   1b096:	bf00      	nop
   1b098:	2000cdbc 	.word	0x2000cdbc
   1b09c:	20000104 	.word	0x20000104
   1b0a0:	2000cf84 	.word	0x2000cf84
   1b0a4:	0001f5c4 	.word	0x0001f5c4
   1b0a8:	2000cf80 	.word	0x2000cf80
   1b0ac:	2000cd1c 	.word	0x2000cd1c

0001b0b0 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1b0b0:	4770      	bx	lr
	...

0001b0b4 <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1b0b4:	b530      	push	{r4, r5, lr}
   1b0b6:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1b0b8:	7885      	ldrb	r5, [r0, #2]
   1b0ba:	4b21      	ldr	r3, [pc, #132]	; (1b140 <mfg_seek_next_aux+0x8c>)
   1b0bc:	681b      	ldr	r3, [r3, #0]
   1b0be:	429d      	cmp	r5, r3
   1b0c0:	da32      	bge.n	1b128 <mfg_seek_next_aux+0x74>
   1b0c2:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1b0c4:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1b0c8:	0093      	lsls	r3, r2, #2
   1b0ca:	a901      	add	r1, sp, #4
   1b0cc:	4a1d      	ldr	r2, [pc, #116]	; (1b144 <mfg_seek_next_aux+0x90>)
   1b0ce:	5cd0      	ldrb	r0, [r2, r3]
   1b0d0:	f7ff ff82 	bl	1afd8 <flash_area_open>
    if (rc != 0) {
   1b0d4:	bb58      	cbnz	r0, 1b12e <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1b0d6:	6862      	ldr	r2, [r4, #4]
   1b0d8:	b9c2      	cbnz	r2, 1b10c <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1b0da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1b0de:	00aa      	lsls	r2, r5, #2
   1b0e0:	4b18      	ldr	r3, [pc, #96]	; (1b144 <mfg_seek_next_aux+0x90>)
   1b0e2:	4413      	add	r3, r2
   1b0e4:	685b      	ldr	r3, [r3, #4]
   1b0e6:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1b0e8:	6861      	ldr	r1, [r4, #4]
   1b0ea:	9801      	ldr	r0, [sp, #4]
   1b0ec:	6883      	ldr	r3, [r0, #8]
   1b0ee:	3b08      	subs	r3, #8
   1b0f0:	4299      	cmp	r1, r3
   1b0f2:	d310      	bcc.n	1b116 <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1b0f4:	78a3      	ldrb	r3, [r4, #2]
   1b0f6:	1c59      	adds	r1, r3, #1
   1b0f8:	4a11      	ldr	r2, [pc, #68]	; (1b140 <mfg_seek_next_aux+0x8c>)
   1b0fa:	6812      	ldr	r2, [r2, #0]
   1b0fc:	4291      	cmp	r1, r2
   1b0fe:	da19      	bge.n	1b134 <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1b100:	2200      	movs	r2, #0
   1b102:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1b104:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1b106:	f06f 0305 	mvn.w	r3, #5
   1b10a:	e015      	b.n	1b138 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1b10c:	7863      	ldrb	r3, [r4, #1]
   1b10e:	4413      	add	r3, r2
   1b110:	3302      	adds	r3, #2
   1b112:	6063      	str	r3, [r4, #4]
   1b114:	e7e8      	b.n	1b0e8 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1b116:	2302      	movs	r3, #2
   1b118:	4622      	mov	r2, r4
   1b11a:	f7ff ff7d 	bl	1b018 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1b11e:	4603      	mov	r3, r0
   1b120:	b150      	cbz	r0, 1b138 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1b122:	f06f 0304 	mvn.w	r3, #4
   1b126:	e007      	b.n	1b138 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1b128:	f06f 0301 	mvn.w	r3, #1
   1b12c:	e004      	b.n	1b138 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1b12e:	f06f 0304 	mvn.w	r3, #4
   1b132:	e001      	b.n	1b138 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1b134:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1b138:	4618      	mov	r0, r3
   1b13a:	b003      	add	sp, #12
   1b13c:	bd30      	pop	{r4, r5, pc}
   1b13e:	bf00      	nop
   1b140:	2000cdb0 	.word	0x2000cdb0
   1b144:	2000cd98 	.word	0x2000cd98

0001b148 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1b148:	b530      	push	{r4, r5, lr}
   1b14a:	b085      	sub	sp, #20
   1b14c:	4605      	mov	r5, r0
   1b14e:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1b150:	a903      	add	r1, sp, #12
   1b152:	f7ff ff41 	bl	1afd8 <flash_area_open>
    if (rc != 0) {
   1b156:	b9e8      	cbnz	r0, 1b194 <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1b158:	9803      	ldr	r0, [sp, #12]
   1b15a:	6881      	ldr	r1, [r0, #8]
   1b15c:	2308      	movs	r3, #8
   1b15e:	aa01      	add	r2, sp, #4
   1b160:	3908      	subs	r1, #8
   1b162:	f7ff ff59 	bl	1b018 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1b166:	4601      	mov	r1, r0
   1b168:	b9b8      	cbnz	r0, 1b19a <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1b16a:	9a02      	ldr	r2, [sp, #8]
   1b16c:	4b11      	ldr	r3, [pc, #68]	; (1b1b4 <mfg_read_mmr+0x6c>)
   1b16e:	429a      	cmp	r2, r3
   1b170:	d116      	bne.n	1b1a0 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1b172:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1b176:	2b02      	cmp	r3, #2
   1b178:	d115      	bne.n	1b1a6 <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1b17a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1b17e:	9b03      	ldr	r3, [sp, #12]
   1b180:	689b      	ldr	r3, [r3, #8]
   1b182:	429a      	cmp	r2, r3
   1b184:	d812      	bhi.n	1b1ac <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1b186:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1b188:	7025      	strb	r5, [r4, #0]
   1b18a:	6063      	str	r3, [r4, #4]
   1b18c:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1b18e:	4608      	mov	r0, r1
   1b190:	b005      	add	sp, #20
   1b192:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1b194:	f06f 0104 	mvn.w	r1, #4
   1b198:	e7f9      	b.n	1b18e <mfg_read_mmr+0x46>
        return SYS_EIO;
   1b19a:	f06f 0104 	mvn.w	r1, #4
   1b19e:	e7f6      	b.n	1b18e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b1a0:	f06f 0108 	mvn.w	r1, #8
   1b1a4:	e7f3      	b.n	1b18e <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1b1a6:	f06f 010b 	mvn.w	r1, #11
   1b1aa:	e7f0      	b.n	1b18e <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1b1ac:	f06f 0108 	mvn.w	r1, #8
   1b1b0:	e7ed      	b.n	1b18e <mfg_read_mmr+0x46>
   1b1b2:	bf00      	nop
   1b1b4:	3bb2a269 	.word	0x3bb2a269

0001b1b8 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1b1b8:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b1ba:	2300      	movs	r3, #0
   1b1bc:	4a11      	ldr	r2, [pc, #68]	; (1b204 <mfg_read_next_mmr+0x4c>)
   1b1be:	6812      	ldr	r2, [r2, #0]
   1b1c0:	429a      	cmp	r2, r3
   1b1c2:	dd08      	ble.n	1b1d6 <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1b1c4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1b1c8:	008a      	lsls	r2, r1, #2
   1b1ca:	490f      	ldr	r1, [pc, #60]	; (1b208 <mfg_read_next_mmr+0x50>)
   1b1cc:	5c8a      	ldrb	r2, [r1, r2]
   1b1ce:	4282      	cmp	r2, r0
   1b1d0:	d011      	beq.n	1b1f6 <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1b1d2:	3301      	adds	r3, #1
   1b1d4:	e7f2      	b.n	1b1bc <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1b1d6:	2a01      	cmp	r2, #1
   1b1d8:	dc11      	bgt.n	1b1fe <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1b1da:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1b1de:	0093      	lsls	r3, r2, #2
   1b1e0:	4909      	ldr	r1, [pc, #36]	; (1b208 <mfg_read_next_mmr+0x50>)
   1b1e2:	4419      	add	r1, r3
   1b1e4:	f7ff ffb0 	bl	1b148 <mfg_read_mmr>
    if (rc != 0) {
   1b1e8:	4603      	mov	r3, r0
   1b1ea:	b930      	cbnz	r0, 1b1fa <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1b1ec:	4905      	ldr	r1, [pc, #20]	; (1b204 <mfg_read_next_mmr+0x4c>)
   1b1ee:	680a      	ldr	r2, [r1, #0]
   1b1f0:	3201      	adds	r2, #1
   1b1f2:	600a      	str	r2, [r1, #0]
    return 0;
   1b1f4:	e001      	b.n	1b1fa <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1b1f6:	f06f 030a 	mvn.w	r3, #10
}
   1b1fa:	4618      	mov	r0, r3
   1b1fc:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1b1fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b202:	e7fa      	b.n	1b1fa <mfg_read_next_mmr+0x42>
   1b204:	2000cdb0 	.word	0x2000cdb0
   1b208:	2000cd98 	.word	0x2000cd98

0001b20c <mfg_open_flash_area>:
{
   1b20c:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b20e:	7883      	ldrb	r3, [r0, #2]
   1b210:	4a0b      	ldr	r2, [pc, #44]	; (1b240 <mfg_open_flash_area+0x34>)
   1b212:	6812      	ldr	r2, [r2, #0]
   1b214:	4293      	cmp	r3, r2
   1b216:	da0a      	bge.n	1b22e <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1b218:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1b21c:	009a      	lsls	r2, r3, #2
   1b21e:	4b09      	ldr	r3, [pc, #36]	; (1b244 <mfg_open_flash_area+0x38>)
   1b220:	5c98      	ldrb	r0, [r3, r2]
   1b222:	f7ff fed9 	bl	1afd8 <flash_area_open>
    if (rc != 0) {
   1b226:	4603      	mov	r3, r0
   1b228:	b938      	cbnz	r0, 1b23a <mfg_open_flash_area+0x2e>
}
   1b22a:	4618      	mov	r0, r3
   1b22c:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1b22e:	2300      	movs	r3, #0
   1b230:	461a      	mov	r2, r3
   1b232:	4619      	mov	r1, r3
   1b234:	4618      	mov	r0, r3
   1b236:	f7fc fe11 	bl	17e5c <__assert_func>
        return SYS_EIO;
   1b23a:	f06f 0304 	mvn.w	r3, #4
   1b23e:	e7f4      	b.n	1b22a <mfg_open_flash_area+0x1e>
   1b240:	2000cdb0 	.word	0x2000cdb0
   1b244:	2000cd98 	.word	0x2000cd98

0001b248 <mfg_read_tlv_body>:
{
   1b248:	b570      	push	{r4, r5, r6, lr}
   1b24a:	b082      	sub	sp, #8
   1b24c:	4606      	mov	r6, r0
   1b24e:	460c      	mov	r4, r1
   1b250:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1b252:	a901      	add	r1, sp, #4
   1b254:	f7ff ffda 	bl	1b20c <mfg_open_flash_area>
    if (rc != 0) {
   1b258:	4603      	mov	r3, r0
   1b25a:	b110      	cbz	r0, 1b262 <mfg_read_tlv_body+0x1a>
}
   1b25c:	4618      	mov	r0, r3
   1b25e:	b002      	add	sp, #8
   1b260:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1b262:	462a      	mov	r2, r5
   1b264:	2100      	movs	r1, #0
   1b266:	4620      	mov	r0, r4
   1b268:	f7fe f9fb 	bl	19662 <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1b26c:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1b26e:	6871      	ldr	r1, [r6, #4]
   1b270:	42ab      	cmp	r3, r5
   1b272:	bfa8      	it	ge
   1b274:	462b      	movge	r3, r5
   1b276:	4622      	mov	r2, r4
   1b278:	3102      	adds	r1, #2
   1b27a:	9801      	ldr	r0, [sp, #4]
   1b27c:	f7ff fecc 	bl	1b018 <flash_area_read>
    if (rc != 0) {
   1b280:	4603      	mov	r3, r0
   1b282:	2800      	cmp	r0, #0
   1b284:	d0ea      	beq.n	1b25c <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1b286:	f06f 0304 	mvn.w	r3, #4
   1b28a:	e7e7      	b.n	1b25c <mfg_read_tlv_body+0x14>

0001b28c <mfg_seek_next>:
{
   1b28c:	b510      	push	{r4, lr}
   1b28e:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1b290:	4620      	mov	r0, r4
   1b292:	f7ff ff0f 	bl	1b0b4 <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1b296:	f110 0f06 	cmn.w	r0, #6
   1b29a:	d0f9      	beq.n	1b290 <mfg_seek_next+0x4>
}
   1b29c:	bd10      	pop	{r4, pc}

0001b29e <mfg_seek_next_with_type>:
{
   1b29e:	b538      	push	{r3, r4, r5, lr}
   1b2a0:	4604      	mov	r4, r0
   1b2a2:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1b2a4:	4620      	mov	r0, r4
   1b2a6:	f7ff fff1 	bl	1b28c <mfg_seek_next>
        if (rc != 0) {
   1b2aa:	4602      	mov	r2, r0
   1b2ac:	b910      	cbnz	r0, 1b2b4 <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1b2ae:	7823      	ldrb	r3, [r4, #0]
   1b2b0:	42ab      	cmp	r3, r5
   1b2b2:	d1f7      	bne.n	1b2a4 <mfg_seek_next_with_type+0x6>
}
   1b2b4:	4610      	mov	r0, r2
   1b2b6:	bd38      	pop	{r3, r4, r5, pc}

0001b2b8 <mfg_read_tlv_flash_area>:
{
   1b2b8:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1b2ba:	220a      	movs	r2, #10
   1b2bc:	f7ff ffc4 	bl	1b248 <mfg_read_tlv_body>
}
   1b2c0:	bd08      	pop	{r3, pc}

0001b2c2 <mfg_read_tlv_mmr_ref>:
{
   1b2c2:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1b2c4:	2201      	movs	r2, #1
   1b2c6:	f7ff ffbf 	bl	1b248 <mfg_read_tlv_body>
}
   1b2ca:	bd08      	pop	{r3, pc}

0001b2cc <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1b2cc:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1b2ce:	4b0b      	ldr	r3, [pc, #44]	; (1b2fc <mfg_init+0x30>)
   1b2d0:	781b      	ldrb	r3, [r3, #0]
   1b2d2:	b94b      	cbnz	r3, 1b2e8 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1b2d4:	4b09      	ldr	r3, [pc, #36]	; (1b2fc <mfg_init+0x30>)
   1b2d6:	2201      	movs	r2, #1
   1b2d8:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1b2da:	4b09      	ldr	r3, [pc, #36]	; (1b300 <mfg_init+0x34>)
   1b2dc:	781b      	ldrb	r3, [r3, #0]
   1b2de:	b123      	cbz	r3, 1b2ea <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1b2e0:	2000      	movs	r0, #0
   1b2e2:	f7ff ff69 	bl	1b1b8 <mfg_read_next_mmr>
    if (rc != 0) {
   1b2e6:	b128      	cbz	r0, 1b2f4 <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1b2e8:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1b2ea:	461a      	mov	r2, r3
   1b2ec:	4619      	mov	r1, r3
   1b2ee:	4618      	mov	r0, r3
   1b2f0:	f7fc fdb4 	bl	17e5c <__assert_func>
    rc = mfg_read_mmr_refs();
   1b2f4:	f000 f80e 	bl	1b314 <mfg_read_mmr_refs>
err:
   1b2f8:	e7f6      	b.n	1b2e8 <mfg_init+0x1c>
   1b2fa:	bf00      	nop
   1b2fc:	2000cd94 	.word	0x2000cd94
   1b300:	2000cdbc 	.word	0x2000cdbc

0001b304 <mfg_open>:
{
   1b304:	b510      	push	{r4, lr}
   1b306:	4604      	mov	r4, r0
    mfg_init();
   1b308:	f7ff ffe0 	bl	1b2cc <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1b30c:	2300      	movs	r3, #0
   1b30e:	6023      	str	r3, [r4, #0]
   1b310:	6063      	str	r3, [r4, #4]
}
   1b312:	bd10      	pop	{r4, pc}

0001b314 <mfg_read_mmr_refs>:
{
   1b314:	b500      	push	{lr}
   1b316:	b085      	sub	sp, #20
    mfg_open(&reader);
   1b318:	a801      	add	r0, sp, #4
   1b31a:	f7ff fff3 	bl	1b304 <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1b31e:	2104      	movs	r1, #4
   1b320:	eb0d 0001 	add.w	r0, sp, r1
   1b324:	f7ff ffbb 	bl	1b29e <mfg_seek_next_with_type>
   1b328:	4603      	mov	r3, r0
        switch (rc) {
   1b32a:	f110 0f0f 	cmn.w	r0, #15
   1b32e:	d004      	beq.n	1b33a <mfg_read_mmr_refs+0x26>
   1b330:	b128      	cbz	r0, 1b33e <mfg_read_mmr_refs+0x2a>
}
   1b332:	4618      	mov	r0, r3
   1b334:	b005      	add	sp, #20
   1b336:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1b33a:	2300      	movs	r3, #0
   1b33c:	e7f9      	b.n	1b332 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1b33e:	a903      	add	r1, sp, #12
   1b340:	a801      	add	r0, sp, #4
   1b342:	f7ff ffbe 	bl	1b2c2 <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1b346:	4603      	mov	r3, r0
   1b348:	2800      	cmp	r0, #0
   1b34a:	d1f2      	bne.n	1b332 <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1b34c:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1b350:	f7ff ff32 	bl	1b1b8 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1b354:	4603      	mov	r3, r0
   1b356:	2800      	cmp	r0, #0
   1b358:	d0e1      	beq.n	1b31e <mfg_read_mmr_refs+0xa>
   1b35a:	f110 0f0b 	cmn.w	r0, #11
   1b35e:	d0de      	beq.n	1b31e <mfg_read_mmr_refs+0xa>
   1b360:	e7e7      	b.n	1b332 <mfg_read_mmr_refs+0x1e>
	...

0001b364 <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1b364:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1b366:	4803      	ldr	r0, [pc, #12]	; (1b374 <__wrap_coap_receive+0x10>)
   1b368:	f7fb feb0 	bl	170cc <console_printf>
    return -1;
}
   1b36c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b370:	bd08      	pop	{r3, pc}
   1b372:	bf00      	nop
   1b374:	0001f60c 	.word	0x0001f60c

0001b378 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1b378:	4770      	bx	lr

0001b37a <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1b37a:	6843      	ldr	r3, [r0, #4]
   1b37c:	428b      	cmp	r3, r1
   1b37e:	d808      	bhi.n	1b392 <hal_flash_check_addr+0x18>
   1b380:	6882      	ldr	r2, [r0, #8]
   1b382:	4413      	add	r3, r2
   1b384:	428b      	cmp	r3, r1
   1b386:	d301      	bcc.n	1b38c <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1b388:	2000      	movs	r0, #0
}
   1b38a:	4770      	bx	lr
        return SYS_EINVAL;
   1b38c:	f06f 0001 	mvn.w	r0, #1
   1b390:	4770      	bx	lr
   1b392:	f06f 0001 	mvn.w	r0, #1
   1b396:	4770      	bx	lr

0001b398 <hal_flash_init>:
{
   1b398:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1b39a:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1b39c:	462c      	mov	r4, r5
   1b39e:	e001      	b.n	1b3a4 <hal_flash_init+0xc>
   1b3a0:	3401      	adds	r4, #1
   1b3a2:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1b3a4:	4620      	mov	r0, r4
   1b3a6:	f7fe fce3 	bl	19d70 <hal_bsp_flash_dev>
        if (!hf) {
   1b3aa:	b138      	cbz	r0, 1b3bc <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1b3ac:	6802      	ldr	r2, [r0, #0]
   1b3ae:	6952      	ldr	r2, [r2, #20]
   1b3b0:	4790      	blx	r2
   1b3b2:	2800      	cmp	r0, #0
   1b3b4:	d0f4      	beq.n	1b3a0 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1b3b6:	f06f 0504 	mvn.w	r5, #4
   1b3ba:	e7f1      	b.n	1b3a0 <hal_flash_init+0x8>
}
   1b3bc:	4628      	mov	r0, r5
   1b3be:	bd38      	pop	{r3, r4, r5, pc}

0001b3c0 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1b3c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3c4:	460d      	mov	r5, r1
   1b3c6:	4690      	mov	r8, r2
   1b3c8:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1b3ca:	f7fe fcd1 	bl	19d70 <hal_bsp_flash_dev>
    if (!hf) {
   1b3ce:	b1c0      	cbz	r0, 1b402 <hal_flash_read+0x42>
   1b3d0:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1b3d2:	4629      	mov	r1, r5
   1b3d4:	f7ff ffd1 	bl	1b37a <hal_flash_check_addr>
   1b3d8:	b9b0      	cbnz	r0, 1b408 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1b3da:	19a9      	adds	r1, r5, r6
   1b3dc:	4620      	mov	r0, r4
   1b3de:	f7ff ffcc 	bl	1b37a <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1b3e2:	b9a0      	cbnz	r0, 1b40e <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1b3e4:	6823      	ldr	r3, [r4, #0]
   1b3e6:	681f      	ldr	r7, [r3, #0]
   1b3e8:	4633      	mov	r3, r6
   1b3ea:	4642      	mov	r2, r8
   1b3ec:	4629      	mov	r1, r5
   1b3ee:	4620      	mov	r0, r4
   1b3f0:	47b8      	blx	r7
    if (rc != 0) {
   1b3f2:	4603      	mov	r3, r0
   1b3f4:	b910      	cbnz	r0, 1b3fc <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1b3f6:	4618      	mov	r0, r3
   1b3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1b3fc:	f06f 0304 	mvn.w	r3, #4
   1b400:	e7f9      	b.n	1b3f6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b402:	f06f 0301 	mvn.w	r3, #1
   1b406:	e7f6      	b.n	1b3f6 <hal_flash_read+0x36>
        return SYS_EINVAL;
   1b408:	f06f 0301 	mvn.w	r3, #1
   1b40c:	e7f3      	b.n	1b3f6 <hal_flash_read+0x36>
   1b40e:	f06f 0301 	mvn.w	r3, #1
   1b412:	e7f0      	b.n	1b3f6 <hal_flash_read+0x36>

0001b414 <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1b414:	2010      	movs	r0, #16
   1b416:	4770      	bx	lr

0001b418 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1b418:	b570      	push	{r4, r5, r6, lr}
   1b41a:	4606      	mov	r6, r0
   1b41c:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1b41e:	460d      	mov	r5, r1
   1b420:	2908      	cmp	r1, #8
   1b422:	bf28      	it	cs
   1b424:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1b426:	462a      	mov	r2, r5
   1b428:	4906      	ldr	r1, [pc, #24]	; (1b444 <hal_bsp_hw_id+0x2c>)
   1b42a:	f7fe f90d 	bl	19648 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1b42e:	1b64      	subs	r4, r4, r5
   1b430:	2c08      	cmp	r4, #8
   1b432:	bf28      	it	cs
   1b434:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1b436:	4622      	mov	r2, r4
   1b438:	4903      	ldr	r1, [pc, #12]	; (1b448 <hal_bsp_hw_id+0x30>)
   1b43a:	1970      	adds	r0, r6, r5
   1b43c:	f7fe f904 	bl	19648 <memcpy>

    return len + cnt;
}
   1b440:	1928      	adds	r0, r5, r4
   1b442:	bd70      	pop	{r4, r5, r6, pc}
   1b444:	10000060 	.word	0x10000060
   1b448:	100000a4 	.word	0x100000a4

0001b44c <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1b44c:	b40e      	push	{r1, r2, r3}
   1b44e:	b500      	push	{lr}
   1b450:	b082      	sub	sp, #8
   1b452:	ab03      	add	r3, sp, #12
   1b454:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1b458:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1b45a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1b45e:	f7fe fbef 	bl	19c40 <vsnprintf>
	va_end(ap);

	return rv;
}
   1b462:	b002      	add	sp, #8
   1b464:	f85d eb04 	ldr.w	lr, [sp], #4
   1b468:	b003      	add	sp, #12
   1b46a:	4770      	bx	lr

0001b46c <__aeabi_uldivmod>:
   1b46c:	b953      	cbnz	r3, 1b484 <__aeabi_uldivmod+0x18>
   1b46e:	b94a      	cbnz	r2, 1b484 <__aeabi_uldivmod+0x18>
   1b470:	2900      	cmp	r1, #0
   1b472:	bf08      	it	eq
   1b474:	2800      	cmpeq	r0, #0
   1b476:	bf1c      	itt	ne
   1b478:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1b47c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1b480:	f000 b972 	b.w	1b768 <__aeabi_idiv0>
   1b484:	f1ad 0c08 	sub.w	ip, sp, #8
   1b488:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1b48c:	f000 f806 	bl	1b49c <__udivmoddi4>
   1b490:	f8dd e004 	ldr.w	lr, [sp, #4]
   1b494:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1b498:	b004      	add	sp, #16
   1b49a:	4770      	bx	lr

0001b49c <__udivmoddi4>:
   1b49c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b4a0:	9e08      	ldr	r6, [sp, #32]
   1b4a2:	4604      	mov	r4, r0
   1b4a4:	4688      	mov	r8, r1
   1b4a6:	2b00      	cmp	r3, #0
   1b4a8:	d14b      	bne.n	1b542 <__udivmoddi4+0xa6>
   1b4aa:	428a      	cmp	r2, r1
   1b4ac:	4615      	mov	r5, r2
   1b4ae:	d967      	bls.n	1b580 <__udivmoddi4+0xe4>
   1b4b0:	fab2 f282 	clz	r2, r2
   1b4b4:	b14a      	cbz	r2, 1b4ca <__udivmoddi4+0x2e>
   1b4b6:	f1c2 0720 	rsb	r7, r2, #32
   1b4ba:	fa01 f302 	lsl.w	r3, r1, r2
   1b4be:	fa20 f707 	lsr.w	r7, r0, r7
   1b4c2:	4095      	lsls	r5, r2
   1b4c4:	ea47 0803 	orr.w	r8, r7, r3
   1b4c8:	4094      	lsls	r4, r2
   1b4ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b4ce:	0c23      	lsrs	r3, r4, #16
   1b4d0:	fbb8 f7fe 	udiv	r7, r8, lr
   1b4d4:	fa1f fc85 	uxth.w	ip, r5
   1b4d8:	fb0e 8817 	mls	r8, lr, r7, r8
   1b4dc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1b4e0:	fb07 f10c 	mul.w	r1, r7, ip
   1b4e4:	4299      	cmp	r1, r3
   1b4e6:	d909      	bls.n	1b4fc <__udivmoddi4+0x60>
   1b4e8:	18eb      	adds	r3, r5, r3
   1b4ea:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1b4ee:	f080 811b 	bcs.w	1b728 <__udivmoddi4+0x28c>
   1b4f2:	4299      	cmp	r1, r3
   1b4f4:	f240 8118 	bls.w	1b728 <__udivmoddi4+0x28c>
   1b4f8:	3f02      	subs	r7, #2
   1b4fa:	442b      	add	r3, r5
   1b4fc:	1a5b      	subs	r3, r3, r1
   1b4fe:	b2a4      	uxth	r4, r4
   1b500:	fbb3 f0fe 	udiv	r0, r3, lr
   1b504:	fb0e 3310 	mls	r3, lr, r0, r3
   1b508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1b50c:	fb00 fc0c 	mul.w	ip, r0, ip
   1b510:	45a4      	cmp	ip, r4
   1b512:	d909      	bls.n	1b528 <__udivmoddi4+0x8c>
   1b514:	192c      	adds	r4, r5, r4
   1b516:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b51a:	f080 8107 	bcs.w	1b72c <__udivmoddi4+0x290>
   1b51e:	45a4      	cmp	ip, r4
   1b520:	f240 8104 	bls.w	1b72c <__udivmoddi4+0x290>
   1b524:	3802      	subs	r0, #2
   1b526:	442c      	add	r4, r5
   1b528:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1b52c:	eba4 040c 	sub.w	r4, r4, ip
   1b530:	2700      	movs	r7, #0
   1b532:	b11e      	cbz	r6, 1b53c <__udivmoddi4+0xa0>
   1b534:	40d4      	lsrs	r4, r2
   1b536:	2300      	movs	r3, #0
   1b538:	e9c6 4300 	strd	r4, r3, [r6]
   1b53c:	4639      	mov	r1, r7
   1b53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b542:	428b      	cmp	r3, r1
   1b544:	d909      	bls.n	1b55a <__udivmoddi4+0xbe>
   1b546:	2e00      	cmp	r6, #0
   1b548:	f000 80eb 	beq.w	1b722 <__udivmoddi4+0x286>
   1b54c:	2700      	movs	r7, #0
   1b54e:	e9c6 0100 	strd	r0, r1, [r6]
   1b552:	4638      	mov	r0, r7
   1b554:	4639      	mov	r1, r7
   1b556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b55a:	fab3 f783 	clz	r7, r3
   1b55e:	2f00      	cmp	r7, #0
   1b560:	d147      	bne.n	1b5f2 <__udivmoddi4+0x156>
   1b562:	428b      	cmp	r3, r1
   1b564:	d302      	bcc.n	1b56c <__udivmoddi4+0xd0>
   1b566:	4282      	cmp	r2, r0
   1b568:	f200 80fa 	bhi.w	1b760 <__udivmoddi4+0x2c4>
   1b56c:	1a84      	subs	r4, r0, r2
   1b56e:	eb61 0303 	sbc.w	r3, r1, r3
   1b572:	2001      	movs	r0, #1
   1b574:	4698      	mov	r8, r3
   1b576:	2e00      	cmp	r6, #0
   1b578:	d0e0      	beq.n	1b53c <__udivmoddi4+0xa0>
   1b57a:	e9c6 4800 	strd	r4, r8, [r6]
   1b57e:	e7dd      	b.n	1b53c <__udivmoddi4+0xa0>
   1b580:	b902      	cbnz	r2, 1b584 <__udivmoddi4+0xe8>
   1b582:	deff      	udf	#255	; 0xff
   1b584:	fab2 f282 	clz	r2, r2
   1b588:	2a00      	cmp	r2, #0
   1b58a:	f040 808f 	bne.w	1b6ac <__udivmoddi4+0x210>
   1b58e:	1b49      	subs	r1, r1, r5
   1b590:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b594:	fa1f f885 	uxth.w	r8, r5
   1b598:	2701      	movs	r7, #1
   1b59a:	fbb1 fcfe 	udiv	ip, r1, lr
   1b59e:	0c23      	lsrs	r3, r4, #16
   1b5a0:	fb0e 111c 	mls	r1, lr, ip, r1
   1b5a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1b5a8:	fb08 f10c 	mul.w	r1, r8, ip
   1b5ac:	4299      	cmp	r1, r3
   1b5ae:	d907      	bls.n	1b5c0 <__udivmoddi4+0x124>
   1b5b0:	18eb      	adds	r3, r5, r3
   1b5b2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1b5b6:	d202      	bcs.n	1b5be <__udivmoddi4+0x122>
   1b5b8:	4299      	cmp	r1, r3
   1b5ba:	f200 80cd 	bhi.w	1b758 <__udivmoddi4+0x2bc>
   1b5be:	4684      	mov	ip, r0
   1b5c0:	1a59      	subs	r1, r3, r1
   1b5c2:	b2a3      	uxth	r3, r4
   1b5c4:	fbb1 f0fe 	udiv	r0, r1, lr
   1b5c8:	fb0e 1410 	mls	r4, lr, r0, r1
   1b5cc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1b5d0:	fb08 f800 	mul.w	r8, r8, r0
   1b5d4:	45a0      	cmp	r8, r4
   1b5d6:	d907      	bls.n	1b5e8 <__udivmoddi4+0x14c>
   1b5d8:	192c      	adds	r4, r5, r4
   1b5da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b5de:	d202      	bcs.n	1b5e6 <__udivmoddi4+0x14a>
   1b5e0:	45a0      	cmp	r8, r4
   1b5e2:	f200 80b6 	bhi.w	1b752 <__udivmoddi4+0x2b6>
   1b5e6:	4618      	mov	r0, r3
   1b5e8:	eba4 0408 	sub.w	r4, r4, r8
   1b5ec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1b5f0:	e79f      	b.n	1b532 <__udivmoddi4+0x96>
   1b5f2:	f1c7 0c20 	rsb	ip, r7, #32
   1b5f6:	40bb      	lsls	r3, r7
   1b5f8:	fa22 fe0c 	lsr.w	lr, r2, ip
   1b5fc:	ea4e 0e03 	orr.w	lr, lr, r3
   1b600:	fa01 f407 	lsl.w	r4, r1, r7
   1b604:	fa20 f50c 	lsr.w	r5, r0, ip
   1b608:	fa21 f30c 	lsr.w	r3, r1, ip
   1b60c:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1b610:	4325      	orrs	r5, r4
   1b612:	fbb3 f9f8 	udiv	r9, r3, r8
   1b616:	0c2c      	lsrs	r4, r5, #16
   1b618:	fb08 3319 	mls	r3, r8, r9, r3
   1b61c:	fa1f fa8e 	uxth.w	sl, lr
   1b620:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1b624:	fb09 f40a 	mul.w	r4, r9, sl
   1b628:	429c      	cmp	r4, r3
   1b62a:	fa02 f207 	lsl.w	r2, r2, r7
   1b62e:	fa00 f107 	lsl.w	r1, r0, r7
   1b632:	d90b      	bls.n	1b64c <__udivmoddi4+0x1b0>
   1b634:	eb1e 0303 	adds.w	r3, lr, r3
   1b638:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1b63c:	f080 8087 	bcs.w	1b74e <__udivmoddi4+0x2b2>
   1b640:	429c      	cmp	r4, r3
   1b642:	f240 8084 	bls.w	1b74e <__udivmoddi4+0x2b2>
   1b646:	f1a9 0902 	sub.w	r9, r9, #2
   1b64a:	4473      	add	r3, lr
   1b64c:	1b1b      	subs	r3, r3, r4
   1b64e:	b2ad      	uxth	r5, r5
   1b650:	fbb3 f0f8 	udiv	r0, r3, r8
   1b654:	fb08 3310 	mls	r3, r8, r0, r3
   1b658:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1b65c:	fb00 fa0a 	mul.w	sl, r0, sl
   1b660:	45a2      	cmp	sl, r4
   1b662:	d908      	bls.n	1b676 <__udivmoddi4+0x1da>
   1b664:	eb1e 0404 	adds.w	r4, lr, r4
   1b668:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1b66c:	d26b      	bcs.n	1b746 <__udivmoddi4+0x2aa>
   1b66e:	45a2      	cmp	sl, r4
   1b670:	d969      	bls.n	1b746 <__udivmoddi4+0x2aa>
   1b672:	3802      	subs	r0, #2
   1b674:	4474      	add	r4, lr
   1b676:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1b67a:	fba0 8902 	umull	r8, r9, r0, r2
   1b67e:	eba4 040a 	sub.w	r4, r4, sl
   1b682:	454c      	cmp	r4, r9
   1b684:	46c2      	mov	sl, r8
   1b686:	464b      	mov	r3, r9
   1b688:	d354      	bcc.n	1b734 <__udivmoddi4+0x298>
   1b68a:	d051      	beq.n	1b730 <__udivmoddi4+0x294>
   1b68c:	2e00      	cmp	r6, #0
   1b68e:	d069      	beq.n	1b764 <__udivmoddi4+0x2c8>
   1b690:	ebb1 050a 	subs.w	r5, r1, sl
   1b694:	eb64 0403 	sbc.w	r4, r4, r3
   1b698:	fa04 fc0c 	lsl.w	ip, r4, ip
   1b69c:	40fd      	lsrs	r5, r7
   1b69e:	40fc      	lsrs	r4, r7
   1b6a0:	ea4c 0505 	orr.w	r5, ip, r5
   1b6a4:	e9c6 5400 	strd	r5, r4, [r6]
   1b6a8:	2700      	movs	r7, #0
   1b6aa:	e747      	b.n	1b53c <__udivmoddi4+0xa0>
   1b6ac:	f1c2 0320 	rsb	r3, r2, #32
   1b6b0:	fa20 f703 	lsr.w	r7, r0, r3
   1b6b4:	4095      	lsls	r5, r2
   1b6b6:	fa01 f002 	lsl.w	r0, r1, r2
   1b6ba:	fa21 f303 	lsr.w	r3, r1, r3
   1b6be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1b6c2:	4338      	orrs	r0, r7
   1b6c4:	0c01      	lsrs	r1, r0, #16
   1b6c6:	fbb3 f7fe 	udiv	r7, r3, lr
   1b6ca:	fa1f f885 	uxth.w	r8, r5
   1b6ce:	fb0e 3317 	mls	r3, lr, r7, r3
   1b6d2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b6d6:	fb07 f308 	mul.w	r3, r7, r8
   1b6da:	428b      	cmp	r3, r1
   1b6dc:	fa04 f402 	lsl.w	r4, r4, r2
   1b6e0:	d907      	bls.n	1b6f2 <__udivmoddi4+0x256>
   1b6e2:	1869      	adds	r1, r5, r1
   1b6e4:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1b6e8:	d22f      	bcs.n	1b74a <__udivmoddi4+0x2ae>
   1b6ea:	428b      	cmp	r3, r1
   1b6ec:	d92d      	bls.n	1b74a <__udivmoddi4+0x2ae>
   1b6ee:	3f02      	subs	r7, #2
   1b6f0:	4429      	add	r1, r5
   1b6f2:	1acb      	subs	r3, r1, r3
   1b6f4:	b281      	uxth	r1, r0
   1b6f6:	fbb3 f0fe 	udiv	r0, r3, lr
   1b6fa:	fb0e 3310 	mls	r3, lr, r0, r3
   1b6fe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1b702:	fb00 f308 	mul.w	r3, r0, r8
   1b706:	428b      	cmp	r3, r1
   1b708:	d907      	bls.n	1b71a <__udivmoddi4+0x27e>
   1b70a:	1869      	adds	r1, r5, r1
   1b70c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1b710:	d217      	bcs.n	1b742 <__udivmoddi4+0x2a6>
   1b712:	428b      	cmp	r3, r1
   1b714:	d915      	bls.n	1b742 <__udivmoddi4+0x2a6>
   1b716:	3802      	subs	r0, #2
   1b718:	4429      	add	r1, r5
   1b71a:	1ac9      	subs	r1, r1, r3
   1b71c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1b720:	e73b      	b.n	1b59a <__udivmoddi4+0xfe>
   1b722:	4637      	mov	r7, r6
   1b724:	4630      	mov	r0, r6
   1b726:	e709      	b.n	1b53c <__udivmoddi4+0xa0>
   1b728:	4607      	mov	r7, r0
   1b72a:	e6e7      	b.n	1b4fc <__udivmoddi4+0x60>
   1b72c:	4618      	mov	r0, r3
   1b72e:	e6fb      	b.n	1b528 <__udivmoddi4+0x8c>
   1b730:	4541      	cmp	r1, r8
   1b732:	d2ab      	bcs.n	1b68c <__udivmoddi4+0x1f0>
   1b734:	ebb8 0a02 	subs.w	sl, r8, r2
   1b738:	eb69 020e 	sbc.w	r2, r9, lr
   1b73c:	3801      	subs	r0, #1
   1b73e:	4613      	mov	r3, r2
   1b740:	e7a4      	b.n	1b68c <__udivmoddi4+0x1f0>
   1b742:	4660      	mov	r0, ip
   1b744:	e7e9      	b.n	1b71a <__udivmoddi4+0x27e>
   1b746:	4618      	mov	r0, r3
   1b748:	e795      	b.n	1b676 <__udivmoddi4+0x1da>
   1b74a:	4667      	mov	r7, ip
   1b74c:	e7d1      	b.n	1b6f2 <__udivmoddi4+0x256>
   1b74e:	4681      	mov	r9, r0
   1b750:	e77c      	b.n	1b64c <__udivmoddi4+0x1b0>
   1b752:	3802      	subs	r0, #2
   1b754:	442c      	add	r4, r5
   1b756:	e747      	b.n	1b5e8 <__udivmoddi4+0x14c>
   1b758:	f1ac 0c02 	sub.w	ip, ip, #2
   1b75c:	442b      	add	r3, r5
   1b75e:	e72f      	b.n	1b5c0 <__udivmoddi4+0x124>
   1b760:	4638      	mov	r0, r7
   1b762:	e708      	b.n	1b576 <__udivmoddi4+0xda>
   1b764:	4637      	mov	r7, r6
   1b766:	e6e9      	b.n	1b53c <__udivmoddi4+0xa0>

0001b768 <__aeabi_idiv0>:
   1b768:	4770      	bx	lr
   1b76a:	bf00      	nop

0001b76c <__aeabi_memclr>:
   1b76c:	2200      	movs	r2, #0
   1b76e:	f000 b803 	b.w	1b778 <__aeabi_memset>
   1b772:	bf00      	nop

0001b774 <__aeabi_memcpy>:
   1b774:	f7fd bf68 	b.w	19648 <memcpy>

0001b778 <__aeabi_memset>:
   1b778:	b470      	push	{r4, r5, r6}
   1b77a:	0784      	lsls	r4, r0, #30
   1b77c:	d046      	beq.n	1b80c <__aeabi_memset+0x94>
   1b77e:	1e4c      	subs	r4, r1, #1
   1b780:	2900      	cmp	r1, #0
   1b782:	d041      	beq.n	1b808 <__aeabi_memset+0x90>
   1b784:	b2d5      	uxtb	r5, r2
   1b786:	4603      	mov	r3, r0
   1b788:	e002      	b.n	1b790 <__aeabi_memset+0x18>
   1b78a:	1e61      	subs	r1, r4, #1
   1b78c:	b3e4      	cbz	r4, 1b808 <__aeabi_memset+0x90>
   1b78e:	460c      	mov	r4, r1
   1b790:	f803 5b01 	strb.w	r5, [r3], #1
   1b794:	0799      	lsls	r1, r3, #30
   1b796:	d1f8      	bne.n	1b78a <__aeabi_memset+0x12>
   1b798:	2c03      	cmp	r4, #3
   1b79a:	d92e      	bls.n	1b7fa <__aeabi_memset+0x82>
   1b79c:	b2d5      	uxtb	r5, r2
   1b79e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1b7a2:	2c0f      	cmp	r4, #15
   1b7a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1b7a8:	d919      	bls.n	1b7de <__aeabi_memset+0x66>
   1b7aa:	4626      	mov	r6, r4
   1b7ac:	f103 0110 	add.w	r1, r3, #16
   1b7b0:	3e10      	subs	r6, #16
   1b7b2:	2e0f      	cmp	r6, #15
   1b7b4:	f841 5c10 	str.w	r5, [r1, #-16]
   1b7b8:	f841 5c0c 	str.w	r5, [r1, #-12]
   1b7bc:	f841 5c08 	str.w	r5, [r1, #-8]
   1b7c0:	f841 5c04 	str.w	r5, [r1, #-4]
   1b7c4:	f101 0110 	add.w	r1, r1, #16
   1b7c8:	d8f2      	bhi.n	1b7b0 <__aeabi_memset+0x38>
   1b7ca:	f1a4 0110 	sub.w	r1, r4, #16
   1b7ce:	f021 010f 	bic.w	r1, r1, #15
   1b7d2:	f004 040f 	and.w	r4, r4, #15
   1b7d6:	3110      	adds	r1, #16
   1b7d8:	2c03      	cmp	r4, #3
   1b7da:	440b      	add	r3, r1
   1b7dc:	d90d      	bls.n	1b7fa <__aeabi_memset+0x82>
   1b7de:	461e      	mov	r6, r3
   1b7e0:	4621      	mov	r1, r4
   1b7e2:	3904      	subs	r1, #4
   1b7e4:	2903      	cmp	r1, #3
   1b7e6:	f846 5b04 	str.w	r5, [r6], #4
   1b7ea:	d8fa      	bhi.n	1b7e2 <__aeabi_memset+0x6a>
   1b7ec:	1f21      	subs	r1, r4, #4
   1b7ee:	f021 0103 	bic.w	r1, r1, #3
   1b7f2:	3104      	adds	r1, #4
   1b7f4:	440b      	add	r3, r1
   1b7f6:	f004 0403 	and.w	r4, r4, #3
   1b7fa:	b12c      	cbz	r4, 1b808 <__aeabi_memset+0x90>
   1b7fc:	b2d2      	uxtb	r2, r2
   1b7fe:	441c      	add	r4, r3
   1b800:	f803 2b01 	strb.w	r2, [r3], #1
   1b804:	42a3      	cmp	r3, r4
   1b806:	d1fb      	bne.n	1b800 <__aeabi_memset+0x88>
   1b808:	bc70      	pop	{r4, r5, r6}
   1b80a:	4770      	bx	lr
   1b80c:	460c      	mov	r4, r1
   1b80e:	4603      	mov	r3, r0
   1b810:	e7c2      	b.n	1b798 <__aeabi_memset+0x20>
   1b812:	5344      	.short	0x5344
   1b814:	61662050 	.word	0x61662050
   1b818:	43546c69 	.word	0x43546c69
   1b81c:	61662048 	.word	0x61662048
   1b820:	45476c69 	.word	0x45476c69
   1b824:	61662054 	.word	0x61662054
   1b828:	55526c69 	.word	0x55526c69
   1b82c:	6166204e 	.word	0x6166204e
   1b830:	6c69      	.short	0x6c69
   1b832:	7572      	.short	0x7572
   1b834:	612f7473 	.word	0x612f7473
   1b838:	732f7070 	.word	0x732f7070
   1b83c:	6c2f6372 	.word	0x6c2f6372
   1b840:	722e6269 	.word	0x722e6269
   1b844:	00000073 	.word	0x00000073
   1b848:	0001b832 	.word	0x0001b832
   1b84c:	00000013 	.word	0x00000013
   1b850:	0000005b 	.word	0x0000005b
   1b854:	00000005 	.word	0x00000005
   1b858:	0001b832 	.word	0x0001b832
   1b85c:	00000013 	.word	0x00000013
   1b860:	00000064 	.word	0x00000064
   1b864:	00000005 	.word	0x00000005
   1b868:	50494843 	.word	0x50494843
   1b86c:	61662038 	.word	0x61662038
   1b870:	00006c69 	.word	0x00006c69
   1b874:	0001b832 	.word	0x0001b832
   1b878:	00000013 	.word	0x00000013
   1b87c:	00000076 	.word	0x00000076
   1b880:	00000005 	.word	0x00000005
   1b884:	0001b832 	.word	0x0001b832
   1b888:	00000013 	.word	0x00000013
   1b88c:	0000007c 	.word	0x0000007c
   1b890:	0000000d 	.word	0x0000000d
   1b894:	0001b832 	.word	0x0001b832
   1b898:	00000013 	.word	0x00000013
   1b89c:	0000007b 	.word	0x0000007b
   1b8a0:	00000009 	.word	0x00000009
   1b8a4:	696e6170 	.word	0x696e6170
   1b8a8:	2063      	.short	0x2063
   1b8aa:	6f6e      	.short	0x6f6e
   1b8ac:	636f6c20 	.word	0x636f6c20
   1b8b0:	0a          	.byte	0x0a
   1b8b1:	61          	.byte	0x61
   1b8b2:	2074      	.short	0x2074
   1b8b4:	6e696c20 	.word	0x6e696c20
   1b8b8:	2065      	.short	0x2065
   1b8ba:	000a      	.short	0x000a
   1b8bc:	0001b832 	.word	0x0001b832
   1b8c0:	00000013 	.word	0x00000013
   1b8c4:	00000094 	.word	0x00000094
   1b8c8:	00000014 	.word	0x00000014
   1b8cc:	00008827 	.word	0x00008827
   1b8d0:	00000004 	.word	0x00000004
   1b8d4:	00000004 	.word	0x00000004
   1b8d8:	00008a91 	.word	0x00008a91
   1b8dc:	00000000 	.word	0x00000000
   1b8e0:	0001b8dc 	.word	0x0001b8dc
   1b8e4:	0001b8e0 	.word	0x0001b8e0
   1b8e8:	65737361 	.word	0x65737361
   1b8ec:	6f697472 	.word	0x6f697472
   1b8f0:	6166206e 	.word	0x6166206e
   1b8f4:	64656c69 	.word	0x64656c69
   1b8f8:	2860203a 	.word	0x2860203a
   1b8fc:	7466656c 	.word	0x7466656c
   1b900:	203d3d20 	.word	0x203d3d20
   1b904:	68676972 	.word	0x68676972
   1b908:	0a602974 	.word	0x0a602974
   1b90c:	656c2020 	.word	0x656c2020
   1b910:	203a7466 	.word	0x203a7466
   1b914:	60          	.byte	0x60
   1b915:	60          	.byte	0x60
   1b916:	0a2c      	.short	0x0a2c
   1b918:	67697220 	.word	0x67697220
   1b91c:	203a7468 	.word	0x203a7468
   1b920:	60          	.byte	0x60
   1b921:	60          	.byte	0x60
   1b922:	203a      	.short	0x203a
   1b924:	0001b8e8 	.word	0x0001b8e8
   1b928:	0000002d 	.word	0x0000002d
   1b92c:	0001b915 	.word	0x0001b915
   1b930:	0000000c 	.word	0x0000000c
   1b934:	0001b921 	.word	0x0001b921
   1b938:	00000003 	.word	0x00000003
   1b93c:	0001b924 	.word	0x0001b924
   1b940:	6e206f6e 	.word	0x6e206f6e
   1b944:	006c6c75 	.word	0x006c6c75
   1b948:	0001b940 	.word	0x0001b940
   1b94c:	00000007 	.word	0x00000007
   1b950:	0001b948 	.word	0x0001b948
   1b954:	0001b954 	.word	0x0001b954
   1b958:	74737572 	.word	0x74737572
   1b95c:	6e796d2f 	.word	0x6e796d2f
   1b960:	2f747765 	.word	0x2f747765
   1b964:	2f637273 	.word	0x2f637273
   1b968:	2e62696c 	.word	0x2e62696c
   1b96c:	00007372 	.word	0x00007372
   1b970:	0001b958 	.word	0x0001b958
   1b974:	00000016 	.word	0x00000016
   1b978:	000000db 	.word	0x000000db
   1b97c:	00000011 	.word	0x00000011
   1b980:	00008c6f 	.word	0x00008c6f
   1b984:	00000004 	.word	0x00000004
   1b988:	00000004 	.word	0x00000004
   1b98c:	00008a91 	.word	0x00008a91
   1b990:	65737361 	.word	0x65737361
   1b994:	6f697472 	.word	0x6f697472
   1b998:	6166206e 	.word	0x6166206e
   1b99c:	64656c69 	.word	0x64656c69
   1b9a0:	2860203a 	.word	0x2860203a
   1b9a4:	7466656c 	.word	0x7466656c
   1b9a8:	203d3d20 	.word	0x203d3d20
   1b9ac:	68676972 	.word	0x68676972
   1b9b0:	0a602974 	.word	0x0a602974
   1b9b4:	656c2020 	.word	0x656c2020
   1b9b8:	203a7466 	.word	0x203a7466
   1b9bc:	60          	.byte	0x60
   1b9bd:	60          	.byte	0x60
   1b9be:	0a2c      	.short	0x0a2c
   1b9c0:	67697220 	.word	0x67697220
   1b9c4:	203a7468 	.word	0x203a7468
   1b9c8:	60          	.byte	0x60
   1b9c9:	60          	.byte	0x60
   1b9ca:	203a      	.short	0x203a
   1b9cc:	0001b990 	.word	0x0001b990
   1b9d0:	0000002d 	.word	0x0000002d
   1b9d4:	0001b9bd 	.word	0x0001b9bd
   1b9d8:	0000000c 	.word	0x0000000c
   1b9dc:	0001b9c9 	.word	0x0001b9c9
   1b9e0:	00000003 	.word	0x00000003
   1b9e4:	0001b9cc 	.word	0x0001b9cc
   1b9e8:	74736564 	.word	0x74736564
   1b9ec:	74616e69 	.word	0x74616e69
   1b9f0:	206e6f69 	.word	0x206e6f69
   1b9f4:	20646e61 	.word	0x20646e61
   1b9f8:	72756f73 	.word	0x72756f73
   1b9fc:	73206563 	.word	0x73206563
   1ba00:	6563696c 	.word	0x6563696c
   1ba04:	61682073 	.word	0x61682073
   1ba08:	64206576 	.word	0x64206576
   1ba0c:	65666669 	.word	0x65666669
   1ba10:	746e6572 	.word	0x746e6572
   1ba14:	6e656c20 	.word	0x6e656c20
   1ba18:	73687467 	.word	0x73687467
   1ba1c:	0001b9e8 	.word	0x0001b9e8
   1ba20:	00000034 	.word	0x00000034
   1ba24:	0001ba1c 	.word	0x0001ba1c
   1ba28:	0001ba28 	.word	0x0001ba28
   1ba2c:	7375722f 	.word	0x7375722f
   1ba30:	352f6374 	.word	0x352f6374
   1ba34:	66613765 	.word	0x66613765
   1ba38:	39363634 	.word	0x39363634
   1ba3c:	65303866 	.word	0x65303866
   1ba40:	38366635 	.word	0x38366635
   1ba44:	31343132 	.word	0x31343132
   1ba48:	30353066 	.word	0x30353066
   1ba4c:	61333931 	.word	0x61333931
   1ba50:	39373662 	.word	0x39373662
   1ba54:	62646661 	.word	0x62646661
   1ba58:	2f316234 	.word	0x2f316234
   1ba5c:	2f637273 	.word	0x2f637273
   1ba60:	6362696c 	.word	0x6362696c
   1ba64:	2f65726f 	.word	0x2f65726f
   1ba68:	7263616d 	.word	0x7263616d
   1ba6c:	6d2f736f 	.word	0x6d2f736f
   1ba70:	722e646f 	.word	0x722e646f
   1ba74:	00000073 	.word	0x00000073
   1ba78:	0001ba2c 	.word	0x0001ba2c
   1ba7c:	00000049 	.word	0x00000049
   1ba80:	00000012 	.word	0x00000012
   1ba84:	0000000d 	.word	0x0000000d
   1ba88:	656d6f53 	.word	0x656d6f53
   1ba8c:	656e6f4e 	.word	0x656e6f4e
   1ba90:	00008c67 	.word	0x00008c67
   1ba94:	00000004 	.word	0x00000004
   1ba98:	00000004 	.word	0x00000004
   1ba9c:	000091b3 	.word	0x000091b3
   1baa0:	00000060 	.word	0x00000060
   1baa4:	0001baa0 	.word	0x0001baa0
   1baa8:	20697073 	.word	0x20697073
   1baac:	73756c66 	.word	0x73756c66
   1bab0:	61662068 	.word	0x61662068
   1bab4:	6c69      	.short	0x6c69
   1bab6:	552f      	.short	0x552f
   1bab8:	73726573 	.word	0x73726573
   1babc:	70754c2f 	.word	0x70754c2f
   1bac0:	502f7970 	.word	0x502f7970
   1bac4:	54656e69 	.word	0x54656e69
   1bac8:	2f656d69 	.word	0x2f656d69
   1bacc:	656e6970 	.word	0x656e6970
   1bad0:	656d6974 	.word	0x656d6974
   1bad4:	7375722d 	.word	0x7375722d
   1bad8:	796d2d74 	.word	0x796d2d74
   1badc:	7477656e 	.word	0x7477656e
   1bae0:	7375722f 	.word	0x7375722f
   1bae4:	74732f74 	.word	0x74732f74
   1bae8:	35333737 	.word	0x35333737
   1baec:	64636c2d 	.word	0x64636c2d
   1baf0:	7461622d 	.word	0x7461622d
   1baf4:	722d6863 	.word	0x722d6863
   1baf8:	72732f73 	.word	0x72732f73
   1bafc:	696c2f63 	.word	0x696c2f63
   1bb00:	73722e62 	.word	0x73722e62
   1bb04:	20697073 	.word	0x20697073
   1bb08:	61746164 	.word	0x61746164
   1bb0c:	69616620 	.word	0x69616620
   1bb10:	0000006c 	.word	0x0000006c
   1bb14:	0001bab6 	.word	0x0001bab6
   1bb18:	0000004e 	.word	0x0000004e
   1bb1c:	000000b0 	.word	0x000000b0
   1bb20:	00000009 	.word	0x00000009
   1bb24:	0001bab6 	.word	0x0001bab6
   1bb28:	0000004e 	.word	0x0000004e
   1bb2c:	00000098 	.word	0x00000098
   1bb30:	0000000d 	.word	0x0000000d
   1bb34:	20697073 	.word	0x20697073
   1bb38:	20646d63 	.word	0x20646d63
   1bb3c:	6c696166 	.word	0x6c696166
   1bb40:	0001bab6 	.word	0x0001bab6
   1bb44:	0000004e 	.word	0x0000004e
   1bb48:	00000097 	.word	0x00000097
   1bb4c:	00000009 	.word	0x00000009
   1bb50:	0001bab6 	.word	0x0001bab6
   1bb54:	0000004e 	.word	0x0000004e
   1bb58:	0000009d 	.word	0x0000009d
   1bb5c:	00000011 	.word	0x00000011
   1bb60:	0001bab6 	.word	0x0001bab6
   1bb64:	0000004e 	.word	0x0000004e
   1bb68:	0000009c 	.word	0x0000009c
   1bb6c:	0000000d 	.word	0x0000000d
   1bb70:	0001bab6 	.word	0x0001bab6
   1bb74:	0000004e 	.word	0x0000004e
   1bb78:	000000c5 	.word	0x000000c5
   1bb7c:	0000002d 	.word	0x0000002d
   1bb80:	0001bab6 	.word	0x0001bab6
   1bb84:	0000004e 	.word	0x0000004e
   1bb88:	000000c9 	.word	0x000000c9
   1bb8c:	0000002d 	.word	0x0000002d
   1bb90:	0001bab6 	.word	0x0001bab6
   1bb94:	0000004e 	.word	0x0000004e
   1bb98:	000000d8 	.word	0x000000d8
   1bb9c:	00000019 	.word	0x00000019

0001bba0 <str.0>:
   1bba0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1bbb0:	20687469 7265766f 776f6c66 0001bab6     ith overflow....
   1bbc0:	0000004e 000000d9 00000019 0001bab6     N...............
   1bbd0:	0000004e 000000db 00000019 0001bab6     N...............
   1bbe0:	0000004e 000000dc 00000019 20697073     N...........spi 
   1bbf0:	74696e69 69616620 0000006c 0001bab6     init fail.......
   1bc00:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1bc10:	0001bc0c 012d2c01 00002d2c 0001bc14     .....,-.,-......
   1bc20:	00000007 0001bc20 008402a2 0001bc28     .... .......(...
   1bc30:	000000c5 0001bc30 0000000a 0001bc38     ....0.......8...
   1bc40:	00002a8a 0001bc40 0000ee8a 0001bc48     .*..@.......H...
   1bc50:	0000000e 0001bc50 00000000 0001bc58     ....P.......X...
   1bc60:	00000008 0001bc60 00000005 0001bc68     ....`.......h...
   1bc70:	0001bab6 0000004e 00000088 00000009     ....N...........
   1bc80:	74737552 756f7420 73206863 6f736e65     Rust touch senso
   1bc90:	00000a72 00000000 0001bc94 65737361     r...........asse
   1bca0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1bcb0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1bcc0:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1bcd0:	203a7468 203a6060 0001bc9c 0000002d     ht: ``: ....-...
   1bce0:	0001bcc9 0000000c 0001bcd5 00000003     ................
   1bcf0:	0001bcd8 20515249 74696e69 69616620     ....IRQ init fai
   1bd00:	0000006c 0001bcf4 0000000d 0001bd04     l...............
   1bd10:	0001bd10 74737572 7070612f 6372732f     ....rust/app/src
   1bd20:	756f742f 735f6863 6f736e65 73722e72     /touch_sensor.rs
   1bd30:	0001bd14 0000001c 0000003f 00000005     ........?.......
   1bd40:	20633269 72646461 0001bd14 0000001c     i2c addr........
   1bd50:	0000004b 00000011 63756f74 74616468     K.......touchdat
   1bd60:	61662061 00006c69 0001bd14 0000001c     a fail..........
   1bd70:	00000056 00000009 0001bd14 0000001c     V...............
   1bd80:	0000005a 00000031 64616572 756f7420     Z...1...read tou
   1bd90:	61646863 66206174 006c6961 0001bd14     chdata fail.....
   1bda0:	0000001c 00000089 00000005 0001bd14     ................
   1bdb0:	0000001c 00000095 00000037 00000000     ........7.......

0001bdc0 <str.0>:
   1bdc0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1bdd0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1bde0:	00000077 0001bd14 0000001c 00000095     w...............
   1bdf0:	00000024 00000000 00000000 00000000     $...............

0001be00 <str.1>:
   1be00:	65747461 2074706d 61206f74 77206464     attempt to add w
   1be10:	20687469 7265766f 776f6c66 0001bd14     ith overflow....
   1be20:	0000001c 00000095 00000020 0001bd14     ........ .......
   1be30:	0000001c 00000099 00000009 0001bd14     ................
   1be40:	0000001c 0000009a 00000037 0001bd14     ........7.......
   1be50:	0000001c 0000009a 00000023 0001bd14     ........#.......
   1be60:	0000001c 0000009a 0000001f 0001bd14     ................
   1be70:	0000001c 0000009b 00000037 0001bd14     ........7.......
   1be80:	0000001c 0000009b 00000023 0001bd14     ........#.......
   1be90:	0000001c 0000009b 0000001f 0001bd14     ................
   1bea0:	0000001c 0000009c 00000009 0001bd14     ................
   1beb0:	0000001c 0000009e 00000037 0001bd14     ........7.......
   1bec0:	0000001c 0000009e 00000023 0001bd14     ........#.......
   1bed0:	0000001c 0000009e 0000001f 0001bd14     ................
   1bee0:	0000001c 0000009f 00000037 0001bd14     ........7.......
   1bef0:	0000001c 0000009f 00000023 0001bd14     ........#.......
   1bf00:	0000001c 0000009f 0000001f 0001bd14     ................
   1bf10:	0000001c 000000a0 00000009 0001bd14     ................
   1bf20:	0000001c 000000a4 00000030 0001bd14     ........0.......
   1bf30:	0000001c 000000a4 0000001a 0001bd14     ................
   1bf40:	0000001c 000000a4 00000016 0001bd14     ................
   1bf50:	0000001c 000000a3 00000009 0001bd14     ................
   1bf60:	0000001c 000000a6 00000030 0001bd14     ........0.......
   1bf70:	0000001c 000000a6 0000001a 0001bd14     ................
   1bf80:	0000001c 000000a6 00000016 0001bd14     ................
   1bf90:	0000001c 000000a5 00000009 0001bd14     ................
   1bfa0:	0000001c 000000aa 0000002d 0001bd14     ........-.......
   1bfb0:	0000001c 000000aa 0000001a 0001bd14     ................
   1bfc0:	0000001c 000000aa 00000016 0001bd14     ................
   1bfd0:	0000001c 000000a9 00000009 0001bd14     ................
   1bfe0:	0000001c 000000ac 0000002d 0001bd14     ........-.......
   1bff0:	0000001c 000000ac 0000001a 0001bd14     ................
   1c000:	0000001c 000000ac 00000016 0001bd14     ................
   1c010:	0000001c 000000ab 00000009 0001bd14     ................
   1c020:	0000001c 000000af 0000000d 0001bd14     ................
   1c030:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1c040:	00667562 0001bd14 0000001c 000000f1     buf.............
   1c050:	00000005 0001bd14 0000001c 000000f2     ................
   1c060:	0000000d 0001bd14 0000001c 000000f2     ................
   1c070:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1c080:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1c090:	00000000 0001c088 00000006 0001c090     ................
   1c0a0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1c0b0:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1c0c0:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1c0d0:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1c0e0:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1c0f0:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1c100:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1c110:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1c120:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1c130:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1c140:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1c150:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1c160:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1c170:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1c180:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1c190:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1c1a0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1c1b0:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1c1c0:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1c1d0:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1c1e0:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1c1f0:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1c200:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1c210:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1c220:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1c230:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1c240:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1c250:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1c260:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1c270:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1c280:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1c290:	00007f00 01010100 03030303 203f0000     ..............? 
   1c2a0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1c2b0:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1c2c0:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1c2d0:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1c2e0:	00000000 ff000000 00ff0000 f71410f7     ................
   1c2f0:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1c300:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1c310:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1c320:	00000000 ff000000 00ff0000 302000be     .............. 0
   1c330:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1c340:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1c350:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1c360:	00000000 ff000000 00ff0000 fc00fe00     ................
   1c370:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1c380:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1c390:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1c3a0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1c3b0:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1c3c0:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1c3d0:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1c3e0:	8686fe86 868686fe 10101010 18181010     ................
   1c3f0:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1c400:	869292ee 82fe8686 86868686 8686827c     ............|...
   1c410:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1c420:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1c430:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1c440:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1c450:	fe80f01e 00000000 00000606 c0606000     .............``.
   1c460:	00000000 18180000 18001818 180cc67c     ............|...
   1c470:	00001800 0000fefe 868682fe 0808fe86     ................
   1c480:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1c490:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1c4a0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1c4b0:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1c4c0:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1c4d0:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1c4e0:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1c4f0:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1c500:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1c510:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1c520:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1c530:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1c540:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1c550:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1c560:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1c570:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1c580:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1c590:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1c5a0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1c5b0:	ffa8a8a8 00000000 00000000 00000000     ................
   1c5c0:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1c5d0:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1c5e0:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1c5f0:	38706968 0073722e 0001c5e2 00000015     hip8.rs.........
   1c600:	0000004b 00000005 0001c5e2 00000015     K...............
   1c610:	0000009f 00000018 00000000 00000000     ................

0001c620 <str.0>:
   1c620:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1c630:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1c640:	00000077 0001c5e2 00000015 000000a0     w...............
   1c650:	00000017 0001c5e2 00000015 000000a1     ................
   1c660:	00000021 00000000 00000000 00000000     !...............

0001c670 <str.1>:
   1c670:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1c680:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1c690:	00000077 0001c5e2 00000015 000000a1     w...............
   1c6a0:	00000020 00000000 00000000 00000000      ...............

0001c6b0 <str.2>:
   1c6b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1c6c0:	20687469 7265766f 776f6c66 0001c5e2     ith overflow....
   1c6d0:	00000015 000000a1 00000019 0001c5e2     ................
   1c6e0:	00000015 000000a2 00000021 0001c5e2     ........!.......
   1c6f0:	00000015 000000a2 00000020 0001c5e2     ........ .......
   1c700:	00000015 000000a2 0000001a 7265766f     ............over
   1c710:	776f6c66 73746573 20657a69 666f5f78     flowsetsize x_of
   1c720:	74657366 666f5f79 74657366 0001c5e2     fsety_offset....
   1c730:	00000015 000000a3 00000009 766f2078     ............x ov
   1c740:	6c667265 0000776f 0001c5e2 00000015     erflow..........
   1c750:	000000b3 00000009 766f2079 6c667265     ........y overfl
   1c760:	0000776f 0001c5e2 00000015 000000b4     ow..............
   1c770:	00000009 0001c5e2 00000015 000000b5     ................
   1c780:	00000023 0001c5e2 00000015 000000b5     #...............
   1c790:	00000011 0001c5e2 00000015 000000b7     ................
   1c7a0:	00000010 0001c5e2 00000015 000000ba     ................
   1c7b0:	00000009 0001c5e2 00000015 000000bf     ................
   1c7c0:	0000000d 0001c5e2 00000015 000000c4     ................
   1c7d0:	00000011 0001c5e2 00000015 000000c9     ................
   1c7e0:	00000015 0001c5e2 00000015 000000dc     ................
   1c7f0:	00000015 0001c5e2 00000015 000000dd     ................
   1c800:	00000016 0001c5e2 00000015 00000111     ................
   1c810:	00000009 0001c5e2 00000015 00000112     ................
   1c820:	00000009 0001c5e2 00000015 00000113     ................
   1c830:	00000015 0001c5e2 00000015 00000113     ................
   1c840:	00000011 0001c5e2 00000015 00000114     ................
   1c850:	00000012 20746573 65786970 6620736c     ....set pixels f
   1c860:	656c6961 00000064 0001c5e2 00000015     ailed...........
   1c870:	0000011c 0000000d 0001c5e2 00000015     ................
   1c880:	00000124 00000015 0001c5e2 00000015     $...............
   1c890:	00000125 00000016 0001c5e2 00000015     %...............
   1c8a0:	00000149 00000009 0001c5e2 00000015     I...............
   1c8b0:	0000014a 00000009 0001c5e2 00000015     J...............
   1c8c0:	0000014b 00000015 0001c5e2 00000015     K...............
   1c8d0:	0000014b 00000011 0001c5e2 00000015     K...............
   1c8e0:	0000014c 00000012 000a202c 0001c5e2     L......., ......
   1c8f0:	00000015 00000172 00000012 50494843     ....r.......CHIP
   1c900:	6f742038 20686375 20746f6e 646e6168     8 touch not hand
   1c910:	0a64656c 6c6c6163 60206465 6974704f     led.called `Opti
   1c920:	3a3a6e6f 72776e75 29287061 6e6f2060     on::unwrap()` on
   1c930:	60206120 656e6f4e 61762060 7365756c      a `None` values
   1c940:	66206970 6873756c 69616620 73552f6c     pi flush fail/Us
   1c950:	2f737265 7070754c 69502f79 6954656e     ers/Luppy/PineTi
   1c960:	702f656d 74656e69 2d656d69 74737572     me/pinetime-rust
   1c970:	6e796d2d 2f747765 74737572 3774732f     -mynewt/rust/st7
   1c980:	2d353337 2d64636c 63746162 73722d68     735-lcd-batch-rs
   1c990:	6372732f 62696c2f 0073722e 0001c94d     /src/lib.rs.M...
   1c9a0:	0000004e 000000fe 00000009 0001c94d     N...........M...
   1c9b0:	0000004e 000000f3 00000009 6573552f     N.........../Use
   1c9c0:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1c9d0:	69676572 79727473 6372732f 7469672f     registry/src/git
   1c9e0:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1c9f0:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1ca00:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1ca10:	00007372 0001c9bc 00000056 0000009d     rs......V.......
   1ca20:	00000014 0001c9bc 00000056 000000d4     ........V.......
   1ca30:	00000011 0001c9bc 00000056 000000d5     ........V.......
   1ca40:	0000001a 00000000 00000000 00000000     ................

0001ca50 <str.0>:
   1ca50:	65747461 2074706d 61206f74 77206464     attempt to add w
   1ca60:	20687469 7265766f 776f6c66 0001c9bc     ith overflow....
   1ca70:	00000056 000000d5 00000011 00000005     V...............
   1ca80:	0001ca7c 4c205d5b 78562044 495b202c     |...[] LD Vx, [I
   1ca90:	0000005d 0001ca84 00000001 0001ca85     ]...............
   1caa0:	0000000c 0001ca94 00000000 00000020     ............ ...
   1cab0:	00000008 00000002 00000000 00000000     ................
   1cac0:	00000004 00000003 0001caa8 6362696c     ............libc
   1cad0:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1cae0:	6e6e6e20 00000040 00000020 0001cacc      nnn@... .......
   1caf0:	00000008 0001cacc 00000008 0001c9bc     ................
   1cb00:	00000056 000001a1 0001caec 0001c9bc     V...............
   1cb10:	00000056 000001a3 0000001d 0001c9bc     V...............
   1cb20:	00000056 000001a4 0000002a 0001c9bc     V.......*.......
   1cb30:	00000056 000001a4 00000021 0001c9bc     V.......!.......
   1cb40:	00000056 000001a4 00000015 444c205d     V...........] LD
   1cb50:	5d495b20 7856202c 0001ca84 00000001      [I], Vx........
   1cb60:	0001cb4c 0000000c 0001cb58 0001cacc     L.......X.......
   1cb70:	00000008 0001cacc 00000008 0001c9bc     ................
   1cb80:	00000056 0000019a 0001cb6c 0001c9bc     V.......l.......
   1cb90:	00000056 0000019c 0000001d 0001c9bc     V...............
   1cba0:	00000056 0000019d 00000035 0001c9bc     V.......5.......
   1cbb0:	00000056 0000019d 0000001e 0001c9bc     V...............
   1cbc0:	00000056 0000019d 00000015 444c205d     V...........] LD
   1cbd0:	202c4220 00007856 0001ca84 00000001      B, Vx..........
   1cbe0:	0001cbcc 0000000a 0001cbd8 0001cacc     ................
   1cbf0:	00000008 0001cacc 00000008 0001c9bc     ................
   1cc00:	00000056 00000193 0001cbec 0001c9bc     V...............
   1cc10:	00000056 00000194 0000001b 0001c9bc     V...............
   1cc20:	00000056 00000195 00000011 0001c9bc     V...............
   1cc30:	00000056 00000196 0000001a 0001c9bc     V...............
   1cc40:	00000056 00000196 00000011 0001c9bc     V...............
   1cc50:	00000056 00000197 0000001a 0001c9bc     V...............
   1cc60:	00000056 00000197 00000011 444c205d     V...........] LD
   1cc70:	202c4620 00007856 0001ca84 00000001      F, Vx..........
   1cc80:	0001cc6c 0000000a 0001cc78 0001cacc     l.......x.......
   1cc90:	00000008 0001cacc 00000008 0001c9bc     ................
   1cca0:	00000056 0000018f 0001cc8c 0001c9bc     V...............
   1ccb0:	00000056 00000190 0000001b 0001c9bc     V...............
   1ccc0:	00000056 00000190 0000001a 00000000     V...............

0001ccd0 <str.1>:
   1ccd0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1cce0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1ccf0:	41205d77 49204444 7856202c 0001ca84     w] ADD I, Vx....
   1cd00:	00000001 0001ccf1 0000000b 0001ccfc     ................
   1cd10:	0001cacc 00000008 0001cacc 00000008     ................
   1cd20:	0001c9bc 00000056 0000018b 0001cd10     ....V...........
   1cd30:	0001c9bc 00000056 0000018c 0000002e     ....V...........
   1cd40:	444c205d 2c545320 00785620 0001ca84     ] LD ST, Vx.....
   1cd50:	00000001 0001cd40 0000000b 0001cd4c     ....@.......L...
   1cd60:	0001cacc 00000008 0001cacc 00000008     ................
   1cd70:	0001c9bc 00000056 00000187 0001cd60     ....V.......`...
   1cd80:	0001c9bc 00000056 00000188 0000001b     ....V...........
   1cd90:	444c205d 2c544420 00785620 0001ca84     ] LD DT, Vx.....
   1cda0:	00000001 0001cd90 0000000b 0001cd9c     ................
   1cdb0:	0001cacc 00000008 0001cacc 00000008     ................
   1cdc0:	0001c9bc 00000056 00000183 0001cdb0     ....V...........
   1cdd0:	0001c9bc 00000056 00000184 0000001b     ....V...........
   1cde0:	444c205d 2c785620 00004b20 0001ca84     ] LD Vx, K......
   1cdf0:	00000001 0001cde0 0000000a 0001cdec     ................
   1ce00:	0001cacc 00000008 0001cacc 00000008     ................
   1ce10:	0001c9bc 00000056 0000017f 0001ce00     ....V...........
   1ce20:	0001c9bc 00000056 00000180 00000011     ....V...........
   1ce30:	444c205d 2c785620 00544420 0001ca84     ] LD Vx, DT.....
   1ce40:	00000001 0001ce30 0000000b 0001ce3c     ....0.......<...
   1ce50:	0001cacc 00000008 0001cacc 00000008     ................
   1ce60:	0001c9bc 00000056 0000017b 0001ce50     ....V...{...P...
   1ce70:	0001c9bc 00000056 0000017c 00000011     ....V...|.......
   1ce80:	4b53205d 5620504e 00000078 0001ca84     ] SKNP Vx.......
   1ce90:	00000001 0001ce80 00000009 0001ce8c     ................
   1cea0:	0001cacc 00000008 0001cacc 00000008     ................
   1ceb0:	0001c9bc 00000056 00000175 0001cea0     ....V...u.......
   1cec0:	0001c9bc 00000056 00000176 00000021     ....V...v...!...
   1ced0:	0001ca84 00000001 0001cad4 00000008     ................
   1cee0:	0001ced0 0001cacc 00000008 0001cacc     ................
   1cef0:	00000008 0001c9bc 00000056 0000016f     ........V...o...
   1cf00:	0001cee4 0001c9bc 00000056 00000170     ........V...p...
   1cf10:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1cf20:	006e202c 0001ca84 00000001 0001cf14     , n.............
   1cf30:	0000000f 0001cf24 0001cacc 00000008     ....$...........
   1cf40:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1cf50:	00000156 0001cf38 0001c9bc 00000056     V...8.......V...
   1cf60:	00000157 0000001d 0001c9bc 00000056     W...........V...
   1cf70:	00000158 0000001d 0001c9bc 00000056     X...........V...
   1cf80:	0000015e 00000026 0001c9bc 00000056     ^...&.......V...
   1cf90:	0000015e 0000001d 0001c9bc 00000056     ^...........V...
   1cfa0:	00000160 00000021 00000000 00000000     `...!...........

0001cfb0 <str.2>:
   1cfb0:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1cfc0:	6574616c 65687420 6d657220 646e6961     late the remaind
   1cfd0:	77207265 20687469 69642061 6f736976     er with a diviso
   1cfe0:	666f2072 72657a20 0000006f 0001c9bc     r of zero.......
   1cff0:	00000056 00000163 00000025 0001c9bc     V...c...%.......
   1d000:	00000056 00000165 0000002d 00000000     V...e...-.......

0001d010 <str.3>:
   1d010:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1d020:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1d030:	00000077 0001c9bc 00000056 00000165     w.......V...e...
   1d040:	00000028 00000000 00000000 00000000     (...............

0001d050 <str.4>:
   1d050:	65747461 2074706d 73206f74 74666968     attempt to shift
   1d060:	66656c20 69772074 6f206874 66726576      left with overf
   1d070:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1d080:	0001ca84 00000001 0001d073 0000000c     ........s.......
   1d090:	0001d080 0001cacc 00000008 0001cacc     ................
   1d0a0:	00000008 0001c9bc 00000056 00000152     ........V...R...
   1d0b0:	0001d094 0001c9bc 00000056 00000153     ........V...S...
   1d0c0:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1d0d0:	0001ca84 00000001 0001d0c4 0000000c     ................
   1d0e0:	0001d0d0 0001cacc 00000008 0001cacc     ................
   1d0f0:	00000008 0001c9bc 00000056 0000014e     ........V...N...
   1d100:	0001d0e4 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1d110:	0001ca84 00000001 0001d104 0000000b     ................
   1d120:	0001d110 0001cacc 00000008 0001cacc     ................
   1d130:	00000008 0001c9bc 00000056 0000014a     ........V...J...
   1d140:	0001d124 4e53205d 78562045 7956202c     $...] SNE Vx, Vy
   1d150:	0001ca84 00000001 0001d144 0000000c     ........D.......
   1d160:	0001d150 0001cacc 00000008 0001cacc     P...............
   1d170:	00000008 0001c9bc 00000056 00000144     ........V...D...
   1d180:	0001d164 0001c9bc 00000056 00000145     d.......V...E...
   1d190:	00000014 0001c9bc 00000056 00000145     ........V...E...
   1d1a0:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1d1b0:	0001ca84 00000001 0001d1a4 0000000c     ................
   1d1c0:	0001d1b0 0001cacc 00000008 0001cacc     ................
   1d1d0:	00000008 0001c9bc 00000056 0000013f     ........V...?...
   1d1e0:	0001d1c4 0001c9bc 00000056 00000140     ........V...@...
   1d1f0:	00000020 0001c9bc 00000056 00000141      .......V...A...
   1d200:	0000001d 0001c9bc 00000056 00000141     ........V...A...
   1d210:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1d220:	00000079 0001ca84 00000001 0001d214     y...............
   1d230:	0000000d 0001d224 0001cacc 00000008     ....$...........
   1d240:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d250:	00000139 0001d238 0001c9bc 00000056     9...8.......V...
   1d260:	0000013a 0000001e 0001c9bc 00000056     :...........V...
   1d270:	0000013a 00000038 0001c9bc 00000056     :...8.......V...
   1d280:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1d290:	7956202c 0001ca84 00000001 0001d288     , Vy............
   1d2a0:	0000000c 0001d294 0001cacc 00000008     ................
   1d2b0:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d2c0:	00000134 0001d2a8 0001c9bc 00000056     4...........V...
   1d2d0:	00000135 0000001f 0001c9bc 00000056     5...........V...
   1d2e0:	00000136 0000001d 0001c9bc 00000056     6...........V...
   1d2f0:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1d300:	7956202c 0001ca84 00000001 0001d2f8     , Vy............
   1d310:	0000000c 0001d304 0001cacc 00000008     ................
   1d320:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d330:	0000012e 0001d318 0001c9bc 00000056     ............V...
   1d340:	0000012f 0000001e 0001c9bc 00000056     /...........V...
   1d350:	0000012f 00000038 0001c9bc 00000056     /...8.......V...
   1d360:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1d370:	7956202c 0001ca84 00000001 0001d368     , Vy........h...
   1d380:	0000000c 0001d374 0001cacc 00000008     ....t...........
   1d390:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d3a0:	00000128 0001d388 0001c9bc 00000056     (...........V...
   1d3b0:	00000129 0000001e 0001c9bc 00000056     )...........V...
   1d3c0:	00000129 00000038 0001c9bc 00000056     )...8.......V...
   1d3d0:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1d3e0:	7956202c 0001ca84 00000001 0001d3d8     , Vy............
   1d3f0:	0000000c 0001d3e4 0001cacc 00000008     ................
   1d400:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d410:	00000124 0001d3f8 0001c9bc 00000056     $...........V...
   1d420:	00000125 0000001e 0001c9bc 00000056     %...........V...
   1d430:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1d440:	7956202c 0001ca84 00000001 0001d438     , Vy........8...
   1d450:	0000000c 0001d444 0001cacc 00000008     ....D...........
   1d460:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d470:	00000120 0001d458 0001c9bc 00000056      ...X.......V...
   1d480:	00000121 0000001e 0001c9bc 00000056     !...........V...
   1d490:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1d4a0:	00795620 0001ca84 00000001 0001d498      Vy.............
   1d4b0:	0000000b 0001d4a4 0001cacc 00000008     ................
   1d4c0:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d4d0:	0000011c 0001d4b8 0001c9bc 00000056     ............V...
   1d4e0:	0000011d 0000001e 0001c9bc 00000056     ............V...
   1d4f0:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1d500:	00795620 0001ca84 00000001 0001d4f8      Vy.............
   1d510:	0000000b 0001d504 0001cacc 00000008     ................
   1d520:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d530:	00000118 0001d518 0001c9bc 00000056     ............V...
   1d540:	00000119 0000001d 0001c9bc 00000056     ............V...
   1d550:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1d560:	6b6b202c 0001ca84 00000001 0001d558     , kk........X...
   1d570:	0000000c 0001d564 0001cacc 00000008     ....d...........
   1d580:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d590:	00000114 0001d578 0001c9bc 00000056     ....x.......V...
   1d5a0:	00000115 0000001d 0001c9bc 00000056     ............V...
   1d5b0:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1d5c0:	006b6b20 0001ca84 00000001 0001d5b8      kk.............
   1d5d0:	0000000b 0001d5c4 0001cacc 00000008     ................
   1d5e0:	0001cacc 00000008 0001c9bc 00000056     ............V...
   1d5f0:	00000110 0001d5d8 0001c9bc 00000056     ............V...
   1d600:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1d610:	706f2064 0000203a 0001ca84 00000001     d op: ..........
   1d620:	0001d608 0000000e 0001d618 00000000     ................
   1d630:	00000020 00000008 00000002 00000000      ...............
   1d640:	00000000 00000004 00000003 00000001     ................
   1d650:	00000020 00000008 00000002 00000000      ...............
   1d660:	00000000 00000004 00000003 0001d62c     ............,...
   1d670:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1d680:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1d690:	0001d670 0000001e 00000005 00000032     p...........2...
   1d6a0:	4553205d 2c785620 00795620 0001ca84     ] SE Vx, Vy.....
   1d6b0:	00000001 0001d6a0 0000000b 0001d6ac     ................
   1d6c0:	0001cacc 00000008 0001cacc 00000008     ................
   1d6d0:	0001c9bc 00000056 0000010a 0001d6c0     ....V...........
   1d6e0:	0001c9bc 00000056 0000010b 00000014     ....V...........
   1d6f0:	0001c9bc 00000056 0000010b 00000021     ....V.......!...
   1d700:	4e53205d 78562045 6b6b202c 0001ca84     ] SNE Vx, kk....
   1d710:	00000001 0001d700 0000000c 0001d70c     ................
   1d720:	0001cacc 00000008 0001cacc 00000008     ................
   1d730:	0001c9bc 00000056 00000104 0001d720     ....V....... ...
   1d740:	0001c9bc 00000056 00000105 00000014     ....V...........
   1d750:	4553205d 20785620 00006b6b 0001ca84     ] SE Vx kk......
   1d760:	00000001 0001d750 0000000a 0001d75c     ....P.......\...
   1d770:	0001cacc 00000008 0001cacc 00000008     ................
   1d780:	0001c9bc 00000056 000000fe 0001d770     ....V.......p...
   1d790:	0001c9bc 00000056 000000ff 00000014     ....V...........
   1d7a0:	4143205d 6e204c4c 00006e6e 0001ca84     ] CALL nnn......
   1d7b0:	00000001 0001d7a0 0000000a 0001d7ac     ................
   1d7c0:	0001cacc 00000008 0001cacc 00000008     ................
   1d7d0:	0001c9bc 00000056 000000f9 0001d7c0     ....V...........
   1d7e0:	0001ca84 00000001 0001cadc 00000008     ................
   1d7f0:	0001d7e0 0001cacc 00000008 0001cacc     ................
   1d800:	00000008 0001c9bc 00000056 000000f5     ........V.......
   1d810:	0001d7f4 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1d820:	0001ca84 00000001 0001d814 00000009     ................
   1d830:	0001d820 0001cacc 00000008 0001cacc      ...............
   1d840:	00000008 0001c9bc 00000056 000000f1     ........V.......
   1d850:	0001d834 20746f6e 6c706d69 6e656d65     4...not implemen
   1d860:	00646574 0001d670 0000001e 00000002     ted.p...........
   1d870:	00000002 4552205d 00000054 0001ca84     ....] RET.......
   1d880:	00000001 0001d874 00000005 0001d87c     ....t.......|...
   1d890:	0001cacc 00000008 0001cacc 00000008     ................
   1d8a0:	0001c9bc 00000056 000000ec 0001d890     ....V...........
   1d8b0:	4c43205d 00000053 0001ca84 00000001     ] CLS...........
   1d8c0:	0001d8b0 00000005 0001d8b8 0001cacc     ................
   1d8d0:	00000008 0001cacc 00000008 0001c9bc     ................
   1d8e0:	00000056 000000e5 0001d8cc 0001c9bc     V...............
   1d8f0:	00000056 00000093 0000001b 0001c9bc     V...............
   1d900:	00000056 00000097 00000009 0001c9bc     V...............
   1d910:	00000056 000000bb 0000000d 0001c9bc     V...............
   1d920:	00000056 000000be 0000000d              V...........

0001d92c <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1d92c:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1d93c:	f010f010 10f09090 f080f010 80f0f010     ................
   1d94c:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1d95c:	90f0f010 e09090f0 e090e090 808080f0     ................
   1d96c:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1d97c:	72656874 73692065 206f6e20 68637573     there is no such
   1d98c:	69687420 6120676e 6e612073 71636120      thing as an acq
   1d99c:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1d9ac:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1d9bc:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1d9cc:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1d9dc:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1d9ec:	2f736f72 2e646f6d 00007372 0001d9ad     ros/mod.rs......
   1d9fc:	00000049 0000000a 00000009 72656874     I...........ther
   1da0c:	73692065 206f6e20 68637573 69687420     e is no such thi
   1da1c:	6120676e 20612073 656c6572 20657361     ng as a release 
   1da2c:	64616f6c 000118f3 00000000 00000001     load............
   1da3c:	00011cb5 00011cc1 00011ccb 0001da30     ............0...
   1da4c:	000118f3 00000000 00000001 00011cb5     ................
   1da5c:	00011cc1 00011ccb                       ........

0001da64 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1da64:	00697073 0001bc94 65737361 6f697472     spi.....assertio
   1da74:	6166206e 64656c69 2860203a 7466656c     n failed: `(left
   1da84:	203d3d20 68676972 0a602974 656c2020      == right)`.  le
   1da94:	203a7466 0a2c6060 67697220 203a7468     ft: ``,. right: 
   1daa4:	203a6060 0001da6c 0000002d 0001da99     ``: l...-.......
   1dab4:	0000000c 0001daa5 00000003 0001daa8     ................
   1dac4:	20697073 666e6f63 66206769 006c6961     spi config fail.
   1dad4:	0001dac4 0000000f 0001dad4 0001dae0     ................
   1dae4:	74737572 6e796d2f 2f747765 2f637273     rust/mynewt/src/
   1daf4:	2e697073 00007372 0001dae4 00000016     spi.rs..........
   1db04:	00000050 0000004a 20697073 66206263     P...J...spi cb f
   1db14:	006c6961 0001db0c 0000000b 0001db18     ail.............
   1db24:	0001dae4 00000016 00000057 00000005     ........W.......
   1db34:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1db44:	0001db34 0000000f 0001db44 0001dae4     4.......D.......
   1db54:	00000016 0000005a 00000037 6f697067     ....Z...7...gpio
   1db64:	69616620 0000006c 0001db60 00000009      fail...`.......
   1db74:	0001db6c 0001dae4 00000016 0000005b     l...........[...
   1db84:	00000040 0001dae4 00000016 0000005c     @...........\...
   1db94:	00000040 6575716d 66206575 006c6961     @...mqueue fail.
   1dba4:	0001db98 0000000b 0001dba4 0001dae4     ................
   1dbb4:	00000016 00000065 00000005 206d6573     ....e.......sem 
   1dbc4:	6c696166 20697073 6c696166 0001dbc0     failspi fail....
   1dbd4:	00000008 0001dbd0 0001dae4 00000016     ................
   1dbe4:	00000069 00000005 0001dae4 00000016     i...............
   1dbf4:	0000006d 00000005 00000000 0001da64     m...........d...
   1dc04:	00000004 0001dbfc 6e657665 66207174     ........eventq f
   1dc14:	006c6961 0001dae4 00000016 00000081     ail.............
   1dc24:	00000009 63206f6e 6220646d 00657479     ....no cmd byte.
   1dc34:	0001dae4 00000016 00000097 00000005     ................
   1dc44:	0001dae4 00000016 00000098 00000011     ................
	...

0001dc60 <str.0>:
   1dc60:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dc70:	20687469 7265766f 776f6c66 0001dae4     ith overflow....
   1dc80:	00000016 00000099 00000016 20697073     ............spi 
   1dc90:	7265766f 776f6c66 0001dae4 00000016     overflow........
   1dca0:	00000099 00000005 0001dae4 00000016     ................
   1dcb0:	000000a8 00000012 0001dae4 00000016     ................
   1dcc0:	000000c1 00000035 00000000 00000000     ....5...........

0001dcd0 <str.1>:
   1dcd0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dce0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dcf0:	00000077 0001dae4 00000016 000000c4     w...............
   1dd00:	0000000f 20746e69 20697073 6c696166     ....int spi fail
   1dd10:	0001dae4 00000016 00000101 00000011     ................
   1dd20:	0001dae4 00000016 00000111 00000015     ................

0001dd30 <str.2>:
   1dd30:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1dd40:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1dd50:	00000077 0001dae4 00000016 0000010f     w...............
   1dd60:	00000011 0001dae4 00000016 00000117     ................
   1dd70:	00000011 0001dae4 00000016 00000124     ............$...
   1dd80:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1dd90:	0001dae4 00000016 0000012b 00000005     ........+.......
   1dda0:	0001dbc8 00000008 0001dda0 0001dae4     ................
   1ddb0:	00000016 00000141 00000009 0001dae4     ....A...........
   1ddc0:	00000016 0000014a 00000009 0001dae4     ....J...........
   1ddd0:	00000016 0000014e 00000030 0001dae4     ....N...0.......
   1dde0:	00000016 0000015a 00000005 0001dae4     ....Z...........
   1ddf0:	00000016 0000015f 00000017 0001bc94     ...._...........
   1de00:	65737361 6f697472 6166206e 64656c69     assertion failed
   1de10:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1de20:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1de30:	67697220 203a7468 203a6060 0001de00      right: ``: ....
   1de40:	0000002d 0001de2d 0000000c 0001de39     -...-.......9...
   1de50:	00000003 0001de3c 20697073 666e6f63     ....<...spi conf
   1de60:	66206769 006c6961 0001de58 0000000f     ig fail.X.......
   1de70:	0001de68 0001de74 74737572 6e796d2f     h...t...rust/myn
   1de80:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1de90:	0001de78 00000016 00000016 00000009     x...............
   1dea0:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1deb0:	0001dea0 0000000f 0001deb0 0001de78     ............x...
   1dec0:	00000016 00000019 00000009 20697073     ............spi 
   1ded0:	74696e69 69616620 0000006c 0001decc     init fail.......
   1dee0:	0000000d 0001dedc 0001de78 00000016     ........x.......
   1def0:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1df00:	0000006c 0001def8 00000009 0001df04     l...............
   1df10:	0001de78 00000016 00000045 00000009     x.......E.......
   1df20:	0001de78 00000016 0000006c 0000001b     x.......l.......

0001df30 <str.0>:
   1df30:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1df40:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1df50:	6c616377 2064656c 74704f60 3a6e6f69     wcalled `Option:
   1df60:	776e753a 28706172 6f206029 2061206e     :unwrap()` on a 
   1df70:	6e6f4e60 76206065 65756c61 00002928     `None` value()..
   1df80:	0000a2ff 00000000 00000001 00014085     .............@..
   1df90:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1dfa0:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1dfb0:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1dfc0:	39393236 65396264 33323863 6165682f     6299db9ec823/hea
   1dfd0:	73656c70 2e302d73 2f312e35 2f637273     pless-0.5.1/src/
   1dfe0:	2e636576 00007372 0001df90 00000056     vec.rs......V...
   1dff0:	00000066 00000009 00000000 00000000     f...............

0001e000 <str.0>:
   1e000:	65747461 2074706d 61206f74 77206464     attempt to add w
   1e010:	20687469 7265766f 776f6c66 0001df90     ith overflow....
   1e020:	00000056 0000003e 0000000c 0001df90     V...>...........
   1e030:	00000056 0000007e 00000011 00000000     V...~...........

0001e040 <str.1>:
   1e040:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e050:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e060:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1e070:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1e080:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1e090:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1e0a0:	20736920 00000000 00000020 00000008      is .... .......
   1e0b0:	00000002 00000000 00000000 00000002     ................
   1e0c0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1e0d0:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1e0e0:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1e0f0:	00000002 00000000 00000002 00000000     ................
   1e100:	00000003 00000000 00000020 00000008     ........ .......
   1e110:	00000002 00000000 00000001 00000001     ................
   1e120:	00000003 002e2e60 0001e125 00000002     ....`...%.......
   1e130:	65726c61 20796461 72726f62 6465776f     already borrowed
   1e140:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1e150:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1e160:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001e170 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1e170:	00010201 00000000 00000000 00000000     ................
   1e180:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1e190:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1e1a0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1e1b0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1e1c0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1e1d0:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1e1e0:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1e1f0:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1e200:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1e210:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1e220:	656e6f4e 61762060 3a65756c 00000020     None` value: ...
   1e230:	0001e064 00000000 0001e22b 00000002     d.......+.......
   1e240:	00014f89 00000000 00000001 00014fd9     .O...........O..
   1e250:	74756220 65687420 646e6920 69207865      but the index i
   1e260:	00002073 0001e084 00000020 0001e250     s ...... ...P...
   1e270:	00000012 00014f89 0000000c 00000004     .....O..........
   1e280:	000151eb 00015541 000155f1 202c0a2c     .Q..AU...U..,., 
   1e290:	2c280a28 30783029 30313030 30333032     (.(,)0x000102030
   1e2a0:	30353034 30373036 31393038 31313130     4050607080910111
   1e2b0:	31333132 31353134 31373136 32393138     2131415161718192
   1e2c0:	32313230 32333232 32353234 32373236     0212223242526272
   1e2d0:	33393238 33313330 33333332 33353334     8293031323334353
   1e2e0:	33373336 34393338 34313430 34333432     6373839404142434
   1e2f0:	34353434 34373436 35393438 35313530     4454647484950515
   1e300:	35333532 35353534 35373536 36393538     2535455565758596
   1e310:	36313630 36333632 36353634 36373636     0616263646566676
   1e320:	37393638 37313730 37333732 37353734     8697071727374757
   1e330:	37373736 38393738 38313830 38333832     6777879808182838
   1e340:	38353834 38373836 39393838 39313930     4858687888990919
   1e350:	39333932 39353934 39373936 00393938     293949596979899.
   1e360:	00014f89 00000004 00000004 00015615     .O...........V..
   1e370:	0001561b 00015621 2f637273 6362696c     .V..!V..src/libc
   1e380:	2f65726f 2f746d66 2e646f6d 00007372     ore/fmt/mod.rs..
   1e390:	0001e378 00000016 0000043b 00000011     x.......;.......
   1e3a0:	0001e378 00000016 00000445 00000024     x.......E...$...
   1e3b0:	2f637273 6362696c 2f65726f 63696c73     src/libcore/slic
   1e3c0:	6f6d2f65 73722e64 65646e69 6f202078     e/mod.rsindex  o
   1e3d0:	6f207475 61722066 2065676e 20726f66     ut of range for 
   1e3e0:	63696c73 666f2065 6e656c20 20687467     slice of length 
   1e3f0:	0001e3c8 00000006 0001e3ce 00000022     ............"...
   1e400:	0001e3b0 00000018 00000a72 00000005     ........r.......
   1e410:	63696c73 6e692065 20786564 72617473     slice index star
   1e420:	61207374 62202074 65207475 2073646e     ts at  but ends 
   1e430:	00207461 0001e410 00000016 0001e426     at .........&...
   1e440:	0000000d 0001e3b0 00000018 00000a78     ............x...
   1e450:	00000005 696e6966 64656873 73796168     ....finishedhays
   1e460:	6b636174 79622820 20736574 6167654e     tack (bytes Nega
   1e470:	65766974 69736f50 65766974 65746e69     tivePositiveinte
   1e480:	6c617267 61706e55 64656b63 69666e49     gralUnpackedInfi
   1e490:	6574696e 756e694d 77615273 7265764f     niteMinusRawOver
   1e4a0:	776f6c66 6b636162 72657469 6f746e49     flowbackiterInto
   1e4b0:	72657449 61636f6c 6e6f6974 61636f4c     IterlocationLoca
   1e4c0:	6e6f6974 72616573 72656863 69736f70     tionsearcherposi
   1e4d0:	6e6f6974 74697263 736f705f 656e694c     tioncrit_posLine
   1e4e0:	796e4173 57776152 72656b61 6f6c6c41     sAnyRawWakerAllo
   1e4f0:	72724563 38746e69 745f3478 2f637273     cErrint8x4_tsrc/
   1e500:	6362696c 2f65726f 2f727473 2e646f6d     libcore/str/mod.
   1e510:	2e5b7372 625d2e2e 20657479 65646e69     rs[...]byte inde
   1e520:	69202078 756f2073 666f2074 756f6220     x  is out of bou
   1e530:	2073646e 6020666f 0001e517 0000000b     nds of `........
   1e540:	0001e522 00000016 0001e124 00000001     ".......$.......
   1e550:	0001e4fc 00000016 00000853 00000009     ........S.......
   1e560:	69676562 3d3c206e 646e6520 00002820     begin <= end (..
   1e570:	0001e560 0000000e 0001e194 00000004     `...............
   1e580:	0001e140 00000010 0001e124 00000001     @.......$.......
   1e590:	0001e4fc 00000016 00000857 00000005     ........W.......
   1e5a0:	0001e4fc 00000016 00000868 0000000e     ........h.......
   1e5b0:	20736920 20746f6e 68632061 62207261      is not a char b
   1e5c0:	646e756f 3b797261 20746920 69207369     oundary; it is i
   1e5d0:	6469736e 20292065 6020666f 0001e517     nside ) of `....
   1e5e0:	0000000b 0001e5b0 00000026 0001e464     ........&...d...
   1e5f0:	00000008 0001e5d6 00000006 0001e124     ............$...
   1e600:	00000001 0001e4fc 00000016 0000086a     ............j...
   1e610:	00000005 0001e0c4 00000020 0000001a     ........ .......
   1e620:	00000028 05030100 03060605 08080607     (...............
   1e630:	1c0a1109 140c190b 0d0e120d 0310040f     ................
   1e640:	09131212 05170116 03190218 021c071a     ................
   1e650:	161f011d 042b0320 0b2d022c 0330012e     .... .+.,.-...0.
   1e660:	01320231 02a902a7 08ab04aa 05fb02fa     1.2.............
   1e670:	03fe04fd 78ad09ff a28d8b79 8b585730     .......xy...0WX.
   1e680:	1d1c908c 4b0f0edd 2efcfb4c 5d5c3f2f     .......KL.../?\]
   1e690:	84e2b55f 92918e8d bbbab1a9 cac9c6c5     _...............
   1e6a0:	ffe5e4de 12110400 37343129 493d3b3a     ........)147:;=I
   1e6b0:	8e845d4a b4b1a992 cac6bbba e5e4cfce     J]..............
   1e6c0:	0e0d0400 31291211 453b3a34 5e4a4946     ......)14:;EFIJ^
   1e6d0:	91846564 cec99d9b 29110dcf 64574945     de.........)EIWd
   1e6e0:	a9918d65 c5bbbab4 e5e4dfc9 110d04f0     e...............
   1e6f0:	65644945 b2848180 d5bfbebc 83f1f0d7     EIde............
   1e700:	a6a48b85 c7c5bfbe dbdacfce cdbd9848     ............H...
   1e710:	49cfcec6 59574f4e 8e895f5e b7b6b18f     ...INOWY^_......
   1e720:	c7c6c1bf 171611d7 f7f65c5b 0d80fffe     ........[\......
   1e730:	dfde716d 6e1f0f0e 5f1d1c6f afae7e7d     mq.....no.._}~..
   1e740:	16fabcbb 461f1e17 584f4e47 7e5e5c5a     .......FGNOXZ\^~
   1e750:	d4c5b57f f1f0dcd5 8f7372f5 97967574     .........rs.tu..
   1e760:	2e265f2f b7afa72f d7cfc7bf 97409adf     /_&./.........@.
   1e770:	1f8f3098 ffcec1c0 5b5a4f4e 100f0807     .0......NOZ[....
   1e780:	efee2f27 3d376f6e 9045423f 53fffe91     '/..no7=?BE....S
   1e790:	c9c87567 d9d8d1d0 00fffee7 82225f20     gu.......... _".
   1e7a0:	448204df 06041b08 0eac8111 1e35ab80     ...D..........5.
   1e7b0:	03e08015 04010819 0434042f 07010307     ......../.4.....
   1e7c0:	0a110706 07120f50 04020855 03090a1c     ....P...U.......
   1e7d0:	03070308 03030302 0305040c 0e01060b     ................
   1e7e0:	033a0515 05060711 07570710 0d150702     ..:.......W.....
   1e7f0:	03430450 0401032d 0c0f0611 251d043a     P.C.-.......:..%
   1e800:	046d205f c880256a 03b08205 fd82061a     _ m.j%..........
   1e810:	15075903 1409170b 6a0c140c 1a060a06     .Y.........j....
   1e820:	2b075906 2c0a4605 01040c04 2c0b3103     .Y.+.F.,.....1.,
   1e830:	0b061a04 06ac8003 411f060a 032d044c     ...........AL.-.
   1e840:	033c0874 073c030f 052b0838 1811ff82     t.<...<.8.+.....
   1e850:	2d112f08 21102003 048c800f 0b199782     ./.-. .!........
   1e860:	05948815 073b052f 09180e02 7430b080     ..../.;.......0t
   1e870:	1ad6800c ff80050c 05b68005 c69b0c24     ............$...
   1e880:	1030d20a 37038d84 145c8109 8008b880     ..0....7..\.....
   1e890:	043530c7 0838060a 060c0846 031e0b74     .05...8.F...t...
   1e8a0:	0959045a 1c188380 4809160a 068a8008     Z.Y........H....
   1e8b0:	170ca4ab 04a13104 0726da81 8005050c     .....1....&.....
   1e8c0:	6d8111a5 2a287810 80044c06 be80048d     ...m.x(*.L......
   1e8d0:	0f031b03 0106000d 04010301 09080802     ................
   1e8e0:	0b050a02 11011002 13051204 15021411     ................
   1e8f0:	19021702 1d051c04 6a012408 bc026b03     .........$.j.k..
   1e900:	d402d102 d609d50c da02d702 e105e001     ................
   1e910:	ee02e802 f904f020 0c02fa06 4e3e3b27     .... .......';>N
   1e920:	9e9e8f4f 0907069f 563e3d36 04d1d0f3     O.......6=>V....
   1e930:	37361814 35bd5756 12e0cfce 9e8e8987     ..67VW.5........
   1e940:	110e0d04 34312912 4946453a 644f4e4a     .....)14:EFIJNOd
   1e950:	b65c5a65 a81c1bb7 09d9d8a9 a8919037     eZ\.........7...
   1e960:	3e3b0a07 928f6966 efee5f6f 9b9a625a     ..;>fi..o_..Zb..
   1e970:	9d552827 a4a3a1a0 baada8a7 0b06c4bc     '(U.............
   1e980:	3a1d150c a651453f a0cdcca7 221a1907     ...:?EQ........"
   1e990:	c53f3e25 232004c6 33282625 4a483a38     %>?... #%&(38:HJ
   1e9a0:	5553504c 5c5a5856 6563605e 78736b66     LPSUVXZ\^`cefksx
   1e9b0:	a48a7f7d c0b0afaa a3720cd0 6ecccba4     }.........r....n
   1e9c0:	7b225e6f 2d040305 01046503 82802e2f     o^"{...-.e../...
   1e9d0:	0f31031d 0924041c 052b051e 2a0e0444     ..1...$...+.D..*
   1e9e0:	2406aa80 28042404 010b3408 37819080     ...$.$.(.4.....7
   1e9f0:	080a1609 03399880 30090863 03210516     ......9.c..0..!.
   1ea00:	4001051b 054b0438 070a042f 20400709     ...@8.K./.....@ 
   1ea10:	090c0427 053a0336 0c04071a 37495007     '...6.:......PI7
   1ea20:	07330d33 810a082e 81801f26 802a0828     3.3.....&...(.*.
   1ea30:	4e091786 430f1e04 0a07190e 27094706     ...N...C.....G.'
   1ea40:	3f0b7509 3b062a41 51060a05 10050106     .u.?A*.;...Q....
   1ea50:	8b800503 08482060 5ea6800a 0a0b4522     ....` H....^"E..
   1ea60:	39130d06 2c360a07 c0801004 0c53643c     ...9..6,....<dS.
   1ea70:	45a08001 5308481b 0781391d 031d0a46     ...E.H.S.9..F...
   1ea80:	03374947 060a080e 810a0739 c7801936     GI7.....9...6...
   1ea90:	9b830d32 800b7566 84bc8ac4 82d18f2f     2...fu....../...
   1eaa0:	82b9a147 042a0739 0a266002 05280a46     G...9.*..`&.F.(.
   1eab0:	5bb08213 39044b65 04401107 08f8971c     ...[eK.9..@.....
   1eac0:	0da5f382 03311f81 81080411 6b04898c     ......1........k
   1ead0:	09030d05 60931007 730af680 46176e08     .......`...s.n.F
   1eae0:	0c149a80 80190957 03478187 150f4285     ....W.....G..B..
   1eaf0:	802b5085 1a032dd5 70810204 8501053a     .P+..-.....p:...
   1eb00:	29d78000 040a044c 44118302 c2803d4c     ...)L......DL=..
   1eb10:	0401063c 341b0555 2c0e8102 560c6404     <...U..4...,.d.V
   1eb20:	5d030d0a 1d393d03 09042c0d 060e0207     ...].=9..,......
   1eb30:	d6839a80 0b030d0a 590c7405 0c140c07     .........t.Y....
   1eb40:	0a083804 1e082806 31037752 0ca68003     .8...(..Rw.1....
   1eb50:	05030414 85060d03 6372736a 62696c2f     ........jsrc/lib
   1eb60:	65726f63 696e752f 65646f63 646f6d2f     core/unicode/mod
   1eb70:	0073722e 0001eb59 0000001a 00000038     .rs.Y.......8...
   1eb80:	0000000f 0001eb59 0000001a 00000039     ....Y.......9...
   1eb90:	00000010                                ....

0001eb94 <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   1eb94:	1b150f04 17120319 0e000011 00000016     ................
	...
   1ebbc:	00130600 00000000 00000000 00000000     ................
   1ebcc:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   1ebec:	01050000 00000000 00000000 00000000     ................
   1ebfc:	00000000 10000000 00000000 0009000b     ................
   1ec0c:	                                         ...

0001ec0f <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   1ec2b:	00120f00 00000000 00000000 00000000     ................
   1ec3b:	0000001f 00000000 00000000 00000000     ................
   1ec4b:	1d664649 00000000 00000000 00000000     IFf.............
   1ec5b:	00003e8a 00000000 00000000 4b000000     .>.............K
   1ec6b:	00000053 00000000 00000000 42236700     S............g#B
	...
   1ec87:	0000003d 00230000 00000000 00000000     =.....#.........
   1ec97:	2d000075 00000000 00000000 00000000     u..-............
   1eca7:	003c4e82 00000000 00000000 63000000     .N<............c
   1ecb7:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   1ecc7:	00000300 00000000 00000000 0000002f     ............/...
   1ecd7:	00000000 00001000 13000000 00000800     ................
	...
   1ecef:	43000000 89007200 00000000 00000000     ...C.r..........
   1ecff:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   1ed0f:	00210000 00000000 00000000 00000000     ..!.............
   1ed1f:	4100000a 00000000 00000000 00000000     ...A............
   1ed2f:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   1ed3f:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   1ed4f:	00000031 00000053 3a000000 00000000     1...S......:....
   1ed5f:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   1ed6f:	0017003b 00000000 00000000 00000000     ;...............
   1ed7f:	57000055 83000000 00000000 00000000     U..W............
   1ed8f:	00000059 26000000 00161b6e 00000000     Y......&n.......
   1ed9f:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   1edaf:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   1edbf:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   1edcf:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   1eddf:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   1edef:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

0001ee00 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   1ee08:	00000001 00000000 0000000d 00000000     ................
   1ee18:	0000001c 00000000 00000040 00000000     ........@.......
   1ee28:	000000b6 00000000 000000bf 00000000     ................
   1ee38:	000003f8 00000000 000007f0 00000000     ................
   1ee48:	000007ff 00000000 00001000 00000000     ................
   1ee58:	00001e00 00000000 00003800 00000000     .........8......
   1ee68:	00003f00 00000000 00007f80 00000000     .?..............
   1ee78:	00008000 00000000 0001ffc0 00000000     ................
   1ee88:	0003ff80 00000000 00078000 00000000     ................
   1ee98:	007f0000 00000000 00802001 00000000     ......... ......
   1eea8:	00a30000 00000000 037ffc00 00000000     ................
   1eeb8:	06000000 00000000 07ff0000 00000000     ................
   1eec8:	09800000 00000000 0e000000 00000000     ................
   1eed8:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   1eee8:	200ffe40 00000000 30000001 00000000     @.. .......0....
   1eef8:	40000000 00000000 4000005c 00000000     ...@....\..@....
   1ef08:	60000000 00000000 805c8400 00000000     ...`......\.....
   1ef18:	c0000000 00000000 e0000000 00000000     ................
   1ef28:	00000000 00000001 0cf00000 00000001     ................
   1ef38:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   1ef48:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   1ef58:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   1ef68:	00000000 00000060 00000844 00000060     ....`...D...`...
   1ef78:	00000000 000000f0 00000060 00000200     ........`.......
   1ef88:	f9ffff7f 000007db 80000000 000007f8     ................
   1ef98:	e0000000 00000fbc 00000000 00002120     ............ !..
   1efa8:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   1efb8:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   1efc8:	00000000 00003fc0 00000000 0000f000     .....?..........
   1efd8:	00000000 0000fc00 f8000010 0000fffe     ................
   1efe8:	0000ffff 0000ffff ffffffff 0000ffff     ................
   1eff8:	fffff800 00010000 00000000 0001ffc0     ................
   1f008:	ffff0000 0001ffff 00000000 00030000     ................
   1f018:	00000000 00038000 00000000 0003a340     ............@...
   1f028:	00000000 00080000 000c0000 000c0000     ................
   1f038:	00000004 000ff800 00000000 00180000     ................
   1f048:	001c0000 001c0000 c3000000 001e0001     ................
   1f058:	00000000 001f0000 00800001 001f1fc0     ................
   1f068:	00000007 001fef80 ffffffff 00201fff     .............. .
   1f078:	00023986 00230000 00000002 00403000     .9....#......0@.
   1f088:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   1f098:	00000000 007f0000 00000000 00bf2800     .............(..
   1f0a8:	00000000 00cff000 03000000 02a00000     ................
   1f0b8:	fff70000 031021fd 00000003 06780000     .....!........x.
   1f0c8:	00000000 06ff8000 00000000 07c00000     ................
   1f0d8:	00000000 07f20000 00000000 0e040187     ................
   1f0e8:	00000006 10000000 00001008 10000000     ................
   1f0f8:	00000007 14000000 0000000f 17f00000     ................
   1f108:	00000000 1ff20000 feffe0df 1fffffff     ................
   1f118:	00000000 20000000 00000000 200ff800     ....... ....... 
   1f128:	00000007 33c80000 00000000 3fb00000     .......3.......?
   1f138:	00000000 3ff78000 00000004 40000000     .......?.......@
   1f148:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   1f158:	00000002 50000000 00000003 58000000     .......P.......X
   1f168:	00000000 66fde000 000007fe 79f80000     .......f.......y
   1f178:	00000003 7fc00000 00000000 7ffe0000     ................
   1f188:	00000000 7fff0000 00000000 80000000     ................
   1f198:	0000007f 80000000 00000030 8003ffff     ........0.......
   1f1a8:	0000f06e 87000000 00000002 90000000     n...............
   1f1b8:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   1f1c8:	00000000 a7f80000 00000000 b03c8000     ..............<.
   1f1d8:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   1f1e8:	fffe0000 bfffffff 00000011 c0000000     ................
   1f1f8:	00000000 c19d0000 00000002 d0000000     ................
   1f208:	00000000 f807c3a0 ffffffff f87fffff     ................
   1f218:	ffffffff fbffffff 000021be fc00000c     .........!......
   1f228:	00000000 ff000000 00000002 ff000000     ................
   1f238:	00020000 ffff0000 fff80000 fffffffb     ................
   1f248:	00000000 ffffffff ffffffff ffffffff     ................
   1f258:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

0001f268 <nrf52_hal_i2cs>:
   1f268:	00000000 20000108                       ....... 

0001f270 <nrf52_hal_spis>:
   1f270:	2000cdc0 00000000 00000000 65737341     ... ........Asse
   1f280:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   1f290:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   1f2a0:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   1f2b0:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   1f2c0:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   1f2d0:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   1f2e0:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   1f2f0:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   1f300:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   1f310:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   1f320:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   1f330:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   1f340:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   1f350:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   1f360:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   1f370:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   1f380:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   1f390:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   1f3a0:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   1f3b0:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   1f3c0:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   1f3d0:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   1f3e0:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   1f3f0:	00000000 656c6469 00000000 7379736d     ....idle....msys
   1f400:	0000315f                                _1..

0001f404 <MemFile_methods>:
   1f404:	00019c91 00000000                       ........

0001f40c <stdout>:
   1f40c:	20000124                                $.. 

0001f410 <nrf52k_flash_dev>:
   1f410:	0001f428 00000000 00080000 00000080     (...............
   1f420:	00000001 000000ff                       ........

0001f428 <nrf52k_flash_funcs>:
   1f428:	00019efd 00019e2d 00019db5 00019e0d     ....-...........
   1f438:	00000000 00019e09 00000000              ............

0001f444 <nrf52_hal_timers>:
   1f444:	2000ced0 00000000 00000000 00000000     ... ............
	...

0001f45c <hal_i2c1_cfg>:
   1f45c:	00000007 00000006 00000064              ........d...

0001f468 <os_bsp_spi0m_cfg>:
   1f468:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   1f478:	7476655f 00000073                       _evts...

0001f480 <COLLECTOR_NODE_HW_ID>:
   1f480:	066aff57 50547878 67242949              W.j.xxTPI)$g

0001f48c <SENSOR_NODE_HW_IDS>:
   1f48c:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   1f49c:	08070605 020b0a09 04030201 08070605     ................
   1f4ac:	030b0a09 04030201 08070605 040b0a09     ................
   1f4bc:	04030201 08070605 050b0a09 77687325     ............%shw
   1f4cc:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   1f4dc:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   1f4ec:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   1f4fc:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   1f50c:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   1f51c:	0a732520 00000000 00000000               %s.........

0001f528 <sensor_node_addresses>:
   1f528:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   1f538:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   1f548:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   1f558:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   1f568:	00000a73                                s...

0001f56c <g_temp_stub_sensor_driver>:
   1f56c:	0001ad39 0001ac41 00000000 00000000     9...A...........
	...
   1f594:	20425453 64616572 6d657420 65732070     STB read temp se
   1f5a4:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   1f5b4:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

0001f5c4 <sysflash_map_dflt>:
	...
   1f5cc:	00004000 00000001 00008000 00073c00     .@...........<..
   1f5dc:	00000002 0007bc00 00000400 00000003     ................
   1f5ec:	0007c000 00001000 00000010 00004000     .............@..
   1f5fc:	00004000 00000011 0007d000 00003000     .@...........0..
   1f60c:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   1f61c:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
  95780	    108	  53048	 148936	  245c8	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
