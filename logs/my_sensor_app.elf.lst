
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm
/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x000080f9

Program Header:
0x70000001 off    0x00021364 vaddr 0x00021364 paddr 0x00021364 align 2**2
         filesz 0x00000018 memsz 0x00000018 flags r--
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0002137c memsz 0x0002137c flags rwx
    LOAD off    0x000300d8 vaddr 0x200000d8 paddr 0x0002137c align 2**16
         filesz 0x0000006c memsz 0x0000006c flags rw-
    LOAD off    0x00030148 vaddr 0x20000148 paddr 0x000213e8 align 2**16
         filesz 0x00000000 memsz 0x0000d640 flags rw-
    LOAD off    0x00040000 vaddr 0x20000000 paddr 0x20000000 align 2**16
         filesz 0x00000000 memsz 0x000000d8 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name               Size      VMA       LMA       File off  Algn  Flags
  0 .imghdr            00000020  00008000  00008000  00008000  2**0  ALLOC
  1 .text              00019344  00008020  00008020  00008020  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.extab         00000000  00021364  00021364  00030144  2**0  CONTENTS
  3 .ARM.exidx         00000018  00021364  00021364  00021364  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .vector_relocation 000000d8  20000000  20000000  00040000  2**0  ALLOC
  5 .rtt               00000000  200000d8  200000d8  00030144  2**0  CONTENTS
  6 .data              0000006c  200000d8  0002137c  000300d8  2**2  CONTENTS, ALLOC, LOAD, DATA
  7 .bssnz             00000000  20000144  20000144  00030144  2**0  CONTENTS
  8 .bss               0000d640  20000148  000213e8  00030148  2**3  ALLOC
  9 .stack_dummy       000001b0  2000d788  2000d788  00030148  2**3  CONTENTS, READONLY
 10 .ARM.attributes    0000003b  00000000  00000000  000302f8  2**0  CONTENTS, READONLY
 11 .comment           0000007f  00000000  00000000  00030333  2**0  CONTENTS, READONLY
 12 .svc_table         00000004  00000000  00000000  000303b2  2**0  CONTENTS, READONLY
 13 .debug_line        0004a563  00000000  00000000  000303b6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_info        000894eb  00000000  00000000  0007a919  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev      0000ebd2  00000000  00000000  00103e04  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges     00005e20  00000000  00000000  001129d8  2**3  CONTENTS, READONLY, DEBUGGING
 17 .debug_str         0005f67c  00000000  00000000  001187f8  2**0  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc         00013513  00000000  00000000  00177e74  2**0  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges      0001a170  00000000  00000000  0018b387  2**0  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame       0000f3b8  00000000  00000000  001a54f8  2**2  CONTENTS, READONLY, DEBUGGING
 21 .debug_macinfo     00000060  00000000  00000000  001b48b0  2**0  CONTENTS, READONLY, DEBUGGING
 22 .debug_pubnames    00018e47  00000000  00000000  001b4910  2**0  CONTENTS, READONLY, DEBUGGING
 23 .debug_pubtypes    00036175  00000000  00000000  001cd757  2**0  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .imghdr	00000000 .imghdr
00008020 l    d  .text	00000000 .text
00021364 l    d  .ARM.extab	00000000 .ARM.extab
00021364 l    d  .ARM.exidx	00000000 .ARM.exidx
20000000 l    d  .vector_relocation	00000000 .vector_relocation
200000d8 l    d  .rtt	00000000 .rtt
200000d8 l    d  .data	00000000 .data
20000144 l    d  .bssnz	00000000 .bssnz
20000148 l    d  .bss	00000000 .bss
2000d788 l    d  .stack_dummy	00000000 .stack_dummy
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .svc_table	00000000 .svc_table
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macinfo	00000000 .debug_macinfo
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_pubtypes	00000000 .debug_pubtypes
00000000 l    df *ABS*	00000000 gcc_startup_nrf52.o
000001b0 l       *ABS*	00000000 Stack_Size
00000000 l       *ABS*	00000000 Heap_Size
00008100 l       .text	00000000 .bss_zero_loop
00000000 l    df *ABS*	00000000 sbrk.c
200000d8 l     O .data	00000004 sbrkBase
200000dc l     O .data	00000004 sbrkLimit
200000e0 l     O .data	00000004 brk
00000000 l    df *ABS*	00000000 hal_system.c
00000000 l    df *ABS*	00000000 system_nrf52.c
0000820c l     F .text	0000003c errata_16
00008248 l     F .text	0000004c errata_31
00008294 l     F .text	0000003c errata_32
000082d0 l     F .text	0000004c errata_36
0000831c l     F .text	0000003c errata_37
00008358 l     F .text	0000003c errata_57
00008394 l     F .text	0000003c errata_66
000083d0 l     F .text	0000004c errata_108
00000000 l    df *ABS*	00000000 start.c
00000000 l    df *ABS*	00000000 29v7ssp6j8vk2cgm
00000d09 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
00057ea7 l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00032248 l       .debug_str	00000000 
0003223a l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
00000e0f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00000b83 l       .debug_str	00000000 
00000b8c l       .debug_str	00000000 
00000b90 l       .debug_str	00000000 
00000bba l       .debug_str	00000000 
00059989 l       .debug_str	00000000 
00000bbf l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
0000f54e l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
0005d5c1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2ac9yj7x9inahmak
00000d77 l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0005b2b3 l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0005c403 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0000161a l       .debug_str	00000000 
00001641 l       .debug_str	00000000 
00001649 l       .debug_str	00000000 
00001650 l       .debug_str	00000000 
00001656 l       .debug_str	00000000 
0000165d l       .debug_str	00000000 
0005aded l       .debug_str	00000000 
00001663 l       .debug_str	00000000 
00001672 l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0000168a l       .debug_str	00000000 
0000168f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
0000120a l       .debug_str	00000000 
00000e27 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
00000e37 l       .debug_str	00000000 
00000e6e l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00000e7a l       .debug_str	00000000 
00000eb1 l       .debug_str	00000000 
00000ebc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00000ec4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00000ed2 l       .debug_str	00000000 
0005e175 l       .debug_str	00000000 
00000edb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000ee5 l       .debug_str	00000000 
00001632 l       .debug_str	00000000 
00000eef l       .debug_str	00000000 
00007576 l       .debug_str	00000000 
00000f25 l       .debug_str	00000000 
00000f53 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000103f l       .debug_str	00000000 
00001076 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0005dca9 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000107f l       .debug_str	00000000 
00001093 l       .debug_str	00000000 
000010c6 l       .debug_str	00000000 
000010d1 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
000011c6 l       .debug_str	00000000 
00001204 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000123f l       .debug_str	00000000 
00001282 l       .debug_str	00000000 
0000129a l       .debug_str	00000000 
000012da l       .debug_str	00000000 
000012ef l       .debug_str	00000000 
00001329 l       .debug_str	00000000 
00001338 l       .debug_str	00000000 
00001377 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
200001f8 l     O .bss	00000001 _ZN3app12touch_sensor10I2C_BUFFER17h8f3c7b5d2c207abfE
2000014c l     O .bss	00000052 _ZN3app12touch_sensor10TOUCH_DATA17h64b26c24ec50591aE
2000014c l     O .bss	00000000 _ZN3app12touch_sensor11TOUCH_DELAY17h41aa62dc06660831E
200001e0 l     O .bss	00000010 _ZN3app12touch_sensor11TOUCH_EVENT17h248d1b5995e7331aE
20000148 l     O .bss	00000004 _ZN3app12touch_sensor11TOUCH_RESET17hc6437d039f5b5b2dE
00008bc8 l     F .text	00000752 _ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E
0000931a l     F .text	0000019a _ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E
00008a8e l     F .text	0000013a _ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E
00008a42 l     F .text	0000004c _ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE
2000019e l     O .bss	0000003f _ZN3app12touch_sensor3BUF17h7dd26ed30d22a01eE
200001f0 l     O .bss	00000008 _ZN3app12touch_sensor8I2C_DATA17h66f4f9260b49f5dfE
0001d4e0 l     O .text	00000021 str.0
0001d520 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 3av1m1so5ua992q
00001ae1 l       .debug_str	00000000 
000019aa l       .debug_str	00000000 
00001a09 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00001a26 l       .debug_str	00000000 
00001a81 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a87 l       .debug_str	00000000 
00001ae6 l       .debug_str	00000000 
00059970 l       .debug_str	00000000 
00001b41 l       .debug_str	00000000 
00001b71 l       .debug_str	00000000 
00001b7e l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005ddf7 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00001c09 l       .debug_str	00000000 
00007827 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
0004aa57 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00059469 l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c13 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
0000230c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00001c20 l       .debug_str	00000000 
0003b6ca l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001eb98 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
00019dd0 l       .debug_str	00000000 
00001c3a l       .debug_str	00000000 
00001c43 l       .debug_str	00000000 
0005d313 l       .debug_str	00000000 
0000d9d9 l       .debug_str	00000000 
0000d9df l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001693 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000169e l       .debug_str	00000000 
000016cc l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000016dd l       .debug_str	00000000 
00001711 l       .debug_str	00000000 
0000171f l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001759 l       .debug_str	00000000 
00001784 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0000178d l       .debug_str	00000000 
0002448b l       .debug_str	00000000 
000017b9 l       .debug_str	00000000 
000586ad l       .debug_str	00000000 
00001813 l       .debug_str	00000000 
0003b6cb l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000186c l       .debug_str	00000000 
000018ca l       .debug_str	00000000 
000018d3 l       .debug_str	00000000 
00001931 l       .debug_str	00000000 
0000193a l       .debug_str	00000000 
0000199d l       .debug_str	00000000 
200001fc l     O .bss	00000050 _ZN3app5chip810CHIP8_TASK17he720e0e613659014E
2000324c l     O .bss	00000800 _ZN3app5chip813SCREEN_BUFFER17h6824cb449058aaa8E
2000024c l     O .bss	00003000 _ZN3app5chip816CHIP8_TASK_STACK17h96b2f7995bed9210E
000095cc l     F .text	00000084 _ZN3app5chip89task_func17h54bf83617eedf089E
0001dd40 l     O .text	00000021 str.0
0001dd80 l     O .text	0000001c str.1
0001dde0 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 3k1rew1y0sa9p4cs
00002147 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
0000daad l       .debug_str	00000000 
0000232d l       .debug_str	00000000 
00002328 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00059e4f l       .debug_str	00000000 
000022fd l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00001d51 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00001ddd l       .debug_str	00000000 
00001e12 l       .debug_str	00000000 
00001e2c l       .debug_str	00000000 
00001e61 l       .debug_str	00000000 
00001e7b l       .debug_str	00000000 
00001eb0 l       .debug_str	00000000 
00001eca l       .debug_str	00000000 
00001f00 l       .debug_str	00000000 
00001f1b l       .debug_str	00000000 
00001f6f l       .debug_str	00000000 
00001f91 l       .debug_str	00000000 
00002003 l       .debug_str	00000000 
00002039 l       .debug_str	00000000 
00002054 l       .debug_str	00000000 
0000208a l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000022cf l       .debug_str	00000000 
000020a5 l       .debug_str	00000000 
00002295 l       .debug_str	00000000 
00002277 l       .debug_str	00000000 
0000223e l       .debug_str	00000000 
000020db l       .debug_str	00000000 
00002222 l       .debug_str	00000000 
000021eb l       .debug_str	00000000 
000020f6 l       .debug_str	00000000 
000021cf l       .debug_str	00000000 
00002198 l       .debug_str	00000000 
0000217d l       .debug_str	00000000 
0000212c l       .debug_str	00000000 
0001eb26 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0000236d l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00001c09 l       .debug_str	00000000 
00007827 l       .debug_str	00000000 
00001c0c l       .debug_str	00000000 
0004aa57 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00059469 l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00002367 l       .debug_str	00000000 
00002361 l       .debug_str	00000000 
0000235b l       .debug_str	00000000 
00002355 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0005aded l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000db92 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00002352 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0005ab00 l       .debug_str	00000000 
00001c03 l       .debug_str	00000000 
00001c31 l       .debug_str	00000000 
0000230c l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00001c5b l       .debug_str	00000000 
00001c81 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00001c9f l       .debug_str	00000000 
00001d2b l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000234e l       .debug_str	00000000 
000595a1 l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0001df00 l     O .text	0000001c str.0
0001e180 l     O .text	00000021 str.1
0001e460 l     O .text	00000039 str.2
0001e4c0 l     O .text	00000021 str.3
0001e500 l     O .text	00000023 str.4
00000000 l    df *ABS*	00000000 4g2px1fyklyi5loj
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000023cf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0000237e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4li2bx5hst9qmla8
00001c1b l       .debug_str	00000000 
00002444 l       .debug_str	00000000 
00002480 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00002489 l       .debug_str	00000000 
00007b4c l       .debug_str	00000000 
000024b4 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
00002512 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001eb93 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000023dc l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4omwjvgyphguh48u
00002631 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
000025c2 l       .debug_str	00000000 
00002603 l       .debug_str	00000000 
00002672 l       .debug_str	00000000 
000026d5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00002725 l       .debug_str	00000000 
000027a5 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
000027fa l       .debug_str	00000000 
0000287a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00002531 l       .debug_str	00000000 
00002574 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 52x5s6n74aarru7s
00002ae6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
00002a52 l       .debug_str	00000000 
00002b2f l       .debug_str	00000000 
00002b79 l       .debug_str	00000000 
00002bcc l       .debug_str	00000000 
00002c5b l       .debug_str	00000000 
00002cbe l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00002d36 l       .debug_str	00000000 
00002da8 l       .debug_str	00000000 
00002e66 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00002dcc l       .debug_str	00000000 
00002d5a l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00002938 l       .debug_str	00000000 
000029c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 ltoum6qebj303de
00000d1e l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00002e74 l       .debug_str	00000000 
00002eb1 l       .debug_str	00000000 
00002ec2 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2faay6g6bya59u
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00002f01 l       .debug_str	00000000 
00002f7d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xuw4v3fy8tiv1h2
00003131 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000030f6 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0000319a l       .debug_str	00000000 
00003205 l       .debug_str	00000000 
00003241 l       .debug_str	00000000 
0000328e l       .debug_str	00000000 
000032ca l       .debug_str	00000000 
000032d8 l       .debug_str	00000000 
00003343 l       .debug_str	00000000 
0000335e l       .debug_str	00000000 
000033ca l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00003421 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
000028ee l       .debug_str	00000000 
00002faa l       .debug_str	00000000 
00003434 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00002ffc l       .debug_str	00000000 
00003035 l       .debug_str	00000000 
000027e3 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0000305e l       .debug_str	00000000 
00003097 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 embedded_graphics.94s3esdv-cgu.0
00003ebc l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00003560 l       .debug_str	00000000 
00003569 l       .debug_str	00000000 
00003571 l       .debug_str	00000000 
0000357a l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
00003587 l       .debug_str	00000000 
00003597 l       .debug_str	00000000 
000035a8 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
000035b9 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
000035e8 l       .debug_str	00000000 
000035ee l       .debug_str	00000000 
000035f9 l       .debug_str	00000000 
00003603 l       .debug_str	00000000 
0000360d l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
0000365e l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000036af l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00003700 l       .debug_str	00000000 
00003729 l       .debug_str	00000000 
00003732 l       .debug_str	00000000 
0000378f l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
000037b5 l       .debug_str	00000000 
000037dd l       .debug_str	00000000 
0000380f l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0000384b l       .debug_str	00000000 
000038a8 l       .debug_str	00000000 
00003905 l       .debug_str	00000000 
00003962 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00003994 l       .debug_str	00000000 
000039d9 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000039e5 l       .debug_str	00000000 
00057a27 l       .debug_str	00000000 
00003a21 l       .debug_str	00000000 
00003a65 l       .debug_str	00000000 
00003a70 l       .debug_str	00000000 
00003ab7 l       .debug_str	00000000 
00003ac5 l       .debug_str	00000000 
00003b0c l       .debug_str	00000000 
00003b1a l       .debug_str	00000000 
00003b5a l       .debug_str	00000000 
00003b62 l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
00003b74 l       .debug_str	00000000 
00003baf l       .debug_str	00000000 
00003bed l       .debug_str	00000000 
00003c1d l       .debug_str	00000000 
00003c31 l       .debug_str	00000000 
00003c61 l       .debug_str	00000000 
00003c75 l       .debug_str	00000000 
00003ca5 l       .debug_str	00000000 
00003cb9 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
00003d04 l       .debug_str	00000000 
00003d5b l       .debug_str	00000000 
00003d6a l       .debug_str	00000000 
00003db5 l       .debug_str	00000000 
00006737 l       .debug_str	00000000 
00003e2c l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00003f33 l       .debug_str	00000000 
00003fb8 l       .debug_str	00000000 
00003fc3 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000404c l       .debug_str	00000000 
00022012 l       .debug_str	00000000 
000040c3 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00004158 l       .debug_str	00000000 
000041ef l       .debug_str	00000000 
0000428a l       .debug_str	00000000 
0000431f l       .debug_str	00000000 
000043b6 l       .debug_str	00000000 
00004451 l       .debug_str	00000000 
00004519 l       .debug_str	00000000 
00004524 l       .debug_str	00000000 
000045f0 l       .debug_str	00000000 
00004680 l       .debug_str	00000000 
0000468c l       .debug_str	00000000 
00004732 l       .debug_str	00000000 
0000473e l       .debug_str	00000000 
000047e2 l       .debug_str	00000000 
00004884 l       .debug_str	00000000 
00004928 l       .debug_str	00000000 
0000497c l       .debug_str	00000000 
000049d1 l       .debug_str	00000000 
00004a26 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00004aa9 l       .debug_str	00000000 
00004b2d l       .debug_str	00000000 
00004bb1 l       .debug_str	00000000 
0000ded5 l       .debug_str	00000000 
00004bf8 l       .debug_str	00000000 
0000dedb l       .debug_str	00000000 
00004c3f l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00004c86 l       .debug_str	00000000 
00004d04 l       .debug_str	00000000 
00004d83 l       .debug_str	00000000 
00004e1e l       .debug_str	00000000 
00004eb2 l       .debug_str	00000000 
00004eff l       .debug_str	00000000 
00004f0b l       .debug_str	00000000 
00004f6e l       .debug_str	00000000 
00004fb6 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00004fc2 l       .debug_str	00000000 
00005056 l       .debug_str	00000000 
000050bc l       .debug_str	00000000 
0000514d l       .debug_str	00000000 
000051ec l       .debug_str	00000000 
0000527d l       .debug_str	00000000 
0000531c l       .debug_str	00000000 
000053be l       .debug_str	00000000 
0000544f l       .debug_str	00000000 
000054fd l       .debug_str	00000000 
000055ad l       .debug_str	00000000 
00005661 l       .debug_str	00000000 
00005754 l       .debug_str	00000000 
0000575f l       .debug_str	00000000 
00005856 l       .debug_str	00000000 
00005902 l       .debug_str	00000000 
0000590c l       .debug_str	00000000 
0000597e l       .debug_str	00000000 
000059f3 l       .debug_str	00000000 
00005a66 l       .debug_str	00000000 
00005ad7 l       .debug_str	00000000 
00005b4a l       .debug_str	00000000 
00005bc1 l       .debug_str	00000000 
00005c36 l       .debug_str	00000000 
00005cab l       .debug_str	00000000 
00005d1b l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00005dad l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00005dbe l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00005e12 l       .debug_str	00000000 
00005e1c l       .debug_str	00000000 
00005e26 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00005e30 l       .debug_str	00000000 
00005e61 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005e96 l       .debug_str	00000000 
00005ea0 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005eaa l       .debug_str	00000000 
00005eb3 l       .debug_str	00000000 
00005ee2 l       .debug_str	00000000 
00005eef l       .debug_str	00000000 
00005ef2 l       .debug_str	00000000 
00005ef5 l       .debug_str	00000000 
00005ef8 l       .debug_str	00000000 
00005efb l       .debug_str	00000000 
00005efe l       .debug_str	00000000 
00005f01 l       .debug_str	00000000 
00005f4f l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00005fe2 l       .debug_str	00000000 
0000603b l       .debug_str	00000000 
00006016 l       .debug_str	00000000 
0000606c l       .debug_str	00000000 
00006048 l       .debug_str	00000000 
0000609d l       .debug_str	00000000 
00006078 l       .debug_str	00000000 
000060d1 l       .debug_str	00000000 
000060aa l       .debug_str	00000000 
00006106 l       .debug_str	00000000 
000060e0 l       .debug_str	00000000 
0000613a l       .debug_str	00000000 
00006114 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00003481 l       .debug_str	00000000 
000034e1 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
0000e1f2 l     F .text	00000044 _ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE
0000e2e6 l     F .text	0000006e _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E
0000e354 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE
0000e38c l     F .text	0000001a _ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E
00000000 l    df *ABS*	00000000 hash32.79y5bd3b-cgu.0
00006dd5 l       .debug_str	00000000 
0000673b l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
000067a4 l       .debug_str	00000000 
000067da l       .debug_str	00000000 
000067f5 l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
0000684e l       .debug_str	00000000 
0000688a l       .debug_str	00000000 
000068b0 l       .debug_str	00000000 
000068bc l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
000068f0 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000693e l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
0000698f l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000069e1 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00006a36 l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
00006ad7 l       .debug_str	00000000 
00006b25 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00006b34 l       .debug_str	00000000 
00006b85 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00006b9d l       .debug_str	00000000 
00006bf2 l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
00006c16 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00006c64 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00006cb8 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00006d27 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00006d84 l       .debug_str	00000000 
00006de7 l       .debug_str	00000000 
00006e3f l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00006e55 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00006e60 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00006e89 l       .debug_str	00000000 
00006eec l       .debug_str	00000000 
00006f16 l       .debug_str	00000000 
00006f79 l       .debug_str	00000000 
00006f82 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00007001 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
00007088 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
000070e8 l       .debug_str	00000000 
0000711b l       .debug_str	00000000 
00007185 l       .debug_str	00000000 
000071b8 l       .debug_str	00000000 
000071bd l       .debug_str	00000000 
00007221 l       .debug_str	00000000 
0005c707 l       .debug_str	00000000 
0000727c l       .debug_str	00000000 
000072b8 l       .debug_str	00000000 
000072c6 l       .debug_str	00000000 
000072f5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00007438 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00033af9 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0000745c l       .debug_str	00000000 
00007474 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00007491 l       .debug_str	00000000 
000072c0 l       .debug_str	00000000 
000074aa l       .debug_str	00000000 
000074c6 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00006148 l       .debug_str	00000000 
0000619d l       .debug_str	00000000 
000061e7 l       .debug_str	00000000 
000061ee l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00005fd4 l       .debug_str	00000000 
00005fdf l       .debug_str	00000000 
0000cd61 l       .debug_str	00000000 
0000cd6c l       .debug_str	00000000 
0000746e l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00006201 l       .debug_str	00000000 
0000622a l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
00006257 l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000062d0 l       .debug_str	00000000 
000062e4 l       .debug_str	00000000 
000062f7 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00006363 l       .debug_str	00000000 
0000638c l       .debug_str	00000000 
00006399 l       .debug_str	00000000 
000063a3 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000574 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
000063a7 l       .debug_str	00000000 
00058985 l       .debug_str	00000000 
000074c0 l       .debug_str	00000000 
0000748a l       .debug_str	00000000 
000063b1 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00006410 l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
00006466 l       .debug_str	00000000 
000064a4 l       .debug_str	00000000 
000064bf l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00006524 l       .debug_str	00000000 
00006554 l       .debug_str	00000000 
0000657b l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
000065ad l       .debug_str	00000000 
000065f2 l       .debug_str	00000000 
000065fe l       .debug_str	00000000 
00006644 l       .debug_str	00000000 
00006651 l       .debug_str	00000000 
00006697 l       .debug_str	00000000 
000066a4 l       .debug_str	00000000 
000066e2 l       .debug_str	00000000 
000066e8 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0000e53c l     F .text	00000034 _ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE
0000e5a6 l     F .text	00000018 _ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E
0000e5d0 l     F .text	0000003e _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE
0000e60e l     F .text	00000040 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE
0000e6de l     F .text	0000011c _ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE
00000000 l    df *ABS*	00000000 log.9af4yuww-cgu.0
00009741 l       .debug_str	00000000 
00007814 l       .debug_str	00000000 
0000781c l       .debug_str	00000000 
00007823 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000782a l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
0000782e l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
0005deab l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000078e5 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000791a l       .debug_str	00000000 
0000794c l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
0000795e l       .debug_str	00000000 
00007987 l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000079ac l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000079d5 l       .debug_str	00000000 
000079ff l       .debug_str	00000000 
00007a28 l       .debug_str	00000000 
00007a74 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00007af0 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00059776 l       .debug_str	00000000 
0004c7c9 l       .debug_str	00000000 
0005a4db l       .debug_str	00000000 
0005bdf4 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0000c8bd l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0000cc16 l       .debug_str	00000000 
0000cb75 l       .debug_str	00000000 
00007b05 l       .debug_str	00000000 
00007b0f l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0000c82d l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0000cc4f l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000cc2e l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000c87e l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
00007b1e l       .debug_str	00000000 
00007b47 l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
00007b62 l       .debug_str	00000000 
00007b75 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00007b8e l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00007ba3 l       .debug_str	00000000 
00007c1f l       .debug_str	00000000 
00007bb6 l       .debug_str	00000000 
00007bf8 l       .debug_str	00000000 
00007c0d l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
00007c2a l       .debug_str	00000000 
00007c34 l       .debug_str	00000000 
00007c66 l       .debug_str	00000000 
00007c7a l       .debug_str	00000000 
00007c8f l       .debug_str	00000000 
0000be28 l       .debug_str	00000000 
0000c031 l       .debug_str	00000000 
00007c96 l       .debug_str	00000000 
00007ca1 l       .debug_str	00000000 
00007d25 l       .debug_str	00000000 
00007d53 l       .debug_str	00000000 
00007dd9 l       .debug_str	00000000 
00040863 l       .debug_str	00000000 
00007e01 l       .debug_str	00000000 
00007e12 l       .debug_str	00000000 
00007e9c l       .debug_str	00000000 
00007eba l       .debug_str	00000000 
00007f48 l       .debug_str	00000000 
00007f6f l       .debug_str	00000000 
00007ffe l       .debug_str	00000000 
00008046 l       .debug_str	00000000 
00008075 l       .debug_str	00000000 
000080bd l       .debug_str	00000000 
000080dc l       .debug_str	00000000 
00008124 l       .debug_str	00000000 
00008134 l       .debug_str	00000000 
0000817c l       .debug_str	00000000 
0000818d l       .debug_str	00000000 
000081d5 l       .debug_str	00000000 
000081dd l       .debug_str	00000000 
00008225 l       .debug_str	00000000 
0000822f l       .debug_str	00000000 
00008277 l       .debug_str	00000000 
00008291 l       .debug_str	00000000 
000082d9 l       .debug_str	00000000 
000082f2 l       .debug_str	00000000 
0000833a l       .debug_str	00000000 
0000834d l       .debug_str	00000000 
00008395 l       .debug_str	00000000 
0000839e l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000083e6 l       .debug_str	00000000 
00008430 l       .debug_str	00000000 
0000847b l       .debug_str	00000000 
000084b9 l       .debug_str	00000000 
000084ea l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00008528 l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
0000855c l       .debug_str	00000000 
00008581 l       .debug_str	00000000 
000085e0 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00008647 l       .debug_str	00000000 
00008671 l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
000086d1 l       .debug_str	00000000 
00008702 l       .debug_str	00000000 
0000870c l       .debug_str	00000000 
00008769 l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0000879b l       .debug_str	00000000 
000087c1 l       .debug_str	00000000 
000087e3 l       .debug_str	00000000 
00008809 l       .debug_str	00000000 
0000882b l       .debug_str	00000000 
00008854 l       .debug_str	00000000 
00008879 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
000088ce l       .debug_str	00000000 
000088d7 l       .debug_str	00000000 
00008961 l       .debug_str	00000000 
00001c97 l       .debug_str	00000000 
0000897e l       .debug_str	00000000 
00008a0a l       .debug_str	00000000 
00008a27 l       .debug_str	00000000 
00008a47 l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
00008a4e l       .debug_str	00000000 
00008a89 l       .debug_str	00000000 
00008abb l       .debug_str	00000000 
00008acc l       .debug_str	00000000 
00008b07 l       .debug_str	00000000 
00008b4d l       .debug_str	00000000 
00003ca5 l       .debug_str	00000000 
00008b7d l       .debug_str	00000000 
00008bad l       .debug_str	00000000 
00008bcb l       .debug_str	00000000 
00008bfb l       .debug_str	00000000 
00008c0e l       .debug_str	00000000 
00008c3e l       .debug_str	00000000 
00008c53 l       .debug_str	00000000 
00008c83 l       .debug_str	00000000 
00008c9f l       .debug_str	00000000 
00008ccf l       .debug_str	00000000 
00008ced l       .debug_str	00000000 
00008d1d l       .debug_str	00000000 
00008d38 l       .debug_str	00000000 
00008d68 l       .debug_str	00000000 
00008d8c l       .debug_str	00000000 
00008dbc l       .debug_str	00000000 
00008df6 l       .debug_str	00000000 
00008e26 l       .debug_str	00000000 
00008e4b l       .debug_str	00000000 
00008e7b l       .debug_str	00000000 
00008ea5 l       .debug_str	00000000 
00008edb l       .debug_str	00000000 
00008f0c l       .debug_str	00000000 
00008f46 l       .debug_str	00000000 
00008f7b l       .debug_str	00000000 
00008fb7 l       .debug_str	00000000 
00008fdd l       .debug_str	00000000 
00008fff l       .debug_str	00000000 
00009026 l       .debug_str	00000000 
00009049 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00009097 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
000090e8 l       .debug_str	00000000 
00009139 l       .debug_str	00000000 
00009146 l       .debug_str	00000000 
00009198 l       .debug_str	00000000 
000091a6 l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
00009203 l       .debug_str	00000000 
0000924e l       .debug_str	00000000 
00009262 l       .debug_str	00000000 
000092a5 l       .debug_str	00000000 
000092b2 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
000092f5 l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
00009362 l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
000093d5 l       .debug_str	00000000 
00009427 l       .debug_str	00000000 
00009479 l       .debug_str	00000000 
00009483 l       .debug_str	00000000 
000094d8 l       .debug_str	00000000 
0000952d l       .debug_str	00000000 
00009583 l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
000095e5 l       .debug_str	00000000 
00009621 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0000965f l       .debug_str	00000000 
0000969a l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
000096a5 l       .debug_str	00000000 
000096ec l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00009702 l       .debug_str	00000000 
00009793 l       .debug_str	00000000 
000097a9 l       .debug_str	00000000 
000097ee l       .debug_str	00000000 
00009808 l       .debug_str	00000000 
0000986b l       .debug_str	00000000 
0000988b l       .debug_str	00000000 
000098ca l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0000992b l       .debug_str	00000000 
0000996a l       .debug_str	00000000 
0000ca50 l       .debug_str	00000000 
00009991 l       .debug_str	00000000 
000099d1 l       .debug_str	00000000 
00009a04 l       .debug_str	00000000 
00009a1b l       .debug_str	00000000 
00009a61 l       .debug_str	00000000 
00009a7d l       .debug_str	00000000 
00009ae1 l       .debug_str	00000000 
00009b03 l       .debug_str	00000000 
00009b45 l       .debug_str	00000000 
00009b66 l       .debug_str	00000000 
00009ba8 l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
00009bd8 l       .debug_str	00000000 
00009c1c l       .debug_str	00000000 
00009c71 l       .debug_str	00000000 
00009cb5 l       .debug_str	00000000 
00009d0b l       .debug_str	00000000 
00009d4f l       .debug_str	00000000 
00009dc7 l       .debug_str	00000000 
00009e0b l       .debug_str	00000000 
00009e4b l       .debug_str	00000000 
00009e66 l       .debug_str	00000000 
00009ea7 l       .debug_str	00000000 
00009efd l       .debug_str	00000000 
00009f41 l       .debug_str	00000000 
00009f6e l       .debug_str	00000000 
00009fb3 l       .debug_str	00000000 
00009ffb l       .debug_str	00000000 
0000a00c l       .debug_str	00000000 
0000a054 l       .debug_str	00000000 
0000a065 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
0000a0a0 l       .debug_str	00000000 
0000a0dc l       .debug_str	00000000 
0000a0e2 l       .debug_str	00000000 
0000a118 l       .debug_str	00000000 
0000a12b l       .debug_str	00000000 
0000a162 l       .debug_str	00000000 
0000a176 l       .debug_str	00000000 
0000a1b8 l       .debug_str	00000000 
0000a1d7 l       .debug_str	00000000 
0000a21c l       .debug_str	00000000 
0000a237 l       .debug_str	00000000 
0000a29c l       .debug_str	00000000 
0000a303 l       .debug_str	00000000 
0000a30e l       .debug_str	00000000 
0000a354 l       .debug_str	00000000 
0000a39a l       .debug_str	00000000 
0000a3a4 l       .debug_str	00000000 
0000a3eb l       .debug_str	00000000 
0000a3f6 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
0000a43d l       .debug_str	00000000 
0000a486 l       .debug_str	00000000 
0000a4cf l       .debug_str	00000000 
0000a508 l       .debug_str	00000000 
0000a523 l       .debug_str	00000000 
0000a532 l       .debug_str	00000000 
0000a56b l       .debug_str	00000000 
0000a590 l       .debug_str	00000000 
0000a5c9 l       .debug_str	00000000 
0000a602 l       .debug_str	00000000 
0000a628 l       .debug_str	00000000 
0000a661 l       .debug_str	00000000 
0000a69f l       .debug_str	00000000 
0000a6d9 l       .debug_str	00000000 
0000a6e5 l       .debug_str	00000000 
0000a721 l       .debug_str	00000000 
0000a734 l       .debug_str	00000000 
0000a770 l       .debug_str	00000000 
0000a789 l       .debug_str	00000000 
0000a7c6 l       .debug_str	00000000 
0000a7d7 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
0000a828 l       .debug_str	00000000 
0000a879 l       .debug_str	00000000 
0000a882 l       .debug_str	00000000 
0000a8dd l       .debug_str	00000000 
0000a940 l       .debug_str	00000000 
0000a95c l       .debug_str	00000000 
0000a9bc l       .debug_str	00000000 
0000aa1c l       .debug_str	00000000 
0000aa80 l       .debug_str	00000000 
0000aa9b l       .debug_str	00000000 
0000aaff l       .debug_str	00000000 
0000ab0a l       .debug_str	00000000 
0000ab74 l       .debug_str	00000000 
0000ab83 l       .debug_str	00000000 
0000abf2 l       .debug_str	00000000 
0000ac0a l       .debug_str	00000000 
0000ac7a l       .debug_str	00000000 
0000ac93 l       .debug_str	00000000 
0000acfe l       .debug_str	00000000 
0000ad13 l       .debug_str	00000000 
0000ad83 l       .debug_str	00000000 
0000ad98 l       .debug_str	00000000 
0000ae08 l       .debug_str	00000000 
0000ae1a l       .debug_str	00000000 
0000ae8b l       .debug_str	00000000 
0000ae9e l       .debug_str	00000000 
0000af0f l       .debug_str	00000000 
0000af25 l       .debug_str	00000000 
0000af37 l       .debug_str	00000000 
0000afa3 l       .debug_str	00000000 
0000afb5 l       .debug_str	00000000 
0000b021 l       .debug_str	00000000 
0000b030 l       .debug_str	00000000 
0000b098 l       .debug_str	00000000 
0000b0a2 l       .debug_str	00000000 
0000b116 l       .debug_str	00000000 
00002436 l       .debug_str	00000000 
0000b121 l       .debug_str	00000000 
0000b199 l       .debug_str	00000000 
0000b1b2 l       .debug_str	00000000 
0000b22a l       .debug_str	00000000 
0000b2c0 l       .debug_str	00000000 
0000b2dc l       .debug_str	00000000 
0000b372 l       .debug_str	00000000 
0000b408 l       .debug_str	00000000 
0000b49e l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0000b513 l       .debug_str	00000000 
0000b587 l       .debug_str	00000000 
0000b600 l       .debug_str	00000000 
0000b67f l       .debug_str	00000000 
0000b690 l       .debug_str	00000000 
0000b710 l       .debug_str	00000000 
0000b772 l       .debug_str	00000000 
0000cd19 l       .debug_str	00000000 
0000b7c3 l       .debug_str	00000000 
0000b7e5 l       .debug_str	00000000 
0000b812 l       .debug_str	00000000 
0000b841 l       .debug_str	00000000 
0000b863 l       .debug_str	00000000 
0000b88a l       .debug_str	00000000 
0000b8b3 l       .debug_str	00000000 
0000b8e5 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0000b935 l       .debug_str	00000000 
0000b97b l       .debug_str	00000000 
0000b98e l       .debug_str	00000000 
0000b9e2 l       .debug_str	00000000 
0000ba54 l       .debug_str	00000000 
0000bac6 l       .debug_str	00000000 
0000bb38 l       .debug_str	00000000 
0000bb87 l       .debug_str	00000000 
0000bbb5 l       .debug_str	00000000 
0000bbc0 l       .debug_str	00000000 
0000bc1a l       .debug_str	00000000 
0000bc92 l       .debug_str	00000000 
0000bd0a l       .debug_str	00000000 
0000bd5f l       .debug_str	00000000 
0000bd94 l       .debug_str	00000000 
00005fa5 l       .debug_str	00000000 
0000bdbf l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0000bdee l       .debug_str	00000000 
0000be1e l       .debug_str	00000000 
0000be36 l       .debug_str	00000000 
0000be67 l       .debug_str	00000000 
0000be99 l       .debug_str	00000000 
0000bed8 l       .debug_str	00000000 
0000beeb l       .debug_str	00000000 
0000bf23 l       .debug_str	00000000 
0000bf2f l       .debug_str	00000000 
0000bf5f l       .debug_str	00000000 
0000bf90 l       .debug_str	00000000 
0000bf96 l       .debug_str	00000000 
0000bfc3 l       .debug_str	00000000 
0000bff4 l       .debug_str	00000000 
0000c027 l       .debug_str	00000000 
0000c041 l       .debug_str	00000000 
0000c075 l       .debug_str	00000000 
0000c0a8 l       .debug_str	00000000 
000579bf l       .debug_str	00000000 
0000c0f5 l       .debug_str	00000000 
0000c13e l       .debug_str	00000000 
000579a2 l       .debug_str	00000000 
0000c189 l       .debug_str	00000000 
0000c1b1 l       .debug_str	00000000 
0000c1f7 l       .debug_str	00000000 
0000c1fd l       .debug_str	00000000 
0000c22b l       .debug_str	00000000 
0000c247 l       .debug_str	00000000 
0000c274 l       .debug_str	00000000 
0000c284 l       .debug_str	00000000 
0000c2dc l       .debug_str	00000000 
0000c335 l       .debug_str	00000000 
0000c358 l       .debug_str	00000000 
0000c387 l       .debug_str	00000000 
0000c399 l       .debug_str	00000000 
0000c3cc l       .debug_str	00000000 
0000c3e2 l       .debug_str	00000000 
0000c42f l       .debug_str	00000000 
0000c482 l       .debug_str	00000000 
0000c4b5 l       .debug_str	00000000 
0000c4c5 l       .debug_str	00000000 
0000c51b l       .debug_str	00000000 
0000c575 l       .debug_str	00000000 
0000c5c3 l       .debug_str	00000000 
0000c615 l       .debug_str	00000000 
0000c66a l       .debug_str	00000000 
0000c6ba l       .debug_str	00000000 
0000c70e l       .debug_str	00000000 
0000c765 l       .debug_str	00000000 
0000c7bb l       .debug_str	00000000 
0000c812 l       .debug_str	00000000 
0000c85e l       .debug_str	00000000 
0000c8a6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000c8db l       .debug_str	00000000 
0000c907 l       .debug_str	00000000 
0000c923 l       .debug_str	00000000 
0000c930 l       .debug_str	00000000 
0000c93e l       .debug_str	00000000 
0000c943 l       .debug_str	00000000 
0000c94a l       .debug_str	00000000 
0000c961 l       .debug_str	00000000 
0000c977 l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0000c987 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
0000c9aa l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
0000c9cb l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000c9d2 l       .debug_str	00000000 
0000ca25 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000ca46 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0000ca4b l       .debug_str	00000000 
00005e26 l       .debug_str	00000000 
0000ca5f l       .debug_str	00000000 
0000ca73 l       .debug_str	00000000 
0000ca7c l       .debug_str	00000000 
0000ca87 l       .debug_str	00000000 
0000ca99 l       .debug_str	00000000 
0000caad l       .debug_str	00000000 
0000cabe l       .debug_str	00000000 
0000cad8 l       .debug_str	00000000 
0000cb08 l       .debug_str	00000000 
0000cb23 l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
0000cb43 l       .debug_str	00000000 
0000cb62 l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
0000cb85 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000cb8b l       .debug_str	00000000 
0000cbac l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
0000cbb4 l       .debug_str	00000000 
000597e3 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
0005a252 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
0000cbc5 l       .debug_str	00000000 
0000cbe4 l       .debug_str	00000000 
0000cbee l       .debug_str	00000000 
0000cbf9 l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
0000cc03 l       .debug_str	00000000 
0000cc22 l       .debug_str	00000000 
0000cc34 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
000007da l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0005a0fd l       .debug_str	00000000 
00035201 l       .debug_str	00000000 
0000cca6 l       .debug_str	00000000 
000077f5 l       .debug_str	00000000 
0000ccb8 l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0000cccc l       .debug_str	00000000 
0000cce2 l       .debug_str	00000000 
0000ccf2 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000cd04 l       .debug_str	00000000 
0000ccfe l       .debug_str	00000000 
0000cd13 l       .debug_str	00000000 
0000cd2a l       .debug_str	00000000 
0000cd29 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
0000cd64 l       .debug_str	00000000 
0000cd6f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
000075a3 l       .debug_str	00000000 
000075f5 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0000763c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00007643 l       .debug_str	00000000 
00008a38 l       .debug_str	00000000 
0000cac3 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0000764c l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
0000c1f8 l       .debug_str	00000000 
00007653 l       .debug_str	00000000 
00007676 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
0000768d l       .debug_str	00000000 
000076af l       .debug_str	00000000 
000076c4 l       .debug_str	00000000 
000076f6 l       .debug_str	00000000 
00007706 l       .debug_str	00000000 
00007733 l       .debug_str	00000000 
00007744 l       .debug_str	00000000 
00007772 l       .debug_str	00000000 
00007784 l       .debug_str	00000000 
0000ca69 l       .debug_str	00000000 
0000ccf7 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
000077b7 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
0000d42e l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
000077de l       .debug_str	00000000 
0000caa4 l       .debug_str	00000000 
0000ca9e l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000caec l       .debug_str	00000000 
0000cadd l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
0000cb28 l       .debug_str	00000000 
000077e5 l       .debug_str	00000000 
000077ee l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
0000ca92 l       .debug_str	00000000 
0000ca8c l       .debug_str	00000000 
0000cab2 l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00031886 l       .debug_str	00000000 
0005cada l       .debug_str	00000000 
000077fa l       .debug_str	00000000 
00007804 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
0000ed82 l     F .text	0000002a _ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E
0000ed58 l     F .text	0000002a _ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE
0000ec7e l     F .text	0000009c _ZN3log13RecordBuilder3new17haca8312579858419E
0000ed1a l     F .text	00000022 _ZN3log13RecordBuilder4args17h0d0d49873389eda9E
0000edac l     F .text	00000010 _ZN3log13RecordBuilder4line17h44de9f431bb34307E
0000edbc l     F .text	00000010 _ZN3log13RecordBuilder5build17h83529556a009112eE
0000ed3c l     F .text	0000000c _ZN3log13RecordBuilder5level17h0f95d7860f854eb5E
0000ed48 l     F .text	00000010 _ZN3log13RecordBuilder6target17hd1b0e0684e399993E
0000ef70 l     F .text	00000012 _ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E
0000edd6 l     F .text	00000028 _ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E
0000edfe l     F .text	00000010 _ZN3log15MetadataBuilder5build17h2478972692162fc0E
20003a4c l     O .bss	00000004 _ZN3log5STATE17hc9404a0f5c97cef6E
200000e8 l     O .data	00000008 _ZN3log6LOGGER17hc33d4d9c061fc628E
0000ec74 l     F .text	0000000a _ZN3log6Record7builder17hde62ab0132265febE
0001efd0 l     O .text	00000000 _ZN3log6logger3NOP17h5a3de47970f20990E
0000edcc l     F .text	0000000a _ZN3log8Metadata7builder17ha56bd59835d60a3cE
0000ec6a l     F .text	0000000a _ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E
0000ea04 l     F .text	00000038 _ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E
0000ea3c l     F .text	00000016 _ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE
0000ea52 l     F .text	00000008 _ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE
0000ea62 l     F .text	00000028 _ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E
0000eb08 l     F .text	0000000a _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E
0000ef96 l     F .text	000000aa _ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E
0000f040 l     F .text	0000003a _ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E
0000ef82 l     F .text	00000014 _ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE
0000ebce l     F .text	00000012 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E
00000000 l    df *ABS*	00000000 16zjnp1vbo7kc1gp
00000c82 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000cecb l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f30e l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dcc0 l       .debug_str	00000000 
0000cd91 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000cdae l       .debug_str	00000000 
0000ce33 l       .debug_str	00000000 
0000ce49 l       .debug_str	00000000 
0005ab09 l       .debug_str	00000000 
0000ce70 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0000ce98 l       .debug_str	00000000 
0000cec6 l       .debug_str	00000000 
0000ced0 l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
0000cf02 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000cf2a l       .debug_str	00000000 
0005f055 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000cf57 l       .debug_str	00000000 
0000cf83 l       .debug_str	00000000 
0000cf8b l       .debug_str	00000000 
0000cfbb l       .debug_str	00000000 
0000cfc6 l       .debug_str	00000000 
0000cff3 l       .debug_str	00000000 
0000cffc l       .debug_str	00000000 
0000d032 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
0000ceca l       .debug_str	00000000 
00057a28 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2d0u1dup22f6p5uq
00000d12 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000d06d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2q7rzzztqsy7quqz
0000e795 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000ec86 l       .debug_str	00000000 
0000ecc6 l       .debug_str	00000000 
0000ed14 l       .debug_str	00000000 
0000ed54 l       .debug_str	00000000 
0000ed7b l       .debug_str	00000000 
0000edbb l       .debug_str	00000000 
0000edc9 l       .debug_str	00000000 
0000ee38 l       .debug_str	00000000 
0000ee63 l       .debug_str	00000000 
0000ae8b l       .debug_str	00000000 
0000eed3 l       .debug_str	00000000 
0000ef43 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000ef6f l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7b2 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
0000ebeb l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000ec3a l       .debug_str	00000000 
0000ec79 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2vuqh37eag1b6y30
0000f153 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f30e l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0000f0c8 l       .debug_str	00000000 
0000f12b l       .debug_str	00000000 
0000f1d1 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
0000f261 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
0000f2f7 l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000ef91 l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0000f029 l       .debug_str	00000000 
0000f0be l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2xneats2au1n52xr
0000f374 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000f323 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3l5pa7f4r4pjxp5p
0001005b l       .debug_str	00000000 
00010088 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
000100df l       .debug_str	00000000 
000100f5 l       .debug_str	00000000 
0001015d l       .debug_str	00000000 
000101d5 l       .debug_str	00000000 
00010202 l       .debug_str	00000000 
0001021a l       .debug_str	00000000 
00010284 l       .debug_str	00000000 
0001028c l       .debug_str	00000000 
00010292 l       .debug_str	00000000 
0001029c l       .debug_str	00000000 
00010316 l       .debug_str	00000000 
00010382 l       .debug_str	00000000 
000103fb l       .debug_str	00000000 
00010474 l       .debug_str	00000000 
000104df l       .debug_str	00000000 
0001054e l       .debug_str	00000000 
00010555 l       .debug_str	00000000 
00010560 l       .debug_str	00000000 
00010588 l       .debug_str	00000000 
000105fd l       .debug_str	00000000 
0001067a l       .debug_str	00000000 
00010579 l       .debug_str	00000000 
00010686 l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
000106fd l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
00010766 l       .debug_str	00000000 
000107e4 l       .debug_str	00000000 
00010854 l       .debug_str	00000000 
000108ce l       .debug_str	00000000 
000108e8 l       .debug_str	00000000 
00010954 l       .debug_str	00000000 
0001095d l       .debug_str	00000000 
00010969 l       .debug_str	00000000 
000109df l       .debug_str	00000000 
00010a55 l       .debug_str	00000000 
00010acb l       .debug_str	00000000 
00010b33 l       .debug_str	00000000 
00000968 l       .debug_str	00000000 
00010ba2 l       .debug_str	00000000 
00000a4f l       .debug_str	00000000 
00010c0f l       .debug_str	00000000 
00010c84 l       .debug_str	00000000 
00010c99 l       .debug_str	00000000 
00010d00 l       .debug_str	00000000 
00010d09 l       .debug_str	00000000 
00010d14 l       .debug_str	00000000 
00010d1b l       .debug_str	00000000 
00059991 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00010d50 l       .debug_str	00000000 
000593ca l       .debug_str	00000000 
00010d8a l       .debug_str	00000000 
00010dd2 l       .debug_str	00000000 
00059271 l       .debug_str	00000000 
0005e708 l       .debug_str	00000000 
00010e05 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
00010e12 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
00010e33 l       .debug_str	00000000 
00010e38 l       .debug_str	00000000 
00010e3d l       .debug_str	00000000 
00010e42 l       .debug_str	00000000 
00010e47 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00010e57 l       .debug_str	00000000 
00010e62 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000f396 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
0000f40a l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000f416 l       .debug_str	00000000 
0000f43c l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000f448 l       .debug_str	00000000 
0000f46f l       .debug_str	00000000 
0000f47a l       .debug_str	00000000 
0000f485 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000f53f l       .debug_str	00000000 
0000f496 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000f51d l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000f524 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000f553 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000f5b0 l       .debug_str	00000000 
0000f615 l       .debug_str	00000000 
0000f61d l       .debug_str	00000000 
0000f63f l       .debug_str	00000000 
0000f626 l       .debug_str	00000000 
0000f657 l       .debug_str	00000000 
0000f67d l       .debug_str	00000000 
0000f6f5 l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
0000f76c l       .debug_str	00000000 
0000f7d5 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
0000f84d l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0000f8b7 l       .debug_str	00000000 
0000f930 l       .debug_str	00000000 
0005e706 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0000f935 l       .debug_str	00000000 
00000aa4 l       .debug_str	00000000 
0000f95b l       .debug_str	00000000 
0000f942 l       .debug_str	00000000 
0000f93d l       .debug_str	00000000 
0000f966 l       .debug_str	00000000 
0000f97f l       .debug_str	00000000 
0000f9ea l       .debug_str	00000000 
00000896 l       .debug_str	00000000 
00000ad4 l       .debug_str	00000000 
0000fa5a l       .debug_str	00000000 
0000fa6a l       .debug_str	00000000 
0000fae2 l       .debug_str	00000000 
00058f21 l       .debug_str	00000000 
00058c7b l       .debug_str	00000000 
0000faec l       .debug_str	00000000 
0000faf3 l       .debug_str	00000000 
0000fb16 l       .debug_str	00000000 
0000fafd l       .debug_str	00000000 
0000faf8 l       .debug_str	00000000 
0000fb20 l       .debug_str	00000000 
0000fb38 l       .debug_str	00000000 
0000fba2 l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000fc17 l       .debug_str	00000000 
0000fc7e l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe55 l       .debug_str	00000000 
0000fec2 l       .debug_str	00000000 
0000ff3f l       .debug_str	00000000 
0000ff47 l       .debug_str	00000000 
000101f3 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
0000ff6e l       .debug_str	00000000 
0000ffdd l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 413mqmtb04w1hzsl
000137fd l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
00014914 l       .debug_str	00000000 
00014944 l       .debug_str	00000000 
000149a7 l       .debug_str	00000000 
000149d7 l       .debug_str	00000000 
00014a02 l       .debug_str	00000000 
00014c08 l       .debug_str	00000000 
00014c12 l       .debug_str	00000000 
00014c6b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
0001456d l       .debug_str	00000000 
0001459d l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
000147ad l       .debug_str	00000000 
000147dd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n7qec2sa6vjglqv
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0001507a l       .debug_str	00000000 
00015083 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00014c8c l       .debug_str	00000000 
0001557f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
00014cc3 l       .debug_str	00000000 
00014d16 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
00014d2a l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00014d7e l       .debug_str	00000000 
00014dc5 l       .debug_str	00000000 
00014dce l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
00014e23 l       .debug_str	00000000 
00014e9f l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
00014ec9 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00014f74 l       .debug_str	00000000 
00014ffa l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00015008 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00015072 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4oqy1cznfkuv6rc
0005adec l       .debug_str	00000000 
00015296 l       .debug_str	00000000 
000579a2 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0005f41a l       .debug_str	00000000 
0005f419 l       .debug_str	00000000 
0005ec94 l       .debug_str	00000000 
0000cd9e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0000cda6 l       .debug_str	00000000 
0000d04c l       .debug_str	00000000 
0000d043 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0001508a l       .debug_str	00000000 
000578c5 l       .debug_str	00000000 
0001508e l       .debug_str	00000000 
000150bf l       .debug_str	00000000 
000150c5 l       .debug_str	00000000 
00015106 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001511b l       .debug_str	00000000 
00015152 l       .debug_str	00000000 
0001515d l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
0001518f l       .debug_str	00000000 
00057a09 l       .debug_str	00000000 
000151c3 l       .debug_str	00000000 
000579f8 l       .debug_str	00000000 
000151f7 l       .debug_str	00000000 
000579b0 l       .debug_str	00000000 
0001522e l       .debug_str	00000000 
00057a42 l       .debug_str	00000000 
00015266 l       .debug_str	00000000 
00057873 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4qlpitlm4hs8kdcv
0000f463 l       .debug_str	00000000 
000155d0 l       .debug_str	00000000 
000155f7 l       .debug_str	00000000 
00015602 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015633 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000152c7 l       .debug_str	00000000 
0000638c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000152f0 l       .debug_str	00000000 
00015302 l       .debug_str	00000000 
00015313 l       .debug_str	00000000 
0001535f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0001536b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
0001536f l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7b2 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0005872e l       .debug_str	00000000 
0001537c l       .debug_str	00000000 
00015434 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00015498 l       .debug_str	00000000 
000154ce l       .debug_str	00000000 
000154e7 l       .debug_str	00000000 
00015521 l       .debug_str	00000000 
0001553e l       .debug_str	00000000 
00015579 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00015596 l       .debug_str	00000000 
000155a0 l       .debug_str	00000000 
000155c6 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z8krxbvbr97ayck
0005d45a l       .debug_str	00000000 
000156b0 l       .debug_str	00000000 
000156ec l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53x3bckk5lzipnpa
00000c52 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00015a53 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00015a59 l       .debug_str	00000000 
00015a70 l       .debug_str	00000000 
0005b799 l       .debug_str	00000000 
0005968b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00015733 l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0001575e l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
0001578a l       .debug_str	00000000 
0005f12d l       .debug_str	00000000 
000157fb l       .debug_str	00000000 
00015827 l       .debug_str	00000000 
00015854 l       .debug_str	00000000 
000158c0 l       .debug_str	00000000 
000158c8 l       .debug_str	00000000 
00015935 l       .debug_str	00000000 
0001593e l       .debug_str	00000000 
0001596b l       .debug_str	00000000 
000159e5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000159ee l       .debug_str	00000000 
00015a46 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00015a2c l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0001f2b0 l     O .text	00000021 str.0
00000000 l    df *ABS*	00000000 54b6z89c74d8bdz1
0000e7b2 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
00015e27 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0000cbe4 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0000cbee l       .debug_str	00000000 
00015633 l       .debug_str	00000000 
0000cbf9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00015a88 l       .debug_str	00000000 
00015ad0 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00015aef l       .debug_str	00000000 
00015b2a l       .debug_str	00000000 
00015b4f l       .debug_str	00000000 
00015b76 l       .debug_str	00000000 
00015bd6 l       .debug_str	00000000 
00015bdf l       .debug_str	00000000 
00015c4a l       .debug_str	00000000 
00015c5a l       .debug_str	00000000 
00015cc6 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
0000ebe4 l       .debug_str	00000000 
0000d09f l       .debug_str	00000000 
0000d3ed l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
0000d0a8 l       .debug_str	00000000 
0000d0b4 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
0000d0bc l       .debug_str	00000000 
0000d116 l       .debug_str	00000000 
0000d178 l       .debug_str	00000000 
0000d183 l       .debug_str	00000000 
0000d1ca l       .debug_str	00000000 
0000d219 l       .debug_str	00000000 
0000d223 l       .debug_str	00000000 
0000d260 l       .debug_str	00000000 
0000d2a5 l       .debug_str	00000000 
0000d2ae l       .debug_str	00000000 
0000d2be l       .debug_str	00000000 
0000d2c6 l       .debug_str	00000000 
0000d31b l       .debug_str	00000000 
0000d378 l       .debug_str	00000000 
0000d384 l       .debug_str	00000000 
0000d38d l       .debug_str	00000000 
0000d399 l       .debug_str	00000000 
0000d3a5 l       .debug_str	00000000 
0000d3ae l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0000d3b6 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000d3be l       .debug_str	00000000 
0000d3ec l       .debug_str	00000000 
0000d3d3 l       .debug_str	00000000 
0000d3f3 l       .debug_str	00000000 
0000d3fa l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000d40c l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
0000d423 l       .debug_str	00000000 
0000d42b l       .debug_str	00000000 
0000d434 l       .debug_str	00000000 
0000e838 l       .debug_str	00000000 
0000d43d l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0005dd8a l       .debug_str	00000000 
0000d445 l       .debug_str	00000000 
0000d451 l       .debug_str	00000000 
0000d45c l       .debug_str	00000000 
0000d464 l       .debug_str	00000000 
00015e36 l       .debug_str	00000000 
0000d46c l       .debug_str	00000000 
0000d568 l       .debug_str	00000000 
0000d66c l       .debug_str	00000000 
0000d67a l       .debug_str	00000000 
0000d685 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000d6b2 l       .debug_str	00000000 
0000d68f l       .debug_str	00000000 
0000d6bd l       .debug_str	00000000 
0000d738 l       .debug_str	00000000 
0000d7bb l       .debug_str	00000000 
0000d7c9 l       .debug_str	00000000 
0000d828 l       .debug_str	00000000 
0000d88f l       .debug_str	00000000 
0000d8a5 l       .debug_str	00000000 
0000d8b5 l       .debug_str	00000000 
0005c5c0 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
0000d8c4 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
0000d8ca l       .debug_str	00000000 
0000d8d0 l       .debug_str	00000000 
0000d8d6 l       .debug_str	00000000 
0000d8e2 l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d8ea l       .debug_str	00000000 
0000d8f2 l       .debug_str	00000000 
0000d8f8 l       .debug_str	00000000 
0000d93e l       .debug_str	00000000 
0000d91b l       .debug_str	00000000 
0000d94e l       .debug_str	00000000 
0000d98e l       .debug_str	00000000 
0005c14d l       .debug_str	00000000 
0000d9d6 l       .debug_str	00000000 
0000d9dc l       .debug_str	00000000 
0000d9e2 l       .debug_str	00000000 
0000da0b l       .debug_str	00000000 
0000d9e8 l       .debug_str	00000000 
0000da1d l       .debug_str	00000000 
0000da5f l       .debug_str	00000000 
0005c036 l       .debug_str	00000000 
0000daa9 l       .debug_str	00000000 
0000daaf l       .debug_str	00000000 
0000dab5 l       .debug_str	00000000 
0000dade l       .debug_str	00000000 
0000dabb l       .debug_str	00000000 
0000daf0 l       .debug_str	00000000 
0000db32 l       .debug_str	00000000 
0005b4fa l       .debug_str	00000000 
0000db7c l       .debug_str	00000000 
0000db82 l       .debug_str	00000000 
0000db88 l       .debug_str	00000000 
0000db8e l       .debug_str	00000000 
0000dbb7 l       .debug_str	00000000 
0000db94 l       .debug_str	00000000 
0000dbc8 l       .debug_str	00000000 
0000dc09 l       .debug_str	00000000 
0000dc52 l       .debug_str	00000000 
0000dc57 l       .debug_str	00000000 
0005c384 l       .debug_str	00000000 
0000dc5c l       .debug_str	00000000 
0000dc62 l       .debug_str	00000000 
0000dc68 l       .debug_str	00000000 
0000dc91 l       .debug_str	00000000 
0000dc6e l       .debug_str	00000000 
0000dca2 l       .debug_str	00000000 
0000dce3 l       .debug_str	00000000 
0005b5b2 l       .debug_str	00000000 
0000dd2c l       .debug_str	00000000 
0000dd58 l       .debug_str	00000000 
0000dd35 l       .debug_str	00000000 
0000dd69 l       .debug_str	00000000 
0000ddaa l       .debug_str	00000000 
0000ddf3 l       .debug_str	00000000 
0005c558 l       .debug_str	00000000 
0000ddf8 l       .debug_str	00000000 
0000de01 l       .debug_str	00000000 
0000de08 l       .debug_str	00000000 
0000de33 l       .debug_str	00000000 
0000de10 l       .debug_str	00000000 
0000de45 l       .debug_str	00000000 
0000de87 l       .debug_str	00000000 
0005c220 l       .debug_str	00000000 
0000ded1 l       .debug_str	00000000 
0000ded7 l       .debug_str	00000000 
0000dedd l       .debug_str	00000000 
0000dee3 l       .debug_str	00000000 
0000dee9 l       .debug_str	00000000 
0000def1 l       .debug_str	00000000 
0000deff l       .debug_str	00000000 
0000df0e l       .debug_str	00000000 
0000df1f l       .debug_str	00000000 
0000df2a l       .debug_str	00000000 
0000df35 l       .debug_str	00000000 
0000df40 l       .debug_str	00000000 
0000df47 l       .debug_str	00000000 
0000df8d l       .debug_str	00000000 
0000df6a l       .debug_str	00000000 
0000df9f l       .debug_str	00000000 
0000dfe1 l       .debug_str	00000000 
0005b6b5 l       .debug_str	00000000 
0000e02b l       .debug_str	00000000 
0000e058 l       .debug_str	00000000 
0000e035 l       .debug_str	00000000 
0000e06a l       .debug_str	00000000 
0000e0ac l       .debug_str	00000000 
0000e0f6 l       .debug_str	00000000 
0000e0fb l       .debug_str	00000000 
0000e128 l       .debug_str	00000000 
0000e105 l       .debug_str	00000000 
0000e13a l       .debug_str	00000000 
0000e17c l       .debug_str	00000000 
0000e1c6 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0000e245 l       .debug_str	00000000 
0000e1da l       .debug_str	00000000 
0000e1ea l       .debug_str	00000000 
0000e1f3 l       .debug_str	00000000 
0000e1fe l       .debug_str	00000000 
0000e20d l       .debug_str	00000000 
0000e222 l       .debug_str	00000000 
0000e253 l       .debug_str	00000000 
0000e2f0 l       .debug_str	00000000 
0000e395 l       .debug_str	00000000 
0000e3a0 l       .debug_str	00000000 
0000e3a9 l       .debug_str	00000000 
0000e3ed l       .debug_str	00000000 
0000e3ca l       .debug_str	00000000 
0000e400 l       .debug_str	00000000 
0000e483 l       .debug_str	00000000 
0000e50e l       .debug_str	00000000 
0000e52a l       .debug_str	00000000 
0000e576 l       .debug_str	00000000 
0000e5ca l       .debug_str	00000000 
0000e5e7 l       .debug_str	00000000 
0000e5fb l       .debug_str	00000000 
0000e647 l       .debug_str	00000000 
0000e69b l       .debug_str	00000000 
0000e6b1 l       .debug_str	00000000 
0000e6c5 l       .debug_str	00000000 
0000e70c l       .debug_str	00000000 
0000e75b l       .debug_str	00000000 
0000e787 l       .debug_str	00000000 
0000e764 l       .debug_str	00000000 
0000e795 l       .debug_str	00000000 
0000e79b l       .debug_str	00000000 
0000e7a3 l       .debug_str	00000000 
0000e7aa l       .debug_str	00000000 
0000f431 l       .debug_str	00000000 
0000e7ba l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
0000e7c9 l       .debug_str	00000000 
0000f463 l       .debug_str	00000000 
0000e7d4 l       .debug_str	00000000 
0000e7df l       .debug_str	00000000 
0000e7f0 l       .debug_str	00000000 
0000e7f6 l       .debug_str	00000000 
0000e7fe l       .debug_str	00000000 
0000e805 l       .debug_str	00000000 
0000e80f l       .debug_str	00000000 
0000e817 l       .debug_str	00000000 
0000e81f l       .debug_str	00000000 
0000e841 l       .debug_str	00000000 
0000e84c l       .debug_str	00000000 
0000e858 l       .debug_str	00000000 
0000e860 l       .debug_str	00000000 
0000e869 l       .debug_str	00000000 
00000991 l       .debug_str	00000000 
0000e874 l       .debug_str	00000000 
0000e87f l       .debug_str	00000000 
0000e88a l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
0000e89a l       .debug_str	00000000 
0000e8aa l       .debug_str	00000000 
0000e8b9 l       .debug_str	00000000 
0000e8c1 l       .debug_str	00000000 
0000e8c8 l       .debug_str	00000000 
0000e8d0 l       .debug_str	00000000 
0000e911 l       .debug_str	00000000 
0000e8ee l       .debug_str	00000000 
0000e921 l       .debug_str	00000000 
0000e936 l       .debug_str	00000000 
0000e93f l       .debug_str	00000000 
0000e99c l       .debug_str	00000000 
0000ea01 l       .debug_str	00000000 
0000ea0b l       .debug_str	00000000 
0000ea1b l       .debug_str	00000000 
0000ea30 l       .debug_str	00000000 
0000ea38 l       .debug_str	00000000 
0000ea9c l       .debug_str	00000000 
0000eb08 l       .debug_str	00000000 
0000eb0f l       .debug_str	00000000 
0000eb17 l       .debug_str	00000000 
0000eb58 l       .debug_str	00000000 
0000eb35 l       .debug_str	00000000 
0000eb68 l       .debug_str	00000000 
0000eb7d l       .debug_str	00000000 
0000eb90 l       .debug_str	00000000 
0000eba5 l       .debug_str	00000000 
0000ebac l       .debug_str	00000000 
0000ebc1 l       .debug_str	00000000 
00015634 l       .debug_str	00000000 
00015cd9 l       .debug_str	00000000 
00015d3c l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00015dbc l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 57lqf44sdwu8qayr
00000c71 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00016143 l       .debug_str	00000000 
00016174 l       .debug_str	00000000 
000163fb l       .debug_str	00000000 
0001618e l       .debug_str	00000000 
000161bf l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
000161ef l       .debug_str	00000000 
00016220 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001622a l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00016230 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00016236 l       .debug_str	00000000 
00016288 l       .debug_str	00000000 
0000d051 l       .debug_str	00000000 
000162db l       .debug_str	00000000 
00016344 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00016397 l       .debug_str	00000000 
000163fa l       .debug_str	00000000 
00016426 l       .debug_str	00000000 
0001649f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005dcc0 l       .debug_str	00000000 
0000cd91 l       .debug_str	00000000 
0000110c l       .debug_str	00000000 
00015eba l       .debug_str	00000000 
0001641c l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00015ec9 l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
00015f11 l       .debug_str	00000000 
00015f59 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00015f61 l       .debug_str	00000000 
00015bd6 l       .debug_str	00000000 
00015fa9 l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00015ff1 l       .debug_str	00000000 
00016039 l       .debug_str	00000000 
00016042 l       .debug_str	00000000 
00016073 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
0001607c l       .debug_str	00000000 
000160ad l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0000d052 l       .debug_str	00000000 
000160b7 l       .debug_str	00000000 
000160e8 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00016108 l       .debug_str	00000000 
00016139 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dmg7ylzo67ab86f
0001662a l       .debug_str	00000000 
00016537 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00016580 l       .debug_str	00000000 
0001658c l       .debug_str	00000000 
000165d3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
000165df l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000164f2 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
000100f4 l     F .text	00000044 _ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E
00000000 l    df *ABS*	00000000 num_traits.eydd4btj-cgu.0
00017a16 l       .debug_str	00000000 
00016c17 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00016c5a l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
00016cb6 l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
00016d15 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00016d67 l       .debug_str	00000000 
00016dbc l       .debug_str	00000000 
00016e12 l       .debug_str	00000000 
00016e40 l       .debug_str	00000000 
00016e4c l       .debug_str	00000000 
00016e7e l       .debug_str	00000000 
00016ea5 l       .debug_str	00000000 
00016ed7 l       .debug_str	00000000 
00016ee7 l       .debug_str	00000000 
00016f1c l       .debug_str	00000000 
00016f2f l       .debug_str	00000000 
00016f65 l       .debug_str	00000000 
00016f79 l       .debug_str	00000000 
00016fc3 l       .debug_str	00000000 
00016fd4 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00017010 l       .debug_str	00000000 
00057d0d l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0001704e l       .debug_str	00000000 
0001708c l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000170ac l       .debug_str	00000000 
000170d4 l       .debug_str	00000000 
0000cefb l       .debug_str	00000000 
00017113 l       .debug_str	00000000 
00017141 l       .debug_str	00000000 
00017148 l       .debug_str	00000000 
000171eb l       .debug_str	00000000 
000171f9 l       .debug_str	00000000 
0003ebee l       .debug_str	00000000 
00017291 l       .debug_str	00000000 
0001732b l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000173e3 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
00017457 l       .debug_str	00000000 
000174c9 l       .debug_str	00000000 
000174f3 l       .debug_str	00000000 
00017531 l       .debug_str	00000000 
00017544 l       .debug_str	00000000 
0001758f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00017598 l       .debug_str	00000000 
000175da l       .debug_str	00000000 
000188dd l       .debug_str	00000000 
00017614 l       .debug_str	00000000 
00017659 l       .debug_str	00000000 
00017675 l       .debug_str	00000000 
000176b8 l       .debug_str	00000000 
000176ce l       .debug_str	00000000 
00017733 l       .debug_str	00000000 
00017798 l       .debug_str	00000000 
000177d3 l       .debug_str	00000000 
000177e0 l       .debug_str	00000000 
00016b0a l       .debug_str	00000000 
00017813 l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
00017859 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
0001789f l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
000178e6 l       .debug_str	00000000 
0001792f l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
000179b2 l       .debug_str	00000000 
000179f7 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00017a4f l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
00017a67 l       .debug_str	00000000 
00017aa2 l       .debug_str	00000000 
00017ac6 l       .debug_str	00000000 
00017aec l       .debug_str	00000000 
00017b27 l       .debug_str	00000000 
00017b4a l       .debug_str	00000000 
00017b6f l       .debug_str	00000000 
00017bac l       .debug_str	00000000 
00017bc3 l       .debug_str	00000000 
00017c00 l       .debug_str	00000000 
00017c17 l       .debug_str	00000000 
00017c68 l       .debug_str	00000000 
00017c86 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00017ce1 l       .debug_str	00000000 
00017d44 l       .debug_str	00000000 
00017d86 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
00017df4 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00017e61 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
00017ec3 l       .debug_str	00000000 
00017ed1 l       .debug_str	00000000 
00017f3c l       .debug_str	00000000 
00017f56 l       .debug_str	00000000 
00017f6c l       .debug_str	00000000 
00017fd7 l       .debug_str	00000000 
00017fe7 l       .debug_str	00000000 
00018053 l       .debug_str	00000000 
00018065 l       .debug_str	00000000 
000180d1 l       .debug_str	00000000 
000180e2 l       .debug_str	00000000 
00018149 l       .debug_str	00000000 
00018181 l       .debug_str	00000000 
000181eb l       .debug_str	00000000 
00018273 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
000182f0 l       .debug_str	00000000 
00018372 l       .debug_str	00000000 
00018389 l       .debug_str	00000000 
000183c7 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
000183da l       .debug_str	00000000 
000183e9 l       .debug_str	00000000 
00018427 l       .debug_str	00000000 
0001843a l       .debug_str	00000000 
00018466 l       .debug_str	00000000 
0001846f l       .debug_str	00000000 
0001849b l       .debug_str	00000000 
000184a4 l       .debug_str	00000000 
00018504 l       .debug_str	00000000 
00031747 l       .debug_str	00000000 
00018555 l       .debug_str	00000000 
000185a6 l       .debug_str	00000000 
00018603 l       .debug_str	00000000 
00018661 l       .debug_str	00000000 
0001894d l       .debug_str	00000000 
000186b2 l       .debug_str	00000000 
000186db l       .debug_str	00000000 
0001873e l       .debug_str	00000000 
0001874f l       .debug_str	00000000 
0001875c l       .debug_str	00000000 
00018771 l       .debug_str	00000000 
000187c2 l       .debug_str	00000000 
000187eb l       .debug_str	00000000 
0001884e l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
00018872 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
000579e1 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0005de31 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00018893 l       .debug_str	00000000 
0000db92 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00018897 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00016867 l       .debug_str	00000000 
000188a9 l       .debug_str	00000000 
000188ae l       .debug_str	00000000 
000188b3 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
000188d8 l       .debug_str	00000000 
00018914 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0003baad l       .debug_str	00000000 
0001892a l       .debug_str	00000000 
00018933 l       .debug_str	00000000 
000350b2 l       .debug_str	00000000 
00058a7d l       .debug_str	00000000 
0004acc4 l       .debug_str	00000000 
0001893c l       .debug_str	00000000 
00018940 l       .debug_str	00000000 
00035378 l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00018962 l       .debug_str	00000000 
0001895d l       .debug_str	00000000 
000587fe l       .debug_str	00000000 
00018966 l       .debug_str	00000000 
00036e4f l       .debug_str	00000000 
0001896f l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00039909 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001663a l       .debug_str	00000000 
00016694 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000319b1 l       .debug_str	00000000 
000166ee l       .debug_str	00000000 
00018884 l       .debug_str	00000000 
00018877 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000166f6 l       .debug_str	00000000 
00016703 l       .debug_str	00000000 
0001670c l       .debug_str	00000000 
000578fb l       .debug_str	00000000 
00031d7d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00007aa6 l       .debug_str	00000000 
00007ae7 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00018924 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005aa26 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
000188f8 l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001671c l       .debug_str	00000000 
0001675a l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
0005deab l       .debug_str	00000000 
00016769 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
00016792 l       .debug_str	00000000 
0000794c l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
0000cb37 l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
000167d1 l       .debug_str	00000000 
000188c2 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000167df l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00016834 l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00057a96 l       .debug_str	00000000 
0001684f l       .debug_str	00000000 
00016853 l       .debug_str	00000000 
0001685e l       .debug_str	00000000 
0001686d l       .debug_str	00000000 
000168b5 l       .debug_str	00000000 
000168d5 l       .debug_str	00000000 
00037b9b l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
00016920 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0001696b l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000169ea l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
00016a2a l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
00016a72 l       .debug_str	00000000 
00016aa2 l       .debug_str	00000000 
00016acd l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
00016b1d l       .debug_str	00000000 
00016b29 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
00016b7a l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
00016bcc l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2tupw4qr6cy3al7x
00000c36 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
000189c7 l       .debug_str	00000000 
00018a10 l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2zydbnxo7qpu1b5q
00018cac l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018cb9 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00018cbf l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
00018cff l       .debug_str	00000000 
00018d6e l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
00018a84 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
00018a91 l       .debug_str	00000000 
00018ad7 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
00018afb l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
00018afe l       .debug_str	00000000 
00018b3e l       .debug_str	00000000 
00018b4d l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00018b95 l       .debug_str	00000000 
00018bdc l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018bea l       .debug_str	00000000 
00018c2e l       .debug_str	00000000 
00018c39 l       .debug_str	00000000 
00018c42 l       .debug_str	00000000 
00018c4a l       .debug_str	00000000 
0005a5d3 l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018c53 l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
00018c6f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018c72 l       .debug_str	00000000 
00018c89 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001d567 l       .debug_str	00000000 
00018c9f l       .debug_str	00000000 
00018ca5 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
0005db53 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
200000f0 l     O .data	00000008 _ZN22piet_embedded_graphics7display12SPI_SETTINGS17h78a64d1040fbeee1E
20003a6c l     O .bss	00000004 _ZN22piet_embedded_graphics7display14BACKLIGHT_HIGH17hd6bdc29c96588211E
00000000 l    df *ABS*	00000000 32m5mr5zne5f73k7
00018afb l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
0001ac0f l       .debug_str	00000000 
00059d79 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0001ac5f l       .debug_str	00000000 
0001ac6b l       .debug_str	00000000 
0001ad07 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0001a630 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0001adaa l       .debug_str	00000000 
0001ae74 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
00018d75 l       .debug_str	00000000 
00018d7b l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
00018d80 l       .debug_str	00000000 
00018d87 l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
00019dca l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001ac8f l       .debug_str	00000000 
00019dd6 l       .debug_str	00000000 
00019ddc l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
0001a62a l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
0001adce l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0001a634 l       .debug_str	00000000 
0001a697 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
0001a767 l       .debug_str	00000000 
0001a7aa l       .debug_str	00000000 
0001a84f l       .debug_str	00000000 
0001a88d l       .debug_str	00000000 
0001a901 l       .debug_str	00000000 
0001a941 l       .debug_str	00000000 
0001a9e3 l       .debug_str	00000000 
0001aa71 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001cedb l       .debug_str	00000000 
0001cef7 l       .debug_str	00000000 
0001aae2 l       .debug_str	00000000 
0001ab72 l       .debug_str	00000000 
0001d5ee l       .debug_str	00000000 
0001d590 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
0001f3b0 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3eyht9wxrw4fbo0o
0001b87b l       .debug_str	00000000 
0001b7df l       .debug_str	00000000 
0001b825 l       .debug_str	00000000 
0001b8c4 l       .debug_str	00000000 
0001b90a l       .debug_str	00000000 
00015a82 l       .debug_str	00000000 
00000e74 l       .debug_str	00000000 
0001b944 l       .debug_str	00000000 
0001b98b l       .debug_str	00000000 
0001b9d9 l       .debug_str	00000000 
0001ba25 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00003550 l       .debug_str	00000000 
00018cac l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
0005db53 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018cb9 l       .debug_str	00000000 
00003556 l       .debug_str	00000000 
00006008 l       .debug_str	00000000 
00018cbf l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00006043 l       .debug_str	00000000 
00018cff l       .debug_str	00000000 
0001ba65 l       .debug_str	00000000 
0001bb11 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bbe3 l       .debug_str	00000000 
0001ac0f l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
0001bbfc l       .debug_str	00000000 
0003eb1c l       .debug_str	00000000 
00007471 l       .debug_str	00000000 
0003b6cc l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
000244e5 l       .debug_str	00000000 
0001bbff l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0001bc06 l       .debug_str	00000000 
0005b3bc l       .debug_str	00000000 
00018aeb l       .debug_str	00000000 
0000357f l       .debug_str	00000000 
0005a5d3 l       .debug_str	00000000 
00015a70 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001bc12 l       .debug_str	00000000 
0001bc1e l       .debug_str	00000000 
0001bc2a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0005f542 l       .debug_str	00000000 
0001bc37 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ac5f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001ae7d l       .debug_str	00000000 
0001ae86 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001bbf0 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
0001afb2 l       .debug_str	00000000 
0005b3bb l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
0001572b l       .debug_str	00000000 
0000e808 l       .debug_str	00000000 
00015a00 l       .debug_str	00000000 
00018aea l       .debug_str	00000000 
000587ee l       .debug_str	00000000 
00015a6b l       .debug_str	00000000 
0005e296 l       .debug_str	00000000 
00018aee l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00018af2 l       .debug_str	00000000 
00001610 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0005d6d2 l       .debug_str	00000000 
00018afb l       .debug_str	00000000 
0005cd2a l       .debug_str	00000000 
0001ac20 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001afbe l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001afc9 l       .debug_str	00000000 
0001b005 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001b024 l       .debug_str	00000000 
0001b072 l       .debug_str	00000000 
0001b0b3 l       .debug_str	00000000 
0001b11f l       .debug_str	00000000 
0001b161 l       .debug_str	00000000 
0001b1cd l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001b239 l       .debug_str	00000000 
0001b287 l       .debug_str	00000000 
0001b407 l       .debug_str	00000000 
0001b455 l       .debug_str	00000000 
0001b496 l       .debug_str	00000000 
0001b4e4 l       .debug_str	00000000 
0001b525 l       .debug_str	00000000 
0001b575 l       .debug_str	00000000 
0001b6f7 l       .debug_str	00000000 
0001b748 l       .debug_str	00000000 
0001b78c l       .debug_str	00000000 
0001f530 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 3sr9zgbizuzi7j5h
0001afb2 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bd16 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001bcae l       .debug_str	00000000 
0001bcea l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44cnu8660c26myi6
0001bd80 l       .debug_str	00000000 
00003a65 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001bdbe l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001bd3c l       .debug_str	00000000 
00011c6a l     F .text	0000001e _ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E
00000000 l    df *ABS*	00000000 469um0xjm96v8cgk
0001c444 l       .debug_str	00000000 
0001ca68 l       .debug_str	00000000 
0001cbbb l       .debug_str	00000000 
0001cbeb l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
00018c6f l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00018c72 l       .debug_str	00000000 
00018c89 l       .debug_str	00000000 
0001d567 l       .debug_str	00000000 
0001d54a l       .debug_str	00000000 
0001cd12 l       .debug_str	00000000 
0001cd42 l       .debug_str	00000000 
0001d5ee l       .debug_str	00000000 
0001d590 l       .debug_str	00000000 
0001cd84 l       .debug_str	00000000 
0001cdb4 l       .debug_str	00000000 
0001ce03 l       .debug_str	00000000 
0001ce33 l       .debug_str	00000000 
0001ce45 l       .debug_str	00000000 
0001ce75 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0001ceb7 l       .debug_str	00000000 
0001cee4 l       .debug_str	00000000 
0001cf27 l       .debug_str	00000000 
0001cf3d l       .debug_str	00000000 
0001d081 l       .debug_str	00000000 
0001d11d l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0001d200 l       .debug_str	00000000 
0001d2df l       .debug_str	00000000 
0001d428 l       .debug_str	00000000 
0001d545 l       .debug_str	00000000 
0001d57d l       .debug_str	00000000 
0001d5c2 l       .debug_str	00000000 
0001d5ca l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
0001bdc9 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
0001bdee l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
0001bdf5 l       .debug_str	00000000 
0001be30 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001be67 l       .debug_str	00000000 
0001be97 l       .debug_str	00000000 
000189b0 l       .debug_str	00000000 
00018d75 l       .debug_str	00000000 
00018d80 l       .debug_str	00000000 
00018d87 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00018d8f l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
0001cedb l       .debug_str	00000000 
0001beaa l       .debug_str	00000000 
0001beda l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001cef7 l       .debug_str	00000000 
0001bf11 l       .debug_str	00000000 
0001bf41 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
0001bf8e l       .debug_str	00000000 
0001bfbe l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
0001bfde l       .debug_str	00000000 
0001c00e l       .debug_str	00000000 
0001ac64 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
00019dca l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001ac8f l       .debug_str	00000000 
0001c15c l       .debug_str	00000000 
0001c18c l       .debug_str	00000000 
00018d7b l       .debug_str	00000000 
00019dd6 l       .debug_str	00000000 
00019ddc l       .debug_str	00000000 
0001a62a l       .debug_str	00000000 
0005b034 l       .debug_str	00000000 
0001adce l       .debug_str	00000000 
0001c232 l       .debug_str	00000000 
0001c262 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c33c l       .debug_str	00000000 
0001c36c l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00026d74 l       .debug_str	00000000 
0001c91f l       .debug_str	00000000 
0001c94f l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
0001ca38 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 49htiubyezwzqodr
00058593 l       .debug_str	00000000 
0001d5f9 l       .debug_str	00000000 
0001d62a l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0001d633 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 53kqumdi8360wwys
0001dbfe l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0001da7a l       .debug_str	00000000 
0001db37 l       .debug_str	00000000 
0001db72 l       .debug_str	00000000 
0001dbcb l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001dcb6 l       .debug_str	00000000 
0001dd1a l       .debug_str	00000000 
00001bed l       .debug_str	00000000 
0001dd1d l       .debug_str	00000000 
00019dd0 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
0001dd8d l       .debug_str	00000000 
00024e1d l       .debug_str	00000000 
00057c0c l       .debug_str	00000000 
0005f52c l       .debug_str	00000000 
0001ddc7 l       .debug_str	00000000 
0001ddca l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
00005e30 l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
0001ddd7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00001b9e l       .debug_str	00000000 
000035e2 l       .debug_str	00000000 
00001ba7 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00005e90 l       .debug_str	00000000 
00001bb6 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001dce1 l       .debug_str	00000000 
0001d685 l       .debug_str	00000000 
0001d722 l       .debug_str	00000000 
0001d75b l       .debug_str	00000000 
0001d7fa l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0001dd4c l       .debug_str	00000000 
0001d833 l       .debug_str	00000000 
0001d8d0 l       .debug_str	00000000 
0001d904 l       .debug_str	00000000 
0001d9a7 l       .debug_str	00000000 
0001da46 l       .debug_str	00000000 
0001f690 l     O .text	0000001c str.0
0001f6c0 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 tool5db1zbl71ep
0001ddd7 l       .debug_str	00000000 
0001ddf2 l       .debug_str	00000000 
0001de96 l       .debug_str	00000000 
0001df0b l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
0001df42 l       .debug_str	00000000 
00005fd7 l       .debug_str	00000000 
0000cd59 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001bc3 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0001de27 l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
00001bc9 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00001be6 l       .debug_str	00000000 
00001bf3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1vm1jsf9206jqt1a
0001eddf l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0001e0a5 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bd16 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000077b3 l       .debug_str	00000000 
0001aebd l       .debug_str	00000000 
0001aec5 l       .debug_str	00000000 
0001aecb l       .debug_str	00000000 
0001aed1 l       .debug_str	00000000 
0001aed7 l       .debug_str	00000000 
0001aede l       .debug_str	00000000 
0001aee4 l       .debug_str	00000000 
0001aeea l       .debug_str	00000000 
0001aef1 l       .debug_str	00000000 
0001aef7 l       .debug_str	00000000 
0001aeff l       .debug_str	00000000 
0001af06 l       .debug_str	00000000 
0001af0c l       .debug_str	00000000 
0001af12 l       .debug_str	00000000 
0001af18 l       .debug_str	00000000 
0001af1e l       .debug_str	00000000 
0001af24 l       .debug_str	00000000 
0001af2b l       .debug_str	00000000 
0001af32 l       .debug_str	00000000 
0001af3a l       .debug_str	00000000 
0001af42 l       .debug_str	00000000 
0001af4a l       .debug_str	00000000 
0001af51 l       .debug_str	00000000 
0001af59 l       .debug_str	00000000 
0001af60 l       .debug_str	00000000 
0001af67 l       .debug_str	00000000 
0001af6e l       .debug_str	00000000 
0001af75 l       .debug_str	00000000 
0001af7c l       .debug_str	00000000 
0001af83 l       .debug_str	00000000 
0001af89 l       .debug_str	00000000 
0001af8f l       .debug_str	00000000 
0001af95 l       .debug_str	00000000 
0001af9b l       .debug_str	00000000 
0001afa2 l       .debug_str	00000000 
0001afaa l       .debug_str	00000000 
0001bd30 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001dfd1 l       .debug_str	00000000 
0001e092 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3on1efjgx1q5grpf
00024de5 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001bbe3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001ae7d l       .debug_str	00000000 
0001ae86 l       .debug_str	00000000 
0001ae90 l       .debug_str	00000000 
0001aea0 l       .debug_str	00000000 
0001bbf0 l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e193 l       .debug_str	00000000 
0001e092 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0001e23a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 dxw5xp80tje79rx
00001c1b l       .debug_str	00000000 
0001e331 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001e099 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0001e2e1 l       .debug_str	00000000 
0001e31a l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 t2y6wwi1wx5h1fq
0000d9da l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001aeb1 l       .debug_str	00000000 
0001dfab l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0001e36a l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1dj5xwzbw170pcth
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e449 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1h94gy75t1lfyk2m
00000f66 l       .debug_str	00000000 
0001e4b8 l       .debug_str	00000000 
0001e4f8 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
000015ec l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00010d8a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 21g9i1epq5ht4p79
0000c9cc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00057907 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00001c50 l       .debug_str	00000000 
00000e22 l       .debug_str	00000000 
0000cca6 l       .debug_str	00000000 
000321d3 l       .debug_str	00000000 
00001c55 l       .debug_str	00000000 
0000cab8 l       .debug_str	00000000 
00001c4c l       .debug_str	00000000 
0000ccac l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e53f l       .debug_str	00000000 
000066e5 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000cab2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 22m4u7gnp4iz6z75
0000cb8b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00007804 l       .debug_str	00000000 
0000780c l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
00007814 l       .debug_str	00000000 
0000781c l       .debug_str	00000000 
00007823 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
0001e5a8 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2jghko95f1fcw2kw
0001e7a8 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001e627 l       .debug_str	00000000 
00006644 l       .debug_str	00000000 
0001e66c l       .debug_str	00000000 
0001e6b1 l       .debug_str	00000000 
0001e6be l       .debug_str	00000000 
0001e703 l       .debug_str	00000000 
0001e710 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
0001e755 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001e79d l       .debug_str	00000000 
0001662a l       .debug_str	00000000 
0001e7f0 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001e836 l       .debug_str	00000000 
0001e87c l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001e5e3 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2t4h7x9pofzwxo58
0001e957 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0001e996 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00001a17 l       .debug_str	00000000 
0001ea09 l       .debug_str	00000000 
0001ea48 l       .debug_str	00000000 
0001eb26 l       .debug_str	00000000 
0001ea85 l       .debug_str	00000000 
0001eae8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0001eb0f l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001e8c2 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
0000f437 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00002909 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 31djkeejljxsexfi
00005fcc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001eb30 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0001eb93 l       .debug_str	00000000 
0001eb87 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0001eb9a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 44vzahdamekpfupi
0000730b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001eba5 l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 48kp7dqlhcnw98ww
000149d7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
00014c6b l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ebf7 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4jc7ajwyicjft5df
00006c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0001ec27 l       .debug_str	00000000 
0001ec4d l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 xzrg48g93icjbc1
0005a0fd l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
0001ec56 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001ec69 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001ecf5 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0001ecfe l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
0001ed0e l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 cstr_core.8j8txwjh-cgu.0
00020146 l       .debug_str	00000000 
0001f23a l       .debug_str	00000000 
0001f264 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
0001f2b2 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
0001f2ff l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
0001f367 l       .debug_str	00000000 
0001f3ba l       .debug_str	00000000 
0001f3c2 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0001f417 l       .debug_str	00000000 
000064a4 l       .debug_str	00000000 
0001f455 l       .debug_str	00000000 
0001f4b4 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0001f519 l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0001f54a l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0001f57c l       .debug_str	00000000 
00016a18 l       .debug_str	00000000 
0001f5aa l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
0001f5d0 l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
0001f617 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
00006796 l       .debug_str	00000000 
0001f662 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0001f668 l       .debug_str	00000000 
0001f6f4 l       .debug_str	00000000 
0001f70f l       .debug_str	00000000 
0001f73f l       .debug_str	00000000 
0001f774 l       .debug_str	00000000 
0001f7a4 l       .debug_str	00000000 
0001f7ba l       .debug_str	00000000 
000067da l       .debug_str	00000000 
0001f7f0 l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
0001f82a l       .debug_str	00000000 
0001f866 l       .debug_str	00000000 
000068b0 l       .debug_str	00000000 
0001f88c l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
0001f8b3 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
0001f901 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
0001f952 l       .debug_str	00000000 
000095d9 l       .debug_str	00000000 
0001f9a4 l       .debug_str	00000000 
000091f1 l       .debug_str	00000000 
0001f9ef l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
0001fa32 l       .debug_str	00000000 
00009351 l       .debug_str	00000000 
0001fa8e l       .debug_str	00000000 
000093c1 l       .debug_str	00000000 
0001faed l       .debug_str	00000000 
0001fb43 l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
0001fbd8 l       .debug_str	00000000 
0001fc72 l       .debug_str	00000000 
0001fc83 l       .debug_str	00000000 
0001fca8 l       .debug_str	00000000 
0001fd51 l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0001fd62 l       .debug_str	00000000 
0001fdea l       .debug_str	00000000 
0001fda1 l       .debug_str	00000000 
0001fde5 l       .debug_str	00000000 
0001fe2f l       .debug_str	00000000 
0001fe70 l       .debug_str	00000000 
0001fe95 l       .debug_str	00000000 
0001fee6 l       .debug_str	00000000 
0001ff2b l       .debug_str	00000000 
0001ff7e l       .debug_str	00000000 
0001ffdf l       .debug_str	00000000 
00020046 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
0002008d l       .debug_str	00000000 
000200d8 l       .debug_str	00000000 
000200e5 l       .debug_str	00000000 
000201bf l       .debug_str	00000000 
000201b7 l       .debug_str	00000000 
000201c7 l       .debug_str	00000000 
0000f2e8 l       .debug_str	00000000 
000201e3 l       .debug_str	00000000 
00020258 l       .debug_str	00000000 
00020283 l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
000202fc l       .debug_str	00000000 
00020322 l       .debug_str	00000000 
0002035b l       .debug_str	00000000 
000022ee l       .debug_str	00000000 
00020373 l       .debug_str	00000000 
000203ac l       .debug_str	00000000 
000203e4 l       .debug_str	00000000 
00002e6a l       .debug_str	00000000 
0002041d l       .debug_str	00000000 
00020458 l       .debug_str	00000000 
0002049c l       .debug_str	00000000 
000204e2 l       .debug_str	00000000 
0002051e l       .debug_str	00000000 
00020546 l       .debug_str	00000000 
00020582 l       .debug_str	00000000 
000205a6 l       .debug_str	00000000 
00020603 l       .debug_str	00000000 
00020617 l       .debug_str	00000000 
00006d78 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00020668 l       .debug_str	00000000 
000206b9 l       .debug_str	00000000 
000206d0 l       .debug_str	00000000 
00017c68 l       .debug_str	00000000 
00020721 l       .debug_str	00000000 
00006dd5 l       .debug_str	00000000 
00020772 l       .debug_str	00000000 
00006e3f l       .debug_str	00000000 
000207ca l       .debug_str	00000000 
0002082d l       .debug_str	00000000 
00020858 l       .debug_str	00000000 
000208bb l       .debug_str	00000000 
00020930 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
00020994 l       .debug_str	00000000 
000209ff l       .debug_str	00000000 
00020a0e l       .debug_str	00000000 
00020a7a l       .debug_str	00000000 
00020aac l       .debug_str	00000000 
00020ad2 l       .debug_str	00000000 
00020b41 l       .debug_str	00000000 
00020b61 l       .debug_str	00000000 
00020bd1 l       .debug_str	00000000 
00020bf2 l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
00020c66 l       .debug_str	00000000 
00020ce6 l       .debug_str	00000000 
00020d2c l       .debug_str	00000000 
00020d55 l       .debug_str	00000000 
00020d5c l       .debug_str	00000000 
00020d94 l       .debug_str	00000000 
00020dd3 l       .debug_str	00000000 
00020dda l       .debug_str	00000000 
00020e53 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
00020eea l       .debug_str	00000000 
00020f68 l       .debug_str	00000000 
00020f72 l       .debug_str	00000000 
00021000 l       .debug_str	00000000 
000210ac l       .debug_str	00000000 
000210f3 l       .debug_str	00000000 
00021100 l       .debug_str	00000000 
0002114d l       .debug_str	00000000 
00021160 l       .debug_str	00000000 
000211b2 l       .debug_str	00000000 
00021222 l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00021282 l       .debug_str	00000000 
00021293 l       .debug_str	00000000 
000212f8 l       .debug_str	00000000 
00021328 l       .debug_str	00000000 
00021331 l       .debug_str	00000000 
0002136d l       .debug_str	00000000 
00021381 l       .debug_str	00000000 
000213bc l       .debug_str	00000000 
00021402 l       .debug_str	00000000 
00021420 l       .debug_str	00000000 
00021450 l       .debug_str	00000000 
00021459 l       .debug_str	00000000 
00021493 l       .debug_str	00000000 
000214a5 l       .debug_str	00000000 
000214d3 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
000214da l       .debug_str	00000000 
000214e6 l       .debug_str	00000000 
000214f0 l       .debug_str	00000000 
000214fa l       .debug_str	00000000 
0002151d l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00021572 l       .debug_str	00000000 
000215d2 l       .debug_str	00000000 
000215de l       .debug_str	00000000 
0002162e l       .debug_str	00000000 
00021691 l       .debug_str	00000000 
000216f8 l       .debug_str	00000000 
00021767 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
00002e66 l       .debug_str	00000000 
000217f7 l       .debug_str	00000000 
00059cc7 l       .debug_str	00000000 
0004e226 l       .debug_str	00000000 
00015a13 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
000072fd l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00007304 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00007311 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00005dbe l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000731c l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
0002181e l       .debug_str	00000000 
00021849 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00007438 l       .debug_str	00000000 
00021855 l       .debug_str	00000000 
00020f6d l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00021875 l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
000218b0 l       .debug_str	00000000 
000218b7 l       .debug_str	00000000 
00035201 l       .debug_str	00000000 
000007da l       .debug_str	00000000 
000218f8 l       .debug_str	00000000 
0002193f l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
00021919 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0002193b l       .debug_str	00000000 
00005f99 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00005fcc l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0000cbbc l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001ed35 l       .debug_str	00000000 
0001ed8d l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0001edda l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0001ede4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001edf0 l       .debug_str	00000000 
0002182f l       .debug_str	00000000 
00021823 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
0001ee01 l       .debug_str	00000000 
0000622a l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
0001ee2a l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000062d0 l       .debug_str	00000000 
000062e4 l       .debug_str	00000000 
0001ee53 l       .debug_str	00000000 
00006343 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
000218d2 l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0001ee9f l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00020314 l       .debug_str	00000000 
00021888 l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
0002178b l       .debug_str	00000000 
0002171c l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001eea5 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
000202fd l       .debug_str	00000000 
0001eece l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00006e55 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00006e60 l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
0001ef02 l       .debug_str	00000000 
0001ef2c l       .debug_str	00000000 
0002288e l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0001ef39 l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00016834 l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
0001ef7b l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0001ef8a l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
00021925 l       .debug_str	00000000 
0002128e l       .debug_str	00000000 
0001ef94 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
0001f024 l       .debug_str	00000000 
0001f0b6 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
0001f0fc l       .debug_str	00000000 
0001f190 l       .debug_str	00000000 
0001f1f2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4iim1qfb3qo0ur8y
000219b5 l       .debug_str	00000000 
000219b3 l       .debug_str	00000000 
00021a06 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021943 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00021962 l       .debug_str	00000000 
0000a879 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 memchr.2yzmedhn-cgu.0
00022061 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
00005eaa l       .debug_str	00000000 
00021aad l       .debug_str	00000000 
00021ae2 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00021aee l       .debug_str	00000000 
00021b26 l       .debug_str	00000000 
00021b40 l       .debug_str	00000000 
00021b4a l       .debug_str	00000000 
00021b52 l       .debug_str	00000000 
00021b5a l       .debug_str	00000000 
00021b96 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00021ba9 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00021bb1 l       .debug_str	00000000 
00021be9 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00021bf1 l       .debug_str	00000000 
00021c29 l       .debug_str	00000000 
00021c31 l       .debug_str	00000000 
00021c69 l       .debug_str	00000000 
00021c83 l       .debug_str	00000000 
00021c8c l       .debug_str	00000000 
00021cc4 l       .debug_str	00000000 
00021ccd l       .debug_str	00000000 
00021d05 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00021d8d l       .debug_str	00000000 
00021dd5 l       .debug_str	00000000 
00021de0 l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
0000252c l       .debug_str	00000000 
00021e1e l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
00021e47 l       .debug_str	00000000 
00021e6c l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
00008647 l       .debug_str	00000000 
00021ecb l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
00021ef3 l       .debug_str	00000000 
00021f24 l       .debug_str	00000000 
00021f30 l       .debug_str	00000000 
00021f8f l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00021fc1 l       .debug_str	00000000 
00022009 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00022016 l       .debug_str	00000000 
00022071 l       .debug_str	00000000 
0002207f l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
00008abb l       .debug_str	00000000 
00003b6f l       .debug_str	00000000 
000220c7 l       .debug_str	00000000 
00008b07 l       .debug_str	00000000 
00022102 l       .debug_str	00000000 
00016b04 l       .debug_str	00000000 
00016b1d l       .debug_str	00000000 
00022139 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
0002218b l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
000221e0 l       .debug_str	00000000 
00016b0a l       .debug_str	00000000 
00022213 l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
00022259 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
000222a2 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
00022344 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
000223d0 l       .debug_str	00000000 
00022453 l       .debug_str	00000000 
00022482 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000224cf l       .debug_str	00000000 
000224ff l       .debug_str	00000000 
0002254d l       .debug_str	00000000 
0002257d l       .debug_str	00000000 
000225cb l       .debug_str	00000000 
000225fb l       .debug_str	00000000 
00022649 l       .debug_str	00000000 
0002267a l       .debug_str	00000000 
000226c9 l       .debug_str	00000000 
000226fa l       .debug_str	00000000 
00022749 l       .debug_str	00000000 
00022779 l       .debug_str	00000000 
00022781 l       .debug_str	00000000 
000227b1 l       .debug_str	00000000 
000227b9 l       .debug_str	00000000 
000227f7 l       .debug_str	00000000 
0002280c l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00015072 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
00005db6 l       .debug_str	00000000 
00022838 l       .debug_str	00000000 
00007327 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
0002288e l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
0002288d l       .debug_str	00000000 
00022891 l       .debug_str	00000000 
0002289b l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000228a1 l       .debug_str	00000000 
000228a5 l       .debug_str	00000000 
00021ba4 l       .debug_str	00000000 
000228aa l       .debug_str	00000000 
000228a9 l       .debug_str	00000000 
000228ad l       .debug_str	00000000 
000228b1 l       .debug_str	00000000 
000228b6 l       .debug_str	00000000 
000228b5 l       .debug_str	00000000 
000228b9 l       .debug_str	00000000 
000228bd l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00021a0e l       .debug_str	00000000 
00021a63 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00003536 l       .debug_str	00000000 
0000353b l       .debug_str	00000000 
00003541 l       .debug_str	00000000 
000037ac l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00003549 l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00013178 l     F .text	0000006e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE
00000000 l    df *ABS*	00000000 1oq54qwymghnfn7s
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000228c1 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
00022946 l       .debug_str	00000000 
000229b3 l       .debug_str	00000000 
00022a25 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00022a83 l       .debug_str	00000000 
0004c805 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1sklumn9v47r13ke
0000c9cc l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00022aa0 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00022b01 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2la8qm50nrg05wyh
00022b64 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
000230c9 l       .debug_str	00000000 
00023134 l       .debug_str	00000000 
0002317a l       .debug_str	00000000 
000231ec l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
000233e3 l       .debug_str	00000000 
00023455 l       .debug_str	00000000 
0002349f l       .debug_str	00000000 
000234e9 l       .debug_str	00000000 
000236e8 l       .debug_str	00000000 
00023724 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
00023769 l       .debug_str	00000000 
000237a6 l       .debug_str	00000000 
00023999 l       .debug_str	00000000 
000239d6 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00023a1c l       .debug_str	00000000 
00023c22 l       .debug_str	00000000 
00023c7b l       .debug_str	00000000 
00023e7d l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
00022bcc l       .debug_str	00000000 
00022dbe l       .debug_str	00000000 
00022e26 l       .debug_str	00000000 
00022e6b l       .debug_str	00000000 
00022ed6 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3hq83qlgyhwbaj1j
00000beb l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00023ed2 l       .debug_str	00000000 
00023f2e l       .debug_str	00000000 
00023f8b l       .debug_str	00000000 
00023fe8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4dguvrsipkvuzwcx
0000ca81 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00014c0d l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00024045 l       .debug_str	00000000 
000240b6 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000240c2 l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
00024133 l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 501bil2zkh495ov3
0002465b l       .debug_str	00000000 
00024600 l       .debug_str	00000000 
00024613 l       .debug_str	00000000 
00024652 l       .debug_str	00000000 
0002466d l       .debug_str	00000000 
000246a5 l       .debug_str	00000000 
000246b9 l       .debug_str	00000000 
000159e5 l       .debug_str	00000000 
00000365 l       .debug_str	00000000 
0000138b l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
00001394 l       .debug_str	00000000 
0005ddf8 l       .debug_str	00000000 
0000139e l       .debug_str	00000000 
000013a3 l       .debug_str	00000000 
000013a9 l       .debug_str	00000000 
000013ae l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00005da7 l       .debug_str	00000000 
00058c2a l       .debug_str	00000000 
0005ddf7 l       .debug_str	00000000 
000246e5 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
000246e9 l       .debug_str	00000000 
0005d325 l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
0001005b l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
000100df l       .debug_str	00000000 
00010088 l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
0005c403 l       .debug_str	00000000 
0004aa50 l       .debug_str	00000000 
00016edc l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00059c15 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000246f1 l       .debug_str	00000000 
0005d459 l       .debug_str	00000000 
0005b799 l       .debug_str	00000000 
0005968b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0005b3bc l       .debug_str	00000000 
00018a84 l       .debug_str	00000000 
000589ce l       .debug_str	00000000 
00000e33 l       .debug_str	00000000 
00015a04 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00015a0e l       .debug_str	00000000 
00015a19 l       .debug_str	00000000 
00015a23 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00015a42 l       .debug_str	00000000 
000241a4 l       .debug_str	00000000 
000241d5 l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00023c36 l       .debug_str	00000000 
000241e1 l       .debug_str	00000000 
00024211 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
00023a30 l       .debug_str	00000000 
0002421e l       .debug_str	00000000 
0002424f l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00010d00 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
00000ac8 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
0000087f l       .debug_str	00000000 
00000a41 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000a2b l       .debug_str	00000000 
00000a09 l       .debug_str	00000000 
00000a9b l       .debug_str	00000000 
0005d29c l       .debug_str	00000000 
000009cf l       .debug_str	00000000 
000008b1 l       .debug_str	00000000 
00000878 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
00057ce1 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
000013c6 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
000013f3 l       .debug_str	00000000 
0000d37e l       .debug_str	00000000 
0005e0d7 l       .debug_str	00000000 
000008f3 l       .debug_str	00000000 
00000a5c l       .debug_str	00000000 
000009b8 l       .debug_str	00000000 
000008c2 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001428 l       .debug_str	00000000 
00001451 l       .debug_str	00000000 
000014af l       .debug_str	00000000 
00000998 l       .debug_str	00000000 
00000aa3 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
00001515 l       .debug_str	00000000 
00001441 l       .debug_str	00000000 
00000aba l       .debug_str	00000000 
0000086d l       .debug_str	00000000 
00000a34 l       .debug_str	00000000 
00000aab l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
00001533 l       .debug_str	00000000 
00000a21 l       .debug_str	00000000 
00000948 l       .debug_str	00000000 
000008db l       .debug_str	00000000 
00001549 l       .debug_str	00000000 
0000156f l       .debug_str	00000000 
0000088a l       .debug_str	00000000 
00001585 l       .debug_str	00000000 
00010e2b l       .debug_str	00000000 
0000154e l       .debug_str	00000000 
00010c84 l       .debug_str	00000000 
0004d384 l       .debug_str	00000000 
00010d09 l       .debug_str	00000000 
00010d14 l       .debug_str	00000000 
00024257 l       .debug_str	00000000 
00024282 l       .debug_str	00000000 
00024293 l       .debug_str	00000000 
000242c8 l       .debug_str	00000000 
00010284 l       .debug_str	00000000 
00000895 l       .debug_str	00000000 
0000ff3f l       .debug_str	00000000 
0000ff47 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000ff51 l       .debug_str	00000000 
000101f3 l       .debug_str	00000000 
000101da l       .debug_str	00000000 
00000ad3 l       .debug_str	00000000 
000101d5 l       .debug_str	00000000 
00010202 l       .debug_str	00000000 
0001028c l       .debug_str	00000000 
00000f66 l       .debug_str	00000000 
0005b626 l       .debug_str	00000000 
000015b2 l       .debug_str	00000000 
00000f70 l       .debug_str	00000000 
00000fa8 l       .debug_str	00000000 
00000fe8 l       .debug_str	00000000 
00001020 l       .debug_str	00000000 
00001028 l       .debug_str	00000000 
000015cb l       .debug_str	00000000 
00010292 l       .debug_str	00000000 
000242d7 l       .debug_str	00000000 
0002430a l       .debug_str	00000000 
000013b3 l       .debug_str	00000000 
0000159b l       .debug_str	00000000 
000015a4 l       .debug_str	00000000 
000015ad l       .debug_str	00000000 
000015d4 l       .debug_str	00000000 
00001605 l       .debug_str	00000000 
0002431a l       .debug_str	00000000 
0002434e l       .debug_str	00000000 
00024357 l       .debug_str	00000000 
00024383 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00024392 l       .debug_str	00000000 
000243c5 l       .debug_str	00000000 
000243d2 l       .debug_str	00000000 
000243de l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0002440f l       .debug_str	00000000 
00024444 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00024455 l       .debug_str	00000000 
00024487 l       .debug_str	00000000 
00024495 l       .debug_str	00000000 
000244d3 l       .debug_str	00000000 
000244ed l       .debug_str	00000000 
00024528 l       .debug_str	00000000 
0002453f l       .debug_str	00000000 
0002457b l       .debug_str	00000000 
00024593 l       .debug_str	00000000 
000245c9 l       .debug_str	00000000 
20003a70 l     O .bss	00000008 _ZN6mynewt3spi11PENDING_CMD17hd08bb758c99a7708E
20003a78 l     O .bss	00000804 _ZN6mynewt3spi12PENDING_DATA17h17892bfe7f609123E
20004704 l     O .bss	00000000 _ZN6mynewt3spi12SPI_CALLBACK17h9820a4217e4879a6E
200000f8 l     O .data	00000008 _ZN6mynewt3spi12SPI_SETTINGS17h4a4473e27299c06dE
00013f10 l     F .text	0000003a _ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E
2000428c l     O .bss	00000018 _ZN6mynewt3spi14SPI_DATA_QUEUE17h4880c24292cc1218E
20004304 l     O .bss	00000400 _ZN6mynewt3spi14SPI_TASK_STACK17h041a1fc76b4d16c1E
200042a4 l     O .bss	00000010 _ZN6mynewt3spi15SPI_EVENT_QUEUE17h4e2cf68a255fc2fdE
20004284 l     O .bss	00000008 _ZN6mynewt3spi16SPI_THROTTLE_SEM17h1f0932d6e65cb8daE
000141a4 l     F .text	000001ea _ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E
0001438e l     F .text	000002e8 _ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E
000149ac l     F .text	00000128 _ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E
00014676 l     F .text	00000336 _ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E
2000427c l     O .bss	00000008 _ZN6mynewt3spi7SPI_SEM17hd7399e388b8e657cE
200042b4 l     O .bss	00000050 _ZN6mynewt3spi8SPI_TASK17h4c45c24ee73ad430E
00014ad4 l     F .text	00000054 _ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E
0001f980 l     O .text	00000021 str.0
0001f9c0 l     O .text	0000001c str.1
0001fa10 l     O .text	00000021 str.2
00000000 l    df *ABS*	00000000 n1xzuhnvw82wqrn
00010088 l       .debug_str	00000000 
000100a3 l       .debug_str	00000000 
000100d7 l       .debug_str	00000000 
000246fc l       .debug_str	00000000 
0002474e l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
00000f5f l       .debug_str	00000000 
000403df l       .debug_str	00000000 
00010053 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0001005b l       .debug_str	00000000 
00010064 l       .debug_str	00000000 
00010072 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00010079 l       .debug_str	00000000 
0000fcf9 l       .debug_str	00000000 
0000fd09 l       .debug_str	00000000 
0000fd12 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
0000fd20 l       .debug_str	00000000 
0000fd2e l       .debug_str	00000000 
0000fd3a l       .debug_str	00000000 
0000ff48 l       .debug_str	00000000 
0000fd46 l       .debug_str	00000000 
0000fd55 l       .debug_str	00000000 
00000947 l       .debug_str	00000000 
0000fd5d l       .debug_str	00000000 
0000fd76 l       .debug_str	00000000 
0000d402 l       .debug_str	00000000 
0000fd87 l       .debug_str	00000000 
00000a7b l       .debug_str	00000000 
0000fd8f l       .debug_str	00000000 
0000fdc2 l       .debug_str	00000000 
0000fda9 l       .debug_str	00000000 
0000fdce l       .debug_str	00000000 
0000d3b1 l       .debug_str	00000000 
0000fe00 l       .debug_str	00000000 
0000fde7 l       .debug_str	00000000 
0000fe0b l       .debug_str	00000000 
0000fe3a l       .debug_str	00000000 
0000fe2d l       .debug_str	00000000 
0000fe14 l       .debug_str	00000000 
00010080 l       .debug_str	00000000 
000100be l       .debug_str	00000000 
000100df l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19c5s2vweequjzfw
0001bdc4 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00024773 l       .debug_str	00000000 
0002479c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0002482d l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000247a9 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
000166e3 l       .debug_str	00000000 
0005cc2f l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000247d2 l       .debug_str	00000000 
00024827 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1bm86yaetip2rc3f
00024b0e l       .debug_str	00000000 
00024976 l       .debug_str	00000000 
000249b2 l       .debug_str	00000000 
000249ce l       .debug_str	00000000 
00024a0a l       .debug_str	00000000 
00024a40 l       .debug_str	00000000 
00024a7c l       .debug_str	00000000 
00024a87 l       .debug_str	00000000 
00024ac3 l       .debug_str	00000000 
00024ad1 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00024b45 l       .debug_str	00000000 
00024b82 l       .debug_str	00000000 
00024b91 l       .debug_str	00000000 
00024bce l       .debug_str	00000000 
00024c11 l       .debug_str	00000000 
00024c4e l       .debug_str	00000000 
0001bdc9 l       .debug_str	00000000 
00024c85 l       .debug_str	00000000 
00024cc3 l       .debug_str	00000000 
00024cfa l       .debug_str	00000000 
00024d39 l       .debug_str	00000000 
00024d72 l       .debug_str	00000000 
0001dc81 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00024dd6 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0001df42 l       .debug_str	00000000 
00024df1 l       .debug_str	00000000 
00024e0e l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
00005eb3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000189b5 l       .debug_str	00000000 
00001bd4 l       .debug_str	00000000 
00001bdf l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005edb l       .debug_str	00000000 
0001dd8d l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024e1d l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
0001df51 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
0002484d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001ad12 l       .debug_str	00000000 
000035c2 l       .debug_str	00000000 
000035d0 l       .debug_str	00000000 
00005f41 l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
0001ad1b l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00001b89 l       .debug_str	00000000 
00001b94 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0002485a l       .debug_str	00000000 
00024893 l       .debug_str	00000000 
0001ad50 l       .debug_str	00000000 
0002492e l       .debug_str	00000000 
0002496a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1i10ukgv8hgyc1v7
0005c73b l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
000258fe l       .debug_str	00000000 
00025969 l       .debug_str	00000000 
00025a9a l       .debug_str	00000000 
00025b07 l       .debug_str	00000000 
00025b79 l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
00025c92 l       .debug_str	00000000 
00025d04 l       .debug_str	00000000 
00025e39 l       .debug_str	00000000 
00025eab l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00025f96 l       .debug_str	00000000 
00025fe0 l       .debug_str	00000000 
0002611d l       .debug_str	00000000 
00026158 l       .debug_str	00000000 
00026260 l       .debug_str	00000000 
0002629b l       .debug_str	00000000 
000263ca l       .debug_str	00000000 
00026405 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00024831 l       .debug_str	00000000 
000264cf l       .debug_str	00000000 
0002650b l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
000265f6 l       .debug_str	00000000 
00026632 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
0002673b l       .debug_str	00000000 
00026778 l       .debug_str	00000000 
00026882 l       .debug_str	00000000 
000268bf l       .debug_str	00000000 
000269f0 l       .debug_str	00000000 
00026a71 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
0002730d l       .debug_str	00000000 
00026ba6 l       .debug_str	00000000 
00026c24 l       .debug_str	00000000 
00026d54 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00026d60 l       .debug_str	00000000 
00026e3f l       .debug_str	00000000 
00026f58 l       .debug_str	00000000 
00027098 l       .debug_str	00000000 
000271b5 l       .debug_str	00000000 
000272f9 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
000271c9 l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
000270ac l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c444 l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00026d74 l       .debug_str	00000000 
00024e5f l       .debug_str	00000000 
00024eed l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00024ff5 l       .debug_str	00000000 
0002500e l       .debug_str	00000000 
0002d4e9 l       .debug_str	00000000 
00025034 l       .debug_str	00000000 
0002509a l       .debug_str	00000000 
000251a4 l       .debug_str	00000000 
0002520a l       .debug_str	00000000 
0002533b l       .debug_str	00000000 
000253a3 l       .debug_str	00000000 
0002546e l       .debug_str	00000000 
000254d6 l       .debug_str	00000000 
000255df l       .debug_str	00000000 
00025647 l       .debug_str	00000000 
00025777 l       .debug_str	00000000 
000257e2 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0001fb70 l     O .text	0000001c str.0
00000000 l    df *ABS*	00000000 1w4juabyv8bmed5v
00000d37 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
00027442 l       .debug_str	00000000 
0002748d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 24fd677mu7rr1lzm
00025fe0 l       .debug_str	00000000 
00029749 l       .debug_str	00000000 
000297d2 l       .debug_str	00000000 
0002990c l       .debug_str	00000000 
00029995 l       .debug_str	00000000 
00029aa8 l       .debug_str	00000000 
00029b34 l       .debug_str	00000000 
00029bc0 l       .debug_str	00000000 
00029cd6 l       .debug_str	00000000 
00029d62 l       .debug_str	00000000 
00029e50 l       .debug_str	00000000 
0002650b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
00029ece l       .debug_str	00000000 
00026632 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
00029f4c l       .debug_str	00000000 
00026778 l       .debug_str	00000000 
00029fcb l       .debug_str	00000000 
000268bf l       .debug_str	00000000 
0002a04a l       .debug_str	00000000 
0002509a l       .debug_str	00000000 
0002a0c9 l       .debug_str	00000000 
0002520a l       .debug_str	00000000 
0002a148 l       .debug_str	00000000 
0002a1ca l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
0002a2d7 l       .debug_str	00000000 
0002a359 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002a43e l       .debug_str	00000000 
0002a4c0 l       .debug_str	00000000 
0002a58f l       .debug_str	00000000 
0002a5a6 l       .debug_str	00000000 
0002a628 l       .debug_str	00000000 
0002a75c l       .debug_str	00000000 
0002a7de l       .debug_str	00000000 
0002a8c3 l       .debug_str	00000000 
0002a945 l       .debug_str	00000000 
0002aa52 l       .debug_str	00000000 
0002aad4 l       .debug_str	00000000 
0002ac08 l       .debug_str	00000000 
0002ac8a l       .debug_str	00000000 
0002ad59 l       .debug_str	00000000 
0002addb l       .debug_str	00000000 
0002af0f l       .debug_str	00000000 
0002af91 l       .debug_str	00000000 
0002b09e l       .debug_str	00000000 
0002b0fa l       .debug_str	00000000 
0002b1f4 l       .debug_str	00000000 
0002b32c l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0002b48b l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002b5a8 l       .debug_str	00000000 
0002d41e l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b5ba l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0002b5bf l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0002b6f3 l       .debug_str	00000000 
0002b84e l       .debug_str	00000000 
0002b95a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
000274bf l       .debug_str	00000000 
0002752c l       .debug_str	00000000 
000275c2 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00027681 l       .debug_str	00000000 
00027746 l       .debug_str	00000000 
00027818 l       .debug_str	00000000 
000278e1 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
00027ad2 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b49d l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00018d96 l       .debug_str	00000000 
00018db3 l       .debug_str	00000000 
00018df9 l       .debug_str	00000000 
00018e0a l       .debug_str	00000000 
00018e7a l       .debug_str	00000000 
00018f14 l       .debug_str	00000000 
00018fd7 l       .debug_str	00000000 
00019de5 l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
00019efc l       .debug_str	00000000 
0001a00f l       .debug_str	00000000 
0001a12f l       .debug_str	00000000 
0001a246 l       .debug_str	00000000 
0001a37f l       .debug_str	00000000 
0001a4d5 l       .debug_str	00000000 
0002b33e l       .debug_str	00000000 
00019a5b l       .debug_str	00000000 
00019b6d l       .debug_str	00000000 
00019c9c l       .debug_str	00000000 
0002b206 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001c38f l       .debug_str	00000000 
0001c3bc l       .debug_str	00000000 
0001c3dd l       .debug_str	00000000 
0001c444 l       .debug_str	00000000 
0001c4e4 l       .debug_str	00000000 
00028718 l       .debug_str	00000000 
00027bd8 l       .debug_str	00000000 
00027c5a l       .debug_str	00000000 
00027d48 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00027e4f l       .debug_str	00000000 
00027e30 l       .debug_str	00000000 
00028186 l       .debug_str	00000000 
00027f40 l       .debug_str	00000000 
00027f91 l       .debug_str	00000000 
00028080 l       .debug_str	00000000 
00028168 l       .debug_str	00000000 
0002b10c l       .debug_str	00000000 
00028276 l       .debug_str	00000000 
000282f1 l       .debug_str	00000000 
000283db l       .debug_str	00000000 
000284bf l       .debug_str	00000000 
000285cb l       .debug_str	00000000 
00028617 l       .debug_str	00000000 
00028702 l       .debug_str	00000000 
000287ec l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
000288f6 l       .debug_str	00000000 
000289f7 l       .debug_str	00000000 
00028a4d l       .debug_str	00000000 
00028b4b l       .debug_str	00000000 
00028ba1 l       .debug_str	00000000 
00028cee l       .debug_str	00000000 
00028d44 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
00028e6a l       .debug_str	00000000 
00028ef1 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
00028fc4 l       .debug_str	00000000 
0002904b l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0002915c l       .debug_str	00000000 
000291e3 l       .debug_str	00000000 
0002931b l       .debug_str	00000000 
000293a3 l       .debug_str	00000000 
00029477 l       .debug_str	00000000 
00029500 l       .debug_str	00000000 
000295d5 l       .debug_str	00000000 
0002965e l       .debug_str	00000000 
0001fbf0 l     O .text	00000021 str.0
0001fc30 l     O .text	0000001c str.1
00000000 l    df *ABS*	00000000 2jbqb9ep0zzhh36j
00009a16 l       .debug_str	00000000 
0002bd55 l       .debug_str	00000000 
0002bd62 l       .debug_str	00000000 
0002bda2 l       .debug_str	00000000 
0002be9f l       .debug_str	00000000 
0002bedf l       .debug_str	00000000 
0002beee l       .debug_str	00000000 
0002bf2e l       .debug_str	00000000 
0002bf4d l       .debug_str	00000000 
0002bf8d l       .debug_str	00000000 
0002bfa9 l       .debug_str	00000000 
0002bfe9 l       .debug_str	00000000 
0002bff7 l       .debug_str	00000000 
0002c037 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001afbe l       .debug_str	00000000 
0000a528 l       .debug_str	00000000 
00000788 l       .debug_str	00000000 
0002c045 l       .debug_str	00000000 
0002c086 l       .debug_str	00000000 
00018c62 l       .debug_str	00000000 
0002c0bb l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
0002c0c5 l       .debug_str	00000000 
0002c106 l       .debug_str	00000000 
0000ca55 l       .debug_str	00000000 
0002c153 l       .debug_str	00000000 
0002c194 l       .debug_str	00000000 
0002c1c9 l       .debug_str	00000000 
0002c1d4 l       .debug_str	00000000 
0002c215 l       .debug_str	00000000 
0002c262 l       .debug_str	00000000 
0002c2a3 l       .debug_str	00000000 
0002c2d8 l       .debug_str	00000000 
0002c347 l       .debug_str	00000000 
0002c448 l       .debug_str	00000000 
0000ae08 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002c4b7 l       .debug_str	00000000 
0002c4d6 l       .debug_str	00000000 
0000ef8d l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00058869 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000214f4 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00000058 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00001107 l       .debug_str	00000000 
0000110f l       .debug_str	00000000 
0000111a l       .debug_str	00000000 
00001125 l       .debug_str	00000000 
00001132 l       .debug_str	00000000 
0000113d l       .debug_str	00000000 
00001145 l       .debug_str	00000000 
00001150 l       .debug_str	00000000 
0000115b l       .debug_str	00000000 
00001165 l       .debug_str	00000000 
00001170 l       .debug_str	00000000 
0000117b l       .debug_str	00000000 
00001188 l       .debug_str	00000000 
00001194 l       .debug_str	00000000 
000011a1 l       .debug_str	00000000 
000011af l       .debug_str	00000000 
000011b9 l       .debug_str	00000000 
00014c80 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0002c4c6 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
0005e8d4 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
00018c5e l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
000274bf l       .debug_str	00000000 
0002752c l       .debug_str	00000000 
000275c2 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0001c5be l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
00027681 l       .debug_str	00000000 
00027746 l       .debug_str	00000000 
00027818 l       .debug_str	00000000 
000278e1 l       .debug_str	00000000 
000279cb l       .debug_str	00000000 
00027ad2 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002b49d l       .debug_str	00000000 
000288f6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002ba50 l       .debug_str	00000000 
0002bb30 l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000265d6 l       .debug_str	00000000 
00001217 l       .debug_str	00000000 
00018c59 l       .debug_str	00000000 
0002bc2e l       .debug_str	00000000 
0002bc35 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
0002bc3d l       .debug_str	00000000 
0002bc51 l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0002bc83 l       .debug_str	00000000 
0002bc97 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002bcc9 l       .debug_str	00000000 
0002bd08 l       .debug_str	00000000 
0002bd16 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2nk42jtdlqpdrpvo
0001c5be l       .debug_str	00000000 
0002c662 l       .debug_str	00000000 
00019786 l       .debug_str	00000000 
00019872 l       .debug_str	00000000 
0001996b l       .debug_str	00000000 
0002c755 l       .debug_str	00000000 
0002c7cd l       .debug_str	00000000 
0002c8e7 l       .debug_str	00000000 
0002c95f l       .debug_str	00000000 
0001c635 l       .debug_str	00000000 
0001c6b9 l       .debug_str	00000000 
0001c734 l       .debug_str	00000000 
0001c7d2 l       .debug_str	00000000 
0001c87d l       .debug_str	00000000 
0002ca2b l       .debug_str	00000000 
0002caa3 l       .debug_str	00000000 
0002cb6f l       .debug_str	00000000 
0002cbe7 l       .debug_str	00000000 
0002cc8c l       .debug_str	00000000 
0002cd04 l       .debug_str	00000000 
0002cd82 l       .debug_str	00000000 
0002cdfa l       .debug_str	00000000 
0002ce51 l       .debug_str	00000000 
0002cec9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
0002c4f4 l       .debug_str	00000000 
0002c56c l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000190c4 l       .debug_str	00000000 
00019114 l       .debug_str	00000000 
00019171 l       .debug_str	00000000 
000191c5 l       .debug_str	00000000 
0001923c l       .debug_str	00000000 
000192c0 l       .debug_str	00000000 
0001933b l       .debug_str	00000000 
000193d9 l       .debug_str	00000000 
00019484 l       .debug_str	00000000 
00019526 l       .debug_str	00000000 
000195eb l       .debug_str	00000000 
000196bd l       .debug_str	00000000 
0002c5ea l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ulq1z5tkxz9njop
00001c1b l       .debug_str	00000000 
0002d037 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002cf6e l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0002cfd2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4f0czol4b3uljl4v
00000d05 l       .debug_str	00000000 
0002d1b5 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0002d1d4 l       .debug_str	00000000 
0002d252 l       .debug_str	00000000 
0002d2e2 l       .debug_str	00000000 
0002d2f9 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
0000744f l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d09c l       .debug_str	00000000 
0002d128 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0002d137 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4n9jsiq8blzioqfk
0002d749 l       .debug_str	00000000 
0002d68d l       .debug_str	00000000 
0002d6aa l       .debug_str	00000000 
0002d6b3 l       .debug_str	00000000 
0002d6f9 l       .debug_str	00000000 
0002d702 l       .debug_str	00000000 
0002d97e l       .debug_str	00000000 
0002d792 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0000f319 l       .debug_str	00000000 
0002d79e l       .debug_str	00000000 
0002d81a l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
0000160f l       .debug_str	00000000 
00017446 l       .debug_str	00000000 
0002d845 l       .debug_str	00000000 
0002d8c1 l       .debug_str	00000000 
0002d8f3 l       .debug_str	00000000 
0002d979 l       .debug_str	00000000 
0002d988 l       .debug_str	00000000 
0002d2e2 l       .debug_str	00000000 
0002d9f9 l       .debug_str	00000000 
0002da6d l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0002da77 l       .debug_str	00000000 
0002da84 l       .debug_str	00000000 
0002dafb l       .debug_str	00000000 
0002db15 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002d380 l       .debug_str	00000000 
0002d3a9 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002b5a8 l       .debug_str	00000000 
0002d41e l       .debug_str	00000000 
0002d3b6 l       .debug_str	00000000 
0002d3f8 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002d40c l       .debug_str	00000000 
0005d427 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
00048cb4 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
0002d428 l       .debug_str	00000000 
0002d451 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00024ff5 l       .debug_str	00000000 
0002500e l       .debug_str	00000000 
0002d4e9 l       .debug_str	00000000 
0002d46e l       .debug_str	00000000 
0002d4b3 l       .debug_str	00000000 
0002d4d7 l       .debug_str	00000000 
0002d506 l       .debug_str	00000000 
00030f3f l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
000258f7 l       .debug_str	00000000 
0002d539 l       .debug_str	00000000 
00030f9d l       .debug_str	00000000 
0002a58f l       .debug_str	00000000 
0002d56c l       .debug_str	00000000 
0003101f l       .debug_str	00000000 
00025f7b l       .debug_str	00000000 
0002d5a3 l       .debug_str	00000000 
000310a3 l       .debug_str	00000000 
00025c87 l       .debug_str	00000000 
0002d5da l       .debug_str	00000000 
0002d628 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0002d638 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4z4uczzv8d994j8w
00001c1b l       .debug_str	00000000 
0002dc45 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002db36 l       .debug_str	00000000 
0002db84 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
0002db8d l       .debug_str	00000000 
0002dbdd l       .debug_str	00000000 
0002dbe8 l       .debug_str	00000000 
0002dc39 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 vnkfcw75uydipan
0002ddb3 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00024fd8 l       .debug_str	00000000 
0002dca4 l       .debug_str	00000000 
0002dcef l       .debug_str	00000000 
0002dd02 l       .debug_str	00000000 
0002dd4d l       .debug_str	00000000 
0002dd70 l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0002ddcf l       .debug_str	00000000 
0002d792 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002b59b l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3ik332mkg6tevaet
00016232 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001df87 l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00018adf l       .debug_str	00000000 
0001e16d l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
0002de12 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
000022f3 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2bp05xqc1vzz7bvb
00014c0e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
0002ded7 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4fx9oaepmfmbf8wt
000589b1 l       .debug_str	00000000 
0002e062 l       .debug_str	00000000 
0002e07e l       .debug_str	00000000 
0002e0a4 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000d9e6 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002df39 l       .debug_str	00000000 
0000790e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
0002df62 l       .debug_str	00000000 
0002df73 l       .debug_str	00000000 
0002df83 l       .debug_str	00000000 
0002dfcf l       .debug_str	00000000 
0002dfda l       .debug_str	00000000 
0002e010 l       .debug_str	00000000 
0002e028 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 13ma8mzaba1sllzw
000234e9 l       .debug_str	00000000 
0003c3f5 l       .debug_str	00000000 
0000ef7e l       .debug_str	00000000 
0002e869 l       .debug_str	00000000 
000239d6 l       .debug_str	00000000 
0002e8e8 l       .debug_str	00000000 
000237a6 l       .debug_str	00000000 
0002e967 l       .debug_str	00000000 
0002e9e9 l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0002ebdf l       .debug_str	00000000 
0002ec61 l       .debug_str	00000000 
0002ecaa l       .debug_str	00000000 
0002ed2c l       .debug_str	00000000 
0002ef22 l       .debug_str	00000000 
0002efa4 l       .debug_str	00000000 
0002efed l       .debug_str	00000000 
0002f06f l       .debug_str	00000000 
0002f265 l       .debug_str	00000000 
0002f2e7 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
0002f330 l       .debug_str	00000000 
0002f3a4 l       .debug_str	00000000 
00002371 l       .debug_str	00000000 
0000c9cc l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00001613 l       .debug_str	00000000 
0002b5ba l       .debug_str	00000000 
0002f5c5 l       .debug_str	00000000 
0002f7e2 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
00010e67 l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0005df22 l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00010e70 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
00010e7e l       .debug_str	00000000 
00010e86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00010e8e l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
000147f1 l       .debug_str	00000000 
0001483f l       .debug_str	00000000 
000148aa l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
0002f342 l       .debug_str	00000000 
00010093 l       .debug_str	00000000 
00010eaa l       .debug_str	00000000 
00010eef l       .debug_str	00000000 
00010f5d l       .debug_str	00000000 
00010ff4 l       .debug_str	00000000 
000110b4 l       .debug_str	00000000 
0001119d l       .debug_str	00000000 
000112af l       .debug_str	00000000 
000113ea l       .debug_str	00000000 
0001154e l       .debug_str	00000000 
000116db l       .debug_str	00000000 
00011891 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000139b0 l       .debug_str	00000000 
00013b86 l       .debug_str	00000000 
00013d69 l       .debug_str	00000000 
00013f43 l       .debug_str	00000000 
0001413e l       .debug_str	00000000 
00014356 l       .debug_str	00000000 
0002f3b6 l       .debug_str	00000000 
000002ea l       .debug_str	00000000 
0002e0ad l       .debug_str	00000000 
0002e134 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
00001680 l       .debug_str	00000000 
0002e181 l       .debug_str	00000000 
0002e208 l       .debug_str	00000000 
0002e402 l       .debug_str	00000000 
0002e48b l       .debug_str	00000000 
0002e687 l       .debug_str	00000000 
0002e710 l       .debug_str	00000000 
0002e75f l       .debug_str	00000000 
0002e7eb l       .debug_str	00000000 
00023724 l       .debug_str	00000000 
0001fd30 l     O .text	0000001c str.0
0001fd70 l     O .text	00000021 str.1
00000000 l    df *ABS*	00000000 4miap3quw76e3k6m
00000beb l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0005efd5 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
0002f852 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4yl298udq4i2eqhh
00001c1b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0002f8a2 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 f8ebwo3yn0ryfmw
0002ff4e l       .debug_str	00000000 
00012a77 l       .debug_str	00000000 
00012bb5 l       .debug_str	00000000 
00012d16 l       .debug_str	00000000 
00012e84 l       .debug_str	00000000 
0002fb67 l       .debug_str	00000000 
0002fbdf l       .debug_str	00000000 
0002fd6e l       .debug_str	00000000 
0002fde6 l       .debug_str	00000000 
0002ffc6 l       .debug_str	00000000 
00030044 l       .debug_str	00000000 
000300bc l       .debug_str	00000000 
00012fe9 l       .debug_str	00000000 
00013171 l       .debug_str	00000000 
00013306 l       .debug_str	00000000 
00013492 l       .debug_str	00000000 
00013641 l       .debug_str	00000000 
000137fd l       .debug_str	00000000 
000301af l       .debug_str	00000000 
00030227 l       .debug_str	00000000 
00030404 l       .debug_str	00000000 
0003047c l       .debug_str	00000000 
00030548 l       .debug_str	00000000 
000305c0 l       .debug_str	00000000 
000305f0 l       .debug_str	00000000 
00030668 l       .debug_str	00000000 
0003070d l       .debug_str	00000000 
00030785 l       .debug_str	00000000 
000308c6 l       .debug_str	00000000 
0003093e l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
00011a7d l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00011a83 l       .debug_str	00000000 
00011a86 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00011aaf l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
00011ae5 l       .debug_str	00000000 
00011b12 l       .debug_str	00000000 
0002f906 l       .debug_str	00000000 
0002f97e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00011b15 l       .debug_str	00000000 
00011b65 l       .debug_str	00000000 
00011bc2 l       .debug_str	00000000 
00011c16 l       .debug_str	00000000 
00011c8d l       .debug_str	00000000 
00011d11 l       .debug_str	00000000 
00011d8c l       .debug_str	00000000 
00011e2a l       .debug_str	00000000 
00011ed5 l       .debug_str	00000000 
00011f77 l       .debug_str	00000000 
0001203c l       .debug_str	00000000 
0001210e l       .debug_str	00000000 
000121d7 l       .debug_str	00000000 
000122c3 l       .debug_str	00000000 
000123bc l       .debug_str	00000000 
0002f9d5 l       .debug_str	00000000 
0002fa4d l       .debug_str	00000000 
000124ac l       .debug_str	00000000 
000125bf l       .debug_str	00000000 
000126df l       .debug_str	00000000 
000127f6 l       .debug_str	00000000 
00012930 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 16gyyaet005v3lvf
00024827 l       .debug_str	00000000 
00030af4 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00030b54 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1gec8qpvo4ti2nbg
00009a16 l       .debug_str	00000000 
0002dc39 l       .debug_str	00000000 
00030cb8 l       .debug_str	00000000 
0002dc97 l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030bb4 l       .debug_str	00000000 
0002db84 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00030c06 l       .debug_str	00000000 
00030c59 l       .debug_str	00000000 
00030c63 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 28buxl9xaffr9rke
00058593 l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00030d0e l       .debug_str	00000000 
00001c1b l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 2leljxexqh8ze7wz
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00030d6b l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 3cgt5uexdtuxl7pe
000310bb l       .debug_str	00000000 
00030fc1 l       .debug_str	00000000 
00030fde l       .debug_str	00000000 
00031019 l       .debug_str	00000000 
00031047 l       .debug_str	00000000 
00031062 l       .debug_str	00000000 
0003109d l       .debug_str	00000000 
000310c6 l       .debug_str	00000000 
00030c59 l       .debug_str	00000000 
000310ec l       .debug_str	00000000 
00031112 l       .debug_str	00000000 
0003112c l       .debug_str	00000000 
0002dbdd l       .debug_str	00000000 
00031153 l       .debug_str	00000000 
0003117a l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
0005b901 l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00030ddc l       .debug_str	00000000 
00030dee l       .debug_str	00000000 
00030dff l       .debug_str	00000000 
00030e4b l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
00030e57 l       .debug_str	00000000 
00030e79 l       .debug_str	00000000 
00030e9a l       .debug_str	00000000 
00030ee6 l       .debug_str	00000000 
00030f02 l       .debug_str	00000000 
00030f39 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00030f53 l       .debug_str	00000000 
00030f60 l       .debug_str	00000000 
00030f97 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 27tt2oece7npu1p2
0000732b l       .debug_str	00000000 
00007365 l       .debug_str	00000000 
0000739e l       .debug_str	00000000 
000073ad l       .debug_str	00000000 
000073f0 l       .debug_str	00000000 
00059edc l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
00000b3d l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
00006239 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
00006253 l       .debug_str	00000000 
000073a7 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00031195 l       .debug_str	00000000 
00006280 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
000311be l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
00000ff1 l       .debug_str	00000000 
0000040e l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000334da l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 19nunfeq6523tst5
00024827 l       .debug_str	00000000 
000311fa l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
0003125a l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
0003371a l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 1xpo0qpsduc6enem
00031326 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
00011a70 l       .debug_str	00000000 
00011a78 l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
000312ba l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 4xxoizn3g1nl6m5i
00033af9 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0000cd7a l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
0003132f l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 25lz0dio8kzdubcg
0000730b l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
00024fbd l       .debug_str	00000000 
0001d1e7 l       .debug_str	00000000 
00000afc l       .debug_str	00000000 
0001897b l       .debug_str	00000000 
00000034 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
000313a0 l       .debug_str	00000000 
000313de l       .debug_str	00000000 
0001c336 l       .debug_str	00000000 
0005c872 l       .debug_str	00000000 
0000d9da l       .debug_str	00000000 
000188af l       .debug_str	00000000 
0000d9e0 l       .debug_str	00000000 
00024fd2 l       .debug_str	00000000 
000313f7 l       .debug_str	00000000 
00031435 l       .debug_str	00000000 
00000364 l       .debug_str	00000000 
000258ec l       .debug_str	00000000 
00058c0b l       .debug_str	00000000 
0001ceae l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 core.b09zx0wt-cgu.0
00000afc l       .debug_str	00000000 
0003145e l       .debug_str	00000000 
00031471 l       .debug_str	00000000 
0001eddf l       .debug_str	00000000 
0005c7ae l       .debug_str	00000000 
000314a2 l       .debug_str	00000000 
000314aa l       .debug_str	00000000 
000314b3 l       .debug_str	00000000 
000314fc l       .debug_str	00000000 
000105f9 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
000314ba l       .debug_str	00000000 
000314f9 l       .debug_str	00000000 
00031502 l       .debug_str	00000000 
00031544 l       .debug_str	00000000 
0003154e l       .debug_str	00000000 
00031591 l       .debug_str	00000000 
0003159b l       .debug_str	00000000 
000315de l       .debug_str	00000000 
000315e8 l       .debug_str	00000000 
0003162b l       .debug_str	00000000 
00031636 l       .debug_str	00000000 
0003167b l       .debug_str	00000000 
00031686 l       .debug_str	00000000 
000316cb l       .debug_str	00000000 
000316d1 l       .debug_str	00000000 
00000c5f l       .debug_str	00000000 
0001bdc5 l       .debug_str	00000000 
00001a13 l       .debug_str	00000000 
00031d06 l       .debug_str	00000000 
00004fbe l       .debug_str	00000000 
000316de l       .debug_str	00000000 
000316ee l       .debug_str	00000000 
00000bf3 l       .debug_str	00000000 
00002347 l       .debug_str	00000000 
00001d48 l       .debug_str	00000000 
00002331 l       .debug_str	00000000 
00000c41 l       .debug_str	00000000 
00002efb l       .debug_str	00000000 
00000c2b l       .debug_str	00000000 
000078ac l       .debug_str	00000000 
00000be3 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000c2f l       .debug_str	00000000 
000002a2 l       .debug_str	00000000 
00033560 l       .debug_str	00000000 
0005f0ca l       .debug_str	00000000 
000078b5 l       .debug_str	00000000 
000078b6 l       .debug_str	00000000 
00014c0e l       .debug_str	00000000 
000078bd l       .debug_str	00000000 
00016846 l       .debug_str	00000000 
00018924 l       .debug_str	00000000 
0000d3a3 l       .debug_str	00000000 
00031734 l       .debug_str	00000000 
00015a02 l       .debug_str	00000000 
0005d51d l       .debug_str	00000000 
0003210a l       .debug_str	00000000 
00002339 l       .debug_str	00000000 
0005d12f l       .debug_str	00000000 
00000c1a l       .debug_str	00000000 
0000008e l       .debug_str	00000000 
000007da l       .debug_str	00000000 
00058985 l       .debug_str	00000000 
00031746 l       .debug_str	00000000 
0003174b l       .debug_str	00000000 
0005eaa5 l       .debug_str	00000000 
00031756 l       .debug_str	00000000 
00000326 l       .debug_str	00000000 
00031760 l       .debug_str	00000000 
00031dd4 l       .debug_str	00000000 
0003176a l       .debug_str	00000000 
0000730b l       .debug_str	00000000 
00031e14 l       .debug_str	00000000 
00000cc4 l       .debug_str	00000000 
0003214d l       .debug_str	00000000 
00002343 l       .debug_str	00000000 
0000234c l       .debug_str	00000000 
00031778 l       .debug_str	00000000 
000317ec l       .debug_str	00000000 
0003202e l       .debug_str	00000000 
000317fe l       .debug_str	00000000 
00031e1a l       .debug_str	00000000 
00031df4 l       .debug_str	00000000 
00020314 l       .debug_str	00000000 
00032071 l       .debug_str	00000000 
00031803 l       .debug_str	00000000 
00031877 l       .debug_str	00000000 
00032186 l       .debug_str	00000000 
000321cd l       .debug_str	00000000 
000320d3 l       .debug_str	00000000 
0003188f l       .debug_str	00000000 
00041962 l       .debug_str	00000000 
00037081 l       .debug_str	00000000 
00058934 l       .debug_str	00000000 
000321e8 l       .debug_str	00000000 
000320a2 l       .debug_str	00000000 
00031907 l       .debug_str	00000000 
0000f933 l       .debug_str	00000000 
00000c26 l       .debug_str	00000000 
0005c73b l       .debug_str	00000000 
0001886c l       .debug_str	00000000 
0003195f l       .debug_str	00000000 
00031964 l       .debug_str	00000000 
00031976 l       .debug_str	00000000 
00009a16 l       .debug_str	00000000 
00032866 l       .debug_str	00000000 
0003197f l       .debug_str	00000000 
00007b05 l       .debug_str	00000000 
000319a7 l       .debug_str	00000000 
000319b7 l       .debug_str	00000000 
0005add7 l       .debug_str	00000000 
00031a10 l       .debug_str	00000000 
00031a18 l       .debug_str	00000000 
0001ef30 l       .debug_str	00000000 
00000c40 l       .debug_str	00000000 
00000ecb l       .debug_str	00000000 
00031a20 l       .debug_str	00000000 
000218b0 l       .debug_str	00000000 
00031a2c l       .debug_str	00000000 
00031a36 l       .debug_str	00000000 
00031a43 l       .debug_str	00000000 
00031a50 l       .debug_str	00000000 
00031a65 l       .debug_str	00000000 
00031a79 l       .debug_str	00000000 
00031a8f l       .debug_str	00000000 
00031a97 l       .debug_str	00000000 
00031aa4 l       .debug_str	00000000 
00031ab1 l       .debug_str	00000000 
000323ba l       .debug_str	00000000 
00018afc l       .debug_str	00000000 
00031abe l       .debug_str	00000000 
00031aeb l       .debug_str	00000000 
00031b1a l       .debug_str	00000000 
00031b41 l       .debug_str	00000000 
00000bd1 l       .debug_str	00000000 
00001750 l       .debug_str	00000000 
00031b60 l       .debug_str	00000000 
00031b75 l       .debug_str	00000000 
000219b3 l       .debug_str	00000000 
0004c806 l       .debug_str	00000000 
00005fad l       .debug_str	00000000 
00058593 l       .debug_str	00000000 
00000beb l       .debug_str	00000000 
00000c0e l       .debug_str	00000000 
00000d52 l       .debug_str	00000000 
00031b7f l       .debug_str	00000000 
00031ba4 l       .debug_str	00000000 
00031b8a l       .debug_str	00000000 
00031c23 l       .debug_str	00000000 
00031bb4 l       .debug_str	00000000 
00031bba l       .debug_str	00000000 
00031bc9 l       .debug_str	00000000 
00031bd4 l       .debug_str	00000000 
00031c09 l       .debug_str	00000000 
00031c2e l       .debug_str	00000000 
00031c3e l       .debug_str	00000000 
0005919d l       .debug_str	00000000 
00031c70 l       .debug_str	00000000 
00031c75 l       .debug_str	00000000 
0005a040 l       .debug_str	00000000 
000334da l       .debug_str	00000000 
000334d3 l       .debug_str	00000000 
00007b18 l       .debug_str	00000000 
00033501 l       .debug_str	00000000 
00033535 l       .debug_str	00000000 
00031c7b l       .debug_str	00000000 
000062cb l       .debug_str	00000000 
00031cb9 l       .debug_str	00000000 
000334de l       .debug_str	00000000 
0003352b l       .debug_str	00000000 
00031c9a l       .debug_str	00000000 
00031c87 l       .debug_str	00000000 
00031ca0 l       .debug_str	00000000 
0001886b l       .debug_str	00000000 
00016232 l       .debug_str	00000000 
00016231 l       .debug_str	00000000 
00031cc8 l       .debug_str	00000000 
00031cd0 l       .debug_str	00000000 
0003d199 l       .debug_str	00000000 
00031cd6 l       .debug_str	00000000 
0004acc4 l       .debug_str	00000000 
00031cfd l       .debug_str	00000000 
00031ce1 l       .debug_str	00000000 
0001bdc4 l       .debug_str	00000000 
00031d05 l       .debug_str	00000000 
000319b1 l       .debug_str	00000000 
000166ee l       .debug_str	00000000 
00018884 l       .debug_str	00000000 
00031d0a l       .debug_str	00000000 
00031d2e l       .debug_str	00000000 
00031d34 l       .debug_str	00000000 
00031d3c l       .debug_str	00000000 
0004d32f l       .debug_str	00000000 
0003cd95 l       .debug_str	00000000 
00031d41 l       .debug_str	00000000 
00031d69 l       .debug_str	00000000 
00031d4b l       .debug_str	00000000 
000258f3 l       .debug_str	00000000 
00005e21 l       .debug_str	00000000 
0002184e l       .debug_str	00000000 
0000ca78 l       .debug_str	00000000 
000166f6 l       .debug_str	00000000 
00016703 l       .debug_str	00000000 
0001670c l       .debug_str	00000000 
000578fb l       .debug_str	00000000 
00031d7d l       .debug_str	00000000 
00031d71 l       .debug_str	00000000 
00002376 l       .debug_str	00000000 
00031d8a l       .debug_str	00000000 
00031d96 l       .debug_str	00000000 
00031db9 l       .debug_str	00000000 
00031da3 l       .debug_str	00000000 
00031dc7 l       .debug_str	00000000 
00031de7 l       .debug_str	00000000 
00031e07 l       .debug_str	00000000 
00031e22 l       .debug_str	00000000 
00031e3d l       .debug_str	00000000 
00031e43 l       .debug_str	00000000 
00031e47 l       .debug_str	00000000 
00031e58 l       .debug_str	00000000 
00031e4b l       .debug_str	00000000 
00000fef l       .debug_str	00000000 
00000ff3 l       .debug_str	00000000 
00000ffe l       .debug_str	00000000 
00001019 l       .debug_str	00000000 
00001009 l       .debug_str	00000000 
00031e6d l       .debug_str	00000000 
00031e68 l       .debug_str	00000000 
00031e80 l       .debug_str	00000000 
00031ecc l       .debug_str	00000000 
00031ea5 l       .debug_str	00000000 
00031ebc l       .debug_str	00000000 
00031ee6 l       .debug_str	00000000 
00031ed7 l       .debug_str	00000000 
00031f2e l       .debug_str	00000000 
00031f0e l       .debug_str	00000000 
00031f87 l       .debug_str	00000000 
00031f67 l       .debug_str	00000000 
000578ed l       .debug_str	00000000 
00031fde l       .debug_str	00000000 
00031fe3 l       .debug_str	00000000 
00031fe9 l       .debug_str	00000000 
0003200c l       .debug_str	00000000 
00031fee l       .debug_str	00000000 
00032017 l       .debug_str	00000000 
00032062 l       .debug_str	00000000 
00032093 l       .debug_str	00000000 
000320c4 l       .debug_str	00000000 
000320f3 l       .debug_str	00000000 
0003213e l       .debug_str	00000000 
0003216f l       .debug_str	00000000 
000078ce l       .debug_str	00000000 
00000c1f l       .debug_str	00000000 
00000c39 l       .debug_str	00000000 
00000c45 l       .debug_str	00000000 
000377ab l       .debug_str	00000000 
00002ef8 l       .debug_str	00000000 
000372c1 l       .debug_str	00000000 
0005a9aa l       .debug_str	00000000 
00000c4d l       .debug_str	00000000 
0005efe4 l       .debug_str	00000000 
00000b51 l       .debug_str	00000000 
00000b56 l       .debug_str	00000000 
00000b5c l       .debug_str	00000000 
00000b63 l       .debug_str	00000000 
00000b6b l       .debug_str	00000000 
0000d3a8 l       .debug_str	00000000 
00000c52 l       .debug_str	00000000 
00000c5c l       .debug_str	00000000 
00000c63 l       .debug_str	00000000 
00000c69 l       .debug_str	00000000 
00000c71 l       .debug_str	00000000 
00001bfa l       .debug_str	00000000 
00000c77 l       .debug_str	00000000 
00000c9c l       .debug_str	00000000 
00000c82 l       .debug_str	00000000 
00000ca5 l       .debug_str	00000000 
00000cc9 l       .debug_str	00000000 
0005861c l       .debug_str	00000000 
0005851d l       .debug_str	00000000 
00000cf0 l       .debug_str	00000000 
00000cf6 l       .debug_str	00000000 
00000d05 l       .debug_str	00000000 
00000d09 l       .debug_str	00000000 
00000d12 l       .debug_str	00000000 
00000d1e l       .debug_str	00000000 
00000d43 l       .debug_str	00000000 
00000d37 l       .debug_str	00000000 
00000d48 l       .debug_str	00000000 
00058b65 l       .debug_str	00000000 
00000b75 l       .debug_str	00000000 
00000b78 l       .debug_str	00000000 
00000b7c l       .debug_str	00000000 
0000c99c l       .debug_str	00000000 
00000d6d l       .debug_str	00000000 
00000d5d l       .debug_str	00000000 
00000d77 l       .debug_str	00000000 
00000de7 l       .debug_str	00000000 
00000dd5 l       .debug_str	00000000 
00000df2 l       .debug_str	00000000 
0000cb19 l       .debug_str	00000000 
0000cb0d l       .debug_str	00000000 
0000c94a l       .debug_str	00000000 
000321c0 l       .debug_str	00000000 
000321d9 l       .debug_str	00000000 
00000bdf l       .debug_str	00000000 
00032207 l       .debug_str	00000000 
00032206 l       .debug_str	00000000 
0003221b l       .debug_str	00000000 
0003220c l       .debug_str	00000000 
0005860e l       .debug_str	00000000 
000578db l       .debug_str	00000000 
00000e0b l       .debug_str	00000000 
00032248 l       .debug_str	00000000 
0003223a l       .debug_str	00000000 
00032239 l       .debug_str	00000000 
0000ca81 l       .debug_str	00000000 
00005e2b l       .debug_str	00000000 
0005f41a l       .debug_str	00000000 
00032251 l       .debug_str	00000000 
00032255 l       .debug_str	00000000 
00032258 l       .debug_str	00000000 
0005df0a l       .debug_str	00000000 
00005db3 l       .debug_str	00000000 
0003225b l       .debug_str	00000000 
000074c0 l       .debug_str	00000000 
0003225f l       .debug_str	00000000 
0003225e l       .debug_str	00000000 
00032264 l       .debug_str	00000000 
00032336 l       .debug_str	00000000 
00000238 l       .debug_str	00000000 
00032282 l       .debug_str	00000000 
00032270 l       .debug_str	00000000 
000322a7 l       .debug_str	00000000 
0003236f l       .debug_str	00000000 
000322c5 l       .debug_str	00000000 
000322b3 l       .debug_str	00000000 
000322ea l       .debug_str	00000000 
00032303 l       .debug_str	00000000 
000322f1 l       .debug_str	00000000 
0003230f l       .debug_str	00000000 
00032327 l       .debug_str	00000000 
00032360 l       .debug_str	00000000 
000074c6 l       .debug_str	00000000 
00032399 l       .debug_str	00000000 
000323a6 l       .debug_str	00000000 
000323a5 l       .debug_str	00000000 
000323ae l       .debug_str	00000000 
000323db l       .debug_str	00000000 
000323c6 l       .debug_str	00000000 
000323f8 l       .debug_str	00000000 
00032404 l       .debug_str	00000000 
000324ae l       .debug_str	00000000 
00032410 l       .debug_str	00000000 
00032417 l       .debug_str	00000000 
00032420 l       .debug_str	00000000 
0003242e l       .debug_str	00000000 
00032435 l       .debug_str	00000000 
0003243d l       .debug_str	00000000 
00032444 l       .debug_str	00000000 
0003248a l       .debug_str	00000000 
00032465 l       .debug_str	00000000 
00032450 l       .debug_str	00000000 
00032475 l       .debug_str	00000000 
00032499 l       .debug_str	00000000 
0001bde3 l       .debug_str	00000000 
000324ba l       .debug_str	00000000 
00018897 l       .debug_str	00000000 
0005bdf4 l       .debug_str	00000000 
0000c8bd l       .debug_str	00000000 
0000c8a6 l       .debug_str	00000000 
000324d4 l       .debug_str	00000000 
000324f7 l       .debug_str	00000000 
000324e0 l       .debug_str	00000000 
00032541 l       .debug_str	00000000 
00032535 l       .debug_str	00000000 
000319ac l       .debug_str	00000000 
0003255e l       .debug_str	00000000 
00032547 l       .debug_str	00000000 
000325a7 l       .debug_str	00000000 
000325cf l       .debug_str	00000000 
000325b8 l       .debug_str	00000000 
0005a998 l       .debug_str	00000000 
0000dee1 l       .debug_str	00000000 
00058a23 l       .debug_str	00000000 
0003267e l       .debug_str	00000000 
00032660 l       .debug_str	00000000 
00032774 l       .debug_str	00000000 
00032754 l       .debug_str	00000000 
000327e7 l       .debug_str	00000000 
000327c7 l       .debug_str	00000000 
00048ded l       .debug_str	00000000 
0003283a l       .debug_str	00000000 
00032847 l       .debug_str	00000000 
00032852 l       .debug_str	00000000 
00032868 l       .debug_str	00000000 
00032872 l       .debug_str	00000000 
000328c8 l       .debug_str	00000000 
000328da l       .debug_str	00000000 
0003292c l       .debug_str	00000000 
00032940 l       .debug_str	00000000 
00032994 l       .debug_str	00000000 
0003299b l       .debug_str	00000000 
000329e1 l       .debug_str	00000000 
000329f0 l       .debug_str	00000000 
00032a4a l       .debug_str	00000000 
00032aa0 l       .debug_str	00000000 
00032af8 l       .debug_str	00000000 
00032b42 l       .debug_str	00000000 
00032b48 l       .debug_str	00000000 
00032b98 l       .debug_str	00000000 
00032be4 l       .debug_str	00000000 
00032c32 l       .debug_str	00000000 
0001893d l       .debug_str	00000000 
00032c72 l       .debug_str	00000000 
00032cbf l       .debug_str	00000000 
00032d08 l       .debug_str	00000000 
00032d53 l       .debug_str	00000000 
00032d90 l       .debug_str	00000000 
00032da0 l       .debug_str	00000000 
00032dfb l       .debug_str	00000000 
00032e52 l       .debug_str	00000000 
00032eab l       .debug_str	00000000 
00040181 l       .debug_str	00000000 
00032ef6 l       .debug_str	00000000 
00032f4a l       .debug_str	00000000 
00032f9a l       .debug_str	00000000 
00032fec l       .debug_str	00000000 
0005848f l       .debug_str	00000000 
00033030 l       .debug_str	00000000 
0003307c l       .debug_str	00000000 
000330c4 l       .debug_str	00000000 
0003310e l       .debug_str	00000000 
0003ffb7 l       .debug_str	00000000 
0003314a l       .debug_str	00000000 
0003319e l       .debug_str	00000000 
000331ee l       .debug_str	00000000 
00033240 l       .debug_str	00000000 
00033284 l       .debug_str	00000000 
00033290 l       .debug_str	00000000 
000332e7 l       .debug_str	00000000 
0003333a l       .debug_str	00000000 
0003338f l       .debug_str	00000000 
000333d6 l       .debug_str	00000000 
000333e2 l       .debug_str	00000000 
000333f9 l       .debug_str	00000000 
000333f2 l       .debug_str	00000000 
0003340b l       .debug_str	00000000 
00033420 l       .debug_str	00000000 
00033471 l       .debug_str	00000000 
00033481 l       .debug_str	00000000 
000334d2 l       .debug_str	00000000 
000334dd l       .debug_str	00000000 
00033500 l       .debug_str	00000000 
00033534 l       .debug_str	00000000 
0003354a l       .debug_str	00000000 
00033578 l       .debug_str	00000000 
0003356c l       .debug_str	00000000 
00033586 l       .debug_str	00000000 
00033585 l       .debug_str	00000000 
0000d1c6 l       .debug_str	00000000 
00005e17 l       .debug_str	00000000 
000188aa l       .debug_str	00000000 
000188a9 l       .debug_str	00000000 
000188af l       .debug_str	00000000 
000188ae l       .debug_str	00000000 
00033589 l       .debug_str	00000000 
000335c9 l       .debug_str	00000000 
000335d1 l       .debug_str	00000000 
00033611 l       .debug_str	00000000 
0003361b l       .debug_str	00000000 
00057a27 l       .debug_str	00000000 
0005c592 l       .debug_str	00000000 
00033657 l       .debug_str	00000000 
00008699 l       .debug_str	00000000 
00036477 l       .debug_str	00000000 
0003367f l       .debug_str	00000000 
00008551 l       .debug_str	00000000 
000336a8 l       .debug_str	00000000 
000336cd l       .debug_str	00000000 
00044605 l       .debug_str	00000000 
00058a7d l       .debug_str	00000000 
000336d4 l       .debug_str	00000000 
000336dd l       .debug_str	00000000 
00033716 l       .debug_str	00000000 
00001385 l       .debug_str	00000000 
0003371e l       .debug_str	00000000 
00006acb l       .debug_str	00000000 
000337b3 l       .debug_str	00000000 
00006786 l       .debug_str	00000000 
000337fe l       .debug_str	00000000 
0000672f l       .debug_str	00000000 
00033845 l       .debug_str	00000000 
00006406 l       .debug_str	00000000 
0003389a l       .debug_str	00000000 
000338d7 l       .debug_str	00000000 
00006359 l       .debug_str	00000000 
000338e2 l       .debug_str	00000000 
000093ca l       .debug_str	00000000 
00033937 l       .debug_str	00000000 
0000935a l       .debug_str	00000000 
00033989 l       .debug_str	00000000 
00014fff l       .debug_str	00000000 
000339d0 l       .debug_str	00000000 
00014ffa l       .debug_str	00000000 
0000e3f9 l       .debug_str	00000000 
0000251b l       .debug_str	00000000 
000343da l       .debug_str	00000000 
00033a56 l       .debug_str	00000000 
00033a97 l       .debug_str	00000000 
00033aba l       .debug_str	00000000 
00033af5 l       .debug_str	00000000 
00033aff l       .debug_str	00000000 
00033b89 l       .debug_str	00000000 
00033bbb l       .debug_str	00000000 
000182e7 l       .debug_str	00000000 
00006351 l       .debug_str	00000000 
00033c2f l       .debug_str	00000000 
00033c80 l       .debug_str	00000000 
00016821 l       .debug_str	00000000 
00033cc2 l       .debug_str	00000000 
00033d49 l       .debug_str	00000000 
00033d58 l       .debug_str	00000000 
00033de2 l       .debug_str	00000000 
00033e5e l       .debug_str	00000000 
00033e8e l       .debug_str	00000000 
00033ec9 l       .debug_str	00000000 
00033ed3 l       .debug_str	00000000 
0000f0be l       .debug_str	00000000 
00033f4a l       .debug_str	00000000 
00033f9f l       .debug_str	00000000 
00033fa8 l       .debug_str	00000000 
00033ff9 l       .debug_str	00000000 
00010e4c l       .debug_str	00000000 
00034005 l       .debug_str	00000000 
000013bd l       .debug_str	00000000 
00034012 l       .debug_str	00000000 
0003401b l       .debug_str	00000000 
00034031 l       .debug_str	00000000 
0003403e l       .debug_str	00000000 
00034083 l       .debug_str	00000000 
00034097 l       .debug_str	00000000 
000340ec l       .debug_str	00000000 
000340f5 l       .debug_str	00000000 
0004b2a4 l       .debug_str	00000000 
0003412d l       .debug_str	00000000 
0003416a l       .debug_str	00000000 
00034175 l       .debug_str	00000000 
000341f8 l       .debug_str	00000000 
00034203 l       .debug_str	00000000 
00034289 l       .debug_str	00000000 
000342fe l       .debug_str	00000000 
0003432a l       .debug_str	00000000 
000343b3 l       .debug_str	00000000 
000343c2 l       .debug_str	00000000 
000343cf l       .debug_str	00000000 
000343e3 l       .debug_str	00000000 
00034439 l       .debug_str	00000000 
000344a8 l       .debug_str	00000000 
00034528 l       .debug_str	00000000 
00034596 l       .debug_str	00000000 
00034621 l       .debug_str	00000000 
00034696 l       .debug_str	00000000 
000346d6 l       .debug_str	00000000 
00034759 l       .debug_str	00000000 
0003479a l       .debug_str	00000000 
00048caf l       .debug_str	00000000 
0004c7c9 l       .debug_str	00000000 
000347ff l       .debug_str	00000000 
000348ae l       .debug_str	00000000 
000348f9 l       .debug_str	00000000 
0001fd51 l       .debug_str	00000000 
000349a2 l       .debug_str	00000000 
00034a1e l       .debug_str	00000000 
00016716 l       .debug_str	00000000 
00034a43 l       .debug_str	00000000 
000165db l       .debug_str	00000000 
00034a90 l       .debug_str	00000000 
0001f3ba l       .debug_str	00000000 
00034ae3 l       .debug_str	00000000 
00034b1e l       .debug_str	00000000 
00034b29 l       .debug_str	00000000 
00006fef l       .debug_str	00000000 
00034bb5 l       .debug_str	00000000 
0001f01a l       .debug_str	00000000 
00034c38 l       .debug_str	00000000 
00034cc0 l       .debug_str	00000000 
00022317 l       .debug_str	00000000 
00034d35 l       .debug_str	00000000 
00034dbb l       .debug_str	00000000 
00020258 l       .debug_str	00000000 
00034e30 l       .debug_str	00000000 
00015e1f l       .debug_str	00000000 
00034e93 l       .debug_str	00000000 
0001506a l       .debug_str	00000000 
00034ef5 l       .debug_str	00000000 
00014d70 l       .debug_str	00000000 
00034f3b l       .debug_str	00000000 
00034f83 l       .debug_str	00000000 
00034f8d l       .debug_str	00000000 
00034fce l       .debug_str	00000000 
00034fe8 l       .debug_str	00000000 
00018962 l       .debug_str	00000000 
00000b76 l       .debug_str	00000000 
00034fee l       .debug_str	00000000 
00034ff7 l       .debug_str	00000000 
0003505c l       .debug_str	00000000 
0003506b l       .debug_str	00000000 
000350ad l       .debug_str	00000000 
000350b7 l       .debug_str	00000000 
0003511c l       .debug_str	00000000 
0003515e l       .debug_str	00000000 
000351a8 l       .debug_str	00000000 
000351b7 l       .debug_str	00000000 
000351ed l       .debug_str	00000000 
000351f6 l       .debug_str	00000000 
00003b60 l       .debug_str	00000000 
00035200 l       .debug_str	00000000 
00035203 l       .debug_str	00000000 
0003523b l       .debug_str	00000000 
00035245 l       .debug_str	00000000 
00035289 l       .debug_str	00000000 
0003529f l       .debug_str	00000000 
000352e8 l       .debug_str	00000000 
00017099 l       .debug_str	00000000 
0001894d l       .debug_str	00000000 
0003532d l       .debug_str	00000000 
00035376 l       .debug_str	00000000 
00035384 l       .debug_str	00000000 
000353cc l       .debug_str	00000000 
00016fc3 l       .debug_str	00000000 
00035416 l       .debug_str	00000000 
0003ebee l       .debug_str	00000000 
000354ae l       .debug_str	00000000 
00058460 l       .debug_str	00000000 
00035548 l       .debug_str	00000000 
000174c9 l       .debug_str	00000000 
000355ba l       .debug_str	00000000 
000171eb l       .debug_str	00000000 
0003565d l       .debug_str	00000000 
00002ef4 l       .debug_str	00000000 
0003568f l       .debug_str	00000000 
000356d6 l       .debug_str	00000000 
000356e4 l       .debug_str	00000000 
000356ee l       .debug_str	00000000 
0003573c l       .debug_str	00000000 
0003574c l       .debug_str	00000000 
00035797 l       .debug_str	00000000 
000357a5 l       .debug_str	00000000 
00035833 l       .debug_str	00000000 
00035842 l       .debug_str	00000000 
0001662a l       .debug_str	00000000 
0003588b l       .debug_str	00000000 
000165d3 l       .debug_str	00000000 
000358d0 l       .debug_str	00000000 
0003590a l       .debug_str	00000000 
00035913 l       .debug_str	00000000 
0003595f l       .debug_str	00000000 
00035977 l       .debug_str	00000000 
000359d9 l       .debug_str	00000000 
00006737 l       .debug_str	00000000 
00035a0e l       .debug_str	00000000 
00035a36 l       .debug_str	00000000 
00035a6e l       .debug_str	00000000 
00035a97 l       .debug_str	00000000 
00035aa2 l       .debug_str	00000000 
0000782a l       .debug_str	00000000 
00035ac7 l       .debug_str	00000000 
00035b56 l       .debug_str	00000000 
00035b8d l       .debug_str	00000000 
00035c13 l       .debug_str	00000000 
00035c61 l       .debug_str	00000000 
00035c6a l       .debug_str	00000000 
00035cf0 l       .debug_str	00000000 
00035d03 l       .debug_str	00000000 
00035d8c l       .debug_str	00000000 
00035de8 l       .debug_str	00000000 
00035e2a l       .debug_str	00000000 
00035edc l       .debug_str	00000000 
00035f1b l       .debug_str	00000000 
00035fc0 l       .debug_str	00000000 
00036054 l       .debug_str	00000000 
0003607a l       .debug_str	00000000 
000360f6 l       .debug_str	00000000 
00036131 l       .debug_str	00000000 
0003613e l       .debug_str	00000000 
00036177 l       .debug_str	00000000 
0003618f l       .debug_str	00000000 
000361cf l       .debug_str	00000000 
0001ec63 l       .debug_str	00000000 
000361db l       .debug_str	00000000 
00036238 l       .debug_str	00000000 
00036295 l       .debug_str	00000000 
00036342 l       .debug_str	00000000 
0003639f l       .debug_str	00000000 
000215d2 l       .debug_str	00000000 
0003640c l       .debug_str	00000000 
00036470 l       .debug_str	00000000 
0003647b l       .debug_str	00000000 
000364ab l       .debug_str	00000000 
000364d7 l       .debug_str	00000000 
00036543 l       .debug_str	00000000 
00036573 l       .debug_str	00000000 
000365af l       .debug_str	00000000 
000365f9 l       .debug_str	00000000 
00036609 l       .debug_str	00000000 
0003663e l       .debug_str	00000000 
00036683 l       .debug_str	00000000 
0003668e l       .debug_str	00000000 
000366ce l       .debug_str	00000000 
000366dc l       .debug_str	00000000 
00036768 l       .debug_str	00000000 
000367e4 l       .debug_str	00000000 
00036804 l       .debug_str	00000000 
0003685e l       .debug_str	00000000 
0003686b l       .debug_str	00000000 
000368a4 l       .debug_str	00000000 
000368ac l       .debug_str	00000000 
00036901 l       .debug_str	00000000 
00036953 l       .debug_str	00000000 
00035838 l       .debug_str	00000000 
0003699a l       .debug_str	00000000 
00036a0e l       .debug_str	00000000 
00036a52 l       .debug_str	00000000 
00036a9e l       .debug_str	00000000 
00036add l       .debug_str	00000000 
00036b03 l       .debug_str	00000000 
00036b15 l       .debug_str	00000000 
00036b1f l       .debug_str	00000000 
00036b61 l       .debug_str	00000000 
0000f01b l       .debug_str	00000000 
00036be8 l       .debug_str	00000000 
00002f7d l       .debug_str	00000000 
00036c64 l       .debug_str	00000000 
00036cdb l       .debug_str	00000000 
00036d29 l       .debug_str	00000000 
00007072 l       .debug_str	00000000 
00036db9 l       .debug_str	00000000 
00036df5 l       .debug_str	00000000 
00036e02 l       .debug_str	00000000 
00036e48 l       .debug_str	00000000 
00036e55 l       .debug_str	00000000 
00037b9b l       .debug_str	00000000 
00036e87 l       .debug_str	00000000 
00036ed7 l       .debug_str	00000000 
00036eee l       .debug_str	00000000 
00036f78 l       .debug_str	00000000 
00014f45 l       .debug_str	00000000 
00036ff4 l       .debug_str	00000000 
00037008 l       .debug_str	00000000 
00037065 l       .debug_str	00000000 
00037074 l       .debug_str	00000000 
00037085 l       .debug_str	00000000 
000370df l       .debug_str	00000000 
000370ee l       .debug_str	00000000 
00037177 l       .debug_str	00000000 
00037185 l       .debug_str	00000000 
000371db l       .debug_str	00000000 
0003722f l       .debug_str	00000000 
000372a8 l       .debug_str	00000000 
000372c0 l       .debug_str	00000000 
000372ca l       .debug_str	00000000 
00037361 l       .debug_str	00000000 
0003737b l       .debug_str	00000000 
0000a508 l       .debug_str	00000000 
000373b4 l       .debug_str	00000000 
00002e67 l       .debug_str	00000000 
00037419 l       .debug_str	00000000 
000374b0 l       .debug_str	00000000 
000374b4 l       .debug_str	00000000 
000377a9 l       .debug_str	00000000 
000374b9 l       .debug_str	00000000 
0005d45a l       .debug_str	00000000 
000061f6 l       .debug_str	00000000 
000374eb l       .debug_str	00000000 
0000644e l       .debug_str	00000000 
00037529 l       .debug_str	00000000 
00014d16 l       .debug_str	00000000 
0003757c l       .debug_str	00000000 
00037608 l       .debug_str	00000000 
00037684 l       .debug_str	00000000 
000376a3 l       .debug_str	00000000 
000376ee l       .debug_str	00000000 
000376fb l       .debug_str	00000000 
0003776f l       .debug_str	00000000 
0003baad l       .debug_str	00000000 
0004d1e8 l       .debug_str	00000000 
0003778e l       .debug_str	00000000 
000377ae l       .debug_str	00000000 
000377ca l       .debug_str	00000000 
000377d4 l       .debug_str	00000000 
00037860 l       .debug_str	00000000 
000378dc l       .debug_str	00000000 
0003790d l       .debug_str	00000000 
00037990 l       .debug_str	00000000 
000379b0 l       .debug_str	00000000 
00037a36 l       .debug_str	00000000 
00037aab l       .debug_str	00000000 
0001ecfe l       .debug_str	00000000 
0005aa26 l       .debug_str	00000000 
00037aec l       .debug_str	00000000 
0001758f l       .debug_str	00000000 
00037b37 l       .debug_str	00000000 
00037b93 l       .debug_str	00000000 
00037b9f l       .debug_str	00000000 
00037be8 l       .debug_str	00000000 
00037bf8 l       .debug_str	00000000 
00037c3d l       .debug_str	00000000 
00037c86 l       .debug_str	00000000 
00037ccb l       .debug_str	00000000 
00037d27 l       .debug_str	00000000 
00037d72 l       .debug_str	00000000 
00037db9 l       .debug_str	00000000 
00037e17 l       .debug_str	00000000 
00037e62 l       .debug_str	00000000 
00037ea9 l       .debug_str	00000000 
00037f07 l       .debug_str	00000000 
00037f52 l       .debug_str	00000000 
00037f99 l       .debug_str	00000000 
00037ff7 l       .debug_str	00000000 
00038040 l       .debug_str	00000000 
00038085 l       .debug_str	00000000 
000380e1 l       .debug_str	00000000 
0003812a l       .debug_str	00000000 
0003816f l       .debug_str	00000000 
000381cb l       .debug_str	00000000 
00038215 l       .debug_str	00000000 
0003825b l       .debug_str	00000000 
000382b8 l       .debug_str	00000000 
00038302 l       .debug_str	00000000 
00038348 l       .debug_str	00000000 
000383a5 l       .debug_str	00000000 
00038400 l       .debug_str	00000000 
00038448 l       .debug_str	00000000 
0003848c l       .debug_str	00000000 
000384d4 l       .debug_str	00000000 
00038518 l       .debug_str	00000000 
00038573 l       .debug_str	00000000 
000385bc l       .debug_str	00000000 
00038601 l       .debug_str	00000000 
0003865d l       .debug_str	00000000 
000386a6 l       .debug_str	00000000 
000386eb l       .debug_str	00000000 
00038747 l       .debug_str	00000000 
00038790 l       .debug_str	00000000 
000387d5 l       .debug_str	00000000 
00038831 l       .debug_str	00000000 
0003887b l       .debug_str	00000000 
000388c1 l       .debug_str	00000000 
0003891e l       .debug_str	00000000 
00038968 l       .debug_str	00000000 
000389ae l       .debug_str	00000000 
00038a0b l       .debug_str	00000000 
00038a55 l       .debug_str	00000000 
00038a9b l       .debug_str	00000000 
00038af8 l       .debug_str	00000000 
00038b53 l       .debug_str	00000000 
00038b9b l       .debug_str	00000000 
00038bdf l       .debug_str	00000000 
00038c27 l       .debug_str	00000000 
00038c6b l       .debug_str	00000000 
00038cc6 l       .debug_str	00000000 
00038d21 l       .debug_str	00000000 
00038d69 l       .debug_str	00000000 
00038dad l       .debug_str	00000000 
00038df6 l       .debug_str	00000000 
00038e3b l       .debug_str	00000000 
00038e97 l       .debug_str	00000000 
00038ef3 l       .debug_str	00000000 
00038f3c l       .debug_str	00000000 
00038f81 l       .debug_str	00000000 
00038fdd l       .debug_str	00000000 
00039026 l       .debug_str	00000000 
0003906b l       .debug_str	00000000 
000390c7 l       .debug_str	00000000 
00039110 l       .debug_str	00000000 
00039155 l       .debug_str	00000000 
0001709e l       .debug_str	00000000 
000391b1 l       .debug_str	00000000 
000391f0 l       .debug_str	00000000 
00039225 l       .debug_str	00000000 
00010e78 l       .debug_str	00000000 
0001ee9f l       .debug_str	00000000 
0001ef7b l       .debug_str	00000000 
0003922f l       .debug_str	00000000 
00020dd3 l       .debug_str	00000000 
00001615 l       .debug_str	00000000 
00039269 l       .debug_str	00000000 
00001c8b l       .debug_str	00000000 
000392fb l       .debug_str	00000000 
0002035b l       .debug_str	00000000 
00039334 l       .debug_str	00000000 
000068e3 l       .debug_str	00000000 
0003935b l       .debug_str	00000000 
0000682f l       .debug_str	00000000 
00001c0f l       .debug_str	00000000 
00039395 l       .debug_str	00000000 
000065a1 l       .debug_str	00000000 
000393bb l       .debug_str	00000000 
0001f359 l       .debug_str	00000000 
00039415 l       .debug_str	00000000 
0001fc72 l       .debug_str	00000000 
000394af l       .debug_str	00000000 
0001ef8a l       .debug_str	00000000 
00039538 l       .debug_str	00000000 
000395df l       .debug_str	00000000 
00039618 l       .debug_str	00000000 
0003968d l       .debug_str	00000000 
000396b6 l       .debug_str	00000000 
0002c0bb l       .debug_str	00000000 
000396eb l       .debug_str	00000000 
00039727 l       .debug_str	00000000 
00039738 l       .debug_str	00000000 
00039771 l       .debug_str	00000000 
00007688 l       .debug_str	00000000 
0003977e l       .debug_str	00000000 
0003978d l       .debug_str	00000000 
00035064 l       .debug_str	00000000 
000397d6 l       .debug_str	00000000 
00039809 l       .debug_str	00000000 
00039816 l       .debug_str	00000000 
0005e719 l       .debug_str	00000000 
00039861 l       .debug_str	00000000 
000398b9 l       .debug_str	00000000 
000398ce l       .debug_str	00000000 
00039904 l       .debug_str	00000000 
0003990f l       .debug_str	00000000 
0002c1c9 l       .debug_str	00000000 
0003996e l       .debug_str	00000000 
000399e1 l       .debug_str	00000000 
00039a48 l       .debug_str	00000000 
00039a68 l       .debug_str	00000000 
00039aa7 l       .debug_str	00000000 
00039ac6 l       .debug_str	00000000 
00000ad8 l       .debug_str	00000000 
00039b39 l       .debug_str	00000000 
00039bb6 l       .debug_str	00000000 
00039c1b l       .debug_str	00000000 
00039c7b l       .debug_str	00000000 
00039cee l       .debug_str	00000000 
00039d6b l       .debug_str	00000000 
00020f68 l       .debug_str	00000000 
00039de3 l       .debug_str	00000000 
00039e58 l       .debug_str	00000000 
00039ed2 l       .debug_str	00000000 
0000cd42 l       .debug_str	00000000 
0000cd4d l       .debug_str	00000000 
00039f32 l       .debug_str	00000000 
0005c707 l       .debug_str	00000000 
00039f70 l       .debug_str	00000000 
00039fb2 l       .debug_str	00000000 
00039fdd l       .debug_str	00000000 
0003a01e l       .debug_str	00000000 
0003a028 l       .debug_str	00000000 
00000bd7 l       .debug_str	00000000 
0005d5c1 l       .debug_str	00000000 
00057ea7 l       .debug_str	00000000 
00000e1d l       .debug_str	00000000 
0003a084 l       .debug_str	00000000 
00002480 l       .debug_str	00000000 
0003a0c0 l       .debug_str	00000000 
00002423 l       .debug_str	00000000 
0003a107 l       .debug_str	00000000 
0003a165 l       .debug_str	00000000 
00031a94 l       .debug_str	00000000 
0003a1bc l       .debug_str	00000000 
0003a216 l       .debug_str	00000000 
0003a220 l       .debug_str	00000000 
0000767c l       .debug_str	00000000 
00007681 l       .debug_str	00000000 
0003a263 l       .debug_str	00000000 
0003a299 l       .debug_str	00000000 
0003a2a9 l       .debug_str	00000000 
0003a2b8 l       .debug_str	00000000 
0003a2c3 l       .debug_str	00000000 
00031b7a l       .debug_str	00000000 
0003a2fd l       .debug_str	00000000 
0003a346 l       .debug_str	00000000 
00024e00 l       .debug_str	00000000 
0003a38d l       .debug_str	00000000 
0003a3c8 l       .debug_str	00000000 
0003a3ed l       .debug_str	00000000 
0003a459 l       .debug_str	00000000 
0003a46c l       .debug_str	00000000 
0003a4e3 l       .debug_str	00000000 
0003a4ee l       .debug_str	00000000 
0003a52b l       .debug_str	00000000 
0003a536 l       .debug_str	00000000 
0003a5b7 l       .debug_str	00000000 
0003a5fd l       .debug_str	00000000 
0003a624 l       .debug_str	00000000 
0003a653 l       .debug_str	00000000 
0003a664 l       .debug_str	00000000 
0001eefb l       .debug_str	00000000 
0003a6c0 l       .debug_str	00000000 
0003a6f1 l       .debug_str	00000000 
000088c1 l       .debug_str	00000000 
0003a739 l       .debug_str	00000000 
00021b96 l       .debug_str	00000000 
0003a777 l       .debug_str	00000000 
0003a7bb l       .debug_str	00000000 
0003a80e l       .debug_str	00000000 
000372a9 l       .debug_str	00000000 
0003a886 l       .debug_str	00000000 
0003a8d5 l       .debug_str	00000000 
0003a96b l       .debug_str	00000000 
0003a9af l       .debug_str	00000000 
0003e6ed l       .debug_str	00000000 
0003aa27 l       .debug_str	00000000 
0003aa76 l       .debug_str	00000000 
0003ab0c l       .debug_str	00000000 
0003ab26 l       .debug_str	00000000 
0003ab75 l       .debug_str	00000000 
0003abae l       .debug_str	00000000 
0003abc9 l       .debug_str	00000000 
00017dea l       .debug_str	00000000 
0003ac2d l       .debug_str	00000000 
000179a8 l       .debug_str	00000000 
0003aca6 l       .debug_str	00000000 
000169dc l       .debug_str	00000000 
0003ad17 l       .debug_str	00000000 
0003adad l       .debug_str	00000000 
0003ae45 l       .debug_str	00000000 
0003aeb7 l       .debug_str	00000000 
0003aedf l       .debug_str	00000000 
00007b55 l       .debug_str	00000000 
0003af97 l       .debug_str	00000000 
000179f7 l       .debug_str	00000000 
0003afdc l       .debug_str	00000000 
0003b092 l       .debug_str	00000000 
0003b0d7 l       .debug_str	00000000 
0000e1d4 l       .debug_str	00000000 
0003b119 l       .debug_str	00000000 
0003b174 l       .debug_str	00000000 
0003b179 l       .debug_str	00000000 
0003b1d2 l       .debug_str	00000000 
0003b206 l       .debug_str	00000000 
0003b21a l       .debug_str	00000000 
0003b255 l       .debug_str	00000000 
0003b297 l       .debug_str	00000000 
0003b2ad l       .debug_str	00000000 
0003b319 l       .debug_str	00000000 
0000cd46 l       .debug_str	00000000 
00005fb6 l       .debug_str	00000000 
00005fc1 l       .debug_str	00000000 
0003b35b l       .debug_str	00000000 
0003b39b l       .debug_str	00000000 
0003b3f5 l       .debug_str	00000000 
0003b437 l       .debug_str	00000000 
0003b492 l       .debug_str	00000000 
0003b4d4 l       .debug_str	00000000 
0003b4df l       .debug_str	00000000 
0003b51f l       .debug_str	00000000 
0003b525 l       .debug_str	00000000 
0003b57f l       .debug_str	00000000 
0003b588 l       .debug_str	00000000 
0003b5ca l       .debug_str	00000000 
0003b622 l       .debug_str	00000000 
0003b664 l       .debug_str	00000000 
0003b6bd l       .debug_str	00000000 
0003b6c7 l       .debug_str	00000000 
0003b6cf l       .debug_str	00000000 
0003b6d8 l       .debug_str	00000000 
0003b6cb l       .debug_str	00000000 
0003b71a l       .debug_str	00000000 
0003b76f l       .debug_str	00000000 
0003b7ac l       .debug_str	00000000 
0003b7ee l       .debug_str	00000000 
0003b845 l       .debug_str	00000000 
0003b887 l       .debug_str	00000000 
0003b8df l       .debug_str	00000000 
0003b917 l       .debug_str	00000000 
0003b923 l       .debug_str	00000000 
0003b960 l       .debug_str	00000000 
0003b9c2 l       .debug_str	00000000 
0003ba03 l       .debug_str	00000000 
0003ba0c l       .debug_str	00000000 
0003ba6a l       .debug_str	00000000 
0003baa3 l       .debug_str	00000000 
0003bab2 l       .debug_str	00000000 
0003baf1 l       .debug_str	00000000 
0003bb06 l       .debug_str	00000000 
0003bb4c l       .debug_str	00000000 
0003bb59 l       .debug_str	00000000 
0003bb5f l       .debug_str	00000000 
0003bb98 l       .debug_str	00000000 
0003bc24 l       .debug_str	00000000 
0003bc60 l       .debug_str	00000000 
00057a96 l       .debug_str	00000000 
0003bc72 l       .debug_str	00000000 
0003bcaa l       .debug_str	00000000 
0003bcb6 l       .debug_str	00000000 
0003bcf3 l       .debug_str	00000000 
0003bd55 l       .debug_str	00000000 
0003bd96 l       .debug_str	00000000 
0003bdf4 l       .debug_str	00000000 
0003be2e l       .debug_str	00000000 
0003be88 l       .debug_str	00000000 
0003bed1 l       .debug_str	00000000 
0003bee1 l       .debug_str	00000000 
0003bf1a l       .debug_str	00000000 
0003bf9c l       .debug_str	00000000 
0003bfd6 l       .debug_str	00000000 
0003c030 l       .debug_str	00000000 
0003c06b l       .debug_str	00000000 
0003c0cb l       .debug_str	00000000 
0003c106 l       .debug_str	00000000 
0003c166 l       .debug_str	00000000 
0003c1a4 l       .debug_str	00000000 
0003c202 l       .debug_str	00000000 
0003c240 l       .debug_str	00000000 
0003c29e l       .debug_str	00000000 
0003c2e9 l       .debug_str	00000000 
0003c2f2 l       .debug_str	00000000 
0003c341 l       .debug_str	00000000 
00000d57 l       .debug_str	00000000 
0003c34d l       .debug_str	00000000 
0003c37e l       .debug_str	00000000 
0003c3a9 l       .debug_str	00000000 
0003c3f7 l       .debug_str	00000000 
0001ef2c l       .debug_str	00000000 
0003c3fe l       .debug_str	00000000 
0003c463 l       .debug_str	00000000 
0003c494 l       .debug_str	00000000 
0003c49c l       .debug_str	00000000 
00003840 l       .debug_str	00000000 
0003c4cd l       .debug_str	00000000 
0003c526 l       .debug_str	00000000 
0003c5b4 l       .debug_str	00000000 
0003c600 l       .debug_str	00000000 
0003c625 l       .debug_str	00000000 
0003c642 l       .debug_str	00000000 
0003c66c l       .debug_str	00000000 
00007a98 l       .debug_str	00000000 
00007ba3 l       .debug_str	00000000 
00007c1f l       .debug_str	00000000 
0003c68e l       .debug_str	00000000 
0003c6db l       .debug_str	00000000 
0003c720 l       .debug_str	00000000 
0003c75f l       .debug_str	00000000 
0003c7ab l       .debug_str	00000000 
0003c83a l       .debug_str	00000000 
0003c887 l       .debug_str	00000000 
0003c90d l       .debug_str	00000000 
00059998 l       .debug_str	00000000 
0003c932 l       .debug_str	00000000 
0003c95c l       .debug_str	00000000 
0003c965 l       .debug_str	00000000 
0003c99b l       .debug_str	00000000 
0003c9a4 l       .debug_str	00000000 
0003ca32 l       .debug_str	00000000 
0003ca78 l       .debug_str	00000000 
0003ca97 l       .debug_str	00000000 
0003caae l       .debug_str	00000000 
0003cad2 l       .debug_str	00000000 
0003caee l       .debug_str	00000000 
0003cb35 l       .debug_str	00000000 
0003cb7a l       .debug_str	00000000 
0003cbb9 l       .debug_str	00000000 
0003cbff l       .debug_str	00000000 
0003cc8e l       .debug_str	00000000 
0003ccd5 l       .debug_str	00000000 
0003cd5b l       .debug_str	00000000 
0003cd90 l       .debug_str	00000000 
0003cd9a l       .debug_str	00000000 
000589b1 l       .debug_str	00000000 
0003ce05 l       .debug_str	00000000 
0003ce3a l       .debug_str	00000000 
0003ce44 l       .debug_str	00000000 
0003ce77 l       .debug_str	00000000 
0003ce7f l       .debug_str	00000000 
0003ceb3 l       .debug_str	00000000 
0003cec5 l       .debug_str	00000000 
0003ceff l       .debug_str	00000000 
0003cf1d l       .debug_str	00000000 
0003cf43 l       .debug_str	00000000 
0003cf4e l       .debug_str	00000000 
0003cf77 l       .debug_str	00000000 
0003cf85 l       .debug_str	00000000 
0003cfbf l       .debug_str	00000000 
0003cff5 l       .debug_str	00000000 
0003d01b l       .debug_str	00000000 
0003d03e l       .debug_str	00000000 
0003d067 l       .debug_str	00000000 
0003d08d l       .debug_str	00000000 
0003d0cb l       .debug_str	00000000 
0003d0e5 l       .debug_str	00000000 
0003d123 l       .debug_str	00000000 
0003d155 l       .debug_str	00000000 
0003d161 l       .debug_str	00000000 
0005f12d l       .debug_str	00000000 
0003d195 l       .debug_str	00000000 
0003d1a2 l       .debug_str	00000000 
00016e7e l       .debug_str	00000000 
0003d1d4 l       .debug_str	00000000 
0003d23e l       .debug_str	00000000 
0003d2ae l       .debug_str	00000000 
0003d315 l       .debug_str	00000000 
0003d332 l       .debug_str	00000000 
0003d371 l       .debug_str	00000000 
0003d38d l       .debug_str	00000000 
00016e40 l       .debug_str	00000000 
0003d3bb l       .debug_str	00000000 
00016f1c l       .debug_str	00000000 
0003d3f0 l       .debug_str	00000000 
0003d42c l       .debug_str	00000000 
0003d452 l       .debug_str	00000000 
0003d491 l       .debug_str	00000000 
0003d4a1 l       .debug_str	00000000 
0003d505 l       .debug_str	00000000 
0003d53c l       .debug_str	00000000 
0003d552 l       .debug_str	00000000 
0003d5a1 l       .debug_str	00000000 
0003d5ad l       .debug_str	00000000 
0003d67f l       .debug_str	00000000 
0003d5f4 l       .debug_str	00000000 
0003d67a l       .debug_str	00000000 
0003d69e l       .debug_str	00000000 
0003d6d9 l       .debug_str	00000000 
0003d6e9 l       .debug_str	00000000 
0005f055 l       .debug_str	00000000 
0003d72a l       .debug_str	00000000 
0003d764 l       .debug_str	00000000 
0003d773 l       .debug_str	00000000 
0003d7ac l       .debug_str	00000000 
0003d7ba l       .debug_str	00000000 
0003d7f3 l       .debug_str	00000000 
0003d801 l       .debug_str	00000000 
0003d851 l       .debug_str	00000000 
0003d85e l       .debug_str	00000000 
0003d8d4 l       .debug_str	00000000 
0003d8df l       .debug_str	00000000 
0003d8f1 l       .debug_str	00000000 
0003d93d l       .debug_str	00000000 
0003d95a l       .debug_str	00000000 
0003d9ee l       .debug_str	00000000 
0003da84 l       .debug_str	00000000 
0003daf6 l       .debug_str	00000000 
0003db1c l       .debug_str	00000000 
0003dbbb l       .debug_str	00000000 
0003dc2c l       .debug_str	00000000 
00002524 l       .debug_str	00000000 
0003dc71 l       .debug_str	00000000 
0003dcd4 l       .debug_str	00000000 
0003dcf7 l       .debug_str	00000000 
0003dd4b l       .debug_str	00000000 
0003dd62 l       .debug_str	00000000 
00024827 l       .debug_str	00000000 
0003ddaf l       .debug_str	00000000 
0003ddbc l       .debug_str	00000000 
0003ddf7 l       .debug_str	00000000 
0003de1f l       .debug_str	00000000 
0003de81 l       .debug_str	00000000 
00039909 l       .debug_str	00000000 
0003deea l       .debug_str	00000000 
00040718 l       .debug_str	00000000 
000062b5 l       .debug_str	00000000 
000062bb l       .debug_str	00000000 
000062c2 l       .debug_str	00000000 
0002df62 l       .debug_str	00000000 
0002df73 l       .debug_str	00000000 
0003df37 l       .debug_str	00000000 
00015629 l       .debug_str	00000000 
0003df82 l       .debug_str	00000000 
0003e005 l       .debug_str	00000000 
0003e035 l       .debug_str	00000000 
0003e0bd l       .debug_str	00000000 
0003e132 l       .debug_str	00000000 
0003e185 l       .debug_str	00000000 
0003e211 l       .debug_str	00000000 
0003e249 l       .debug_str	00000000 
0003e29e l       .debug_str	00000000 
0003e2cf l       .debug_str	00000000 
0003e321 l       .debug_str	00000000 
0003e34f l       .debug_str	00000000 
0003e3a3 l       .debug_str	00000000 
0003e3c9 l       .debug_str	00000000 
00021ae2 l       .debug_str	00000000 
0003e400 l       .debug_str	00000000 
0003e44b l       .debug_str	00000000 
0003e467 l       .debug_str	00000000 
0003e4bd l       .debug_str	00000000 
00021c29 l       .debug_str	00000000 
0003e536 l       .debug_str	00000000 
0003e586 l       .debug_str	00000000 
0003e61d l       .debug_str	00000000 
0003e673 l       .debug_str	00000000 
0003e6ec l       .debug_str	00000000 
0003e704 l       .debug_str	00000000 
0003e79b l       .debug_str	00000000 
0003e7d4 l       .debug_str	00000000 
0003ea04 l       .debug_str	00000000 
0003e81d l       .debug_str	00000000 
0003d6e5 l       .debug_str	00000000 
0003e85a l       .debug_str	00000000 
0003e89e l       .debug_str	00000000 
0003e8e9 l       .debug_str	00000000 
0003e929 l       .debug_str	00000000 
0003e953 l       .debug_str	00000000 
0003e99c l       .debug_str	00000000 
0003e9ab l       .debug_str	00000000 
0003e9fc l       .debug_str	00000000 
0003ea13 l       .debug_str	00000000 
00048cb3 l       .debug_str	00000000 
0005a252 l       .debug_str	00000000 
0003ea7a l       .debug_str	00000000 
0003eadb l       .debug_str	00000000 
0003eafa l       .debug_str	00000000 
0003eb03 l       .debug_str	00000000 
0003eb0f l       .debug_str	00000000 
00003abf l       .debug_str	00000000 
0003eb15 l       .debug_str	00000000 
0003eb1f l       .debug_str	00000000 
0003eb51 l       .debug_str	00000000 
0003eb61 l       .debug_str	00000000 
0003ebe9 l       .debug_str	00000000 
0003ebf2 l       .debug_str	00000000 
0000d061 l       .debug_str	00000000 
0003ec5f l       .debug_str	00000000 
0003ec9e l       .debug_str	00000000 
000214da l       .debug_str	00000000 
000214e6 l       .debug_str	00000000 
000214f0 l       .debug_str	00000000 
0003ecad l       .debug_str	00000000 
0003ed1d l       .debug_str	00000000 
0003ed42 l       .debug_str	00000000 
0003edb1 l       .debug_str	00000000 
0003edd7 l       .debug_str	00000000 
0003ee46 l       .debug_str	00000000 
0003ee70 l       .debug_str	00000000 
0003eea7 l       .debug_str	00000000 
0003eeb2 l       .debug_str	00000000 
0003eeee l       .debug_str	00000000 
0003ef0d l       .debug_str	00000000 
0003ef47 l       .debug_str	00000000 
0003ef82 l       .debug_str	00000000 
0003efbe l       .debug_str	00000000 
000167c4 l       .debug_str	00000000 
0003efd8 l       .debug_str	00000000 
0003f014 l       .debug_str	00000000 
0003f021 l       .debug_str	00000000 
00057d0d l       .debug_str	00000000 
0003f05f l       .debug_str	00000000 
0003f0a5 l       .debug_str	00000000 
0003f12d l       .debug_str	00000000 
0003f146 l       .debug_str	00000000 
0003f1a0 l       .debug_str	00000000 
0003f1e6 l       .debug_str	00000000 
0003f1fe l       .debug_str	00000000 
0003f27e l       .debug_str	00000000 
0003f752 l       .debug_str	00000000 
0003f28e l       .debug_str	00000000 
0003f2cd l       .debug_str	00000000 
0003f30d l       .debug_str	00000000 
0003f397 l       .debug_str	00000000 
0003f3ae l       .debug_str	00000000 
0003f3ff l       .debug_str	00000000 
0003f40d l       .debug_str	00000000 
0003f412 l       .debug_str	00000000 
0003f46d l       .debug_str	00000000 
0003fe27 l       .debug_str	00000000 
0003f4c4 l       .debug_str	00000000 
0003f4f7 l       .debug_str	00000000 
0003f53e l       .debug_str	00000000 
0003f578 l       .debug_str	00000000 
0003f5a7 l       .debug_str	00000000 
0003f625 l       .debug_str	00000000 
0003f6a9 l       .debug_str	00000000 
0003f736 l       .debug_str	00000000 
0003f74b l       .debug_str	00000000 
0003f75b l       .debug_str	00000000 
0003f7a7 l       .debug_str	00000000 
0003f7ec l       .debug_str	00000000 
0003f883 l       .debug_str	00000000 
0003f89f l       .debug_str	00000000 
0003f8e6 l       .debug_str	00000000 
0003f914 l       .debug_str	00000000 
0003f94d l       .debug_str	00000000 
0003f96f l       .debug_str	00000000 
00006c5c l       .debug_str	00000000 
0003f9ed l       .debug_str	00000000 
0003fa6d l       .debug_str	00000000 
0003faac l       .debug_str	00000000 
0003fb36 l       .debug_str	00000000 
0003fb82 l       .debug_str	00000000 
0003fba0 l       .debug_str	00000000 
0003fbab l       .debug_str	00000000 
0003fc0d l       .debug_str	00000000 
0003fc64 l       .debug_str	00000000 
0003fcf1 l       .debug_str	00000000 
0003fd3d l       .debug_str	00000000 
0003fdd4 l       .debug_str	00000000 
0003fe1e l       .debug_str	00000000 
0003fe3a l       .debug_str	00000000 
0003fe94 l       .debug_str	00000000 
0003fe9d l       .debug_str	00000000 
0003fefc l       .debug_str	00000000 
0003ff53 l       .debug_str	00000000 
0003ffac l       .debug_str	00000000 
0003ffc1 l       .debug_str	00000000 
0004000e l       .debug_str	00000000 
00040059 l       .debug_str	00000000 
0004006c l       .debug_str	00000000 
0000b97b l       .debug_str	00000000 
00006c0e l       .debug_str	00000000 
000400b7 l       .debug_str	00000000 
000400cc l       .debug_str	00000000 
000400d8 l       .debug_str	00000000 
0004011d l       .debug_str	00000000 
00040176 l       .debug_str	00000000 
0004018b l       .debug_str	00000000 
000401d8 l       .debug_str	00000000 
00040223 l       .debug_str	00000000 
00040236 l       .debug_str	00000000 
00040281 l       .debug_str	00000000 
00040294 l       .debug_str	00000000 
000402f8 l       .debug_str	00000000 
00040331 l       .debug_str	00000000 
0004035d l       .debug_str	00000000 
0005dd82 l       .debug_str	00000000 
00059147 l       .debug_str	00000000 
000403dc l       .debug_str	00000000 
000403e2 l       .debug_str	00000000 
000403eb l       .debug_str	00000000 
00040423 l       .debug_str	00000000 
00040440 l       .debug_str	00000000 
0004047c l       .debug_str	00000000 
00040499 l       .debug_str	00000000 
000404f5 l       .debug_str	00000000 
0004052d l       .debug_str	00000000 
00040589 l       .debug_str	00000000 
00024de5 l       .debug_str	00000000 
000405c1 l       .debug_str	00000000 
000405ff l       .debug_str	00000000 
0004061b l       .debug_str	00000000 
00040671 l       .debug_str	00000000 
000406d8 l       .debug_str	00000000 
00040710 l       .debug_str	00000000 
0004071c l       .debug_str	00000000 
00040783 l       .debug_str	00000000 
000407c2 l       .debug_str	00000000 
000407d3 l       .debug_str	00000000 
0004080c l       .debug_str	00000000 
0004e7b4 l       .debug_str	00000000 
00040827 l       .debug_str	00000000 
00040863 l       .debug_str	00000000 
0004085c l       .debug_str	00000000 
0004086c l       .debug_str	00000000 
0004087e l       .debug_str	00000000 
000408c9 l       .debug_str	00000000 
000408e1 l       .debug_str	00000000 
000408eb l       .debug_str	00000000 
00040902 l       .debug_str	00000000 
00040911 l       .debug_str	00000000 
00040953 l       .debug_str	00000000 
0004096c l       .debug_str	00000000 
000409e0 l       .debug_str	00000000 
000409ef l       .debug_str	00000000 
00040a28 l       .debug_str	00000000 
00040a3e l       .debug_str	00000000 
00040a7e l       .debug_str	00000000 
00040a89 l       .debug_str	00000000 
00040b08 l       .debug_str	00000000 
000588c0 l       .debug_str	00000000 
00040b27 l       .debug_str	00000000 
00040b3c l       .debug_str	00000000 
00040b46 l       .debug_str	00000000 
00007471 l       .debug_str	00000000 
00040b4b l       .debug_str	00000000 
00040b7c l       .debug_str	00000000 
00040b8f l       .debug_str	00000000 
00040b99 l       .debug_str	00000000 
00040bb6 l       .debug_str	00000000 
00040bf1 l       .debug_str	00000000 
00040c26 l       .debug_str	00000000 
00040c57 l       .debug_str	00000000 
00040c6b l       .debug_str	00000000 
00040c76 l       .debug_str	00000000 
00040c94 l       .debug_str	00000000 
00040ccf l       .debug_str	00000000 
00040d05 l       .debug_str	00000000 
00040d36 l       .debug_str	00000000 
00040d4a l       .debug_str	00000000 
00040d55 l       .debug_str	00000000 
00040d73 l       .debug_str	00000000 
00040dae l       .debug_str	00000000 
00040de4 l       .debug_str	00000000 
00040e15 l       .debug_str	00000000 
00040e29 l       .debug_str	00000000 
00040e34 l       .debug_str	00000000 
00040e52 l       .debug_str	00000000 
00040e8d l       .debug_str	00000000 
00040ec3 l       .debug_str	00000000 
00040ef4 l       .debug_str	00000000 
00045741 l       .debug_str	00000000 
00040f09 l       .debug_str	00000000 
00040f15 l       .debug_str	00000000 
00040f34 l       .debug_str	00000000 
00040f6f l       .debug_str	00000000 
00040fa6 l       .debug_str	00000000 
00040fd7 l       .debug_str	00000000 
00040fea l       .debug_str	00000000 
00040ff4 l       .debug_str	00000000 
00041011 l       .debug_str	00000000 
0004104c l       .debug_str	00000000 
00041081 l       .debug_str	00000000 
000410b2 l       .debug_str	00000000 
000410c6 l       .debug_str	00000000 
000410d1 l       .debug_str	00000000 
000410ef l       .debug_str	00000000 
0004112a l       .debug_str	00000000 
00041160 l       .debug_str	00000000 
00041191 l       .debug_str	00000000 
000411a5 l       .debug_str	00000000 
00041214 l       .debug_str	00000000 
0004124f l       .debug_str	00000000 
00041298 l       .debug_str	00000000 
000412dd l       .debug_str	00000000 
00041339 l       .debug_str	00000000 
00041382 l       .debug_str	00000000 
000413c7 l       .debug_str	00000000 
00041423 l       .debug_str	00000000 
0004146c l       .debug_str	00000000 
000414b1 l       .debug_str	00000000 
0004150d l       .debug_str	00000000 
00041518 l       .debug_str	00000000 
00041536 l       .debug_str	00000000 
00041571 l       .debug_str	00000000 
000415a7 l       .debug_str	00000000 
000415d8 l       .debug_str	00000000 
000415ec l       .debug_str	00000000 
000415f7 l       .debug_str	00000000 
00041615 l       .debug_str	00000000 
00041650 l       .debug_str	00000000 
00041686 l       .debug_str	00000000 
000416f5 l       .debug_str	00000000 
00041730 l       .debug_str	00000000 
00041761 l       .debug_str	00000000 
00041776 l       .debug_str	00000000 
0004177b l       .debug_str	00000000 
00041787 l       .debug_str	00000000 
000417a6 l       .debug_str	00000000 
000417e1 l       .debug_str	00000000 
00041818 l       .debug_str	00000000 
00041887 l       .debug_str	00000000 
000418c3 l       .debug_str	00000000 
00014e17 l       .debug_str	00000000 
0004190c l       .debug_str	00000000 
00041917 l       .debug_str	00000000 
0004195e l       .debug_str	00000000 
00041968 l       .debug_str	00000000 
000419ea l       .debug_str	00000000 
00041a07 l       .debug_str	00000000 
00003eb1 l       .debug_str	00000000 
00041a62 l       .debug_str	00000000 
00041abc l       .debug_str	00000000 
00041ac9 l       .debug_str	00000000 
00041b3b l       .debug_str	00000000 
00041b9f l       .debug_str	00000000 
00041baa l       .debug_str	00000000 
00041c23 l       .debug_str	00000000 
00041c2f l       .debug_str	00000000 
00041cab l       .debug_str	00000000 
00041cb1 l       .debug_str	00000000 
00041cb8 l       .debug_str	00000000 
00041cf4 l       .debug_str	00000000 
00006cad l       .debug_str	00000000 
00041d3d l       .debug_str	00000000 
00041d81 l       .debug_str	00000000 
00041dcc l       .debug_str	00000000 
00041e0b l       .debug_str	00000000 
00041e30 l       .debug_str	00000000 
00041e86 l       .debug_str	00000000 
00041ef4 l       .debug_str	00000000 
00041f74 l       .debug_str	00000000 
00041fe1 l       .debug_str	00000000 
0004206c l       .debug_str	00000000 
000420e0 l       .debug_str	00000000 
00042120 l       .debug_str	00000000 
000421a1 l       .debug_str	00000000 
000421e2 l       .debug_str	00000000 
00042246 l       .debug_str	00000000 
000422f5 l       .debug_str	00000000 
0004233f l       .debug_str	00000000 
0004238c l       .debug_str	00000000 
000423d2 l       .debug_str	00000000 
000423dc l       .debug_str	00000000 
00042415 l       .debug_str	00000000 
00042444 l       .debug_str	00000000 
000424a5 l       .debug_str	00000000 
000424d4 l       .debug_str	00000000 
00042511 l       .debug_str	00000000 
000425a0 l       .debug_str	00000000 
000425d5 l       .debug_str	00000000 
0004265b l       .debug_str	00000000 
000426e1 l       .debug_str	00000000 
00042735 l       .debug_str	00000000 
000427be l       .debug_str	00000000 
00006b25 l       .debug_str	00000000 
0004280c l       .debug_str	00000000 
0004289a l       .debug_str	00000000 
000428ee l       .debug_str	00000000 
0004292d l       .debug_str	00000000 
00042978 l       .debug_str	00000000 
000429fa l       .debug_str	00000000 
00042a16 l       .debug_str	00000000 
00042a6f l       .debug_str	00000000 
00042ac8 l       .debug_str	00000000 
00042b05 l       .debug_str	00000000 
00042b46 l       .debug_str	00000000 
00042ba7 l       .debug_str	00000000 
00042c18 l       .debug_str	00000000 
00042c48 l       .debug_str	00000000 
00042c8e l       .debug_str	00000000 
00042d00 l       .debug_str	00000000 
00042d94 l       .debug_str	00000000 
00042db8 l       .debug_str	00000000 
00042e34 l       .debug_str	00000000 
00042e6e l       .debug_str	00000000 
00042eb0 l       .debug_str	00000000 
00042f60 l       .debug_str	00000000 
00042f9f l       .debug_str	00000000 
00043042 l       .debug_str	00000000 
0004309e l       .debug_str	00000000 
000430fb l       .debug_str	00000000 
000431a6 l       .debug_str	00000000 
000431df l       .debug_str	00000000 
0004325b l       .debug_str	00000000 
00043293 l       .debug_str	00000000 
0004329f l       .debug_str	00000000 
000432dc l       .debug_str	00000000 
00043334 l       .debug_str	00000000 
00043354 l       .debug_str	00000000 
000433ad l       .debug_str	00000000 
00043406 l       .debug_str	00000000 
0004345f l       .debug_str	00000000 
000434b9 l       .debug_str	00000000 
000434ef l       .debug_str	00000000 
000434ff l       .debug_str	00000000 
0004350e l       .debug_str	00000000 
00043517 l       .debug_str	00000000 
0004354e l       .debug_str	00000000 
0004358a l       .debug_str	00000000 
0004359a l       .debug_str	00000000 
000435f6 l       .debug_str	00000000 
00043658 l       .debug_str	00000000 
00036867 l       .debug_str	00000000 
000436a2 l       .debug_str	00000000 
000436dd l       .debug_str	00000000 
00043702 l       .debug_str	00000000 
00043761 l       .debug_str	00000000 
000437ab l       .debug_str	00000000 
000437e6 l       .debug_str	00000000 
0004380b l       .debug_str	00000000 
0004386a l       .debug_str	00000000 
000438d3 l       .debug_str	00000000 
000438dc l       .debug_str	00000000 
00043913 l       .debug_str	00000000 
0004396f l       .debug_str	00000000 
000439d1 l       .debug_str	00000000 
00043a30 l       .debug_str	00000000 
00043a8f l       .debug_str	00000000 
00043ac5 l       .debug_str	00000000 
00043ad6 l       .debug_str	00000000 
00043ae6 l       .debug_str	00000000 
00043af0 l       .debug_str	00000000 
00043b28 l       .debug_str	00000000 
00043b85 l       .debug_str	00000000 
00043be8 l       .debug_str	00000000 
00043c33 l       .debug_str	00000000 
00043c6e l       .debug_str	00000000 
00043c94 l       .debug_str	00000000 
00043cf4 l       .debug_str	00000000 
00043d3f l       .debug_str	00000000 
00043d7a l       .debug_str	00000000 
00043da0 l       .debug_str	00000000 
00043e00 l       .debug_str	00000000 
00043e36 l       .debug_str	00000000 
00043e47 l       .debug_str	00000000 
00043e57 l       .debug_str	00000000 
00043e61 l       .debug_str	00000000 
00043e99 l       .debug_str	00000000 
00043ef6 l       .debug_str	00000000 
00043f59 l       .debug_str	00000000 
00043fb9 l       .debug_str	00000000 
00044019 l       .debug_str	00000000 
0004404f l       .debug_str	00000000 
00044060 l       .debug_str	00000000 
00044070 l       .debug_str	00000000 
0004407a l       .debug_str	00000000 
000440b2 l       .debug_str	00000000 
0004410f l       .debug_str	00000000 
00044172 l       .debug_str	00000000 
000441bd l       .debug_str	00000000 
000441f8 l       .debug_str	00000000 
0004421e l       .debug_str	00000000 
0004427e l       .debug_str	00000000 
000442c9 l       .debug_str	00000000 
00044304 l       .debug_str	00000000 
0004432a l       .debug_str	00000000 
0004438a l       .debug_str	00000000 
000443c0 l       .debug_str	00000000 
000443d1 l       .debug_str	00000000 
000443e1 l       .debug_str	00000000 
000443eb l       .debug_str	00000000 
00044423 l       .debug_str	00000000 
00044480 l       .debug_str	00000000 
000444e3 l       .debug_str	00000000 
00044543 l       .debug_str	00000000 
000445a3 l       .debug_str	00000000 
000445d9 l       .debug_str	00000000 
00007432 l       .debug_str	00000000 
000445ec l       .debug_str	00000000 
000445fe l       .debug_str	00000000 
0004460a l       .debug_str	00000000 
00044645 l       .debug_str	00000000 
000446a4 l       .debug_str	00000000 
00044709 l       .debug_str	00000000 
0004476b l       .debug_str	00000000 
000447a6 l       .debug_str	00000000 
000447ce l       .debug_str	00000000 
00044830 l       .debug_str	00000000 
0000a118 l       .debug_str	00000000 
0000cb50 l       .debug_str	00000000 
0000cba0 l       .debug_str	00000000 
00044866 l       .debug_str	00000000 
000448a1 l       .debug_str	00000000 
000448e1 l       .debug_str	00000000 
000448fe l       .debug_str	00000000 
00044942 l       .debug_str	00000000 
00044963 l       .debug_str	00000000 
000449a3 l       .debug_str	00000000 
000449c0 l       .debug_str	00000000 
00044a04 l       .debug_str	00000000 
00044a25 l       .debug_str	00000000 
00044a87 l       .debug_str	00000000 
00044aee l       .debug_str	00000000 
00044b29 l       .debug_str	00000000 
00044b4c l       .debug_str	00000000 
00044bb2 l       .debug_str	00000000 
00044bed l       .debug_str	00000000 
00044c0f l       .debug_str	00000000 
00044c4a l       .debug_str	00000000 
00044c6e l       .debug_str	00000000 
00044ca9 l       .debug_str	00000000 
00044ccc l       .debug_str	00000000 
00044d07 l       .debug_str	00000000 
00044d2b l       .debug_str	00000000 
00044d66 l       .debug_str	00000000 
00044d89 l       .debug_str	00000000 
00044dc4 l       .debug_str	00000000 
00044de8 l       .debug_str	00000000 
00044e33 l       .debug_str	00000000 
00044e95 l       .debug_str	00000000 
00044ed0 l       .debug_str	00000000 
00044ef3 l       .debug_str	00000000 
00044f3e l       .debug_str	00000000 
00044f79 l       .debug_str	00000000 
00044f9f l       .debug_str	00000000 
00044fda l       .debug_str	00000000 
00045000 l       .debug_str	00000000 
00045051 l       .debug_str	00000000 
0004509f l       .debug_str	00000000 
000450ea l       .debug_str	00000000 
0004511d l       .debug_str	00000000 
00045158 l       .debug_str	00000000 
0004517d l       .debug_str	00000000 
00045209 l       .debug_str	00000000 
0004523d l       .debug_str	00000000 
000452b9 l       .debug_str	00000000 
000452fe l       .debug_str	00000000 
0004534a l       .debug_str	00000000 
000453ad l       .debug_str	00000000 
000453e8 l       .debug_str	00000000 
0004540c l       .debug_str	00000000 
00045447 l       .debug_str	00000000 
0004546e l       .debug_str	00000000 
000454ba l       .debug_str	00000000 
000454f5 l       .debug_str	00000000 
0004551c l       .debug_str	00000000 
00045567 l       .debug_str	00000000 
000455b3 l       .debug_str	00000000 
000455ff l       .debug_str	00000000 
00045630 l       .debug_str	00000000 
00045638 l       .debug_str	00000000 
0001e166 l       .debug_str	00000000 
00045684 l       .debug_str	00000000 
000456b9 l       .debug_str	00000000 
000456e7 l       .debug_str	00000000 
000456f0 l       .debug_str	00000000 
0004573e l       .debug_str	00000000 
00045746 l       .debug_str	00000000 
000457ab l       .debug_str	00000000 
000457fe l       .debug_str	00000000 
0004585e l       .debug_str	00000000 
0004587d l       .debug_str	00000000 
000458e0 l       .debug_str	00000000 
00045902 l       .debug_str	00000000 
0004594d l       .debug_str	00000000 
000459b2 l       .debug_str	00000000 
000459d4 l       .debug_str	00000000 
00045a3d l       .debug_str	00000000 
00045a7a l       .debug_str	00000000 
00045ae3 l       .debug_str	00000000 
00045b73 l       .debug_str	00000000 
00015f59 l       .debug_str	00000000 
00045bd3 l       .debug_str	00000000 
00045c36 l       .debug_str	00000000 
00045c9f l       .debug_str	00000000 
00045cd2 l       .debug_str	00000000 
00045d1a l       .debug_str	00000000 
00045d94 l       .debug_str	00000000 
00045de5 l       .debug_str	00000000 
00045e3c l       .debug_str	00000000 
00008277 l       .debug_str	00000000 
00045e84 l       .debug_str	00000000 
00045ee2 l       .debug_str	00000000 
00045eff l       .debug_str	00000000 
00045f6b l       .debug_str	00000000 
00045fb0 l       .debug_str	00000000 
00045ffe l       .debug_str	00000000 
00046046 l       .debug_str	00000000 
00046050 l       .debug_str	00000000 
000460be l       .debug_str	00000000 
000460fa l       .debug_str	00000000 
0004611d l       .debug_str	00000000 
0004618d l       .debug_str	00000000 
000461d5 l       .debug_str	00000000 
000461de l       .debug_str	00000000 
0004623b l       .debug_str	00000000 
0004629e l       .debug_str	00000000 
000462fe l       .debug_str	00000000 
0004635e l       .debug_str	00000000 
000463ba l       .debug_str	00000000 
00046419 l       .debug_str	00000000 
00046479 l       .debug_str	00000000 
00046494 l       .debug_str	00000000 
000081d5 l       .debug_str	00000000 
000464e8 l       .debug_str	00000000 
00046566 l       .debug_str	00000000 
00046590 l       .debug_str	00000000 
000465f2 l       .debug_str	00000000 
00046653 l       .debug_str	00000000 
000466ad l       .debug_str	00000000 
00046712 l       .debug_str	00000000 
00046764 l       .debug_str	00000000 
000467ac l       .debug_str	00000000 
000467c7 l       .debug_str	00000000 
00046841 l       .debug_str	00000000 
0004688e l       .debug_str	00000000 
00046908 l       .debug_str	00000000 
00046955 l       .debug_str	00000000 
000469a9 l       .debug_str	00000000 
000469fb l       .debug_str	00000000 
00046a63 l       .debug_str	00000000 
00046ac3 l       .debug_str	00000000 
00046b1d l       .debug_str	00000000 
00046b7c l       .debug_str	00000000 
00046bd6 l       .debug_str	00000000 
00046c33 l       .debug_str	00000000 
0001675a l       .debug_str	00000000 
00046c71 l       .debug_str	00000000 
000177d3 l       .debug_str	00000000 
00046cac l       .debug_str	00000000 
00046d1e l       .debug_str	00000000 
00046df1 l       .debug_str	00000000 
00008395 l       .debug_str	00000000 
00046e39 l       .debug_str	00000000 
00046e87 l       .debug_str	00000000 
00046e91 l       .debug_str	00000000 
00046ed9 l       .debug_str	00000000 
00046ee5 l       .debug_str	00000000 
00046f59 l       .debug_str	00000000 
00046f64 l       .debug_str	00000000 
00046fa0 l       .debug_str	00000000 
00046fc7 l       .debug_str	00000000 
00047018 l       .debug_str	00000000 
00047025 l       .debug_str	00000000 
00047033 l       .debug_str	00000000 
00047046 l       .debug_str	00000000 
00047051 l       .debug_str	00000000 
00047093 l       .debug_str	00000000 
000470a8 l       .debug_str	00000000 
00047112 l       .debug_str	00000000 
0004716f l       .debug_str	00000000 
000471cf l       .debug_str	00000000 
0004722f l       .debug_str	00000000 
000472a1 l       .debug_str	00000000 
000472ee l       .debug_str	00000000 
0004734d l       .debug_str	00000000 
000473a7 l       .debug_str	00000000 
0004741a l       .debug_str	00000000 
00047427 l       .debug_str	00000000 
00047487 l       .debug_str	00000000 
000474a6 l       .debug_str	00000000 
0004750e l       .debug_str	00000000 
00047529 l       .debug_str	00000000 
00047581 l       .debug_str	00000000 
000475cb l       .debug_str	00000000 
0004762f l       .debug_str	00000000 
0004764e l       .debug_str	00000000 
000476b0 l       .debug_str	00000000 
00047716 l       .debug_str	00000000 
00047796 l       .debug_str	00000000 
000477e5 l       .debug_str	00000000 
0004785b l       .debug_str	00000000 
000478d1 l       .debug_str	00000000 
000479a6 l       .debug_str	00000000 
00047a03 l       .debug_str	00000000 
00047a61 l       .debug_str	00000000 
00047ae1 l       .debug_str	00000000 
00047b50 l       .debug_str	00000000 
00047bce l       .debug_str	00000000 
00047c21 l       .debug_str	00000000 
00047c86 l       .debug_str	00000000 
00047ce6 l       .debug_str	00000000 
00047d54 l       .debug_str	00000000 
00047dec l       .debug_str	00000000 
00047e7b l       .debug_str	00000000 
00047f09 l       .debug_str	00000000 
00047f97 l       .debug_str	00000000 
000480a7 l       .debug_str	00000000 
0004811b l       .debug_str	00000000 
0004815d l       .debug_str	00000000 
000481a6 l       .debug_str	00000000 
00048200 l       .debug_str	00000000 
00048279 l       .debug_str	00000000 
00048286 l       .debug_str	00000000 
0004828b l       .debug_str	00000000 
000482f7 l       .debug_str	00000000 
0004833e l       .debug_str	00000000 
000483c8 l       .debug_str	00000000 
000483e7 l       .debug_str	00000000 
00048471 l       .debug_str	00000000 
00048495 l       .debug_str	00000000 
000484d9 l       .debug_str	00000000 
0004853d l       .debug_str	00000000 
00048581 l       .debug_str	00000000 
000485f3 l       .debug_str	00000000 
000486b1 l       .debug_str	00000000 
00048713 l       .debug_str	00000000 
000487ab l       .debug_str	00000000 
0004885a l       .debug_str	00000000 
000488f0 l       .debug_str	00000000 
00048983 l       .debug_str	00000000 
000489c7 l       .debug_str	00000000 
00048a1a l       .debug_str	00000000 
00048a9e l       .debug_str	00000000 
00048b2c l       .debug_str	00000000 
00048b80 l       .debug_str	00000000 
00048b91 l       .debug_str	00000000 
00048c16 l       .debug_str	00000000 
00048ca2 l       .debug_str	00000000 
00048cab l       .debug_str	00000000 
00048cb8 l       .debug_str	00000000 
00048d0f l       .debug_str	00000000 
00048d94 l       .debug_str	00000000 
00048de6 l       .debug_str	00000000 
00048df5 l       .debug_str	00000000 
00048e3c l       .debug_str	00000000 
00048ea0 l       .debug_str	00000000 
00048ec1 l       .debug_str	00000000 
00048f41 l       .debug_str	00000000 
00048fac l       .debug_str	00000000 
0004902a l       .debug_str	00000000 
00049079 l       .debug_str	00000000 
000490d8 l       .debug_str	00000000 
00049170 l       .debug_str	00000000 
00049216 l       .debug_str	00000000 
000492ac l       .debug_str	00000000 
00049336 l       .debug_str	00000000 
000493ac l       .debug_str	00000000 
000493f5 l       .debug_str	00000000 
00049451 l       .debug_str	00000000 
000494cc l       .debug_str	00000000 
00049538 l       .debug_str	00000000 
000495c2 l       .debug_str	00000000 
00049606 l       .debug_str	00000000 
00049667 l       .debug_str	00000000 
000496ab l       .debug_str	00000000 
0004972f l       .debug_str	00000000 
000497b9 l       .debug_str	00000000 
0004980b l       .debug_str	00000000 
00049889 l       .debug_str	00000000 
0004990e l       .debug_str	00000000 
00049965 l       .debug_str	00000000 
000499e6 l       .debug_str	00000000 
00049aa4 l       .debug_str	00000000 
00049b03 l       .debug_str	00000000 
00049b66 l       .debug_str	00000000 
00049b8b l       .debug_str	00000000 
00049bef l       .debug_str	00000000 
00049c10 l       .debug_str	00000000 
00049c90 l       .debug_str	00000000 
00049cfb l       .debug_str	00000000 
00049d79 l       .debug_str	00000000 
00049dc8 l       .debug_str	00000000 
00049e27 l       .debug_str	00000000 
00049ebf l       .debug_str	00000000 
00049f65 l       .debug_str	00000000 
00049ffb l       .debug_str	00000000 
0004a085 l       .debug_str	00000000 
0004a0fb l       .debug_str	00000000 
0004a144 l       .debug_str	00000000 
0004a1a0 l       .debug_str	00000000 
0004a21b l       .debug_str	00000000 
0004a287 l       .debug_str	00000000 
0004a311 l       .debug_str	00000000 
0004a355 l       .debug_str	00000000 
0004a3b6 l       .debug_str	00000000 
0004a3fa l       .debug_str	00000000 
0004a47e l       .debug_str	00000000 
0004a508 l       .debug_str	00000000 
0004a586 l       .debug_str	00000000 
0004a60b l       .debug_str	00000000 
0004a662 l       .debug_str	00000000 
0004a6e3 l       .debug_str	00000000 
0004a7a1 l       .debug_str	00000000 
0004a800 l       .debug_str	00000000 
0004a833 l       .debug_str	00000000 
0004a866 l       .debug_str	00000000 
0004a899 l       .debug_str	00000000 
0004a8cc l       .debug_str	00000000 
0004a8ff l       .debug_str	00000000 
0004a932 l       .debug_str	00000000 
0004a965 l       .debug_str	00000000 
0004a9b9 l       .debug_str	00000000 
0004a9e7 l       .debug_str	00000000 
0004aa3b l       .debug_str	00000000 
0005d418 l       .debug_str	00000000 
00001676 l       .debug_str	00000000 
0004aa4e l       .debug_str	00000000 
0004aa52 l       .debug_str	00000000 
0004aa56 l       .debug_str	00000000 
0004aa5a l       .debug_str	00000000 
0004aa61 l       .debug_str	00000000 
0004aa66 l       .debug_str	00000000 
0004aa96 l       .debug_str	00000000 
0004aae8 l       .debug_str	00000000 
0004ab29 l       .debug_str	00000000 
0004ab36 l       .debug_str	00000000 
0004ab75 l       .debug_str	00000000 
0004ab80 l       .debug_str	00000000 
0004abbc l       .debug_str	00000000 
0004abca l       .debug_str	00000000 
0004abfe l       .debug_str	00000000 
0004ac39 l       .debug_str	00000000 
0004ac77 l       .debug_str	00000000 
0004ac85 l       .debug_str	00000000 
0004acbe l       .debug_str	00000000 
0004acc8 l       .debug_str	00000000 
0004ad04 l       .debug_str	00000000 
0004ad60 l       .debug_str	00000000 
0004ad67 l       .debug_str	00000000 
0004adc5 l       .debug_str	00000000 
0004adce l       .debug_str	00000000 
0004ae35 l       .debug_str	00000000 
0004ae46 l       .debug_str	00000000 
0004aea3 l       .debug_str	00000000 
0004af02 l       .debug_str	00000000 
0004af5e l       .debug_str	00000000 
0004afbc l       .debug_str	00000000 
0004b023 l       .debug_str	00000000 
0004b080 l       .debug_str	00000000 
0004b0df l       .debug_str	00000000 
0004b118 l       .debug_str	00000000 
0004b122 l       .debug_str	00000000 
0004b18a l       .debug_str	00000000 
0004b1bd l       .debug_str	00000000 
0004b1c7 l       .debug_str	00000000 
0004b1fd l       .debug_str	00000000 
0004b209 l       .debug_str	00000000 
0004b240 l       .debug_str	00000000 
0004b24d l       .debug_str	00000000 
0004b291 l       .debug_str	00000000 
0004b2ab l       .debug_str	00000000 
0004b31c l       .debug_str	00000000 
0004b32f l       .debug_str	00000000 
0004b3a0 l       .debug_str	00000000 
0004b3e3 l       .debug_str	00000000 
0004b3ed l       .debug_str	00000000 
0004b437 l       .debug_str	00000000 
0004b47e l       .debug_str	00000000 
0004b4cb l       .debug_str	00000000 
0004b515 l       .debug_str	00000000 
0004b547 l       .debug_str	00000000 
0004b550 l       .debug_str	00000000 
0004b584 l       .debug_str	00000000 
0004b5bd l       .debug_str	00000000 
0004b5f9 l       .debug_str	00000000 
0004b60b l       .debug_str	00000000 
0004b64c l       .debug_str	00000000 
0004b6ab l       .debug_str	00000000 
0004b6dc l       .debug_str	00000000 
0004b6f2 l       .debug_str	00000000 
0004b727 l       .debug_str	00000000 
0004b784 l       .debug_str	00000000 
0004b7e8 l       .debug_str	00000000 
0004b847 l       .debug_str	00000000 
0004b8a7 l       .debug_str	00000000 
0004b905 l       .debug_str	00000000 
00021dd5 l       .debug_str	00000000 
0004b96a l       .debug_str	00000000 
0004b9b0 l       .debug_str	00000000 
0004b9f0 l       .debug_str	00000000 
0004ba78 l       .debug_str	00000000 
00059e4e l       .debug_str	00000000 
0004baff l       .debug_str	00000000 
0004bb32 l       .debug_str	00000000 
0004bba6 l       .debug_str	00000000 
0004bc1f l       .debug_str	00000000 
0004bc93 l       .debug_str	00000000 
0004bcf2 l       .debug_str	00000000 
0004bd4f l       .debug_str	00000000 
0004bda9 l       .debug_str	00000000 
0004be05 l       .debug_str	00000000 
0004be62 l       .debug_str	00000000 
0004bec1 l       .debug_str	00000000 
0004bf29 l       .debug_str	00000000 
0004bf93 l       .debug_str	00000000 
0004bffc l       .debug_str	00000000 
0004c05a l       .debug_str	00000000 
0004c0cc l       .debug_str	00000000 
0004c0d0 l       .debug_str	00000000 
0004c143 l       .debug_str	00000000 
0004c1a1 l       .debug_str	00000000 
0004c1fd l       .debug_str	00000000 
0004c26e l       .debug_str	00000000 
0004c2e4 l       .debug_str	00000000 
0004c31b l       .debug_str	00000000 
0004c377 l       .debug_str	00000000 
0004c3cb l       .debug_str	00000000 
0004c429 l       .debug_str	00000000 
0004c495 l       .debug_str	00000000 
0004c4ea l       .debug_str	00000000 
0004c51d l       .debug_str	00000000 
0004c52b l       .debug_str	00000000 
0004c563 l       .debug_str	00000000 
0004c576 l       .debug_str	00000000 
0004c5ab l       .debug_str	00000000 
0004c5e1 l       .debug_str	00000000 
0004c63c l       .debug_str	00000000 
0004c66f l       .debug_str	00000000 
0004c676 l       .debug_str	00000000 
0004c6b8 l       .debug_str	00000000 
0004c6e9 l       .debug_str	00000000 
0004c71a l       .debug_str	00000000 
0004c74d l       .debug_str	00000000 
0004c754 l       .debug_str	00000000 
0004c781 l       .debug_str	00000000 
0004c7bc l       .debug_str	00000000 
0004c7cf l       .debug_str	00000000 
0004c800 l       .debug_str	00000000 
0004c80a l       .debug_str	00000000 
0004c86b l       .debug_str	00000000 
0004c8d3 l       .debug_str	00000000 
0004c910 l       .debug_str	00000000 
0004c95e l       .debug_str	00000000 
0004c99a l       .debug_str	00000000 
0004c9d6 l       .debug_str	00000000 
0004ca0f l       .debug_str	00000000 
0004ca49 l       .debug_str	00000000 
0004ca82 l       .debug_str	00000000 
0004cab9 l       .debug_str	00000000 
0004caf2 l       .debug_str	00000000 
0004cb2c l       .debug_str	00000000 
0004cb72 l       .debug_str	00000000 
0004cb95 l       .debug_str	00000000 
0004cbdb l       .debug_str	00000000 
0004cbfe l       .debug_str	00000000 
0004cc47 l       .debug_str	00000000 
0004cc6d l       .debug_str	00000000 
0004ccb6 l       .debug_str	00000000 
0004ccdc l       .debug_str	00000000 
0004cd26 l       .debug_str	00000000 
0004cd4d l       .debug_str	00000000 
0004cd97 l       .debug_str	00000000 
0004cdbe l       .debug_str	00000000 
0004ce0b l       .debug_str	00000000 
0004ce35 l       .debug_str	00000000 
0004ce82 l       .debug_str	00000000 
0004ceac l       .debug_str	00000000 
0004cedf l       .debug_str	00000000 
0004cf0b l       .debug_str	00000000 
0004cf61 l       .debug_str	00000000 
0004cf8c l       .debug_str	00000000 
0004cfe4 l       .debug_str	00000000 
0004d03a l       .debug_str	00000000 
0004d073 l       .debug_str	00000000 
0004d07e l       .debug_str	00000000 
0000bbb5 l       .debug_str	00000000 
0004d0b7 l       .debug_str	00000000 
0004d0de l       .debug_str	00000000 
0004d117 l       .debug_str	00000000 
0004d15e l       .debug_str	00000000 
0004d16b l       .debug_str	00000000 
0004d385 l       .debug_str	00000000 
0004d19a l       .debug_str	00000000 
0004d1da l       .debug_str	00000000 
0004d1ee l       .debug_str	00000000 
0004d230 l       .debug_str	00000000 
0004d261 l       .debug_str	00000000 
0004d291 l       .debug_str	00000000 
0004d2c2 l       .debug_str	00000000 
0004d2f3 l       .debug_str	00000000 
0004d32a l       .debug_str	00000000 
0004d335 l       .debug_str	00000000 
0004d375 l       .debug_str	00000000 
0004d389 l       .debug_str	00000000 
0004d3c5 l       .debug_str	00000000 
0004d3d5 l       .debug_str	00000000 
0004d40a l       .debug_str	00000000 
0004d414 l       .debug_str	00000000 
0004d449 l       .debug_str	00000000 
0004d453 l       .debug_str	00000000 
0004d4a8 l       .debug_str	00000000 
0004d4f0 l       .debug_str	00000000 
0004d536 l       .debug_str	00000000 
0004d57d l       .debug_str	00000000 
0004d5c6 l       .debug_str	00000000 
0004d618 l       .debug_str	00000000 
0004d66a l       .debug_str	00000000 
0004d708 l       .debug_str	00000000 
0004d73a l       .debug_str	00000000 
0004d773 l       .debug_str	00000000 
0004d788 l       .debug_str	00000000 
0004d7c3 l       .debug_str	00000000 
0004d7da l       .debug_str	00000000 
0004d818 l       .debug_str	00000000 
0004d832 l       .debug_str	00000000 
0004d894 l       .debug_str	00000000 
0004d8b9 l       .debug_str	00000000 
0004d914 l       .debug_str	00000000 
0004d923 l       .debug_str	00000000 
0004d998 l       .debug_str	00000000 
0004d9b5 l       .debug_str	00000000 
0004d9ef l       .debug_str	00000000 
0004da2c l       .debug_str	00000000 
0004da37 l       .debug_str	00000000 
0004da6f l       .debug_str	00000000 
0004da76 l       .debug_str	00000000 
0004daf5 l       .debug_str	00000000 
0004db55 l       .debug_str	00000000 
0004dbb3 l       .debug_str	00000000 
0004dc11 l       .debug_str	00000000 
0004dc49 l       .debug_str	00000000 
0004dc7e l       .debug_str	00000000 
0004dca9 l       .debug_str	00000000 
0004dcb3 l       .debug_str	00000000 
0004dce3 l       .debug_str	00000000 
0004dcf1 l       .debug_str	00000000 
0004dd4a l       .debug_str	00000000 
0004dd9d l       .debug_str	00000000 
0004de19 l       .debug_str	00000000 
0004de7d l       .debug_str	00000000 
0004dee1 l       .debug_str	00000000 
0004df17 l       .debug_str	00000000 
0004df2b l       .debug_str	00000000 
0004df6c l       .debug_str	00000000 
0004df84 l       .debug_str	00000000 
0004e038 l       .debug_str	00000000 
0004e06b l       .debug_str	00000000 
0004e07c l       .debug_str	00000000 
0004e0c2 l       .debug_str	00000000 
0004e0cf l       .debug_str	00000000 
0004e10c l       .debug_str	00000000 
0004e150 l       .debug_str	00000000 
0004e191 l       .debug_str	00000000 
0004e1d3 l       .debug_str	00000000 
0004e1dd l       .debug_str	00000000 
0004e221 l       .debug_str	00000000 
0004e22c l       .debug_str	00000000 
0004e27a l       .debug_str	00000000 
0004e2c8 l       .debug_str	00000000 
0004e30e l       .debug_str	00000000 
0004e356 l       .debug_str	00000000 
0004e39e l       .debug_str	00000000 
0001ef82 l       .debug_str	00000000 
0004e405 l       .debug_str	00000000 
0004e45e l       .debug_str	00000000 
0004e4c8 l       .debug_str	00000000 
00003fb8 l       .debug_str	00000000 
0004e532 l       .debug_str	00000000 
0004e5ad l       .debug_str	00000000 
0004e622 l       .debug_str	00000000 
0004e62d l       .debug_str	00000000 
0004e6a2 l       .debug_str	00000000 
0004e6ad l       .debug_str	00000000 
0004e704 l       .debug_str	00000000 
0004e768 l       .debug_str	00000000 
0004e774 l       .debug_str	00000000 
0004e7b1 l       .debug_str	00000000 
0004e7be l       .debug_str	00000000 
0004e7f2 l       .debug_str	00000000 
0004e82d l       .debug_str	00000000 
0004e889 l       .debug_str	00000000 
0004e8e4 l       .debug_str	00000000 
0004e93e l       .debug_str	00000000 
00035378 l       .debug_str	00000000 
0004e984 l       .debug_str	00000000 
0004e9ea l       .debug_str	00000000 
0004ea21 l       .debug_str	00000000 
0004ea29 l       .debug_str	00000000 
0004ea61 l       .debug_str	00000000 
0004ea6a l       .debug_str	00000000 
0004eaa2 l       .debug_str	00000000 
0004eaab l       .debug_str	00000000 
0004eae2 l       .debug_str	00000000 
0004eaea l       .debug_str	00000000 
0004eb22 l       .debug_str	00000000 
0004eb2b l       .debug_str	00000000 
0004eb63 l       .debug_str	00000000 
0004eb6c l       .debug_str	00000000 
0004eba3 l       .debug_str	00000000 
0004ebab l       .debug_str	00000000 
0004ec25 l       .debug_str	00000000 
0004ec9f l       .debug_str	00000000 
0004ed19 l       .debug_str	00000000 
0004ed95 l       .debug_str	00000000 
00007b0f l       .debug_str	00000000 
0004edf3 l       .debug_str	00000000 
0004ee52 l       .debug_str	00000000 
0004eeb1 l       .debug_str	00000000 
0004ef10 l       .debug_str	00000000 
0004ef70 l       .debug_str	00000000 
0004efce l       .debug_str	00000000 
0004f02d l       .debug_str	00000000 
0004f08c l       .debug_str	00000000 
0004f0eb l       .debug_str	00000000 
0004f14b l       .debug_str	00000000 
0004f1a0 l       .debug_str	00000000 
0004f1f5 l       .debug_str	00000000 
0004f24f l       .debug_str	00000000 
0004f2a9 l       .debug_str	00000000 
0004f2e3 l       .debug_str	00000000 
0004f2ec l       .debug_str	00000000 
0004f326 l       .debug_str	00000000 
0004f32f l       .debug_str	00000000 
0004f36c l       .debug_str	00000000 
00036863 l       .debug_str	00000000 
0004f3a5 l       .debug_str	00000000 
0004f406 l       .debug_str	00000000 
0004f464 l       .debug_str	00000000 
0004f4a5 l       .debug_str	00000000 
0004f4e3 l       .debug_str	00000000 
0004f51c l       .debug_str	00000000 
0004f55b l       .debug_str	00000000 
0004f599 l       .debug_str	00000000 
0004f5d7 l       .debug_str	00000000 
0004f618 l       .debug_str	00000000 
0004f65c l       .debug_str	00000000 
0004f699 l       .debug_str	00000000 
0004f6ff l       .debug_str	00000000 
0004f766 l       .debug_str	00000000 
0004f7c9 l       .debug_str	00000000 
0004f82b l       .debug_str	00000000 
0004f890 l       .debug_str	00000000 
0004f8f9 l       .debug_str	00000000 
0004f95f l       .debug_str	00000000 
0004f9c5 l       .debug_str	00000000 
0004fa20 l       .debug_str	00000000 
0004fa87 l       .debug_str	00000000 
0004faf2 l       .debug_str	00000000 
0004fb4d l       .debug_str	00000000 
0004fba8 l       .debug_str	00000000 
0001685e l       .debug_str	00000000 
0004fbef l       .debug_str	00000000 
0004fc37 l       .debug_str	00000000 
0004fc7f l       .debug_str	00000000 
0004fcc7 l       .debug_str	00000000 
0004fd10 l       .debug_str	00000000 
0004fd5a l       .debug_str	00000000 
0004fda1 l       .debug_str	00000000 
0004fdf4 l       .debug_str	00000000 
0004fe0f l       .debug_str	00000000 
0004fe57 l       .debug_str	00000000 
0004feab l       .debug_str	00000000 
0004fef3 l       .debug_str	00000000 
0004ff47 l       .debug_str	00000000 
0004ff8f l       .debug_str	00000000 
0004ffe3 l       .debug_str	00000000 
0005002c l       .debug_str	00000000 
00050081 l       .debug_str	00000000 
000500cb l       .debug_str	00000000 
00050123 l       .debug_str	00000000 
00050185 l       .debug_str	00000000 
000501e4 l       .debug_str	00000000 
00050244 l       .debug_str	00000000 
000502a4 l       .debug_str	00000000 
00050304 l       .debug_str	00000000 
00050365 l       .debug_str	00000000 
000503c4 l       .debug_str	00000000 
00050424 l       .debug_str	00000000 
00050484 l       .debug_str	00000000 
000504e4 l       .debug_str	00000000 
00050545 l       .debug_str	00000000 
000505a2 l       .debug_str	00000000 
000505fd l       .debug_str	00000000 
00050653 l       .debug_str	00000000 
000506b1 l       .debug_str	00000000 
00050705 l       .debug_str	00000000 
00050766 l       .debug_str	00000000 
000507cc l       .debug_str	00000000 
00050834 l       .debug_str	00000000 
0005089b l       .debug_str	00000000 
000508f7 l       .debug_str	00000000 
00050958 l       .debug_str	00000000 
000509b2 l       .debug_str	00000000 
00050a0c l       .debug_str	00000000 
00050a6a l       .debug_str	00000000 
00050abe l       .debug_str	00000000 
00050b3a l       .debug_str	00000000 
00050ba3 l       .debug_str	00000000 
00050c1f l       .debug_str	00000000 
00050c9b l       .debug_str	00000000 
00050d04 l       .debug_str	00000000 
00050d80 l       .debug_str	00000000 
00050ded l       .debug_str	00000000 
00050e47 l       .debug_str	00000000 
00050ea0 l       .debug_str	00000000 
00050ef8 l       .debug_str	00000000 
00050f57 l       .debug_str	00000000 
00050fb6 l       .debug_str	00000000 
00051015 l       .debug_str	00000000 
00051075 l       .debug_str	00000000 
000510d5 l       .debug_str	00000000 
00051135 l       .debug_str	00000000 
00051195 l       .debug_str	00000000 
000511f7 l       .debug_str	00000000 
00051259 l       .debug_str	00000000 
000512ba l       .debug_str	00000000 
0005131c l       .debug_str	00000000 
0005137e l       .debug_str	00000000 
000513df l       .debug_str	00000000 
00051441 l       .debug_str	00000000 
000514a3 l       .debug_str	00000000 
000368a7 l       .debug_str	00000000 
000514ec l       .debug_str	00000000 
00051538 l       .debug_str	00000000 
00051540 l       .debug_str	00000000 
0005158a l       .debug_str	00000000 
000515d5 l       .debug_str	00000000 
000515dc l       .debug_str	00000000 
00051627 l       .debug_str	00000000 
00051672 l       .debug_str	00000000 
000516be l       .debug_str	00000000 
00051708 l       .debug_str	00000000 
00051755 l       .debug_str	00000000 
000517a0 l       .debug_str	00000000 
000517ec l       .debug_str	00000000 
00051838 l       .debug_str	00000000 
00051884 l       .debug_str	00000000 
000518d1 l       .debug_str	00000000 
0005191b l       .debug_str	00000000 
00051968 l       .debug_str	00000000 
000519b3 l       .debug_str	00000000 
000519ff l       .debug_str	00000000 
00051a4b l       .debug_str	00000000 
00051a97 l       .debug_str	00000000 
00051ae4 l       .debug_str	00000000 
00051b2e l       .debug_str	00000000 
00051b7b l       .debug_str	00000000 
00051bc6 l       .debug_str	00000000 
00051c12 l       .debug_str	00000000 
00051c5e l       .debug_str	00000000 
00051caa l       .debug_str	00000000 
00051cf7 l       .debug_str	00000000 
00051d42 l       .debug_str	00000000 
00051d90 l       .debug_str	00000000 
00051ddc l       .debug_str	00000000 
00051e29 l       .debug_str	00000000 
00051e76 l       .debug_str	00000000 
00051ec3 l       .debug_str	00000000 
00051f11 l       .debug_str	00000000 
00051f5c l       .debug_str	00000000 
00051fa7 l       .debug_str	00000000 
00051ff3 l       .debug_str	00000000 
0005203f l       .debug_str	00000000 
0005208c l       .debug_str	00000000 
000520d8 l       .debug_str	00000000 
00052125 l       .debug_str	00000000 
00052172 l       .debug_str	00000000 
000521d1 l       .debug_str	00000000 
0005222e l       .debug_str	00000000 
0005228a l       .debug_str	00000000 
000522e8 l       .debug_str	00000000 
00052345 l       .debug_str	00000000 
000523a3 l       .debug_str	00000000 
00052400 l       .debug_str	00000000 
0005245e l       .debug_str	00000000 
000524bb l       .debug_str	00000000 
0005251a l       .debug_str	00000000 
00052578 l       .debug_str	00000000 
000525d9 l       .debug_str	00000000 
0005263a l       .debug_str	00000000 
0005269d l       .debug_str	00000000 
000526ce l       .debug_str	00000000 
000526d6 l       .debug_str	00000000 
00052739 l       .debug_str	00000000 
0005279c l       .debug_str	00000000 
00052800 l       .debug_str	00000000 
00052864 l       .debug_str	00000000 
000528c8 l       .debug_str	00000000 
0005292c l       .debug_str	00000000 
0005298f l       .debug_str	00000000 
000529f2 l       .debug_str	00000000 
00052a56 l       .debug_str	00000000 
00052aba l       .debug_str	00000000 
00052b1e l       .debug_str	00000000 
00052b82 l       .debug_str	00000000 
00052bb3 l       .debug_str	00000000 
00052bbb l       .debug_str	00000000 
00052c1f l       .debug_str	00000000 
00052c83 l       .debug_str	00000000 
00052ce7 l       .debug_str	00000000 
00052d4b l       .debug_str	00000000 
00052dab l       .debug_str	00000000 
00052e0b l       .debug_str	00000000 
00052e39 l       .debug_str	00000000 
00052e42 l       .debug_str	00000000 
00052ea3 l       .debug_str	00000000 
00052f04 l       .debug_str	00000000 
00052f65 l       .debug_str	00000000 
00052fc6 l       .debug_str	00000000 
0005301d l       .debug_str	00000000 
00053070 l       .debug_str	00000000 
000530b8 l       .debug_str	00000000 
000530e0 l       .debug_str	00000000 
00053128 l       .debug_str	00000000 
0005313e l       .debug_str	00000000 
00053186 l       .debug_str	00000000 
000531bb l       .debug_str	00000000 
00053203 l       .debug_str	00000000 
0005323e l       .debug_str	00000000 
00053286 l       .debug_str	00000000 
000532ce l       .debug_str	00000000 
000532ef l       .debug_str	00000000 
00053337 l       .debug_str	00000000 
00053342 l       .debug_str	00000000 
0005338a l       .debug_str	00000000 
000533c7 l       .debug_str	00000000 
0005340f l       .debug_str	00000000 
00053468 l       .debug_str	00000000 
000534b0 l       .debug_str	00000000 
000534cc l       .debug_str	00000000 
00053514 l       .debug_str	00000000 
000535c0 l       .debug_str	00000000 
00053608 l       .debug_str	00000000 
00053626 l       .debug_str	00000000 
0005366e l       .debug_str	00000000 
00053678 l       .debug_str	00000000 
000536c0 l       .debug_str	00000000 
000536fb l       .debug_str	00000000 
00053743 l       .debug_str	00000000 
00053792 l       .debug_str	00000000 
000537da l       .debug_str	00000000 
00053801 l       .debug_str	00000000 
00053849 l       .debug_str	00000000 
00053873 l       .debug_str	00000000 
000538bb l       .debug_str	00000000 
00053936 l       .debug_str	00000000 
0005397e l       .debug_str	00000000 
000539c6 l       .debug_str	00000000 
000539dc l       .debug_str	00000000 
000036f7 l       .debug_str	00000000 
00053a24 l       .debug_str	00000000 
00053a6c l       .debug_str	00000000 
00053ab4 l       .debug_str	00000000 
00053ae5 l       .debug_str	00000000 
00053b2d l       .debug_str	00000000 
00053b91 l       .debug_str	00000000 
00053bd9 l       .debug_str	00000000 
00003655 l       .debug_str	00000000 
00053c21 l       .debug_str	00000000 
00053c69 l       .debug_str	00000000 
00053c76 l       .debug_str	00000000 
00053cbe l       .debug_str	00000000 
00053cc8 l       .debug_str	00000000 
00053d10 l       .debug_str	00000000 
00053d19 l       .debug_str	00000000 
00053d61 l       .debug_str	00000000 
00053d89 l       .debug_str	00000000 
00053dd1 l       .debug_str	00000000 
00053e19 l       .debug_str	00000000 
00053e3b l       .debug_str	00000000 
00053e83 l       .debug_str	00000000 
00053eb4 l       .debug_str	00000000 
00053efc l       .debug_str	00000000 
00053f44 l       .debug_str	00000000 
00053f7c l       .debug_str	00000000 
00053fc4 l       .debug_str	00000000 
00053ff9 l       .debug_str	00000000 
00054041 l       .debug_str	00000000 
0005406a l       .debug_str	00000000 
000540b2 l       .debug_str	00000000 
000540d6 l       .debug_str	00000000 
0005411e l       .debug_str	00000000 
00054143 l       .debug_str	00000000 
0005418b l       .debug_str	00000000 
000541a8 l       .debug_str	00000000 
000541f0 l       .debug_str	00000000 
000541fb l       .debug_str	00000000 
00054243 l       .debug_str	00000000 
0005426b l       .debug_str	00000000 
000542b3 l       .debug_str	00000000 
000542c2 l       .debug_str	00000000 
0005430a l       .debug_str	00000000 
00054352 l       .debug_str	00000000 
0005436e l       .debug_str	00000000 
000543b6 l       .debug_str	00000000 
0005442d l       .debug_str	00000000 
00054475 l       .debug_str	00000000 
000544ec l       .debug_str	00000000 
00054534 l       .debug_str	00000000 
0005453d l       .debug_str	00000000 
00054585 l       .debug_str	00000000 
000545ab l       .debug_str	00000000 
000545f3 l       .debug_str	00000000 
00054626 l       .debug_str	00000000 
0005466e l       .debug_str	00000000 
0005468b l       .debug_str	00000000 
000546d3 l       .debug_str	00000000 
000546dc l       .debug_str	00000000 
00054724 l       .debug_str	00000000 
0005476c l       .debug_str	00000000 
00054790 l       .debug_str	00000000 
000036a6 l       .debug_str	00000000 
000547d8 l       .debug_str	00000000 
00054820 l       .debug_str	00000000 
00054868 l       .debug_str	00000000 
00054960 l       .debug_str	00000000 
00008225 l       .debug_str	00000000 
000549a8 l       .debug_str	00000000 
000549f0 l       .debug_str	00000000 
00054a38 l       .debug_str	00000000 
00054a65 l       .debug_str	00000000 
00016039 l       .debug_str	00000000 
00054aad l       .debug_str	00000000 
00054af5 l       .debug_str	00000000 
00054b52 l       .debug_str	00000000 
00054b9a l       .debug_str	00000000 
00054ba3 l       .debug_str	00000000 
00054beb l       .debug_str	00000000 
00054c08 l       .debug_str	00000000 
00054c50 l       .debug_str	00000000 
00054c86 l       .debug_str	00000000 
00054cce l       .debug_str	00000000 
00054d03 l       .debug_str	00000000 
00054d4b l       .debug_str	00000000 
00054d84 l       .debug_str	00000000 
00054dcc l       .debug_str	00000000 
00054de8 l       .debug_str	00000000 
00054e30 l       .debug_str	00000000 
00054e38 l       .debug_str	00000000 
00054e80 l       .debug_str	00000000 
00054e9b l       .debug_str	00000000 
00054ee3 l       .debug_str	00000000 
00054f0b l       .debug_str	00000000 
00054f55 l       .debug_str	00000000 
00054f9f l       .debug_str	00000000 
00054ffe l       .debug_str	00000000 
0005505b l       .debug_str	00000000 
000550b4 l       .debug_str	00000000 
00055113 l       .debug_str	00000000 
00055172 l       .debug_str	00000000 
000551d3 l       .debug_str	00000000 
00055236 l       .debug_str	00000000 
0005529e l       .debug_str	00000000 
00055300 l       .debug_str	00000000 
00055366 l       .debug_str	00000000 
000553c8 l       .debug_str	00000000 
0005542d l       .debug_str	00000000 
00055490 l       .debug_str	00000000 
000554ec l       .debug_str	00000000 
00055543 l       .debug_str	00000000 
0005559c l       .debug_str	00000000 
000555ef l       .debug_str	00000000 
0005564b l       .debug_str	00000000 
000556b1 l       .debug_str	00000000 
00055707 l       .debug_str	00000000 
00055764 l       .debug_str	00000000 
000557c6 l       .debug_str	00000000 
0005581f l       .debug_str	00000000 
0005587a l       .debug_str	00000000 
000558d5 l       .debug_str	00000000 
00055930 l       .debug_str	00000000 
0005598d l       .debug_str	00000000 
000559ea l       .debug_str	00000000 
00055a30 l       .debug_str	00000000 
00055a7a l       .debug_str	00000000 
00055aba l       .debug_str	00000000 
00055af7 l       .debug_str	00000000 
00055b3b l       .debug_str	00000000 
00055b77 l       .debug_str	00000000 
00055bbb l       .debug_str	00000000 
00055c04 l       .debug_str	00000000 
00055c0d l       .debug_str	00000000 
00055c56 l       .debug_str	00000000 
00055c5f l       .debug_str	00000000 
00055cc8 l       .debug_str	00000000 
00055d25 l       .debug_str	00000000 
00055d88 l       .debug_str	00000000 
00055dde l       .debug_str	00000000 
00055e34 l       .debug_str	00000000 
00055e8d l       .debug_str	00000000 
00055ee5 l       .debug_str	00000000 
00055f49 l       .debug_str	00000000 
00055fcf l       .debug_str	00000000 
00055fd5 l       .debug_str	00000000 
0005605b l       .debug_str	00000000 
00056061 l       .debug_str	00000000 
000560e3 l       .debug_str	00000000 
00056165 l       .debug_str	00000000 
000561e8 l       .debug_str	00000000 
000561ef l       .debug_str	00000000 
00056272 l       .debug_str	00000000 
00056279 l       .debug_str	00000000 
000562ff l       .debug_str	00000000 
00056385 l       .debug_str	00000000 
00056408 l       .debug_str	00000000 
0005648b l       .debug_str	00000000 
0005650d l       .debug_str	00000000 
00056593 l       .debug_str	00000000 
00056619 l       .debug_str	00000000 
000566a3 l       .debug_str	00000000 
0005672b l       .debug_str	00000000 
000567b3 l       .debug_str	00000000 
0005681b l       .debug_str	00000000 
00056884 l       .debug_str	00000000 
000568ee l       .debug_str	00000000 
00056959 l       .debug_str	00000000 
000569b7 l       .debug_str	00000000 
00056a15 l       .debug_str	00000000 
00056a73 l       .debug_str	00000000 
00056ad2 l       .debug_str	00000000 
00056b30 l       .debug_str	00000000 
00056b8f l       .debug_str	00000000 
00056bed l       .debug_str	00000000 
00056c4c l       .debug_str	00000000 
00056cab l       .debug_str	00000000 
00056d0a l       .debug_str	00000000 
00056d68 l       .debug_str	00000000 
00056dc7 l       .debug_str	00000000 
00056e26 l       .debug_str	00000000 
00056e85 l       .debug_str	00000000 
00056ee4 l       .debug_str	00000000 
00056f43 l       .debug_str	00000000 
00056fa2 l       .debug_str	00000000 
00057001 l       .debug_str	00000000 
00057060 l       .debug_str	00000000 
000570bf l       .debug_str	00000000 
0005711e l       .debug_str	00000000 
0005717d l       .debug_str	00000000 
000571dc l       .debug_str	00000000 
0005723b l       .debug_str	00000000 
0005729a l       .debug_str	00000000 
000572f9 l       .debug_str	00000000 
00057358 l       .debug_str	00000000 
000573b7 l       .debug_str	00000000 
00057416 l       .debug_str	00000000 
00057475 l       .debug_str	00000000 
000574d5 l       .debug_str	00000000 
00057534 l       .debug_str	00000000 
00057593 l       .debug_str	00000000 
000575f2 l       .debug_str	00000000 
00057652 l       .debug_str	00000000 
000576b1 l       .debug_str	00000000 
00057710 l       .debug_str	00000000 
0005776f l       .debug_str	00000000 
000577cf l       .debug_str	00000000 
000168e8 l     F .text	00000012 _ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE
00018908 l     F .text	0000000a _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E
00018912 l     F .text	0000000c _ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E
00016f8e l     F .text	000000e4 _ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE
00017fb6 l     F .text	0000024c _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE
00016e88 l     F .text	000000b0 _ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E
00016f38 l     F .text	00000024 _ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE
000174b0 l     F .text	00000032 _ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E
00016898 l     F .text	00000002 _ZN4core3ptr13drop_in_place17h000c7c147ade2111E
000168fc l     F .text	00000114 _ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E
000208cc l     O .text	0000007b _ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E
00020947 l     O .text	000001f0 _ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E
00020b38 l     O .text	00000458 _ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E
0001fea0 l     O .text	00000010 _ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE
00016f62 l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE
00016f68 l     F .text	00000026 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE
00016f5c l     F .text	00000006 _ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E
0001689a l     F .text	0000004e _ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE
00000000 l    df *ABS*	00000000 semihosting_console.c
00018920 l     F .text	00000024 __semihost
00018944 l     F .text	00000010 debugger_connected
00018954 l     F .text	0000002e semihost_write
00018a28 l     F .text	0000001c semihosting_console_write_ch
20004704 l     O .bss	00000004 semihost_mbuf
20000100 l     O .data	00000001 log_enabled
00000000 l    df *ABS*	00000000 console.c
20004708 l     O .bss	00000010 avail_queue
20004718 l     O .bss	0000000c console_write_lock
00000000 l    df *ABS*	00000000 console_fmt.c
00000000 l    df *ABS*	00000000 ticks.c
20004724 l     O .bss	00000001 do_ticks
00000000 l    df *ABS*	00000000 sysinit.c
00018bf8 l     F .text	00000006 sysinit_dflt_panic_cb
00000000 l    df *ABS*	00000000 cmsis_nvic.c
00000000 l    df *ABS*	00000000 hal_gpio.c
00018c4c l     F .text	00000050 hal_gpio_irq_handler
00018c9c l     F .text	0000002c hal_gpio_irq_setup
00018cc8 l     F .text	0000001c hal_gpio_find_empty_slot
00018ce4 l     F .text	00000038 hal_gpio_find_pin
20004728 l     O .bss	00000040 hal_gpio_irqs
20004768 l     O .bss	00000001 irq_setup.8906
00000000 l    df *ABS*	00000000 hal_i2c.c
00018e78 l     F .text	0000007a hal_i2c_delay_us
00018ef4 l     F .text	00000024 hal_i2c_resolve
00018f18 l     F .text	0000001c hal_i2c_convert_status
00018f34 l     F .text	00000012 read_gpio_inbuffer
00018f46 l     F .text	000000a2 hal_i2c_clear_bus
00020fa0 l     O .text	00000008 nrf52_hal_i2cs
00000000 l    df *ABS*	00000000 hal_spi.c
000192e4 l     F .text	0000006e nrf52_irqm_handler
0001936c l     F .text	00000014 hal_spi_stop_transfer
00019380 l     F .text	0000004c hal_spi_config_slave
000193cc l     F .text	000000b8 hal_spi_init_master
00019484 l     F .text	000000e0 hal_spi_config_master
00020fa8 l     O .text	0000000c nrf52_hal_spis
00000000 l    df *ABS*	00000000 hal_watchdog.c
00019868 l     F .text	0000000e nrf52_hal_wdt_default_handler
00019878 l     F .text	00000020 nrf52_wdt_irq_handler
00000000 l    df *ABS*	00000000 os_fault.c
00000000 l    df *ABS*	00000000 os.c
00019a90 l     F .text	00000016 os_main
20004870 l     O .bss	00004000 g_os_main_stack
20004770 l     O .bss	00000100 g_idle_task_stack
00000000 l    df *ABS*	00000000 os_callout.c
00000000 l    df *ABS*	00000000 os_cputime.c
00000000 l    df *ABS*	00000000 os_dev.c
00019da0 l     F .text	0000005c os_dev_add
00019dfc l     F .text	00000026 os_dev_initialize
00019e22 l     F .text	00000020 os_dev_init
20008870 l     O .bss	00000008 g_os_dev_list
00000000 l    df *ABS*	00000000 os_eventq.c
20008878 l     O .bss	00000010 os_eventq_main
00000000 l    df *ABS*	00000000 os_mbuf.c
00000000 l    df *ABS*	00000000 os_mempool.c
0001a34c l     F .text	00000078 os_mempool_init_internal
00000000 l    df *ABS*	00000000 os_msys.c
0001a460 l     F .text	00000010 os_msys_find_biggest_pool
0001a470 l     F .text	0000002c os_msys_find_pool
0001a4e8 l     F .text	00000044 os_msys_init_once
20008888 l     O .bss	00004900 os_msys_1_data
2000d188 l     O .bss	0000000c os_msys_1_mbuf_pool
2000d194 l     O .bss	0000001c os_msys_1_mempool
2000010c l     O .data	00000008 g_msys_pool_list
00000000 l    df *ABS*	00000000 os_mutex.c
00000000 l    df *ABS*	00000000 os_sanity.c
0001a744 l     F .text	00000020 os_sanity_check_list_lock
0001a764 l     F .text	0000001c os_sanity_check_list_unlock
00000000 l    df *ABS*	00000000 os_sched.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
0001abd8 l     F .text	00000018 _clear_stack
00000000 l    df *ABS*	00000000 os_time.c
0001acc8 l     F .text	0000004c os_deltatime
0001ad14 l     F .text	0000005c os_time_tick
2000d1b8 l     O .bss	00000030 basetod
00000000 l    df *ABS*	00000000 os_arch_arm.c
00000000 l    df *ABS*	00000000 HAL_CM4.o
0001b030 l       .text	00000000 SVC_User
0001b04e l       .text	00000000 SVC_Done
00000000 l    df *ABS*	00000000 memcmp.c
0001b0f0 l       .text	00000000 test1
0001b0e4 l       .text	00000000 loop1
0001b0f6 l       .text	00000000 res1
0001b112 l       .text	00000000 test2
0001b11a l       .text	00000000 done
0001b106 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memcpy.c
0001b126 l       .text	00000000 test1
0001b122 l       .text	00000000 loop1
0001b134 l       .text	00000000 test2
0001b130 l       .text	00000000 loop2
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 tinyprintf.c
0001b19e l     F .text	000000c0 ui2a
0001b25e l     F .text	00000020 i2a
0001b27e l     F .text	00000030 a2d
0001b2ae l     F .text	00000036 a2i
0001b2e4 l     F .text	0000002a putf
0001b310 l     F .text	0000011c putchw
0001b42c l     F .text	00000064 intarg
00000000 l    df *ABS*	00000000 vprintf.c
00000000 l    df *ABS*	00000000 memfile.c
00000000 l    df *ABS*	00000000 mynewt.c
0001b7b0 l     F .text	00000004 stdin_read
0001b7b4 l     F .text	00000010 stdout_write
20000124 l     O .data	00000004 _stdin
20000128 l     O .data	00000008 _stdin_methods
00000000 l    df *ABS*	00000000 mynewt_rust.c
00000000 l    df *ABS*	00000000 mem.c
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysinit-app.c
00000000 l    df *ABS*	00000000 hal_bsp.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001b864 l     F .text	00000028 nrf52k_flash_wait_ready
0001b88c l     F .text	00000054 nrf52k_flash_erase_sector
0001b8e0 l     F .text	00000004 nrf52k_flash_init
0001b8e4 l     F .text	00000020 nrf52k_flash_sector_info
0001b904 l     F .text	000000d0 nrf52k_flash_write
0001b9d4 l     F .text	0000000e nrf52k_flash_read
00021160 l     O .text	0000001c nrf52k_flash_funcs
00000000 l    df *ABS*	00000000 hal_os_tick.c
0001b9e4 l     F .text	000000d4 nrf52_timer_handler
00000000 l    df *ABS*	00000000 hal_timer.c
0001bbf0 l     F .text	0000000a nrf_read_timer_cntr
0001bbfc l     F .text	000000b4 nrf_timer_set_ocmp
0001bcb0 l     F .text	0000000a nrf_timer_disable_ocmp
0001bcba l     F .text	0000000a nrf_rtc_disable_ocmp
0001bcc4 l     F .text	00000054 hal_timer_read_bsptimer
0001bd18 l     F .text	00000076 hal_timer_chk_queue
0001bd8e l     F .text	0000002c hal_timer_irq_handler
0002117c l     O .text	00000018 nrf52_hal_timers
00000000 l    df *ABS*	00000000 nrf52_periph.c
0001bf54 l     F .text	00000034 nrf52_periph_create_timers
0001bf88 l     F .text	00000020 nrf52_periph_create_i2c
0001bfa8 l     F .text	00000020 nrf52_periph_create_spi
00021194 l     O .text	0000000c hal_i2c1_cfg
000211a0 l     O .text	00000004 os_bsp_spi0m_cfg
00000000 l    df *ABS*	00000000 sensor_creator.c
00000000 l    df *ABS*	00000000 sensor.c
0001bfdc l     F .text	00000028 sensor_mgr_remove
0001c004 l     F .text	00000060 sensor_mgr_insert
0001c064 l     F .text	0000000a sensor_type_traits_empty
0001c070 l     F .text	0000000c sensor_mgr_evq_set
0001c0aa l     F .text	0000005c sensor_read_data_func
0001c108 l     F .text	00000048 sensor_base_ts_update_event
0001c150 l     F .text	00000050 sensor_up_timestamp
0001c1d8 l     F .text	000000a0 sensor_mgr_init
0001c444 l     F .text	0000007c sensor_mgr_wakeup_event
0001c2a2 l     F .text	00000032 sensor_update_nextrun
0001c2d4 l     F .text	0000001e sensor_calc_nextrun_delta
0001c2f4 l     F .text	00000024 sensor_find_min_nextrun_sensor
0001c3cc l     F .text	0000004a sensor_mgr_poll_bytype
0001c416 l     F .text	0000002e sensor_poll_per_type_trait
2000d1ec l     O .bss	00000078 sensor_notify_evt_area
2000d264 l     O .bss	0000001c sensor_notify_evt_pool
00000000 l    df *ABS*	00000000 sensor_coap.c
2000d280 l     O .bss	00000008 oc_sem
2000d288 l     O .bss	00000001 oc_sensor_coap_ready
00000000 l    df *ABS*	00000000 sensor_network.c
2000d28c l     O .bss	0000000c hw_id
2000d298 l     O .bss	00000004 hw_id_len
2000d2a0 l     O .bss	00000008 sensor_node_address
2000d2a8 l     O .bss	00000037 sensor_node_names_buf
20000130 l     O .data	00000014 sensor_node_names
000211b8 l     O .text	0000000c COLLECTOR_NODE_HW_ID
000211c4 l     O .text	0000003c SENSOR_NODE_HW_IDS
00021260 l     O .text	00000028 sensor_node_addresses
00000000 l    df *ABS*	00000000 creator.c
0001c668 l     F .text	00000050 config_device
2000d2e0 l     O .bss	00000014 adc_1_itf_temp_stub
2000d2f8 l     O .bss	000000c0 temp_stub_dev
00000000 l    df *ABS*	00000000 temp_stub.c
0001c714 l     F .text	00000004 temp_stub_close
0001c718 l     F .text	0000001c temp_stub_sensor_get_config
0001c734 l     F .text	00000026 temp_stub_open
0001c810 l     F .text	0000007c temp_stub_sensor_read
000212a4 l     O .text	00000028 g_temp_stub_sensor_driver
00000000 l    df *ABS*	00000000 oc_buffer.c
0001c8b4 l     F .text	00000030 oc_buffer_tx
0001c8e4 l     F .text	0000002c oc_buffer_rx
2000d3b8 l     O .bss	00000018 oc_inq
2000d3d0 l     O .bss	00000018 oc_outq
00000000 l    df *ABS*	00000000 oc_ri.c
2000d3e8 l     O .bss	000000c8 oc_client_cb_area
2000d4b0 l     O .bss	0000001c oc_client_cb_pool
00000000 l    df *ABS*	00000000 adaptor.c
2000d4cc l     O .bss	00000004 oc_evq
00000000 l    df *ABS*	00000000 ble_adaptor.c
00000000 l    df *ABS*	00000000 ip4_adaptor.c
00000000 l    df *ABS*	00000000 ip_adaptor.c
00000000 l    df *ABS*	00000000 lora_adaptor.c
00000000 l    df *ABS*	00000000 serial_adaptor.c
00000000 l    df *ABS*	00000000 oc_rep.c
2000d4d0 l     O .bss	0000001c oc_rep_objects
2000d4ec l     O .bss	00000030 oc_rep_objects_area
00000000 l    df *ABS*	00000000 flash_map.c
0001ca38 l     F .text	00000078 flash_map_read_mfg
2000d51c l     O .bss	00000078 mfg_areas.9056
00000000 l    df *ABS*	00000000 modlog.c
00000000 l    df *ABS*	00000000 mfg.c
0001cb8c l     F .text	00000094 mfg_seek_next_aux
0001cc20 l     F .text	00000070 mfg_read_mmr
0001cc90 l     F .text	00000054 mfg_read_next_mmr
0001cce4 l     F .text	0000003c mfg_open_flash_area
0001cd20 l     F .text	00000044 mfg_read_tlv_body
0001cdec l     F .text	0000004e mfg_read_mmr_refs
2000d594 l     O .bss	00000001 mfg_initialized
2000d598 l     O .bss	00000018 mfg_mmrs
2000d5b0 l     O .bss	00000004 mfg_num_mmrs
00000000 l    df *ABS*	00000000 support.c
00000000 l    df *ABS*	00000000 hal_flash.c
0001ce52 l     F .text	0000001e hal_flash_check_addr
00000000 l    df *ABS*	00000000 nrf52_hw_id.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 aeabi_memclr.c
00000000 l    df *ABS*	00000000 aeabi_memcpy.c
00000000 l    df *ABS*	00000000 lib_a-aeabi_memset-soft.o
00000000 l    df *ABS*	00000000 libchip8.bde0u64m-cgu.0
00000afc l       .debug_str	00000000 
000074cf l       .debug_str	00000000 
00007526 l       .debug_str	00000000 
00001c00 l       .debug_str	00000000 
00007572 l       .debug_str	00000000 
00000c36 l       .debug_str	00000000 
00000bfa l       .debug_str	00000000 
0000757a l       .debug_str	00000000 
00000000 l    df *ABS*	00000000 nrf52_my_sensor-sysflash.c
00000000 l    df *ABS*	00000000 SVC_Table.S
00000000 l       .svc_table	00000000 SVC_End
000099dc g     F .text	00000014 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE
00016aa0 g     F .text	00000004 _ZN4core5panic8Location4line17h650a566d9637c91dE
00015ac2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE
00008616 g     F .text	000000ba main
000151ee g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE
00009b0c g     F .text	0000001c _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E
0001152a g     F .text	0000070a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E
0001a070 g     F .text	00000040 os_eventq_remove
00011cc0 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE
0000da7e g     F .text	0000007a _ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E
00009aca g     F .text	0000002e .hidden _ZN3app5chip812handle_touch17hb422a4f740ac0e1bE
0001aebc g     F .text	00000018 os_arch_init
0001b0d8 g     F .text	00000048 memcmp
0000eb12 g     F .text	00000012 _ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE
00016644 g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE
00011dc8 g     F .text	00000024 _ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE
00012f5e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E
00014dd2 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E
0000ee82 g     F .text	000000ee _ZN3log17__private_api_log17h076f8f4ccc99f19bE
00016384 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE
0001620c g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E
00010138 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE
0000fd42 g     F .text	00000002 _ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E
00016ad0 g     F .text	00000040 _ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E
00011ca2 g     F .text	0000001e .hidden _ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE
0000f81e g     F .text	00000010 _ZN4core3ptr5write17h7ef3fa6b6f80daebE
00014c9e g     F .text	0000005a _ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE
00018730 g     F .text	000000f4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$isize$GT$3fmt17hc96955e2b836ab47E
2000d6d0 g     O .bss	0000001c nrf52_hal_timer0
0001503a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E
0000f804 g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE
00014eb0 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE
0001c298 g     F .text	0000000a sensor_unlock
000128b6 g     F .text	00000036 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E
00014fde g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E
00010db2 g     F .text	00000118 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E
00012fb2 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E
00014fc2 g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE
00015eda g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E
0000f670 g     F .text	0000006c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E
0001a790 g     F .text	00000024 os_sanity_check_register
0001c768 g     F .text	0000007c temp_stub_init
0001a830 g     F .text	00000054 os_sched_insert
2000d5b4 g     O .bss	00000001 g_silence_console
00015508 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E
00010686 g     F .text	0000028a _ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E
000155c0 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E
00013256 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE
00008164  w    F .text	00000002 POWER_CLOCK_IRQHandler
0001cef0 g     F .text	00000034 hal_bsp_hw_id
00008164  w    F .text	00000002 NFCT_IRQHandler
0001686a g     F .text	00000004 .hidden _ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE
00009942 g     F .text	0000008e _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE
00014d96 g     F .text	00000018 _ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E
00010f3c g     F .text	00000162 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE
00015c82 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE
0000e0bc g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E
00012bee g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE
0000f3dc g     F .text	00000012 _ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE
00015948 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE
0001837c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE
0001687c g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E
00015252 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE
000156ac g     F .text	00000024 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE
0000e236 g     F .text	00000086 _ZN4core3cmp6max_by17h3c9686db40e0f078E
0000f212 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E
20000114 g     O .data	00000008 g_os_run_list
0001016a g     F .text	0000004a _ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E
0001c974 g     F .text	00000020 oc_send_buffer
0001af64 g     F .text	00000030 os_arch_start
00015a32 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE
00011d34 g     F .text	0000001a _ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E
0001c58c g     F .text	0000001a is_standalone_node
00019f5c g     F .text	00000010 os_eventq_init
0001798e g     F .text	00000044 _ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E
0001331e g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E
00017072 g     F .text	00000022 _ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E
00012f9c g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E
0000f4d2 g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE
00016556 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE
0001c4c0 g     F .text	00000028 init_sensor_coap
0001c994 g     F .text	0000004c oc_send_multicast_message
00015c92 g     F .text	0000008c _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE
00012e6a g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE
0000e838 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E
0001794a g     F .text	00000044 _ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE
2000d6f0 g     O .bss	00000034 sensor_mgr
00018ac4 g     F .text	0000002c console_dump
0001a95c g     F .text	00000078 os_sched_wakeup
000131e6 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E
00018510 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u32$GT$3fmt17h6ff113c3a96d4445E
0000f24a g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E
0001ce50 g     F .text	00000002 _fini
00019d94 g     F .text	0000000a os_cputime_get32
00013062 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E
0000fbe4 g     F .text	00000132 _ZN6mynewt3hal4GPIO4init17h54c34caf27320956E
2000d5b5 g     O .bss	00000001 g_console_input_ignore
00009ab0 g     F .text	00000008 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE
0001ae4c g     F .text	00000014 os_arch_ctx_sw
0001322c g     F .text	0000001a _ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E
00012d28 g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E
0001537c g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE
0001b09a g     F .text	0000000c SysTick_Handler
0001c500 g     F .text	00000070 get_hardware_id
00008168 g     F .text	00000010 _sbrkInit
0000ec2e g     F .text	0000003c _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E
00012fc8 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE
0001008c g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE
0000dc8a g     F .text	0000001c _ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E
00013260 g     F .text	00000012 _ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E
0001b172 g     F .text	0000001c strcmp
00015c5e g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE
2000d5e8 g     O .bss	00000050 g_idle_task
00019f4c g     F .text	00000010 os_dev_reset
00016736 g     F .text	00000010 _ZN4core3ptr5write17h147d4643d861e927E
000101b4 g     F .text	00000262 _ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E
0001aaac g     F .text	00000010 os_sem_init
0000df24 g     F .text	00000038 .hidden _ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E
0001329e g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE
00018a44 g     F .text	00000070 console_printhex
00010164 g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE
00021364 g       .text	00000000 __exidx_start
0001c570 g     F .text	0000001c is_collector_node
00010636 g     F .text	00000050 _ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E
0000dbc2 g     F .text	0000001a _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE
0001b13a g     F .text	00000038 memset
00008164  w    F .text	00000002 WDT_IRQHandler
00018260 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u8$GT$3fmt17h096b8fea83a9dea7E
0001330e g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E
000189d4 g     F .text	00000054 console_buffer
00019f6c g     F .text	0000000a os_eventq_inited
00018c0c g     F .text	0000000c sysinit_end
000161ba g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE
00008020 g       .text	00000000 __isr_vector_start
00008164  w    F .text	00000002 TIMER3_IRQHandler
00008164  w    F .text	00000002 MWU_IRQHandler
00016a48 g     F .text	0000004a _ZN4core6result13unwrap_failed17h10957bfda7d5e5f2E
2000d788 g       .bss	00000000 __HeapBase
00015558 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE
000154a6 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E
00010038 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E
00011d06 g     F .text	00000012 _ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E
0000fd16 g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E
00014e1a g     F .text	00000096 _ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E
0001caf0 g     F .text	00000026 flash_area_read
00013216 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E
0001ca06 g     F .text	00000002 oc_register_ip4
0000f728 g     F .text	00000046 _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E
0001ca08 g     F .text	00000002 oc_register_ip6
0000842c g     F .text	000001d4 SystemInit
00012c7a g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE
0001ce70 g     F .text	00000028 hal_flash_init
00019f14 g     F .text	00000036 os_dev_close
000212fc g     O .text	00000048 sysflash_map_dflt
00009b28 g     F .text	000000d2 _ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E
0001b858 g     F .text	0000000c hal_bsp_init
0000d992 g     F .text	000000ec _ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E
0000f2f6 g     F .text	00000032 _ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E
00011e74 g     F .text	000005e0 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE
0000e934 g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E
00008164  w    F .text	00000002 SWI0_EGU0_IRQHandler
00015f08 g     F .text	00000036 _ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E
00012cd0 g     F .text	00000058 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E
00011154 g     F .text	0000012c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE
0000e7fa g     F .text	00000032 _ZN4core3ptr4read17h2038b0ecb0975c4fE
0001d24c g     F .text	00000004 __aeabi_memcpy4
00015dae g     F .text	000000c6 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE
000196b0 g     F .text	0000002c hal_spi_set_txrx_cb
0001d244 g     F .text	00000006 __aeabi_memclr8
000086d0 g     F .text	00000102 rust_begin_unwind
2000d5b8 g     O .bss	00000004 console_is_midline
0001d244 g     F .text	00000006 __aeabi_memclr4
000094b4 g     F .text	00000118 .hidden _ZN3app5chip88on_start17hf865f4cce3d1fe15E
00011cf6 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h22ac77b3595708cdE
000080f8 g       .text	00000000 __isr_vector_end
000191a8 g     F .text	0000013c hal_i2c_master_read
00015640 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E
0001b490 g     F .text	0000025c tfp_format
00016526 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE
0001c364 g     F .text	00000068 sensor_read
00012c32 g     F .text	00000026 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E
0000f7ea g     F .text	00000010 _ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E
0001504a g     F .text	00000010 _ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E
00015bb6 g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE
0001d24c g     F .text	00000004 __aeabi_memcpy
0001d24c g     F .text	00000004 __aeabi_memcpy8
2000d724 g     O .bss	00000020 st_up_osco
0001af94 g     F .text	0000005c os_arch_os_start
0001c346 g     F .text	0000001e sensor_init
20000000 g       .bss	00000000 _ram_start
0001adbc g     F .text	00000026 os_time_delay
0001505a g     F .text	0000002c _ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE
0001ca04 g     F .text	00000002 oc_register_gatt
00012e7e g     F .text	00000012 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E
20003a50 g     O .bss	00000004 _ZN3log20MAX_LOG_LEVEL_FILTER17h20753a6176f34564E
0001ceec g     F .text	00000004 hal_bsp_hw_id_len
00019d54 g     F .text	00000034 os_callout_wakeup_ticks
00012f12 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h8a25dee97102e103E
0001a0ca g     F .text	00000026 os_mqueue_get
00018fe8 g     F .text	00000098 hal_i2c_init
0001781c g     F .text	0000012e _ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E
00018260 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E
00008164  w    F .text	00000002 TIMER4_IRQHandler
0001ee98 g     O .text	00000050 _ZN8libchip87CHARBUF17h227c6d0d7e24574cE
0000e3b8 g     F .text	00000092 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E
00012e56 g     F .text	00000014 _ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E
00012454 g     F .text	00000048 _ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E
000164f6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E
0001aa5c g     F .text	00000022 os_sched
0000f3ee g     F .text	00000020 _ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE
00008164  w    F .text	00000002 SPIM2_SPIS2_SPI2_IRQHandler
0000e2bc g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h5567184bcc425327E
0000e97a g     F .text	00000014 _ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE
00011d84 g     F .text	00000010 _ZN4core3ptr13drop_in_place17hf625580841d3425eE
2000fe50 g       *ABS*	000001b0 __StackLimit
0001c07c g     F .text	0000002e sensor_mgr_match_bytype
0000e84e g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE
00014f60 g     F .text	00000032 _ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E
00012a38 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE
0001a598 g     F .text	00000014 os_mutex_init
0000f6dc g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E
000114e6 g     F .text	00000044 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE
2000d5c0 g     O .bss	00000028 nrf52_hal_spi0
00008614 g     F .text	00000002 _init
00000020 g       *ABS*	00000000 _imghdr_size
000156d0 g     F .text	00000026 _ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E
00008164  w    F .text	00000002 RTC1_IRQHandler
0000ea5a g     F .text	00000008 _ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E
00008164  w    F .text	00000002 PDM_IRQHandler
00008164  w    F .text	00000002 CCM_AAR_IRQHandler
00008164  w    F .text	00000002 SWI3_EGU3_IRQHandler
00016466 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE
20000124 g       .data	00000000 __aeabi_unwind_cpp_pr0
0000fec8 g     F .text	0000001a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E
0001000e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE
0000f2ee g     F .text	00000008 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E
0001340a g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E
0001a53c g     F .text	00000028 os_msys_get_pkthdr
0001c7e4 g     F .text	0000002c temp_stub_get_raw_temperature
0001a9d4 g     F .text	0000003c os_sched_os_timer_exp
00019e44 g     F .text	00000040 os_dev_create
00011d18 g     F .text	0000001c _ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E
000166c0 g     F .text	0000001a _ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E
00008164  w    F .text	00000002 SWI4_EGU4_IRQHandler
000162ac g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE
0001a780 g     F .text	00000010 os_sanity_check_init
00016b32 g     F .text	0000022c _ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE
00008164  w    F .text	00000002 SAADC_IRQHandler
00019d88 g     F .text	0000000c os_cputime_init
0001a058 g     F .text	00000018 os_eventq_run
0000ee0e g     F .text	0000000c _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE
0001a564 g     F .text	00000034 os_msys_init
00015ee2 g     F .text	0000000e .hidden _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E
00016230 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE
00016090 g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E
0001ae42 g     F .text	0000000a timer_handler
0000e1c0 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE
0001686e g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E
0000ff9e g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E
0000f328 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E
00014f92 g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E
00016866 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E
00016b10 g     F .text	00000022 _ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E
000080f8 g     F .text	0000005c Reset_Handler
000124f4 g     F .text	0000002c _ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE
00008020 g       .text	000000d8 __isr_vector
00018510 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$usize$GT$3fmt17heaf2297ac445d947E
00015134 g     F .text	0000002a .hidden _ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE
0001b6ec g     F .text	00000008 vfprintf
00014b28 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E
0000e9a6 g     F .text	0000000a _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E
0001312c g     F .text	00000006 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E
0001a16a g     F .text	00000036 os_mbuf_get_pkthdr
00008164  w    F .text	00000002 PWM0_IRQHandler
000164c6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E
00000000 g       .svc_table	00000000 SVC_Count
00017d1e g     F .text	00000298 _ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE
00011dec g     F .text	00000088 _ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE
00016aa4 g     F .text	0000002c _ZN4core9panicking5panic17h24d1dd0a9d540834E
0001ae72 g     F .text	0000000a os_arch_in_critical
0000deea g     F .text	0000003a .hidden _ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E
000155ac g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E
0001a820 g     F .text	00000010 os_sanity_init
00012b58 g     F .text	00000018 .hidden _ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE
00015ece g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE
0001515e g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE
00018510 g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E
00014ffc g     F .text	0000001e _ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE
00019934 g     F .text	0000004c __assert_func
00016298 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E
0001589e g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE
00008164  w    F .text	00000002 SWI1_EGU1_IRQHandler
0001517c g     F .text	0000001e _ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE
0001a40a g     F .text	0000001e os_memblock_put_from_cb
0001aff4 g     F .text	00000014 os_set_env
2000d6ac g     O .bss	00000004 g_os_last_ctx_sw_time
00013272 g     F .text	0000000a _ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE
00018ba4 g     F .text	00000048 console_printf
00013288 g     F .text	00000016 .hidden _ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E
00012988 g     F .text	000000b0 _ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE
0000e87a g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE
00013132 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E
00016406 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E
0001b008 g     F .text	00000006 os_arch_init_task_stack
0001cddc g     F .text	00000010 mfg_open
00018510 g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$isize$GT$3fmt17hb33f6f1f0114a92bE
00009ab8 g     F .text	00000012 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE
0001c938 g     F .text	00000030 oc_ri_mem_init
00010ca2 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE
0001b848 g     F .text	00000010 hal_bsp_flash_dev
0001cb18 g     F .text	00000070 flash_map_init
2000d6c0 g     O .bss	00000004 g_os_time
00014f48 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E
00010910 g     F .text	00000392 _ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E
0001b0a6 g     F .text	0000001e os_default_irq_asm
00019980 g     F .text	00000098 os_default_irq
200000e4 g     O .data	00000004 SystemCoreClock
000195e8 g     F .text	00000068 hal_spi_disable
00015d84 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E
0000f7bc g     F .text	0000002e _ZN6mynewt3sys7console6buffer17h6e460748855d110aE
0001ca0a g     F .text	00000002 oc_register_lora
0001837c g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$u16$GT$3fmt17hc265973c39f711faE
0001a1ec g     F .text	000000a8 os_mbuf_append
0001c6b8 g     F .text	0000005c temp_stub_create
0001ce98 g     F .text	00000054 hal_flash_read
00018984 g     F .text	00000048 console_flush
00016618 g     F .text	00000018 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE
00014faa g     F .text	00000018 _ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E
00019bd4 g     F .text	0000001a os_start
0001bdcc g     F .text	00000060 hal_timer_init
00012fdc g     F .text	00000086 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E
0001b7c4 g     F .text	00000010 rust_sysinit
0000e138 g     F .text	00000028 _ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE
00008164  w    F .text	00000002 I2S_IRQHandler
00018ab4 g     F .text	00000010 console_printint
0001aa80 g     F .text	0000002c os_sched_resort
0002113c g     O .text	00000008 MemFile_methods
0001b798 g     F .text	00000018 fmemopen_w
0001407e g     F .text	00000126 _ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E
00019564 g     F .text	00000038 hal_spi_config
0001d240  w    F .text	00000002 .hidden __aeabi_ldiv0
0001a450 g     F .text	00000010 os_mempool_module_init
0001aa50 g     F .text	0000000c os_sched_next_task
00015d28 g     F .text	0000001a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E
00011d4e g     F .text	00000010 _ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E
00018da2 g     F .text	00000034 hal_gpio_read
00019c28 g     F .text	0000001a os_callout_init
0001a52c g     F .text	00000010 os_msys_reset
000099d0 g     F .text	0000000c _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E
0001b6f4 g     F .text	00000024 printf
00008156  w    F .text	00000002 HardFault_Handler
0001cf44 g     F .text	00000000 .hidden __aeabi_uldivmod
0000dcd8 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E
0001ade4 g     F .text	00000038 os_gettimeofday
00018b30 g     F .text	0000001e console_write
000165b6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E
000177e6 g     F .text	00000008 _ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE
0000dd04 g     F .text	0000002c _ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E
00010d9e g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE
00019ab4 g     F .text	00000070 os_init_idle_task
0001aed4 g     F .text	0000008c os_arch_os_init
00010422 g     F .text	000001b6 _ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE
0000ffd6 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E
00019b24 g     F .text	000000b0 os_init
2000d698 g     O .bss	00000008 g_os_mempool_list
00010d94 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE
00008184 g     F .text	00000010 hal_debugger_connected
00011d5e g     F .text	0000001e _ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE
0000e890 g     F .text	0000009a _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E
0000de52 g     F .text	00000038 _ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E
00018b2c g     F .text	00000004 semihosting_console_init
0001cd76 g     F .text	0000001a mfg_seek_next_with_type
0001a664 g     F .text	000000e0 os_mutex_pend
000132ce g     F .text	0000001c _ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E
00008164  w    F .text	00000002 COMP_LPCOMP_IRQHandler
00018d80 g     F .text	00000022 hal_gpio_write
00008600 g     F .text	00000014 _start
0000dd30 g     F .text	00000010 _ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE
0000e972 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE
0000e9da g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE
0001ce3c g     F .text	00000014 __wrap_coap_receive
00016436 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E
2000d5bc g     O .bss	00000001 sysinit_active
0001332e g     F .text	0000006e .hidden _ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E
00014c74 g     F .text	0000002a _ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE
0001b768 g     F .text	0000002e memfile_write
0001d240  w    F .text	00000002 .hidden __aeabi_idiv0
00015ea2 g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE
00019aa8 g     F .text	0000000c os_started
00015b22 g     F .text	0000000a .hidden _ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE
0001c910 g     F .text	00000028 oc_buffer_init
0000fd44 g     F .text	00000056 _ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE
0000ffba g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E
2000d6a0 g     O .bss	0000000c g_os_sanity_check_mu
0000f82e g     F .text	0000002c .hidden _ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E
00008164  w    F .text	00000002 UARTE0_UART0_IRQHandler
0000df5c g     F .text	0000002a _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE
0001d244 g     F .text	00000006 __aeabi_memclr
000087d2 g     F .text	00000270 .hidden _ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E
0001d250 g     F .text	0000009a __aeabi_memset4
00013496 g     F .text	00000a7a _ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E
000177ee g     F .text	00000008 _ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE
00016630 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E
0000ded6 g     F .text	00000014 _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E
0001ad7c g     F .text	00000040 os_time_advance
0001959c g     F .text	0000004c hal_spi_enable
0000e1a2 g     F .text	0000000a _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE
0001cda4 g     F .text	00000038 mfg_init
0000f864 g     F .text	00000010 _ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E
2000d638 g     O .bss	00000050 g_os_main_task
0000dc44 g     F .text	00000030 _ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E
0001d250 g     F .text	0000009a __aeabi_memset8
000182be g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u16$GT$3fmt17hcd88e3dc15351fceE
0000f2e2 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE
0002137c g       .ARM.exidx	00000000 __exidx_end
00008164  w    F .text	00000002 PWM1_IRQHandler
20003a54 g     O .bss	00000018 _ZN22piet_embedded_graphics7display7DISPLAY17ha0ff10e671b220f2E
00016e30 g     F .text	00000058 _ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE
0000f270 g     F .text	0000004e _ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE
00018824 g     F .text	000000e4 _ZN4core3fmt3num3imp54_$LT$impl$u20$core..fmt..Display$u20$for$u20$usize$GT$3fmt17hea84eef47d2fd641E
00018c18 g     F .text	00000034 NVIC_Relocate
00018c00 g     F .text	0000000c sysinit_start
00015e8a g     F .text	00000018 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E
00015eba g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE
00021148 g     O .text	00000018 nrf52k_flash_dev
00015f3e g     F .text	00000058 _ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E
0001be2c g     F .text	000000f8 hal_timer_config
00014f30 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E
00014d4a g     F .text	0000004c _ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E
0001b754 g     F .text	00000014 vprintf
0000f70e g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E
000189cc g     F .text	00000008 disable_buffer
0000dc0a g     F .text	0000003a _ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE
2000d688 g     O .bss	00000004 g_os_started
00016a98 g     F .text	00000008 _ZN4core5panic9PanicInfo7payload17h9302c8d957737573E
00014ef0 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E
20000144 g       .bssnz	00000000 __bssnz_end__
00019eb0 g     F .text	00000020 os_dev_lookup
00015a92 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E
0000febc g     F .text	0000000c _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E
0000e020 g     F .text	0000009c _ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE
00019910 g     F .text	00000010 hal_watchdog_enable
2000d6c4 g     O .bss	0000000c g_hal_os_tick
0001ae6c g     F .text	00000006 os_arch_restore_sr
00019c80 g     F .text	00000078 os_callout_reset
00010da8 g     F .text	0000000a _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE
0001cd90 g     F .text	0000000a mfg_read_tlv_flash_area
000132ea g     F .text	00000024 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E
0000815a  w    F .text	00000002 BusFault_Handler
00016746 g     F .text	0000011c .hidden _ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E
00015e74 g     F .text	00000016 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E
0001a0b8 g     F .text	00000012 os_mqueue_init
0000e44a g     F .text	00000052 _ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE
00016496 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E
00012f1a g     F .text	00000012 _ZN4core3mem4swap17h9f9b2c00c891c39bE
00015758 g     F .text	00000052 _ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E
0000dc74 g     F .text	00000016 _ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE
0001c75a g     F .text	0000000e temp_stub_default_cfg
00008020 g       .imghdr	00000000 __text
00019c44 g     F .text	0000003c os_callout_stop
000156f6 g     F .text	00000062 _ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E
000081c0 g     F .text	0000004c hal_system_clock_start
0001a1b4 g     F .text	00000024 os_mbuf_free_chain
000099f0 g     F .text	000000c0 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E
0000f85a g     F .text	0000000a .hidden _ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E
0001b7d4 g     F .text	00000030 mem_init_mbuf_pool
0000f3d4 g     F .text	00000008 _ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E
0001327c g     F .text	0000000c _ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E
00019080 g     F .text	00000128 hal_i2c_master_write
00015af2 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E
00008164  w    F .text	00000002 QDEC_IRQHandler
00008164  w    F .text	00000002 SWI5_EGU5_IRQHandler
00013478 g     F .text	0000001e _ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E
0000e64e g     F .text	0000003a _ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E
0000d7b6 g     F .text	00000024 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E
00015c20 g     F .text	0000001a _ZN4core5slice14from_raw_parts17h1425df913744b73aE
0001a0b0 g     F .text	00000008 os_eventq_dflt_get
0001c280 g     F .text	00000018 sensor_lock
00012f74 g     F .text	00000014 _ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE
00012d4a g     F .text	00000022 .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E
00018b58 g     F .text	0000004c console_pkg_init
20000104 g     O .data	00000004 sysinit_panic_cb
0001a1d8 g     F .text	00000014 os_mbuf_len
0001a1a0 g     F .text	00000014 os_mbuf_free
000105d8 g     F .text	0000005e _ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E
00015086 g     F .text	000000ae _ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E
0000e864 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE
0000ee1a g     F .text	0000000a _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE
00008194 g     F .text	0000002c hal_system_reset
00018b4e g     F .text	00000008 console_blocking_mode
00010416 g     F .text	0000000c _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E
00015ef0 g     F .text	00000018 .hidden _ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE
00011d94 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE
00011280 g     F .text	00000266 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE
00012f88 g     F .text	0000000c _ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E
0001bfc8 g     F .text	00000010 nrf52_periph_create
00015b74 g     F .text	00000042 _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E
0001a7b4 g     F .text	0000006c os_sanity_run
00009ca4 g     F .text	00003b12 _ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E
0000dca6 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E
0000841c g     F .text	00000010 SystemCoreClockUpdate
00015f96 g     F .text	00000042 _ZN4core3ptr4read17h10ae8fa070723038E
00014b3c g     F .text	0000007e .hidden _ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE
00014dae g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E
000166da g     F .text	0000001a _ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE
0001a3c4 g     F .text	00000014 os_mempool_init
00021144 g     O .text	00000004 stdout
00012ae8 g     F .text	0000000e .hidden _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE
00019e84 g     F .text	0000002c os_dev_initialize_all
0000f40e g     F .text	000000b4 _ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E
00014ed0 g     F .text	00000020 _ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E
0001625a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE
00012b04 g     F .text	00000054 _ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E
00012c58 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE
00019a18 g     F .text	00000078 os_idle_task
0000f4c2 g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17h1982c2483e0a2028E
0001639c g     F .text	0000000a .hidden _ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE
00011cd8 g     F .text	0000001e _ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE
00016604 g     F .text	00000014 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E
0001109e g     F .text	000000b6 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE
0000d89a g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE
000174e4 g     F .text	00000302 _ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE
0001cab0 g     F .text	00000040 flash_area_open
00015d42 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E
00015b6a g     F .text	0000000a _ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E
00014df6 g     F .text	00000024 _ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE
0000d7fe g     F .text	00000076 _ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E
00008164 g     F .text	00000002 Default_Handler
00016a96 g     F .text	00000002 _ZN4core5panic8Location6caller17h4b6b61f9498709a3E
0000fee2 g     F .text	000000bc _ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E
0001a49c g     F .text	0000004c os_msys_register
00015d6a g     F .text	0000001a _ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE
0000fd9a g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E
2000d1b0 g     O .bss	00000004 g_os_sanity_check_list
000128ec g     F .text	00000066 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E
0000e9b0 g     F .text	0000002a _ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE
0000dd40 g     F .text	00000112 _ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E
0000e58a g     F .text	0000001c _ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E
00019650 g     F .text	00000060 hal_spi_init
00008164  w    F .text	00000002 RNG_IRQHandler
0001c1bc g     F .text	00000010 sensor_mgr_unlock
2000d780 g     O .bss	00000004 flash_map_entries
00018202 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u8$GT$3fmt17hb1f1dec5462292d8E
0000dbdc g     F .text	0000002e _ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E
000163a6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E
000154b8 g     F .text	00000050 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE
0001ca0c g     F .text	00000002 oc_register_serial
00008178 g     F .text	0000000c hal_system_init
0001621e g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E
000159f2 g     F .text	00000010 _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E
00012520 g     F .text	00000396 _ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E
0001014e g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE
0001519a g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E
00008164  w    F .text	00000002 GPIOTE_IRQHandler
0000eb24 g     F .text	000000aa _ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E
00008164  w    F .text	00000002 SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQHandler
0001cd64 g     F .text	00000012 mfg_seek_next
0000d8f0 g     F .text	000000a2 _ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E
000157aa g     F .text	0000004a _ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E
00015a62 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E
0000ee24 g     F .text	00000008 _ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE
000151c4 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE
2000011c g     O .data	00000008 g_os_sleep_list
00017254 g     F .text	0000025c _ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E
0001a12e g     F .text	0000000a os_mbuf_pool_init
2000d690 g     O .bss	00000008 g_callout_list
0001a8c0 g     F .text	0000000c os_sched_set_current_task
00019cf8 g     F .text	0000005c os_callout_tick
0000e1ac g     F .text	00000014 _ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E
0000fdb6 g     F .text	0000007c _ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE
0000ea8c g     F .text	0000007c _ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E
000165ee g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E
00019898 g     F .text	00000078 hal_watchdog_init
2000d6b4 g     O .bss	00000001 g_task_id
000185e6 g     F .text	0000007a _ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E
00011d7c g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17hef1277471241eea2E
00019ed0 g     F .text	00000044 os_dev_open
2000d6b0 g     O .bss	00000004 g_current_task
00016862 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE
20000148 g       .bss	00000000 __bss_start__
00016318 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E
0000f2d6 g     F .text	0000000c _ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE
0000e160 g     F .text	00000042 _ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E
0000965a g     F .text	00000010 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E
00019354 g     F .text	00000018 nrf52_spi0_irq_handler
0001c278 g     F .text	00000008 sensor_pkg_init
0000dcb8 g     F .text	00000012 _ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E
0001c88c g     F .text	00000028 temp_stub_config
0001a0f0 g     F .text	0000003e os_mqueue_put
00018824 g     F .text	000000e4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE
000196dc g     F .text	000000ac hal_spi_txrx
00008164  w    F .text	00000002 RTC2_IRQHandler
0001a8b4 g     F .text	0000000c os_sched_get_current_task
20000000 g       .vector_relocation	00000000 __vector_tbl_reloc__
0001314e g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E
0001cb88 g     F .text	00000002 modlog_init
00012eb4 g     F .text	0000005e .hidden _ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E
00015442 g     F .text	00000052 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E
00015b2c g     F .text	0000003e _ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE
00019788 g     F .text	000000e0 hal_spi_txrx_noblock
00016a10 g     F .text	00000038 _ZN4core6option13expect_failed17had6579abaad447b4E
000177f6 g     F .text	00000026 _ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE
0000f7fa g     F .text	0000000a _ZN6mynewt3sys7console5flush17h78b2f38352f0d691E
00008164  w    F .text	00000002 TEMP_IRQHandler
0000f64c g     F .text	00000024 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE
0001a884 g     F .text	00000030 os_sched_ctx_sw_hook
00009bfa g     F .text	00000056 _ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E
0001c318 g     F .text	0000002e sensor_mgr_register
00016a48 g     F .text	0000004a _ZN4core6option18expect_none_failed17h54d938081af97677E
00012d9c g     F .text	000000ba _ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E
00017094 g     F .text	000001c0 _ZN4core3fmt5write17hd95ac78ed22a2252E
00008154  w    F .text	00000002 NMI_Handler
0000fd2c g     F .text	00000016 _ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE
0000fe32 g     F .text	0000008a _ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE
000166b2 g     F .text	0000000e .hidden _ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E
0000f4ca g     F .text	00000008 .hidden _ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E
0000e82c g     F .text	0000000c _ZN4core3ptr5write17h4a80332de2cee3d3E
0001a138 g     F .text	00000032 os_mbuf_get
0000966a g     F .text	000002d8 _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E
2000d6b8 g     O .bss	00000008 g_os_task_list
0000f0c6 g     F .text	0000014c _ZN6mynewt4Strn8validate17h1102378208cc75cdE
00016d5e g     F .text	000000d2 _ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E
0001b718 g     F .text	0000003a vsnprintf
0000dcca g     F .text	0000000e _ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E
00013f4a g     F .text	00000090 _ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E
00012b98 g     F .text	00000056 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E
0001a5ac g     F .text	000000b8 os_mutex_release
0000ee2c g     F .text	00000056 _ZN3log6logger17hf609e7cc1c031552E
00012b70 g     F .text	00000028 .hidden _ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E
0000ebe0 g     F .text	0000004e _ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E
0001c1cc g     F .text	0000000c sensor_mgr_evq_get
00012e90 g     F .text	00000024 .hidden _ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E
0000d7da g     F .text	00000014 _ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E
0001249c g     F .text	00000058 _ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E
0000e98e g     F .text	00000018 _ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E
000155d4 g     F .text	0000006c _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE
0000daf8 g     F .text	000000ba _ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E
2000d68c g     O .bss	00000004 g_os_idle_ctr
00018d1c g     F .text	0000002c hal_gpio_init_in
0000e92a g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE
00010eca g     F .text	00000036 _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E
00008164  w    F .text	00000002 TIMER1_IRQHandler
0001bfd8 g     F .text	00000002 sensor_dev_create
0000e49c g     F .text	0000008e _ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE
00008164  w    F .text	00000002 TIMER0_IRQHandler
0000f07a g     F .text	00000010 _ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE
00018d48 g     F .text	00000038 hal_gpio_init_out
0000f4ec g     F .text	00000160 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE
0000e5be g     F .text	00000012 _ZN4core3mem4swap17hc4afbec7b5ffb125E
000165e6 g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E
00015d1e g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E
000100b6 g     F .text	0000003e .hidden _ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE
200000d8 g       .data	00000000 __data_start__
0001ad70 g     F .text	0000000c os_time_get
00016a98 g     F .text	00000008 _ZN4core5panic8Location4file17h61e77cb122865fdbE
00011c34 g     F .text	00000036 _ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E
0001a428 g     F .text	00000026 os_memblock_put
00013fda g     F .text	000000a4 _ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE
0001a8cc g     F .text	00000090 os_sched_sleep
0000e968 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE
0001c1a0 g     F .text	0000001c sensor_mgr_lock
0001cf74 g     F .text	000002cc .hidden __udivmoddi4
00012f94 g     F .text	00000008 _ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E
0001bb50 g     F .text	000000a0 os_tick_init
00014cf8 g     F .text	00000052 _ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E
00016a92 g     F .text	00000004 _ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E
00008164  w    F .text	00000002 RTC0_IRQHandler
0000f76e g     F .text	00000044 _ZN6mynewt3sys7console5print17hc13a6743274d87fcE
0001aa10 g     F .text	00000040 os_sched_wakeup_ticks
00016284 g     F .text	00000014 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE
0000dbb2 g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE
0000fff2 g     F .text	0000001c _ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE
0001bf24 g     F .text	00000030 hal_timer_read
20000144 g       .data	00000000 __data_end__
00018e50 g     F .text	00000028 hal_gpio_irq_enable
00012f2c g     F .text	00000032 .hidden _ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE
0001c968 g     F .text	0000000c oc_evq_set
0001c4e8 g     F .text	00000018 is_sensor_node
00009c50 g     F .text	00000052 _ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E
00018202 g     F .text	0000005e _ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE
0001c9e0 g     F .text	00000024 oc_init
0001843a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$u32$GT$3fmt17h54b904d9d5d295daE
0001843a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$usize$GT$3fmt17h85ec06f2c95e1ecaE
00010cd8 g     F .text	000000bc _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE
000179d2 g     F .text	0000034c _ZN4core3str16slice_error_fail17h232f9181d55b3da9E
00016002 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE
2000d748 g     O .bss	00000018 sensor_base_ts
00018730 g     F .text	000000f4 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E
0002137c g       .ARM.exidx	00000000 __etext
00012c10 g     F .text	00000022 .hidden _ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E
000182be g     F .text	000000be _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E
00018bec g     F .text	0000000c console_get_ticks
00008164  w    F .text	00000002 SPIM1_SPIS1_TWIM1_TWIS1_SPI1_TWI1_IRQHandler
0000f7b2 g     F .text	0000000a _ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E
20000108 g     O .data	00000004 hal_twi_i2c1
000152b6 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E
0001abf0 g     F .text	000000d8 os_task_init
00011dbe g     F .text	0000000a _ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E
0000f6e6 g     F .text	00000028 _ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E
0000e570 g     F .text	0000001a _ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE
0000e958 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E
000166f4 g     F .text	00000042 _ZN4core3ptr4read17h27a035d1812d8297E
00016586 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E
0000de8a g     F .text	0000004c _ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E
0001aabc g     F .text	00000064 os_sem_release
0001d250 g     F .text	0000009a __aeabi_memset
0001a294 g     F .text	000000b8 os_mbuf_dup
0001b054 g     F .text	00000046 PendSV_Handler
0001b00e g     F .text	00000046 SVC_Handler
0001ae60 g     F .text	0000000c os_arch_save_sr
00014f10 g     F .text	00000020 _ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E
00008164  w    F .text	00000002 PWM2_IRQHandler
00009650 g     F .text	0000000a _ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E
0000815c  w    F .text	00000002 UsageFault_Handler
0001bdbc g     F .text	00000010 nrf52_timer0_irq_handler
0001ae7c g     F .text	00000040 os_arch_task_stack_init
0000d874 g     F .text	00000026 _ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE
2000d788 g       .bss	00000000 __bss_end__
0001a3d8 g     F .text	00000032 os_memblock_get
2000d784 g     O .bss	00000004 flash_map
00008164  w    F .text	00000002 RADIO_IRQHandler
000160f4 g     F .text	000000c6 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E
0000e688 g     F .text	00000056 _ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE
00008164  w    F .text	00000002 TIMER2_IRQHandler
00013068 g     F .text	000000c4 _ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E
00019920 g     F .text	00000014 hal_watchdog_tickle
00011cc8 g     F .text	00000010 _ZN4core3ptr13drop_in_place17h0697ea54608a328fE
00015a02 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE
00019fde g     F .text	0000007a os_eventq_get
0001cf24 g     F .text	00000020 sprintf
0001ae1c g     F .text	00000026 os_time_ms_to_ticks
0000f08a g     F .text	0000003c _ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E
00009af8 g     F .text	00000014 _ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E
000165ea g     F .text	00000004 .hidden _ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E
00012952 g     F .text	00000036 _ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE
2000d1e8 g     O .bss	00000004 os_flags
0001ca10 g     F .text	00000028 oc_rep_init
0001b120 g     F .text	0000001a memcpy
0000df86 g     F .text	0000009a _ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E
0001b804 g     F .text	00000044 sysinit_app
00015c54 g     F .text	0000000a _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE
0001602c g     F .text	00000064 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE
000163d6 g     F .text	00000030 _ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E
00018660 g     F .text	000000d0 _ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E
0000f874 g     F .text	0000036c _ZN6mynewt3hal3SPI4init17h97467ea724680fb5E
00013200 g     F .text	00000016 _ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE
00018af0 g     F .text	0000003c console_out_nolock
2000d760 g     O .bss	00000020 oc_transports
00018dd8 g     F .text	00000078 hal_gpio_irq_init
0001501a g     F .text	00000020 _ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE
0001b18e g     F .text	00000010 strlen
0001ab20 g     F .text	000000b8 os_sem_pend
0000e1dc g     F .text	00000016 _ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE
0001bab8 g     F .text	00000098 os_tick_idle
00013246 g     F .text	00000010 _ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E
00008164  w    F .text	00000002 SWI2_EGU2_IRQHandler
00000000 g       .svc_table	00000000 SVC_Table
0001339c g     F .text	0000006e .hidden _ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE
00015c3a g     F .text	0000001a _ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E
2000fe50 g       *ABS*	00000000 __HeapLimit
00019bf0 g     F .text	00000038 os_pkg_init
20000144 g       .bssnz	00000000 __bssnz_start__
00010062 g     F .text	0000002a _ZN4core3fmt10ArgumentV13new17had883e363867a05eE
0000e52a g     F .text	00000012 _ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E
00011c88 g     F .text	0000001a .hidden _ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E
000157f4 g     F .text	000000aa _ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE
00008164  w    F .text	00000002 ECB_IRQHandler
0000fbe0 g     F .text	00000004 _ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E
00008158  w    F .text	00000002 MemoryManagement_Handler
0001843a g     F .text	000000d6 _ZN4core3fmt3num55_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$isize$GT$3fmt17hc11e05ad6528dc14E
00014bba g     F .text	000000ba _ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE
0000d7ee g     F .text	00000010 _ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE
00019f76 g     F .text	00000068 os_eventq_put
20010000 g       .bss	00000000 __StackTop
00015582 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E
00010f00 g     F .text	0000003c _ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E
0000e3a6 g     F .text	00000012 _ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE
00015494 g     F .text	00000012 _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE
0001cd9a g     F .text	0000000a mfg_read_tlv_mmr_ref
0000f2be g     F .text	00000018 _ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E
00012d6c g     F .text	00000030 .hidden _ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E
0001c5a8 g     F .text	000000c0 sensor_network_init
0001843a g     F .text	000000d6 _ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE
00012af6 g     F .text	0000000e .hidden _ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE
00015fd8 g     F .text	0000002a _ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE
0000f36a g     F .text	0000006a _ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE
000132b6 g     F .text	00000018 _ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE



Disassembly of section .text:

00008020 <__isr_vector>:
    8020:	20010000 	.word	0x20010000
    8024:	000080f9 	.word	0x000080f9
    8028:	00008155 	.word	0x00008155
    802c:	00008157 	.word	0x00008157
	...
    804c:	0001b00f 	.word	0x0001b00f
	...
    8058:	0001b055 	.word	0x0001b055
    805c:	0001b09b 	.word	0x0001b09b
    8060:	00008165 	.word	0x00008165
    8064:	00008165 	.word	0x00008165
    8068:	00008165 	.word	0x00008165
    806c:	00008165 	.word	0x00008165
    8070:	00008165 	.word	0x00008165
    8074:	00008165 	.word	0x00008165
    8078:	00008165 	.word	0x00008165
    807c:	00008165 	.word	0x00008165
    8080:	00008165 	.word	0x00008165
    8084:	00008165 	.word	0x00008165
    8088:	00008165 	.word	0x00008165
    808c:	00008165 	.word	0x00008165
    8090:	00008165 	.word	0x00008165
    8094:	00008165 	.word	0x00008165
    8098:	00008165 	.word	0x00008165
    809c:	00008165 	.word	0x00008165
    80a0:	00008165 	.word	0x00008165
    80a4:	00008165 	.word	0x00008165
    80a8:	00008165 	.word	0x00008165
    80ac:	00008165 	.word	0x00008165
    80b0:	00008165 	.word	0x00008165
    80b4:	00008165 	.word	0x00008165
    80b8:	00008165 	.word	0x00008165
    80bc:	00008165 	.word	0x00008165
    80c0:	00008165 	.word	0x00008165
    80c4:	00008165 	.word	0x00008165
    80c8:	00008165 	.word	0x00008165
    80cc:	00008165 	.word	0x00008165
    80d0:	00008165 	.word	0x00008165
    80d4:	00008165 	.word	0x00008165
	...
    80e0:	00008165 	.word	0x00008165
    80e4:	00008165 	.word	0x00008165
    80e8:	00008165 	.word	0x00008165
    80ec:	00008165 	.word	0x00008165
    80f0:	00008165 	.word	0x00008165
    80f4:	00008165 	.word	0x00008165

000080f8 <Reset_Handler>:
    .type    Reset_Handler, %function
Reset_Handler:
    .fnstart

    /* Clear BSS */
    mov     r0, #0
    80f8:	f04f 0000 	mov.w	r0, #0
    ldr     r2, =__bss_start__
    80fc:	4a0c      	ldr	r2, [pc, #48]	; (8130 <.bss_zero_loop+0x30>)
    ldr     r3, =__bss_end__
    80fe:	4b0d      	ldr	r3, [pc, #52]	; (8134 <.bss_zero_loop+0x34>)

00008100 <.bss_zero_loop>:
.bss_zero_loop:
    cmp     r2, r3
    8100:	429a      	cmp	r2, r3
    itt     lt
    8102:	bfbc      	itt	lt
    strlt   r0, [r2], #4
    8104:	f842 0b04 	strlt.w	r0, [r2], #4
    blt    .bss_zero_loop
    8108:	e7fa      	blt.n	8100 <.bss_zero_loop>
 *      of copy from/to are specified by following symbols evaluated in
 *      linker script.
 *      __etext: End of code section, i.e., begin of data sections to copy from.
 *      __data_start__/__data_end__: RAM address range that data should be
 *      copied to. Both must be aligned to 4 bytes boundary.  */
    ldr    r1, =__etext
    810a:	490b      	ldr	r1, [pc, #44]	; (8138 <.bss_zero_loop+0x38>)
    ldr    r2, =__data_start__
    810c:	4a0b      	ldr	r2, [pc, #44]	; (813c <.bss_zero_loop+0x3c>)
    ldr    r3, =__data_end__
    810e:	4b0c      	ldr	r3, [pc, #48]	; (8140 <.bss_zero_loop+0x40>)

    subs    r3, r2
    8110:	1a9b      	subs	r3, r3, r2
    ble     .LC0
    8112:	dd03      	ble.n	811c <.bss_zero_loop+0x1c>

.LC1:
    subs    r3, 4
    8114:	3b04      	subs	r3, #4
    ldr    r0, [r1,r3]
    8116:	58c8      	ldr	r0, [r1, r3]
    str    r0, [r2,r3]
    8118:	50d0      	str	r0, [r2, r3]
    bgt    .LC1
    811a:	dcfb      	bgt.n	8114 <.bss_zero_loop+0x14>

.LC0:

    LDR     R0, =__HeapBase
    811c:	4809      	ldr	r0, [pc, #36]	; (8144 <.bss_zero_loop+0x44>)
    LDR     R1, =__HeapLimit
    811e:	490a      	ldr	r1, [pc, #40]	; (8148 <.bss_zero_loop+0x48>)
    BL      _sbrkInit
    8120:	f000 f822 	bl	8168 <_sbrkInit>

    LDR     R0, =SystemInit
    8124:	4809      	ldr	r0, [pc, #36]	; (814c <.bss_zero_loop+0x4c>)
    BLX     R0
    8126:	4780      	blx	r0

    BL      hal_system_init
    8128:	f000 f826 	bl	8178 <hal_system_init>

    LDR     R0, =_start
    812c:	4808      	ldr	r0, [pc, #32]	; (8150 <.bss_zero_loop+0x50>)
    BX      R0
    812e:	4700      	bx	r0
    ldr     r2, =__bss_start__
    8130:	20000148 	.word	0x20000148
    ldr     r3, =__bss_end__
    8134:	2000d788 	.word	0x2000d788
    ldr    r1, =__etext
    8138:	0002137c 	.word	0x0002137c
    ldr    r2, =__data_start__
    813c:	200000d8 	.word	0x200000d8
    ldr    r3, =__data_end__
    8140:	20000144 	.word	0x20000144
    LDR     R0, =__HeapBase
    8144:	2000d788 	.word	0x2000d788
    LDR     R1, =__HeapLimit
    8148:	2000fe50 	.word	0x2000fe50
    LDR     R0, =SystemInit
    814c:	0000842d 	.word	0x0000842d
    LDR     R0, =_start
    8150:	00008601 	.word	0x00008601

00008154 <NMI_Handler>:
/* Dummy Exception Handlers (infinite loops which can be modified) */

    .weak   NMI_Handler
    .type   NMI_Handler, %function
NMI_Handler:
    B       .
    8154:	e7fe      	b.n	8154 <NMI_Handler>

00008156 <HardFault_Handler>:


    .weak   HardFault_Handler
    .type   HardFault_Handler, %function
HardFault_Handler:
    B       .
    8156:	e7fe      	b.n	8156 <HardFault_Handler>

00008158 <MemoryManagement_Handler>:


    .weak   MemoryManagement_Handler
    .type   MemoryManagement_Handler, %function
MemoryManagement_Handler:
    B       .
    8158:	e7fe      	b.n	8158 <MemoryManagement_Handler>

0000815a <BusFault_Handler>:


    .weak   BusFault_Handler
    .type   BusFault_Handler, %function
BusFault_Handler:
    B       .
    815a:	e7fe      	b.n	815a <BusFault_Handler>

0000815c <UsageFault_Handler>:


    .weak   UsageFault_Handler
    .type   UsageFault_Handler, %function
UsageFault_Handler:
    B       .
    815c:	e7fe      	b.n	815c <UsageFault_Handler>


    .weak   SVC_Handler
    .type   SVC_Handler, %function
SVC_Handler:
    B       .
    815e:	e7fe      	b.n	815e <UsageFault_Handler+0x2>


    .weak   PendSV_Handler
    .type   PendSV_Handler, %function
PendSV_Handler:
    B       .
    8160:	e7fe      	b.n	8160 <UsageFault_Handler+0x4>


    .weak   SysTick_Handler
    .type   SysTick_Handler, %function
SysTick_Handler:
    B       .
    8162:	e7fe      	b.n	8162 <UsageFault_Handler+0x6>

00008164 <Default_Handler>:
/* IRQ Handlers */

    .globl  Default_Handler
    .type   Default_Handler, %function
Default_Handler:
    B       .
    8164:	e7fe      	b.n	8164 <Default_Handler>
    8166:	bf00      	nop

00008168 <_sbrkInit>:
static char *sbrkLimit __attribute__ ((section (".data")));
static char *brk __attribute__ ((section (".data")));

void
_sbrkInit(char *base, char *limit) {
    sbrkBase = base;
    8168:	4b02      	ldr	r3, [pc, #8]	; (8174 <_sbrkInit+0xc>)
    816a:	6018      	str	r0, [r3, #0]
    sbrkLimit = limit;
    816c:	6059      	str	r1, [r3, #4]
    brk = base;
    816e:	6098      	str	r0, [r3, #8]
}
    8170:	4770      	bx	lr
    8172:	bf00      	nop
    8174:	200000d8 	.word	0x200000d8

00008178 <hal_system_init>:
 */
void
hal_system_init(void)
{
#if MYNEWT_VAL(MCU_DCDC_ENABLED)
    NRF_POWER->DCDCEN = 1;
    8178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    817c:	2201      	movs	r2, #1
    817e:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
#endif
}
    8182:	4770      	bx	lr

00008184 <hal_debugger_connected>:
}

int
hal_debugger_connected(void)
{
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
    8184:	4b02      	ldr	r3, [pc, #8]	; (8190 <hal_debugger_connected+0xc>)
    8186:	6818      	ldr	r0, [r3, #0]
}
    8188:	f000 0001 	and.w	r0, r0, #1
    818c:	4770      	bx	lr
    818e:	bf00      	nop
    8190:	e000edf0 	.word	0xe000edf0

00008194 <hal_system_reset>:
{
    8194:	b508      	push	{r3, lr}
        if (hal_debugger_connected()) {
    8196:	f7ff fff5 	bl	8184 <hal_debugger_connected>
    819a:	b100      	cbz	r0, 819e <hal_system_reset+0xa>
            asm("bkpt");
    819c:	be00      	bkpt	0x0000
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    819e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    81a2:	4905      	ldr	r1, [pc, #20]	; (81b8 <hal_system_reset+0x24>)
    81a4:	68ca      	ldr	r2, [r1, #12]
    81a6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    81aa:	4b04      	ldr	r3, [pc, #16]	; (81bc <hal_system_reset+0x28>)
    81ac:	4313      	orrs	r3, r2
    81ae:	60cb      	str	r3, [r1, #12]
    81b0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    81b4:	bf00      	nop
    81b6:	e7fd      	b.n	81b4 <hal_system_reset+0x20>
    81b8:	e000ed00 	.word	0xe000ed00
    81bc:	05fa0004 	.word	0x05fa0004

000081c0 <hal_system_clock_start>:
        }
    }
#endif

    /* Check if this clock source is already running */
    if ((NRF_CLOCK->LFCLKSTAT & regmsk) != regval) {
    81c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81c4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81c8:	4b0f      	ldr	r3, [pc, #60]	; (8208 <hal_system_clock_start+0x48>)
    81ca:	4013      	ands	r3, r2
    81cc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    81d0:	d018      	beq.n	8204 <hal_system_clock_start+0x44>
        NRF_CLOCK->TASKS_LFCLKSTOP = 1;
    81d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81d6:	2201      	movs	r2, #1
    81d8:	60da      	str	r2, [r3, #12]
        NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    81da:	2100      	movs	r1, #0
    81dc:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
        NRF_CLOCK->LFCLKSRC = clksrc;
    81e0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
        NRF_CLOCK->TASKS_LFCLKSTART = 1;
    81e4:	609a      	str	r2, [r3, #8]

        /* Wait here till started! */
        while (1) {
            if (NRF_CLOCK->EVENTS_LFCLKSTARTED) {
    81e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81ea:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    81ee:	2b00      	cmp	r3, #0
    81f0:	d0f9      	beq.n	81e6 <hal_system_clock_start+0x26>
                if ((NRF_CLOCK->LFCLKSTAT & regmsk) == regval) {
    81f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    81f6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    81fa:	4b03      	ldr	r3, [pc, #12]	; (8208 <hal_system_clock_start+0x48>)
    81fc:	4013      	ands	r3, r2
    81fe:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
    8202:	d1f0      	bne.n	81e6 <hal_system_clock_start+0x26>
                }
            }
        }
    }
#endif
}
    8204:	4770      	bx	lr
    8206:	bf00      	nop
    8208:	00010003 	.word	0x00010003

0000820c <errata_16>:
}

#ifdef NRF52
static bool errata_16(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    820c:	4b0b      	ldr	r3, [pc, #44]	; (823c <errata_16+0x30>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	2b06      	cmp	r3, #6
    8212:	d001      	beq.n	8218 <errata_16+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8214:	2000      	movs	r0, #0
    8216:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8218:	4b09      	ldr	r3, [pc, #36]	; (8240 <errata_16+0x34>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	f013 0f0f 	tst.w	r3, #15
    8220:	d107      	bne.n	8232 <errata_16+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8222:	4b08      	ldr	r3, [pc, #32]	; (8244 <errata_16+0x38>)
    8224:	681b      	ldr	r3, [r3, #0]
    8226:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    822a:	2b30      	cmp	r3, #48	; 0x30
    822c:	d003      	beq.n	8236 <errata_16+0x2a>
    return false;
    822e:	2000      	movs	r0, #0
    8230:	4770      	bx	lr
    8232:	2000      	movs	r0, #0
    8234:	4770      	bx	lr
            return true;
    8236:	2001      	movs	r0, #1
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop
    823c:	f0000fe0 	.word	0xf0000fe0
    8240:	f0000fe4 	.word	0xf0000fe4
    8244:	f0000fe8 	.word	0xf0000fe8

00008248 <errata_31>:

static bool errata_31(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8248:	4b0f      	ldr	r3, [pc, #60]	; (8288 <errata_31+0x40>)
    824a:	781b      	ldrb	r3, [r3, #0]
    824c:	2b06      	cmp	r3, #6
    824e:	d001      	beq.n	8254 <errata_31+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    8250:	2000      	movs	r0, #0
    8252:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8254:	4b0d      	ldr	r3, [pc, #52]	; (828c <errata_31+0x44>)
    8256:	681b      	ldr	r3, [r3, #0]
    8258:	f013 0f0f 	tst.w	r3, #15
    825c:	d10b      	bne.n	8276 <errata_31+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    825e:	4b0c      	ldr	r3, [pc, #48]	; (8290 <errata_31+0x48>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8266:	2b30      	cmp	r3, #48	; 0x30
    8268:	d007      	beq.n	827a <errata_31+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    826a:	2b40      	cmp	r3, #64	; 0x40
    826c:	d007      	beq.n	827e <errata_31+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    826e:	2b50      	cmp	r3, #80	; 0x50
    8270:	d007      	beq.n	8282 <errata_31+0x3a>
    return false;
    8272:	2000      	movs	r0, #0
    8274:	4770      	bx	lr
    8276:	2000      	movs	r0, #0
    8278:	4770      	bx	lr
            return true;
    827a:	2001      	movs	r0, #1
    827c:	4770      	bx	lr
            return true;
    827e:	2001      	movs	r0, #1
    8280:	4770      	bx	lr
            return true;
    8282:	2001      	movs	r0, #1
}
    8284:	4770      	bx	lr
    8286:	bf00      	nop
    8288:	f0000fe0 	.word	0xf0000fe0
    828c:	f0000fe4 	.word	0xf0000fe4
    8290:	f0000fe8 	.word	0xf0000fe8

00008294 <errata_32>:

static bool errata_32(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8294:	4b0b      	ldr	r3, [pc, #44]	; (82c4 <errata_32+0x30>)
    8296:	781b      	ldrb	r3, [r3, #0]
    8298:	2b06      	cmp	r3, #6
    829a:	d001      	beq.n	82a0 <errata_32+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    829c:	2000      	movs	r0, #0
    829e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82a0:	4b09      	ldr	r3, [pc, #36]	; (82c8 <errata_32+0x34>)
    82a2:	681b      	ldr	r3, [r3, #0]
    82a4:	f013 0f0f 	tst.w	r3, #15
    82a8:	d107      	bne.n	82ba <errata_32+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82aa:	4b08      	ldr	r3, [pc, #32]	; (82cc <errata_32+0x38>)
    82ac:	681b      	ldr	r3, [r3, #0]
    82ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82b2:	2b30      	cmp	r3, #48	; 0x30
    82b4:	d003      	beq.n	82be <errata_32+0x2a>
    return false;
    82b6:	2000      	movs	r0, #0
    82b8:	4770      	bx	lr
    82ba:	2000      	movs	r0, #0
    82bc:	4770      	bx	lr
            return true;
    82be:	2001      	movs	r0, #1
}
    82c0:	4770      	bx	lr
    82c2:	bf00      	nop
    82c4:	f0000fe0 	.word	0xf0000fe0
    82c8:	f0000fe4 	.word	0xf0000fe4
    82cc:	f0000fe8 	.word	0xf0000fe8

000082d0 <errata_36>:

static bool errata_36(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82d0:	4b0f      	ldr	r3, [pc, #60]	; (8310 <errata_36+0x40>)
    82d2:	781b      	ldrb	r3, [r3, #0]
    82d4:	2b06      	cmp	r3, #6
    82d6:	d001      	beq.n	82dc <errata_36+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    82d8:	2000      	movs	r0, #0
    82da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    82dc:	4b0d      	ldr	r3, [pc, #52]	; (8314 <errata_36+0x44>)
    82de:	681b      	ldr	r3, [r3, #0]
    82e0:	f013 0f0f 	tst.w	r3, #15
    82e4:	d10b      	bne.n	82fe <errata_36+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    82e6:	4b0c      	ldr	r3, [pc, #48]	; (8318 <errata_36+0x48>)
    82e8:	681b      	ldr	r3, [r3, #0]
    82ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    82ee:	2b30      	cmp	r3, #48	; 0x30
    82f0:	d007      	beq.n	8302 <errata_36+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    82f2:	2b40      	cmp	r3, #64	; 0x40
    82f4:	d007      	beq.n	8306 <errata_36+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    82f6:	2b50      	cmp	r3, #80	; 0x50
    82f8:	d007      	beq.n	830a <errata_36+0x3a>
    return false;
    82fa:	2000      	movs	r0, #0
    82fc:	4770      	bx	lr
    82fe:	2000      	movs	r0, #0
    8300:	4770      	bx	lr
            return true;
    8302:	2001      	movs	r0, #1
    8304:	4770      	bx	lr
            return true;
    8306:	2001      	movs	r0, #1
    8308:	4770      	bx	lr
            return true;
    830a:	2001      	movs	r0, #1
}
    830c:	4770      	bx	lr
    830e:	bf00      	nop
    8310:	f0000fe0 	.word	0xf0000fe0
    8314:	f0000fe4 	.word	0xf0000fe4
    8318:	f0000fe8 	.word	0xf0000fe8

0000831c <errata_37>:

static bool errata_37(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    831c:	4b0b      	ldr	r3, [pc, #44]	; (834c <errata_37+0x30>)
    831e:	781b      	ldrb	r3, [r3, #0]
    8320:	2b06      	cmp	r3, #6
    8322:	d001      	beq.n	8328 <errata_37+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8324:	2000      	movs	r0, #0
    8326:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8328:	4b09      	ldr	r3, [pc, #36]	; (8350 <errata_37+0x34>)
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	f013 0f0f 	tst.w	r3, #15
    8330:	d107      	bne.n	8342 <errata_37+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    8332:	4b08      	ldr	r3, [pc, #32]	; (8354 <errata_37+0x38>)
    8334:	681b      	ldr	r3, [r3, #0]
    8336:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    833a:	2b30      	cmp	r3, #48	; 0x30
    833c:	d003      	beq.n	8346 <errata_37+0x2a>
    return false;
    833e:	2000      	movs	r0, #0
    8340:	4770      	bx	lr
    8342:	2000      	movs	r0, #0
    8344:	4770      	bx	lr
            return true;
    8346:	2001      	movs	r0, #1
}
    8348:	4770      	bx	lr
    834a:	bf00      	nop
    834c:	f0000fe0 	.word	0xf0000fe0
    8350:	f0000fe4 	.word	0xf0000fe4
    8354:	f0000fe8 	.word	0xf0000fe8

00008358 <errata_57>:

static bool errata_57(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8358:	4b0b      	ldr	r3, [pc, #44]	; (8388 <errata_57+0x30>)
    835a:	781b      	ldrb	r3, [r3, #0]
    835c:	2b06      	cmp	r3, #6
    835e:	d001      	beq.n	8364 <errata_57+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
            return true;
        }
    }

    return false;
    8360:	2000      	movs	r0, #0
    8362:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8364:	4b09      	ldr	r3, [pc, #36]	; (838c <errata_57+0x34>)
    8366:	681b      	ldr	r3, [r3, #0]
    8368:	f013 0f0f 	tst.w	r3, #15
    836c:	d107      	bne.n	837e <errata_57+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    836e:	4b08      	ldr	r3, [pc, #32]	; (8390 <errata_57+0x38>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    8376:	2b30      	cmp	r3, #48	; 0x30
    8378:	d003      	beq.n	8382 <errata_57+0x2a>
    return false;
    837a:	2000      	movs	r0, #0
    837c:	4770      	bx	lr
    837e:	2000      	movs	r0, #0
    8380:	4770      	bx	lr
            return true;
    8382:	2001      	movs	r0, #1
}
    8384:	4770      	bx	lr
    8386:	bf00      	nop
    8388:	f0000fe0 	.word	0xf0000fe0
    838c:	f0000fe4 	.word	0xf0000fe4
    8390:	f0000fe8 	.word	0xf0000fe8

00008394 <errata_66>:

static bool errata_66(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    8394:	4b0b      	ldr	r3, [pc, #44]	; (83c4 <errata_66+0x30>)
    8396:	781b      	ldrb	r3, [r3, #0]
    8398:	2b06      	cmp	r3, #6
    839a:	d001      	beq.n	83a0 <errata_66+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    839c:	2000      	movs	r0, #0
    839e:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83a0:	4b09      	ldr	r3, [pc, #36]	; (83c8 <errata_66+0x34>)
    83a2:	681b      	ldr	r3, [r3, #0]
    83a4:	f013 0f0f 	tst.w	r3, #15
    83a8:	d107      	bne.n	83ba <errata_66+0x26>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83aa:	4b08      	ldr	r3, [pc, #32]	; (83cc <errata_66+0x38>)
    83ac:	681b      	ldr	r3, [r3, #0]
    83ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83b2:	2b50      	cmp	r3, #80	; 0x50
    83b4:	d003      	beq.n	83be <errata_66+0x2a>
    return false;
    83b6:	2000      	movs	r0, #0
    83b8:	4770      	bx	lr
    83ba:	2000      	movs	r0, #0
    83bc:	4770      	bx	lr
            return true;
    83be:	2001      	movs	r0, #1
}
    83c0:	4770      	bx	lr
    83c2:	bf00      	nop
    83c4:	f0000fe0 	.word	0xf0000fe0
    83c8:	f0000fe4 	.word	0xf0000fe4
    83cc:	f0000fe8 	.word	0xf0000fe8

000083d0 <errata_108>:


static bool errata_108(void)
{
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83d0:	4b0f      	ldr	r3, [pc, #60]	; (8410 <errata_108+0x40>)
    83d2:	781b      	ldrb	r3, [r3, #0]
    83d4:	2b06      	cmp	r3, #6
    83d6:	d001      	beq.n	83dc <errata_108+0xc>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
            return true;
        }
    }

    return false;
    83d8:	2000      	movs	r0, #0
    83da:	4770      	bx	lr
    if ((((*(uint32_t *)0xF0000FE0) & 0x000000FF) == 0x6) && (((*(uint32_t *)0xF0000FE4) & 0x0000000F) == 0x0)){
    83dc:	4b0d      	ldr	r3, [pc, #52]	; (8414 <errata_108+0x44>)
    83de:	681b      	ldr	r3, [r3, #0]
    83e0:	f013 0f0f 	tst.w	r3, #15
    83e4:	d10b      	bne.n	83fe <errata_108+0x2e>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x30){
    83e6:	4b0c      	ldr	r3, [pc, #48]	; (8418 <errata_108+0x48>)
    83e8:	681b      	ldr	r3, [r3, #0]
    83ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    83ee:	2b30      	cmp	r3, #48	; 0x30
    83f0:	d007      	beq.n	8402 <errata_108+0x32>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x40){
    83f2:	2b40      	cmp	r3, #64	; 0x40
    83f4:	d007      	beq.n	8406 <errata_108+0x36>
        if (((*(uint32_t *)0xF0000FE8) & 0x000000F0) == 0x50){
    83f6:	2b50      	cmp	r3, #80	; 0x50
    83f8:	d007      	beq.n	840a <errata_108+0x3a>
    return false;
    83fa:	2000      	movs	r0, #0
    83fc:	4770      	bx	lr
    83fe:	2000      	movs	r0, #0
    8400:	4770      	bx	lr
            return true;
    8402:	2001      	movs	r0, #1
    8404:	4770      	bx	lr
            return true;
    8406:	2001      	movs	r0, #1
    8408:	4770      	bx	lr
            return true;
    840a:	2001      	movs	r0, #1
}
    840c:	4770      	bx	lr
    840e:	bf00      	nop
    8410:	f0000fe0 	.word	0xf0000fe0
    8414:	f0000fe4 	.word	0xf0000fe4
    8418:	f0000fe8 	.word	0xf0000fe8

0000841c <SystemCoreClockUpdate>:
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    841c:	4b01      	ldr	r3, [pc, #4]	; (8424 <SystemCoreClockUpdate+0x8>)
    841e:	4a02      	ldr	r2, [pc, #8]	; (8428 <SystemCoreClockUpdate+0xc>)
    8420:	601a      	str	r2, [r3, #0]
}
    8422:	4770      	bx	lr
    8424:	200000e4 	.word	0x200000e4
    8428:	03d09000 	.word	0x03d09000

0000842c <SystemInit>:
{
    842c:	b508      	push	{r3, lr}
    if (errata_16()){
    842e:	f7ff feed 	bl	820c <errata_16>
    8432:	b110      	cbz	r0, 843a <SystemInit+0xe>
        *(volatile uint32_t *)0x4007C074 = 3131961357ul;
    8434:	4b65      	ldr	r3, [pc, #404]	; (85cc <SystemInit+0x1a0>)
    8436:	4a66      	ldr	r2, [pc, #408]	; (85d0 <SystemInit+0x1a4>)
    8438:	601a      	str	r2, [r3, #0]
    if (errata_31()){
    843a:	f7ff ff05 	bl	8248 <errata_31>
    843e:	b128      	cbz	r0, 844c <SystemInit+0x20>
        *(volatile uint32_t *)0x4000053C = ((*(volatile uint32_t *)0x10000244) & 0x0000E000) >> 13;
    8440:	4b64      	ldr	r3, [pc, #400]	; (85d4 <SystemInit+0x1a8>)
    8442:	681b      	ldr	r3, [r3, #0]
    8444:	f3c3 3342 	ubfx	r3, r3, #13, #3
    8448:	4a63      	ldr	r2, [pc, #396]	; (85d8 <SystemInit+0x1ac>)
    844a:	6013      	str	r3, [r2, #0]
    if (errata_32()){
    844c:	f7ff ff22 	bl	8294 <errata_32>
    8450:	b120      	cbz	r0, 845c <SystemInit+0x30>
        CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
    8452:	4a62      	ldr	r2, [pc, #392]	; (85dc <SystemInit+0x1b0>)
    8454:	68d3      	ldr	r3, [r2, #12]
    8456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    845a:	60d3      	str	r3, [r2, #12]
    if (errata_36()){
    845c:	f7ff ff38 	bl	82d0 <errata_36>
    8460:	b140      	cbz	r0, 8474 <SystemInit+0x48>
        NRF_CLOCK->EVENTS_DONE = 0;
    8462:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8466:	2200      	movs	r2, #0
    8468:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
    846c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
    8470:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    if (errata_37()){
    8474:	f7ff ff52 	bl	831c <errata_37>
    8478:	b110      	cbz	r0, 8480 <SystemInit+0x54>
        *(volatile uint32_t *)0x400005A0 = 0x3;
    847a:	4b59      	ldr	r3, [pc, #356]	; (85e0 <SystemInit+0x1b4>)
    847c:	2203      	movs	r2, #3
    847e:	601a      	str	r2, [r3, #0]
    if (errata_57()){
    8480:	f7ff ff6a 	bl	8358 <errata_57>
    8484:	b158      	cbz	r0, 849e <SystemInit+0x72>
        *(volatile uint32_t *)0x40005610 = 0x00000005;
    8486:	4b57      	ldr	r3, [pc, #348]	; (85e4 <SystemInit+0x1b8>)
    8488:	2205      	movs	r2, #5
    848a:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005688 = 0x00000001;
    848c:	3378      	adds	r3, #120	; 0x78
    848e:	2201      	movs	r2, #1
    8490:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005618 = 0x00000000;
    8492:	3b70      	subs	r3, #112	; 0x70
    8494:	2200      	movs	r2, #0
    8496:	601a      	str	r2, [r3, #0]
        *(volatile uint32_t *)0x40005614 = 0x0000003F;
    8498:	3b04      	subs	r3, #4
    849a:	223f      	movs	r2, #63	; 0x3f
    849c:	601a      	str	r2, [r3, #0]
    if (errata_66()){
    849e:	f7ff ff79 	bl	8394 <errata_66>
    84a2:	2800      	cmp	r0, #0
    84a4:	d046      	beq.n	8534 <SystemInit+0x108>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    84a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    84aa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    84ae:	4b4e      	ldr	r3, [pc, #312]	; (85e8 <SystemInit+0x1bc>)
    84b0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    84b4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    84b8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    84bc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    84c0:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    84c4:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    84c8:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    84cc:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    84d0:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    84d4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    84d8:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    84dc:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    84e0:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    84e4:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    84e8:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    84ec:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    84f0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    84f4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    84f8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    84fc:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8500:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8504:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8508:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    850c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8510:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8514:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8518:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    851c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8520:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8524:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8528:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    852c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8530:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    if (errata_108()){
    8534:	f7ff ff4c 	bl	83d0 <errata_108>
    8538:	b128      	cbz	r0, 8546 <SystemInit+0x11a>
        *(volatile uint32_t *)0x40000EE4 = *(volatile uint32_t *)0x10000258 & 0x0000004F;
    853a:	4b2c      	ldr	r3, [pc, #176]	; (85ec <SystemInit+0x1c0>)
    853c:	681b      	ldr	r3, [r3, #0]
    853e:	f003 034f 	and.w	r3, r3, #79	; 0x4f
    8542:	4a2b      	ldr	r2, [pc, #172]	; (85f0 <SystemInit+0x1c4>)
    8544:	6013      	str	r3, [r2, #0]
        SCB->CPACR |= (3UL << 20) | (3UL << 22);
    8546:	4a2b      	ldr	r2, [pc, #172]	; (85f4 <SystemInit+0x1c8>)
    8548:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
    854c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
    8550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    8554:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8558:	f3bf 8f6f 	isb	sy
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
    855c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8560:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
    8564:	f013 0f01 	tst.w	r3, #1
    8568:	d104      	bne.n	8574 <SystemInit+0x148>
    SystemCoreClockUpdate();
    856a:	f7ff ff57 	bl	841c <SystemCoreClockUpdate>
    NVIC_Relocate();
    856e:	f010 fb53 	bl	18c18 <NVIC_Relocate>
}
    8572:	bd08      	pop	{r3, pc}
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
    8574:	4b20      	ldr	r3, [pc, #128]	; (85f8 <SystemInit+0x1cc>)
    8576:	2201      	movs	r2, #1
    8578:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    857c:	4b1e      	ldr	r3, [pc, #120]	; (85f8 <SystemInit+0x1cc>)
    857e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8582:	2b00      	cmp	r3, #0
    8584:	d0fa      	beq.n	857c <SystemInit+0x150>
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
    8586:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
    858a:	f8d2 320c 	ldr.w	r3, [r2, #524]	; 0x20c
    858e:	f023 0301 	bic.w	r3, r3, #1
    8592:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8596:	4b18      	ldr	r3, [pc, #96]	; (85f8 <SystemInit+0x1cc>)
    8598:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    859c:	2b00      	cmp	r3, #0
    859e:	d0fa      	beq.n	8596 <SystemInit+0x16a>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
    85a0:	4b15      	ldr	r3, [pc, #84]	; (85f8 <SystemInit+0x1cc>)
    85a2:	2200      	movs	r2, #0
    85a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    85a8:	4b13      	ldr	r3, [pc, #76]	; (85f8 <SystemInit+0x1cc>)
    85aa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    85ae:	2b00      	cmp	r3, #0
    85b0:	d0fa      	beq.n	85a8 <SystemInit+0x17c>
  __ASM volatile ("dsb 0xF":::"memory");
    85b2:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    85b6:	490f      	ldr	r1, [pc, #60]	; (85f4 <SystemInit+0x1c8>)
    85b8:	68ca      	ldr	r2, [r1, #12]
    85ba:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    85be:	4b0f      	ldr	r3, [pc, #60]	; (85fc <SystemInit+0x1d0>)
    85c0:	4313      	orrs	r3, r2
    85c2:	60cb      	str	r3, [r1, #12]
    85c4:	f3bf 8f4f 	dsb	sy
    __NOP();
    85c8:	bf00      	nop
    85ca:	e7fd      	b.n	85c8 <SystemInit+0x19c>
    85cc:	4007c074 	.word	0x4007c074
    85d0:	baadf00d 	.word	0xbaadf00d
    85d4:	10000244 	.word	0x10000244
    85d8:	4000053c 	.word	0x4000053c
    85dc:	e000edf0 	.word	0xe000edf0
    85e0:	400005a0 	.word	0x400005a0
    85e4:	40005610 	.word	0x40005610
    85e8:	4000c000 	.word	0x4000c000
    85ec:	10000258 	.word	0x10000258
    85f0:	40000ee4 	.word	0x40000ee4
    85f4:	e000ed00 	.word	0xe000ed00
    85f8:	4001e000 	.word	0x4001e000
    85fc:	05fa0004 	.word	0x05fa0004

00008600 <_start>:

/*
 * Rudimentary startup function.
 */
void _start(void)
{
    8600:	b508      	push	{r3, lr}
    int rc;

    rc = main(0, NULL);
    exit(rc);
#else
    os_init(main);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <_start+0x10>)
    8604:	f011 fa8e 	bl	19b24 <os_init>
    os_start();
    8608:	f011 fae4 	bl	19bd4 <os_start>
#endif
}
    860c:	bd08      	pop	{r3, pc}
    860e:	bf00      	nop
    8610:	00008617 	.word	0x00008617

00008614 <_init>:

void
_init(void)
{
}
    8614:	4770      	bx	lr

00008616 <main>:
pub fn handle_touch(_x: u16, _y: u16) { console::print("touch not handled\n"); console::flush(); }  //  Define a touch handler that does nothing

///  Main program that initialises the sensor, network driver and starts reading and sending sensor data in the background.
///  main() will be called at Mynewt startup. It replaces the C version of the main() function.
#[no_mangle]                 //  Don't mangle the name "main"
extern "C" fn main() -> ! {  //  Declare extern "C" because it will be called by Mynewt
    8616:	b088      	sub	sp, #32
    //  Initialise the Mynewt packages and internal temperature sensor driver. Any startup
    //  functions defined in pkg.yml of our custom drivers and libraries will be called by 
    //  sysinit().  Here are the startup functions consolidated by Mynewt:
    //  bin/targets/nrf52_my_sensor/generated/src/nrf52_my_sensor-sysinit-app.c
    mynewt::sysinit();
    8618:	f006 fd2f 	bl	f07a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>
    861c:	e7ff      	b.n	861e <main+0x8>
    //  extern { fn start_ble() -> i32; }
    //  let rc = unsafe { start_ble() };
    //  assert!(rc == 0, "BLE fail");

    //  Start the display
    druid::start_display()
    861e:	f007 fdc9 	bl	101b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>
    8622:	9005      	str	r0, [sp, #20]
    8624:	e7ff      	b.n	8626 <main+0x10>
    8626:	f24d 21ea 	movw	r1, #53994	; 0xd2ea
    862a:	f2c0 0101 	movt	r1, #1
    862e:	f24d 3320 	movw	r3, #54048	; 0xd320
    8632:	f2c0 0301 	movt	r3, #1
    8636:	2208      	movs	r2, #8
    8638:	9805      	ldr	r0, [sp, #20]
    863a:	f006 fe19 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    863e:	e7ff      	b.n	8640 <main+0x2a>
    #[cfg(feature = "display_app")]  //  If graphics display app is enabled...
    display::test_display()
        .expect("DSP test fail");

    //  Start the touch sensor
    touch_sensor::start_touch_sensor()
    8640:	f000 f8c7 	bl	87d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>
    8644:	9004      	str	r0, [sp, #16]
    8646:	e7ff      	b.n	8648 <main+0x32>
    8648:	f24d 21f2 	movw	r1, #54002	; 0xd2f2
    864c:	f2c0 0101 	movt	r1, #1
    8650:	f24d 3330 	movw	r3, #54064	; 0xd330
    8654:	f2c0 0301 	movt	r3, #1
    8658:	2208      	movs	r2, #8
    865a:	9804      	ldr	r0, [sp, #16]
    865c:	f006 fe08 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8660:	e7ff      	b.n	8662 <main+0x4c>
    visual::on_start()
        .expect("VIS fail");

    //  Launch the CHIP8 Emulator app
    #[cfg(feature = "chip8_app")]  //  If CHIP8 Emulator app is enabled...
    chip8::on_start()
    8662:	f000 ff27 	bl	94b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>
    8666:	9003      	str	r0, [sp, #12]
    8668:	e7ff      	b.n	866a <main+0x54>
    866a:	f24d 3140 	movw	r1, #54080	; 0xd340
    866e:	f2c0 0101 	movt	r1, #1
    8672:	f24d 334c 	movw	r3, #54092	; 0xd34c
    8676:	f2c0 0301 	movt	r3, #1
    867a:	220a      	movs	r2, #10
    867c:	9803      	ldr	r0, [sp, #12]
    867e:	f006 fdf7 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8682:	e7ff      	b.n	8684 <main+0x6e>
        .expect("CHIP8 fail");

    //  Main event loop
    loop {                            //  Loop forever...
    8684:	e7ff      	b.n	8686 <main+0x70>
    8686:	a806      	add	r0, sp, #24
        os::eventq_run(               //  Processing events...
            os::eventq_dflt_get()     //  From default event queue.
    8688:	f006 feb1 	bl	f3ee <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    868c:	e7ff      	b.n	868e <main+0x78>
    868e:	f24d 21fa 	movw	r1, #54010	; 0xd2fa
    8692:	f2c0 0101 	movt	r1, #1
    8696:	f24d 335c 	movw	r3, #54108	; 0xd35c
    869a:	f2c0 0301 	movt	r3, #1
    869e:	a806      	add	r0, sp, #24
    86a0:	2208      	movs	r2, #8
    86a2:	f00a fa2f 	bl	12b04 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    86a6:	9002      	str	r0, [sp, #8]
    86a8:	e7ff      	b.n	86aa <main+0x94>
        os::eventq_run(               //  Processing events...
    86aa:	9802      	ldr	r0, [sp, #8]
    86ac:	f006 fe96 	bl	f3dc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
    86b0:	9001      	str	r0, [sp, #4]
    86b2:	e7ff      	b.n	86b4 <main+0x9e>
    86b4:	f24d 3102 	movw	r1, #54018	; 0xd302
    86b8:	f2c0 0101 	movt	r1, #1
    86bc:	f24d 336c 	movw	r3, #54124	; 0xd36c
    86c0:	f2c0 0301 	movt	r3, #1
    86c4:	2208      	movs	r2, #8
    86c6:	9801      	ldr	r0, [sp, #4]
    86c8:	f006 fdd2 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    86cc:	e7ff      	b.n	86ce <main+0xb8>
    loop {                            //  Loop forever...
    86ce:	e7da      	b.n	8686 <main+0x70>

000086d0 <rust_begin_unwind>:
    //  Never comes here
}

///  This function is called on panic, like an assertion failure. We display the filename and line number and pause in the debugger. From https://os.phil-opp.com/freestanding-rust-binary/
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    86d0:	b08e      	sub	sp, #56	; 0x38
    86d2:	900b      	str	r0, [sp, #44]	; 0x2c
    //  Display the filename and line number to the Semihosting Console.
    console::print("panic ");
    86d4:	f24d 317c 	movw	r1, #54140	; 0xd37c
    86d8:	f2c0 0101 	movt	r1, #1
    86dc:	2206      	movs	r2, #6
    86de:	9007      	str	r0, [sp, #28]
    86e0:	4608      	mov	r0, r1
    86e2:	4611      	mov	r1, r2
    86e4:	f007 f843 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    86e8:	e7ff      	b.n	86ea <rust_begin_unwind+0x1a>
    if let Some(location) = info.location() {
    86ea:	9807      	ldr	r0, [sp, #28]
    86ec:	f00e f9d1 	bl	16a92 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>
    86f0:	9008      	str	r0, [sp, #32]
    86f2:	e7ff      	b.n	86f4 <rust_begin_unwind+0x24>
    86f4:	9808      	ldr	r0, [sp, #32]
    86f6:	2800      	cmp	r0, #0
    86f8:	d108      	bne.n	870c <rust_begin_unwind+0x3c>
    86fa:	e7ff      	b.n	86fc <rust_begin_unwind+0x2c>
        let line = location.line();
        console::print("at ");       console::buffer(&file);
        console::print(" line ");    console::printint(line as i32);
        console::print("\n");        console::flush();
    } else {
        console::print("no loc\n");  console::flush();
    86fc:	f24d 3082 	movw	r0, #54146	; 0xd382
    8700:	f2c0 0001 	movt	r0, #1
    8704:	2107      	movs	r1, #7
    8706:	f007 f832 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    870a:	e033      	b.n	8774 <rust_begin_unwind+0xa4>
    if let Some(location) = info.location() {
    870c:	9808      	ldr	r0, [sp, #32]
    870e:	900c      	str	r0, [sp, #48]	; 0x30
        let file = location.file();
    8710:	9006      	str	r0, [sp, #24]
    8712:	f00e f9c1 	bl	16a98 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8716:	910a      	str	r1, [sp, #40]	; 0x28
    8718:	9009      	str	r0, [sp, #36]	; 0x24
    871a:	e7ff      	b.n	871c <rust_begin_unwind+0x4c>
        let line = location.line();
    871c:	9806      	ldr	r0, [sp, #24]
    871e:	f00e f9bf 	bl	16aa0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>
    8722:	4601      	mov	r1, r0
    8724:	900d      	str	r0, [sp, #52]	; 0x34
    8726:	9105      	str	r1, [sp, #20]
    8728:	e7ff      	b.n	872a <rust_begin_unwind+0x5a>
        console::print("at ");       console::buffer(&file);
    872a:	f24d 3089 	movw	r0, #54153	; 0xd389
    872e:	f2c0 0001 	movt	r0, #1
    8732:	2103      	movs	r1, #3
    8734:	f007 f81b 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8738:	e7ff      	b.n	873a <rust_begin_unwind+0x6a>
    873a:	9809      	ldr	r0, [sp, #36]	; 0x24
    873c:	990a      	ldr	r1, [sp, #40]	; 0x28
    873e:	f007 f83d 	bl	f7bc <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>
    8742:	e7ff      	b.n	8744 <rust_begin_unwind+0x74>
        console::print(" line ");    console::printint(line as i32);
    8744:	f24d 308c 	movw	r0, #54156	; 0xd38c
    8748:	f2c0 0001 	movt	r0, #1
    874c:	2106      	movs	r1, #6
    874e:	f007 f80e 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    8752:	e7ff      	b.n	8754 <rust_begin_unwind+0x84>
    8754:	9805      	ldr	r0, [sp, #20]
    8756:	f007 f848 	bl	f7ea <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    875a:	e7ff      	b.n	875c <rust_begin_unwind+0x8c>
        console::print("\n");        console::flush();
    875c:	f24d 3092 	movw	r0, #54162	; 0xd392
    8760:	f2c0 0001 	movt	r0, #1
    8764:	2101      	movs	r1, #1
    8766:	f007 f802 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    876a:	e7ff      	b.n	876c <rust_begin_unwind+0x9c>
    876c:	f007 f845 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8770:	e7ff      	b.n	8772 <rust_begin_unwind+0xa2>
    if let Some(location) = info.location() {
    8772:	e003      	b.n	877c <rust_begin_unwind+0xac>
        console::print("no loc\n");  console::flush();
    8774:	f007 f841 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    8778:	e7ff      	b.n	877a <rust_begin_unwind+0xaa>
    if let Some(location) = info.location() {
    877a:	e7ff      	b.n	877c <rust_begin_unwind+0xac>
/// exception.
#[inline(always)]
pub fn bkpt() {
    match () {
        #[cfg(all(cortex_m, feature = "inline-asm"))]
        () => unsafe { asm!("bkpt" :::: "volatile") },
    877c:	be00      	bkpt	0x0000
    }
    //  Pause in the debugger.
    bkpt();
    877e:	e7ff      	b.n	8780 <rust_begin_unwind+0xb0>
    //  Display the payload.
    console::print(info.payload().downcast_ref::<&str>().unwrap());
    8780:	9807      	ldr	r0, [sp, #28]
    8782:	f00e f989 	bl	16a98 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>
    8786:	9004      	str	r0, [sp, #16]
    8788:	9103      	str	r1, [sp, #12]
    878a:	e7ff      	b.n	878c <rust_begin_unwind+0xbc>
    878c:	9804      	ldr	r0, [sp, #16]
    878e:	9903      	ldr	r1, [sp, #12]
    8790:	f005 fa70 	bl	dc74 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>
    8794:	9002      	str	r0, [sp, #8]
    8796:	e7ff      	b.n	8798 <rust_begin_unwind+0xc8>
    8798:	f24d 3194 	movw	r1, #54164	; 0xd394
    879c:	f2c0 0101 	movt	r1, #1
    87a0:	9802      	ldr	r0, [sp, #8]
    87a2:	f005 fcdd 	bl	e160 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>
    87a6:	9001      	str	r0, [sp, #4]
    87a8:	e7ff      	b.n	87aa <rust_begin_unwind+0xda>
    87aa:	9801      	ldr	r0, [sp, #4]
    87ac:	6800      	ldr	r0, [r0, #0]
    87ae:	9901      	ldr	r1, [sp, #4]
    87b0:	6849      	ldr	r1, [r1, #4]
    87b2:	f006 ffdc 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87b6:	e7ff      	b.n	87b8 <rust_begin_unwind+0xe8>
    console::print("\n");  console::flush();
    87b8:	f24d 3092 	movw	r0, #54162	; 0xd392
    87bc:	f2c0 0001 	movt	r0, #1
    87c0:	2101      	movs	r1, #1
    87c2:	f006 ffd4 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87c6:	e7ff      	b.n	87c8 <rust_begin_unwind+0xf8>
    87c8:	f007 f817 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    87cc:	e7ff      	b.n	87ce <rust_begin_unwind+0xfe>
    //  Loop forever so that device won't restart.
    loop {}
    87ce:	e7ff      	b.n	87d0 <rust_begin_unwind+0x100>
    87d0:	e7fe      	b.n	87d0 <rust_begin_unwind+0x100>

000087d2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E>:
/// ```rust
/// let peripherals = nrf52::Peripherals::take().unwrap();
/// let nfcpins = peripherals.UICR.nfcpins.read().bits();
/// console::print("nfcpins = "); console::printhex(nfcpins as u8); console::print("\n");
/// ```
pub fn start_touch_sensor() -> MynewtResult<()> {
    87d2:	b5b0      	push	{r4, r5, r7, lr}
    87d4:	b0be      	sub	sp, #248	; 0xf8
    console::print("Rust touch sensor\n");
    87d6:	f24d 30a4 	movw	r0, #54180	; 0xd3a4
    87da:	f2c0 0001 	movt	r0, #1
    87de:	2112      	movs	r1, #18
    87e0:	f006 ffc5 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    87e4:	e7ff      	b.n	87e6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x14>

    //  Init GPIO for the Reset Pin
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    87e6:	f240 1048 	movw	r0, #328	; 0x148
    87ea:	f2c2 0000 	movt	r0, #8192	; 0x2000
    87ee:	210a      	movs	r1, #10
    87f0:	f007 f9f8 	bl	fbe4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
    87f4:	9012      	str	r0, [sp, #72]	; 0x48
    87f6:	e7ff      	b.n	87f8 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x26>
    87f8:	9812      	ldr	r0, [sp, #72]	; 0x48
    87fa:	f006 fd78 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    87fe:	9014      	str	r0, [sp, #80]	; 0x50
    8800:	e7ff      	b.n	8802 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x30>
    8802:	9814      	ldr	r0, [sp, #80]	; 0x50
    8804:	1e41      	subs	r1, r0, #1
    8806:	bf18      	it	ne
    8808:	2101      	movne	r1, #1
    880a:	2801      	cmp	r0, #1
    880c:	d001      	beq.n	8812 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x40>
    880e:	e7ff      	b.n	8810 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x3e>
    8810:	e008      	b.n	8824 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x52>

    //  Reset the touch controller by switching the Reset Pin low then high with pauses. Based on https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L1017-L1167
    unsafe {
        TOUCH_RESET.set_low() ? ;
    8812:	f240 1048 	movw	r0, #328	; 0x148
    8816:	f2c2 0000 	movt	r0, #8192	; 0x2000
    881a:	f007 fa7c 	bl	fd16 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
    881e:	9011      	str	r0, [sp, #68]	; 0x44
    8820:	e00f      	b.n	8842 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x70>
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8822:	defe      	udf	#254	; 0xfe
    8824:	9814      	ldr	r0, [sp, #80]	; 0x50
    8826:	9036      	str	r0, [sp, #216]	; 0xd8
    8828:	f006 fdd4 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    882c:	9010      	str	r0, [sp, #64]	; 0x40
    882e:	e002      	b.n	8836 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x64>
    assert_eq!(rc, 0, "IRQ init fail");

    //  Start monitoring for touch controller interrupts
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    Ok(())
}
    8830:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8832:	b03e      	add	sp, #248	; 0xf8
    8834:	bdb0      	pop	{r4, r5, r7, pc}
    unsafe { TOUCH_RESET.init(TOUCH_RESET_PIN) ? };
    8836:	9810      	ldr	r0, [sp, #64]	; 0x40
    8838:	f006 fd4d 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    883c:	9013      	str	r0, [sp, #76]	; 0x4c
    883e:	e7ff      	b.n	8840 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x6e>
    8840:	e7f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_low() ? ;
    8842:	9811      	ldr	r0, [sp, #68]	; 0x44
    8844:	f006 fd53 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    8848:	9015      	str	r0, [sp, #84]	; 0x54
    884a:	e7ff      	b.n	884c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x7a>
    884c:	9815      	ldr	r0, [sp, #84]	; 0x54
    884e:	1e41      	subs	r1, r0, #1
    8850:	bf18      	it	ne
    8852:	2101      	movne	r1, #1
    8854:	2801      	cmp	r0, #1
    8856:	d001      	beq.n	885c <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x8a>
    8858:	e7ff      	b.n	885a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x88>
    885a:	e008      	b.n	886e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x9c>
        TOUCH_DELAY.delay_ms(20);
    885c:	f240 104c 	movw	r0, #332	; 0x14c
    8860:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8864:	2114      	movs	r1, #20
    8866:	f007 fa6d 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    886a:	e00d      	b.n	8888 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb6>
        TOUCH_RESET.set_low() ? ;
    886c:	defe      	udf	#254	; 0xfe
    886e:	9815      	ldr	r0, [sp, #84]	; 0x54
    8870:	9037      	str	r0, [sp, #220]	; 0xdc
    8872:	f006 fdaf 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    8876:	900f      	str	r0, [sp, #60]	; 0x3c
    8878:	e7ff      	b.n	887a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xa8>
    887a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    887c:	f006 fd2b 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    8880:	9013      	str	r0, [sp, #76]	; 0x4c
    8882:	e7ff      	b.n	8884 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb2>
    8884:	e7ff      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
    8886:	e7d3      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>
        TOUCH_RESET.set_high() ? ;
    8888:	f240 1048 	movw	r0, #328	; 0x148
    888c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8890:	f007 fa4c 	bl	fd2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
    8894:	900e      	str	r0, [sp, #56]	; 0x38
    8896:	e7ff      	b.n	8898 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xc6>
    8898:	980e      	ldr	r0, [sp, #56]	; 0x38
    889a:	f006 fd28 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    889e:	9016      	str	r0, [sp, #88]	; 0x58
    88a0:	e7ff      	b.n	88a2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xd0>
    88a2:	9816      	ldr	r0, [sp, #88]	; 0x58
    88a4:	1e41      	subs	r1, r0, #1
    88a6:	bf18      	it	ne
    88a8:	2101      	movne	r1, #1
    88aa:	2801      	cmp	r0, #1
    88ac:	d001      	beq.n	88b2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xe0>
    88ae:	e7ff      	b.n	88b0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xde>
    88b0:	e008      	b.n	88c4 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xf2>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88b2:	f240 104c 	movw	r0, #332	; 0x14c
    88b6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88ba:	21c8      	movs	r1, #200	; 0xc8
    88bc:	f007 fa42 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88c0:	e00c      	b.n	88dc <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x10a>
        TOUCH_RESET.set_high() ? ;
    88c2:	defe      	udf	#254	; 0xfe
    88c4:	9816      	ldr	r0, [sp, #88]	; 0x58
    88c6:	9038      	str	r0, [sp, #224]	; 0xe0
    88c8:	f006 fd84 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    88cc:	900d      	str	r0, [sp, #52]	; 0x34
    88ce:	e7ff      	b.n	88d0 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xfe>
    88d0:	980d      	ldr	r0, [sp, #52]	; 0x34
    88d2:	f006 fd00 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    88d6:	9013      	str	r0, [sp, #76]	; 0x4c
    88d8:	e7ff      	b.n	88da <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x108>
    88da:	e7d4      	b.n	8886 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0xb4>
        TOUCH_DELAY.delay_ms(200); TOUCH_DELAY.delay_ms(200);    
    88dc:	f240 104c 	movw	r0, #332	; 0x14c
    88e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    88e4:	21c8      	movs	r1, #200	; 0xc8
    88e6:	f007 fa2d 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
    88ea:	e7ff      	b.n	88ec <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x11a>
    unsafe { TOUCH_EVENT.ev_cb = Some( touch_event_callback ) };
    88ec:	f648 208f 	movw	r0, #35471	; 0x8a8f
    88f0:	f2c0 0000 	movt	r0, #0
    88f4:	9017      	str	r0, [sp, #92]	; 0x5c
    88f6:	9817      	ldr	r0, [sp, #92]	; 0x5c
    88f8:	f240 11e0 	movw	r1, #480	; 0x1e0
    88fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8900:	6048      	str	r0, [r1, #4]
        Some( touch_interrupt_handler ),  //  Call `touch_interrupt_handler()` upon detecting interrupt
    8902:	f648 2043 	movw	r0, #35395	; 0x8a43
    8906:	f2c0 0000 	movt	r0, #0
    890a:	9019      	str	r0, [sp, #100]	; 0x64
        core::ptr::null_mut(),            //  No arguments for `touch_interrupt_handler()`
    890c:	e7ff      	b.n	890e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x13c>
    let rc = unsafe { hal::hal_gpio_irq_init(
    890e:	9919      	ldr	r1, [sp, #100]	; 0x64
    8910:	4668      	mov	r0, sp
    8912:	2201      	movs	r2, #1
    8914:	6002      	str	r2, [r0, #0]
    8916:	201c      	movs	r0, #28
    8918:	2200      	movs	r2, #0
    891a:	2302      	movs	r3, #2
    891c:	f010 fa5c 	bl	18dd8 <hal_gpio_irq_init>
    8920:	9018      	str	r0, [sp, #96]	; 0x60
    8922:	e7ff      	b.n	8924 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x152>
    assert_eq!(rc, 0, "IRQ init fail");
    8924:	f24d 30bc 	movw	r0, #54204	; 0xd3bc
    8928:	f2c0 0001 	movt	r0, #1
    892c:	6800      	ldr	r0, [r0, #0]
    892e:	a918      	add	r1, sp, #96	; 0x60
    8930:	911a      	str	r1, [sp, #104]	; 0x68
    8932:	901b      	str	r0, [sp, #108]	; 0x6c
    8934:	981a      	ldr	r0, [sp, #104]	; 0x68
    8936:	9039      	str	r0, [sp, #228]	; 0xe4
    8938:	991b      	ldr	r1, [sp, #108]	; 0x6c
    893a:	913a      	str	r1, [sp, #232]	; 0xe8
    893c:	6802      	ldr	r2, [r0, #0]
    893e:	680b      	ldr	r3, [r1, #0]
    8940:	429a      	cmp	r2, r3
    8942:	900c      	str	r0, [sp, #48]	; 0x30
    8944:	910b      	str	r1, [sp, #44]	; 0x2c
    8946:	d104      	bne.n	8952 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x180>
    8948:	e7ff      	b.n	894a <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x178>
    894a:	201c      	movs	r0, #28
    unsafe { hal::hal_gpio_irq_enable(TOUCH_INTERRUPT_PIN) };
    894c:	f010 fa80 	bl	18e50 <hal_gpio_irq_enable>
    8950:	e072      	b.n	8a38 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x266>
    assert_eq!(rc, 0, "IRQ init fail");
    8952:	f24d 4014 	movw	r0, #54292	; 0xd414
    8956:	f2c0 0001 	movt	r0, #1
    895a:	6801      	ldr	r1, [r0, #0]
    895c:	980c      	ldr	r0, [sp, #48]	; 0x30
    895e:	902b      	str	r0, [sp, #172]	; 0xac
    8960:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8962:	922c      	str	r2, [sp, #176]	; 0xb0
    8964:	f24d 4330 	movw	r3, #54320	; 0xd430
    8968:	f2c0 0301 	movt	r3, #1
    896c:	681b      	ldr	r3, [r3, #0]
    896e:	f24d 4c34 	movw	ip, #54324	; 0xd434
    8972:	f2c0 0c01 	movt	ip, #1
    8976:	f8dc c000 	ldr.w	ip, [ip]
    897a:	46ee      	mov	lr, sp
    897c:	2400      	movs	r4, #0
    897e:	f8ce 4000 	str.w	r4, [lr]
    8982:	a82d      	add	r0, sp, #180	; 0xb4
    8984:	2201      	movs	r2, #1
    8986:	910a      	str	r1, [sp, #40]	; 0x28
    8988:	4619      	mov	r1, r3
    898a:	4663      	mov	r3, ip
    898c:	f005 faca 	bl	df24 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8990:	e7ff      	b.n	8992 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1c0>
    8992:	a82b      	add	r0, sp, #172	; 0xac
    8994:	9028      	str	r0, [sp, #160]	; 0xa0
    8996:	a82c      	add	r0, sp, #176	; 0xb0
    8998:	9029      	str	r0, [sp, #164]	; 0xa4
    899a:	a82d      	add	r0, sp, #180	; 0xb4
    899c:	902a      	str	r0, [sp, #168]	; 0xa8
    899e:	9828      	ldr	r0, [sp, #160]	; 0xa0
    89a0:	903b      	str	r0, [sp, #236]	; 0xec
    89a2:	9929      	ldr	r1, [sp, #164]	; 0xa4
    89a4:	913c      	str	r1, [sp, #240]	; 0xf0
    89a6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
    89a8:	923d      	str	r2, [sp, #244]	; 0xf4
    89aa:	f24e 13c1 	movw	r3, #57793	; 0xe1c1
    89ae:	f2c0 0300 	movt	r3, #0
    89b2:	9109      	str	r1, [sp, #36]	; 0x24
    89b4:	4619      	mov	r1, r3
    89b6:	9208      	str	r2, [sp, #32]
    89b8:	f007 fb29 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89bc:	9007      	str	r0, [sp, #28]
    89be:	9106      	str	r1, [sp, #24]
    89c0:	e7ff      	b.n	89c2 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x1f0>
    89c2:	f24e 11c1 	movw	r1, #57793	; 0xe1c1
    89c6:	f2c0 0100 	movt	r1, #0
    89ca:	9809      	ldr	r0, [sp, #36]	; 0x24
    89cc:	f007 fb1f 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    89d0:	9005      	str	r0, [sp, #20]
    89d2:	9104      	str	r1, [sp, #16]
    89d4:	e7ff      	b.n	89d6 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x204>
    89d6:	f247 0173 	movw	r1, #28787	; 0x7073
    89da:	f2c0 0101 	movt	r1, #1
    89de:	9808      	ldr	r0, [sp, #32]
    89e0:	f007 fb54 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    89e4:	9003      	str	r0, [sp, #12]
    89e6:	9102      	str	r1, [sp, #8]
    89e8:	e7ff      	b.n	89ea <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x218>
    89ea:	9807      	ldr	r0, [sp, #28]
    89ec:	9022      	str	r0, [sp, #136]	; 0x88
    89ee:	9906      	ldr	r1, [sp, #24]
    89f0:	9123      	str	r1, [sp, #140]	; 0x8c
    89f2:	9a05      	ldr	r2, [sp, #20]
    89f4:	9224      	str	r2, [sp, #144]	; 0x90
    89f6:	9b04      	ldr	r3, [sp, #16]
    89f8:	9325      	str	r3, [sp, #148]	; 0x94
    89fa:	f8dd c00c 	ldr.w	ip, [sp, #12]
    89fe:	f8cd c098 	str.w	ip, [sp, #152]	; 0x98
    8a02:	f8dd e008 	ldr.w	lr, [sp, #8]
    8a06:	f8cd e09c 	str.w	lr, [sp, #156]	; 0x9c
    8a0a:	466c      	mov	r4, sp
    8a0c:	2503      	movs	r5, #3
    8a0e:	6025      	str	r5, [r4, #0]
    8a10:	a81c      	add	r0, sp, #112	; 0x70
    8a12:	ab22      	add	r3, sp, #136	; 0x88
    8a14:	990a      	ldr	r1, [sp, #40]	; 0x28
    8a16:	462a      	mov	r2, r5
    8a18:	f005 fa84 	bl	df24 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>
    8a1c:	e7ff      	b.n	8a1e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x24c>
    8a1e:	f24d 4054 	movw	r0, #54356	; 0xd454
    8a22:	f2c0 0001 	movt	r0, #1
    8a26:	f00e f836 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    8a2a:	9001      	str	r0, [sp, #4]
    8a2c:	e7ff      	b.n	8a2e <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x25c>
    8a2e:	a81c      	add	r0, sp, #112	; 0x70
    8a30:	9901      	ldr	r1, [sp, #4]
    8a32:	f00e f86d 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    8a36:	defe      	udf	#254	; 0xfe
    8a38:	2000      	movs	r0, #0
    Ok(())
    8a3a:	9013      	str	r0, [sp, #76]	; 0x4c
    8a3c:	2001      	movs	r0, #1
    8a3e:	9013      	str	r0, [sp, #76]	; 0x4c
}
    8a40:	e6f6      	b.n	8830 <_ZN3app12touch_sensor18start_touch_sensor17heb3b49b893764814E+0x5e>

00008a42 <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE>:

/// Interrupt handler for the touch controller, triggered when a touch is detected
extern "C" fn touch_interrupt_handler(arg: *mut core::ffi::c_void) {
    8a42:	b580      	push	{r7, lr}
    8a44:	b086      	sub	sp, #24
    8a46:	9004      	str	r0, [sp, #16]
    //  We forward a touch event to the Default Event Queue for deferred processing.  Don't do any processing here.
    unsafe { TOUCH_EVENT.ev_arg = arg };
    8a48:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a4c:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a50:	6088      	str	r0, [r1, #8]
    8a52:	a802      	add	r0, sp, #8
    //  Fetch the Default Event Queue. TODO: Use dedicated Event Queue for higher priority processing.
    let queue = os::eventq_dflt_get()
    8a54:	f006 fccb 	bl	f3ee <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>
    8a58:	e7ff      	b.n	8a5a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x18>
    8a5a:	f24d 21fa 	movw	r1, #54010	; 0xd2fa
    8a5e:	f2c0 0101 	movt	r1, #1
    8a62:	f24d 436c 	movw	r3, #54380	; 0xd46c
    8a66:	f2c0 0301 	movt	r3, #1
    8a6a:	a802      	add	r0, sp, #8
    8a6c:	2208      	movs	r2, #8
    8a6e:	f00a f849 	bl	12b04 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>
    8a72:	4601      	mov	r1, r0
    8a74:	9005      	str	r0, [sp, #20]
    8a76:	9101      	str	r1, [sp, #4]
    8a78:	e7ff      	b.n	8a7a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x38>
        .expect("GET fail");
    unsafe { os::os_eventq_put(queue, &mut TOUCH_EVENT) };  //  Trigger the callback function `touch_event_callback()`
    8a7a:	f240 11e0 	movw	r1, #480	; 0x1e0
    8a7e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8a82:	9801      	ldr	r0, [sp, #4]
    8a84:	f011 fa77 	bl	19f76 <os_eventq_put>
    8a88:	e7ff      	b.n	8a8a <_ZN3app12touch_sensor23touch_interrupt_handler17he79adf05b4785acfE+0x48>
    //console::print("touch\n"); ////
}
    8a8a:	b006      	add	sp, #24
    8a8c:	bd80      	pop	{r7, pc}

00008a8e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E>:

/// Callback for the touch event that is triggered when a touch is detected
extern "C" fn touch_event_callback(_event: *mut os_event) {
    8a8e:	b580      	push	{r7, lr}
    8a90:	b094      	sub	sp, #80	; 0x50
    8a92:	900e      	str	r0, [sp, #56]	; 0x38
    //  console::printhex(unsafe { os::os_time_get() } as u8); console::print(" touch\n");
    unsafe { 
        //  Fetch the touch data from the touch controller
        read_touchdata(&mut TOUCH_DATA)
    8a94:	f240 104c 	movw	r0, #332	; 0x14c
    8a98:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8a9c:	f000 f894 	bl	8bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>
    8aa0:	9006      	str	r0, [sp, #24]
    8aa2:	e7ff      	b.n	8aa4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x16>
    8aa4:	f24d 417c 	movw	r1, #54396	; 0xd47c
    8aa8:	f2c0 0101 	movt	r1, #1
    8aac:	f24d 438c 	movw	r3, #54412	; 0xd48c
    8ab0:	f2c0 0301 	movt	r3, #1
    8ab4:	220e      	movs	r2, #14
    8ab6:	9806      	ldr	r0, [sp, #24]
    8ab8:	f006 fbda 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8abc:	e7ff      	b.n	8abe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x30>
            .expect("touchdata fail");
        //  Handle each touch data info
        for i in 0..TOUCH_DATA.count as usize {
    8abe:	f240 104c 	movw	r0, #332	; 0x14c
    8ac2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ac6:	f890 0050 	ldrb.w	r0, [r0, #80]	; 0x50
    8aca:	2100      	movs	r1, #0
    8acc:	9107      	str	r1, [sp, #28]
    8ace:	9008      	str	r0, [sp, #32]
    8ad0:	9807      	ldr	r0, [sp, #28]
    8ad2:	9908      	ldr	r1, [sp, #32]
    8ad4:	f005 ff67 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8ad8:	9005      	str	r0, [sp, #20]
    8ada:	9104      	str	r1, [sp, #16]
    8adc:	e7ff      	b.n	8ade <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x50>
    8ade:	9805      	ldr	r0, [sp, #20]
    8ae0:	9009      	str	r0, [sp, #36]	; 0x24
    8ae2:	9904      	ldr	r1, [sp, #16]
    8ae4:	910a      	str	r1, [sp, #40]	; 0x28
    8ae6:	e7ff      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8ae8:	a809      	add	r0, sp, #36	; 0x24
    8aea:	f005 fed1 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8aee:	910c      	str	r1, [sp, #48]	; 0x30
    8af0:	900b      	str	r0, [sp, #44]	; 0x2c
    8af2:	e7ff      	b.n	8af4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x66>
    8af4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8af6:	2800      	cmp	r0, #0
    8af8:	d001      	beq.n	8afe <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x70>
    8afa:	e7ff      	b.n	8afc <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x6e>
    8afc:	e002      	b.n	8b04 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x76>
            console::print(", x: "); console::printint(x as i32); 
            console::print(", y: "); console::printint(y as i32); console::print("\n");
        }
        console::flush();   
    } */
}
    8afe:	b014      	add	sp, #80	; 0x50
    8b00:	bd80      	pop	{r7, pc}
        for i in 0..TOUCH_DATA.count as usize {
    8b02:	defe      	udf	#254	; 0xfe
    8b04:	980c      	ldr	r0, [sp, #48]	; 0x30
    8b06:	900f      	str	r0, [sp, #60]	; 0x3c
    8b08:	9010      	str	r0, [sp, #64]	; 0x40
    8b0a:	9011      	str	r0, [sp, #68]	; 0x44
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8b0c:	2809      	cmp	r0, #9
    8b0e:	9003      	str	r0, [sp, #12]
    8b10:	d851      	bhi.n	8bb6 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x128>
    8b12:	e7ff      	b.n	8b14 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x86>
    8b14:	f240 104c 	movw	r0, #332	; 0x14c
    8b18:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8b1c:	9903      	ldr	r1, [sp, #12]
    8b1e:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8b22:	f830 0031 	ldrh.w	r0, [r0, r1, lsl #3]
    8b26:	4603      	mov	r3, r0
    8b28:	f8ad 004a 	strh.w	r0, [sp, #74]	; 0x4a
    8b2c:	f8b2 c002 	ldrh.w	ip, [r2, #2]
    8b30:	46e6      	mov	lr, ip
    8b32:	f8ad c04c 	strh.w	ip, [sp, #76]	; 0x4c
    8b36:	7912      	ldrb	r2, [r2, #4]
    8b38:	4694      	mov	ip, r2
    8b3a:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
            if x == 0 && y == 0 { continue; }
    8b3e:	2800      	cmp	r0, #0
    8b40:	9302      	str	r3, [sp, #8]
    8b42:	f8cd e004 	str.w	lr, [sp, #4]
    8b46:	f8cd c000 	str.w	ip, [sp]
    8b4a:	d008      	beq.n	8b5e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xd0>
    8b4c:	e003      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b4e:	2001      	movs	r0, #1
    8b50:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b54:	e008      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b56:	2000      	movs	r0, #0
    8b58:	f88d 0036 	strb.w	r0, [sp, #54]	; 0x36
    8b5c:	e004      	b.n	8b68 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xda>
    8b5e:	9801      	ldr	r0, [sp, #4]
    8b60:	0401      	lsls	r1, r0, #16
    8b62:	2900      	cmp	r1, #0
    8b64:	d0f3      	beq.n	8b4e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc0>
    8b66:	e7f6      	b.n	8b56 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xc8>
    8b68:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    8b6c:	07c0      	lsls	r0, r0, #31
    8b6e:	2800      	cmp	r0, #0
    8b70:	d105      	bne.n	8b7e <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf0>
    8b72:	e7ff      	b.n	8b74 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xe6>
            if action != 0 && action != 2 { continue; }
    8b74:	9800      	ldr	r0, [sp, #0]
    8b76:	0601      	lsls	r1, r0, #24
    8b78:	2900      	cmp	r1, #0
    8b7a:	d10a      	bne.n	8b92 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x104>
    8b7c:	e005      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
            if x == 0 && y == 0 { continue; }
    8b7e:	e7ff      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
    8b80:	e7b2      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
    8b82:	2001      	movs	r0, #1
            if action != 0 && action != 2 { continue; }
    8b84:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b88:	e008      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b8a:	2000      	movs	r0, #0
    8b8c:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
    8b90:	e004      	b.n	8b9c <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x10e>
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	b2c1      	uxtb	r1, r0
    8b96:	2902      	cmp	r1, #2
    8b98:	d1f3      	bne.n	8b82 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf4>
    8b9a:	e7f6      	b.n	8b8a <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xfc>
    8b9c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
    8ba0:	07c0      	lsls	r0, r0, #31
    8ba2:	2800      	cmp	r0, #0
    8ba4:	d105      	bne.n	8bb2 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x124>
    8ba6:	e7ff      	b.n	8ba8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x11a>
            super::handle_touch(x, y);
    8ba8:	9802      	ldr	r0, [sp, #8]
    8baa:	9901      	ldr	r1, [sp, #4]
    8bac:	f000 ff8d 	bl	9aca <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>
    8bb0:	e000      	b.n	8bb4 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x126>
            if action != 0 && action != 2 { continue; }
    8bb2:	e7e5      	b.n	8b80 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0xf2>
        for i in 0..TOUCH_DATA.count as usize {
    8bb4:	e798      	b.n	8ae8 <_ZN3app12touch_sensor20touch_event_callback17hd1980a31fc9ad8b3E+0x5a>
            let TouchInfo{ x, y, action, .. } = TOUCH_DATA.touches[i];
    8bb6:	f24d 409c 	movw	r0, #54428	; 0xd49c
    8bba:	f2c0 0001 	movt	r0, #1
    8bbe:	220a      	movs	r2, #10
    8bc0:	9903      	ldr	r1, [sp, #12]
    8bc2:	f00d ff85 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    8bc6:	defe      	udf	#254	; 0xfe

00008bc8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E>:
/// Touch data will be populated here
static mut TOUCH_DATA: TouchEventInfo = fill_zero!(TouchEventInfo);

/// Read touch controller data. This only works when the screen has been tapped and the touch controller wakes up.
/// Ported from https://github.com/lupyuen/hynitron_i2c_cst0xxse/blob/master/cst0xx_core.c#L407-L466
fn read_touchdata(data: &mut TouchEventInfo) -> MynewtResult<()> {
    8bc8:	b580      	push	{r7, lr}
    8bca:	b0de      	sub	sp, #376	; 0x178
    8bcc:	9057      	str	r0, [sp, #348]	; 0x15c
    read_register_range(           //  Read the range of I2C registers...
    8bce:	4669      	mov	r1, sp
    8bd0:	223f      	movs	r2, #63	; 0x3f
    8bd2:	600a      	str	r2, [r1, #0]
    8bd4:	f240 139e 	movw	r3, #414	; 0x19e
    8bd8:	f2c2 0300 	movt	r3, #8192	; 0x2000
    8bdc:	2115      	movs	r1, #21
    8bde:	f04f 0c00 	mov.w	ip, #0
    8be2:	9026      	str	r0, [sp, #152]	; 0x98
    8be4:	4608      	mov	r0, r1
    8be6:	4661      	mov	r1, ip
    8be8:	f000 fb97 	bl	931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>
    8bec:	9025      	str	r0, [sp, #148]	; 0x94
    8bee:	e7ff      	b.n	8bf0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x28>
    8bf0:	f24d 41ac 	movw	r1, #54444	; 0xd4ac
    8bf4:	f2c0 0101 	movt	r1, #1
    8bf8:	f24d 43c0 	movw	r3, #54464	; 0xd4c0
    8bfc:	f2c0 0301 	movt	r3, #1
    8c00:	2213      	movs	r2, #19
    8c02:	9825      	ldr	r0, [sp, #148]	; 0x94
    8c04:	f006 fb34 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
    8c08:	e7ff      	b.n	8c0a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x42>
    8c0a:	f10d 00ee 	add.w	r0, sp, #238	; 0xee
    8c0e:	2152      	movs	r1, #82	; 0x52
        TOUCH_CONTROLLER_ADDRESS,  //  From the touch controller
        0,                         //  Starting from register 0
        POINT_READ_BUF as u8,      //  Number of registers to read
        unsafe { &mut BUF }        //  Save the read data into `buf`
    ).expect("read touchdata fail");
    *data = fill_zero!(TouchEventInfo);
    8c10:	9024      	str	r0, [sp, #144]	; 0x90
    8c12:	9123      	str	r1, [sp, #140]	; 0x8c
    8c14:	f014 fb16 	bl	1d244 <__aeabi_memclr>
    8c18:	a827      	add	r0, sp, #156	; 0x9c
    8c1a:	9924      	ldr	r1, [sp, #144]	; 0x90
    8c1c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    8c1e:	f014 fb15 	bl	1d24c <__aeabi_memcpy>
    8c22:	e7ff      	b.n	8c24 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5c>
    8c24:	a927      	add	r1, sp, #156	; 0x9c
    8c26:	2252      	movs	r2, #82	; 0x52
    8c28:	9826      	ldr	r0, [sp, #152]	; 0x98
    8c2a:	f014 fb0f 	bl	1d24c <__aeabi_memcpy>
    data.point_num = unsafe { BUF[FT_TOUCH_POINT_NUM] & 0x0F };
    8c2e:	f240 119e 	movw	r1, #414	; 0x19e
    8c32:	f2c2 0100 	movt	r1, #8192	; 0x2000
    8c36:	7889      	ldrb	r1, [r1, #2]
    8c38:	f001 010f 	and.w	r1, r1, #15
    8c3c:	9a26      	ldr	r2, [sp, #152]	; 0x98
    8c3e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    8c42:	2100      	movs	r1, #0
    data.count     = 0;
    8c44:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50

    //  Populate the first 5 touch points
    for i in 0..CFG_MAX_TOUCH_POINTS {
    8c48:	9150      	str	r1, [sp, #320]	; 0x140
    8c4a:	2105      	movs	r1, #5
    8c4c:	9151      	str	r1, [sp, #324]	; 0x144
    8c4e:	9950      	ldr	r1, [sp, #320]	; 0x140
    8c50:	9b51      	ldr	r3, [sp, #324]	; 0x144
    8c52:	9022      	str	r0, [sp, #136]	; 0x88
    8c54:	4608      	mov	r0, r1
    8c56:	4619      	mov	r1, r3
    8c58:	f005 fea5 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    8c5c:	9021      	str	r0, [sp, #132]	; 0x84
    8c5e:	9120      	str	r1, [sp, #128]	; 0x80
    8c60:	e7ff      	b.n	8c62 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x9a>
    8c62:	9821      	ldr	r0, [sp, #132]	; 0x84
    8c64:	9052      	str	r0, [sp, #328]	; 0x148
    8c66:	9920      	ldr	r1, [sp, #128]	; 0x80
    8c68:	9153      	str	r1, [sp, #332]	; 0x14c
    8c6a:	e7ff      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
    8c6c:	a852      	add	r0, sp, #328	; 0x148
    8c6e:	f005 fe0f 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    8c72:	9155      	str	r1, [sp, #340]	; 0x154
    8c74:	9054      	str	r0, [sp, #336]	; 0x150
    8c76:	e7ff      	b.n	8c78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb0>
    8c78:	9854      	ldr	r0, [sp, #336]	; 0x150
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d001      	beq.n	8c82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xba>
    8c7e:	e7ff      	b.n	8c80 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xb8>
    8c80:	e001      	b.n	8c86 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xbe>
    8c82:	e00d      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
    8c84:	defe      	udf	#254	; 0xfe
    8c86:	9855      	ldr	r0, [sp, #340]	; 0x154
    8c88:	9058      	str	r0, [sp, #352]	; 0x160
    8c8a:	9059      	str	r0, [sp, #356]	; 0x164
    8c8c:	905a      	str	r0, [sp, #360]	; 0x168
    8c8e:	2106      	movs	r1, #6
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8c90:	fba1 1200 	umull	r1, r2, r1, r0
    8c94:	2a00      	cmp	r2, #0
    8c96:	901f      	str	r0, [sp, #124]	; 0x7c
    8c98:	911e      	str	r1, [sp, #120]	; 0x78
    8c9a:	f040 81c1 	bne.w	9020 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x458>
    8c9e:	e002      	b.n	8ca6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xde>
    8ca0:	2001      	movs	r0, #1
            && (data.point_num == 0) {
            break;
        }
    }
    Ok(())
}
    8ca2:	b05e      	add	sp, #376	; 0x178
    8ca4:	bd80      	pop	{r7, pc}
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    8ca6:	981e      	ldr	r0, [sp, #120]	; 0x78
    8ca8:	1d41      	adds	r1, r0, #5
    8caa:	460a      	mov	r2, r1
    8cac:	4281      	cmp	r1, r0
    8cae:	921d      	str	r2, [sp, #116]	; 0x74
    8cb0:	f0c0 81c2 	bcc.w	9038 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x470>
    8cb4:	e7ff      	b.n	8cb6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xee>
    8cb6:	981d      	ldr	r0, [sp, #116]	; 0x74
    8cb8:	283e      	cmp	r0, #62	; 0x3e
    8cba:	f200 81c9 	bhi.w	9050 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x488>
    8cbe:	e7ff      	b.n	8cc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xf8>
    8cc0:	f240 109e 	movw	r0, #414	; 0x19e
    8cc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8cc8:	991d      	ldr	r1, [sp, #116]	; 0x74
    8cca:	5c40      	ldrb	r0, [r0, r1]
    8ccc:	0900      	lsrs	r0, r0, #4
    8cce:	901c      	str	r0, [sp, #112]	; 0x70
    8cd0:	e7ff      	b.n	8cd2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x10a>
    8cd2:	981c      	ldr	r0, [sp, #112]	; 0x70
    8cd4:	f88d 016f 	strb.w	r0, [sp, #367]	; 0x16f
    8cd8:	b2c1      	uxtb	r1, r0
        if pointid >= HYN_MAX_ID { break; }
    8cda:	290e      	cmp	r1, #14
    8cdc:	d80b      	bhi.n	8cf6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x12e>
    8cde:	e7ff      	b.n	8ce0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x118>
        data.count += 1;
    8ce0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ce2:	f890 1050 	ldrb.w	r1, [r0, #80]	; 0x50
    8ce6:	3101      	adds	r1, #1
    8ce8:	b2ca      	uxtb	r2, r1
    8cea:	460b      	mov	r3, r1
    8cec:	428a      	cmp	r2, r1
    8cee:	931b      	str	r3, [sp, #108]	; 0x6c
    8cf0:	f040 81b7 	bne.w	9062 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x49a>
    8cf4:	e001      	b.n	8cfa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x132>
        if pointid >= HYN_MAX_ID { break; }
    8cf6:	e7ff      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
    8cf8:	e7d2      	b.n	8ca0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xd8>
        data.count += 1;
    8cfa:	981b      	ldr	r0, [sp, #108]	; 0x6c
    8cfc:	9926      	ldr	r1, [sp, #152]	; 0x98
    8cfe:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    8d02:	2206      	movs	r2, #6
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8d04:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d06:	fba2 2c03 	umull	r2, ip, r2, r3
    8d0a:	f1bc 0f00 	cmp.w	ip, #0
    8d0e:	921a      	str	r2, [sp, #104]	; 0x68
    8d10:	f040 81b3 	bne.w	907a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4b2>
    8d14:	e7ff      	b.n	8d16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x14e>
    8d16:	981a      	ldr	r0, [sp, #104]	; 0x68
    8d18:	1cc1      	adds	r1, r0, #3
    8d1a:	460a      	mov	r2, r1
    8d1c:	4281      	cmp	r1, r0
    8d1e:	9219      	str	r2, [sp, #100]	; 0x64
    8d20:	f0c0 81b7 	bcc.w	9092 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4ca>
    8d24:	e7ff      	b.n	8d26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x15e>
    8d26:	9819      	ldr	r0, [sp, #100]	; 0x64
    8d28:	283e      	cmp	r0, #62	; 0x3e
    8d2a:	f200 81be 	bhi.w	90aa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4e2>
    8d2e:	e7ff      	b.n	8d30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x168>
    8d30:	f240 109e 	movw	r0, #414	; 0x19e
    8d34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d38:	9919      	ldr	r1, [sp, #100]	; 0x64
    8d3a:	5c40      	ldrb	r0, [r0, r1]
    8d3c:	f000 000f 	and.w	r0, r0, #15
    8d40:	4602      	mov	r2, r0
    8d42:	f8ad 0170 	strh.w	r0, [sp, #368]	; 0x170
    8d46:	2006      	movs	r0, #6
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8d48:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8d4a:	fba0 0c03 	umull	r0, ip, r0, r3
    8d4e:	f1bc 0f00 	cmp.w	ip, #0
    8d52:	9218      	str	r2, [sp, #96]	; 0x60
    8d54:	9017      	str	r0, [sp, #92]	; 0x5c
    8d56:	f040 81b1 	bne.w	90bc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x4f4>
    8d5a:	e7ff      	b.n	8d5c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x194>
    8d5c:	9817      	ldr	r0, [sp, #92]	; 0x5c
    8d5e:	1d01      	adds	r1, r0, #4
    8d60:	460a      	mov	r2, r1
    8d62:	4281      	cmp	r1, r0
    8d64:	9216      	str	r2, [sp, #88]	; 0x58
    8d66:	f0c0 81b5 	bcc.w	90d4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x50c>
    8d6a:	e7ff      	b.n	8d6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1a4>
    8d6c:	9816      	ldr	r0, [sp, #88]	; 0x58
    8d6e:	283e      	cmp	r0, #62	; 0x3e
    8d70:	f200 81bc 	bhi.w	90ec <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x524>
    8d74:	e7ff      	b.n	8d76 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ae>
    8d76:	f240 109e 	movw	r0, #414	; 0x19e
    8d7a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8d7e:	9916      	ldr	r1, [sp, #88]	; 0x58
    8d80:	5c40      	ldrb	r0, [r0, r1]
    8d82:	4602      	mov	r2, r0
    8d84:	f8ad 0172 	strh.w	r0, [sp, #370]	; 0x172
        data.touches[i].x  = (x_high << 8) | x_low;
    8d88:	9818      	ldr	r0, [sp, #96]	; 0x60
    8d8a:	0203      	lsls	r3, r0, #8
    8d8c:	9215      	str	r2, [sp, #84]	; 0x54
    8d8e:	9314      	str	r3, [sp, #80]	; 0x50
    8d90:	e7ff      	b.n	8d92 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1ca>
    8d92:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8d94:	2809      	cmp	r0, #9
    8d96:	f200 81b2 	bhi.w	90fe <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x536>
    8d9a:	e7ff      	b.n	8d9c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1d4>
    8d9c:	9814      	ldr	r0, [sp, #80]	; 0x50
    8d9e:	9915      	ldr	r1, [sp, #84]	; 0x54
    8da0:	ea40 0201 	orr.w	r2, r0, r1
    8da4:	9b26      	ldr	r3, [sp, #152]	; 0x98
    8da6:	f8dd c07c 	ldr.w	ip, [sp, #124]	; 0x7c
    8daa:	f823 203c 	strh.w	r2, [r3, ip, lsl #3]
    8dae:	2206      	movs	r2, #6
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    8db0:	fba2 2e0c 	umull	r2, lr, r2, ip
    8db4:	f1be 0f00 	cmp.w	lr, #0
    8db8:	9213      	str	r2, [sp, #76]	; 0x4c
    8dba:	f040 81a9 	bne.w	9110 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x548>
    8dbe:	e7ff      	b.n	8dc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x1f8>
    8dc0:	9813      	ldr	r0, [sp, #76]	; 0x4c
    8dc2:	1d41      	adds	r1, r0, #5
    8dc4:	460a      	mov	r2, r1
    8dc6:	4281      	cmp	r1, r0
    8dc8:	9212      	str	r2, [sp, #72]	; 0x48
    8dca:	f0c0 81ad 	bcc.w	9128 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x560>
    8dce:	e7ff      	b.n	8dd0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x208>
    8dd0:	9812      	ldr	r0, [sp, #72]	; 0x48
    8dd2:	283e      	cmp	r0, #62	; 0x3e
    8dd4:	f200 81b4 	bhi.w	9140 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x578>
    8dd8:	e7ff      	b.n	8dda <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x212>
    8dda:	f240 109e 	movw	r0, #414	; 0x19e
    8dde:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8de2:	9912      	ldr	r1, [sp, #72]	; 0x48
    8de4:	5c40      	ldrb	r0, [r0, r1]
    8de6:	f000 000f 	and.w	r0, r0, #15
    8dea:	4602      	mov	r2, r0
    8dec:	f8ad 0174 	strh.w	r0, [sp, #372]	; 0x174
    8df0:	2006      	movs	r0, #6
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    8df2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    8df4:	fba0 0c03 	umull	r0, ip, r0, r3
    8df8:	f1bc 0f00 	cmp.w	ip, #0
    8dfc:	9211      	str	r2, [sp, #68]	; 0x44
    8dfe:	9010      	str	r0, [sp, #64]	; 0x40
    8e00:	f040 81a7 	bne.w	9152 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x58a>
    8e04:	e7ff      	b.n	8e06 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x23e>
    8e06:	9810      	ldr	r0, [sp, #64]	; 0x40
    8e08:	1d81      	adds	r1, r0, #6
    8e0a:	460a      	mov	r2, r1
    8e0c:	4281      	cmp	r1, r0
    8e0e:	920f      	str	r2, [sp, #60]	; 0x3c
    8e10:	f0c0 81ab 	bcc.w	916a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5a2>
    8e14:	e7ff      	b.n	8e16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x24e>
    8e16:	980f      	ldr	r0, [sp, #60]	; 0x3c
    8e18:	283e      	cmp	r0, #62	; 0x3e
    8e1a:	f200 81b2 	bhi.w	9182 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5ba>
    8e1e:	e7ff      	b.n	8e20 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x258>
    8e20:	f240 109e 	movw	r0, #414	; 0x19e
    8e24:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e28:	990f      	ldr	r1, [sp, #60]	; 0x3c
    8e2a:	5c40      	ldrb	r0, [r0, r1]
    8e2c:	4602      	mov	r2, r0
    8e2e:	f8ad 0176 	strh.w	r0, [sp, #374]	; 0x176
        data.touches[i].y  = (y_high << 8) | y_low;
    8e32:	9811      	ldr	r0, [sp, #68]	; 0x44
    8e34:	0203      	lsls	r3, r0, #8
    8e36:	920e      	str	r2, [sp, #56]	; 0x38
    8e38:	930d      	str	r3, [sp, #52]	; 0x34
    8e3a:	e7ff      	b.n	8e3c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x274>
    8e3c:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e3e:	2809      	cmp	r0, #9
    8e40:	f200 81a8 	bhi.w	9194 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5cc>
    8e44:	e7ff      	b.n	8e46 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x27e>
    8e46:	9826      	ldr	r0, [sp, #152]	; 0x98
    8e48:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8e4a:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8e4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8e50:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    8e54:	ea43 0e0c 	orr.w	lr, r3, ip
    8e58:	f8a2 e002 	strh.w	lr, [r2, #2]
    8e5c:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    8e5e:	fba2 2e01 	umull	r2, lr, r2, r1
    8e62:	f1be 0f00 	cmp.w	lr, #0
    8e66:	920c      	str	r2, [sp, #48]	; 0x30
    8e68:	f040 819d 	bne.w	91a6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5de>
    8e6c:	e7ff      	b.n	8e6e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2a6>
    8e6e:	980c      	ldr	r0, [sp, #48]	; 0x30
    8e70:	1cc1      	adds	r1, r0, #3
    8e72:	460a      	mov	r2, r1
    8e74:	4281      	cmp	r1, r0
    8e76:	920b      	str	r2, [sp, #44]	; 0x2c
    8e78:	f0c0 81a1 	bcc.w	91be <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x5f6>
    8e7c:	e7ff      	b.n	8e7e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2b6>
    8e7e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    8e80:	283e      	cmp	r0, #62	; 0x3e
    8e82:	f200 81a8 	bhi.w	91d6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x60e>
    8e86:	e7ff      	b.n	8e88 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2c0>
    8e88:	f240 109e 	movw	r0, #414	; 0x19e
    8e8c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8e90:	990b      	ldr	r1, [sp, #44]	; 0x2c
    8e92:	5c40      	ldrb	r0, [r0, r1]
    8e94:	0980      	lsrs	r0, r0, #6
    8e96:	900a      	str	r0, [sp, #40]	; 0x28
    8e98:	e7ff      	b.n	8e9a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2d2>
        data.touches[i].action =
    8e9a:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8e9c:	2809      	cmp	r0, #9
    8e9e:	f200 81a3 	bhi.w	91e8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x620>
    8ea2:	e7ff      	b.n	8ea4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2dc>
    8ea4:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ea6:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8ea8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8eac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8eae:	7113      	strb	r3, [r2, #4]
    8eb0:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    8eb2:	fba2 2c01 	umull	r2, ip, r2, r1
    8eb6:	f1bc 0f00 	cmp.w	ip, #0
    8eba:	9209      	str	r2, [sp, #36]	; 0x24
    8ebc:	f040 819d 	bne.w	91fa <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x632>
    8ec0:	e7ff      	b.n	8ec2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x2fa>
    8ec2:	9809      	ldr	r0, [sp, #36]	; 0x24
    8ec4:	1d41      	adds	r1, r0, #5
    8ec6:	460a      	mov	r2, r1
    8ec8:	4281      	cmp	r1, r0
    8eca:	9208      	str	r2, [sp, #32]
    8ecc:	f0c0 81a1 	bcc.w	9212 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x64a>
    8ed0:	e7ff      	b.n	8ed2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x30a>
    8ed2:	9808      	ldr	r0, [sp, #32]
    8ed4:	283e      	cmp	r0, #62	; 0x3e
    8ed6:	f200 81a8 	bhi.w	922a <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x662>
    8eda:	e7ff      	b.n	8edc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x314>
    8edc:	f240 109e 	movw	r0, #414	; 0x19e
    8ee0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8ee4:	9908      	ldr	r1, [sp, #32]
    8ee6:	5c40      	ldrb	r0, [r0, r1]
    8ee8:	0900      	lsrs	r0, r0, #4
    8eea:	9007      	str	r0, [sp, #28]
    8eec:	e7ff      	b.n	8eee <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x326>
        data.touches[i].finger =
    8eee:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8ef0:	2809      	cmp	r0, #9
    8ef2:	f200 81a3 	bhi.w	923c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x674>
    8ef6:	e7ff      	b.n	8ef8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x330>
    8ef8:	9826      	ldr	r0, [sp, #152]	; 0x98
    8efa:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8efc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f00:	9b07      	ldr	r3, [sp, #28]
    8f02:	7153      	strb	r3, [r2, #5]
    8f04:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    8f06:	fba2 2c01 	umull	r2, ip, r2, r1
    8f0a:	f1bc 0f00 	cmp.w	ip, #0
    8f0e:	9206      	str	r2, [sp, #24]
    8f10:	f040 819d 	bne.w	924e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x686>
    8f14:	e7ff      	b.n	8f16 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x34e>
    8f16:	9806      	ldr	r0, [sp, #24]
    8f18:	1dc1      	adds	r1, r0, #7
    8f1a:	460a      	mov	r2, r1
    8f1c:	4281      	cmp	r1, r0
    8f1e:	9205      	str	r2, [sp, #20]
    8f20:	f0c0 81a1 	bcc.w	9266 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x69e>
    8f24:	e7ff      	b.n	8f26 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x35e>
    8f26:	9805      	ldr	r0, [sp, #20]
    8f28:	283e      	cmp	r0, #62	; 0x3e
    8f2a:	f200 81a8 	bhi.w	927e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6b6>
    8f2e:	e7ff      	b.n	8f30 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x368>
    8f30:	f240 109e 	movw	r0, #414	; 0x19e
    8f34:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f38:	9905      	ldr	r1, [sp, #20]
    8f3a:	5c40      	ldrb	r0, [r0, r1]
        data.touches[i].pressure =
    8f3c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
    8f3e:	2a09      	cmp	r2, #9
    8f40:	9004      	str	r0, [sp, #16]
    8f42:	f200 81a5 	bhi.w	9290 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6c8>
    8f46:	e7ff      	b.n	8f48 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x380>
    8f48:	9826      	ldr	r0, [sp, #152]	; 0x98
    8f4a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8f4c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8f50:	9b04      	ldr	r3, [sp, #16]
    8f52:	7193      	strb	r3, [r2, #6]
    8f54:	2206      	movs	r2, #6
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    8f56:	fba2 2c01 	umull	r2, ip, r2, r1
    8f5a:	f1bc 0f00 	cmp.w	ip, #0
    8f5e:	9203      	str	r2, [sp, #12]
    8f60:	f040 819f 	bne.w	92a2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6da>
    8f64:	e7ff      	b.n	8f66 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x39e>
    8f66:	9803      	ldr	r0, [sp, #12]
    8f68:	f100 0108 	add.w	r1, r0, #8
    8f6c:	460a      	mov	r2, r1
    8f6e:	4281      	cmp	r1, r0
    8f70:	9202      	str	r2, [sp, #8]
    8f72:	f0c0 81a2 	bcc.w	92ba <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x6f2>
    8f76:	e7ff      	b.n	8f78 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3b0>
    8f78:	9802      	ldr	r0, [sp, #8]
    8f7a:	283e      	cmp	r0, #62	; 0x3e
    8f7c:	f200 81a9 	bhi.w	92d2 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x70a>
    8f80:	e7ff      	b.n	8f82 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3ba>
    8f82:	f240 109e 	movw	r0, #414	; 0x19e
    8f86:	f2c2 0000 	movt	r0, #8192	; 0x2000
    8f8a:	9902      	ldr	r1, [sp, #8]
    8f8c:	5c40      	ldrb	r0, [r0, r1]
    8f8e:	0900      	lsrs	r0, r0, #4
    8f90:	9001      	str	r0, [sp, #4]
    8f92:	e7ff      	b.n	8f94 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3cc>
        data.touches[i].area =
    8f94:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8f96:	2809      	cmp	r0, #9
    8f98:	f200 81a4 	bhi.w	92e4 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x71c>
    8f9c:	e7ff      	b.n	8f9e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3d6>
    8f9e:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fa0:	991f      	ldr	r1, [sp, #124]	; 0x7c
    8fa2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    8fa6:	9b01      	ldr	r3, [sp, #4]
    8fa8:	71d3      	strb	r3, [r2, #7]
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8faa:	290a      	cmp	r1, #10
    8fac:	d326      	bcc.n	8ffc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x434>
    8fae:	e1a2      	b.n	92f6 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x72e>
    8fb0:	2001      	movs	r0, #1
    8fb2:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fb6:	e009      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
    8fb8:	2000      	movs	r0, #0
    8fba:	f88d 015a 	strb.w	r0, [sp, #346]	; 0x15a
    8fbe:	e005      	b.n	8fcc <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x404>
            && (data.point_num == 0) {
    8fc0:	9826      	ldr	r0, [sp, #152]	; 0x98
    8fc2:	f890 1051 	ldrb.w	r1, [r0, #81]	; 0x51
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    8fc6:	2900      	cmp	r1, #0
    8fc8:	d0f2      	beq.n	8fb0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3e8>
    8fca:	e7f5      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8fcc:	f89d 015a 	ldrb.w	r0, [sp, #346]	; 0x15a
    8fd0:	07c0      	lsls	r0, r0, #31
    8fd2:	2800      	cmp	r0, #0
    8fd4:	d123      	bne.n	901e <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x456>
    8fd6:	e021      	b.n	901c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x454>
    8fd8:	2001      	movs	r0, #1
    8fda:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fde:	e007      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe0:	2000      	movs	r0, #0
    8fe2:	f88d 015b 	strb.w	r0, [sp, #347]	; 0x15b
    8fe6:	e003      	b.n	8ff0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x428>
    8fe8:	981f      	ldr	r0, [sp, #124]	; 0x7c
    8fea:	280a      	cmp	r0, #10
    8fec:	d30e      	bcc.n	900c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x444>
    8fee:	e18b      	b.n	9308 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x740>
    8ff0:	f89d 015b 	ldrb.w	r0, [sp, #347]	; 0x15b
    8ff4:	07c0      	lsls	r0, r0, #31
    8ff6:	2800      	cmp	r0, #0
    8ff8:	d1e2      	bne.n	8fc0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f8>
    8ffa:	e7dd      	b.n	8fb8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x3f0>
    8ffc:	9826      	ldr	r0, [sp, #152]	; 0x98
    8ffe:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9000:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9004:	7912      	ldrb	r2, [r2, #4]
    9006:	2a00      	cmp	r2, #0
    9008:	d0e6      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    900a:	e7ed      	b.n	8fe8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x420>
    900c:	9826      	ldr	r0, [sp, #152]	; 0x98
    900e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9010:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
    9014:	7912      	ldrb	r2, [r2, #4]
    9016:	2a02      	cmp	r2, #2
    9018:	d0de      	beq.n	8fd8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x410>
    901a:	e7e1      	b.n	8fe0 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x418>
    for i in 0..CFG_MAX_TOUCH_POINTS {
    901c:	e626      	b.n	8c6c <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0xa4>
            break;
    901e:	e66b      	b.n	8cf8 <_ZN3app12touch_sensor14read_touchdata17haed9f2b9891b9264E+0x130>
        let pointid = unsafe { BUF[HYN_TOUCH_ID_POS + HYN_TOUCH_STEP * i] } >> 4;
    9020:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    9024:	f2c0 0001 	movt	r0, #1
    9028:	f24d 42d0 	movw	r2, #54480	; 0xd4d0
    902c:	f2c0 0201 	movt	r2, #1
    9030:	2121      	movs	r1, #33	; 0x21
    9032:	f00d fd37 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9036:	defe      	udf	#254	; 0xfe
    9038:	f24d 5020 	movw	r0, #54560	; 0xd520
    903c:	f2c0 0001 	movt	r0, #1
    9040:	f24d 5204 	movw	r2, #54532	; 0xd504
    9044:	f2c0 0201 	movt	r2, #1
    9048:	211c      	movs	r1, #28
    904a:	f00d fd2b 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    904e:	defe      	udf	#254	; 0xfe
    9050:	f24d 503c 	movw	r0, #54588	; 0xd53c
    9054:	f2c0 0001 	movt	r0, #1
    9058:	223f      	movs	r2, #63	; 0x3f
    905a:	991d      	ldr	r1, [sp, #116]	; 0x74
    905c:	f00d fd38 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9060:	defe      	udf	#254	; 0xfe
        data.count += 1;
    9062:	f24d 5020 	movw	r0, #54560	; 0xd520
    9066:	f2c0 0001 	movt	r0, #1
    906a:	f24d 524c 	movw	r2, #54604	; 0xd54c
    906e:	f2c0 0201 	movt	r2, #1
    9072:	211c      	movs	r1, #28
    9074:	f00d fd16 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9078:	defe      	udf	#254	; 0xfe
        let x_high = unsafe { BUF[HYN_TOUCH_X_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    907a:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    907e:	f2c0 0001 	movt	r0, #1
    9082:	f24d 525c 	movw	r2, #54620	; 0xd55c
    9086:	f2c0 0201 	movt	r2, #1
    908a:	2121      	movs	r1, #33	; 0x21
    908c:	f00d fd0a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9090:	defe      	udf	#254	; 0xfe
    9092:	f24d 5020 	movw	r0, #54560	; 0xd520
    9096:	f2c0 0001 	movt	r0, #1
    909a:	f24d 526c 	movw	r2, #54636	; 0xd56c
    909e:	f2c0 0201 	movt	r2, #1
    90a2:	211c      	movs	r1, #28
    90a4:	f00d fcfe 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90a8:	defe      	udf	#254	; 0xfe
    90aa:	f24d 507c 	movw	r0, #54652	; 0xd57c
    90ae:	f2c0 0001 	movt	r0, #1
    90b2:	223f      	movs	r2, #63	; 0x3f
    90b4:	9919      	ldr	r1, [sp, #100]	; 0x64
    90b6:	f00d fd0b 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90ba:	defe      	udf	#254	; 0xfe
        let x_low  = unsafe { BUF[HYN_TOUCH_X_L_POS + HYN_TOUCH_STEP * i] } as u16;
    90bc:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    90c0:	f2c0 0001 	movt	r0, #1
    90c4:	f24d 528c 	movw	r2, #54668	; 0xd58c
    90c8:	f2c0 0201 	movt	r2, #1
    90cc:	2121      	movs	r1, #33	; 0x21
    90ce:	f00d fce9 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90d2:	defe      	udf	#254	; 0xfe
    90d4:	f24d 5020 	movw	r0, #54560	; 0xd520
    90d8:	f2c0 0001 	movt	r0, #1
    90dc:	f24d 529c 	movw	r2, #54684	; 0xd59c
    90e0:	f2c0 0201 	movt	r2, #1
    90e4:	211c      	movs	r1, #28
    90e6:	f00d fcdd 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    90ea:	defe      	udf	#254	; 0xfe
    90ec:	f24d 50ac 	movw	r0, #54700	; 0xd5ac
    90f0:	f2c0 0001 	movt	r0, #1
    90f4:	223f      	movs	r2, #63	; 0x3f
    90f6:	9916      	ldr	r1, [sp, #88]	; 0x58
    90f8:	f00d fcea 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    90fc:	defe      	udf	#254	; 0xfe
        data.touches[i].x  = (x_high << 8) | x_low;
    90fe:	f24d 50bc 	movw	r0, #54716	; 0xd5bc
    9102:	f2c0 0001 	movt	r0, #1
    9106:	220a      	movs	r2, #10
    9108:	991f      	ldr	r1, [sp, #124]	; 0x7c
    910a:	f00d fce1 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    910e:	defe      	udf	#254	; 0xfe
        let y_high = unsafe { BUF[HYN_TOUCH_Y_H_POS + HYN_TOUCH_STEP * i] & 0x0F } as u16;
    9110:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    9114:	f2c0 0001 	movt	r0, #1
    9118:	f24d 52cc 	movw	r2, #54732	; 0xd5cc
    911c:	f2c0 0201 	movt	r2, #1
    9120:	2121      	movs	r1, #33	; 0x21
    9122:	f00d fcbf 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9126:	defe      	udf	#254	; 0xfe
    9128:	f24d 5020 	movw	r0, #54560	; 0xd520
    912c:	f2c0 0001 	movt	r0, #1
    9130:	f24d 52dc 	movw	r2, #54748	; 0xd5dc
    9134:	f2c0 0201 	movt	r2, #1
    9138:	211c      	movs	r1, #28
    913a:	f00d fcb3 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    913e:	defe      	udf	#254	; 0xfe
    9140:	f24d 50ec 	movw	r0, #54764	; 0xd5ec
    9144:	f2c0 0001 	movt	r0, #1
    9148:	223f      	movs	r2, #63	; 0x3f
    914a:	9912      	ldr	r1, [sp, #72]	; 0x48
    914c:	f00d fcc0 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9150:	defe      	udf	#254	; 0xfe
        let y_low  = unsafe { BUF[HYN_TOUCH_Y_L_POS + HYN_TOUCH_STEP * i] } as u16;
    9152:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    9156:	f2c0 0001 	movt	r0, #1
    915a:	f24d 52fc 	movw	r2, #54780	; 0xd5fc
    915e:	f2c0 0201 	movt	r2, #1
    9162:	2121      	movs	r1, #33	; 0x21
    9164:	f00d fc9e 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9168:	defe      	udf	#254	; 0xfe
    916a:	f24d 5020 	movw	r0, #54560	; 0xd520
    916e:	f2c0 0001 	movt	r0, #1
    9172:	f24d 620c 	movw	r2, #54796	; 0xd60c
    9176:	f2c0 0201 	movt	r2, #1
    917a:	211c      	movs	r1, #28
    917c:	f00d fc92 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9180:	defe      	udf	#254	; 0xfe
    9182:	f24d 601c 	movw	r0, #54812	; 0xd61c
    9186:	f2c0 0001 	movt	r0, #1
    918a:	223f      	movs	r2, #63	; 0x3f
    918c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    918e:	f00d fc9f 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9192:	defe      	udf	#254	; 0xfe
        data.touches[i].y  = (y_high << 8) | y_low;
    9194:	f24d 602c 	movw	r0, #54828	; 0xd62c
    9198:	f2c0 0001 	movt	r0, #1
    919c:	220a      	movs	r2, #10
    919e:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91a0:	f00d fc96 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91a4:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_EVENT_POS + HYN_TOUCH_STEP * i] } >> 6;
    91a6:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    91aa:	f2c0 0001 	movt	r0, #1
    91ae:	f24d 623c 	movw	r2, #54844	; 0xd63c
    91b2:	f2c0 0201 	movt	r2, #1
    91b6:	2121      	movs	r1, #33	; 0x21
    91b8:	f00d fc74 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91bc:	defe      	udf	#254	; 0xfe
    91be:	f24d 5020 	movw	r0, #54560	; 0xd520
    91c2:	f2c0 0001 	movt	r0, #1
    91c6:	f24d 624c 	movw	r2, #54860	; 0xd64c
    91ca:	f2c0 0201 	movt	r2, #1
    91ce:	211c      	movs	r1, #28
    91d0:	f00d fc68 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    91d4:	defe      	udf	#254	; 0xfe
    91d6:	f24d 605c 	movw	r0, #54876	; 0xd65c
    91da:	f2c0 0001 	movt	r0, #1
    91de:	223f      	movs	r2, #63	; 0x3f
    91e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
    91e2:	f00d fc75 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91e6:	defe      	udf	#254	; 0xfe
        data.touches[i].action =
    91e8:	f24d 606c 	movw	r0, #54892	; 0xd66c
    91ec:	f2c0 0001 	movt	r0, #1
    91f0:	220a      	movs	r2, #10
    91f2:	991f      	ldr	r1, [sp, #124]	; 0x7c
    91f4:	f00d fc6c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    91f8:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_ID_POS    + HYN_TOUCH_STEP * i] } >> 4;
    91fa:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    91fe:	f2c0 0001 	movt	r0, #1
    9202:	f24d 627c 	movw	r2, #54908	; 0xd67c
    9206:	f2c0 0201 	movt	r2, #1
    920a:	2121      	movs	r1, #33	; 0x21
    920c:	f00d fc4a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9210:	defe      	udf	#254	; 0xfe
    9212:	f24d 5020 	movw	r0, #54560	; 0xd520
    9216:	f2c0 0001 	movt	r0, #1
    921a:	f24d 628c 	movw	r2, #54924	; 0xd68c
    921e:	f2c0 0201 	movt	r2, #1
    9222:	211c      	movs	r1, #28
    9224:	f00d fc3e 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9228:	defe      	udf	#254	; 0xfe
    922a:	f24d 609c 	movw	r0, #54940	; 0xd69c
    922e:	f2c0 0001 	movt	r0, #1
    9232:	223f      	movs	r2, #63	; 0x3f
    9234:	9908      	ldr	r1, [sp, #32]
    9236:	f00d fc4b 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    923a:	defe      	udf	#254	; 0xfe
        data.touches[i].finger =
    923c:	f24d 60ac 	movw	r0, #54956	; 0xd6ac
    9240:	f2c0 0001 	movt	r0, #1
    9244:	220a      	movs	r2, #10
    9246:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9248:	f00d fc42 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    924c:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_XY_POS + HYN_TOUCH_STEP * i] };  //  Can't be constant value
    924e:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    9252:	f2c0 0001 	movt	r0, #1
    9256:	f24d 62bc 	movw	r2, #54972	; 0xd6bc
    925a:	f2c0 0201 	movt	r2, #1
    925e:	2121      	movs	r1, #33	; 0x21
    9260:	f00d fc20 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9264:	defe      	udf	#254	; 0xfe
    9266:	f24d 5020 	movw	r0, #54560	; 0xd520
    926a:	f2c0 0001 	movt	r0, #1
    926e:	f24d 62cc 	movw	r2, #54988	; 0xd6cc
    9272:	f2c0 0201 	movt	r2, #1
    9276:	211c      	movs	r1, #28
    9278:	f00d fc14 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    927c:	defe      	udf	#254	; 0xfe
    927e:	f24d 60dc 	movw	r0, #55004	; 0xd6dc
    9282:	f2c0 0001 	movt	r0, #1
    9286:	223f      	movs	r2, #63	; 0x3f
    9288:	9905      	ldr	r1, [sp, #20]
    928a:	f00d fc21 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    928e:	defe      	udf	#254	; 0xfe
        data.touches[i].pressure =
    9290:	f24d 60ec 	movw	r0, #55020	; 0xd6ec
    9294:	f2c0 0001 	movt	r0, #1
    9298:	220a      	movs	r2, #10
    929a:	991f      	ldr	r1, [sp, #124]	; 0x7c
    929c:	f00d fc18 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92a0:	defe      	udf	#254	; 0xfe
            unsafe { BUF[HYN_TOUCH_MISC   + HYN_TOUCH_STEP * i] } >> 4;
    92a2:	f24d 40e0 	movw	r0, #54496	; 0xd4e0
    92a6:	f2c0 0001 	movt	r0, #1
    92aa:	f24d 62fc 	movw	r2, #55036	; 0xd6fc
    92ae:	f2c0 0201 	movt	r2, #1
    92b2:	2121      	movs	r1, #33	; 0x21
    92b4:	f00d fbf6 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92b8:	defe      	udf	#254	; 0xfe
    92ba:	f24d 5020 	movw	r0, #54560	; 0xd520
    92be:	f2c0 0001 	movt	r0, #1
    92c2:	f24d 720c 	movw	r2, #55052	; 0xd70c
    92c6:	f2c0 0201 	movt	r2, #1
    92ca:	211c      	movs	r1, #28
    92cc:	f00d fbea 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    92d0:	defe      	udf	#254	; 0xfe
    92d2:	f24d 701c 	movw	r0, #55068	; 0xd71c
    92d6:	f2c0 0001 	movt	r0, #1
    92da:	223f      	movs	r2, #63	; 0x3f
    92dc:	9902      	ldr	r1, [sp, #8]
    92de:	f00d fbf7 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92e2:	defe      	udf	#254	; 0xfe
        data.touches[i].area =
    92e4:	f24d 702c 	movw	r0, #55084	; 0xd72c
    92e8:	f2c0 0001 	movt	r0, #1
    92ec:	220a      	movs	r2, #10
    92ee:	991f      	ldr	r1, [sp, #124]	; 0x7c
    92f0:	f00d fbee 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    92f4:	defe      	udf	#254	; 0xfe
        if (data.touches[i].action == 0 || data.touches[i].action == 2)  //  If touch is down or contact
    92f6:	f24d 703c 	movw	r0, #55100	; 0xd73c
    92fa:	f2c0 0001 	movt	r0, #1
    92fe:	220a      	movs	r2, #10
    9300:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9302:	f00d fbe5 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9306:	defe      	udf	#254	; 0xfe
    9308:	f24d 704c 	movw	r0, #55116	; 0xd74c
    930c:	f2c0 0001 	movt	r0, #1
    9310:	220a      	movs	r2, #10
    9312:	991f      	ldr	r1, [sp, #124]	; 0x7c
    9314:	f00d fbdc 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9318:	defe      	udf	#254	; 0xfe

0000931a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E>:

/// Event that will be forwarded to the Event Queue when a touch interrupt is triggered
static mut TOUCH_EVENT: os_event = fill_zero!(os_event);  //  Init all fields to 0 or NULL

/// Read a range of I2C registers from the I2C address `addr` (7-bit address), starting at `start_register` for count `num_registers`. Save into `buffer`.
fn read_register_range(addr: u8, start_register: u8, num_registers: u8, buffer: &mut[u8]) -> MynewtResult<()> {
    931a:	b5b0      	push	{r4, r5, r7, lr}
    931c:	b094      	sub	sp, #80	; 0x50
    931e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
    9322:	4696      	mov	lr, r2
    9324:	460c      	mov	r4, r1
    9326:	4605      	mov	r5, r0
    9328:	f88d 003d 	strb.w	r0, [sp, #61]	; 0x3d
    932c:	f88d 103e 	strb.w	r1, [sp, #62]	; 0x3e
    9330:	f88d 203f 	strb.w	r2, [sp, #63]	; 0x3f
    9334:	9310      	str	r3, [sp, #64]	; 0x40
    9336:	f8cd c044 	str.w	ip, [sp, #68]	; 0x44
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    933a:	4618      	mov	r0, r3
    933c:	4661      	mov	r1, ip
    933e:	930d      	str	r3, [sp, #52]	; 0x34
    9340:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    9344:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
    9348:	940a      	str	r4, [sp, #40]	; 0x28
    934a:	9509      	str	r5, [sp, #36]	; 0x24
    934c:	f005 fb04 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    9350:	9008      	str	r0, [sp, #32]
    9352:	e7ff      	b.n	9354 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x3a>
    9354:	980b      	ldr	r0, [sp, #44]	; 0x2c
    9356:	b2c1      	uxtb	r1, r0
    9358:	9a08      	ldr	r2, [sp, #32]
    935a:	428a      	cmp	r2, r1
    935c:	d30d      	bcc.n	937a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x60>
    935e:	e7ff      	b.n	9360 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x46>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9360:	980a      	ldr	r0, [sp, #40]	; 0x28
    9362:	b2c1      	uxtb	r1, r0
    9364:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9366:	fa51 f182 	uxtab	r1, r1, r2
    936a:	b2cb      	uxtb	r3, r1
    936c:	468c      	mov	ip, r1
    936e:	428b      	cmp	r3, r1
    9370:	f8cd c01c 	str.w	ip, [sp, #28]
    9374:	f040 8092 	bne.w	949c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x182>
    9378:	e00b      	b.n	9392 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x78>
    assert!(buffer.len() >= num_registers as usize, "i2c buf");  //  Buffer too small
    937a:	f24d 705c 	movw	r0, #55132	; 0xd75c
    937e:	f2c0 0001 	movt	r0, #1
    9382:	f24d 7264 	movw	r2, #55140	; 0xd764
    9386:	f2c0 0201 	movt	r2, #1
    938a:	2107      	movs	r1, #7
    938c:	f00d fb8a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9390:	defe      	udf	#254	; 0xfe
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    9392:	9807      	ldr	r0, [sp, #28]
    9394:	b241      	sxtb	r1, r0
    9396:	2900      	cmp	r1, #0
    9398:	d411      	bmi.n	93be <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xa4>
    939a:	e7ff      	b.n	939c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x82>
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Write Mode (1 bit, value 0)...
    //    Followed by starting Register Number (8 bits)
    unsafe { 
        I2C_BUFFER[0] = start_register;  //  I2C Packet buffer contains starting Register Number (1 byte)
    939c:	f240 10f8 	movw	r0, #504	; 0x1f8
    93a0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93a4:	990a      	ldr	r1, [sp, #40]	; 0x28
    93a6:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;         //  I2C Packet address (7 bits)
    93a8:	f240 12f0 	movw	r2, #496	; 0x1f0
    93ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
    93b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    93b2:	7013      	strb	r3, [r2, #0]
    93b4:	2101      	movs	r1, #1
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93b6:	f005 facf 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    93ba:	9006      	str	r0, [sp, #24]
    93bc:	e00b      	b.n	93d6 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xbc>
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    93be:	f24d 4064 	movw	r0, #54372	; 0xd464
    93c2:	f2c0 0001 	movt	r0, #1
    93c6:	f24d 7284 	movw	r2, #55172	; 0xd784
    93ca:	f2c0 0201 	movt	r2, #1
    93ce:	2108      	movs	r1, #8
    93d0:	f00d fb68 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    93d4:	defe      	udf	#254	; 0xfe
        I2C_DATA.len = I2C_BUFFER.len() as u16;     //  I2C Packet data size is 1 byte
    93d6:	f240 10f0 	movw	r0, #496	; 0x1f0
    93da:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93de:	9906      	ldr	r1, [sp, #24]
    93e0:	8041      	strh	r1, [r0, #2]
        I2C_DATA.buffer = I2C_BUFFER.as_mut_ptr();  //  I2C Packet data points to packet buffer
    93e2:	f240 10f8 	movw	r0, #504	; 0x1f8
    93e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93ea:	2101      	movs	r1, #1
    93ec:	f005 fa9d 	bl	e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    93f0:	9005      	str	r0, [sp, #20]
    93f2:	e7ff      	b.n	93f4 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0xda>
    93f4:	f240 10f0 	movw	r0, #496	; 0x1f0
    93f8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    93fc:	9905      	ldr	r1, [sp, #20]
    93fe:	6041      	str	r1, [r0, #4]
    9400:	2201      	movs	r2, #1
    9402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9406:	f04f 0c00 	mov.w	ip, #0
    };
    let _rc1 = unsafe { hal::hal_i2c_master_write(1, &mut I2C_DATA, 1000, 0) };  //  No stop yet, must continue even if we hit an error
    940a:	9004      	str	r0, [sp, #16]
    940c:	4610      	mov	r0, r2
    940e:	9904      	ldr	r1, [sp, #16]
    9410:	461a      	mov	r2, r3
    9412:	4663      	mov	r3, ip
    9414:	f00f fe34 	bl	19080 <hal_i2c_master_write>
    9418:	9012      	str	r0, [sp, #72]	; 0x48
    941a:	e7ff      	b.n	941c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x102>
    //  Step 3: Prepare to receive the stream of I2C Device Register values...
    //    Send the Start Condition (High to Low SDA Transition)...
    //    Followed by I2C Address (7 bits)...
    //    Followed by Read Mode (1 bit, value 1)
    unsafe { 
        I2C_BUFFER[0] = 0x00;     //  I2C Packet buffer should be empty (provided by caller)
    941c:	f240 10f8 	movw	r0, #504	; 0x1f8
    9420:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9424:	2100      	movs	r1, #0
    9426:	7001      	strb	r1, [r0, #0]
        I2C_DATA.address = addr;  //  I2C Packet address (7 bits)
    9428:	f240 10f0 	movw	r0, #496	; 0x1f0
    942c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9430:	9909      	ldr	r1, [sp, #36]	; 0x24
    9432:	7001      	strb	r1, [r0, #0]
        I2C_DATA.len = num_registers as u16;    //  I2C Packet data size is number of Registers to read
    9434:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9436:	b2d3      	uxtb	r3, r2
    9438:	8043      	strh	r3, [r0, #2]
        I2C_DATA.buffer = buffer.as_mut_ptr();  //  I2C Packet data points to packet buffer
    943a:	980d      	ldr	r0, [sp, #52]	; 0x34
    943c:	990c      	ldr	r1, [sp, #48]	; 0x30
    943e:	f005 fa74 	bl	e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    9442:	9003      	str	r0, [sp, #12]
    9444:	e7ff      	b.n	9446 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x12c>
    9446:	f240 10f0 	movw	r0, #496	; 0x1f0
    944a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    944e:	9903      	ldr	r1, [sp, #12]
    9450:	6041      	str	r1, [r0, #4]
    9452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9456:	2301      	movs	r3, #1
    };
    //  Step 4: Receive the requested number of Register values from I2C Device (1 byte per register)
    //  Step 5: Send the Stop Condition (Low to High SDA Transition)
    let rc2 = unsafe { hal::hal_i2c_master_read(1, &mut I2C_DATA, 1000, 1) };
    9458:	9002      	str	r0, [sp, #8]
    945a:	4618      	mov	r0, r3
    945c:	9902      	ldr	r1, [sp, #8]
    945e:	f00f fea3 	bl	191a8 <hal_i2c_master_read>
    9462:	4601      	mov	r1, r0
    9464:	9013      	str	r0, [sp, #76]	; 0x4c
    9466:	9101      	str	r1, [sp, #4]
    9468:	e7ff      	b.n	946a <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x150>
    if rc2 == hal::HAL_I2C_ERR_ADDR_NACK as i32 {
    946a:	9801      	ldr	r0, [sp, #4]
    946c:	2804      	cmp	r0, #4
    946e:	d005      	beq.n	947c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x162>
    9470:	e7ff      	b.n	9472 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x158>
    9472:	2000      	movs	r0, #0
        ////assert!(false, "i2c fail");  //  I2C read failed
        console::print("i2c fail\n"); ////
        return Ok(());               //  TODO: Return an error
    }
    Ok(())
    9474:	900e      	str	r0, [sp, #56]	; 0x38
    9476:	2001      	movs	r0, #1
    9478:	900e      	str	r0, [sp, #56]	; 0x38
}
    947a:	e00c      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
        console::print("i2c fail\n"); ////
    947c:	f24d 7094 	movw	r0, #55188	; 0xd794
    9480:	f2c0 0001 	movt	r0, #1
    9484:	2109      	movs	r1, #9
    9486:	f006 f972 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    948a:	e7ff      	b.n	948c <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x172>
    948c:	2000      	movs	r0, #0
        return Ok(());               //  TODO: Return an error
    948e:	900e      	str	r0, [sp, #56]	; 0x38
    9490:	2001      	movs	r0, #1
    9492:	900e      	str	r0, [sp, #56]	; 0x38
    9494:	e7ff      	b.n	9496 <_ZN3app12touch_sensor19read_register_range17h1722c5f8f9cf7b19E+0x17c>
}
    9496:	980e      	ldr	r0, [sp, #56]	; 0x38
    9498:	b014      	add	sp, #80	; 0x50
    949a:	bdb0      	pop	{r4, r5, r7, pc}
    assert!(start_register + num_registers < 128, "i2c addr");   //  Not 7-bit address
    949c:	f24d 5020 	movw	r0, #54560	; 0xd520
    94a0:	f2c0 0001 	movt	r0, #1
    94a4:	f24d 7274 	movw	r2, #55156	; 0xd774
    94a8:	f2c0 0201 	movt	r2, #1
    94ac:	211c      	movs	r1, #28
    94ae:	f00d faf9 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    94b2:	defe      	udf	#254	; 0xfe

000094b4 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E>:

/// Size of the stack (in 4-byte units). Previously `OS_STACK_ALIGN(256)`  
const CHIP8_TASK_STACK_SIZE: usize = 3072;  //  Must be 3072 and above because CHIP8 Emulator requires substantial stack space

/// Render some graphics and text to the PineTime display. `start_display()` must have been called earlier.
pub fn on_start() -> MynewtResult<()> {
    94b4:	b580      	push	{r7, lr}
    94b6:	b0a4      	sub	sp, #144	; 0x90
    console::print("Rust CHIP8\n"); console::flush();
    94b8:	f24d 709d 	movw	r0, #55197	; 0xd79d
    94bc:	f2c0 0001 	movt	r0, #1
    94c0:	210b      	movs	r1, #11
    94c2:	f006 f954 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    94c6:	e7ff      	b.n	94c8 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x14>
    94c8:	f006 f997 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    94cc:	e7ff      	b.n	94ce <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x1a>
    94ce:	2000      	movs	r0, #0
    
    //  Create black background
    let background = Rectangle::<Rgb565>
        ::new( Coord::new( 0, 0 ), Coord::new( 239, 239 ) )   //  Rectangle coordinates
    94d0:	900e      	str	r0, [sp, #56]	; 0x38
    94d2:	990e      	ldr	r1, [sp, #56]	; 0x38
    94d4:	f004 ff67 	bl	e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94d8:	900d      	str	r0, [sp, #52]	; 0x34
    94da:	910c      	str	r1, [sp, #48]	; 0x30
    94dc:	e7ff      	b.n	94de <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x2a>
    94de:	20ef      	movs	r0, #239	; 0xef
    94e0:	900b      	str	r0, [sp, #44]	; 0x2c
    94e2:	990b      	ldr	r1, [sp, #44]	; 0x2c
    94e4:	f004 ff5f 	bl	e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    94e8:	900a      	str	r0, [sp, #40]	; 0x28
    94ea:	9109      	str	r1, [sp, #36]	; 0x24
    94ec:	e7ff      	b.n	94ee <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x3a>
    let background = Rectangle::<Rgb565>
    94ee:	4668      	mov	r0, sp
    94f0:	9909      	ldr	r1, [sp, #36]	; 0x24
    94f2:	6001      	str	r1, [r0, #0]
    94f4:	a817      	add	r0, sp, #92	; 0x5c
    94f6:	990d      	ldr	r1, [sp, #52]	; 0x34
    94f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    94fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    94fc:	f008 ffce 	bl	1249c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    9500:	e7ff      	b.n	9502 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x4e>
    9502:	2000      	movs	r0, #0
        .fill( Some( Rgb565::from(( 0x00, 0x00, 0x00 )) ) );  //  Black
    9504:	f88d 007c 	strb.w	r0, [sp, #124]	; 0x7c
    9508:	f88d 007d 	strb.w	r0, [sp, #125]	; 0x7d
    950c:	f88d 007e 	strb.w	r0, [sp, #126]	; 0x7e
    9510:	f89d 007e 	ldrb.w	r0, [sp, #126]	; 0x7e
    9514:	f8bd 107c 	ldrh.w	r1, [sp, #124]	; 0x7c
    9518:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    951c:	f004 ffbe 	bl	e49c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    9520:	9008      	str	r0, [sp, #32]
    9522:	e7ff      	b.n	9524 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x70>
    9524:	9808      	ldr	r0, [sp, #32]
    9526:	f8ad 007a 	strh.w	r0, [sp, #122]	; 0x7a
    952a:	2101      	movs	r1, #1
    952c:	f8ad 1078 	strh.w	r1, [sp, #120]	; 0x78
    let background = Rectangle::<Rgb565>
    9530:	f8bd 307a 	ldrh.w	r3, [sp, #122]	; 0x7a
    9534:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
    9538:	a810      	add	r0, sp, #64	; 0x40
    953a:	a917      	add	r1, sp, #92	; 0x5c
    953c:	f008 fc44 	bl	11dc8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    9540:	e7ff      	b.n	9542 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x8e>
    //  druid::draw_to_display(background);

    //  Start the emulator in a background task
    os::task_init(                  //  Create a new task and start it...
        unsafe { &mut CHIP8_TASK }, //  Task object will be saved here
        &init_strn!( "chip8" ),     //  Name of task
    9542:	f24d 70bc 	movw	r0, #55228	; 0xd7bc
    9546:	f2c0 0001 	movt	r0, #1
    954a:	6801      	ldr	r1, [r0, #0]
        Some( task_func ),    //  Function to execute when task starts
    954c:	f249 50cd 	movw	r0, #38349	; 0x95cd
    9550:	f2c0 0000 	movt	r0, #0
    9554:	9021      	str	r0, [sp, #132]	; 0x84
    os::task_init(                  //  Create a new task and start it...
    9556:	9a21      	ldr	r2, [sp, #132]	; 0x84
    9558:	4668      	mov	r0, sp
    955a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
    955e:	6103      	str	r3, [r0, #16]
    9560:	60c3      	str	r3, [r0, #12]
    9562:	f240 234c 	movw	r3, #588	; 0x24c
    9566:	f2c2 0300 	movt	r3, #8192	; 0x2000
    956a:	6083      	str	r3, [r0, #8]
    956c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    9570:	6043      	str	r3, [r0, #4]
    9572:	2380      	movs	r3, #128	; 0x80
    9574:	6003      	str	r3, [r0, #0]
    9576:	f240 10fc 	movw	r0, #508	; 0x1fc
    957a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    957e:	2300      	movs	r3, #0
    9580:	f005 ff45 	bl	f40e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
    9584:	9007      	str	r0, [sp, #28]
    9586:	e7ff      	b.n	9588 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xd4>
    9588:	9807      	ldr	r0, [sp, #28]
    958a:	f005 feb0 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
    958e:	9020      	str	r0, [sp, #128]	; 0x80
    9590:	e7ff      	b.n	9592 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xde>
        NULL,  //  Argument to be passed to above function
        128,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut CHIP8_TASK_STACK }, //  Stack space for the task
        CHIP8_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
    9592:	9820      	ldr	r0, [sp, #128]	; 0x80
    9594:	1e41      	subs	r1, r0, #1
    9596:	bf18      	it	ne
    9598:	2101      	movne	r1, #1
    959a:	2801      	cmp	r0, #1
    959c:	d001      	beq.n	95a2 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xee>
    959e:	e7ff      	b.n	95a0 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xec>
    95a0:	e005      	b.n	95ae <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0xfa>
    95a2:	2000      	movs	r0, #0

    //  Return success to the caller
    Ok(())
    95a4:	900f      	str	r0, [sp, #60]	; 0x3c
    95a6:	2001      	movs	r0, #1
    95a8:	900f      	str	r0, [sp, #60]	; 0x3c
}
    95aa:	e006      	b.n	95ba <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x106>
    os::task_init(                  //  Create a new task and start it...
    95ac:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
    95ae:	9820      	ldr	r0, [sp, #128]	; 0x80
    95b0:	9023      	str	r0, [sp, #140]	; 0x8c
    95b2:	f005 ff0f 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
    95b6:	9006      	str	r0, [sp, #24]
    95b8:	e002      	b.n	95c0 <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x10c>
}
    95ba:	980f      	ldr	r0, [sp, #60]	; 0x3c
    95bc:	b024      	add	sp, #144	; 0x90
    95be:	bd80      	pop	{r7, pc}
    ) ? ;                               //  `?` means check for error
    95c0:	9806      	ldr	r0, [sp, #24]
    95c2:	f005 fe88 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
    95c6:	900f      	str	r0, [sp, #60]	; 0x3c
    95c8:	e7ff      	b.n	95ca <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x116>
    95ca:	e7f6      	b.n	95ba <_ZN3app5chip88on_start17hf865f4cce3d1fe15E+0x106>

000095cc <_ZN3app5chip89task_func17h54bf83617eedf089E>:

///  Run the emulator
extern "C" fn task_func(_arg: Ptr) {
    95cc:	b580      	push	{r7, lr}
    95ce:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
    95d2:	b088      	sub	sp, #32
    95d4:	f50d 5e00 	add.w	lr, sp, #8192	; 0x2000
    95d8:	f8ce 009c 	str.w	r0, [lr, #156]	; 0x9c
    console::print("CHIP8 started\n"); console::flush();
    95dc:	f24d 70c0 	movw	r0, #55232	; 0xd7c0
    95e0:	f2c0 0001 	movt	r0, #1
    95e4:	210e      	movs	r1, #14
    95e6:	f006 f8c2 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    95ea:	e7ff      	b.n	95ec <_ZN3app5chip89task_func17h54bf83617eedf089E+0x20>
    95ec:	f006 f905 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    95f0:	e7ff      	b.n	95f2 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x26>
    95f2:	a802      	add	r0, sp, #8
    
    //  Create the emulator
    let chip8 = libchip8::Chip8::new(Hardware);
    95f4:	f000 fa98 	bl	9b28 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>
    95f8:	e7ff      	b.n	95fa <_ZN3app5chip89task_func17h54bf83617eedf089E+0x2e>
    95fa:	f10d 0e10 	add.w	lr, sp, #16
    95fe:	f50e 5082 	add.w	r0, lr, #4160	; 0x1040
    9602:	a902      	add	r1, sp, #8
    9604:	f241 0248 	movw	r2, #4168	; 0x1048

    //  This will block until emulator terminates
    chip8.run(include_bytes!("../roms/invaders.ch8"));
    9608:	9001      	str	r0, [sp, #4]
    960a:	f013 fe1f 	bl	1d24c <__aeabi_memcpy>
    960e:	f24d 71ce 	movw	r1, #55246	; 0xd7ce
    9612:	f2c0 0101 	movt	r1, #1
    9616:	f240 5215 	movw	r2, #1301	; 0x515
    961a:	9801      	ldr	r0, [sp, #4]
    961c:	f000 fb18 	bl	9c50 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>
    9620:	e7ff      	b.n	9622 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x56>

    //  Should not come here
    console::print("CHIP8 done\n"); console::flush();
    9622:	f64d 40e3 	movw	r0, #56547	; 0xdce3
    9626:	f2c0 0001 	movt	r0, #1
    962a:	210b      	movs	r1, #11
    962c:	f006 f89f 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9630:	e7ff      	b.n	9632 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x66>
    9632:	f006 f8e2 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9636:	e7ff      	b.n	9638 <_ZN3app5chip89task_func17h54bf83617eedf089E+0x6c>
    assert!(false, "CHIP8 should not end");
    9638:	f64d 40ee 	movw	r0, #56558	; 0xdcee
    963c:	f2c0 0001 	movt	r0, #1
    9640:	f64d 5218 	movw	r2, #56600	; 0xdd18
    9644:	f2c0 0201 	movt	r2, #1
    9648:	2114      	movs	r1, #20
    964a:	f00d fa2b 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    964e:	defe      	udf	#254	; 0xfe

00009650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>:
//  static mut chip8: libchip8::Chip8<Hardware> = fill_zero!(libchip8::Chip8<Hardware>);

struct Hardware;

impl libchip8::Hardware for Hardware {
    fn rand(&mut self) -> u8 {
    9650:	b081      	sub	sp, #4
    9652:	9000      	str	r0, [sp, #0]
    9654:	207b      	movs	r0, #123	; 0x7b
        //  Return a random value.
        123  //  TODO
        //  self.rng.gen()
    }
    9656:	b001      	add	sp, #4
    9658:	4770      	bx	lr

0000965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>:

    fn key(&mut self, _key: u8) -> bool {
    965a:	b082      	sub	sp, #8
    965c:	460a      	mov	r2, r1
    965e:	9000      	str	r0, [sp, #0]
    9660:	f88d 1007 	strb.w	r1, [sp, #7]
    9664:	2000      	movs	r0, #0
        match &self.win {
            Some(win) => win.is_key_down(k),
            None => false,
        }
        */
    }
    9666:	b002      	add	sp, #8
    9668:	4770      	bx	lr

0000966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>:

    fn vram_set(&mut self, x: usize, y: usize, d: bool) {
    966a:	b510      	push	{r4, lr}
    966c:	b0b0      	sub	sp, #192	; 0xc0
    966e:	469c      	mov	ip, r3
    9670:	9029      	str	r0, [sp, #164]	; 0xa4
    9672:	912a      	str	r1, [sp, #168]	; 0xa8
    9674:	922b      	str	r2, [sp, #172]	; 0xac
    9676:	f88d 30b3 	strb.w	r3, [sp, #179]	; 0xb3
        //  Set the state of a pixel in the screen.
        //  true for white, and false for black.
        console::print("set "); console::printint(x as i32); console::print(", "); console::printint(y as i32); console::print("\n"); console::flush(); ////
    967a:	f64d 5028 	movw	r0, #56616	; 0xdd28
    967e:	f2c0 0001 	movt	r0, #1
    9682:	2304      	movs	r3, #4
    9684:	910f      	str	r1, [sp, #60]	; 0x3c
    9686:	4619      	mov	r1, r3
    9688:	920e      	str	r2, [sp, #56]	; 0x38
    968a:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    968e:	f006 f86e 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9692:	e7ff      	b.n	9694 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a>
    9694:	980f      	ldr	r0, [sp, #60]	; 0x3c
    9696:	f006 f8a8 	bl	f7ea <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    969a:	e7ff      	b.n	969c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x32>
    969c:	f64d 502c 	movw	r0, #56620	; 0xdd2c
    96a0:	f2c0 0001 	movt	r0, #1
    96a4:	2102      	movs	r1, #2
    96a6:	f006 f862 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    96aa:	e7ff      	b.n	96ac <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x42>
    96ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    96ae:	f006 f89c 	bl	f7ea <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>
    96b2:	e7ff      	b.n	96b4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x4a>
    96b4:	f64d 502e 	movw	r0, #56622	; 0xdd2e
    96b8:	f2c0 0001 	movt	r0, #1
    96bc:	2101      	movs	r1, #1
    96be:	f006 f856 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    96c2:	e7ff      	b.n	96c4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x5a>
    96c4:	f006 f899 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    96c8:	e7ff      	b.n	96ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x60>
        let i = x + y * SCREEN_WIDTH;
    96ca:	980e      	ldr	r0, [sp, #56]	; 0x38
    96cc:	0181      	lsls	r1, r0, #6
    96ce:	0e82      	lsrs	r2, r0, #26
    96d0:	2a00      	cmp	r2, #0
    96d2:	910c      	str	r1, [sp, #48]	; 0x30
    96d4:	f040 80cb 	bne.w	986e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x204>
    96d8:	e7ff      	b.n	96da <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x70>
    96da:	980f      	ldr	r0, [sp, #60]	; 0x3c
    96dc:	990c      	ldr	r1, [sp, #48]	; 0x30
    96de:	1842      	adds	r2, r0, r1
    96e0:	4613      	mov	r3, r2
    96e2:	4282      	cmp	r2, r0
    96e4:	930b      	str	r3, [sp, #44]	; 0x2c
    96e6:	f0c0 80ce 	bcc.w	9886 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x21c>
    96ea:	e7ff      	b.n	96ec <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x82>
    96ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    96ee:	902d      	str	r0, [sp, #180]	; 0xb4
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    96f0:	990d      	ldr	r1, [sp, #52]	; 0x34
    96f2:	07ca      	lsls	r2, r1, #31
    96f4:	2a00      	cmp	r2, #0
    96f6:	d104      	bne.n	9702 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x98>
    96f8:	e7ff      	b.n	96fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x90>
    96fa:	2000      	movs	r0, #0
    96fc:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9700:	e003      	b.n	970a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    9702:	2001      	movs	r0, #1
    9704:	f88d 0041 	strb.w	r0, [sp, #65]	; 0x41
    9708:	e7ff      	b.n	970a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xa0>
    970a:	2000      	movs	r0, #0
    970c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    970e:	ebb0 2fd1 	cmp.w	r0, r1, lsr #11
    9712:	f040 80c4 	bne.w	989e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x234>
    9716:	e7ff      	b.n	9718 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xae>
    9718:	f243 204c 	movw	r0, #12876	; 0x324c
    971c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    9720:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
    9724:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9726:	5481      	strb	r1, [r0, r2]
    9728:	2003      	movs	r0, #3
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    972a:	990f      	ldr	r1, [sp, #60]	; 0x3c
    972c:	fb81 0300 	smull	r0, r3, r1, r0
    9730:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    9734:	ebb3 7fe0 	cmp.w	r3, r0, asr #31
    9738:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    973c:	f040 80b9 	bne.w	98b2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x248>
    9740:	e7ff      	b.n	9742 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xd8>
    9742:	980a      	ldr	r0, [sp, #40]	; 0x28
    9744:	902e      	str	r0, [sp, #184]	; 0xb8
    9746:	2103      	movs	r1, #3
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    9748:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    974a:	fb82 1301 	smull	r1, r3, r2, r1
    974e:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
    9752:	ebb3 7fe1 	cmp.w	r3, r1, asr #31
    9756:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    975a:	f040 80b6 	bne.w	98ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x260>
    975e:	e7ff      	b.n	9760 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0xf6>
    9760:	9809      	ldr	r0, [sp, #36]	; 0x24
    9762:	902f      	str	r0, [sp, #188]	; 0xbc
        let color = if d { Rgb565::from(( 0x00, 0x00, 0xff )) } else { Rgb565::from(( 0x00, 0x00, 0x00 )) };
    9764:	990d      	ldr	r1, [sp, #52]	; 0x34
    9766:	07ca      	lsls	r2, r1, #31
    9768:	2a00      	cmp	r2, #0
    976a:	d112      	bne.n	9792 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x128>
    976c:	e7ff      	b.n	976e <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x104>
    976e:	2000      	movs	r0, #0
    9770:	f88d 0048 	strb.w	r0, [sp, #72]	; 0x48
    9774:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    9778:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    977c:	f89d 004a 	ldrb.w	r0, [sp, #74]	; 0x4a
    9780:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
    9784:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    9788:	f004 fe88 	bl	e49c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    978c:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    9790:	e013      	b.n	97ba <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x150>
    9792:	2000      	movs	r0, #0
    9794:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
    9798:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
    979c:	20ff      	movs	r0, #255	; 0xff
    979e:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
    97a2:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
    97a6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
    97aa:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
    97ae:	f004 fe75 	bl	e49c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>
    97b2:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    97b6:	e7ff      	b.n	97b8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x14e>
    97b8:	e000      	b.n	97bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
    97ba:	e7ff      	b.n	97bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x152>
        let pixel = Rectangle::<Rgb565>
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    97bc:	980a      	ldr	r0, [sp, #40]	; 0x28
    97be:	9909      	ldr	r1, [sp, #36]	; 0x24
    97c0:	f004 fdf1 	bl	e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    97c4:	9008      	str	r0, [sp, #32]
    97c6:	9107      	str	r1, [sp, #28]
    97c8:	e7ff      	b.n	97ca <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x160>
    97ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    97cc:	1cc1      	adds	r1, r0, #3
    97ce:	460a      	mov	r2, r1
    97d0:	4281      	cmp	r1, r0
    97d2:	9206      	str	r2, [sp, #24]
    97d4:	f180 8085 	bvs.w	98e2 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x278>
    97d8:	e7ff      	b.n	97da <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x170>
    97da:	9806      	ldr	r0, [sp, #24]
    97dc:	1e41      	subs	r1, r0, #1
    97de:	460a      	mov	r2, r1
    97e0:	4281      	cmp	r1, r0
    97e2:	9205      	str	r2, [sp, #20]
    97e4:	f180 8089 	bvs.w	98fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x290>
    97e8:	e7ff      	b.n	97ea <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x180>
    97ea:	9809      	ldr	r0, [sp, #36]	; 0x24
    97ec:	1cc1      	adds	r1, r0, #3
    97ee:	460a      	mov	r2, r1
    97f0:	4281      	cmp	r1, r0
    97f2:	9204      	str	r2, [sp, #16]
    97f4:	f180 808d 	bvs.w	9912 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2a8>
    97f8:	e7ff      	b.n	97fa <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x190>
    97fa:	9804      	ldr	r0, [sp, #16]
    97fc:	1e41      	subs	r1, r0, #1
    97fe:	460a      	mov	r2, r1
    9800:	4281      	cmp	r1, r0
    9802:	9203      	str	r2, [sp, #12]
    9804:	f180 8091 	bvs.w	992a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x2c0>
    9808:	e7ff      	b.n	980a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1a0>
    980a:	9805      	ldr	r0, [sp, #20]
    980c:	9903      	ldr	r1, [sp, #12]
    980e:	f004 fdca 	bl	e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
    9812:	9002      	str	r0, [sp, #8]
    9814:	9101      	str	r1, [sp, #4]
    9816:	e7ff      	b.n	9818 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1ae>
        let pixel = Rectangle::<Rgb565>
    9818:	4668      	mov	r0, sp
    981a:	9901      	ldr	r1, [sp, #4]
    981c:	6001      	str	r1, [r0, #0]
    981e:	a81a      	add	r0, sp, #104	; 0x68
    9820:	9908      	ldr	r1, [sp, #32]
    9822:	9a07      	ldr	r2, [sp, #28]
    9824:	9b02      	ldr	r3, [sp, #8]
    9826:	f008 fe39 	bl	1249c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>
    982a:	e7ff      	b.n	982c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1c2>
            .fill( Some( color ) );
    982c:	f8bd 0042 	ldrh.w	r0, [sp, #66]	; 0x42
    9830:	f8ad 0086 	strh.w	r0, [sp, #134]	; 0x86
    9834:	2001      	movs	r0, #1
    9836:	f8ad 0084 	strh.w	r0, [sp, #132]	; 0x84
        let pixel = Rectangle::<Rgb565>
    983a:	f8bd 3086 	ldrh.w	r3, [sp, #134]	; 0x86
    983e:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
    9842:	a813      	add	r0, sp, #76	; 0x4c
    9844:	a91a      	add	r1, sp, #104	; 0x68
    9846:	f008 fabf 	bl	11dc8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>
    984a:	e7ff      	b.n	984c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x1e2>
    984c:	a813      	add	r0, sp, #76	; 0x4c
    984e:	a922      	add	r1, sp, #136	; 0x88
        druid::draw_to_display(pixel);
    9850:	460a      	mov	r2, r1
    9852:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
    9856:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
    985a:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
    985e:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    9862:	4608      	mov	r0, r1
    9864:	f006 fc81 	bl	1016a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>
    9868:	e7ff      	b.n	986a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E+0x200>

        //  trace!("Set pixel ({},{})", x, y);
        //  self.vram[(y * self.vramsz.0) + x] = d;
    }
    986a:	b030      	add	sp, #192	; 0xc0
    986c:	bd10      	pop	{r4, pc}
        let i = x + y * SCREEN_WIDTH;
    986e:	f64d 5040 	movw	r0, #56640	; 0xdd40
    9872:	f2c0 0001 	movt	r0, #1
    9876:	f64d 5230 	movw	r2, #56624	; 0xdd30
    987a:	f2c0 0201 	movt	r2, #1
    987e:	2121      	movs	r1, #33	; 0x21
    9880:	f00d f910 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9884:	defe      	udf	#254	; 0xfe
    9886:	f64d 5080 	movw	r0, #56704	; 0xdd80
    988a:	f2c0 0001 	movt	r0, #1
    988e:	f64d 5264 	movw	r2, #56676	; 0xdd64
    9892:	f2c0 0201 	movt	r2, #1
    9896:	211c      	movs	r1, #28
    9898:	f00d f904 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    989c:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] = if d { 1 } else { 0 } };
    989e:	f64d 509c 	movw	r0, #56732	; 0xdd9c
    98a2:	f2c0 0001 	movt	r0, #1
    98a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    98aa:	990b      	ldr	r1, [sp, #44]	; 0x2c
    98ac:	f00d f910 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    98b0:	defe      	udf	#254	; 0xfe
        let x_scaled: i32 = x as i32 * PIXEL_SIZE;
    98b2:	f64d 5040 	movw	r0, #56640	; 0xdd40
    98b6:	f2c0 0001 	movt	r0, #1
    98ba:	f64d 52ac 	movw	r2, #56748	; 0xddac
    98be:	f2c0 0201 	movt	r2, #1
    98c2:	2121      	movs	r1, #33	; 0x21
    98c4:	f00d f8ee 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98c8:	defe      	udf	#254	; 0xfe
        let y_scaled: i32 = y as i32 * PIXEL_SIZE; 
    98ca:	f64d 5040 	movw	r0, #56640	; 0xdd40
    98ce:	f2c0 0001 	movt	r0, #1
    98d2:	f64d 52bc 	movw	r2, #56764	; 0xddbc
    98d6:	f2c0 0201 	movt	r2, #1
    98da:	2121      	movs	r1, #33	; 0x21
    98dc:	f00d f8e2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98e0:	defe      	udf	#254	; 0xfe
            ::new( Coord::new( x_scaled, y_scaled ), Coord::new( x_scaled + PIXEL_SIZE - 1, y_scaled + PIXEL_SIZE - 1 ) ) //  Square coordinates
    98e2:	f64d 5080 	movw	r0, #56704	; 0xdd80
    98e6:	f2c0 0001 	movt	r0, #1
    98ea:	f64d 52cc 	movw	r2, #56780	; 0xddcc
    98ee:	f2c0 0201 	movt	r2, #1
    98f2:	211c      	movs	r1, #28
    98f4:	f00d f8d6 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    98f8:	defe      	udf	#254	; 0xfe
    98fa:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    98fe:	f2c0 0001 	movt	r0, #1
    9902:	f64d 52cc 	movw	r2, #56780	; 0xddcc
    9906:	f2c0 0201 	movt	r2, #1
    990a:	2121      	movs	r1, #33	; 0x21
    990c:	f00d f8ca 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9910:	defe      	udf	#254	; 0xfe
    9912:	f64d 5080 	movw	r0, #56704	; 0xdd80
    9916:	f2c0 0001 	movt	r0, #1
    991a:	f64d 6204 	movw	r2, #56836	; 0xde04
    991e:	f2c0 0201 	movt	r2, #1
    9922:	211c      	movs	r1, #28
    9924:	f00d f8be 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9928:	defe      	udf	#254	; 0xfe
    992a:	f64d 50e0 	movw	r0, #56800	; 0xdde0
    992e:	f2c0 0001 	movt	r0, #1
    9932:	f64d 6204 	movw	r2, #56836	; 0xde04
    9936:	f2c0 0201 	movt	r2, #1
    993a:	2121      	movs	r1, #33	; 0x21
    993c:	f00d f8b2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9940:	defe      	udf	#254	; 0xfe

00009942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>:

    fn vram_get(&mut self, x: usize, y: usize) -> bool {
    9942:	b088      	sub	sp, #32
    9944:	9004      	str	r0, [sp, #16]
    9946:	9105      	str	r1, [sp, #20]
    9948:	9206      	str	r2, [sp, #24]
        //  Get the current state of a pixel in the screen.
        let i = x + y * SCREEN_WIDTH;
    994a:	0190      	lsls	r0, r2, #6
    994c:	0e92      	lsrs	r2, r2, #26
    994e:	2a00      	cmp	r2, #0
    9950:	9103      	str	r1, [sp, #12]
    9952:	9002      	str	r0, [sp, #8]
    9954:	d11a      	bne.n	998c <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x4a>
    9956:	e7ff      	b.n	9958 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x16>
    9958:	9803      	ldr	r0, [sp, #12]
    995a:	9902      	ldr	r1, [sp, #8]
    995c:	1842      	adds	r2, r0, r1
    995e:	4613      	mov	r3, r2
    9960:	4282      	cmp	r2, r0
    9962:	9301      	str	r3, [sp, #4]
    9964:	d31e      	bcc.n	99a4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x62>
    9966:	e7ff      	b.n	9968 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x26>
    9968:	9801      	ldr	r0, [sp, #4]
    996a:	9007      	str	r0, [sp, #28]
    996c:	2100      	movs	r1, #0
        unsafe { SCREEN_BUFFER[i] != 0 }
    996e:	ebb1 2fd0 	cmp.w	r1, r0, lsr #11
    9972:	d123      	bne.n	99bc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x7a>
    9974:	e7ff      	b.n	9976 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE+0x34>
    9976:	f243 204c 	movw	r0, #12876	; 0x324c
    997a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    997e:	9901      	ldr	r1, [sp, #4]
    9980:	5c40      	ldrb	r0, [r0, r1]
    9982:	2800      	cmp	r0, #0
    9984:	bf18      	it	ne
    9986:	2001      	movne	r0, #1
        //  self.vram[(y * self.vramsz.0) + x]
    }
    9988:	b008      	add	sp, #32
    998a:	4770      	bx	lr
        let i = x + y * SCREEN_WIDTH;
    998c:	f64d 5040 	movw	r0, #56640	; 0xdd40
    9990:	f2c0 0001 	movt	r0, #1
    9994:	f64d 6214 	movw	r2, #56852	; 0xde14
    9998:	f2c0 0201 	movt	r2, #1
    999c:	2121      	movs	r1, #33	; 0x21
    999e:	f00d f881 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99a2:	defe      	udf	#254	; 0xfe
    99a4:	f64d 5080 	movw	r0, #56704	; 0xdd80
    99a8:	f2c0 0001 	movt	r0, #1
    99ac:	f64d 6224 	movw	r2, #56868	; 0xde24
    99b0:	f2c0 0201 	movt	r2, #1
    99b4:	211c      	movs	r1, #28
    99b6:	f00d f875 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    99ba:	defe      	udf	#254	; 0xfe
        unsafe { SCREEN_BUFFER[i] != 0 }
    99bc:	f64d 6034 	movw	r0, #56884	; 0xde34
    99c0:	f2c0 0001 	movt	r0, #1
    99c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    99c8:	9901      	ldr	r1, [sp, #4]
    99ca:	f00d f881 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    99ce:	defe      	udf	#254	; 0xfe

000099d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>:

    fn vram_setsize(&mut self, _size: (usize, usize)) {
    99d0:	b083      	sub	sp, #12
    99d2:	9000      	str	r0, [sp, #0]
    99d4:	9101      	str	r1, [sp, #4]
    99d6:	9202      	str	r2, [sp, #8]
                panic!("Unable to create window {}", err);
            }
        };
        self.win = Some(win);
        */
    }
    99d8:	b003      	add	sp, #12
    99da:	4770      	bx	lr

000099dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>:

    fn vram_size(&mut self) -> (usize, usize) {
    99dc:	b083      	sub	sp, #12
    99de:	9002      	str	r0, [sp, #8]
    99e0:	2040      	movs	r0, #64	; 0x40
        //  Get the size of the screen.
        (SCREEN_WIDTH, SCREEN_HEIGHT)
    99e2:	9000      	str	r0, [sp, #0]
    99e4:	2020      	movs	r0, #32
    99e6:	9001      	str	r0, [sp, #4]
        //  self.vramsz
    }
    99e8:	9800      	ldr	r0, [sp, #0]
    99ea:	9901      	ldr	r1, [sp, #4]
    99ec:	b003      	add	sp, #12
    99ee:	4770      	bx	lr

000099f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>:

    fn clock(&mut self) -> u64 {
    99f0:	b5b0      	push	{r4, r5, r7, lr}
    99f2:	b086      	sub	sp, #24
    99f4:	9005      	str	r0, [sp, #20]
        //  Return the current clock value in nanoseconds.
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    99f6:	f64a 5071 	movw	r0, #44401	; 0xad71
    99fa:	f2c0 0001 	movt	r0, #1
    99fe:	2100      	movs	r1, #0
    9a00:	fba1 2300 	umull	r2, r3, r1, r0
    9a04:	2b00      	cmp	r3, #0
    9a06:	bf18      	it	ne
    9a08:	2301      	movne	r3, #1
    9a0a:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9a0e:	fba1 e40c 	umull	lr, r4, r1, ip
    9a12:	2c00      	cmp	r4, #0
    9a14:	bf18      	it	ne
    9a16:	2401      	movne	r4, #1
    9a18:	ea43 0304 	orr.w	r3, r3, r4
    9a1c:	4472      	add	r2, lr
    9a1e:	fba0 0c0c 	umull	r0, ip, r0, ip
    9a22:	eb12 020c 	adds.w	r2, r2, ip
    9a26:	f141 0100 	adc.w	r1, r1, #0
    9a2a:	ea41 0103 	orr.w	r1, r1, r3
    9a2e:	2900      	cmp	r1, #0
    9a30:	9004      	str	r0, [sp, #16]
    9a32:	9203      	str	r2, [sp, #12]
    9a34:	d124      	bne.n	9a80 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x90>
    9a36:	e7ff      	b.n	9a38 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x48>
    9a38:	2000      	movs	r0, #0
    9a3a:	9904      	ldr	r1, [sp, #16]
    9a3c:	fba0 2301 	umull	r2, r3, r0, r1
    9a40:	2b00      	cmp	r3, #0
    9a42:	bf18      	it	ne
    9a44:	2301      	movne	r3, #1
    9a46:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    9a4a:	f8dd e00c 	ldr.w	lr, [sp, #12]
    9a4e:	fbae 450c 	umull	r4, r5, lr, ip
    9a52:	2d00      	cmp	r5, #0
    9a54:	bf18      	it	ne
    9a56:	2501      	movne	r5, #1
    9a58:	ea43 0305 	orr.w	r3, r3, r5
    9a5c:	4422      	add	r2, r4
    9a5e:	fba1 c40c 	umull	ip, r4, r1, ip
    9a62:	1912      	adds	r2, r2, r4
    9a64:	f140 0000 	adc.w	r0, r0, #0
    9a68:	ea40 0003 	orr.w	r0, r0, r3
    9a6c:	2800      	cmp	r0, #0
    9a6e:	f8cd c008 	str.w	ip, [sp, #8]
    9a72:	9201      	str	r2, [sp, #4]
    9a74:	d110      	bne.n	9a98 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0xa8>
    9a76:	e7ff      	b.n	9a78 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E+0x88>
        let d = self.inst.elapsed();
        d.as_secs()
            .wrapping_mul(1000_000_000)
            .wrapping_add(d.subsec_nanos().into())
        */
    }
    9a78:	9802      	ldr	r0, [sp, #8]
    9a7a:	9901      	ldr	r1, [sp, #4]
    9a7c:	b006      	add	sp, #24
    9a7e:	bdb0      	pop	{r4, r5, r7, pc}
        os::os_time_get as u64 * 1000_u64 * 1000_u64
    9a80:	f64d 5040 	movw	r0, #56640	; 0xdd40
    9a84:	f2c0 0001 	movt	r0, #1
    9a88:	f64d 6244 	movw	r2, #56900	; 0xde44
    9a8c:	f2c0 0201 	movt	r2, #1
    9a90:	2121      	movs	r1, #33	; 0x21
    9a92:	f00d f807 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9a96:	defe      	udf	#254	; 0xfe
    9a98:	f64d 5040 	movw	r0, #56640	; 0xdd40
    9a9c:	f2c0 0001 	movt	r0, #1
    9aa0:	f64d 6244 	movw	r2, #56900	; 0xde44
    9aa4:	f2c0 0201 	movt	r2, #1
    9aa8:	2121      	movs	r1, #33	; 0x21
    9aaa:	f00c fffb 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    9aae:	defe      	udf	#254	; 0xfe

00009ab0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>:

    fn beep(&mut self) {
    9ab0:	b081      	sub	sp, #4
    9ab2:	9000      	str	r0, [sp, #0]
        //  Play beep sound.
    }
    9ab4:	b001      	add	sp, #4
    9ab6:	4770      	bx	lr

00009ab8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>:

    fn sched(&mut self) -> bool {
    9ab8:	b580      	push	{r7, lr}
    9aba:	b082      	sub	sp, #8
    9abc:	9001      	str	r0, [sp, #4]
        //  Called in every step; return true for shutdown.
        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
    9abe:	f00f ff2f 	bl	19920 <hal_watchdog_tickle>
    9ac2:	e7ff      	b.n	9ac4 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE+0xc>
    9ac4:	2000      	movs	r0, #0
                .map(|b| if b { 0xffffff } else { 0 })
                .collect();
            win.update_with_buffer(&vram).unwrap();
        }
        */
    }
    9ac6:	b002      	add	sp, #8
    9ac8:	bd80      	pop	{r7, pc}

00009aca <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE>:
}

pub fn handle_touch(_x: u16, _y: u16) { 
    9aca:	b580      	push	{r7, lr}
    9acc:	b084      	sub	sp, #16
    9ace:	460a      	mov	r2, r1
    9ad0:	4603      	mov	r3, r0
    9ad2:	f8ad 000c 	strh.w	r0, [sp, #12]
    9ad6:	f8ad 100e 	strh.w	r1, [sp, #14]
    console::print("CHIP8 touch not handled\n"); console::flush(); 
    9ada:	f64d 6054 	movw	r0, #56916	; 0xde54
    9ade:	f2c0 0001 	movt	r0, #1
    9ae2:	2118      	movs	r1, #24
    9ae4:	9202      	str	r2, [sp, #8]
    9ae6:	9301      	str	r3, [sp, #4]
    9ae8:	f005 fe41 	bl	f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>
    9aec:	e7ff      	b.n	9aee <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x24>
    9aee:	f005 fe84 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    9af2:	e7ff      	b.n	9af4 <_ZN3app5chip812handle_touch17hb422a4f740ac0e1bE+0x2a>
}
    9af4:	b004      	add	sp, #16
    9af6:	bd80      	pop	{r7, pc}

00009af8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>:
    9af8:	b580      	push	{r7, lr}
    9afa:	b082      	sub	sp, #8
    9afc:	9200      	str	r2, [sp, #0]
    9afe:	9101      	str	r1, [sp, #4]
    9b00:	9a00      	ldr	r2, [sp, #0]
    9b02:	f003 fe58 	bl	d7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>
    9b06:	e7ff      	b.n	9b08 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E+0x10>
    9b08:	b002      	add	sp, #8
    9b0a:	bd80      	pop	{r7, pc}

00009b0c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>:
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b084      	sub	sp, #16
    9b10:	9102      	str	r1, [sp, #8]
    9b12:	9003      	str	r0, [sp, #12]
    9b14:	9902      	ldr	r1, [sp, #8]
    9b16:	f003 fe60 	bl	d7da <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>
    9b1a:	9001      	str	r0, [sp, #4]
    9b1c:	9100      	str	r1, [sp, #0]
    9b1e:	e7ff      	b.n	9b20 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E+0x14>
    9b20:	9801      	ldr	r0, [sp, #4]
    9b22:	9900      	ldr	r1, [sp, #0]
    9b24:	b004      	add	sp, #16
    9b26:	bd80      	pop	{r7, pc}

00009b28 <_ZN8libchip814Chip8$LT$T$GT$3new17hd62b2f9fc0ffdda2E>:
    0xf0, 0x80, 0xf0, 0x80, 0x80, // f
];

impl<T: Hardware> Chip8<T> {
    /// Create an interpreter instance.
    pub fn new(hw: T) -> Self {
    9b28:	b570      	push	{r4, r5, r6, lr}
    9b2a:	f5ad 5d83 	sub.w	sp, sp, #4192	; 0x1060
    9b2e:	f10d 0e04 	add.w	lr, sp, #4
    9b32:	f50e 5182 	add.w	r1, lr, #4160	; 0x1040
    9b36:	2200      	movs	r2, #0
        Self {
            v: [0; REGS],
    9b38:	9209      	str	r2, [sp, #36]	; 0x24
    9b3a:	9208      	str	r2, [sp, #32]
    9b3c:	9207      	str	r2, [sp, #28]
    9b3e:	9206      	str	r2, [sp, #24]
    9b40:	ab0a      	add	r3, sp, #40	; 0x28
    9b42:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
            i: 0,
            dt: 0,
            st: 0,
            pc: 0,
            sp: 0,
            mem: [0; MEMS],
    9b46:	9005      	str	r0, [sp, #20]
    9b48:	4618      	mov	r0, r3
    9b4a:	9104      	str	r1, [sp, #16]
    9b4c:	4661      	mov	r1, ip
    9b4e:	9203      	str	r2, [sp, #12]
    9b50:	9302      	str	r3, [sp, #8]
    9b52:	f8cd c004 	str.w	ip, [sp, #4]
    9b56:	f013 fb75 	bl	1d244 <__aeabi_memclr>
            stack: [0; STACKS],
    9b5a:	9803      	ldr	r0, [sp, #12]
    9b5c:	9904      	ldr	r1, [sp, #16]
    9b5e:	6008      	str	r0, [r1, #0]
    9b60:	f841 0c04 	str.w	r0, [r1, #-4]
    9b64:	f841 0c08 	str.w	r0, [r1, #-8]
    9b68:	f841 0c0c 	str.w	r0, [r1, #-12]
    9b6c:	f841 0c10 	str.w	r0, [r1, #-16]
    9b70:	f841 0c14 	str.w	r0, [r1, #-20]
    9b74:	f841 0c18 	str.w	r0, [r1, #-24]
    9b78:	f841 0c1c 	str.w	r0, [r1, #-28]
            time: None,
    9b7c:	6088      	str	r0, [r1, #8]
    9b7e:	6048      	str	r0, [r1, #4]
        Self {
    9b80:	9a06      	ldr	r2, [sp, #24]
    9b82:	9b07      	ldr	r3, [sp, #28]
    9b84:	f8dd c020 	ldr.w	ip, [sp, #32]
    9b88:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    9b8c:	9c05      	ldr	r4, [sp, #20]
    9b8e:	f8c4 e040 	str.w	lr, [r4, #64]	; 0x40
    9b92:	f8c4 c03c 	str.w	ip, [r4, #60]	; 0x3c
    9b96:	63a3      	str	r3, [r4, #56]	; 0x38
    9b98:	6362      	str	r2, [r4, #52]	; 0x34
    9b9a:	8220      	strh	r0, [r4, #16]
    9b9c:	f884 0044 	strb.w	r0, [r4, #68]	; 0x44
    9ba0:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
    9ba4:	8260      	strh	r0, [r4, #18]
    9ba6:	f884 0046 	strb.w	r0, [r4, #70]	; 0x46
    9baa:	f104 0047 	add.w	r0, r4, #71	; 0x47
    9bae:	9902      	ldr	r1, [sp, #8]
    9bb0:	9a01      	ldr	r2, [sp, #4]
    9bb2:	f013 fb4b 	bl	1d24c <__aeabi_memcpy>
    9bb6:	9905      	ldr	r1, [sp, #20]
    9bb8:	f101 0214 	add.w	r2, r1, #20
    9bbc:	f10d 0e08 	add.w	lr, sp, #8
    9bc0:	f50e 5181 	add.w	r1, lr, #4128	; 0x1020
    9bc4:	2320      	movs	r3, #32
    9bc6:	9000      	str	r0, [sp, #0]
    9bc8:	4610      	mov	r0, r2
    9bca:	461a      	mov	r2, r3
    9bcc:	f013 fb3e 	bl	1d24c <__aeabi_memcpy>
    9bd0:	9904      	ldr	r1, [sp, #16]
    9bd2:	684a      	ldr	r2, [r1, #4]
    9bd4:	688b      	ldr	r3, [r1, #8]
    9bd6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    9bda:	f8d1 e010 	ldr.w	lr, [r1, #16]
    9bde:	9c05      	ldr	r4, [sp, #20]
    9be0:	6063      	str	r3, [r4, #4]
    9be2:	6022      	str	r2, [r4, #0]
    9be4:	f8c4 e00c 	str.w	lr, [r4, #12]
    9be8:	f8c4 c008 	str.w	ip, [r4, #8]
    9bec:	f241 0247 	movw	r2, #4167	; 0x1047
    9bf0:	9b03      	ldr	r3, [sp, #12]
    9bf2:	54a3      	strb	r3, [r4, r2]
            running: false,
            hw,
        }
    }
    9bf4:	f50d 5d83 	add.w	sp, sp, #4192	; 0x1060
    9bf8:	bd70      	pop	{r4, r5, r6, pc}

00009bfa <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>:
    fn push(&mut self, item: u16) {
        self.stack[self.sp as usize] = item;
        self.sp = self.sp.wrapping_add(1);
    }

    fn pop(&mut self) -> u16 {
    9bfa:	b580      	push	{r7, lr}
    9bfc:	b086      	sub	sp, #24
    9bfe:	9004      	str	r0, [sp, #16]
        self.sp = self.sp.wrapping_sub(1);
    9c00:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    9c04:	2201      	movs	r2, #1
    9c06:	9003      	str	r0, [sp, #12]
    9c08:	4608      	mov	r0, r1
    9c0a:	4611      	mov	r1, r2
    9c0c:	f009 f824 	bl	12c58 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>
    9c10:	9002      	str	r0, [sp, #8]
    9c12:	e7ff      	b.n	9c14 <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x1a>
    9c14:	9802      	ldr	r0, [sp, #8]
    9c16:	9903      	ldr	r1, [sp, #12]
    9c18:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
        let item = self.stack[self.sp as usize];
    9c1c:	f891 2046 	ldrb.w	r2, [r1, #70]	; 0x46
    9c20:	4613      	mov	r3, r2
    9c22:	2a0f      	cmp	r2, #15
    9c24:	9301      	str	r3, [sp, #4]
    9c26:	d80a      	bhi.n	9c3e <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x44>
    9c28:	e7ff      	b.n	9c2a <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E+0x30>
    9c2a:	9803      	ldr	r0, [sp, #12]
    9c2c:	9901      	ldr	r1, [sp, #4]
    9c2e:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    9c32:	8a92      	ldrh	r2, [r2, #20]
    9c34:	f8ad 2016 	strh.w	r2, [sp, #22]
        item
    }
    9c38:	4610      	mov	r0, r2
    9c3a:	b006      	add	sp, #24
    9c3c:	bd80      	pop	{r7, pc}
        let item = self.stack[self.sp as usize];
    9c3e:	f64d 60c4 	movw	r0, #57028	; 0xdec4
    9c42:	f2c0 0001 	movt	r0, #1
    9c46:	2210      	movs	r2, #16
    9c48:	9901      	ldr	r1, [sp, #4]
    9c4a:	f00c ff41 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    9c4e:	defe      	udf	#254	; 0xfe

00009c50 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E>:
    pub fn run(mut self, rom: &[u8]) {
    9c50:	b580      	push	{r7, lr}
    9c52:	b086      	sub	sp, #24
    9c54:	9104      	str	r1, [sp, #16]
    9c56:	9205      	str	r2, [sp, #20]
        self.setup();
    9c58:	9003      	str	r0, [sp, #12]
    9c5a:	9202      	str	r2, [sp, #8]
    9c5c:	9101      	str	r1, [sp, #4]
    9c5e:	f003 ff0e 	bl	da7e <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>
    9c62:	e7ff      	b.n	9c64 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x14>
        self.load(rom);
    9c64:	9803      	ldr	r0, [sp, #12]
    9c66:	9901      	ldr	r1, [sp, #4]
    9c68:	9a02      	ldr	r2, [sp, #8]
    9c6a:	f003 fdc8 	bl	d7fe <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>
    9c6e:	e7ff      	b.n	9c70 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x20>
        while self.running {
    9c70:	e7ff      	b.n	9c72 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    9c72:	f241 0047 	movw	r0, #4167	; 0x1047
    9c76:	9903      	ldr	r1, [sp, #12]
    9c78:	5c08      	ldrb	r0, [r1, r0]
    9c7a:	07c0      	lsls	r0, r0, #31
    9c7c:	2800      	cmp	r0, #0
    9c7e:	d101      	bne.n	9c84 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x34>
    9c80:	e7ff      	b.n	9c82 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x32>
    }
    9c82:	e00c      	b.n	9c9e <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4e>
            self.sched();
    9c84:	9803      	ldr	r0, [sp, #12]
    9c86:	f003 fe84 	bl	d992 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    9c8a:	e7ff      	b.n	9c8c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x3c>
            self.eval();
    9c8c:	9803      	ldr	r0, [sp, #12]
    9c8e:	f000 f809 	bl	9ca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>
    9c92:	e7ff      	b.n	9c94 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x44>
            self.next();
    9c94:	9803      	ldr	r0, [sp, #12]
    9c96:	f003 fded 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    9c9a:	e7ff      	b.n	9c9c <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x4c>
        while self.running {
    9c9c:	e7e9      	b.n	9c72 <_ZN8libchip814Chip8$LT$T$GT$3run17h3bf0dc978f7a1457E+0x22>
    }
    9c9e:	b006      	add	sp, #24
    9ca0:	bd80      	pop	{r7, pc}
	...

00009ca4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E>:
        }

        return b' ';
    }

    fn eval(&mut self) {
    9ca4:	b570      	push	{r4, r5, r6, lr}
    9ca6:	f5ad 6d6c 	sub.w	sp, sp, #3776	; 0xec0
    9caa:	f8cd 0c70 	str.w	r0, [sp, #3184]	; 0xc70
        let h = self.mem[self.pc as usize] as u16;
    9cae:	8a41      	ldrh	r1, [r0, #18]
    9cb0:	460a      	mov	r2, r1
    9cb2:	2300      	movs	r3, #0
    9cb4:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9cb8:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
    9cbc:	f8cd 248c 	str.w	r2, [sp, #1164]	; 0x48c
    9cc0:	f043 82a9 	bne.w	d216 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3572>
    9cc4:	e7ff      	b.n	9cc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22>
    9cc6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9cca:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    9cce:	1842      	adds	r2, r0, r1
    9cd0:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9cd4:	4613      	mov	r3, r2
    9cd6:	f8ad 2c76 	strh.w	r2, [sp, #3190]	; 0xc76
        let l = self.mem[(self.pc + 1) as usize] as u16;
    9cda:	8a42      	ldrh	r2, [r0, #18]
    9cdc:	3201      	adds	r2, #1
    9cde:	fa1f fc82 	uxth.w	ip, r2
    9ce2:	4696      	mov	lr, r2
    9ce4:	4594      	cmp	ip, r2
    9ce6:	f8cd 3488 	str.w	r3, [sp, #1160]	; 0x488
    9cea:	f8cd e484 	str.w	lr, [sp, #1156]	; 0x484
    9cee:	f043 829d 	bne.w	d22c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3588>
    9cf2:	e7ff      	b.n	9cf4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50>
    9cf4:	f8dd 0484 	ldr.w	r0, [sp, #1156]	; 0x484
    9cf8:	b281      	uxth	r1, r0
    9cfa:	460a      	mov	r2, r1
    9cfc:	2300      	movs	r3, #0
    9cfe:	ebb3 3f11 	cmp.w	r3, r1, lsr #12
    9d02:	f8cd 2480 	str.w	r2, [sp, #1152]	; 0x480
    9d06:	f043 829d 	bne.w	d244 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35a0>
    9d0a:	e7ff      	b.n	9d0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x68>
    9d0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9d10:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    9d14:	1842      	adds	r2, r0, r1
    9d16:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    9d1a:	4613      	mov	r3, r2
    9d1c:	f8ad 2c78 	strh.w	r2, [sp, #3192]	; 0xc78
        let inst = h << 8 | l;
    9d20:	f8dd 2488 	ldr.w	r2, [sp, #1160]	; 0x488
    9d24:	ea4f 2c02 	mov.w	ip, r2, lsl #8
    9d28:	f8cd 347c 	str.w	r3, [sp, #1148]	; 0x47c
    9d2c:	f8cd c478 	str.w	ip, [sp, #1144]	; 0x478
    9d30:	e7ff      	b.n	9d32 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e>
    9d32:	f8dd 0478 	ldr.w	r0, [sp, #1144]	; 0x478
    9d36:	f8dd 147c 	ldr.w	r1, [sp, #1148]	; 0x47c
    9d3a:	ea40 0201 	orr.w	r2, r0, r1
    9d3e:	f8ad 2496 	strh.w	r2, [sp, #1174]	; 0x496

        let nnn = inst & 0xfff;
    9d42:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d46:	f36f 321f 	bfc	r2, #12, #20
    9d4a:	4613      	mov	r3, r2
    9d4c:	f8ad 2c7a 	strh.w	r2, [sp, #3194]	; 0xc7a
        let n = (inst & 0xf) as usize;
    9d50:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9d54:	f002 020f 	and.w	r2, r2, #15
    9d58:	4694      	mov	ip, r2
    9d5a:	f8cd 2c7c 	str.w	r2, [sp, #3196]	; 0xc7c
        let x = ((inst >> 8) & 0xf) as usize;
    9d5e:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9d62:	f8cd 3474 	str.w	r3, [sp, #1140]	; 0x474
    9d66:	f8cd c470 	str.w	ip, [sp, #1136]	; 0x470
    9d6a:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
    9d6e:	e7ff      	b.n	9d70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcc>
    9d70:	f8dd 046c 	ldr.w	r0, [sp, #1132]	; 0x46c
    9d74:	f000 010f 	and.w	r1, r0, #15
    9d78:	460a      	mov	r2, r1
    9d7a:	f8cd 1c80 	str.w	r1, [sp, #3200]	; 0xc80
        let y = ((inst >> 4) & 0xf) as usize;
    9d7e:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9d82:	0909      	lsrs	r1, r1, #4
    9d84:	f8cd 2468 	str.w	r2, [sp, #1128]	; 0x468
    9d88:	f8cd 1464 	str.w	r1, [sp, #1124]	; 0x464
    9d8c:	e7ff      	b.n	9d8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xea>
    9d8e:	f8dd 0464 	ldr.w	r0, [sp, #1124]	; 0x464
    9d92:	f000 010f 	and.w	r1, r0, #15
    9d96:	460a      	mov	r2, r1
    9d98:	f8cd 1c84 	str.w	r1, [sp, #3204]	; 0xc84
        let kk = (inst & 0xff) as u8;
    9d9c:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9da0:	b2cb      	uxtb	r3, r1
    9da2:	f88d 1c8b 	strb.w	r1, [sp, #3211]	; 0xc8b

        match (
            (inst >> 12) & 0xf,
    9da6:	f8bd 1496 	ldrh.w	r1, [sp, #1174]	; 0x496
    9daa:	0b09      	lsrs	r1, r1, #12
    9dac:	f8cd 2460 	str.w	r2, [sp, #1120]	; 0x460
    9db0:	f8cd 345c 	str.w	r3, [sp, #1116]	; 0x45c
    9db4:	f8cd 1458 	str.w	r1, [sp, #1112]	; 0x458
    9db8:	e7ff      	b.n	9dba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x116>
    9dba:	f8dd 0458 	ldr.w	r0, [sp, #1112]	; 0x458
    9dbe:	f000 010f 	and.w	r1, r0, #15
            (inst >> 8) & 0xf,
    9dc2:	f89d 2497 	ldrb.w	r2, [sp, #1175]	; 0x497
    9dc6:	f8cd 1454 	str.w	r1, [sp, #1108]	; 0x454
    9dca:	f8cd 2450 	str.w	r2, [sp, #1104]	; 0x450
    9dce:	e7ff      	b.n	9dd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12c>
    9dd0:	f8dd 0450 	ldr.w	r0, [sp, #1104]	; 0x450
    9dd4:	f000 010f 	and.w	r1, r0, #15
            (inst >> 4) & 0xf,
    9dd8:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9ddc:	0912      	lsrs	r2, r2, #4
    9dde:	f8cd 144c 	str.w	r1, [sp, #1100]	; 0x44c
    9de2:	f8cd 2448 	str.w	r2, [sp, #1096]	; 0x448
    9de6:	e7ff      	b.n	9de8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144>
    9de8:	f8dd 0448 	ldr.w	r0, [sp, #1096]	; 0x448
    9dec:	f000 010f 	and.w	r1, r0, #15
            (inst >> 0) & 0xf,
    9df0:	f8bd 2496 	ldrh.w	r2, [sp, #1174]	; 0x496
    9df4:	f8cd 1444 	str.w	r1, [sp, #1092]	; 0x444
    9df8:	f8cd 2440 	str.w	r2, [sp, #1088]	; 0x440
    9dfc:	e7ff      	b.n	9dfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15a>
    9dfe:	f8dd 0440 	ldr.w	r0, [sp, #1088]	; 0x440
    9e02:	f000 010f 	and.w	r1, r0, #15
        match (
    9e06:	f8dd 2454 	ldr.w	r2, [sp, #1108]	; 0x454
    9e0a:	f8ad 2498 	strh.w	r2, [sp, #1176]	; 0x498
    9e0e:	f8dd 344c 	ldr.w	r3, [sp, #1100]	; 0x44c
    9e12:	f8ad 349a 	strh.w	r3, [sp, #1178]	; 0x49a
    9e16:	f8dd c444 	ldr.w	ip, [sp, #1092]	; 0x444
    9e1a:	f8ad c49c 	strh.w	ip, [sp, #1180]	; 0x49c
    9e1e:	f8ad 149e 	strh.w	r1, [sp, #1182]	; 0x49e
        ) {
            (0, 0, 0xe, 0) => {
    9e22:	f8bd 1498 	ldrh.w	r1, [sp, #1176]	; 0x498
    9e26:	468e      	mov	lr, r1
    9e28:	290f      	cmp	r1, #15
    9e2a:	f8cd e43c 	str.w	lr, [sp, #1084]	; 0x43c
    9e2e:	d84f      	bhi.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9e30:	f8dd 143c 	ldr.w	r1, [sp, #1084]	; 0x43c
    9e34:	e8df f011 	tbh	[pc, r1, lsl #1]
    9e38:	03010010 	.word	0x03010010
    9e3c:	042d0394 	.word	0x042d0394
    9e40:	002c04cd 	.word	0x002c04cd
    9e44:	06af061a 	.word	0x06af061a
    9e48:	00750032 	.word	0x00750032
    9e4c:	0edf0e54 	.word	0x0edf0e54
    9e50:	101e0f80 	.word	0x101e0f80
    9e54:	0095007b 	.word	0x0095007b
    9e58:	f8bd 049a 	ldrh.w	r0, [sp, #1178]	; 0x49a
    9e5c:	2800      	cmp	r0, #0
    9e5e:	f040 825c 	bne.w	a31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9e62:	e7ff      	b.n	9e64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c0>
    9e64:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9e68:	280e      	cmp	r0, #14
    9e6a:	f040 8256 	bne.w	a31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
    9e6e:	e7ff      	b.n	9e70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc>
    9e70:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e74:	4601      	mov	r1, r0
    9e76:	2800      	cmp	r0, #0
    9e78:	f8cd 1438 	str.w	r1, [sp, #1080]	; 0x438
    9e7c:	f000 80c0 	beq.w	a000 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35c>
    9e80:	e7ff      	b.n	9e82 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de>
    9e82:	f8dd 0438 	ldr.w	r0, [sp, #1080]	; 0x438
    9e86:	b281      	uxth	r1, r0
    9e88:	290e      	cmp	r1, #14
    9e8a:	f000 81b1 	beq.w	a1f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54c>
    9e8e:	e244      	b.n	a31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x676>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
                if self.v[x] != kk {
                    self.next();
                }
            }
            (5, _, _, 0) => {
    9e90:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9e94:	2800      	cmp	r0, #0
    9e96:	f000 853c 	beq.w	a912 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6e>
    9e9a:	e019      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            }
            (7, _, _, _) => {
                trace!("[{:04x}] ADD Vx, kk", self.pc);
                self.v[x] = self.v[x].wrapping_add(kk);
            }
            (8, _, _, 0) => {
    9e9c:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ea0:	4601      	mov	r1, r0
    9ea2:	280e      	cmp	r0, #14
    9ea4:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
    9ea8:	d812      	bhi.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9eaa:	f8dd 1424 	ldr.w	r1, [sp, #1060]	; 0x424
    9eae:	e8df f011 	tbh	[pc, r1, lsl #1]
    9eb2:	0719      	.short	0x0719
    9eb4:	086207bb 	.word	0x086207bb
    9eb8:	09b00909 	.word	0x09b00909
    9ebc:	0b360a72 	.word	0x0b360a72
    9ec0:	000f0beb 	.word	0x000f0beb
    9ec4:	000f000f 	.word	0x000f000f
    9ec8:	000f000f 	.word	0x000f000f
    9ecc:	0caf000f 	.word	0x0caf000f
                let x = x as usize;
                for i in 0..(x + 1) {
                    self.v[i] = self.mem[self.i as usize + i];
                }
            }
            _ => panic!("[{:04x}] Invalid op: {:04x}", self.pc, inst), // Bad ops
    9ed0:	f64e 20d8 	movw	r0, #60120	; 0xead8
    9ed4:	f2c0 0001 	movt	r0, #1
    9ed8:	6801      	ldr	r1, [r0, #0]
    9eda:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    9ede:	f100 0212 	add.w	r2, r0, #18
    9ee2:	f8cd 2c68 	str.w	r2, [sp, #3176]	; 0xc68
    9ee6:	f20d 4296 	addw	r2, sp, #1174	; 0x496
    9eea:	f8cd 2c6c 	str.w	r2, [sp, #3180]	; 0xc6c
    9eee:	f8dd 2c68 	ldr.w	r2, [sp, #3176]	; 0xc68
    9ef2:	f8cd 2d60 	str.w	r2, [sp, #3424]	; 0xd60
    9ef6:	f8dd 3c6c 	ldr.w	r3, [sp, #3180]	; 0xc6c
    9efa:	f8cd 3d64 	str.w	r3, [sp, #3428]	; 0xd64
    9efe:	f248 2cbf 	movw	ip, #33471	; 0x82bf
    9f02:	f2c0 0c01 	movt	ip, #1
    9f06:	4610      	mov	r0, r2
    9f08:	f8cd 1434 	str.w	r1, [sp, #1076]	; 0x434
    9f0c:	4661      	mov	r1, ip
    9f0e:	f8cd 3430 	str.w	r3, [sp, #1072]	; 0x430
    9f12:	f007 ff3f 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    9f16:	f8cd 042c 	str.w	r0, [sp, #1068]	; 0x42c
    9f1a:	f8cd 1428 	str.w	r1, [sp, #1064]	; 0x428
    9f1e:	f003 b938 	b.w	d192 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34ee>
            (9, _, _, 0) => {
    9f22:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f26:	2800      	cmp	r0, #0
    9f28:	f001 852d 	beq.w	b986 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ce2>
    9f2c:	e7d0      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 9, 0xe) => {
    9f2e:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9f32:	4601      	mov	r1, r0
    9f34:	2809      	cmp	r0, #9
    9f36:	f8cd 1420 	str.w	r1, [sp, #1056]	; 0x420
    9f3a:	d006      	beq.n	9f4a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6>
    9f3c:	e7ff      	b.n	9f3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29a>
    9f3e:	f8dd 0420 	ldr.w	r0, [sp, #1056]	; 0x420
    9f42:	b281      	uxth	r1, r0
    9f44:	290a      	cmp	r1, #10
    9f46:	d006      	beq.n	9f56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b2>
    9f48:	e7c2      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f4a:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f4e:	280e      	cmp	r0, #14
    9f50:	f002 814a 	beq.w	c1e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2544>
    9f54:	e7bc      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xe, _, 0xa, 0x1) => {
    9f56:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f5a:	2801      	cmp	r0, #1
    9f5c:	f002 81ea 	beq.w	c334 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2690>
    9f60:	e7b6      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 0, 7) => {
    9f62:	f8bd 049c 	ldrh.w	r0, [sp, #1180]	; 0x49c
    9f66:	4601      	mov	r1, r0
    9f68:	2806      	cmp	r0, #6
    9f6a:	f8cd 141c 	str.w	r1, [sp, #1052]	; 0x41c
    9f6e:	d8af      	bhi.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f70:	f8dd 141c 	ldr.w	r1, [sp, #1052]	; 0x41c
    9f74:	e8df f001 	tbb	[pc, r1]
    9f78:	322c1505 	.word	0x322c1505
    9f7c:	003e3804 	.word	0x003e3804
    9f80:	e7a6      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    9f82:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9f86:	4601      	mov	r1, r0
    9f88:	2807      	cmp	r0, #7
    9f8a:	f8cd 1418 	str.w	r1, [sp, #1048]	; 0x418
    9f8e:	f002 8277 	beq.w	c480 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27dc>
    9f92:	e7ff      	b.n	9f94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f0>
    9f94:	f8dd 0418 	ldr.w	r0, [sp, #1048]	; 0x418
    9f98:	b281      	uxth	r1, r0
    9f9a:	290a      	cmp	r1, #10
    9f9c:	f002 8309 	beq.w	c5b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x290e>
    9fa0:	e796      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 1, 5) => {
    9fa2:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9fa6:	4601      	mov	r1, r0
    9fa8:	2805      	cmp	r0, #5
    9faa:	f8cd 1414 	str.w	r1, [sp, #1044]	; 0x414
    9fae:	f002 839a 	beq.w	c6e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a42>
    9fb2:	e7ff      	b.n	9fb4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x310>
    9fb4:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9fb8:	b281      	uxth	r1, r0
    9fba:	2908      	cmp	r1, #8
    9fbc:	f002 8428 	beq.w	c810 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b6c>
    9fc0:	e7ff      	b.n	9fc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31e>
    9fc2:	f8dd 0414 	ldr.w	r0, [sp, #1044]	; 0x414
    9fc6:	b281      	uxth	r1, r0
    9fc8:	290e      	cmp	r1, #14
    9fca:	f002 84b6 	beq.w	c93a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c96>
    9fce:	e77f      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 2, 9) => {
    9fd0:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9fd4:	2809      	cmp	r0, #9
    9fd6:	f002 8554 	beq.w	ca82 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dde>
    9fda:	e779      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 3, 3) => {
    9fdc:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9fe0:	2803      	cmp	r0, #3
    9fe2:	f002 85ff 	beq.w	cbe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f40>
    9fe6:	e773      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 5, 5) => {
    9fe8:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9fec:	2805      	cmp	r0, #5
    9fee:	f002 8708 	beq.w	ce02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x315e>
    9ff2:	e76d      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
            (0xf, _, 6, 5) => {
    9ff4:	f8bd 049e 	ldrh.w	r0, [sp, #1182]	; 0x49e
    9ff8:	2805      	cmp	r0, #5
    9ffa:	f002 87e5 	beq.w	cfc8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3324>
    9ffe:	e767      	b.n	9ed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22c>
    a000:	2005      	movs	r0, #5
    a002:	f8cd 04a0 	str.w	r0, [sp, #1184]	; 0x4a0
    a006:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a00a:	f2c0 0001 	movt	r0, #1
    a00e:	6801      	ldr	r1, [r0, #0]
    a010:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    a014:	f008 fda0 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a018:	f8cd 0410 	str.w	r0, [sp, #1040]	; 0x410
    a01c:	e01f      	b.n	a05e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ba>
    a01e:	2001      	movs	r0, #1
    a020:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    a024:	e015      	b.n	a052 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    a026:	2000      	movs	r0, #0
    a028:	f88d 04a7 	strb.w	r0, [sp, #1191]	; 0x4a7
    a02c:	e011      	b.n	a052 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ae>
    a02e:	2000      	movs	r0, #0
/// [`debug!`]: macro.debug.html
/// [`trace!`]: macro.trace.html
/// [`set_max_level`]: fn.set_max_level.html
#[inline(always)]
pub fn max_level() -> LevelFilter {
    unsafe { mem::transmute(MAX_LOG_LEVEL_FILTER.load(Ordering::Relaxed)) }
    a030:	f88d 0dab 	strb.w	r0, [sp, #3499]	; 0xdab
    a034:	f89d 1dab 	ldrb.w	r1, [sp, #3499]	; 0xdab
    a038:	f643 2050 	movw	r0, #14928	; 0x3a50
    a03c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a040:	f008 fd96 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a044:	f8cd 0dac 	str.w	r0, [sp, #3500]	; 0xdac
    a048:	f8dd 0dac 	ldr.w	r0, [sp, #3500]	; 0xdac
    a04c:	f8cd 04a8 	str.w	r0, [sp, #1192]	; 0x4a8
    a050:	e00b      	b.n	a06a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3c6>
    a052:	f89d 04a7 	ldrb.w	r0, [sp, #1191]	; 0x4a7
    a056:	07c0      	lsls	r0, r0, #31
    a058:	2800      	cmp	r0, #0
    a05a:	d115      	bne.n	a088 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3e4>
    a05c:	e05e      	b.n	a11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
    a05e:	f8dd 0410 	ldr.w	r0, [sp, #1040]	; 0x410
    a062:	07c1      	lsls	r1, r0, #31
    a064:	2900      	cmp	r1, #0
    a066:	d1e2      	bne.n	a02e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a>
    a068:	e7dd      	b.n	a026 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
    a06a:	f50d 6094 	add.w	r0, sp, #1184	; 0x4a0
    a06e:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
    a072:	f008 fd71 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a076:	f8cd 040c 	str.w	r0, [sp, #1036]	; 0x40c
    a07a:	e7ff      	b.n	a07c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3d8>
    a07c:	f8dd 040c 	ldr.w	r0, [sp, #1036]	; 0x40c
    a080:	07c1      	lsls	r1, r0, #31
    a082:	2900      	cmp	r1, #0
    a084:	d1cb      	bne.n	a01e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37a>
    a086:	e7ce      	b.n	a026 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x382>
                trace!("[{:04x}] CLS", self.pc);
    a088:	f64e 5078 	movw	r0, #60792	; 0xed78
    a08c:	f2c0 0001 	movt	r0, #1
    a090:	6801      	ldr	r1, [r0, #0]
    a092:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a096:	f100 0212 	add.w	r2, r0, #18
    a09a:	f8cd 24cc 	str.w	r2, [sp, #1228]	; 0x4cc
    a09e:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
    a0a2:	f8cd 2d88 	str.w	r2, [sp, #3464]	; 0xd88
    a0a6:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a0aa:	f2c0 0301 	movt	r3, #1
    a0ae:	4610      	mov	r0, r2
    a0b0:	f8cd 1408 	str.w	r1, [sp, #1032]	; 0x408
    a0b4:	4619      	mov	r1, r3
    a0b6:	f007 fe6d 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a0ba:	f8cd 0404 	str.w	r0, [sp, #1028]	; 0x404
    a0be:	f8cd 1400 	str.w	r1, [sp, #1024]	; 0x400
    a0c2:	e7ff      	b.n	a0c4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x420>
    a0c4:	f8dd 0404 	ldr.w	r0, [sp, #1028]	; 0x404
    a0c8:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
    a0cc:	f8dd 1400 	ldr.w	r1, [sp, #1024]	; 0x400
    a0d0:	f8cd 14c8 	str.w	r1, [sp, #1224]	; 0x4c8
    a0d4:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a0d8:	f2c0 0201 	movt	r2, #1
    a0dc:	6812      	ldr	r2, [r2, #0]
    a0de:	466b      	mov	r3, sp
    a0e0:	f04f 0c01 	mov.w	ip, #1
    a0e4:	f8c3 c008 	str.w	ip, [r3, #8]
    a0e8:	605a      	str	r2, [r3, #4]
    a0ea:	f8c3 c000 	str.w	ip, [r3]
    a0ee:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a0f2:	2202      	movs	r2, #2
    a0f4:	f20d 43c4 	addw	r3, sp, #1220	; 0x4c4
    a0f8:	f8dd 1408 	ldr.w	r1, [sp, #1032]	; 0x408
    a0fc:	f003 fef5 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a100:	e7ff      	b.n	a102 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x45e>
    a102:	f8dd 14a0 	ldr.w	r1, [sp, #1184]	; 0x4a0
    a106:	f64e 5098 	movw	r0, #60824	; 0xed98
    a10a:	f2c0 0001 	movt	r0, #1
    a10e:	6802      	ldr	r2, [r0, #0]
    a110:	f20d 40ac 	addw	r0, sp, #1196	; 0x4ac
    a114:	f004 feb5 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a118:	e7ff      	b.n	a11a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x476>
    a11a:	e7ff      	b.n	a11c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x478>
                let (w, h) = self.hw.vram_size();
    a11c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a120:	f7ff fc5c 	bl	99dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    a124:	90ff      	str	r0, [sp, #1020]	; 0x3fc
    a126:	91fe      	str	r1, [sp, #1016]	; 0x3f8
    a128:	e7ff      	b.n	a12a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x486>
    a12a:	98ff      	ldr	r0, [sp, #1020]	; 0x3fc
    a12c:	f8cd 0d8c 	str.w	r0, [sp, #3468]	; 0xd8c
    a130:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
    a132:	f8cd 14d0 	str.w	r1, [sp, #1232]	; 0x4d0
    a136:	2200      	movs	r2, #0
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a138:	f8cd 2538 	str.w	r2, [sp, #1336]	; 0x538
    a13c:	f8cd 053c 	str.w	r0, [sp, #1340]	; 0x53c
    a140:	f50d 629a 	add.w	r2, sp, #1232	; 0x4d0
    a144:	f8cd 2540 	str.w	r2, [sp, #1344]	; 0x540
    a148:	f8dd 1538 	ldr.w	r1, [sp, #1336]	; 0x538
    a14c:	f8dd 253c 	ldr.w	r2, [sp, #1340]	; 0x53c
    a150:	f8dd 3540 	ldr.w	r3, [sp, #1344]	; 0x540
    a154:	f20d 502c 	addw	r0, sp, #1324	; 0x52c
    a158:	f008 fe7d 	bl	12e56 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>
    a15c:	e7ff      	b.n	a15e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4ba>
    a15e:	f50d 60a0 	add.w	r0, sp, #1280	; 0x500
    a162:	f20d 512c 	addw	r1, sp, #1324	; 0x52c
    a166:	f003 fd90 	bl	dc8a <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>
    a16a:	e7ff      	b.n	a16c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4c8>
    a16c:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a170:	f50d 61a0 	add.w	r1, sp, #1280	; 0x500
    a174:	f003 feaf 	bl	ded6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>
    a178:	e7ff      	b.n	a17a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4d6>
    a17a:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
    a17e:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a182:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    a186:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    a18a:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    a18e:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    a192:	e7ff      	b.n	a194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a194:	f50d 60ae 	add.w	r0, sp, #1392	; 0x570
    a198:	f20d 5144 	addw	r1, sp, #1348	; 0x544
    a19c:	f003 fdc8 	bl	dd30 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>
    a1a0:	e7ff      	b.n	a1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4fe>
    a1a2:	f8dd 0570 	ldr.w	r0, [sp, #1392]	; 0x570
    a1a6:	2800      	cmp	r0, #0
    a1a8:	d001      	beq.n	a1ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x50a>
    a1aa:	e7ff      	b.n	a1ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x508>
    a1ac:	e002      	b.n	a1b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x510>
        match (
    a1ae:	f003 b82f 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a1b2:	defe      	udf	#254	; 0xfe
    a1b4:	f8dd 0574 	ldr.w	r0, [sp, #1396]	; 0x574
    a1b8:	f8dd 1578 	ldr.w	r1, [sp, #1400]	; 0x578
    a1bc:	f8cd 0d90 	str.w	r0, [sp, #3472]	; 0xd90
    a1c0:	f8cd 1d94 	str.w	r1, [sp, #3476]	; 0xd94
    a1c4:	f8cd 0d98 	str.w	r0, [sp, #3480]	; 0xd98
    a1c8:	f8cd 1d9c 	str.w	r1, [sp, #3484]	; 0xd9c
    a1cc:	f8cd 0da0 	str.w	r0, [sp, #3488]	; 0xda0
    a1d0:	f8cd 1da4 	str.w	r1, [sp, #3492]	; 0xda4
    a1d4:	2300      	movs	r3, #0
                    self.hw.vram_set(x, y, false);
    a1d6:	f8dd 2490 	ldr.w	r2, [sp, #1168]	; 0x490
    a1da:	90fd      	str	r0, [sp, #1012]	; 0x3f4
    a1dc:	4610      	mov	r0, r2
    a1de:	f8dd c3f4 	ldr.w	ip, [sp, #1012]	; 0x3f4
    a1e2:	91fc      	str	r1, [sp, #1008]	; 0x3f0
    a1e4:	4661      	mov	r1, ip
    a1e6:	9afc      	ldr	r2, [sp, #1008]	; 0x3f0
    a1e8:	f7ff fa3f 	bl	966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    a1ec:	e7ff      	b.n	a1ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x54a>
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    a1ee:	e7d1      	b.n	a194 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x4f0>
    a1f0:	2005      	movs	r0, #5
    a1f2:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
    a1f6:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a1fa:	f2c0 0001 	movt	r0, #1
    a1fe:	6801      	ldr	r1, [r0, #0]
    a200:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a204:	f008 fca8 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a208:	90fb      	str	r0, [sp, #1004]	; 0x3ec
    a20a:	e01f      	b.n	a24c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5a8>
    a20c:	2001      	movs	r0, #1
    a20e:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a212:	e015      	b.n	a240 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a214:	2000      	movs	r0, #0
    a216:	f88d 0583 	strb.w	r0, [sp, #1411]	; 0x583
    a21a:	e011      	b.n	a240 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x59c>
    a21c:	2000      	movs	r0, #0
    a21e:	f88d 0db3 	strb.w	r0, [sp, #3507]	; 0xdb3
    a222:	f89d 1db3 	ldrb.w	r1, [sp, #3507]	; 0xdb3
    a226:	f643 2050 	movw	r0, #14928	; 0x3a50
    a22a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a22e:	f008 fc9f 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a232:	f8cd 0db4 	str.w	r0, [sp, #3508]	; 0xdb4
    a236:	f8dd 0db4 	ldr.w	r0, [sp, #3508]	; 0xdb4
    a23a:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
    a23e:	e00a      	b.n	a256 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5b2>
    a240:	f89d 0583 	ldrb.w	r0, [sp, #1411]	; 0x583
    a244:	07c0      	lsls	r0, r0, #31
    a246:	2800      	cmp	r0, #0
    a248:	d112      	bne.n	a270 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5cc>
    a24a:	e055      	b.n	a2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
    a24c:	98fb      	ldr	r0, [sp, #1004]	; 0x3ec
    a24e:	07c1      	lsls	r1, r0, #31
    a250:	2900      	cmp	r1, #0
    a252:	d1e3      	bne.n	a21c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x578>
    a254:	e7de      	b.n	a214 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
    a256:	f20d 507c 	addw	r0, sp, #1404	; 0x57c
    a25a:	f20d 5184 	addw	r1, sp, #1412	; 0x584
    a25e:	f008 fc7b 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a262:	90fa      	str	r0, [sp, #1000]	; 0x3e8
    a264:	e7ff      	b.n	a266 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x5c2>
    a266:	98fa      	ldr	r0, [sp, #1000]	; 0x3e8
    a268:	07c1      	lsls	r1, r0, #31
    a26a:	2900      	cmp	r1, #0
    a26c:	d1ce      	bne.n	a20c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x568>
    a26e:	e7d1      	b.n	a214 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x570>
                trace!("[{:04x}] RET", self.pc);
    a270:	f64e 503c 	movw	r0, #60732	; 0xed3c
    a274:	f2c0 0001 	movt	r0, #1
    a278:	6801      	ldr	r1, [r0, #0]
    a27a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a27e:	f100 0212 	add.w	r2, r0, #18
    a282:	f8cd 25a8 	str.w	r2, [sp, #1448]	; 0x5a8
    a286:	f8dd 25a8 	ldr.w	r2, [sp, #1448]	; 0x5a8
    a28a:	f8cd 2d80 	str.w	r2, [sp, #3456]	; 0xd80
    a28e:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a292:	f2c0 0301 	movt	r3, #1
    a296:	4610      	mov	r0, r2
    a298:	91f9      	str	r1, [sp, #996]	; 0x3e4
    a29a:	4619      	mov	r1, r3
    a29c:	f007 fd7a 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a2a0:	90f8      	str	r0, [sp, #992]	; 0x3e0
    a2a2:	91f7      	str	r1, [sp, #988]	; 0x3dc
    a2a4:	e7ff      	b.n	a2a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x602>
    a2a6:	98f8      	ldr	r0, [sp, #992]	; 0x3e0
    a2a8:	f8cd 05a0 	str.w	r0, [sp, #1440]	; 0x5a0
    a2ac:	99f7      	ldr	r1, [sp, #988]	; 0x3dc
    a2ae:	f8cd 15a4 	str.w	r1, [sp, #1444]	; 0x5a4
    a2b2:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a2b6:	f2c0 0201 	movt	r2, #1
    a2ba:	6812      	ldr	r2, [r2, #0]
    a2bc:	466b      	mov	r3, sp
    a2be:	f04f 0c01 	mov.w	ip, #1
    a2c2:	f8c3 c008 	str.w	ip, [r3, #8]
    a2c6:	605a      	str	r2, [r3, #4]
    a2c8:	f8c3 c000 	str.w	ip, [r3]
    a2cc:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a2d0:	2202      	movs	r2, #2
    a2d2:	f50d 63b4 	add.w	r3, sp, #1440	; 0x5a0
    a2d6:	99f9      	ldr	r1, [sp, #996]	; 0x3e4
    a2d8:	f003 fe07 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a2dc:	e7ff      	b.n	a2de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x63a>
    a2de:	f8dd 157c 	ldr.w	r1, [sp, #1404]	; 0x57c
    a2e2:	f64e 505c 	movw	r0, #60764	; 0xed5c
    a2e6:	f2c0 0001 	movt	r0, #1
    a2ea:	6802      	ldr	r2, [r0, #0]
    a2ec:	f50d 60b1 	add.w	r0, sp, #1416	; 0x588
    a2f0:	f004 fdc7 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a2f4:	e7ff      	b.n	a2f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x652>
    a2f6:	e7ff      	b.n	a2f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x654>
                let addr = self.pop();
    a2f8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a2fc:	f7ff fc7d 	bl	9bfa <_ZN8libchip814Chip8$LT$T$GT$3pop17hb9253c18c9cf9467E>
    a300:	4601      	mov	r1, r0
    a302:	f8ad 0d86 	strh.w	r0, [sp, #3462]	; 0xd86
    a306:	91f6      	str	r1, [sp, #984]	; 0x3d8
    a308:	e7ff      	b.n	a30a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x666>
                self.jump(addr);
    a30a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a30e:	99f6      	ldr	r1, [sp, #984]	; 0x3d8
    a310:	f003 fa6d 	bl	d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a314:	e7ff      	b.n	a316 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x672>
        match (
    a316:	f002 bf7b 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a31a:	2005      	movs	r0, #5
    a31c:	f8cd 05ac 	str.w	r0, [sp, #1452]	; 0x5ac
    a320:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a324:	f2c0 0001 	movt	r0, #1
    a328:	6801      	ldr	r1, [r0, #0]
    a32a:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a32e:	f008 fc13 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a332:	90f5      	str	r0, [sp, #980]	; 0x3d4
    a334:	e01f      	b.n	a376 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6d2>
    a336:	2001      	movs	r0, #1
    a338:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a33c:	e015      	b.n	a36a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a33e:	2000      	movs	r0, #0
    a340:	f88d 05b3 	strb.w	r0, [sp, #1459]	; 0x5b3
    a344:	e011      	b.n	a36a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6c6>
    a346:	2000      	movs	r0, #0
    a348:	f88d 0dbb 	strb.w	r0, [sp, #3515]	; 0xdbb
    a34c:	f89d 1dbb 	ldrb.w	r1, [sp, #3515]	; 0xdbb
    a350:	f643 2050 	movw	r0, #14928	; 0x3a50
    a354:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a358:	f008 fc0a 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a35c:	f8cd 0dbc 	str.w	r0, [sp, #3516]	; 0xdbc
    a360:	f8dd 0dbc 	ldr.w	r0, [sp, #3516]	; 0xdbc
    a364:	f8cd 05b4 	str.w	r0, [sp, #1460]	; 0x5b4
    a368:	e00a      	b.n	a380 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6dc>
    a36a:	f89d 05b3 	ldrb.w	r0, [sp, #1459]	; 0x5b3
    a36e:	07c0      	lsls	r0, r0, #31
    a370:	2800      	cmp	r0, #0
    a372:	d112      	bne.n	a39a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6f6>
    a374:	e055      	b.n	a422 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a376:	98f5      	ldr	r0, [sp, #980]	; 0x3d4
    a378:	07c1      	lsls	r1, r0, #31
    a37a:	2900      	cmp	r1, #0
    a37c:	d1e3      	bne.n	a346 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6a2>
    a37e:	e7de      	b.n	a33e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
    a380:	f20d 50ac 	addw	r0, sp, #1452	; 0x5ac
    a384:	f20d 51b4 	addw	r1, sp, #1460	; 0x5b4
    a388:	f008 fbe6 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a38c:	90f4      	str	r0, [sp, #976]	; 0x3d0
    a38e:	e7ff      	b.n	a390 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x6ec>
    a390:	98f4      	ldr	r0, [sp, #976]	; 0x3d0
    a392:	07c1      	lsls	r1, r0, #31
    a394:	2900      	cmp	r1, #0
    a396:	d1ce      	bne.n	a336 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x692>
    a398:	e7d1      	b.n	a33e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x69a>
                trace!("[{:04x}] SYS nnn", self.pc);
    a39a:	f64e 40e0 	movw	r0, #60640	; 0xece0
    a39e:	f2c0 0001 	movt	r0, #1
    a3a2:	6801      	ldr	r1, [r0, #0]
    a3a4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a3a8:	f100 0212 	add.w	r2, r0, #18
    a3ac:	f8cd 25d8 	str.w	r2, [sp, #1496]	; 0x5d8
    a3b0:	f8dd 25d8 	ldr.w	r2, [sp, #1496]	; 0x5d8
    a3b4:	f8cd 2d7c 	str.w	r2, [sp, #3452]	; 0xd7c
    a3b8:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a3bc:	f2c0 0301 	movt	r3, #1
    a3c0:	4610      	mov	r0, r2
    a3c2:	91f3      	str	r1, [sp, #972]	; 0x3cc
    a3c4:	4619      	mov	r1, r3
    a3c6:	f007 fce5 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a3ca:	90f2      	str	r0, [sp, #968]	; 0x3c8
    a3cc:	91f1      	str	r1, [sp, #964]	; 0x3c4
    a3ce:	e7ff      	b.n	a3d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x72c>
    a3d0:	98f2      	ldr	r0, [sp, #968]	; 0x3c8
    a3d2:	f8cd 05d0 	str.w	r0, [sp, #1488]	; 0x5d0
    a3d6:	99f1      	ldr	r1, [sp, #964]	; 0x3c4
    a3d8:	f8cd 15d4 	str.w	r1, [sp, #1492]	; 0x5d4
    a3dc:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a3e0:	f2c0 0201 	movt	r2, #1
    a3e4:	6812      	ldr	r2, [r2, #0]
    a3e6:	466b      	mov	r3, sp
    a3e8:	f04f 0c01 	mov.w	ip, #1
    a3ec:	f8c3 c008 	str.w	ip, [r3, #8]
    a3f0:	605a      	str	r2, [r3, #4]
    a3f2:	f8c3 c000 	str.w	ip, [r3]
    a3f6:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a3fa:	2202      	movs	r2, #2
    a3fc:	f50d 63ba 	add.w	r3, sp, #1488	; 0x5d0
    a400:	99f3      	ldr	r1, [sp, #972]	; 0x3cc
    a402:	f003 fd72 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a406:	e7ff      	b.n	a408 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x764>
    a408:	f8dd 15ac 	ldr.w	r1, [sp, #1452]	; 0x5ac
    a40c:	f64e 5000 	movw	r0, #60672	; 0xed00
    a410:	f2c0 0001 	movt	r0, #1
    a414:	6802      	ldr	r2, [r0, #0]
    a416:	f50d 60b7 	add.w	r0, sp, #1464	; 0x5b8
    a41a:	f004 fd32 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a41e:	e7ff      	b.n	a420 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77c>
    a420:	e7ff      	b.n	a422 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x77e>
    a422:	f64e 5004 	movw	r0, #60676	; 0xed04
    a426:	f2c0 0001 	movt	r0, #1
    a42a:	f64e 5214 	movw	r2, #60692	; 0xed14
    a42e:	f2c0 0201 	movt	r2, #1
    a432:	210f      	movs	r1, #15
    a434:	f00c fb36 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    a438:	defe      	udf	#254	; 0xfe
    a43a:	2005      	movs	r0, #5
    a43c:	f8cd 05dc 	str.w	r0, [sp, #1500]	; 0x5dc
    a440:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a444:	f2c0 0001 	movt	r0, #1
    a448:	6801      	ldr	r1, [r0, #0]
    a44a:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a44e:	f008 fb83 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a452:	90f0      	str	r0, [sp, #960]	; 0x3c0
    a454:	e01f      	b.n	a496 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7f2>
    a456:	2001      	movs	r0, #1
    a458:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a45c:	e015      	b.n	a48a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a45e:	2000      	movs	r0, #0
    a460:	f88d 05e3 	strb.w	r0, [sp, #1507]	; 0x5e3
    a464:	e011      	b.n	a48a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7e6>
    a466:	2000      	movs	r0, #0
    a468:	f88d 0dc3 	strb.w	r0, [sp, #3523]	; 0xdc3
    a46c:	f89d 1dc3 	ldrb.w	r1, [sp, #3523]	; 0xdc3
    a470:	f643 2050 	movw	r0, #14928	; 0x3a50
    a474:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a478:	f008 fb7a 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a47c:	f8cd 0dc4 	str.w	r0, [sp, #3524]	; 0xdc4
    a480:	f8dd 0dc4 	ldr.w	r0, [sp, #3524]	; 0xdc4
    a484:	f8cd 05e4 	str.w	r0, [sp, #1508]	; 0x5e4
    a488:	e00a      	b.n	a4a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7fc>
    a48a:	f89d 05e3 	ldrb.w	r0, [sp, #1507]	; 0x5e3
    a48e:	07c0      	lsls	r0, r0, #31
    a490:	2800      	cmp	r0, #0
    a492:	d112      	bne.n	a4ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x816>
    a494:	e055      	b.n	a542 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a496:	98f0      	ldr	r0, [sp, #960]	; 0x3c0
    a498:	07c1      	lsls	r1, r0, #31
    a49a:	2900      	cmp	r1, #0
    a49c:	d1e3      	bne.n	a466 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7c2>
    a49e:	e7de      	b.n	a45e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
    a4a0:	f20d 50dc 	addw	r0, sp, #1500	; 0x5dc
    a4a4:	f20d 51e4 	addw	r1, sp, #1508	; 0x5e4
    a4a8:	f008 fb56 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a4ac:	90ef      	str	r0, [sp, #956]	; 0x3bc
    a4ae:	e7ff      	b.n	a4b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x80c>
    a4b0:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
    a4b2:	07c1      	lsls	r1, r0, #31
    a4b4:	2900      	cmp	r1, #0
    a4b6:	d1ce      	bne.n	a456 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7b2>
    a4b8:	e7d1      	b.n	a45e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x7ba>
                trace!("[{:04x}] JP nnn", self.pc);
    a4ba:	f64e 40a0 	movw	r0, #60576	; 0xeca0
    a4be:	f2c0 0001 	movt	r0, #1
    a4c2:	6801      	ldr	r1, [r0, #0]
    a4c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a4c8:	f100 0212 	add.w	r2, r0, #18
    a4cc:	f8cd 2608 	str.w	r2, [sp, #1544]	; 0x608
    a4d0:	f8dd 2608 	ldr.w	r2, [sp, #1544]	; 0x608
    a4d4:	f8cd 2d78 	str.w	r2, [sp, #3448]	; 0xd78
    a4d8:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a4dc:	f2c0 0301 	movt	r3, #1
    a4e0:	4610      	mov	r0, r2
    a4e2:	91ee      	str	r1, [sp, #952]	; 0x3b8
    a4e4:	4619      	mov	r1, r3
    a4e6:	f007 fc55 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a4ea:	90ed      	str	r0, [sp, #948]	; 0x3b4
    a4ec:	91ec      	str	r1, [sp, #944]	; 0x3b0
    a4ee:	e7ff      	b.n	a4f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x84c>
    a4f0:	98ed      	ldr	r0, [sp, #948]	; 0x3b4
    a4f2:	f8cd 0600 	str.w	r0, [sp, #1536]	; 0x600
    a4f6:	99ec      	ldr	r1, [sp, #944]	; 0x3b0
    a4f8:	f8cd 1604 	str.w	r1, [sp, #1540]	; 0x604
    a4fc:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a500:	f2c0 0201 	movt	r2, #1
    a504:	6812      	ldr	r2, [r2, #0]
    a506:	466b      	mov	r3, sp
    a508:	f04f 0c01 	mov.w	ip, #1
    a50c:	f8c3 c008 	str.w	ip, [r3, #8]
    a510:	605a      	str	r2, [r3, #4]
    a512:	f8c3 c000 	str.w	ip, [r3]
    a516:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a51a:	2202      	movs	r2, #2
    a51c:	f50d 63c0 	add.w	r3, sp, #1536	; 0x600
    a520:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
    a522:	f003 fce2 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a526:	e7ff      	b.n	a528 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x884>
    a528:	f8dd 15dc 	ldr.w	r1, [sp, #1500]	; 0x5dc
    a52c:	f64e 40c0 	movw	r0, #60608	; 0xecc0
    a530:	f2c0 0001 	movt	r0, #1
    a534:	6802      	ldr	r2, [r0, #0]
    a536:	f50d 60bd 	add.w	r0, sp, #1512	; 0x5e8
    a53a:	f004 fca2 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a53e:	e7ff      	b.n	a540 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89c>
    a540:	e7ff      	b.n	a542 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x89e>
    a542:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a544:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a548:	f008 fbff 	bl	12d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a54c:	90eb      	str	r0, [sp, #940]	; 0x3ac
    a54e:	e7ff      	b.n	a550 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8ac>
    a550:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a554:	99eb      	ldr	r1, [sp, #940]	; 0x3ac
    a556:	f003 f94a 	bl	d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a55a:	e7ff      	b.n	a55c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8b8>
        match (
    a55c:	f002 be58 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a560:	2005      	movs	r0, #5
    a562:	f8cd 060c 	str.w	r0, [sp, #1548]	; 0x60c
    a566:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a56a:	f2c0 0001 	movt	r0, #1
    a56e:	6801      	ldr	r1, [r0, #0]
    a570:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a574:	f008 faf0 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a578:	90ea      	str	r0, [sp, #936]	; 0x3a8
    a57a:	e01f      	b.n	a5bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x918>
    a57c:	2001      	movs	r0, #1
    a57e:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a582:	e015      	b.n	a5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a584:	2000      	movs	r0, #0
    a586:	f88d 0613 	strb.w	r0, [sp, #1555]	; 0x613
    a58a:	e011      	b.n	a5b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x90c>
    a58c:	2000      	movs	r0, #0
    a58e:	f88d 0dcb 	strb.w	r0, [sp, #3531]	; 0xdcb
    a592:	f89d 1dcb 	ldrb.w	r1, [sp, #3531]	; 0xdcb
    a596:	f643 2050 	movw	r0, #14928	; 0x3a50
    a59a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a59e:	f008 fae7 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a5a2:	f8cd 0dcc 	str.w	r0, [sp, #3532]	; 0xdcc
    a5a6:	f8dd 0dcc 	ldr.w	r0, [sp, #3532]	; 0xdcc
    a5aa:	f8cd 0614 	str.w	r0, [sp, #1556]	; 0x614
    a5ae:	e00a      	b.n	a5c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x922>
    a5b0:	f89d 0613 	ldrb.w	r0, [sp, #1555]	; 0x613
    a5b4:	07c0      	lsls	r0, r0, #31
    a5b6:	2800      	cmp	r0, #0
    a5b8:	d112      	bne.n	a5e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x93c>
    a5ba:	e055      	b.n	a668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
    a5bc:	98ea      	ldr	r0, [sp, #936]	; 0x3a8
    a5be:	07c1      	lsls	r1, r0, #31
    a5c0:	2900      	cmp	r1, #0
    a5c2:	d1e3      	bne.n	a58c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e8>
    a5c4:	e7de      	b.n	a584 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
    a5c6:	f20d 600c 	addw	r0, sp, #1548	; 0x60c
    a5ca:	f20d 6114 	addw	r1, sp, #1556	; 0x614
    a5ce:	f008 fac3 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a5d2:	90e9      	str	r0, [sp, #932]	; 0x3a4
    a5d4:	e7ff      	b.n	a5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x932>
    a5d6:	98e9      	ldr	r0, [sp, #932]	; 0x3a4
    a5d8:	07c1      	lsls	r1, r0, #31
    a5da:	2900      	cmp	r1, #0
    a5dc:	d1ce      	bne.n	a57c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8d8>
    a5de:	e7d1      	b.n	a584 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x8e0>
                trace!("[{:04x}] CALL nnn", self.pc);
    a5e0:	f64e 406c 	movw	r0, #60524	; 0xec6c
    a5e4:	f2c0 0001 	movt	r0, #1
    a5e8:	6801      	ldr	r1, [r0, #0]
    a5ea:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a5ee:	f100 0212 	add.w	r2, r0, #18
    a5f2:	f8cd 2638 	str.w	r2, [sp, #1592]	; 0x638
    a5f6:	f8dd 2638 	ldr.w	r2, [sp, #1592]	; 0x638
    a5fa:	f8cd 2d74 	str.w	r2, [sp, #3444]	; 0xd74
    a5fe:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a602:	f2c0 0301 	movt	r3, #1
    a606:	4610      	mov	r0, r2
    a608:	91e8      	str	r1, [sp, #928]	; 0x3a0
    a60a:	4619      	mov	r1, r3
    a60c:	f007 fbc2 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a610:	90e7      	str	r0, [sp, #924]	; 0x39c
    a612:	91e6      	str	r1, [sp, #920]	; 0x398
    a614:	e7ff      	b.n	a616 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x972>
    a616:	98e7      	ldr	r0, [sp, #924]	; 0x39c
    a618:	f8cd 0630 	str.w	r0, [sp, #1584]	; 0x630
    a61c:	99e6      	ldr	r1, [sp, #920]	; 0x398
    a61e:	f8cd 1634 	str.w	r1, [sp, #1588]	; 0x634
    a622:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a626:	f2c0 0201 	movt	r2, #1
    a62a:	6812      	ldr	r2, [r2, #0]
    a62c:	466b      	mov	r3, sp
    a62e:	f04f 0c01 	mov.w	ip, #1
    a632:	f8c3 c008 	str.w	ip, [r3, #8]
    a636:	605a      	str	r2, [r3, #4]
    a638:	f8c3 c000 	str.w	ip, [r3]
    a63c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a640:	2202      	movs	r2, #2
    a642:	f50d 63c6 	add.w	r3, sp, #1584	; 0x630
    a646:	99e8      	ldr	r1, [sp, #928]	; 0x3a0
    a648:	f003 fc4f 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a64c:	e7ff      	b.n	a64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9aa>
    a64e:	f8dd 160c 	ldr.w	r1, [sp, #1548]	; 0x60c
    a652:	f64e 408c 	movw	r0, #60556	; 0xec8c
    a656:	f2c0 0001 	movt	r0, #1
    a65a:	6802      	ldr	r2, [r0, #0]
    a65c:	f50d 60c3 	add.w	r0, sp, #1560	; 0x618
    a660:	f004 fc0f 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a664:	e7ff      	b.n	a666 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c2>
    a666:	e7ff      	b.n	a668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9c4>
                self.push(self.pc);
    a668:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a66c:	8a41      	ldrh	r1, [r0, #18]
    a66e:	f003 f914 	bl	d89a <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>
    a672:	e7ff      	b.n	a674 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9d0>
    a674:	2102      	movs	r1, #2
                self.jump(nnn.wrapping_sub(2));
    a676:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    a67a:	f008 fb66 	bl	12d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    a67e:	90e5      	str	r0, [sp, #916]	; 0x394
    a680:	e7ff      	b.n	a682 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9de>
    a682:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a686:	99e5      	ldr	r1, [sp, #916]	; 0x394
    a688:	f003 f8b1 	bl	d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    a68c:	e7ff      	b.n	a68e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x9ea>
        match (
    a68e:	f002 bdbf 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a692:	2005      	movs	r0, #5
    a694:	f8cd 063c 	str.w	r0, [sp, #1596]	; 0x63c
    a698:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a69c:	f2c0 0001 	movt	r0, #1
    a6a0:	6801      	ldr	r1, [r0, #0]
    a6a2:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a6a6:	f008 fa57 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a6aa:	90e4      	str	r0, [sp, #912]	; 0x390
    a6ac:	e01f      	b.n	a6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa4a>
    a6ae:	2001      	movs	r0, #1
    a6b0:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a6b4:	e015      	b.n	a6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a6b6:	2000      	movs	r0, #0
    a6b8:	f88d 0643 	strb.w	r0, [sp, #1603]	; 0x643
    a6bc:	e011      	b.n	a6e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa3e>
    a6be:	2000      	movs	r0, #0
    a6c0:	f88d 0dd3 	strb.w	r0, [sp, #3539]	; 0xdd3
    a6c4:	f89d 1dd3 	ldrb.w	r1, [sp, #3539]	; 0xdd3
    a6c8:	f643 2050 	movw	r0, #14928	; 0x3a50
    a6cc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a6d0:	f008 fa4e 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a6d4:	f8cd 0dd4 	str.w	r0, [sp, #3540]	; 0xdd4
    a6d8:	f8dd 0dd4 	ldr.w	r0, [sp, #3540]	; 0xdd4
    a6dc:	f8cd 0644 	str.w	r0, [sp, #1604]	; 0x644
    a6e0:	e00a      	b.n	a6f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa54>
    a6e2:	f89d 0643 	ldrb.w	r0, [sp, #1603]	; 0x643
    a6e6:	07c0      	lsls	r0, r0, #31
    a6e8:	2800      	cmp	r0, #0
    a6ea:	d112      	bne.n	a712 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa6e>
    a6ec:	e055      	b.n	a79a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
    a6ee:	98e4      	ldr	r0, [sp, #912]	; 0x390
    a6f0:	07c1      	lsls	r1, r0, #31
    a6f2:	2900      	cmp	r1, #0
    a6f4:	d1e3      	bne.n	a6be <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa1a>
    a6f6:	e7de      	b.n	a6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
    a6f8:	f20d 603c 	addw	r0, sp, #1596	; 0x63c
    a6fc:	f20d 6144 	addw	r1, sp, #1604	; 0x644
    a700:	f008 fa2a 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a704:	90e3      	str	r0, [sp, #908]	; 0x38c
    a706:	e7ff      	b.n	a708 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa64>
    a708:	98e3      	ldr	r0, [sp, #908]	; 0x38c
    a70a:	07c1      	lsls	r1, r0, #31
    a70c:	2900      	cmp	r1, #0
    a70e:	d1ce      	bne.n	a6ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa0a>
    a710:	e7d1      	b.n	a6b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xa12>
                trace!("[{:04x}] SE Vx kk", self.pc);
    a712:	f64e 401c 	movw	r0, #60444	; 0xec1c
    a716:	f2c0 0001 	movt	r0, #1
    a71a:	6801      	ldr	r1, [r0, #0]
    a71c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a720:	f100 0212 	add.w	r2, r0, #18
    a724:	f8cd 2668 	str.w	r2, [sp, #1640]	; 0x668
    a728:	f8dd 2668 	ldr.w	r2, [sp, #1640]	; 0x668
    a72c:	f8cd 2d70 	str.w	r2, [sp, #3440]	; 0xd70
    a730:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a734:	f2c0 0301 	movt	r3, #1
    a738:	4610      	mov	r0, r2
    a73a:	91e2      	str	r1, [sp, #904]	; 0x388
    a73c:	4619      	mov	r1, r3
    a73e:	f007 fb29 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a742:	90e1      	str	r0, [sp, #900]	; 0x384
    a744:	91e0      	str	r1, [sp, #896]	; 0x380
    a746:	e7ff      	b.n	a748 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaa4>
    a748:	98e1      	ldr	r0, [sp, #900]	; 0x384
    a74a:	f8cd 0660 	str.w	r0, [sp, #1632]	; 0x660
    a74e:	99e0      	ldr	r1, [sp, #896]	; 0x380
    a750:	f8cd 1664 	str.w	r1, [sp, #1636]	; 0x664
    a754:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a758:	f2c0 0201 	movt	r2, #1
    a75c:	6812      	ldr	r2, [r2, #0]
    a75e:	466b      	mov	r3, sp
    a760:	f04f 0c01 	mov.w	ip, #1
    a764:	f8c3 c008 	str.w	ip, [r3, #8]
    a768:	605a      	str	r2, [r3, #4]
    a76a:	f8c3 c000 	str.w	ip, [r3]
    a76e:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a772:	2202      	movs	r2, #2
    a774:	f50d 63cc 	add.w	r3, sp, #1632	; 0x660
    a778:	99e2      	ldr	r1, [sp, #904]	; 0x388
    a77a:	f003 fbb6 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a77e:	e7ff      	b.n	a780 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xadc>
    a780:	f8dd 163c 	ldr.w	r1, [sp, #1596]	; 0x63c
    a784:	f64e 403c 	movw	r0, #60476	; 0xec3c
    a788:	f2c0 0001 	movt	r0, #1
    a78c:	6802      	ldr	r2, [r0, #0]
    a78e:	f50d 60c9 	add.w	r0, sp, #1608	; 0x648
    a792:	f004 fb76 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a796:	e7ff      	b.n	a798 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf4>
    a798:	e7ff      	b.n	a79a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xaf6>
                if self.v[x] == kk {
    a79a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a79e:	280f      	cmp	r0, #15
    a7a0:	f202 87ff 	bhi.w	d7a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3afe>
    a7a4:	e7ff      	b.n	a7a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb02>
    a7a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a7aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a7ae:	1842      	adds	r2, r0, r1
    a7b0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a7b4:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a7b8:	fa5f fc83 	uxtb.w	ip, r3
    a7bc:	4562      	cmp	r2, ip
    a7be:	d106      	bne.n	a7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
    a7c0:	e7ff      	b.n	a7c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb1e>
                    self.next();
    a7c2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a7c6:	f003 f855 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a7ca:	e7ff      	b.n	a7cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb28>
                if self.v[x] == kk {
    a7cc:	e7ff      	b.n	a7ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb2a>
        match (
    a7ce:	f002 bd1f 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a7d2:	2005      	movs	r0, #5
    a7d4:	f8cd 066c 	str.w	r0, [sp, #1644]	; 0x66c
    a7d8:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a7dc:	f2c0 0001 	movt	r0, #1
    a7e0:	6801      	ldr	r1, [r0, #0]
    a7e2:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a7e6:	f008 f9b7 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a7ea:	90df      	str	r0, [sp, #892]	; 0x37c
    a7ec:	e01f      	b.n	a82e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb8a>
    a7ee:	2001      	movs	r0, #1
    a7f0:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a7f4:	e015      	b.n	a822 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a7f6:	2000      	movs	r0, #0
    a7f8:	f88d 0673 	strb.w	r0, [sp, #1651]	; 0x673
    a7fc:	e011      	b.n	a822 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb7e>
    a7fe:	2000      	movs	r0, #0
    a800:	f88d 0ddb 	strb.w	r0, [sp, #3547]	; 0xddb
    a804:	f89d 1ddb 	ldrb.w	r1, [sp, #3547]	; 0xddb
    a808:	f643 2050 	movw	r0, #14928	; 0x3a50
    a80c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a810:	f008 f9ae 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a814:	f8cd 0ddc 	str.w	r0, [sp, #3548]	; 0xddc
    a818:	f8dd 0ddc 	ldr.w	r0, [sp, #3548]	; 0xddc
    a81c:	f8cd 0674 	str.w	r0, [sp, #1652]	; 0x674
    a820:	e00a      	b.n	a838 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb94>
    a822:	f89d 0673 	ldrb.w	r0, [sp, #1651]	; 0x673
    a826:	07c0      	lsls	r0, r0, #31
    a828:	2800      	cmp	r0, #0
    a82a:	d112      	bne.n	a852 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbae>
    a82c:	e055      	b.n	a8da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
    a82e:	98df      	ldr	r0, [sp, #892]	; 0x37c
    a830:	07c1      	lsls	r1, r0, #31
    a832:	2900      	cmp	r1, #0
    a834:	d1e3      	bne.n	a7fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb5a>
    a836:	e7de      	b.n	a7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
    a838:	f20d 606c 	addw	r0, sp, #1644	; 0x66c
    a83c:	f20d 6174 	addw	r1, sp, #1652	; 0x674
    a840:	f008 f98a 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a844:	90de      	str	r0, [sp, #888]	; 0x378
    a846:	e7ff      	b.n	a848 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xba4>
    a848:	98de      	ldr	r0, [sp, #888]	; 0x378
    a84a:	07c1      	lsls	r1, r0, #31
    a84c:	2900      	cmp	r1, #0
    a84e:	d1ce      	bne.n	a7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb4a>
    a850:	e7d1      	b.n	a7f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xb52>
                trace!("[{:04x}] SNE Vx, kk", self.pc);
    a852:	f64e 30cc 	movw	r0, #60364	; 0xebcc
    a856:	f2c0 0001 	movt	r0, #1
    a85a:	6801      	ldr	r1, [r0, #0]
    a85c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a860:	f100 0212 	add.w	r2, r0, #18
    a864:	f8cd 2698 	str.w	r2, [sp, #1688]	; 0x698
    a868:	f8dd 2698 	ldr.w	r2, [sp, #1688]	; 0x698
    a86c:	f8cd 2d6c 	str.w	r2, [sp, #3436]	; 0xd6c
    a870:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a874:	f2c0 0301 	movt	r3, #1
    a878:	4610      	mov	r0, r2
    a87a:	91dd      	str	r1, [sp, #884]	; 0x374
    a87c:	4619      	mov	r1, r3
    a87e:	f007 fa89 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a882:	90dc      	str	r0, [sp, #880]	; 0x370
    a884:	91db      	str	r1, [sp, #876]	; 0x36c
    a886:	e7ff      	b.n	a888 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xbe4>
    a888:	98dc      	ldr	r0, [sp, #880]	; 0x370
    a88a:	f8cd 0690 	str.w	r0, [sp, #1680]	; 0x690
    a88e:	99db      	ldr	r1, [sp, #876]	; 0x36c
    a890:	f8cd 1694 	str.w	r1, [sp, #1684]	; 0x694
    a894:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a898:	f2c0 0201 	movt	r2, #1
    a89c:	6812      	ldr	r2, [r2, #0]
    a89e:	466b      	mov	r3, sp
    a8a0:	f04f 0c01 	mov.w	ip, #1
    a8a4:	f8c3 c008 	str.w	ip, [r3, #8]
    a8a8:	605a      	str	r2, [r3, #4]
    a8aa:	f8c3 c000 	str.w	ip, [r3]
    a8ae:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a8b2:	2202      	movs	r2, #2
    a8b4:	f50d 63d2 	add.w	r3, sp, #1680	; 0x690
    a8b8:	99dd      	ldr	r1, [sp, #884]	; 0x374
    a8ba:	f003 fb16 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a8be:	e7ff      	b.n	a8c0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc1c>
    a8c0:	f8dd 166c 	ldr.w	r1, [sp, #1644]	; 0x66c
    a8c4:	f64e 30ec 	movw	r0, #60396	; 0xebec
    a8c8:	f2c0 0001 	movt	r0, #1
    a8cc:	6802      	ldr	r2, [r0, #0]
    a8ce:	f50d 60cf 	add.w	r0, sp, #1656	; 0x678
    a8d2:	f004 fad6 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    a8d6:	e7ff      	b.n	a8d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc34>
    a8d8:	e7ff      	b.n	a8da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc36>
                if self.v[x] != kk {
    a8da:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    a8de:	280f      	cmp	r0, #15
    a8e0:	f202 8755 	bhi.w	d78e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aea>
    a8e4:	e7ff      	b.n	a8e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc42>
    a8e6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a8ea:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    a8ee:	1842      	adds	r2, r0, r1
    a8f0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    a8f4:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    a8f8:	fa5f fc83 	uxtb.w	ip, r3
    a8fc:	4562      	cmp	r2, ip
    a8fe:	d006      	beq.n	a90e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
    a900:	e7ff      	b.n	a902 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc5e>
                    self.next();
    a902:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a906:	f002 ffb5 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    a90a:	e7ff      	b.n	a90c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc68>
                if self.v[x] != kk {
    a90c:	e7ff      	b.n	a90e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc6a>
        match (
    a90e:	f002 bc7f 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    a912:	2005      	movs	r0, #5
    a914:	f8cd 069c 	str.w	r0, [sp, #1692]	; 0x69c
    a918:	f64d 7030 	movw	r0, #57136	; 0xdf30
    a91c:	f2c0 0001 	movt	r0, #1
    a920:	6801      	ldr	r1, [r0, #0]
    a922:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a926:	f008 f917 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a92a:	90da      	str	r0, [sp, #872]	; 0x368
    a92c:	e01f      	b.n	a96e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcca>
    a92e:	2001      	movs	r0, #1
    a930:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a934:	e015      	b.n	a962 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a936:	2000      	movs	r0, #0
    a938:	f88d 06a3 	strb.w	r0, [sp, #1699]	; 0x6a3
    a93c:	e011      	b.n	a962 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcbe>
    a93e:	2000      	movs	r0, #0
    a940:	f88d 0de3 	strb.w	r0, [sp, #3555]	; 0xde3
    a944:	f89d 1de3 	ldrb.w	r1, [sp, #3555]	; 0xde3
    a948:	f643 2050 	movw	r0, #14928	; 0x3a50
    a94c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    a950:	f008 f90e 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    a954:	f8cd 0de4 	str.w	r0, [sp, #3556]	; 0xde4
    a958:	f8dd 0de4 	ldr.w	r0, [sp, #3556]	; 0xde4
    a95c:	f8cd 06a4 	str.w	r0, [sp, #1700]	; 0x6a4
    a960:	e00a      	b.n	a978 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcd4>
    a962:	f89d 06a3 	ldrb.w	r0, [sp, #1699]	; 0x6a3
    a966:	07c0      	lsls	r0, r0, #31
    a968:	2800      	cmp	r0, #0
    a96a:	d112      	bne.n	a992 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xcee>
    a96c:	e055      	b.n	aa1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
    a96e:	98da      	ldr	r0, [sp, #872]	; 0x368
    a970:	07c1      	lsls	r1, r0, #31
    a972:	2900      	cmp	r1, #0
    a974:	d1e3      	bne.n	a93e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc9a>
    a976:	e7de      	b.n	a936 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
    a978:	f20d 609c 	addw	r0, sp, #1692	; 0x69c
    a97c:	f20d 61a4 	addw	r1, sp, #1700	; 0x6a4
    a980:	f008 f8ea 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    a984:	90d9      	str	r0, [sp, #868]	; 0x364
    a986:	e7ff      	b.n	a988 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xce4>
    a988:	98d9      	ldr	r0, [sp, #868]	; 0x364
    a98a:	07c1      	lsls	r1, r0, #31
    a98c:	2900      	cmp	r1, #0
    a98e:	d1ce      	bne.n	a92e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc8a>
    a990:	e7d1      	b.n	a936 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xc92>
                trace!("[{:04x}] SE Vx, Vy", self.pc);
    a992:	f64e 306c 	movw	r0, #60268	; 0xeb6c
    a996:	f2c0 0001 	movt	r0, #1
    a99a:	6801      	ldr	r1, [r0, #0]
    a99c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    a9a0:	f100 0212 	add.w	r2, r0, #18
    a9a4:	f8cd 26c8 	str.w	r2, [sp, #1736]	; 0x6c8
    a9a8:	f8dd 26c8 	ldr.w	r2, [sp, #1736]	; 0x6c8
    a9ac:	f8cd 2d68 	str.w	r2, [sp, #3432]	; 0xd68
    a9b0:	f248 23bf 	movw	r3, #33471	; 0x82bf
    a9b4:	f2c0 0301 	movt	r3, #1
    a9b8:	4610      	mov	r0, r2
    a9ba:	91d8      	str	r1, [sp, #864]	; 0x360
    a9bc:	4619      	mov	r1, r3
    a9be:	f007 f9e9 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    a9c2:	90d7      	str	r0, [sp, #860]	; 0x35c
    a9c4:	91d6      	str	r1, [sp, #856]	; 0x358
    a9c6:	e7ff      	b.n	a9c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd24>
    a9c8:	98d7      	ldr	r0, [sp, #860]	; 0x35c
    a9ca:	f8cd 06c0 	str.w	r0, [sp, #1728]	; 0x6c0
    a9ce:	99d6      	ldr	r1, [sp, #856]	; 0x358
    a9d0:	f8cd 16c4 	str.w	r1, [sp, #1732]	; 0x6c4
    a9d4:	f64d 7278 	movw	r2, #57208	; 0xdf78
    a9d8:	f2c0 0201 	movt	r2, #1
    a9dc:	6812      	ldr	r2, [r2, #0]
    a9de:	466b      	mov	r3, sp
    a9e0:	f04f 0c01 	mov.w	ip, #1
    a9e4:	f8c3 c008 	str.w	ip, [r3, #8]
    a9e8:	605a      	str	r2, [r3, #4]
    a9ea:	f8c3 c000 	str.w	ip, [r3]
    a9ee:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    a9f2:	2202      	movs	r2, #2
    a9f4:	f50d 63d8 	add.w	r3, sp, #1728	; 0x6c0
    a9f8:	99d8      	ldr	r1, [sp, #864]	; 0x360
    a9fa:	f003 fa76 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    a9fe:	e7ff      	b.n	aa00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd5c>
    aa00:	f8dd 169c 	ldr.w	r1, [sp, #1692]	; 0x69c
    aa04:	f64e 308c 	movw	r0, #60300	; 0xeb8c
    aa08:	f2c0 0001 	movt	r0, #1
    aa0c:	6802      	ldr	r2, [r0, #0]
    aa0e:	f50d 60d5 	add.w	r0, sp, #1704	; 0x6a8
    aa12:	f004 fa36 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    aa16:	e7ff      	b.n	aa18 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd74>
    aa18:	e7ff      	b.n	aa1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd76>
                if self.v[x] == self.v[y] {
    aa1a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    aa1e:	280f      	cmp	r0, #15
    aa20:	f202 86a1 	bhi.w	d766 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ac2>
    aa24:	e7ff      	b.n	aa26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd82>
    aa26:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa2a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    aa2e:	1842      	adds	r2, r0, r1
    aa30:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    aa34:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    aa38:	2b0f      	cmp	r3, #15
    aa3a:	92d5      	str	r2, [sp, #852]	; 0x354
    aa3c:	f202 869d 	bhi.w	d77a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3ad6>
    aa40:	e7ff      	b.n	aa42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xd9e>
    aa42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa46:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    aa4a:	1842      	adds	r2, r0, r1
    aa4c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    aa50:	9bd5      	ldr	r3, [sp, #852]	; 0x354
    aa52:	fa5f fc83 	uxtb.w	ip, r3
    aa56:	4594      	cmp	ip, r2
    aa58:	d106      	bne.n	aa68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
    aa5a:	e7ff      	b.n	aa5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdb8>
                    self.next();
    aa5c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aa60:	f002 ff08 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    aa64:	e7ff      	b.n	aa66 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc2>
                if self.v[x] == self.v[y] {
    aa66:	e7ff      	b.n	aa68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdc4>
        match (
    aa68:	f002 bbd2 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    aa6c:	2005      	movs	r0, #5
    aa6e:	f8cd 06cc 	str.w	r0, [sp, #1740]	; 0x6cc
    aa72:	f64d 7030 	movw	r0, #57136	; 0xdf30
    aa76:	f2c0 0001 	movt	r0, #1
    aa7a:	6801      	ldr	r1, [r0, #0]
    aa7c:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    aa80:	f008 f86a 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aa84:	90d4      	str	r0, [sp, #848]	; 0x350
    aa86:	e01f      	b.n	aac8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe24>
    aa88:	2001      	movs	r0, #1
    aa8a:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    aa8e:	e015      	b.n	aabc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    aa90:	2000      	movs	r0, #0
    aa92:	f88d 06d3 	strb.w	r0, [sp, #1747]	; 0x6d3
    aa96:	e011      	b.n	aabc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe18>
    aa98:	2000      	movs	r0, #0
    aa9a:	f88d 0deb 	strb.w	r0, [sp, #3563]	; 0xdeb
    aa9e:	f89d 1deb 	ldrb.w	r1, [sp, #3563]	; 0xdeb
    aaa2:	f643 2050 	movw	r0, #14928	; 0x3a50
    aaa6:	f2c2 0000 	movt	r0, #8192	; 0x2000
    aaaa:	f008 f861 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    aaae:	f8cd 0dec 	str.w	r0, [sp, #3564]	; 0xdec
    aab2:	f8dd 0dec 	ldr.w	r0, [sp, #3564]	; 0xdec
    aab6:	f8cd 06d4 	str.w	r0, [sp, #1748]	; 0x6d4
    aaba:	e00a      	b.n	aad2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe2e>
    aabc:	f89d 06d3 	ldrb.w	r0, [sp, #1747]	; 0x6d3
    aac0:	07c0      	lsls	r0, r0, #31
    aac2:	2800      	cmp	r0, #0
    aac4:	d112      	bne.n	aaec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe48>
    aac6:	e055      	b.n	ab74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
    aac8:	98d4      	ldr	r0, [sp, #848]	; 0x350
    aaca:	07c1      	lsls	r1, r0, #31
    aacc:	2900      	cmp	r1, #0
    aace:	d1e3      	bne.n	aa98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdf4>
    aad0:	e7de      	b.n	aa90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
    aad2:	f20d 60cc 	addw	r0, sp, #1740	; 0x6cc
    aad6:	f20d 61d4 	addw	r1, sp, #1748	; 0x6d4
    aada:	f008 f83d 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    aade:	90d3      	str	r0, [sp, #844]	; 0x34c
    aae0:	e7ff      	b.n	aae2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe3e>
    aae2:	98d3      	ldr	r0, [sp, #844]	; 0x34c
    aae4:	07c1      	lsls	r1, r0, #31
    aae6:	2900      	cmp	r1, #0
    aae8:	d1ce      	bne.n	aa88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xde4>
    aaea:	e7d1      	b.n	aa90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xdec>
                trace!("[{:04x}] LD Vx, kk", self.pc);
    aaec:	f64e 2084 	movw	r0, #60036	; 0xea84
    aaf0:	f2c0 0001 	movt	r0, #1
    aaf4:	6801      	ldr	r1, [r0, #0]
    aaf6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aafa:	f100 0212 	add.w	r2, r0, #18
    aafe:	f8cd 26f8 	str.w	r2, [sp, #1784]	; 0x6f8
    ab02:	f8dd 26f8 	ldr.w	r2, [sp, #1784]	; 0x6f8
    ab06:	f8cd 2d5c 	str.w	r2, [sp, #3420]	; 0xd5c
    ab0a:	f248 23bf 	movw	r3, #33471	; 0x82bf
    ab0e:	f2c0 0301 	movt	r3, #1
    ab12:	4610      	mov	r0, r2
    ab14:	91d2      	str	r1, [sp, #840]	; 0x348
    ab16:	4619      	mov	r1, r3
    ab18:	f007 f93c 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ab1c:	90d1      	str	r0, [sp, #836]	; 0x344
    ab1e:	91d0      	str	r1, [sp, #832]	; 0x340
    ab20:	e7ff      	b.n	ab22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xe7e>
    ab22:	98d1      	ldr	r0, [sp, #836]	; 0x344
    ab24:	f8cd 06f0 	str.w	r0, [sp, #1776]	; 0x6f0
    ab28:	99d0      	ldr	r1, [sp, #832]	; 0x340
    ab2a:	f8cd 16f4 	str.w	r1, [sp, #1780]	; 0x6f4
    ab2e:	f64d 7278 	movw	r2, #57208	; 0xdf78
    ab32:	f2c0 0201 	movt	r2, #1
    ab36:	6812      	ldr	r2, [r2, #0]
    ab38:	466b      	mov	r3, sp
    ab3a:	f04f 0c01 	mov.w	ip, #1
    ab3e:	f8c3 c008 	str.w	ip, [r3, #8]
    ab42:	605a      	str	r2, [r3, #4]
    ab44:	f8c3 c000 	str.w	ip, [r3]
    ab48:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    ab4c:	2202      	movs	r2, #2
    ab4e:	f50d 63de 	add.w	r3, sp, #1776	; 0x6f0
    ab52:	99d2      	ldr	r1, [sp, #840]	; 0x348
    ab54:	f003 f9c9 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ab58:	e7ff      	b.n	ab5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xeb6>
    ab5a:	f8dd 16cc 	ldr.w	r1, [sp, #1740]	; 0x6cc
    ab5e:	f64e 20a4 	movw	r0, #60068	; 0xeaa4
    ab62:	f2c0 0001 	movt	r0, #1
    ab66:	6802      	ldr	r2, [r0, #0]
    ab68:	f50d 60db 	add.w	r0, sp, #1752	; 0x6d8
    ab6c:	f004 f989 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ab70:	e7ff      	b.n	ab72 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xece>
    ab72:	e7ff      	b.n	ab74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xed0>
                self.v[x] = kk;
    ab74:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ab78:	280f      	cmp	r0, #15
    ab7a:	f202 85ea 	bhi.w	d752 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3aae>
    ab7e:	e7ff      	b.n	ab80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xedc>
    ab80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ab84:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ab88:	1842      	adds	r2, r0, r1
    ab8a:	f8dd 345c 	ldr.w	r3, [sp, #1116]	; 0x45c
    ab8e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ab92:	f002 bb3d 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ab96:	2005      	movs	r0, #5
    ab98:	f8cd 06fc 	str.w	r0, [sp, #1788]	; 0x6fc
    ab9c:	f64d 7030 	movw	r0, #57136	; 0xdf30
    aba0:	f2c0 0001 	movt	r0, #1
    aba4:	6801      	ldr	r1, [r0, #0]
    aba6:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    abaa:	f007 ffd5 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    abae:	90cf      	str	r0, [sp, #828]	; 0x33c
    abb0:	e01f      	b.n	abf2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf4e>
    abb2:	2001      	movs	r0, #1
    abb4:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    abb8:	e015      	b.n	abe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    abba:	2000      	movs	r0, #0
    abbc:	f88d 0703 	strb.w	r0, [sp, #1795]	; 0x703
    abc0:	e011      	b.n	abe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf42>
    abc2:	2000      	movs	r0, #0
    abc4:	f88d 0df3 	strb.w	r0, [sp, #3571]	; 0xdf3
    abc8:	f89d 1df3 	ldrb.w	r1, [sp, #3571]	; 0xdf3
    abcc:	f643 2050 	movw	r0, #14928	; 0x3a50
    abd0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    abd4:	f007 ffcc 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    abd8:	f8cd 0df4 	str.w	r0, [sp, #3572]	; 0xdf4
    abdc:	f8dd 0df4 	ldr.w	r0, [sp, #3572]	; 0xdf4
    abe0:	f8cd 0704 	str.w	r0, [sp, #1796]	; 0x704
    abe4:	e00a      	b.n	abfc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf58>
    abe6:	f89d 0703 	ldrb.w	r0, [sp, #1795]	; 0x703
    abea:	07c0      	lsls	r0, r0, #31
    abec:	2800      	cmp	r0, #0
    abee:	d112      	bne.n	ac16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf72>
    abf0:	e055      	b.n	ac9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
    abf2:	98cf      	ldr	r0, [sp, #828]	; 0x33c
    abf4:	07c1      	lsls	r1, r0, #31
    abf6:	2900      	cmp	r1, #0
    abf8:	d1e3      	bne.n	abc2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf1e>
    abfa:	e7de      	b.n	abba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
    abfc:	f20d 60fc 	addw	r0, sp, #1788	; 0x6fc
    ac00:	f20d 7104 	addw	r1, sp, #1796	; 0x704
    ac04:	f007 ffa8 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ac08:	90ce      	str	r0, [sp, #824]	; 0x338
    ac0a:	e7ff      	b.n	ac0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf68>
    ac0c:	98ce      	ldr	r0, [sp, #824]	; 0x338
    ac0e:	07c1      	lsls	r1, r0, #31
    ac10:	2900      	cmp	r1, #0
    ac12:	d1ce      	bne.n	abb2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf0e>
    ac14:	e7d1      	b.n	abba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xf16>
                trace!("[{:04x}] ADD Vx, kk", self.pc);
    ac16:	f64e 2024 	movw	r0, #59940	; 0xea24
    ac1a:	f2c0 0001 	movt	r0, #1
    ac1e:	6801      	ldr	r1, [r0, #0]
    ac20:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ac24:	f100 0212 	add.w	r2, r0, #18
    ac28:	f8cd 2728 	str.w	r2, [sp, #1832]	; 0x728
    ac2c:	f8dd 2728 	ldr.w	r2, [sp, #1832]	; 0x728
    ac30:	f8cd 2d58 	str.w	r2, [sp, #3416]	; 0xd58
    ac34:	f248 23bf 	movw	r3, #33471	; 0x82bf
    ac38:	f2c0 0301 	movt	r3, #1
    ac3c:	4610      	mov	r0, r2
    ac3e:	91cd      	str	r1, [sp, #820]	; 0x334
    ac40:	4619      	mov	r1, r3
    ac42:	f007 f8a7 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ac46:	90cc      	str	r0, [sp, #816]	; 0x330
    ac48:	91cb      	str	r1, [sp, #812]	; 0x32c
    ac4a:	e7ff      	b.n	ac4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfa8>
    ac4c:	98cc      	ldr	r0, [sp, #816]	; 0x330
    ac4e:	f8cd 0720 	str.w	r0, [sp, #1824]	; 0x720
    ac52:	99cb      	ldr	r1, [sp, #812]	; 0x32c
    ac54:	f8cd 1724 	str.w	r1, [sp, #1828]	; 0x724
    ac58:	f64d 7278 	movw	r2, #57208	; 0xdf78
    ac5c:	f2c0 0201 	movt	r2, #1
    ac60:	6812      	ldr	r2, [r2, #0]
    ac62:	466b      	mov	r3, sp
    ac64:	f04f 0c01 	mov.w	ip, #1
    ac68:	f8c3 c008 	str.w	ip, [r3, #8]
    ac6c:	605a      	str	r2, [r3, #4]
    ac6e:	f8c3 c000 	str.w	ip, [r3]
    ac72:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ac76:	2202      	movs	r2, #2
    ac78:	f50d 63e4 	add.w	r3, sp, #1824	; 0x720
    ac7c:	99cd      	ldr	r1, [sp, #820]	; 0x334
    ac7e:	f003 f934 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ac82:	e7ff      	b.n	ac84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xfe0>
    ac84:	f8dd 16fc 	ldr.w	r1, [sp, #1788]	; 0x6fc
    ac88:	f64e 2044 	movw	r0, #59972	; 0xea44
    ac8c:	f2c0 0001 	movt	r0, #1
    ac90:	6802      	ldr	r2, [r0, #0]
    ac92:	f50d 60e1 	add.w	r0, sp, #1800	; 0x708
    ac96:	f004 f8f4 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ac9a:	e7ff      	b.n	ac9c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xff8>
    ac9c:	e7ff      	b.n	ac9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0xffa>
                self.v[x] = self.v[x].wrapping_add(kk);
    ac9e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    aca2:	280f      	cmp	r0, #15
    aca4:	f202 8541 	bhi.w	d72a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a86>
    aca8:	e7ff      	b.n	acaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1006>
    acaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    acae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    acb2:	1842      	adds	r2, r0, r1
    acb4:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    acb8:	f8dd 145c 	ldr.w	r1, [sp, #1116]	; 0x45c
    acbc:	f007 ff97 	bl	12bee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    acc0:	90ca      	str	r0, [sp, #808]	; 0x328
    acc2:	e7ff      	b.n	acc4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1020>
    acc4:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    acc8:	280f      	cmp	r0, #15
    acca:	f202 8538 	bhi.w	d73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a9a>
    acce:	e7ff      	b.n	acd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x102c>
    acd0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    acd4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    acd8:	1842      	adds	r2, r0, r1
    acda:	9bca      	ldr	r3, [sp, #808]	; 0x328
    acdc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ace0:	f002 ba96 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ace4:	2005      	movs	r0, #5
    ace6:	f8cd 072c 	str.w	r0, [sp, #1836]	; 0x72c
    acea:	f64d 7030 	movw	r0, #57136	; 0xdf30
    acee:	f2c0 0001 	movt	r0, #1
    acf2:	6801      	ldr	r1, [r0, #0]
    acf4:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    acf8:	f007 ff2e 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    acfc:	90c9      	str	r0, [sp, #804]	; 0x324
    acfe:	e01f      	b.n	ad40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x109c>
    ad00:	2001      	movs	r0, #1
    ad02:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ad06:	e015      	b.n	ad34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ad08:	2000      	movs	r0, #0
    ad0a:	f88d 0733 	strb.w	r0, [sp, #1843]	; 0x733
    ad0e:	e011      	b.n	ad34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1090>
    ad10:	2000      	movs	r0, #0
    ad12:	f88d 0dfb 	strb.w	r0, [sp, #3579]	; 0xdfb
    ad16:	f89d 1dfb 	ldrb.w	r1, [sp, #3579]	; 0xdfb
    ad1a:	f643 2050 	movw	r0, #14928	; 0x3a50
    ad1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ad22:	f007 ff25 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ad26:	f8cd 0dfc 	str.w	r0, [sp, #3580]	; 0xdfc
    ad2a:	f8dd 0dfc 	ldr.w	r0, [sp, #3580]	; 0xdfc
    ad2e:	f8cd 0734 	str.w	r0, [sp, #1844]	; 0x734
    ad32:	e00a      	b.n	ad4a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10a6>
    ad34:	f89d 0733 	ldrb.w	r0, [sp, #1843]	; 0x733
    ad38:	07c0      	lsls	r0, r0, #31
    ad3a:	2800      	cmp	r0, #0
    ad3c:	d112      	bne.n	ad64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10c0>
    ad3e:	e055      	b.n	adec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
    ad40:	98c9      	ldr	r0, [sp, #804]	; 0x324
    ad42:	07c1      	lsls	r1, r0, #31
    ad44:	2900      	cmp	r1, #0
    ad46:	d1e3      	bne.n	ad10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x106c>
    ad48:	e7de      	b.n	ad08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
    ad4a:	f20d 702c 	addw	r0, sp, #1836	; 0x72c
    ad4e:	f20d 7134 	addw	r1, sp, #1844	; 0x734
    ad52:	f007 ff01 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ad56:	90c8      	str	r0, [sp, #800]	; 0x320
    ad58:	e7ff      	b.n	ad5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10b6>
    ad5a:	98c8      	ldr	r0, [sp, #800]	; 0x320
    ad5c:	07c1      	lsls	r1, r0, #31
    ad5e:	2900      	cmp	r1, #0
    ad60:	d1ce      	bne.n	ad00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x105c>
    ad62:	e7d1      	b.n	ad08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1064>
                trace!("[{:04x}] LD Vx, Vy", self.pc);
    ad64:	f64e 10c4 	movw	r0, #59844	; 0xe9c4
    ad68:	f2c0 0001 	movt	r0, #1
    ad6c:	6801      	ldr	r1, [r0, #0]
    ad6e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ad72:	f100 0212 	add.w	r2, r0, #18
    ad76:	f8cd 2758 	str.w	r2, [sp, #1880]	; 0x758
    ad7a:	f8dd 2758 	ldr.w	r2, [sp, #1880]	; 0x758
    ad7e:	f8cd 2d54 	str.w	r2, [sp, #3412]	; 0xd54
    ad82:	f248 23bf 	movw	r3, #33471	; 0x82bf
    ad86:	f2c0 0301 	movt	r3, #1
    ad8a:	4610      	mov	r0, r2
    ad8c:	91c7      	str	r1, [sp, #796]	; 0x31c
    ad8e:	4619      	mov	r1, r3
    ad90:	f007 f800 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ad94:	90c6      	str	r0, [sp, #792]	; 0x318
    ad96:	91c5      	str	r1, [sp, #788]	; 0x314
    ad98:	e7ff      	b.n	ad9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x10f6>
    ad9a:	98c6      	ldr	r0, [sp, #792]	; 0x318
    ad9c:	f8cd 0750 	str.w	r0, [sp, #1872]	; 0x750
    ada0:	99c5      	ldr	r1, [sp, #788]	; 0x314
    ada2:	f8cd 1754 	str.w	r1, [sp, #1876]	; 0x754
    ada6:	f64d 7278 	movw	r2, #57208	; 0xdf78
    adaa:	f2c0 0201 	movt	r2, #1
    adae:	6812      	ldr	r2, [r2, #0]
    adb0:	466b      	mov	r3, sp
    adb2:	f04f 0c01 	mov.w	ip, #1
    adb6:	f8c3 c008 	str.w	ip, [r3, #8]
    adba:	605a      	str	r2, [r3, #4]
    adbc:	f8c3 c000 	str.w	ip, [r3]
    adc0:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    adc4:	2202      	movs	r2, #2
    adc6:	f50d 63ea 	add.w	r3, sp, #1872	; 0x750
    adca:	99c7      	ldr	r1, [sp, #796]	; 0x31c
    adcc:	f003 f88d 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    add0:	e7ff      	b.n	add2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x112e>
    add2:	f8dd 172c 	ldr.w	r1, [sp, #1836]	; 0x72c
    add6:	f64e 10e4 	movw	r0, #59876	; 0xe9e4
    adda:	f2c0 0001 	movt	r0, #1
    adde:	6802      	ldr	r2, [r0, #0]
    ade0:	f50d 60e7 	add.w	r0, sp, #1848	; 0x738
    ade4:	f004 f84d 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ade8:	e7ff      	b.n	adea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1146>
    adea:	e7ff      	b.n	adec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1148>
                self.v[x] = self.v[y];
    adec:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    adf0:	280f      	cmp	r0, #15
    adf2:	f202 8486 	bhi.w	d702 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a5e>
    adf6:	e7ff      	b.n	adf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1154>
    adf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    adfc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    ae00:	1842      	adds	r2, r0, r1
    ae02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    ae06:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    ae0a:	2b0f      	cmp	r3, #15
    ae0c:	92c4      	str	r2, [sp, #784]	; 0x310
    ae0e:	f202 8482 	bhi.w	d716 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a72>
    ae12:	e7ff      	b.n	ae14 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1170>
    ae14:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ae18:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ae1c:	1842      	adds	r2, r0, r1
    ae1e:	9bc4      	ldr	r3, [sp, #784]	; 0x310
    ae20:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    ae24:	f002 b9f4 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ae28:	2005      	movs	r0, #5
    ae2a:	f8cd 075c 	str.w	r0, [sp, #1884]	; 0x75c
    ae2e:	f64d 7030 	movw	r0, #57136	; 0xdf30
    ae32:	f2c0 0001 	movt	r0, #1
    ae36:	6801      	ldr	r1, [r0, #0]
    ae38:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ae3c:	f007 fe8c 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ae40:	90c3      	str	r0, [sp, #780]	; 0x30c
    ae42:	e01f      	b.n	ae84 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11e0>
    ae44:	2001      	movs	r0, #1
    ae46:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ae4a:	e015      	b.n	ae78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ae4c:	2000      	movs	r0, #0
    ae4e:	f88d 0763 	strb.w	r0, [sp, #1891]	; 0x763
    ae52:	e011      	b.n	ae78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11d4>
    ae54:	2000      	movs	r0, #0
    ae56:	f88d 0e03 	strb.w	r0, [sp, #3587]	; 0xe03
    ae5a:	f89d 1e03 	ldrb.w	r1, [sp, #3587]	; 0xe03
    ae5e:	f643 2050 	movw	r0, #14928	; 0x3a50
    ae62:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ae66:	f007 fe83 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ae6a:	f8cd 0e04 	str.w	r0, [sp, #3588]	; 0xe04
    ae6e:	f8dd 0e04 	ldr.w	r0, [sp, #3588]	; 0xe04
    ae72:	f8cd 0764 	str.w	r0, [sp, #1892]	; 0x764
    ae76:	e00a      	b.n	ae8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11ea>
    ae78:	f89d 0763 	ldrb.w	r0, [sp, #1891]	; 0x763
    ae7c:	07c0      	lsls	r0, r0, #31
    ae7e:	2800      	cmp	r0, #0
    ae80:	d112      	bne.n	aea8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1204>
    ae82:	e055      	b.n	af30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
    ae84:	98c3      	ldr	r0, [sp, #780]	; 0x30c
    ae86:	07c1      	lsls	r1, r0, #31
    ae88:	2900      	cmp	r1, #0
    ae8a:	d1e3      	bne.n	ae54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11b0>
    ae8c:	e7de      	b.n	ae4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
    ae8e:	f20d 705c 	addw	r0, sp, #1884	; 0x75c
    ae92:	f20d 7164 	addw	r1, sp, #1892	; 0x764
    ae96:	f007 fe5f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ae9a:	90c2      	str	r0, [sp, #776]	; 0x308
    ae9c:	e7ff      	b.n	ae9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11fa>
    ae9e:	98c2      	ldr	r0, [sp, #776]	; 0x308
    aea0:	07c1      	lsls	r1, r0, #31
    aea2:	2900      	cmp	r1, #0
    aea4:	d1ce      	bne.n	ae44 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a0>
    aea6:	e7d1      	b.n	ae4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x11a8>
                trace!("[{:04x}] OR Vx, Vy", self.pc);
    aea8:	f64e 1064 	movw	r0, #59748	; 0xe964
    aeac:	f2c0 0001 	movt	r0, #1
    aeb0:	6801      	ldr	r1, [r0, #0]
    aeb2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    aeb6:	f100 0212 	add.w	r2, r0, #18
    aeba:	f8cd 2788 	str.w	r2, [sp, #1928]	; 0x788
    aebe:	f8dd 2788 	ldr.w	r2, [sp, #1928]	; 0x788
    aec2:	f8cd 2d50 	str.w	r2, [sp, #3408]	; 0xd50
    aec6:	f248 23bf 	movw	r3, #33471	; 0x82bf
    aeca:	f2c0 0301 	movt	r3, #1
    aece:	4610      	mov	r0, r2
    aed0:	91c1      	str	r1, [sp, #772]	; 0x304
    aed2:	4619      	mov	r1, r3
    aed4:	f006 ff5e 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    aed8:	90c0      	str	r0, [sp, #768]	; 0x300
    aeda:	91bf      	str	r1, [sp, #764]	; 0x2fc
    aedc:	e7ff      	b.n	aede <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x123a>
    aede:	98c0      	ldr	r0, [sp, #768]	; 0x300
    aee0:	f8cd 0780 	str.w	r0, [sp, #1920]	; 0x780
    aee4:	99bf      	ldr	r1, [sp, #764]	; 0x2fc
    aee6:	f8cd 1784 	str.w	r1, [sp, #1924]	; 0x784
    aeea:	f64d 7278 	movw	r2, #57208	; 0xdf78
    aeee:	f2c0 0201 	movt	r2, #1
    aef2:	6812      	ldr	r2, [r2, #0]
    aef4:	466b      	mov	r3, sp
    aef6:	f04f 0c01 	mov.w	ip, #1
    aefa:	f8c3 c008 	str.w	ip, [r3, #8]
    aefe:	605a      	str	r2, [r3, #4]
    af00:	f8c3 c000 	str.w	ip, [r3]
    af04:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    af08:	2202      	movs	r2, #2
    af0a:	f50d 63f0 	add.w	r3, sp, #1920	; 0x780
    af0e:	99c1      	ldr	r1, [sp, #772]	; 0x304
    af10:	f002 ffeb 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    af14:	e7ff      	b.n	af16 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1272>
    af16:	f8dd 175c 	ldr.w	r1, [sp, #1884]	; 0x75c
    af1a:	f64e 1084 	movw	r0, #59780	; 0xe984
    af1e:	f2c0 0001 	movt	r0, #1
    af22:	6802      	ldr	r2, [r0, #0]
    af24:	f50d 60ed 	add.w	r0, sp, #1896	; 0x768
    af28:	f003 ffab 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    af2c:	e7ff      	b.n	af2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128a>
    af2e:	e7ff      	b.n	af30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x128c>
                self.v[x] |= self.v[y];
    af30:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    af34:	280f      	cmp	r0, #15
    af36:	f202 83d0 	bhi.w	d6da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a36>
    af3a:	e7ff      	b.n	af3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1298>
    af3c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af40:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    af44:	1842      	adds	r2, r0, r1
    af46:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    af4a:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    af4e:	2b0f      	cmp	r3, #15
    af50:	92be      	str	r2, [sp, #760]	; 0x2f8
    af52:	f202 83cc 	bhi.w	d6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a4a>
    af56:	e7ff      	b.n	af58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12b4>
    af58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    af5c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    af60:	1842      	adds	r2, r0, r1
    af62:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    af66:	f8dd c2f8 	ldr.w	ip, [sp, #760]	; 0x2f8
    af6a:	ea43 030c 	orr.w	r3, r3, ip
    af6e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    af72:	f002 b94d 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    af76:	2005      	movs	r0, #5
    af78:	f8cd 078c 	str.w	r0, [sp, #1932]	; 0x78c
    af7c:	f64d 7030 	movw	r0, #57136	; 0xdf30
    af80:	f2c0 0001 	movt	r0, #1
    af84:	6801      	ldr	r1, [r0, #0]
    af86:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    af8a:	f007 fde5 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    af8e:	90bd      	str	r0, [sp, #756]	; 0x2f4
    af90:	e01f      	b.n	afd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x132e>
    af92:	2001      	movs	r0, #1
    af94:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    af98:	e015      	b.n	afc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    af9a:	2000      	movs	r0, #0
    af9c:	f88d 0793 	strb.w	r0, [sp, #1939]	; 0x793
    afa0:	e011      	b.n	afc6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1322>
    afa2:	2000      	movs	r0, #0
    afa4:	f88d 0e0b 	strb.w	r0, [sp, #3595]	; 0xe0b
    afa8:	f89d 1e0b 	ldrb.w	r1, [sp, #3595]	; 0xe0b
    afac:	f643 2050 	movw	r0, #14928	; 0x3a50
    afb0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    afb4:	f007 fddc 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    afb8:	f8cd 0e0c 	str.w	r0, [sp, #3596]	; 0xe0c
    afbc:	f8dd 0e0c 	ldr.w	r0, [sp, #3596]	; 0xe0c
    afc0:	f8cd 0794 	str.w	r0, [sp, #1940]	; 0x794
    afc4:	e00a      	b.n	afdc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1338>
    afc6:	f89d 0793 	ldrb.w	r0, [sp, #1939]	; 0x793
    afca:	07c0      	lsls	r0, r0, #31
    afcc:	2800      	cmp	r0, #0
    afce:	d112      	bne.n	aff6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1352>
    afd0:	e055      	b.n	b07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
    afd2:	98bd      	ldr	r0, [sp, #756]	; 0x2f4
    afd4:	07c1      	lsls	r1, r0, #31
    afd6:	2900      	cmp	r1, #0
    afd8:	d1e3      	bne.n	afa2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12fe>
    afda:	e7de      	b.n	af9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
    afdc:	f20d 708c 	addw	r0, sp, #1932	; 0x78c
    afe0:	f20d 7194 	addw	r1, sp, #1940	; 0x794
    afe4:	f007 fdb8 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    afe8:	90bc      	str	r0, [sp, #752]	; 0x2f0
    afea:	e7ff      	b.n	afec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1348>
    afec:	98bc      	ldr	r0, [sp, #752]	; 0x2f0
    afee:	07c1      	lsls	r1, r0, #31
    aff0:	2900      	cmp	r1, #0
    aff2:	d1ce      	bne.n	af92 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12ee>
    aff4:	e7d1      	b.n	af9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x12f6>
                trace!("[{:04x}] AND Vx, Vy", self.pc);
    aff6:	f64e 1004 	movw	r0, #59652	; 0xe904
    affa:	f2c0 0001 	movt	r0, #1
    affe:	6801      	ldr	r1, [r0, #0]
    b000:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b004:	f100 0212 	add.w	r2, r0, #18
    b008:	f8cd 27b8 	str.w	r2, [sp, #1976]	; 0x7b8
    b00c:	f8dd 27b8 	ldr.w	r2, [sp, #1976]	; 0x7b8
    b010:	f8cd 2d4c 	str.w	r2, [sp, #3404]	; 0xd4c
    b014:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b018:	f2c0 0301 	movt	r3, #1
    b01c:	4610      	mov	r0, r2
    b01e:	91bb      	str	r1, [sp, #748]	; 0x2ec
    b020:	4619      	mov	r1, r3
    b022:	f006 feb7 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b026:	90ba      	str	r0, [sp, #744]	; 0x2e8
    b028:	91b9      	str	r1, [sp, #740]	; 0x2e4
    b02a:	e7ff      	b.n	b02c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1388>
    b02c:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
    b02e:	f8cd 07b0 	str.w	r0, [sp, #1968]	; 0x7b0
    b032:	99b9      	ldr	r1, [sp, #740]	; 0x2e4
    b034:	f8cd 17b4 	str.w	r1, [sp, #1972]	; 0x7b4
    b038:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b03c:	f2c0 0201 	movt	r2, #1
    b040:	6812      	ldr	r2, [r2, #0]
    b042:	466b      	mov	r3, sp
    b044:	f04f 0c01 	mov.w	ip, #1
    b048:	f8c3 c008 	str.w	ip, [r3, #8]
    b04c:	605a      	str	r2, [r3, #4]
    b04e:	f8c3 c000 	str.w	ip, [r3]
    b052:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    b056:	2202      	movs	r2, #2
    b058:	f50d 63f6 	add.w	r3, sp, #1968	; 0x7b0
    b05c:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
    b05e:	f002 ff44 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b062:	e7ff      	b.n	b064 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13c0>
    b064:	f8dd 178c 	ldr.w	r1, [sp, #1932]	; 0x78c
    b068:	f64e 1024 	movw	r0, #59684	; 0xe924
    b06c:	f2c0 0001 	movt	r0, #1
    b070:	6802      	ldr	r2, [r0, #0]
    b072:	f50d 60f3 	add.w	r0, sp, #1944	; 0x798
    b076:	f003 ff04 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b07a:	e7ff      	b.n	b07c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13d8>
    b07c:	e7ff      	b.n	b07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13da>
                self.v[x] &= self.v[y];
    b07e:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b082:	280f      	cmp	r0, #15
    b084:	f202 8315 	bhi.w	d6b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a0e>
    b088:	e7ff      	b.n	b08a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x13e6>
    b08a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b08e:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b092:	1842      	adds	r2, r0, r1
    b094:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b098:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b09c:	2b0f      	cmp	r3, #15
    b09e:	92b8      	str	r2, [sp, #736]	; 0x2e0
    b0a0:	f202 8311 	bhi.w	d6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3a22>
    b0a4:	e7ff      	b.n	b0a6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1402>
    b0a6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b0aa:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b0ae:	1842      	adds	r2, r0, r1
    b0b0:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b0b4:	f8dd c2e0 	ldr.w	ip, [sp, #736]	; 0x2e0
    b0b8:	ea03 030c 	and.w	r3, r3, ip
    b0bc:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b0c0:	f002 b8a6 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b0c4:	2005      	movs	r0, #5
    b0c6:	f8cd 07bc 	str.w	r0, [sp, #1980]	; 0x7bc
    b0ca:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b0ce:	f2c0 0001 	movt	r0, #1
    b0d2:	6801      	ldr	r1, [r0, #0]
    b0d4:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b0d8:	f007 fd3e 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b0dc:	90b7      	str	r0, [sp, #732]	; 0x2dc
    b0de:	e01f      	b.n	b120 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x147c>
    b0e0:	2001      	movs	r0, #1
    b0e2:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b0e6:	e015      	b.n	b114 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b0e8:	2000      	movs	r0, #0
    b0ea:	f88d 07c3 	strb.w	r0, [sp, #1987]	; 0x7c3
    b0ee:	e011      	b.n	b114 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1470>
    b0f0:	2000      	movs	r0, #0
    b0f2:	f88d 0e13 	strb.w	r0, [sp, #3603]	; 0xe13
    b0f6:	f89d 1e13 	ldrb.w	r1, [sp, #3603]	; 0xe13
    b0fa:	f643 2050 	movw	r0, #14928	; 0x3a50
    b0fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b102:	f007 fd35 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b106:	f8cd 0e14 	str.w	r0, [sp, #3604]	; 0xe14
    b10a:	f8dd 0e14 	ldr.w	r0, [sp, #3604]	; 0xe14
    b10e:	f8cd 07c4 	str.w	r0, [sp, #1988]	; 0x7c4
    b112:	e00a      	b.n	b12a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1486>
    b114:	f89d 07c3 	ldrb.w	r0, [sp, #1987]	; 0x7c3
    b118:	07c0      	lsls	r0, r0, #31
    b11a:	2800      	cmp	r0, #0
    b11c:	d112      	bne.n	b144 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14a0>
    b11e:	e055      	b.n	b1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
    b120:	98b7      	ldr	r0, [sp, #732]	; 0x2dc
    b122:	07c1      	lsls	r1, r0, #31
    b124:	2900      	cmp	r1, #0
    b126:	d1e3      	bne.n	b0f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x144c>
    b128:	e7de      	b.n	b0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
    b12a:	f20d 70bc 	addw	r0, sp, #1980	; 0x7bc
    b12e:	f20d 71c4 	addw	r1, sp, #1988	; 0x7c4
    b132:	f007 fd11 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b136:	90b6      	str	r0, [sp, #728]	; 0x2d8
    b138:	e7ff      	b.n	b13a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1496>
    b13a:	98b6      	ldr	r0, [sp, #728]	; 0x2d8
    b13c:	07c1      	lsls	r1, r0, #31
    b13e:	2900      	cmp	r1, #0
    b140:	d1ce      	bne.n	b0e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x143c>
    b142:	e7d1      	b.n	b0e8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1444>
                trace!("[{:04x}] XOR Vx, Vy", self.pc);
    b144:	f64e 00a4 	movw	r0, #59556	; 0xe8a4
    b148:	f2c0 0001 	movt	r0, #1
    b14c:	6801      	ldr	r1, [r0, #0]
    b14e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b152:	f100 0212 	add.w	r2, r0, #18
    b156:	f8cd 27e8 	str.w	r2, [sp, #2024]	; 0x7e8
    b15a:	f8dd 27e8 	ldr.w	r2, [sp, #2024]	; 0x7e8
    b15e:	f8cd 2d48 	str.w	r2, [sp, #3400]	; 0xd48
    b162:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b166:	f2c0 0301 	movt	r3, #1
    b16a:	4610      	mov	r0, r2
    b16c:	91b5      	str	r1, [sp, #724]	; 0x2d4
    b16e:	4619      	mov	r1, r3
    b170:	f006 fe10 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b174:	90b4      	str	r0, [sp, #720]	; 0x2d0
    b176:	91b3      	str	r1, [sp, #716]	; 0x2cc
    b178:	e7ff      	b.n	b17a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x14d6>
    b17a:	98b4      	ldr	r0, [sp, #720]	; 0x2d0
    b17c:	f8cd 07e0 	str.w	r0, [sp, #2016]	; 0x7e0
    b180:	99b3      	ldr	r1, [sp, #716]	; 0x2cc
    b182:	f8cd 17e4 	str.w	r1, [sp, #2020]	; 0x7e4
    b186:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b18a:	f2c0 0201 	movt	r2, #1
    b18e:	6812      	ldr	r2, [r2, #0]
    b190:	466b      	mov	r3, sp
    b192:	f04f 0c01 	mov.w	ip, #1
    b196:	f8c3 c008 	str.w	ip, [r3, #8]
    b19a:	605a      	str	r2, [r3, #4]
    b19c:	f8c3 c000 	str.w	ip, [r3]
    b1a0:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b1a4:	2202      	movs	r2, #2
    b1a6:	f50d 63fc 	add.w	r3, sp, #2016	; 0x7e0
    b1aa:	99b5      	ldr	r1, [sp, #724]	; 0x2d4
    b1ac:	f002 fe9d 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b1b0:	e7ff      	b.n	b1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x150e>
    b1b2:	f8dd 17bc 	ldr.w	r1, [sp, #1980]	; 0x7bc
    b1b6:	f64e 00c4 	movw	r0, #59588	; 0xe8c4
    b1ba:	f2c0 0001 	movt	r0, #1
    b1be:	6802      	ldr	r2, [r0, #0]
    b1c0:	f50d 60f9 	add.w	r0, sp, #1992	; 0x7c8
    b1c4:	f003 fe5d 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b1c8:	e7ff      	b.n	b1ca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1526>
    b1ca:	e7ff      	b.n	b1cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1528>
                self.v[x] ^= self.v[y];
    b1cc:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b1d0:	280f      	cmp	r0, #15
    b1d2:	f202 825a 	bhi.w	d68a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39e6>
    b1d6:	e7ff      	b.n	b1d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1534>
    b1d8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b1dc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b1e0:	1842      	adds	r2, r0, r1
    b1e2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b1e6:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b1ea:	2b0f      	cmp	r3, #15
    b1ec:	92b2      	str	r2, [sp, #712]	; 0x2c8
    b1ee:	f202 8256 	bhi.w	d69e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39fa>
    b1f2:	e7ff      	b.n	b1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1550>
    b1f4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b1f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b1fc:	1842      	adds	r2, r0, r1
    b1fe:	f892 3034 	ldrb.w	r3, [r2, #52]	; 0x34
    b202:	f8dd c2c8 	ldr.w	ip, [sp, #712]	; 0x2c8
    b206:	ea83 030c 	eor.w	r3, r3, ip
    b20a:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b20e:	f001 bfff 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b212:	2005      	movs	r0, #5
    b214:	f8cd 07ec 	str.w	r0, [sp, #2028]	; 0x7ec
    b218:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b21c:	f2c0 0001 	movt	r0, #1
    b220:	6801      	ldr	r1, [r0, #0]
    b222:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b226:	f007 fc97 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b22a:	90b1      	str	r0, [sp, #708]	; 0x2c4
    b22c:	e01f      	b.n	b26e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ca>
    b22e:	2001      	movs	r0, #1
    b230:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b234:	e015      	b.n	b262 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b236:	2000      	movs	r0, #0
    b238:	f88d 07f3 	strb.w	r0, [sp, #2035]	; 0x7f3
    b23c:	e011      	b.n	b262 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15be>
    b23e:	2000      	movs	r0, #0
    b240:	f88d 0e1b 	strb.w	r0, [sp, #3611]	; 0xe1b
    b244:	f89d 1e1b 	ldrb.w	r1, [sp, #3611]	; 0xe1b
    b248:	f643 2050 	movw	r0, #14928	; 0x3a50
    b24c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b250:	f007 fc8e 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b254:	f8cd 0e1c 	str.w	r0, [sp, #3612]	; 0xe1c
    b258:	f8dd 0e1c 	ldr.w	r0, [sp, #3612]	; 0xe1c
    b25c:	f8cd 07f4 	str.w	r0, [sp, #2036]	; 0x7f4
    b260:	e00a      	b.n	b278 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15d4>
    b262:	f89d 07f3 	ldrb.w	r0, [sp, #2035]	; 0x7f3
    b266:	07c0      	lsls	r0, r0, #31
    b268:	2800      	cmp	r0, #0
    b26a:	d112      	bne.n	b292 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15ee>
    b26c:	e055      	b.n	b31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
    b26e:	98b1      	ldr	r0, [sp, #708]	; 0x2c4
    b270:	07c1      	lsls	r1, r0, #31
    b272:	2900      	cmp	r1, #0
    b274:	d1e3      	bne.n	b23e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x159a>
    b276:	e7de      	b.n	b236 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
    b278:	f20d 70ec 	addw	r0, sp, #2028	; 0x7ec
    b27c:	f20d 71f4 	addw	r1, sp, #2036	; 0x7f4
    b280:	f007 fc6a 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b284:	90b0      	str	r0, [sp, #704]	; 0x2c0
    b286:	e7ff      	b.n	b288 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x15e4>
    b288:	98b0      	ldr	r0, [sp, #704]	; 0x2c0
    b28a:	07c1      	lsls	r1, r0, #31
    b28c:	2900      	cmp	r1, #0
    b28e:	d1ce      	bne.n	b22e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x158a>
    b290:	e7d1      	b.n	b236 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1592>
                trace!("[{:04x}] ADD Vx, Vy", self.pc);
    b292:	f64e 0034 	movw	r0, #59444	; 0xe834
    b296:	f2c0 0001 	movt	r0, #1
    b29a:	6801      	ldr	r1, [r0, #0]
    b29c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b2a0:	f100 0212 	add.w	r2, r0, #18
    b2a4:	f8cd 2818 	str.w	r2, [sp, #2072]	; 0x818
    b2a8:	f8dd 2818 	ldr.w	r2, [sp, #2072]	; 0x818
    b2ac:	f8cd 2d40 	str.w	r2, [sp, #3392]	; 0xd40
    b2b0:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b2b4:	f2c0 0301 	movt	r3, #1
    b2b8:	4610      	mov	r0, r2
    b2ba:	91af      	str	r1, [sp, #700]	; 0x2bc
    b2bc:	4619      	mov	r1, r3
    b2be:	f006 fd69 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b2c2:	90ae      	str	r0, [sp, #696]	; 0x2b8
    b2c4:	91ad      	str	r1, [sp, #692]	; 0x2b4
    b2c6:	e7ff      	b.n	b2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1624>
    b2c8:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
    b2ca:	f8cd 0810 	str.w	r0, [sp, #2064]	; 0x810
    b2ce:	99ad      	ldr	r1, [sp, #692]	; 0x2b4
    b2d0:	f8cd 1814 	str.w	r1, [sp, #2068]	; 0x814
    b2d4:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b2d8:	f2c0 0201 	movt	r2, #1
    b2dc:	6812      	ldr	r2, [r2, #0]
    b2de:	466b      	mov	r3, sp
    b2e0:	f04f 0c01 	mov.w	ip, #1
    b2e4:	f8c3 c008 	str.w	ip, [r3, #8]
    b2e8:	605a      	str	r2, [r3, #4]
    b2ea:	f8c3 c000 	str.w	ip, [r3]
    b2ee:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b2f2:	2202      	movs	r2, #2
    b2f4:	f50d 6301 	add.w	r3, sp, #2064	; 0x810
    b2f8:	99af      	ldr	r1, [sp, #700]	; 0x2bc
    b2fa:	f002 fdf6 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b2fe:	e7ff      	b.n	b300 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x165c>
    b300:	f8dd 17ec 	ldr.w	r1, [sp, #2028]	; 0x7ec
    b304:	f64e 0054 	movw	r0, #59476	; 0xe854
    b308:	f2c0 0001 	movt	r0, #1
    b30c:	6802      	ldr	r2, [r0, #0]
    b30e:	f50d 60ff 	add.w	r0, sp, #2040	; 0x7f8
    b312:	f003 fdb6 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b316:	e7ff      	b.n	b318 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1674>
    b318:	e7ff      	b.n	b31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1676>
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    b31a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b31e:	280f      	cmp	r0, #15
    b320:	f202 8195 	bhi.w	d64e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39aa>
    b324:	e7ff      	b.n	b326 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1682>
    b326:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b32a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b32e:	1842      	adds	r2, r0, r1
    b330:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b334:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b338:	2b0f      	cmp	r3, #15
    b33a:	92ac      	str	r2, [sp, #688]	; 0x2b0
    b33c:	f202 8191 	bhi.w	d662 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39be>
    b340:	e7ff      	b.n	b342 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x169e>
    b342:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b346:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b34a:	1842      	adds	r2, r0, r1
    b34c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b350:	98ac      	ldr	r0, [sp, #688]	; 0x2b0
    b352:	f007 fc92 	bl	12c7a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
    b356:	90ab      	str	r0, [sp, #684]	; 0x2ac
    b358:	91aa      	str	r1, [sp, #680]	; 0x2a8
    b35a:	e7ff      	b.n	b35c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16b8>
    b35c:	98ab      	ldr	r0, [sp, #684]	; 0x2ac
    b35e:	f88d 0d46 	strb.w	r0, [sp, #3398]	; 0xd46
    b362:	99aa      	ldr	r1, [sp, #680]	; 0x2a8
    b364:	f001 0201 	and.w	r2, r1, #1
    b368:	f88d 2d47 	strb.w	r2, [sp, #3399]	; 0xd47
                self.v[x] = v;
    b36c:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b370:	2a0f      	cmp	r2, #15
    b372:	f202 8180 	bhi.w	d676 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x39d2>
    b376:	e7ff      	b.n	b378 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x16d4>
    b378:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b37c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b380:	1842      	adds	r2, r0, r1
    b382:	9bab      	ldr	r3, [sp, #684]	; 0x2ac
    b384:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                self.v[0xf] = c as u8;
    b388:	9aaa      	ldr	r2, [sp, #680]	; 0x2a8
    b38a:	f002 0c01 	and.w	ip, r2, #1
    b38e:	f880 c043 	strb.w	ip, [r0, #67]	; 0x43
        match (
    b392:	f001 bf3d 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b396:	2005      	movs	r0, #5
    b398:	f8cd 081c 	str.w	r0, [sp, #2076]	; 0x81c
    b39c:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b3a0:	f2c0 0001 	movt	r0, #1
    b3a4:	6801      	ldr	r1, [r0, #0]
    b3a6:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b3aa:	f007 fbd5 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b3ae:	90a9      	str	r0, [sp, #676]	; 0x2a4
    b3b0:	e01f      	b.n	b3f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x174e>
    b3b2:	2001      	movs	r0, #1
    b3b4:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b3b8:	e015      	b.n	b3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b3ba:	2000      	movs	r0, #0
    b3bc:	f88d 0823 	strb.w	r0, [sp, #2083]	; 0x823
    b3c0:	e011      	b.n	b3e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1742>
    b3c2:	2000      	movs	r0, #0
    b3c4:	f88d 0e23 	strb.w	r0, [sp, #3619]	; 0xe23
    b3c8:	f89d 1e23 	ldrb.w	r1, [sp, #3619]	; 0xe23
    b3cc:	f643 2050 	movw	r0, #14928	; 0x3a50
    b3d0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b3d4:	f007 fbcc 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b3d8:	f8cd 0e24 	str.w	r0, [sp, #3620]	; 0xe24
    b3dc:	f8dd 0e24 	ldr.w	r0, [sp, #3620]	; 0xe24
    b3e0:	f8cd 0824 	str.w	r0, [sp, #2084]	; 0x824
    b3e4:	e00a      	b.n	b3fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1758>
    b3e6:	f89d 0823 	ldrb.w	r0, [sp, #2083]	; 0x823
    b3ea:	07c0      	lsls	r0, r0, #31
    b3ec:	2800      	cmp	r0, #0
    b3ee:	d112      	bne.n	b416 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1772>
    b3f0:	e055      	b.n	b49e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
    b3f2:	98a9      	ldr	r0, [sp, #676]	; 0x2a4
    b3f4:	07c1      	lsls	r1, r0, #31
    b3f6:	2900      	cmp	r1, #0
    b3f8:	d1e3      	bne.n	b3c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x171e>
    b3fa:	e7de      	b.n	b3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
    b3fc:	f60d 001c 	addw	r0, sp, #2076	; 0x81c
    b400:	f60d 0124 	addw	r1, sp, #2084	; 0x824
    b404:	f007 fba8 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b408:	90a8      	str	r0, [sp, #672]	; 0x2a0
    b40a:	e7ff      	b.n	b40c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1768>
    b40c:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
    b40e:	07c1      	lsls	r1, r0, #31
    b410:	2900      	cmp	r1, #0
    b412:	d1ce      	bne.n	b3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x170e>
    b414:	e7d1      	b.n	b3ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1716>
                trace!("[{:04x}] SUB Vx, Vy", self.pc);
    b416:	f24e 70c4 	movw	r0, #59332	; 0xe7c4
    b41a:	f2c0 0001 	movt	r0, #1
    b41e:	6801      	ldr	r1, [r0, #0]
    b420:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b424:	f100 0212 	add.w	r2, r0, #18
    b428:	f8cd 2848 	str.w	r2, [sp, #2120]	; 0x848
    b42c:	f8dd 2848 	ldr.w	r2, [sp, #2120]	; 0x848
    b430:	f8cd 2d38 	str.w	r2, [sp, #3384]	; 0xd38
    b434:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b438:	f2c0 0301 	movt	r3, #1
    b43c:	4610      	mov	r0, r2
    b43e:	91a7      	str	r1, [sp, #668]	; 0x29c
    b440:	4619      	mov	r1, r3
    b442:	f006 fca7 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b446:	90a6      	str	r0, [sp, #664]	; 0x298
    b448:	91a5      	str	r1, [sp, #660]	; 0x294
    b44a:	e7ff      	b.n	b44c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17a8>
    b44c:	98a6      	ldr	r0, [sp, #664]	; 0x298
    b44e:	f8cd 0840 	str.w	r0, [sp, #2112]	; 0x840
    b452:	99a5      	ldr	r1, [sp, #660]	; 0x294
    b454:	f8cd 1844 	str.w	r1, [sp, #2116]	; 0x844
    b458:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b45c:	f2c0 0201 	movt	r2, #1
    b460:	6812      	ldr	r2, [r2, #0]
    b462:	466b      	mov	r3, sp
    b464:	f04f 0c01 	mov.w	ip, #1
    b468:	f8c3 c008 	str.w	ip, [r3, #8]
    b46c:	605a      	str	r2, [r3, #4]
    b46e:	f8c3 c000 	str.w	ip, [r3]
    b472:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b476:	2202      	movs	r2, #2
    b478:	f50d 6304 	add.w	r3, sp, #2112	; 0x840
    b47c:	99a7      	ldr	r1, [sp, #668]	; 0x29c
    b47e:	f002 fd34 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b482:	e7ff      	b.n	b484 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17e0>
    b484:	f8dd 181c 	ldr.w	r1, [sp, #2076]	; 0x81c
    b488:	f24e 70e4 	movw	r0, #59364	; 0xe7e4
    b48c:	f2c0 0001 	movt	r0, #1
    b490:	6802      	ldr	r2, [r0, #0]
    b492:	f60d 0028 	addw	r0, sp, #2088	; 0x828
    b496:	f003 fcf4 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b49a:	e7ff      	b.n	b49c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17f8>
    b49c:	e7ff      	b.n	b49e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x17fa>
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    b49e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b4a2:	280f      	cmp	r0, #15
    b4a4:	f202 80b5 	bhi.w	d612 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x396e>
    b4a8:	e7ff      	b.n	b4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1806>
    b4aa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b4ae:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b4b2:	1842      	adds	r2, r0, r1
    b4b4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b4b8:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    b4bc:	2b0f      	cmp	r3, #15
    b4be:	92a4      	str	r2, [sp, #656]	; 0x290
    b4c0:	f202 80b1 	bhi.w	d626 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3982>
    b4c4:	e7ff      	b.n	b4c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1822>
    b4c6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b4ca:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b4ce:	1842      	adds	r2, r0, r1
    b4d0:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b4d4:	98a4      	ldr	r0, [sp, #656]	; 0x290
    b4d6:	f007 fbfb 	bl	12cd0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b4da:	90a3      	str	r0, [sp, #652]	; 0x28c
    b4dc:	91a2      	str	r1, [sp, #648]	; 0x288
    b4de:	e7ff      	b.n	b4e0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x183c>
    b4e0:	98a3      	ldr	r0, [sp, #652]	; 0x28c
    b4e2:	f88d 0d3e 	strb.w	r0, [sp, #3390]	; 0xd3e
    b4e6:	99a2      	ldr	r1, [sp, #648]	; 0x288
    b4e8:	f001 0201 	and.w	r2, r1, #1
    b4ec:	f88d 2d3f 	strb.w	r2, [sp, #3391]	; 0xd3f
                self.v[x] = v;
    b4f0:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b4f4:	2a0f      	cmp	r2, #15
    b4f6:	f202 80a0 	bhi.w	d63a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3996>
    b4fa:	e7ff      	b.n	b4fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1858>
    b4fc:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b500:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b504:	1842      	adds	r2, r0, r1
    b506:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
    b508:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b50c:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b50e:	f8dd c288 	ldr.w	ip, [sp, #648]	; 0x288
    b512:	ea22 020c 	bic.w	r2, r2, ip
    b516:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b51a:	f001 be79 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b51e:	2005      	movs	r0, #5
    b520:	f8cd 084c 	str.w	r0, [sp, #2124]	; 0x84c
    b524:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b528:	f2c0 0001 	movt	r0, #1
    b52c:	6801      	ldr	r1, [r0, #0]
    b52e:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b532:	f007 fb11 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b536:	90a1      	str	r0, [sp, #644]	; 0x284
    b538:	e01f      	b.n	b57a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18d6>
    b53a:	2001      	movs	r0, #1
    b53c:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b540:	e015      	b.n	b56e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b542:	2000      	movs	r0, #0
    b544:	f88d 0853 	strb.w	r0, [sp, #2131]	; 0x853
    b548:	e011      	b.n	b56e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18ca>
    b54a:	2000      	movs	r0, #0
    b54c:	f88d 0e2b 	strb.w	r0, [sp, #3627]	; 0xe2b
    b550:	f89d 1e2b 	ldrb.w	r1, [sp, #3627]	; 0xe2b
    b554:	f643 2050 	movw	r0, #14928	; 0x3a50
    b558:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b55c:	f007 fb08 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b560:	f8cd 0e2c 	str.w	r0, [sp, #3628]	; 0xe2c
    b564:	f8dd 0e2c 	ldr.w	r0, [sp, #3628]	; 0xe2c
    b568:	f8cd 0854 	str.w	r0, [sp, #2132]	; 0x854
    b56c:	e00a      	b.n	b584 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18e0>
    b56e:	f89d 0853 	ldrb.w	r0, [sp, #2131]	; 0x853
    b572:	07c0      	lsls	r0, r0, #31
    b574:	2800      	cmp	r0, #0
    b576:	d112      	bne.n	b59e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18fa>
    b578:	e055      	b.n	b626 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
    b57a:	98a1      	ldr	r0, [sp, #644]	; 0x284
    b57c:	07c1      	lsls	r1, r0, #31
    b57e:	2900      	cmp	r1, #0
    b580:	d1e3      	bne.n	b54a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18a6>
    b582:	e7de      	b.n	b542 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
    b584:	f60d 004c 	addw	r0, sp, #2124	; 0x84c
    b588:	f60d 0154 	addw	r1, sp, #2132	; 0x854
    b58c:	f007 fae4 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b590:	90a0      	str	r0, [sp, #640]	; 0x280
    b592:	e7ff      	b.n	b594 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x18f0>
    b594:	98a0      	ldr	r0, [sp, #640]	; 0x280
    b596:	07c1      	lsls	r1, r0, #31
    b598:	2900      	cmp	r1, #0
    b59a:	d1ce      	bne.n	b53a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1896>
    b59c:	e7d1      	b.n	b542 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x189e>
                trace!("[{:04x}] SHR Vx, Vy", self.pc);
    b59e:	f24e 7054 	movw	r0, #59220	; 0xe754
    b5a2:	f2c0 0001 	movt	r0, #1
    b5a6:	6801      	ldr	r1, [r0, #0]
    b5a8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b5ac:	f100 0212 	add.w	r2, r0, #18
    b5b0:	f8cd 2878 	str.w	r2, [sp, #2168]	; 0x878
    b5b4:	f8dd 2878 	ldr.w	r2, [sp, #2168]	; 0x878
    b5b8:	f8cd 2d34 	str.w	r2, [sp, #3380]	; 0xd34
    b5bc:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b5c0:	f2c0 0301 	movt	r3, #1
    b5c4:	4610      	mov	r0, r2
    b5c6:	919f      	str	r1, [sp, #636]	; 0x27c
    b5c8:	4619      	mov	r1, r3
    b5ca:	f006 fbe3 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b5ce:	909e      	str	r0, [sp, #632]	; 0x278
    b5d0:	919d      	str	r1, [sp, #628]	; 0x274
    b5d2:	e7ff      	b.n	b5d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1930>
    b5d4:	989e      	ldr	r0, [sp, #632]	; 0x278
    b5d6:	f8cd 0870 	str.w	r0, [sp, #2160]	; 0x870
    b5da:	999d      	ldr	r1, [sp, #628]	; 0x274
    b5dc:	f8cd 1874 	str.w	r1, [sp, #2164]	; 0x874
    b5e0:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b5e4:	f2c0 0201 	movt	r2, #1
    b5e8:	6812      	ldr	r2, [r2, #0]
    b5ea:	466b      	mov	r3, sp
    b5ec:	f04f 0c01 	mov.w	ip, #1
    b5f0:	f8c3 c008 	str.w	ip, [r3, #8]
    b5f4:	605a      	str	r2, [r3, #4]
    b5f6:	f8c3 c000 	str.w	ip, [r3]
    b5fa:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b5fe:	2202      	movs	r2, #2
    b600:	f50d 6307 	add.w	r3, sp, #2160	; 0x870
    b604:	999f      	ldr	r1, [sp, #636]	; 0x27c
    b606:	f002 fc70 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b60a:	e7ff      	b.n	b60c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1968>
    b60c:	f8dd 184c 	ldr.w	r1, [sp, #2124]	; 0x84c
    b610:	f24e 7074 	movw	r0, #59252	; 0xe774
    b614:	f2c0 0001 	movt	r0, #1
    b618:	6802      	ldr	r2, [r0, #0]
    b61a:	f60d 0058 	addw	r0, sp, #2136	; 0x858
    b61e:	f003 fc30 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b622:	e7ff      	b.n	b624 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1980>
    b624:	e7ff      	b.n	b626 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1982>
                self.v[0xf] = self.v[x] & 1;
    b626:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b62a:	280f      	cmp	r0, #15
    b62c:	f201 87d3 	bhi.w	d5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3932>
    b630:	e7ff      	b.n	b632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x198e>
    b632:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b636:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b63a:	1842      	adds	r2, r0, r1
    b63c:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b640:	f002 0201 	and.w	r2, r2, #1
    b644:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shr(1);
    b648:	290f      	cmp	r1, #15
    b64a:	f201 87ce 	bhi.w	d5ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3946>
    b64e:	e7ff      	b.n	b650 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19ac>
    b650:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b654:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b658:	1842      	adds	r2, r0, r1
    b65a:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b65e:	2101      	movs	r1, #1
    b660:	f007 fae7 	bl	12c32 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>
    b664:	909c      	str	r0, [sp, #624]	; 0x270
    b666:	e7ff      	b.n	b668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19c4>
    b668:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b66c:	280f      	cmp	r0, #15
    b66e:	f201 87c6 	bhi.w	d5fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x395a>
    b672:	e7ff      	b.n	b674 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x19d0>
    b674:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b678:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b67c:	1842      	adds	r2, r0, r1
    b67e:	9b9c      	ldr	r3, [sp, #624]	; 0x270
    b680:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b684:	f001 bdc4 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b688:	2005      	movs	r0, #5
    b68a:	f8cd 087c 	str.w	r0, [sp, #2172]	; 0x87c
    b68e:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b692:	f2c0 0001 	movt	r0, #1
    b696:	6801      	ldr	r1, [r0, #0]
    b698:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b69c:	f007 fa5c 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b6a0:	909b      	str	r0, [sp, #620]	; 0x26c
    b6a2:	e01f      	b.n	b6e4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a40>
    b6a4:	2001      	movs	r0, #1
    b6a6:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b6aa:	e015      	b.n	b6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b6ac:	2000      	movs	r0, #0
    b6ae:	f88d 0883 	strb.w	r0, [sp, #2179]	; 0x883
    b6b2:	e011      	b.n	b6d8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a34>
    b6b4:	2000      	movs	r0, #0
    b6b6:	f88d 0e33 	strb.w	r0, [sp, #3635]	; 0xe33
    b6ba:	f89d 1e33 	ldrb.w	r1, [sp, #3635]	; 0xe33
    b6be:	f643 2050 	movw	r0, #14928	; 0x3a50
    b6c2:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b6c6:	f007 fa53 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b6ca:	f8cd 0e34 	str.w	r0, [sp, #3636]	; 0xe34
    b6ce:	f8dd 0e34 	ldr.w	r0, [sp, #3636]	; 0xe34
    b6d2:	f8cd 0884 	str.w	r0, [sp, #2180]	; 0x884
    b6d6:	e00a      	b.n	b6ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a4a>
    b6d8:	f89d 0883 	ldrb.w	r0, [sp, #2179]	; 0x883
    b6dc:	07c0      	lsls	r0, r0, #31
    b6de:	2800      	cmp	r0, #0
    b6e0:	d112      	bne.n	b708 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a64>
    b6e2:	e055      	b.n	b790 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
    b6e4:	989b      	ldr	r0, [sp, #620]	; 0x26c
    b6e6:	07c1      	lsls	r1, r0, #31
    b6e8:	2900      	cmp	r1, #0
    b6ea:	d1e3      	bne.n	b6b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a10>
    b6ec:	e7de      	b.n	b6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
    b6ee:	f60d 007c 	addw	r0, sp, #2172	; 0x87c
    b6f2:	f60d 0184 	addw	r1, sp, #2180	; 0x884
    b6f6:	f007 fa2f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b6fa:	909a      	str	r0, [sp, #616]	; 0x268
    b6fc:	e7ff      	b.n	b6fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a5a>
    b6fe:	989a      	ldr	r0, [sp, #616]	; 0x268
    b700:	07c1      	lsls	r1, r0, #31
    b702:	2900      	cmp	r1, #0
    b704:	d1ce      	bne.n	b6a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a00>
    b706:	e7d1      	b.n	b6ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a08>
                trace!("[{:04x}] SUBN Vx, Vy", self.pc);
    b708:	f24e 60e4 	movw	r0, #59108	; 0xe6e4
    b70c:	f2c0 0001 	movt	r0, #1
    b710:	6801      	ldr	r1, [r0, #0]
    b712:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b716:	f100 0212 	add.w	r2, r0, #18
    b71a:	f8cd 28a8 	str.w	r2, [sp, #2216]	; 0x8a8
    b71e:	f8dd 28a8 	ldr.w	r2, [sp, #2216]	; 0x8a8
    b722:	f8cd 2d2c 	str.w	r2, [sp, #3372]	; 0xd2c
    b726:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b72a:	f2c0 0301 	movt	r3, #1
    b72e:	4610      	mov	r0, r2
    b730:	9199      	str	r1, [sp, #612]	; 0x264
    b732:	4619      	mov	r1, r3
    b734:	f006 fb2e 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b738:	9098      	str	r0, [sp, #608]	; 0x260
    b73a:	9197      	str	r1, [sp, #604]	; 0x25c
    b73c:	e7ff      	b.n	b73e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1a9a>
    b73e:	9898      	ldr	r0, [sp, #608]	; 0x260
    b740:	f8cd 08a0 	str.w	r0, [sp, #2208]	; 0x8a0
    b744:	9997      	ldr	r1, [sp, #604]	; 0x25c
    b746:	f8cd 18a4 	str.w	r1, [sp, #2212]	; 0x8a4
    b74a:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b74e:	f2c0 0201 	movt	r2, #1
    b752:	6812      	ldr	r2, [r2, #0]
    b754:	466b      	mov	r3, sp
    b756:	f04f 0c01 	mov.w	ip, #1
    b75a:	f8c3 c008 	str.w	ip, [r3, #8]
    b75e:	605a      	str	r2, [r3, #4]
    b760:	f8c3 c000 	str.w	ip, [r3]
    b764:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b768:	2202      	movs	r2, #2
    b76a:	f50d 630a 	add.w	r3, sp, #2208	; 0x8a0
    b76e:	9999      	ldr	r1, [sp, #612]	; 0x264
    b770:	f002 fbbb 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b774:	e7ff      	b.n	b776 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ad2>
    b776:	f8dd 187c 	ldr.w	r1, [sp, #2172]	; 0x87c
    b77a:	f24e 7004 	movw	r0, #59140	; 0xe704
    b77e:	f2c0 0001 	movt	r0, #1
    b782:	6802      	ldr	r2, [r0, #0]
    b784:	f60d 0088 	addw	r0, sp, #2184	; 0x888
    b788:	f003 fb7b 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b78c:	e7ff      	b.n	b78e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aea>
    b78e:	e7ff      	b.n	b790 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1aec>
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    b790:	f8dd 0460 	ldr.w	r0, [sp, #1120]	; 0x460
    b794:	280f      	cmp	r0, #15
    b796:	f201 8700 	bhi.w	d59a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38f6>
    b79a:	e7ff      	b.n	b79c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1af8>
    b79c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7a0:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    b7a4:	1842      	adds	r2, r0, r1
    b7a6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b7aa:	f8dd 3468 	ldr.w	r3, [sp, #1128]	; 0x468
    b7ae:	2b0f      	cmp	r3, #15
    b7b0:	9296      	str	r2, [sp, #600]	; 0x258
    b7b2:	f201 86fc 	bhi.w	d5ae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x390a>
    b7b6:	e7ff      	b.n	b7b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b14>
    b7b8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b7c0:	1842      	adds	r2, r0, r1
    b7c2:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    b7c6:	9896      	ldr	r0, [sp, #600]	; 0x258
    b7c8:	f007 fa82 	bl	12cd0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>
    b7cc:	9095      	str	r0, [sp, #596]	; 0x254
    b7ce:	9194      	str	r1, [sp, #592]	; 0x250
    b7d0:	e7ff      	b.n	b7d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b2e>
    b7d2:	9895      	ldr	r0, [sp, #596]	; 0x254
    b7d4:	f88d 0d32 	strb.w	r0, [sp, #3378]	; 0xd32
    b7d8:	9994      	ldr	r1, [sp, #592]	; 0x250
    b7da:	f001 0201 	and.w	r2, r1, #1
    b7de:	f88d 2d33 	strb.w	r2, [sp, #3379]	; 0xd33
                self.v[x] = v;
    b7e2:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b7e6:	2a0f      	cmp	r2, #15
    b7e8:	f201 86eb 	bhi.w	d5c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x391e>
    b7ec:	e7ff      	b.n	b7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b4a>
    b7ee:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b7f2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b7f6:	1842      	adds	r2, r0, r1
    b7f8:	9b95      	ldr	r3, [sp, #596]	; 0x254
    b7fa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
    b7fe:	2201      	movs	r2, #1
                self.v[0xf] = !b as u8;
    b800:	f8dd c250 	ldr.w	ip, [sp, #592]	; 0x250
    b804:	ea22 020c 	bic.w	r2, r2, ip
    b808:	f880 2043 	strb.w	r2, [r0, #67]	; 0x43
        match (
    b80c:	f001 bd00 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b810:	2005      	movs	r0, #5
    b812:	f8cd 08ac 	str.w	r0, [sp, #2220]	; 0x8ac
    b816:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b81a:	f2c0 0001 	movt	r0, #1
    b81e:	6801      	ldr	r1, [r0, #0]
    b820:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b824:	f007 f998 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b828:	9093      	str	r0, [sp, #588]	; 0x24c
    b82a:	e01f      	b.n	b86c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bc8>
    b82c:	2001      	movs	r0, #1
    b82e:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b832:	e015      	b.n	b860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b834:	2000      	movs	r0, #0
    b836:	f88d 08b3 	strb.w	r0, [sp, #2227]	; 0x8b3
    b83a:	e011      	b.n	b860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bbc>
    b83c:	2000      	movs	r0, #0
    b83e:	f88d 0e3b 	strb.w	r0, [sp, #3643]	; 0xe3b
    b842:	f89d 1e3b 	ldrb.w	r1, [sp, #3643]	; 0xe3b
    b846:	f643 2050 	movw	r0, #14928	; 0x3a50
    b84a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b84e:	f007 f98f 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b852:	f8cd 0e3c 	str.w	r0, [sp, #3644]	; 0xe3c
    b856:	f8dd 0e3c 	ldr.w	r0, [sp, #3644]	; 0xe3c
    b85a:	f8cd 08b4 	str.w	r0, [sp, #2228]	; 0x8b4
    b85e:	e00a      	b.n	b876 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bd2>
    b860:	f89d 08b3 	ldrb.w	r0, [sp, #2227]	; 0x8b3
    b864:	07c0      	lsls	r0, r0, #31
    b866:	2800      	cmp	r0, #0
    b868:	d112      	bne.n	b890 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1bec>
    b86a:	e055      	b.n	b918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
    b86c:	9893      	ldr	r0, [sp, #588]	; 0x24c
    b86e:	07c1      	lsls	r1, r0, #31
    b870:	2900      	cmp	r1, #0
    b872:	d1e3      	bne.n	b83c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b98>
    b874:	e7de      	b.n	b834 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
    b876:	f60d 00ac 	addw	r0, sp, #2220	; 0x8ac
    b87a:	f60d 01b4 	addw	r1, sp, #2228	; 0x8b4
    b87e:	f007 f96b 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b882:	9092      	str	r0, [sp, #584]	; 0x248
    b884:	e7ff      	b.n	b886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1be2>
    b886:	9892      	ldr	r0, [sp, #584]	; 0x248
    b888:	07c1      	lsls	r1, r0, #31
    b88a:	2900      	cmp	r1, #0
    b88c:	d1ce      	bne.n	b82c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b88>
    b88e:	e7d1      	b.n	b834 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1b90>
                trace!("[{:04x}] SHL Vx, Vy", self.pc);
    b890:	f24e 6070 	movw	r0, #58992	; 0xe670
    b894:	f2c0 0001 	movt	r0, #1
    b898:	6801      	ldr	r1, [r0, #0]
    b89a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b89e:	f100 0212 	add.w	r2, r0, #18
    b8a2:	f8cd 28d8 	str.w	r2, [sp, #2264]	; 0x8d8
    b8a6:	f8dd 28d8 	ldr.w	r2, [sp, #2264]	; 0x8d8
    b8aa:	f8cd 2d28 	str.w	r2, [sp, #3368]	; 0xd28
    b8ae:	f248 23bf 	movw	r3, #33471	; 0x82bf
    b8b2:	f2c0 0301 	movt	r3, #1
    b8b6:	4610      	mov	r0, r2
    b8b8:	9191      	str	r1, [sp, #580]	; 0x244
    b8ba:	4619      	mov	r1, r3
    b8bc:	f006 fa6a 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    b8c0:	9090      	str	r0, [sp, #576]	; 0x240
    b8c2:	918f      	str	r1, [sp, #572]	; 0x23c
    b8c4:	e7ff      	b.n	b8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c22>
    b8c6:	9890      	ldr	r0, [sp, #576]	; 0x240
    b8c8:	f8cd 08d0 	str.w	r0, [sp, #2256]	; 0x8d0
    b8cc:	998f      	ldr	r1, [sp, #572]	; 0x23c
    b8ce:	f8cd 18d4 	str.w	r1, [sp, #2260]	; 0x8d4
    b8d2:	f64d 7278 	movw	r2, #57208	; 0xdf78
    b8d6:	f2c0 0201 	movt	r2, #1
    b8da:	6812      	ldr	r2, [r2, #0]
    b8dc:	466b      	mov	r3, sp
    b8de:	f04f 0c01 	mov.w	ip, #1
    b8e2:	f8c3 c008 	str.w	ip, [r3, #8]
    b8e6:	605a      	str	r2, [r3, #4]
    b8e8:	f8c3 c000 	str.w	ip, [r3]
    b8ec:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b8f0:	2202      	movs	r2, #2
    b8f2:	f50d 630d 	add.w	r3, sp, #2256	; 0x8d0
    b8f6:	9991      	ldr	r1, [sp, #580]	; 0x244
    b8f8:	f002 faf7 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    b8fc:	e7ff      	b.n	b8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c5a>
    b8fe:	f8dd 18ac 	ldr.w	r1, [sp, #2220]	; 0x8ac
    b902:	f24e 6090 	movw	r0, #59024	; 0xe690
    b906:	f2c0 0001 	movt	r0, #1
    b90a:	6802      	ldr	r2, [r0, #0]
    b90c:	f60d 00b8 	addw	r0, sp, #2232	; 0x8b8
    b910:	f003 fab7 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    b914:	e7ff      	b.n	b916 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c72>
    b916:	e7ff      	b.n	b918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c74>
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    b918:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b91c:	280f      	cmp	r0, #15
    b91e:	f201 861e 	bhi.w	d55e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ba>
    b922:	e7ff      	b.n	b924 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c80>
    b924:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b928:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b92c:	1842      	adds	r2, r0, r1
    b92e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    b932:	09d2      	lsrs	r2, r2, #7
    b934:	928e      	str	r2, [sp, #568]	; 0x238
    b936:	e7ff      	b.n	b938 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1c94>
    b938:	988e      	ldr	r0, [sp, #568]	; 0x238
    b93a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    b93e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                self.v[x] = self.v[x].wrapping_shl(1);
    b942:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    b946:	2a0f      	cmp	r2, #15
    b948:	f201 8613 	bhi.w	d572 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38ce>
    b94c:	e7ff      	b.n	b94e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1caa>
    b94e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b952:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b956:	1842      	adds	r2, r0, r1
    b958:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    b95c:	2101      	movs	r1, #1
    b95e:	f007 f957 	bl	12c10 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>
    b962:	908d      	str	r0, [sp, #564]	; 0x234
    b964:	e7ff      	b.n	b966 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cc2>
    b966:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    b96a:	280f      	cmp	r0, #15
    b96c:	f201 860b 	bhi.w	d586 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38e2>
    b970:	e7ff      	b.n	b972 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cce>
    b972:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    b976:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    b97a:	1842      	adds	r2, r0, r1
    b97c:	9b8d      	ldr	r3, [sp, #564]	; 0x234
    b97e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    b982:	f001 bc45 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    b986:	2005      	movs	r0, #5
    b988:	f8cd 08dc 	str.w	r0, [sp, #2268]	; 0x8dc
    b98c:	f64d 7030 	movw	r0, #57136	; 0xdf30
    b990:	f2c0 0001 	movt	r0, #1
    b994:	6801      	ldr	r1, [r0, #0]
    b996:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b99a:	f007 f8dd 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b99e:	908c      	str	r0, [sp, #560]	; 0x230
    b9a0:	e01f      	b.n	b9e2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d3e>
    b9a2:	2001      	movs	r0, #1
    b9a4:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b9a8:	e015      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b9aa:	2000      	movs	r0, #0
    b9ac:	f88d 08e3 	strb.w	r0, [sp, #2275]	; 0x8e3
    b9b0:	e011      	b.n	b9d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d32>
    b9b2:	2000      	movs	r0, #0
    b9b4:	f88d 0e43 	strb.w	r0, [sp, #3651]	; 0xe43
    b9b8:	f89d 1e43 	ldrb.w	r1, [sp, #3651]	; 0xe43
    b9bc:	f643 2050 	movw	r0, #14928	; 0x3a50
    b9c0:	f2c2 0000 	movt	r0, #8192	; 0x2000
    b9c4:	f007 f8d4 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    b9c8:	f8cd 0e44 	str.w	r0, [sp, #3652]	; 0xe44
    b9cc:	f8dd 0e44 	ldr.w	r0, [sp, #3652]	; 0xe44
    b9d0:	f8cd 08e4 	str.w	r0, [sp, #2276]	; 0x8e4
    b9d4:	e00a      	b.n	b9ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d48>
    b9d6:	f89d 08e3 	ldrb.w	r0, [sp, #2275]	; 0x8e3
    b9da:	07c0      	lsls	r0, r0, #31
    b9dc:	2800      	cmp	r0, #0
    b9de:	d112      	bne.n	ba06 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d62>
    b9e0:	e055      	b.n	ba8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
    b9e2:	988c      	ldr	r0, [sp, #560]	; 0x230
    b9e4:	07c1      	lsls	r1, r0, #31
    b9e6:	2900      	cmp	r1, #0
    b9e8:	d1e3      	bne.n	b9b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d0e>
    b9ea:	e7de      	b.n	b9aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
    b9ec:	f60d 00dc 	addw	r0, sp, #2268	; 0x8dc
    b9f0:	f60d 01e4 	addw	r1, sp, #2276	; 0x8e4
    b9f4:	f007 f8b0 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    b9f8:	908b      	str	r0, [sp, #556]	; 0x22c
    b9fa:	e7ff      	b.n	b9fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d58>
    b9fc:	988b      	ldr	r0, [sp, #556]	; 0x22c
    b9fe:	07c1      	lsls	r1, r0, #31
    ba00:	2900      	cmp	r1, #0
    ba02:	d1ce      	bne.n	b9a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1cfe>
    ba04:	e7d1      	b.n	b9aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d06>
                trace!("[{:04x}] SNE Vx, Vy", self.pc);
    ba06:	f24e 6010 	movw	r0, #58896	; 0xe610
    ba0a:	f2c0 0001 	movt	r0, #1
    ba0e:	6801      	ldr	r1, [r0, #0]
    ba10:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba14:	f100 0212 	add.w	r2, r0, #18
    ba18:	f8cd 2908 	str.w	r2, [sp, #2312]	; 0x908
    ba1c:	f8dd 2908 	ldr.w	r2, [sp, #2312]	; 0x908
    ba20:	f8cd 2d24 	str.w	r2, [sp, #3364]	; 0xd24
    ba24:	f248 23bf 	movw	r3, #33471	; 0x82bf
    ba28:	f2c0 0301 	movt	r3, #1
    ba2c:	4610      	mov	r0, r2
    ba2e:	918a      	str	r1, [sp, #552]	; 0x228
    ba30:	4619      	mov	r1, r3
    ba32:	f006 f9af 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ba36:	9089      	str	r0, [sp, #548]	; 0x224
    ba38:	9188      	str	r1, [sp, #544]	; 0x220
    ba3a:	e7ff      	b.n	ba3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1d98>
    ba3c:	9889      	ldr	r0, [sp, #548]	; 0x224
    ba3e:	f8cd 0900 	str.w	r0, [sp, #2304]	; 0x900
    ba42:	9988      	ldr	r1, [sp, #544]	; 0x220
    ba44:	f8cd 1904 	str.w	r1, [sp, #2308]	; 0x904
    ba48:	f64d 7278 	movw	r2, #57208	; 0xdf78
    ba4c:	f2c0 0201 	movt	r2, #1
    ba50:	6812      	ldr	r2, [r2, #0]
    ba52:	466b      	mov	r3, sp
    ba54:	f04f 0c01 	mov.w	ip, #1
    ba58:	f8c3 c008 	str.w	ip, [r3, #8]
    ba5c:	605a      	str	r2, [r3, #4]
    ba5e:	f8c3 c000 	str.w	ip, [r3]
    ba62:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ba66:	2202      	movs	r2, #2
    ba68:	f50d 6310 	add.w	r3, sp, #2304	; 0x900
    ba6c:	998a      	ldr	r1, [sp, #552]	; 0x228
    ba6e:	f002 fa3c 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ba72:	e7ff      	b.n	ba74 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dd0>
    ba74:	f8dd 18dc 	ldr.w	r1, [sp, #2268]	; 0x8dc
    ba78:	f24e 6030 	movw	r0, #58928	; 0xe630
    ba7c:	f2c0 0001 	movt	r0, #1
    ba80:	6802      	ldr	r2, [r0, #0]
    ba82:	f60d 00e8 	addw	r0, sp, #2280	; 0x8e8
    ba86:	f003 f9fc 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ba8a:	e7ff      	b.n	ba8c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1de8>
    ba8c:	e7ff      	b.n	ba8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1dea>
                if self.v[x] != self.v[y] {
    ba8e:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ba92:	280f      	cmp	r0, #15
    ba94:	f201 854f 	bhi.w	d536 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3892>
    ba98:	e7ff      	b.n	ba9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1df6>
    ba9a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ba9e:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    baa2:	1842      	adds	r2, r0, r1
    baa4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    baa8:	f8dd 3460 	ldr.w	r3, [sp, #1120]	; 0x460
    baac:	2b0f      	cmp	r3, #15
    baae:	9287      	str	r2, [sp, #540]	; 0x21c
    bab0:	f201 854b 	bhi.w	d54a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x38a6>
    bab4:	e7ff      	b.n	bab6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e12>
    bab6:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    baba:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    babe:	1842      	adds	r2, r0, r1
    bac0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bac4:	9b87      	ldr	r3, [sp, #540]	; 0x21c
    bac6:	fa5f fc83 	uxtb.w	ip, r3
    baca:	4594      	cmp	ip, r2
    bacc:	d006      	beq.n	badc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
    bace:	e7ff      	b.n	bad0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e2c>
                    self.next();
    bad0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bad4:	f001 fece 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    bad8:	e7ff      	b.n	bada <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e36>
                if self.v[x] != self.v[y] {
    bada:	e7ff      	b.n	badc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e38>
        match (
    badc:	f001 bb98 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bae0:	2005      	movs	r0, #5
    bae2:	f8cd 090c 	str.w	r0, [sp, #2316]	; 0x90c
    bae6:	f64d 7030 	movw	r0, #57136	; 0xdf30
    baea:	f2c0 0001 	movt	r0, #1
    baee:	6801      	ldr	r1, [r0, #0]
    baf0:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    baf4:	f007 f830 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    baf8:	9086      	str	r0, [sp, #536]	; 0x218
    bafa:	e01f      	b.n	bb3c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e98>
    bafc:	2001      	movs	r0, #1
    bafe:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    bb02:	e015      	b.n	bb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    bb04:	2000      	movs	r0, #0
    bb06:	f88d 0913 	strb.w	r0, [sp, #2323]	; 0x913
    bb0a:	e011      	b.n	bb30 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e8c>
    bb0c:	2000      	movs	r0, #0
    bb0e:	f88d 0e4b 	strb.w	r0, [sp, #3659]	; 0xe4b
    bb12:	f89d 1e4b 	ldrb.w	r1, [sp, #3659]	; 0xe4b
    bb16:	f643 2050 	movw	r0, #14928	; 0x3a50
    bb1a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bb1e:	f007 f827 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bb22:	f8cd 0e4c 	str.w	r0, [sp, #3660]	; 0xe4c
    bb26:	f8dd 0e4c 	ldr.w	r0, [sp, #3660]	; 0xe4c
    bb2a:	f8cd 0914 	str.w	r0, [sp, #2324]	; 0x914
    bb2e:	e00a      	b.n	bb46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ea2>
    bb30:	f89d 0913 	ldrb.w	r0, [sp, #2323]	; 0x913
    bb34:	07c0      	lsls	r0, r0, #31
    bb36:	2800      	cmp	r0, #0
    bb38:	d112      	bne.n	bb60 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ebc>
    bb3a:	e055      	b.n	bbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
    bb3c:	9886      	ldr	r0, [sp, #536]	; 0x218
    bb3e:	07c1      	lsls	r1, r0, #31
    bb40:	2900      	cmp	r1, #0
    bb42:	d1e3      	bne.n	bb0c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e68>
    bb44:	e7de      	b.n	bb04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
    bb46:	f60d 100c 	addw	r0, sp, #2316	; 0x90c
    bb4a:	f60d 1114 	addw	r1, sp, #2324	; 0x914
    bb4e:	f007 f803 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bb52:	9085      	str	r0, [sp, #532]	; 0x214
    bb54:	e7ff      	b.n	bb56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1eb2>
    bb56:	9885      	ldr	r0, [sp, #532]	; 0x214
    bb58:	07c1      	lsls	r1, r0, #31
    bb5a:	2900      	cmp	r1, #0
    bb5c:	d1ce      	bne.n	bafc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e58>
    bb5e:	e7d1      	b.n	bb04 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1e60>
                trace!("[{:04x}] LD I, nnn", self.pc);
    bb60:	f24e 50d0 	movw	r0, #58832	; 0xe5d0
    bb64:	f2c0 0001 	movt	r0, #1
    bb68:	6801      	ldr	r1, [r0, #0]
    bb6a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bb6e:	f100 0212 	add.w	r2, r0, #18
    bb72:	f8cd 2938 	str.w	r2, [sp, #2360]	; 0x938
    bb76:	f8dd 2938 	ldr.w	r2, [sp, #2360]	; 0x938
    bb7a:	f8cd 2d20 	str.w	r2, [sp, #3360]	; 0xd20
    bb7e:	f248 23bf 	movw	r3, #33471	; 0x82bf
    bb82:	f2c0 0301 	movt	r3, #1
    bb86:	4610      	mov	r0, r2
    bb88:	9184      	str	r1, [sp, #528]	; 0x210
    bb8a:	4619      	mov	r1, r3
    bb8c:	f006 f902 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bb90:	9083      	str	r0, [sp, #524]	; 0x20c
    bb92:	9182      	str	r1, [sp, #520]	; 0x208
    bb94:	e7ff      	b.n	bb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1ef2>
    bb96:	9883      	ldr	r0, [sp, #524]	; 0x20c
    bb98:	f8cd 0930 	str.w	r0, [sp, #2352]	; 0x930
    bb9c:	9982      	ldr	r1, [sp, #520]	; 0x208
    bb9e:	f8cd 1934 	str.w	r1, [sp, #2356]	; 0x934
    bba2:	f64d 7278 	movw	r2, #57208	; 0xdf78
    bba6:	f2c0 0201 	movt	r2, #1
    bbaa:	6812      	ldr	r2, [r2, #0]
    bbac:	466b      	mov	r3, sp
    bbae:	f04f 0c01 	mov.w	ip, #1
    bbb2:	f8c3 c008 	str.w	ip, [r3, #8]
    bbb6:	605a      	str	r2, [r3, #4]
    bbb8:	f8c3 c000 	str.w	ip, [r3]
    bbbc:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bbc0:	2202      	movs	r2, #2
    bbc2:	f50d 6313 	add.w	r3, sp, #2352	; 0x930
    bbc6:	9984      	ldr	r1, [sp, #528]	; 0x210
    bbc8:	f002 f98f 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bbcc:	e7ff      	b.n	bbce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f2a>
    bbce:	f8dd 190c 	ldr.w	r1, [sp, #2316]	; 0x90c
    bbd2:	f24e 50f0 	movw	r0, #58864	; 0xe5f0
    bbd6:	f2c0 0001 	movt	r0, #1
    bbda:	6802      	ldr	r2, [r0, #0]
    bbdc:	f60d 1018 	addw	r0, sp, #2328	; 0x918
    bbe0:	f003 f94f 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bbe4:	e7ff      	b.n	bbe6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f42>
    bbe6:	e7ff      	b.n	bbe8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f44>
                self.i = nnn;
    bbe8:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bbec:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    bbf0:	8208      	strh	r0, [r1, #16]
        match (
    bbf2:	f001 bb0d 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bbf6:	2005      	movs	r0, #5
    bbf8:	f8cd 093c 	str.w	r0, [sp, #2364]	; 0x93c
    bbfc:	f64d 7030 	movw	r0, #57136	; 0xdf30
    bc00:	f2c0 0001 	movt	r0, #1
    bc04:	6801      	ldr	r1, [r0, #0]
    bc06:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bc0a:	f006 ffa5 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bc0e:	9081      	str	r0, [sp, #516]	; 0x204
    bc10:	e01f      	b.n	bc52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fae>
    bc12:	2001      	movs	r0, #1
    bc14:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bc18:	e015      	b.n	bc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bc1a:	2000      	movs	r0, #0
    bc1c:	f88d 0943 	strb.w	r0, [sp, #2371]	; 0x943
    bc20:	e011      	b.n	bc46 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fa2>
    bc22:	2000      	movs	r0, #0
    bc24:	f88d 0e53 	strb.w	r0, [sp, #3667]	; 0xe53
    bc28:	f89d 1e53 	ldrb.w	r1, [sp, #3667]	; 0xe53
    bc2c:	f643 2050 	movw	r0, #14928	; 0x3a50
    bc30:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bc34:	f006 ff9c 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bc38:	f8cd 0e54 	str.w	r0, [sp, #3668]	; 0xe54
    bc3c:	f8dd 0e54 	ldr.w	r0, [sp, #3668]	; 0xe54
    bc40:	f8cd 0944 	str.w	r0, [sp, #2372]	; 0x944
    bc44:	e00a      	b.n	bc5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fb8>
    bc46:	f89d 0943 	ldrb.w	r0, [sp, #2371]	; 0x943
    bc4a:	07c0      	lsls	r0, r0, #31
    bc4c:	2800      	cmp	r0, #0
    bc4e:	d112      	bne.n	bc76 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fd2>
    bc50:	e055      	b.n	bcfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
    bc52:	9881      	ldr	r0, [sp, #516]	; 0x204
    bc54:	07c1      	lsls	r1, r0, #31
    bc56:	2900      	cmp	r1, #0
    bc58:	d1e3      	bne.n	bc22 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f7e>
    bc5a:	e7de      	b.n	bc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
    bc5c:	f60d 103c 	addw	r0, sp, #2364	; 0x93c
    bc60:	f60d 1144 	addw	r1, sp, #2372	; 0x944
    bc64:	f006 ff78 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bc68:	9080      	str	r0, [sp, #512]	; 0x200
    bc6a:	e7ff      	b.n	bc6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1fc8>
    bc6c:	9880      	ldr	r0, [sp, #512]	; 0x200
    bc6e:	07c1      	lsls	r1, r0, #31
    bc70:	2900      	cmp	r1, #0
    bc72:	d1ce      	bne.n	bc12 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f6e>
    bc74:	e7d1      	b.n	bc1a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x1f76>
                trace!("[{:04x}] JP V0, nnn", self.pc);
    bc76:	f24e 5090 	movw	r0, #58768	; 0xe590
    bc7a:	f2c0 0001 	movt	r0, #1
    bc7e:	6801      	ldr	r1, [r0, #0]
    bc80:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bc84:	f100 0212 	add.w	r2, r0, #18
    bc88:	f8cd 2968 	str.w	r2, [sp, #2408]	; 0x968
    bc8c:	f8dd 2968 	ldr.w	r2, [sp, #2408]	; 0x968
    bc90:	f8cd 2d1c 	str.w	r2, [sp, #3356]	; 0xd1c
    bc94:	f248 23bf 	movw	r3, #33471	; 0x82bf
    bc98:	f2c0 0301 	movt	r3, #1
    bc9c:	4610      	mov	r0, r2
    bc9e:	917f      	str	r1, [sp, #508]	; 0x1fc
    bca0:	4619      	mov	r1, r3
    bca2:	f006 f877 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bca6:	907e      	str	r0, [sp, #504]	; 0x1f8
    bca8:	917d      	str	r1, [sp, #500]	; 0x1f4
    bcaa:	e7ff      	b.n	bcac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2008>
    bcac:	987e      	ldr	r0, [sp, #504]	; 0x1f8
    bcae:	f8cd 0960 	str.w	r0, [sp, #2400]	; 0x960
    bcb2:	997d      	ldr	r1, [sp, #500]	; 0x1f4
    bcb4:	f8cd 1964 	str.w	r1, [sp, #2404]	; 0x964
    bcb8:	f64d 7278 	movw	r2, #57208	; 0xdf78
    bcbc:	f2c0 0201 	movt	r2, #1
    bcc0:	6812      	ldr	r2, [r2, #0]
    bcc2:	466b      	mov	r3, sp
    bcc4:	f04f 0c01 	mov.w	ip, #1
    bcc8:	f8c3 c008 	str.w	ip, [r3, #8]
    bccc:	605a      	str	r2, [r3, #4]
    bcce:	f8c3 c000 	str.w	ip, [r3]
    bcd2:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bcd6:	2202      	movs	r2, #2
    bcd8:	f50d 6316 	add.w	r3, sp, #2400	; 0x960
    bcdc:	997f      	ldr	r1, [sp, #508]	; 0x1fc
    bcde:	f002 f904 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bce2:	e7ff      	b.n	bce4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2040>
    bce4:	f8dd 193c 	ldr.w	r1, [sp, #2364]	; 0x93c
    bce8:	f24e 50b0 	movw	r0, #58800	; 0xe5b0
    bcec:	f2c0 0001 	movt	r0, #1
    bcf0:	6802      	ldr	r2, [r0, #0]
    bcf2:	f60d 1048 	addw	r0, sp, #2376	; 0x948
    bcf6:	f003 f8c4 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bcfa:	e7ff      	b.n	bcfc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2058>
    bcfc:	e7ff      	b.n	bcfe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x205a>
                self.jump(nnn.wrapping_add(self.v[0].into()).wrapping_sub(2));
    bcfe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd02:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
    bd06:	f001 ff5c 	bl	dbc2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    bd0a:	907c      	str	r0, [sp, #496]	; 0x1f0
    bd0c:	e7ff      	b.n	bd0e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x206a>
    bd0e:	f8dd 0474 	ldr.w	r0, [sp, #1140]	; 0x474
    bd12:	997c      	ldr	r1, [sp, #496]	; 0x1f0
    bd14:	f007 f808 	bl	12d28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    bd18:	907b      	str	r0, [sp, #492]	; 0x1ec
    bd1a:	e7ff      	b.n	bd1c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2078>
    bd1c:	2102      	movs	r1, #2
    bd1e:	987b      	ldr	r0, [sp, #492]	; 0x1ec
    bd20:	f007 f813 	bl	12d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>
    bd24:	907a      	str	r0, [sp, #488]	; 0x1e8
    bd26:	e7ff      	b.n	bd28 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2084>
    bd28:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bd2c:	997a      	ldr	r1, [sp, #488]	; 0x1e8
    bd2e:	f001 fd5e 	bl	d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    bd32:	e7ff      	b.n	bd34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2090>
        match (
    bd34:	f001 ba6c 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    bd38:	2005      	movs	r0, #5
    bd3a:	f8cd 096c 	str.w	r0, [sp, #2412]	; 0x96c
    bd3e:	f64d 7030 	movw	r0, #57136	; 0xdf30
    bd42:	f2c0 0001 	movt	r0, #1
    bd46:	6801      	ldr	r1, [r0, #0]
    bd48:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bd4c:	f006 ff04 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bd50:	9079      	str	r0, [sp, #484]	; 0x1e4
    bd52:	e01f      	b.n	bd94 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20f0>
    bd54:	2001      	movs	r0, #1
    bd56:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bd5a:	e015      	b.n	bd88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bd5c:	2000      	movs	r0, #0
    bd5e:	f88d 0973 	strb.w	r0, [sp, #2419]	; 0x973
    bd62:	e011      	b.n	bd88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20e4>
    bd64:	2000      	movs	r0, #0
    bd66:	f88d 0e5b 	strb.w	r0, [sp, #3675]	; 0xe5b
    bd6a:	f89d 1e5b 	ldrb.w	r1, [sp, #3675]	; 0xe5b
    bd6e:	f643 2050 	movw	r0, #14928	; 0x3a50
    bd72:	f2c2 0000 	movt	r0, #8192	; 0x2000
    bd76:	f006 fefb 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    bd7a:	f8cd 0e5c 	str.w	r0, [sp, #3676]	; 0xe5c
    bd7e:	f8dd 0e5c 	ldr.w	r0, [sp, #3676]	; 0xe5c
    bd82:	f8cd 0974 	str.w	r0, [sp, #2420]	; 0x974
    bd86:	e00a      	b.n	bd9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20fa>
    bd88:	f89d 0973 	ldrb.w	r0, [sp, #2419]	; 0x973
    bd8c:	07c0      	lsls	r0, r0, #31
    bd8e:	2800      	cmp	r0, #0
    bd90:	d112      	bne.n	bdb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2114>
    bd92:	e055      	b.n	be40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
    bd94:	9879      	ldr	r0, [sp, #484]	; 0x1e4
    bd96:	07c1      	lsls	r1, r0, #31
    bd98:	2900      	cmp	r1, #0
    bd9a:	d1e3      	bne.n	bd64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20c0>
    bd9c:	e7de      	b.n	bd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
    bd9e:	f60d 106c 	addw	r0, sp, #2412	; 0x96c
    bda2:	f60d 1174 	addw	r1, sp, #2420	; 0x974
    bda6:	f006 fed7 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bdaa:	9078      	str	r0, [sp, #480]	; 0x1e0
    bdac:	e7ff      	b.n	bdae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x210a>
    bdae:	9878      	ldr	r0, [sp, #480]	; 0x1e0
    bdb0:	07c1      	lsls	r1, r0, #31
    bdb2:	2900      	cmp	r1, #0
    bdb4:	d1ce      	bne.n	bd54 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b0>
    bdb6:	e7d1      	b.n	bd5c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x20b8>
                trace!("[{:04x}] RND Vx, kk", self.pc);
    bdb8:	f24e 5040 	movw	r0, #58688	; 0xe540
    bdbc:	f2c0 0001 	movt	r0, #1
    bdc0:	6801      	ldr	r1, [r0, #0]
    bdc2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bdc6:	f100 0212 	add.w	r2, r0, #18
    bdca:	f8cd 2998 	str.w	r2, [sp, #2456]	; 0x998
    bdce:	f8dd 2998 	ldr.w	r2, [sp, #2456]	; 0x998
    bdd2:	f8cd 2d18 	str.w	r2, [sp, #3352]	; 0xd18
    bdd6:	f248 23bf 	movw	r3, #33471	; 0x82bf
    bdda:	f2c0 0301 	movt	r3, #1
    bdde:	4610      	mov	r0, r2
    bde0:	9177      	str	r1, [sp, #476]	; 0x1dc
    bde2:	4619      	mov	r1, r3
    bde4:	f005 ffd6 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bde8:	9076      	str	r0, [sp, #472]	; 0x1d8
    bdea:	9175      	str	r1, [sp, #468]	; 0x1d4
    bdec:	e7ff      	b.n	bdee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x214a>
    bdee:	9876      	ldr	r0, [sp, #472]	; 0x1d8
    bdf0:	f8cd 0990 	str.w	r0, [sp, #2448]	; 0x990
    bdf4:	9975      	ldr	r1, [sp, #468]	; 0x1d4
    bdf6:	f8cd 1994 	str.w	r1, [sp, #2452]	; 0x994
    bdfa:	f64d 7278 	movw	r2, #57208	; 0xdf78
    bdfe:	f2c0 0201 	movt	r2, #1
    be02:	6812      	ldr	r2, [r2, #0]
    be04:	466b      	mov	r3, sp
    be06:	f04f 0c01 	mov.w	ip, #1
    be0a:	f8c3 c008 	str.w	ip, [r3, #8]
    be0e:	605a      	str	r2, [r3, #4]
    be10:	f8c3 c000 	str.w	ip, [r3]
    be14:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    be18:	2202      	movs	r2, #2
    be1a:	f50d 6319 	add.w	r3, sp, #2448	; 0x990
    be1e:	9977      	ldr	r1, [sp, #476]	; 0x1dc
    be20:	f002 f863 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    be24:	e7ff      	b.n	be26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2182>
    be26:	f8dd 196c 	ldr.w	r1, [sp, #2412]	; 0x96c
    be2a:	f24e 5060 	movw	r0, #58720	; 0xe560
    be2e:	f2c0 0001 	movt	r0, #1
    be32:	6802      	ldr	r2, [r0, #0]
    be34:	f60d 1078 	addw	r0, sp, #2424	; 0x978
    be38:	f003 f823 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    be3c:	e7ff      	b.n	be3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219a>
    be3e:	e7ff      	b.n	be40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x219c>
                self.v[x] = self.hw.rand() & kk;
    be40:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be44:	f7fd fc04 	bl	9650 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4rand17h6cf7f1058fcc9245E>
    be48:	9074      	str	r0, [sp, #464]	; 0x1d0
    be4a:	e7ff      	b.n	be4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21a8>
    be4c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    be50:	280f      	cmp	r0, #15
    be52:	f201 8366 	bhi.w	d522 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x387e>
    be56:	e7ff      	b.n	be58 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21b4>
    be58:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    be5c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    be60:	1842      	adds	r2, r0, r1
    be62:	9b74      	ldr	r3, [sp, #464]	; 0x1d0
    be64:	f8dd c45c 	ldr.w	ip, [sp, #1116]	; 0x45c
    be68:	ea03 0e0c 	and.w	lr, r3, ip
    be6c:	f882 e034 	strb.w	lr, [r2, #52]	; 0x34
        match (
    be70:	f001 b9ce 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    be74:	2005      	movs	r0, #5
    be76:	f8cd 099c 	str.w	r0, [sp, #2460]	; 0x99c
    be7a:	f64d 7030 	movw	r0, #57136	; 0xdf30
    be7e:	f2c0 0001 	movt	r0, #1
    be82:	6801      	ldr	r1, [r0, #0]
    be84:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    be88:	f006 fe66 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    be8c:	9073      	str	r0, [sp, #460]	; 0x1cc
    be8e:	e01f      	b.n	bed0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x222c>
    be90:	2001      	movs	r0, #1
    be92:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    be96:	e015      	b.n	bec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    be98:	2000      	movs	r0, #0
    be9a:	f88d 09a3 	strb.w	r0, [sp, #2467]	; 0x9a3
    be9e:	e011      	b.n	bec4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2220>
    bea0:	2000      	movs	r0, #0
    bea2:	f88d 0e63 	strb.w	r0, [sp, #3683]	; 0xe63
    bea6:	f89d 1e63 	ldrb.w	r1, [sp, #3683]	; 0xe63
    beaa:	f643 2050 	movw	r0, #14928	; 0x3a50
    beae:	f2c2 0000 	movt	r0, #8192	; 0x2000
    beb2:	f006 fe5d 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    beb6:	f8cd 0e64 	str.w	r0, [sp, #3684]	; 0xe64
    beba:	f8dd 0e64 	ldr.w	r0, [sp, #3684]	; 0xe64
    bebe:	f8cd 09a4 	str.w	r0, [sp, #2468]	; 0x9a4
    bec2:	e00a      	b.n	beda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2236>
    bec4:	f89d 09a3 	ldrb.w	r0, [sp, #2467]	; 0x9a3
    bec8:	07c0      	lsls	r0, r0, #31
    beca:	2800      	cmp	r0, #0
    becc:	d112      	bne.n	bef4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2250>
    bece:	e055      	b.n	bf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
    bed0:	9873      	ldr	r0, [sp, #460]	; 0x1cc
    bed2:	07c1      	lsls	r1, r0, #31
    bed4:	2900      	cmp	r1, #0
    bed6:	d1e3      	bne.n	bea0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21fc>
    bed8:	e7de      	b.n	be98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
    beda:	f60d 109c 	addw	r0, sp, #2460	; 0x99c
    bede:	f60d 11a4 	addw	r1, sp, #2468	; 0x9a4
    bee2:	f006 fe39 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    bee6:	9072      	str	r0, [sp, #456]	; 0x1c8
    bee8:	e7ff      	b.n	beea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2246>
    beea:	9872      	ldr	r0, [sp, #456]	; 0x1c8
    beec:	07c1      	lsls	r1, r0, #31
    beee:	2900      	cmp	r1, #0
    bef0:	d1ce      	bne.n	be90 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21ec>
    bef2:	e7d1      	b.n	be98 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x21f4>
                trace!("[{:04x}] DRW Vx, Vy, n", self.pc);
    bef4:	f24e 30e4 	movw	r0, #58340	; 0xe3e4
    bef8:	f2c0 0001 	movt	r0, #1
    befc:	6801      	ldr	r1, [r0, #0]
    befe:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf02:	f100 0212 	add.w	r2, r0, #18
    bf06:	f8cd 29c8 	str.w	r2, [sp, #2504]	; 0x9c8
    bf0a:	f8dd 29c8 	ldr.w	r2, [sp, #2504]	; 0x9c8
    bf0e:	f8cd 2cdc 	str.w	r2, [sp, #3292]	; 0xcdc
    bf12:	f248 23bf 	movw	r3, #33471	; 0x82bf
    bf16:	f2c0 0301 	movt	r3, #1
    bf1a:	4610      	mov	r0, r2
    bf1c:	9171      	str	r1, [sp, #452]	; 0x1c4
    bf1e:	4619      	mov	r1, r3
    bf20:	f005 ff38 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    bf24:	9070      	str	r0, [sp, #448]	; 0x1c0
    bf26:	916f      	str	r1, [sp, #444]	; 0x1bc
    bf28:	e7ff      	b.n	bf2a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2286>
    bf2a:	9870      	ldr	r0, [sp, #448]	; 0x1c0
    bf2c:	f8cd 09c0 	str.w	r0, [sp, #2496]	; 0x9c0
    bf30:	996f      	ldr	r1, [sp, #444]	; 0x1bc
    bf32:	f8cd 19c4 	str.w	r1, [sp, #2500]	; 0x9c4
    bf36:	f64d 7278 	movw	r2, #57208	; 0xdf78
    bf3a:	f2c0 0201 	movt	r2, #1
    bf3e:	6812      	ldr	r2, [r2, #0]
    bf40:	466b      	mov	r3, sp
    bf42:	f04f 0c01 	mov.w	ip, #1
    bf46:	f8c3 c008 	str.w	ip, [r3, #8]
    bf4a:	605a      	str	r2, [r3, #4]
    bf4c:	f8c3 c000 	str.w	ip, [r3]
    bf50:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    bf54:	2202      	movs	r2, #2
    bf56:	f50d 631c 	add.w	r3, sp, #2496	; 0x9c0
    bf5a:	9971      	ldr	r1, [sp, #452]	; 0x1c4
    bf5c:	f001 ffc5 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    bf60:	e7ff      	b.n	bf62 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22be>
    bf62:	f8dd 199c 	ldr.w	r1, [sp, #2460]	; 0x99c
    bf66:	f24e 4004 	movw	r0, #58372	; 0xe404
    bf6a:	f2c0 0001 	movt	r0, #1
    bf6e:	6802      	ldr	r2, [r0, #0]
    bf70:	f60d 10a8 	addw	r0, sp, #2472	; 0x9a8
    bf74:	f002 ff85 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    bf78:	e7ff      	b.n	bf7a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d6>
    bf7a:	e7ff      	b.n	bf7c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22d8>
                let basex = self.v[x] as usize;
    bf7c:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    bf80:	280f      	cmp	r0, #15
    bf82:	f201 825c 	bhi.w	d43e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x379a>
    bf86:	e7ff      	b.n	bf88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x22e4>
    bf88:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bf8c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    bf90:	1842      	adds	r2, r0, r1
    bf92:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bf96:	4613      	mov	r3, r2
    bf98:	f8cd 2ce0 	str.w	r2, [sp, #3296]	; 0xce0
                let basey = self.v[y] as usize;
    bf9c:	f8dd 2460 	ldr.w	r2, [sp, #1120]	; 0x460
    bfa0:	2a0f      	cmp	r2, #15
    bfa2:	936e      	str	r3, [sp, #440]	; 0x1b8
    bfa4:	f201 8255 	bhi.w	d452 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ae>
    bfa8:	e7ff      	b.n	bfaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2306>
    bfaa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    bfae:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    bfb2:	1842      	adds	r2, r0, r1
    bfb4:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    bfb8:	4613      	mov	r3, r2
    bfba:	f8cd 2ce4 	str.w	r2, [sp, #3300]	; 0xce4
                let (w, h) = self.hw.vram_size();
    bfbe:	936d      	str	r3, [sp, #436]	; 0x1b4
    bfc0:	f7fd fd0c 	bl	99dc <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$9vram_size17hd317927185b0114cE>
    bfc4:	906c      	str	r0, [sp, #432]	; 0x1b0
    bfc6:	916b      	str	r1, [sp, #428]	; 0x1ac
    bfc8:	e7ff      	b.n	bfca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2326>
    bfca:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    bfcc:	f8cd 0ce8 	str.w	r0, [sp, #3304]	; 0xce8
    bfd0:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    bfd2:	f8cd 1cec 	str.w	r1, [sp, #3308]	; 0xcec
    bfd6:	2200      	movs	r2, #0
                self.v[0xf] = 0;
    bfd8:	f8dd 3490 	ldr.w	r3, [sp, #1168]	; 0x490
    bfdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
                for y in 0..n {
    bfe0:	f8cd 29cc 	str.w	r2, [sp, #2508]	; 0x9cc
    bfe4:	f8dd 2470 	ldr.w	r2, [sp, #1136]	; 0x470
    bfe8:	f8cd 29d0 	str.w	r2, [sp, #2512]	; 0x9d0
    bfec:	f8dd 09cc 	ldr.w	r0, [sp, #2508]	; 0x9cc
    bff0:	f8dd 19d0 	ldr.w	r1, [sp, #2512]	; 0x9d0
    bff4:	f002 fcd7 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    bff8:	906a      	str	r0, [sp, #424]	; 0x1a8
    bffa:	9169      	str	r1, [sp, #420]	; 0x1a4
    bffc:	e7ff      	b.n	bffe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x235a>
    bffe:	986a      	ldr	r0, [sp, #424]	; 0x1a8
    c000:	f8cd 09d4 	str.w	r0, [sp, #2516]	; 0x9d4
    c004:	9969      	ldr	r1, [sp, #420]	; 0x1a4
    c006:	f8cd 19d8 	str.w	r1, [sp, #2520]	; 0x9d8
    c00a:	e7ff      	b.n	c00c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
    c00c:	f60d 10d4 	addw	r0, sp, #2516	; 0x9d4
    c010:	f002 fc3e 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c014:	f8cd 19e0 	str.w	r1, [sp, #2528]	; 0x9e0
    c018:	f8cd 09dc 	str.w	r0, [sp, #2524]	; 0x9dc
    c01c:	e7ff      	b.n	c01e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x237a>
    c01e:	f8dd 09dc 	ldr.w	r0, [sp, #2524]	; 0x9dc
    c022:	2800      	cmp	r0, #0
    c024:	d001      	beq.n	c02a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2386>
    c026:	e7ff      	b.n	c028 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2384>
    c028:	e002      	b.n	c030 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x238c>
        match (
    c02a:	f001 b8f1 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for y in 0..n {
    c02e:	defe      	udf	#254	; 0xfe
    c030:	f8dd 09e0 	ldr.w	r0, [sp, #2528]	; 0x9e0
    c034:	f8cd 0cf0 	str.w	r0, [sp, #3312]	; 0xcf0
    c038:	f8cd 0cf4 	str.w	r0, [sp, #3316]	; 0xcf4
    c03c:	f8cd 0cf8 	str.w	r0, [sp, #3320]	; 0xcf8
                    let b = self.mem[self.i as usize + y];
    c040:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c044:	8a0a      	ldrh	r2, [r1, #16]
    c046:	1813      	adds	r3, r2, r0
    c048:	469c      	mov	ip, r3
    c04a:	4293      	cmp	r3, r2
    c04c:	9068      	str	r0, [sp, #416]	; 0x1a0
    c04e:	f8cd c19c 	str.w	ip, [sp, #412]	; 0x19c
    c052:	f0c1 8208 	bcc.w	d466 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37c2>
    c056:	e7ff      	b.n	c058 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23b4>
    c058:	2000      	movs	r0, #0
    c05a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    c05c:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    c060:	f041 820d 	bne.w	d47e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37da>
    c064:	e7ff      	b.n	c066 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23c2>
    c066:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c06a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    c06c:	1842      	adds	r2, r0, r1
    c06e:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    c072:	4613      	mov	r3, r2
    c074:	f88d 2cff 	strb.w	r2, [sp, #3327]	; 0xcff
                    let vramy = (y + basey) % h;
    c078:	9a68      	ldr	r2, [sp, #416]	; 0x1a0
    c07a:	f8dd c1b4 	ldr.w	ip, [sp, #436]	; 0x1b4
    c07e:	eb02 0e0c 	add.w	lr, r2, ip
    c082:	4674      	mov	r4, lr
    c084:	4596      	cmp	lr, r2
    c086:	9366      	str	r3, [sp, #408]	; 0x198
    c088:	9465      	str	r4, [sp, #404]	; 0x194
    c08a:	f0c1 8202 	bcc.w	d492 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x37ee>
    c08e:	e7ff      	b.n	c090 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23ec>
    c090:	986b      	ldr	r0, [sp, #428]	; 0x1ac
    c092:	2800      	cmp	r0, #0
    c094:	f001 8209 	beq.w	d4aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3806>
    c098:	e7ff      	b.n	c09a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x23f6>
    c09a:	9865      	ldr	r0, [sp, #404]	; 0x194
    c09c:	996b      	ldr	r1, [sp, #428]	; 0x1ac
    c09e:	fbb0 f2f1 	udiv	r2, r0, r1
    c0a2:	fb02 0211 	mls	r2, r2, r1, r0
    c0a6:	4613      	mov	r3, r2
    c0a8:	f8cd 2d00 	str.w	r2, [sp, #3328]	; 0xd00
    c0ac:	2200      	movs	r2, #0
                    for x in 0..8 {
    c0ae:	f8cd 29e4 	str.w	r2, [sp, #2532]	; 0x9e4
    c0b2:	2208      	movs	r2, #8
    c0b4:	f8cd 29e8 	str.w	r2, [sp, #2536]	; 0x9e8
    c0b8:	f8dd 09e4 	ldr.w	r0, [sp, #2532]	; 0x9e4
    c0bc:	f8dd 19e8 	ldr.w	r1, [sp, #2536]	; 0x9e8
    c0c0:	9364      	str	r3, [sp, #400]	; 0x190
    c0c2:	f002 fc70 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    c0c6:	9063      	str	r0, [sp, #396]	; 0x18c
    c0c8:	9162      	str	r1, [sp, #392]	; 0x188
    c0ca:	e7ff      	b.n	c0cc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2428>
    c0cc:	9863      	ldr	r0, [sp, #396]	; 0x18c
    c0ce:	f8cd 09ec 	str.w	r0, [sp, #2540]	; 0x9ec
    c0d2:	9962      	ldr	r1, [sp, #392]	; 0x188
    c0d4:	f8cd 19f0 	str.w	r1, [sp, #2544]	; 0x9f0
    c0d8:	e7ff      	b.n	c0da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c0da:	f60d 10ec 	addw	r0, sp, #2540	; 0x9ec
    c0de:	f002 fbd7 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    c0e2:	f8cd 19f8 	str.w	r1, [sp, #2552]	; 0x9f8
    c0e6:	f8cd 09f4 	str.w	r0, [sp, #2548]	; 0x9f4
    c0ea:	e7ff      	b.n	c0ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2448>
    c0ec:	f8dd 09f4 	ldr.w	r0, [sp, #2548]	; 0x9f4
    c0f0:	2800      	cmp	r0, #0
    c0f2:	d001      	beq.n	c0f8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2454>
    c0f4:	e7ff      	b.n	c0f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2452>
    c0f6:	e001      	b.n	c0fc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2458>
                for y in 0..n {
    c0f8:	e788      	b.n	c00c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2368>
                    for x in 0..8 {
    c0fa:	defe      	udf	#254	; 0xfe
    c0fc:	f8dd 09f8 	ldr.w	r0, [sp, #2552]	; 0x9f8
    c100:	f8cd 0d04 	str.w	r0, [sp, #3332]	; 0xd04
    c104:	f8cd 0d08 	str.w	r0, [sp, #3336]	; 0xd08
    c108:	f8cd 0d0c 	str.w	r0, [sp, #3340]	; 0xd0c
                        let vramx = (x + basex) % w;
    c10c:	996e      	ldr	r1, [sp, #440]	; 0x1b8
    c10e:	1842      	adds	r2, r0, r1
    c110:	4613      	mov	r3, r2
    c112:	4282      	cmp	r2, r0
    c114:	9061      	str	r0, [sp, #388]	; 0x184
    c116:	9360      	str	r3, [sp, #384]	; 0x180
    c118:	f0c1 81d3 	bcc.w	d4c2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x381e>
    c11c:	e7ff      	b.n	c11e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x247a>
    c11e:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    c120:	2800      	cmp	r0, #0
    c122:	f001 81da 	beq.w	d4da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3836>
    c126:	e7ff      	b.n	c128 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2484>
    c128:	9860      	ldr	r0, [sp, #384]	; 0x180
    c12a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
    c12c:	fbb0 f2f1 	udiv	r2, r0, r1
    c130:	fb02 0211 	mls	r2, r2, r1, r0
    c134:	4613      	mov	r3, r2
    c136:	f8cd 2d10 	str.w	r2, [sp, #3344]	; 0xd10
                        let src = (b & 1 << (7 - x)) > 0;
    c13a:	9a61      	ldr	r2, [sp, #388]	; 0x184
    c13c:	f1c2 0c07 	rsb	ip, r2, #7
    c140:	f04f 0e07 	mov.w	lr, #7
    c144:	4596      	cmp	lr, r2
    c146:	935f      	str	r3, [sp, #380]	; 0x17c
    c148:	f8cd c178 	str.w	ip, [sp, #376]	; 0x178
    c14c:	f0c1 81d1 	bcc.w	d4f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x384e>
    c150:	e7ff      	b.n	c152 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24ae>
    c152:	985e      	ldr	r0, [sp, #376]	; 0x178
    c154:	f000 0107 	and.w	r1, r0, #7
    c158:	2201      	movs	r2, #1
    c15a:	fa02 f101 	lsl.w	r1, r2, r1
    c15e:	08c2      	lsrs	r2, r0, #3
    c160:	2a00      	cmp	r2, #0
    c162:	915d      	str	r1, [sp, #372]	; 0x174
    c164:	f041 81d1 	bne.w	d50a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3866>
    c168:	e7ff      	b.n	c16a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24c6>
    c16a:	9866      	ldr	r0, [sp, #408]	; 0x198
    c16c:	995d      	ldr	r1, [sp, #372]	; 0x174
    c16e:	ea00 0201 	and.w	r2, r0, r1
    c172:	b2d2      	uxtb	r2, r2
    c174:	2a00      	cmp	r2, #0
    c176:	bf18      	it	ne
    c178:	2201      	movne	r2, #1
    c17a:	4613      	mov	r3, r2
    c17c:	f88d 2d16 	strb.w	r2, [sp, #3350]	; 0xd16
                        let dst = self.hw.vram_get(vramx, vramy);
    c180:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c184:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c186:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c188:	935c      	str	r3, [sp, #368]	; 0x170
    c18a:	f7fd fbda 	bl	9942 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_get17h32246672ea3c1acbE>
    c18e:	4601      	mov	r1, r0
    c190:	f88d 0d17 	strb.w	r0, [sp, #3351]	; 0xd17
    c194:	915b      	str	r1, [sp, #364]	; 0x16c
    c196:	e7ff      	b.n	c198 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24f4>
                        self.v[0xf] |= (src && dst) as u8;
    c198:	985c      	ldr	r0, [sp, #368]	; 0x170
    c19a:	07c1      	lsls	r1, r0, #31
    c19c:	2900      	cmp	r1, #0
    c19e:	d108      	bne.n	c1b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x250e>
    c1a0:	e003      	b.n	c1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c1a2:	2001      	movs	r0, #1
    c1a4:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c1a8:	e008      	b.n	c1bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c1aa:	2000      	movs	r0, #0
    c1ac:	f88d 09ff 	strb.w	r0, [sp, #2559]	; 0x9ff
    c1b0:	e004      	b.n	c1bc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2518>
    c1b2:	985b      	ldr	r0, [sp, #364]	; 0x16c
    c1b4:	07c1      	lsls	r1, r0, #31
    c1b6:	2900      	cmp	r1, #0
    c1b8:	d1f3      	bne.n	c1a2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x24fe>
    c1ba:	e7f6      	b.n	c1aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2506>
    c1bc:	f89d 09ff 	ldrb.w	r0, [sp, #2559]	; 0x9ff
    c1c0:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    c1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
    c1c8:	4310      	orrs	r0, r2
    c1ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
                        self.hw.vram_set(vramx, vramy, src ^ dst);
    c1ce:	985c      	ldr	r0, [sp, #368]	; 0x170
    c1d0:	9a5b      	ldr	r2, [sp, #364]	; 0x16c
    c1d2:	ea80 0302 	eor.w	r3, r0, r2
    c1d6:	f003 0301 	and.w	r3, r3, #1
    c1da:	4608      	mov	r0, r1
    c1dc:	995f      	ldr	r1, [sp, #380]	; 0x17c
    c1de:	9a64      	ldr	r2, [sp, #400]	; 0x190
    c1e0:	f7fd fa43 	bl	966a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$8vram_set17hb1539ba707f19c35E>
    c1e4:	e7ff      	b.n	c1e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2542>
                    for x in 0..8 {
    c1e6:	e778      	b.n	c0da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2436>
    c1e8:	2005      	movs	r0, #5
    c1ea:	f8cd 0a00 	str.w	r0, [sp, #2560]	; 0xa00
    c1ee:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c1f2:	f2c0 0001 	movt	r0, #1
    c1f6:	6801      	ldr	r1, [r0, #0]
    c1f8:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c1fc:	f006 fcac 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c200:	905a      	str	r0, [sp, #360]	; 0x168
    c202:	e01f      	b.n	c244 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25a0>
    c204:	2001      	movs	r0, #1
    c206:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c20a:	e015      	b.n	c238 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c20c:	2000      	movs	r0, #0
    c20e:	f88d 0a07 	strb.w	r0, [sp, #2567]	; 0xa07
    c212:	e011      	b.n	c238 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2594>
    c214:	2000      	movs	r0, #0
    c216:	f88d 0e6b 	strb.w	r0, [sp, #3691]	; 0xe6b
    c21a:	f89d 1e6b 	ldrb.w	r1, [sp, #3691]	; 0xe6b
    c21e:	f643 2050 	movw	r0, #14928	; 0x3a50
    c222:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c226:	f006 fca3 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c22a:	f8cd 0e6c 	str.w	r0, [sp, #3692]	; 0xe6c
    c22e:	f8dd 0e6c 	ldr.w	r0, [sp, #3692]	; 0xe6c
    c232:	f8cd 0a08 	str.w	r0, [sp, #2568]	; 0xa08
    c236:	e00a      	b.n	c24e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25aa>
    c238:	f89d 0a07 	ldrb.w	r0, [sp, #2567]	; 0xa07
    c23c:	07c0      	lsls	r0, r0, #31
    c23e:	2800      	cmp	r0, #0
    c240:	d112      	bne.n	c268 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25c4>
    c242:	e055      	b.n	c2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
    c244:	985a      	ldr	r0, [sp, #360]	; 0x168
    c246:	07c1      	lsls	r1, r0, #31
    c248:	2900      	cmp	r1, #0
    c24a:	d1e3      	bne.n	c214 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2570>
    c24c:	e7de      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
    c24e:	f50d 6020 	add.w	r0, sp, #2560	; 0xa00
    c252:	f60d 2108 	addw	r1, sp, #2568	; 0xa08
    c256:	f006 fc7f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c25a:	9059      	str	r0, [sp, #356]	; 0x164
    c25c:	e7ff      	b.n	c25e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25ba>
    c25e:	9859      	ldr	r0, [sp, #356]	; 0x164
    c260:	07c1      	lsls	r1, r0, #31
    c262:	2900      	cmp	r1, #0
    c264:	d1ce      	bne.n	c204 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2560>
    c266:	e7d1      	b.n	c20c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2568>
                trace!("[{:04x}] SKP Vx", self.pc);
    c268:	f24e 3090 	movw	r0, #58256	; 0xe390
    c26c:	f2c0 0001 	movt	r0, #1
    c270:	6801      	ldr	r1, [r0, #0]
    c272:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c276:	f100 0212 	add.w	r2, r0, #18
    c27a:	f8cd 2a2c 	str.w	r2, [sp, #2604]	; 0xa2c
    c27e:	f8dd 2a2c 	ldr.w	r2, [sp, #2604]	; 0xa2c
    c282:	f8cd 2cd8 	str.w	r2, [sp, #3288]	; 0xcd8
    c286:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c28a:	f2c0 0301 	movt	r3, #1
    c28e:	4610      	mov	r0, r2
    c290:	9158      	str	r1, [sp, #352]	; 0x160
    c292:	4619      	mov	r1, r3
    c294:	f005 fd7e 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c298:	9057      	str	r0, [sp, #348]	; 0x15c
    c29a:	9156      	str	r1, [sp, #344]	; 0x158
    c29c:	e7ff      	b.n	c29e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x25fa>
    c29e:	9857      	ldr	r0, [sp, #348]	; 0x15c
    c2a0:	f8cd 0a24 	str.w	r0, [sp, #2596]	; 0xa24
    c2a4:	9956      	ldr	r1, [sp, #344]	; 0x158
    c2a6:	f8cd 1a28 	str.w	r1, [sp, #2600]	; 0xa28
    c2aa:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c2ae:	f2c0 0201 	movt	r2, #1
    c2b2:	6812      	ldr	r2, [r2, #0]
    c2b4:	466b      	mov	r3, sp
    c2b6:	f04f 0c01 	mov.w	ip, #1
    c2ba:	f8c3 c008 	str.w	ip, [r3, #8]
    c2be:	605a      	str	r2, [r3, #4]
    c2c0:	f8c3 c000 	str.w	ip, [r3]
    c2c4:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c2c8:	2202      	movs	r2, #2
    c2ca:	f60d 2324 	addw	r3, sp, #2596	; 0xa24
    c2ce:	9958      	ldr	r1, [sp, #352]	; 0x160
    c2d0:	f001 fe0b 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c2d4:	e7ff      	b.n	c2d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2632>
    c2d6:	f8dd 1a00 	ldr.w	r1, [sp, #2560]	; 0xa00
    c2da:	f24e 30b0 	movw	r0, #58288	; 0xe3b0
    c2de:	f2c0 0001 	movt	r0, #1
    c2e2:	6802      	ldr	r2, [r0, #0]
    c2e4:	f60d 200c 	addw	r0, sp, #2572	; 0xa0c
    c2e8:	f002 fdcb 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c2ec:	e7ff      	b.n	c2ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264a>
    c2ee:	e7ff      	b.n	c2f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x264c>
                if self.hw.key(self.v[x]) {
    c2f0:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c2f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c2f8:	290f      	cmp	r1, #15
    c2fa:	9055      	str	r0, [sp, #340]	; 0x154
    c2fc:	f201 8095 	bhi.w	d42a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3786>
    c300:	e7ff      	b.n	c302 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x265e>
    c302:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c306:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c30a:	1842      	adds	r2, r0, r1
    c30c:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c310:	9855      	ldr	r0, [sp, #340]	; 0x154
    c312:	f7fd f9a2 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c316:	9054      	str	r0, [sp, #336]	; 0x150
    c318:	e7ff      	b.n	c31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2676>
    c31a:	9854      	ldr	r0, [sp, #336]	; 0x150
    c31c:	07c1      	lsls	r1, r0, #31
    c31e:	2900      	cmp	r1, #0
    c320:	d006      	beq.n	c330 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
    c322:	e7ff      	b.n	c324 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2680>
                    self.next();
    c324:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c328:	f001 faa4 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c32c:	e7ff      	b.n	c32e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268a>
                if self.hw.key(self.v[x]) {
    c32e:	e7ff      	b.n	c330 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x268c>
        match (
    c330:	f000 bf6e 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c334:	2005      	movs	r0, #5
    c336:	f8cd 0a30 	str.w	r0, [sp, #2608]	; 0xa30
    c33a:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c33e:	f2c0 0001 	movt	r0, #1
    c342:	6801      	ldr	r1, [r0, #0]
    c344:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c348:	f006 fc06 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c34c:	9053      	str	r0, [sp, #332]	; 0x14c
    c34e:	e01f      	b.n	c390 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ec>
    c350:	2001      	movs	r0, #1
    c352:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c356:	e015      	b.n	c384 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c358:	2000      	movs	r0, #0
    c35a:	f88d 0a37 	strb.w	r0, [sp, #2615]	; 0xa37
    c35e:	e011      	b.n	c384 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26e0>
    c360:	2000      	movs	r0, #0
    c362:	f88d 0e73 	strb.w	r0, [sp, #3699]	; 0xe73
    c366:	f89d 1e73 	ldrb.w	r1, [sp, #3699]	; 0xe73
    c36a:	f643 2050 	movw	r0, #14928	; 0x3a50
    c36e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c372:	f006 fbfd 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c376:	f8cd 0e74 	str.w	r0, [sp, #3700]	; 0xe74
    c37a:	f8dd 0e74 	ldr.w	r0, [sp, #3700]	; 0xe74
    c37e:	f8cd 0a38 	str.w	r0, [sp, #2616]	; 0xa38
    c382:	e00a      	b.n	c39a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26f6>
    c384:	f89d 0a37 	ldrb.w	r0, [sp, #2615]	; 0xa37
    c388:	07c0      	lsls	r0, r0, #31
    c38a:	2800      	cmp	r0, #0
    c38c:	d112      	bne.n	c3b4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2710>
    c38e:	e055      	b.n	c43c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
    c390:	9853      	ldr	r0, [sp, #332]	; 0x14c
    c392:	07c1      	lsls	r1, r0, #31
    c394:	2900      	cmp	r1, #0
    c396:	d1e3      	bne.n	c360 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26bc>
    c398:	e7de      	b.n	c358 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
    c39a:	f50d 6023 	add.w	r0, sp, #2608	; 0xa30
    c39e:	f60d 2138 	addw	r1, sp, #2616	; 0xa38
    c3a2:	f006 fbd9 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c3a6:	9052      	str	r0, [sp, #328]	; 0x148
    c3a8:	e7ff      	b.n	c3aa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2706>
    c3aa:	9852      	ldr	r0, [sp, #328]	; 0x148
    c3ac:	07c1      	lsls	r1, r0, #31
    c3ae:	2900      	cmp	r1, #0
    c3b0:	d1ce      	bne.n	c350 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26ac>
    c3b2:	e7d1      	b.n	c358 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x26b4>
                trace!("[{:04x}] SKNP Vx", self.pc);
    c3b4:	f24e 304c 	movw	r0, #58188	; 0xe34c
    c3b8:	f2c0 0001 	movt	r0, #1
    c3bc:	6801      	ldr	r1, [r0, #0]
    c3be:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c3c2:	f100 0212 	add.w	r2, r0, #18
    c3c6:	f8cd 2a5c 	str.w	r2, [sp, #2652]	; 0xa5c
    c3ca:	f8dd 2a5c 	ldr.w	r2, [sp, #2652]	; 0xa5c
    c3ce:	f8cd 2cd4 	str.w	r2, [sp, #3284]	; 0xcd4
    c3d2:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c3d6:	f2c0 0301 	movt	r3, #1
    c3da:	4610      	mov	r0, r2
    c3dc:	9151      	str	r1, [sp, #324]	; 0x144
    c3de:	4619      	mov	r1, r3
    c3e0:	f005 fcd8 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c3e4:	9050      	str	r0, [sp, #320]	; 0x140
    c3e6:	914f      	str	r1, [sp, #316]	; 0x13c
    c3e8:	e7ff      	b.n	c3ea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2746>
    c3ea:	9850      	ldr	r0, [sp, #320]	; 0x140
    c3ec:	f8cd 0a54 	str.w	r0, [sp, #2644]	; 0xa54
    c3f0:	994f      	ldr	r1, [sp, #316]	; 0x13c
    c3f2:	f8cd 1a58 	str.w	r1, [sp, #2648]	; 0xa58
    c3f6:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c3fa:	f2c0 0201 	movt	r2, #1
    c3fe:	6812      	ldr	r2, [r2, #0]
    c400:	466b      	mov	r3, sp
    c402:	f04f 0c01 	mov.w	ip, #1
    c406:	f8c3 c008 	str.w	ip, [r3, #8]
    c40a:	605a      	str	r2, [r3, #4]
    c40c:	f8c3 c000 	str.w	ip, [r3]
    c410:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c414:	2202      	movs	r2, #2
    c416:	f60d 2354 	addw	r3, sp, #2644	; 0xa54
    c41a:	9951      	ldr	r1, [sp, #324]	; 0x144
    c41c:	f001 fd65 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c420:	e7ff      	b.n	c422 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x277e>
    c422:	f8dd 1a30 	ldr.w	r1, [sp, #2608]	; 0xa30
    c426:	f24e 306c 	movw	r0, #58220	; 0xe36c
    c42a:	f2c0 0001 	movt	r0, #1
    c42e:	6802      	ldr	r2, [r0, #0]
    c430:	f60d 203c 	addw	r0, sp, #2620	; 0xa3c
    c434:	f002 fd25 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c438:	e7ff      	b.n	c43a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2796>
    c43a:	e7ff      	b.n	c43c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2798>
                if !self.hw.key(self.v[x]) {
    c43c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c440:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c444:	290f      	cmp	r1, #15
    c446:	904e      	str	r0, [sp, #312]	; 0x138
    c448:	f200 87e5 	bhi.w	d416 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3772>
    c44c:	e7ff      	b.n	c44e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27aa>
    c44e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c452:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c456:	1842      	adds	r2, r0, r1
    c458:	f892 1034 	ldrb.w	r1, [r2, #52]	; 0x34
    c45c:	984e      	ldr	r0, [sp, #312]	; 0x138
    c45e:	f7fd f8fc 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    c462:	904d      	str	r0, [sp, #308]	; 0x134
    c464:	e7ff      	b.n	c466 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27c2>
    c466:	984d      	ldr	r0, [sp, #308]	; 0x134
    c468:	07c1      	lsls	r1, r0, #31
    c46a:	2900      	cmp	r1, #0
    c46c:	d106      	bne.n	c47c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
    c46e:	e7ff      	b.n	c470 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27cc>
                    self.next();
    c470:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c474:	f001 f9fe 	bl	d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>
    c478:	e7ff      	b.n	c47a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d6>
                if !self.hw.key(self.v[x]) {
    c47a:	e7ff      	b.n	c47c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27d8>
        match (
    c47c:	f000 bec8 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c480:	2005      	movs	r0, #5
    c482:	f8cd 0a60 	str.w	r0, [sp, #2656]	; 0xa60
    c486:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c48a:	f2c0 0001 	movt	r0, #1
    c48e:	6801      	ldr	r1, [r0, #0]
    c490:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c494:	f006 fb60 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c498:	904c      	str	r0, [sp, #304]	; 0x130
    c49a:	e01f      	b.n	c4dc <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2838>
    c49c:	2001      	movs	r0, #1
    c49e:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c4a2:	e015      	b.n	c4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c4a4:	2000      	movs	r0, #0
    c4a6:	f88d 0a67 	strb.w	r0, [sp, #2663]	; 0xa67
    c4aa:	e011      	b.n	c4d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x282c>
    c4ac:	2000      	movs	r0, #0
    c4ae:	f88d 0e7b 	strb.w	r0, [sp, #3707]	; 0xe7b
    c4b2:	f89d 1e7b 	ldrb.w	r1, [sp, #3707]	; 0xe7b
    c4b6:	f643 2050 	movw	r0, #14928	; 0x3a50
    c4ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c4be:	f006 fb57 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c4c2:	f8cd 0e7c 	str.w	r0, [sp, #3708]	; 0xe7c
    c4c6:	f8dd 0e7c 	ldr.w	r0, [sp, #3708]	; 0xe7c
    c4ca:	f8cd 0a68 	str.w	r0, [sp, #2664]	; 0xa68
    c4ce:	e00a      	b.n	c4e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2842>
    c4d0:	f89d 0a67 	ldrb.w	r0, [sp, #2663]	; 0xa67
    c4d4:	07c0      	lsls	r0, r0, #31
    c4d6:	2800      	cmp	r0, #0
    c4d8:	d112      	bne.n	c500 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x285c>
    c4da:	e055      	b.n	c588 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
    c4dc:	984c      	ldr	r0, [sp, #304]	; 0x130
    c4de:	07c1      	lsls	r1, r0, #31
    c4e0:	2900      	cmp	r1, #0
    c4e2:	d1e3      	bne.n	c4ac <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2808>
    c4e4:	e7de      	b.n	c4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
    c4e6:	f50d 6026 	add.w	r0, sp, #2656	; 0xa60
    c4ea:	f60d 2168 	addw	r1, sp, #2664	; 0xa68
    c4ee:	f006 fb33 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c4f2:	904b      	str	r0, [sp, #300]	; 0x12c
    c4f4:	e7ff      	b.n	c4f6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2852>
    c4f6:	984b      	ldr	r0, [sp, #300]	; 0x12c
    c4f8:	07c1      	lsls	r1, r0, #31
    c4fa:	2900      	cmp	r1, #0
    c4fc:	d1ce      	bne.n	c49c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x27f8>
    c4fe:	e7d1      	b.n	c4a4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2800>
                trace!("[{:04x}] LD Vx, DT", self.pc);
    c500:	f24e 20fc 	movw	r0, #58108	; 0xe2fc
    c504:	f2c0 0001 	movt	r0, #1
    c508:	6801      	ldr	r1, [r0, #0]
    c50a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c50e:	f100 0212 	add.w	r2, r0, #18
    c512:	f8cd 2a8c 	str.w	r2, [sp, #2700]	; 0xa8c
    c516:	f8dd 2a8c 	ldr.w	r2, [sp, #2700]	; 0xa8c
    c51a:	f8cd 2cd0 	str.w	r2, [sp, #3280]	; 0xcd0
    c51e:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c522:	f2c0 0301 	movt	r3, #1
    c526:	4610      	mov	r0, r2
    c528:	914a      	str	r1, [sp, #296]	; 0x128
    c52a:	4619      	mov	r1, r3
    c52c:	f005 fc32 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c530:	9049      	str	r0, [sp, #292]	; 0x124
    c532:	9148      	str	r1, [sp, #288]	; 0x120
    c534:	e7ff      	b.n	c536 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2892>
    c536:	9849      	ldr	r0, [sp, #292]	; 0x124
    c538:	f8cd 0a84 	str.w	r0, [sp, #2692]	; 0xa84
    c53c:	9948      	ldr	r1, [sp, #288]	; 0x120
    c53e:	f8cd 1a88 	str.w	r1, [sp, #2696]	; 0xa88
    c542:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c546:	f2c0 0201 	movt	r2, #1
    c54a:	6812      	ldr	r2, [r2, #0]
    c54c:	466b      	mov	r3, sp
    c54e:	f04f 0c01 	mov.w	ip, #1
    c552:	f8c3 c008 	str.w	ip, [r3, #8]
    c556:	605a      	str	r2, [r3, #4]
    c558:	f8c3 c000 	str.w	ip, [r3]
    c55c:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c560:	2202      	movs	r2, #2
    c562:	f60d 2384 	addw	r3, sp, #2692	; 0xa84
    c566:	994a      	ldr	r1, [sp, #296]	; 0x128
    c568:	f001 fcbf 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c56c:	e7ff      	b.n	c56e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28ca>
    c56e:	f8dd 1a60 	ldr.w	r1, [sp, #2656]	; 0xa60
    c572:	f24e 301c 	movw	r0, #58140	; 0xe31c
    c576:	f2c0 0001 	movt	r0, #1
    c57a:	6802      	ldr	r2, [r0, #0]
    c57c:	f60d 206c 	addw	r0, sp, #2668	; 0xa6c
    c580:	f002 fc7f 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c584:	e7ff      	b.n	c586 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e2>
    c586:	e7ff      	b.n	c588 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28e4>
                self.v[x] = self.dt;
    c588:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c58c:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    c590:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    c594:	2a0f      	cmp	r2, #15
    c596:	9147      	str	r1, [sp, #284]	; 0x11c
    c598:	f200 8733 	bhi.w	d402 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x375e>
    c59c:	e7ff      	b.n	c59e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x28fa>
    c59e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c5a2:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c5a6:	1842      	adds	r2, r0, r1
    c5a8:	9b47      	ldr	r3, [sp, #284]	; 0x11c
    c5aa:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c5ae:	f000 be2f 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c5b2:	2005      	movs	r0, #5
    c5b4:	f8cd 0a90 	str.w	r0, [sp, #2704]	; 0xa90
    c5b8:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c5bc:	f2c0 0001 	movt	r0, #1
    c5c0:	6801      	ldr	r1, [r0, #0]
    c5c2:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c5c6:	f006 fac7 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c5ca:	9046      	str	r0, [sp, #280]	; 0x118
    c5cc:	e01f      	b.n	c60e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x296a>
    c5ce:	2001      	movs	r0, #1
    c5d0:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c5d4:	e015      	b.n	c602 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c5d6:	2000      	movs	r0, #0
    c5d8:	f88d 0a97 	strb.w	r0, [sp, #2711]	; 0xa97
    c5dc:	e011      	b.n	c602 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x295e>
    c5de:	2000      	movs	r0, #0
    c5e0:	f88d 0e83 	strb.w	r0, [sp, #3715]	; 0xe83
    c5e4:	f89d 1e83 	ldrb.w	r1, [sp, #3715]	; 0xe83
    c5e8:	f643 2050 	movw	r0, #14928	; 0x3a50
    c5ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c5f0:	f006 fabe 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c5f4:	f8cd 0e84 	str.w	r0, [sp, #3716]	; 0xe84
    c5f8:	f8dd 0e84 	ldr.w	r0, [sp, #3716]	; 0xe84
    c5fc:	f8cd 0a98 	str.w	r0, [sp, #2712]	; 0xa98
    c600:	e00a      	b.n	c618 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2974>
    c602:	f89d 0a97 	ldrb.w	r0, [sp, #2711]	; 0xa97
    c606:	07c0      	lsls	r0, r0, #31
    c608:	2800      	cmp	r0, #0
    c60a:	d112      	bne.n	c632 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x298e>
    c60c:	e055      	b.n	c6ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
    c60e:	9846      	ldr	r0, [sp, #280]	; 0x118
    c610:	07c1      	lsls	r1, r0, #31
    c612:	2900      	cmp	r1, #0
    c614:	d1e3      	bne.n	c5de <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x293a>
    c616:	e7de      	b.n	c5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
    c618:	f50d 6029 	add.w	r0, sp, #2704	; 0xa90
    c61c:	f60d 2198 	addw	r1, sp, #2712	; 0xa98
    c620:	f006 fa9a 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c624:	9045      	str	r0, [sp, #276]	; 0x114
    c626:	e7ff      	b.n	c628 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2984>
    c628:	9845      	ldr	r0, [sp, #276]	; 0x114
    c62a:	07c1      	lsls	r1, r0, #31
    c62c:	2900      	cmp	r1, #0
    c62e:	d1ce      	bne.n	c5ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x292a>
    c630:	e7d1      	b.n	c5d6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2932>
                trace!("[{:04x}] LD Vx, K", self.pc);
    c632:	f24e 20ac 	movw	r0, #58028	; 0xe2ac
    c636:	f2c0 0001 	movt	r0, #1
    c63a:	6801      	ldr	r1, [r0, #0]
    c63c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c640:	f100 0212 	add.w	r2, r0, #18
    c644:	f8cd 2abc 	str.w	r2, [sp, #2748]	; 0xabc
    c648:	f8dd 2abc 	ldr.w	r2, [sp, #2748]	; 0xabc
    c64c:	f8cd 2ccc 	str.w	r2, [sp, #3276]	; 0xccc
    c650:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c654:	f2c0 0301 	movt	r3, #1
    c658:	4610      	mov	r0, r2
    c65a:	9144      	str	r1, [sp, #272]	; 0x110
    c65c:	4619      	mov	r1, r3
    c65e:	f005 fb99 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c662:	9043      	str	r0, [sp, #268]	; 0x10c
    c664:	9142      	str	r1, [sp, #264]	; 0x108
    c666:	e7ff      	b.n	c668 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29c4>
    c668:	9843      	ldr	r0, [sp, #268]	; 0x10c
    c66a:	f8cd 0ab4 	str.w	r0, [sp, #2740]	; 0xab4
    c66e:	9942      	ldr	r1, [sp, #264]	; 0x108
    c670:	f8cd 1ab8 	str.w	r1, [sp, #2744]	; 0xab8
    c674:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c678:	f2c0 0201 	movt	r2, #1
    c67c:	6812      	ldr	r2, [r2, #0]
    c67e:	466b      	mov	r3, sp
    c680:	f04f 0c01 	mov.w	ip, #1
    c684:	f8c3 c008 	str.w	ip, [r3, #8]
    c688:	605a      	str	r2, [r3, #4]
    c68a:	f8c3 c000 	str.w	ip, [r3]
    c68e:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c692:	2202      	movs	r2, #2
    c694:	f60d 23b4 	addw	r3, sp, #2740	; 0xab4
    c698:	9944      	ldr	r1, [sp, #272]	; 0x110
    c69a:	f001 fc26 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c69e:	e7ff      	b.n	c6a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x29fc>
    c6a0:	f8dd 1a90 	ldr.w	r1, [sp, #2704]	; 0xa90
    c6a4:	f24e 20cc 	movw	r0, #58060	; 0xe2cc
    c6a8:	f2c0 0001 	movt	r0, #1
    c6ac:	6802      	ldr	r2, [r0, #0]
    c6ae:	f60d 209c 	addw	r0, sp, #2716	; 0xa9c
    c6b2:	f002 fbe6 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c6b6:	e7ff      	b.n	c6b8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a14>
    c6b8:	e7ff      	b.n	c6ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a16>
                self.v[x] = self.waitkey();
    c6ba:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6be:	f001 fa1b 	bl	daf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>
    c6c2:	9041      	str	r0, [sp, #260]	; 0x104
    c6c4:	e7ff      	b.n	c6c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a22>
    c6c6:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c6ca:	280f      	cmp	r0, #15
    c6cc:	f200 868f 	bhi.w	d3ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x374a>
    c6d0:	e7ff      	b.n	c6d2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a2e>
    c6d2:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c6d6:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c6da:	1842      	adds	r2, r0, r1
    c6dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
    c6de:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
        match (
    c6e2:	f000 bd95 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c6e6:	2005      	movs	r0, #5
    c6e8:	f8cd 0ac0 	str.w	r0, [sp, #2752]	; 0xac0
    c6ec:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c6f0:	f2c0 0001 	movt	r0, #1
    c6f4:	6801      	ldr	r1, [r0, #0]
    c6f6:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c6fa:	f006 fa2d 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c6fe:	9040      	str	r0, [sp, #256]	; 0x100
    c700:	e01f      	b.n	c742 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a9e>
    c702:	2001      	movs	r0, #1
    c704:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c708:	e015      	b.n	c736 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c70a:	2000      	movs	r0, #0
    c70c:	f88d 0ac7 	strb.w	r0, [sp, #2759]	; 0xac7
    c710:	e011      	b.n	c736 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a92>
    c712:	2000      	movs	r0, #0
    c714:	f88d 0e8b 	strb.w	r0, [sp, #3723]	; 0xe8b
    c718:	f89d 1e8b 	ldrb.w	r1, [sp, #3723]	; 0xe8b
    c71c:	f643 2050 	movw	r0, #14928	; 0x3a50
    c720:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c724:	f006 fa24 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c728:	f8cd 0e8c 	str.w	r0, [sp, #3724]	; 0xe8c
    c72c:	f8dd 0e8c 	ldr.w	r0, [sp, #3724]	; 0xe8c
    c730:	f8cd 0ac8 	str.w	r0, [sp, #2760]	; 0xac8
    c734:	e00a      	b.n	c74c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2aa8>
    c736:	f89d 0ac7 	ldrb.w	r0, [sp, #2759]	; 0xac7
    c73a:	07c0      	lsls	r0, r0, #31
    c73c:	2800      	cmp	r0, #0
    c73e:	d112      	bne.n	c766 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ac2>
    c740:	e055      	b.n	c7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
    c742:	9840      	ldr	r0, [sp, #256]	; 0x100
    c744:	07c1      	lsls	r1, r0, #31
    c746:	2900      	cmp	r1, #0
    c748:	d1e3      	bne.n	c712 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a6e>
    c74a:	e7de      	b.n	c70a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
    c74c:	f50d 602c 	add.w	r0, sp, #2752	; 0xac0
    c750:	f60d 21c8 	addw	r1, sp, #2760	; 0xac8
    c754:	f006 fa00 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c758:	903f      	str	r0, [sp, #252]	; 0xfc
    c75a:	e7ff      	b.n	c75c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ab8>
    c75c:	983f      	ldr	r0, [sp, #252]	; 0xfc
    c75e:	07c1      	lsls	r1, r0, #31
    c760:	2900      	cmp	r1, #0
    c762:	d1ce      	bne.n	c702 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a5e>
    c764:	e7d1      	b.n	c70a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2a66>
                trace!("[{:04x}] LD DT, Vx", self.pc);
    c766:	f24e 205c 	movw	r0, #57948	; 0xe25c
    c76a:	f2c0 0001 	movt	r0, #1
    c76e:	6801      	ldr	r1, [r0, #0]
    c770:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c774:	f100 0212 	add.w	r2, r0, #18
    c778:	f8cd 2aec 	str.w	r2, [sp, #2796]	; 0xaec
    c77c:	f8dd 2aec 	ldr.w	r2, [sp, #2796]	; 0xaec
    c780:	f8cd 2cc8 	str.w	r2, [sp, #3272]	; 0xcc8
    c784:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c788:	f2c0 0301 	movt	r3, #1
    c78c:	4610      	mov	r0, r2
    c78e:	913e      	str	r1, [sp, #248]	; 0xf8
    c790:	4619      	mov	r1, r3
    c792:	f005 faff 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c796:	903d      	str	r0, [sp, #244]	; 0xf4
    c798:	913c      	str	r1, [sp, #240]	; 0xf0
    c79a:	e7ff      	b.n	c79c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2af8>
    c79c:	983d      	ldr	r0, [sp, #244]	; 0xf4
    c79e:	f8cd 0ae4 	str.w	r0, [sp, #2788]	; 0xae4
    c7a2:	993c      	ldr	r1, [sp, #240]	; 0xf0
    c7a4:	f8cd 1ae8 	str.w	r1, [sp, #2792]	; 0xae8
    c7a8:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c7ac:	f2c0 0201 	movt	r2, #1
    c7b0:	6812      	ldr	r2, [r2, #0]
    c7b2:	466b      	mov	r3, sp
    c7b4:	f04f 0c01 	mov.w	ip, #1
    c7b8:	f8c3 c008 	str.w	ip, [r3, #8]
    c7bc:	605a      	str	r2, [r3, #4]
    c7be:	f8c3 c000 	str.w	ip, [r3]
    c7c2:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c7c6:	2202      	movs	r2, #2
    c7c8:	f60d 23e4 	addw	r3, sp, #2788	; 0xae4
    c7cc:	993e      	ldr	r1, [sp, #248]	; 0xf8
    c7ce:	f001 fb8c 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c7d2:	e7ff      	b.n	c7d4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b30>
    c7d4:	f8dd 1ac0 	ldr.w	r1, [sp, #2752]	; 0xac0
    c7d8:	f24e 207c 	movw	r0, #57980	; 0xe27c
    c7dc:	f2c0 0001 	movt	r0, #1
    c7e0:	6802      	ldr	r2, [r0, #0]
    c7e2:	f60d 20cc 	addw	r0, sp, #2764	; 0xacc
    c7e6:	f002 fb4c 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c7ea:	e7ff      	b.n	c7ec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b48>
    c7ec:	e7ff      	b.n	c7ee <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b4a>
                self.dt = self.v[x];
    c7ee:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c7f2:	280f      	cmp	r0, #15
    c7f4:	f200 85f1 	bhi.w	d3da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3736>
    c7f8:	e7ff      	b.n	c7fa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b56>
    c7fa:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c7fe:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c802:	1842      	adds	r2, r0, r1
    c804:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c808:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
        match (
    c80c:	f000 bd00 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c810:	2005      	movs	r0, #5
    c812:	f8cd 0af0 	str.w	r0, [sp, #2800]	; 0xaf0
    c816:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c81a:	f2c0 0001 	movt	r0, #1
    c81e:	6801      	ldr	r1, [r0, #0]
    c820:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c824:	f006 f998 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c828:	903b      	str	r0, [sp, #236]	; 0xec
    c82a:	e01f      	b.n	c86c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bc8>
    c82c:	2001      	movs	r0, #1
    c82e:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c832:	e015      	b.n	c860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c834:	2000      	movs	r0, #0
    c836:	f88d 0af7 	strb.w	r0, [sp, #2807]	; 0xaf7
    c83a:	e011      	b.n	c860 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bbc>
    c83c:	2000      	movs	r0, #0
    c83e:	f88d 0e93 	strb.w	r0, [sp, #3731]	; 0xe93
    c842:	f89d 1e93 	ldrb.w	r1, [sp, #3731]	; 0xe93
    c846:	f643 2050 	movw	r0, #14928	; 0x3a50
    c84a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c84e:	f006 f98f 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c852:	f8cd 0e94 	str.w	r0, [sp, #3732]	; 0xe94
    c856:	f8dd 0e94 	ldr.w	r0, [sp, #3732]	; 0xe94
    c85a:	f8cd 0af8 	str.w	r0, [sp, #2808]	; 0xaf8
    c85e:	e00a      	b.n	c876 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bd2>
    c860:	f89d 0af7 	ldrb.w	r0, [sp, #2807]	; 0xaf7
    c864:	07c0      	lsls	r0, r0, #31
    c866:	2800      	cmp	r0, #0
    c868:	d112      	bne.n	c890 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2bec>
    c86a:	e055      	b.n	c918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
    c86c:	983b      	ldr	r0, [sp, #236]	; 0xec
    c86e:	07c1      	lsls	r1, r0, #31
    c870:	2900      	cmp	r1, #0
    c872:	d1e3      	bne.n	c83c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b98>
    c874:	e7de      	b.n	c834 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
    c876:	f50d 602f 	add.w	r0, sp, #2800	; 0xaf0
    c87a:	f60d 21f8 	addw	r1, sp, #2808	; 0xaf8
    c87e:	f006 f96b 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c882:	903a      	str	r0, [sp, #232]	; 0xe8
    c884:	e7ff      	b.n	c886 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2be2>
    c886:	983a      	ldr	r0, [sp, #232]	; 0xe8
    c888:	07c1      	lsls	r1, r0, #31
    c88a:	2900      	cmp	r1, #0
    c88c:	d1ce      	bne.n	c82c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b88>
    c88e:	e7d1      	b.n	c834 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2b90>
                trace!("[{:04x}] LD ST, Vx", self.pc);
    c890:	f24e 200c 	movw	r0, #57868	; 0xe20c
    c894:	f2c0 0001 	movt	r0, #1
    c898:	6801      	ldr	r1, [r0, #0]
    c89a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c89e:	f100 0212 	add.w	r2, r0, #18
    c8a2:	f8cd 2b1c 	str.w	r2, [sp, #2844]	; 0xb1c
    c8a6:	f8dd 2b1c 	ldr.w	r2, [sp, #2844]	; 0xb1c
    c8aa:	f8cd 2cc4 	str.w	r2, [sp, #3268]	; 0xcc4
    c8ae:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c8b2:	f2c0 0301 	movt	r3, #1
    c8b6:	4610      	mov	r0, r2
    c8b8:	9139      	str	r1, [sp, #228]	; 0xe4
    c8ba:	4619      	mov	r1, r3
    c8bc:	f005 fa6a 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c8c0:	9038      	str	r0, [sp, #224]	; 0xe0
    c8c2:	9137      	str	r1, [sp, #220]	; 0xdc
    c8c4:	e7ff      	b.n	c8c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c22>
    c8c6:	9838      	ldr	r0, [sp, #224]	; 0xe0
    c8c8:	f8cd 0b14 	str.w	r0, [sp, #2836]	; 0xb14
    c8cc:	9937      	ldr	r1, [sp, #220]	; 0xdc
    c8ce:	f8cd 1b18 	str.w	r1, [sp, #2840]	; 0xb18
    c8d2:	f64d 7278 	movw	r2, #57208	; 0xdf78
    c8d6:	f2c0 0201 	movt	r2, #1
    c8da:	6812      	ldr	r2, [r2, #0]
    c8dc:	466b      	mov	r3, sp
    c8de:	f04f 0c01 	mov.w	ip, #1
    c8e2:	f8c3 c008 	str.w	ip, [r3, #8]
    c8e6:	605a      	str	r2, [r3, #4]
    c8e8:	f8c3 c000 	str.w	ip, [r3]
    c8ec:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c8f0:	2202      	movs	r2, #2
    c8f2:	f60d 3314 	addw	r3, sp, #2836	; 0xb14
    c8f6:	9939      	ldr	r1, [sp, #228]	; 0xe4
    c8f8:	f001 faf7 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    c8fc:	e7ff      	b.n	c8fe <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c5a>
    c8fe:	f8dd 1af0 	ldr.w	r1, [sp, #2800]	; 0xaf0
    c902:	f24e 202c 	movw	r0, #57900	; 0xe22c
    c906:	f2c0 0001 	movt	r0, #1
    c90a:	6802      	ldr	r2, [r0, #0]
    c90c:	f60d 20fc 	addw	r0, sp, #2812	; 0xafc
    c910:	f002 fab7 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    c914:	e7ff      	b.n	c916 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c72>
    c916:	e7ff      	b.n	c918 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c74>
                self.st = self.v[x];
    c918:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    c91c:	280f      	cmp	r0, #15
    c91e:	f200 8552 	bhi.w	d3c6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3722>
    c922:	e7ff      	b.n	c924 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2c80>
    c924:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c928:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    c92c:	1842      	adds	r2, r0, r1
    c92e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    c932:	f880 2045 	strb.w	r2, [r0, #69]	; 0x45
        match (
    c936:	f000 bc6b 	b.w	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    c93a:	2005      	movs	r0, #5
    c93c:	f8cd 0b20 	str.w	r0, [sp, #2848]	; 0xb20
    c940:	f64d 7030 	movw	r0, #57136	; 0xdf30
    c944:	f2c0 0001 	movt	r0, #1
    c948:	6801      	ldr	r1, [r0, #0]
    c94a:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c94e:	f006 f903 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c952:	9036      	str	r0, [sp, #216]	; 0xd8
    c954:	e01f      	b.n	c996 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cf2>
    c956:	2001      	movs	r0, #1
    c958:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c95c:	e015      	b.n	c98a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c95e:	2000      	movs	r0, #0
    c960:	f88d 0b27 	strb.w	r0, [sp, #2855]	; 0xb27
    c964:	e011      	b.n	c98a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ce6>
    c966:	2000      	movs	r0, #0
    c968:	f88d 0e9b 	strb.w	r0, [sp, #3739]	; 0xe9b
    c96c:	f89d 1e9b 	ldrb.w	r1, [sp, #3739]	; 0xe9b
    c970:	f643 2050 	movw	r0, #14928	; 0x3a50
    c974:	f2c2 0000 	movt	r0, #8192	; 0x2000
    c978:	f006 f8fa 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    c97c:	f8cd 0e9c 	str.w	r0, [sp, #3740]	; 0xe9c
    c980:	f8dd 0e9c 	ldr.w	r0, [sp, #3740]	; 0xe9c
    c984:	f8cd 0b28 	str.w	r0, [sp, #2856]	; 0xb28
    c988:	e00a      	b.n	c9a0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cfc>
    c98a:	f89d 0b27 	ldrb.w	r0, [sp, #2855]	; 0xb27
    c98e:	07c0      	lsls	r0, r0, #31
    c990:	2800      	cmp	r0, #0
    c992:	d112      	bne.n	c9ba <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d16>
    c994:	e055      	b.n	ca42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
    c996:	9836      	ldr	r0, [sp, #216]	; 0xd8
    c998:	07c1      	lsls	r1, r0, #31
    c99a:	2900      	cmp	r1, #0
    c99c:	d1e3      	bne.n	c966 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cc2>
    c99e:	e7de      	b.n	c95e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
    c9a0:	f50d 6032 	add.w	r0, sp, #2848	; 0xb20
    c9a4:	f60d 3128 	addw	r1, sp, #2856	; 0xb28
    c9a8:	f006 f8d6 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    c9ac:	9035      	str	r0, [sp, #212]	; 0xd4
    c9ae:	e7ff      	b.n	c9b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d0c>
    c9b0:	9835      	ldr	r0, [sp, #212]	; 0xd4
    c9b2:	07c1      	lsls	r1, r0, #31
    c9b4:	2900      	cmp	r1, #0
    c9b6:	d1ce      	bne.n	c956 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cb2>
    c9b8:	e7d1      	b.n	c95e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2cba>
                trace!("[{:04x}] ADD I, Vx", self.pc);
    c9ba:	f24e 10bc 	movw	r0, #57788	; 0xe1bc
    c9be:	f2c0 0001 	movt	r0, #1
    c9c2:	6801      	ldr	r1, [r0, #0]
    c9c4:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    c9c8:	f100 0212 	add.w	r2, r0, #18
    c9cc:	f8cd 2b4c 	str.w	r2, [sp, #2892]	; 0xb4c
    c9d0:	f8dd 2b4c 	ldr.w	r2, [sp, #2892]	; 0xb4c
    c9d4:	f8cd 2cc0 	str.w	r2, [sp, #3264]	; 0xcc0
    c9d8:	f248 23bf 	movw	r3, #33471	; 0x82bf
    c9dc:	f2c0 0301 	movt	r3, #1
    c9e0:	4610      	mov	r0, r2
    c9e2:	9134      	str	r1, [sp, #208]	; 0xd0
    c9e4:	4619      	mov	r1, r3
    c9e6:	f005 f9d5 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    c9ea:	9033      	str	r0, [sp, #204]	; 0xcc
    c9ec:	9132      	str	r1, [sp, #200]	; 0xc8
    c9ee:	e7ff      	b.n	c9f0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d4c>
    c9f0:	9833      	ldr	r0, [sp, #204]	; 0xcc
    c9f2:	f8cd 0b44 	str.w	r0, [sp, #2884]	; 0xb44
    c9f6:	9932      	ldr	r1, [sp, #200]	; 0xc8
    c9f8:	f8cd 1b48 	str.w	r1, [sp, #2888]	; 0xb48
    c9fc:	f64d 7278 	movw	r2, #57208	; 0xdf78
    ca00:	f2c0 0201 	movt	r2, #1
    ca04:	6812      	ldr	r2, [r2, #0]
    ca06:	466b      	mov	r3, sp
    ca08:	f04f 0c01 	mov.w	ip, #1
    ca0c:	f8c3 c008 	str.w	ip, [r3, #8]
    ca10:	605a      	str	r2, [r3, #4]
    ca12:	f8c3 c000 	str.w	ip, [r3]
    ca16:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ca1a:	2202      	movs	r2, #2
    ca1c:	f60d 3344 	addw	r3, sp, #2884	; 0xb44
    ca20:	9934      	ldr	r1, [sp, #208]	; 0xd0
    ca22:	f001 fa62 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ca26:	e7ff      	b.n	ca28 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d84>
    ca28:	f8dd 1b20 	ldr.w	r1, [sp, #2848]	; 0xb20
    ca2c:	f24e 10dc 	movw	r0, #57820	; 0xe1dc
    ca30:	f2c0 0001 	movt	r0, #1
    ca34:	6802      	ldr	r2, [r0, #0]
    ca36:	f60d 302c 	addw	r0, sp, #2860	; 0xb2c
    ca3a:	f002 fa22 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    ca3e:	e7ff      	b.n	ca40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9c>
    ca40:	e7ff      	b.n	ca42 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2d9e>
                self.i = self.i.wrapping_add(self.v[x].into());
    ca42:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca46:	8a01      	ldrh	r1, [r0, #16]
    ca48:	f8dd 2468 	ldr.w	r2, [sp, #1128]	; 0x468
    ca4c:	2a0f      	cmp	r2, #15
    ca4e:	9131      	str	r1, [sp, #196]	; 0xc4
    ca50:	f200 84af 	bhi.w	d3b2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x370e>
    ca54:	e7ff      	b.n	ca56 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2db2>
    ca56:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ca5a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    ca5e:	1842      	adds	r2, r0, r1
    ca60:	f892 0034 	ldrb.w	r0, [r2, #52]	; 0x34
    ca64:	f001 f8ad 	bl	dbc2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    ca68:	9030      	str	r0, [sp, #192]	; 0xc0
    ca6a:	e7ff      	b.n	ca6c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dc8>
    ca6c:	9831      	ldr	r0, [sp, #196]	; 0xc4
    ca6e:	9930      	ldr	r1, [sp, #192]	; 0xc0
    ca70:	f006 f95a 	bl	12d28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    ca74:	902f      	str	r0, [sp, #188]	; 0xbc
    ca76:	e7ff      	b.n	ca78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dd4>
    ca78:	982f      	ldr	r0, [sp, #188]	; 0xbc
    ca7a:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    ca7e:	8208      	strh	r0, [r1, #16]
        match (
    ca80:	e3c6      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ca82:	2005      	movs	r0, #5
    ca84:	f8cd 0b50 	str.w	r0, [sp, #2896]	; 0xb50
    ca88:	f64d 7030 	movw	r0, #57136	; 0xdf30
    ca8c:	f2c0 0001 	movt	r0, #1
    ca90:	6801      	ldr	r1, [r0, #0]
    ca92:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    ca96:	f006 f85f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ca9a:	902e      	str	r0, [sp, #184]	; 0xb8
    ca9c:	e01f      	b.n	cade <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e3a>
    ca9e:	2001      	movs	r0, #1
    caa0:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    caa4:	e015      	b.n	cad2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    caa6:	2000      	movs	r0, #0
    caa8:	f88d 0b57 	strb.w	r0, [sp, #2903]	; 0xb57
    caac:	e011      	b.n	cad2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e2e>
    caae:	2000      	movs	r0, #0
    cab0:	f88d 0ea3 	strb.w	r0, [sp, #3747]	; 0xea3
    cab4:	f89d 1ea3 	ldrb.w	r1, [sp, #3747]	; 0xea3
    cab8:	f643 2050 	movw	r0, #14928	; 0x3a50
    cabc:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cac0:	f006 f856 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cac4:	f8cd 0ea4 	str.w	r0, [sp, #3748]	; 0xea4
    cac8:	f8dd 0ea4 	ldr.w	r0, [sp, #3748]	; 0xea4
    cacc:	f8cd 0b58 	str.w	r0, [sp, #2904]	; 0xb58
    cad0:	e00a      	b.n	cae8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e44>
    cad2:	f89d 0b57 	ldrb.w	r0, [sp, #2903]	; 0xb57
    cad6:	07c0      	lsls	r0, r0, #31
    cad8:	2800      	cmp	r0, #0
    cada:	d112      	bne.n	cb02 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e5e>
    cadc:	e055      	b.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
    cade:	982e      	ldr	r0, [sp, #184]	; 0xb8
    cae0:	07c1      	lsls	r1, r0, #31
    cae2:	2900      	cmp	r1, #0
    cae4:	d1e3      	bne.n	caae <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e0a>
    cae6:	e7de      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
    cae8:	f50d 6035 	add.w	r0, sp, #2896	; 0xb50
    caec:	f60d 3158 	addw	r1, sp, #2904	; 0xb58
    caf0:	f006 f832 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    caf4:	902d      	str	r0, [sp, #180]	; 0xb4
    caf6:	e7ff      	b.n	caf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e54>
    caf8:	982d      	ldr	r0, [sp, #180]	; 0xb4
    cafa:	07c1      	lsls	r1, r0, #31
    cafc:	2900      	cmp	r1, #0
    cafe:	d1ce      	bne.n	ca9e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2dfa>
    cb00:	e7d1      	b.n	caa6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e02>
                trace!("[{:04x}] LD F, Vx", self.pc);
    cb02:	f24e 1038 	movw	r0, #57656	; 0xe138
    cb06:	f2c0 0001 	movt	r0, #1
    cb0a:	6801      	ldr	r1, [r0, #0]
    cb0c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb10:	f100 0212 	add.w	r2, r0, #18
    cb14:	f8cd 2b7c 	str.w	r2, [sp, #2940]	; 0xb7c
    cb18:	f8dd 2b7c 	ldr.w	r2, [sp, #2940]	; 0xb7c
    cb1c:	f8cd 2cbc 	str.w	r2, [sp, #3260]	; 0xcbc
    cb20:	f248 23bf 	movw	r3, #33471	; 0x82bf
    cb24:	f2c0 0301 	movt	r3, #1
    cb28:	4610      	mov	r0, r2
    cb2a:	912c      	str	r1, [sp, #176]	; 0xb0
    cb2c:	4619      	mov	r1, r3
    cb2e:	f005 f931 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cb32:	902b      	str	r0, [sp, #172]	; 0xac
    cb34:	912a      	str	r1, [sp, #168]	; 0xa8
    cb36:	e7ff      	b.n	cb38 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2e94>
    cb38:	982b      	ldr	r0, [sp, #172]	; 0xac
    cb3a:	f8cd 0b74 	str.w	r0, [sp, #2932]	; 0xb74
    cb3e:	992a      	ldr	r1, [sp, #168]	; 0xa8
    cb40:	f8cd 1b78 	str.w	r1, [sp, #2936]	; 0xb78
    cb44:	f64d 7278 	movw	r2, #57208	; 0xdf78
    cb48:	f2c0 0201 	movt	r2, #1
    cb4c:	6812      	ldr	r2, [r2, #0]
    cb4e:	466b      	mov	r3, sp
    cb50:	f04f 0c01 	mov.w	ip, #1
    cb54:	f8c3 c008 	str.w	ip, [r3, #8]
    cb58:	605a      	str	r2, [r3, #4]
    cb5a:	f8c3 c000 	str.w	ip, [r3]
    cb5e:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cb62:	2202      	movs	r2, #2
    cb64:	f60d 3374 	addw	r3, sp, #2932	; 0xb74
    cb68:	992c      	ldr	r1, [sp, #176]	; 0xb0
    cb6a:	f001 f9be 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    cb6e:	e7ff      	b.n	cb70 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ecc>
    cb70:	f8dd 1b50 	ldr.w	r1, [sp, #2896]	; 0xb50
    cb74:	f24e 1058 	movw	r0, #57688	; 0xe158
    cb78:	f2c0 0001 	movt	r0, #1
    cb7c:	6802      	ldr	r2, [r0, #0]
    cb7e:	f60d 305c 	addw	r0, sp, #2908	; 0xb5c
    cb82:	f002 f97e 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cb86:	e7ff      	b.n	cb88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee4>
    cb88:	e7ff      	b.n	cb8a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ee6>
                self.i = (self.v[x] * 5).into();
    cb8a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cb8e:	280f      	cmp	r0, #15
    cb90:	f200 83f9 	bhi.w	d386 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36e2>
    cb94:	e7ff      	b.n	cb96 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ef2>
    cb96:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cb9a:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cb9e:	1842      	adds	r2, r0, r1
    cba0:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cba4:	2305      	movs	r3, #5
    cba6:	fba2 2303 	umull	r2, r3, r2, r3
    cbaa:	ea4f 2c12 	mov.w	ip, r2, lsr #8
    cbae:	f04f 0e00 	mov.w	lr, #0
    cbb2:	ebbe 2f12 	cmp.w	lr, r2, lsr #8
    cbb6:	bf18      	it	ne
    cbb8:	f04f 0c01 	movne.w	ip, #1
    cbbc:	2b00      	cmp	r3, #0
    cbbe:	bf18      	it	ne
    cbc0:	2301      	movne	r3, #1
    cbc2:	ea43 030c 	orr.w	r3, r3, ip
    cbc6:	2b00      	cmp	r3, #0
    cbc8:	9229      	str	r2, [sp, #164]	; 0xa4
    cbca:	f040 83e6 	bne.w	d39a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36f6>
    cbce:	e7ff      	b.n	cbd0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f2c>
    cbd0:	9829      	ldr	r0, [sp, #164]	; 0xa4
    cbd2:	f000 fff6 	bl	dbc2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>
    cbd6:	9028      	str	r0, [sp, #160]	; 0xa0
    cbd8:	e7ff      	b.n	cbda <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f36>
    cbda:	9828      	ldr	r0, [sp, #160]	; 0xa0
    cbdc:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    cbe0:	8208      	strh	r0, [r1, #16]
        match (
    cbe2:	e315      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    cbe4:	2005      	movs	r0, #5
    cbe6:	f8cd 0b80 	str.w	r0, [sp, #2944]	; 0xb80
    cbea:	f64d 7030 	movw	r0, #57136	; 0xdf30
    cbee:	f2c0 0001 	movt	r0, #1
    cbf2:	6801      	ldr	r1, [r0, #0]
    cbf4:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cbf8:	f005 ffae 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cbfc:	9027      	str	r0, [sp, #156]	; 0x9c
    cbfe:	e01f      	b.n	cc40 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f9c>
    cc00:	2001      	movs	r0, #1
    cc02:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cc06:	e015      	b.n	cc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cc08:	2000      	movs	r0, #0
    cc0a:	f88d 0b87 	strb.w	r0, [sp, #2951]	; 0xb87
    cc0e:	e011      	b.n	cc34 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f90>
    cc10:	2000      	movs	r0, #0
    cc12:	f88d 0eab 	strb.w	r0, [sp, #3755]	; 0xeab
    cc16:	f89d 1eab 	ldrb.w	r1, [sp, #3755]	; 0xeab
    cc1a:	f643 2050 	movw	r0, #14928	; 0x3a50
    cc1e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    cc22:	f005 ffa5 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    cc26:	f8cd 0eac 	str.w	r0, [sp, #3756]	; 0xeac
    cc2a:	f8dd 0eac 	ldr.w	r0, [sp, #3756]	; 0xeac
    cc2e:	f8cd 0b88 	str.w	r0, [sp, #2952]	; 0xb88
    cc32:	e00a      	b.n	cc4a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fa6>
    cc34:	f89d 0b87 	ldrb.w	r0, [sp, #2951]	; 0xb87
    cc38:	07c0      	lsls	r0, r0, #31
    cc3a:	2800      	cmp	r0, #0
    cc3c:	d112      	bne.n	cc64 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fc0>
    cc3e:	e055      	b.n	ccec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
    cc40:	9827      	ldr	r0, [sp, #156]	; 0x9c
    cc42:	07c1      	lsls	r1, r0, #31
    cc44:	2900      	cmp	r1, #0
    cc46:	d1e3      	bne.n	cc10 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f6c>
    cc48:	e7de      	b.n	cc08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
    cc4a:	f50d 6038 	add.w	r0, sp, #2944	; 0xb80
    cc4e:	f60d 3188 	addw	r1, sp, #2952	; 0xb88
    cc52:	f005 ff81 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cc56:	9026      	str	r0, [sp, #152]	; 0x98
    cc58:	e7ff      	b.n	cc5a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2fb6>
    cc5a:	9826      	ldr	r0, [sp, #152]	; 0x98
    cc5c:	07c1      	lsls	r1, r0, #31
    cc5e:	2900      	cmp	r1, #0
    cc60:	d1ce      	bne.n	cc00 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f5c>
    cc62:	e7d1      	b.n	cc08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2f64>
                trace!("[{:04x}] LD B, Vx", self.pc);
    cc64:	f24e 0098 	movw	r0, #57496	; 0xe098
    cc68:	f2c0 0001 	movt	r0, #1
    cc6c:	6801      	ldr	r1, [r0, #0]
    cc6e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cc72:	f100 0212 	add.w	r2, r0, #18
    cc76:	f8cd 2bac 	str.w	r2, [sp, #2988]	; 0xbac
    cc7a:	f8dd 2bac 	ldr.w	r2, [sp, #2988]	; 0xbac
    cc7e:	f8cd 2cb4 	str.w	r2, [sp, #3252]	; 0xcb4
    cc82:	f248 23bf 	movw	r3, #33471	; 0x82bf
    cc86:	f2c0 0301 	movt	r3, #1
    cc8a:	4610      	mov	r0, r2
    cc8c:	9125      	str	r1, [sp, #148]	; 0x94
    cc8e:	4619      	mov	r1, r3
    cc90:	f005 f880 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    cc94:	9024      	str	r0, [sp, #144]	; 0x90
    cc96:	9123      	str	r1, [sp, #140]	; 0x8c
    cc98:	e7ff      	b.n	cc9a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x2ff6>
    cc9a:	9824      	ldr	r0, [sp, #144]	; 0x90
    cc9c:	f8cd 0ba4 	str.w	r0, [sp, #2980]	; 0xba4
    cca0:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cca2:	f8cd 1ba8 	str.w	r1, [sp, #2984]	; 0xba8
    cca6:	f64d 7278 	movw	r2, #57208	; 0xdf78
    ccaa:	f2c0 0201 	movt	r2, #1
    ccae:	6812      	ldr	r2, [r2, #0]
    ccb0:	466b      	mov	r3, sp
    ccb2:	f04f 0c01 	mov.w	ip, #1
    ccb6:	f8c3 c008 	str.w	ip, [r3, #8]
    ccba:	605a      	str	r2, [r3, #4]
    ccbc:	f8c3 c000 	str.w	ip, [r3]
    ccc0:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    ccc4:	2202      	movs	r2, #2
    ccc6:	f60d 33a4 	addw	r3, sp, #2980	; 0xba4
    ccca:	9925      	ldr	r1, [sp, #148]	; 0x94
    cccc:	f001 f90d 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ccd0:	e7ff      	b.n	ccd2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x302e>
    ccd2:	f8dd 1b80 	ldr.w	r1, [sp, #2944]	; 0xb80
    ccd6:	f24e 00b8 	movw	r0, #57528	; 0xe0b8
    ccda:	f2c0 0001 	movt	r0, #1
    ccde:	6802      	ldr	r2, [r0, #0]
    cce0:	f60d 308c 	addw	r0, sp, #2956	; 0xb8c
    cce4:	f002 f8cd 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cce8:	e7ff      	b.n	ccea <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3046>
    ccea:	e7ff      	b.n	ccec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3048>
                let bcd = self.v[x];
    ccec:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    ccf0:	280f      	cmp	r0, #15
    ccf2:	f200 8308 	bhi.w	d306 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3662>
    ccf6:	e7ff      	b.n	ccf8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3054>
    ccf8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ccfc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    cd00:	1842      	adds	r2, r0, r1
    cd02:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cd06:	4613      	mov	r3, r2
    cd08:	f88d 2cbb 	strb.w	r2, [sp, #3259]	; 0xcbb
    cd0c:	f248 5c1f 	movw	ip, #34079	; 0x851f
    cd10:	f2c5 1ceb 	movt	ip, #20971	; 0x51eb
                self.mem[self.i as usize] = (bcd / 100) % 10;
    cd14:	fba2 2c0c 	umull	r2, ip, r2, ip
    cd18:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    cd1c:	f8b0 e010 	ldrh.w	lr, [r0, #16]
    cd20:	4674      	mov	r4, lr
    cd22:	2500      	movs	r5, #0
    cd24:	ebb5 3f1e 	cmp.w	r5, lr, lsr #12
    cd28:	9322      	str	r3, [sp, #136]	; 0x88
    cd2a:	f8cd c084 	str.w	ip, [sp, #132]	; 0x84
    cd2e:	9420      	str	r4, [sp, #128]	; 0x80
    cd30:	f040 82f3 	bne.w	d31a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3676>
    cd34:	e7ff      	b.n	cd36 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3092>
    cd36:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd3a:	9920      	ldr	r1, [sp, #128]	; 0x80
    cd3c:	1842      	adds	r2, r0, r1
    cd3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
    cd40:	fa5f fc83 	uxtb.w	ip, r3
    cd44:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cd48:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cd4c:	fbac 450e 	umull	r4, r5, ip, lr
    cd50:	08ed      	lsrs	r5, r5, #3
    cd52:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    cd56:	ebac 0c45 	sub.w	ip, ip, r5, lsl #1
    cd5a:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    cd5e:	9a22      	ldr	r2, [sp, #136]	; 0x88
    cd60:	fa5f fc82 	uxtb.w	ip, r2
    cd64:	fbac ce0e 	umull	ip, lr, ip, lr
    cd68:	ea4f 0ede 	mov.w	lr, lr, lsr #3
    cd6c:	8a05      	ldrh	r5, [r0, #16]
    cd6e:	3501      	adds	r5, #1
    cd70:	2600      	movs	r6, #0
    cd72:	2e00      	cmp	r6, #0
    cd74:	f8cd e07c 	str.w	lr, [sp, #124]	; 0x7c
    cd78:	951e      	str	r5, [sp, #120]	; 0x78
    cd7a:	f040 82d8 	bne.w	d32e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x368a>
    cd7e:	e7ff      	b.n	cd80 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30dc>
    cd80:	2000      	movs	r0, #0
    cd82:	991e      	ldr	r1, [sp, #120]	; 0x78
    cd84:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cd88:	f040 82dd 	bne.w	d346 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36a2>
    cd8c:	e7ff      	b.n	cd8e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x30ea>
    cd8e:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cd92:	991e      	ldr	r1, [sp, #120]	; 0x78
    cd94:	1842      	adds	r2, r0, r1
    cd96:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
    cd98:	fa5f fc83 	uxtb.w	ip, r3
    cd9c:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cda0:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cda4:	fbac e40e 	umull	lr, r4, ip, lr
    cda8:	08e4      	lsrs	r4, r4, #3
    cdaa:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cdae:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cdb2:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
                self.mem[self.i as usize + 2] = bcd % 10;
    cdb6:	8a02      	ldrh	r2, [r0, #16]
    cdb8:	3202      	adds	r2, #2
    cdba:	f04f 0c00 	mov.w	ip, #0
    cdbe:	f1bc 0f00 	cmp.w	ip, #0
    cdc2:	921d      	str	r2, [sp, #116]	; 0x74
    cdc4:	f040 82c9 	bne.w	d35a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36b6>
    cdc8:	e7ff      	b.n	cdca <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3126>
    cdca:	2000      	movs	r0, #0
    cdcc:	991d      	ldr	r1, [sp, #116]	; 0x74
    cdce:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cdd2:	f040 82ce 	bne.w	d372 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x36ce>
    cdd6:	e7ff      	b.n	cdd8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3134>
    cdd8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cddc:	991d      	ldr	r1, [sp, #116]	; 0x74
    cdde:	1842      	adds	r2, r0, r1
    cde0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    cde2:	fa5f fc83 	uxtb.w	ip, r3
    cde6:	f64c 4ecd 	movw	lr, #52429	; 0xcccd
    cdea:	f6cc 4ecc 	movt	lr, #52428	; 0xcccc
    cdee:	fbac e40e 	umull	lr, r4, ip, lr
    cdf2:	08e4      	lsrs	r4, r4, #3
    cdf4:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    cdf8:	ebac 0c44 	sub.w	ip, ip, r4, lsl #1
    cdfc:	f882 c047 	strb.w	ip, [r2, #71]	; 0x47
        match (
    ce00:	e206      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
    ce02:	2005      	movs	r0, #5
    ce04:	f8cd 0bb0 	str.w	r0, [sp, #2992]	; 0xbb0
    ce08:	f64d 7030 	movw	r0, #57136	; 0xdf30
    ce0c:	f2c0 0001 	movt	r0, #1
    ce10:	6801      	ldr	r1, [r0, #0]
    ce12:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    ce16:	f005 fe9f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ce1a:	901c      	str	r0, [sp, #112]	; 0x70
    ce1c:	e01f      	b.n	ce5e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ba>
    ce1e:	2001      	movs	r0, #1
    ce20:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    ce24:	e015      	b.n	ce52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    ce26:	2000      	movs	r0, #0
    ce28:	f88d 0bb7 	strb.w	r0, [sp, #2999]	; 0xbb7
    ce2c:	e011      	b.n	ce52 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31ae>
    ce2e:	2000      	movs	r0, #0
    ce30:	f88d 0eb3 	strb.w	r0, [sp, #3763]	; 0xeb3
    ce34:	f89d 1eb3 	ldrb.w	r1, [sp, #3763]	; 0xeb3
    ce38:	f643 2050 	movw	r0, #14928	; 0x3a50
    ce3c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ce40:	f005 fe96 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    ce44:	f8cd 0eb4 	str.w	r0, [sp, #3764]	; 0xeb4
    ce48:	f8dd 0eb4 	ldr.w	r0, [sp, #3764]	; 0xeb4
    ce4c:	f8cd 0bb8 	str.w	r0, [sp, #3000]	; 0xbb8
    ce50:	e00a      	b.n	ce68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31c4>
    ce52:	f89d 0bb7 	ldrb.w	r0, [sp, #2999]	; 0xbb7
    ce56:	07c0      	lsls	r0, r0, #31
    ce58:	2800      	cmp	r0, #0
    ce5a:	d112      	bne.n	ce82 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31de>
    ce5c:	e055      	b.n	cf0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
    ce5e:	981c      	ldr	r0, [sp, #112]	; 0x70
    ce60:	07c1      	lsls	r1, r0, #31
    ce62:	2900      	cmp	r1, #0
    ce64:	d1e3      	bne.n	ce2e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x318a>
    ce66:	e7de      	b.n	ce26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
    ce68:	f50d 603b 	add.w	r0, sp, #2992	; 0xbb0
    ce6c:	f60d 31b8 	addw	r1, sp, #3000	; 0xbb8
    ce70:	f005 fe72 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    ce74:	901b      	str	r0, [sp, #108]	; 0x6c
    ce76:	e7ff      	b.n	ce78 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x31d4>
    ce78:	981b      	ldr	r0, [sp, #108]	; 0x6c
    ce7a:	07c1      	lsls	r1, r0, #31
    ce7c:	2900      	cmp	r1, #0
    ce7e:	d1ce      	bne.n	ce1e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x317a>
    ce80:	e7d1      	b.n	ce26 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3182>
                trace!("[{:04x}] LD [I], Vx", self.pc);
    ce82:	f24e 0018 	movw	r0, #57368	; 0xe018
    ce86:	f2c0 0001 	movt	r0, #1
    ce8a:	6801      	ldr	r1, [r0, #0]
    ce8c:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    ce90:	f100 0212 	add.w	r2, r0, #18
    ce94:	f8cd 2bdc 	str.w	r2, [sp, #3036]	; 0xbdc
    ce98:	f8dd 2bdc 	ldr.w	r2, [sp, #3036]	; 0xbdc
    ce9c:	f8cd 2ca0 	str.w	r2, [sp, #3232]	; 0xca0
    cea0:	f248 23bf 	movw	r3, #33471	; 0x82bf
    cea4:	f2c0 0301 	movt	r3, #1
    cea8:	4610      	mov	r0, r2
    ceaa:	911a      	str	r1, [sp, #104]	; 0x68
    ceac:	4619      	mov	r1, r3
    ceae:	f004 ff71 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    ceb2:	9019      	str	r0, [sp, #100]	; 0x64
    ceb4:	9118      	str	r1, [sp, #96]	; 0x60
    ceb6:	e7ff      	b.n	ceb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3214>
    ceb8:	9819      	ldr	r0, [sp, #100]	; 0x64
    ceba:	f8cd 0bd4 	str.w	r0, [sp, #3028]	; 0xbd4
    cebe:	9918      	ldr	r1, [sp, #96]	; 0x60
    cec0:	f8cd 1bd8 	str.w	r1, [sp, #3032]	; 0xbd8
    cec4:	f64d 7278 	movw	r2, #57208	; 0xdf78
    cec8:	f2c0 0201 	movt	r2, #1
    cecc:	6812      	ldr	r2, [r2, #0]
    cece:	466b      	mov	r3, sp
    ced0:	f04f 0c01 	mov.w	ip, #1
    ced4:	f8c3 c008 	str.w	ip, [r3, #8]
    ced8:	605a      	str	r2, [r3, #4]
    ceda:	f8c3 c000 	str.w	ip, [r3]
    cede:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cee2:	2202      	movs	r2, #2
    cee4:	f60d 33d4 	addw	r3, sp, #3028	; 0xbd4
    cee8:	991a      	ldr	r1, [sp, #104]	; 0x68
    ceea:	f000 fffe 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    ceee:	e7ff      	b.n	cef0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x324c>
    cef0:	f8dd 1bb0 	ldr.w	r1, [sp, #2992]	; 0xbb0
    cef4:	f24e 0038 	movw	r0, #57400	; 0xe038
    cef8:	f2c0 0001 	movt	r0, #1
    cefc:	6802      	ldr	r2, [r0, #0]
    cefe:	f60d 30bc 	addw	r0, sp, #3004	; 0xbbc
    cf02:	f001 ffbe 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    cf06:	e7ff      	b.n	cf08 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3264>
    cf08:	e7ff      	b.n	cf0a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3266>
                let x = x as usize;
    cf0a:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    cf0e:	f8cd 0ca4 	str.w	r0, [sp, #3236]	; 0xca4
                for i in 0..(x + 1) {
    cf12:	1c41      	adds	r1, r0, #1
    cf14:	460a      	mov	r2, r1
    cf16:	4281      	cmp	r1, r0
    cf18:	9217      	str	r2, [sp, #92]	; 0x5c
    cf1a:	f0c0 81c9 	bcc.w	d2b0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x360c>
    cf1e:	e7ff      	b.n	cf20 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x327c>
    cf20:	2000      	movs	r0, #0
    cf22:	f8cd 0be0 	str.w	r0, [sp, #3040]	; 0xbe0
    cf26:	9817      	ldr	r0, [sp, #92]	; 0x5c
    cf28:	f8cd 0be4 	str.w	r0, [sp, #3044]	; 0xbe4
    cf2c:	f8dd 0be0 	ldr.w	r0, [sp, #3040]	; 0xbe0
    cf30:	f8dd 1be4 	ldr.w	r1, [sp, #3044]	; 0xbe4
    cf34:	f001 fd37 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    cf38:	9016      	str	r0, [sp, #88]	; 0x58
    cf3a:	9115      	str	r1, [sp, #84]	; 0x54
    cf3c:	e7ff      	b.n	cf3e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x329a>
    cf3e:	9816      	ldr	r0, [sp, #88]	; 0x58
    cf40:	f8cd 0be8 	str.w	r0, [sp, #3048]	; 0xbe8
    cf44:	9915      	ldr	r1, [sp, #84]	; 0x54
    cf46:	f8cd 1bec 	str.w	r1, [sp, #3052]	; 0xbec
    cf4a:	e7ff      	b.n	cf4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    cf4c:	f60d 30e8 	addw	r0, sp, #3048	; 0xbe8
    cf50:	f001 fc9e 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    cf54:	f8cd 1bf4 	str.w	r1, [sp, #3060]	; 0xbf4
    cf58:	f8cd 0bf0 	str.w	r0, [sp, #3056]	; 0xbf0
    cf5c:	e7ff      	b.n	cf5e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ba>
    cf5e:	f8dd 0bf0 	ldr.w	r0, [sp, #3056]	; 0xbf0
    cf62:	2800      	cmp	r0, #0
    cf64:	d001      	beq.n	cf6a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c6>
    cf66:	e7ff      	b.n	cf68 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32c4>
    cf68:	e001      	b.n	cf6e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32ca>
        match (
    cf6a:	e151      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    cf6c:	defe      	udf	#254	; 0xfe
    cf6e:	f8dd 0bf4 	ldr.w	r0, [sp, #3060]	; 0xbf4
    cf72:	f8cd 0ca8 	str.w	r0, [sp, #3240]	; 0xca8
    cf76:	f8cd 0cac 	str.w	r0, [sp, #3244]	; 0xcac
    cf7a:	f8cd 0cb0 	str.w	r0, [sp, #3248]	; 0xcb0
                    self.mem[self.i as usize + i] = self.v[i];
    cf7e:	280f      	cmp	r0, #15
    cf80:	9014      	str	r0, [sp, #80]	; 0x50
    cf82:	f200 81a1 	bhi.w	d2c8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3624>
    cf86:	e7ff      	b.n	cf88 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32e4>
    cf88:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cf8c:	9914      	ldr	r1, [sp, #80]	; 0x50
    cf8e:	1842      	adds	r2, r0, r1
    cf90:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
    cf94:	8a03      	ldrh	r3, [r0, #16]
    cf96:	eb03 0c01 	add.w	ip, r3, r1
    cf9a:	46e6      	mov	lr, ip
    cf9c:	459c      	cmp	ip, r3
    cf9e:	9213      	str	r2, [sp, #76]	; 0x4c
    cfa0:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
    cfa4:	f0c0 8199 	bcc.w	d2da <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3636>
    cfa8:	e7ff      	b.n	cfaa <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3306>
    cfaa:	2000      	movs	r0, #0
    cfac:	9912      	ldr	r1, [sp, #72]	; 0x48
    cfae:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    cfb2:	f040 819e 	bne.w	d2f2 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x364e>
    cfb6:	e7ff      	b.n	cfb8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3314>
    cfb8:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    cfbc:	9912      	ldr	r1, [sp, #72]	; 0x48
    cfbe:	1842      	adds	r2, r0, r1
    cfc0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cfc2:	f882 3047 	strb.w	r3, [r2, #71]	; 0x47
                for i in 0..(x + 1) {
    cfc6:	e7c1      	b.n	cf4c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x32a8>
    cfc8:	2005      	movs	r0, #5
    cfca:	f8cd 0bf8 	str.w	r0, [sp, #3064]	; 0xbf8
    cfce:	f64d 7030 	movw	r0, #57136	; 0xdf30
    cfd2:	f2c0 0001 	movt	r0, #1
    cfd6:	6801      	ldr	r1, [r0, #0]
    cfd8:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    cfdc:	f005 fdbc 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    cfe0:	9011      	str	r0, [sp, #68]	; 0x44
    cfe2:	e01f      	b.n	d024 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3380>
    cfe4:	2001      	movs	r0, #1
    cfe6:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cfea:	e015      	b.n	d018 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cfec:	2000      	movs	r0, #0
    cfee:	f88d 0bff 	strb.w	r0, [sp, #3071]	; 0xbff
    cff2:	e011      	b.n	d018 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3374>
    cff4:	2000      	movs	r0, #0
    cff6:	f88d 0ebb 	strb.w	r0, [sp, #3771]	; 0xebb
    cffa:	f89d 1ebb 	ldrb.w	r1, [sp, #3771]	; 0xebb
    cffe:	f643 2050 	movw	r0, #14928	; 0x3a50
    d002:	f2c2 0000 	movt	r0, #8192	; 0x2000
    d006:	f005 fdb3 	bl	12b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>
    d00a:	f8cd 0ebc 	str.w	r0, [sp, #3772]	; 0xebc
    d00e:	f8dd 0ebc 	ldr.w	r0, [sp, #3772]	; 0xebc
    d012:	f8cd 0c00 	str.w	r0, [sp, #3072]	; 0xc00
    d016:	e00a      	b.n	d02e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x338a>
    d018:	f89d 0bff 	ldrb.w	r0, [sp, #3071]	; 0xbff
    d01c:	07c0      	lsls	r0, r0, #31
    d01e:	2800      	cmp	r0, #0
    d020:	d112      	bne.n	d048 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33a4>
    d022:	e055      	b.n	d0d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
    d024:	9811      	ldr	r0, [sp, #68]	; 0x44
    d026:	07c1      	lsls	r1, r0, #31
    d028:	2900      	cmp	r1, #0
    d02a:	d1e3      	bne.n	cff4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3350>
    d02c:	e7de      	b.n	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
    d02e:	f60d 30f8 	addw	r0, sp, #3064	; 0xbf8
    d032:	f50d 6140 	add.w	r1, sp, #3072	; 0xc00
    d036:	f005 fd8f 	bl	12b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>
    d03a:	9010      	str	r0, [sp, #64]	; 0x40
    d03c:	e7ff      	b.n	d03e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x339a>
    d03e:	9810      	ldr	r0, [sp, #64]	; 0x40
    d040:	07c1      	lsls	r1, r0, #31
    d042:	2900      	cmp	r1, #0
    d044:	d1ce      	bne.n	cfe4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3340>
    d046:	e7d1      	b.n	cfec <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3348>
                trace!("[{:04x}] LD Vx, [I]", self.pc);
    d048:	f64d 7054 	movw	r0, #57172	; 0xdf54
    d04c:	f2c0 0001 	movt	r0, #1
    d050:	6801      	ldr	r1, [r0, #0]
    d052:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d056:	f100 0212 	add.w	r2, r0, #18
    d05a:	f8cd 2c24 	str.w	r2, [sp, #3108]	; 0xc24
    d05e:	f8dd 2c24 	ldr.w	r2, [sp, #3108]	; 0xc24
    d062:	f8cd 2c8c 	str.w	r2, [sp, #3212]	; 0xc8c
    d066:	f248 23bf 	movw	r3, #33471	; 0x82bf
    d06a:	f2c0 0301 	movt	r3, #1
    d06e:	4610      	mov	r0, r2
    d070:	910f      	str	r1, [sp, #60]	; 0x3c
    d072:	4619      	mov	r1, r3
    d074:	f004 fe8e 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d078:	900e      	str	r0, [sp, #56]	; 0x38
    d07a:	910d      	str	r1, [sp, #52]	; 0x34
    d07c:	e7ff      	b.n	d07e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x33da>
    d07e:	980e      	ldr	r0, [sp, #56]	; 0x38
    d080:	f8cd 0c1c 	str.w	r0, [sp, #3100]	; 0xc1c
    d084:	990d      	ldr	r1, [sp, #52]	; 0x34
    d086:	f8cd 1c20 	str.w	r1, [sp, #3104]	; 0xc20
    d08a:	f64d 7278 	movw	r2, #57208	; 0xdf78
    d08e:	f2c0 0201 	movt	r2, #1
    d092:	6812      	ldr	r2, [r2, #0]
    d094:	466b      	mov	r3, sp
    d096:	f04f 0c01 	mov.w	ip, #1
    d09a:	f8c3 c008 	str.w	ip, [r3, #8]
    d09e:	605a      	str	r2, [r3, #4]
    d0a0:	f8c3 c000 	str.w	ip, [r3]
    d0a4:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d0a8:	2202      	movs	r2, #2
    d0aa:	f60d 431c 	addw	r3, sp, #3100	; 0xc1c
    d0ae:	990f      	ldr	r1, [sp, #60]	; 0x3c
    d0b0:	f000 ff1b 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d0b4:	e7ff      	b.n	d0b6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3412>
    d0b6:	f8dd 1bf8 	ldr.w	r1, [sp, #3064]	; 0xbf8
    d0ba:	f64d 70b8 	movw	r0, #57272	; 0xdfb8
    d0be:	f2c0 0001 	movt	r0, #1
    d0c2:	6802      	ldr	r2, [r0, #0]
    d0c4:	f60d 4004 	addw	r0, sp, #3076	; 0xc04
    d0c8:	f001 fedb 	bl	ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>
    d0cc:	e7ff      	b.n	d0ce <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342a>
    d0ce:	e7ff      	b.n	d0d0 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x342c>
                let x = x as usize;
    d0d0:	f8dd 0468 	ldr.w	r0, [sp, #1128]	; 0x468
    d0d4:	f8cd 0c90 	str.w	r0, [sp, #3216]	; 0xc90
                for i in 0..(x + 1) {
    d0d8:	1c41      	adds	r1, r0, #1
    d0da:	460a      	mov	r2, r1
    d0dc:	4281      	cmp	r1, r0
    d0de:	920c      	str	r2, [sp, #48]	; 0x30
    d0e0:	f0c0 80bb 	bcc.w	d25a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35b6>
    d0e4:	e7ff      	b.n	d0e6 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3442>
    d0e6:	2000      	movs	r0, #0
    d0e8:	f8cd 0c28 	str.w	r0, [sp, #3112]	; 0xc28
    d0ec:	980c      	ldr	r0, [sp, #48]	; 0x30
    d0ee:	f8cd 0c2c 	str.w	r0, [sp, #3116]	; 0xc2c
    d0f2:	f8dd 0c28 	ldr.w	r0, [sp, #3112]	; 0xc28
    d0f6:	f8dd 1c2c 	ldr.w	r1, [sp, #3116]	; 0xc2c
    d0fa:	f001 fc54 	bl	e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>
    d0fe:	900b      	str	r0, [sp, #44]	; 0x2c
    d100:	910a      	str	r1, [sp, #40]	; 0x28
    d102:	e7ff      	b.n	d104 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3460>
    d104:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d106:	f8cd 0c30 	str.w	r0, [sp, #3120]	; 0xc30
    d10a:	990a      	ldr	r1, [sp, #40]	; 0x28
    d10c:	f8cd 1c34 	str.w	r1, [sp, #3124]	; 0xc34
    d110:	e7ff      	b.n	d112 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d112:	f50d 6043 	add.w	r0, sp, #3120	; 0xc30
    d116:	f001 fbbb 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    d11a:	f8cd 1c3c 	str.w	r1, [sp, #3132]	; 0xc3c
    d11e:	f8cd 0c38 	str.w	r0, [sp, #3128]	; 0xc38
    d122:	e7ff      	b.n	d124 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3480>
    d124:	f8dd 0c38 	ldr.w	r0, [sp, #3128]	; 0xc38
    d128:	2800      	cmp	r0, #0
    d12a:	d001      	beq.n	d130 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348c>
    d12c:	e7ff      	b.n	d12e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x348a>
    d12e:	e001      	b.n	d134 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3490>
        match (
    d130:	e06e      	b.n	d210 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x356c>
                for i in 0..(x + 1) {
    d132:	defe      	udf	#254	; 0xfe
    d134:	f8dd 0c3c 	ldr.w	r0, [sp, #3132]	; 0xc3c
    d138:	f8cd 0c94 	str.w	r0, [sp, #3220]	; 0xc94
    d13c:	f8cd 0c98 	str.w	r0, [sp, #3224]	; 0xc98
    d140:	f8cd 0c9c 	str.w	r0, [sp, #3228]	; 0xc9c
                    self.v[i] = self.mem[self.i as usize + i];
    d144:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
    d148:	8a0a      	ldrh	r2, [r1, #16]
    d14a:	1813      	adds	r3, r2, r0
    d14c:	469c      	mov	ip, r3
    d14e:	4293      	cmp	r3, r2
    d150:	9009      	str	r0, [sp, #36]	; 0x24
    d152:	f8cd c020 	str.w	ip, [sp, #32]
    d156:	f0c0 808c 	bcc.w	d272 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35ce>
    d15a:	e7ff      	b.n	d15c <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34b8>
    d15c:	2000      	movs	r0, #0
    d15e:	9908      	ldr	r1, [sp, #32]
    d160:	ebb0 3f11 	cmp.w	r0, r1, lsr #12
    d164:	f040 8091 	bne.w	d28a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35e6>
    d168:	e7ff      	b.n	d16a <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34c6>
    d16a:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d16e:	9908      	ldr	r1, [sp, #32]
    d170:	1842      	adds	r2, r0, r1
    d172:	f892 2047 	ldrb.w	r2, [r2, #71]	; 0x47
    d176:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d178:	2b0f      	cmp	r3, #15
    d17a:	9207      	str	r2, [sp, #28]
    d17c:	f200 808f 	bhi.w	d29e <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x35fa>
    d180:	e7ff      	b.n	d182 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x34de>
    d182:	f8dd 0490 	ldr.w	r0, [sp, #1168]	; 0x490
    d186:	9909      	ldr	r1, [sp, #36]	; 0x24
    d188:	1842      	adds	r2, r0, r1
    d18a:	9b07      	ldr	r3, [sp, #28]
    d18c:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
                for i in 0..(x + 1) {
    d190:	e7bf      	b.n	d112 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x346e>
    d192:	f248 21bf 	movw	r1, #33471	; 0x82bf
    d196:	f2c0 0101 	movt	r1, #1
    d19a:	f8dd 0430 	ldr.w	r0, [sp, #1072]	; 0x430
    d19e:	f004 fdf9 	bl	11d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>
    d1a2:	9006      	str	r0, [sp, #24]
    d1a4:	9105      	str	r1, [sp, #20]
    d1a6:	e7ff      	b.n	d1a8 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3504>
    d1a8:	f8dd 042c 	ldr.w	r0, [sp, #1068]	; 0x42c
    d1ac:	f8cd 0c58 	str.w	r0, [sp, #3160]	; 0xc58
    d1b0:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
    d1b4:	f8cd 1c5c 	str.w	r1, [sp, #3164]	; 0xc5c
    d1b8:	9a06      	ldr	r2, [sp, #24]
    d1ba:	f8cd 2c60 	str.w	r2, [sp, #3168]	; 0xc60
    d1be:	9b05      	ldr	r3, [sp, #20]
    d1c0:	f8cd 3c64 	str.w	r3, [sp, #3172]	; 0xc64
    d1c4:	f64e 3c1c 	movw	ip, #60188	; 0xeb1c
    d1c8:	f2c0 0c01 	movt	ip, #1
    d1cc:	f8dc c000 	ldr.w	ip, [ip]
    d1d0:	46ee      	mov	lr, sp
    d1d2:	2402      	movs	r4, #2
    d1d4:	f8ce 4008 	str.w	r4, [lr, #8]
    d1d8:	f8ce c004 	str.w	ip, [lr, #4]
    d1dc:	f8ce 4000 	str.w	r4, [lr]
    d1e0:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d1e4:	f60d 4358 	addw	r3, sp, #3160	; 0xc58
    d1e8:	f8dd 1434 	ldr.w	r1, [sp, #1076]	; 0x434
    d1ec:	4622      	mov	r2, r4
    d1ee:	f000 fe7c 	bl	deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>
    d1f2:	e7ff      	b.n	d1f4 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3550>
    d1f4:	f64e 3040 	movw	r0, #60224	; 0xeb40
    d1f8:	f2c0 0001 	movt	r0, #1
    d1fc:	f009 fc4b 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    d200:	9004      	str	r0, [sp, #16]
    d202:	e7ff      	b.n	d204 <_ZN8libchip814Chip8$LT$T$GT$4eval17habfc2545a0b51443E+0x3560>
    d204:	f50d 6044 	add.w	r0, sp, #3136	; 0xc40
    d208:	9904      	ldr	r1, [sp, #16]
    d20a:	f009 fc81 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    d20e:	defe      	udf	#254	; 0xfe
        }
    }
    d210:	f50d 6d6c 	add.w	sp, sp, #3776	; 0xec0
    d214:	bd70      	pop	{r4, r5, r6, pc}
        let h = self.mem[self.pc as usize] as u16;
    d216:	f64d 60d4 	movw	r0, #57044	; 0xded4
    d21a:	f2c0 0001 	movt	r0, #1
    d21e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d222:	f8dd 148c 	ldr.w	r1, [sp, #1164]	; 0x48c
    d226:	f009 fc53 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d22a:	defe      	udf	#254	; 0xfe
        let l = self.mem[(self.pc + 1) as usize] as u16;
    d22c:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d230:	f2c0 0001 	movt	r0, #1
    d234:	f64d 62e4 	movw	r2, #57060	; 0xdee4
    d238:	f2c0 0201 	movt	r2, #1
    d23c:	211c      	movs	r1, #28
    d23e:	f009 fc31 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d242:	defe      	udf	#254	; 0xfe
    d244:	f64d 701c 	movw	r0, #57116	; 0xdf1c
    d248:	f2c0 0001 	movt	r0, #1
    d24c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d250:	f8dd 1480 	ldr.w	r1, [sp, #1152]	; 0x480
    d254:	f009 fc3c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d258:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d25a:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d25e:	f2c0 0001 	movt	r0, #1
    d262:	f64d 72bc 	movw	r2, #57276	; 0xdfbc
    d266:	f2c0 0201 	movt	r2, #1
    d26a:	211c      	movs	r1, #28
    d26c:	f009 fc1a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d270:	defe      	udf	#254	; 0xfe
                    self.v[i] = self.mem[self.i as usize + i];
    d272:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d276:	f2c0 0001 	movt	r0, #1
    d27a:	f64d 72cc 	movw	r2, #57292	; 0xdfcc
    d27e:	f2c0 0201 	movt	r2, #1
    d282:	211c      	movs	r1, #28
    d284:	f009 fc0e 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d288:	defe      	udf	#254	; 0xfe
    d28a:	f64d 70dc 	movw	r0, #57308	; 0xdfdc
    d28e:	f2c0 0001 	movt	r0, #1
    d292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d296:	9908      	ldr	r1, [sp, #32]
    d298:	f009 fc1a 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d29c:	defe      	udf	#254	; 0xfe
    d29e:	f64d 70ec 	movw	r0, #57324	; 0xdfec
    d2a2:	f2c0 0001 	movt	r0, #1
    d2a6:	2210      	movs	r2, #16
    d2a8:	9909      	ldr	r1, [sp, #36]	; 0x24
    d2aa:	f009 fc11 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2ae:	defe      	udf	#254	; 0xfe
                for i in 0..(x + 1) {
    d2b0:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d2b4:	f2c0 0001 	movt	r0, #1
    d2b8:	f24e 023c 	movw	r2, #57404	; 0xe03c
    d2bc:	f2c0 0201 	movt	r2, #1
    d2c0:	211c      	movs	r1, #28
    d2c2:	f009 fbef 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2c6:	defe      	udf	#254	; 0xfe
                    self.mem[self.i as usize + i] = self.v[i];
    d2c8:	f24e 004c 	movw	r0, #57420	; 0xe04c
    d2cc:	f2c0 0001 	movt	r0, #1
    d2d0:	2210      	movs	r2, #16
    d2d2:	9914      	ldr	r1, [sp, #80]	; 0x50
    d2d4:	f009 fbfc 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d2d8:	defe      	udf	#254	; 0xfe
    d2da:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d2de:	f2c0 0001 	movt	r0, #1
    d2e2:	f24e 025c 	movw	r2, #57436	; 0xe05c
    d2e6:	f2c0 0201 	movt	r2, #1
    d2ea:	211c      	movs	r1, #28
    d2ec:	f009 fbda 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d2f0:	defe      	udf	#254	; 0xfe
    d2f2:	f24e 006c 	movw	r0, #57452	; 0xe06c
    d2f6:	f2c0 0001 	movt	r0, #1
    d2fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d2fe:	9912      	ldr	r1, [sp, #72]	; 0x48
    d300:	f009 fbe6 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d304:	defe      	udf	#254	; 0xfe
                let bcd = self.v[x];
    d306:	f24e 00bc 	movw	r0, #57532	; 0xe0bc
    d30a:	f2c0 0001 	movt	r0, #1
    d30e:	2210      	movs	r2, #16
    d310:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d314:	f009 fbdc 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d318:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize] = (bcd / 100) % 10;
    d31a:	f24e 00cc 	movw	r0, #57548	; 0xe0cc
    d31e:	f2c0 0001 	movt	r0, #1
    d322:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d326:	9920      	ldr	r1, [sp, #128]	; 0x80
    d328:	f009 fbd2 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d32c:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 1] = (bcd / 10) % 10;
    d32e:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d332:	f2c0 0001 	movt	r0, #1
    d336:	f24e 02dc 	movw	r2, #57564	; 0xe0dc
    d33a:	f2c0 0201 	movt	r2, #1
    d33e:	211c      	movs	r1, #28
    d340:	f009 fbb0 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d344:	defe      	udf	#254	; 0xfe
    d346:	f24e 00ec 	movw	r0, #57580	; 0xe0ec
    d34a:	f2c0 0001 	movt	r0, #1
    d34e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d352:	991e      	ldr	r1, [sp, #120]	; 0x78
    d354:	f009 fbbc 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d358:	defe      	udf	#254	; 0xfe
                self.mem[self.i as usize + 2] = bcd % 10;
    d35a:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d35e:	f2c0 0001 	movt	r0, #1
    d362:	f24e 02fc 	movw	r2, #57596	; 0xe0fc
    d366:	f2c0 0201 	movt	r2, #1
    d36a:	211c      	movs	r1, #28
    d36c:	f009 fb9a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d370:	defe      	udf	#254	; 0xfe
    d372:	f24e 100c 	movw	r0, #57612	; 0xe10c
    d376:	f2c0 0001 	movt	r0, #1
    d37a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d37e:	991d      	ldr	r1, [sp, #116]	; 0x74
    d380:	f009 fba6 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d384:	defe      	udf	#254	; 0xfe
                self.i = (self.v[x] * 5).into();
    d386:	f24e 105c 	movw	r0, #57692	; 0xe15c
    d38a:	f2c0 0001 	movt	r0, #1
    d38e:	2210      	movs	r2, #16
    d390:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d394:	f009 fb9c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d398:	defe      	udf	#254	; 0xfe
    d39a:	f24e 1080 	movw	r0, #57728	; 0xe180
    d39e:	f2c0 0001 	movt	r0, #1
    d3a2:	f24e 126c 	movw	r2, #57708	; 0xe16c
    d3a6:	f2c0 0201 	movt	r2, #1
    d3aa:	2121      	movs	r1, #33	; 0x21
    d3ac:	f009 fb7a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d3b0:	defe      	udf	#254	; 0xfe
                self.i = self.i.wrapping_add(self.v[x].into());
    d3b2:	f24e 10e0 	movw	r0, #57824	; 0xe1e0
    d3b6:	f2c0 0001 	movt	r0, #1
    d3ba:	2210      	movs	r2, #16
    d3bc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3c0:	f009 fb86 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3c4:	defe      	udf	#254	; 0xfe
                self.st = self.v[x];
    d3c6:	f24e 2030 	movw	r0, #57904	; 0xe230
    d3ca:	f2c0 0001 	movt	r0, #1
    d3ce:	2210      	movs	r2, #16
    d3d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3d4:	f009 fb7c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3d8:	defe      	udf	#254	; 0xfe
                self.dt = self.v[x];
    d3da:	f24e 2080 	movw	r0, #57984	; 0xe280
    d3de:	f2c0 0001 	movt	r0, #1
    d3e2:	2210      	movs	r2, #16
    d3e4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3e8:	f009 fb72 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d3ec:	defe      	udf	#254	; 0xfe
                self.v[x] = self.waitkey();
    d3ee:	f24e 20d0 	movw	r0, #58064	; 0xe2d0
    d3f2:	f2c0 0001 	movt	r0, #1
    d3f6:	2210      	movs	r2, #16
    d3f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d3fc:	f009 fb68 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d400:	defe      	udf	#254	; 0xfe
                self.v[x] = self.dt;
    d402:	f24e 3020 	movw	r0, #58144	; 0xe320
    d406:	f2c0 0001 	movt	r0, #1
    d40a:	2210      	movs	r2, #16
    d40c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d410:	f009 fb5e 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d414:	defe      	udf	#254	; 0xfe
                if !self.hw.key(self.v[x]) {
    d416:	f24e 3070 	movw	r0, #58224	; 0xe370
    d41a:	f2c0 0001 	movt	r0, #1
    d41e:	2210      	movs	r2, #16
    d420:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d424:	f009 fb54 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d428:	defe      	udf	#254	; 0xfe
                if self.hw.key(self.v[x]) {
    d42a:	f24e 30b4 	movw	r0, #58292	; 0xe3b4
    d42e:	f2c0 0001 	movt	r0, #1
    d432:	2210      	movs	r2, #16
    d434:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d438:	f009 fb4a 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d43c:	defe      	udf	#254	; 0xfe
                let basex = self.v[x] as usize;
    d43e:	f24e 4008 	movw	r0, #58376	; 0xe408
    d442:	f2c0 0001 	movt	r0, #1
    d446:	2210      	movs	r2, #16
    d448:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d44c:	f009 fb40 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d450:	defe      	udf	#254	; 0xfe
                let basey = self.v[y] as usize;
    d452:	f24e 4018 	movw	r0, #58392	; 0xe418
    d456:	f2c0 0001 	movt	r0, #1
    d45a:	2210      	movs	r2, #16
    d45c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d460:	f009 fb36 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d464:	defe      	udf	#254	; 0xfe
                    let b = self.mem[self.i as usize + y];
    d466:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d46a:	f2c0 0001 	movt	r0, #1
    d46e:	f24e 4228 	movw	r2, #58408	; 0xe428
    d472:	f2c0 0201 	movt	r2, #1
    d476:	211c      	movs	r1, #28
    d478:	f009 fb14 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d47c:	defe      	udf	#254	; 0xfe
    d47e:	f24e 4038 	movw	r0, #58424	; 0xe438
    d482:	f2c0 0001 	movt	r0, #1
    d486:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    d48a:	9967      	ldr	r1, [sp, #412]	; 0x19c
    d48c:	f009 fb20 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d490:	defe      	udf	#254	; 0xfe
                    let vramy = (y + basey) % h;
    d492:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d496:	f2c0 0001 	movt	r0, #1
    d49a:	f24e 4248 	movw	r2, #58440	; 0xe448
    d49e:	f2c0 0201 	movt	r2, #1
    d4a2:	211c      	movs	r1, #28
    d4a4:	f009 fafe 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d4a8:	defe      	udf	#254	; 0xfe
    d4aa:	f24e 4060 	movw	r0, #58464	; 0xe460
    d4ae:	f2c0 0001 	movt	r0, #1
    d4b2:	f24e 4248 	movw	r2, #58440	; 0xe448
    d4b6:	f2c0 0201 	movt	r2, #1
    d4ba:	2139      	movs	r1, #57	; 0x39
    d4bc:	f009 faf2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d4c0:	defe      	udf	#254	; 0xfe
                        let vramx = (x + basex) % w;
    d4c2:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d4c6:	f2c0 0001 	movt	r0, #1
    d4ca:	f24e 429c 	movw	r2, #58524	; 0xe49c
    d4ce:	f2c0 0201 	movt	r2, #1
    d4d2:	211c      	movs	r1, #28
    d4d4:	f009 fae6 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d4d8:	defe      	udf	#254	; 0xfe
    d4da:	f24e 4060 	movw	r0, #58464	; 0xe460
    d4de:	f2c0 0001 	movt	r0, #1
    d4e2:	f24e 429c 	movw	r2, #58524	; 0xe49c
    d4e6:	f2c0 0201 	movt	r2, #1
    d4ea:	2139      	movs	r1, #57	; 0x39
    d4ec:	f009 fada 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d4f0:	defe      	udf	#254	; 0xfe
                        let src = (b & 1 << (7 - x)) > 0;
    d4f2:	f24e 40c0 	movw	r0, #58560	; 0xe4c0
    d4f6:	f2c0 0001 	movt	r0, #1
    d4fa:	f24e 42ac 	movw	r2, #58540	; 0xe4ac
    d4fe:	f2c0 0201 	movt	r2, #1
    d502:	2121      	movs	r1, #33	; 0x21
    d504:	f009 face 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d508:	defe      	udf	#254	; 0xfe
    d50a:	f24e 5000 	movw	r0, #58624	; 0xe500
    d50e:	f2c0 0001 	movt	r0, #1
    d512:	f24e 42e4 	movw	r2, #58596	; 0xe4e4
    d516:	f2c0 0201 	movt	r2, #1
    d51a:	2123      	movs	r1, #35	; 0x23
    d51c:	f009 fac2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d520:	defe      	udf	#254	; 0xfe
                self.v[x] = self.hw.rand() & kk;
    d522:	f24e 5064 	movw	r0, #58724	; 0xe564
    d526:	f2c0 0001 	movt	r0, #1
    d52a:	2210      	movs	r2, #16
    d52c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d530:	f009 face 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d534:	defe      	udf	#254	; 0xfe
                if self.v[x] != self.v[y] {
    d536:	f24e 6034 	movw	r0, #58932	; 0xe634
    d53a:	f2c0 0001 	movt	r0, #1
    d53e:	2210      	movs	r2, #16
    d540:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d544:	f009 fac4 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d548:	defe      	udf	#254	; 0xfe
    d54a:	f24e 6044 	movw	r0, #58948	; 0xe644
    d54e:	f2c0 0001 	movt	r0, #1
    d552:	2210      	movs	r2, #16
    d554:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d558:	f009 faba 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d55c:	defe      	udf	#254	; 0xfe
                self.v[0xf] = (self.v[x] & 0x80) >> 7;
    d55e:	f24e 6094 	movw	r0, #59028	; 0xe694
    d562:	f2c0 0001 	movt	r0, #1
    d566:	2210      	movs	r2, #16
    d568:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d56c:	f009 fab0 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d570:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shl(1);
    d572:	f24e 60a4 	movw	r0, #59044	; 0xe6a4
    d576:	f2c0 0001 	movt	r0, #1
    d57a:	2210      	movs	r2, #16
    d57c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d580:	f009 faa6 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d584:	defe      	udf	#254	; 0xfe
    d586:	f24e 60b4 	movw	r0, #59060	; 0xe6b4
    d58a:	f2c0 0001 	movt	r0, #1
    d58e:	2210      	movs	r2, #16
    d590:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d594:	f009 fa9c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d598:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[y].overflowing_sub(self.v[x]);
    d59a:	f24e 7008 	movw	r0, #59144	; 0xe708
    d59e:	f2c0 0001 	movt	r0, #1
    d5a2:	2210      	movs	r2, #16
    d5a4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d5a8:	f009 fa92 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5ac:	defe      	udf	#254	; 0xfe
    d5ae:	f24e 7018 	movw	r0, #59160	; 0xe718
    d5b2:	f2c0 0001 	movt	r0, #1
    d5b6:	2210      	movs	r2, #16
    d5b8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5bc:	f009 fa88 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5c0:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d5c2:	f24e 7028 	movw	r0, #59176	; 0xe728
    d5c6:	f2c0 0001 	movt	r0, #1
    d5ca:	2210      	movs	r2, #16
    d5cc:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5d0:	f009 fa7e 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5d4:	defe      	udf	#254	; 0xfe
                self.v[0xf] = self.v[x] & 1;
    d5d6:	f24e 7078 	movw	r0, #59256	; 0xe778
    d5da:	f2c0 0001 	movt	r0, #1
    d5de:	2210      	movs	r2, #16
    d5e0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5e4:	f009 fa74 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5e8:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_shr(1);
    d5ea:	f24e 7088 	movw	r0, #59272	; 0xe788
    d5ee:	f2c0 0001 	movt	r0, #1
    d5f2:	2210      	movs	r2, #16
    d5f4:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d5f8:	f009 fa6a 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d5fc:	defe      	udf	#254	; 0xfe
    d5fe:	f24e 7098 	movw	r0, #59288	; 0xe798
    d602:	f2c0 0001 	movt	r0, #1
    d606:	2210      	movs	r2, #16
    d608:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d60c:	f009 fa60 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d610:	defe      	udf	#254	; 0xfe
                let (v, b) = self.v[x].overflowing_sub(self.v[y]);
    d612:	f24e 70e8 	movw	r0, #59368	; 0xe7e8
    d616:	f2c0 0001 	movt	r0, #1
    d61a:	2210      	movs	r2, #16
    d61c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d620:	f009 fa56 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d624:	defe      	udf	#254	; 0xfe
    d626:	f24e 70f8 	movw	r0, #59384	; 0xe7f8
    d62a:	f2c0 0001 	movt	r0, #1
    d62e:	2210      	movs	r2, #16
    d630:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d634:	f009 fa4c 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d638:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d63a:	f64e 0008 	movw	r0, #59400	; 0xe808
    d63e:	f2c0 0001 	movt	r0, #1
    d642:	2210      	movs	r2, #16
    d644:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d648:	f009 fa42 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d64c:	defe      	udf	#254	; 0xfe
                let (v, c) = self.v[x].overflowing_add(self.v[y]);
    d64e:	f64e 0058 	movw	r0, #59480	; 0xe858
    d652:	f2c0 0001 	movt	r0, #1
    d656:	2210      	movs	r2, #16
    d658:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d65c:	f009 fa38 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d660:	defe      	udf	#254	; 0xfe
    d662:	f64e 0068 	movw	r0, #59496	; 0xe868
    d666:	f2c0 0001 	movt	r0, #1
    d66a:	2210      	movs	r2, #16
    d66c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d670:	f009 fa2e 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d674:	defe      	udf	#254	; 0xfe
                self.v[x] = v;
    d676:	f64e 0078 	movw	r0, #59512	; 0xe878
    d67a:	f2c0 0001 	movt	r0, #1
    d67e:	2210      	movs	r2, #16
    d680:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d684:	f009 fa24 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d688:	defe      	udf	#254	; 0xfe
                self.v[x] ^= self.v[y];
    d68a:	f64e 00c8 	movw	r0, #59592	; 0xe8c8
    d68e:	f2c0 0001 	movt	r0, #1
    d692:	2210      	movs	r2, #16
    d694:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d698:	f009 fa1a 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d69c:	defe      	udf	#254	; 0xfe
    d69e:	f64e 00d8 	movw	r0, #59608	; 0xe8d8
    d6a2:	f2c0 0001 	movt	r0, #1
    d6a6:	2210      	movs	r2, #16
    d6a8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6ac:	f009 fa10 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6b0:	defe      	udf	#254	; 0xfe
                self.v[x] &= self.v[y];
    d6b2:	f64e 1028 	movw	r0, #59688	; 0xe928
    d6b6:	f2c0 0001 	movt	r0, #1
    d6ba:	2210      	movs	r2, #16
    d6bc:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d6c0:	f009 fa06 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6c4:	defe      	udf	#254	; 0xfe
    d6c6:	f64e 1038 	movw	r0, #59704	; 0xe938
    d6ca:	f2c0 0001 	movt	r0, #1
    d6ce:	2210      	movs	r2, #16
    d6d0:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6d4:	f009 f9fc 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6d8:	defe      	udf	#254	; 0xfe
                self.v[x] |= self.v[y];
    d6da:	f64e 1088 	movw	r0, #59784	; 0xe988
    d6de:	f2c0 0001 	movt	r0, #1
    d6e2:	2210      	movs	r2, #16
    d6e4:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d6e8:	f009 f9f2 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d6ec:	defe      	udf	#254	; 0xfe
    d6ee:	f64e 1098 	movw	r0, #59800	; 0xe998
    d6f2:	f2c0 0001 	movt	r0, #1
    d6f6:	2210      	movs	r2, #16
    d6f8:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d6fc:	f009 f9e8 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d700:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[y];
    d702:	f64e 10e8 	movw	r0, #59880	; 0xe9e8
    d706:	f2c0 0001 	movt	r0, #1
    d70a:	2210      	movs	r2, #16
    d70c:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d710:	f009 f9de 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d714:	defe      	udf	#254	; 0xfe
    d716:	f64e 10f8 	movw	r0, #59896	; 0xe9f8
    d71a:	f2c0 0001 	movt	r0, #1
    d71e:	2210      	movs	r2, #16
    d720:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d724:	f009 f9d4 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d728:	defe      	udf	#254	; 0xfe
                self.v[x] = self.v[x].wrapping_add(kk);
    d72a:	f64e 2048 	movw	r0, #59976	; 0xea48
    d72e:	f2c0 0001 	movt	r0, #1
    d732:	2210      	movs	r2, #16
    d734:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d738:	f009 f9ca 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d73c:	defe      	udf	#254	; 0xfe
    d73e:	f64e 2058 	movw	r0, #59992	; 0xea58
    d742:	f2c0 0001 	movt	r0, #1
    d746:	2210      	movs	r2, #16
    d748:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d74c:	f009 f9c0 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d750:	defe      	udf	#254	; 0xfe
                self.v[x] = kk;
    d752:	f64e 20a8 	movw	r0, #60072	; 0xeaa8
    d756:	f2c0 0001 	movt	r0, #1
    d75a:	2210      	movs	r2, #16
    d75c:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d760:	f009 f9b6 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d764:	defe      	udf	#254	; 0xfe
                if self.v[x] == self.v[y] {
    d766:	f64e 3090 	movw	r0, #60304	; 0xeb90
    d76a:	f2c0 0001 	movt	r0, #1
    d76e:	2210      	movs	r2, #16
    d770:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d774:	f009 f9ac 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d778:	defe      	udf	#254	; 0xfe
    d77a:	f64e 30a0 	movw	r0, #60320	; 0xeba0
    d77e:	f2c0 0001 	movt	r0, #1
    d782:	2210      	movs	r2, #16
    d784:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
    d788:	f009 f9a2 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d78c:	defe      	udf	#254	; 0xfe
                if self.v[x] != kk {
    d78e:	f64e 30f0 	movw	r0, #60400	; 0xebf0
    d792:	f2c0 0001 	movt	r0, #1
    d796:	2210      	movs	r2, #16
    d798:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d79c:	f009 f998 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7a0:	defe      	udf	#254	; 0xfe
                if self.v[x] == kk {
    d7a2:	f64e 4040 	movw	r0, #60480	; 0xec40
    d7a6:	f2c0 0001 	movt	r0, #1
    d7aa:	2210      	movs	r2, #16
    d7ac:	f8dd 1468 	ldr.w	r1, [sp, #1128]	; 0x468
    d7b0:	f009 f98e 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d7b4:	defe      	udf	#254	; 0xfe

0000d7b6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E>:
                for (x, y) in (0..w).map(|w| (0..h).map(move |h| (w, h))).flatten() {
    d7b6:	b580      	push	{r7, lr}
    d7b8:	b086      	sub	sp, #24
    d7ba:	9104      	str	r1, [sp, #16]
    d7bc:	9205      	str	r2, [sp, #20]
    d7be:	6809      	ldr	r1, [r1, #0]
    d7c0:	6809      	ldr	r1, [r1, #0]
    d7c2:	2300      	movs	r3, #0
    d7c4:	9301      	str	r3, [sp, #4]
    d7c6:	9102      	str	r1, [sp, #8]
    d7c8:	9203      	str	r2, [sp, #12]
    d7ca:	9901      	ldr	r1, [sp, #4]
    d7cc:	9a02      	ldr	r2, [sp, #8]
    d7ce:	9b03      	ldr	r3, [sp, #12]
    d7d0:	f005 fb4b 	bl	12e6a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>
    d7d4:	e7ff      	b.n	d7d6 <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$17h64cee1a3c11094e6E+0x20>
    d7d6:	b006      	add	sp, #24
    d7d8:	bd80      	pop	{r7, pc}

0000d7da <_ZN8libchip814Chip8$LT$T$GT$4eval28_$u7b$$u7b$closure$u7d$$u7d$28_$u7b$$u7b$closure$u7d$$u7d$17h2454dbfe6f26a106E>:
    d7da:	b084      	sub	sp, #16
    d7dc:	9002      	str	r0, [sp, #8]
    d7de:	9103      	str	r1, [sp, #12]
    d7e0:	6800      	ldr	r0, [r0, #0]
    d7e2:	9000      	str	r0, [sp, #0]
    d7e4:	9101      	str	r1, [sp, #4]
    d7e6:	9800      	ldr	r0, [sp, #0]
    d7e8:	9901      	ldr	r1, [sp, #4]
    d7ea:	b004      	add	sp, #16
    d7ec:	4770      	bx	lr

0000d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>:
    fn jump(&mut self, pc: u16) {
    d7ee:	b082      	sub	sp, #8
    d7f0:	460a      	mov	r2, r1
    d7f2:	9000      	str	r0, [sp, #0]
    d7f4:	f8ad 1006 	strh.w	r1, [sp, #6]
        self.pc = pc;
    d7f8:	8241      	strh	r1, [r0, #18]
    }
    d7fa:	b002      	add	sp, #8
    d7fc:	4770      	bx	lr

0000d7fe <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E>:
    fn load(&mut self, rom: &[u8]) {
    d7fe:	b580      	push	{r7, lr}
    d800:	b08a      	sub	sp, #40	; 0x28
    d802:	9105      	str	r1, [sp, #20]
    d804:	9206      	str	r2, [sp, #24]
    d806:	9009      	str	r0, [sp, #36]	; 0x24
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d808:	3047      	adds	r0, #71	; 0x47
    d80a:	9905      	ldr	r1, [sp, #20]
    d80c:	9a06      	ldr	r2, [sp, #24]
    d80e:	9004      	str	r0, [sp, #16]
    d810:	4608      	mov	r0, r1
    d812:	4611      	mov	r1, r2
    d814:	f001 f8a0 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    d818:	9003      	str	r0, [sp, #12]
    d81a:	e7ff      	b.n	d81c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x1e>
    d81c:	9803      	ldr	r0, [sp, #12]
    d81e:	f500 7100 	add.w	r1, r0, #512	; 0x200
    d822:	460a      	mov	r2, r1
    d824:	4281      	cmp	r1, r0
    d826:	9202      	str	r2, [sp, #8]
    d828:	d318      	bcc.n	d85c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5e>
    d82a:	e7ff      	b.n	d82c <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x2e>
    d82c:	f44f 7000 	mov.w	r0, #512	; 0x200
    d830:	9007      	str	r0, [sp, #28]
    d832:	9802      	ldr	r0, [sp, #8]
    d834:	9008      	str	r0, [sp, #32]
    d836:	9a07      	ldr	r2, [sp, #28]
    d838:	9b08      	ldr	r3, [sp, #32]
    d83a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    d83e:	9804      	ldr	r0, [sp, #16]
    d840:	f000 fb8c 	bl	df5c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>
    d844:	9001      	str	r0, [sp, #4]
    d846:	9100      	str	r1, [sp, #0]
    d848:	e7ff      	b.n	d84a <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x4c>
    d84a:	9a05      	ldr	r2, [sp, #20]
    d84c:	9b06      	ldr	r3, [sp, #24]
    d84e:	9801      	ldr	r0, [sp, #4]
    d850:	9900      	ldr	r1, [sp, #0]
    d852:	f001 fe4b 	bl	f4ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    d856:	e7ff      	b.n	d858 <_ZN8libchip814Chip8$LT$T$GT$4load17h7c66e7fc382b5f41E+0x5a>
    }
    d858:	b00a      	add	sp, #40	; 0x28
    d85a:	bd80      	pop	{r7, pc}
        self.mem[ROMBASE..ROMBASE + rom.len()].copy_from_slice(&rom);
    d85c:	f64d 7000 	movw	r0, #57088	; 0xdf00
    d860:	f2c0 0001 	movt	r0, #1
    d864:	f64e 529c 	movw	r2, #60828	; 0xed9c
    d868:	f2c0 0201 	movt	r2, #1
    d86c:	211c      	movs	r1, #28
    d86e:	f009 f919 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d872:	defe      	udf	#254	; 0xfe

0000d874 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE>:
    fn next(&mut self) {
    d874:	b580      	push	{r7, lr}
    d876:	b084      	sub	sp, #16
    d878:	9003      	str	r0, [sp, #12]
        self.jump(self.pc.wrapping_add(2));
    d87a:	8a41      	ldrh	r1, [r0, #18]
    d87c:	2202      	movs	r2, #2
    d87e:	9002      	str	r0, [sp, #8]
    d880:	4608      	mov	r0, r1
    d882:	4611      	mov	r1, r2
    d884:	f005 fa50 	bl	12d28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>
    d888:	9001      	str	r0, [sp, #4]
    d88a:	e7ff      	b.n	d88c <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x18>
    d88c:	9802      	ldr	r0, [sp, #8]
    d88e:	9901      	ldr	r1, [sp, #4]
    d890:	f7ff ffad 	bl	d7ee <_ZN8libchip814Chip8$LT$T$GT$4jump17h7de77f07aa5a546bE>
    d894:	e7ff      	b.n	d896 <_ZN8libchip814Chip8$LT$T$GT$4next17ha2ce12b4ed6e622bE+0x22>
    }
    d896:	b004      	add	sp, #16
    d898:	bd80      	pop	{r7, pc}

0000d89a <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE>:
    fn push(&mut self, item: u16) {
    d89a:	b580      	push	{r7, lr}
    d89c:	b086      	sub	sp, #24
    d89e:	460a      	mov	r2, r1
    d8a0:	9004      	str	r0, [sp, #16]
    d8a2:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.stack[self.sp as usize] = item;
    d8a6:	f890 1046 	ldrb.w	r1, [r0, #70]	; 0x46
    d8aa:	460b      	mov	r3, r1
    d8ac:	290f      	cmp	r1, #15
    d8ae:	9003      	str	r0, [sp, #12]
    d8b0:	9202      	str	r2, [sp, #8]
    d8b2:	9301      	str	r3, [sp, #4]
    d8b4:	d813      	bhi.n	d8de <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x44>
    d8b6:	e7ff      	b.n	d8b8 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x1e>
    d8b8:	9803      	ldr	r0, [sp, #12]
    d8ba:	9901      	ldr	r1, [sp, #4]
    d8bc:	eb00 0241 	add.w	r2, r0, r1, lsl #1
    d8c0:	9b02      	ldr	r3, [sp, #8]
    d8c2:	8293      	strh	r3, [r2, #20]
        self.sp = self.sp.wrapping_add(1);
    d8c4:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    d8c8:	2101      	movs	r1, #1
    d8ca:	f005 f990 	bl	12bee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>
    d8ce:	9000      	str	r0, [sp, #0]
    d8d0:	e7ff      	b.n	d8d2 <_ZN8libchip814Chip8$LT$T$GT$4push17hdbfa3ffa7a184c4eE+0x38>
    d8d2:	9800      	ldr	r0, [sp, #0]
    d8d4:	9903      	ldr	r1, [sp, #12]
    d8d6:	f881 0046 	strb.w	r0, [r1, #70]	; 0x46
    }
    d8da:	b006      	add	sp, #24
    d8dc:	bd80      	pop	{r7, pc}
        self.stack[self.sp as usize] = item;
    d8de:	f64e 50ac 	movw	r0, #60844	; 0xedac
    d8e2:	f2c0 0001 	movt	r0, #1
    d8e6:	2210      	movs	r2, #16
    d8e8:	9901      	ldr	r1, [sp, #4]
    d8ea:	f009 f8f1 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
    d8ee:	defe      	udf	#254	; 0xfe

0000d8f0 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>:
    fn tick(&mut self) {
    d8f0:	b580      	push	{r7, lr}
    d8f2:	b084      	sub	sp, #16
    d8f4:	9003      	str	r0, [sp, #12]
        if self.dt > 0 {
    d8f6:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d8fa:	2900      	cmp	r1, #0
    d8fc:	9002      	str	r0, [sp, #8]
    d8fe:	d00f      	beq.n	d920 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
    d900:	e7ff      	b.n	d902 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x12>
            self.dt -= 1;
    d902:	9802      	ldr	r0, [sp, #8]
    d904:	f890 1044 	ldrb.w	r1, [r0, #68]	; 0x44
    d908:	3901      	subs	r1, #1
    d90a:	b2ca      	uxtb	r2, r1
    d90c:	460b      	mov	r3, r1
    d90e:	428a      	cmp	r2, r1
    d910:	9301      	str	r3, [sp, #4]
    d912:	d126      	bne.n	d962 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x72>
    d914:	e7ff      	b.n	d916 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x26>
    d916:	9801      	ldr	r0, [sp, #4]
    d918:	9902      	ldr	r1, [sp, #8]
    d91a:	f881 0044 	strb.w	r0, [r1, #68]	; 0x44
        if self.dt > 0 {
    d91e:	e7ff      	b.n	d920 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x30>
        if self.st > 0 {
    d920:	9802      	ldr	r0, [sp, #8]
    d922:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d926:	2900      	cmp	r1, #0
    d928:	d019      	beq.n	d95e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    d92a:	e7ff      	b.n	d92c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x3c>
            self.st -= 1;
    d92c:	9802      	ldr	r0, [sp, #8]
    d92e:	f890 1045 	ldrb.w	r1, [r0, #69]	; 0x45
    d932:	3901      	subs	r1, #1
    d934:	b2ca      	uxtb	r2, r1
    d936:	460b      	mov	r3, r1
    d938:	428a      	cmp	r2, r1
    d93a:	9300      	str	r3, [sp, #0]
    d93c:	d11d      	bne.n	d97a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x8a>
    d93e:	e7ff      	b.n	d940 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x50>
    d940:	9800      	ldr	r0, [sp, #0]
    d942:	9902      	ldr	r1, [sp, #8]
    d944:	f881 0045 	strb.w	r0, [r1, #69]	; 0x45
            if self.st == 0 {
    d948:	f891 2045 	ldrb.w	r2, [r1, #69]	; 0x45
    d94c:	2a00      	cmp	r2, #0
    d94e:	d105      	bne.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
    d950:	e7ff      	b.n	d952 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x62>
                self.hw.beep();
    d952:	9802      	ldr	r0, [sp, #8]
    d954:	f7fc f8ac 	bl	9ab0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$4beep17ha45cfdbdf4731cedE>
    d958:	e7ff      	b.n	d95a <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6a>
            if self.st == 0 {
    d95a:	e7ff      	b.n	d95c <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6c>
        if self.st > 0 {
    d95c:	e7ff      	b.n	d95e <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E+0x6e>
    }
    d95e:	b004      	add	sp, #16
    d960:	bd80      	pop	{r7, pc}
            self.dt -= 1;
    d962:	f24e 40c0 	movw	r0, #58560	; 0xe4c0
    d966:	f2c0 0001 	movt	r0, #1
    d96a:	f64e 52bc 	movw	r2, #60860	; 0xedbc
    d96e:	f2c0 0201 	movt	r2, #1
    d972:	2121      	movs	r1, #33	; 0x21
    d974:	f009 f896 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d978:	defe      	udf	#254	; 0xfe
            self.st -= 1;
    d97a:	f24e 40c0 	movw	r0, #58560	; 0xe4c0
    d97e:	f2c0 0001 	movt	r0, #1
    d982:	f64e 52cc 	movw	r2, #60876	; 0xedcc
    d986:	f2c0 0201 	movt	r2, #1
    d98a:	2121      	movs	r1, #33	; 0x21
    d98c:	f009 f88a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    d990:	defe      	udf	#254	; 0xfe

0000d992 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>:
    fn sched(&mut self) {
    d992:	b510      	push	{r4, lr}
    d994:	b098      	sub	sp, #96	; 0x60
    d996:	9015      	str	r0, [sp, #84]	; 0x54
        if self.hw.sched() {
    d998:	900b      	str	r0, [sp, #44]	; 0x2c
    d99a:	f7fc f88d 	bl	9ab8 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5sched17h3c52951efd018dffE>
    d99e:	900a      	str	r0, [sp, #40]	; 0x28
    d9a0:	e7ff      	b.n	d9a2 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x10>
    d9a2:	980a      	ldr	r0, [sp, #40]	; 0x28
    d9a4:	07c1      	lsls	r1, r0, #31
    d9a6:	2900      	cmp	r1, #0
    d9a8:	d005      	beq.n	d9b6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
    d9aa:	e7ff      	b.n	d9ac <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x1a>
            self.shutdown();
    d9ac:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9ae:	f000 f900 	bl	dbb2 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>
    d9b2:	e7ff      	b.n	d9b4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x22>
        if self.hw.sched() {
    d9b4:	e7ff      	b.n	d9b6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x24>
        if let Some(t) = self.time {
    d9b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9b8:	6801      	ldr	r1, [r0, #0]
    d9ba:	2901      	cmp	r1, #1
    d9bc:	d006      	beq.n	d9cc <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x3a>
    d9be:	e7ff      	b.n	d9c0 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x2e>
            self.time = Some(self.hw.clock());
    d9c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9c2:	f7fc f815 	bl	99f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d9c6:	9109      	str	r1, [sp, #36]	; 0x24
    d9c8:	9008      	str	r0, [sp, #32]
    d9ca:	e040      	b.n	da4e <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xbc>
        if let Some(t) = self.time {
    d9cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d9ce:	6881      	ldr	r1, [r0, #8]
    d9d0:	68c2      	ldr	r2, [r0, #12]
    d9d2:	9217      	str	r2, [sp, #92]	; 0x5c
    d9d4:	9116      	str	r1, [sp, #88]	; 0x58
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    d9d6:	9107      	str	r1, [sp, #28]
    d9d8:	9206      	str	r2, [sp, #24]
    d9da:	f7fc f809 	bl	99f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    d9de:	9105      	str	r1, [sp, #20]
    d9e0:	9004      	str	r0, [sp, #16]
    d9e2:	e7ff      	b.n	d9e4 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x52>
    d9e4:	9804      	ldr	r0, [sp, #16]
    d9e6:	9905      	ldr	r1, [sp, #20]
    d9e8:	9a07      	ldr	r2, [sp, #28]
    d9ea:	9b06      	ldr	r3, [sp, #24]
    d9ec:	f005 f9be 	bl	12d6c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>
    d9f0:	9103      	str	r1, [sp, #12]
    d9f2:	9002      	str	r0, [sp, #8]
    d9f4:	e7ff      	b.n	d9f6 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x64>
    d9f6:	f245 002b 	movw	r0, #20523	; 0x502b
    d9fa:	f2c0 00fe 	movt	r0, #254	; 0xfe
    d9fe:	9902      	ldr	r1, [sp, #8]
    da00:	1a08      	subs	r0, r1, r0
    da02:	9a03      	ldr	r2, [sp, #12]
    da04:	f172 0300 	sbcs.w	r3, r2, #0
    da08:	d320      	bcc.n	da4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
    da0a:	e7ff      	b.n	da0c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x7a>
                self.tick();
    da0c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    da0e:	f7ff ff6f 	bl	d8f0 <_ZN8libchip814Chip8$LT$T$GT$4tick17h6e85df5ee3f96a17E>
    da12:	e7ff      	b.n	da14 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x82>
                self.time = Some(self.hw.clock());
    da14:	980b      	ldr	r0, [sp, #44]	; 0x2c
    da16:	f7fb ffeb 	bl	99f0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$5clock17hb774f1e387d11574E>
    da1a:	9101      	str	r1, [sp, #4]
    da1c:	9000      	str	r0, [sp, #0]
    da1e:	e7ff      	b.n	da20 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0x8e>
    da20:	9800      	ldr	r0, [sp, #0]
    da22:	900e      	str	r0, [sp, #56]	; 0x38
    da24:	9901      	ldr	r1, [sp, #4]
    da26:	910f      	str	r1, [sp, #60]	; 0x3c
    da28:	2200      	movs	r2, #0
    da2a:	920d      	str	r2, [sp, #52]	; 0x34
    da2c:	2201      	movs	r2, #1
    da2e:	920c      	str	r2, [sp, #48]	; 0x30
    da30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    da32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da34:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
    da38:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    da3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    da3e:	6063      	str	r3, [r4, #4]
    da40:	6022      	str	r2, [r4, #0]
    da42:	f8c4 e00c 	str.w	lr, [r4, #12]
    da46:	f8c4 c008 	str.w	ip, [r4, #8]
            if self.hw.clock().wrapping_sub(t) > 1000_000_000 / 60 {
    da4a:	e7ff      	b.n	da4c <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xba>
        if let Some(t) = self.time {
    da4c:	e015      	b.n	da7a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
            self.time = Some(self.hw.clock());
    da4e:	9808      	ldr	r0, [sp, #32]
    da50:	9012      	str	r0, [sp, #72]	; 0x48
    da52:	9909      	ldr	r1, [sp, #36]	; 0x24
    da54:	9113      	str	r1, [sp, #76]	; 0x4c
    da56:	2200      	movs	r2, #0
    da58:	9211      	str	r2, [sp, #68]	; 0x44
    da5a:	2201      	movs	r2, #1
    da5c:	9210      	str	r2, [sp, #64]	; 0x40
    da5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    da60:	9b11      	ldr	r3, [sp, #68]	; 0x44
    da62:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
    da66:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
    da6a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    da6c:	6063      	str	r3, [r4, #4]
    da6e:	6022      	str	r2, [r4, #0]
    da70:	f8c4 e00c 	str.w	lr, [r4, #12]
    da74:	f8c4 c008 	str.w	ip, [r4, #8]
        if let Some(t) = self.time {
    da78:	e7ff      	b.n	da7a <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E+0xe8>
    }
    da7a:	b018      	add	sp, #96	; 0x60
    da7c:	bd10      	pop	{r4, pc}

0000da7e <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E>:
    fn setup(&mut self) {
    da7e:	b580      	push	{r7, lr}
    da80:	b088      	sub	sp, #32
    da82:	9007      	str	r0, [sp, #28]
    da84:	f44f 7100 	mov.w	r1, #512	; 0x200
        self.pc = ENTRY;
    da88:	8241      	strh	r1, [r0, #18]
        self.hw.vram_setsize(DISPS);
    da8a:	f64d 7194 	movw	r1, #57236	; 0xdf94
    da8e:	f2c0 0101 	movt	r1, #1
    da92:	680a      	ldr	r2, [r1, #0]
    da94:	6849      	ldr	r1, [r1, #4]
    da96:	9005      	str	r0, [sp, #20]
    da98:	9104      	str	r1, [sp, #16]
    da9a:	4611      	mov	r1, r2
    da9c:	9a04      	ldr	r2, [sp, #16]
    da9e:	f7fb ff97 	bl	99d0 <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$12vram_setsize17hc15bb8a8dbf2b592E>
    daa2:	e7ff      	b.n	daa4 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x26>
        self.mem[..CHARBUF.len()].copy_from_slice(&CHARBUF);
    daa4:	9805      	ldr	r0, [sp, #20]
    daa6:	f100 0147 	add.w	r1, r0, #71	; 0x47
    daaa:	f64e 6098 	movw	r0, #61080	; 0xee98
    daae:	f2c0 0001 	movt	r0, #1
    dab2:	2250      	movs	r2, #80	; 0x50
    dab4:	9103      	str	r1, [sp, #12]
    dab6:	4611      	mov	r1, r2
    dab8:	f000 ff4e 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    dabc:	9002      	str	r0, [sp, #8]
    dabe:	e7ff      	b.n	dac0 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x42>
    dac0:	9802      	ldr	r0, [sp, #8]
    dac2:	9006      	str	r0, [sp, #24]
    dac4:	9a06      	ldr	r2, [sp, #24]
    dac6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    daca:	9803      	ldr	r0, [sp, #12]
    dacc:	f001 fe0b 	bl	f6e6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>
    dad0:	9001      	str	r0, [sp, #4]
    dad2:	9100      	str	r1, [sp, #0]
    dad4:	e7ff      	b.n	dad6 <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x58>
    dad6:	f64e 6298 	movw	r2, #61080	; 0xee98
    dada:	f2c0 0201 	movt	r2, #1
    dade:	2350      	movs	r3, #80	; 0x50
    dae0:	9801      	ldr	r0, [sp, #4]
    dae2:	9900      	ldr	r1, [sp, #0]
    dae4:	f001 fd02 	bl	f4ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>
    dae8:	e7ff      	b.n	daea <_ZN8libchip814Chip8$LT$T$GT$5setup17hf7242787e8a175a5E+0x6c>
    daea:	f241 0047 	movw	r0, #4167	; 0x1047
    daee:	2101      	movs	r1, #1
        self.running = true;
    daf0:	9a05      	ldr	r2, [sp, #20]
    daf2:	5411      	strb	r1, [r2, r0]
    }
    daf4:	b008      	add	sp, #32
    daf6:	bd80      	pop	{r7, pc}

0000daf8 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E>:
    fn waitkey(&mut self) -> u8 {
    daf8:	b580      	push	{r7, lr}
    dafa:	b08c      	sub	sp, #48	; 0x30
    dafc:	900a      	str	r0, [sp, #40]	; 0x28
        while self.running {
    dafe:	9005      	str	r0, [sp, #20]
    db00:	e7ff      	b.n	db02 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
    db02:	f241 0047 	movw	r0, #4167	; 0x1047
    db06:	9905      	ldr	r1, [sp, #20]
    db08:	5c08      	ldrb	r0, [r1, r0]
    db0a:	07c0      	lsls	r0, r0, #31
    db0c:	2800      	cmp	r0, #0
    db0e:	d104      	bne.n	db1a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x22>
    db10:	e7ff      	b.n	db12 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x1a>
    db12:	2020      	movs	r0, #32
        return b' ';
    db14:	f88d 001b 	strb.w	r0, [sp, #27]
    db18:	e047      	b.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
            self.sched();
    db1a:	9805      	ldr	r0, [sp, #20]
    db1c:	f7ff ff39 	bl	d992 <_ZN8libchip814Chip8$LT$T$GT$5sched17h0153abca04ba2309E>
    db20:	e7ff      	b.n	db22 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x2a>
    db22:	2000      	movs	r0, #0
            for i in 0..0xf {
    db24:	f88d 001c 	strb.w	r0, [sp, #28]
    db28:	200f      	movs	r0, #15
    db2a:	f88d 001d 	strb.w	r0, [sp, #29]
    db2e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    db32:	f89d 101d 	ldrb.w	r1, [sp, #29]
    db36:	f005 f9a2 	bl	12e7e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>
    db3a:	9004      	str	r0, [sp, #16]
    db3c:	9103      	str	r1, [sp, #12]
    db3e:	e7ff      	b.n	db40 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x48>
    db40:	9804      	ldr	r0, [sp, #16]
    db42:	f88d 0020 	strb.w	r0, [sp, #32]
    db46:	9903      	ldr	r1, [sp, #12]
    db48:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
    db4c:	e7ff      	b.n	db4e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
    db4e:	a808      	add	r0, sp, #32
    db50:	f005 f924 	bl	12d9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>
    db54:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
    db58:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    db5c:	e7ff      	b.n	db5e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x66>
    db5e:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
    db62:	07c1      	lsls	r1, r0, #31
    db64:	2900      	cmp	r1, #0
    db66:	d001      	beq.n	db6c <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x74>
    db68:	e7ff      	b.n	db6a <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x72>
    db6a:	e001      	b.n	db70 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x78>
        while self.running {
    db6c:	e7c9      	b.n	db02 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa>
            for i in 0..0xf {
    db6e:	defe      	udf	#254	; 0xfe
    db70:	f89d 0025 	ldrb.w	r0, [sp, #37]	; 0x25
    db74:	4601      	mov	r1, r0
    db76:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    db7a:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
    db7e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if self.hw.key(i) {
    db82:	9a05      	ldr	r2, [sp, #20]
    db84:	9002      	str	r0, [sp, #8]
    db86:	4610      	mov	r0, r2
    db88:	9b02      	ldr	r3, [sp, #8]
    db8a:	9101      	str	r1, [sp, #4]
    db8c:	4619      	mov	r1, r3
    db8e:	f7fb fd64 	bl	965a <_ZN59_$LT$app..chip8..Hardware$u20$as$u20$libchip8..Hardware$GT$3key17hb8a7325968dc9595E>
    db92:	9000      	str	r0, [sp, #0]
    db94:	e7ff      	b.n	db96 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x9e>
    db96:	9800      	ldr	r0, [sp, #0]
    db98:	07c1      	lsls	r1, r0, #31
    db9a:	2900      	cmp	r1, #0
    db9c:	d101      	bne.n	dba2 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xaa>
    db9e:	e7ff      	b.n	dba0 <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xa8>
            for i in 0..0xf {
    dba0:	e7d5      	b.n	db4e <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0x56>
                    return i;
    dba2:	9801      	ldr	r0, [sp, #4]
    dba4:	f88d 001b 	strb.w	r0, [sp, #27]
    dba8:	e7ff      	b.n	dbaa <_ZN8libchip814Chip8$LT$T$GT$7waitkey17hbbfc3c3950e83ad6E+0xb2>
    }
    dbaa:	f89d 001b 	ldrb.w	r0, [sp, #27]
    dbae:	b00c      	add	sp, #48	; 0x30
    dbb0:	bd80      	pop	{r7, pc}

0000dbb2 <_ZN8libchip814Chip8$LT$T$GT$8shutdown17h04afc1517f23f57eE>:
    fn shutdown(&mut self) {
    dbb2:	b081      	sub	sp, #4
    dbb4:	9000      	str	r0, [sp, #0]
    dbb6:	f241 0147 	movw	r1, #4167	; 0x1047
    dbba:	2200      	movs	r2, #0
        self.running = false;
    dbbc:	5442      	strb	r2, [r0, r1]
    }
    dbbe:	b001      	add	sp, #4
    dbc0:	4770      	bx	lr

0000dbc2 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE>:
    dbc2:	b580      	push	{r7, lr}
    dbc4:	b084      	sub	sp, #16
    dbc6:	4601      	mov	r1, r0
    dbc8:	f88d 000f 	strb.w	r0, [sp, #15]
    dbcc:	9102      	str	r1, [sp, #8]
    dbce:	f004 ff92 	bl	12af6 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>
    dbd2:	9001      	str	r0, [sp, #4]
    dbd4:	e7ff      	b.n	dbd6 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17hb195795cc886092aE+0x14>
    dbd6:	9801      	ldr	r0, [sp, #4]
    dbd8:	b004      	add	sp, #16
    dbda:	bd80      	pop	{r7, pc}

0000dbdc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>:
    dbdc:	b580      	push	{r7, lr}
    dbde:	b086      	sub	sp, #24
    dbe0:	9004      	str	r0, [sp, #16]
    dbe2:	9105      	str	r1, [sp, #20]
    dbe4:	9002      	str	r0, [sp, #8]
    dbe6:	f000 f810 	bl	dc0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>
    dbea:	9001      	str	r0, [sp, #4]
    dbec:	e7ff      	b.n	dbee <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x12>
    dbee:	9801      	ldr	r0, [sp, #4]
    dbf0:	07c1      	lsls	r1, r0, #31
    dbf2:	2900      	cmp	r1, #0
    dbf4:	d103      	bne.n	dbfe <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x22>
    dbf6:	e7ff      	b.n	dbf8 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x1c>
    dbf8:	2000      	movs	r0, #0
    dbfa:	9003      	str	r0, [sp, #12]
    dbfc:	e002      	b.n	dc04 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    dbfe:	9802      	ldr	r0, [sp, #8]
    dc00:	9003      	str	r0, [sp, #12]
    dc02:	e7ff      	b.n	dc04 <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E+0x28>
    dc04:	9803      	ldr	r0, [sp, #12]
    dc06:	b006      	add	sp, #24
    dc08:	bd80      	pop	{r7, pc}

0000dc0a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE>:
    dc0a:	b580      	push	{r7, lr}
    dc0c:	b08a      	sub	sp, #40	; 0x28
    dc0e:	9008      	str	r0, [sp, #32]
    dc10:	9109      	str	r1, [sp, #36]	; 0x24
    dc12:	9103      	str	r1, [sp, #12]
    dc14:	9002      	str	r0, [sp, #8]
    dc16:	f000 f815 	bl	dc44 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>
    dc1a:	9105      	str	r1, [sp, #20]
    dc1c:	9004      	str	r0, [sp, #16]
    dc1e:	e7ff      	b.n	dc20 <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x16>
    dc20:	9803      	ldr	r0, [sp, #12]
    dc22:	68c1      	ldr	r1, [r0, #12]
    dc24:	9802      	ldr	r0, [sp, #8]
    dc26:	4788      	blx	r1
    dc28:	9107      	str	r1, [sp, #28]
    dc2a:	9006      	str	r0, [sp, #24]
    dc2c:	e7ff      	b.n	dc2e <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x24>
    dc2e:	a804      	add	r0, sp, #16
    dc30:	a906      	add	r1, sp, #24
    dc32:	f005 f92d 	bl	12e90 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>
    dc36:	9001      	str	r0, [sp, #4]
    dc38:	e7ff      	b.n	dc3a <_ZN31_$LT$dyn$u20$core..any..Any$GT$2is17he92aef8d37797e2bE+0x30>
    dc3a:	9801      	ldr	r0, [sp, #4]
    dc3c:	f000 0001 	and.w	r0, r0, #1
    dc40:	b00a      	add	sp, #40	; 0x28
    dc42:	bd80      	pop	{r7, pc}

0000dc44 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E>:
    dc44:	b086      	sub	sp, #24
    dc46:	f249 40d9 	movw	r0, #38105	; 0x94d9
    dc4a:	f2c1 1010 	movt	r0, #4368	; 0x1110
    dc4e:	9005      	str	r0, [sp, #20]
    dc50:	f249 7064 	movw	r0, #38756	; 0x9764
    dc54:	f2c7 00b0 	movt	r0, #28848	; 0x70b0
    dc58:	9004      	str	r0, [sp, #16]
    dc5a:	9804      	ldr	r0, [sp, #16]
    dc5c:	9905      	ldr	r1, [sp, #20]
    dc5e:	9001      	str	r0, [sp, #4]
    dc60:	9100      	str	r1, [sp, #0]
    dc62:	e7ff      	b.n	dc64 <_ZN4core3any6TypeId2of17h8ccdaa41437c3cf9E+0x20>
    dc64:	9801      	ldr	r0, [sp, #4]
    dc66:	9002      	str	r0, [sp, #8]
    dc68:	9900      	ldr	r1, [sp, #0]
    dc6a:	9103      	str	r1, [sp, #12]
    dc6c:	9802      	ldr	r0, [sp, #8]
    dc6e:	9903      	ldr	r1, [sp, #12]
    dc70:	b006      	add	sp, #24
    dc72:	4770      	bx	lr

0000dc74 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE>:
    dc74:	b580      	push	{r7, lr}
    dc76:	b084      	sub	sp, #16
    dc78:	9002      	str	r0, [sp, #8]
    dc7a:	9103      	str	r1, [sp, #12]
    dc7c:	f7ff ffae 	bl	dbdc <_ZN31_$LT$dyn$u20$core..any..Any$GT$12downcast_ref17h2832fba56c7bcf53E>
    dc80:	9001      	str	r0, [sp, #4]
    dc82:	e7ff      	b.n	dc84 <_ZN54_$LT$dyn$u20$core..any..Any$u2b$core..marker..Send$GT$12downcast_ref17ha534480b95c4fb6cE+0x10>
    dc84:	9801      	ldr	r0, [sp, #4]
    dc86:	b004      	add	sp, #16
    dc88:	bd80      	pop	{r7, pc}

0000dc8a <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E>:
    dc8a:	b580      	push	{r7, lr}
    dc8c:	b084      	sub	sp, #16
    dc8e:	680a      	ldr	r2, [r1, #0]
    dc90:	684b      	ldr	r3, [r1, #4]
    dc92:	6889      	ldr	r1, [r1, #8]
    dc94:	9103      	str	r1, [sp, #12]
    dc96:	9302      	str	r3, [sp, #8]
    dc98:	9201      	str	r2, [sp, #4]
    dc9a:	a901      	add	r1, sp, #4
    dc9c:	f000 f8d9 	bl	de52 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>
    dca0:	e7ff      	b.n	dca2 <_ZN4core4iter6traits8iterator8Iterator7flatten17h790b24ffb57b6bb2E+0x18>
    dca2:	b004      	add	sp, #16
    dca4:	bd80      	pop	{r7, pc}

0000dca6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>:
    dca6:	b083      	sub	sp, #12
    dca8:	9100      	str	r1, [sp, #0]
    dcaa:	9201      	str	r2, [sp, #4]
    dcac:	9302      	str	r3, [sp, #8]
    dcae:	6001      	str	r1, [r0, #0]
    dcb0:	6042      	str	r2, [r0, #4]
    dcb2:	6083      	str	r3, [r0, #8]
    dcb4:	b003      	add	sp, #12
    dcb6:	4770      	bx	lr

0000dcb8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>:
    dcb8:	b083      	sub	sp, #12
    dcba:	9100      	str	r1, [sp, #0]
    dcbc:	9201      	str	r2, [sp, #4]
    dcbe:	9302      	str	r3, [sp, #8]
    dcc0:	6001      	str	r1, [r0, #0]
    dcc2:	6042      	str	r2, [r0, #4]
    dcc4:	6083      	str	r3, [r0, #8]
    dcc6:	b003      	add	sp, #12
    dcc8:	4770      	bx	lr

0000dcca <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>:
    dcca:	680a      	ldr	r2, [r1, #0]
    dccc:	684b      	ldr	r3, [r1, #4]
    dcce:	6889      	ldr	r1, [r1, #8]
    dcd0:	6081      	str	r1, [r0, #8]
    dcd2:	6043      	str	r3, [r0, #4]
    dcd4:	6002      	str	r2, [r0, #0]
    dcd6:	4770      	bx	lr

0000dcd8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>:
    dcd8:	b580      	push	{r7, lr}
    dcda:	b086      	sub	sp, #24
    dcdc:	9105      	str	r1, [sp, #20]
    dcde:	9004      	str	r0, [sp, #16]
    dce0:	4608      	mov	r0, r1
    dce2:	9103      	str	r1, [sp, #12]
    dce4:	f000 fdd4 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dce8:	9002      	str	r0, [sp, #8]
    dcea:	9101      	str	r1, [sp, #4]
    dcec:	e7ff      	b.n	dcee <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x16>
    dcee:	9803      	ldr	r0, [sp, #12]
    dcf0:	f100 0308 	add.w	r3, r0, #8
    dcf4:	9804      	ldr	r0, [sp, #16]
    dcf6:	9902      	ldr	r1, [sp, #8]
    dcf8:	9a01      	ldr	r2, [sp, #4]
    dcfa:	f000 f944 	bl	df86 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>
    dcfe:	e7ff      	b.n	dd00 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E+0x28>
    dd00:	b006      	add	sp, #24
    dd02:	bd80      	pop	{r7, pc}

0000dd04 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>:
    dd04:	b580      	push	{r7, lr}
    dd06:	b086      	sub	sp, #24
    dd08:	9105      	str	r1, [sp, #20]
    dd0a:	9004      	str	r0, [sp, #16]
    dd0c:	4608      	mov	r0, r1
    dd0e:	9103      	str	r1, [sp, #12]
    dd10:	f000 fdbe 	bl	e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>
    dd14:	9002      	str	r0, [sp, #8]
    dd16:	9101      	str	r1, [sp, #4]
    dd18:	e7ff      	b.n	dd1a <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x16>
    dd1a:	9803      	ldr	r0, [sp, #12]
    dd1c:	f100 0308 	add.w	r3, r0, #8
    dd20:	9804      	ldr	r0, [sp, #16]
    dd22:	9902      	ldr	r1, [sp, #8]
    dd24:	9a01      	ldr	r2, [sp, #4]
    dd26:	f000 f97b 	bl	e020 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>
    dd2a:	e7ff      	b.n	dd2c <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E+0x28>
    dd2c:	b006      	add	sp, #24
    dd2e:	bd80      	pop	{r7, pc}

0000dd30 <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE>:
    dd30:	b580      	push	{r7, lr}
    dd32:	b082      	sub	sp, #8
    dd34:	9101      	str	r1, [sp, #4]
    dd36:	f000 f803 	bl	dd40 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>
    dd3a:	e7ff      	b.n	dd3c <_ZN106_$LT$core..iter..adapters..flatten..Flatten$LT$I$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h5923d182d43571feE+0xc>
    dd3c:	b002      	add	sp, #8
    dd3e:	bd80      	pop	{r7, pc}

0000dd40 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E>:
    dd40:	b580      	push	{r7, lr}
    dd42:	b0a0      	sub	sp, #128	; 0x80
    dd44:	911c      	str	r1, [sp, #112]	; 0x70
    dd46:	9103      	str	r1, [sp, #12]
    dd48:	9002      	str	r0, [sp, #8]
    dd4a:	e7ff      	b.n	dd4c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    dd4c:	9803      	ldr	r0, [sp, #12]
    dd4e:	68c1      	ldr	r1, [r0, #12]
    dd50:	2901      	cmp	r1, #1
    dd52:	d11e      	bne.n	dd92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dd54:	e7ff      	b.n	dd56 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x16>
    dd56:	9803      	ldr	r0, [sp, #12]
    dd58:	f100 0110 	add.w	r1, r0, #16
    dd5c:	911e      	str	r1, [sp, #120]	; 0x78
    dd5e:	a804      	add	r0, sp, #16
    dd60:	f7ff ffba 	bl	dcd8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    dd64:	e7ff      	b.n	dd66 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x26>
    dd66:	9804      	ldr	r0, [sp, #16]
    dd68:	2801      	cmp	r0, #1
    dd6a:	d001      	beq.n	dd70 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x30>
    dd6c:	e7ff      	b.n	dd6e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x2e>
    dd6e:	e00f      	b.n	dd90 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x50>
    dd70:	9804      	ldr	r0, [sp, #16]
    dd72:	9905      	ldr	r1, [sp, #20]
    dd74:	9a06      	ldr	r2, [sp, #24]
    dd76:	9209      	str	r2, [sp, #36]	; 0x24
    dd78:	9108      	str	r1, [sp, #32]
    dd7a:	9007      	str	r0, [sp, #28]
    dd7c:	9807      	ldr	r0, [sp, #28]
    dd7e:	9908      	ldr	r1, [sp, #32]
    dd80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    dd82:	9b02      	ldr	r3, [sp, #8]
    dd84:	609a      	str	r2, [r3, #8]
    dd86:	6059      	str	r1, [r3, #4]
    dd88:	6018      	str	r0, [r3, #0]
    dd8a:	e7ff      	b.n	dd8c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    dd8c:	b020      	add	sp, #128	; 0x80
    dd8e:	bd80      	pop	{r7, pc}
    dd90:	e7ff      	b.n	dd92 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x52>
    dd92:	a80a      	add	r0, sp, #40	; 0x28
    dd94:	9903      	ldr	r1, [sp, #12]
    dd96:	f7ff ffb5 	bl	dd04 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hac566d17e493ac47E>
    dd9a:	e7ff      	b.n	dd9c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x5c>
    dd9c:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd9e:	2800      	cmp	r0, #0
    dda0:	d012      	beq.n	ddc8 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x88>
    dda2:	e7ff      	b.n	dda4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x64>
    dda4:	980b      	ldr	r0, [sp, #44]	; 0x2c
    dda6:	990c      	ldr	r1, [sp, #48]	; 0x30
    dda8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    ddaa:	9211      	str	r2, [sp, #68]	; 0x44
    ddac:	9110      	str	r1, [sp, #64]	; 0x40
    ddae:	900f      	str	r0, [sp, #60]	; 0x3c
    ddb0:	980f      	ldr	r0, [sp, #60]	; 0x3c
    ddb2:	9910      	ldr	r1, [sp, #64]	; 0x40
    ddb4:	9a11      	ldr	r2, [sp, #68]	; 0x44
    ddb6:	921b      	str	r2, [sp, #108]	; 0x6c
    ddb8:	911a      	str	r1, [sp, #104]	; 0x68
    ddba:	9019      	str	r0, [sp, #100]	; 0x64
    ddbc:	a816      	add	r0, sp, #88	; 0x58
    ddbe:	a919      	add	r1, sp, #100	; 0x64
    ddc0:	f7ff ff83 	bl	dcca <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h150c3e461f16f651E>
    ddc4:	e028      	b.n	de18 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd8>
    ddc6:	defe      	udf	#254	; 0xfe
    ddc8:	9803      	ldr	r0, [sp, #12]
    ddca:	301c      	adds	r0, #28
    ddcc:	f000 f9b4 	bl	e138 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>
    ddd0:	9001      	str	r0, [sp, #4]
    ddd2:	e7ff      	b.n	ddd4 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x94>
    ddd4:	9801      	ldr	r0, [sp, #4]
    ddd6:	f000 f9e9 	bl	e1ac <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>
    ddda:	900e      	str	r0, [sp, #56]	; 0x38
    dddc:	e7ff      	b.n	ddde <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x9e>
    ddde:	980e      	ldr	r0, [sp, #56]	; 0x38
    dde0:	fab0 f180 	clz	r1, r0
    dde4:	0949      	lsrs	r1, r1, #5
    dde6:	2800      	cmp	r0, #0
    dde8:	d101      	bne.n	ddee <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xae>
    ddea:	e7ff      	b.n	ddec <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xac>
    ddec:	e009      	b.n	de02 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc2>
    ddee:	980e      	ldr	r0, [sp, #56]	; 0x38
    ddf0:	901f      	str	r0, [sp, #124]	; 0x7c
    ddf2:	9902      	ldr	r1, [sp, #8]
    ddf4:	9000      	str	r0, [sp, #0]
    ddf6:	4608      	mov	r0, r1
    ddf8:	9900      	ldr	r1, [sp, #0]
    ddfa:	f7ff ff6d 	bl	dcd8 <_ZN97_$LT$core..iter..adapters..Map$LT$I$C$F$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h3a9ff7d0c8950d97E>
    ddfe:	e00a      	b.n	de16 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd6>
    de00:	defe      	udf	#254	; 0xfe
    de02:	f002 f9af 	bl	10164 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>
    de06:	e7ff      	b.n	de08 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc8>
    de08:	9802      	ldr	r0, [sp, #8]
    de0a:	f000 f9ca 	bl	e1a2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>
    de0e:	e7ff      	b.n	de10 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd0>
    de10:	e7ff      	b.n	de12 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    de12:	e7ff      	b.n	de14 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd4>
    de14:	e7ba      	b.n	dd8c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x4c>
    de16:	e7fc      	b.n	de12 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xd2>
    de18:	9816      	ldr	r0, [sp, #88]	; 0x58
    de1a:	9917      	ldr	r1, [sp, #92]	; 0x5c
    de1c:	9a18      	ldr	r2, [sp, #96]	; 0x60
    de1e:	9215      	str	r2, [sp, #84]	; 0x54
    de20:	9114      	str	r1, [sp, #80]	; 0x50
    de22:	9013      	str	r0, [sp, #76]	; 0x4c
    de24:	2001      	movs	r0, #1
    de26:	9012      	str	r0, [sp, #72]	; 0x48
    de28:	e7ff      	b.n	de2a <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xea>
    de2a:	9812      	ldr	r0, [sp, #72]	; 0x48
    de2c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    de2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
    de30:	9b15      	ldr	r3, [sp, #84]	; 0x54
    de32:	f8dd c00c 	ldr.w	ip, [sp, #12]
    de36:	f8cc 3018 	str.w	r3, [ip, #24]
    de3a:	f8cc 2014 	str.w	r2, [ip, #20]
    de3e:	f8cc 1010 	str.w	r1, [ip, #16]
    de42:	f8cc 000c 	str.w	r0, [ip, #12]
    de46:	980a      	ldr	r0, [sp, #40]	; 0x28
    de48:	2801      	cmp	r0, #1
    de4a:	d101      	bne.n	de50 <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x110>
    de4c:	e7ff      	b.n	de4e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>
    de4e:	e77d      	b.n	dd4c <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0xc>
    de50:	e7fd      	b.n	de4e <_ZN116_$LT$core..iter..adapters..flatten..FlattenCompat$LT$I$C$U$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hd30ff98afb79c2e4E+0x10e>

0000de52 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E>:
    de52:	b5b0      	push	{r4, r5, r7, lr}
    de54:	b090      	sub	sp, #64	; 0x40
    de56:	680a      	ldr	r2, [r1, #0]
    de58:	684b      	ldr	r3, [r1, #4]
    de5a:	6889      	ldr	r1, [r1, #8]
    de5c:	910f      	str	r1, [sp, #60]	; 0x3c
    de5e:	930e      	str	r3, [sp, #56]	; 0x38
    de60:	920d      	str	r2, [sp, #52]	; 0x34
    de62:	a902      	add	r1, sp, #8
    de64:	aa0d      	add	r2, sp, #52	; 0x34
    de66:	9001      	str	r0, [sp, #4]
    de68:	4608      	mov	r0, r1
    de6a:	4611      	mov	r1, r2
    de6c:	f000 f80d 	bl	de8a <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>
    de70:	e7ff      	b.n	de72 <_ZN4core4iter8adapters7flatten16Flatten$LT$I$GT$3new17h9a887926e27564b3E+0x20>
    de72:	a802      	add	r0, sp, #8
    de74:	9901      	ldr	r1, [sp, #4]
    de76:	e8b0 501c 	ldmia.w	r0!, {r2, r3, r4, ip, lr}
    de7a:	e8a1 501c 	stmia.w	r1!, {r2, r3, r4, ip, lr}
    de7e:	e890 503c 	ldmia.w	r0, {r2, r3, r4, r5, ip, lr}
    de82:	e881 503c 	stmia.w	r1, {r2, r3, r4, r5, ip, lr}
    de86:	b010      	add	sp, #64	; 0x40
    de88:	bdb0      	pop	{r4, r5, r7, pc}

0000de8a <_ZN4core4iter8adapters7flatten26FlattenCompat$LT$I$C$U$GT$3new17h67d5d76d62fd1974E>:
    de8a:	b08b      	sub	sp, #44	; 0x2c
    de8c:	680a      	ldr	r2, [r1, #0]
    de8e:	684b      	ldr	r3, [r1, #4]
    de90:	6889      	ldr	r1, [r1, #8]
    de92:	9102      	str	r1, [sp, #8]
    de94:	9301      	str	r3, [sp, #4]
    de96:	9200      	str	r2, [sp, #0]
    de98:	2100      	movs	r1, #0
    de9a:	9103      	str	r1, [sp, #12]
    de9c:	9107      	str	r1, [sp, #28]
    de9e:	9900      	ldr	r1, [sp, #0]
    dea0:	9a01      	ldr	r2, [sp, #4]
    dea2:	9b02      	ldr	r3, [sp, #8]
    dea4:	6083      	str	r3, [r0, #8]
    dea6:	6042      	str	r2, [r0, #4]
    dea8:	6001      	str	r1, [r0, #0]
    deaa:	9903      	ldr	r1, [sp, #12]
    deac:	9a04      	ldr	r2, [sp, #16]
    deae:	9b05      	ldr	r3, [sp, #20]
    deb0:	f8dd c018 	ldr.w	ip, [sp, #24]
    deb4:	f8c0 c018 	str.w	ip, [r0, #24]
    deb8:	6143      	str	r3, [r0, #20]
    deba:	6102      	str	r2, [r0, #16]
    debc:	60c1      	str	r1, [r0, #12]
    debe:	9907      	ldr	r1, [sp, #28]
    dec0:	9a08      	ldr	r2, [sp, #32]
    dec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dec4:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
    dec8:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
    decc:	6243      	str	r3, [r0, #36]	; 0x24
    dece:	6202      	str	r2, [r0, #32]
    ded0:	61c1      	str	r1, [r0, #28]
    ded2:	b00b      	add	sp, #44	; 0x2c
    ded4:	4770      	bx	lr

0000ded6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h0a1a9897cf1e3266E>:
    ded6:	b5b0      	push	{r4, r5, r7, lr}
    ded8:	e8b1 501c 	ldmia.w	r1!, {r2, r3, r4, ip, lr}
    dedc:	e8a0 501c 	stmia.w	r0!, {r2, r3, r4, ip, lr}
    dee0:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    dee4:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    dee8:	bdb0      	pop	{r4, r5, r7, pc}

0000deea <_ZN4core3fmt9Arguments16new_v1_formatted17hfc49c77e9b05b884E>:
    deea:	b510      	push	{r4, lr}
    deec:	b088      	sub	sp, #32
    deee:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
    def2:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
    def6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    def8:	9102      	str	r1, [sp, #8]
    defa:	9203      	str	r2, [sp, #12]
    defc:	9304      	str	r3, [sp, #16]
    defe:	9405      	str	r4, [sp, #20]
    df00:	f8cd e018 	str.w	lr, [sp, #24]
    df04:	f8cd c01c 	str.w	ip, [sp, #28]
    df08:	f8cd e000 	str.w	lr, [sp]
    df0c:	f8cd c004 	str.w	ip, [sp, #4]
    df10:	6001      	str	r1, [r0, #0]
    df12:	6042      	str	r2, [r0, #4]
    df14:	9900      	ldr	r1, [sp, #0]
    df16:	9a01      	ldr	r2, [sp, #4]
    df18:	6081      	str	r1, [r0, #8]
    df1a:	60c2      	str	r2, [r0, #12]
    df1c:	6103      	str	r3, [r0, #16]
    df1e:	6144      	str	r4, [r0, #20]
    df20:	b008      	add	sp, #32
    df22:	bd10      	pop	{r4, pc}

0000df24 <_ZN4core3fmt9Arguments6new_v117h7622a2ed78995b61E>:
    df24:	b580      	push	{r7, lr}
    df26:	b086      	sub	sp, #24
    df28:	f8dd c020 	ldr.w	ip, [sp, #32]
    df2c:	9102      	str	r1, [sp, #8]
    df2e:	9203      	str	r2, [sp, #12]
    df30:	9304      	str	r3, [sp, #16]
    df32:	f8cd c014 	str.w	ip, [sp, #20]
    df36:	f04f 0e00 	mov.w	lr, #0
    df3a:	f8cd e004 	str.w	lr, [sp, #4]
    df3e:	f8cd e000 	str.w	lr, [sp]
    df42:	f8cd e000 	str.w	lr, [sp]
    df46:	6001      	str	r1, [r0, #0]
    df48:	6042      	str	r2, [r0, #4]
    df4a:	9900      	ldr	r1, [sp, #0]
    df4c:	9a01      	ldr	r2, [sp, #4]
    df4e:	6081      	str	r1, [r0, #8]
    df50:	60c2      	str	r2, [r0, #12]
    df52:	6103      	str	r3, [r0, #16]
    df54:	f8c0 c014 	str.w	ip, [r0, #20]
    df58:	b006      	add	sp, #24
    df5a:	bd80      	pop	{r7, pc}

0000df5c <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE>:
    df5c:	b580      	push	{r7, lr}
    df5e:	b088      	sub	sp, #32
    df60:	9004      	str	r0, [sp, #16]
    df62:	9105      	str	r1, [sp, #20]
    df64:	9206      	str	r2, [sp, #24]
    df66:	9307      	str	r3, [sp, #28]
    df68:	9003      	str	r0, [sp, #12]
    df6a:	4610      	mov	r0, r2
    df6c:	9102      	str	r1, [sp, #8]
    df6e:	4619      	mov	r1, r3
    df70:	9a03      	ldr	r2, [sp, #12]
    df72:	9b02      	ldr	r3, [sp, #8]
    df74:	f001 f9f9 	bl	f36a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    df78:	9001      	str	r0, [sp, #4]
    df7a:	9100      	str	r1, [sp, #0]
    df7c:	e7ff      	b.n	df7e <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hd29a6855bf5041fdE+0x22>
    df7e:	9801      	ldr	r0, [sp, #4]
    df80:	9900      	ldr	r1, [sp, #0]
    df82:	b008      	add	sp, #32
    df84:	bd80      	pop	{r7, pc}

0000df86 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E>:
    df86:	b580      	push	{r7, lr}
    df88:	b08a      	sub	sp, #40	; 0x28
    df8a:	9104      	str	r1, [sp, #16]
    df8c:	9205      	str	r2, [sp, #20]
    df8e:	9308      	str	r3, [sp, #32]
    df90:	2100      	movs	r1, #0
    df92:	f88d 101e 	strb.w	r1, [sp, #30]
    df96:	f88d 101f 	strb.w	r1, [sp, #31]
    df9a:	2101      	movs	r1, #1
    df9c:	f88d 101f 	strb.w	r1, [sp, #31]
    dfa0:	f88d 101e 	strb.w	r1, [sp, #30]
    dfa4:	9904      	ldr	r1, [sp, #16]
    dfa6:	2900      	cmp	r1, #0
    dfa8:	9303      	str	r3, [sp, #12]
    dfaa:	9002      	str	r0, [sp, #8]
    dfac:	d001      	beq.n	dfb2 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2c>
    dfae:	e7ff      	b.n	dfb0 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x2a>
    dfb0:	e004      	b.n	dfbc <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x36>
    dfb2:	2000      	movs	r0, #0
    dfb4:	9902      	ldr	r1, [sp, #8]
    dfb6:	6008      	str	r0, [r1, #0]
    dfb8:	e01f      	b.n	dffa <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    dfba:	defe      	udf	#254	; 0xfe
    dfbc:	2000      	movs	r0, #0
    dfbe:	f88d 001f 	strb.w	r0, [sp, #31]
    dfc2:	9905      	ldr	r1, [sp, #20]
    dfc4:	9109      	str	r1, [sp, #36]	; 0x24
    dfc6:	f88d 001e 	strb.w	r0, [sp, #30]
    dfca:	9106      	str	r1, [sp, #24]
    dfcc:	9906      	ldr	r1, [sp, #24]
    dfce:	9803      	ldr	r0, [sp, #12]
    dfd0:	f7fb fd9c 	bl	9b0c <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17he627156f6f8a4ed5E>
    dfd4:	9001      	str	r0, [sp, #4]
    dfd6:	9100      	str	r1, [sp, #0]
    dfd8:	e7ff      	b.n	dfda <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x54>
    dfda:	9801      	ldr	r0, [sp, #4]
    dfdc:	9902      	ldr	r1, [sp, #8]
    dfde:	6048      	str	r0, [r1, #4]
    dfe0:	9a00      	ldr	r2, [sp, #0]
    dfe2:	608a      	str	r2, [r1, #8]
    dfe4:	2301      	movs	r3, #1
    dfe6:	600b      	str	r3, [r1, #0]
    dfe8:	e007      	b.n	dffa <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x74>
    dfea:	9804      	ldr	r0, [sp, #16]
    dfec:	2801      	cmp	r0, #1
    dfee:	d00c      	beq.n	e00a <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x84>
    dff0:	e015      	b.n	e01e <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x98>
    dff2:	2000      	movs	r0, #0
    dff4:	f88d 001e 	strb.w	r0, [sp, #30]
    dff8:	e7f7      	b.n	dfea <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    dffa:	f89d 001e 	ldrb.w	r0, [sp, #30]
    dffe:	07c0      	lsls	r0, r0, #31
    e000:	2800      	cmp	r0, #0
    e002:	d1f6      	bne.n	dff2 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x6c>
    e004:	e7f1      	b.n	dfea <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x64>
    e006:	b00a      	add	sp, #40	; 0x28
    e008:	bd80      	pop	{r7, pc}
    e00a:	f89d 001f 	ldrb.w	r0, [sp, #31]
    e00e:	07c0      	lsls	r0, r0, #31
    e010:	2800      	cmp	r0, #0
    e012:	d0f8      	beq.n	e006 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    e014:	e7ff      	b.n	e016 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x90>
    e016:	2000      	movs	r0, #0
    e018:	f88d 001f 	strb.w	r0, [sp, #31]
    e01c:	e7f3      	b.n	e006 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>
    e01e:	e7f2      	b.n	e006 <_ZN4core6option15Option$LT$T$GT$3map17h7a3d3673bfe6bb47E+0x80>

0000e020 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE>:
    e020:	b580      	push	{r7, lr}
    e022:	b08c      	sub	sp, #48	; 0x30
    e024:	9103      	str	r1, [sp, #12]
    e026:	9204      	str	r2, [sp, #16]
    e028:	930a      	str	r3, [sp, #40]	; 0x28
    e02a:	2100      	movs	r1, #0
    e02c:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    e030:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    e034:	2101      	movs	r1, #1
    e036:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
    e03a:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
    e03e:	9903      	ldr	r1, [sp, #12]
    e040:	2900      	cmp	r1, #0
    e042:	9302      	str	r3, [sp, #8]
    e044:	9001      	str	r0, [sp, #4]
    e046:	d001      	beq.n	e04c <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2c>
    e048:	e7ff      	b.n	e04a <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x2a>
    e04a:	e004      	b.n	e056 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x36>
    e04c:	2000      	movs	r0, #0
    e04e:	9901      	ldr	r1, [sp, #4]
    e050:	6008      	str	r0, [r1, #0]
    e052:	e020      	b.n	e096 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    e054:	defe      	udf	#254	; 0xfe
    e056:	2000      	movs	r0, #0
    e058:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e05c:	9904      	ldr	r1, [sp, #16]
    e05e:	910b      	str	r1, [sp, #44]	; 0x2c
    e060:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e064:	9108      	str	r1, [sp, #32]
    e066:	9a08      	ldr	r2, [sp, #32]
    e068:	a805      	add	r0, sp, #20
    e06a:	9902      	ldr	r1, [sp, #8]
    e06c:	f7fb fd44 	bl	9af8 <_ZN4core3ops8function5impls80_$LT$impl$u20$core..ops..function..FnOnce$LT$A$GT$$u20$for$u20$$RF$mut$u20$F$GT$9call_once17h79fbfe346516e383E>
    e070:	e7ff      	b.n	e072 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x52>
    e072:	9805      	ldr	r0, [sp, #20]
    e074:	9906      	ldr	r1, [sp, #24]
    e076:	9a07      	ldr	r2, [sp, #28]
    e078:	9b01      	ldr	r3, [sp, #4]
    e07a:	60da      	str	r2, [r3, #12]
    e07c:	6099      	str	r1, [r3, #8]
    e07e:	6058      	str	r0, [r3, #4]
    e080:	2001      	movs	r0, #1
    e082:	6018      	str	r0, [r3, #0]
    e084:	e007      	b.n	e096 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x76>
    e086:	9803      	ldr	r0, [sp, #12]
    e088:	2801      	cmp	r0, #1
    e08a:	d00c      	beq.n	e0a6 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x86>
    e08c:	e015      	b.n	e0ba <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x9a>
    e08e:	2000      	movs	r0, #0
    e090:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
    e094:	e7f7      	b.n	e086 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e096:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
    e09a:	07c0      	lsls	r0, r0, #31
    e09c:	2800      	cmp	r0, #0
    e09e:	d1f6      	bne.n	e08e <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x6e>
    e0a0:	e7f1      	b.n	e086 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x66>
    e0a2:	b00c      	add	sp, #48	; 0x30
    e0a4:	bd80      	pop	{r7, pc}
    e0a6:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    e0aa:	07c0      	lsls	r0, r0, #31
    e0ac:	2800      	cmp	r0, #0
    e0ae:	d0f8      	beq.n	e0a2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e0b0:	e7ff      	b.n	e0b2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x92>
    e0b2:	2000      	movs	r0, #0
    e0b4:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e0b8:	e7f3      	b.n	e0a2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>
    e0ba:	e7f2      	b.n	e0a2 <_ZN4core6option15Option$LT$T$GT$3map17hb7bdb6867be55a8fE+0x82>

0000e0bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>:
    e0bc:	b085      	sub	sp, #20
    e0be:	9000      	str	r0, [sp, #0]
    e0c0:	2000      	movs	r0, #0
    e0c2:	f88d 000b 	strb.w	r0, [sp, #11]
    e0c6:	f88d 000a 	strb.w	r0, [sp, #10]
    e0ca:	2001      	movs	r0, #1
    e0cc:	f88d 000b 	strb.w	r0, [sp, #11]
    e0d0:	f88d 000a 	strb.w	r0, [sp, #10]
    e0d4:	9800      	ldr	r0, [sp, #0]
    e0d6:	2800      	cmp	r0, #0
    e0d8:	4601      	mov	r1, r0
    e0da:	bf18      	it	ne
    e0dc:	2101      	movne	r1, #1
    e0de:	2800      	cmp	r0, #0
    e0e0:	d001      	beq.n	e0e6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x2a>
    e0e2:	e7ff      	b.n	e0e4 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x28>
    e0e4:	e005      	b.n	e0f2 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x36>
    e0e6:	2000      	movs	r0, #0
    e0e8:	f88d 000a 	strb.w	r0, [sp, #10]
    e0ec:	9001      	str	r0, [sp, #4]
    e0ee:	e007      	b.n	e100 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e0f0:	defe      	udf	#254	; 0xfe
    e0f2:	2000      	movs	r0, #0
    e0f4:	f88d 000b 	strb.w	r0, [sp, #11]
    e0f8:	9800      	ldr	r0, [sp, #0]
    e0fa:	9004      	str	r0, [sp, #16]
    e0fc:	9001      	str	r0, [sp, #4]
    e0fe:	e7ff      	b.n	e100 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x44>
    e100:	f89d 000a 	ldrb.w	r0, [sp, #10]
    e104:	07c0      	lsls	r0, r0, #31
    e106:	2800      	cmp	r0, #0
    e108:	d104      	bne.n	e114 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x58>
    e10a:	e7ff      	b.n	e10c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e10c:	9800      	ldr	r0, [sp, #0]
    e10e:	2800      	cmp	r0, #0
    e110:	d107      	bne.n	e122 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x66>
    e112:	e010      	b.n	e136 <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x7a>
    e114:	2000      	movs	r0, #0
    e116:	f88d 000a 	strb.w	r0, [sp, #10]
    e11a:	e7f7      	b.n	e10c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x50>
    e11c:	9801      	ldr	r0, [sp, #4]
    e11e:	b005      	add	sp, #20
    e120:	4770      	bx	lr
    e122:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e126:	07c0      	lsls	r0, r0, #31
    e128:	2800      	cmp	r0, #0
    e12a:	d0f7      	beq.n	e11c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e12c:	e7ff      	b.n	e12e <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x72>
    e12e:	2000      	movs	r0, #0
    e130:	f88d 000b 	strb.w	r0, [sp, #11]
    e134:	e7f2      	b.n	e11c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>
    e136:	e7f1      	b.n	e11c <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E+0x60>

0000e138 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE>:
    e138:	b084      	sub	sp, #16
    e13a:	9002      	str	r0, [sp, #8]
    e13c:	6801      	ldr	r1, [r0, #0]
    e13e:	2900      	cmp	r1, #0
    e140:	9000      	str	r0, [sp, #0]
    e142:	d001      	beq.n	e148 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x10>
    e144:	e7ff      	b.n	e146 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0xe>
    e146:	e003      	b.n	e150 <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x18>
    e148:	2000      	movs	r0, #0
    e14a:	9001      	str	r0, [sp, #4]
    e14c:	e005      	b.n	e15a <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e14e:	defe      	udf	#254	; 0xfe
    e150:	9800      	ldr	r0, [sp, #0]
    e152:	1d01      	adds	r1, r0, #4
    e154:	9103      	str	r1, [sp, #12]
    e156:	9101      	str	r1, [sp, #4]
    e158:	e7ff      	b.n	e15a <_ZN4core6option15Option$LT$T$GT$6as_mut17h852bee807155943aE+0x22>
    e15a:	9801      	ldr	r0, [sp, #4]
    e15c:	b004      	add	sp, #16
    e15e:	4770      	bx	lr

0000e160 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E>:
    e160:	b084      	sub	sp, #16
    e162:	9002      	str	r0, [sp, #8]
    e164:	9802      	ldr	r0, [sp, #8]
    e166:	2800      	cmp	r0, #0
    e168:	4602      	mov	r2, r0
    e16a:	bf18      	it	ne
    e16c:	2201      	movne	r2, #1
    e16e:	2800      	cmp	r0, #0
    e170:	9101      	str	r1, [sp, #4]
    e172:	d001      	beq.n	e178 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x18>
    e174:	e7ff      	b.n	e176 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x16>
    e176:	e009      	b.n	e18c <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x2c>
    e178:	f64e 50dc 	movw	r0, #60892	; 0xeddc
    e17c:	f2c0 0001 	movt	r0, #1
    e180:	212b      	movs	r1, #43	; 0x2b
    e182:	9a01      	ldr	r2, [sp, #4]
    e184:	f008 fc8e 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    e188:	defe      	udf	#254	; 0xfe
    e18a:	defe      	udf	#254	; 0xfe
    e18c:	9802      	ldr	r0, [sp, #8]
    e18e:	9003      	str	r0, [sp, #12]
    e190:	9902      	ldr	r1, [sp, #8]
    e192:	2900      	cmp	r1, #0
    e194:	9000      	str	r0, [sp, #0]
    e196:	d003      	beq.n	e1a0 <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x40>
    e198:	e7ff      	b.n	e19a <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>
    e19a:	9800      	ldr	r0, [sp, #0]
    e19c:	b004      	add	sp, #16
    e19e:	4770      	bx	lr
    e1a0:	e7fb      	b.n	e19a <_ZN4core6option15Option$LT$T$GT$6unwrap17hc7cd369d6cf386b8E+0x3a>

0000e1a2 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17hc2b7f3c069a746efE>:
    e1a2:	b081      	sub	sp, #4
    e1a4:	2100      	movs	r1, #0
    e1a6:	6001      	str	r1, [r0, #0]
    e1a8:	b001      	add	sp, #4
    e1aa:	4770      	bx	lr

0000e1ac <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E>:
    e1ac:	b580      	push	{r7, lr}
    e1ae:	b082      	sub	sp, #8
    e1b0:	9001      	str	r0, [sp, #4]
    e1b2:	f7ff ff83 	bl	e0bc <_ZN4core6option15Option$LT$T$GT$5ok_or17h80e469ddc6296257E>
    e1b6:	9000      	str	r0, [sp, #0]
    e1b8:	e7ff      	b.n	e1ba <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17habaf51e2b5499869E+0xe>
    e1ba:	9800      	ldr	r0, [sp, #0]
    e1bc:	b002      	add	sp, #8
    e1be:	bd80      	pop	{r7, pc}

0000e1c0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE>:
    e1c0:	b580      	push	{r7, lr}
    e1c2:	b084      	sub	sp, #16
    e1c4:	9002      	str	r0, [sp, #8]
    e1c6:	9103      	str	r1, [sp, #12]
    e1c8:	6800      	ldr	r0, [r0, #0]
    e1ca:	f000 f88c 	bl	e2e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>
    e1ce:	9001      	str	r0, [sp, #4]
    e1d0:	e7ff      	b.n	e1d2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h2e00a90d0fed231aE+0x12>
    e1d2:	9801      	ldr	r0, [sp, #4]
    e1d4:	f000 0001 	and.w	r0, r0, #1
    e1d8:	b004      	add	sp, #16
    e1da:	bd80      	pop	{r7, pc}

0000e1dc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>:
    e1dc:	b580      	push	{r7, lr}
    e1de:	b084      	sub	sp, #16
    e1e0:	9002      	str	r0, [sp, #8]
    e1e2:	9103      	str	r1, [sp, #12]
    e1e4:	f000 f827 	bl	e236 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>
    e1e8:	9001      	str	r0, [sp, #4]
    e1ea:	e7ff      	b.n	e1ec <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE+0x10>
    e1ec:	9801      	ldr	r0, [sp, #4]
    e1ee:	b004      	add	sp, #16
    e1f0:	bd80      	pop	{r7, pc}

0000e1f2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>:
    e1f2:	b085      	sub	sp, #20
    e1f4:	9003      	str	r0, [sp, #12]
    e1f6:	9104      	str	r1, [sp, #16]
    e1f8:	6802      	ldr	r2, [r0, #0]
    e1fa:	680b      	ldr	r3, [r1, #0]
    e1fc:	429a      	cmp	r2, r3
    e1fe:	9101      	str	r1, [sp, #4]
    e200:	9000      	str	r0, [sp, #0]
    e202:	db07      	blt.n	e214 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x22>
    e204:	e7ff      	b.n	e206 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x14>
    e206:	9800      	ldr	r0, [sp, #0]
    e208:	6801      	ldr	r1, [r0, #0]
    e20a:	9a01      	ldr	r2, [sp, #4]
    e20c:	6813      	ldr	r3, [r2, #0]
    e20e:	4299      	cmp	r1, r3
    e210:	d008      	beq.n	e224 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x32>
    e212:	e003      	b.n	e21c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x2a>
    e214:	20ff      	movs	r0, #255	; 0xff
    e216:	f88d 000b 	strb.w	r0, [sp, #11]
    e21a:	e008      	b.n	e22e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e21c:	2001      	movs	r0, #1
    e21e:	f88d 000b 	strb.w	r0, [sp, #11]
    e222:	e003      	b.n	e22c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e224:	2000      	movs	r0, #0
    e226:	f88d 000b 	strb.w	r0, [sp, #11]
    e22a:	e7ff      	b.n	e22c <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3a>
    e22c:	e7ff      	b.n	e22e <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE+0x3c>
    e22e:	f89d 000b 	ldrb.w	r0, [sp, #11]
    e232:	b005      	add	sp, #20
    e234:	4770      	bx	lr

0000e236 <_ZN4core3cmp6max_by17h3c9686db40e0f078E>:
    e236:	b580      	push	{r7, lr}
    e238:	b088      	sub	sp, #32
    e23a:	9000      	str	r0, [sp, #0]
    e23c:	9101      	str	r1, [sp, #4]
    e23e:	2000      	movs	r0, #0
    e240:	f88d 001b 	strb.w	r0, [sp, #27]
    e244:	f88d 001a 	strb.w	r0, [sp, #26]
    e248:	2001      	movs	r0, #1
    e24a:	f88d 001b 	strb.w	r0, [sp, #27]
    e24e:	f88d 001a 	strb.w	r0, [sp, #26]
    e252:	4668      	mov	r0, sp
    e254:	9004      	str	r0, [sp, #16]
    e256:	a801      	add	r0, sp, #4
    e258:	9005      	str	r0, [sp, #20]
    e25a:	9804      	ldr	r0, [sp, #16]
    e25c:	9905      	ldr	r1, [sp, #20]
    e25e:	f000 f895 	bl	e38c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>
    e262:	f88d 000f 	strb.w	r0, [sp, #15]
    e266:	e7ff      	b.n	e268 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x32>
    e268:	f99d 000f 	ldrsb.w	r0, [sp, #15]
    e26c:	1c41      	adds	r1, r0, #1
    e26e:	2902      	cmp	r1, #2
    e270:	d307      	bcc.n	e282 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x4c>
    e272:	e7ff      	b.n	e274 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x3e>
    e274:	2000      	movs	r0, #0
    e276:	f88d 001b 	strb.w	r0, [sp, #27]
    e27a:	9800      	ldr	r0, [sp, #0]
    e27c:	9002      	str	r0, [sp, #8]
    e27e:	e006      	b.n	e28e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e280:	defe      	udf	#254	; 0xfe
    e282:	2000      	movs	r0, #0
    e284:	f88d 001a 	strb.w	r0, [sp, #26]
    e288:	9801      	ldr	r0, [sp, #4]
    e28a:	9002      	str	r0, [sp, #8]
    e28c:	e7ff      	b.n	e28e <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x58>
    e28e:	f89d 001a 	ldrb.w	r0, [sp, #26]
    e292:	07c0      	lsls	r0, r0, #31
    e294:	2800      	cmp	r0, #0
    e296:	d109      	bne.n	e2ac <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x76>
    e298:	e7ff      	b.n	e29a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e29a:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e29e:	07c0      	lsls	r0, r0, #31
    e2a0:	2800      	cmp	r0, #0
    e2a2:	d107      	bne.n	e2b4 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x7e>
    e2a4:	e7ff      	b.n	e2a6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>
    e2a6:	9802      	ldr	r0, [sp, #8]
    e2a8:	b008      	add	sp, #32
    e2aa:	bd80      	pop	{r7, pc}
    e2ac:	2000      	movs	r0, #0
    e2ae:	f88d 001a 	strb.w	r0, [sp, #26]
    e2b2:	e7f2      	b.n	e29a <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x64>
    e2b4:	2000      	movs	r0, #0
    e2b6:	f88d 001b 	strb.w	r0, [sp, #27]
    e2ba:	e7f4      	b.n	e2a6 <_ZN4core3cmp6max_by17h3c9686db40e0f078E+0x70>

0000e2bc <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>:
    e2bc:	b089      	sub	sp, #36	; 0x24
    e2be:	9005      	str	r0, [sp, #20]
    e2c0:	9106      	str	r1, [sp, #24]
    e2c2:	9107      	str	r1, [sp, #28]
    e2c4:	9907      	ldr	r1, [sp, #28]
    e2c6:	9002      	str	r0, [sp, #8]
    e2c8:	9101      	str	r1, [sp, #4]
    e2ca:	e7ff      	b.n	e2cc <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x10>
    e2cc:	9802      	ldr	r0, [sp, #8]
    e2ce:	9008      	str	r0, [sp, #32]
    e2d0:	9908      	ldr	r1, [sp, #32]
    e2d2:	9100      	str	r1, [sp, #0]
    e2d4:	e7ff      	b.n	e2d6 <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E+0x1a>
    e2d6:	9800      	ldr	r0, [sp, #0]
    e2d8:	9003      	str	r0, [sp, #12]
    e2da:	9901      	ldr	r1, [sp, #4]
    e2dc:	9104      	str	r1, [sp, #16]
    e2de:	9803      	ldr	r0, [sp, #12]
    e2e0:	9904      	ldr	r1, [sp, #16]
    e2e2:	b009      	add	sp, #36	; 0x24
    e2e4:	4770      	bx	lr

0000e2e6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E>:
    e2e6:	b580      	push	{r7, lr}
    e2e8:	b088      	sub	sp, #32
    e2ea:	9006      	str	r0, [sp, #24]
    e2ec:	9107      	str	r1, [sp, #28]
    e2ee:	9004      	str	r0, [sp, #16]
    e2f0:	4608      	mov	r0, r1
    e2f2:	9103      	str	r1, [sp, #12]
    e2f4:	f009 fa77 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
    e2f8:	9002      	str	r0, [sp, #8]
    e2fa:	e7ff      	b.n	e2fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x16>
    e2fc:	9802      	ldr	r0, [sp, #8]
    e2fe:	07c1      	lsls	r1, r0, #31
    e300:	2900      	cmp	r1, #0
    e302:	d105      	bne.n	e310 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x2a>
    e304:	e7ff      	b.n	e306 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x20>
    e306:	9803      	ldr	r0, [sp, #12]
    e308:	f009 fa71 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
    e30c:	9001      	str	r0, [sp, #4]
    e30e:	e007      	b.n	e320 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x3a>
    e310:	9804      	ldr	r0, [sp, #16]
    e312:	9903      	ldr	r1, [sp, #12]
    e314:	f00a f891 	bl	1843a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
    e318:	f88d 0017 	strb.w	r0, [sp, #23]
    e31c:	e7ff      	b.n	e31e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x38>
    e31e:	e015      	b.n	e34c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e320:	9801      	ldr	r0, [sp, #4]
    e322:	07c1      	lsls	r1, r0, #31
    e324:	2900      	cmp	r1, #0
    e326:	d107      	bne.n	e338 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x52>
    e328:	e7ff      	b.n	e32a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x44>
    e32a:	9804      	ldr	r0, [sp, #16]
    e32c:	9903      	ldr	r1, [sp, #12]
    e32e:	f00a f9ff 	bl	18730 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
    e332:	f88d 0017 	strb.w	r0, [sp, #23]
    e336:	e007      	b.n	e348 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x62>
    e338:	9804      	ldr	r0, [sp, #16]
    e33a:	9903      	ldr	r1, [sp, #12]
    e33c:	f00a f8e8 	bl	18510 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
    e340:	f88d 0017 	strb.w	r0, [sp, #23]
    e344:	e7ff      	b.n	e346 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x60>
    e346:	e000      	b.n	e34a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e348:	e7ff      	b.n	e34a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x64>
    e34a:	e7ff      	b.n	e34c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h0e349273d8b2c894E+0x66>
    e34c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    e350:	b008      	add	sp, #32
    e352:	bd80      	pop	{r7, pc}

0000e354 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>:
    e354:	b580      	push	{r7, lr}
    e356:	b086      	sub	sp, #24
    e358:	f8dd c020 	ldr.w	ip, [sp, #32]
    e35c:	9102      	str	r1, [sp, #8]
    e35e:	9203      	str	r2, [sp, #12]
    e360:	9304      	str	r3, [sp, #16]
    e362:	f8cd c014 	str.w	ip, [sp, #20]
    e366:	f04f 0e00 	mov.w	lr, #0
    e36a:	f8cd e004 	str.w	lr, [sp, #4]
    e36e:	f8cd e000 	str.w	lr, [sp]
    e372:	f8cd e000 	str.w	lr, [sp]
    e376:	6001      	str	r1, [r0, #0]
    e378:	6042      	str	r2, [r0, #4]
    e37a:	9900      	ldr	r1, [sp, #0]
    e37c:	9a01      	ldr	r2, [sp, #4]
    e37e:	6081      	str	r1, [r0, #8]
    e380:	60c2      	str	r2, [r0, #12]
    e382:	6103      	str	r3, [r0, #16]
    e384:	f8c0 c014 	str.w	ip, [r0, #20]
    e388:	b006      	add	sp, #24
    e38a:	bd80      	pop	{r7, pc}

0000e38c <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E>:
    e38c:	b580      	push	{r7, lr}
    e38e:	b084      	sub	sp, #16
    e390:	9001      	str	r0, [sp, #4]
    e392:	9102      	str	r1, [sp, #8]
    e394:	9801      	ldr	r0, [sp, #4]
    e396:	9902      	ldr	r1, [sp, #8]
    e398:	f7ff ff2b 	bl	e1f2 <_ZN4core3cmp5impls48_$LT$impl$u20$core..cmp..Ord$u20$for$u20$i32$GT$3cmp17he3302470ee1d030fE>
    e39c:	9000      	str	r0, [sp, #0]
    e39e:	e7ff      	b.n	e3a0 <_ZN4core3ops8function6FnOnce9call_once17hbe2142d9722f3102E+0x14>
    e3a0:	9800      	ldr	r0, [sp, #0]
    e3a2:	b004      	add	sp, #16
    e3a4:	bd80      	pop	{r7, pc}

0000e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct Coord(pub CoordPart, pub CoordPart);

    impl Coord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: CoordPart, y: CoordPart) -> Self {
    e3a6:	b084      	sub	sp, #16
    e3a8:	9002      	str	r0, [sp, #8]
    e3aa:	9103      	str	r1, [sp, #12]
            Coord(x, y)
    e3ac:	9000      	str	r0, [sp, #0]
    e3ae:	9101      	str	r1, [sp, #4]
        }
    e3b0:	9800      	ldr	r0, [sp, #0]
    e3b2:	9901      	ldr	r1, [sp, #4]
    e3b4:	b004      	add	sp, #16
    e3b6:	4770      	bx	lr

0000e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>:
    }

    impl Index<usize> for Coord {
        type Output = CoordPart;

        fn index(&self, idx: usize) -> &CoordPart {
    e3b8:	b580      	push	{r7, lr}
    e3ba:	b096      	sub	sp, #88	; 0x58
    e3bc:	9109      	str	r1, [sp, #36]	; 0x24
    e3be:	9014      	str	r0, [sp, #80]	; 0x50
            match idx {
                0 => &self.0,
    e3c0:	9909      	ldr	r1, [sp, #36]	; 0x24
    e3c2:	2900      	cmp	r1, #0
    e3c4:	9008      	str	r0, [sp, #32]
    e3c6:	9107      	str	r1, [sp, #28]
    e3c8:	d018      	beq.n	e3fc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x44>
    e3ca:	e7ff      	b.n	e3cc <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x14>
    e3cc:	9807      	ldr	r0, [sp, #28]
    e3ce:	2801      	cmp	r0, #1
    e3d0:	d017      	beq.n	e402 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x4a>
    e3d2:	e7ff      	b.n	e3d4 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x1c>
                1 => &self.1,
                _ => panic!("Unreachable index {}", idx),
    e3d4:	f64e 6084 	movw	r0, #61060	; 0xee84
    e3d8:	f2c0 0001 	movt	r0, #1
    e3dc:	6801      	ldr	r1, [r0, #0]
    e3de:	a809      	add	r0, sp, #36	; 0x24
    e3e0:	9013      	str	r0, [sp, #76]	; 0x4c
    e3e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
    e3e4:	9015      	str	r0, [sp, #84]	; 0x54
    e3e6:	f648 0225 	movw	r2, #34853	; 0x8825
    e3ea:	f2c0 0201 	movt	r2, #1
    e3ee:	9106      	str	r1, [sp, #24]
    e3f0:	4611      	mov	r1, r2
    e3f2:	f7ff ff63 	bl	e2bc <_ZN4core3fmt10ArgumentV13new17h5567184bcc425327E>
    e3f6:	9005      	str	r0, [sp, #20]
    e3f8:	9104      	str	r1, [sp, #16]
    e3fa:	e006      	b.n	e40a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x52>
                0 => &self.0,
    e3fc:	9808      	ldr	r0, [sp, #32]
    e3fe:	900a      	str	r0, [sp, #40]	; 0x28
            match idx {
    e400:	e020      	b.n	e444 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                1 => &self.1,
    e402:	9808      	ldr	r0, [sp, #32]
    e404:	1d01      	adds	r1, r0, #4
    e406:	910a      	str	r1, [sp, #40]	; 0x28
            match idx {
    e408:	e01c      	b.n	e444 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x8c>
                _ => panic!("Unreachable index {}", idx),
    e40a:	9805      	ldr	r0, [sp, #20]
    e40c:	9011      	str	r0, [sp, #68]	; 0x44
    e40e:	9904      	ldr	r1, [sp, #16]
    e410:	9112      	str	r1, [sp, #72]	; 0x48
    e412:	466a      	mov	r2, sp
    e414:	2301      	movs	r3, #1
    e416:	6013      	str	r3, [r2, #0]
    e418:	a80b      	add	r0, sp, #44	; 0x2c
    e41a:	aa11      	add	r2, sp, #68	; 0x44
    e41c:	9906      	ldr	r1, [sp, #24]
    e41e:	9203      	str	r2, [sp, #12]
    e420:	461a      	mov	r2, r3
    e422:	9b03      	ldr	r3, [sp, #12]
    e424:	f7ff ff96 	bl	e354 <_ZN4core3fmt9Arguments6new_v117h5816b2aaf07dbd9cE>
    e428:	e7ff      	b.n	e42a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x72>
    e42a:	f64e 6088 	movw	r0, #61064	; 0xee88
    e42e:	f2c0 0001 	movt	r0, #1
    e432:	f008 fb30 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    e436:	9002      	str	r0, [sp, #8]
    e438:	e7ff      	b.n	e43a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E+0x82>
    e43a:	a80b      	add	r0, sp, #44	; 0x2c
    e43c:	9902      	ldr	r1, [sp, #8]
    e43e:	f008 fb67 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    e442:	defe      	udf	#254	; 0xfe
            match idx {
    e444:	980a      	ldr	r0, [sp, #40]	; 0x28
            }
        }
    e446:	b016      	add	sp, #88	; 0x58
    e448:	bd80      	pop	{r7, pc}

0000e44a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>:
    /// #
    /// let coord = Coord::new(-5, 10);
    ///
    /// assert_eq!(coord.to_unsigned(), UnsignedCoord::new(0, 10));
    /// ```
    fn to_unsigned(self) -> UnsignedCoord {
    e44a:	b580      	push	{r7, lr}
    e44c:	b088      	sub	sp, #32
    e44e:	9006      	str	r0, [sp, #24]
    e450:	9107      	str	r1, [sp, #28]
    e452:	a806      	add	r0, sp, #24
    e454:	2100      	movs	r1, #0
        UnsignedCoord::new(self[0].max(0) as u32, self[1].max(0) as u32)
    e456:	f7ff ffaf 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e45a:	9005      	str	r0, [sp, #20]
    e45c:	e7ff      	b.n	e45e <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x14>
    e45e:	9805      	ldr	r0, [sp, #20]
    e460:	6800      	ldr	r0, [r0, #0]
    e462:	2100      	movs	r1, #0
    e464:	f7ff feba 	bl	e1dc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e468:	9004      	str	r0, [sp, #16]
    e46a:	e7ff      	b.n	e46c <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x22>
    e46c:	a806      	add	r0, sp, #24
    e46e:	2101      	movs	r1, #1
    e470:	f7ff ffa2 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
    e474:	9003      	str	r0, [sp, #12]
    e476:	e7ff      	b.n	e478 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x2e>
    e478:	9803      	ldr	r0, [sp, #12]
    e47a:	6800      	ldr	r0, [r0, #0]
    e47c:	2100      	movs	r1, #0
    e47e:	f7ff fead 	bl	e1dc <_ZN4core3cmp3Ord3max17hc24a5fa42acd92eeE>
    e482:	9002      	str	r0, [sp, #8]
    e484:	e7ff      	b.n	e486 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x3c>
    e486:	9804      	ldr	r0, [sp, #16]
    e488:	9902      	ldr	r1, [sp, #8]
    e48a:	f000 f84e 	bl	e52a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>
    e48e:	9001      	str	r0, [sp, #4]
    e490:	9100      	str	r1, [sp, #0]
    e492:	e7ff      	b.n	e494 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE+0x4a>
    }
    e494:	9801      	ldr	r0, [sp, #4]
    e496:	9900      	ldr	r1, [sp, #0]
    e498:	b008      	add	sp, #32
    e49a:	bd80      	pop	{r7, pc}

0000e49c <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE>:
/// Take a tuple of 8 bit `(red, green, blue)` color values and convert them to a single 16 bit
/// color
///
/// The 2 or 3 (for the green channel) least significant bits are discarded
impl From<(u8, u8, u8)> for Rgb565 {
    fn from((r, g, b): (u8, u8, u8)) -> Self {
    e49c:	b08b      	sub	sp, #44	; 0x2c
    e49e:	4601      	mov	r1, r0
    e4a0:	f8ad 0020 	strh.w	r0, [sp, #32]
    e4a4:	0c00      	lsrs	r0, r0, #16
    e4a6:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    e4aa:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    e4ae:	f88d 001e 	strb.w	r0, [sp, #30]
    e4b2:	f8bd 0020 	ldrh.w	r0, [sp, #32]
    e4b6:	f8ad 001c 	strh.w	r0, [sp, #28]
    e4ba:	f89d 001c 	ldrb.w	r0, [sp, #28]
    e4be:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    e4c2:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e4c6:	4613      	mov	r3, r2
    e4c8:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
    e4cc:	f89d 201e 	ldrb.w	r2, [sp, #30]
    e4d0:	4694      	mov	ip, r2
    e4d2:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
        let value =
        // Red
        (((r as u16) << 8) & RED_MASK)
    e4d6:	0200      	lsls	r0, r0, #8
    e4d8:	9306      	str	r3, [sp, #24]
    e4da:	f8cd c014 	str.w	ip, [sp, #20]
    e4de:	9004      	str	r0, [sp, #16]
    e4e0:	e7ff      	b.n	e4e2 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x46>
    e4e2:	9804      	ldr	r0, [sp, #16]
    e4e4:	f400 4178 	and.w	r1, r0, #63488	; 0xf800
        // Green
        | (((g as u16) << 3) & GREEN_MASK)
    e4e8:	9a06      	ldr	r2, [sp, #24]
    e4ea:	b2d3      	uxtb	r3, r2
    e4ec:	00db      	lsls	r3, r3, #3
    e4ee:	9103      	str	r1, [sp, #12]
    e4f0:	9302      	str	r3, [sp, #8]
    e4f2:	e7ff      	b.n	e4f4 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x58>
    e4f4:	9802      	ldr	r0, [sp, #8]
    e4f6:	f400 61fc 	and.w	r1, r0, #2016	; 0x7e0
        (((r as u16) << 8) & RED_MASK)
    e4fa:	9a03      	ldr	r2, [sp, #12]
    e4fc:	4311      	orrs	r1, r2
        // Blue
        | ((b as u16) >> 3 & BLUE_MASK);
    e4fe:	9b05      	ldr	r3, [sp, #20]
    e500:	fa5f fc83 	uxtb.w	ip, r3
    e504:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
    e508:	9101      	str	r1, [sp, #4]
    e50a:	f8cd c000 	str.w	ip, [sp]
    e50e:	e7ff      	b.n	e510 <_ZN123_$LT$embedded_graphics..pixelcolor..rgb565..Rgb565$u20$as$u20$core..convert..From$LT$$LP$u8$C$$u20$u8$C$$u20$u8$RP$$GT$$GT$4from17h1306c4919387d69bE+0x74>
    e510:	9800      	ldr	r0, [sp, #0]
    e512:	f000 011f 	and.w	r1, r0, #31
        (((r as u16) << 8) & RED_MASK)
    e516:	9a01      	ldr	r2, [sp, #4]
    e518:	4311      	orrs	r1, r2
    e51a:	f8ad 102a 	strh.w	r1, [sp, #42]	; 0x2a

        Self(value)
    e51e:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
    }
    e522:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
    e526:	b00b      	add	sp, #44	; 0x2c
    e528:	4770      	bx	lr

0000e52a <_ZN17embedded_graphics13unsignedcoord23internal_unsigned_coord13UnsignedCoord3new17hf918c043a29664e3E>:
    #[derive(Debug, Copy, Clone, Eq, PartialEq)]
    pub struct UnsignedCoord(pub UnsignedCoordPart, pub UnsignedCoordPart);

    impl UnsignedCoord {
        /// Create a new coordinate with X and Y values
        pub fn new(x: UnsignedCoordPart, y: UnsignedCoordPart) -> Self {
    e52a:	b084      	sub	sp, #16
    e52c:	9002      	str	r0, [sp, #8]
    e52e:	9103      	str	r1, [sp, #12]
            UnsignedCoord(x, y)
    e530:	9000      	str	r0, [sp, #0]
    e532:	9101      	str	r1, [sp, #4]
        }
    e534:	9800      	ldr	r0, [sp, #0]
    e536:	9901      	ldr	r1, [sp, #4]
    e538:	b004      	add	sp, #16
    e53a:	4770      	bx	lr

0000e53c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>:
    e53c:	b580      	push	{r7, lr}
    e53e:	b088      	sub	sp, #32
    e540:	9005      	str	r0, [sp, #20]
    e542:	9106      	str	r1, [sp, #24]
    e544:	9003      	str	r0, [sp, #12]
    e546:	4608      	mov	r0, r1
    e548:	f000 fa21 	bl	e98e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>
    e54c:	9004      	str	r0, [sp, #16]
    e54e:	e7ff      	b.n	e550 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x14>
    e550:	9804      	ldr	r0, [sp, #16]
    e552:	9007      	str	r0, [sp, #28]
    e554:	9903      	ldr	r1, [sp, #12]
    e556:	680a      	ldr	r2, [r1, #0]
    e558:	9002      	str	r0, [sp, #8]
    e55a:	4610      	mov	r0, r2
    e55c:	9902      	ldr	r1, [sp, #8]
    e55e:	f000 f837 	bl	e5d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>
    e562:	9001      	str	r0, [sp, #4]
    e564:	9100      	str	r1, [sp, #0]
    e566:	e7ff      	b.n	e568 <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE+0x2c>
    e568:	9801      	ldr	r0, [sp, #4]
    e56a:	9900      	ldr	r1, [sp, #0]
    e56c:	b008      	add	sp, #32
    e56e:	bd80      	pop	{r7, pc}

0000e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>:
    e570:	b580      	push	{r7, lr}
    e572:	b084      	sub	sp, #16
    e574:	9001      	str	r0, [sp, #4]
    e576:	9102      	str	r1, [sp, #8]
    e578:	9203      	str	r2, [sp, #12]
    e57a:	9000      	str	r0, [sp, #0]
    e57c:	4608      	mov	r0, r1
    e57e:	9900      	ldr	r1, [sp, #0]
    e580:	f00e fe64 	bl	1d24c <__aeabi_memcpy>
    e584:	e7ff      	b.n	e586 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE+0x16>
    e586:	b004      	add	sp, #16
    e588:	bd80      	pop	{r7, pc}

0000e58a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>:
    e58a:	b580      	push	{r7, lr}
    e58c:	b084      	sub	sp, #16
    e58e:	9001      	str	r0, [sp, #4]
    e590:	9102      	str	r1, [sp, #8]
    e592:	9203      	str	r2, [sp, #12]
    e594:	0092      	lsls	r2, r2, #2
    e596:	9000      	str	r0, [sp, #0]
    e598:	4608      	mov	r0, r1
    e59a:	9900      	ldr	r1, [sp, #0]
    e59c:	f00e fe56 	bl	1d24c <__aeabi_memcpy>
    e5a0:	e7ff      	b.n	e5a2 <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E+0x18>
    e5a2:	b004      	add	sp, #16
    e5a4:	bd80      	pop	{r7, pc}

0000e5a6 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>:
    e5a6:	b082      	sub	sp, #8
    e5a8:	9000      	str	r0, [sp, #0]
    e5aa:	9101      	str	r1, [sp, #4]
    e5ac:	6800      	ldr	r0, [r0, #0]
    e5ae:	6809      	ldr	r1, [r1, #0]
    e5b0:	2200      	movs	r2, #0
    e5b2:	4288      	cmp	r0, r1
    e5b4:	bf38      	it	cc
    e5b6:	2201      	movcc	r2, #1
    e5b8:	4610      	mov	r0, r2
    e5ba:	b002      	add	sp, #8
    e5bc:	4770      	bx	lr

0000e5be <_ZN4core3mem4swap17hc4afbec7b5ffb125E>:
    e5be:	b580      	push	{r7, lr}
    e5c0:	b082      	sub	sp, #8
    e5c2:	9000      	str	r0, [sp, #0]
    e5c4:	9101      	str	r1, [sp, #4]
    e5c6:	f000 f85f 	bl	e688 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>
    e5ca:	e7ff      	b.n	e5cc <_ZN4core3mem4swap17hc4afbec7b5ffb125E+0xe>
    e5cc:	b002      	add	sp, #8
    e5ce:	bd80      	pop	{r7, pc}

0000e5d0 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE>:
    e5d0:	b580      	push	{r7, lr}
    e5d2:	b088      	sub	sp, #32
    e5d4:	9004      	str	r0, [sp, #16]
    e5d6:	9105      	str	r1, [sp, #20]
    e5d8:	f000 f819 	bl	e60e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>
    e5dc:	9001      	str	r0, [sp, #4]
    e5de:	9100      	str	r1, [sp, #0]
    e5e0:	e7ff      	b.n	e5e2 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x12>
    e5e2:	9801      	ldr	r0, [sp, #4]
    e5e4:	9006      	str	r0, [sp, #24]
    e5e6:	9900      	ldr	r1, [sp, #0]
    e5e8:	f001 0201 	and.w	r2, r1, #1
    e5ec:	f88d 201f 	strb.w	r2, [sp, #31]
    e5f0:	2a00      	cmp	r2, #0
    e5f2:	d105      	bne.n	e600 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x30>
    e5f4:	e7ff      	b.n	e5f6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x26>
    e5f6:	9801      	ldr	r0, [sp, #4]
    e5f8:	9003      	str	r0, [sp, #12]
    e5fa:	2101      	movs	r1, #1
    e5fc:	9102      	str	r1, [sp, #8]
    e5fe:	e002      	b.n	e606 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e600:	2000      	movs	r0, #0
    e602:	9002      	str	r0, [sp, #8]
    e604:	e7ff      	b.n	e606 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_add17h62752b2fe0369dccE+0x36>
    e606:	9802      	ldr	r0, [sp, #8]
    e608:	9903      	ldr	r1, [sp, #12]
    e60a:	b008      	add	sp, #32
    e60c:	bd80      	pop	{r7, pc}

0000e60e <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE>:
    e60e:	b08a      	sub	sp, #40	; 0x28
    e610:	9004      	str	r0, [sp, #16]
    e612:	9105      	str	r1, [sp, #20]
    e614:	1840      	adds	r0, r0, r1
    e616:	f04f 0100 	mov.w	r1, #0
    e61a:	f141 0100 	adc.w	r1, r1, #0
    e61e:	9006      	str	r0, [sp, #24]
    e620:	f88d 101c 	strb.w	r1, [sp, #28]
    e624:	9806      	ldr	r0, [sp, #24]
    e626:	f89d 101c 	ldrb.w	r1, [sp, #28]
    e62a:	9001      	str	r0, [sp, #4]
    e62c:	9100      	str	r1, [sp, #0]
    e62e:	e7ff      	b.n	e630 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_add17h1de5ce466b8d374cE+0x22>
    e630:	9801      	ldr	r0, [sp, #4]
    e632:	9008      	str	r0, [sp, #32]
    e634:	9900      	ldr	r1, [sp, #0]
    e636:	f001 0201 	and.w	r2, r1, #1
    e63a:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
    e63e:	9002      	str	r0, [sp, #8]
    e640:	f88d 200c 	strb.w	r2, [sp, #12]
    e644:	9802      	ldr	r0, [sp, #8]
    e646:	f89d 100c 	ldrb.w	r1, [sp, #12]
    e64a:	b00a      	add	sp, #40	; 0x28
    e64c:	4770      	bx	lr

0000e64e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>:
    e64e:	b580      	push	{r7, lr}
    e650:	b08c      	sub	sp, #48	; 0x30
    e652:	9005      	str	r0, [sp, #20]
    e654:	9106      	str	r1, [sp, #24]
    e656:	9207      	str	r2, [sp, #28]
    e658:	4603      	mov	r3, r0
    e65a:	9008      	str	r0, [sp, #32]
    e65c:	4608      	mov	r0, r1
    e65e:	9109      	str	r1, [sp, #36]	; 0x24
    e660:	2104      	movs	r1, #4
    e662:	910b      	str	r1, [sp, #44]	; 0x2c
    e664:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e666:	9204      	str	r2, [sp, #16]
    e668:	9303      	str	r3, [sp, #12]
    e66a:	9002      	str	r0, [sp, #8]
    e66c:	9101      	str	r1, [sp, #4]
    e66e:	e7ff      	b.n	e670 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x22>
    e670:	9801      	ldr	r0, [sp, #4]
    e672:	9904      	ldr	r1, [sp, #16]
    e674:	fb00 f201 	mul.w	r2, r0, r1
    e678:	920a      	str	r2, [sp, #40]	; 0x28
    e67a:	9803      	ldr	r0, [sp, #12]
    e67c:	9902      	ldr	r1, [sp, #8]
    e67e:	f000 f82e 	bl	e6de <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>
    e682:	e7ff      	b.n	e684 <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E+0x36>
    e684:	b00c      	add	sp, #48	; 0x30
    e686:	bd80      	pop	{r7, pc}

0000e688 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE>:
    e688:	b580      	push	{r7, lr}
    e68a:	b088      	sub	sp, #32
    e68c:	9004      	str	r0, [sp, #16]
    e68e:	9105      	str	r1, [sp, #20]
    e690:	2204      	movs	r2, #4
    e692:	9207      	str	r2, [sp, #28]
    e694:	9a07      	ldr	r2, [sp, #28]
    e696:	9103      	str	r1, [sp, #12]
    e698:	9002      	str	r0, [sp, #8]
    e69a:	9201      	str	r2, [sp, #4]
    e69c:	e7ff      	b.n	e69e <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x16>
    e69e:	9801      	ldr	r0, [sp, #4]
    e6a0:	2820      	cmp	r0, #32
    e6a2:	d306      	bcc.n	e6b2 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x2a>
    e6a4:	e7ff      	b.n	e6a6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x1e>
    e6a6:	2201      	movs	r2, #1
    e6a8:	9802      	ldr	r0, [sp, #8]
    e6aa:	9903      	ldr	r1, [sp, #12]
    e6ac:	f7ff ffcf 	bl	e64e <_ZN4core3ptr19swap_nonoverlapping17ha73b10cebb4f8612E>
    e6b0:	e012      	b.n	e6d8 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x50>
    e6b2:	9802      	ldr	r0, [sp, #8]
    e6b4:	f000 f8a1 	bl	e7fa <_ZN4core3ptr4read17h2038b0ecb0975c4fE>
    e6b8:	4601      	mov	r1, r0
    e6ba:	9006      	str	r0, [sp, #24]
    e6bc:	9100      	str	r1, [sp, #0]
    e6be:	e7ff      	b.n	e6c0 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x38>
    e6c0:	2201      	movs	r2, #1
    e6c2:	9803      	ldr	r0, [sp, #12]
    e6c4:	9902      	ldr	r1, [sp, #8]
    e6c6:	f7ff ff60 	bl	e58a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e6ca:	e7ff      	b.n	e6cc <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x44>
    e6cc:	9803      	ldr	r0, [sp, #12]
    e6ce:	9900      	ldr	r1, [sp, #0]
    e6d0:	f000 f8ac 	bl	e82c <_ZN4core3ptr5write17h4a80332de2cee3d3E>
    e6d4:	e7ff      	b.n	e6d6 <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x4e>
    e6d6:	e000      	b.n	e6da <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e6d8:	e7ff      	b.n	e6da <_ZN4core3ptr23swap_nonoverlapping_one17h12b3d72560cc077cE+0x52>
    e6da:	b008      	add	sp, #32
    e6dc:	bd80      	pop	{r7, pc}

0000e6de <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE>:
    e6de:	b5d0      	push	{r4, r6, r7, lr}
    e6e0:	af02      	add	r7, sp, #8
    e6e2:	b0b4      	sub	sp, #208	; 0xd0
    e6e4:	466c      	mov	r4, sp
    e6e6:	f36f 0404 	bfc	r4, #0, #5
    e6ea:	46a5      	mov	sp, r4
    e6ec:	9024      	str	r0, [sp, #144]	; 0x90
    e6ee:	9125      	str	r1, [sp, #148]	; 0x94
    e6f0:	9226      	str	r2, [sp, #152]	; 0x98
    e6f2:	2320      	movs	r3, #32
    e6f4:	932f      	str	r3, [sp, #188]	; 0xbc
    e6f6:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
    e6f8:	9327      	str	r3, [sp, #156]	; 0x9c
    e6fa:	920e      	str	r2, [sp, #56]	; 0x38
    e6fc:	910d      	str	r1, [sp, #52]	; 0x34
    e6fe:	900c      	str	r0, [sp, #48]	; 0x30
    e700:	930b      	str	r3, [sp, #44]	; 0x2c
    e702:	e7ff      	b.n	e704 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x26>
    e704:	2000      	movs	r0, #0
    e706:	900f      	str	r0, [sp, #60]	; 0x3c
    e708:	e7ff      	b.n	e70a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e70a:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e70c:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e70e:	4408      	add	r0, r1
    e710:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    e712:	4290      	cmp	r0, r2
    e714:	d905      	bls.n	e722 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x44>
    e716:	e7ff      	b.n	e718 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x3a>
    e718:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e71a:	990e      	ldr	r1, [sp, #56]	; 0x38
    e71c:	4288      	cmp	r0, r1
    e71e:	d334      	bcc.n	e78a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xac>
    e720:	e067      	b.n	e7f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e722:	e7ff      	b.n	e724 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x46>
    e724:	a810      	add	r0, sp, #64	; 0x40
    e726:	9030      	str	r0, [sp, #192]	; 0xc0
    e728:	9031      	str	r0, [sp, #196]	; 0xc4
    e72a:	e7ff      	b.n	e72c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x4e>
    e72c:	a810      	add	r0, sp, #64	; 0x40
    e72e:	4601      	mov	r1, r0
    e730:	9028      	str	r0, [sp, #160]	; 0xa0
    e732:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e734:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e736:	900a      	str	r0, [sp, #40]	; 0x28
    e738:	4610      	mov	r0, r2
    e73a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    e73c:	9109      	str	r1, [sp, #36]	; 0x24
    e73e:	4619      	mov	r1, r3
    e740:	f000 f87a 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e744:	4601      	mov	r1, r0
    e746:	9029      	str	r0, [sp, #164]	; 0xa4
    e748:	9108      	str	r1, [sp, #32]
    e74a:	e7ff      	b.n	e74c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x6e>
    e74c:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e74e:	980d      	ldr	r0, [sp, #52]	; 0x34
    e750:	f000 f872 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e754:	4601      	mov	r1, r0
    e756:	902a      	str	r0, [sp, #168]	; 0xa8
    e758:	9107      	str	r1, [sp, #28]
    e75a:	e7ff      	b.n	e75c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x7e>
    e75c:	9808      	ldr	r0, [sp, #32]
    e75e:	9909      	ldr	r1, [sp, #36]	; 0x24
    e760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e762:	f7ff ff05 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e766:	e7ff      	b.n	e768 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x8a>
    e768:	9807      	ldr	r0, [sp, #28]
    e76a:	9908      	ldr	r1, [sp, #32]
    e76c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e76e:	f7ff feff 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e772:	e7ff      	b.n	e774 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x96>
    e774:	9809      	ldr	r0, [sp, #36]	; 0x24
    e776:	9907      	ldr	r1, [sp, #28]
    e778:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    e77a:	f7ff fef9 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e77e:	e7ff      	b.n	e780 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xa2>
    e780:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e782:	990b      	ldr	r1, [sp, #44]	; 0x2c
    e784:	4408      	add	r0, r1
    e786:	900f      	str	r0, [sp, #60]	; 0x3c
    e788:	e7bf      	b.n	e70a <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x2c>
    e78a:	e7ff      	b.n	e78c <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xae>
    e78c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    e78e:	990e      	ldr	r1, [sp, #56]	; 0x38
    e790:	1a08      	subs	r0, r1, r0
    e792:	4602      	mov	r2, r0
    e794:	902b      	str	r0, [sp, #172]	; 0xac
    e796:	a81c      	add	r0, sp, #112	; 0x70
    e798:	9032      	str	r0, [sp, #200]	; 0xc8
    e79a:	9033      	str	r0, [sp, #204]	; 0xcc
    e79c:	9206      	str	r2, [sp, #24]
    e79e:	9005      	str	r0, [sp, #20]
    e7a0:	e7ff      	b.n	e7a2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xc4>
    e7a2:	9805      	ldr	r0, [sp, #20]
    e7a4:	9905      	ldr	r1, [sp, #20]
    e7a6:	912c      	str	r1, [sp, #176]	; 0xb0
    e7a8:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e7aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    e7ac:	9004      	str	r0, [sp, #16]
    e7ae:	4610      	mov	r0, r2
    e7b0:	f000 f842 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e7b4:	4601      	mov	r1, r0
    e7b6:	902d      	str	r0, [sp, #180]	; 0xb4
    e7b8:	9103      	str	r1, [sp, #12]
    e7ba:	e7ff      	b.n	e7bc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xde>
    e7bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
    e7be:	980d      	ldr	r0, [sp, #52]	; 0x34
    e7c0:	f000 f83a 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e7c4:	4601      	mov	r1, r0
    e7c6:	902e      	str	r0, [sp, #184]	; 0xb8
    e7c8:	9102      	str	r1, [sp, #8]
    e7ca:	e7ff      	b.n	e7cc <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xee>
    e7cc:	9803      	ldr	r0, [sp, #12]
    e7ce:	9904      	ldr	r1, [sp, #16]
    e7d0:	9a06      	ldr	r2, [sp, #24]
    e7d2:	f7ff fecd 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e7d6:	e7ff      	b.n	e7d8 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0xfa>
    e7d8:	9802      	ldr	r0, [sp, #8]
    e7da:	9903      	ldr	r1, [sp, #12]
    e7dc:	9a06      	ldr	r2, [sp, #24]
    e7de:	f7ff fec7 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e7e2:	e7ff      	b.n	e7e4 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x106>
    e7e4:	9804      	ldr	r0, [sp, #16]
    e7e6:	9902      	ldr	r1, [sp, #8]
    e7e8:	9a06      	ldr	r2, [sp, #24]
    e7ea:	f7ff fec1 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    e7ee:	e7ff      	b.n	e7f0 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x112>
    e7f0:	e7ff      	b.n	e7f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17h138bad5ca3df1abfE+0x114>
    e7f2:	f1a7 0408 	sub.w	r4, r7, #8
    e7f6:	46a5      	mov	sp, r4
    e7f8:	bdd0      	pop	{r4, r6, r7, pc}

0000e7fa <_ZN4core3ptr4read17h2038b0ecb0975c4fE>:
    e7fa:	b580      	push	{r7, lr}
    e7fc:	b08a      	sub	sp, #40	; 0x28
    e7fe:	9004      	str	r0, [sp, #16]
    e800:	9905      	ldr	r1, [sp, #20]
    e802:	9103      	str	r1, [sp, #12]
    e804:	9002      	str	r0, [sp, #8]
    e806:	e7ff      	b.n	e808 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0xe>
    e808:	a803      	add	r0, sp, #12
    e80a:	9008      	str	r0, [sp, #32]
    e80c:	9009      	str	r0, [sp, #36]	; 0x24
    e80e:	e7ff      	b.n	e810 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x16>
    e810:	a903      	add	r1, sp, #12
    e812:	2201      	movs	r2, #1
    e814:	9802      	ldr	r0, [sp, #8]
    e816:	f7ff feb8 	bl	e58a <_ZN4core10intrinsics19copy_nonoverlapping17h109d702b9fec90b4E>
    e81a:	e7ff      	b.n	e81c <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x22>
    e81c:	9803      	ldr	r0, [sp, #12]
    e81e:	9006      	str	r0, [sp, #24]
    e820:	9007      	str	r0, [sp, #28]
    e822:	9001      	str	r0, [sp, #4]
    e824:	e7ff      	b.n	e826 <_ZN4core3ptr4read17h2038b0ecb0975c4fE+0x2c>
    e826:	9801      	ldr	r0, [sp, #4]
    e828:	b00a      	add	sp, #40	; 0x28
    e82a:	bd80      	pop	{r7, pc}

0000e82c <_ZN4core3ptr5write17h4a80332de2cee3d3E>:
    e82c:	b082      	sub	sp, #8
    e82e:	9000      	str	r0, [sp, #0]
    e830:	9101      	str	r1, [sp, #4]
    e832:	6001      	str	r1, [r0, #0]
    e834:	b002      	add	sp, #8
    e836:	4770      	bx	lr

0000e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>:
    e838:	b580      	push	{r7, lr}
    e83a:	b084      	sub	sp, #16
    e83c:	9002      	str	r0, [sp, #8]
    e83e:	9103      	str	r1, [sp, #12]
    e840:	f000 f805 	bl	e84e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>
    e844:	9001      	str	r0, [sp, #4]
    e846:	e7ff      	b.n	e848 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E+0x10>
    e848:	9801      	ldr	r0, [sp, #4]
    e84a:	b004      	add	sp, #16
    e84c:	bd80      	pop	{r7, pc}

0000e84e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE>:
    e84e:	b084      	sub	sp, #16
    e850:	9001      	str	r0, [sp, #4]
    e852:	9102      	str	r1, [sp, #8]
    e854:	4408      	add	r0, r1
    e856:	9003      	str	r0, [sp, #12]
    e858:	9803      	ldr	r0, [sp, #12]
    e85a:	9000      	str	r0, [sp, #0]
    e85c:	e7ff      	b.n	e85e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17h226e6a1f834180edE+0x10>
    e85e:	9800      	ldr	r0, [sp, #0]
    e860:	b004      	add	sp, #16
    e862:	4770      	bx	lr

0000e864 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>:
    e864:	b580      	push	{r7, lr}
    e866:	b084      	sub	sp, #16
    e868:	9002      	str	r0, [sp, #8]
    e86a:	9103      	str	r1, [sp, #12]
    e86c:	f000 f805 	bl	e87a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>
    e870:	9001      	str	r0, [sp, #4]
    e872:	e7ff      	b.n	e874 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE+0x10>
    e874:	9801      	ldr	r0, [sp, #4]
    e876:	b004      	add	sp, #16
    e878:	bd80      	pop	{r7, pc}

0000e87a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE>:
    e87a:	b084      	sub	sp, #16
    e87c:	9001      	str	r0, [sp, #4]
    e87e:	9102      	str	r1, [sp, #8]
    e880:	4408      	add	r0, r1
    e882:	9003      	str	r0, [sp, #12]
    e884:	9803      	ldr	r0, [sp, #12]
    e886:	9000      	str	r0, [sp, #0]
    e888:	e7ff      	b.n	e88a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h7d13c8ac3e78d56eE+0x10>
    e88a:	9800      	ldr	r0, [sp, #0]
    e88c:	b004      	add	sp, #16
    e88e:	4770      	bx	lr

0000e890 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E>:
    e890:	b580      	push	{r7, lr}
    e892:	b08a      	sub	sp, #40	; 0x28
    e894:	9009      	str	r0, [sp, #36]	; 0x24
    e896:	2100      	movs	r1, #0
    e898:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    e89c:	1d01      	adds	r1, r0, #4
    e89e:	9002      	str	r0, [sp, #8]
    e8a0:	f7ff fe81 	bl	e5a6 <_ZN4core3cmp5impls57_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$usize$GT$2lt17h28223aad246fd0b2E>
    e8a4:	9001      	str	r0, [sp, #4]
    e8a6:	e7ff      	b.n	e8a8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x18>
    e8a8:	9801      	ldr	r0, [sp, #4]
    e8aa:	07c1      	lsls	r1, r0, #31
    e8ac:	2900      	cmp	r1, #0
    e8ae:	d103      	bne.n	e8b8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x28>
    e8b0:	e7ff      	b.n	e8b2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x22>
    e8b2:	2000      	movs	r0, #0
    e8b4:	9003      	str	r0, [sp, #12]
    e8b6:	e021      	b.n	e8fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e8b8:	2001      	movs	r0, #1
    e8ba:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e8be:	9902      	ldr	r1, [sp, #8]
    e8c0:	9000      	str	r0, [sp, #0]
    e8c2:	4608      	mov	r0, r1
    e8c4:	9900      	ldr	r1, [sp, #0]
    e8c6:	f7ff fe39 	bl	e53c <_ZN49_$LT$usize$u20$as$u20$core..iter..range..Step$GT$9add_usize17hcea6c8087108259fE>
    e8ca:	9106      	str	r1, [sp, #24]
    e8cc:	9005      	str	r0, [sp, #20]
    e8ce:	e7ff      	b.n	e8d0 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x40>
    e8d0:	9805      	ldr	r0, [sp, #20]
    e8d2:	2801      	cmp	r0, #1
    e8d4:	d003      	beq.n	e8de <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x4e>
    e8d6:	e7ff      	b.n	e8d8 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x48>
    e8d8:	2000      	movs	r0, #0
    e8da:	9003      	str	r0, [sp, #12]
    e8dc:	e021      	b.n	e922 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e8de:	2000      	movs	r0, #0
    e8e0:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e8e4:	9806      	ldr	r0, [sp, #24]
    e8e6:	9007      	str	r0, [sp, #28]
    e8e8:	a807      	add	r0, sp, #28
    e8ea:	9902      	ldr	r1, [sp, #8]
    e8ec:	f7ff fe67 	bl	e5be <_ZN4core3mem4swap17hc4afbec7b5ffb125E>
    e8f0:	e7ff      	b.n	e8f2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x62>
    e8f2:	9807      	ldr	r0, [sp, #28]
    e8f4:	9004      	str	r0, [sp, #16]
    e8f6:	2001      	movs	r0, #1
    e8f8:	9003      	str	r0, [sp, #12]
    e8fa:	e012      	b.n	e922 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x92>
    e8fc:	9803      	ldr	r0, [sp, #12]
    e8fe:	9904      	ldr	r1, [sp, #16]
    e900:	b00a      	add	sp, #40	; 0x28
    e902:	bd80      	pop	{r7, pc}
    e904:	2000      	movs	r0, #0
    e906:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e90a:	e7f7      	b.n	e8fc <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x6c>
    e90c:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    e910:	07c0      	lsls	r0, r0, #31
    e912:	2800      	cmp	r0, #0
    e914:	d0f6      	beq.n	e904 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e916:	e7ff      	b.n	e918 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x88>
    e918:	2000      	movs	r0, #0
    e91a:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    e91e:	e7f1      	b.n	e904 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e920:	e7f0      	b.n	e904 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x74>
    e922:	9805      	ldr	r0, [sp, #20]
    e924:	2801      	cmp	r0, #1
    e926:	d0f1      	beq.n	e90c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x7c>
    e928:	e7fa      	b.n	e920 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17h72645be3e0035177E+0x90>

0000e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>:
    e92a:	b082      	sub	sp, #8
    e92c:	9000      	str	r0, [sp, #0]
    e92e:	9101      	str	r1, [sp, #4]
    e930:	b002      	add	sp, #8
    e932:	4770      	bx	lr

0000e934 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>:
    e934:	b580      	push	{r7, lr}
    e936:	b086      	sub	sp, #24
    e938:	9003      	str	r0, [sp, #12]
    e93a:	9104      	str	r1, [sp, #16]
    e93c:	9205      	str	r2, [sp, #20]
    e93e:	9002      	str	r0, [sp, #8]
    e940:	4610      	mov	r0, r2
    e942:	9a02      	ldr	r2, [sp, #8]
    e944:	9101      	str	r1, [sp, #4]
    e946:	4611      	mov	r1, r2
    e948:	9a01      	ldr	r2, [sp, #4]
    e94a:	f000 f846 	bl	e9da <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>
    e94e:	9000      	str	r0, [sp, #0]
    e950:	e7ff      	b.n	e952 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E+0x1e>
    e952:	9800      	ldr	r0, [sp, #0]
    e954:	b006      	add	sp, #24
    e956:	bd80      	pop	{r7, pc}

0000e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>:
    e958:	b084      	sub	sp, #16
    e95a:	9002      	str	r0, [sp, #8]
    e95c:	9103      	str	r1, [sp, #12]
    e95e:	9000      	str	r0, [sp, #0]
    e960:	9101      	str	r1, [sp, #4]
    e962:	9801      	ldr	r0, [sp, #4]
    e964:	b004      	add	sp, #16
    e966:	4770      	bx	lr

0000e968 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>:
    e968:	b082      	sub	sp, #8
    e96a:	9000      	str	r0, [sp, #0]
    e96c:	9101      	str	r1, [sp, #4]
    e96e:	b002      	add	sp, #8
    e970:	4770      	bx	lr

0000e972 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>:
    e972:	b081      	sub	sp, #4
    e974:	9000      	str	r0, [sp, #0]
    e976:	b001      	add	sp, #4
    e978:	4770      	bx	lr

0000e97a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>:
    e97a:	b580      	push	{r7, lr}
    e97c:	b082      	sub	sp, #8
    e97e:	9001      	str	r0, [sp, #4]
    e980:	f7ff fff7 	bl	e972 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17haa988019d9d5f1caE>
    e984:	9000      	str	r0, [sp, #0]
    e986:	e7ff      	b.n	e988 <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE+0xe>
    e988:	9800      	ldr	r0, [sp, #0]
    e98a:	b002      	add	sp, #8
    e98c:	bd80      	pop	{r7, pc}

0000e98e <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E>:
    e98e:	b580      	push	{r7, lr}
    e990:	b084      	sub	sp, #16
    e992:	9003      	str	r0, [sp, #12]
    e994:	f7ff fff1 	bl	e97a <_ZN50_$LT$T$u20$as$u20$core..convert..Into$LT$U$GT$$GT$4into17he4c1477575c29e9eE>
    e998:	9001      	str	r0, [sp, #4]
    e99a:	e7ff      	b.n	e99c <_ZN53_$LT$T$u20$as$u20$core..convert..TryFrom$LT$U$GT$$GT$8try_from17hf0dd0b2560c11703E+0xe>
    e99c:	9801      	ldr	r0, [sp, #4]
    e99e:	9002      	str	r0, [sp, #8]
    e9a0:	9802      	ldr	r0, [sp, #8]
    e9a2:	b004      	add	sp, #16
    e9a4:	bd80      	pop	{r7, pc}

0000e9a6 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h46fa5a2beb3ab8d5E>:
    e9a6:	b082      	sub	sp, #8
    e9a8:	9000      	str	r0, [sp, #0]
    e9aa:	9101      	str	r1, [sp, #4]
    e9ac:	b002      	add	sp, #8
    e9ae:	4770      	bx	lr

0000e9b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>:
    e9b0:	b580      	push	{r7, lr}
    e9b2:	b086      	sub	sp, #24
    e9b4:	9003      	str	r0, [sp, #12]
    e9b6:	9104      	str	r1, [sp, #16]
    e9b8:	9205      	str	r2, [sp, #20]
    e9ba:	9002      	str	r0, [sp, #8]
    e9bc:	4608      	mov	r0, r1
    e9be:	4611      	mov	r1, r2
    e9c0:	f7ff ffd2 	bl	e968 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    e9c4:	9001      	str	r0, [sp, #4]
    e9c6:	e7ff      	b.n	e9c8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x18>
    e9c8:	9801      	ldr	r0, [sp, #4]
    e9ca:	9902      	ldr	r1, [sp, #8]
    e9cc:	f7ff ff4a 	bl	e864 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17ha140722e8f4ab70eE>
    e9d0:	9000      	str	r0, [sp, #0]
    e9d2:	e7ff      	b.n	e9d4 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE+0x24>
    e9d4:	9800      	ldr	r0, [sp, #0]
    e9d6:	b006      	add	sp, #24
    e9d8:	bd80      	pop	{r7, pc}

0000e9da <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE>:
    e9da:	b580      	push	{r7, lr}
    e9dc:	b086      	sub	sp, #24
    e9de:	9003      	str	r0, [sp, #12]
    e9e0:	9104      	str	r1, [sp, #16]
    e9e2:	9205      	str	r2, [sp, #20]
    e9e4:	9002      	str	r0, [sp, #8]
    e9e6:	4608      	mov	r0, r1
    e9e8:	4611      	mov	r1, r2
    e9ea:	f7ff ff9e 	bl	e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    e9ee:	9001      	str	r0, [sp, #4]
    e9f0:	e7ff      	b.n	e9f2 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x18>
    e9f2:	9801      	ldr	r0, [sp, #4]
    e9f4:	9902      	ldr	r1, [sp, #8]
    e9f6:	f7ff ff1f 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    e9fa:	9000      	str	r0, [sp, #0]
    e9fc:	e7ff      	b.n	e9fe <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h80468185135ebcdbE+0x24>
    e9fe:	9800      	ldr	r0, [sp, #0]
    ea00:	b006      	add	sp, #24
    ea02:	bd80      	pop	{r7, pc}

0000ea04 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>:
    ea04:	b580      	push	{r7, lr}
    ea06:	b086      	sub	sp, #24
    ea08:	f8dd c020 	ldr.w	ip, [sp, #32]
    ea0c:	9102      	str	r1, [sp, #8]
    ea0e:	9203      	str	r2, [sp, #12]
    ea10:	9304      	str	r3, [sp, #16]
    ea12:	f8cd c014 	str.w	ip, [sp, #20]
    ea16:	f04f 0e00 	mov.w	lr, #0
    ea1a:	f8cd e004 	str.w	lr, [sp, #4]
    ea1e:	f8cd e000 	str.w	lr, [sp]
    ea22:	f8cd e000 	str.w	lr, [sp]
    ea26:	6001      	str	r1, [r0, #0]
    ea28:	6042      	str	r2, [r0, #4]
    ea2a:	9900      	ldr	r1, [sp, #0]
    ea2c:	9a01      	ldr	r2, [sp, #4]
    ea2e:	6081      	str	r1, [r0, #8]
    ea30:	60c2      	str	r2, [r0, #12]
    ea32:	6103      	str	r3, [r0, #16]
    ea34:	f8c0 c014 	str.w	ip, [r0, #20]
    ea38:	b006      	add	sp, #24
    ea3a:	bd80      	pop	{r7, pc}

0000ea3c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>:
    ea3c:	b580      	push	{r7, lr}
    ea3e:	b084      	sub	sp, #16
    ea40:	9101      	str	r1, [sp, #4]
    ea42:	9202      	str	r2, [sp, #8]
    ea44:	9901      	ldr	r1, [sp, #4]
    ea46:	9a02      	ldr	r2, [sp, #8]
    ea48:	f000 fa92 	bl	ef70 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>
    ea4c:	e7ff      	b.n	ea4e <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE+0x12>
    ea4e:	b004      	add	sp, #16
    ea50:	bd80      	pop	{r7, pc}

0000ea52 <_ZN4core3ptr13drop_in_place17h1052bc0d49eef8fdE>:
    ea52:	b081      	sub	sp, #4
    ea54:	9000      	str	r0, [sp, #0]
    ea56:	b001      	add	sp, #4
    ea58:	4770      	bx	lr

0000ea5a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>:
    ea5a:	b081      	sub	sp, #4
    ea5c:	9000      	str	r0, [sp, #0]
    ea5e:	b001      	add	sp, #4
    ea60:	4770      	bx	lr

0000ea62 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>:
    ea62:	b580      	push	{r7, lr}
    ea64:	b086      	sub	sp, #24
    ea66:	460a      	mov	r2, r1
    ea68:	9004      	str	r0, [sp, #16]
    ea6a:	f88d 1017 	strb.w	r1, [sp, #23]
    ea6e:	9203      	str	r2, [sp, #12]
    ea70:	f7ff fff3 	bl	ea5a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
    ea74:	9002      	str	r0, [sp, #8]
    ea76:	e7ff      	b.n	ea78 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x16>
    ea78:	9802      	ldr	r0, [sp, #8]
    ea7a:	9903      	ldr	r1, [sp, #12]
    ea7c:	f000 f806 	bl	ea8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
    ea80:	9001      	str	r0, [sp, #4]
    ea82:	e7ff      	b.n	ea84 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E+0x22>
    ea84:	9801      	ldr	r0, [sp, #4]
    ea86:	b006      	add	sp, #24
    ea88:	bd80      	pop	{r7, pc}
	...

0000ea8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>:
    ea8c:	b086      	sub	sp, #24
    ea8e:	460a      	mov	r2, r1
    ea90:	f88d 100f 	strb.w	r1, [sp, #15]
    ea94:	9005      	str	r0, [sp, #20]
    ea96:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ea9a:	9002      	str	r0, [sp, #8]
    ea9c:	9101      	str	r1, [sp, #4]
    ea9e:	9901      	ldr	r1, [sp, #4]
    eaa0:	e8df f001 	tbb	[pc, r1]
    eaa4:	03102317 	.word	0x03102317
    eaa8:	001c      	.short	0x001c
    eaaa:	f64e 60e8 	movw	r0, #61160	; 0xeee8
    eaae:	f2c0 0001 	movt	r0, #1
    eab2:	f64e 7264 	movw	r2, #61284	; 0xef64
    eab6:	f2c0 0201 	movt	r2, #1
    eaba:	2131      	movs	r1, #49	; 0x31
    eabc:	f007 fff2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eac0:	defe      	udf	#254	; 0xfe
    eac2:	defe      	udf	#254	; 0xfe
    eac4:	9802      	ldr	r0, [sp, #8]
    eac6:	6801      	ldr	r1, [r0, #0]
    eac8:	f3bf 8f5f 	dmb	sy
    eacc:	9104      	str	r1, [sp, #16]
    eace:	e7ff      	b.n	ead0 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x44>
    ead0:	e017      	b.n	eb02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    ead2:	9802      	ldr	r0, [sp, #8]
    ead4:	6801      	ldr	r1, [r0, #0]
    ead6:	9104      	str	r1, [sp, #16]
    ead8:	e7ff      	b.n	eada <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x4e>
    eada:	e012      	b.n	eb02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    eadc:	9802      	ldr	r0, [sp, #8]
    eade:	6801      	ldr	r1, [r0, #0]
    eae0:	f3bf 8f5f 	dmb	sy
    eae4:	9104      	str	r1, [sp, #16]
    eae6:	e7ff      	b.n	eae8 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x5c>
    eae8:	e00b      	b.n	eb02 <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E+0x76>
    eaea:	f64e 7074 	movw	r0, #61300	; 0xef74
    eaee:	f2c0 0001 	movt	r0, #1
    eaf2:	f64e 7264 	movw	r2, #61284	; 0xef64
    eaf6:	f2c0 0201 	movt	r2, #1
    eafa:	2128      	movs	r1, #40	; 0x28
    eafc:	f007 ffd2 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    eb00:	defe      	udf	#254	; 0xfe
    eb02:	9804      	ldr	r0, [sp, #16]
    eb04:	b006      	add	sp, #24
    eb06:	4770      	bx	lr

0000eb08 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>:
    eb08:	b081      	sub	sp, #4
    eb0a:	9000      	str	r0, [sp, #0]
    eb0c:	6800      	ldr	r0, [r0, #0]
    eb0e:	b001      	add	sp, #4
    eb10:	4770      	bx	lr

0000eb12 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>:
    eb12:	b082      	sub	sp, #8
    eb14:	9001      	str	r0, [sp, #4]
    eb16:	6801      	ldr	r1, [r0, #0]
    eb18:	6840      	ldr	r0, [r0, #4]
    eb1a:	9000      	str	r0, [sp, #0]
    eb1c:	4608      	mov	r0, r1
    eb1e:	9900      	ldr	r1, [sp, #0]
    eb20:	b002      	add	sp, #8
    eb22:	4770      	bx	lr

0000eb24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>:
    eb24:	b580      	push	{r7, lr}
    eb26:	b08c      	sub	sp, #48	; 0x30
    eb28:	9101      	str	r1, [sp, #4]
    eb2a:	9202      	str	r2, [sp, #8]
    eb2c:	2100      	movs	r1, #0
    eb2e:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    eb32:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    eb36:	2101      	movs	r1, #1
    eb38:	f88d 1023 	strb.w	r1, [sp, #35]	; 0x23
    eb3c:	f88d 1022 	strb.w	r1, [sp, #34]	; 0x22
    eb40:	9901      	ldr	r1, [sp, #4]
    eb42:	2900      	cmp	r1, #0
    eb44:	460a      	mov	r2, r1
    eb46:	bf18      	it	ne
    eb48:	2201      	movne	r2, #1
    eb4a:	2900      	cmp	r1, #0
    eb4c:	9000      	str	r0, [sp, #0]
    eb4e:	d001      	beq.n	eb54 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x30>
    eb50:	e7ff      	b.n	eb52 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x2e>
    eb52:	e008      	b.n	eb66 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x42>
    eb54:	2000      	movs	r0, #0
    eb56:	9900      	ldr	r1, [sp, #0]
    eb58:	6088      	str	r0, [r1, #8]
    eb5a:	6048      	str	r0, [r1, #4]
    eb5c:	6008      	str	r0, [r1, #0]
    eb5e:	2002      	movs	r0, #2
    eb60:	6008      	str	r0, [r1, #0]
    eb62:	e021      	b.n	eba8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eb64:	defe      	udf	#254	; 0xfe
    eb66:	2000      	movs	r0, #0
    eb68:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    eb6c:	9901      	ldr	r1, [sp, #4]
    eb6e:	9a02      	ldr	r2, [sp, #8]
    eb70:	910a      	str	r1, [sp, #40]	; 0x28
    eb72:	920b      	str	r2, [sp, #44]	; 0x2c
    eb74:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eb78:	9106      	str	r1, [sp, #24]
    eb7a:	9207      	str	r2, [sp, #28]
    eb7c:	9906      	ldr	r1, [sp, #24]
    eb7e:	9a07      	ldr	r2, [sp, #28]
    eb80:	a803      	add	r0, sp, #12
    eb82:	f7ff ff5b 	bl	ea3c <_ZN4core3ops8function6FnOnce9call_once17h413725a7fc3ef85dE>
    eb86:	e7ff      	b.n	eb88 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x64>
    eb88:	9803      	ldr	r0, [sp, #12]
    eb8a:	9904      	ldr	r1, [sp, #16]
    eb8c:	9a05      	ldr	r2, [sp, #20]
    eb8e:	9b00      	ldr	r3, [sp, #0]
    eb90:	609a      	str	r2, [r3, #8]
    eb92:	6059      	str	r1, [r3, #4]
    eb94:	6018      	str	r0, [r3, #0]
    eb96:	e007      	b.n	eba8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x84>
    eb98:	9801      	ldr	r0, [sp, #4]
    eb9a:	2800      	cmp	r0, #0
    eb9c:	d10c      	bne.n	ebb8 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x94>
    eb9e:	e015      	b.n	ebcc <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa8>
    eba0:	2000      	movs	r0, #0
    eba2:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
    eba6:	e7f7      	b.n	eb98 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    eba8:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
    ebac:	07c0      	lsls	r0, r0, #31
    ebae:	2800      	cmp	r0, #0
    ebb0:	d1f6      	bne.n	eba0 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x7c>
    ebb2:	e7f1      	b.n	eb98 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x74>
    ebb4:	b00c      	add	sp, #48	; 0x30
    ebb6:	bd80      	pop	{r7, pc}
    ebb8:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    ebbc:	07c0      	lsls	r0, r0, #31
    ebbe:	2800      	cmp	r0, #0
    ebc0:	d0f8      	beq.n	ebb4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    ebc2:	e7ff      	b.n	ebc4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0xa0>
    ebc4:	2000      	movs	r0, #0
    ebc6:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
    ebca:	e7f3      	b.n	ebb4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>
    ebcc:	e7f2      	b.n	ebb4 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E+0x90>

0000ebce <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>:
    ebce:	b5b0      	push	{r4, r5, r7, lr}
    ebd0:	b081      	sub	sp, #4
    ebd2:	9100      	str	r1, [sp, #0]
    ebd4:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
    ebd8:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    ebdc:	b001      	add	sp, #4
    ebde:	bdb0      	pop	{r4, r5, r7, pc}

0000ebe0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>:
    ebe0:	b580      	push	{r7, lr}
    ebe2:	b088      	sub	sp, #32
    ebe4:	9106      	str	r1, [sp, #24]
    ebe6:	680a      	ldr	r2, [r1, #0]
    ebe8:	1e93      	subs	r3, r2, #2
    ebea:	bf18      	it	ne
    ebec:	2301      	movne	r3, #1
    ebee:	2a02      	cmp	r2, #2
    ebf0:	9102      	str	r1, [sp, #8]
    ebf2:	9001      	str	r0, [sp, #4]
    ebf4:	d001      	beq.n	ebfa <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x1a>
    ebf6:	e7ff      	b.n	ebf8 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x18>
    ebf8:	e008      	b.n	ec0c <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x2c>
    ebfa:	2000      	movs	r0, #0
    ebfc:	9901      	ldr	r1, [sp, #4]
    ebfe:	6088      	str	r0, [r1, #8]
    ec00:	6048      	str	r0, [r1, #4]
    ec02:	6008      	str	r0, [r1, #0]
    ec04:	2002      	movs	r0, #2
    ec06:	6008      	str	r0, [r1, #0]
    ec08:	e00f      	b.n	ec2a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    ec0a:	defe      	udf	#254	; 0xfe
    ec0c:	9802      	ldr	r0, [sp, #8]
    ec0e:	9007      	str	r0, [sp, #28]
    ec10:	a803      	add	r0, sp, #12
    ec12:	9902      	ldr	r1, [sp, #8]
    ec14:	f000 f9b5 	bl	ef82 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>
    ec18:	e7ff      	b.n	ec1a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x3a>
    ec1a:	9803      	ldr	r0, [sp, #12]
    ec1c:	9904      	ldr	r1, [sp, #16]
    ec1e:	9a05      	ldr	r2, [sp, #20]
    ec20:	9b01      	ldr	r3, [sp, #4]
    ec22:	609a      	str	r2, [r3, #8]
    ec24:	6059      	str	r1, [r3, #4]
    ec26:	6018      	str	r0, [r3, #0]
    ec28:	e7ff      	b.n	ec2a <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E+0x4a>
    ec2a:	b008      	add	sp, #32
    ec2c:	bd80      	pop	{r7, pc}

0000ec2e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>:
    ec2e:	b580      	push	{r7, lr}
    ec30:	b086      	sub	sp, #24
    ec32:	9004      	str	r0, [sp, #16]
    ec34:	6801      	ldr	r1, [r0, #0]
    ec36:	2900      	cmp	r1, #0
    ec38:	9001      	str	r0, [sp, #4]
    ec3a:	d001      	beq.n	ec40 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x12>
    ec3c:	e7ff      	b.n	ec3e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x10>
    ec3e:	e003      	b.n	ec48 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x1a>
    ec40:	2000      	movs	r0, #0
    ec42:	9002      	str	r0, [sp, #8]
    ec44:	e00d      	b.n	ec62 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ec46:	defe      	udf	#254	; 0xfe
    ec48:	9801      	ldr	r0, [sp, #4]
    ec4a:	1d01      	adds	r1, r0, #4
    ec4c:	9105      	str	r1, [sp, #20]
    ec4e:	4608      	mov	r0, r1
    ec50:	f7ff ff5a 	bl	eb08 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u32$GT$5clone17h04e81c6a37a871c7E>
    ec54:	9000      	str	r0, [sp, #0]
    ec56:	e7ff      	b.n	ec58 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x2a>
    ec58:	9800      	ldr	r0, [sp, #0]
    ec5a:	9003      	str	r0, [sp, #12]
    ec5c:	2101      	movs	r1, #1
    ec5e:	9102      	str	r1, [sp, #8]
    ec60:	e7ff      	b.n	ec62 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E+0x34>
    ec62:	9802      	ldr	r0, [sp, #8]
    ec64:	9903      	ldr	r1, [sp, #12]
    ec66:	b006      	add	sp, #24
    ec68:	bd80      	pop	{r7, pc}

0000ec6a <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>:
    fn clone(&self) -> Level {
    ec6a:	b081      	sub	sp, #4
    ec6c:	9000      	str	r0, [sp, #0]
        *self
    ec6e:	6800      	ldr	r0, [r0, #0]
    }
    ec70:	b001      	add	sp, #4
    ec72:	4770      	bx	lr

0000ec74 <_ZN3log6Record7builder17hde62ab0132265febE>:
    pub fn builder() -> RecordBuilder<'a> {
    ec74:	b580      	push	{r7, lr}
        RecordBuilder::new()
    ec76:	f000 f802 	bl	ec7e <_ZN3log13RecordBuilder3new17haca8312579858419E>
    ec7a:	e7ff      	b.n	ec7c <_ZN3log6Record7builder17hde62ab0132265febE+0x8>
    }
    ec7c:	bd80      	pop	{r7, pc}

0000ec7e <_ZN3log13RecordBuilder3new17haca8312579858419E>:
    pub fn new() -> RecordBuilder<'a> {
    ec7e:	b570      	push	{r4, r5, r6, lr}
    ec80:	b0aa      	sub	sp, #168	; 0xa8
                args: format_args!(""),
    ec82:	f64e 71b4 	movw	r1, #61364	; 0xefb4
    ec86:	f2c0 0101 	movt	r1, #1
    ec8a:	6809      	ldr	r1, [r1, #0]
    ec8c:	466a      	mov	r2, sp
    ec8e:	2300      	movs	r3, #0
    ec90:	6013      	str	r3, [r2, #0]
    ec92:	aa16      	add	r2, sp, #88	; 0x58
    ec94:	9004      	str	r0, [sp, #16]
    ec96:	4610      	mov	r0, r2
    ec98:	9103      	str	r1, [sp, #12]
    ec9a:	461a      	mov	r2, r3
    ec9c:	9b03      	ldr	r3, [sp, #12]
    ec9e:	f7ff feb1 	bl	ea04 <_ZN4core3fmt9Arguments6new_v117ha550a35120ca1eb3E>
    eca2:	e7ff      	b.n	eca4 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x26>
    eca4:	a81f      	add	r0, sp, #124	; 0x7c
                metadata: Metadata::builder().build(),
    eca6:	f000 f891 	bl	edcc <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>
    ecaa:	e7ff      	b.n	ecac <_ZN3log13RecordBuilder3new17haca8312579858419E+0x2e>
    ecac:	a81c      	add	r0, sp, #112	; 0x70
    ecae:	a91f      	add	r1, sp, #124	; 0x7c
    ecb0:	f000 f8a5 	bl	edfe <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>
    ecb4:	e7ff      	b.n	ecb6 <_ZN3log13RecordBuilder3new17haca8312579858419E+0x38>
    ecb6:	2000      	movs	r0, #0
                module_path: None,
    ecb8:	9024      	str	r0, [sp, #144]	; 0x90
    ecba:	9023      	str	r0, [sp, #140]	; 0x8c
    ecbc:	9022      	str	r0, [sp, #136]	; 0x88
    ecbe:	2102      	movs	r1, #2
    ecc0:	9122      	str	r1, [sp, #136]	; 0x88
                file: None,
    ecc2:	9027      	str	r0, [sp, #156]	; 0x9c
    ecc4:	9026      	str	r0, [sp, #152]	; 0x98
    ecc6:	9025      	str	r0, [sp, #148]	; 0x94
    ecc8:	9125      	str	r1, [sp, #148]	; 0x94
                line: None,
    ecca:	9028      	str	r0, [sp, #160]	; 0xa0
            record: Record {
    eccc:	981c      	ldr	r0, [sp, #112]	; 0x70
    ecce:	991d      	ldr	r1, [sp, #116]	; 0x74
    ecd0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    ecd2:	9207      	str	r2, [sp, #28]
    ecd4:	9106      	str	r1, [sp, #24]
    ecd6:	9005      	str	r0, [sp, #20]
    ecd8:	a805      	add	r0, sp, #20
    ecda:	f100 010c 	add.w	r1, r0, #12
    ecde:	aa16      	add	r2, sp, #88	; 0x58
    ece0:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ece4:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    ece8:	9922      	ldr	r1, [sp, #136]	; 0x88
    ecea:	9a23      	ldr	r2, [sp, #140]	; 0x8c
    ecec:	9b24      	ldr	r3, [sp, #144]	; 0x90
    ecee:	9310      	str	r3, [sp, #64]	; 0x40
    ecf0:	920f      	str	r2, [sp, #60]	; 0x3c
    ecf2:	910e      	str	r1, [sp, #56]	; 0x38
    ecf4:	9925      	ldr	r1, [sp, #148]	; 0x94
    ecf6:	9a26      	ldr	r2, [sp, #152]	; 0x98
    ecf8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    ecfa:	9313      	str	r3, [sp, #76]	; 0x4c
    ecfc:	9212      	str	r2, [sp, #72]	; 0x48
    ecfe:	9111      	str	r1, [sp, #68]	; 0x44
    ed00:	9928      	ldr	r1, [sp, #160]	; 0xa0
    ed02:	9a29      	ldr	r2, [sp, #164]	; 0xa4
    ed04:	9114      	str	r1, [sp, #80]	; 0x50
    ed06:	9215      	str	r2, [sp, #84]	; 0x54
    ed08:	2244      	movs	r2, #68	; 0x44
        return RecordBuilder {
    ed0a:	9904      	ldr	r1, [sp, #16]
    ed0c:	9002      	str	r0, [sp, #8]
    ed0e:	4608      	mov	r0, r1
    ed10:	9902      	ldr	r1, [sp, #8]
    ed12:	f00e fa9b 	bl	1d24c <__aeabi_memcpy>
    }
    ed16:	b02a      	add	sp, #168	; 0xa8
    ed18:	bd70      	pop	{r4, r5, r6, pc}

0000ed1a <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>:
    pub fn args(&mut self, args: fmt::Arguments<'a>) -> &mut RecordBuilder<'a> {
    ed1a:	b5f0      	push	{r4, r5, r6, r7, lr}
    ed1c:	b087      	sub	sp, #28
    ed1e:	9006      	str	r0, [sp, #24]
    ed20:	466a      	mov	r2, sp
        self.record.args = args;
    ed22:	4613      	mov	r3, r2
    ed24:	e891 50f0 	ldmia.w	r1, {r4, r5, r6, r7, ip, lr}
    ed28:	e883 50f0 	stmia.w	r3, {r4, r5, r6, r7, ip, lr}
    ed2c:	f100 010c 	add.w	r1, r0, #12
    ed30:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    ed34:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    }
    ed38:	b007      	add	sp, #28
    ed3a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ed3c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>:
    pub fn level(&mut self, level: Level) -> &mut RecordBuilder<'a> {
    ed3c:	b082      	sub	sp, #8
    ed3e:	9000      	str	r0, [sp, #0]
    ed40:	9101      	str	r1, [sp, #4]
        self.record.metadata.level = level;
    ed42:	6001      	str	r1, [r0, #0]
    }
    ed44:	b002      	add	sp, #8
    ed46:	4770      	bx	lr

0000ed48 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>:
    pub fn target(&mut self, target: &'a str) -> &mut RecordBuilder<'a> {
    ed48:	b083      	sub	sp, #12
    ed4a:	9000      	str	r0, [sp, #0]
    ed4c:	9101      	str	r1, [sp, #4]
    ed4e:	9202      	str	r2, [sp, #8]
        self.record.metadata.target = target;
    ed50:	6041      	str	r1, [r0, #4]
    ed52:	6082      	str	r2, [r0, #8]
    }
    ed54:	b003      	add	sp, #12
    ed56:	4770      	bx	lr

0000ed58 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>:
    pub fn module_path_static(&mut self, path: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ed58:	b580      	push	{r7, lr}
    ed5a:	b088      	sub	sp, #32
    ed5c:	9005      	str	r0, [sp, #20]
    ed5e:	9106      	str	r1, [sp, #24]
    ed60:	9207      	str	r2, [sp, #28]
    ed62:	ab02      	add	r3, sp, #8
        self.record.module_path = path.map(MaybeStaticStr::Static);
    ed64:	9001      	str	r0, [sp, #4]
    ed66:	4618      	mov	r0, r3
    ed68:	f7ff fedc 	bl	eb24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ed6c:	e7ff      	b.n	ed6e <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE+0x16>
    ed6e:	9802      	ldr	r0, [sp, #8]
    ed70:	9903      	ldr	r1, [sp, #12]
    ed72:	9a04      	ldr	r2, [sp, #16]
    ed74:	9b01      	ldr	r3, [sp, #4]
    ed76:	62da      	str	r2, [r3, #44]	; 0x2c
    ed78:	6299      	str	r1, [r3, #40]	; 0x28
    ed7a:	6258      	str	r0, [r3, #36]	; 0x24
    }
    ed7c:	4618      	mov	r0, r3
    ed7e:	b008      	add	sp, #32
    ed80:	bd80      	pop	{r7, pc}

0000ed82 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>:
    pub fn file_static(&mut self, file: Option<&'static str>) -> &mut RecordBuilder<'a> {
    ed82:	b580      	push	{r7, lr}
    ed84:	b088      	sub	sp, #32
    ed86:	9005      	str	r0, [sp, #20]
    ed88:	9106      	str	r1, [sp, #24]
    ed8a:	9207      	str	r2, [sp, #28]
    ed8c:	ab02      	add	r3, sp, #8
        self.record.file = file.map(MaybeStaticStr::Static);
    ed8e:	9001      	str	r0, [sp, #4]
    ed90:	4618      	mov	r0, r3
    ed92:	f7ff fec7 	bl	eb24 <_ZN4core6option15Option$LT$T$GT$3map17he9c5c1f531ada6f8E>
    ed96:	e7ff      	b.n	ed98 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E+0x16>
    ed98:	9802      	ldr	r0, [sp, #8]
    ed9a:	9903      	ldr	r1, [sp, #12]
    ed9c:	9a04      	ldr	r2, [sp, #16]
    ed9e:	9b01      	ldr	r3, [sp, #4]
    eda0:	639a      	str	r2, [r3, #56]	; 0x38
    eda2:	6359      	str	r1, [r3, #52]	; 0x34
    eda4:	6318      	str	r0, [r3, #48]	; 0x30
    }
    eda6:	4618      	mov	r0, r3
    eda8:	b008      	add	sp, #32
    edaa:	bd80      	pop	{r7, pc}

0000edac <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>:
    pub fn line(&mut self, line: Option<u32>) -> &mut RecordBuilder<'a> {
    edac:	b083      	sub	sp, #12
    edae:	9000      	str	r0, [sp, #0]
    edb0:	9101      	str	r1, [sp, #4]
    edb2:	9202      	str	r2, [sp, #8]
        self.record.line = line;
    edb4:	63c1      	str	r1, [r0, #60]	; 0x3c
    edb6:	6402      	str	r2, [r0, #64]	; 0x40
    }
    edb8:	b003      	add	sp, #12
    edba:	4770      	bx	lr

0000edbc <_ZN3log13RecordBuilder5build17h83529556a009112eE>:
    pub fn build(&self) -> Record<'a> {
    edbc:	b580      	push	{r7, lr}
    edbe:	b082      	sub	sp, #8
    edc0:	9101      	str	r1, [sp, #4]
        self.record.clone()
    edc2:	f000 f8e8 	bl	ef96 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>
    edc6:	e7ff      	b.n	edc8 <_ZN3log13RecordBuilder5build17h83529556a009112eE+0xc>
    }
    edc8:	b002      	add	sp, #8
    edca:	bd80      	pop	{r7, pc}

0000edcc <_ZN3log8Metadata7builder17ha56bd59835d60a3cE>:
    pub fn builder() -> MetadataBuilder<'a> {
    edcc:	b580      	push	{r7, lr}
        MetadataBuilder::new()
    edce:	f000 f802 	bl	edd6 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>
    edd2:	e7ff      	b.n	edd4 <_ZN3log8Metadata7builder17ha56bd59835d60a3cE+0x8>
    }
    edd4:	bd80      	pop	{r7, pc}

0000edd6 <_ZN3log15MetadataBuilder3new17hd8c145eb0fa86214E>:
    pub fn new() -> MetadataBuilder<'a> {
    edd6:	b084      	sub	sp, #16
    edd8:	2103      	movs	r1, #3
                level: Level::Info,
    edda:	9103      	str	r1, [sp, #12]
            metadata: Metadata {
    eddc:	9903      	ldr	r1, [sp, #12]
    edde:	9100      	str	r1, [sp, #0]
    ede0:	f64e 719c 	movw	r1, #61340	; 0xef9c
    ede4:	f2c0 0101 	movt	r1, #1
    ede8:	9101      	str	r1, [sp, #4]
    edea:	2100      	movs	r1, #0
    edec:	9102      	str	r1, [sp, #8]
        MetadataBuilder {
    edee:	9900      	ldr	r1, [sp, #0]
    edf0:	9a01      	ldr	r2, [sp, #4]
    edf2:	9b02      	ldr	r3, [sp, #8]
    edf4:	6083      	str	r3, [r0, #8]
    edf6:	6042      	str	r2, [r0, #4]
    edf8:	6001      	str	r1, [r0, #0]
    }
    edfa:	b004      	add	sp, #16
    edfc:	4770      	bx	lr

0000edfe <_ZN3log15MetadataBuilder5build17h2478972692162fc0E>:
    pub fn build(&self) -> Metadata<'a> {
    edfe:	b580      	push	{r7, lr}
    ee00:	b082      	sub	sp, #8
    ee02:	9101      	str	r1, [sp, #4]
        self.metadata.clone()
    ee04:	f000 f91c 	bl	f040 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    ee08:	e7ff      	b.n	ee0a <_ZN3log15MetadataBuilder5build17h2478972692162fc0E+0xc>
    }
    ee0a:	b002      	add	sp, #8
    ee0c:	bd80      	pop	{r7, pc}

0000ee0e <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$7enabled17h26cc1743229d926fE>:
    fn enabled(&self, _: &Metadata) -> bool {
    ee0e:	b082      	sub	sp, #8
    ee10:	9000      	str	r0, [sp, #0]
    ee12:	9101      	str	r1, [sp, #4]
    ee14:	2000      	movs	r0, #0
    }
    ee16:	b002      	add	sp, #8
    ee18:	4770      	bx	lr

0000ee1a <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$3log17hd8c60f8dd2ebf20aE>:
    fn log(&self, _: &Record) {}
    ee1a:	b082      	sub	sp, #8
    ee1c:	9000      	str	r0, [sp, #0]
    ee1e:	9101      	str	r1, [sp, #4]
    ee20:	b002      	add	sp, #8
    ee22:	4770      	bx	lr

0000ee24 <_ZN43_$LT$log..NopLogger$u20$as$u20$log..Log$GT$5flush17h9ca1bb7eb7460a6cE>:
    fn flush(&self) {}
    ee24:	b081      	sub	sp, #4
    ee26:	9000      	str	r0, [sp, #0]
    ee28:	b001      	add	sp, #4
    ee2a:	4770      	bx	lr

0000ee2c <_ZN3log6logger17hf609e7cc1c031552E>:
}

/// Returns a reference to the logger.
///
/// If a logger has not been set, a no-op implementation is returned.
pub fn logger() -> &'static Log {
    ee2c:	b580      	push	{r7, lr}
    ee2e:	b084      	sub	sp, #16
    ee30:	2004      	movs	r0, #4
    unsafe {
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ee32:	f88d 000f 	strb.w	r0, [sp, #15]
    ee36:	f89d 100f 	ldrb.w	r1, [sp, #15]
    ee3a:	f643 204c 	movw	r0, #14924	; 0x3a4c
    ee3e:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee42:	f7ff fe0e 	bl	ea62 <_ZN4core4sync6atomic11AtomicUsize4load17h4313e7deda718c05E>
    ee46:	9000      	str	r0, [sp, #0]
    ee48:	e7ff      	b.n	ee4a <_ZN3log6logger17hf609e7cc1c031552E+0x1e>
    ee4a:	9800      	ldr	r0, [sp, #0]
    ee4c:	2802      	cmp	r0, #2
    ee4e:	d109      	bne.n	ee64 <_ZN3log6logger17hf609e7cc1c031552E+0x38>
    ee50:	e7ff      	b.n	ee52 <_ZN3log6logger17hf609e7cc1c031552E+0x26>
            static NOP: NopLogger = NopLogger;
            &NOP
        } else {
            LOGGER
    ee52:	f240 00e8 	movw	r0, #232	; 0xe8
    ee56:	f2c2 0000 	movt	r0, #8192	; 0x2000
    ee5a:	6801      	ldr	r1, [r0, #0]
    ee5c:	6840      	ldr	r0, [r0, #4]
    ee5e:	9101      	str	r1, [sp, #4]
    ee60:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ee62:	e00a      	b.n	ee7a <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
            &NOP
    ee64:	f64e 70d0 	movw	r0, #61392	; 0xefd0
    ee68:	f2c0 0001 	movt	r0, #1
    ee6c:	9001      	str	r0, [sp, #4]
    ee6e:	f64e 70b8 	movw	r0, #61368	; 0xefb8
    ee72:	f2c0 0001 	movt	r0, #1
    ee76:	9002      	str	r0, [sp, #8]
        if STATE.load(Ordering::SeqCst) != INITIALIZED {
    ee78:	e7ff      	b.n	ee7a <_ZN3log6logger17hf609e7cc1c031552E+0x4e>
    ee7a:	9801      	ldr	r0, [sp, #4]
    ee7c:	9902      	ldr	r1, [sp, #8]
        }
    }
}
    ee7e:	b004      	add	sp, #16
    ee80:	bd80      	pop	{r7, pc}

0000ee82 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE>:

// WARNING: this is not part of the crate's public API and is subject to change at any time
#[doc(hidden)]
pub fn __private_api_log(
    ee82:	b570      	push	{r4, r5, r6, lr}
    ee84:	b0ca      	sub	sp, #296	; 0x128
    ee86:	9141      	str	r1, [sp, #260]	; 0x104
    ee88:	9242      	str	r2, [sp, #264]	; 0x108
    args: fmt::Arguments,
    level: Level,
    &(target, module_path, file, line): &(&str, &'static str, &'static str, u32),
    ee8a:	6813      	ldr	r3, [r2, #0]
    ee8c:	f8d2 c004 	ldr.w	ip, [r2, #4]
    ee90:	9343      	str	r3, [sp, #268]	; 0x10c
    ee92:	f8cd c110 	str.w	ip, [sp, #272]	; 0x110
    ee96:	f8d2 e008 	ldr.w	lr, [r2, #8]
    ee9a:	68d4      	ldr	r4, [r2, #12]
    ee9c:	f8cd e114 	str.w	lr, [sp, #276]	; 0x114
    eea0:	9446      	str	r4, [sp, #280]	; 0x118
    eea2:	6915      	ldr	r5, [r2, #16]
    eea4:	6956      	ldr	r6, [r2, #20]
    eea6:	9547      	str	r5, [sp, #284]	; 0x11c
    eea8:	9648      	str	r6, [sp, #288]	; 0x120
    eeaa:	6992      	ldr	r2, [r2, #24]
    eeac:	9249      	str	r2, [sp, #292]	; 0x124
) {
    logger().log(
    eeae:	9112      	str	r1, [sp, #72]	; 0x48
    eeb0:	9011      	str	r0, [sp, #68]	; 0x44
    eeb2:	9310      	str	r3, [sp, #64]	; 0x40
    eeb4:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    eeb8:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
    eebc:	940d      	str	r4, [sp, #52]	; 0x34
    eebe:	950c      	str	r5, [sp, #48]	; 0x30
    eec0:	960b      	str	r6, [sp, #44]	; 0x2c
    eec2:	920a      	str	r2, [sp, #40]	; 0x28
    eec4:	f7ff ffb2 	bl	ee2c <_ZN3log6logger17hf609e7cc1c031552E>
    eec8:	9009      	str	r0, [sp, #36]	; 0x24
    eeca:	9108      	str	r1, [sp, #32]
    eecc:	e7ff      	b.n	eece <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x4c>
    eece:	a824      	add	r0, sp, #144	; 0x90
        &Record::builder()
    eed0:	f7ff fed0 	bl	ec74 <_ZN3log6Record7builder17hde62ab0132265febE>
    eed4:	e7ff      	b.n	eed6 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x54>
    eed6:	a835      	add	r0, sp, #212	; 0xd4
            .args(args)
    eed8:	4601      	mov	r1, r0
    eeda:	9a11      	ldr	r2, [sp, #68]	; 0x44
    eedc:	e892 5078 	ldmia.w	r2, {r3, r4, r5, r6, ip, lr}
    eee0:	e881 5078 	stmia.w	r1, {r3, r4, r5, r6, ip, lr}
    eee4:	a924      	add	r1, sp, #144	; 0x90
        &Record::builder()
    eee6:	9007      	str	r0, [sp, #28]
    eee8:	4608      	mov	r0, r1
    eeea:	9907      	ldr	r1, [sp, #28]
    eeec:	f7ff ff15 	bl	ed1a <_ZN3log13RecordBuilder4args17h0d0d49873389eda9E>
    eef0:	9006      	str	r0, [sp, #24]
    eef2:	e7ff      	b.n	eef4 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x72>
    eef4:	9806      	ldr	r0, [sp, #24]
    eef6:	9912      	ldr	r1, [sp, #72]	; 0x48
    eef8:	f7ff ff20 	bl	ed3c <_ZN3log13RecordBuilder5level17h0f95d7860f854eb5E>
    eefc:	9005      	str	r0, [sp, #20]
    eefe:	e7ff      	b.n	ef00 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x7e>
    ef00:	9805      	ldr	r0, [sp, #20]
    ef02:	9910      	ldr	r1, [sp, #64]	; 0x40
    ef04:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ef06:	f7ff ff1f 	bl	ed48 <_ZN3log13RecordBuilder6target17hd1b0e0684e399993E>
    ef0a:	9004      	str	r0, [sp, #16]
    ef0c:	e7ff      	b.n	ef0e <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0x8c>
            .level(level)
            .target(target)
            .module_path_static(Some(module_path))
    ef0e:	980e      	ldr	r0, [sp, #56]	; 0x38
    ef10:	903b      	str	r0, [sp, #236]	; 0xec
    ef12:	990d      	ldr	r1, [sp, #52]	; 0x34
    ef14:	913c      	str	r1, [sp, #240]	; 0xf0
        &Record::builder()
    ef16:	993b      	ldr	r1, [sp, #236]	; 0xec
    ef18:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
    ef1a:	9804      	ldr	r0, [sp, #16]
    ef1c:	f7ff ff1c 	bl	ed58 <_ZN3log13RecordBuilder18module_path_static17he26ffcb692d58badE>
    ef20:	9003      	str	r0, [sp, #12]
    ef22:	e7ff      	b.n	ef24 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xa2>
            .file_static(Some(file))
    ef24:	980c      	ldr	r0, [sp, #48]	; 0x30
    ef26:	903d      	str	r0, [sp, #244]	; 0xf4
    ef28:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ef2a:	913e      	str	r1, [sp, #248]	; 0xf8
        &Record::builder()
    ef2c:	993d      	ldr	r1, [sp, #244]	; 0xf4
    ef2e:	9a3e      	ldr	r2, [sp, #248]	; 0xf8
    ef30:	9803      	ldr	r0, [sp, #12]
    ef32:	f7ff ff26 	bl	ed82 <_ZN3log13RecordBuilder11file_static17h02dc6965cbffd542E>
    ef36:	9002      	str	r0, [sp, #8]
    ef38:	e7ff      	b.n	ef3a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xb8>
            .line(Some(line))
    ef3a:	980a      	ldr	r0, [sp, #40]	; 0x28
    ef3c:	9040      	str	r0, [sp, #256]	; 0x100
    ef3e:	2101      	movs	r1, #1
    ef40:	913f      	str	r1, [sp, #252]	; 0xfc
        &Record::builder()
    ef42:	993f      	ldr	r1, [sp, #252]	; 0xfc
    ef44:	9a40      	ldr	r2, [sp, #256]	; 0x100
    ef46:	9802      	ldr	r0, [sp, #8]
    ef48:	f7ff ff30 	bl	edac <_ZN3log13RecordBuilder4line17h44de9f431bb34307E>
    ef4c:	9001      	str	r0, [sp, #4]
    ef4e:	e7ff      	b.n	ef50 <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xce>
    ef50:	a813      	add	r0, sp, #76	; 0x4c
    ef52:	9901      	ldr	r1, [sp, #4]
    ef54:	f7ff ff32 	bl	edbc <_ZN3log13RecordBuilder5build17h83529556a009112eE>
    ef58:	e7ff      	b.n	ef5a <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xd8>
    logger().log(
    ef5a:	9808      	ldr	r0, [sp, #32]
    ef5c:	6901      	ldr	r1, [r0, #16]
    ef5e:	aa13      	add	r2, sp, #76	; 0x4c
    ef60:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef62:	9100      	str	r1, [sp, #0]
    ef64:	4611      	mov	r1, r2
    ef66:	9a00      	ldr	r2, [sp, #0]
    ef68:	4790      	blx	r2
    ef6a:	e7ff      	b.n	ef6c <_ZN3log17__private_api_log17h076f8f4ccc99f19bE+0xea>
            .build(),
    );
}
    ef6c:	b04a      	add	sp, #296	; 0x128
    ef6e:	bd70      	pop	{r4, r5, r6, pc}

0000ef70 <_ZN3log14MaybeStaticStr6Static17hfa02d03ba4e02d93E>:
    Static(&'static str),
    ef70:	b082      	sub	sp, #8
    ef72:	9100      	str	r1, [sp, #0]
    ef74:	9201      	str	r2, [sp, #4]
    ef76:	6041      	str	r1, [r0, #4]
    ef78:	6082      	str	r2, [r0, #8]
    ef7a:	2100      	movs	r1, #0
    ef7c:	6001      	str	r1, [r0, #0]
    ef7e:	b002      	add	sp, #8
    ef80:	4770      	bx	lr

0000ef82 <_ZN58_$LT$log..MaybeStaticStr$u20$as$u20$core..clone..Clone$GT$5clone17h6846cd2780bce84dE>:
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    ef82:	b081      	sub	sp, #4
    ef84:	9100      	str	r1, [sp, #0]
    ef86:	680a      	ldr	r2, [r1, #0]
    ef88:	684b      	ldr	r3, [r1, #4]
    ef8a:	6889      	ldr	r1, [r1, #8]
    ef8c:	6081      	str	r1, [r0, #8]
    ef8e:	6043      	str	r3, [r0, #4]
    ef90:	6002      	str	r2, [r0, #0]
    ef92:	b001      	add	sp, #4
    ef94:	4770      	bx	lr

0000ef96 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E>:
#[derive(Clone, Debug)]
    ef96:	b570      	push	{r4, r5, r6, lr}
    ef98:	b09c      	sub	sp, #112	; 0x70
    ef9a:	9116      	str	r1, [sp, #88]	; 0x58
    metadata: Metadata<'a>,
    ef9c:	9117      	str	r1, [sp, #92]	; 0x5c
    args: fmt::Arguments<'a>,
    ef9e:	f101 020c 	add.w	r2, r1, #12
    efa2:	4613      	mov	r3, r2
    efa4:	9218      	str	r2, [sp, #96]	; 0x60
    module_path: Option<MaybeStaticStr<'a>>,
    efa6:	f101 0224 	add.w	r2, r1, #36	; 0x24
    efaa:	4694      	mov	ip, r2
    efac:	9219      	str	r2, [sp, #100]	; 0x64
    file: Option<MaybeStaticStr<'a>>,
    efae:	f101 0230 	add.w	r2, r1, #48	; 0x30
    efb2:	4696      	mov	lr, r2
    efb4:	921a      	str	r2, [sp, #104]	; 0x68
    line: Option<u32>,
    efb6:	f101 023c 	add.w	r2, r1, #60	; 0x3c
    efba:	4614      	mov	r4, r2
    efbc:	921b      	str	r2, [sp, #108]	; 0x6c
    efbe:	aa07      	add	r2, sp, #28
    metadata: Metadata<'a>,
    efc0:	9006      	str	r0, [sp, #24]
    efc2:	4610      	mov	r0, r2
    efc4:	9305      	str	r3, [sp, #20]
    efc6:	f8cd c010 	str.w	ip, [sp, #16]
    efca:	f8cd e00c 	str.w	lr, [sp, #12]
    efce:	9402      	str	r4, [sp, #8]
    efd0:	f000 f836 	bl	f040 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>
    efd4:	e7ff      	b.n	efd6 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x40>
    efd6:	a80a      	add	r0, sp, #40	; 0x28
    args: fmt::Arguments<'a>,
    efd8:	9905      	ldr	r1, [sp, #20]
    efda:	f7ff fdf8 	bl	ebce <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..clone..Clone$GT$5clone17h8c78e53e382f0795E>
    efde:	e7ff      	b.n	efe0 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x4a>
    efe0:	a810      	add	r0, sp, #64	; 0x40
    module_path: Option<MaybeStaticStr<'a>>,
    efe2:	9904      	ldr	r1, [sp, #16]
    efe4:	f7ff fdfc 	bl	ebe0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    efe8:	e7ff      	b.n	efea <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x54>
    efea:	a813      	add	r0, sp, #76	; 0x4c
    file: Option<MaybeStaticStr<'a>>,
    efec:	9903      	ldr	r1, [sp, #12]
    efee:	f7ff fdf7 	bl	ebe0 <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17ha86b6bc41f659692E>
    eff2:	e7ff      	b.n	eff4 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x5e>
    line: Option<u32>,
    eff4:	9802      	ldr	r0, [sp, #8]
    eff6:	f7ff fe1a 	bl	ec2e <_ZN68_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..clone..Clone$GT$5clone17hdbf0988f67cc06e1E>
    effa:	9001      	str	r0, [sp, #4]
    effc:	9100      	str	r1, [sp, #0]
    effe:	e7ff      	b.n	f000 <_ZN50_$LT$log..Record$u20$as$u20$core..clone..Clone$GT$5clone17hff6b7701e5922490E+0x6a>
#[derive(Clone, Debug)]
    f000:	9807      	ldr	r0, [sp, #28]
    f002:	9908      	ldr	r1, [sp, #32]
    f004:	9a09      	ldr	r2, [sp, #36]	; 0x24
    f006:	9b06      	ldr	r3, [sp, #24]
    f008:	609a      	str	r2, [r3, #8]
    f00a:	6059      	str	r1, [r3, #4]
    f00c:	6018      	str	r0, [r3, #0]
    f00e:	f103 000c 	add.w	r0, r3, #12
    f012:	a90a      	add	r1, sp, #40	; 0x28
    f014:	e891 5074 	ldmia.w	r1, {r2, r4, r5, r6, ip, lr}
    f018:	e880 5074 	stmia.w	r0, {r2, r4, r5, r6, ip, lr}
    f01c:	9810      	ldr	r0, [sp, #64]	; 0x40
    f01e:	9911      	ldr	r1, [sp, #68]	; 0x44
    f020:	9a12      	ldr	r2, [sp, #72]	; 0x48
    f022:	62da      	str	r2, [r3, #44]	; 0x2c
    f024:	6299      	str	r1, [r3, #40]	; 0x28
    f026:	6258      	str	r0, [r3, #36]	; 0x24
    f028:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f02a:	9914      	ldr	r1, [sp, #80]	; 0x50
    f02c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    f02e:	639a      	str	r2, [r3, #56]	; 0x38
    f030:	6359      	str	r1, [r3, #52]	; 0x34
    f032:	6318      	str	r0, [r3, #48]	; 0x30
    f034:	9801      	ldr	r0, [sp, #4]
    f036:	63d8      	str	r0, [r3, #60]	; 0x3c
    f038:	9900      	ldr	r1, [sp, #0]
    f03a:	6419      	str	r1, [r3, #64]	; 0x40
    f03c:	b01c      	add	sp, #112	; 0x70
    f03e:	bd70      	pop	{r4, r5, r6, pc}

0000f040 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E>:
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    f040:	b580      	push	{r7, lr}
    f042:	b088      	sub	sp, #32
    f044:	9105      	str	r1, [sp, #20]
    level: Level,
    f046:	9106      	str	r1, [sp, #24]
    target: &'a str,
    f048:	1d0a      	adds	r2, r1, #4
    f04a:	4613      	mov	r3, r2
    f04c:	9207      	str	r2, [sp, #28]
    level: Level,
    f04e:	9004      	str	r0, [sp, #16]
    f050:	4608      	mov	r0, r1
    f052:	9303      	str	r3, [sp, #12]
    f054:	f7ff fe09 	bl	ec6a <_ZN49_$LT$log..Level$u20$as$u20$core..clone..Clone$GT$5clone17hf0fed701c2ce6195E>
    f058:	9002      	str	r0, [sp, #8]
    f05a:	e7ff      	b.n	f05c <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x1c>
    target: &'a str,
    f05c:	9803      	ldr	r0, [sp, #12]
    f05e:	f7ff fd58 	bl	eb12 <_ZN4core5clone5impls54_$LT$impl$u20$core..clone..Clone$u20$for$u20$$RF$T$GT$5clone17h3a58303db19edc4dE>
    f062:	9001      	str	r0, [sp, #4]
    f064:	9100      	str	r1, [sp, #0]
    f066:	e7ff      	b.n	f068 <_ZN52_$LT$log..Metadata$u20$as$u20$core..clone..Clone$GT$5clone17h8ac8fb4c0d32f7d9E+0x28>
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug)]
    f068:	9802      	ldr	r0, [sp, #8]
    f06a:	9904      	ldr	r1, [sp, #16]
    f06c:	6008      	str	r0, [r1, #0]
    f06e:	9a01      	ldr	r2, [sp, #4]
    f070:	604a      	str	r2, [r1, #4]
    f072:	9b00      	ldr	r3, [sp, #0]
    f074:	608b      	str	r3, [r1, #8]
    f076:	b008      	add	sp, #32
    f078:	bd80      	pop	{r7, pc}

0000f07a <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE>:
pub use hal::{ Delay, GPIO, SPI };  //  Export `hal` types GPIO and SPI

pub mod spi;  //  Export Non-Blocking SPI API

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
pub fn sysinit() {
    f07a:	b580      	push	{r7, lr}
    unsafe { rust_sysinit(); }
    f07c:	f00c fba2 	bl	1b7c4 <rust_sysinit>
    f080:	e7ff      	b.n	f082 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0x8>
    sys::console::flush();
    f082:	f000 fbba 	bl	f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>
    f086:	e7ff      	b.n	f088 <_ZN6mynewt7sysinit17hc1d7d0f506bbf0dfE+0xe>
}
    f088:	bd80      	pop	{r7, pc}

0000f08a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>:
            rep: StrnRep::CStr(cstr)
        }
    }

    /// Return a pointer to the string
    pub fn as_ptr(&self) -> *const u8 {
    f08a:	b580      	push	{r7, lr}
    f08c:	b086      	sub	sp, #24
    f08e:	9002      	str	r0, [sp, #8]
        match self.rep {
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f090:	7801      	ldrb	r1, [r0, #0]
    f092:	07ca      	lsls	r2, r1, #31
    f094:	2a00      	cmp	r2, #0
    f096:	9000      	str	r0, [sp, #0]
    f098:	d006      	beq.n	f0a8 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x1e>
    f09a:	e7ff      	b.n	f09c <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x12>
            StrnRep::CStr(cstr)  => { cstr }
    f09c:	9800      	ldr	r0, [sp, #0]
    f09e:	6841      	ldr	r1, [r0, #4]
    f0a0:	9103      	str	r1, [sp, #12]
    f0a2:	9101      	str	r1, [sp, #4]
        match self.rep {
    f0a4:	e00c      	b.n	f0c0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
    f0a6:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => { bs.as_ptr() }
    f0a8:	9800      	ldr	r0, [sp, #0]
    f0aa:	6841      	ldr	r1, [r0, #4]
    f0ac:	6882      	ldr	r2, [r0, #8]
    f0ae:	9104      	str	r1, [sp, #16]
    f0b0:	9205      	str	r2, [sp, #20]
    f0b2:	4608      	mov	r0, r1
    f0b4:	4611      	mov	r1, r2
    f0b6:	f7ff fc57 	bl	e968 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f0ba:	9001      	str	r0, [sp, #4]
    f0bc:	e7ff      	b.n	f0be <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x34>
        match self.rep {
    f0be:	e7ff      	b.n	f0c0 <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E+0x36>
        }
    }
    f0c0:	9801      	ldr	r0, [sp, #4]
    f0c2:	b006      	add	sp, #24
    f0c4:	bd80      	pop	{r7, pc}

0000f0c6 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>:
            }
        }
    }

    /// Fail if the last byte is not zero.
    pub fn validate(&self) {
    f0c6:	b5b0      	push	{r4, r5, r7, lr}
    f0c8:	b0b2      	sub	sp, #200	; 0xc8
    f0ca:	9029      	str	r0, [sp, #164]	; 0xa4
        match self.rep {
            StrnRep::ByteStr(bs) => {         
    f0cc:	7801      	ldrb	r1, [r0, #0]
    f0ce:	07ca      	lsls	r2, r1, #31
    f0d0:	2a00      	cmp	r2, #0
    f0d2:	900e      	str	r0, [sp, #56]	; 0x38
    f0d4:	d005      	beq.n	f0e2 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x1c>
    f0d6:	e7ff      	b.n	f0d8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
            }
            StrnRep::CStr(_cstr)  => {}
    f0d8:	980e      	ldr	r0, [sp, #56]	; 0x38
    f0da:	6841      	ldr	r1, [r0, #4]
    f0dc:	912a      	str	r1, [sp, #168]	; 0xa8
        match self.rep {
    f0de:	e096      	b.n	f20e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
    f0e0:	defe      	udf	#254	; 0xfe
            StrnRep::ByteStr(bs) => {         
    f0e2:	980e      	ldr	r0, [sp, #56]	; 0x38
    f0e4:	6841      	ldr	r1, [r0, #4]
    f0e6:	6882      	ldr	r2, [r0, #8]
    f0e8:	912b      	str	r1, [sp, #172]	; 0xac
    f0ea:	922c      	str	r2, [sp, #176]	; 0xb0
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f0ec:	4608      	mov	r0, r1
    f0ee:	4611      	mov	r1, r2
    f0f0:	f000 fabe 	bl	f670 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>
    f0f4:	9011      	str	r0, [sp, #68]	; 0x44
    f0f6:	e7ff      	b.n	f0f8 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x32>
    f0f8:	f64e 70d8 	movw	r0, #61400	; 0xefd8
    f0fc:	f2c0 0001 	movt	r0, #1
    f100:	6800      	ldr	r0, [r0, #0]
    f102:	a911      	add	r1, sp, #68	; 0x44
    f104:	910f      	str	r1, [sp, #60]	; 0x3c
    f106:	9010      	str	r0, [sp, #64]	; 0x40
    f108:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f10a:	902d      	str	r0, [sp, #180]	; 0xb4
    f10c:	9910      	ldr	r1, [sp, #64]	; 0x40
    f10e:	912e      	str	r1, [sp, #184]	; 0xb8
    f110:	900d      	str	r0, [sp, #52]	; 0x34
    f112:	910c      	str	r1, [sp, #48]	; 0x30
    f114:	f000 fee5 	bl	fee2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>
    f118:	900b      	str	r0, [sp, #44]	; 0x2c
    f11a:	e7ff      	b.n	f11c <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x56>
    f11c:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f11e:	07c1      	lsls	r1, r0, #31
    f120:	2900      	cmp	r1, #0
    f122:	d001      	beq.n	f128 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x62>
    f124:	e7ff      	b.n	f126 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x60>
        }
    }
    f126:	e072      	b.n	f20e <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x148>
                assert_eq!(bs.last(), Some(&0u8), "no null");  //  Last byte must be 0.
    f128:	f24f 0030 	movw	r0, #61488	; 0xf030
    f12c:	f2c0 0001 	movt	r0, #1
    f130:	6801      	ldr	r1, [r0, #0]
    f132:	980d      	ldr	r0, [sp, #52]	; 0x34
    f134:	9021      	str	r0, [sp, #132]	; 0x84
    f136:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    f138:	9222      	str	r2, [sp, #136]	; 0x88
    f13a:	f24f 0344 	movw	r3, #61508	; 0xf044
    f13e:	f2c0 0301 	movt	r3, #1
    f142:	681b      	ldr	r3, [r3, #0]
    f144:	f24f 0c48 	movw	ip, #61512	; 0xf048
    f148:	f2c0 0c01 	movt	ip, #1
    f14c:	f8dc c000 	ldr.w	ip, [ip]
    f150:	46ee      	mov	lr, sp
    f152:	2400      	movs	r4, #0
    f154:	f8ce 4000 	str.w	r4, [lr]
    f158:	a823      	add	r0, sp, #140	; 0x8c
    f15a:	2201      	movs	r2, #1
    f15c:	910a      	str	r1, [sp, #40]	; 0x28
    f15e:	4619      	mov	r1, r3
    f160:	4663      	mov	r3, ip
    f162:	f000 f856 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f166:	e7ff      	b.n	f168 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xa2>
    f168:	a821      	add	r0, sp, #132	; 0x84
    f16a:	901e      	str	r0, [sp, #120]	; 0x78
    f16c:	a822      	add	r0, sp, #136	; 0x88
    f16e:	901f      	str	r0, [sp, #124]	; 0x7c
    f170:	a823      	add	r0, sp, #140	; 0x8c
    f172:	9020      	str	r0, [sp, #128]	; 0x80
    f174:	981e      	ldr	r0, [sp, #120]	; 0x78
    f176:	902f      	str	r0, [sp, #188]	; 0xbc
    f178:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f17a:	9130      	str	r1, [sp, #192]	; 0xc0
    f17c:	9a20      	ldr	r2, [sp, #128]	; 0x80
    f17e:	9231      	str	r2, [sp, #196]	; 0xc4
    f180:	f64f 539b 	movw	r3, #64923	; 0xfd9b
    f184:	f2c0 0300 	movt	r3, #0
    f188:	9109      	str	r1, [sp, #36]	; 0x24
    f18a:	4619      	mov	r1, r3
    f18c:	9208      	str	r2, [sp, #32]
    f18e:	f000 ff53 	bl	10038 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f192:	9007      	str	r0, [sp, #28]
    f194:	9106      	str	r1, [sp, #24]
    f196:	e7ff      	b.n	f198 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xd2>
    f198:	f64f 519b 	movw	r1, #64923	; 0xfd9b
    f19c:	f2c0 0100 	movt	r1, #0
    f1a0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f1a2:	f000 ff49 	bl	10038 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>
    f1a6:	9005      	str	r0, [sp, #20]
    f1a8:	9104      	str	r1, [sp, #16]
    f1aa:	e7ff      	b.n	f1ac <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xe6>
    f1ac:	f247 0173 	movw	r1, #28787	; 0x7073
    f1b0:	f2c0 0101 	movt	r1, #1
    f1b4:	9808      	ldr	r0, [sp, #32]
    f1b6:	f000 ff69 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f1ba:	9003      	str	r0, [sp, #12]
    f1bc:	9102      	str	r1, [sp, #8]
    f1be:	e7ff      	b.n	f1c0 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0xfa>
    f1c0:	9807      	ldr	r0, [sp, #28]
    f1c2:	9018      	str	r0, [sp, #96]	; 0x60
    f1c4:	9906      	ldr	r1, [sp, #24]
    f1c6:	9119      	str	r1, [sp, #100]	; 0x64
    f1c8:	9a05      	ldr	r2, [sp, #20]
    f1ca:	921a      	str	r2, [sp, #104]	; 0x68
    f1cc:	9b04      	ldr	r3, [sp, #16]
    f1ce:	931b      	str	r3, [sp, #108]	; 0x6c
    f1d0:	f8dd c00c 	ldr.w	ip, [sp, #12]
    f1d4:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    f1d8:	f8dd e008 	ldr.w	lr, [sp, #8]
    f1dc:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    f1e0:	466c      	mov	r4, sp
    f1e2:	2503      	movs	r5, #3
    f1e4:	6025      	str	r5, [r4, #0]
    f1e6:	a812      	add	r0, sp, #72	; 0x48
    f1e8:	ab18      	add	r3, sp, #96	; 0x60
    f1ea:	990a      	ldr	r1, [sp, #40]	; 0x28
    f1ec:	462a      	mov	r2, r5
    f1ee:	f000 f810 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f1f2:	e7ff      	b.n	f1f4 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x12e>
    f1f4:	f24f 0064 	movw	r0, #61540	; 0xf064
    f1f8:	f2c0 0001 	movt	r0, #1
    f1fc:	f007 fc4b 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f200:	9001      	str	r0, [sp, #4]
    f202:	e7ff      	b.n	f204 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE+0x13e>
    f204:	a812      	add	r0, sp, #72	; 0x48
    f206:	9901      	ldr	r1, [sp, #4]
    f208:	f007 fc82 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f20c:	defe      	udf	#254	; 0xfe
    }
    f20e:	b032      	add	sp, #200	; 0xc8
    f210:	bdb0      	pop	{r4, r5, r7, pc}

0000f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>:
    f212:	b580      	push	{r7, lr}
    f214:	b086      	sub	sp, #24
    f216:	f8dd c020 	ldr.w	ip, [sp, #32]
    f21a:	9102      	str	r1, [sp, #8]
    f21c:	9203      	str	r2, [sp, #12]
    f21e:	9304      	str	r3, [sp, #16]
    f220:	f8cd c014 	str.w	ip, [sp, #20]
    f224:	f04f 0e00 	mov.w	lr, #0
    f228:	f8cd e004 	str.w	lr, [sp, #4]
    f22c:	f8cd e000 	str.w	lr, [sp]
    f230:	f8cd e000 	str.w	lr, [sp]
    f234:	6001      	str	r1, [r0, #0]
    f236:	6042      	str	r2, [r0, #4]
    f238:	9900      	ldr	r1, [sp, #0]
    f23a:	9a01      	ldr	r2, [sp, #4]
    f23c:	6081      	str	r1, [r0, #8]
    f23e:	60c2      	str	r2, [r0, #12]
    f240:	6103      	str	r3, [r0, #16]
    f242:	f8c0 c014 	str.w	ip, [r0, #20]
    f246:	b006      	add	sp, #24
    f248:	bd80      	pop	{r7, pc}

0000f24a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>:
    f24a:	b082      	sub	sp, #8
    f24c:	9001      	str	r0, [sp, #4]
    f24e:	7800      	ldrb	r0, [r0, #0]
    f250:	07c0      	lsls	r0, r0, #31
    f252:	2800      	cmp	r0, #0
    f254:	d004      	beq.n	f260 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x16>
    f256:	e7ff      	b.n	f258 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0xe>
    f258:	2000      	movs	r0, #0
    f25a:	f88d 0003 	strb.w	r0, [sp, #3]
    f25e:	e003      	b.n	f268 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f260:	2001      	movs	r0, #1
    f262:	f88d 0003 	strb.w	r0, [sp, #3]
    f266:	e7ff      	b.n	f268 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E+0x1e>
    f268:	f89d 0003 	ldrb.w	r0, [sp, #3]
    f26c:	b002      	add	sp, #8
    f26e:	4770      	bx	lr

0000f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>:
    f270:	b08a      	sub	sp, #40	; 0x28
    f272:	9005      	str	r0, [sp, #20]
    f274:	9107      	str	r1, [sp, #28]
    f276:	9208      	str	r2, [sp, #32]
    f278:	9805      	ldr	r0, [sp, #20]
    f27a:	f1b0 0c01 	subs.w	ip, r0, #1
    f27e:	bf18      	it	ne
    f280:	f04f 0c01 	movne.w	ip, #1
    f284:	2801      	cmp	r0, #1
    f286:	9304      	str	r3, [sp, #16]
    f288:	9203      	str	r2, [sp, #12]
    f28a:	9102      	str	r1, [sp, #8]
    f28c:	d010      	beq.n	f2b0 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x40>
    f28e:	e7ff      	b.n	f290 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x20>
    f290:	9805      	ldr	r0, [sp, #20]
    f292:	9006      	str	r0, [sp, #24]
    f294:	4668      	mov	r0, sp
    f296:	9904      	ldr	r1, [sp, #16]
    f298:	6001      	str	r1, [r0, #0]
    f29a:	f24f 0374 	movw	r3, #61556	; 0xf074
    f29e:	f2c0 0301 	movt	r3, #1
    f2a2:	aa06      	add	r2, sp, #24
    f2a4:	9802      	ldr	r0, [sp, #8]
    f2a6:	9903      	ldr	r1, [sp, #12]
    f2a8:	f007 fbce 	bl	16a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
    f2ac:	defe      	udf	#254	; 0xfe
    f2ae:	defe      	udf	#254	; 0xfe
    f2b0:	9805      	ldr	r0, [sp, #20]
    f2b2:	2801      	cmp	r0, #1
    f2b4:	d102      	bne.n	f2bc <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x4c>
    f2b6:	e7ff      	b.n	f2b8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>
    f2b8:	b00a      	add	sp, #40	; 0x28
    f2ba:	4770      	bx	lr
    f2bc:	e7fc      	b.n	f2b8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE+0x48>

0000f2be <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>:
    f2be:	b580      	push	{r7, lr}
    f2c0:	b082      	sub	sp, #8
    f2c2:	9001      	str	r0, [sp, #4]
    f2c4:	f7ff ffc1 	bl	f24a <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h7ca57c6a81c4c8d1E>
    f2c8:	9000      	str	r0, [sp, #0]
    f2ca:	e7ff      	b.n	f2cc <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E+0xe>
    f2cc:	2001      	movs	r0, #1
    f2ce:	9900      	ldr	r1, [sp, #0]
    f2d0:	4388      	bics	r0, r1
    f2d2:	b002      	add	sp, #8
    f2d4:	bd80      	pop	{r7, pc}

0000f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>:
    f2d6:	b082      	sub	sp, #8
    f2d8:	9001      	str	r0, [sp, #4]
    f2da:	9000      	str	r0, [sp, #0]
    f2dc:	9800      	ldr	r0, [sp, #0]
    f2de:	b002      	add	sp, #8
    f2e0:	4770      	bx	lr

0000f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>:
    f2e2:	b081      	sub	sp, #4
    f2e4:	4601      	mov	r1, r0
    f2e6:	f88d 0003 	strb.w	r0, [sp, #3]
    f2ea:	b001      	add	sp, #4
    f2ec:	4770      	bx	lr

0000f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>:
    f2ee:	b081      	sub	sp, #4
    f2f0:	9000      	str	r0, [sp, #0]
    f2f2:	b001      	add	sp, #4
    f2f4:	4770      	bx	lr

0000f2f6 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>:
    f2f6:	b580      	push	{r7, lr}
    f2f8:	b08a      	sub	sp, #40	; 0x28
    f2fa:	9007      	str	r0, [sp, #28]
    f2fc:	9108      	str	r1, [sp, #32]
    f2fe:	9209      	str	r2, [sp, #36]	; 0x24
    f300:	2300      	movs	r3, #0
    f302:	9305      	str	r3, [sp, #20]
    f304:	9006      	str	r0, [sp, #24]
    f306:	9805      	ldr	r0, [sp, #20]
    f308:	9b06      	ldr	r3, [sp, #24]
    f30a:	9104      	str	r1, [sp, #16]
    f30c:	4619      	mov	r1, r3
    f30e:	9b04      	ldr	r3, [sp, #16]
    f310:	9203      	str	r2, [sp, #12]
    f312:	461a      	mov	r2, r3
    f314:	9b03      	ldr	r3, [sp, #12]
    f316:	f000 f828 	bl	f36a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>
    f31a:	9002      	str	r0, [sp, #8]
    f31c:	9101      	str	r1, [sp, #4]
    f31e:	e7ff      	b.n	f320 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E+0x2a>
    f320:	9802      	ldr	r0, [sp, #8]
    f322:	9901      	ldr	r1, [sp, #4]
    f324:	b00a      	add	sp, #40	; 0x28
    f326:	bd80      	pop	{r7, pc}

0000f328 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>:
    f328:	b580      	push	{r7, lr}
    f32a:	b08a      	sub	sp, #40	; 0x28
    f32c:	9006      	str	r0, [sp, #24]
    f32e:	9107      	str	r1, [sp, #28]
    f330:	9208      	str	r2, [sp, #32]
    f332:	9309      	str	r3, [sp, #36]	; 0x24
    f334:	9005      	str	r0, [sp, #20]
    f336:	4610      	mov	r0, r2
    f338:	9104      	str	r1, [sp, #16]
    f33a:	4619      	mov	r1, r3
    f33c:	f7ff faf5 	bl	e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f340:	9003      	str	r0, [sp, #12]
    f342:	e7ff      	b.n	f344 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x1c>
    f344:	9803      	ldr	r0, [sp, #12]
    f346:	9905      	ldr	r1, [sp, #20]
    f348:	f7ff fa76 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
    f34c:	9002      	str	r0, [sp, #8]
    f34e:	e7ff      	b.n	f350 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x28>
    f350:	9804      	ldr	r0, [sp, #16]
    f352:	9905      	ldr	r1, [sp, #20]
    f354:	1a41      	subs	r1, r0, r1
    f356:	9802      	ldr	r0, [sp, #8]
    f358:	f000 f8bb 	bl	f4d2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
    f35c:	9001      	str	r0, [sp, #4]
    f35e:	9100      	str	r1, [sp, #0]
    f360:	e7ff      	b.n	f362 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E+0x3a>
    f362:	9801      	ldr	r0, [sp, #4]
    f364:	9900      	ldr	r1, [sp, #0]
    f366:	b00a      	add	sp, #40	; 0x28
    f368:	bd80      	pop	{r7, pc}

0000f36a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE>:
    f36a:	b580      	push	{r7, lr}
    f36c:	b08c      	sub	sp, #48	; 0x30
    f36e:	9008      	str	r0, [sp, #32]
    f370:	9109      	str	r1, [sp, #36]	; 0x24
    f372:	920a      	str	r2, [sp, #40]	; 0x28
    f374:	930b      	str	r3, [sp, #44]	; 0x2c
    f376:	4288      	cmp	r0, r1
    f378:	9307      	str	r3, [sp, #28]
    f37a:	9206      	str	r2, [sp, #24]
    f37c:	9105      	str	r1, [sp, #20]
    f37e:	9004      	str	r0, [sp, #16]
    f380:	d806      	bhi.n	f390 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x26>
    f382:	e7ff      	b.n	f384 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x1a>
    f384:	9806      	ldr	r0, [sp, #24]
    f386:	9907      	ldr	r1, [sp, #28]
    f388:	f7ff fae6 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f38c:	9003      	str	r0, [sp, #12]
    f38e:	e004      	b.n	f39a <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x30>
    f390:	9804      	ldr	r0, [sp, #16]
    f392:	9905      	ldr	r1, [sp, #20]
    f394:	f008 fafb 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
    f398:	defe      	udf	#254	; 0xfe
    f39a:	9805      	ldr	r0, [sp, #20]
    f39c:	9903      	ldr	r1, [sp, #12]
    f39e:	4288      	cmp	r0, r1
    f3a0:	d809      	bhi.n	f3b6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x4c>
    f3a2:	e7ff      	b.n	f3a4 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x3a>
    f3a4:	9804      	ldr	r0, [sp, #16]
    f3a6:	9905      	ldr	r1, [sp, #20]
    f3a8:	9a06      	ldr	r2, [sp, #24]
    f3aa:	9b07      	ldr	r3, [sp, #28]
    f3ac:	f7ff ffbc 	bl	f328 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h07cc5dd0b068f011E>
    f3b0:	9002      	str	r0, [sp, #8]
    f3b2:	9101      	str	r1, [sp, #4]
    f3b4:	e00a      	b.n	f3cc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x62>
    f3b6:	9806      	ldr	r0, [sp, #24]
    f3b8:	9907      	ldr	r1, [sp, #28]
    f3ba:	f7ff facd 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f3be:	9000      	str	r0, [sp, #0]
    f3c0:	e7ff      	b.n	f3c2 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h9e217e3ac69665beE+0x58>
    f3c2:	9805      	ldr	r0, [sp, #20]
    f3c4:	9900      	ldr	r1, [sp, #0]
    f3c6:	f008 fac0 	bl	1794a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
    f3ca:	defe      	udf	#254	; 0xfe
    f3cc:	9802      	ldr	r0, [sp, #8]
    f3ce:	9901      	ldr	r1, [sp, #4]
    f3d0:	b00c      	add	sp, #48	; 0x30
    f3d2:	bd80      	pop	{r7, pc}

0000f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>:
    f3d4:	b081      	sub	sp, #4
    f3d6:	9000      	str	r0, [sp, #0]
    f3d8:	b001      	add	sp, #4
    f3da:	4770      	bx	lr

0000f3dc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>:
    #[doc = " - __`evq`__: The event queue to pull an event from"]
    #[doc = ""]
    #[doc = " Return: The event from the queue"]
    pub fn os_eventq_get(arg1: *mut os_eventq) -> *mut os_event;
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f3dc:	b580      	push	{r7, lr}
    f3de:	b082      	sub	sp, #8
    f3e0:	9001      	str	r0, [sp, #4]
    f3e2:	f00a fe39 	bl	1a058 <os_eventq_run>
    f3e6:	e7ff      	b.n	f3e8 <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE+0xc>
    f3e8:	2001      	movs	r0, #1
    f3ea:	b002      	add	sp, #8
    f3ec:	bd80      	pop	{r7, pc}

0000f3ee <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE>:
    #[doc = ""]
    #[doc = " - __`evq`__: The event queue to remove the event from"]
    #[doc = " - __`ev`__:  The event to remove from the queue"]
    pub fn os_eventq_remove(arg1: *mut os_eventq, arg2: *mut os_event);
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f3ee:	b580      	push	{r7, lr}
    f3f0:	b084      	sub	sp, #16
    f3f2:	9002      	str	r0, [sp, #8]
    f3f4:	f00a fe5c 	bl	1a0b0 <os_eventq_dflt_get>
    f3f8:	4601      	mov	r1, r0
    f3fa:	9003      	str	r0, [sp, #12]
    f3fc:	9101      	str	r1, [sp, #4]
    f3fe:	e7ff      	b.n	f400 <_ZN6mynewt6kernel2os15eventq_dflt_get17h2d5946dca01cfe0aE+0x12>
    f400:	9801      	ldr	r0, [sp, #4]
    f402:	9902      	ldr	r1, [sp, #8]
    f404:	6048      	str	r0, [r1, #4]
    f406:	2200      	movs	r2, #0
    f408:	600a      	str	r2, [r1, #0]
    f40a:	b004      	add	sp, #16
    f40c:	bd80      	pop	{r7, pc}

0000f40e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>:
impl Default for os_task_stailq {
    fn default() -> Self {
        unsafe { ::core::mem::zeroed() }
    }
}
#[mynewt_macros::safe_wrap(attr)] extern "C" {
    f40e:	b570      	push	{r4, r5, r6, lr}
    f410:	b09c      	sub	sp, #112	; 0x70
    f412:	f8dd c090 	ldr.w	ip, [sp, #144]	; 0x90
    f416:	f8dd e08c 	ldr.w	lr, [sp, #140]	; 0x8c
    f41a:	9c22      	ldr	r4, [sp, #136]	; 0x88
    f41c:	9d21      	ldr	r5, [sp, #132]	; 0x84
    f41e:	9e20      	ldr	r6, [sp, #128]	; 0x80
    f420:	9013      	str	r0, [sp, #76]	; 0x4c
    f422:	9114      	str	r1, [sp, #80]	; 0x50
    f424:	9215      	str	r2, [sp, #84]	; 0x54
    f426:	9316      	str	r3, [sp, #88]	; 0x58
    f428:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
    f42c:	9418      	str	r4, [sp, #96]	; 0x60
    f42e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
    f432:	f8ad c06a 	strh.w	ip, [sp, #106]	; 0x6a
    f436:	9011      	str	r0, [sp, #68]	; 0x44
    f438:	4608      	mov	r0, r1
    f43a:	9310      	str	r3, [sp, #64]	; 0x40
    f43c:	920f      	str	r2, [sp, #60]	; 0x3c
    f43e:	910e      	str	r1, [sp, #56]	; 0x38
    f440:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
    f444:	f8cd e030 	str.w	lr, [sp, #48]	; 0x30
    f448:	940b      	str	r4, [sp, #44]	; 0x2c
    f44a:	950a      	str	r5, [sp, #40]	; 0x28
    f44c:	9609      	str	r6, [sp, #36]	; 0x24
    f44e:	f7ff fe3a 	bl	f0c6 <_ZN6mynewt4Strn8validate17h1102378208cc75cdE>
    f452:	e7ff      	b.n	f454 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x46>
    f454:	980e      	ldr	r0, [sp, #56]	; 0x38
    f456:	f7ff fe18 	bl	f08a <_ZN6mynewt4Strn6as_ptr17h0721221ad53da1d0E>
    f45a:	9008      	str	r0, [sp, #32]
    f45c:	e7ff      	b.n	f45e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x50>
    f45e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f460:	990c      	ldr	r1, [sp, #48]	; 0x30
    f462:	f000 f93b 	bl	f6dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>
    f466:	9007      	str	r0, [sp, #28]
    f468:	e7ff      	b.n	f46a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x5c>
    f46a:	980d      	ldr	r0, [sp, #52]	; 0x34
    f46c:	b281      	uxth	r1, r0
    f46e:	466a      	mov	r2, sp
    f470:	60d1      	str	r1, [r2, #12]
    f472:	9907      	ldr	r1, [sp, #28]
    f474:	6091      	str	r1, [r2, #8]
    f476:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f478:	6053      	str	r3, [r2, #4]
    f47a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
    f47e:	fa5f fe8c 	uxtb.w	lr, ip
    f482:	f8c2 e000 	str.w	lr, [r2]
    f486:	9811      	ldr	r0, [sp, #68]	; 0x44
    f488:	9908      	ldr	r1, [sp, #32]
    f48a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    f48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f48e:	f00b fbaf 	bl	1abf0 <os_task_init>
    f492:	4601      	mov	r1, r0
    f494:	901b      	str	r0, [sp, #108]	; 0x6c
    f496:	9106      	str	r1, [sp, #24]
    f498:	e7ff      	b.n	f49a <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x8c>
    f49a:	9806      	ldr	r0, [sp, #24]
    f49c:	2800      	cmp	r0, #0
    f49e:	d005      	beq.n	f4ac <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x9e>
    f4a0:	e7ff      	b.n	f4a2 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0x94>
    f4a2:	9806      	ldr	r0, [sp, #24]
    f4a4:	f003 fedc 	bl	13260 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>
    f4a8:	9005      	str	r0, [sp, #20]
    f4aa:	e004      	b.n	f4b6 <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xa8>
    f4ac:	2000      	movs	r0, #0
    f4ae:	9012      	str	r0, [sp, #72]	; 0x48
    f4b0:	2001      	movs	r0, #1
    f4b2:	9012      	str	r0, [sp, #72]	; 0x48
    f4b4:	e002      	b.n	f4bc <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f4b6:	9805      	ldr	r0, [sp, #20]
    f4b8:	9012      	str	r0, [sp, #72]	; 0x48
    f4ba:	e7ff      	b.n	f4bc <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E+0xae>
    f4bc:	9812      	ldr	r0, [sp, #72]	; 0x48
    f4be:	b01c      	add	sp, #112	; 0x70
    f4c0:	bd70      	pop	{r4, r5, r6, pc}

0000f4c2 <_ZN4core3ptr13drop_in_place17h1982c2483e0a2028E>:
    f4c2:	b081      	sub	sp, #4
    f4c4:	9000      	str	r0, [sp, #0]
    f4c6:	b001      	add	sp, #4
    f4c8:	4770      	bx	lr

0000f4ca <_ZN4core3ptr13drop_in_place17ha255d26dfaf335a3E>:
    f4ca:	b081      	sub	sp, #4
    f4cc:	9000      	str	r0, [sp, #0]
    f4ce:	b001      	add	sp, #4
    f4d0:	4770      	bx	lr

0000f4d2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>:
    f4d2:	b580      	push	{r7, lr}
    f4d4:	b084      	sub	sp, #16
    f4d6:	9002      	str	r0, [sp, #8]
    f4d8:	9103      	str	r1, [sp, #12]
    f4da:	f000 f993 	bl	f804 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>
    f4de:	9001      	str	r0, [sp, #4]
    f4e0:	9100      	str	r1, [sp, #0]
    f4e2:	e7ff      	b.n	f4e4 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE+0x12>
    f4e4:	9801      	ldr	r0, [sp, #4]
    f4e6:	9900      	ldr	r1, [sp, #0]
    f4e8:	b004      	add	sp, #16
    f4ea:	bd80      	pop	{r7, pc}

0000f4ec <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE>:
    f4ec:	b5b0      	push	{r4, r5, r7, lr}
    f4ee:	b0b8      	sub	sp, #224	; 0xe0
    f4f0:	902f      	str	r0, [sp, #188]	; 0xbc
    f4f2:	9130      	str	r1, [sp, #192]	; 0xc0
    f4f4:	9231      	str	r2, [sp, #196]	; 0xc4
    f4f6:	9332      	str	r3, [sp, #200]	; 0xc8
    f4f8:	9013      	str	r0, [sp, #76]	; 0x4c
    f4fa:	9112      	str	r1, [sp, #72]	; 0x48
    f4fc:	9311      	str	r3, [sp, #68]	; 0x44
    f4fe:	9210      	str	r2, [sp, #64]	; 0x40
    f500:	f7ff fa2a 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f504:	9016      	str	r0, [sp, #88]	; 0x58
    f506:	e7ff      	b.n	f508 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x1c>
    f508:	9810      	ldr	r0, [sp, #64]	; 0x40
    f50a:	9911      	ldr	r1, [sp, #68]	; 0x44
    f50c:	f7ff fa24 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f510:	9017      	str	r0, [sp, #92]	; 0x5c
    f512:	e7ff      	b.n	f514 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x28>
    f514:	a816      	add	r0, sp, #88	; 0x58
    f516:	9014      	str	r0, [sp, #80]	; 0x50
    f518:	a817      	add	r0, sp, #92	; 0x5c
    f51a:	9015      	str	r0, [sp, #84]	; 0x54
    f51c:	9814      	ldr	r0, [sp, #80]	; 0x50
    f51e:	9033      	str	r0, [sp, #204]	; 0xcc
    f520:	9915      	ldr	r1, [sp, #84]	; 0x54
    f522:	9134      	str	r1, [sp, #208]	; 0xd0
    f524:	6802      	ldr	r2, [r0, #0]
    f526:	680b      	ldr	r3, [r1, #0]
    f528:	429a      	cmp	r2, r3
    f52a:	900f      	str	r0, [sp, #60]	; 0x3c
    f52c:	910e      	str	r1, [sp, #56]	; 0x38
    f52e:	d106      	bne.n	f53e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x52>
    f530:	e7ff      	b.n	f532 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x46>
    f532:	9810      	ldr	r0, [sp, #64]	; 0x40
    f534:	9911      	ldr	r1, [sp, #68]	; 0x44
    f536:	f7ff fa17 	bl	e968 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
    f53a:	900d      	str	r0, [sp, #52]	; 0x34
    f53c:	e072      	b.n	f624 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x138>
    f53e:	f24f 00d8 	movw	r0, #61656	; 0xf0d8
    f542:	f2c0 0001 	movt	r0, #1
    f546:	6801      	ldr	r1, [r0, #0]
    f548:	980f      	ldr	r0, [sp, #60]	; 0x3c
    f54a:	9027      	str	r0, [sp, #156]	; 0x9c
    f54c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    f54e:	9228      	str	r2, [sp, #160]	; 0xa0
    f550:	f24f 1318 	movw	r3, #61720	; 0xf118
    f554:	f2c0 0301 	movt	r3, #1
    f558:	681b      	ldr	r3, [r3, #0]
    f55a:	f24f 1c1c 	movw	ip, #61724	; 0xf11c
    f55e:	f2c0 0c01 	movt	ip, #1
    f562:	f8dc c000 	ldr.w	ip, [ip]
    f566:	46ee      	mov	lr, sp
    f568:	2400      	movs	r4, #0
    f56a:	f8ce 4000 	str.w	r4, [lr]
    f56e:	a829      	add	r0, sp, #164	; 0xa4
    f570:	2201      	movs	r2, #1
    f572:	910c      	str	r1, [sp, #48]	; 0x30
    f574:	4619      	mov	r1, r3
    f576:	4663      	mov	r3, ip
    f578:	f7ff fe4b 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f57c:	e7ff      	b.n	f57e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x92>
    f57e:	a827      	add	r0, sp, #156	; 0x9c
    f580:	9024      	str	r0, [sp, #144]	; 0x90
    f582:	a828      	add	r0, sp, #160	; 0xa0
    f584:	9025      	str	r0, [sp, #148]	; 0x94
    f586:	a829      	add	r0, sp, #164	; 0xa4
    f588:	9026      	str	r0, [sp, #152]	; 0x98
    f58a:	9824      	ldr	r0, [sp, #144]	; 0x90
    f58c:	9035      	str	r0, [sp, #212]	; 0xd4
    f58e:	9925      	ldr	r1, [sp, #148]	; 0x94
    f590:	9136      	str	r1, [sp, #216]	; 0xd8
    f592:	9a26      	ldr	r2, [sp, #152]	; 0x98
    f594:	9237      	str	r2, [sp, #220]	; 0xdc
    f596:	f243 1333 	movw	r3, #12595	; 0x3133
    f59a:	f2c0 0301 	movt	r3, #1
    f59e:	910b      	str	r1, [sp, #44]	; 0x2c
    f5a0:	4619      	mov	r1, r3
    f5a2:	920a      	str	r2, [sp, #40]	; 0x28
    f5a4:	f003 fdd3 	bl	1314e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f5a8:	9009      	str	r0, [sp, #36]	; 0x24
    f5aa:	9108      	str	r1, [sp, #32]
    f5ac:	e7ff      	b.n	f5ae <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xc2>
    f5ae:	f243 1133 	movw	r1, #12595	; 0x3133
    f5b2:	f2c0 0101 	movt	r1, #1
    f5b6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    f5b8:	f003 fdc9 	bl	1314e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>
    f5bc:	9007      	str	r0, [sp, #28]
    f5be:	9106      	str	r1, [sp, #24]
    f5c0:	e7ff      	b.n	f5c2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xd6>
    f5c2:	f247 0173 	movw	r1, #28787	; 0x7073
    f5c6:	f2c0 0101 	movt	r1, #1
    f5ca:	980a      	ldr	r0, [sp, #40]	; 0x28
    f5cc:	f000 fd5e 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f5d0:	9005      	str	r0, [sp, #20]
    f5d2:	9104      	str	r1, [sp, #16]
    f5d4:	e7ff      	b.n	f5d6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0xea>
    f5d6:	9809      	ldr	r0, [sp, #36]	; 0x24
    f5d8:	901e      	str	r0, [sp, #120]	; 0x78
    f5da:	9908      	ldr	r1, [sp, #32]
    f5dc:	911f      	str	r1, [sp, #124]	; 0x7c
    f5de:	9a07      	ldr	r2, [sp, #28]
    f5e0:	9220      	str	r2, [sp, #128]	; 0x80
    f5e2:	9b06      	ldr	r3, [sp, #24]
    f5e4:	9321      	str	r3, [sp, #132]	; 0x84
    f5e6:	f8dd c014 	ldr.w	ip, [sp, #20]
    f5ea:	f8cd c088 	str.w	ip, [sp, #136]	; 0x88
    f5ee:	f8dd e010 	ldr.w	lr, [sp, #16]
    f5f2:	f8cd e08c 	str.w	lr, [sp, #140]	; 0x8c
    f5f6:	466c      	mov	r4, sp
    f5f8:	2503      	movs	r5, #3
    f5fa:	6025      	str	r5, [r4, #0]
    f5fc:	a818      	add	r0, sp, #96	; 0x60
    f5fe:	ab1e      	add	r3, sp, #120	; 0x78
    f600:	990c      	ldr	r1, [sp, #48]	; 0x30
    f602:	462a      	mov	r2, r5
    f604:	f7ff fe05 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f608:	e7ff      	b.n	f60a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x11e>
    f60a:	f24f 106c 	movw	r0, #61804	; 0xf16c
    f60e:	f2c0 0001 	movt	r0, #1
    f612:	f007 fa40 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f616:	9003      	str	r0, [sp, #12]
    f618:	e7ff      	b.n	f61a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x12e>
    f61a:	a818      	add	r0, sp, #96	; 0x60
    f61c:	9903      	ldr	r1, [sp, #12]
    f61e:	f007 fa77 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f622:	defe      	udf	#254	; 0xfe
    f624:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f626:	9912      	ldr	r1, [sp, #72]	; 0x48
    f628:	f7ff f97f 	bl	e92a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17h521387a4ff65ee0eE>
    f62c:	9002      	str	r0, [sp, #8]
    f62e:	e7ff      	b.n	f630 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x144>
    f630:	9813      	ldr	r0, [sp, #76]	; 0x4c
    f632:	9912      	ldr	r1, [sp, #72]	; 0x48
    f634:	f7ff f990 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f638:	9001      	str	r0, [sp, #4]
    f63a:	e7ff      	b.n	f63c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x150>
    f63c:	980d      	ldr	r0, [sp, #52]	; 0x34
    f63e:	9902      	ldr	r1, [sp, #8]
    f640:	9a01      	ldr	r2, [sp, #4]
    f642:	f7fe ff95 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
    f646:	e7ff      	b.n	f648 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$15copy_from_slice17hf182bf68b57d815dE+0x15c>
    f648:	b038      	add	sp, #224	; 0xe0
    f64a:	bdb0      	pop	{r4, r5, r7, pc}

0000f64c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>:
    f64c:	b580      	push	{r7, lr}
    f64e:	b086      	sub	sp, #24
    f650:	9003      	str	r0, [sp, #12]
    f652:	9104      	str	r1, [sp, #16]
    f654:	9205      	str	r2, [sp, #20]
    f656:	9002      	str	r0, [sp, #8]
    f658:	4610      	mov	r0, r2
    f65a:	9a02      	ldr	r2, [sp, #8]
    f65c:	9101      	str	r1, [sp, #4]
    f65e:	4611      	mov	r1, r2
    f660:	9a01      	ldr	r2, [sp, #4]
    f662:	f000 f861 	bl	f728 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>
    f666:	9000      	str	r0, [sp, #0]
    f668:	e7ff      	b.n	f66a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE+0x1e>
    f66a:	9800      	ldr	r0, [sp, #0]
    f66c:	b006      	add	sp, #24
    f66e:	bd80      	pop	{r7, pc}

0000f670 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E>:
    f670:	b580      	push	{r7, lr}
    f672:	b08e      	sub	sp, #56	; 0x38
    f674:	9009      	str	r0, [sp, #36]	; 0x24
    f676:	910a      	str	r1, [sp, #40]	; 0x28
    f678:	9005      	str	r0, [sp, #20]
    f67a:	9104      	str	r1, [sp, #16]
    f67c:	f7ff f96c 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f680:	9003      	str	r0, [sp, #12]
    f682:	e7ff      	b.n	f684 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x14>
    f684:	2101      	movs	r1, #1
    f686:	9803      	ldr	r0, [sp, #12]
    f688:	f000 fd15 	bl	100b6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>
    f68c:	9002      	str	r0, [sp, #8]
    f68e:	9101      	str	r1, [sp, #4]
    f690:	e7ff      	b.n	f692 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x22>
    f692:	9802      	ldr	r0, [sp, #8]
    f694:	9901      	ldr	r1, [sp, #4]
    f696:	f000 fc17 	bl	fec8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>
    f69a:	9108      	str	r1, [sp, #32]
    f69c:	9007      	str	r0, [sp, #28]
    f69e:	e7ff      	b.n	f6a0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x30>
    f6a0:	9807      	ldr	r0, [sp, #28]
    f6a2:	2800      	cmp	r0, #0
    f6a4:	d001      	beq.n	f6aa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x3a>
    f6a6:	e7ff      	b.n	f6a8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x38>
    f6a8:	e00c      	b.n	f6c4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x54>
    f6aa:	9808      	ldr	r0, [sp, #32]
    f6ac:	900c      	str	r0, [sp, #48]	; 0x30
    f6ae:	900d      	str	r0, [sp, #52]	; 0x34
    f6b0:	9905      	ldr	r1, [sp, #20]
    f6b2:	9000      	str	r0, [sp, #0]
    f6b4:	4608      	mov	r0, r1
    f6b6:	9904      	ldr	r1, [sp, #16]
    f6b8:	9a00      	ldr	r2, [sp, #0]
    f6ba:	f7ff ffc7 	bl	f64c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3get17h59f52388f93e366aE>
    f6be:	9006      	str	r0, [sp, #24]
    f6c0:	e00b      	b.n	f6da <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x6a>
    f6c2:	defe      	udf	#254	; 0xfe
    f6c4:	f003 fccd 	bl	13062 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>
    f6c8:	e002      	b.n	f6d0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x60>
    f6ca:	9806      	ldr	r0, [sp, #24]
    f6cc:	b00e      	add	sp, #56	; 0x38
    f6ce:	bd80      	pop	{r7, pc}
    f6d0:	f000 fbf4 	bl	febc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>
    f6d4:	9006      	str	r0, [sp, #24]
    f6d6:	e7ff      	b.n	f6d8 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x68>
    f6d8:	e7f7      	b.n	f6ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>
    f6da:	e7f6      	b.n	f6ca <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4last17h21bc784838ba26f0E+0x5a>

0000f6dc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hbae1226075b546d8E>:
    f6dc:	b082      	sub	sp, #8
    f6de:	9000      	str	r0, [sp, #0]
    f6e0:	9101      	str	r1, [sp, #4]
    f6e2:	b002      	add	sp, #8
    f6e4:	4770      	bx	lr

0000f6e6 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E>:
    f6e6:	b580      	push	{r7, lr}
    f6e8:	b088      	sub	sp, #32
    f6ea:	9005      	str	r0, [sp, #20]
    f6ec:	9106      	str	r1, [sp, #24]
    f6ee:	9207      	str	r2, [sp, #28]
    f6f0:	9004      	str	r0, [sp, #16]
    f6f2:	4610      	mov	r0, r2
    f6f4:	9a04      	ldr	r2, [sp, #16]
    f6f6:	9103      	str	r1, [sp, #12]
    f6f8:	4611      	mov	r1, r2
    f6fa:	9a03      	ldr	r2, [sp, #12]
    f6fc:	f7ff fdfb 	bl	f2f6 <_ZN101_$LT$core..ops..range..RangeTo$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb3509984ef6601b0E>
    f700:	9002      	str	r0, [sp, #8]
    f702:	9101      	str	r1, [sp, #4]
    f704:	e7ff      	b.n	f706 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17hc43ed5955c4ca9b1E+0x20>
    f706:	9802      	ldr	r0, [sp, #8]
    f708:	9901      	ldr	r1, [sp, #4]
    f70a:	b008      	add	sp, #32
    f70c:	bd80      	pop	{r7, pc}

0000f70e <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>:
    f70e:	b580      	push	{r7, lr}
    f710:	b084      	sub	sp, #16
    f712:	9002      	str	r0, [sp, #8]
    f714:	9103      	str	r1, [sp, #12]
    f716:	f003 fc61 	bl	12fdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>
    f71a:	9001      	str	r0, [sp, #4]
    f71c:	9100      	str	r1, [sp, #0]
    f71e:	e7ff      	b.n	f720 <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E+0x12>
    f720:	9801      	ldr	r0, [sp, #4]
    f722:	9900      	ldr	r1, [sp, #0]
    f724:	b004      	add	sp, #16
    f726:	bd80      	pop	{r7, pc}

0000f728 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E>:
    f728:	b580      	push	{r7, lr}
    f72a:	b08a      	sub	sp, #40	; 0x28
    f72c:	9007      	str	r0, [sp, #28]
    f72e:	9108      	str	r1, [sp, #32]
    f730:	9209      	str	r2, [sp, #36]	; 0x24
    f732:	9005      	str	r0, [sp, #20]
    f734:	4608      	mov	r0, r1
    f736:	9104      	str	r1, [sp, #16]
    f738:	4611      	mov	r1, r2
    f73a:	9203      	str	r2, [sp, #12]
    f73c:	f7ff f90c 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f740:	9002      	str	r0, [sp, #8]
    f742:	e7ff      	b.n	f744 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x1c>
    f744:	9805      	ldr	r0, [sp, #20]
    f746:	9902      	ldr	r1, [sp, #8]
    f748:	4288      	cmp	r0, r1
    f74a:	d303      	bcc.n	f754 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x2c>
    f74c:	e7ff      	b.n	f74e <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x26>
    f74e:	2000      	movs	r0, #0
    f750:	9006      	str	r0, [sp, #24]
    f752:	e009      	b.n	f768 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f754:	9805      	ldr	r0, [sp, #20]
    f756:	9904      	ldr	r1, [sp, #16]
    f758:	9a03      	ldr	r2, [sp, #12]
    f75a:	f7ff f929 	bl	e9b0 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$13get_unchecked17hf4f0bd7adc8e845eE>
    f75e:	9001      	str	r0, [sp, #4]
    f760:	e7ff      	b.n	f762 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x3a>
    f762:	9801      	ldr	r0, [sp, #4]
    f764:	9006      	str	r0, [sp, #24]
    f766:	e7ff      	b.n	f768 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$3get17hdc2718e41117c4b4E+0x40>
    f768:	9806      	ldr	r0, [sp, #24]
    f76a:	b00a      	add	sp, #40	; 0x28
    f76c:	bd80      	pop	{r7, pc}

0000f76e <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE>:
//! Display messages on Arm Semihosting Console (via OpenOCD)

///  Display message `msg` on the Arm Semihosting console (via OpenOCD).
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn print(msg: &str) {
    f76e:	b580      	push	{r7, lr}
    f770:	b08a      	sub	sp, #40	; 0x28
    f772:	9004      	str	r0, [sp, #16]
    f774:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    let buf = msg.as_ptr();
    f776:	9003      	str	r0, [sp, #12]
    f778:	9102      	str	r1, [sp, #8]
    f77a:	f000 f86e 	bl	f85a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f77e:	4601      	mov	r1, r0
    f780:	9006      	str	r0, [sp, #24]
    f782:	9101      	str	r1, [sp, #4]
    f784:	e7ff      	b.n	f786 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x18>
    let len = msg.len() as u32;
    f786:	9803      	ldr	r0, [sp, #12]
    f788:	9902      	ldr	r1, [sp, #8]
    f78a:	f000 f850 	bl	f82e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f78e:	9000      	str	r0, [sp, #0]
    f790:	e7ff      	b.n	f792 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x24>
    f792:	9800      	ldr	r0, [sp, #0]
    f794:	9007      	str	r0, [sp, #28]
    f796:	2100      	movs	r1, #0

    //  TODO: Dispatch the Mynewt C function `console_buffer`.
    //  TODO: Use a procedural macro to compute the hash of function name `console_buffer`.
    let hash = 0;  //  TODO
    f798:	9108      	str	r1, [sp, #32]
    //  TODO: Lookup the dispatch address of `console_buffer`.
    let _addr = get_dispatch_address(hash);
    f79a:	4608      	mov	r0, r1
    f79c:	f000 f809 	bl	f7b2 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>
    f7a0:	9009      	str	r0, [sp, #36]	; 0x24
    f7a2:	e7ff      	b.n	f7a4 <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x36>
    //  TODO: Call the `console_buffer` function using the dispatch address.
    unsafe { console_buffer(buf, len); }
    f7a4:	9801      	ldr	r0, [sp, #4]
    f7a6:	9900      	ldr	r1, [sp, #0]
    f7a8:	f009 f914 	bl	189d4 <console_buffer>
    f7ac:	e7ff      	b.n	f7ae <_ZN6mynewt3sys7console5print17hc13a6743274d87fcE+0x40>
}
    f7ae:	b00a      	add	sp, #40	; 0x28
    f7b0:	bd80      	pop	{r7, pc}

0000f7b2 <_ZN6mynewt3sys7console20get_dispatch_address17h2f39ccfcecc76843E>:

/// Return the Dispatch Address for the OS function whose function name hashed is `hash`
#[cfg(feature = "dispatch")]  //  With dispatch...
pub fn get_dispatch_address(_hash: u32) -> u32 {
    f7b2:	b081      	sub	sp, #4
    f7b4:	9000      	str	r0, [sp, #0]
    f7b6:	2000      	movs	r0, #0
    //  TODO: Lookup the Dispatch Table for the hash of function name
    0
}
    f7b8:	b001      	add	sp, #4
    f7ba:	4770      	bx	lr

0000f7bc <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE>:
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
}

///  Add the string to the output buffer.
pub fn buffer(msg: &str) {
    f7bc:	b580      	push	{r7, lr}
    f7be:	b086      	sub	sp, #24
    f7c0:	9004      	str	r0, [sp, #16]
    f7c2:	9105      	str	r1, [sp, #20]
    //  Call the Semihosting Console API, which is unsafe.
    unsafe { console_buffer(msg.as_ptr(), msg.len() as u32); }
    f7c4:	9003      	str	r0, [sp, #12]
    f7c6:	9102      	str	r1, [sp, #8]
    f7c8:	f000 f847 	bl	f85a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>
    f7cc:	9001      	str	r0, [sp, #4]
    f7ce:	e7ff      	b.n	f7d0 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x14>
    f7d0:	9803      	ldr	r0, [sp, #12]
    f7d2:	9902      	ldr	r1, [sp, #8]
    f7d4:	f000 f82b 	bl	f82e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>
    f7d8:	9000      	str	r0, [sp, #0]
    f7da:	e7ff      	b.n	f7dc <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x20>
    f7dc:	9801      	ldr	r0, [sp, #4]
    f7de:	9900      	ldr	r1, [sp, #0]
    f7e0:	f009 f8f8 	bl	189d4 <console_buffer>
    f7e4:	e7ff      	b.n	f7e6 <_ZN6mynewt3sys7console6buffer17h6e460748855d110aE+0x2a>
}
    f7e6:	b006      	add	sp, #24
    f7e8:	bd80      	pop	{r7, pc}

0000f7ea <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E>:
    unsafe { console_printhex(v); }
}

///  Write an int to the output buffer.
///  C API: `void console_printint(int i)`
pub fn printint(v: i32) {
    f7ea:	b580      	push	{r7, lr}
    f7ec:	b082      	sub	sp, #8
    f7ee:	9001      	str	r0, [sp, #4]
    unsafe { console_printint(v); }
    f7f0:	f009 f960 	bl	18ab4 <console_printint>
    f7f4:	e7ff      	b.n	f7f6 <_ZN6mynewt3sys7console8printint17hd701af3cf3ef8da8E+0xc>
}
    f7f6:	b002      	add	sp, #8
    f7f8:	bd80      	pop	{r7, pc}

0000f7fa <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E>:
pub fn dump(buffer: *const u8, len: u32) {
    unsafe { console_dump(buffer, len); }
}

///  Flush the output buffer to the console.
pub fn flush() {
    f7fa:	b580      	push	{r7, lr}
    unsafe { console_flush(); }
    f7fc:	f009 f8c2 	bl	18984 <console_flush>
    f800:	e7ff      	b.n	f802 <_ZN6mynewt3sys7console5flush17h78b2f38352f0d691E+0x8>
}
    f802:	bd80      	pop	{r7, pc}

0000f804 <_ZN4core3ptr24slice_from_raw_parts_mut17h2d7e63126b0990baE>:
    f804:	b086      	sub	sp, #24
    f806:	9004      	str	r0, [sp, #16]
    f808:	9105      	str	r1, [sp, #20]
    f80a:	9002      	str	r0, [sp, #8]
    f80c:	9103      	str	r1, [sp, #12]
    f80e:	9802      	ldr	r0, [sp, #8]
    f810:	9903      	ldr	r1, [sp, #12]
    f812:	9000      	str	r0, [sp, #0]
    f814:	9101      	str	r1, [sp, #4]
    f816:	9800      	ldr	r0, [sp, #0]
    f818:	9901      	ldr	r1, [sp, #4]
    f81a:	b006      	add	sp, #24
    f81c:	4770      	bx	lr

0000f81e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>:
    f81e:	b082      	sub	sp, #8
    f820:	460a      	mov	r2, r1
    f822:	9000      	str	r0, [sp, #0]
    f824:	f88d 1007 	strb.w	r1, [sp, #7]
    f828:	7001      	strb	r1, [r0, #0]
    f82a:	b002      	add	sp, #8
    f82c:	4770      	bx	lr

0000f82e <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E>:
    f82e:	b580      	push	{r7, lr}
    f830:	b08a      	sub	sp, #40	; 0x28
    f832:	9004      	str	r0, [sp, #16]
    f834:	9105      	str	r1, [sp, #20]
    f836:	9008      	str	r0, [sp, #32]
    f838:	9109      	str	r1, [sp, #36]	; 0x24
    f83a:	9006      	str	r0, [sp, #24]
    f83c:	9107      	str	r1, [sp, #28]
    f83e:	9806      	ldr	r0, [sp, #24]
    f840:	9907      	ldr	r1, [sp, #28]
    f842:	9003      	str	r0, [sp, #12]
    f844:	9102      	str	r1, [sp, #8]
    f846:	e7ff      	b.n	f848 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x1a>
    f848:	9803      	ldr	r0, [sp, #12]
    f84a:	9902      	ldr	r1, [sp, #8]
    f84c:	f7ff f884 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
    f850:	9001      	str	r0, [sp, #4]
    f852:	e7ff      	b.n	f854 <_ZN4core3str21_$LT$impl$u20$str$GT$3len17h338707afb6466689E+0x26>
    f854:	9801      	ldr	r0, [sp, #4]
    f856:	b00a      	add	sp, #40	; 0x28
    f858:	bd80      	pop	{r7, pc}

0000f85a <_ZN4core3str21_$LT$impl$u20$str$GT$6as_ptr17h07f812f40c9ea857E>:
    f85a:	b082      	sub	sp, #8
    f85c:	9000      	str	r0, [sp, #0]
    f85e:	9101      	str	r1, [sp, #4]
    f860:	b002      	add	sp, #8
    f862:	4770      	bx	lr

0000f864 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>:
};

/// Rust Embedded HAL interface for Mynewt SPI
impl SPI {
    /// Create a new SPI port
    pub fn new() -> Self {
    f864:	b082      	sub	sp, #8
    f866:	2000      	movs	r0, #0
        SPI {
    f868:	9000      	str	r0, [sp, #0]
    f86a:	9001      	str	r0, [sp, #4]
            spi_num: 0,
            cs_pin:  0,
        }
    }
    f86c:	9800      	ldr	r0, [sp, #0]
    f86e:	9901      	ldr	r1, [sp, #4]
    f870:	b002      	add	sp, #8
    f872:	4770      	bx	lr

0000f874 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>:

    /// Initiaise the SPI port
    pub fn init(&mut self, spi_num: i32, cs_pin: i32, spi_settings: *mut hal::hal_spi_settings) 
    f874:	b5b0      	push	{r4, r5, r7, lr}
    f876:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
    f87a:	9077      	str	r0, [sp, #476]	; 0x1dc
    f87c:	9178      	str	r1, [sp, #480]	; 0x1e0
    f87e:	9279      	str	r2, [sp, #484]	; 0x1e4
    f880:	937a      	str	r3, [sp, #488]	; 0x1e8
        -> MynewtResult<()> {
        let rc = unsafe { hal::hal_spi_config(spi_num, spi_settings) };
    f882:	9028      	str	r0, [sp, #160]	; 0xa0
    f884:	4608      	mov	r0, r1
    f886:	9127      	str	r1, [sp, #156]	; 0x9c
    f888:	4619      	mov	r1, r3
    f88a:	9226      	str	r2, [sp, #152]	; 0x98
    f88c:	f009 fe6a 	bl	19564 <hal_spi_config>
    f890:	9029      	str	r0, [sp, #164]	; 0xa4
    f892:	e7ff      	b.n	f894 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x20>
        assert_eq!(rc, 0, "spi config fail");
    f894:	f24f 107c 	movw	r0, #61820	; 0xf17c
    f898:	f2c0 0001 	movt	r0, #1
    f89c:	6800      	ldr	r0, [r0, #0]
    f89e:	a929      	add	r1, sp, #164	; 0xa4
    f8a0:	912a      	str	r1, [sp, #168]	; 0xa8
    f8a2:	902b      	str	r0, [sp, #172]	; 0xac
    f8a4:	982a      	ldr	r0, [sp, #168]	; 0xa8
    f8a6:	907b      	str	r0, [sp, #492]	; 0x1ec
    f8a8:	992b      	ldr	r1, [sp, #172]	; 0xac
    f8aa:	917c      	str	r1, [sp, #496]	; 0x1f0
    f8ac:	6802      	ldr	r2, [r0, #0]
    f8ae:	680b      	ldr	r3, [r1, #0]
    f8b0:	429a      	cmp	r2, r3
    f8b2:	9025      	str	r0, [sp, #148]	; 0x94
    f8b4:	9124      	str	r1, [sp, #144]	; 0x90
    f8b6:	d105      	bne.n	f8c4 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x50>
    f8b8:	e7ff      	b.n	f8ba <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x46>

        let rc = unsafe { hal::hal_spi_enable(spi_num) };
    f8ba:	9827      	ldr	r0, [sp, #156]	; 0x9c
    f8bc:	f009 fe6e 	bl	1959c <hal_spi_enable>
    f8c0:	9043      	str	r0, [sp, #268]	; 0x10c
    f8c2:	e072      	b.n	f9aa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x136>
        assert_eq!(rc, 0, "spi config fail");
    f8c4:	f24f 10d4 	movw	r0, #61908	; 0xf1d4
    f8c8:	f2c0 0001 	movt	r0, #1
    f8cc:	6801      	ldr	r1, [r0, #0]
    f8ce:	9825      	ldr	r0, [sp, #148]	; 0x94
    f8d0:	903b      	str	r0, [sp, #236]	; 0xec
    f8d2:	9a24      	ldr	r2, [sp, #144]	; 0x90
    f8d4:	923c      	str	r2, [sp, #240]	; 0xf0
    f8d6:	f24f 13f0 	movw	r3, #61936	; 0xf1f0
    f8da:	f2c0 0301 	movt	r3, #1
    f8de:	681b      	ldr	r3, [r3, #0]
    f8e0:	f24f 1cf4 	movw	ip, #61940	; 0xf1f4
    f8e4:	f2c0 0c01 	movt	ip, #1
    f8e8:	f8dc c000 	ldr.w	ip, [ip]
    f8ec:	46ee      	mov	lr, sp
    f8ee:	2400      	movs	r4, #0
    f8f0:	f8ce 4000 	str.w	r4, [lr]
    f8f4:	a83d      	add	r0, sp, #244	; 0xf4
    f8f6:	2201      	movs	r2, #1
    f8f8:	9123      	str	r1, [sp, #140]	; 0x8c
    f8fa:	4619      	mov	r1, r3
    f8fc:	4663      	mov	r3, ip
    f8fe:	f7ff fc88 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f902:	e7ff      	b.n	f904 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x90>
    f904:	a83b      	add	r0, sp, #236	; 0xec
    f906:	9038      	str	r0, [sp, #224]	; 0xe0
    f908:	a83c      	add	r0, sp, #240	; 0xf0
    f90a:	9039      	str	r0, [sp, #228]	; 0xe4
    f90c:	a83d      	add	r0, sp, #244	; 0xf4
    f90e:	903a      	str	r0, [sp, #232]	; 0xe8
    f910:	9838      	ldr	r0, [sp, #224]	; 0xe0
    f912:	907d      	str	r0, [sp, #500]	; 0x1f4
    f914:	9939      	ldr	r1, [sp, #228]	; 0xe4
    f916:	917e      	str	r1, [sp, #504]	; 0x1f8
    f918:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
    f91a:	927f      	str	r2, [sp, #508]	; 0x1fc
    f91c:	f64f 739f 	movw	r3, #65439	; 0xff9f
    f920:	f2c0 0300 	movt	r3, #0
    f924:	9122      	str	r1, [sp, #136]	; 0x88
    f926:	4619      	mov	r1, r3
    f928:	9221      	str	r2, [sp, #132]	; 0x84
    f92a:	f000 fb70 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f92e:	9020      	str	r0, [sp, #128]	; 0x80
    f930:	911f      	str	r1, [sp, #124]	; 0x7c
    f932:	e7ff      	b.n	f934 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xc0>
    f934:	f64f 719f 	movw	r1, #65439	; 0xff9f
    f938:	f2c0 0100 	movt	r1, #0
    f93c:	9822      	ldr	r0, [sp, #136]	; 0x88
    f93e:	f000 fb66 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    f942:	901e      	str	r0, [sp, #120]	; 0x78
    f944:	911d      	str	r1, [sp, #116]	; 0x74
    f946:	e7ff      	b.n	f948 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xd4>
    f948:	f247 0173 	movw	r1, #28787	; 0x7073
    f94c:	f2c0 0101 	movt	r1, #1
    f950:	9821      	ldr	r0, [sp, #132]	; 0x84
    f952:	f000 fb9b 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    f956:	901c      	str	r0, [sp, #112]	; 0x70
    f958:	911b      	str	r1, [sp, #108]	; 0x6c
    f95a:	e7ff      	b.n	f95c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0xe8>
    f95c:	9820      	ldr	r0, [sp, #128]	; 0x80
    f95e:	9032      	str	r0, [sp, #200]	; 0xc8
    f960:	991f      	ldr	r1, [sp, #124]	; 0x7c
    f962:	9133      	str	r1, [sp, #204]	; 0xcc
    f964:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    f966:	9234      	str	r2, [sp, #208]	; 0xd0
    f968:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    f96a:	9335      	str	r3, [sp, #212]	; 0xd4
    f96c:	f8dd c070 	ldr.w	ip, [sp, #112]	; 0x70
    f970:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
    f974:	f8dd e06c 	ldr.w	lr, [sp, #108]	; 0x6c
    f978:	f8cd e0dc 	str.w	lr, [sp, #220]	; 0xdc
    f97c:	466c      	mov	r4, sp
    f97e:	2503      	movs	r5, #3
    f980:	6025      	str	r5, [r4, #0]
    f982:	a82c      	add	r0, sp, #176	; 0xb0
    f984:	ab32      	add	r3, sp, #200	; 0xc8
    f986:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f988:	462a      	mov	r2, r5
    f98a:	f7ff fc42 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    f98e:	e7ff      	b.n	f990 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x11c>
    f990:	f24f 2010 	movw	r0, #61968	; 0xf210
    f994:	f2c0 0001 	movt	r0, #1
    f998:	f007 f87d 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    f99c:	901a      	str	r0, [sp, #104]	; 0x68
    f99e:	e7ff      	b.n	f9a0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x12c>
    f9a0:	a82c      	add	r0, sp, #176	; 0xb0
    f9a2:	991a      	ldr	r1, [sp, #104]	; 0x68
    f9a4:	f007 f8b4 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    f9a8:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi enable fail");
    f9aa:	f24f 107c 	movw	r0, #61820	; 0xf17c
    f9ae:	f2c0 0001 	movt	r0, #1
    f9b2:	6800      	ldr	r0, [r0, #0]
    f9b4:	a943      	add	r1, sp, #268	; 0x10c
    f9b6:	9144      	str	r1, [sp, #272]	; 0x110
    f9b8:	9045      	str	r0, [sp, #276]	; 0x114
    f9ba:	9844      	ldr	r0, [sp, #272]	; 0x110
    f9bc:	9080      	str	r0, [sp, #512]	; 0x200
    f9be:	9945      	ldr	r1, [sp, #276]	; 0x114
    f9c0:	9181      	str	r1, [sp, #516]	; 0x204
    f9c2:	6802      	ldr	r2, [r0, #0]
    f9c4:	680b      	ldr	r3, [r1, #0]
    f9c6:	429a      	cmp	r2, r3
    f9c8:	9019      	str	r0, [sp, #100]	; 0x64
    f9ca:	9118      	str	r1, [sp, #96]	; 0x60
    f9cc:	d106      	bne.n	f9dc <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x168>
    f9ce:	e7ff      	b.n	f9d0 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x15c>
    f9d0:	2101      	movs	r1, #1

        let rc = unsafe { hal::hal_gpio_init_out(cs_pin, 1) };
    f9d2:	9826      	ldr	r0, [sp, #152]	; 0x98
    f9d4:	f009 f9b8 	bl	18d48 <hal_gpio_init_out>
    f9d8:	905d      	str	r0, [sp, #372]	; 0x174
    f9da:	e072      	b.n	fac2 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x24e>
        assert_eq!(rc, 0, "spi enable fail");
    f9dc:	f24f 10d4 	movw	r0, #61908	; 0xf1d4
    f9e0:	f2c0 0001 	movt	r0, #1
    f9e4:	6801      	ldr	r1, [r0, #0]
    f9e6:	9819      	ldr	r0, [sp, #100]	; 0x64
    f9e8:	9055      	str	r0, [sp, #340]	; 0x154
    f9ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
    f9ec:	9256      	str	r2, [sp, #344]	; 0x158
    f9ee:	f24f 2338 	movw	r3, #62008	; 0xf238
    f9f2:	f2c0 0301 	movt	r3, #1
    f9f6:	681b      	ldr	r3, [r3, #0]
    f9f8:	f24f 1cf4 	movw	ip, #61940	; 0xf1f4
    f9fc:	f2c0 0c01 	movt	ip, #1
    fa00:	f8dc c000 	ldr.w	ip, [ip]
    fa04:	46ee      	mov	lr, sp
    fa06:	2400      	movs	r4, #0
    fa08:	f8ce 4000 	str.w	r4, [lr]
    fa0c:	a857      	add	r0, sp, #348	; 0x15c
    fa0e:	2201      	movs	r2, #1
    fa10:	9117      	str	r1, [sp, #92]	; 0x5c
    fa12:	4619      	mov	r1, r3
    fa14:	4663      	mov	r3, ip
    fa16:	f7ff fbfc 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fa1a:	e7ff      	b.n	fa1c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1a8>
    fa1c:	a855      	add	r0, sp, #340	; 0x154
    fa1e:	9052      	str	r0, [sp, #328]	; 0x148
    fa20:	a856      	add	r0, sp, #344	; 0x158
    fa22:	9053      	str	r0, [sp, #332]	; 0x14c
    fa24:	a857      	add	r0, sp, #348	; 0x15c
    fa26:	9054      	str	r0, [sp, #336]	; 0x150
    fa28:	9852      	ldr	r0, [sp, #328]	; 0x148
    fa2a:	9082      	str	r0, [sp, #520]	; 0x208
    fa2c:	9953      	ldr	r1, [sp, #332]	; 0x14c
    fa2e:	9183      	str	r1, [sp, #524]	; 0x20c
    fa30:	9a54      	ldr	r2, [sp, #336]	; 0x150
    fa32:	9284      	str	r2, [sp, #528]	; 0x210
    fa34:	f64f 739f 	movw	r3, #65439	; 0xff9f
    fa38:	f2c0 0300 	movt	r3, #0
    fa3c:	9116      	str	r1, [sp, #88]	; 0x58
    fa3e:	4619      	mov	r1, r3
    fa40:	9215      	str	r2, [sp, #84]	; 0x54
    fa42:	f000 fae4 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa46:	9014      	str	r0, [sp, #80]	; 0x50
    fa48:	9113      	str	r1, [sp, #76]	; 0x4c
    fa4a:	e7ff      	b.n	fa4c <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1d8>
    fa4c:	f64f 719f 	movw	r1, #65439	; 0xff9f
    fa50:	f2c0 0100 	movt	r1, #0
    fa54:	9816      	ldr	r0, [sp, #88]	; 0x58
    fa56:	f000 fada 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fa5a:	9012      	str	r0, [sp, #72]	; 0x48
    fa5c:	9111      	str	r1, [sp, #68]	; 0x44
    fa5e:	e7ff      	b.n	fa60 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x1ec>
    fa60:	f247 0173 	movw	r1, #28787	; 0x7073
    fa64:	f2c0 0101 	movt	r1, #1
    fa68:	9815      	ldr	r0, [sp, #84]	; 0x54
    fa6a:	f000 fb0f 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fa6e:	9010      	str	r0, [sp, #64]	; 0x40
    fa70:	910f      	str	r1, [sp, #60]	; 0x3c
    fa72:	e7ff      	b.n	fa74 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x200>
    fa74:	9814      	ldr	r0, [sp, #80]	; 0x50
    fa76:	904c      	str	r0, [sp, #304]	; 0x130
    fa78:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fa7a:	914d      	str	r1, [sp, #308]	; 0x134
    fa7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
    fa7e:	924e      	str	r2, [sp, #312]	; 0x138
    fa80:	9b11      	ldr	r3, [sp, #68]	; 0x44
    fa82:	934f      	str	r3, [sp, #316]	; 0x13c
    fa84:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
    fa88:	f8cd c140 	str.w	ip, [sp, #320]	; 0x140
    fa8c:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
    fa90:	f8cd e144 	str.w	lr, [sp, #324]	; 0x144
    fa94:	466c      	mov	r4, sp
    fa96:	2503      	movs	r5, #3
    fa98:	6025      	str	r5, [r4, #0]
    fa9a:	a846      	add	r0, sp, #280	; 0x118
    fa9c:	ab4c      	add	r3, sp, #304	; 0x130
    fa9e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    faa0:	462a      	mov	r2, r5
    faa2:	f7ff fbb6 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    faa6:	e7ff      	b.n	faa8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x234>
    faa8:	f24f 203c 	movw	r0, #62012	; 0xf23c
    faac:	f2c0 0001 	movt	r0, #1
    fab0:	f006 fff1 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fab4:	900e      	str	r0, [sp, #56]	; 0x38
    fab6:	e7ff      	b.n	fab8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x244>
    fab8:	a846      	add	r0, sp, #280	; 0x118
    faba:	990e      	ldr	r1, [sp, #56]	; 0x38
    fabc:	f007 f828 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fac0:	defe      	udf	#254	; 0xfe
        assert_eq!(rc, 0, "spi init fail");
    fac2:	f24f 107c 	movw	r0, #61820	; 0xf17c
    fac6:	f2c0 0001 	movt	r0, #1
    faca:	6800      	ldr	r0, [r0, #0]
    facc:	a95d      	add	r1, sp, #372	; 0x174
    face:	915e      	str	r1, [sp, #376]	; 0x178
    fad0:	905f      	str	r0, [sp, #380]	; 0x17c
    fad2:	985e      	ldr	r0, [sp, #376]	; 0x178
    fad4:	9085      	str	r0, [sp, #532]	; 0x214
    fad6:	995f      	ldr	r1, [sp, #380]	; 0x17c
    fad8:	9186      	str	r1, [sp, #536]	; 0x218
    fada:	6802      	ldr	r2, [r0, #0]
    fadc:	680b      	ldr	r3, [r1, #0]
    fade:	429a      	cmp	r2, r3
    fae0:	900d      	str	r0, [sp, #52]	; 0x34
    fae2:	910c      	str	r1, [sp, #48]	; 0x30
    fae4:	d109      	bne.n	fafa <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x286>
    fae6:	e7ff      	b.n	fae8 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x274>
        self.spi_num = spi_num;
    fae8:	9827      	ldr	r0, [sp, #156]	; 0x9c
    faea:	9928      	ldr	r1, [sp, #160]	; 0xa0
    faec:	6008      	str	r0, [r1, #0]
        self.cs_pin  = cs_pin;
    faee:	9a26      	ldr	r2, [sp, #152]	; 0x98
    faf0:	604a      	str	r2, [r1, #4]
    faf2:	2001      	movs	r0, #1
        Ok(())
    }
    faf4:	f50d 7d0a 	add.w	sp, sp, #552	; 0x228
    faf8:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "spi init fail");
    fafa:	f24f 10d4 	movw	r0, #61908	; 0xf1d4
    fafe:	f2c0 0001 	movt	r0, #1
    fb02:	6801      	ldr	r1, [r0, #0]
    fb04:	980d      	ldr	r0, [sp, #52]	; 0x34
    fb06:	906f      	str	r0, [sp, #444]	; 0x1bc
    fb08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fb0a:	9270      	str	r2, [sp, #448]	; 0x1c0
    fb0c:	f24f 2364 	movw	r3, #62052	; 0xf264
    fb10:	f2c0 0301 	movt	r3, #1
    fb14:	681b      	ldr	r3, [r3, #0]
    fb16:	f24f 1cf4 	movw	ip, #61940	; 0xf1f4
    fb1a:	f2c0 0c01 	movt	ip, #1
    fb1e:	f8dc c000 	ldr.w	ip, [ip]
    fb22:	46ee      	mov	lr, sp
    fb24:	2400      	movs	r4, #0
    fb26:	f8ce 4000 	str.w	r4, [lr]
    fb2a:	a871      	add	r0, sp, #452	; 0x1c4
    fb2c:	2201      	movs	r2, #1
    fb2e:	910b      	str	r1, [sp, #44]	; 0x2c
    fb30:	4619      	mov	r1, r3
    fb32:	4663      	mov	r3, ip
    fb34:	f7ff fb6d 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fb38:	e7ff      	b.n	fb3a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2c6>
    fb3a:	a86f      	add	r0, sp, #444	; 0x1bc
    fb3c:	906c      	str	r0, [sp, #432]	; 0x1b0
    fb3e:	a870      	add	r0, sp, #448	; 0x1c0
    fb40:	906d      	str	r0, [sp, #436]	; 0x1b4
    fb42:	a871      	add	r0, sp, #452	; 0x1c4
    fb44:	906e      	str	r0, [sp, #440]	; 0x1b8
    fb46:	986c      	ldr	r0, [sp, #432]	; 0x1b0
    fb48:	9087      	str	r0, [sp, #540]	; 0x21c
    fb4a:	996d      	ldr	r1, [sp, #436]	; 0x1b4
    fb4c:	9188      	str	r1, [sp, #544]	; 0x220
    fb4e:	9a6e      	ldr	r2, [sp, #440]	; 0x1b8
    fb50:	9289      	str	r2, [sp, #548]	; 0x224
    fb52:	f64f 739f 	movw	r3, #65439	; 0xff9f
    fb56:	f2c0 0300 	movt	r3, #0
    fb5a:	910a      	str	r1, [sp, #40]	; 0x28
    fb5c:	4619      	mov	r1, r3
    fb5e:	9209      	str	r2, [sp, #36]	; 0x24
    fb60:	f000 fa55 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb64:	9008      	str	r0, [sp, #32]
    fb66:	9107      	str	r1, [sp, #28]
    fb68:	e7ff      	b.n	fb6a <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x2f6>
    fb6a:	f64f 719f 	movw	r1, #65439	; 0xff9f
    fb6e:	f2c0 0100 	movt	r1, #0
    fb72:	980a      	ldr	r0, [sp, #40]	; 0x28
    fb74:	f000 fa4b 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fb78:	9006      	str	r0, [sp, #24]
    fb7a:	9105      	str	r1, [sp, #20]
    fb7c:	e7ff      	b.n	fb7e <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x30a>
    fb7e:	f247 0173 	movw	r1, #28787	; 0x7073
    fb82:	f2c0 0101 	movt	r1, #1
    fb86:	9809      	ldr	r0, [sp, #36]	; 0x24
    fb88:	f000 fa80 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fb8c:	9004      	str	r0, [sp, #16]
    fb8e:	9103      	str	r1, [sp, #12]
    fb90:	e7ff      	b.n	fb92 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x31e>
    fb92:	9808      	ldr	r0, [sp, #32]
    fb94:	9066      	str	r0, [sp, #408]	; 0x198
    fb96:	9907      	ldr	r1, [sp, #28]
    fb98:	9167      	str	r1, [sp, #412]	; 0x19c
    fb9a:	9a06      	ldr	r2, [sp, #24]
    fb9c:	9268      	str	r2, [sp, #416]	; 0x1a0
    fb9e:	9b05      	ldr	r3, [sp, #20]
    fba0:	9369      	str	r3, [sp, #420]	; 0x1a4
    fba2:	f8dd c010 	ldr.w	ip, [sp, #16]
    fba6:	f8cd c1a8 	str.w	ip, [sp, #424]	; 0x1a8
    fbaa:	f8dd e00c 	ldr.w	lr, [sp, #12]
    fbae:	f8cd e1ac 	str.w	lr, [sp, #428]	; 0x1ac
    fbb2:	466c      	mov	r4, sp
    fbb4:	2503      	movs	r5, #3
    fbb6:	6025      	str	r5, [r4, #0]
    fbb8:	a860      	add	r0, sp, #384	; 0x180
    fbba:	ab66      	add	r3, sp, #408	; 0x198
    fbbc:	990b      	ldr	r1, [sp, #44]	; 0x2c
    fbbe:	462a      	mov	r2, r5
    fbc0:	f7ff fb27 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fbc4:	e7ff      	b.n	fbc6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x352>
    fbc6:	f24f 2068 	movw	r0, #62056	; 0xf268
    fbca:	f2c0 0001 	movt	r0, #1
    fbce:	f006 ff62 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fbd2:	9002      	str	r0, [sp, #8]
    fbd4:	e7ff      	b.n	fbd6 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E+0x362>
    fbd6:	a860      	add	r0, sp, #384	; 0x180
    fbd8:	9902      	ldr	r1, [sp, #8]
    fbda:	f006 ff99 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fbde:	defe      	udf	#254	; 0xfe

0000fbe0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl GPIO {
    /// Create a new output GPIO pin
    pub fn new() -> Self {
    fbe0:	2000      	movs	r0, #0
        GPIO {
            pin: 0,
        }
    }
    fbe2:	4770      	bx	lr

0000fbe4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>:

    /// Initialise the output GPIO pin
    pub fn init(&mut self, pin: i32) -> MynewtResult<()> {
    fbe4:	b5b0      	push	{r4, r5, r7, lr}
    fbe6:	b0b0      	sub	sp, #192	; 0xc0
    fbe8:	9029      	str	r0, [sp, #164]	; 0xa4
    fbea:	912a      	str	r1, [sp, #168]	; 0xa8
    fbec:	2200      	movs	r2, #0
        //  TODO: let dc = pins.d0.into_push_pull_output(&mut pins.port);
        //  TODO: let rst = pins.d1.into_push_pull_output(&mut pins.port);
        let rc = unsafe { hal::hal_gpio_init_out(pin, 0) };
    fbee:	900e      	str	r0, [sp, #56]	; 0x38
    fbf0:	4608      	mov	r0, r1
    fbf2:	910d      	str	r1, [sp, #52]	; 0x34
    fbf4:	4611      	mov	r1, r2
    fbf6:	f009 f8a7 	bl	18d48 <hal_gpio_init_out>
    fbfa:	900f      	str	r0, [sp, #60]	; 0x3c
    fbfc:	e7ff      	b.n	fbfe <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x1a>
        assert_eq!(rc, 0, "gpio fail");
    fbfe:	f24f 107c 	movw	r0, #61820	; 0xf17c
    fc02:	f2c0 0001 	movt	r0, #1
    fc06:	6800      	ldr	r0, [r0, #0]
    fc08:	a90f      	add	r1, sp, #60	; 0x3c
    fc0a:	9110      	str	r1, [sp, #64]	; 0x40
    fc0c:	9011      	str	r0, [sp, #68]	; 0x44
    fc0e:	9810      	ldr	r0, [sp, #64]	; 0x40
    fc10:	902b      	str	r0, [sp, #172]	; 0xac
    fc12:	9911      	ldr	r1, [sp, #68]	; 0x44
    fc14:	912c      	str	r1, [sp, #176]	; 0xb0
    fc16:	6802      	ldr	r2, [r0, #0]
    fc18:	680b      	ldr	r3, [r1, #0]
    fc1a:	429a      	cmp	r2, r3
    fc1c:	900c      	str	r0, [sp, #48]	; 0x30
    fc1e:	910b      	str	r1, [sp, #44]	; 0x2c
    fc20:	d106      	bne.n	fc30 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x4c>
    fc22:	e7ff      	b.n	fc24 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x40>
        self.pin = pin;
    fc24:	980d      	ldr	r0, [sp, #52]	; 0x34
    fc26:	990e      	ldr	r1, [sp, #56]	; 0x38
    fc28:	6008      	str	r0, [r1, #0]
    fc2a:	2001      	movs	r0, #1
        Ok(())
    }
    fc2c:	b030      	add	sp, #192	; 0xc0
    fc2e:	bdb0      	pop	{r4, r5, r7, pc}
        assert_eq!(rc, 0, "gpio fail");
    fc30:	f24f 10d4 	movw	r0, #61908	; 0xf1d4
    fc34:	f2c0 0001 	movt	r0, #1
    fc38:	6801      	ldr	r1, [r0, #0]
    fc3a:	980c      	ldr	r0, [sp, #48]	; 0x30
    fc3c:	9021      	str	r0, [sp, #132]	; 0x84
    fc3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    fc40:	9222      	str	r2, [sp, #136]	; 0x88
    fc42:	f24f 238c 	movw	r3, #62092	; 0xf28c
    fc46:	f2c0 0301 	movt	r3, #1
    fc4a:	681b      	ldr	r3, [r3, #0]
    fc4c:	f24f 1cf4 	movw	ip, #61940	; 0xf1f4
    fc50:	f2c0 0c01 	movt	ip, #1
    fc54:	f8dc c000 	ldr.w	ip, [ip]
    fc58:	46ee      	mov	lr, sp
    fc5a:	2400      	movs	r4, #0
    fc5c:	f8ce 4000 	str.w	r4, [lr]
    fc60:	a823      	add	r0, sp, #140	; 0x8c
    fc62:	2201      	movs	r2, #1
    fc64:	910a      	str	r1, [sp, #40]	; 0x28
    fc66:	4619      	mov	r1, r3
    fc68:	4663      	mov	r3, ip
    fc6a:	f7ff fad2 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fc6e:	e7ff      	b.n	fc70 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x8c>
    fc70:	a821      	add	r0, sp, #132	; 0x84
    fc72:	901e      	str	r0, [sp, #120]	; 0x78
    fc74:	a822      	add	r0, sp, #136	; 0x88
    fc76:	901f      	str	r0, [sp, #124]	; 0x7c
    fc78:	a823      	add	r0, sp, #140	; 0x8c
    fc7a:	9020      	str	r0, [sp, #128]	; 0x80
    fc7c:	981e      	ldr	r0, [sp, #120]	; 0x78
    fc7e:	902d      	str	r0, [sp, #180]	; 0xb4
    fc80:	991f      	ldr	r1, [sp, #124]	; 0x7c
    fc82:	912e      	str	r1, [sp, #184]	; 0xb8
    fc84:	9a20      	ldr	r2, [sp, #128]	; 0x80
    fc86:	922f      	str	r2, [sp, #188]	; 0xbc
    fc88:	f64f 739f 	movw	r3, #65439	; 0xff9f
    fc8c:	f2c0 0300 	movt	r3, #0
    fc90:	9109      	str	r1, [sp, #36]	; 0x24
    fc92:	4619      	mov	r1, r3
    fc94:	9208      	str	r2, [sp, #32]
    fc96:	f000 f9ba 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fc9a:	9007      	str	r0, [sp, #28]
    fc9c:	9106      	str	r1, [sp, #24]
    fc9e:	e7ff      	b.n	fca0 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xbc>
    fca0:	f64f 719f 	movw	r1, #65439	; 0xff9f
    fca4:	f2c0 0100 	movt	r1, #0
    fca8:	9809      	ldr	r0, [sp, #36]	; 0x24
    fcaa:	f000 f9b0 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
    fcae:	9005      	str	r0, [sp, #20]
    fcb0:	9104      	str	r1, [sp, #16]
    fcb2:	e7ff      	b.n	fcb4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xd0>
    fcb4:	f247 0173 	movw	r1, #28787	; 0x7073
    fcb8:	f2c0 0101 	movt	r1, #1
    fcbc:	9808      	ldr	r0, [sp, #32]
    fcbe:	f000 f9e5 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
    fcc2:	9003      	str	r0, [sp, #12]
    fcc4:	9102      	str	r1, [sp, #8]
    fcc6:	e7ff      	b.n	fcc8 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0xe4>
    fcc8:	9807      	ldr	r0, [sp, #28]
    fcca:	9018      	str	r0, [sp, #96]	; 0x60
    fccc:	9906      	ldr	r1, [sp, #24]
    fcce:	9119      	str	r1, [sp, #100]	; 0x64
    fcd0:	9a05      	ldr	r2, [sp, #20]
    fcd2:	921a      	str	r2, [sp, #104]	; 0x68
    fcd4:	9b04      	ldr	r3, [sp, #16]
    fcd6:	931b      	str	r3, [sp, #108]	; 0x6c
    fcd8:	f8dd c00c 	ldr.w	ip, [sp, #12]
    fcdc:	f8cd c070 	str.w	ip, [sp, #112]	; 0x70
    fce0:	f8dd e008 	ldr.w	lr, [sp, #8]
    fce4:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
    fce8:	466c      	mov	r4, sp
    fcea:	2503      	movs	r5, #3
    fcec:	6025      	str	r5, [r4, #0]
    fcee:	a812      	add	r0, sp, #72	; 0x48
    fcf0:	ab18      	add	r3, sp, #96	; 0x60
    fcf2:	990a      	ldr	r1, [sp, #40]	; 0x28
    fcf4:	462a      	mov	r2, r5
    fcf6:	f7ff fa8c 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
    fcfa:	e7ff      	b.n	fcfc <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x118>
    fcfc:	f24f 2090 	movw	r0, #62096	; 0xf290
    fd00:	f2c0 0001 	movt	r0, #1
    fd04:	f006 fec7 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
    fd08:	9001      	str	r0, [sp, #4]
    fd0a:	e7ff      	b.n	fd0c <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E+0x128>
    fd0c:	a812      	add	r0, sp, #72	; 0x48
    fd0e:	9901      	ldr	r1, [sp, #4]
    fd10:	f006 fefe 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
    fd14:	defe      	udf	#254	; 0xfe

0000fd16 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>:
}

/// Rust Embedded HAL interface for Mynewt GPIO
impl embedded_hal::digital::v2::OutputPin for GPIO {
    /// Set the GPIO pin to low
    fn set_low(&mut self) -> Result<(), Self::Error> {
    fd16:	b580      	push	{r7, lr}
    fd18:	b082      	sub	sp, #8
    fd1a:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 0) };
    fd1c:	6800      	ldr	r0, [r0, #0]
    fd1e:	2100      	movs	r1, #0
    fd20:	f009 f82e 	bl	18d80 <hal_gpio_write>
    fd24:	e7ff      	b.n	fd26 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E+0x10>
    fd26:	2001      	movs	r0, #1
        Ok(())
    }
    fd28:	b002      	add	sp, #8
    fd2a:	bd80      	pop	{r7, pc}

0000fd2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>:

    /// Set the GPIO pin to high
    fn set_high(&mut self) -> Result<(), Self::Error> {
    fd2c:	b580      	push	{r7, lr}
    fd2e:	b082      	sub	sp, #8
    fd30:	9001      	str	r0, [sp, #4]
        unsafe { hal::hal_gpio_write(self.pin, 1) };
    fd32:	6800      	ldr	r0, [r0, #0]
    fd34:	2101      	movs	r1, #1
    fd36:	f009 f823 	bl	18d80 <hal_gpio_write>
    fd3a:	e7ff      	b.n	fd3c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE+0x10>
    fd3c:	2001      	movs	r0, #1
        Ok(())
    }
    fd3e:	b002      	add	sp, #8
    fd40:	bd80      	pop	{r7, pc}

0000fd42 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>:
impl Delay {
    /// Create a new delay
    pub fn new() -> Self {
        Delay {
        }
    }
    fd42:	4770      	bx	lr

0000fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>:
}

/// Rust Embedded HAL interface for Mynewt Delay
impl embedded_hal::blocking::delay::DelayMs<u8> for Delay {
    /// Sleep for the specified number of milliseconds
    fn delay_ms(&mut self, ms: u8) {
    fd44:	b580      	push	{r7, lr}
    fd46:	b086      	sub	sp, #24
    fd48:	460a      	mov	r2, r1
    fd4a:	9003      	str	r0, [sp, #12]
    fd4c:	f88d 1013 	strb.w	r1, [sp, #19]
        //  TODO: Get this constant from Mynewt
        const OS_TICKS_PER_SEC: u32 = 1000;
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fd50:	b2c8      	uxtb	r0, r1
    fd52:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fd56:	fba0 0101 	umull	r0, r1, r0, r1
    fd5a:	2900      	cmp	r1, #0
    fd5c:	9002      	str	r0, [sp, #8]
    fd5e:	d110      	bne.n	fd82 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3e>
    fd60:	e7ff      	b.n	fd62 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x1e>
    fd62:	f644 50d3 	movw	r0, #19923	; 0x4dd3
    fd66:	f2c1 0062 	movt	r0, #4194	; 0x1062
    fd6a:	9902      	ldr	r1, [sp, #8]
    fd6c:	fba1 0200 	umull	r0, r2, r1, r0
    fd70:	0992      	lsrs	r2, r2, #6
    fd72:	9205      	str	r2, [sp, #20]
        unsafe { os::os_time_delay(delay_ticks) };
    fd74:	9001      	str	r0, [sp, #4]
    fd76:	4610      	mov	r0, r2
    fd78:	f00b f820 	bl	1adbc <os_time_delay>
    fd7c:	e7ff      	b.n	fd7e <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE+0x3a>
    }
    fd7e:	b006      	add	sp, #24
    fd80:	bd80      	pop	{r7, pc}
        let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
    fd82:	f24f 20b0 	movw	r0, #62128	; 0xf2b0
    fd86:	f2c0 0001 	movt	r0, #1
    fd8a:	f24f 22a0 	movw	r2, #62112	; 0xf2a0
    fd8e:	f2c0 0201 	movt	r2, #1
    fd92:	2121      	movs	r1, #33	; 0x21
    fd94:	f006 fe86 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
    fd98:	defe      	udf	#254	; 0xfe

0000fd9a <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E>:
    fd9a:	b580      	push	{r7, lr}
    fd9c:	b084      	sub	sp, #16
    fd9e:	9002      	str	r0, [sp, #8]
    fda0:	9103      	str	r1, [sp, #12]
    fda2:	6800      	ldr	r0, [r0, #0]
    fda4:	f000 f845 	bl	fe32 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>
    fda8:	9001      	str	r0, [sp, #4]
    fdaa:	e7ff      	b.n	fdac <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h03fca5c712ec9ae1E+0x12>
    fdac:	9801      	ldr	r0, [sp, #4]
    fdae:	f000 0001 	and.w	r0, r0, #1
    fdb2:	b004      	add	sp, #16
    fdb4:	bd80      	pop	{r7, pc}

0000fdb6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>:
    fdb6:	b087      	sub	sp, #28
    fdb8:	9000      	str	r0, [sp, #0]
    fdba:	9101      	str	r1, [sp, #4]
    fdbc:	2000      	movs	r0, #0
    fdbe:	f88d 0013 	strb.w	r0, [sp, #19]
    fdc2:	f88d 0012 	strb.w	r0, [sp, #18]
    fdc6:	2001      	movs	r0, #1
    fdc8:	f88d 0013 	strb.w	r0, [sp, #19]
    fdcc:	f88d 0012 	strb.w	r0, [sp, #18]
    fdd0:	9800      	ldr	r0, [sp, #0]
    fdd2:	2800      	cmp	r0, #0
    fdd4:	d001      	beq.n	fdda <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x24>
    fdd6:	e7ff      	b.n	fdd8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x22>
    fdd8:	e006      	b.n	fde8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x32>
    fdda:	2000      	movs	r0, #0
    fddc:	f88d 0012 	strb.w	r0, [sp, #18]
    fde0:	2001      	movs	r0, #1
    fde2:	9002      	str	r0, [sp, #8]
    fde4:	e008      	b.n	fdf8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fde6:	defe      	udf	#254	; 0xfe
    fde8:	2000      	movs	r0, #0
    fdea:	f88d 0013 	strb.w	r0, [sp, #19]
    fdee:	9901      	ldr	r1, [sp, #4]
    fdf0:	9106      	str	r1, [sp, #24]
    fdf2:	9103      	str	r1, [sp, #12]
    fdf4:	9002      	str	r0, [sp, #8]
    fdf6:	e7ff      	b.n	fdf8 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x42>
    fdf8:	f89d 0012 	ldrb.w	r0, [sp, #18]
    fdfc:	07c0      	lsls	r0, r0, #31
    fdfe:	2800      	cmp	r0, #0
    fe00:	d104      	bne.n	fe0c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x56>
    fe02:	e7ff      	b.n	fe04 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fe04:	9800      	ldr	r0, [sp, #0]
    fe06:	2801      	cmp	r0, #1
    fe08:	d008      	beq.n	fe1c <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x66>
    fe0a:	e011      	b.n	fe30 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x7a>
    fe0c:	2000      	movs	r0, #0
    fe0e:	f88d 0012 	strb.w	r0, [sp, #18]
    fe12:	e7f7      	b.n	fe04 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x4e>
    fe14:	9802      	ldr	r0, [sp, #8]
    fe16:	9903      	ldr	r1, [sp, #12]
    fe18:	b007      	add	sp, #28
    fe1a:	4770      	bx	lr
    fe1c:	f89d 0013 	ldrb.w	r0, [sp, #19]
    fe20:	07c0      	lsls	r0, r0, #31
    fe22:	2800      	cmp	r0, #0
    fe24:	d0f6      	beq.n	fe14 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fe26:	e7ff      	b.n	fe28 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x72>
    fe28:	2000      	movs	r0, #0
    fe2a:	f88d 0013 	strb.w	r0, [sp, #19]
    fe2e:	e7f1      	b.n	fe14 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>
    fe30:	e7f0      	b.n	fe14 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE+0x5e>

0000fe32 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE>:
    fe32:	b580      	push	{r7, lr}
    fe34:	b08e      	sub	sp, #56	; 0x38
    fe36:	900b      	str	r0, [sp, #44]	; 0x2c
    fe38:	910c      	str	r1, [sp, #48]	; 0x30
    fe3a:	9003      	str	r0, [sp, #12]
    fe3c:	9803      	ldr	r0, [sp, #12]
    fe3e:	6800      	ldr	r0, [r0, #0]
    fe40:	2800      	cmp	r0, #0
    fe42:	4602      	mov	r2, r0
    fe44:	bf18      	it	ne
    fe46:	2201      	movne	r2, #1
    fe48:	2800      	cmp	r0, #0
    fe4a:	9101      	str	r1, [sp, #4]
    fe4c:	d00f      	beq.n	fe6e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x3c>
    fe4e:	e7ff      	b.n	fe50 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x1e>
    fe50:	9803      	ldr	r0, [sp, #12]
    fe52:	900d      	str	r0, [sp, #52]	; 0x34
    fe54:	f24f 22d1 	movw	r2, #62161	; 0xf2d1
    fe58:	f2c0 0201 	movt	r2, #1
    fe5c:	a907      	add	r1, sp, #28
    fe5e:	2304      	movs	r3, #4
    fe60:	9000      	str	r0, [sp, #0]
    fe62:	4608      	mov	r0, r1
    fe64:	9901      	ldr	r1, [sp, #4]
    fe66:	f007 fcc6 	bl	177f6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fe6a:	e011      	b.n	fe90 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5e>
    fe6c:	defe      	udf	#254	; 0xfe
    fe6e:	f24f 22d5 	movw	r2, #62165	; 0xf2d5
    fe72:	f2c0 0201 	movt	r2, #1
    fe76:	a804      	add	r0, sp, #16
    fe78:	2304      	movs	r3, #4
    fe7a:	9901      	ldr	r1, [sp, #4]
    fe7c:	f007 fcbb 	bl	177f6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>
    fe80:	e7ff      	b.n	fe82 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x50>
    fe82:	a804      	add	r0, sp, #16
    fe84:	f006 ffd4 	bl	16e30 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    fe88:	f88d 000b 	strb.w	r0, [sp, #11]
    fe8c:	e7ff      	b.n	fe8e <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x5c>
    fe8e:	e011      	b.n	feb4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    fe90:	9800      	ldr	r0, [sp, #0]
    fe92:	900a      	str	r0, [sp, #40]	; 0x28
    fe94:	f24f 22dc 	movw	r2, #62172	; 0xf2dc
    fe98:	f2c0 0201 	movt	r2, #1
    fe9c:	a807      	add	r0, sp, #28
    fe9e:	a90a      	add	r1, sp, #40	; 0x28
    fea0:	f006 ff5d 	bl	16d5e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>
    fea4:	e7ff      	b.n	fea6 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x74>
    fea6:	a807      	add	r0, sp, #28
    fea8:	f006 ffc2 	bl	16e30 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>
    feac:	f88d 000b 	strb.w	r0, [sp, #11]
    feb0:	e7ff      	b.n	feb2 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x80>
    feb2:	e7ff      	b.n	feb4 <_ZN66_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h0acdefabcc3b749aE+0x82>
    feb4:	f89d 000b 	ldrb.w	r0, [sp, #11]
    feb8:	b00e      	add	sp, #56	; 0x38
    feba:	bd80      	pop	{r7, pc}

0000febc <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h361038ad5b296681E>:
    febc:	b082      	sub	sp, #8
    febe:	2000      	movs	r0, #0
    fec0:	9000      	str	r0, [sp, #0]
    fec2:	9800      	ldr	r0, [sp, #0]
    fec4:	b002      	add	sp, #8
    fec6:	4770      	bx	lr

0000fec8 <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E>:
    fec8:	b580      	push	{r7, lr}
    feca:	b084      	sub	sp, #16
    fecc:	9002      	str	r0, [sp, #8]
    fece:	9103      	str	r1, [sp, #12]
    fed0:	f7ff ff71 	bl	fdb6 <_ZN4core6option15Option$LT$T$GT$5ok_or17h4451d0b91d37dc3aE>
    fed4:	9001      	str	r0, [sp, #4]
    fed6:	9100      	str	r1, [sp, #0]
    fed8:	e7ff      	b.n	feda <_ZN69_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h5bcde1818ce87f59E+0x12>
    feda:	9801      	ldr	r0, [sp, #4]
    fedc:	9900      	ldr	r1, [sp, #0]
    fede:	b004      	add	sp, #16
    fee0:	bd80      	pop	{r7, pc}

0000fee2 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E>:
    fee2:	b580      	push	{r7, lr}
    fee4:	b094      	sub	sp, #80	; 0x50
    fee6:	9008      	str	r0, [sp, #32]
    fee8:	9109      	str	r1, [sp, #36]	; 0x24
    feea:	6802      	ldr	r2, [r0, #0]
    feec:	2a00      	cmp	r2, #0
    feee:	bf18      	it	ne
    fef0:	2201      	movne	r2, #1
    fef2:	f04f 0300 	mov.w	r3, #0
    fef6:	930b      	str	r3, [sp, #44]	; 0x2c
    fef8:	920a      	str	r2, [sp, #40]	; 0x28
    fefa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    fefc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    fefe:	9104      	str	r1, [sp, #16]
    ff00:	9003      	str	r0, [sp, #12]
    ff02:	9202      	str	r2, [sp, #8]
    ff04:	e7ff      	b.n	ff06 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x24>
    ff06:	9802      	ldr	r0, [sp, #8]
    ff08:	9902      	ldr	r1, [sp, #8]
    ff0a:	910d      	str	r1, [sp, #52]	; 0x34
    ff0c:	9a04      	ldr	r2, [sp, #16]
    ff0e:	6813      	ldr	r3, [r2, #0]
    ff10:	2b00      	cmp	r3, #0
    ff12:	bf18      	it	ne
    ff14:	2301      	movne	r3, #1
    ff16:	f04f 0c00 	mov.w	ip, #0
    ff1a:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
    ff1e:	930e      	str	r3, [sp, #56]	; 0x38
    ff20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ff22:	f8dd c03c 	ldr.w	ip, [sp, #60]	; 0x3c
    ff26:	9001      	str	r0, [sp, #4]
    ff28:	9300      	str	r3, [sp, #0]
    ff2a:	e7ff      	b.n	ff2c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x4a>
    ff2c:	9800      	ldr	r0, [sp, #0]
    ff2e:	9011      	str	r0, [sp, #68]	; 0x44
    ff30:	9901      	ldr	r1, [sp, #4]
    ff32:	4281      	cmp	r1, r0
    ff34:	d104      	bne.n	ff40 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x5e>
    ff36:	e7ff      	b.n	ff38 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x56>
    ff38:	2001      	movs	r0, #1
    ff3a:	f88d 0017 	strb.w	r0, [sp, #23]
    ff3e:	e003      	b.n	ff48 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    ff40:	2000      	movs	r0, #0
    ff42:	f88d 0017 	strb.w	r0, [sp, #23]
    ff46:	e7ff      	b.n	ff48 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x66>
    ff48:	f89d 0017 	ldrb.w	r0, [sp, #23]
    ff4c:	07c0      	lsls	r0, r0, #31
    ff4e:	2800      	cmp	r0, #0
    ff50:	d104      	bne.n	ff5c <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x7a>
    ff52:	e7ff      	b.n	ff54 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x72>
    ff54:	2000      	movs	r0, #0
    ff56:	f88d 0016 	strb.w	r0, [sp, #22]
    ff5a:	e01c      	b.n	ff96 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    ff5c:	9803      	ldr	r0, [sp, #12]
    ff5e:	9006      	str	r0, [sp, #24]
    ff60:	9904      	ldr	r1, [sp, #16]
    ff62:	9107      	str	r1, [sp, #28]
    ff64:	9a06      	ldr	r2, [sp, #24]
    ff66:	6812      	ldr	r2, [r2, #0]
    ff68:	2a00      	cmp	r2, #0
    ff6a:	d104      	bne.n	ff76 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x94>
    ff6c:	e7ff      	b.n	ff6e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    ff6e:	2001      	movs	r0, #1
    ff70:	f88d 0016 	strb.w	r0, [sp, #22]
    ff74:	e00e      	b.n	ff94 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    ff76:	9807      	ldr	r0, [sp, #28]
    ff78:	6800      	ldr	r0, [r0, #0]
    ff7a:	2800      	cmp	r0, #0
    ff7c:	d0f7      	beq.n	ff6e <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x8c>
    ff7e:	e7ff      	b.n	ff80 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0x9e>
    ff80:	9806      	ldr	r0, [sp, #24]
    ff82:	9012      	str	r0, [sp, #72]	; 0x48
    ff84:	9907      	ldr	r1, [sp, #28]
    ff86:	9113      	str	r1, [sp, #76]	; 0x4c
    ff88:	f003 fa76 	bl	13478 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>
    ff8c:	f88d 0016 	strb.w	r0, [sp, #22]
    ff90:	e7ff      	b.n	ff92 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb0>
    ff92:	e7ff      	b.n	ff94 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb2>
    ff94:	e7ff      	b.n	ff96 <_ZN70_$LT$core..option..Option$LT$T$GT$$u20$as$u20$core..cmp..PartialEq$GT$2eq17hefd853fe5ead87a9E+0xb4>
    ff96:	f89d 0016 	ldrb.w	r0, [sp, #22]
    ff9a:	b014      	add	sp, #80	; 0x50
    ff9c:	bd80      	pop	{r7, pc}

0000ff9e <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E>:
    ff9e:	b580      	push	{r7, lr}
    ffa0:	b084      	sub	sp, #16
    ffa2:	9002      	str	r0, [sp, #8]
    ffa4:	9103      	str	r1, [sp, #12]
    ffa6:	6800      	ldr	r0, [r0, #0]
    ffa8:	f003 f9f8 	bl	1339c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>
    ffac:	9001      	str	r0, [sp, #4]
    ffae:	e7ff      	b.n	ffb0 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h3493cbfa35f6ddd4E+0x12>
    ffb0:	9801      	ldr	r0, [sp, #4]
    ffb2:	f000 0001 	and.w	r0, r0, #1
    ffb6:	b004      	add	sp, #16
    ffb8:	bd80      	pop	{r7, pc}

0000ffba <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>:
    ffba:	b580      	push	{r7, lr}
    ffbc:	b084      	sub	sp, #16
    ffbe:	9002      	str	r0, [sp, #8]
    ffc0:	9103      	str	r1, [sp, #12]
    ffc2:	6800      	ldr	r0, [r0, #0]
    ffc4:	f003 f9b3 	bl	1332e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>
    ffc8:	9001      	str	r0, [sp, #4]
    ffca:	e7ff      	b.n	ffcc <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E+0x12>
    ffcc:	9801      	ldr	r0, [sp, #4]
    ffce:	f000 0001 	and.w	r0, r0, #1
    ffd2:	b004      	add	sp, #16
    ffd4:	bd80      	pop	{r7, pc}

0000ffd6 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E>:
    ffd6:	b580      	push	{r7, lr}
    ffd8:	b084      	sub	sp, #16
    ffda:	9002      	str	r0, [sp, #8]
    ffdc:	9103      	str	r1, [sp, #12]
    ffde:	6800      	ldr	r0, [r0, #0]
    ffe0:	f7ff ffeb 	bl	ffba <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h4894d1160979e2b7E>
    ffe4:	9001      	str	r0, [sp, #4]
    ffe6:	e7ff      	b.n	ffe8 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h6101f87767f46107E+0x12>
    ffe8:	9801      	ldr	r0, [sp, #4]
    ffea:	f000 0001 	and.w	r0, r0, #1
    ffee:	b004      	add	sp, #16
    fff0:	bd80      	pop	{r7, pc}

0000fff2 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE>:
    fff2:	b580      	push	{r7, lr}
    fff4:	b084      	sub	sp, #16
    fff6:	9002      	str	r0, [sp, #8]
    fff8:	9103      	str	r1, [sp, #12]
    fffa:	6800      	ldr	r0, [r0, #0]
    fffc:	f003 fa05 	bl	1340a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>
   10000:	9001      	str	r0, [sp, #4]
   10002:	e7ff      	b.n	10004 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h84d566c3c6371a4aE+0x12>
   10004:	9801      	ldr	r0, [sp, #4]
   10006:	f000 0001 	and.w	r0, r0, #1
   1000a:	b004      	add	sp, #16
   1000c:	bd80      	pop	{r7, pc}

0001000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>:
   1000e:	b089      	sub	sp, #36	; 0x24
   10010:	9005      	str	r0, [sp, #20]
   10012:	9106      	str	r1, [sp, #24]
   10014:	9107      	str	r1, [sp, #28]
   10016:	9907      	ldr	r1, [sp, #28]
   10018:	9002      	str	r0, [sp, #8]
   1001a:	9101      	str	r1, [sp, #4]
   1001c:	e7ff      	b.n	1001e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x10>
   1001e:	9802      	ldr	r0, [sp, #8]
   10020:	9008      	str	r0, [sp, #32]
   10022:	9908      	ldr	r1, [sp, #32]
   10024:	9100      	str	r1, [sp, #0]
   10026:	e7ff      	b.n	10028 <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE+0x1a>
   10028:	9800      	ldr	r0, [sp, #0]
   1002a:	9003      	str	r0, [sp, #12]
   1002c:	9901      	ldr	r1, [sp, #4]
   1002e:	9104      	str	r1, [sp, #16]
   10030:	9803      	ldr	r0, [sp, #12]
   10032:	9904      	ldr	r1, [sp, #16]
   10034:	b009      	add	sp, #36	; 0x24
   10036:	4770      	bx	lr

00010038 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E>:
   10038:	b089      	sub	sp, #36	; 0x24
   1003a:	9005      	str	r0, [sp, #20]
   1003c:	9106      	str	r1, [sp, #24]
   1003e:	9107      	str	r1, [sp, #28]
   10040:	9907      	ldr	r1, [sp, #28]
   10042:	9002      	str	r0, [sp, #8]
   10044:	9101      	str	r1, [sp, #4]
   10046:	e7ff      	b.n	10048 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x10>
   10048:	9802      	ldr	r0, [sp, #8]
   1004a:	9008      	str	r0, [sp, #32]
   1004c:	9908      	ldr	r1, [sp, #32]
   1004e:	9100      	str	r1, [sp, #0]
   10050:	e7ff      	b.n	10052 <_ZN4core3fmt10ArgumentV13new17h8099b33eabde8db6E+0x1a>
   10052:	9800      	ldr	r0, [sp, #0]
   10054:	9003      	str	r0, [sp, #12]
   10056:	9901      	ldr	r1, [sp, #4]
   10058:	9104      	str	r1, [sp, #16]
   1005a:	9803      	ldr	r0, [sp, #12]
   1005c:	9904      	ldr	r1, [sp, #16]
   1005e:	b009      	add	sp, #36	; 0x24
   10060:	4770      	bx	lr

00010062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>:
   10062:	b089      	sub	sp, #36	; 0x24
   10064:	9005      	str	r0, [sp, #20]
   10066:	9106      	str	r1, [sp, #24]
   10068:	9107      	str	r1, [sp, #28]
   1006a:	9907      	ldr	r1, [sp, #28]
   1006c:	9002      	str	r0, [sp, #8]
   1006e:	9101      	str	r1, [sp, #4]
   10070:	e7ff      	b.n	10072 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x10>
   10072:	9802      	ldr	r0, [sp, #8]
   10074:	9008      	str	r0, [sp, #32]
   10076:	9908      	ldr	r1, [sp, #32]
   10078:	9100      	str	r1, [sp, #0]
   1007a:	e7ff      	b.n	1007c <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE+0x1a>
   1007c:	9800      	ldr	r0, [sp, #0]
   1007e:	9003      	str	r0, [sp, #12]
   10080:	9901      	ldr	r1, [sp, #4]
   10082:	9104      	str	r1, [sp, #16]
   10084:	9803      	ldr	r0, [sp, #12]
   10086:	9904      	ldr	r1, [sp, #16]
   10088:	b009      	add	sp, #36	; 0x24
   1008a:	4770      	bx	lr

0001008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>:
   1008c:	b089      	sub	sp, #36	; 0x24
   1008e:	9005      	str	r0, [sp, #20]
   10090:	9106      	str	r1, [sp, #24]
   10092:	9107      	str	r1, [sp, #28]
   10094:	9907      	ldr	r1, [sp, #28]
   10096:	9002      	str	r0, [sp, #8]
   10098:	9101      	str	r1, [sp, #4]
   1009a:	e7ff      	b.n	1009c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x10>
   1009c:	9802      	ldr	r0, [sp, #8]
   1009e:	9008      	str	r0, [sp, #32]
   100a0:	9908      	ldr	r1, [sp, #32]
   100a2:	9100      	str	r1, [sp, #0]
   100a4:	e7ff      	b.n	100a6 <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE+0x1a>
   100a6:	9800      	ldr	r0, [sp, #0]
   100a8:	9003      	str	r0, [sp, #12]
   100aa:	9901      	ldr	r1, [sp, #4]
   100ac:	9104      	str	r1, [sp, #16]
   100ae:	9803      	ldr	r0, [sp, #12]
   100b0:	9904      	ldr	r1, [sp, #16]
   100b2:	b009      	add	sp, #36	; 0x24
   100b4:	4770      	bx	lr

000100b6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE>:
   100b6:	b580      	push	{r7, lr}
   100b8:	b088      	sub	sp, #32
   100ba:	9004      	str	r0, [sp, #16]
   100bc:	9105      	str	r1, [sp, #20]
   100be:	f000 f819 	bl	100f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>
   100c2:	9001      	str	r0, [sp, #4]
   100c4:	9100      	str	r1, [sp, #0]
   100c6:	e7ff      	b.n	100c8 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x12>
   100c8:	9801      	ldr	r0, [sp, #4]
   100ca:	9006      	str	r0, [sp, #24]
   100cc:	9900      	ldr	r1, [sp, #0]
   100ce:	f001 0201 	and.w	r2, r1, #1
   100d2:	f88d 201f 	strb.w	r2, [sp, #31]
   100d6:	2a00      	cmp	r2, #0
   100d8:	d105      	bne.n	100e6 <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x30>
   100da:	e7ff      	b.n	100dc <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x26>
   100dc:	9801      	ldr	r0, [sp, #4]
   100de:	9003      	str	r0, [sp, #12]
   100e0:	2101      	movs	r1, #1
   100e2:	9102      	str	r1, [sp, #8]
   100e4:	e002      	b.n	100ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   100e6:	2000      	movs	r0, #0
   100e8:	9002      	str	r0, [sp, #8]
   100ea:	e7ff      	b.n	100ec <_ZN4core3num23_$LT$impl$u20$usize$GT$11checked_sub17h269718058adf453bE+0x36>
   100ec:	9802      	ldr	r0, [sp, #8]
   100ee:	9903      	ldr	r1, [sp, #12]
   100f0:	b008      	add	sp, #32
   100f2:	bd80      	pop	{r7, pc}

000100f4 <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E>:
   100f4:	b08a      	sub	sp, #40	; 0x28
   100f6:	9004      	str	r0, [sp, #16]
   100f8:	9105      	str	r1, [sp, #20]
   100fa:	1a40      	subs	r0, r0, r1
   100fc:	f04f 0100 	mov.w	r1, #0
   10100:	f141 0100 	adc.w	r1, r1, #0
   10104:	f1c1 0101 	rsb	r1, r1, #1
   10108:	9006      	str	r0, [sp, #24]
   1010a:	f88d 101c 	strb.w	r1, [sp, #28]
   1010e:	9806      	ldr	r0, [sp, #24]
   10110:	f89d 101c 	ldrb.w	r1, [sp, #28]
   10114:	9001      	str	r0, [sp, #4]
   10116:	9100      	str	r1, [sp, #0]
   10118:	e7ff      	b.n	1011a <_ZN4core3num23_$LT$impl$u20$usize$GT$15overflowing_sub17h8d0a89c78c3f1fe6E+0x26>
   1011a:	9801      	ldr	r0, [sp, #4]
   1011c:	9008      	str	r0, [sp, #32]
   1011e:	9900      	ldr	r1, [sp, #0]
   10120:	f001 0201 	and.w	r2, r1, #1
   10124:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   10128:	9002      	str	r0, [sp, #8]
   1012a:	f88d 200c 	strb.w	r2, [sp, #12]
   1012e:	9802      	ldr	r0, [sp, #8]
   10130:	f89d 100c 	ldrb.w	r1, [sp, #12]
   10134:	b00a      	add	sp, #40	; 0x28
   10136:	4770      	bx	lr

00010138 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>:
   10138:	b580      	push	{r7, lr}
   1013a:	b084      	sub	sp, #16
   1013c:	9002      	str	r0, [sp, #8]
   1013e:	9103      	str	r1, [sp, #12]
   10140:	f000 f805 	bl	1014e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   10144:	9001      	str	r0, [sp, #4]
   10146:	e7ff      	b.n	10148 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE+0x10>
   10148:	9801      	ldr	r0, [sp, #4]
   1014a:	b004      	add	sp, #16
   1014c:	bd80      	pop	{r7, pc}

0001014e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>:
   1014e:	b084      	sub	sp, #16
   10150:	9001      	str	r0, [sp, #4]
   10152:	9102      	str	r1, [sp, #8]
   10154:	4408      	add	r0, r1
   10156:	9003      	str	r0, [sp, #12]
   10158:	9803      	ldr	r0, [sp, #12]
   1015a:	9000      	str	r0, [sp, #0]
   1015c:	e7ff      	b.n	1015e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE+0x10>
   1015e:	9800      	ldr	r0, [sp, #0]
   10160:	b004      	add	sp, #16
   10162:	4770      	bx	lr

00010164 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h867963bfe0d067ccE>:
   10164:	b081      	sub	sp, #4
   10166:	b001      	add	sp, #4
   10168:	4770      	bx	lr

0001016a <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E>:
    }
    Ok(())
}

/// Draw the item to the display
pub fn draw_to_display<T>(item: T)
   1016a:	b510      	push	{r4, lr}
   1016c:	b088      	sub	sp, #32
   1016e:	a901      	add	r1, sp, #4
    unsafe { DISPLAY.draw(item) };        //  Draw text or graphics the usual slow way

    #[cfg(feature = "noblock_spi")]       //  If batching is enabled...
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
        unsafe { &mut DISPLAY },
        item
   10170:	460a      	mov	r2, r1
   10172:	e8b0 5008 	ldmia.w	r0!, {r3, ip, lr}
   10176:	e8a2 5008 	stmia.w	r2!, {r3, ip, lr}
   1017a:	e890 5018 	ldmia.w	r0, {r3, r4, ip, lr}
   1017e:	e882 5018 	stmia.w	r2, {r3, r4, ip, lr}
    super::batch::draw_blocks(            //  Draw text or graphics the new faster way, as pixel blocks
   10182:	f643 2054 	movw	r0, #14932	; 0x3a54
   10186:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1018a:	f000 f94a 	bl	10422 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>
   1018e:	9000      	str	r0, [sp, #0]
   10190:	e7ff      	b.n	10192 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x28>
   10192:	9800      	ldr	r0, [sp, #0]
   10194:	f000 0001 	and.w	r0, r0, #1
   10198:	f24f 21ec 	movw	r1, #62188	; 0xf2ec
   1019c:	f2c0 0101 	movt	r1, #1
   101a0:	f24f 3334 	movw	r3, #62260	; 0xf334
   101a4:	f2c0 0301 	movt	r3, #1
   101a8:	2210      	movs	r2, #16
   101aa:	f005 fad5 	bl	15758 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   101ae:	e7ff      	b.n	101b0 <_ZN22piet_embedded_graphics7display15draw_to_display17h51b7a2c40e8aeff7E+0x46>
    ).expect("draw blocks fail");
}
   101b0:	b008      	add	sp, #32
   101b2:	bd10      	pop	{r4, pc}

000101b4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E>:
pub fn start_display() -> MynewtResult<()> {
   101b4:	b5b0      	push	{r4, r5, r7, lr}
   101b6:	b0b2      	sub	sp, #200	; 0xc8
    let mut spi_port = mynewt::SPI::new();
   101b8:	f7ff fb54 	bl	f864 <_ZN6mynewt3hal3SPI3new17he4f277d2b1ca35e5E>
   101bc:	9115      	str	r1, [sp, #84]	; 0x54
   101be:	9014      	str	r0, [sp, #80]	; 0x50
   101c0:	e7ff      	b.n	101c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe>
    let mut dc_gpio =  mynewt::GPIO::new();
   101c2:	f7ff fd0d 	bl	fbe0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   101c6:	9016      	str	r0, [sp, #88]	; 0x58
   101c8:	e7ff      	b.n	101ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16>
    let mut rst_gpio = mynewt::GPIO::new();
   101ca:	f7ff fd09 	bl	fbe0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   101ce:	9017      	str	r0, [sp, #92]	; 0x5c
   101d0:	e7ff      	b.n	101d2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e>
    spi_port.init(
   101d2:	f240 03f0 	movw	r3, #240	; 0xf0
   101d6:	f2c2 0300 	movt	r3, #8192	; 0x2000
   101da:	a814      	add	r0, sp, #80	; 0x50
   101dc:	2100      	movs	r1, #0
   101de:	2219      	movs	r2, #25
   101e0:	f7ff fb48 	bl	f874 <_ZN6mynewt3hal3SPI4init17h97467ea724680fb5E>
   101e4:	9012      	str	r0, [sp, #72]	; 0x48
   101e6:	e7ff      	b.n	101e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x34>
   101e8:	9812      	ldr	r0, [sp, #72]	; 0x48
   101ea:	f7ff f880 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   101ee:	9018      	str	r0, [sp, #96]	; 0x60
   101f0:	e7ff      	b.n	101f2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x3e>
    ) ? ;
   101f2:	9818      	ldr	r0, [sp, #96]	; 0x60
   101f4:	1e41      	subs	r1, r0, #1
   101f6:	bf18      	it	ne
   101f8:	2101      	movne	r1, #1
   101fa:	2801      	cmp	r0, #1
   101fc:	d001      	beq.n	10202 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4e>
   101fe:	e7ff      	b.n	10200 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x4c>
   10200:	e006      	b.n	10210 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x5c>
   10202:	a816      	add	r0, sp, #88	; 0x58
   10204:	2112      	movs	r1, #18
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10206:	f7ff fced 	bl	fbe4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   1020a:	9011      	str	r0, [sp, #68]	; 0x44
   1020c:	e010      	b.n	10230 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7c>
    spi_port.init(
   1020e:	defe      	udf	#254	; 0xfe
    ) ? ;
   10210:	9818      	ldr	r0, [sp, #96]	; 0x60
   10212:	902d      	str	r0, [sp, #180]	; 0xb4
   10214:	f7ff f8de 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10218:	9010      	str	r0, [sp, #64]	; 0x40
   1021a:	e002      	b.n	10222 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x6e>
}
   1021c:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1021e:	b032      	add	sp, #200	; 0xc8
   10220:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;
   10222:	9810      	ldr	r0, [sp, #64]	; 0x40
   10224:	f7ff f857 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10228:	9013      	str	r0, [sp, #76]	; 0x4c
   1022a:	e7ff      	b.n	1022c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x78>
   1022c:	e7ff      	b.n	1022e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
   1022e:	e7f5      	b.n	1021c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10230:	9811      	ldr	r0, [sp, #68]	; 0x44
   10232:	f7ff f85c 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10236:	9019      	str	r0, [sp, #100]	; 0x64
   10238:	e7ff      	b.n	1023a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x86>
   1023a:	9819      	ldr	r0, [sp, #100]	; 0x64
   1023c:	1e41      	subs	r1, r0, #1
   1023e:	bf18      	it	ne
   10240:	2101      	movne	r1, #1
   10242:	2801      	cmp	r0, #1
   10244:	d001      	beq.n	1024a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x96>
   10246:	e7ff      	b.n	10248 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x94>
   10248:	e006      	b.n	10258 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xa4>
   1024a:	a817      	add	r0, sp, #92	; 0x5c
   1024c:	211a      	movs	r1, #26
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   1024e:	f7ff fcc9 	bl	fbe4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   10252:	900f      	str	r0, [sp, #60]	; 0x3c
   10254:	e00c      	b.n	10270 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xbc>
    dc_gpio.init(DISPLAY_DC) ? ;    //  LCD_RS (P0.18): Clock/data pin (CD)
   10256:	defe      	udf	#254	; 0xfe
   10258:	9819      	ldr	r0, [sp, #100]	; 0x64
   1025a:	902e      	str	r0, [sp, #184]	; 0xb8
   1025c:	f7ff f8ba 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   10260:	900e      	str	r0, [sp, #56]	; 0x38
   10262:	e7ff      	b.n	10264 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xb0>
   10264:	980e      	ldr	r0, [sp, #56]	; 0x38
   10266:	f7ff f836 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   1026a:	9013      	str	r0, [sp, #76]	; 0x4c
   1026c:	e7ff      	b.n	1026e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xba>
   1026e:	e7de      	b.n	1022e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   10270:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10272:	f7ff f83c 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   10276:	901a      	str	r0, [sp, #104]	; 0x68
   10278:	e7ff      	b.n	1027a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xc6>
   1027a:	981a      	ldr	r0, [sp, #104]	; 0x68
   1027c:	1e41      	subs	r1, r0, #1
   1027e:	bf18      	it	ne
   10280:	2101      	movne	r1, #1
   10282:	2801      	cmp	r0, #1
   10284:	d001      	beq.n	1028a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd6>
   10286:	e7ff      	b.n	10288 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xd4>
   10288:	e004      	b.n	10294 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xe0>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   1028a:	f7ff fca9 	bl	fbe0 <_ZN6mynewt3hal4GPIO3new17h4a7875e39c9cdad4E>
   1028e:	900d      	str	r0, [sp, #52]	; 0x34
   10290:	e00c      	b.n	102ac <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf8>
    rst_gpio.init(DISPLAY_RST) ? ;  //  LCD_RESET (P0.26): Display reset
   10292:	defe      	udf	#254	; 0xfe
   10294:	981a      	ldr	r0, [sp, #104]	; 0x68
   10296:	902f      	str	r0, [sp, #188]	; 0xbc
   10298:	f7ff f89c 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1029c:	900c      	str	r0, [sp, #48]	; 0x30
   1029e:	e7ff      	b.n	102a0 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xec>
   102a0:	980c      	ldr	r0, [sp, #48]	; 0x30
   102a2:	f7ff f818 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   102a6:	9013      	str	r0, [sp, #76]	; 0x4c
   102a8:	e7ff      	b.n	102aa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0xf6>
   102aa:	e7c0      	b.n	1022e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH = mynewt::GPIO::new();
   102ac:	f643 206c 	movw	r0, #14956	; 0x3a6c
   102b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102b4:	990d      	ldr	r1, [sp, #52]	; 0x34
   102b6:	6001      	str	r1, [r0, #0]
   102b8:	2117      	movs	r1, #23
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   102ba:	f7ff fc93 	bl	fbe4 <_ZN6mynewt3hal4GPIO4init17h54c34caf27320956E>
   102be:	900b      	str	r0, [sp, #44]	; 0x2c
   102c0:	e7ff      	b.n	102c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x10e>
   102c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   102c4:	f7ff f813 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   102c8:	901b      	str	r0, [sp, #108]	; 0x6c
   102ca:	e7ff      	b.n	102cc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x118>
   102cc:	981b      	ldr	r0, [sp, #108]	; 0x6c
   102ce:	1e41      	subs	r1, r0, #1
   102d0:	bf18      	it	ne
   102d2:	2101      	movne	r1, #1
   102d4:	2801      	cmp	r0, #1
   102d6:	d001      	beq.n	102dc <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x128>
   102d8:	e7ff      	b.n	102da <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x126>
   102da:	e008      	b.n	102ee <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x13a>
        BACKLIGHT_HIGH.set_low() ? ;    
   102dc:	f643 206c 	movw	r0, #14956	; 0x3a6c
   102e0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   102e4:	f7ff fd17 	bl	fd16 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   102e8:	900a      	str	r0, [sp, #40]	; 0x28
   102ea:	e00d      	b.n	10308 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x154>
        BACKLIGHT_HIGH.init(DISPLAY_HIGH) ? ;  //  LCD_BACKLIGHT_{LOW,MID,HIGH} (P0.14, 22, 23): Backlight (active low)
   102ec:	defe      	udf	#254	; 0xfe
   102ee:	981b      	ldr	r0, [sp, #108]	; 0x6c
   102f0:	9030      	str	r0, [sp, #192]	; 0xc0
   102f2:	f7ff f86f 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   102f6:	9009      	str	r0, [sp, #36]	; 0x24
   102f8:	e7ff      	b.n	102fa <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x146>
   102fa:	9809      	ldr	r0, [sp, #36]	; 0x24
   102fc:	f7fe ffeb 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10300:	9013      	str	r0, [sp, #76]	; 0x4c
   10302:	e7ff      	b.n	10304 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x150>
   10304:	e7ff      	b.n	10306 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
   10306:	e792      	b.n	1022e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        BACKLIGHT_HIGH.set_low() ? ;    
   10308:	980a      	ldr	r0, [sp, #40]	; 0x28
   1030a:	f7fe fff0 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   1030e:	901c      	str	r0, [sp, #112]	; 0x70
   10310:	e7ff      	b.n	10312 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x15e>
   10312:	981c      	ldr	r0, [sp, #112]	; 0x70
   10314:	1e41      	subs	r1, r0, #1
   10316:	bf18      	it	ne
   10318:	2101      	movne	r1, #1
   1031a:	2801      	cmp	r0, #1
   1031c:	d001      	beq.n	10322 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16e>
   1031e:	e7ff      	b.n	10320 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x16c>
   10320:	e011      	b.n	10346 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x192>
        spi_port,    //  SPI Port
   10322:	9914      	ldr	r1, [sp, #80]	; 0x50
   10324:	9a15      	ldr	r2, [sp, #84]	; 0x54
        dc_gpio,     //  GPIO Pin for DC
   10326:	9b16      	ldr	r3, [sp, #88]	; 0x58
        rst_gpio,    //  GPIO Pin for RST
   10328:	9817      	ldr	r0, [sp, #92]	; 0x5c
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1032a:	46ec      	mov	ip, sp
   1032c:	f04f 0e01 	mov.w	lr, #1
   10330:	f8cc e008 	str.w	lr, [ip, #8]
   10334:	f8cc e004 	str.w	lr, [ip, #4]
   10338:	f8cc 0000 	str.w	r0, [ip]
   1033c:	a81d      	add	r0, sp, #116	; 0x74
   1033e:	f001 f8d2 	bl	114e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>
   10342:	e00c      	b.n	1035e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1aa>
        BACKLIGHT_HIGH.set_low() ? ;    
   10344:	defe      	udf	#254	; 0xfe
   10346:	981c      	ldr	r0, [sp, #112]	; 0x70
   10348:	9031      	str	r0, [sp, #196]	; 0xc4
   1034a:	f7ff f843 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   1034e:	9008      	str	r0, [sp, #32]
   10350:	e7ff      	b.n	10352 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x19e>
   10352:	9808      	ldr	r0, [sp, #32]
   10354:	f7fe ffbf 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10358:	9013      	str	r0, [sp, #76]	; 0x4c
   1035a:	e7ff      	b.n	1035c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1a8>
   1035c:	e7d3      	b.n	10306 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x152>
    unsafe { DISPLAY = st7735_lcd::ST7735::new(
   1035e:	f643 2054 	movw	r0, #14932	; 0x3a54
   10362:	f2c2 0000 	movt	r0, #8192	; 0x2000
   10366:	a91d      	add	r1, sp, #116	; 0x74
   10368:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   1036c:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    let mut delay = mynewt::Delay::new();
   10370:	f7ff fce7 	bl	fd42 <_ZN6mynewt3hal5Delay3new17h312a67f65aa3d4b5E>
   10374:	e7ff      	b.n	10376 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1c2>
        DISPLAY.init(&mut delay) ? ;
   10376:	f643 2054 	movw	r0, #14932	; 0x3a54
   1037a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1037e:	a923      	add	r1, sp, #140	; 0x8c
   10380:	f001 f8d3 	bl	1152a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>
   10384:	9007      	str	r0, [sp, #28]
   10386:	e7ff      	b.n	10388 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1d4>
   10388:	9807      	ldr	r0, [sp, #28]
   1038a:	f000 0001 	and.w	r0, r0, #1
   1038e:	f7fe ffa8 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10392:	f88d 008e 	strb.w	r0, [sp, #142]	; 0x8e
   10396:	e7ff      	b.n	10398 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1e4>
   10398:	f89d 008e 	ldrb.w	r0, [sp, #142]	; 0x8e
   1039c:	07c1      	lsls	r1, r0, #31
   1039e:	2900      	cmp	r1, #0
   103a0:	d001      	beq.n	103a6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f2>
   103a2:	e7ff      	b.n	103a4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x1f0>
   103a4:	e00d      	b.n	103c2 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x20e>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   103a6:	f24f 3048 	movw	r0, #62280	; 0xf348
   103aa:	f2c0 0001 	movt	r0, #1
   103ae:	6801      	ldr	r1, [r0, #0]
   103b0:	f643 2054 	movw	r0, #14932	; 0x3a54
   103b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   103b8:	f000 fecc 	bl	11154 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>
   103bc:	9006      	str	r0, [sp, #24]
   103be:	e00b      	b.n	103d8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x224>
        DISPLAY.init(&mut delay) ? ;
   103c0:	defe      	udf	#254	; 0xfe
   103c2:	f002 ff56 	bl	13272 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   103c6:	9005      	str	r0, [sp, #20]
   103c8:	e7ff      	b.n	103ca <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x216>
   103ca:	9805      	ldr	r0, [sp, #20]
   103cc:	f7fe ff83 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   103d0:	9013      	str	r0, [sp, #76]	; 0x4c
   103d2:	e7ff      	b.n	103d4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x220>
   103d4:	e7ff      	b.n	103d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>
   103d6:	e72a      	b.n	1022e <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x7a>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   103d8:	9806      	ldr	r0, [sp, #24]
   103da:	f000 0001 	and.w	r0, r0, #1
   103de:	f7fe ff80 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   103e2:	f88d 008f 	strb.w	r0, [sp, #143]	; 0x8f
   103e6:	e7ff      	b.n	103e8 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x234>
   103e8:	f89d 008f 	ldrb.w	r0, [sp, #143]	; 0x8f
   103ec:	07c1      	lsls	r1, r0, #31
   103ee:	2900      	cmp	r1, #0
   103f0:	d001      	beq.n	103f6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x242>
   103f2:	e7ff      	b.n	103f4 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x240>
   103f4:	e005      	b.n	10402 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x24e>
   103f6:	2000      	movs	r0, #0
    Ok(())
   103f8:	9013      	str	r0, [sp, #76]	; 0x4c
   103fa:	2001      	movs	r0, #1
   103fc:	9013      	str	r0, [sp, #76]	; 0x4c
}
   103fe:	e70d      	b.n	1021c <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x68>
        DISPLAY.set_orientation(&Orientation::Landscape) ? ;
   10400:	defe      	udf	#254	; 0xfe
   10402:	f002 ff36 	bl	13272 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   10406:	9004      	str	r0, [sp, #16]
   10408:	e7ff      	b.n	1040a <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x256>
   1040a:	9804      	ldr	r0, [sp, #16]
   1040c:	f7fe ff63 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   10410:	9013      	str	r0, [sp, #76]	; 0x4c
   10412:	e7ff      	b.n	10414 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x260>
   10414:	e7df      	b.n	103d6 <_ZN22piet_embedded_graphics7display13start_display17h2ef1320c2df7a8c0E+0x222>

00010416 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>:
   10416:	b580      	push	{r7, lr}
   10418:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   1041c:	f00c ff16 	bl	1d24c <__aeabi_memcpy>
   10420:	bd80      	pop	{r7, pc}

00010422 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE>:
    pub colors:   BlockColors,
}

/// Draw the pixels in the item as Pixel Blocks of contiguous Pixel Rows. The pixels are grouped by row then by block.
#[allow(dead_code)]
pub fn draw_blocks<SPI, DC, RST, T>(display: &mut ST7735<SPI, DC, RST>, item_pixels: T) -> Result<(),()>
   10422:	b5b0      	push	{r4, r5, r7, lr}
   10424:	f5ad 6d48 	sub.w	sp, sp, #3200	; 0xc80
   10428:	f8cd 0c6c 	str.w	r0, [sp, #3180]	; 0xc6c
   1042c:	aa19      	add	r2, sp, #100	; 0x64
    SPI: spi::Write<u8>,
    DC: OutputPin,
    RST: OutputPin,
    T: IntoIterator<Item = Pixel<Rgb565>>, {
    //  Get the pixels for the item to be rendered.
    let pixels = item_pixels.into_iter();
   1042e:	4613      	mov	r3, r2
   10430:	e8b1 5010 	ldmia.w	r1!, {r4, ip, lr}
   10434:	e8a3 5010 	stmia.w	r3!, {r4, ip, lr}
   10438:	e891 5030 	ldmia.w	r1, {r4, r5, ip, lr}
   1043c:	e883 5030 	stmia.w	r3, {r4, r5, ip, lr}
   10440:	a910      	add	r1, sp, #64	; 0x40
   10442:	900e      	str	r0, [sp, #56]	; 0x38
   10444:	4608      	mov	r0, r1
   10446:	4611      	mov	r1, r2
   10448:	f001 fcb9 	bl	11dbe <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>
   1044c:	e7ff      	b.n	1044e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x2c>
   1044e:	a810      	add	r0, sp, #64	; 0x40
   10450:	a945      	add	r1, sp, #276	; 0x114
    //  Batch the pixels into Pixel Rows.
    let rows = to_rows(pixels);
   10452:	460a      	mov	r2, r1
   10454:	e8b0 5018 	ldmia.w	r0!, {r3, r4, ip, lr}
   10458:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   1045c:	e890 5038 	ldmia.w	r0, {r3, r4, r5, ip, lr}
   10460:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   10464:	a820      	add	r0, sp, #128	; 0x80
   10466:	f000 f8b7 	bl	105d8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>
   1046a:	e7ff      	b.n	1046c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x4a>
   1046c:	a8a9      	add	r0, sp, #676	; 0x2a4
   1046e:	a920      	add	r1, sp, #128	; 0x80
   10470:	2294      	movs	r2, #148	; 0x94
    //  Batch the Pixel Rows into Pixel Blocks.
    let blocks = to_blocks(rows);
   10472:	900d      	str	r0, [sp, #52]	; 0x34
   10474:	f00c feea 	bl	1d24c <__aeabi_memcpy>
   10478:	a84e      	add	r0, sp, #312	; 0x138
   1047a:	990d      	ldr	r1, [sp, #52]	; 0x34
   1047c:	f000 f8db 	bl	10636 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>
   10480:	e7ff      	b.n	10482 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x60>
   10482:	f20d 40a4 	addw	r0, sp, #1188	; 0x4a4
   10486:	a94e      	add	r1, sp, #312	; 0x138
   10488:	f44f 72b6 	mov.w	r2, #364	; 0x16c
    //  For each Pixel Block...
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   1048c:	900c      	str	r0, [sp, #48]	; 0x30
   1048e:	f00c fedd 	bl	1d24c <__aeabi_memcpy>
   10492:	a8ce      	add	r0, sp, #824	; 0x338
   10494:	990c      	ldr	r1, [sp, #48]	; 0x30
   10496:	f7ff ffbe 	bl	10416 <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h746e0c67b158b621E>
   1049a:	e7ff      	b.n	1049c <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x7a>
   1049c:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
   104a0:	a9ce      	add	r1, sp, #824	; 0x338
   104a2:	f44f 72b6 	mov.w	r2, #364	; 0x16c
   104a6:	f00c fed1 	bl	1d24c <__aeabi_memcpy>
   104aa:	e7ff      	b.n	104ac <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
   104ac:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   104b0:	f50d 61c2 	add.w	r1, sp, #1552	; 0x610
   104b4:	f000 fa2c 	bl	10910 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>
   104b8:	e7ff      	b.n	104ba <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x98>
   104ba:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   104be:	2800      	cmp	r0, #0
   104c0:	d001      	beq.n	104c6 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa4>
   104c2:	e7ff      	b.n	104c4 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xa2>
   104c4:	e005      	b.n	104d2 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xb0>
   104c6:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   104ca:	f001 fc48 	bl	11d5e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   104ce:	e01c      	b.n	1050a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xe8>
   104d0:	defe      	udf	#254	; 0xfe
   104d2:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
   104d6:	1d01      	adds	r1, r0, #4
   104d8:	f60d 1028 	addw	r0, sp, #2344	; 0x928
   104dc:	22d4      	movs	r2, #212	; 0xd4
   104de:	900b      	str	r0, [sp, #44]	; 0x2c
   104e0:	920a      	str	r2, [sp, #40]	; 0x28
   104e2:	f00c feb3 	bl	1d24c <__aeabi_memcpy>
   104e6:	f60d 10fc 	addw	r0, sp, #2556	; 0x9fc
   104ea:	9009      	str	r0, [sp, #36]	; 0x24
   104ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   104ee:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104f0:	f00c feac 	bl	1d24c <__aeabi_memcpy>
   104f4:	f20d 707c 	addw	r0, sp, #1916	; 0x77c
   104f8:	9909      	ldr	r1, [sp, #36]	; 0x24
   104fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   104fc:	f00c fea6 	bl	1d24c <__aeabi_memcpy>
   10500:	f8dd 0850 	ldr.w	r0, [sp, #2128]	; 0x850
   10504:	2801      	cmp	r0, #1
   10506:	d02c      	beq.n	10562 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>
   10508:	e061      	b.n	105ce <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x1ac>
   1050a:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
        //  Dump out the Pixel Blocks for the square in test_display()
        /* if x_left >= 60 && x_left <= 150 && x_right >= 60 && x_right <= 150 && y_top >= 60 && y_top <= 150 && y_bottom >= 60 && y_bottom <= 150 {
            console::print("pixel block ("); console::printint(x_left as i32); console::print(", "); console::printint(y_top as i32); ////
            console::print("), ("); console::printint(x_right as i32); console::print(", "); console::printint(y_bottom as i32); console::print(")\n"); ////    
        } */
    }
   1050e:	f001 fc03 	bl	11d18 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10512:	e022      	b.n	1055a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x138>
        display.set_pixels(
   10514:	f89d 0b9f 	ldrb.w	r0, [sp, #2975]	; 0xb9f
   10518:	f7fe fee3 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1051c:	f88d 0b9e 	strb.w	r0, [sp, #2974]	; 0xb9e
   10520:	e7ff      	b.n	10522 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x100>
            colors) ? ;
   10522:	f89d 0b9e 	ldrb.w	r0, [sp, #2974]	; 0xb9e
   10526:	07c1      	lsls	r1, r0, #31
   10528:	2900      	cmp	r1, #0
   1052a:	d001      	beq.n	10530 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10e>
   1052c:	e7ff      	b.n	1052e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x10c>
   1052e:	e001      	b.n	10534 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x112>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10530:	e7bc      	b.n	104ac <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x8a>
        display.set_pixels(
   10532:	defe      	udf	#254	; 0xfe
            colors) ? ;
   10534:	f002 fdfa 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10538:	e004      	b.n	10544 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x122>
    Ok(())
}
   1053a:	f89d 003f 	ldrb.w	r0, [sp, #63]	; 0x3f
   1053e:	f50d 6d48 	add.w	sp, sp, #3200	; 0xc80
   10542:	bdb0      	pop	{r4, r5, r7, pc}
            colors) ? ;
   10544:	f005 fa55 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10548:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
   1054c:	e7ff      	b.n	1054e <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x12c>
   1054e:	f50d 60c2 	add.w	r0, sp, #1552	; 0x610
    }
   10552:	f001 fbe1 	bl	11d18 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>
   10556:	e7ff      	b.n	10558 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x136>
}
   10558:	e7ef      	b.n	1053a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
   1055a:	2000      	movs	r0, #0
    Ok(())
   1055c:	f88d 003f 	strb.w	r0, [sp, #63]	; 0x3f
}
   10560:	e7eb      	b.n	1053a <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x118>
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   10562:	f8bd 0848 	ldrh.w	r0, [sp, #2120]	; 0x848
   10566:	f8ad 0c78 	strh.w	r0, [sp, #3192]	; 0xc78
   1056a:	f8bd 184a 	ldrh.w	r1, [sp, #2122]	; 0x84a
   1056e:	f8ad 1c7a 	strh.w	r1, [sp, #3194]	; 0xc7a
   10572:	f8bd 284c 	ldrh.w	r2, [sp, #2124]	; 0x84c
   10576:	f8ad 2c7c 	strh.w	r2, [sp, #3196]	; 0xc7c
   1057a:	f8bd 384e 	ldrh.w	r3, [sp, #2126]	; 0x84e
   1057e:	f8ad 3c7e 	strh.w	r3, [sp, #3198]	; 0xc7e
   10582:	f50d 6c2d 	add.w	ip, sp, #2768	; 0xad0
   10586:	f20d 7e7c 	addw	lr, sp, #1916	; 0x77c
   1058a:	24cc      	movs	r4, #204	; 0xcc
   1058c:	9008      	str	r0, [sp, #32]
   1058e:	4660      	mov	r0, ip
   10590:	9107      	str	r1, [sp, #28]
   10592:	4671      	mov	r1, lr
   10594:	9206      	str	r2, [sp, #24]
   10596:	4622      	mov	r2, r4
   10598:	9305      	str	r3, [sp, #20]
   1059a:	f8cd c010 	str.w	ip, [sp, #16]
   1059e:	9403      	str	r4, [sp, #12]
   105a0:	f00c fe54 	bl	1d24c <__aeabi_memcpy>
   105a4:	f50d 603a 	add.w	r0, sp, #2976	; 0xba0
            colors) ? ;
   105a8:	9002      	str	r0, [sp, #8]
   105aa:	9904      	ldr	r1, [sp, #16]
   105ac:	9a03      	ldr	r2, [sp, #12]
   105ae:	f00c fe4d 	bl	1d24c <__aeabi_memcpy>
        display.set_pixels(
   105b2:	4668      	mov	r0, sp
   105b4:	9902      	ldr	r1, [sp, #8]
   105b6:	6041      	str	r1, [r0, #4]
   105b8:	9a05      	ldr	r2, [sp, #20]
   105ba:	6002      	str	r2, [r0, #0]
   105bc:	980e      	ldr	r0, [sp, #56]	; 0x38
   105be:	9908      	ldr	r1, [sp, #32]
   105c0:	9a06      	ldr	r2, [sp, #24]
   105c2:	9b07      	ldr	r3, [sp, #28]
   105c4:	f000 fbf5 	bl	10db2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>
   105c8:	f88d 0b9f 	strb.w	r0, [sp, #2975]	; 0xb9f
   105cc:	e7a2      	b.n	10514 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0xf2>
   105ce:	f50d 6005 	add.w	r0, sp, #2128	; 0x850
    for PixelBlock { x_left, x_right, y_top, y_bottom, colors, .. } in blocks {
   105d2:	f001 fbc4 	bl	11d5e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>
   105d6:	e7c4      	b.n	10562 <_ZN22piet_embedded_graphics5batch11draw_blocks17h14155e12e50491abE+0x140>

000105d8 <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E>:

/// Batch the pixels into Pixel Rows, which are contiguous pixels on the same row.
/// P can be any Pixel Iterator (e.g. a rectangle).
fn to_rows<P>(pixels: P) -> RowIterator<P>
   105d8:	b5b0      	push	{r4, r5, r7, lr}
   105da:	b0a4      	sub	sp, #144	; 0x90
   105dc:	aa01      	add	r2, sp, #4
where
    P: Iterator<Item = Pixel<Rgb565>>, {
    RowIterator::<P> {
        pixels,
   105de:	e8b1 5018 	ldmia.w	r1!, {r3, r4, ip, lr}
   105e2:	e8a2 5018 	stmia.w	r2!, {r3, r4, ip, lr}
   105e6:	e891 5038 	ldmia.w	r1, {r3, r4, r5, ip, lr}
   105ea:	e882 5038 	stmia.w	r2, {r3, r4, r5, ip, lr}
   105ee:	a90a      	add	r1, sp, #40	; 0x28
        x_left: 0,
        x_right: 0,
        y: 0,
        colors: RowColors::new(),
   105f0:	9000      	str	r0, [sp, #0]
   105f2:	4608      	mov	r0, r1
   105f4:	f004 fcf3 	bl	14fde <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>
   105f8:	e7ff      	b.n	105fa <_ZN22piet_embedded_graphics5batch7to_rows17h12a6c520440b4730E+0x22>
   105fa:	a801      	add	r0, sp, #4
    RowIterator::<P> {
   105fc:	9900      	ldr	r1, [sp, #0]
   105fe:	e8b0 500c 	ldmia.w	r0!, {r2, r3, ip, lr}
   10602:	e8a1 500c 	stmia.w	r1!, {r2, r3, ip, lr}
   10606:	e890 501c 	ldmia.w	r0, {r2, r3, r4, ip, lr}
   1060a:	e881 501c 	stmia.w	r1, {r2, r3, r4, ip, lr}
   1060e:	2000      	movs	r0, #0
   10610:	9900      	ldr	r1, [sp, #0]
   10612:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
   10616:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
   1061a:	f8a1 0090 	strh.w	r0, [r1, #144]	; 0x90
   1061e:	f101 0024 	add.w	r0, r1, #36	; 0x24
   10622:	a90a      	add	r1, sp, #40	; 0x28
   10624:	2268      	movs	r2, #104	; 0x68
   10626:	f00c fe11 	bl	1d24c <__aeabi_memcpy>
   1062a:	2001      	movs	r0, #1
   1062c:	9900      	ldr	r1, [sp, #0]
   1062e:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
        first_pixel: true,
    }
}
   10632:	b024      	add	sp, #144	; 0x90
   10634:	bdb0      	pop	{r4, r5, r7, pc}

00010636 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E>:

/// Batch the Pixel Rows into Pixel Blocks, which are contiguous Pixel Rows with the same start and end column number
/// R can be any Pixel Row Iterator.
fn to_blocks<R>(rows: R) -> BlockIterator<R>
   10636:	b580      	push	{r7, lr}
   10638:	b0da      	sub	sp, #360	; 0x168
   1063a:	aa02      	add	r2, sp, #8
   1063c:	2394      	movs	r3, #148	; 0x94
where
    R: Iterator<Item = PixelRow>, {
    BlockIterator::<R> {
        rows,
   1063e:	9001      	str	r0, [sp, #4]
   10640:	4610      	mov	r0, r2
   10642:	461a      	mov	r2, r3
   10644:	f00c fe02 	bl	1d24c <__aeabi_memcpy>
   10648:	a827      	add	r0, sp, #156	; 0x9c
        x_left: 0,
        x_right: 0,
        y_top: 0,
        y_bottom: 0,
        colors: BlockColors::new(),
   1064a:	f004 fcd7 	bl	14ffc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>
   1064e:	e7ff      	b.n	10650 <_ZN22piet_embedded_graphics5batch9to_blocks17h12346fbbcd469e14E+0x1a>
   10650:	a902      	add	r1, sp, #8
   10652:	2294      	movs	r2, #148	; 0x94
    BlockIterator::<R> {
   10654:	9801      	ldr	r0, [sp, #4]
   10656:	f00c fdf9 	bl	1d24c <__aeabi_memcpy>
   1065a:	2000      	movs	r0, #0
   1065c:	9901      	ldr	r1, [sp, #4]
   1065e:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
   10662:	f8a1 0162 	strh.w	r0, [r1, #354]	; 0x162
   10666:	f8a1 0164 	strh.w	r0, [r1, #356]	; 0x164
   1066a:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
   1066e:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10672:	a927      	add	r1, sp, #156	; 0x9c
   10674:	22cc      	movs	r2, #204	; 0xcc
   10676:	f00c fde9 	bl	1d24c <__aeabi_memcpy>
   1067a:	2001      	movs	r0, #1
   1067c:	9901      	ldr	r1, [sp, #4]
   1067e:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
        first_row: true,
    }
}    
   10682:	b05a      	add	sp, #360	; 0x168
   10684:	bd80      	pop	{r7, pc}

00010686 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>:
impl<P: Iterator<Item = Pixel<Rgb565>>> Iterator for RowIterator<P> {
    /// This Iterator returns Pixel Rows
    type Item = PixelRow;

    /// Return the next Pixel Row of contiguous pixels on the same row
    fn next(&mut self) -> Option<Self::Item> {
   10686:	b580      	push	{r7, lr}
   10688:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
   1068c:	91c1      	str	r1, [sp, #772]	; 0x304
        //  Loop over all pixels until we have composed a Pixel Row, or we have run out of pixels.
        loop {
   1068e:	9116      	str	r1, [sp, #88]	; 0x58
   10690:	9015      	str	r0, [sp, #84]	; 0x54
   10692:	e7ff      	b.n	10694 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   10694:	a817      	add	r0, sp, #92	; 0x5c
            //  Get the next pixel.
            let next_pixel = self.pixels.next();
   10696:	9916      	ldr	r1, [sp, #88]	; 0x58
   10698:	f001 fbec 	bl	11e74 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>
   1069c:	e7ff      	b.n	1069e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x18>
            match next_pixel {
                None => {  //  If no more pixels...
   1069e:	9817      	ldr	r0, [sp, #92]	; 0x5c
   106a0:	2800      	cmp	r0, #0
   106a2:	d01c      	beq.n	106de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x58>
   106a4:	e7ff      	b.n	106a6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x20>
                    };
                    self.colors.clear();
                    self.first_pixel = true;
                    return Some(row);
                }
                Some(Pixel(coord, color)) => {  //  If there is a pixel...
   106a6:	9818      	ldr	r0, [sp, #96]	; 0x60
   106a8:	9919      	ldr	r1, [sp, #100]	; 0x64
   106aa:	90c2      	str	r0, [sp, #776]	; 0x308
   106ac:	91c3      	str	r1, [sp, #780]	; 0x30c
   106ae:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
   106b2:	4613      	mov	r3, r2
   106b4:	f8ad 2310 	strh.w	r2, [sp, #784]	; 0x310
                    let x = coord.0 as u16;
   106b8:	f8ad 0312 	strh.w	r0, [sp, #786]	; 0x312
                    let y = coord.1 as u16;
   106bc:	f8ad 1314 	strh.w	r1, [sp, #788]	; 0x314
                    let color = color.0;
   106c0:	f8ad 2316 	strh.w	r2, [sp, #790]	; 0x316
                    //  Save the first pixel as the row start and handle next pixel.
                    if self.first_pixel {
   106c4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   106c6:	f892 c092 	ldrb.w	ip, [r2, #146]	; 0x92
   106ca:	ea4f 7ccc 	mov.w	ip, ip, lsl #31
   106ce:	f1bc 0f00 	cmp.w	ip, #0
   106d2:	9014      	str	r0, [sp, #80]	; 0x50
   106d4:	9113      	str	r1, [sp, #76]	; 0x4c
   106d6:	9312      	str	r3, [sp, #72]	; 0x48
   106d8:	d156      	bne.n	10788 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x102>
   106da:	e04a      	b.n	10772 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xec>
            match next_pixel {
   106dc:	defe      	udf	#254	; 0xfe
                    if self.first_pixel {
   106de:	9816      	ldr	r0, [sp, #88]	; 0x58
   106e0:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
   106e4:	07c9      	lsls	r1, r1, #31
   106e6:	2900      	cmp	r1, #0
   106e8:	d111      	bne.n	1070e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x88>
   106ea:	e7ff      	b.n	106ec <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x66>
                        x_left: self.x_left,
   106ec:	9816      	ldr	r0, [sp, #88]	; 0x58
   106ee:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   106f2:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   106f6:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   106fa:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   106fe:	a837      	add	r0, sp, #220	; 0xdc
   10700:	9111      	str	r1, [sp, #68]	; 0x44
   10702:	4661      	mov	r1, ip
   10704:	9210      	str	r2, [sp, #64]	; 0x40
   10706:	930f      	str	r3, [sp, #60]	; 0x3c
   10708:	f004 fbd2 	bl	14eb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1070c:	e006      	b.n	1071c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x96>
   1070e:	2000      	movs	r0, #0
                        return None;  //  No pixels to group
   10710:	9915      	ldr	r1, [sp, #84]	; 0x54
   10712:	6008      	str	r0, [r1, #0]
   10714:	e7ff      	b.n	10716 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                        .expect("never");
                    return Some(row);
                }
            }
        }
    }
   10716:	f50d 7d46 	add.w	sp, sp, #792	; 0x318
   1071a:	bd80      	pop	{r7, pc}
                    let row = PixelRow {
   1071c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1071e:	f8ad 00d4 	strh.w	r0, [sp, #212]	; 0xd4
   10722:	9910      	ldr	r1, [sp, #64]	; 0x40
   10724:	f8ad 10d6 	strh.w	r1, [sp, #214]	; 0xd6
   10728:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1072a:	f8ad 20d8 	strh.w	r2, [sp, #216]	; 0xd8
   1072e:	a81b      	add	r0, sp, #108	; 0x6c
   10730:	a937      	add	r1, sp, #220	; 0xdc
   10732:	2268      	movs	r2, #104	; 0x68
   10734:	f00c fd8a 	bl	1d24c <__aeabi_memcpy>
                    self.colors.clear();
   10738:	9816      	ldr	r0, [sp, #88]	; 0x58
   1073a:	3024      	adds	r0, #36	; 0x24
   1073c:	f004 fc7d 	bl	1503a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   10740:	e7ff      	b.n	10742 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xbc>
   10742:	2001      	movs	r0, #1
                    self.first_pixel = true;
   10744:	9916      	ldr	r1, [sp, #88]	; 0x58
   10746:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
   1074a:	aa51      	add	r2, sp, #324	; 0x144
   1074c:	a91b      	add	r1, sp, #108	; 0x6c
   1074e:	2370      	movs	r3, #112	; 0x70
                    return Some(row);
   10750:	900e      	str	r0, [sp, #56]	; 0x38
   10752:	4610      	mov	r0, r2
   10754:	920d      	str	r2, [sp, #52]	; 0x34
   10756:	461a      	mov	r2, r3
   10758:	930c      	str	r3, [sp, #48]	; 0x30
   1075a:	f00c fd77 	bl	1d24c <__aeabi_memcpy>
   1075e:	9815      	ldr	r0, [sp, #84]	; 0x54
   10760:	3004      	adds	r0, #4
   10762:	990d      	ldr	r1, [sp, #52]	; 0x34
   10764:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10766:	f00c fd71 	bl	1d24c <__aeabi_memcpy>
   1076a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1076c:	9915      	ldr	r1, [sp, #84]	; 0x54
   1076e:	6008      	str	r0, [r1, #0]
   10770:	e7d1      	b.n	10716 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   10772:	9816      	ldr	r0, [sp, #88]	; 0x58
   10774:	f8b0 108e 	ldrh.w	r1, [r0, #142]	; 0x8e
   10778:	3101      	adds	r1, #1
   1077a:	b28a      	uxth	r2, r1
   1077c:	460b      	mov	r3, r1
   1077e:	428a      	cmp	r2, r1
   10780:	930b      	str	r3, [sp, #44]	; 0x2c
   10782:	f040 80b9 	bne.w	108f8 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x272>
   10786:	e040      	b.n	1080a <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x184>
   10788:	2000      	movs	r0, #0
                        self.first_pixel = false;
   1078a:	9916      	ldr	r1, [sp, #88]	; 0x58
   1078c:	f881 0092 	strb.w	r0, [r1, #146]	; 0x92
                        self.x_left = x;
   10790:	9814      	ldr	r0, [sp, #80]	; 0x50
   10792:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                        self.x_right = x;
   10796:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                        self.y = y;
   1079a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1079c:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                        self.colors.clear();
   107a0:	f101 0024 	add.w	r0, r1, #36	; 0x24
   107a4:	f004 fc49 	bl	1503a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   107a8:	e7ff      	b.n	107aa <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x124>
                        self.colors.push(color)
   107aa:	9816      	ldr	r0, [sp, #88]	; 0x58
   107ac:	3024      	adds	r0, #36	; 0x24
   107ae:	9912      	ldr	r1, [sp, #72]	; 0x48
   107b0:	f004 fc33 	bl	1501a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   107b4:	900a      	str	r0, [sp, #40]	; 0x28
   107b6:	9109      	str	r1, [sp, #36]	; 0x24
   107b8:	e7ff      	b.n	107ba <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x134>
   107ba:	f24f 3088 	movw	r0, #62344	; 0xf388
   107be:	f2c0 0001 	movt	r0, #1
   107c2:	4669      	mov	r1, sp
   107c4:	6008      	str	r0, [r1, #0]
   107c6:	f24f 324c 	movw	r2, #62284	; 0xf34c
   107ca:	f2c0 0201 	movt	r2, #1
   107ce:	2305      	movs	r3, #5
   107d0:	980a      	ldr	r0, [sp, #40]	; 0x28
   107d2:	9909      	ldr	r1, [sp, #36]	; 0x24
   107d4:	f004 ff8f 	bl	156f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   107d8:	e7ff      	b.n	107da <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x154>
                        continue;
   107da:	e7ff      	b.n	107dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
   107dc:	e75a      	b.n	10694 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0xe>
   107de:	2001      	movs	r0, #1
                    if x == self.x_right + 1 && y == self.y {
   107e0:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   107e4:	e00b      	b.n	107fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   107e6:	2000      	movs	r0, #0
   107e8:	f88d 01b7 	strb.w	r0, [sp, #439]	; 0x1b7
   107ec:	e007      	b.n	107fe <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x178>
   107ee:	9816      	ldr	r0, [sp, #88]	; 0x58
   107f0:	f8b0 1090 	ldrh.w	r1, [r0, #144]	; 0x90
   107f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   107f6:	b293      	uxth	r3, r2
   107f8:	428b      	cmp	r3, r1
   107fa:	d0f0      	beq.n	107de <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x158>
   107fc:	e7f3      	b.n	107e6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
   107fe:	f89d 01b7 	ldrb.w	r0, [sp, #439]	; 0x1b7
   10802:	07c0      	lsls	r0, r0, #31
   10804:	2800      	cmp	r0, #0
   10806:	d107      	bne.n	10818 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x192>
   10808:	e020      	b.n	1084c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
   1080a:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1080c:	b281      	uxth	r1, r0
   1080e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10810:	b293      	uxth	r3, r2
   10812:	428b      	cmp	r3, r1
   10814:	d0eb      	beq.n	107ee <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x168>
   10816:	e7e6      	b.n	107e6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x160>
                        if self.colors.push(color).is_ok() {
   10818:	9816      	ldr	r0, [sp, #88]	; 0x58
   1081a:	3024      	adds	r0, #36	; 0x24
   1081c:	9912      	ldr	r1, [sp, #72]	; 0x48
   1081e:	f004 fbfc 	bl	1501a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   10822:	f8ad 11ba 	strh.w	r1, [sp, #442]	; 0x1ba
   10826:	f8ad 01b8 	strh.w	r0, [sp, #440]	; 0x1b8
   1082a:	e7ff      	b.n	1082c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1a6>
   1082c:	a86e      	add	r0, sp, #440	; 0x1b8
   1082e:	f004 ff3d 	bl	156ac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>
   10832:	9008      	str	r0, [sp, #32]
   10834:	e7ff      	b.n	10836 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1b0>
   10836:	9808      	ldr	r0, [sp, #32]
   10838:	07c1      	lsls	r1, r0, #31
   1083a:	2900      	cmp	r1, #0
   1083c:	d101      	bne.n	10842 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1bc>
   1083e:	e7ff      	b.n	10840 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1ba>
                    if x == self.x_right + 1 && y == self.y {
   10840:	e004      	b.n	1084c <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1c6>
                            self.x_right = x;
   10842:	9814      	ldr	r0, [sp, #80]	; 0x50
   10844:	9916      	ldr	r1, [sp, #88]	; 0x58
   10846:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                            continue;
   1084a:	e7c7      	b.n	107dc <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x156>
                        x_left: self.x_left,
   1084c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1084e:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
                        x_right: self.x_right,
   10852:	f8b0 208e 	ldrh.w	r2, [r0, #142]	; 0x8e
                        y: self.y,
   10856:	f8b0 3090 	ldrh.w	r3, [r0, #144]	; 0x90
                        colors: self.colors.clone(),
   1085a:	f100 0c24 	add.w	ip, r0, #36	; 0x24
   1085e:	a88b      	add	r0, sp, #556	; 0x22c
   10860:	9107      	str	r1, [sp, #28]
   10862:	4661      	mov	r1, ip
   10864:	9206      	str	r2, [sp, #24]
   10866:	9305      	str	r3, [sp, #20]
   10868:	f004 fb22 	bl	14eb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>
   1086c:	e7ff      	b.n	1086e <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x1e8>
                    let row = PixelRow {
   1086e:	9807      	ldr	r0, [sp, #28]
   10870:	f8ad 0224 	strh.w	r0, [sp, #548]	; 0x224
   10874:	9906      	ldr	r1, [sp, #24]
   10876:	f8ad 1226 	strh.w	r1, [sp, #550]	; 0x226
   1087a:	9a05      	ldr	r2, [sp, #20]
   1087c:	f8ad 2228 	strh.w	r2, [sp, #552]	; 0x228
   10880:	a86f      	add	r0, sp, #444	; 0x1bc
   10882:	a98b      	add	r1, sp, #556	; 0x22c
   10884:	2268      	movs	r2, #104	; 0x68
   10886:	f00c fce1 	bl	1d24c <__aeabi_memcpy>
                    self.x_left = x;
   1088a:	9814      	ldr	r0, [sp, #80]	; 0x50
   1088c:	9916      	ldr	r1, [sp, #88]	; 0x58
   1088e:	f8a1 008c 	strh.w	r0, [r1, #140]	; 0x8c
                    self.x_right = x;
   10892:	f8a1 008e 	strh.w	r0, [r1, #142]	; 0x8e
                    self.y = y;
   10896:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10898:	f8a1 2090 	strh.w	r2, [r1, #144]	; 0x90
                    self.colors.clear();
   1089c:	f101 0024 	add.w	r0, r1, #36	; 0x24
   108a0:	f004 fbcb 	bl	1503a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>
   108a4:	e7ff      	b.n	108a6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x220>
                    self.colors.push(color)
   108a6:	9816      	ldr	r0, [sp, #88]	; 0x58
   108a8:	3024      	adds	r0, #36	; 0x24
   108aa:	9912      	ldr	r1, [sp, #72]	; 0x48
   108ac:	f004 fbb5 	bl	1501a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>
   108b0:	9004      	str	r0, [sp, #16]
   108b2:	9103      	str	r1, [sp, #12]
   108b4:	e7ff      	b.n	108b6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x230>
   108b6:	f24f 30cc 	movw	r0, #62412	; 0xf3cc
   108ba:	f2c0 0001 	movt	r0, #1
   108be:	4669      	mov	r1, sp
   108c0:	6008      	str	r0, [r1, #0]
   108c2:	f24f 324c 	movw	r2, #62284	; 0xf34c
   108c6:	f2c0 0201 	movt	r2, #1
   108ca:	2305      	movs	r3, #5
   108cc:	9804      	ldr	r0, [sp, #16]
   108ce:	9903      	ldr	r1, [sp, #12]
   108d0:	f004 ff11 	bl	156f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>
   108d4:	e7ff      	b.n	108d6 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x250>
   108d6:	a8a5      	add	r0, sp, #660	; 0x294
   108d8:	a96f      	add	r1, sp, #444	; 0x1bc
   108da:	2270      	movs	r2, #112	; 0x70
                    return Some(row);
   108dc:	9002      	str	r0, [sp, #8]
   108de:	9201      	str	r2, [sp, #4]
   108e0:	f00c fcb4 	bl	1d24c <__aeabi_memcpy>
   108e4:	9815      	ldr	r0, [sp, #84]	; 0x54
   108e6:	3004      	adds	r0, #4
   108e8:	9902      	ldr	r1, [sp, #8]
   108ea:	9a01      	ldr	r2, [sp, #4]
   108ec:	f00c fcae 	bl	1d24c <__aeabi_memcpy>
   108f0:	2001      	movs	r0, #1
   108f2:	9915      	ldr	r1, [sp, #84]	; 0x54
   108f4:	6008      	str	r0, [r1, #0]
   108f6:	e70e      	b.n	10716 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E+0x90>
                    if x == self.x_right + 1 && y == self.y {
   108f8:	f24f 30b0 	movw	r0, #62384	; 0xf3b0
   108fc:	f2c0 0001 	movt	r0, #1
   10900:	f24f 3298 	movw	r2, #62360	; 0xf398
   10904:	f2c0 0201 	movt	r2, #1
   10908:	211c      	movs	r1, #28
   1090a:	f006 f8cb 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1090e:	defe      	udf	#254	; 0xfe

00010910 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E>:
impl<R: Iterator<Item = PixelRow>> Iterator for BlockIterator<R> {
    /// This Iterator returns Pixel Blocks
    type Item = PixelBlock;

    /// Return the next Pixel Block of contiguous Pixel Rows with the same start and end column number
    fn next(&mut self) -> Option<Self::Item> {
   10910:	b580      	push	{r7, lr}
   10912:	f5ad 6dcb 	sub.w	sp, sp, #1624	; 0x658
   10916:	f8cd 164c 	str.w	r1, [sp, #1612]	; 0x64c
   1091a:	2200      	movs	r2, #0
        //  Loop over all Pixel Rows until we have composed a Pixel Block, or we have run out of Pixel Rows.
        loop {
   1091c:	f88d 264b 	strb.w	r2, [sp, #1611]	; 0x64b
   10920:	911f      	str	r1, [sp, #124]	; 0x7c
   10922:	901e      	str	r0, [sp, #120]	; 0x78
   10924:	e7ff      	b.n	10926 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10926:	2001      	movs	r0, #1
            //  Get the next Pixel Row.
            let next_row = self.rows.next();
   10928:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   1092c:	a820      	add	r0, sp, #128	; 0x80
   1092e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10930:	f7ff fea9 	bl	10686 <_ZN110_$LT$piet_embedded_graphics..batch..RowIterator$LT$P$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h93031020de41c433E>
   10934:	e7ff      	b.n	10936 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x26>
            match next_row {
                None => {  //  If no more Pixel Rows...
   10936:	9820      	ldr	r0, [sp, #128]	; 0x80
   10938:	2800      	cmp	r0, #0
   1093a:	d026      	beq.n	1098a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x7a>
   1093c:	e7ff      	b.n	1093e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e>
   1093e:	a820      	add	r0, sp, #128	; 0x80
                    };
                    self.colors.clear();
                    self.first_row = true;
                    return Some(row);
                }
                Some(PixelRow { x_left, x_right, y, colors, .. }) => {  //  If there is a Pixel Row...
   10940:	1d01      	adds	r1, r0, #4
   10942:	f8bd 00ec 	ldrh.w	r0, [sp, #236]	; 0xec
   10946:	4602      	mov	r2, r0
   10948:	f8ad 0652 	strh.w	r0, [sp, #1618]	; 0x652
   1094c:	f8bd 00ee 	ldrh.w	r0, [sp, #238]	; 0xee
   10950:	4603      	mov	r3, r0
   10952:	f8ad 0654 	strh.w	r0, [sp, #1620]	; 0x654
   10956:	f8bd 00f0 	ldrh.w	r0, [sp, #240]	; 0xf0
   1095a:	4684      	mov	ip, r0
   1095c:	f8ad 0656 	strh.w	r0, [sp, #1622]	; 0x656
   10960:	2000      	movs	r0, #0
   10962:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10966:	a8da      	add	r0, sp, #872	; 0x368
   10968:	f04f 0e68 	mov.w	lr, #104	; 0x68
   1096c:	921d      	str	r2, [sp, #116]	; 0x74
   1096e:	4672      	mov	r2, lr
   10970:	931c      	str	r3, [sp, #112]	; 0x70
   10972:	f8cd c06c 	str.w	ip, [sp, #108]	; 0x6c
   10976:	f00c fc69 	bl	1d24c <__aeabi_memcpy>
                    //  Save the first row as the block start and handle next block.
                    if self.first_row {
   1097a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1097c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10980:	07c9      	lsls	r1, r1, #31
   10982:	2900      	cmp	r1, #0
   10984:	d15a      	bne.n	10a3c <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x12c>
   10986:	e04e      	b.n	10a26 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x116>
            match next_row {
   10988:	defe      	udf	#254	; 0xfe
                    if self.first_row {
   1098a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1098c:	f890 1168 	ldrb.w	r1, [r0, #360]	; 0x168
   10990:	07c9      	lsls	r1, r1, #31
   10992:	2900      	cmp	r1, #0
   10994:	d115      	bne.n	109c2 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xb2>
   10996:	e7ff      	b.n	10998 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x88>
                        x_left: self.x_left,
   10998:	981f      	ldr	r0, [sp, #124]	; 0x7c
   1099a:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   1099e:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   109a2:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   109a6:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   109aa:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   109ae:	a872      	add	r0, sp, #456	; 0x1c8
   109b0:	911a      	str	r1, [sp, #104]	; 0x68
   109b2:	4671      	mov	r1, lr
   109b4:	9219      	str	r2, [sp, #100]	; 0x64
   109b6:	9318      	str	r3, [sp, #96]	; 0x60
   109b8:	f8cd c05c 	str.w	ip, [sp, #92]	; 0x5c
   109bc:	f004 fa88 	bl	14ed0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   109c0:	e003      	b.n	109ca <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xba>
   109c2:	2000      	movs	r0, #0
                        return None;  //  No rows to group
   109c4:	991e      	ldr	r1, [sp, #120]	; 0x78
   109c6:	6008      	str	r0, [r1, #0]
   109c8:	e153      	b.n	10c72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                    let row = PixelBlock {
   109ca:	981a      	ldr	r0, [sp, #104]	; 0x68
   109cc:	f8ad 01c0 	strh.w	r0, [sp, #448]	; 0x1c0
   109d0:	9919      	ldr	r1, [sp, #100]	; 0x64
   109d2:	f8ad 11c2 	strh.w	r1, [sp, #450]	; 0x1c2
   109d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
   109d8:	f8ad 21c4 	strh.w	r2, [sp, #452]	; 0x1c4
   109dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   109de:	f8ad 31c6 	strh.w	r3, [sp, #454]	; 0x1c6
   109e2:	a83d      	add	r0, sp, #244	; 0xf4
   109e4:	a972      	add	r1, sp, #456	; 0x1c8
   109e6:	22cc      	movs	r2, #204	; 0xcc
   109e8:	f00c fc30 	bl	1d24c <__aeabi_memcpy>
                    self.colors.clear();
   109ec:	981f      	ldr	r0, [sp, #124]	; 0x7c
   109ee:	3094      	adds	r0, #148	; 0x94
   109f0:	f004 fb2b 	bl	1504a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   109f4:	e7ff      	b.n	109f6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0xe6>
   109f6:	2001      	movs	r0, #1
                    self.first_row = true;
   109f8:	991f      	ldr	r1, [sp, #124]	; 0x7c
   109fa:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
   109fe:	aaa5      	add	r2, sp, #660	; 0x294
   10a00:	a93d      	add	r1, sp, #244	; 0xf4
   10a02:	23d4      	movs	r3, #212	; 0xd4
                    return Some(row);
   10a04:	9016      	str	r0, [sp, #88]	; 0x58
   10a06:	4610      	mov	r0, r2
   10a08:	9215      	str	r2, [sp, #84]	; 0x54
   10a0a:	461a      	mov	r2, r3
   10a0c:	9314      	str	r3, [sp, #80]	; 0x50
   10a0e:	f00c fc1d 	bl	1d24c <__aeabi_memcpy>
   10a12:	981e      	ldr	r0, [sp, #120]	; 0x78
   10a14:	3004      	adds	r0, #4
   10a16:	9915      	ldr	r1, [sp, #84]	; 0x54
   10a18:	9a14      	ldr	r2, [sp, #80]	; 0x50
   10a1a:	f00c fc17 	bl	1d24c <__aeabi_memcpy>
   10a1e:	9816      	ldr	r0, [sp, #88]	; 0x58
   10a20:	991e      	ldr	r1, [sp, #120]	; 0x78
   10a22:	6008      	str	r0, [r1, #0]
   10a24:	e125      	b.n	10c72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
                        self.colors.extend_from_slice(&colors)
                            .expect("never");
                        continue;
                    }
                    //  If this row is adjacent to the previous row and same size, add to the block.
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10a26:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a28:	f8b0 1166 	ldrh.w	r1, [r0, #358]	; 0x166
   10a2c:	3101      	adds	r1, #1
   10a2e:	b28a      	uxth	r2, r1
   10a30:	460b      	mov	r3, r1
   10a32:	428a      	cmp	r2, r1
   10a34:	9313      	str	r3, [sp, #76]	; 0x4c
   10a36:	f040 8128 	bne.w	10c8a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x37a>
   10a3a:	e069      	b.n	10b10 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x200>
   10a3c:	2000      	movs	r0, #0
                        self.first_row = false;
   10a3e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10a40:	f881 0168 	strb.w	r0, [r1, #360]	; 0x168
                        self.x_left = x_left;
   10a44:	981d      	ldr	r0, [sp, #116]	; 0x74
   10a46:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                        self.x_right = x_right;
   10a4a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10a4c:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                        self.y_top = y;
   10a50:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10a52:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                        self.y_bottom = y;
   10a56:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                        self.colors.clear();
   10a5a:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10a5e:	f004 faf4 	bl	1504a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10a62:	e7ff      	b.n	10a64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x154>
                        self.colors.extend_from_slice(&colors)
   10a64:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10a66:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10a6a:	a8da      	add	r0, sp, #872	; 0x368
   10a6c:	9112      	str	r1, [sp, #72]	; 0x48
   10a6e:	f004 fa5f 	bl	14f30 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10a72:	9011      	str	r0, [sp, #68]	; 0x44
   10a74:	9110      	str	r1, [sp, #64]	; 0x40
   10a76:	e7ff      	b.n	10a78 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x168>
   10a78:	9812      	ldr	r0, [sp, #72]	; 0x48
   10a7a:	9911      	ldr	r1, [sp, #68]	; 0x44
   10a7c:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10a7e:	f004 faa0 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10a82:	900f      	str	r0, [sp, #60]	; 0x3c
   10a84:	e7ff      	b.n	10a86 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x176>
   10a86:	980f      	ldr	r0, [sp, #60]	; 0x3c
   10a88:	f000 0001 	and.w	r0, r0, #1
   10a8c:	f24f 314c 	movw	r1, #62284	; 0xf34c
   10a90:	f2c0 0101 	movt	r1, #1
   10a94:	f24f 33dc 	movw	r3, #62428	; 0xf3dc
   10a98:	f2c0 0301 	movt	r3, #1
   10a9c:	2205      	movs	r2, #5
   10a9e:	f004 fe5b 	bl	15758 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10aa2:	e7ff      	b.n	10aa4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x194>
                        continue;
   10aa4:	e7ff      	b.n	10aa6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
   10aa6:	a8da      	add	r0, sp, #872	; 0x368
                    self.colors.clear();
                    self.colors.extend_from_slice(&colors)
                        .expect("never");
                    return Some(row);
                }
            }
   10aa8:	f001 f951 	bl	11d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10aac:	e7ff      	b.n	10aae <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x19e>
        }
   10aae:	9820      	ldr	r0, [sp, #128]	; 0x80
   10ab0:	2801      	cmp	r0, #1
   10ab2:	f000 80e2 	beq.w	10c7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
   10ab6:	e0e4      	b.n	10c82 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x372>
   10ab8:	2001      	movs	r0, #1
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10aba:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10abe:	e00b      	b.n	10ad8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10ac0:	2000      	movs	r0, #0
   10ac2:	f88d 03d1 	strb.w	r0, [sp, #977]	; 0x3d1
   10ac6:	e007      	b.n	10ad8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1c8>
   10ac8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10aca:	f8b0 1162 	ldrh.w	r1, [r0, #354]	; 0x162
   10ace:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10ad0:	b293      	uxth	r3, r2
   10ad2:	428b      	cmp	r3, r1
   10ad4:	d0f0      	beq.n	10ab8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1a8>
   10ad6:	e7f3      	b.n	10ac0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10ad8:	f89d 03d1 	ldrb.w	r0, [sp, #977]	; 0x3d1
   10adc:	07c0      	lsls	r0, r0, #31
   10ade:	2800      	cmp	r0, #0
   10ae0:	d11d      	bne.n	10b1e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x20e>
   10ae2:	e03f      	b.n	10b64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
   10ae4:	2001      	movs	r0, #1
   10ae6:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10aea:	e00b      	b.n	10b04 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10aec:	2000      	movs	r0, #0
   10aee:	f88d 03d2 	strb.w	r0, [sp, #978]	; 0x3d2
   10af2:	e007      	b.n	10b04 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1f4>
   10af4:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10af6:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
   10afa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   10afc:	b293      	uxth	r3, r2
   10afe:	428b      	cmp	r3, r1
   10b00:	d0f0      	beq.n	10ae4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1d4>
   10b02:	e7f3      	b.n	10aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
   10b04:	f89d 03d2 	ldrb.w	r0, [sp, #978]	; 0x3d2
   10b08:	07c0      	lsls	r0, r0, #31
   10b0a:	2800      	cmp	r0, #0
   10b0c:	d1dc      	bne.n	10ac8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b8>
   10b0e:	e7d7      	b.n	10ac0 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1b0>
   10b10:	9813      	ldr	r0, [sp, #76]	; 0x4c
   10b12:	b281      	uxth	r1, r0
   10b14:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   10b16:	b293      	uxth	r3, r2
   10b18:	428b      	cmp	r3, r1
   10b1a:	d0eb      	beq.n	10af4 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1e4>
   10b1c:	e7e6      	b.n	10aec <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x1dc>
                        if self.colors.extend_from_slice(&colors).is_ok() {
   10b1e:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b20:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10b24:	a8da      	add	r0, sp, #872	; 0x368
   10b26:	910e      	str	r1, [sp, #56]	; 0x38
   10b28:	f004 fa02 	bl	14f30 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10b2c:	900d      	str	r0, [sp, #52]	; 0x34
   10b2e:	910c      	str	r1, [sp, #48]	; 0x30
   10b30:	e7ff      	b.n	10b32 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x222>
   10b32:	980e      	ldr	r0, [sp, #56]	; 0x38
   10b34:	990d      	ldr	r1, [sp, #52]	; 0x34
   10b36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10b38:	f004 fa43 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10b3c:	f88d 03d3 	strb.w	r0, [sp, #979]	; 0x3d3
   10b40:	e7ff      	b.n	10b42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x232>
   10b42:	f20d 30d3 	addw	r0, sp, #979	; 0x3d3
   10b46:	f004 fdc3 	bl	156d0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>
   10b4a:	900b      	str	r0, [sp, #44]	; 0x2c
   10b4c:	e7ff      	b.n	10b4e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x23e>
   10b4e:	980b      	ldr	r0, [sp, #44]	; 0x2c
   10b50:	07c1      	lsls	r1, r0, #31
   10b52:	2900      	cmp	r1, #0
   10b54:	d101      	bne.n	10b5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x24a>
   10b56:	e7ff      	b.n	10b58 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x248>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10b58:	e004      	b.n	10b64 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x254>
                            self.y_bottom = y;
   10b5a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   10b5c:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10b5e:	f8a1 0166 	strh.w	r0, [r1, #358]	; 0x166
                            continue;    
   10b62:	e7a0      	b.n	10aa6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x196>
                        x_left: self.x_left,
   10b64:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10b66:	f8b0 1160 	ldrh.w	r1, [r0, #352]	; 0x160
                        x_right: self.x_right,
   10b6a:	f8b0 2162 	ldrh.w	r2, [r0, #354]	; 0x162
                        y_top: self.y_top,
   10b6e:	f8b0 3164 	ldrh.w	r3, [r0, #356]	; 0x164
                        y_bottom: self.y_bottom,
   10b72:	f8b0 c166 	ldrh.w	ip, [r0, #358]	; 0x166
                        colors: self.colors.clone(),
   10b76:	f100 0e94 	add.w	lr, r0, #148	; 0x94
   10b7a:	f50d 6095 	add.w	r0, sp, #1192	; 0x4a8
   10b7e:	910a      	str	r1, [sp, #40]	; 0x28
   10b80:	4671      	mov	r1, lr
   10b82:	9209      	str	r2, [sp, #36]	; 0x24
   10b84:	9308      	str	r3, [sp, #32]
   10b86:	f8cd c01c 	str.w	ip, [sp, #28]
   10b8a:	f004 f9a1 	bl	14ed0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>
   10b8e:	e7ff      	b.n	10b90 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x280>
                    let row = PixelBlock {
   10b90:	980a      	ldr	r0, [sp, #40]	; 0x28
   10b92:	f8ad 04a0 	strh.w	r0, [sp, #1184]	; 0x4a0
   10b96:	9909      	ldr	r1, [sp, #36]	; 0x24
   10b98:	f8ad 14a2 	strh.w	r1, [sp, #1186]	; 0x4a2
   10b9c:	9a08      	ldr	r2, [sp, #32]
   10b9e:	f8ad 24a4 	strh.w	r2, [sp, #1188]	; 0x4a4
   10ba2:	9b07      	ldr	r3, [sp, #28]
   10ba4:	f8ad 34a6 	strh.w	r3, [sp, #1190]	; 0x4a6
   10ba8:	a8f5      	add	r0, sp, #980	; 0x3d4
   10baa:	f50d 6195 	add.w	r1, sp, #1192	; 0x4a8
   10bae:	22cc      	movs	r2, #204	; 0xcc
   10bb0:	f00c fb4c 	bl	1d24c <__aeabi_memcpy>
                    self.x_left = x_left;
   10bb4:	981d      	ldr	r0, [sp, #116]	; 0x74
   10bb6:	991f      	ldr	r1, [sp, #124]	; 0x7c
   10bb8:	f8a1 0160 	strh.w	r0, [r1, #352]	; 0x160
                    self.x_right = x_right;
   10bbc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   10bbe:	f8a1 2162 	strh.w	r2, [r1, #354]	; 0x162
                    self.y_top = y;
   10bc2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   10bc4:	f8a1 3164 	strh.w	r3, [r1, #356]	; 0x164
                    self.y_bottom = y;
   10bc8:	f8a1 3166 	strh.w	r3, [r1, #358]	; 0x166
                    self.colors.clear();
   10bcc:	f101 0094 	add.w	r0, r1, #148	; 0x94
   10bd0:	f004 fa3b 	bl	1504a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>
   10bd4:	e7ff      	b.n	10bd6 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2c6>
                    self.colors.extend_from_slice(&colors)
   10bd6:	981f      	ldr	r0, [sp, #124]	; 0x7c
   10bd8:	f100 0194 	add.w	r1, r0, #148	; 0x94
   10bdc:	a8da      	add	r0, sp, #872	; 0x368
   10bde:	9106      	str	r1, [sp, #24]
   10be0:	f004 f9a6 	bl	14f30 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>
   10be4:	9005      	str	r0, [sp, #20]
   10be6:	9104      	str	r1, [sp, #16]
   10be8:	e7ff      	b.n	10bea <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2da>
   10bea:	9806      	ldr	r0, [sp, #24]
   10bec:	9905      	ldr	r1, [sp, #20]
   10bee:	9a04      	ldr	r2, [sp, #16]
   10bf0:	f004 f9e7 	bl	14fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>
   10bf4:	9003      	str	r0, [sp, #12]
   10bf6:	e7ff      	b.n	10bf8 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x2e8>
   10bf8:	9803      	ldr	r0, [sp, #12]
   10bfa:	f000 0001 	and.w	r0, r0, #1
   10bfe:	f24f 314c 	movw	r1, #62284	; 0xf34c
   10c02:	f2c0 0101 	movt	r1, #1
   10c06:	f24f 33fc 	movw	r3, #62460	; 0xf3fc
   10c0a:	f2c0 0301 	movt	r3, #1
   10c0e:	2205      	movs	r2, #5
   10c10:	f004 fda2 	bl	15758 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>
   10c14:	e7ff      	b.n	10c16 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x306>
   10c16:	f20d 5074 	addw	r0, sp, #1396	; 0x574
   10c1a:	a9f5      	add	r1, sp, #980	; 0x3d4
   10c1c:	22d4      	movs	r2, #212	; 0xd4
                    return Some(row);
   10c1e:	9002      	str	r0, [sp, #8]
   10c20:	9201      	str	r2, [sp, #4]
   10c22:	f00c fb13 	bl	1d24c <__aeabi_memcpy>
   10c26:	981e      	ldr	r0, [sp, #120]	; 0x78
   10c28:	3004      	adds	r0, #4
   10c2a:	9902      	ldr	r1, [sp, #8]
   10c2c:	9a01      	ldr	r2, [sp, #4]
   10c2e:	f00c fb0d 	bl	1d24c <__aeabi_memcpy>
   10c32:	2001      	movs	r0, #1
   10c34:	991e      	ldr	r1, [sp, #120]	; 0x78
   10c36:	6008      	str	r0, [r1, #0]
   10c38:	a8da      	add	r0, sp, #872	; 0x368
            }
   10c3a:	f001 f888 	bl	11d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10c3e:	e7ff      	b.n	10c40 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x330>
                    return Some(row);
   10c40:	e017      	b.n	10c72 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x362>
   10c42:	2000      	movs	r0, #0
        }
   10c44:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
    }
   10c48:	f50d 6dcb 	add.w	sp, sp, #1624	; 0x658
   10c4c:	bd80      	pop	{r7, pc}
        }
   10c4e:	f89d 064b 	ldrb.w	r0, [sp, #1611]	; 0x64b
   10c52:	07c0      	lsls	r0, r0, #31
   10c54:	2800      	cmp	r0, #0
   10c56:	d0f4      	beq.n	10c42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10c58:	e7ff      	b.n	10c5a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x34a>
   10c5a:	2000      	movs	r0, #0
   10c5c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
   10c60:	a820      	add	r0, sp, #128	; 0x80
   10c62:	3004      	adds	r0, #4
   10c64:	f001 f873 	bl	11d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   10c68:	e7eb      	b.n	10c42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10c6a:	a820      	add	r0, sp, #128	; 0x80
   10c6c:	f001 f834 	bl	11cd8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10c70:	e7e7      	b.n	10c42 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x332>
   10c72:	9820      	ldr	r0, [sp, #128]	; 0x80
   10c74:	2801      	cmp	r0, #1
   10c76:	d0ea      	beq.n	10c4e <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x33e>
   10c78:	e7f7      	b.n	10c6a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x35a>
   10c7a:	2000      	movs	r0, #0
   10c7c:	f88d 064b 	strb.w	r0, [sp, #1611]	; 0x64b
                        continue;
   10c80:	e651      	b.n	10926 <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x16>
   10c82:	a820      	add	r0, sp, #128	; 0x80
        }
   10c84:	f001 f828 	bl	11cd8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>
   10c88:	e7f7      	b.n	10c7a <_ZN112_$LT$piet_embedded_graphics..batch..BlockIterator$LT$R$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h61e9b405c29c9859E+0x36a>
                    if y == self.y_bottom + 1 && x_left == self.x_left && x_right == self.x_right {                        
   10c8a:	f24f 30b0 	movw	r0, #62384	; 0xf3b0
   10c8e:	f2c0 0001 	movt	r0, #1
   10c92:	f24f 32ec 	movw	r2, #62444	; 0xf3ec
   10c96:	f2c0 0201 	movt	r2, #1
   10c9a:	211c      	movs	r1, #28
   10c9c:	f005 ff02 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   10ca0:	defe      	udf	#254	; 0xfe

00010ca2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>:
    }

    /// Converts the value of `self` to a `u8`. If the value cannot be
    /// represented by a `u8`, then `None` is returned.
    #[inline]
    fn to_u8(&self) -> Option<u8> {
   10ca2:	b580      	push	{r7, lr}
   10ca4:	b08a      	sub	sp, #40	; 0x28
   10ca6:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   10ca8:	f001 fe53 	bl	12952 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>
   10cac:	9307      	str	r3, [sp, #28]
   10cae:	9206      	str	r2, [sp, #24]
   10cb0:	9105      	str	r1, [sp, #20]
   10cb2:	9004      	str	r0, [sp, #16]
   10cb4:	e7ff      	b.n	10cb6 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x14>
   10cb6:	a804      	add	r0, sp, #16
   10cb8:	f003 ffdc 	bl	14c74 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   10cbc:	9003      	str	r0, [sp, #12]
   10cbe:	e7ff      	b.n	10cc0 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x1e>
   10cc0:	9803      	ldr	r0, [sp, #12]
   10cc2:	f004 f8aa 	bl	14e1a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   10cc6:	9002      	str	r0, [sp, #8]
   10cc8:	9101      	str	r1, [sp, #4]
   10cca:	e7ff      	b.n	10ccc <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE+0x2a>
    }
   10ccc:	9802      	ldr	r0, [sp, #8]
   10cce:	f000 0001 	and.w	r0, r0, #1
   10cd2:	9901      	ldr	r1, [sp, #4]
   10cd4:	b00a      	add	sp, #40	; 0x28
   10cd6:	bd80      	pop	{r7, pc}

00010cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>:
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }

    pub fn hard_reset(&mut self) -> Result<(), ()>
   10cd8:	b580      	push	{r7, lr}
   10cda:	b090      	sub	sp, #64	; 0x40
   10cdc:	900b      	str	r0, [sp, #44]	; 0x2c
    {
        self.rst.set_high().map_err(|_| ())?;
   10cde:	f100 010c 	add.w	r1, r0, #12
   10ce2:	9006      	str	r0, [sp, #24]
   10ce4:	4608      	mov	r0, r1
   10ce6:	f7ff f821 	bl	fd2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10cea:	9005      	str	r0, [sp, #20]
   10cec:	e7ff      	b.n	10cee <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x16>
   10cee:	9805      	ldr	r0, [sp, #20]
   10cf0:	f004 fe2a 	bl	15948 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>
   10cf4:	9004      	str	r0, [sp, #16]
   10cf6:	e7ff      	b.n	10cf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x20>
   10cf8:	9804      	ldr	r0, [sp, #16]
   10cfa:	f000 0001 	and.w	r0, r0, #1
   10cfe:	f7fe faf0 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d02:	f88d 001f 	strb.w	r0, [sp, #31]
   10d06:	e7ff      	b.n	10d08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x30>
   10d08:	f89d 001f 	ldrb.w	r0, [sp, #31]
   10d0c:	07c1      	lsls	r1, r0, #31
   10d0e:	2900      	cmp	r1, #0
   10d10:	d001      	beq.n	10d16 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3e>
   10d12:	e7ff      	b.n	10d14 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x3c>
   10d14:	e006      	b.n	10d24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x4c>
        self.rst.set_low().map_err(|_| ())?;
   10d16:	9806      	ldr	r0, [sp, #24]
   10d18:	300c      	adds	r0, #12
   10d1a:	f7fe fffc 	bl	fd16 <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$7set_low17h94011d5dbd83f375E>
   10d1e:	9003      	str	r0, [sp, #12]
   10d20:	e00d      	b.n	10d3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x66>
        self.rst.set_high().map_err(|_| ())?;
   10d22:	defe      	udf	#254	; 0xfe
   10d24:	f002 fa02 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d28:	e003      	b.n	10d32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x5a>
        self.rst.set_high().map_err(|_| ())
    }
   10d2a:	f89d 001e 	ldrb.w	r0, [sp, #30]
   10d2e:	b010      	add	sp, #64	; 0x40
   10d30:	bd80      	pop	{r7, pc}
        self.rst.set_high().map_err(|_| ())?;
   10d32:	f004 fe5e 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d36:	f88d 001e 	strb.w	r0, [sp, #30]
   10d3a:	e7ff      	b.n	10d3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x64>
   10d3c:	e7f5      	b.n	10d2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_low().map_err(|_| ())?;
   10d3e:	9803      	ldr	r0, [sp, #12]
   10d40:	f004 fdad 	bl	1589e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>
   10d44:	9002      	str	r0, [sp, #8]
   10d46:	e7ff      	b.n	10d48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x70>
   10d48:	9802      	ldr	r0, [sp, #8]
   10d4a:	f000 0001 	and.w	r0, r0, #1
   10d4e:	f7fe fac8 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10d52:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   10d56:	e7ff      	b.n	10d58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x80>
   10d58:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   10d5c:	07c1      	lsls	r1, r0, #31
   10d5e:	2900      	cmp	r1, #0
   10d60:	d001      	beq.n	10d66 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8e>
   10d62:	e7ff      	b.n	10d64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x8c>
   10d64:	e006      	b.n	10d74 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x9c>
        self.rst.set_high().map_err(|_| ())
   10d66:	9806      	ldr	r0, [sp, #24]
   10d68:	300c      	adds	r0, #12
   10d6a:	f7fe ffdf 	bl	fd2c <_ZN74_$LT$mynewt..hal..GPIO$u20$as$u20$embedded_hal..digital..v2..OutputPin$GT$8set_high17h1bf2e3102b5bb2efE>
   10d6e:	9001      	str	r0, [sp, #4]
   10d70:	e009      	b.n	10d86 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xae>
        self.rst.set_low().map_err(|_| ())?;
   10d72:	defe      	udf	#254	; 0xfe
   10d74:	f002 f9da 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10d78:	e7ff      	b.n	10d7a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xa2>
   10d7a:	f004 fe3a 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10d7e:	f88d 001e 	strb.w	r0, [sp, #30]
   10d82:	e7ff      	b.n	10d84 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xac>
   10d84:	e7d1      	b.n	10d2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>
        self.rst.set_high().map_err(|_| ())
   10d86:	9801      	ldr	r0, [sp, #4]
   10d88:	f004 fd34 	bl	157f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>
   10d8c:	f88d 001e 	strb.w	r0, [sp, #30]
   10d90:	e7ff      	b.n	10d92 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0xba>
    }
   10d92:	e7ca      	b.n	10d2a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE+0x52>

00010d94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>:
        self.rst.set_low().map_err(|_| ())?;
   10d94:	b082      	sub	sp, #8
   10d96:	9001      	str	r0, [sp, #4]
   10d98:	e7ff      	b.n	10d9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE+0x6>
   10d9a:	b002      	add	sp, #8
   10d9c:	4770      	bx	lr

00010d9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>:
        self.rst.set_high().map_err(|_| ())?;
   10d9e:	b082      	sub	sp, #8
   10da0:	9001      	str	r0, [sp, #4]
   10da2:	e7ff      	b.n	10da4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE+0x6>
   10da4:	b002      	add	sp, #8
   10da6:	4770      	bx	lr

00010da8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>:
        self.rst.set_high().map_err(|_| ())
   10da8:	b082      	sub	sp, #8
   10daa:	9001      	str	r0, [sp, #4]
   10dac:	e7ff      	b.n	10dae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE+0x6>
   10dae:	b002      	add	sp, #8
   10db0:	4770      	bx	lr

00010db2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E>:
            .expect("spi flush fail");
        Ok(())
    }

    /// Sets pixel colors at the given drawing window
    pub fn set_pixels<P: IntoIterator<Item = u16>>(&mut self, sx: u16, sy: u16, ex: u16, ey: u16, colors: P) -> Result <(), ()> {
   10db2:	b5f0      	push	{r4, r5, r6, r7, lr}
   10db4:	b0c7      	sub	sp, #284	; 0x11c
   10db6:	f8dd c134 	ldr.w	ip, [sp, #308]	; 0x134
   10dba:	f8dd e130 	ldr.w	lr, [sp, #304]	; 0x130
   10dbe:	461c      	mov	r4, r3
   10dc0:	4615      	mov	r5, r2
   10dc2:	460e      	mov	r6, r1
   10dc4:	9040      	str	r0, [sp, #256]	; 0x100
   10dc6:	f8ad 1104 	strh.w	r1, [sp, #260]	; 0x104
   10dca:	f8ad 2106 	strh.w	r2, [sp, #262]	; 0x106
   10dce:	f8ad 3108 	strh.w	r3, [sp, #264]	; 0x108
   10dd2:	f8ad e10a 	strh.w	lr, [sp, #266]	; 0x10a
   10dd6:	2700      	movs	r7, #0
        self.set_address_window(sx, sy, ex, ey)?;
   10dd8:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10ddc:	2701      	movs	r7, #1
   10dde:	f88d 70ff 	strb.w	r7, [sp, #255]	; 0xff
   10de2:	466f      	mov	r7, sp
   10de4:	f8c7 e000 	str.w	lr, [r7]
   10de8:	900a      	str	r0, [sp, #40]	; 0x28
   10dea:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   10dee:	9408      	str	r4, [sp, #32]
   10df0:	9507      	str	r5, [sp, #28]
   10df2:	9606      	str	r6, [sp, #24]
   10df4:	f000 fa44 	bl	11280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>
   10df8:	9005      	str	r0, [sp, #20]
   10dfa:	e7ff      	b.n	10dfc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x4a>
   10dfc:	9805      	ldr	r0, [sp, #20]
   10dfe:	f000 0001 	and.w	r0, r0, #1
   10e02:	f7fe fa6e 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10e06:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   10e0a:	e7ff      	b.n	10e0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x5a>
   10e0c:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   10e10:	07c1      	lsls	r1, r0, #31
   10e12:	2900      	cmp	r1, #0
   10e14:	d001      	beq.n	10e1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x68>
   10e16:	e7ff      	b.n	10e18 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x66>
   10e18:	e00f      	b.n	10e3a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x88>
   10e1a:	2000      	movs	r0, #0
        self.write_pixels(colors) ? ;
   10e1c:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10e20:	a80c      	add	r0, sp, #48	; 0x30
   10e22:	22cc      	movs	r2, #204	; 0xcc
   10e24:	9004      	str	r0, [sp, #16]
   10e26:	9909      	ldr	r1, [sp, #36]	; 0x24
   10e28:	f00c fa10 	bl	1d24c <__aeabi_memcpy>
   10e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
   10e2e:	9904      	ldr	r1, [sp, #16]
   10e30:	f000 f884 	bl	10f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>
   10e34:	9003      	str	r0, [sp, #12]
   10e36:	e00d      	b.n	10e54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa2>
        self.set_address_window(sx, sy, ex, ey)?;
   10e38:	defe      	udf	#254	; 0xfe
   10e3a:	f002 f977 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10e3e:	e003      	b.n	10e48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x96>

        #[cfg(feature = "noblock_spi")]         //  If non-blocking SPI is enabled...
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
            .expect("spi flush fail");
        Ok(())
    }
   10e40:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   10e44:	b047      	add	sp, #284	; 0x11c
   10e46:	bdf0      	pop	{r4, r5, r6, r7, pc}
        self.set_address_window(sx, sy, ex, ey)?;
   10e48:	f004 fdd3 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10e4c:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10e50:	e7ff      	b.n	10e52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xa0>
   10e52:	e034      	b.n	10ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        self.write_pixels(colors) ? ;
   10e54:	9803      	ldr	r0, [sp, #12]
   10e56:	f000 0001 	and.w	r0, r0, #1
   10e5a:	f7fe fa42 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10e5e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   10e62:	e7ff      	b.n	10e64 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xb2>
   10e64:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   10e68:	07c1      	lsls	r1, r0, #31
   10e6a:	2900      	cmp	r1, #0
   10e6c:	d001      	beq.n	10e72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xc0>
   10e6e:	e7ff      	b.n	10e70 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xbe>
   10e70:	e004      	b.n	10e7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xca>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10e72:	f003 f904 	bl	1407e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   10e76:	9002      	str	r0, [sp, #8]
   10e78:	e009      	b.n	10e8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xdc>
        self.write_pixels(colors) ? ;
   10e7a:	defe      	udf	#254	; 0xfe
   10e7c:	f002 f956 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10e80:	e7ff      	b.n	10e82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xd0>
   10e82:	f004 fdb6 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10e86:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   10e8a:	e7ff      	b.n	10e8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xda>
   10e8c:	e017      	b.n	10ebe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x10c>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   10e8e:	f24f 410c 	movw	r1, #62476	; 0xf40c
   10e92:	f2c0 0101 	movt	r1, #1
   10e96:	f24f 4368 	movw	r3, #62568	; 0xf468
   10e9a:	f2c0 0301 	movt	r3, #1
   10e9e:	220e      	movs	r2, #14
   10ea0:	9802      	ldr	r0, [sp, #8]
   10ea2:	f7fe f9e5 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10ea6:	e7ff      	b.n	10ea8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xf6>
   10ea8:	2000      	movs	r0, #0
        Ok(())
   10eaa:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   10eae:	e7c7      	b.n	10e40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10eb0:	2000      	movs	r0, #0
   10eb2:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   10eb6:	9809      	ldr	r0, [sp, #36]	; 0x24
   10eb8:	f000 ff1d 	bl	11cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   10ebc:	e7c0      	b.n	10e40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>
   10ebe:	f89d 00ff 	ldrb.w	r0, [sp, #255]	; 0xff
   10ec2:	07c0      	lsls	r0, r0, #31
   10ec4:	2800      	cmp	r0, #0
   10ec6:	d1f3      	bne.n	10eb0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0xfe>
   10ec8:	e7ba      	b.n	10e40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10set_pixels17hee84ce013b5147f4E+0x8e>

00010eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>:
    fn write_data(&mut self, data: &[u8]) -> Result<(), ()> {
   10eca:	b580      	push	{r7, lr}
   10ecc:	b084      	sub	sp, #16
   10ece:	9001      	str	r0, [sp, #4]
   10ed0:	9102      	str	r1, [sp, #8]
   10ed2:	9203      	str	r2, [sp, #12]
        mynewt::spi::spi_noblock_write_data(
   10ed4:	4608      	mov	r0, r1
   10ed6:	4611      	mov	r1, r2
   10ed8:	f003 f87f 	bl	13fda <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   10edc:	9000      	str	r0, [sp, #0]
   10ede:	e7ff      	b.n	10ee0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x16>
   10ee0:	f24f 4178 	movw	r1, #62584	; 0xf478
   10ee4:	f2c0 0101 	movt	r1, #1
   10ee8:	f24f 4388 	movw	r3, #62600	; 0xf488
   10eec:	f2c0 0301 	movt	r3, #1
   10ef0:	220d      	movs	r2, #13
   10ef2:	9800      	ldr	r0, [sp, #0]
   10ef4:	f7fe f9bc 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   10ef8:	e7ff      	b.n	10efa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E+0x30>
   10efa:	2000      	movs	r0, #0
    }
   10efc:	b004      	add	sp, #16
   10efe:	bd80      	pop	{r7, pc}

00010f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>:
    fn write_word(&mut self, value: u16) -> Result<(), ()> {
   10f00:	b580      	push	{r7, lr}
   10f02:	b088      	sub	sp, #32
   10f04:	460a      	mov	r2, r1
   10f06:	9006      	str	r0, [sp, #24]
   10f08:	f8ad 101e 	strh.w	r1, [sp, #30]
        let bytes: [u8; 2] = unsafe { transmute(value.to_be()) };
   10f0c:	9004      	str	r0, [sp, #16]
   10f0e:	4608      	mov	r0, r1
   10f10:	9203      	str	r2, [sp, #12]
   10f12:	f000 feb9 	bl	11c88 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>
   10f16:	9002      	str	r0, [sp, #8]
   10f18:	e7ff      	b.n	10f1a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x1a>
   10f1a:	9802      	ldr	r0, [sp, #8]
   10f1c:	f8ad 0016 	strh.w	r0, [sp, #22]
   10f20:	e7ff      	b.n	10f22 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x22>
   10f22:	f10d 0116 	add.w	r1, sp, #22
   10f26:	2202      	movs	r2, #2
        self.write_data(&bytes)
   10f28:	9804      	ldr	r0, [sp, #16]
   10f2a:	f7ff ffce 	bl	10eca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_data17h748aaa24aa297ab6E>
   10f2e:	9001      	str	r0, [sp, #4]
   10f30:	e7ff      	b.n	10f32 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E+0x32>
    }
   10f32:	9801      	ldr	r0, [sp, #4]
   10f34:	f000 0001 	and.w	r0, r0, #1
   10f38:	b008      	add	sp, #32
   10f3a:	bd80      	pop	{r7, pc}

00010f3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE>:
    pub fn write_pixels<P: IntoIterator<Item = u16>>(&mut self, colors: P) -> Result <(), ()> {
   10f3c:	b580      	push	{r7, lr}
   10f3e:	f5ad 7d2e 	sub.w	sp, sp, #696	; 0x2b8
   10f42:	90a8      	str	r0, [sp, #672]	; 0x2a0
   10f44:	2200      	movs	r2, #0
        self.write_command(Instruction::RAMWR, None)?;
   10f46:	f88d 229f 	strb.w	r2, [sp, #671]	; 0x29f
   10f4a:	2301      	movs	r3, #1
   10f4c:	f88d 329f 	strb.w	r3, [sp, #671]	; 0x29f
   10f50:	232c      	movs	r3, #44	; 0x2c
   10f52:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
   10f56:	920a      	str	r2, [sp, #40]	; 0x28
   10f58:	9209      	str	r2, [sp, #36]	; 0x24
   10f5a:	9209      	str	r2, [sp, #36]	; 0x24
   10f5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f60:	f89d c023 	ldrb.w	ip, [sp, #35]	; 0x23
   10f64:	9007      	str	r0, [sp, #28]
   10f66:	9106      	str	r1, [sp, #24]
   10f68:	4661      	mov	r1, ip
   10f6a:	f000 f898 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   10f6e:	9005      	str	r0, [sp, #20]
   10f70:	e7ff      	b.n	10f72 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x36>
   10f72:	9805      	ldr	r0, [sp, #20]
   10f74:	f000 0001 	and.w	r0, r0, #1
   10f78:	f7fe f9b3 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   10f7c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
   10f80:	e7ff      	b.n	10f82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x46>
   10f82:	f89d 0022 	ldrb.w	r0, [sp, #34]	; 0x22
   10f86:	07c1      	lsls	r1, r0, #31
   10f88:	2900      	cmp	r1, #0
   10f8a:	d001      	beq.n	10f90 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x54>
   10f8c:	e7ff      	b.n	10f8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x52>
   10f8e:	e00e      	b.n	10fae <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x72>
   10f90:	2000      	movs	r0, #0
        for color in colors {
   10f92:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   10f96:	a83f      	add	r0, sp, #252	; 0xfc
   10f98:	22cc      	movs	r2, #204	; 0xcc
   10f9a:	9004      	str	r0, [sp, #16]
   10f9c:	9906      	ldr	r1, [sp, #24]
   10f9e:	f00c f955 	bl	1d24c <__aeabi_memcpy>
   10fa2:	a80b      	add	r0, sp, #44	; 0x2c
   10fa4:	9904      	ldr	r1, [sp, #16]
   10fa6:	f004 f858 	bl	1505a <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>
   10faa:	e00e      	b.n	10fca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8e>
        self.write_command(Instruction::RAMWR, None)?;
   10fac:	defe      	udf	#254	; 0xfe
   10fae:	f002 f8bd 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   10fb2:	e004      	b.n	10fbe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x82>
    }
   10fb4:	f89d 0021 	ldrb.w	r0, [sp, #33]	; 0x21
   10fb8:	f50d 7d2e 	add.w	sp, sp, #696	; 0x2b8
   10fbc:	bd80      	pop	{r7, pc}
        self.write_command(Instruction::RAMWR, None)?;
   10fbe:	f004 fd18 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   10fc2:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   10fc6:	e7ff      	b.n	10fc8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x8c>
   10fc8:	e063      	b.n	11092 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
   10fca:	a872      	add	r0, sp, #456	; 0x1c8
   10fcc:	a90b      	add	r1, sp, #44	; 0x2c
   10fce:	22d0      	movs	r2, #208	; 0xd0
        for color in colors {
   10fd0:	f00c f93c 	bl	1d24c <__aeabi_memcpy>
   10fd4:	e7ff      	b.n	10fd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
   10fd6:	a872      	add	r0, sp, #456	; 0x1c8
   10fd8:	f004 f855 	bl	15086 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>
   10fdc:	f8ad 129a 	strh.w	r1, [sp, #666]	; 0x29a
   10fe0:	f8ad 0298 	strh.w	r0, [sp, #664]	; 0x298
   10fe4:	e7ff      	b.n	10fe6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xaa>
   10fe6:	f8bd 0298 	ldrh.w	r0, [sp, #664]	; 0x298
   10fea:	4601      	mov	r1, r0
   10fec:	2800      	cmp	r0, #0
   10fee:	d001      	beq.n	10ff4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb8>
   10ff0:	e7ff      	b.n	10ff2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xb6>
   10ff2:	e004      	b.n	10ffe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xc2>
   10ff4:	a872      	add	r0, sp, #456	; 0x1c8
        }
   10ff6:	f000 fe9d 	bl	11d34 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   10ffa:	e02e      	b.n	1105a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11e>
        for color in colors {
   10ffc:	defe      	udf	#254	; 0xfe
   10ffe:	f8bd 029a 	ldrh.w	r0, [sp, #666]	; 0x29a
   11002:	f8ad 02b2 	strh.w	r0, [sp, #690]	; 0x2b2
   11006:	f8ad 02b4 	strh.w	r0, [sp, #692]	; 0x2b4
   1100a:	f8ad 02b6 	strh.w	r0, [sp, #694]	; 0x2b6
            self.write_word(color)?;
   1100e:	9907      	ldr	r1, [sp, #28]
   11010:	9003      	str	r0, [sp, #12]
   11012:	4608      	mov	r0, r1
   11014:	9903      	ldr	r1, [sp, #12]
   11016:	f7ff ff73 	bl	10f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1101a:	9002      	str	r0, [sp, #8]
   1101c:	e7ff      	b.n	1101e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xe2>
   1101e:	9802      	ldr	r0, [sp, #8]
   11020:	f000 0001 	and.w	r0, r0, #1
   11024:	f7fe f95d 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11028:	f88d 029e 	strb.w	r0, [sp, #670]	; 0x29e
   1102c:	e7ff      	b.n	1102e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xf2>
   1102e:	f89d 029e 	ldrb.w	r0, [sp, #670]	; 0x29e
   11032:	07c1      	lsls	r1, r0, #31
   11034:	2900      	cmp	r1, #0
   11036:	d001      	beq.n	1103c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x100>
   11038:	e7ff      	b.n	1103a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0xfe>
   1103a:	e001      	b.n	11040 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x104>
        for color in colors {
   1103c:	e7cb      	b.n	10fd6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x9a>
            self.write_word(color)?;
   1103e:	defe      	udf	#254	; 0xfe
   11040:	f002 f874 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11044:	e7ff      	b.n	11046 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x10a>
   11046:	f004 fcd4 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1104a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
   1104e:	e7ff      	b.n	11050 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x114>
   11050:	a872      	add	r0, sp, #456	; 0x1c8
        }
   11052:	f000 fe6f 	bl	11d34 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>
   11056:	e7ff      	b.n	11058 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x11c>
    }
   11058:	e01b      	b.n	11092 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x156>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   1105a:	f003 f810 	bl	1407e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   1105e:	9001      	str	r0, [sp, #4]
   11060:	e7ff      	b.n	11062 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x126>
   11062:	f24f 410c 	movw	r1, #62476	; 0xf40c
   11066:	f2c0 0101 	movt	r1, #1
   1106a:	f24f 4398 	movw	r3, #62616	; 0xf498
   1106e:	f2c0 0301 	movt	r3, #1
   11072:	220e      	movs	r2, #14
   11074:	9801      	ldr	r0, [sp, #4]
   11076:	f7fe f8fb 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1107a:	e7ff      	b.n	1107c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x140>
   1107c:	2000      	movs	r0, #0
        Ok(())
   1107e:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
    }
   11082:	e797      	b.n	10fb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   11084:	2000      	movs	r0, #0
   11086:	f88d 029f 	strb.w	r0, [sp, #671]	; 0x29f
   1108a:	9806      	ldr	r0, [sp, #24]
   1108c:	f000 fe33 	bl	11cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11090:	e790      	b.n	10fb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>
   11092:	f89d 029f 	ldrb.w	r0, [sp, #671]	; 0x29f
   11096:	07c0      	lsls	r0, r0, #31
   11098:	2800      	cmp	r0, #0
   1109a:	d1f3      	bne.n	11084 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x148>
   1109c:	e78a      	b.n	10fb4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$12write_pixels17hdc9ff7ee2ebe3c7eE+0x78>

0001109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>:
    fn write_command(&mut self, command: Instruction, params: Option<&[u8]>) -> Result<(), ()> {
   1109e:	b580      	push	{r7, lr}
   110a0:	b08e      	sub	sp, #56	; 0x38
   110a2:	468c      	mov	ip, r1
   110a4:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
   110a8:	920b      	str	r2, [sp, #44]	; 0x2c
   110aa:	930c      	str	r3, [sp, #48]	; 0x30
   110ac:	900d      	str	r0, [sp, #52]	; 0x34
   110ae:	f10d 002b 	add.w	r0, sp, #43	; 0x2b
            command.to_u8().unwrap()
   110b2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   110b6:	f000 fdbd 	bl	11c34 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>
   110ba:	9008      	str	r0, [sp, #32]
   110bc:	9107      	str	r1, [sp, #28]
   110be:	e7ff      	b.n	110c0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x22>
   110c0:	9808      	ldr	r0, [sp, #32]
   110c2:	f000 0001 	and.w	r0, r0, #1
   110c6:	f24f 42a8 	movw	r2, #62632	; 0xf4a8
   110ca:	f2c0 0201 	movt	r2, #1
   110ce:	9907      	ldr	r1, [sp, #28]
   110d0:	f003 fe12 	bl	14cf8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   110d4:	9006      	str	r0, [sp, #24]
   110d6:	e7ff      	b.n	110d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x3a>
        mynewt::spi::spi_noblock_write_command(
   110d8:	9806      	ldr	r0, [sp, #24]
   110da:	f002 ff36 	bl	13f4a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>
   110de:	9005      	str	r0, [sp, #20]
   110e0:	e7ff      	b.n	110e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x44>
   110e2:	f24f 41b8 	movw	r1, #62648	; 0xf4b8
   110e6:	f2c0 0101 	movt	r1, #1
   110ea:	f24f 43c4 	movw	r3, #62660	; 0xf4c4
   110ee:	f2c0 0301 	movt	r3, #1
   110f2:	220c      	movs	r2, #12
   110f4:	9805      	ldr	r0, [sp, #20]
   110f6:	f7fe f8bb 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   110fa:	e7ff      	b.n	110fc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x5e>
   110fc:	a80b      	add	r0, sp, #44	; 0x2c
        if params.is_some() {
   110fe:	f003 fe56 	bl	14dae <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>
   11102:	9004      	str	r0, [sp, #16]
   11104:	e7ff      	b.n	11106 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x68>
   11106:	9804      	ldr	r0, [sp, #16]
   11108:	07c1      	lsls	r1, r0, #31
   1110a:	2900      	cmp	r1, #0
   1110c:	d01f      	beq.n	1114e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1110e:	e7ff      	b.n	11110 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x72>
                params.unwrap()
   11110:	980b      	ldr	r0, [sp, #44]	; 0x2c
   11112:	990c      	ldr	r1, [sp, #48]	; 0x30
   11114:	f24f 42d4 	movw	r2, #62676	; 0xf4d4
   11118:	f2c0 0201 	movt	r2, #1
   1111c:	f003 fe15 	bl	14d4a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>
   11120:	9003      	str	r0, [sp, #12]
   11122:	9102      	str	r1, [sp, #8]
   11124:	e7ff      	b.n	11126 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x88>
            mynewt::spi::spi_noblock_write_data(
   11126:	9803      	ldr	r0, [sp, #12]
   11128:	9902      	ldr	r1, [sp, #8]
   1112a:	f002 ff56 	bl	13fda <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>
   1112e:	9001      	str	r0, [sp, #4]
   11130:	e7ff      	b.n	11132 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0x94>
   11132:	f24f 4178 	movw	r1, #62584	; 0xf478
   11136:	f2c0 0101 	movt	r1, #1
   1113a:	f24f 43e4 	movw	r3, #62692	; 0xf4e4
   1113e:	f2c0 0301 	movt	r3, #1
   11142:	220d      	movs	r2, #13
   11144:	9801      	ldr	r0, [sp, #4]
   11146:	f7fe f893 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   1114a:	e7ff      	b.n	1114c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xae>
        if params.is_some() {
   1114c:	e7ff      	b.n	1114e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE+0xb0>
   1114e:	2000      	movs	r0, #0
    }
   11150:	b00e      	add	sp, #56	; 0x38
   11152:	bd80      	pop	{r7, pc}

00011154 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE>:
    pub fn set_orientation(&mut self, orientation: &Orientation) -> Result<(), ()> {
   11154:	b580      	push	{r7, lr}
   11156:	b098      	sub	sp, #96	; 0x60
   11158:	9012      	str	r0, [sp, #72]	; 0x48
   1115a:	9113      	str	r1, [sp, #76]	; 0x4c
        if self.rgb {
   1115c:	7d02      	ldrb	r2, [r0, #20]
   1115e:	07d2      	lsls	r2, r2, #31
   11160:	2a00      	cmp	r2, #0
   11162:	910a      	str	r1, [sp, #40]	; 0x28
   11164:	9009      	str	r0, [sp, #36]	; 0x24
   11166:	d109      	bne.n	1117c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x28>
   11168:	e7ff      	b.n	1116a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x16>
   1116a:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   1116c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   11170:	980a      	ldr	r0, [sp, #40]	; 0x28
   11172:	f7ff fd96 	bl	10ca2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11176:	9008      	str	r0, [sp, #32]
   11178:	9107      	str	r1, [sp, #28]
   1117a:	e044      	b.n	11206 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb2>
   1117c:	2036      	movs	r0, #54	; 0x36
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap()]
   1117e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
   11182:	980a      	ldr	r0, [sp, #40]	; 0x28
   11184:	f7ff fd8d 	bl	10ca2 <_ZN10num_traits4cast11ToPrimitive5to_u817h26f762317a1153adE>
   11188:	9006      	str	r0, [sp, #24]
   1118a:	9105      	str	r1, [sp, #20]
   1118c:	e7ff      	b.n	1118e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x3a>
   1118e:	9806      	ldr	r0, [sp, #24]
   11190:	f000 0001 	and.w	r0, r0, #1
   11194:	f24f 42f4 	movw	r2, #62708	; 0xf4f4
   11198:	f2c0 0201 	movt	r2, #1
   1119c:	9905      	ldr	r1, [sp, #20]
   1119e:	f003 fdab 	bl	14cf8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   111a2:	9004      	str	r0, [sp, #16]
   111a4:	e7ff      	b.n	111a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x52>
   111a6:	9804      	ldr	r0, [sp, #16]
   111a8:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   111ac:	f10d 0139 	add.w	r1, sp, #57	; 0x39
   111b0:	910c      	str	r1, [sp, #48]	; 0x30
   111b2:	2101      	movs	r1, #1
   111b4:	910d      	str	r1, [sp, #52]	; 0x34
            self.write_command(
   111b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   111b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   111ba:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
   111be:	9809      	ldr	r0, [sp, #36]	; 0x24
   111c0:	f7ff ff6d 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   111c4:	9003      	str	r0, [sp, #12]
   111c6:	e7ff      	b.n	111c8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x74>
   111c8:	9803      	ldr	r0, [sp, #12]
   111ca:	f000 0001 	and.w	r0, r0, #1
   111ce:	f7fe f888 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   111d2:	f88d 002e 	strb.w	r0, [sp, #46]	; 0x2e
   111d6:	e7ff      	b.n	111d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x84>
            ))?;
   111d8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   111dc:	07c1      	lsls	r1, r0, #31
   111de:	2900      	cmp	r1, #0
   111e0:	d001      	beq.n	111e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x92>
   111e2:	e7ff      	b.n	111e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x90>
   111e4:	e001      	b.n	111ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x96>
        if self.rgb {
   111e6:	e047      	b.n	11278 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   111e8:	defe      	udf	#254	; 0xfe
            ))?;
   111ea:	f001 ff9f 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   111ee:	e003      	b.n	111f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xa4>
    }
   111f0:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
   111f4:	b018      	add	sp, #96	; 0x60
   111f6:	bd80      	pop	{r7, pc}
            ))?;
   111f8:	f004 fbfb 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   111fc:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11200:	e7ff      	b.n	11202 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xae>
   11202:	e7ff      	b.n	11204 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11204:	e7f4      	b.n	111f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>
                Instruction::MADCTL, Some(&[orientation.to_u8().unwrap() | 0x08 ]
   11206:	9808      	ldr	r0, [sp, #32]
   11208:	f000 0001 	and.w	r0, r0, #1
   1120c:	f24f 5204 	movw	r2, #62724	; 0xf504
   11210:	f2c0 0201 	movt	r2, #1
   11214:	9907      	ldr	r1, [sp, #28]
   11216:	f003 fd6f 	bl	14cf8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>
   1121a:	9002      	str	r0, [sp, #8]
   1121c:	e7ff      	b.n	1121e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xca>
   1121e:	9802      	ldr	r0, [sp, #8]
   11220:	f040 0108 	orr.w	r1, r0, #8
   11224:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   11228:	f10d 0147 	add.w	r1, sp, #71	; 0x47
   1122c:	910f      	str	r1, [sp, #60]	; 0x3c
   1122e:	2101      	movs	r1, #1
   11230:	9110      	str	r1, [sp, #64]	; 0x40
            self.write_command(
   11232:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11234:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11236:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   1123a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1123c:	f7ff ff2f 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11240:	9001      	str	r0, [sp, #4]
   11242:	e7ff      	b.n	11244 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xf0>
   11244:	9801      	ldr	r0, [sp, #4]
   11246:	f000 0001 	and.w	r0, r0, #1
   1124a:	f7fe f84a 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1124e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   11252:	e7ff      	b.n	11254 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x100>
            ))?;
   11254:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   11258:	07c1      	lsls	r1, r0, #31
   1125a:	2900      	cmp	r1, #0
   1125c:	d001      	beq.n	11262 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10e>
   1125e:	e7ff      	b.n	11260 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x10c>
   11260:	e001      	b.n	11266 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x112>
        if self.rgb {
   11262:	e009      	b.n	11278 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x124>
            self.write_command(
   11264:	defe      	udf	#254	; 0xfe
            ))?;
   11266:	f001 ff61 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1126a:	e7ff      	b.n	1126c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x118>
   1126c:	f004 fbc1 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11270:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
   11274:	e7ff      	b.n	11276 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x122>
   11276:	e7c5      	b.n	11204 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0xb0>
   11278:	2000      	movs	r0, #0
        Ok(())
   1127a:	f88d 002d 	strb.w	r0, [sp, #45]	; 0x2d
    }
   1127e:	e7b7      	b.n	111f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$15set_orientation17ha151a89ab44346caE+0x9c>

00011280 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE>:
    fn set_address_window(&mut self, sx: u16, sy: u16, ex: u16, ey: u16) -> Result<(), ()> {
   11280:	b5b0      	push	{r4, r5, r7, lr}
   11282:	b0a2      	sub	sp, #136	; 0x88
   11284:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
   11288:	469e      	mov	lr, r3
   1128a:	4614      	mov	r4, r2
   1128c:	460d      	mov	r5, r1
   1128e:	9015      	str	r0, [sp, #84]	; 0x54
   11290:	f8ad 1058 	strh.w	r1, [sp, #88]	; 0x58
   11294:	f8ad 205a 	strh.w	r2, [sp, #90]	; 0x5a
   11298:	f8ad 305c 	strh.w	r3, [sp, #92]	; 0x5c
   1129c:	f8ad c05e 	strh.w	ip, [sp, #94]	; 0x5e
   112a0:	212a      	movs	r1, #42	; 0x2a
        self.write_command(Instruction::CASET, None)?;
   112a2:	f88d 103b 	strb.w	r1, [sp, #59]	; 0x3b
   112a6:	2100      	movs	r1, #0
   112a8:	9110      	str	r1, [sp, #64]	; 0x40
   112aa:	910f      	str	r1, [sp, #60]	; 0x3c
   112ac:	910f      	str	r1, [sp, #60]	; 0x3c
   112ae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   112b0:	9b10      	ldr	r3, [sp, #64]	; 0x40
   112b2:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   112b6:	900d      	str	r0, [sp, #52]	; 0x34
   112b8:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
   112bc:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
   112c0:	940a      	str	r4, [sp, #40]	; 0x28
   112c2:	9509      	str	r5, [sp, #36]	; 0x24
   112c4:	f7ff feeb 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   112c8:	9008      	str	r0, [sp, #32]
   112ca:	e7ff      	b.n	112cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x4c>
   112cc:	9808      	ldr	r0, [sp, #32]
   112ce:	f000 0001 	and.w	r0, r0, #1
   112d2:	f7fe f806 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   112d6:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   112da:	e7ff      	b.n	112dc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x5c>
   112dc:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   112e0:	07c1      	lsls	r1, r0, #31
   112e2:	2900      	cmp	r1, #0
   112e4:	d001      	beq.n	112ea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x6a>
   112e6:	e7ff      	b.n	112e8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x68>
   112e8:	e00d      	b.n	11306 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x86>
        self.write_word(sx + self.dx)?;
   112ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   112ec:	8a01      	ldrh	r1, [r0, #16]
   112ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   112f0:	fa11 f182 	uxtah	r1, r1, r2
   112f4:	b28b      	uxth	r3, r1
   112f6:	468c      	mov	ip, r1
   112f8:	428b      	cmp	r3, r1
   112fa:	f8cd c01c 	str.w	ip, [sp, #28]
   112fe:	f040 80c2 	bne.w	11486 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x206>
   11302:	e00d      	b.n	11320 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xa0>
        self.write_command(Instruction::CASET, None)?;
   11304:	defe      	udf	#254	; 0xfe
   11306:	f001 ff11 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1130a:	e003      	b.n	11314 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x94>
    }
   1130c:	f89d 0039 	ldrb.w	r0, [sp, #57]	; 0x39
   11310:	b022      	add	sp, #136	; 0x88
   11312:	bdb0      	pop	{r4, r5, r7, pc}
        self.write_command(Instruction::CASET, None)?;
   11314:	f004 fb6d 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11318:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1131c:	e7ff      	b.n	1131e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x9e>
   1131e:	e7f5      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11320:	980d      	ldr	r0, [sp, #52]	; 0x34
   11322:	9907      	ldr	r1, [sp, #28]
   11324:	f7ff fdec 	bl	10f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11328:	9006      	str	r0, [sp, #24]
   1132a:	e7ff      	b.n	1132c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xac>
   1132c:	9806      	ldr	r0, [sp, #24]
   1132e:	f000 0001 	and.w	r0, r0, #1
   11332:	f7fd ffd6 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11336:	f88d 0044 	strb.w	r0, [sp, #68]	; 0x44
   1133a:	e7ff      	b.n	1133c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xbc>
   1133c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   11340:	07c1      	lsls	r1, r0, #31
   11342:	2900      	cmp	r1, #0
   11344:	d001      	beq.n	1134a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xca>
   11346:	e7ff      	b.n	11348 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xc8>
   11348:	e00d      	b.n	11366 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xe6>
        self.write_word(ex + self.dx)?;
   1134a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1134c:	8a01      	ldrh	r1, [r0, #16]
   1134e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   11350:	fa11 f182 	uxtah	r1, r1, r2
   11354:	b28b      	uxth	r3, r1
   11356:	468c      	mov	ip, r1
   11358:	428b      	cmp	r3, r1
   1135a:	f8cd c014 	str.w	ip, [sp, #20]
   1135e:	f040 809e 	bne.w	1149e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x21e>
   11362:	e009      	b.n	11378 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf8>
        self.write_word(sx + self.dx)?;
   11364:	defe      	udf	#254	; 0xfe
   11366:	f001 fee1 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1136a:	e7ff      	b.n	1136c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xec>
   1136c:	f004 fb41 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11370:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11374:	e7ff      	b.n	11376 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0xf6>
   11376:	e7c9      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ex + self.dx)?;
   11378:	980d      	ldr	r0, [sp, #52]	; 0x34
   1137a:	9905      	ldr	r1, [sp, #20]
   1137c:	f7ff fdc0 	bl	10f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11380:	9004      	str	r0, [sp, #16]
   11382:	e7ff      	b.n	11384 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x104>
   11384:	9804      	ldr	r0, [sp, #16]
   11386:	f000 0001 	and.w	r0, r0, #1
   1138a:	f7fd ffaa 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1138e:	f88d 0045 	strb.w	r0, [sp, #69]	; 0x45
   11392:	e7ff      	b.n	11394 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x114>
   11394:	f89d 0045 	ldrb.w	r0, [sp, #69]	; 0x45
   11398:	07c1      	lsls	r1, r0, #31
   1139a:	2900      	cmp	r1, #0
   1139c:	d001      	beq.n	113a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x122>
   1139e:	e7ff      	b.n	113a0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x120>
   113a0:	e010      	b.n	113c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x144>
   113a2:	202b      	movs	r0, #43	; 0x2b
        self.write_command(Instruction::RASET, None)?;
   113a4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   113a8:	2000      	movs	r0, #0
   113aa:	9013      	str	r0, [sp, #76]	; 0x4c
   113ac:	9012      	str	r0, [sp, #72]	; 0x48
   113ae:	9012      	str	r0, [sp, #72]	; 0x48
   113b0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   113b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   113b4:	f89d 1047 	ldrb.w	r1, [sp, #71]	; 0x47
   113b8:	980d      	ldr	r0, [sp, #52]	; 0x34
   113ba:	f7ff fe70 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   113be:	9003      	str	r0, [sp, #12]
   113c0:	e009      	b.n	113d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x156>
        self.write_word(ex + self.dx)?;
   113c2:	defe      	udf	#254	; 0xfe
   113c4:	f001 feb2 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   113c8:	e7ff      	b.n	113ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x14a>
   113ca:	f004 fb12 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   113ce:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   113d2:	e7ff      	b.n	113d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x154>
   113d4:	e79a      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_command(Instruction::RASET, None)?;
   113d6:	9803      	ldr	r0, [sp, #12]
   113d8:	f000 0001 	and.w	r0, r0, #1
   113dc:	f7fd ff81 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   113e0:	f88d 0046 	strb.w	r0, [sp, #70]	; 0x46
   113e4:	e7ff      	b.n	113e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x166>
   113e6:	f89d 0046 	ldrb.w	r0, [sp, #70]	; 0x46
   113ea:	07c1      	lsls	r1, r0, #31
   113ec:	2900      	cmp	r1, #0
   113ee:	d001      	beq.n	113f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x174>
   113f0:	e7ff      	b.n	113f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x172>
   113f2:	e00c      	b.n	1140e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x18e>
        self.write_word(sy + self.dy)?;
   113f4:	980d      	ldr	r0, [sp, #52]	; 0x34
   113f6:	8a41      	ldrh	r1, [r0, #18]
   113f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   113fa:	fa11 f182 	uxtah	r1, r1, r2
   113fe:	b28b      	uxth	r3, r1
   11400:	468c      	mov	ip, r1
   11402:	428b      	cmp	r3, r1
   11404:	f8cd c008 	str.w	ip, [sp, #8]
   11408:	d155      	bne.n	114b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x236>
   1140a:	e009      	b.n	11420 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1a0>
        self.write_command(Instruction::RASET, None)?;
   1140c:	defe      	udf	#254	; 0xfe
   1140e:	f001 fe8d 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11412:	e7ff      	b.n	11414 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x194>
   11414:	f004 faed 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11418:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   1141c:	e7ff      	b.n	1141e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x19e>
   1141e:	e775      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sy + self.dy)?;
   11420:	980d      	ldr	r0, [sp, #52]	; 0x34
   11422:	9902      	ldr	r1, [sp, #8]
   11424:	f7ff fd6c 	bl	10f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   11428:	9001      	str	r0, [sp, #4]
   1142a:	e7ff      	b.n	1142c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ac>
   1142c:	9801      	ldr	r0, [sp, #4]
   1142e:	f000 0001 	and.w	r0, r0, #1
   11432:	f7fd ff56 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11436:	f88d 0053 	strb.w	r0, [sp, #83]	; 0x53
   1143a:	e7ff      	b.n	1143c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1bc>
   1143c:	f89d 0053 	ldrb.w	r0, [sp, #83]	; 0x53
   11440:	07c1      	lsls	r1, r0, #31
   11442:	2900      	cmp	r1, #0
   11444:	d001      	beq.n	1144a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ca>
   11446:	e7ff      	b.n	11448 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1c8>
   11448:	e00c      	b.n	11464 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1e4>
        self.write_word(ey + self.dy)
   1144a:	980d      	ldr	r0, [sp, #52]	; 0x34
   1144c:	8a41      	ldrh	r1, [r0, #18]
   1144e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   11450:	fa11 f182 	uxtah	r1, r1, r2
   11454:	b28b      	uxth	r3, r1
   11456:	468c      	mov	ip, r1
   11458:	428b      	cmp	r3, r1
   1145a:	f8cd c000 	str.w	ip, [sp]
   1145e:	d136      	bne.n	114ce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x24e>
   11460:	e009      	b.n	11476 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f6>
        self.write_word(sy + self.dy)?;
   11462:	defe      	udf	#254	; 0xfe
   11464:	f001 fe62 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11468:	e7ff      	b.n	1146a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1ea>
   1146a:	f004 fac2 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1146e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11472:	e7ff      	b.n	11474 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x1f4>
   11474:	e74a      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(ey + self.dy)
   11476:	980d      	ldr	r0, [sp, #52]	; 0x34
   11478:	9900      	ldr	r1, [sp, #0]
   1147a:	f7ff fd41 	bl	10f00 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10write_word17h28350936e581e930E>
   1147e:	f88d 0039 	strb.w	r0, [sp, #57]	; 0x39
   11482:	e7ff      	b.n	11484 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x204>
    }
   11484:	e742      	b.n	1130c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$18set_address_window17h4c185fa3f05e9b9bE+0x8c>
        self.write_word(sx + self.dx)?;
   11486:	f24f 5030 	movw	r0, #62768	; 0xf530
   1148a:	f2c0 0001 	movt	r0, #1
   1148e:	f24f 5214 	movw	r2, #62740	; 0xf514
   11492:	f2c0 0201 	movt	r2, #1
   11496:	211c      	movs	r1, #28
   11498:	f005 fb04 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1149c:	defe      	udf	#254	; 0xfe
        self.write_word(ex + self.dx)?;
   1149e:	f24f 5030 	movw	r0, #62768	; 0xf530
   114a2:	f2c0 0001 	movt	r0, #1
   114a6:	f24f 524c 	movw	r2, #62796	; 0xf54c
   114aa:	f2c0 0201 	movt	r2, #1
   114ae:	211c      	movs	r1, #28
   114b0:	f005 faf8 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114b4:	defe      	udf	#254	; 0xfe
        self.write_word(sy + self.dy)?;
   114b6:	f24f 5030 	movw	r0, #62768	; 0xf530
   114ba:	f2c0 0001 	movt	r0, #1
   114be:	f24f 525c 	movw	r2, #62812	; 0xf55c
   114c2:	f2c0 0201 	movt	r2, #1
   114c6:	211c      	movs	r1, #28
   114c8:	f005 faec 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114cc:	defe      	udf	#254	; 0xfe
        self.write_word(ey + self.dy)
   114ce:	f24f 5030 	movw	r0, #62768	; 0xf530
   114d2:	f2c0 0001 	movt	r0, #1
   114d6:	f24f 526c 	movw	r2, #62828	; 0xf56c
   114da:	f2c0 0201 	movt	r2, #1
   114de:	211c      	movs	r1, #28
   114e0:	f005 fae0 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   114e4:	defe      	udf	#254	; 0xfe

000114e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$3new17ha089e9a58b91f63eE>:
    pub fn new(
   114e6:	b5b0      	push	{r4, r5, r7, lr}
   114e8:	b08a      	sub	sp, #40	; 0x28
   114ea:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   114ee:	f8dd e03c 	ldr.w	lr, [sp, #60]	; 0x3c
   114f2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   114f4:	9106      	str	r1, [sp, #24]
   114f6:	9207      	str	r2, [sp, #28]
   114f8:	9308      	str	r3, [sp, #32]
   114fa:	f88d e026 	strb.w	lr, [sp, #38]	; 0x26
   114fe:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
        let display = ST7735 {
   11502:	9100      	str	r1, [sp, #0]
   11504:	9201      	str	r2, [sp, #4]
   11506:	9302      	str	r3, [sp, #8]
   11508:	9403      	str	r4, [sp, #12]
   1150a:	f88d e014 	strb.w	lr, [sp, #20]
   1150e:	f88d c015 	strb.w	ip, [sp, #21]
   11512:	2100      	movs	r1, #0
   11514:	f8ad 1010 	strh.w	r1, [sp, #16]
   11518:	f8ad 1012 	strh.w	r1, [sp, #18]
   1151c:	4669      	mov	r1, sp
        display
   1151e:	e891 503c 	ldmia.w	r1, {r2, r3, r4, r5, ip, lr}
   11522:	e880 503c 	stmia.w	r0, {r2, r3, r4, r5, ip, lr}
    }
   11526:	b00a      	add	sp, #40	; 0x28
   11528:	bdb0      	pop	{r4, r5, r7, pc}

0001152a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E>:
    pub fn init<DELAY>(&mut self, delay: &mut DELAY) -> Result<(), ()>
   1152a:	b580      	push	{r7, lr}
   1152c:	b0f6      	sub	sp, #472	; 0x1d8
   1152e:	904e      	str	r0, [sp, #312]	; 0x138
   11530:	914f      	str	r1, [sp, #316]	; 0x13c
        mynewt::spi::spi_noblock_init()  //  Init the SPI queue
   11532:	9117      	str	r1, [sp, #92]	; 0x5c
   11534:	9016      	str	r0, [sp, #88]	; 0x58
   11536:	f001 ffae 	bl	13496 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>
   1153a:	9015      	str	r0, [sp, #84]	; 0x54
   1153c:	e7ff      	b.n	1153e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x14>
   1153e:	f24f 517c 	movw	r1, #62844	; 0xf57c
   11542:	f2c0 0101 	movt	r1, #1
   11546:	f24f 538c 	movw	r3, #62860	; 0xf58c
   1154a:	f2c0 0301 	movt	r3, #1
   1154e:	220d      	movs	r2, #13
   11550:	9815      	ldr	r0, [sp, #84]	; 0x54
   11552:	f7fd fe8d 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11556:	e7ff      	b.n	11558 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2e>
        self.hard_reset()?;
   11558:	9816      	ldr	r0, [sp, #88]	; 0x58
   1155a:	f7ff fbbd 	bl	10cd8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset17h2875b3f5b1b7e79dE>
   1155e:	9014      	str	r0, [sp, #80]	; 0x50
   11560:	e7ff      	b.n	11562 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38>
   11562:	9814      	ldr	r0, [sp, #80]	; 0x50
   11564:	f000 0001 	and.w	r0, r0, #1
   11568:	f7fd febb 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1156c:	f88d 0061 	strb.w	r0, [sp, #97]	; 0x61
   11570:	e7ff      	b.n	11572 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48>
   11572:	f89d 0061 	ldrb.w	r0, [sp, #97]	; 0x61
   11576:	07c1      	lsls	r1, r0, #31
   11578:	2900      	cmp	r1, #0
   1157a:	d001      	beq.n	11580 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x56>
   1157c:	e7ff      	b.n	1157e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54>
   1157e:	e010      	b.n	115a2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x78>
   11580:	2001      	movs	r0, #1
        self.write_command(Instruction::SWRESET, None)?;
   11582:	f88d 0063 	strb.w	r0, [sp, #99]	; 0x63
   11586:	2000      	movs	r0, #0
   11588:	901a      	str	r0, [sp, #104]	; 0x68
   1158a:	9019      	str	r0, [sp, #100]	; 0x64
   1158c:	9019      	str	r0, [sp, #100]	; 0x64
   1158e:	9a19      	ldr	r2, [sp, #100]	; 0x64
   11590:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   11592:	f89d 1063 	ldrb.w	r1, [sp, #99]	; 0x63
   11596:	9816      	ldr	r0, [sp, #88]	; 0x58
   11598:	f7ff fd81 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1159c:	9013      	str	r0, [sp, #76]	; 0x4c
   1159e:	e00d      	b.n	115bc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x92>
        self.hard_reset()?;
   115a0:	defe      	udf	#254	; 0xfe
   115a2:	f001 fdc3 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   115a6:	e003      	b.n	115b0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x86>
    }
   115a8:	f89d 0060 	ldrb.w	r0, [sp, #96]	; 0x60
   115ac:	b076      	add	sp, #472	; 0x1d8
   115ae:	bd80      	pop	{r7, pc}
        self.hard_reset()?;
   115b0:	f004 fa1f 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   115b4:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   115b8:	e7ff      	b.n	115ba <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x90>
   115ba:	e7f5      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::SWRESET, None)?;
   115bc:	9813      	ldr	r0, [sp, #76]	; 0x4c
   115be:	f000 0001 	and.w	r0, r0, #1
   115c2:	f7fd fe8e 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   115c6:	f88d 0062 	strb.w	r0, [sp, #98]	; 0x62
   115ca:	e7ff      	b.n	115cc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xa2>
   115cc:	f89d 0062 	ldrb.w	r0, [sp, #98]	; 0x62
   115d0:	07c1      	lsls	r1, r0, #31
   115d2:	2900      	cmp	r1, #0
   115d4:	d001      	beq.n	115da <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xb0>
   115d6:	e7ff      	b.n	115d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xae>
   115d8:	e005      	b.n	115e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xbc>
   115da:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   115dc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   115de:	f7fe fbb1 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   115e2:	e009      	b.n	115f8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xce>
        self.write_command(Instruction::SWRESET, None)?;
   115e4:	defe      	udf	#254	; 0xfe
   115e6:	f001 fda1 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   115ea:	e7ff      	b.n	115ec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xc2>
   115ec:	f004 fa01 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   115f0:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   115f4:	e7ff      	b.n	115f6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xcc>
   115f6:	e7d7      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   115f8:	2011      	movs	r0, #17
        self.write_command(Instruction::SLPOUT, None)?;
   115fa:	f88d 006f 	strb.w	r0, [sp, #111]	; 0x6f
   115fe:	2000      	movs	r0, #0
   11600:	901d      	str	r0, [sp, #116]	; 0x74
   11602:	901c      	str	r0, [sp, #112]	; 0x70
   11604:	901c      	str	r0, [sp, #112]	; 0x70
   11606:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   11608:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   1160a:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
   1160e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11610:	f7ff fd45 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11614:	9012      	str	r0, [sp, #72]	; 0x48
   11616:	e7ff      	b.n	11618 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xee>
   11618:	9812      	ldr	r0, [sp, #72]	; 0x48
   1161a:	f000 0001 	and.w	r0, r0, #1
   1161e:	f7fd fe60 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11622:	f88d 006e 	strb.w	r0, [sp, #110]	; 0x6e
   11626:	e7ff      	b.n	11628 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0xfe>
   11628:	f89d 006e 	ldrb.w	r0, [sp, #110]	; 0x6e
   1162c:	07c1      	lsls	r1, r0, #31
   1162e:	2900      	cmp	r1, #0
   11630:	d001      	beq.n	11636 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10c>
   11632:	e7ff      	b.n	11634 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x10a>
   11634:	e005      	b.n	11642 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x118>
   11636:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11638:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1163a:	f7fe fb83 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   1163e:	e009      	b.n	11654 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x12a>
        self.write_command(Instruction::SLPOUT, None)?;
   11640:	defe      	udf	#254	; 0xfe
   11642:	f001 fd73 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11646:	e7ff      	b.n	11648 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x11e>
   11648:	f004 f9d3 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1164c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11650:	e7ff      	b.n	11652 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x128>
   11652:	e7a9      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   11654:	20b1      	movs	r0, #177	; 0xb1
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   11656:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
   1165a:	f24f 50a0 	movw	r0, #62880	; 0xf5a0
   1165e:	f2c0 0001 	movt	r0, #1
   11662:	6800      	ldr	r0, [r0, #0]
   11664:	901f      	str	r0, [sp, #124]	; 0x7c
   11666:	2003      	movs	r0, #3
   11668:	9020      	str	r0, [sp, #128]	; 0x80
   1166a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1166c:	9b20      	ldr	r3, [sp, #128]	; 0x80
   1166e:	f89d 107b 	ldrb.w	r1, [sp, #123]	; 0x7b
   11672:	9816      	ldr	r0, [sp, #88]	; 0x58
   11674:	f7ff fd13 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11678:	9011      	str	r0, [sp, #68]	; 0x44
   1167a:	e7ff      	b.n	1167c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x152>
   1167c:	9811      	ldr	r0, [sp, #68]	; 0x44
   1167e:	f000 0001 	and.w	r0, r0, #1
   11682:	f7fd fe2e 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11686:	f88d 007a 	strb.w	r0, [sp, #122]	; 0x7a
   1168a:	e7ff      	b.n	1168c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x162>
   1168c:	f89d 007a 	ldrb.w	r0, [sp, #122]	; 0x7a
   11690:	07c1      	lsls	r1, r0, #31
   11692:	2900      	cmp	r1, #0
   11694:	d001      	beq.n	1169a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x170>
   11696:	e7ff      	b.n	11698 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x16e>
   11698:	e014      	b.n	116c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x19a>
   1169a:	20b2      	movs	r0, #178	; 0xb2
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   1169c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   116a0:	f24f 50a0 	movw	r0, #62880	; 0xf5a0
   116a4:	f2c0 0001 	movt	r0, #1
   116a8:	6800      	ldr	r0, [r0, #0]
   116aa:	9022      	str	r0, [sp, #136]	; 0x88
   116ac:	2003      	movs	r0, #3
   116ae:	9023      	str	r0, [sp, #140]	; 0x8c
   116b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   116b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   116b4:	f89d 1087 	ldrb.w	r1, [sp, #135]	; 0x87
   116b8:	9816      	ldr	r0, [sp, #88]	; 0x58
   116ba:	f7ff fcf0 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   116be:	9010      	str	r0, [sp, #64]	; 0x40
   116c0:	e009      	b.n	116d6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ac>
        self.write_command(Instruction::FRMCTR1, Some(&[0x01, 0x2C, 0x2D]))?;
   116c2:	defe      	udf	#254	; 0xfe
   116c4:	f001 fd32 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   116c8:	e7ff      	b.n	116ca <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1a0>
   116ca:	f004 f992 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   116ce:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   116d2:	e7ff      	b.n	116d4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1aa>
   116d4:	e768      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   116d6:	9810      	ldr	r0, [sp, #64]	; 0x40
   116d8:	f000 0001 	and.w	r0, r0, #1
   116dc:	f7fd fe01 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   116e0:	f88d 0086 	strb.w	r0, [sp, #134]	; 0x86
   116e4:	e7ff      	b.n	116e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1bc>
   116e6:	f89d 0086 	ldrb.w	r0, [sp, #134]	; 0x86
   116ea:	07c1      	lsls	r1, r0, #31
   116ec:	2900      	cmp	r1, #0
   116ee:	d001      	beq.n	116f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1ca>
   116f0:	e7ff      	b.n	116f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1c8>
   116f2:	e014      	b.n	1171e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1f4>
   116f4:	20b3      	movs	r0, #179	; 0xb3
        self.write_command(Instruction::FRMCTR3,
   116f6:	f88d 0093 	strb.w	r0, [sp, #147]	; 0x93
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   116fa:	f24f 50ac 	movw	r0, #62892	; 0xf5ac
   116fe:	f2c0 0001 	movt	r0, #1
   11702:	6800      	ldr	r0, [r0, #0]
   11704:	9025      	str	r0, [sp, #148]	; 0x94
   11706:	2006      	movs	r0, #6
   11708:	9026      	str	r0, [sp, #152]	; 0x98
        self.write_command(Instruction::FRMCTR3,
   1170a:	9a25      	ldr	r2, [sp, #148]	; 0x94
   1170c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1170e:	f89d 1093 	ldrb.w	r1, [sp, #147]	; 0x93
   11712:	9816      	ldr	r0, [sp, #88]	; 0x58
   11714:	f7ff fcc3 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11718:	900f      	str	r0, [sp, #60]	; 0x3c
   1171a:	e009      	b.n	11730 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x206>
        self.write_command(Instruction::FRMCTR2, Some(&[0x01, 0x2C, 0x2D]))?;
   1171c:	defe      	udf	#254	; 0xfe
   1171e:	f001 fd05 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11722:	e7ff      	b.n	11724 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x1fa>
   11724:	f004 f965 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11728:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1172c:	e7ff      	b.n	1172e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x204>
   1172e:	e73b      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::FRMCTR3,
   11730:	980f      	ldr	r0, [sp, #60]	; 0x3c
   11732:	f000 0001 	and.w	r0, r0, #1
   11736:	f7fd fdd4 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   1173a:	f88d 0092 	strb.w	r0, [sp, #146]	; 0x92
   1173e:	e7ff      	b.n	11740 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x216>
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11740:	f89d 0092 	ldrb.w	r0, [sp, #146]	; 0x92
   11744:	07c1      	lsls	r1, r0, #31
   11746:	2900      	cmp	r1, #0
   11748:	d001      	beq.n	1174e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x224>
   1174a:	e7ff      	b.n	1174c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x222>
   1174c:	e014      	b.n	11778 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x24e>
   1174e:	20b4      	movs	r0, #180	; 0xb4
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   11750:	f88d 009f 	strb.w	r0, [sp, #159]	; 0x9f
   11754:	f24f 50b4 	movw	r0, #62900	; 0xf5b4
   11758:	f2c0 0001 	movt	r0, #1
   1175c:	6800      	ldr	r0, [r0, #0]
   1175e:	9028      	str	r0, [sp, #160]	; 0xa0
   11760:	2001      	movs	r0, #1
   11762:	9029      	str	r0, [sp, #164]	; 0xa4
   11764:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   11766:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   11768:	f89d 109f 	ldrb.w	r1, [sp, #159]	; 0x9f
   1176c:	9816      	ldr	r0, [sp, #88]	; 0x58
   1176e:	f7ff fc96 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11772:	900e      	str	r0, [sp, #56]	; 0x38
   11774:	e009      	b.n	1178a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x260>
        self.write_command(Instruction::FRMCTR3,
   11776:	defe      	udf	#254	; 0xfe
            Some(&[0x01, 0x2C, 0x2D, 0x01, 0x2C, 0x2D]))?;
   11778:	f001 fcd8 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1177c:	e7ff      	b.n	1177e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x254>
   1177e:	f004 f938 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11782:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11786:	e7ff      	b.n	11788 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x25e>
   11788:	e70e      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   1178a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1178c:	f000 0001 	and.w	r0, r0, #1
   11790:	f7fd fda7 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11794:	f88d 009e 	strb.w	r0, [sp, #158]	; 0x9e
   11798:	e7ff      	b.n	1179a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x270>
   1179a:	f89d 009e 	ldrb.w	r0, [sp, #158]	; 0x9e
   1179e:	07c1      	lsls	r1, r0, #31
   117a0:	2900      	cmp	r1, #0
   117a2:	d001      	beq.n	117a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27e>
   117a4:	e7ff      	b.n	117a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x27c>
   117a6:	e014      	b.n	117d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2a8>
   117a8:	20c0      	movs	r0, #192	; 0xc0
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   117aa:	f88d 00ab 	strb.w	r0, [sp, #171]	; 0xab
   117ae:	f24f 50bc 	movw	r0, #62908	; 0xf5bc
   117b2:	f2c0 0001 	movt	r0, #1
   117b6:	6800      	ldr	r0, [r0, #0]
   117b8:	902b      	str	r0, [sp, #172]	; 0xac
   117ba:	2003      	movs	r0, #3
   117bc:	902c      	str	r0, [sp, #176]	; 0xb0
   117be:	9a2b      	ldr	r2, [sp, #172]	; 0xac
   117c0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   117c2:	f89d 10ab 	ldrb.w	r1, [sp, #171]	; 0xab
   117c6:	9816      	ldr	r0, [sp, #88]	; 0x58
   117c8:	f7ff fc69 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   117cc:	900d      	str	r0, [sp, #52]	; 0x34
   117ce:	e009      	b.n	117e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ba>
        self.write_command(Instruction::INVCTR, Some(&[0x07]))?;
   117d0:	defe      	udf	#254	; 0xfe
   117d2:	f001 fcab 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   117d6:	e7ff      	b.n	117d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ae>
   117d8:	f004 f90b 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   117dc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   117e0:	e7ff      	b.n	117e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2b8>
   117e2:	e6e1      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   117e4:	980d      	ldr	r0, [sp, #52]	; 0x34
   117e6:	f000 0001 	and.w	r0, r0, #1
   117ea:	f7fd fd7a 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   117ee:	f88d 00aa 	strb.w	r0, [sp, #170]	; 0xaa
   117f2:	e7ff      	b.n	117f4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2ca>
   117f4:	f89d 00aa 	ldrb.w	r0, [sp, #170]	; 0xaa
   117f8:	07c1      	lsls	r1, r0, #31
   117fa:	2900      	cmp	r1, #0
   117fc:	d001      	beq.n	11802 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d8>
   117fe:	e7ff      	b.n	11800 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x2d6>
   11800:	e014      	b.n	1182c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x302>
   11802:	20c1      	movs	r0, #193	; 0xc1
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11804:	f88d 00b7 	strb.w	r0, [sp, #183]	; 0xb7
   11808:	f24f 50c4 	movw	r0, #62916	; 0xf5c4
   1180c:	f2c0 0001 	movt	r0, #1
   11810:	6800      	ldr	r0, [r0, #0]
   11812:	902e      	str	r0, [sp, #184]	; 0xb8
   11814:	2001      	movs	r0, #1
   11816:	902f      	str	r0, [sp, #188]	; 0xbc
   11818:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
   1181a:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   1181c:	f89d 10b7 	ldrb.w	r1, [sp, #183]	; 0xb7
   11820:	9816      	ldr	r0, [sp, #88]	; 0x58
   11822:	f7ff fc3c 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11826:	900c      	str	r0, [sp, #48]	; 0x30
   11828:	e009      	b.n	1183e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x314>
        self.write_command(Instruction::PWCTR1, Some(&[0xA2, 0x02, 0x84]))?;
   1182a:	defe      	udf	#254	; 0xfe
   1182c:	f001 fc7e 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11830:	e7ff      	b.n	11832 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x308>
   11832:	f004 f8de 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11836:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   1183a:	e7ff      	b.n	1183c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x312>
   1183c:	e6b4      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   1183e:	980c      	ldr	r0, [sp, #48]	; 0x30
   11840:	f000 0001 	and.w	r0, r0, #1
   11844:	f7fd fd4d 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11848:	f88d 00b6 	strb.w	r0, [sp, #182]	; 0xb6
   1184c:	e7ff      	b.n	1184e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x324>
   1184e:	f89d 00b6 	ldrb.w	r0, [sp, #182]	; 0xb6
   11852:	07c1      	lsls	r1, r0, #31
   11854:	2900      	cmp	r1, #0
   11856:	d001      	beq.n	1185c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x332>
   11858:	e7ff      	b.n	1185a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x330>
   1185a:	e014      	b.n	11886 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x35c>
   1185c:	20c2      	movs	r0, #194	; 0xc2
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   1185e:	f88d 00c3 	strb.w	r0, [sp, #195]	; 0xc3
   11862:	f24f 50cc 	movw	r0, #62924	; 0xf5cc
   11866:	f2c0 0001 	movt	r0, #1
   1186a:	6800      	ldr	r0, [r0, #0]
   1186c:	9031      	str	r0, [sp, #196]	; 0xc4
   1186e:	2002      	movs	r0, #2
   11870:	9032      	str	r0, [sp, #200]	; 0xc8
   11872:	9a31      	ldr	r2, [sp, #196]	; 0xc4
   11874:	9b32      	ldr	r3, [sp, #200]	; 0xc8
   11876:	f89d 10c3 	ldrb.w	r1, [sp, #195]	; 0xc3
   1187a:	9816      	ldr	r0, [sp, #88]	; 0x58
   1187c:	f7ff fc0f 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11880:	900b      	str	r0, [sp, #44]	; 0x2c
   11882:	e009      	b.n	11898 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36e>
        self.write_command(Instruction::PWCTR2, Some(&[0xC5]))?;
   11884:	defe      	udf	#254	; 0xfe
   11886:	f001 fc51 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1188a:	e7ff      	b.n	1188c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x362>
   1188c:	f004 f8b1 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11890:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11894:	e7ff      	b.n	11896 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x36c>
   11896:	e687      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   11898:	980b      	ldr	r0, [sp, #44]	; 0x2c
   1189a:	f000 0001 	and.w	r0, r0, #1
   1189e:	f7fd fd20 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118a2:	f88d 00c2 	strb.w	r0, [sp, #194]	; 0xc2
   118a6:	e7ff      	b.n	118a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x37e>
   118a8:	f89d 00c2 	ldrb.w	r0, [sp, #194]	; 0xc2
   118ac:	07c1      	lsls	r1, r0, #31
   118ae:	2900      	cmp	r1, #0
   118b0:	d001      	beq.n	118b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38c>
   118b2:	e7ff      	b.n	118b4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x38a>
   118b4:	e014      	b.n	118e0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3b6>
   118b6:	20c3      	movs	r0, #195	; 0xc3
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   118b8:	f88d 00cf 	strb.w	r0, [sp, #207]	; 0xcf
   118bc:	f24f 50d4 	movw	r0, #62932	; 0xf5d4
   118c0:	f2c0 0001 	movt	r0, #1
   118c4:	6800      	ldr	r0, [r0, #0]
   118c6:	9034      	str	r0, [sp, #208]	; 0xd0
   118c8:	2002      	movs	r0, #2
   118ca:	9035      	str	r0, [sp, #212]	; 0xd4
   118cc:	9a34      	ldr	r2, [sp, #208]	; 0xd0
   118ce:	9b35      	ldr	r3, [sp, #212]	; 0xd4
   118d0:	f89d 10cf 	ldrb.w	r1, [sp, #207]	; 0xcf
   118d4:	9816      	ldr	r0, [sp, #88]	; 0x58
   118d6:	f7ff fbe2 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   118da:	900a      	str	r0, [sp, #40]	; 0x28
   118dc:	e009      	b.n	118f2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c8>
        self.write_command(Instruction::PWCTR3, Some(&[0x0A, 0x00]))?;
   118de:	defe      	udf	#254	; 0xfe
   118e0:	f001 fc24 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   118e4:	e7ff      	b.n	118e6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3bc>
   118e6:	f004 f884 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   118ea:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   118ee:	e7ff      	b.n	118f0 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3c6>
   118f0:	e65a      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   118f2:	980a      	ldr	r0, [sp, #40]	; 0x28
   118f4:	f000 0001 	and.w	r0, r0, #1
   118f8:	f7fd fcf3 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   118fc:	f88d 00ce 	strb.w	r0, [sp, #206]	; 0xce
   11900:	e7ff      	b.n	11902 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3d8>
   11902:	f89d 00ce 	ldrb.w	r0, [sp, #206]	; 0xce
   11906:	07c1      	lsls	r1, r0, #31
   11908:	2900      	cmp	r1, #0
   1190a:	d001      	beq.n	11910 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e6>
   1190c:	e7ff      	b.n	1190e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x3e4>
   1190e:	e014      	b.n	1193a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x410>
   11910:	20c4      	movs	r0, #196	; 0xc4
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11912:	f88d 00db 	strb.w	r0, [sp, #219]	; 0xdb
   11916:	f24f 50dc 	movw	r0, #62940	; 0xf5dc
   1191a:	f2c0 0001 	movt	r0, #1
   1191e:	6800      	ldr	r0, [r0, #0]
   11920:	9037      	str	r0, [sp, #220]	; 0xdc
   11922:	2002      	movs	r0, #2
   11924:	9038      	str	r0, [sp, #224]	; 0xe0
   11926:	9a37      	ldr	r2, [sp, #220]	; 0xdc
   11928:	9b38      	ldr	r3, [sp, #224]	; 0xe0
   1192a:	f89d 10db 	ldrb.w	r1, [sp, #219]	; 0xdb
   1192e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11930:	f7ff fbb5 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11934:	9009      	str	r0, [sp, #36]	; 0x24
   11936:	e009      	b.n	1194c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x422>
        self.write_command(Instruction::PWCTR4, Some(&[0x8A, 0x2A]))?;
   11938:	defe      	udf	#254	; 0xfe
   1193a:	f001 fbf7 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   1193e:	e7ff      	b.n	11940 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x416>
   11940:	f004 f857 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11944:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11948:	e7ff      	b.n	1194a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x420>
   1194a:	e62d      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   1194c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1194e:	f000 0001 	and.w	r0, r0, #1
   11952:	f7fd fcc6 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11956:	f88d 00da 	strb.w	r0, [sp, #218]	; 0xda
   1195a:	e7ff      	b.n	1195c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x432>
   1195c:	f89d 00da 	ldrb.w	r0, [sp, #218]	; 0xda
   11960:	07c1      	lsls	r1, r0, #31
   11962:	2900      	cmp	r1, #0
   11964:	d001      	beq.n	1196a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x440>
   11966:	e7ff      	b.n	11968 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x43e>
   11968:	e014      	b.n	11994 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x46a>
   1196a:	20c5      	movs	r0, #197	; 0xc5
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   1196c:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   11970:	f24f 50e4 	movw	r0, #62948	; 0xf5e4
   11974:	f2c0 0001 	movt	r0, #1
   11978:	6800      	ldr	r0, [r0, #0]
   1197a:	903a      	str	r0, [sp, #232]	; 0xe8
   1197c:	2001      	movs	r0, #1
   1197e:	903b      	str	r0, [sp, #236]	; 0xec
   11980:	9a3a      	ldr	r2, [sp, #232]	; 0xe8
   11982:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   11984:	f89d 10e7 	ldrb.w	r1, [sp, #231]	; 0xe7
   11988:	9816      	ldr	r0, [sp, #88]	; 0x58
   1198a:	f7ff fb88 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   1198e:	9008      	str	r0, [sp, #32]
   11990:	e009      	b.n	119a6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47c>
        self.write_command(Instruction::PWCTR5, Some(&[0x8A, 0xEE]))?;
   11992:	defe      	udf	#254	; 0xfe
   11994:	f001 fbca 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11998:	e7ff      	b.n	1199a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x470>
   1199a:	f004 f82a 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   1199e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119a2:	e7ff      	b.n	119a4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x47a>
   119a4:	e600      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   119a6:	9808      	ldr	r0, [sp, #32]
   119a8:	f000 0001 	and.w	r0, r0, #1
   119ac:	f7fd fc99 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   119b0:	f88d 00e6 	strb.w	r0, [sp, #230]	; 0xe6
   119b4:	e7ff      	b.n	119b6 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x48c>
   119b6:	f89d 00e6 	ldrb.w	r0, [sp, #230]	; 0xe6
   119ba:	07c1      	lsls	r1, r0, #31
   119bc:	2900      	cmp	r1, #0
   119be:	d001      	beq.n	119c4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x49a>
   119c0:	e7ff      	b.n	119c2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x498>
   119c2:	e006      	b.n	119d2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4a8>
        if self.inverted {
   119c4:	9816      	ldr	r0, [sp, #88]	; 0x58
   119c6:	7d41      	ldrb	r1, [r0, #21]
   119c8:	07c9      	lsls	r1, r1, #31
   119ca:	2900      	cmp	r1, #0
   119cc:	d11a      	bne.n	11a04 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4da>
   119ce:	e009      	b.n	119e4 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ba>
        self.write_command(Instruction::VMCTR1, Some(&[0x0E]))?;
   119d0:	defe      	udf	#254	; 0xfe
   119d2:	f001 fbab 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   119d6:	e7ff      	b.n	119d8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4ae>
   119d8:	f004 f80b 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   119dc:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   119e0:	e7ff      	b.n	119e2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4b8>
   119e2:	e5e1      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
   119e4:	2020      	movs	r0, #32
            self.write_command(Instruction::INVOFF, None)?;
   119e6:	f88d 00ff 	strb.w	r0, [sp, #255]	; 0xff
   119ea:	2000      	movs	r0, #0
   119ec:	9041      	str	r0, [sp, #260]	; 0x104
   119ee:	9040      	str	r0, [sp, #256]	; 0x100
   119f0:	9040      	str	r0, [sp, #256]	; 0x100
   119f2:	9a40      	ldr	r2, [sp, #256]	; 0x100
   119f4:	9b41      	ldr	r3, [sp, #260]	; 0x104
   119f6:	f89d 10ff 	ldrb.w	r1, [sp, #255]	; 0xff
   119fa:	9816      	ldr	r0, [sp, #88]	; 0x58
   119fc:	f7ff fb4f 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a00:	9007      	str	r0, [sp, #28]
   11a02:	e02a      	b.n	11a5a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x530>
   11a04:	2021      	movs	r0, #33	; 0x21
            self.write_command(Instruction::INVON, None)?;
   11a06:	f88d 00f3 	strb.w	r0, [sp, #243]	; 0xf3
   11a0a:	2000      	movs	r0, #0
   11a0c:	903e      	str	r0, [sp, #248]	; 0xf8
   11a0e:	903d      	str	r0, [sp, #244]	; 0xf4
   11a10:	903d      	str	r0, [sp, #244]	; 0xf4
   11a12:	9a3d      	ldr	r2, [sp, #244]	; 0xf4
   11a14:	9b3e      	ldr	r3, [sp, #248]	; 0xf8
   11a16:	f89d 10f3 	ldrb.w	r1, [sp, #243]	; 0xf3
   11a1a:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a1c:	f7ff fb3f 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11a20:	9006      	str	r0, [sp, #24]
   11a22:	e7ff      	b.n	11a24 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x4fa>
   11a24:	9806      	ldr	r0, [sp, #24]
   11a26:	f000 0001 	and.w	r0, r0, #1
   11a2a:	f7fd fc5a 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a2e:	f88d 00f2 	strb.w	r0, [sp, #242]	; 0xf2
   11a32:	e7ff      	b.n	11a34 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x50a>
   11a34:	f89d 00f2 	ldrb.w	r0, [sp, #242]	; 0xf2
   11a38:	07c1      	lsls	r1, r0, #31
   11a3a:	2900      	cmp	r1, #0
   11a3c:	d001      	beq.n	11a42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x518>
   11a3e:	e7ff      	b.n	11a40 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x516>
   11a40:	e001      	b.n	11a46 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x51c>
        if self.inverted {
   11a42:	e024      	b.n	11a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVON, None)?;
   11a44:	defe      	udf	#254	; 0xfe
   11a46:	f001 fb71 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a4a:	e7ff      	b.n	11a4c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x522>
   11a4c:	f003 ffd1 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a50:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a54:	e7ff      	b.n	11a56 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52c>
   11a56:	e7ff      	b.n	11a58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
   11a58:	e5a6      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::INVOFF, None)?;
   11a5a:	9807      	ldr	r0, [sp, #28]
   11a5c:	f000 0001 	and.w	r0, r0, #1
   11a60:	f7fd fc3f 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11a64:	f88d 00fe 	strb.w	r0, [sp, #254]	; 0xfe
   11a68:	e7ff      	b.n	11a6a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x540>
   11a6a:	f89d 00fe 	ldrb.w	r0, [sp, #254]	; 0xfe
   11a6e:	07c1      	lsls	r1, r0, #31
   11a70:	2900      	cmp	r1, #0
   11a72:	d001      	beq.n	11a78 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54e>
   11a74:	e7ff      	b.n	11a76 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x54c>
   11a76:	e001      	b.n	11a7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x552>
        if self.inverted {
   11a78:	e009      	b.n	11a8e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x564>
            self.write_command(Instruction::INVOFF, None)?;
   11a7a:	defe      	udf	#254	; 0xfe
   11a7c:	f001 fb56 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11a80:	e7ff      	b.n	11a82 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x558>
   11a82:	f003 ffb6 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11a86:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11a8a:	e7ff      	b.n	11a8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x562>
   11a8c:	e7e4      	b.n	11a58 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x52e>
        if self.rgb {
   11a8e:	9816      	ldr	r0, [sp, #88]	; 0x58
   11a90:	7d01      	ldrb	r1, [r0, #20]
   11a92:	07c9      	lsls	r1, r1, #31
   11a94:	2900      	cmp	r1, #0
   11a96:	d114      	bne.n	11ac2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x598>
   11a98:	e7ff      	b.n	11a9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x570>
   11a9a:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11a9c:	f88d 0117 	strb.w	r0, [sp, #279]	; 0x117
   11aa0:	f24f 50f4 	movw	r0, #62964	; 0xf5f4
   11aa4:	f2c0 0001 	movt	r0, #1
   11aa8:	6800      	ldr	r0, [r0, #0]
   11aaa:	9046      	str	r0, [sp, #280]	; 0x118
   11aac:	2001      	movs	r0, #1
   11aae:	9047      	str	r0, [sp, #284]	; 0x11c
   11ab0:	9a46      	ldr	r2, [sp, #280]	; 0x118
   11ab2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   11ab4:	f89d 1117 	ldrb.w	r1, [sp, #279]	; 0x117
   11ab8:	9816      	ldr	r0, [sp, #88]	; 0x58
   11aba:	f7ff faf0 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11abe:	9005      	str	r0, [sp, #20]
   11ac0:	e02e      	b.n	11b20 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f6>
   11ac2:	2036      	movs	r0, #54	; 0x36
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11ac4:	f88d 010b 	strb.w	r0, [sp, #267]	; 0x10b
   11ac8:	f24f 50ec 	movw	r0, #62956	; 0xf5ec
   11acc:	f2c0 0001 	movt	r0, #1
   11ad0:	6800      	ldr	r0, [r0, #0]
   11ad2:	9043      	str	r0, [sp, #268]	; 0x10c
   11ad4:	2001      	movs	r0, #1
   11ad6:	9044      	str	r0, [sp, #272]	; 0x110
   11ad8:	9a43      	ldr	r2, [sp, #268]	; 0x10c
   11ada:	9b44      	ldr	r3, [sp, #272]	; 0x110
   11adc:	f89d 110b 	ldrb.w	r1, [sp, #267]	; 0x10b
   11ae0:	9816      	ldr	r0, [sp, #88]	; 0x58
   11ae2:	f7ff fadc 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11ae6:	9004      	str	r0, [sp, #16]
   11ae8:	e7ff      	b.n	11aea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5c0>
   11aea:	9804      	ldr	r0, [sp, #16]
   11aec:	f000 0001 	and.w	r0, r0, #1
   11af0:	f7fd fbf7 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11af4:	f88d 010a 	strb.w	r0, [sp, #266]	; 0x10a
   11af8:	e7ff      	b.n	11afa <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5d0>
   11afa:	f89d 010a 	ldrb.w	r0, [sp, #266]	; 0x10a
   11afe:	07c1      	lsls	r1, r0, #31
   11b00:	2900      	cmp	r1, #0
   11b02:	d001      	beq.n	11b08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5de>
   11b04:	e7ff      	b.n	11b06 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5dc>
   11b06:	e001      	b.n	11b0c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e2>
        if self.rgb {
   11b08:	e024      	b.n	11b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x00]))?;
   11b0a:	defe      	udf	#254	; 0xfe
   11b0c:	f001 fb0e 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b10:	e7ff      	b.n	11b12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5e8>
   11b12:	f003 ff6e 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b16:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b1a:	e7ff      	b.n	11b1c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f2>
   11b1c:	e7ff      	b.n	11b1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11b1e:	e543      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11b20:	9805      	ldr	r0, [sp, #20]
   11b22:	f000 0001 	and.w	r0, r0, #1
   11b26:	f7fd fbdc 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b2a:	f88d 0116 	strb.w	r0, [sp, #278]	; 0x116
   11b2e:	e7ff      	b.n	11b30 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x606>
   11b30:	f89d 0116 	ldrb.w	r0, [sp, #278]	; 0x116
   11b34:	07c1      	lsls	r1, r0, #31
   11b36:	2900      	cmp	r1, #0
   11b38:	d001      	beq.n	11b3e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x614>
   11b3a:	e7ff      	b.n	11b3c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x612>
   11b3c:	e001      	b.n	11b42 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x618>
        if self.rgb {
   11b3e:	e009      	b.n	11b54 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x62a>
            self.write_command(Instruction::MADCTL, Some(&[0x08]))?;
   11b40:	defe      	udf	#254	; 0xfe
   11b42:	f001 faf3 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11b46:	e7ff      	b.n	11b48 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x61e>
   11b48:	f003 ff53 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11b4c:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11b50:	e7ff      	b.n	11b52 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x628>
   11b52:	e7e4      	b.n	11b1e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x5f4>
   11b54:	203a      	movs	r0, #58	; 0x3a
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11b56:	f88d 0123 	strb.w	r0, [sp, #291]	; 0x123
   11b5a:	f24f 50fc 	movw	r0, #62972	; 0xf5fc
   11b5e:	f2c0 0001 	movt	r0, #1
   11b62:	6800      	ldr	r0, [r0, #0]
   11b64:	9049      	str	r0, [sp, #292]	; 0x124
   11b66:	2001      	movs	r0, #1
   11b68:	904a      	str	r0, [sp, #296]	; 0x128
   11b6a:	9a49      	ldr	r2, [sp, #292]	; 0x124
   11b6c:	9b4a      	ldr	r3, [sp, #296]	; 0x128
   11b6e:	f89d 1123 	ldrb.w	r1, [sp, #291]	; 0x123
   11b72:	9816      	ldr	r0, [sp, #88]	; 0x58
   11b74:	f7ff fa93 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11b78:	9003      	str	r0, [sp, #12]
   11b7a:	e7ff      	b.n	11b7c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x652>
   11b7c:	9803      	ldr	r0, [sp, #12]
   11b7e:	f000 0001 	and.w	r0, r0, #1
   11b82:	f7fd fbae 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11b86:	f88d 0122 	strb.w	r0, [sp, #290]	; 0x122
   11b8a:	e7ff      	b.n	11b8c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x662>
   11b8c:	f89d 0122 	ldrb.w	r0, [sp, #290]	; 0x122
   11b90:	07c1      	lsls	r1, r0, #31
   11b92:	2900      	cmp	r1, #0
   11b94:	d001      	beq.n	11b9a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x670>
   11b96:	e7ff      	b.n	11b98 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x66e>
   11b98:	e010      	b.n	11bbc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x692>
   11b9a:	2029      	movs	r0, #41	; 0x29
        self.write_command(Instruction::DISPON, None)?;
   11b9c:	f88d 012f 	strb.w	r0, [sp, #303]	; 0x12f
   11ba0:	2000      	movs	r0, #0
   11ba2:	904d      	str	r0, [sp, #308]	; 0x134
   11ba4:	904c      	str	r0, [sp, #304]	; 0x130
   11ba6:	904c      	str	r0, [sp, #304]	; 0x130
   11ba8:	9a4c      	ldr	r2, [sp, #304]	; 0x130
   11baa:	9b4d      	ldr	r3, [sp, #308]	; 0x134
   11bac:	f89d 112f 	ldrb.w	r1, [sp, #303]	; 0x12f
   11bb0:	9816      	ldr	r0, [sp, #88]	; 0x58
   11bb2:	f7ff fa74 	bl	1109e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$13write_command17h07812847cfd1fe3fE>
   11bb6:	9002      	str	r0, [sp, #8]
   11bb8:	e009      	b.n	11bce <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a4>
        self.write_command(Instruction::COLMOD, Some(&[0x05]))?;
   11bba:	defe      	udf	#254	; 0xfe
   11bbc:	f001 fab6 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11bc0:	e7ff      	b.n	11bc2 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x698>
   11bc2:	f003 ff16 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11bc6:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11bca:	e7ff      	b.n	11bcc <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6a2>
   11bcc:	e4ec      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        self.write_command(Instruction::DISPON, None)?;
   11bce:	9802      	ldr	r0, [sp, #8]
   11bd0:	f000 0001 	and.w	r0, r0, #1
   11bd4:	f7fd fb85 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   11bd8:	f88d 012e 	strb.w	r0, [sp, #302]	; 0x12e
   11bdc:	e7ff      	b.n	11bde <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6b4>
   11bde:	f89d 012e 	ldrb.w	r0, [sp, #302]	; 0x12e
   11be2:	07c1      	lsls	r1, r0, #31
   11be4:	2900      	cmp	r1, #0
   11be6:	d001      	beq.n	11bec <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c2>
   11be8:	e7ff      	b.n	11bea <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6c0>
   11bea:	e005      	b.n	11bf8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6ce>
   11bec:	21c8      	movs	r1, #200	; 0xc8
        delay.delay_ms(200);
   11bee:	9817      	ldr	r0, [sp, #92]	; 0x5c
   11bf0:	f7fe f8a8 	bl	fd44 <_ZN87_$LT$mynewt..hal..Delay$u20$as$u20$embedded_hal..blocking..delay..DelayMs$LT$u8$GT$$GT$8delay_ms17h2175c6ea036e723cE>
   11bf4:	e009      	b.n	11c0a <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e0>
        self.write_command(Instruction::DISPON, None)?;
   11bf6:	defe      	udf	#254	; 0xfe
   11bf8:	f001 fa98 	bl	1312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>
   11bfc:	e7ff      	b.n	11bfe <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6d4>
   11bfe:	f003 fef8 	bl	159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>
   11c02:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
   11c06:	e7ff      	b.n	11c08 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6de>
   11c08:	e4ce      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>
        mynewt::spi::spi_noblock_write_flush()  //  Enqueue the pending SPI request
   11c0a:	f002 fa38 	bl	1407e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   11c0e:	9001      	str	r0, [sp, #4]
   11c10:	e7ff      	b.n	11c12 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x6e8>
   11c12:	f24f 410c 	movw	r1, #62476	; 0xf40c
   11c16:	f2c0 0101 	movt	r1, #1
   11c1a:	f24f 6300 	movw	r3, #62976	; 0xf600
   11c1e:	f2c0 0301 	movt	r3, #1
   11c22:	220e      	movs	r2, #14
   11c24:	9801      	ldr	r0, [sp, #4]
   11c26:	f7fd fb23 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   11c2a:	e7ff      	b.n	11c2c <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x702>
   11c2c:	2000      	movs	r0, #0
        Ok(())
   11c2e:	f88d 0060 	strb.w	r0, [sp, #96]	; 0x60
    }
   11c32:	e4b9      	b.n	115a8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$4init17hd19be39f84ab3463E+0x7e>

00011c34 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E>:
    fn to_u8(&self) -> Option<u8> {
   11c34:	b580      	push	{r7, lr}
   11c36:	b08a      	sub	sp, #40	; 0x28
   11c38:	9009      	str	r0, [sp, #36]	; 0x24
        self.to_u64().as_ref().and_then(ToPrimitive::to_u8)
   11c3a:	f000 fe3c 	bl	128b6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>
   11c3e:	9307      	str	r3, [sp, #28]
   11c40:	9206      	str	r2, [sp, #24]
   11c42:	9105      	str	r1, [sp, #20]
   11c44:	9004      	str	r0, [sp, #16]
   11c46:	e7ff      	b.n	11c48 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x14>
   11c48:	a804      	add	r0, sp, #16
   11c4a:	f003 f813 	bl	14c74 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>
   11c4e:	9003      	str	r0, [sp, #12]
   11c50:	e7ff      	b.n	11c52 <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x1e>
   11c52:	9803      	ldr	r0, [sp, #12]
   11c54:	f003 f8e1 	bl	14e1a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>
   11c58:	9002      	str	r0, [sp, #8]
   11c5a:	9101      	str	r1, [sp, #4]
   11c5c:	e7ff      	b.n	11c5e <_ZN10num_traits4cast11ToPrimitive5to_u817h310cd550dd537660E+0x2a>
    }
   11c5e:	9802      	ldr	r0, [sp, #8]
   11c60:	f000 0001 	and.w	r0, r0, #1
   11c64:	9901      	ldr	r1, [sp, #4]
   11c66:	b00a      	add	sp, #40	; 0x28
   11c68:	bd80      	pop	{r7, pc}

00011c6a <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>:
   11c6a:	b082      	sub	sp, #8
   11c6c:	4601      	mov	r1, r0
   11c6e:	f8ad 0004 	strh.w	r0, [sp, #4]
   11c72:	ba00      	rev	r0, r0
   11c74:	0c00      	lsrs	r0, r0, #16
   11c76:	f8ad 0006 	strh.w	r0, [sp, #6]
   11c7a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   11c7e:	9000      	str	r0, [sp, #0]
   11c80:	e7ff      	b.n	11c82 <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E+0x18>
   11c82:	9800      	ldr	r0, [sp, #0]
   11c84:	b002      	add	sp, #8
   11c86:	4770      	bx	lr

00011c88 <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E>:
   11c88:	b580      	push	{r7, lr}
   11c8a:	b084      	sub	sp, #16
   11c8c:	4601      	mov	r1, r0
   11c8e:	f8ad 000e 	strh.w	r0, [sp, #14]
   11c92:	9102      	str	r1, [sp, #8]
   11c94:	f7ff ffe9 	bl	11c6a <_ZN4core3num21_$LT$impl$u20$u16$GT$10swap_bytes17hada45c46c4893dc4E>
   11c98:	9001      	str	r0, [sp, #4]
   11c9a:	e7ff      	b.n	11c9c <_ZN4core3num21_$LT$impl$u20$u16$GT$5to_be17h27539c6c1e448a30E+0x14>
   11c9c:	9801      	ldr	r0, [sp, #4]
   11c9e:	b004      	add	sp, #16
   11ca0:	bd80      	pop	{r7, pc}

00011ca2 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>:
   11ca2:	b580      	push	{r7, lr}
   11ca4:	b084      	sub	sp, #16
   11ca6:	9002      	str	r0, [sp, #8]
   11ca8:	9802      	ldr	r0, [sp, #8]
   11caa:	f002 ff47 	bl	14b3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>
   11cae:	9001      	str	r0, [sp, #4]
   11cb0:	9100      	str	r1, [sp, #0]
   11cb2:	e7ff      	b.n	11cb4 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE+0x12>
   11cb4:	9801      	ldr	r0, [sp, #4]
   11cb6:	f000 0001 	and.w	r0, r0, #1
   11cba:	9900      	ldr	r1, [sp, #0]
   11cbc:	b004      	add	sp, #16
   11cbe:	bd80      	pop	{r7, pc}

00011cc0 <_ZN4core3ptr13drop_in_place17h00c2f0b87edee24bE>:
   11cc0:	b081      	sub	sp, #4
   11cc2:	9000      	str	r0, [sp, #0]
   11cc4:	b001      	add	sp, #4
   11cc6:	4770      	bx	lr

00011cc8 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>:
   11cc8:	b580      	push	{r7, lr}
   11cca:	b082      	sub	sp, #8
   11ccc:	9001      	str	r0, [sp, #4]
   11cce:	f000 f83e 	bl	11d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11cd2:	e7ff      	b.n	11cd4 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE+0xc>
   11cd4:	b002      	add	sp, #8
   11cd6:	bd80      	pop	{r7, pc}

00011cd8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE>:
   11cd8:	b580      	push	{r7, lr}
   11cda:	b082      	sub	sp, #8
   11cdc:	9001      	str	r0, [sp, #4]
   11cde:	6801      	ldr	r1, [r0, #0]
   11ce0:	2900      	cmp	r1, #0
   11ce2:	9000      	str	r0, [sp, #0]
   11ce4:	d102      	bne.n	11cec <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x14>
   11ce6:	e7ff      	b.n	11ce8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>
   11ce8:	b002      	add	sp, #8
   11cea:	bd80      	pop	{r7, pc}
   11cec:	9800      	ldr	r0, [sp, #0]
   11cee:	3004      	adds	r0, #4
   11cf0:	f7ff ffea 	bl	11cc8 <_ZN4core3ptr13drop_in_place17h0697ea54608a328fE>
   11cf4:	e7f8      	b.n	11ce8 <_ZN4core3ptr13drop_in_place17h0e3fd2b30370534fE+0x10>

00011cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>:
   11cf6:	b580      	push	{r7, lr}
   11cf8:	b082      	sub	sp, #8
   11cfa:	9001      	str	r0, [sp, #4]
   11cfc:	f003 f908 	bl	14f10 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>
   11d00:	e7ff      	b.n	11d02 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE+0xc>
   11d02:	b002      	add	sp, #8
   11d04:	bd80      	pop	{r7, pc}

00011d06 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>:
   11d06:	b580      	push	{r7, lr}
   11d08:	b082      	sub	sp, #8
   11d0a:	9001      	str	r0, [sp, #4]
   11d0c:	3024      	adds	r0, #36	; 0x24
   11d0e:	f000 f81e 	bl	11d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>
   11d12:	e7ff      	b.n	11d14 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E+0xe>
   11d14:	b002      	add	sp, #8
   11d16:	bd80      	pop	{r7, pc}

00011d18 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E>:
   11d18:	b580      	push	{r7, lr}
   11d1a:	b082      	sub	sp, #8
   11d1c:	9001      	str	r0, [sp, #4]
   11d1e:	9000      	str	r0, [sp, #0]
   11d20:	f7ff fff1 	bl	11d06 <_ZN4core3ptr13drop_in_place17h67ab6c44b52b02f3E>
   11d24:	e001      	b.n	11d2a <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0x12>
   11d26:	b002      	add	sp, #8
   11d28:	bd80      	pop	{r7, pc}
   11d2a:	9800      	ldr	r0, [sp, #0]
   11d2c:	3094      	adds	r0, #148	; 0x94
   11d2e:	f7ff ffe2 	bl	11cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11d32:	e7f8      	b.n	11d26 <_ZN4core3ptr13drop_in_place17h6cf49935e5df9bb9E+0xe>

00011d34 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E>:
   11d34:	b580      	push	{r7, lr}
   11d36:	b082      	sub	sp, #8
   11d38:	9001      	str	r0, [sp, #4]
   11d3a:	9000      	str	r0, [sp, #0]
   11d3c:	f003 f910 	bl	14f60 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>
   11d40:	e001      	b.n	11d46 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0x12>
   11d42:	b002      	add	sp, #8
   11d44:	bd80      	pop	{r7, pc}
   11d46:	9800      	ldr	r0, [sp, #0]
   11d48:	f7ff ffd5 	bl	11cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11d4c:	e7f9      	b.n	11d42 <_ZN4core3ptr13drop_in_place17hb0f3789feb848fe1E+0xe>

00011d4e <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E>:
   11d4e:	b580      	push	{r7, lr}
   11d50:	b082      	sub	sp, #8
   11d52:	9001      	str	r0, [sp, #4]
   11d54:	f003 f8cc 	bl	14ef0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>
   11d58:	e7ff      	b.n	11d5a <_ZN4core3ptr13drop_in_place17hc279ed7e490b6c80E+0xc>
   11d5a:	b002      	add	sp, #8
   11d5c:	bd80      	pop	{r7, pc}

00011d5e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE>:
   11d5e:	b580      	push	{r7, lr}
   11d60:	b082      	sub	sp, #8
   11d62:	9001      	str	r0, [sp, #4]
   11d64:	6801      	ldr	r1, [r0, #0]
   11d66:	2900      	cmp	r1, #0
   11d68:	9000      	str	r0, [sp, #0]
   11d6a:	d102      	bne.n	11d72 <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x14>
   11d6c:	e7ff      	b.n	11d6e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>
   11d6e:	b002      	add	sp, #8
   11d70:	bd80      	pop	{r7, pc}
   11d72:	9800      	ldr	r0, [sp, #0]
   11d74:	3004      	adds	r0, #4
   11d76:	f000 f805 	bl	11d84 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>
   11d7a:	e7f8      	b.n	11d6e <_ZN4core3ptr13drop_in_place17he8cd9a1fcda32a2fE+0x10>

00011d7c <_ZN4core3ptr13drop_in_place17hef1277471241eea2E>:
   11d7c:	b081      	sub	sp, #4
   11d7e:	9000      	str	r0, [sp, #0]
   11d80:	b001      	add	sp, #4
   11d82:	4770      	bx	lr

00011d84 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE>:
   11d84:	b580      	push	{r7, lr}
   11d86:	b082      	sub	sp, #8
   11d88:	9001      	str	r0, [sp, #4]
   11d8a:	f7ff ffb4 	bl	11cf6 <_ZN4core3ptr13drop_in_place17h22ac77b3595708cdE>
   11d8e:	e7ff      	b.n	11d90 <_ZN4core3ptr13drop_in_place17hf625580841d3425eE+0xc>
   11d90:	b002      	add	sp, #8
   11d92:	bd80      	pop	{r7, pc}

00011d94 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE>:
   11d94:	b089      	sub	sp, #36	; 0x24
   11d96:	9005      	str	r0, [sp, #20]
   11d98:	9106      	str	r1, [sp, #24]
   11d9a:	9107      	str	r1, [sp, #28]
   11d9c:	9907      	ldr	r1, [sp, #28]
   11d9e:	9002      	str	r0, [sp, #8]
   11da0:	9101      	str	r1, [sp, #4]
   11da2:	e7ff      	b.n	11da4 <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x10>
   11da4:	9802      	ldr	r0, [sp, #8]
   11da6:	9008      	str	r0, [sp, #32]
   11da8:	9908      	ldr	r1, [sp, #32]
   11daa:	9100      	str	r1, [sp, #0]
   11dac:	e7ff      	b.n	11dae <_ZN4core3fmt10ArgumentV13new17ha335fe88a9a7905eE+0x1a>
   11dae:	9800      	ldr	r0, [sp, #0]
   11db0:	9003      	str	r0, [sp, #12]
   11db2:	9901      	ldr	r1, [sp, #4]
   11db4:	9104      	str	r1, [sp, #16]
   11db6:	9803      	ldr	r0, [sp, #12]
   11db8:	9904      	ldr	r1, [sp, #16]
   11dba:	b009      	add	sp, #36	; 0x24
   11dbc:	4770      	bx	lr

00011dbe <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11dbe:	b580      	push	{r7, lr}
        (&self).into_iter()
   11dc0:	f000 f814 	bl	11dec <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>
   11dc4:	e7ff      	b.n	11dc6 <_ZN122_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h00fa40a10f17df08E+0x8>
    }
   11dc6:	bd80      	pop	{r7, pc}

00011dc8 <_ZN125_$LT$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$embedded_graphics..style..WithStyle$LT$C$GT$$GT$4fill17hdd8723930474aabcE>:
    fn fill(mut self, color: Option<C>) -> Self {
   11dc8:	b5b0      	push	{r4, r5, r7, lr}
   11dca:	b081      	sub	sp, #4
   11dcc:	469c      	mov	ip, r3
   11dce:	4696      	mov	lr, r2
   11dd0:	f8ad 2000 	strh.w	r2, [sp]
   11dd4:	f8ad 3002 	strh.w	r3, [sp, #2]
        self.style.fill_color = color;
   11dd8:	820a      	strh	r2, [r1, #16]
   11dda:	824b      	strh	r3, [r1, #18]
        self
   11ddc:	c91c      	ldmia	r1!, {r2, r3, r4}
   11dde:	c01c      	stmia	r0!, {r2, r3, r4}
   11de0:	e891 003c 	ldmia.w	r1, {r2, r3, r4, r5}
   11de4:	e880 003c 	stmia.w	r0, {r2, r3, r4, r5}
    }
   11de8:	b001      	add	sp, #4
   11dea:	bdb0      	pop	{r4, r5, r7, pc}

00011dec <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE>:
    C: PixelColor,
{
    type Item = Pixel<C>;
    type IntoIter = RectangleIterator<C>;

    fn into_iter(self) -> Self::IntoIter {
   11dec:	b570      	push	{r4, r5, r6, lr}
   11dee:	b08e      	sub	sp, #56	; 0x38
   11df0:	910d      	str	r1, [sp, #52]	; 0x34
        RectangleIterator {
            top_left: self.top_left,
   11df2:	680a      	ldr	r2, [r1, #0]
   11df4:	684b      	ldr	r3, [r1, #4]
            bottom_right: self.bottom_right,
   11df6:	f8d1 c008 	ldr.w	ip, [r1, #8]
   11dfa:	f8d1 e00c 	ldr.w	lr, [r1, #12]
            style: self.style,
   11dfe:	8b0c      	ldrh	r4, [r1, #24]
   11e00:	f8ad 4030 	strh.w	r4, [sp, #48]	; 0x30
   11e04:	690c      	ldr	r4, [r1, #16]
   11e06:	694d      	ldr	r5, [r1, #20]
   11e08:	950b      	str	r5, [sp, #44]	; 0x2c
   11e0a:	940a      	str	r4, [sp, #40]	; 0x28
   11e0c:	2400      	movs	r4, #0
            x: self.top_left[0],
   11e0e:	9009      	str	r0, [sp, #36]	; 0x24
   11e10:	4608      	mov	r0, r1
   11e12:	9108      	str	r1, [sp, #32]
   11e14:	4621      	mov	r1, r4
   11e16:	9207      	str	r2, [sp, #28]
   11e18:	9306      	str	r3, [sp, #24]
   11e1a:	f8cd c014 	str.w	ip, [sp, #20]
   11e1e:	f8cd e010 	str.w	lr, [sp, #16]
   11e22:	f7fc fac9 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e26:	9003      	str	r0, [sp, #12]
   11e28:	e7ff      	b.n	11e2a <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x3e>
   11e2a:	9803      	ldr	r0, [sp, #12]
   11e2c:	6801      	ldr	r1, [r0, #0]
   11e2e:	2201      	movs	r2, #1
            y: self.top_left[1],
   11e30:	9808      	ldr	r0, [sp, #32]
   11e32:	9102      	str	r1, [sp, #8]
   11e34:	4611      	mov	r1, r2
   11e36:	f7fc fabf 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e3a:	9001      	str	r0, [sp, #4]
   11e3c:	e7ff      	b.n	11e3e <_ZN126_$LT$$RF$embedded_graphics..primitives..rectangle..Rectangle$LT$C$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17h7b47f2b884035f6fE+0x52>
   11e3e:	9801      	ldr	r0, [sp, #4]
   11e40:	6801      	ldr	r1, [r0, #0]
        RectangleIterator {
   11e42:	9a07      	ldr	r2, [sp, #28]
   11e44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11e46:	601a      	str	r2, [r3, #0]
   11e48:	f8dd c018 	ldr.w	ip, [sp, #24]
   11e4c:	f8c3 c004 	str.w	ip, [r3, #4]
   11e50:	f8dd e014 	ldr.w	lr, [sp, #20]
   11e54:	f8c3 e008 	str.w	lr, [r3, #8]
   11e58:	9c04      	ldr	r4, [sp, #16]
   11e5a:	60dc      	str	r4, [r3, #12]
   11e5c:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
   11e60:	841d      	strh	r5, [r3, #32]
   11e62:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   11e64:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   11e66:	61de      	str	r6, [r3, #28]
   11e68:	619d      	str	r5, [r3, #24]
   11e6a:	9d02      	ldr	r5, [sp, #8]
   11e6c:	611d      	str	r5, [r3, #16]
   11e6e:	6159      	str	r1, [r3, #20]
        }
    }
   11e70:	b00e      	add	sp, #56	; 0x38
   11e72:	bd70      	pop	{r4, r5, r6, pc}

00011e74 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE>:
where
    C: PixelColor,
{
    type Item = Pixel<C>;

    fn next(&mut self) -> Option<Self::Item> {
   11e74:	b510      	push	{r4, lr}
   11e76:	b0d2      	sub	sp, #328	; 0x148
   11e78:	914f      	str	r1, [sp, #316]	; 0x13c
   11e7a:	2200      	movs	r2, #0
        // If entire object is off the top left of the screen or has no border or fill colour,
        // don't render anything
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11e7c:	902a      	str	r0, [sp, #168]	; 0xa8
   11e7e:	4608      	mov	r0, r1
   11e80:	9129      	str	r1, [sp, #164]	; 0xa4
   11e82:	4611      	mov	r1, r2
   11e84:	f7fc fa98 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11e88:	9028      	str	r0, [sp, #160]	; 0xa0
   11e8a:	e03c      	b.n	11f06 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x92>
   11e8c:	2001      	movs	r0, #1
   11e8e:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11e92:	e009      	b.n	11ea8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
   11e94:	2000      	movs	r0, #0
   11e96:	f88d 00af 	strb.w	r0, [sp, #175]	; 0xaf
   11e9a:	e005      	b.n	11ea8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11e9c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11e9e:	301c      	adds	r0, #28
   11ea0:	f002 ff79 	bl	14d96 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11ea4:	9027      	str	r0, [sp, #156]	; 0x9c
   11ea6:	e06c      	b.n	11f82 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x10e>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11ea8:	f89d 00af 	ldrb.w	r0, [sp, #175]	; 0xaf
   11eac:	07c0      	lsls	r0, r0, #31
   11eae:	2800      	cmp	r0, #0
   11eb0:	d172      	bne.n	11f98 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x124>
   11eb2:	e070      	b.n	11f96 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x122>
   11eb4:	2001      	movs	r0, #1
   11eb6:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11eba:	e00a      	b.n	11ed2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
   11ebc:	2000      	movs	r0, #0
   11ebe:	f88d 00b0 	strb.w	r0, [sp, #176]	; 0xb0
   11ec2:	e006      	b.n	11ed2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5e>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11ec4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ec6:	3008      	adds	r0, #8
   11ec8:	2100      	movs	r1, #0
   11eca:	f7fc fa75 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11ece:	9026      	str	r0, [sp, #152]	; 0x98
   11ed0:	e038      	b.n	11f44 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xd0>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11ed2:	f89d 00b0 	ldrb.w	r0, [sp, #176]	; 0xb0
   11ed6:	07c0      	lsls	r0, r0, #31
   11ed8:	2800      	cmp	r0, #0
   11eda:	d1d7      	bne.n	11e8c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11edc:	e7de      	b.n	11e9c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x28>
   11ede:	2001      	movs	r0, #1
   11ee0:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11ee4:	e009      	b.n	11efa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11ee6:	2000      	movs	r0, #0
   11ee8:	f88d 00b1 	strb.w	r0, [sp, #177]	; 0xb1
   11eec:	e005      	b.n	11efa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x86>
   11eee:	2101      	movs	r1, #1
   11ef0:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11ef2:	f7fc fa61 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11ef6:	9025      	str	r0, [sp, #148]	; 0x94
   11ef8:	e00a      	b.n	11f10 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x9c>
   11efa:	f89d 00b1 	ldrb.w	r0, [sp, #177]	; 0xb1
   11efe:	07c0      	lsls	r0, r0, #31
   11f00:	2800      	cmp	r0, #0
   11f02:	d1df      	bne.n	11ec4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x50>
   11f04:	e7da      	b.n	11ebc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
   11f06:	9828      	ldr	r0, [sp, #160]	; 0xa0
   11f08:	6801      	ldr	r1, [r0, #0]
   11f0a:	2900      	cmp	r1, #0
   11f0c:	d4e7      	bmi.n	11ede <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11f0e:	e7ee      	b.n	11eee <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x7a>
   11f10:	9825      	ldr	r0, [sp, #148]	; 0x94
   11f12:	6801      	ldr	r1, [r0, #0]
   11f14:	2900      	cmp	r1, #0
   11f16:	d4e2      	bmi.n	11ede <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x6a>
   11f18:	e7e5      	b.n	11ee6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x72>
   11f1a:	2001      	movs	r0, #1
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11f1c:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11f20:	e00a      	b.n	11f38 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11f22:	2000      	movs	r0, #0
   11f24:	f88d 00b2 	strb.w	r0, [sp, #178]	; 0xb2
   11f28:	e006      	b.n	11f38 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xc4>
   11f2a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f2c:	3008      	adds	r0, #8
   11f2e:	2101      	movs	r1, #1
   11f30:	f7fc fa42 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11f34:	9024      	str	r0, [sp, #144]	; 0x90
   11f36:	e00a      	b.n	11f4e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xda>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11f38:	f89d 00b2 	ldrb.w	r0, [sp, #178]	; 0xb2
   11f3c:	07c0      	lsls	r0, r0, #31
   11f3e:	2800      	cmp	r0, #0
   11f40:	d1b8      	bne.n	11eb4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40>
   11f42:	e7bb      	b.n	11ebc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48>
            && (self.bottom_right[0] < 0 || self.bottom_right[1] < 0)
   11f44:	9826      	ldr	r0, [sp, #152]	; 0x98
   11f46:	6801      	ldr	r1, [r0, #0]
   11f48:	2900      	cmp	r1, #0
   11f4a:	d4e6      	bmi.n	11f1a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11f4c:	e7ed      	b.n	11f2a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xb6>
   11f4e:	9824      	ldr	r0, [sp, #144]	; 0x90
   11f50:	6801      	ldr	r1, [r0, #0]
   11f52:	2900      	cmp	r1, #0
   11f54:	d4e1      	bmi.n	11f1a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xa6>
   11f56:	e7e4      	b.n	11f22 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xae>
   11f58:	2001      	movs	r0, #1
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11f5a:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11f5e:	e009      	b.n	11f74 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11f60:	2000      	movs	r0, #0
   11f62:	f88d 00b3 	strb.w	r0, [sp, #179]	; 0xb3
   11f66:	e005      	b.n	11f74 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x100>
   11f68:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11f6a:	3018      	adds	r0, #24
   11f6c:	f002 ff13 	bl	14d96 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>
   11f70:	9023      	str	r0, [sp, #140]	; 0x8c
   11f72:	e00b      	b.n	11f8c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x118>
        if (self.top_left[0] < 0 || self.top_left[1] < 0)
   11f74:	f89d 00b3 	ldrb.w	r0, [sp, #179]	; 0xb3
   11f78:	07c0      	lsls	r0, r0, #31
   11f7a:	2800      	cmp	r0, #0
   11f7c:	f47f af86 	bne.w	11e8c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x18>
   11f80:	e788      	b.n	11e94 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20>
            || (self.style.stroke_color.is_none() && self.style.fill_color.is_none())
   11f82:	9827      	ldr	r0, [sp, #156]	; 0x9c
   11f84:	07c1      	lsls	r1, r0, #31
   11f86:	2900      	cmp	r1, #0
   11f88:	d1ee      	bne.n	11f68 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xf4>
   11f8a:	e7e9      	b.n	11f60 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
   11f8c:	9823      	ldr	r0, [sp, #140]	; 0x8c
   11f8e:	07c1      	lsls	r1, r0, #31
   11f90:	2900      	cmp	r1, #0
   11f92:	d1e1      	bne.n	11f58 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xe4>
   11f94:	e7e4      	b.n	11f60 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0xec>
        {
            return None;
        }

        let pixel = loop {
   11f96:	e012      	b.n	11fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
   11f98:	2000      	movs	r0, #0
            return None;
   11f9a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   11f9c:	6008      	str	r0, [r1, #0]
   11f9e:	e7ff      	b.n	11fa0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                break out;
            }
        };

        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
    }
   11fa0:	b052      	add	sp, #328	; 0x148
   11fa2:	bd10      	pop	{r4, pc}
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   11fa4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   11fa6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   11fa8:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   11faa:	9b30      	ldr	r3, [sp, #192]	; 0xc0
   11fac:	934d      	str	r3, [sp, #308]	; 0x134
   11fae:	924c      	str	r2, [sp, #304]	; 0x130
   11fb0:	914b      	str	r1, [sp, #300]	; 0x12c
   11fb2:	904a      	str	r0, [sp, #296]	; 0x128
   11fb4:	a94a      	add	r1, sp, #296	; 0x128
   11fb6:	982a      	ldr	r0, [sp, #168]	; 0xa8
   11fb8:	f002 fdff 	bl	14bba <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>
   11fbc:	e201      	b.n	123c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x54e>
   11fbe:	2000      	movs	r0, #0
            let mut out = None;
   11fc0:	9031      	str	r0, [sp, #196]	; 0xc4
            if self.y > self.bottom_right[1] {
   11fc2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fc4:	6941      	ldr	r1, [r0, #20]
   11fc6:	3008      	adds	r0, #8
   11fc8:	2201      	movs	r2, #1
   11fca:	9122      	str	r1, [sp, #136]	; 0x88
   11fcc:	4611      	mov	r1, r2
   11fce:	f7fc f9f3 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   11fd2:	9021      	str	r0, [sp, #132]	; 0x84
   11fd4:	e7ff      	b.n	11fd6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x162>
   11fd6:	9821      	ldr	r0, [sp, #132]	; 0x84
   11fd8:	6801      	ldr	r1, [r0, #0]
   11fda:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11fdc:	428a      	cmp	r2, r1
   11fde:	dc13      	bgt.n	12008 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x194>
   11fe0:	e7ff      	b.n	11fe2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x16e>
            let border_width = self.style.stroke_width as i32;
   11fe2:	9829      	ldr	r0, [sp, #164]	; 0xa4
   11fe4:	f890 1020 	ldrb.w	r1, [r0, #32]
   11fe8:	460a      	mov	r2, r1
   11fea:	9150      	str	r1, [sp, #320]	; 0x140
            let tl = self.top_left;
   11fec:	6801      	ldr	r1, [r0, #0]
   11fee:	6843      	ldr	r3, [r0, #4]
   11ff0:	9135      	str	r1, [sp, #212]	; 0xd4
   11ff2:	9336      	str	r3, [sp, #216]	; 0xd8
            let br = self.bottom_right;
   11ff4:	6881      	ldr	r1, [r0, #8]
   11ff6:	68c3      	ldr	r3, [r0, #12]
   11ff8:	9137      	str	r1, [sp, #220]	; 0xdc
   11ffa:	9338      	str	r3, [sp, #224]	; 0xe0
            if self.x >= 0 && self.y >= 0 {
   11ffc:	6901      	ldr	r1, [r0, #16]
   11ffe:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   12002:	9220      	str	r2, [sp, #128]	; 0x80
   12004:	dc0b      	bgt.n	1201e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1aa>
   12006:	e006      	b.n	12016 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   12008:	2000      	movs	r0, #0
                break None;
   1200a:	902d      	str	r0, [sp, #180]	; 0xb4
   1200c:	e7ca      	b.n	11fa4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
   1200e:	2001      	movs	r0, #1
            if self.x >= 0 && self.y >= 0 {
   12010:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   12014:	e009      	b.n	1202a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   12016:	2000      	movs	r0, #0
   12018:	f88d 00e7 	strb.w	r0, [sp, #231]	; 0xe7
   1201c:	e005      	b.n	1202a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1b6>
   1201e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12020:	6941      	ldr	r1, [r0, #20]
   12022:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   12026:	dcf2      	bgt.n	1200e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x19a>
   12028:	e7f5      	b.n	12016 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1a2>
   1202a:	f89d 00e7 	ldrb.w	r0, [sp, #231]	; 0xe7
   1202e:	07c0      	lsls	r0, r0, #31
   12030:	2800      	cmp	r0, #0
   12032:	f000 8182 	beq.w	1233a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
   12036:	e7ff      	b.n	12038 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1c4>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12038:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1203a:	6941      	ldr	r1, [r0, #20]
   1203c:	a835      	add	r0, sp, #212	; 0xd4
   1203e:	2201      	movs	r2, #1
   12040:	911f      	str	r1, [sp, #124]	; 0x7c
   12042:	4611      	mov	r1, r2
   12044:	f7fc f9b8 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12048:	901e      	str	r0, [sp, #120]	; 0x78
   1204a:	e074      	b.n	12136 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2c2>
   1204c:	2001      	movs	r0, #1
                if (
   1204e:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   12052:	e009      	b.n	12068 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
   12054:	2000      	movs	r0, #0
   12056:	f88d 00e8 	strb.w	r0, [sp, #232]	; 0xe8
   1205a:	e005      	b.n	12068 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1f4>
                ) && self.style.stroke_color.is_some()
   1205c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1205e:	301c      	adds	r0, #28
   12060:	f002 fec9 	bl	14df6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   12064:	901d      	str	r0, [sp, #116]	; 0x74
   12066:	e104      	b.n	12272 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3fe>
                if (
   12068:	f89d 00e8 	ldrb.w	r0, [sp, #232]	; 0xe8
   1206c:	07c0      	lsls	r0, r0, #31
   1206e:	2800      	cmp	r0, #0
   12070:	f040 810a 	bne.w	12288 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x414>
   12074:	e103      	b.n	1227e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x40a>
   12076:	2001      	movs	r0, #1
   12078:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   1207c:	e00d      	b.n	1209a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
   1207e:	2000      	movs	r0, #0
   12080:	f88d 00e9 	strb.w	r0, [sp, #233]	; 0xe9
   12084:	e009      	b.n	1209a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x226>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   12086:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12088:	6901      	ldr	r1, [r0, #16]
   1208a:	a837      	add	r0, sp, #220	; 0xdc
   1208c:	2200      	movs	r2, #0
   1208e:	911c      	str	r1, [sp, #112]	; 0x70
   12090:	4611      	mov	r1, r2
   12092:	f7fc f991 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12096:	901b      	str	r0, [sp, #108]	; 0x6c
   12098:	e0d7      	b.n	1224a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3d6>
                if (
   1209a:	f89d 00e9 	ldrb.w	r0, [sp, #233]	; 0xe9
   1209e:	07c0      	lsls	r0, r0, #31
   120a0:	2800      	cmp	r0, #0
   120a2:	d1db      	bne.n	1205c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e8>
   120a4:	e7d6      	b.n	12054 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
   120a6:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   120a8:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   120ac:	e00d      	b.n	120ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
   120ae:	2000      	movs	r0, #0
   120b0:	f88d 00ea 	strb.w	r0, [sp, #234]	; 0xea
   120b4:	e009      	b.n	120ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x256>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   120b6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120b8:	6901      	ldr	r1, [r0, #16]
   120ba:	a835      	add	r0, sp, #212	; 0xd4
   120bc:	2200      	movs	r2, #0
   120be:	911a      	str	r1, [sp, #104]	; 0x68
   120c0:	4611      	mov	r1, r2
   120c2:	f7fc f979 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120c6:	9019      	str	r0, [sp, #100]	; 0x64
   120c8:	e090      	b.n	121ec <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x378>
                if (
   120ca:	f89d 00ea 	ldrb.w	r0, [sp, #234]	; 0xea
   120ce:	07c0      	lsls	r0, r0, #31
   120d0:	2800      	cmp	r0, #0
   120d2:	d1d0      	bne.n	12076 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   120d4:	e7d7      	b.n	12086 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x212>
   120d6:	2001      	movs	r0, #1
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   120d8:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   120dc:	e00d      	b.n	120fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
   120de:	2000      	movs	r0, #0
   120e0:	f88d 00eb 	strb.w	r0, [sp, #235]	; 0xeb
   120e4:	e009      	b.n	120fa <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x286>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   120e6:	9829      	ldr	r0, [sp, #164]	; 0xa4
   120e8:	6941      	ldr	r1, [r0, #20]
   120ea:	a837      	add	r0, sp, #220	; 0xdc
   120ec:	2201      	movs	r2, #1
   120ee:	9118      	str	r1, [sp, #96]	; 0x60
   120f0:	4611      	mov	r1, r2
   120f2:	f7fc f961 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   120f6:	9017      	str	r0, [sp, #92]	; 0x5c
   120f8:	e04b      	b.n	12192 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x31e>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   120fa:	f89d 00eb 	ldrb.w	r0, [sp, #235]	; 0xeb
   120fe:	07c0      	lsls	r0, r0, #31
   12100:	2800      	cmp	r0, #0
   12102:	d1d0      	bne.n	120a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   12104:	e7d7      	b.n	120b6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x242>
   12106:	2001      	movs	r0, #1
   12108:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   1210c:	e00d      	b.n	1212a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   1210e:	2000      	movs	r0, #0
   12110:	f88d 00ec 	strb.w	r0, [sp, #236]	; 0xec
   12114:	e009      	b.n	1212a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2b6>
   12116:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12118:	6941      	ldr	r1, [r0, #20]
   1211a:	a835      	add	r0, sp, #212	; 0xd4
   1211c:	2201      	movs	r2, #1
   1211e:	9116      	str	r1, [sp, #88]	; 0x58
   12120:	4611      	mov	r1, r2
   12122:	f7fc f949 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12126:	9015      	str	r0, [sp, #84]	; 0x54
   12128:	e00b      	b.n	12142 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ce>
   1212a:	f89d 00ec 	ldrb.w	r0, [sp, #236]	; 0xec
   1212e:	07c0      	lsls	r0, r0, #31
   12130:	2800      	cmp	r0, #0
   12132:	d1d0      	bne.n	120d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12134:	e7d7      	b.n	120e6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x272>
   12136:	981e      	ldr	r0, [sp, #120]	; 0x78
   12138:	6801      	ldr	r1, [r0, #0]
   1213a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   1213c:	428a      	cmp	r2, r1
   1213e:	daea      	bge.n	12116 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2a2>
   12140:	e7e5      	b.n	1210e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   12142:	9815      	ldr	r0, [sp, #84]	; 0x54
   12144:	6801      	ldr	r1, [r0, #0]
   12146:	9a20      	ldr	r2, [sp, #128]	; 0x80
   12148:	188b      	adds	r3, r1, r2
   1214a:	469c      	mov	ip, r3
   1214c:	428b      	cmp	r3, r1
   1214e:	f8cd c050 	str.w	ip, [sp, #80]	; 0x50
   12152:	f180 8137 	bvs.w	123c4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x550>
   12156:	e7ff      	b.n	12158 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2e4>
   12158:	9816      	ldr	r0, [sp, #88]	; 0x58
   1215a:	9914      	ldr	r1, [sp, #80]	; 0x50
   1215c:	4288      	cmp	r0, r1
   1215e:	dbd2      	blt.n	12106 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x292>
   12160:	e7d5      	b.n	1210e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x29a>
   12162:	2001      	movs	r0, #1
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12164:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   12168:	e00d      	b.n	12186 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   1216a:	2000      	movs	r0, #0
   1216c:	f88d 00ed 	strb.w	r0, [sp, #237]	; 0xed
   12170:	e009      	b.n	12186 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x312>
   12172:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12174:	6941      	ldr	r1, [r0, #20]
   12176:	a837      	add	r0, sp, #220	; 0xdc
   12178:	2201      	movs	r2, #1
   1217a:	9113      	str	r1, [sp, #76]	; 0x4c
   1217c:	4611      	mov	r1, r2
   1217e:	f7fc f91b 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12182:	9012      	str	r0, [sp, #72]	; 0x48
   12184:	e00b      	b.n	1219e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x32a>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   12186:	f89d 00ed 	ldrb.w	r0, [sp, #237]	; 0xed
   1218a:	07c0      	lsls	r0, r0, #31
   1218c:	2800      	cmp	r0, #0
   1218e:	d1a2      	bne.n	120d6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x262>
   12190:	e7a5      	b.n	120de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x26a>
                || (self.y <= br[1] && self.y > br[1] - border_width)
   12192:	9817      	ldr	r0, [sp, #92]	; 0x5c
   12194:	6801      	ldr	r1, [r0, #0]
   12196:	9a18      	ldr	r2, [sp, #96]	; 0x60
   12198:	428a      	cmp	r2, r1
   1219a:	ddea      	ble.n	12172 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2fe>
   1219c:	e7e5      	b.n	1216a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   1219e:	9812      	ldr	r0, [sp, #72]	; 0x48
   121a0:	6801      	ldr	r1, [r0, #0]
   121a2:	9a20      	ldr	r2, [sp, #128]	; 0x80
   121a4:	1a8b      	subs	r3, r1, r2
   121a6:	4291      	cmp	r1, r2
   121a8:	9311      	str	r3, [sp, #68]	; 0x44
   121aa:	f180 8117 	bvs.w	123dc <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x568>
   121ae:	e7ff      	b.n	121b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x33c>
   121b0:	9813      	ldr	r0, [sp, #76]	; 0x4c
   121b2:	9911      	ldr	r1, [sp, #68]	; 0x44
   121b4:	4288      	cmp	r0, r1
   121b6:	dcd4      	bgt.n	12162 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2ee>
   121b8:	e7d7      	b.n	1216a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x2f6>
   121ba:	2001      	movs	r0, #1
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   121bc:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   121c0:	e00d      	b.n	121de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   121c2:	2000      	movs	r0, #0
   121c4:	f88d 00ee 	strb.w	r0, [sp, #238]	; 0xee
   121c8:	e009      	b.n	121de <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x36a>
   121ca:	9829      	ldr	r0, [sp, #164]	; 0xa4
   121cc:	6901      	ldr	r1, [r0, #16]
   121ce:	a835      	add	r0, sp, #212	; 0xd4
   121d0:	2200      	movs	r2, #0
   121d2:	9110      	str	r1, [sp, #64]	; 0x40
   121d4:	4611      	mov	r1, r2
   121d6:	f7fc f8ef 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   121da:	900f      	str	r0, [sp, #60]	; 0x3c
   121dc:	e00c      	b.n	121f8 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x384>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   121de:	f89d 00ee 	ldrb.w	r0, [sp, #238]	; 0xee
   121e2:	07c0      	lsls	r0, r0, #31
   121e4:	2800      	cmp	r0, #0
   121e6:	f47f af5e 	bne.w	120a6 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x232>
   121ea:	e760      	b.n	120ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x23a>
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   121ec:	9819      	ldr	r0, [sp, #100]	; 0x64
   121ee:	6801      	ldr	r1, [r0, #0]
   121f0:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   121f2:	428a      	cmp	r2, r1
   121f4:	dae9      	bge.n	121ca <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x356>
   121f6:	e7e4      	b.n	121c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   121f8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   121fa:	6801      	ldr	r1, [r0, #0]
   121fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   121fe:	188b      	adds	r3, r1, r2
   12200:	469c      	mov	ip, r3
   12202:	428b      	cmp	r3, r1
   12204:	f8cd c038 	str.w	ip, [sp, #56]	; 0x38
   12208:	f180 80f4 	bvs.w	123f4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x580>
   1220c:	e7ff      	b.n	1220e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x39a>
   1220e:	9810      	ldr	r0, [sp, #64]	; 0x40
   12210:	990e      	ldr	r1, [sp, #56]	; 0x38
   12212:	4288      	cmp	r0, r1
   12214:	dbd1      	blt.n	121ba <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x346>
   12216:	e7d4      	b.n	121c2 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x34e>
   12218:	2001      	movs	r0, #1
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1221a:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   1221e:	e00d      	b.n	1223c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12220:	2000      	movs	r0, #0
   12222:	f88d 00ef 	strb.w	r0, [sp, #239]	; 0xef
   12226:	e009      	b.n	1223c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3c8>
   12228:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1222a:	6901      	ldr	r1, [r0, #16]
   1222c:	a837      	add	r0, sp, #220	; 0xdc
   1222e:	2200      	movs	r2, #0
   12230:	910d      	str	r1, [sp, #52]	; 0x34
   12232:	4611      	mov	r1, r2
   12234:	f7fc f8c0 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12238:	900c      	str	r0, [sp, #48]	; 0x30
   1223a:	e00c      	b.n	12256 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3e2>
                if (
   1223c:	f89d 00ef 	ldrb.w	r0, [sp, #239]	; 0xef
   12240:	07c0      	lsls	r0, r0, #31
   12242:	2800      	cmp	r0, #0
   12244:	f47f af17 	bne.w	12076 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x202>
   12248:	e719      	b.n	1207e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x20a>
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1224a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1224c:	6801      	ldr	r1, [r0, #0]
   1224e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   12250:	428a      	cmp	r2, r1
   12252:	dde9      	ble.n	12228 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3b4>
   12254:	e7e4      	b.n	12220 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
   12256:	980c      	ldr	r0, [sp, #48]	; 0x30
   12258:	6801      	ldr	r1, [r0, #0]
   1225a:	9a20      	ldr	r2, [sp, #128]	; 0x80
   1225c:	1a8b      	subs	r3, r1, r2
   1225e:	4291      	cmp	r1, r2
   12260:	930b      	str	r3, [sp, #44]	; 0x2c
   12262:	f180 80d3 	bvs.w	1240c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x598>
   12266:	e7ff      	b.n	12268 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3f4>
   12268:	980d      	ldr	r0, [sp, #52]	; 0x34
   1226a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1226c:	4288      	cmp	r0, r1
   1226e:	dcd3      	bgt.n	12218 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3a4>
   12270:	e7d6      	b.n	12220 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x3ac>
                if (
   12272:	981d      	ldr	r0, [sp, #116]	; 0x74
   12274:	07c1      	lsls	r1, r0, #31
   12276:	2900      	cmp	r1, #0
   12278:	f47f aee8 	bne.w	1204c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1d8>
   1227c:	e6ea      	b.n	12054 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x1e0>
                else if let Some(fill) = self.style.fill_color {
   1227e:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12280:	8b01      	ldrh	r1, [r0, #24]
   12282:	2901      	cmp	r1, #1
   12284:	d03b      	beq.n	122fe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x48a>
   12286:	e057      	b.n	12338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                        self.x,
   12288:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1228a:	6901      	ldr	r1, [r0, #16]
                        self.y,
   1228c:	6942      	ldr	r2, [r0, #20]
                        self.style.stroke_color.expect("Expected stroke"),
   1228e:	8bc3      	ldrh	r3, [r0, #30]
   12290:	8b80      	ldrh	r0, [r0, #28]
   12292:	f24f 7c14 	movw	ip, #63252	; 0xf714
   12296:	f2c0 0c01 	movt	ip, #1
   1229a:	46ee      	mov	lr, sp
   1229c:	f8ce c000 	str.w	ip, [lr]
   122a0:	f24f 7c04 	movw	ip, #63236	; 0xf704
   122a4:	f2c0 0c01 	movt	ip, #1
   122a8:	f04f 0e0f 	mov.w	lr, #15
   122ac:	910a      	str	r1, [sp, #40]	; 0x28
   122ae:	4619      	mov	r1, r3
   122b0:	9209      	str	r2, [sp, #36]	; 0x24
   122b2:	4662      	mov	r2, ip
   122b4:	4673      	mov	r3, lr
   122b6:	f002 fcf2 	bl	14c9e <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>
   122ba:	9008      	str	r0, [sp, #32]
   122bc:	e7ff      	b.n	122be <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x44a>
                    out = Some((
   122be:	980a      	ldr	r0, [sp, #40]	; 0x28
   122c0:	9040      	str	r0, [sp, #256]	; 0x100
   122c2:	9909      	ldr	r1, [sp, #36]	; 0x24
   122c4:	9141      	str	r1, [sp, #260]	; 0x104
   122c6:	9a08      	ldr	r2, [sp, #32]
   122c8:	f8ad 2108 	strh.w	r2, [sp, #264]	; 0x108
   122cc:	9b40      	ldr	r3, [sp, #256]	; 0x100
   122ce:	f8dd c104 	ldr.w	ip, [sp, #260]	; 0x104
   122d2:	f8dd e108 	ldr.w	lr, [sp, #264]	; 0x108
   122d6:	f8cd e0fc 	str.w	lr, [sp, #252]	; 0xfc
   122da:	f8cd c0f8 	str.w	ip, [sp, #248]	; 0xf8
   122de:	933d      	str	r3, [sp, #244]	; 0xf4
   122e0:	2301      	movs	r3, #1
   122e2:	933c      	str	r3, [sp, #240]	; 0xf0
   122e4:	9b3c      	ldr	r3, [sp, #240]	; 0xf0
   122e6:	f8dd c0f4 	ldr.w	ip, [sp, #244]	; 0xf4
   122ea:	f8dd e0f8 	ldr.w	lr, [sp, #248]	; 0xf8
   122ee:	9c3f      	ldr	r4, [sp, #252]	; 0xfc
   122f0:	9434      	str	r4, [sp, #208]	; 0xd0
   122f2:	f8cd e0cc 	str.w	lr, [sp, #204]	; 0xcc
   122f6:	f8cd c0c8 	str.w	ip, [sp, #200]	; 0xc8
   122fa:	9331      	str	r3, [sp, #196]	; 0xc4
                if (
   122fc:	e01c      	b.n	12338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
                else if let Some(fill) = self.style.fill_color {
   122fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12300:	8b41      	ldrh	r1, [r0, #26]
   12302:	f8ad 1146 	strh.w	r1, [sp, #326]	; 0x146
                    out = Some((self.x, self.y, fill));
   12306:	6902      	ldr	r2, [r0, #16]
   12308:	6943      	ldr	r3, [r0, #20]
   1230a:	9247      	str	r2, [sp, #284]	; 0x11c
   1230c:	9348      	str	r3, [sp, #288]	; 0x120
   1230e:	f8ad 1124 	strh.w	r1, [sp, #292]	; 0x124
   12312:	9947      	ldr	r1, [sp, #284]	; 0x11c
   12314:	9a48      	ldr	r2, [sp, #288]	; 0x120
   12316:	9b49      	ldr	r3, [sp, #292]	; 0x124
   12318:	9346      	str	r3, [sp, #280]	; 0x118
   1231a:	9245      	str	r2, [sp, #276]	; 0x114
   1231c:	9144      	str	r1, [sp, #272]	; 0x110
   1231e:	2101      	movs	r1, #1
   12320:	9143      	str	r1, [sp, #268]	; 0x10c
   12322:	9943      	ldr	r1, [sp, #268]	; 0x10c
   12324:	9a44      	ldr	r2, [sp, #272]	; 0x110
   12326:	9b45      	ldr	r3, [sp, #276]	; 0x114
   12328:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   1232c:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
   12330:	9333      	str	r3, [sp, #204]	; 0xcc
   12332:	9232      	str	r2, [sp, #200]	; 0xc8
   12334:	9131      	str	r1, [sp, #196]	; 0xc4
                else if let Some(fill) = self.style.fill_color {
   12336:	e7ff      	b.n	12338 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c4>
            if self.x >= 0 && self.y >= 0 {
   12338:	e7ff      	b.n	1233a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4c6>
            self.x += 1;
   1233a:	9829      	ldr	r0, [sp, #164]	; 0xa4
   1233c:	6901      	ldr	r1, [r0, #16]
   1233e:	1c4a      	adds	r2, r1, #1
   12340:	4613      	mov	r3, r2
   12342:	428a      	cmp	r2, r1
   12344:	9307      	str	r3, [sp, #28]
   12346:	d66d      	bvs.n	12424 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5b0>
   12348:	e7ff      	b.n	1234a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4d6>
   1234a:	9807      	ldr	r0, [sp, #28]
   1234c:	9929      	ldr	r1, [sp, #164]	; 0xa4
   1234e:	6108      	str	r0, [r1, #16]
            if self.x > self.bottom_right[0] {
   12350:	690a      	ldr	r2, [r1, #16]
   12352:	f101 0008 	add.w	r0, r1, #8
   12356:	2100      	movs	r1, #0
   12358:	9206      	str	r2, [sp, #24]
   1235a:	f7fc f82d 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   1235e:	9005      	str	r0, [sp, #20]
   12360:	e7ff      	b.n	12362 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4ee>
   12362:	9805      	ldr	r0, [sp, #20]
   12364:	6801      	ldr	r1, [r0, #0]
   12366:	9a06      	ldr	r2, [sp, #24]
   12368:	428a      	cmp	r2, r1
   1236a:	dd16      	ble.n	1239a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   1236c:	e7ff      	b.n	1236e <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x4fa>
   1236e:	2100      	movs	r1, #0
                self.x = self.top_left[0];
   12370:	9829      	ldr	r0, [sp, #164]	; 0xa4
   12372:	f7fc f821 	bl	e3b8 <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$core..ops..index..Index$LT$usize$GT$$GT$5index17h19914737926062a4E>
   12376:	9004      	str	r0, [sp, #16]
   12378:	e7ff      	b.n	1237a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x506>
   1237a:	9804      	ldr	r0, [sp, #16]
   1237c:	6801      	ldr	r1, [r0, #0]
   1237e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   12380:	6111      	str	r1, [r2, #16]
                self.y += 1;
   12382:	6951      	ldr	r1, [r2, #20]
   12384:	1c4b      	adds	r3, r1, #1
   12386:	469c      	mov	ip, r3
   12388:	428b      	cmp	r3, r1
   1238a:	f8cd c00c 	str.w	ip, [sp, #12]
   1238e:	d655      	bvs.n	1243c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x5c8>
   12390:	e7ff      	b.n	12392 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x51e>
   12392:	9803      	ldr	r0, [sp, #12]
   12394:	9929      	ldr	r1, [sp, #164]	; 0xa4
   12396:	6148      	str	r0, [r1, #20]
            if self.x > self.bottom_right[0] {
   12398:	e7ff      	b.n	1239a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x526>
   1239a:	a831      	add	r0, sp, #196	; 0xc4
            if out.is_some() {
   1239c:	f002 fd19 	bl	14dd2 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>
   123a0:	9002      	str	r0, [sp, #8]
   123a2:	e7ff      	b.n	123a4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x530>
   123a4:	9802      	ldr	r0, [sp, #8]
   123a6:	07c1      	lsls	r1, r0, #31
   123a8:	2900      	cmp	r1, #0
   123aa:	d101      	bne.n	123b0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53c>
   123ac:	e7ff      	b.n	123ae <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x53a>
        let pixel = loop {
   123ae:	e606      	b.n	11fbe <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x14a>
                break out;
   123b0:	9831      	ldr	r0, [sp, #196]	; 0xc4
   123b2:	9932      	ldr	r1, [sp, #200]	; 0xc8
   123b4:	9a33      	ldr	r2, [sp, #204]	; 0xcc
   123b6:	9b34      	ldr	r3, [sp, #208]	; 0xd0
   123b8:	9330      	str	r3, [sp, #192]	; 0xc0
   123ba:	922f      	str	r2, [sp, #188]	; 0xbc
   123bc:	912e      	str	r1, [sp, #184]	; 0xb8
   123be:	902d      	str	r0, [sp, #180]	; 0xb4
   123c0:	e5f0      	b.n	11fa4 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x130>
    }
   123c2:	e5ed      	b.n	11fa0 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17hb68a9e1cde827e3dE+0x12c>
                    (self.y >= tl[1] && self.y < tl[1] + border_width)
   123c4:	f24f 6090 	movw	r0, #63120	; 0xf690
   123c8:	f2c0 0001 	movt	r0, #1
   123cc:	f24f 6280 	movw	r2, #63104	; 0xf680
   123d0:	f2c0 0201 	movt	r2, #1
   123d4:	211c      	movs	r1, #28
   123d6:	f004 fb65 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123da:	defe      	udf	#254	; 0xfe
                || (self.y <= br[1] && self.y > br[1] - border_width)
   123dc:	f24f 60c0 	movw	r0, #63168	; 0xf6c0
   123e0:	f2c0 0001 	movt	r0, #1
   123e4:	f24f 62ac 	movw	r2, #63148	; 0xf6ac
   123e8:	f2c0 0201 	movt	r2, #1
   123ec:	2121      	movs	r1, #33	; 0x21
   123ee:	f004 fb59 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   123f2:	defe      	udf	#254	; 0xfe
                || (self.x >= tl[0] && self.x < tl[0] + border_width)
   123f4:	f24f 6090 	movw	r0, #63120	; 0xf690
   123f8:	f2c0 0001 	movt	r0, #1
   123fc:	f24f 62e4 	movw	r2, #63204	; 0xf6e4
   12400:	f2c0 0201 	movt	r2, #1
   12404:	211c      	movs	r1, #28
   12406:	f004 fb4d 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1240a:	defe      	udf	#254	; 0xfe
                || (self.x <= br[0] && self.x > br[0] - border_width)
   1240c:	f24f 60c0 	movw	r0, #63168	; 0xf6c0
   12410:	f2c0 0001 	movt	r0, #1
   12414:	f24f 62f4 	movw	r2, #63220	; 0xf6f4
   12418:	f2c0 0201 	movt	r2, #1
   1241c:	2121      	movs	r1, #33	; 0x21
   1241e:	f004 fb41 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12422:	defe      	udf	#254	; 0xfe
            self.x += 1;
   12424:	f24f 6090 	movw	r0, #63120	; 0xf690
   12428:	f2c0 0001 	movt	r0, #1
   1242c:	f24f 7224 	movw	r2, #63268	; 0xf724
   12430:	f2c0 0201 	movt	r2, #1
   12434:	211c      	movs	r1, #28
   12436:	f004 fb35 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1243a:	defe      	udf	#254	; 0xfe
                self.y += 1;
   1243c:	f24f 6090 	movw	r0, #63120	; 0xf690
   12440:	f2c0 0001 	movt	r0, #1
   12444:	f24f 7234 	movw	r2, #63284	; 0xf734
   12448:	f2c0 0201 	movt	r2, #1
   1244c:	211c      	movs	r1, #28
   1244e:	f004 fb29 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   12452:	defe      	udf	#254	; 0xfe

00012454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>:
        pixel.map(|(x, y, c)| Pixel(Coord::new(x, y).to_unsigned(), c))
   12454:	b580      	push	{r7, lr}
   12456:	b08a      	sub	sp, #40	; 0x28
   12458:	680a      	ldr	r2, [r1, #0]
   1245a:	9207      	str	r2, [sp, #28]
   1245c:	684b      	ldr	r3, [r1, #4]
   1245e:	9308      	str	r3, [sp, #32]
   12460:	8909      	ldrh	r1, [r1, #8]
   12462:	468c      	mov	ip, r1
   12464:	f8ad 1026 	strh.w	r1, [sp, #38]	; 0x26
   12468:	9005      	str	r0, [sp, #20]
   1246a:	4610      	mov	r0, r2
   1246c:	4619      	mov	r1, r3
   1246e:	f8cd c010 	str.w	ip, [sp, #16]
   12472:	f7fb ff98 	bl	e3a6 <_ZN17embedded_graphics5coord14internal_coord5Coord3new17h6a39d480fe7e812eE>
   12476:	9003      	str	r0, [sp, #12]
   12478:	9102      	str	r1, [sp, #8]
   1247a:	e7ff      	b.n	1247c <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x28>
   1247c:	9803      	ldr	r0, [sp, #12]
   1247e:	9902      	ldr	r1, [sp, #8]
   12480:	f7fb ffe3 	bl	e44a <_ZN104_$LT$embedded_graphics..coord..internal_coord..Coord$u20$as$u20$embedded_graphics..coord..ToUnsigned$GT$11to_unsigned17ha825fe93186cb14cE>
   12484:	9001      	str	r0, [sp, #4]
   12486:	9100      	str	r1, [sp, #0]
   12488:	e7ff      	b.n	1248a <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E+0x36>
   1248a:	9801      	ldr	r0, [sp, #4]
   1248c:	9905      	ldr	r1, [sp, #20]
   1248e:	6008      	str	r0, [r1, #0]
   12490:	9a00      	ldr	r2, [sp, #0]
   12492:	604a      	str	r2, [r1, #4]
   12494:	9b04      	ldr	r3, [sp, #16]
   12496:	810b      	strh	r3, [r1, #8]
   12498:	b00a      	add	sp, #40	; 0x28
   1249a:	bd80      	pop	{r7, pc}

0001249c <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E>:
    pub fn new(top_left: Coord, bottom_right: Coord) -> Self {
   1249c:	b510      	push	{r4, lr}
   1249e:	b08c      	sub	sp, #48	; 0x30
   124a0:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   124a4:	9108      	str	r1, [sp, #32]
   124a6:	9209      	str	r2, [sp, #36]	; 0x24
   124a8:	930a      	str	r3, [sp, #40]	; 0x28
   124aa:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   124ae:	f10d 0e14 	add.w	lr, sp, #20
            style: Style::default(),
   124b2:	9004      	str	r0, [sp, #16]
   124b4:	4670      	mov	r0, lr
   124b6:	9303      	str	r3, [sp, #12]
   124b8:	9202      	str	r2, [sp, #8]
   124ba:	9101      	str	r1, [sp, #4]
   124bc:	f8cd c000 	str.w	ip, [sp]
   124c0:	f000 f818 	bl	124f4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>
   124c4:	e7ff      	b.n	124c6 <_ZN17embedded_graphics10primitives9rectangle18Rectangle$LT$C$GT$3new17h4bd3343d7fa2f106E+0x2a>
        Rectangle {
   124c6:	9801      	ldr	r0, [sp, #4]
   124c8:	9904      	ldr	r1, [sp, #16]
   124ca:	6008      	str	r0, [r1, #0]
   124cc:	9a02      	ldr	r2, [sp, #8]
   124ce:	604a      	str	r2, [r1, #4]
   124d0:	9b03      	ldr	r3, [sp, #12]
   124d2:	608b      	str	r3, [r1, #8]
   124d4:	f8dd c000 	ldr.w	ip, [sp]
   124d8:	f8c1 c00c 	str.w	ip, [r1, #12]
   124dc:	f8bd e01c 	ldrh.w	lr, [sp, #28]
   124e0:	f8a1 e018 	strh.w	lr, [r1, #24]
   124e4:	f8dd e014 	ldr.w	lr, [sp, #20]
   124e8:	9c06      	ldr	r4, [sp, #24]
   124ea:	614c      	str	r4, [r1, #20]
   124ec:	f8c1 e010 	str.w	lr, [r1, #16]
    }
   124f0:	b00c      	add	sp, #48	; 0x30
   124f2:	bd10      	pop	{r4, pc}

000124f4 <_ZN83_$LT$embedded_graphics..style..Style$LT$P$GT$$u20$as$u20$core..default..Default$GT$7default17h273dbbc2bd76aabcE>:

impl<P> Default for Style<P>
where
    P: PixelColor,
{
    fn default() -> Self {
   124f4:	b082      	sub	sp, #8
   124f6:	2100      	movs	r1, #0
        Self {
            fill_color: None,
   124f8:	f8ad 1000 	strh.w	r1, [sp]
            stroke_color: None,
   124fc:	f8ad 1004 	strh.w	r1, [sp, #4]
        Self {
   12500:	f8bd 1000 	ldrh.w	r1, [sp]
   12504:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   12508:	8001      	strh	r1, [r0, #0]
   1250a:	8042      	strh	r2, [r0, #2]
   1250c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   12510:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   12514:	8081      	strh	r1, [r0, #4]
   12516:	80c2      	strh	r2, [r0, #6]
   12518:	2101      	movs	r1, #1
   1251a:	7201      	strb	r1, [r0, #8]
            stroke_width: 1,
        }
    }
   1251c:	b002      	add	sp, #8
   1251e:	4770      	bx	lr

00012520 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>:
use num_derive::ToPrimitive;

/// ST7735 instructions.
#[derive(ToPrimitive)]
   12520:	b08a      	sub	sp, #40	; 0x28
   12522:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Instruction {
   12524:	7800      	ldrb	r0, [r0, #0]
   12526:	9001      	str	r0, [sp, #4]
   12528:	9901      	ldr	r1, [sp, #4]
   1252a:	e8df f011 	tbh	[pc, r1, lsl #1]
   1252e:	0103      	.short	0x0103
   12530:	01020107 	.word	0x01020107
   12534:	010c0102 	.word	0x010c0102
   12538:	01020102 	.word	0x01020102
   1253c:	01020102 	.word	0x01020102
   12540:	01020111 	.word	0x01020111
   12544:	01020102 	.word	0x01020102
   12548:	01020102 	.word	0x01020102
   1254c:	01160102 	.word	0x01160102
   12550:	0120011b 	.word	0x0120011b
   12554:	01020125 	.word	0x01020125
   12558:	01020102 	.word	0x01020102
   1255c:	01020102 	.word	0x01020102
   12560:	01020102 	.word	0x01020102
   12564:	01020102 	.word	0x01020102
   12568:	01020102 	.word	0x01020102
   1256c:	012a0102 	.word	0x012a0102
   12570:	0102012f 	.word	0x0102012f
   12574:	01020102 	.word	0x01020102
   12578:	01020102 	.word	0x01020102
   1257c:	01340102 	.word	0x01340102
   12580:	013e0139 	.word	0x013e0139
   12584:	01480143 	.word	0x01480143
   12588:	014d0102 	.word	0x014d0102
   1258c:	01520102 	.word	0x01520102
   12590:	01020102 	.word	0x01020102
   12594:	01020102 	.word	0x01020102
   12598:	015c0102 	.word	0x015c0102
   1259c:	01020102 	.word	0x01020102
   125a0:	01570102 	.word	0x01570102
   125a4:	01020102 	.word	0x01020102
   125a8:	01020102 	.word	0x01020102
   125ac:	01020102 	.word	0x01020102
   125b0:	01020102 	.word	0x01020102
   125b4:	01020102 	.word	0x01020102
   125b8:	01020102 	.word	0x01020102
   125bc:	01020102 	.word	0x01020102
   125c0:	01020102 	.word	0x01020102
   125c4:	01020102 	.word	0x01020102
   125c8:	01020102 	.word	0x01020102
   125cc:	01020102 	.word	0x01020102
   125d0:	01020102 	.word	0x01020102
   125d4:	01020102 	.word	0x01020102
   125d8:	01020102 	.word	0x01020102
   125dc:	01020102 	.word	0x01020102
   125e0:	01020102 	.word	0x01020102
   125e4:	01020102 	.word	0x01020102
   125e8:	01020102 	.word	0x01020102
   125ec:	01020102 	.word	0x01020102
   125f0:	01020102 	.word	0x01020102
   125f4:	01020102 	.word	0x01020102
   125f8:	01020102 	.word	0x01020102
   125fc:	01020102 	.word	0x01020102
   12600:	01020102 	.word	0x01020102
   12604:	01020102 	.word	0x01020102
   12608:	01020102 	.word	0x01020102
   1260c:	01020102 	.word	0x01020102
   12610:	01020102 	.word	0x01020102
   12614:	01020102 	.word	0x01020102
   12618:	01020102 	.word	0x01020102
   1261c:	01020102 	.word	0x01020102
   12620:	01020102 	.word	0x01020102
   12624:	01020102 	.word	0x01020102
   12628:	01020102 	.word	0x01020102
   1262c:	01020102 	.word	0x01020102
   12630:	01020102 	.word	0x01020102
   12634:	01020102 	.word	0x01020102
   12638:	01020102 	.word	0x01020102
   1263c:	01020102 	.word	0x01020102
   12640:	01020102 	.word	0x01020102
   12644:	01020102 	.word	0x01020102
   12648:	01020102 	.word	0x01020102
   1264c:	01020102 	.word	0x01020102
   12650:	01020102 	.word	0x01020102
   12654:	01020102 	.word	0x01020102
   12658:	01020102 	.word	0x01020102
   1265c:	01020102 	.word	0x01020102
   12660:	01020102 	.word	0x01020102
   12664:	01020102 	.word	0x01020102
   12668:	01020102 	.word	0x01020102
   1266c:	01020102 	.word	0x01020102
   12670:	01020102 	.word	0x01020102
   12674:	01020102 	.word	0x01020102
   12678:	01020102 	.word	0x01020102
   1267c:	01020102 	.word	0x01020102
   12680:	01020102 	.word	0x01020102
   12684:	01020102 	.word	0x01020102
   12688:	01020102 	.word	0x01020102
   1268c:	01020102 	.word	0x01020102
   12690:	01660161 	.word	0x01660161
   12694:	0170016b 	.word	0x0170016b
   12698:	01750102 	.word	0x01750102
   1269c:	01020102 	.word	0x01020102
   126a0:	01020102 	.word	0x01020102
   126a4:	01020102 	.word	0x01020102
   126a8:	01020102 	.word	0x01020102
   126ac:	017a0102 	.word	0x017a0102
   126b0:	0184017f 	.word	0x0184017f
   126b4:	018e0189 	.word	0x018e0189
   126b8:	01020193 	.word	0x01020193
   126bc:	01020102 	.word	0x01020102
   126c0:	01020102 	.word	0x01020102
   126c4:	01020102 	.word	0x01020102
   126c8:	01020102 	.word	0x01020102
   126cc:	01020102 	.word	0x01020102
   126d0:	01020102 	.word	0x01020102
   126d4:	01020102 	.word	0x01020102
   126d8:	01020102 	.word	0x01020102
   126dc:	01020102 	.word	0x01020102
   126e0:	01980102 	.word	0x01980102
   126e4:	01a2019d 	.word	0x01a2019d
   126e8:	010201a7 	.word	0x010201a7
   126ec:	01b10102 	.word	0x01b10102
   126f0:	010200fd 	.word	0x010200fd
   126f4:	01020102 	.word	0x01020102
   126f8:	01020102 	.word	0x01020102
   126fc:	01020102 	.word	0x01020102
   12700:	01020102 	.word	0x01020102
   12704:	01020102 	.word	0x01020102
   12708:	01020102 	.word	0x01020102
   1270c:	01020102 	.word	0x01020102
   12710:	01020102 	.word	0x01020102
   12714:	01020102 	.word	0x01020102
   12718:	01020102 	.word	0x01020102
   1271c:	01020102 	.word	0x01020102
   12720:	01020102 	.word	0x01020102
   12724:	01ac0102 	.word	0x01ac0102
   12728:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   1272a:	9007      	str	r0, [sp, #28]
   1272c:	20e1      	movs	r0, #225	; 0xe1
   1272e:	9006      	str	r0, [sp, #24]
   12730:	e0b3      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12732:	defe      	udf	#254	; 0xfe
   12734:	2000      	movs	r0, #0
   12736:	9007      	str	r0, [sp, #28]
   12738:	9006      	str	r0, [sp, #24]
   1273a:	e0ae      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1273c:	2000      	movs	r0, #0
   1273e:	9007      	str	r0, [sp, #28]
   12740:	2001      	movs	r0, #1
   12742:	9006      	str	r0, [sp, #24]
   12744:	e0a9      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12746:	2000      	movs	r0, #0
   12748:	9007      	str	r0, [sp, #28]
   1274a:	2004      	movs	r0, #4
   1274c:	9006      	str	r0, [sp, #24]
   1274e:	e0a4      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12750:	2000      	movs	r0, #0
   12752:	9007      	str	r0, [sp, #28]
   12754:	2009      	movs	r0, #9
   12756:	9006      	str	r0, [sp, #24]
   12758:	e09f      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1275a:	2000      	movs	r0, #0
   1275c:	9007      	str	r0, [sp, #28]
   1275e:	2010      	movs	r0, #16
   12760:	9006      	str	r0, [sp, #24]
   12762:	e09a      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12764:	2000      	movs	r0, #0
   12766:	9007      	str	r0, [sp, #28]
   12768:	2011      	movs	r0, #17
   1276a:	9006      	str	r0, [sp, #24]
   1276c:	e095      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1276e:	2000      	movs	r0, #0
   12770:	9007      	str	r0, [sp, #28]
   12772:	2012      	movs	r0, #18
   12774:	9006      	str	r0, [sp, #24]
   12776:	e090      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12778:	2000      	movs	r0, #0
   1277a:	9007      	str	r0, [sp, #28]
   1277c:	2013      	movs	r0, #19
   1277e:	9006      	str	r0, [sp, #24]
   12780:	e08b      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12782:	2000      	movs	r0, #0
   12784:	9007      	str	r0, [sp, #28]
   12786:	2020      	movs	r0, #32
   12788:	9006      	str	r0, [sp, #24]
   1278a:	e086      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1278c:	2000      	movs	r0, #0
   1278e:	9007      	str	r0, [sp, #28]
   12790:	2021      	movs	r0, #33	; 0x21
   12792:	9006      	str	r0, [sp, #24]
   12794:	e081      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12796:	2000      	movs	r0, #0
   12798:	9007      	str	r0, [sp, #28]
   1279a:	2028      	movs	r0, #40	; 0x28
   1279c:	9006      	str	r0, [sp, #24]
   1279e:	e07c      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127a0:	2000      	movs	r0, #0
   127a2:	9007      	str	r0, [sp, #28]
   127a4:	2029      	movs	r0, #41	; 0x29
   127a6:	9006      	str	r0, [sp, #24]
   127a8:	e077      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127aa:	2000      	movs	r0, #0
   127ac:	9007      	str	r0, [sp, #28]
   127ae:	202a      	movs	r0, #42	; 0x2a
   127b0:	9006      	str	r0, [sp, #24]
   127b2:	e072      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127b4:	2000      	movs	r0, #0
   127b6:	9007      	str	r0, [sp, #28]
   127b8:	202b      	movs	r0, #43	; 0x2b
   127ba:	9006      	str	r0, [sp, #24]
   127bc:	e06d      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127be:	2000      	movs	r0, #0
   127c0:	9007      	str	r0, [sp, #28]
   127c2:	202c      	movs	r0, #44	; 0x2c
   127c4:	9006      	str	r0, [sp, #24]
   127c6:	e068      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127c8:	2000      	movs	r0, #0
   127ca:	9007      	str	r0, [sp, #28]
   127cc:	202e      	movs	r0, #46	; 0x2e
   127ce:	9006      	str	r0, [sp, #24]
   127d0:	e063      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127d2:	2000      	movs	r0, #0
   127d4:	9007      	str	r0, [sp, #28]
   127d6:	2030      	movs	r0, #48	; 0x30
   127d8:	9006      	str	r0, [sp, #24]
   127da:	e05e      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127dc:	2000      	movs	r0, #0
   127de:	9007      	str	r0, [sp, #28]
   127e0:	203a      	movs	r0, #58	; 0x3a
   127e2:	9006      	str	r0, [sp, #24]
   127e4:	e059      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127e6:	2000      	movs	r0, #0
   127e8:	9007      	str	r0, [sp, #28]
   127ea:	2036      	movs	r0, #54	; 0x36
   127ec:	9006      	str	r0, [sp, #24]
   127ee:	e054      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127f0:	2000      	movs	r0, #0
   127f2:	9007      	str	r0, [sp, #28]
   127f4:	20b1      	movs	r0, #177	; 0xb1
   127f6:	9006      	str	r0, [sp, #24]
   127f8:	e04f      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   127fa:	2000      	movs	r0, #0
   127fc:	9007      	str	r0, [sp, #28]
   127fe:	20b2      	movs	r0, #178	; 0xb2
   12800:	9006      	str	r0, [sp, #24]
   12802:	e04a      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12804:	2000      	movs	r0, #0
   12806:	9007      	str	r0, [sp, #28]
   12808:	20b3      	movs	r0, #179	; 0xb3
   1280a:	9006      	str	r0, [sp, #24]
   1280c:	e045      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1280e:	2000      	movs	r0, #0
   12810:	9007      	str	r0, [sp, #28]
   12812:	20b4      	movs	r0, #180	; 0xb4
   12814:	9006      	str	r0, [sp, #24]
   12816:	e040      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12818:	2000      	movs	r0, #0
   1281a:	9007      	str	r0, [sp, #28]
   1281c:	20b6      	movs	r0, #182	; 0xb6
   1281e:	9006      	str	r0, [sp, #24]
   12820:	e03b      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12822:	2000      	movs	r0, #0
   12824:	9007      	str	r0, [sp, #28]
   12826:	20c0      	movs	r0, #192	; 0xc0
   12828:	9006      	str	r0, [sp, #24]
   1282a:	e036      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1282c:	2000      	movs	r0, #0
   1282e:	9007      	str	r0, [sp, #28]
   12830:	20c1      	movs	r0, #193	; 0xc1
   12832:	9006      	str	r0, [sp, #24]
   12834:	e031      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12836:	2000      	movs	r0, #0
   12838:	9007      	str	r0, [sp, #28]
   1283a:	20c2      	movs	r0, #194	; 0xc2
   1283c:	9006      	str	r0, [sp, #24]
   1283e:	e02c      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12840:	2000      	movs	r0, #0
   12842:	9007      	str	r0, [sp, #28]
   12844:	20c3      	movs	r0, #195	; 0xc3
   12846:	9006      	str	r0, [sp, #24]
   12848:	e027      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1284a:	2000      	movs	r0, #0
   1284c:	9007      	str	r0, [sp, #28]
   1284e:	20c4      	movs	r0, #196	; 0xc4
   12850:	9006      	str	r0, [sp, #24]
   12852:	e022      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12854:	2000      	movs	r0, #0
   12856:	9007      	str	r0, [sp, #28]
   12858:	20c5      	movs	r0, #197	; 0xc5
   1285a:	9006      	str	r0, [sp, #24]
   1285c:	e01d      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1285e:	2000      	movs	r0, #0
   12860:	9007      	str	r0, [sp, #28]
   12862:	20da      	movs	r0, #218	; 0xda
   12864:	9006      	str	r0, [sp, #24]
   12866:	e018      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12868:	2000      	movs	r0, #0
   1286a:	9007      	str	r0, [sp, #28]
   1286c:	20db      	movs	r0, #219	; 0xdb
   1286e:	9006      	str	r0, [sp, #24]
   12870:	e013      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12872:	2000      	movs	r0, #0
   12874:	9007      	str	r0, [sp, #28]
   12876:	20dc      	movs	r0, #220	; 0xdc
   12878:	9006      	str	r0, [sp, #24]
   1287a:	e00e      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1287c:	2000      	movs	r0, #0
   1287e:	9007      	str	r0, [sp, #28]
   12880:	20dd      	movs	r0, #221	; 0xdd
   12882:	9006      	str	r0, [sp, #24]
   12884:	e009      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12886:	2000      	movs	r0, #0
   12888:	9007      	str	r0, [sp, #28]
   1288a:	20fc      	movs	r0, #252	; 0xfc
   1288c:	9006      	str	r0, [sp, #24]
   1288e:	e004      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   12890:	2000      	movs	r0, #0
   12892:	9007      	str	r0, [sp, #28]
   12894:	20e0      	movs	r0, #224	; 0xe0
   12896:	9006      	str	r0, [sp, #24]
   12898:	e7ff      	b.n	1289a <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E+0x37a>
   1289a:	9806      	ldr	r0, [sp, #24]
   1289c:	9907      	ldr	r1, [sp, #28]
   1289e:	9105      	str	r1, [sp, #20]
   128a0:	9004      	str	r0, [sp, #16]
   128a2:	2000      	movs	r0, #0
   128a4:	9003      	str	r0, [sp, #12]
   128a6:	2001      	movs	r0, #1
   128a8:	9002      	str	r0, [sp, #8]
   128aa:	9802      	ldr	r0, [sp, #8]
   128ac:	9903      	ldr	r1, [sp, #12]
   128ae:	9a04      	ldr	r2, [sp, #16]
   128b0:	9b05      	ldr	r3, [sp, #20]
   128b2:	b00a      	add	sp, #40	; 0x28
   128b4:	4770      	bx	lr

000128b6 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E>:
   128b6:	b580      	push	{r7, lr}
   128b8:	b08a      	sub	sp, #40	; 0x28
   128ba:	9009      	str	r0, [sp, #36]	; 0x24
   128bc:	f7ff fe30 	bl	12520 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_i6417h1d77bee8b39d0ab7E>
   128c0:	9108      	str	r1, [sp, #32]
   128c2:	9007      	str	r0, [sp, #28]
   128c4:	9306      	str	r3, [sp, #24]
   128c6:	9205      	str	r2, [sp, #20]
   128c8:	e7ff      	b.n	128ca <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x14>
   128ca:	9807      	ldr	r0, [sp, #28]
   128cc:	9908      	ldr	r1, [sp, #32]
   128ce:	9a05      	ldr	r2, [sp, #20]
   128d0:	9b06      	ldr	r3, [sp, #24]
   128d2:	f000 f859 	bl	12988 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>
   128d6:	9104      	str	r1, [sp, #16]
   128d8:	9003      	str	r0, [sp, #12]
   128da:	9302      	str	r3, [sp, #8]
   128dc:	9201      	str	r2, [sp, #4]
   128de:	e7ff      	b.n	128e0 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6417h8883ed29c1390572E+0x2a>
   128e0:	9803      	ldr	r0, [sp, #12]
   128e2:	9904      	ldr	r1, [sp, #16]
   128e4:	9a01      	ldr	r2, [sp, #4]
   128e6:	9b02      	ldr	r3, [sp, #8]
   128e8:	b00a      	add	sp, #40	; 0x28
   128ea:	bd80      	pop	{r7, pc}

000128ec <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>:
#[derive(ToPrimitive)]
   128ec:	b08a      	sub	sp, #40	; 0x28
   128ee:	9009      	str	r0, [sp, #36]	; 0x24
pub enum Orientation {
   128f0:	7800      	ldrb	r0, [r0, #0]
   128f2:	4601      	mov	r1, r0
   128f4:	2800      	cmp	r0, #0
   128f6:	9101      	str	r1, [sp, #4]
   128f8:	d00f      	beq.n	1291a <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x2e>
   128fa:	e7ff      	b.n	128fc <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x10>
   128fc:	9801      	ldr	r0, [sp, #4]
   128fe:	2860      	cmp	r0, #96	; 0x60
   12900:	d00f      	beq.n	12922 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x36>
   12902:	e7ff      	b.n	12904 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x18>
   12904:	9801      	ldr	r0, [sp, #4]
   12906:	28a0      	cmp	r0, #160	; 0xa0
   12908:	d001      	beq.n	1290e <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x22>
   1290a:	e7ff      	b.n	1290c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x20>
   1290c:	e00e      	b.n	1292c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x40>
   1290e:	2000      	movs	r0, #0
#[derive(ToPrimitive)]
   12910:	9007      	str	r0, [sp, #28]
   12912:	20a0      	movs	r0, #160	; 0xa0
   12914:	9006      	str	r0, [sp, #24]
   12916:	e00e      	b.n	12936 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12918:	defe      	udf	#254	; 0xfe
   1291a:	2000      	movs	r0, #0
   1291c:	9007      	str	r0, [sp, #28]
   1291e:	9006      	str	r0, [sp, #24]
   12920:	e009      	b.n	12936 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12922:	2000      	movs	r0, #0
   12924:	9007      	str	r0, [sp, #28]
   12926:	2060      	movs	r0, #96	; 0x60
   12928:	9006      	str	r0, [sp, #24]
   1292a:	e004      	b.n	12936 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   1292c:	2000      	movs	r0, #0
   1292e:	9007      	str	r0, [sp, #28]
   12930:	20c0      	movs	r0, #192	; 0xc0
   12932:	9006      	str	r0, [sp, #24]
   12934:	e7ff      	b.n	12936 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E+0x4a>
   12936:	9806      	ldr	r0, [sp, #24]
   12938:	9907      	ldr	r1, [sp, #28]
   1293a:	9105      	str	r1, [sp, #20]
   1293c:	9004      	str	r0, [sp, #16]
   1293e:	2000      	movs	r0, #0
   12940:	9003      	str	r0, [sp, #12]
   12942:	2001      	movs	r0, #1
   12944:	9002      	str	r0, [sp, #8]
   12946:	9802      	ldr	r0, [sp, #8]
   12948:	9903      	ldr	r1, [sp, #12]
   1294a:	9a04      	ldr	r2, [sp, #16]
   1294c:	9b05      	ldr	r3, [sp, #20]
   1294e:	b00a      	add	sp, #40	; 0x28
   12950:	4770      	bx	lr

00012952 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE>:
   12952:	b580      	push	{r7, lr}
   12954:	b08a      	sub	sp, #40	; 0x28
   12956:	9009      	str	r0, [sp, #36]	; 0x24
   12958:	f7ff ffc8 	bl	128ec <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_i6417ha5bf94d03c5a0183E>
   1295c:	9108      	str	r1, [sp, #32]
   1295e:	9007      	str	r0, [sp, #28]
   12960:	9306      	str	r3, [sp, #24]
   12962:	9205      	str	r2, [sp, #20]
   12964:	e7ff      	b.n	12966 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x14>
   12966:	9807      	ldr	r0, [sp, #28]
   12968:	9908      	ldr	r1, [sp, #32]
   1296a:	9a05      	ldr	r2, [sp, #20]
   1296c:	9b06      	ldr	r3, [sp, #24]
   1296e:	f000 f863 	bl	12a38 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>
   12972:	9104      	str	r1, [sp, #16]
   12974:	9003      	str	r0, [sp, #12]
   12976:	9302      	str	r3, [sp, #8]
   12978:	9201      	str	r2, [sp, #4]
   1297a:	e7ff      	b.n	1297c <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6417h16fdb85f17d4177eE+0x2a>
   1297c:	9803      	ldr	r0, [sp, #12]
   1297e:	9904      	ldr	r1, [sp, #16]
   12980:	9a01      	ldr	r2, [sp, #4]
   12982:	9b02      	ldr	r3, [sp, #8]
   12984:	b00a      	add	sp, #40	; 0x28
   12986:	bd80      	pop	{r7, pc}

00012988 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE>:
   12988:	b5b0      	push	{r4, r5, r7, lr}
   1298a:	b090      	sub	sp, #64	; 0x40
   1298c:	469c      	mov	ip, r3
   1298e:	4696      	mov	lr, r2
   12990:	460c      	mov	r4, r1
   12992:	4605      	mov	r5, r0
   12994:	9103      	str	r1, [sp, #12]
   12996:	9002      	str	r0, [sp, #8]
   12998:	9305      	str	r3, [sp, #20]
   1299a:	9204      	str	r2, [sp, #16]
   1299c:	2000      	movs	r0, #0
   1299e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129a2:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129a6:	2001      	movs	r0, #1
   129a8:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129ac:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129b0:	9802      	ldr	r0, [sp, #8]
   129b2:	2800      	cmp	r0, #0
   129b4:	d001      	beq.n	129ba <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x32>
   129b6:	e7ff      	b.n	129b8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x30>
   129b8:	e004      	b.n	129c4 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x3c>
   129ba:	2000      	movs	r0, #0
   129bc:	9007      	str	r0, [sp, #28]
   129be:	9006      	str	r0, [sp, #24]
   129c0:	e023      	b.n	12a0a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   129c2:	defe      	udf	#254	; 0xfe
   129c4:	2000      	movs	r0, #0
   129c6:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   129ca:	9904      	ldr	r1, [sp, #16]
   129cc:	9a05      	ldr	r2, [sp, #20]
   129ce:	920f      	str	r2, [sp, #60]	; 0x3c
   129d0:	910e      	str	r1, [sp, #56]	; 0x38
   129d2:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   129d6:	920b      	str	r2, [sp, #44]	; 0x2c
   129d8:	910a      	str	r1, [sp, #40]	; 0x28
   129da:	980a      	ldr	r0, [sp, #40]	; 0x28
   129dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
   129de:	f000 f883 	bl	12ae8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>
   129e2:	9101      	str	r1, [sp, #4]
   129e4:	9000      	str	r0, [sp, #0]
   129e6:	e7ff      	b.n	129e8 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x60>
   129e8:	9800      	ldr	r0, [sp, #0]
   129ea:	9008      	str	r0, [sp, #32]
   129ec:	9901      	ldr	r1, [sp, #4]
   129ee:	9109      	str	r1, [sp, #36]	; 0x24
   129f0:	2200      	movs	r2, #0
   129f2:	9207      	str	r2, [sp, #28]
   129f4:	2201      	movs	r2, #1
   129f6:	9206      	str	r2, [sp, #24]
   129f8:	e007      	b.n	12a0a <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x82>
   129fa:	9802      	ldr	r0, [sp, #8]
   129fc:	2801      	cmp	r0, #1
   129fe:	d010      	beq.n	12a22 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x9a>
   12a00:	e019      	b.n	12a36 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xae>
   12a02:	2000      	movs	r0, #0
   12a04:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a08:	e7f7      	b.n	129fa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12a0a:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12a0e:	07c0      	lsls	r0, r0, #31
   12a10:	2800      	cmp	r0, #0
   12a12:	d1f6      	bne.n	12a02 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x7a>
   12a14:	e7f1      	b.n	129fa <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x72>
   12a16:	9806      	ldr	r0, [sp, #24]
   12a18:	9907      	ldr	r1, [sp, #28]
   12a1a:	9a08      	ldr	r2, [sp, #32]
   12a1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12a1e:	b010      	add	sp, #64	; 0x40
   12a20:	bdb0      	pop	{r4, r5, r7, pc}
   12a22:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12a26:	07c0      	lsls	r0, r0, #31
   12a28:	2800      	cmp	r0, #0
   12a2a:	d0f4      	beq.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12a2c:	e7ff      	b.n	12a2e <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0xa6>
   12a2e:	2000      	movs	r0, #0
   12a30:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a34:	e7ef      	b.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>
   12a36:	e7ee      	b.n	12a16 <_ZN4core6option15Option$LT$T$GT$3map17h4bdf6b694a8d46bdE+0x8e>

00012a38 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE>:
   12a38:	b5b0      	push	{r4, r5, r7, lr}
   12a3a:	b090      	sub	sp, #64	; 0x40
   12a3c:	469c      	mov	ip, r3
   12a3e:	4696      	mov	lr, r2
   12a40:	460c      	mov	r4, r1
   12a42:	4605      	mov	r5, r0
   12a44:	9103      	str	r1, [sp, #12]
   12a46:	9002      	str	r0, [sp, #8]
   12a48:	9305      	str	r3, [sp, #20]
   12a4a:	9204      	str	r2, [sp, #16]
   12a4c:	2000      	movs	r0, #0
   12a4e:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a52:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a56:	2001      	movs	r0, #1
   12a58:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a5c:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a60:	9802      	ldr	r0, [sp, #8]
   12a62:	2800      	cmp	r0, #0
   12a64:	d001      	beq.n	12a6a <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x32>
   12a66:	e7ff      	b.n	12a68 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x30>
   12a68:	e004      	b.n	12a74 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x3c>
   12a6a:	2000      	movs	r0, #0
   12a6c:	9007      	str	r0, [sp, #28]
   12a6e:	9006      	str	r0, [sp, #24]
   12a70:	e023      	b.n	12aba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   12a72:	defe      	udf	#254	; 0xfe
   12a74:	2000      	movs	r0, #0
   12a76:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12a7a:	9904      	ldr	r1, [sp, #16]
   12a7c:	9a05      	ldr	r2, [sp, #20]
   12a7e:	920f      	str	r2, [sp, #60]	; 0x3c
   12a80:	910e      	str	r1, [sp, #56]	; 0x38
   12a82:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12a86:	920b      	str	r2, [sp, #44]	; 0x2c
   12a88:	910a      	str	r1, [sp, #40]	; 0x28
   12a8a:	980a      	ldr	r0, [sp, #40]	; 0x28
   12a8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   12a8e:	f003 fa28 	bl	15ee2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>
   12a92:	9101      	str	r1, [sp, #4]
   12a94:	9000      	str	r0, [sp, #0]
   12a96:	e7ff      	b.n	12a98 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x60>
   12a98:	9800      	ldr	r0, [sp, #0]
   12a9a:	9008      	str	r0, [sp, #32]
   12a9c:	9901      	ldr	r1, [sp, #4]
   12a9e:	9109      	str	r1, [sp, #36]	; 0x24
   12aa0:	2200      	movs	r2, #0
   12aa2:	9207      	str	r2, [sp, #28]
   12aa4:	2201      	movs	r2, #1
   12aa6:	9206      	str	r2, [sp, #24]
   12aa8:	e007      	b.n	12aba <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x82>
   12aaa:	9802      	ldr	r0, [sp, #8]
   12aac:	2801      	cmp	r0, #1
   12aae:	d010      	beq.n	12ad2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x9a>
   12ab0:	e019      	b.n	12ae6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xae>
   12ab2:	2000      	movs	r0, #0
   12ab4:	f88d 0032 	strb.w	r0, [sp, #50]	; 0x32
   12ab8:	e7f7      	b.n	12aaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12aba:	f89d 0032 	ldrb.w	r0, [sp, #50]	; 0x32
   12abe:	07c0      	lsls	r0, r0, #31
   12ac0:	2800      	cmp	r0, #0
   12ac2:	d1f6      	bne.n	12ab2 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x7a>
   12ac4:	e7f1      	b.n	12aaa <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x72>
   12ac6:	9806      	ldr	r0, [sp, #24]
   12ac8:	9907      	ldr	r1, [sp, #28]
   12aca:	9a08      	ldr	r2, [sp, #32]
   12acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ace:	b010      	add	sp, #64	; 0x40
   12ad0:	bdb0      	pop	{r4, r5, r7, pc}
   12ad2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
   12ad6:	07c0      	lsls	r0, r0, #31
   12ad8:	2800      	cmp	r0, #0
   12ada:	d0f4      	beq.n	12ac6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12adc:	e7ff      	b.n	12ade <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0xa6>
   12ade:	2000      	movs	r0, #0
   12ae0:	f88d 0033 	strb.w	r0, [sp, #51]	; 0x33
   12ae4:	e7ef      	b.n	12ac6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>
   12ae6:	e7ee      	b.n	12ac6 <_ZN4core6option15Option$LT$T$GT$3map17h6a1bfccc930ea4ffE+0x8e>

00012ae8 <_ZN10st7735_lcd11instruction37_IMPL_NUM_ToPrimitive_FOR_Instruction96_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..instruction..Instruction$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h671845d250cf99dfE>:
   12ae8:	b084      	sub	sp, #16
   12aea:	460a      	mov	r2, r1
   12aec:	4603      	mov	r3, r0
   12aee:	9103      	str	r1, [sp, #12]
   12af0:	9002      	str	r0, [sp, #8]
   12af2:	b004      	add	sp, #16
   12af4:	4770      	bx	lr

00012af6 <_ZN4core7convert3num63_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$u16$GT$4from17h0a450d9c4f54993fE>:
   12af6:	b081      	sub	sp, #4
   12af8:	4601      	mov	r1, r0
   12afa:	f88d 0003 	strb.w	r0, [sp, #3]
   12afe:	b2c0      	uxtb	r0, r0
   12b00:	b001      	add	sp, #4
   12b02:	4770      	bx	lr

00012b04 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E>:
   12b04:	b08a      	sub	sp, #40	; 0x28
   12b06:	9107      	str	r1, [sp, #28]
   12b08:	9208      	str	r2, [sp, #32]
   12b0a:	f8d0 c000 	ldr.w	ip, [r0]
   12b0e:	f1bc 0f00 	cmp.w	ip, #0
   12b12:	9305      	str	r3, [sp, #20]
   12b14:	9204      	str	r2, [sp, #16]
   12b16:	9103      	str	r1, [sp, #12]
   12b18:	9002      	str	r0, [sp, #8]
   12b1a:	d011      	beq.n	12b40 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x3c>
   12b1c:	e7ff      	b.n	12b1e <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x1a>
   12b1e:	9802      	ldr	r0, [sp, #8]
   12b20:	6841      	ldr	r1, [r0, #4]
   12b22:	9106      	str	r1, [sp, #24]
   12b24:	4669      	mov	r1, sp
   12b26:	9a05      	ldr	r2, [sp, #20]
   12b28:	600a      	str	r2, [r1, #0]
   12b2a:	f24f 7344 	movw	r3, #63300	; 0xf744
   12b2e:	f2c0 0301 	movt	r3, #1
   12b32:	aa06      	add	r2, sp, #24
   12b34:	9803      	ldr	r0, [sp, #12]
   12b36:	9904      	ldr	r1, [sp, #16]
   12b38:	f003 ff86 	bl	16a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   12b3c:	defe      	udf	#254	; 0xfe
   12b3e:	defe      	udf	#254	; 0xfe
   12b40:	9802      	ldr	r0, [sp, #8]
   12b42:	6841      	ldr	r1, [r0, #4]
   12b44:	9109      	str	r1, [sp, #36]	; 0x24
   12b46:	6802      	ldr	r2, [r0, #0]
   12b48:	2a00      	cmp	r2, #0
   12b4a:	9101      	str	r1, [sp, #4]
   12b4c:	d103      	bne.n	12b56 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x52>
   12b4e:	e7ff      	b.n	12b50 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>
   12b50:	9801      	ldr	r0, [sp, #4]
   12b52:	b00a      	add	sp, #40	; 0x28
   12b54:	4770      	bx	lr
   12b56:	e7fb      	b.n	12b50 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17hb4c9c2153df4be45E+0x4c>

00012b58 <_ZN76_$LT$log..Level$u20$as$u20$core..cmp..PartialOrd$LT$log..LevelFilter$GT$$GT$2le17hd2d3bba3cdb09ccfE>:
    fn le(&self, other: &LevelFilter) -> bool {
   12b58:	b082      	sub	sp, #8
   12b5a:	9000      	str	r0, [sp, #0]
   12b5c:	9101      	str	r1, [sp, #4]
        *self as usize <= *other as usize
   12b5e:	6800      	ldr	r0, [r0, #0]
   12b60:	6809      	ldr	r1, [r1, #0]
   12b62:	2200      	movs	r2, #0
   12b64:	4288      	cmp	r0, r1
   12b66:	bf98      	it	ls
   12b68:	2201      	movls	r2, #1
    }
   12b6a:	4610      	mov	r0, r2
   12b6c:	b002      	add	sp, #8
   12b6e:	4770      	bx	lr

00012b70 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E>:
   12b70:	b580      	push	{r7, lr}
   12b72:	b086      	sub	sp, #24
   12b74:	460a      	mov	r2, r1
   12b76:	9004      	str	r0, [sp, #16]
   12b78:	f88d 1017 	strb.w	r1, [sp, #23]
   12b7c:	9203      	str	r2, [sp, #12]
   12b7e:	f7fb ff6c 	bl	ea5a <_ZN4core4cell19UnsafeCell$LT$T$GT$3get17h610e5a678a693130E>
   12b82:	9002      	str	r0, [sp, #8]
   12b84:	e7ff      	b.n	12b86 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x16>
   12b86:	9802      	ldr	r0, [sp, #8]
   12b88:	9903      	ldr	r1, [sp, #12]
   12b8a:	f7fb ff7f 	bl	ea8c <_ZN4core4sync6atomic11atomic_load17hfd48520aee98ec59E>
   12b8e:	9001      	str	r0, [sp, #4]
   12b90:	e7ff      	b.n	12b92 <_ZN4core4sync6atomic11AtomicUsize4load17hbca6552eb8da9825E+0x22>
   12b92:	9801      	ldr	r0, [sp, #4]
   12b94:	b006      	add	sp, #24
   12b96:	bd80      	pop	{r7, pc}

00012b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>:
   12b98:	b580      	push	{r7, lr}
   12b9a:	b086      	sub	sp, #24
   12b9c:	460a      	mov	r2, r1
   12b9e:	4603      	mov	r3, r0
   12ba0:	f88d 0014 	strb.w	r0, [sp, #20]
   12ba4:	f88d 1015 	strb.w	r1, [sp, #21]
   12ba8:	9203      	str	r2, [sp, #12]
   12baa:	9302      	str	r3, [sp, #8]
   12bac:	f000 f865 	bl	12c7a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>
   12bb0:	9001      	str	r0, [sp, #4]
   12bb2:	9100      	str	r1, [sp, #0]
   12bb4:	e7ff      	b.n	12bb6 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x1e>
   12bb6:	9801      	ldr	r0, [sp, #4]
   12bb8:	f88d 0016 	strb.w	r0, [sp, #22]
   12bbc:	9900      	ldr	r1, [sp, #0]
   12bbe:	f001 0201 	and.w	r2, r1, #1
   12bc2:	f88d 2017 	strb.w	r2, [sp, #23]
   12bc6:	2a00      	cmp	r2, #0
   12bc8:	d107      	bne.n	12bda <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x42>
   12bca:	e7ff      	b.n	12bcc <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x34>
   12bcc:	9801      	ldr	r0, [sp, #4]
   12bce:	f88d 0011 	strb.w	r0, [sp, #17]
   12bd2:	2101      	movs	r1, #1
   12bd4:	f88d 1010 	strb.w	r1, [sp, #16]
   12bd8:	e003      	b.n	12be2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12bda:	2000      	movs	r0, #0
   12bdc:	f88d 0010 	strb.w	r0, [sp, #16]
   12be0:	e7ff      	b.n	12be2 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E+0x4a>
   12be2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12be6:	f89d 1011 	ldrb.w	r1, [sp, #17]
   12bea:	b006      	add	sp, #24
   12bec:	bd80      	pop	{r7, pc}

00012bee <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE>:
   12bee:	b082      	sub	sp, #8
   12bf0:	460a      	mov	r2, r1
   12bf2:	4603      	mov	r3, r0
   12bf4:	f88d 0005 	strb.w	r0, [sp, #5]
   12bf8:	f88d 1006 	strb.w	r1, [sp, #6]
   12bfc:	4408      	add	r0, r1
   12bfe:	f88d 0007 	strb.w	r0, [sp, #7]
   12c02:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12c06:	9000      	str	r0, [sp, #0]
   12c08:	e7ff      	b.n	12c0a <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_add17hac8dfc997b9c24ecE+0x1c>
   12c0a:	9800      	ldr	r0, [sp, #0]
   12c0c:	b002      	add	sp, #8
   12c0e:	4770      	bx	lr

00012c10 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E>:
   12c10:	b084      	sub	sp, #16
   12c12:	4602      	mov	r2, r0
   12c14:	f88d 0007 	strb.w	r0, [sp, #7]
   12c18:	9102      	str	r1, [sp, #8]
   12c1a:	f001 0107 	and.w	r1, r1, #7
   12c1e:	4088      	lsls	r0, r1
   12c20:	f88d 000f 	strb.w	r0, [sp, #15]
   12c24:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12c28:	9000      	str	r0, [sp, #0]
   12c2a:	e7ff      	b.n	12c2c <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shl17h31de2c523da77629E+0x1c>
   12c2c:	9800      	ldr	r0, [sp, #0]
   12c2e:	b004      	add	sp, #16
   12c30:	4770      	bx	lr

00012c32 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E>:
   12c32:	b084      	sub	sp, #16
   12c34:	b2c2      	uxtb	r2, r0
   12c36:	4603      	mov	r3, r0
   12c38:	f88d 0007 	strb.w	r0, [sp, #7]
   12c3c:	9102      	str	r1, [sp, #8]
   12c3e:	f001 0007 	and.w	r0, r1, #7
   12c42:	fa22 f000 	lsr.w	r0, r2, r0
   12c46:	f88d 000f 	strb.w	r0, [sp, #15]
   12c4a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   12c4e:	9000      	str	r0, [sp, #0]
   12c50:	e7ff      	b.n	12c52 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_shr17hda13cf3283d09c50E+0x20>
   12c52:	9800      	ldr	r0, [sp, #0]
   12c54:	b004      	add	sp, #16
   12c56:	4770      	bx	lr

00012c58 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE>:
   12c58:	b082      	sub	sp, #8
   12c5a:	460a      	mov	r2, r1
   12c5c:	4603      	mov	r3, r0
   12c5e:	f88d 0005 	strb.w	r0, [sp, #5]
   12c62:	f88d 1006 	strb.w	r1, [sp, #6]
   12c66:	1a40      	subs	r0, r0, r1
   12c68:	f88d 0007 	strb.w	r0, [sp, #7]
   12c6c:	f89d 0007 	ldrb.w	r0, [sp, #7]
   12c70:	9000      	str	r0, [sp, #0]
   12c72:	e7ff      	b.n	12c74 <_ZN4core3num20_$LT$impl$u20$u8$GT$12wrapping_sub17h4a79113dcdba2ecfE+0x1c>
   12c74:	9800      	ldr	r0, [sp, #0]
   12c76:	b002      	add	sp, #8
   12c78:	4770      	bx	lr

00012c7a <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE>:
   12c7a:	b084      	sub	sp, #16
   12c7c:	b2c2      	uxtb	r2, r0
   12c7e:	460b      	mov	r3, r1
   12c80:	4684      	mov	ip, r0
   12c82:	f88d 000a 	strb.w	r0, [sp, #10]
   12c86:	f88d 100b 	strb.w	r1, [sp, #11]
   12c8a:	fa52 f081 	uxtab	r0, r2, r1
   12c8e:	b2c1      	uxtb	r1, r0
   12c90:	1a09      	subs	r1, r1, r0
   12c92:	bf18      	it	ne
   12c94:	2101      	movne	r1, #1
   12c96:	f88d 000c 	strb.w	r0, [sp, #12]
   12c9a:	f88d 100d 	strb.w	r1, [sp, #13]
   12c9e:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12ca2:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12ca6:	9001      	str	r0, [sp, #4]
   12ca8:	9100      	str	r1, [sp, #0]
   12caa:	e7ff      	b.n	12cac <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_add17h86687d23966cf72aE+0x32>
   12cac:	9801      	ldr	r0, [sp, #4]
   12cae:	f88d 000e 	strb.w	r0, [sp, #14]
   12cb2:	9900      	ldr	r1, [sp, #0]
   12cb4:	f001 0201 	and.w	r2, r1, #1
   12cb8:	f88d 200f 	strb.w	r2, [sp, #15]
   12cbc:	f88d 0008 	strb.w	r0, [sp, #8]
   12cc0:	f88d 2009 	strb.w	r2, [sp, #9]
   12cc4:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12cc8:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12ccc:	b004      	add	sp, #16
   12cce:	4770      	bx	lr

00012cd0 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E>:
   12cd0:	b580      	push	{r7, lr}
   12cd2:	b084      	sub	sp, #16
   12cd4:	b2ca      	uxtb	r2, r1
   12cd6:	b2c3      	uxtb	r3, r0
   12cd8:	468c      	mov	ip, r1
   12cda:	4686      	mov	lr, r0
   12cdc:	f88d 000a 	strb.w	r0, [sp, #10]
   12ce0:	f88d 100b 	strb.w	r1, [sp, #11]
   12ce4:	1a98      	subs	r0, r3, r2
   12ce6:	b2c1      	uxtb	r1, r0
   12ce8:	1a09      	subs	r1, r1, r0
   12cea:	bf18      	it	ne
   12cec:	2101      	movne	r1, #1
   12cee:	f88d 000c 	strb.w	r0, [sp, #12]
   12cf2:	f88d 100d 	strb.w	r1, [sp, #13]
   12cf6:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12cfa:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12cfe:	9001      	str	r0, [sp, #4]
   12d00:	9100      	str	r1, [sp, #0]
   12d02:	e7ff      	b.n	12d04 <_ZN4core3num20_$LT$impl$u20$u8$GT$15overflowing_sub17h6530387af31222c2E+0x34>
   12d04:	9801      	ldr	r0, [sp, #4]
   12d06:	f88d 000e 	strb.w	r0, [sp, #14]
   12d0a:	9900      	ldr	r1, [sp, #0]
   12d0c:	f001 0201 	and.w	r2, r1, #1
   12d10:	f88d 200f 	strb.w	r2, [sp, #15]
   12d14:	f88d 0008 	strb.w	r0, [sp, #8]
   12d18:	f88d 2009 	strb.w	r2, [sp, #9]
   12d1c:	f89d 0008 	ldrb.w	r0, [sp, #8]
   12d20:	f89d 1009 	ldrb.w	r1, [sp, #9]
   12d24:	b004      	add	sp, #16
   12d26:	bd80      	pop	{r7, pc}

00012d28 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E>:
   12d28:	b083      	sub	sp, #12
   12d2a:	460a      	mov	r2, r1
   12d2c:	4603      	mov	r3, r0
   12d2e:	f8ad 0006 	strh.w	r0, [sp, #6]
   12d32:	f8ad 1008 	strh.w	r1, [sp, #8]
   12d36:	4408      	add	r0, r1
   12d38:	f8ad 000a 	strh.w	r0, [sp, #10]
   12d3c:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12d40:	9000      	str	r0, [sp, #0]
   12d42:	e7ff      	b.n	12d44 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_add17hed5f6279c30b1a08E+0x1c>
   12d44:	9800      	ldr	r0, [sp, #0]
   12d46:	b003      	add	sp, #12
   12d48:	4770      	bx	lr

00012d4a <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E>:
   12d4a:	b083      	sub	sp, #12
   12d4c:	460a      	mov	r2, r1
   12d4e:	4603      	mov	r3, r0
   12d50:	f8ad 0006 	strh.w	r0, [sp, #6]
   12d54:	f8ad 1008 	strh.w	r1, [sp, #8]
   12d58:	1a40      	subs	r0, r0, r1
   12d5a:	f8ad 000a 	strh.w	r0, [sp, #10]
   12d5e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   12d62:	9000      	str	r0, [sp, #0]
   12d64:	e7ff      	b.n	12d66 <_ZN4core3num21_$LT$impl$u20$u16$GT$12wrapping_sub17hceb9f03c67b66808E+0x1c>
   12d66:	9800      	ldr	r0, [sp, #0]
   12d68:	b003      	add	sp, #12
   12d6a:	4770      	bx	lr

00012d6c <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E>:
   12d6c:	b5b0      	push	{r4, r5, r7, lr}
   12d6e:	b088      	sub	sp, #32
   12d70:	469c      	mov	ip, r3
   12d72:	4696      	mov	lr, r2
   12d74:	460c      	mov	r4, r1
   12d76:	4605      	mov	r5, r0
   12d78:	9103      	str	r1, [sp, #12]
   12d7a:	9002      	str	r0, [sp, #8]
   12d7c:	9305      	str	r3, [sp, #20]
   12d7e:	9204      	str	r2, [sp, #16]
   12d80:	1a80      	subs	r0, r0, r2
   12d82:	eb61 0103 	sbc.w	r1, r1, r3
   12d86:	9107      	str	r1, [sp, #28]
   12d88:	9006      	str	r0, [sp, #24]
   12d8a:	9806      	ldr	r0, [sp, #24]
   12d8c:	9907      	ldr	r1, [sp, #28]
   12d8e:	9001      	str	r0, [sp, #4]
   12d90:	9100      	str	r1, [sp, #0]
   12d92:	e7ff      	b.n	12d94 <_ZN4core3num21_$LT$impl$u20$u64$GT$12wrapping_sub17h7cd75c3bdc89aa73E+0x28>
   12d94:	9801      	ldr	r0, [sp, #4]
   12d96:	9900      	ldr	r1, [sp, #0]
   12d98:	b008      	add	sp, #32
   12d9a:	bdb0      	pop	{r4, r5, r7, pc}

00012d9c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E>:
   12d9c:	b580      	push	{r7, lr}
   12d9e:	b086      	sub	sp, #24
   12da0:	9005      	str	r0, [sp, #20]
   12da2:	2100      	movs	r1, #0
   12da4:	f88d 1013 	strb.w	r1, [sp, #19]
   12da8:	1c41      	adds	r1, r0, #1
   12daa:	9002      	str	r0, [sp, #8]
   12dac:	f003 f8a0 	bl	15ef0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>
   12db0:	9001      	str	r0, [sp, #4]
   12db2:	e7ff      	b.n	12db4 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x18>
   12db4:	9801      	ldr	r0, [sp, #4]
   12db6:	07c1      	lsls	r1, r0, #31
   12db8:	2900      	cmp	r1, #0
   12dba:	d104      	bne.n	12dc6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x2a>
   12dbc:	e7ff      	b.n	12dbe <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x22>
   12dbe:	2000      	movs	r0, #0
   12dc0:	f88d 000c 	strb.w	r0, [sp, #12]
   12dc4:	e02c      	b.n	12e20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12dc6:	2001      	movs	r0, #1
   12dc8:	f88d 0013 	strb.w	r0, [sp, #19]
   12dcc:	9902      	ldr	r1, [sp, #8]
   12dce:	9000      	str	r0, [sp, #0]
   12dd0:	4608      	mov	r0, r1
   12dd2:	9900      	ldr	r1, [sp, #0]
   12dd4:	f000 f86e 	bl	12eb4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>
   12dd8:	f88d 1011 	strb.w	r1, [sp, #17]
   12ddc:	f88d 0010 	strb.w	r0, [sp, #16]
   12de0:	e7ff      	b.n	12de2 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x46>
   12de2:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12de6:	07c0      	lsls	r0, r0, #31
   12de8:	2800      	cmp	r0, #0
   12dea:	d104      	bne.n	12df6 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x5a>
   12dec:	e7ff      	b.n	12dee <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x52>
   12dee:	2000      	movs	r0, #0
   12df0:	f88d 000c 	strb.w	r0, [sp, #12]
   12df4:	e029      	b.n	12e4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12df6:	2000      	movs	r0, #0
   12df8:	f88d 0013 	strb.w	r0, [sp, #19]
   12dfc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12e00:	f88d 0012 	strb.w	r0, [sp, #18]
   12e04:	f10d 0012 	add.w	r0, sp, #18
   12e08:	9902      	ldr	r1, [sp, #8]
   12e0a:	f000 f886 	bl	12f1a <_ZN4core3mem4swap17h9f9b2c00c891c39bE>
   12e0e:	e7ff      	b.n	12e10 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x74>
   12e10:	f89d 0012 	ldrb.w	r0, [sp, #18]
   12e14:	f88d 000d 	strb.w	r0, [sp, #13]
   12e18:	2001      	movs	r0, #1
   12e1a:	f88d 000c 	strb.w	r0, [sp, #12]
   12e1e:	e014      	b.n	12e4a <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xae>
   12e20:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12e24:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12e28:	b006      	add	sp, #24
   12e2a:	bd80      	pop	{r7, pc}
   12e2c:	2000      	movs	r0, #0
   12e2e:	f88d 0013 	strb.w	r0, [sp, #19]
   12e32:	e7f5      	b.n	12e20 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x84>
   12e34:	f89d 0013 	ldrb.w	r0, [sp, #19]
   12e38:	07c0      	lsls	r0, r0, #31
   12e3a:	2800      	cmp	r0, #0
   12e3c:	d0f6      	beq.n	12e2c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12e3e:	e7ff      	b.n	12e40 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xa4>
   12e40:	2000      	movs	r0, #0
   12e42:	f88d 0013 	strb.w	r0, [sp, #19]
   12e46:	e7f1      	b.n	12e2c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12e48:	e7f0      	b.n	12e2c <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x90>
   12e4a:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12e4e:	07c0      	lsls	r0, r0, #31
   12e50:	2800      	cmp	r0, #0
   12e52:	d1ef      	bne.n	12e34 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0x98>
   12e54:	e7f8      	b.n	12e48 <_ZN4core4iter5range101_$LT$impl$u20$core..iter..traits..iterator..Iterator$u20$for$u20$core..ops..range..Range$LT$A$GT$$GT$4next17heebe87a72a0a05c4E+0xac>

00012e56 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E>:
   12e56:	b580      	push	{r7, lr}
   12e58:	b084      	sub	sp, #16
   12e5a:	9101      	str	r1, [sp, #4]
   12e5c:	9202      	str	r2, [sp, #8]
   12e5e:	9303      	str	r3, [sp, #12]
   12e60:	f7fa ff2a 	bl	dcb8 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h47809268ca43aa27E>
   12e64:	e7ff      	b.n	12e66 <_ZN4core4iter6traits8iterator8Iterator3map17h39af250ef60ec852E+0x10>
   12e66:	b004      	add	sp, #16
   12e68:	bd80      	pop	{r7, pc}

00012e6a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE>:
   12e6a:	b580      	push	{r7, lr}
   12e6c:	b084      	sub	sp, #16
   12e6e:	9101      	str	r1, [sp, #4]
   12e70:	9202      	str	r2, [sp, #8]
   12e72:	9303      	str	r3, [sp, #12]
   12e74:	f7fa ff17 	bl	dca6 <_ZN4core4iter8adapters16Map$LT$I$C$F$GT$3new17h21a9e3dc4962ad94E>
   12e78:	e7ff      	b.n	12e7a <_ZN4core4iter6traits8iterator8Iterator3map17hf6992577e3374dfdE+0x10>
   12e7a:	b004      	add	sp, #16
   12e7c:	bd80      	pop	{r7, pc}

00012e7e <_ZN63_$LT$I$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hc518c90d18182e65E>:
   12e7e:	b081      	sub	sp, #4
   12e80:	460a      	mov	r2, r1
   12e82:	4603      	mov	r3, r0
   12e84:	f88d 0000 	strb.w	r0, [sp]
   12e88:	f88d 1001 	strb.w	r1, [sp, #1]
   12e8c:	b001      	add	sp, #4
   12e8e:	4770      	bx	lr

00012e90 <_ZN58_$LT$core..any..TypeId$u20$as$u20$core..cmp..PartialEq$GT$2eq17h2d7145d37f608201E>:
   12e90:	b084      	sub	sp, #16
   12e92:	9000      	str	r0, [sp, #0]
   12e94:	9101      	str	r1, [sp, #4]
   12e96:	9102      	str	r1, [sp, #8]
   12e98:	9003      	str	r0, [sp, #12]
   12e9a:	6802      	ldr	r2, [r0, #0]
   12e9c:	6840      	ldr	r0, [r0, #4]
   12e9e:	680b      	ldr	r3, [r1, #0]
   12ea0:	6849      	ldr	r1, [r1, #4]
   12ea2:	4048      	eors	r0, r1
   12ea4:	ea82 0103 	eor.w	r1, r2, r3
   12ea8:	4308      	orrs	r0, r1
   12eaa:	fab0 f080 	clz	r0, r0
   12eae:	0940      	lsrs	r0, r0, #5
   12eb0:	b004      	add	sp, #16
   12eb2:	4770      	bx	lr

00012eb4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E>:
   12eb4:	b580      	push	{r7, lr}
   12eb6:	b088      	sub	sp, #32
   12eb8:	9005      	str	r0, [sp, #20]
   12eba:	9106      	str	r1, [sp, #24]
   12ebc:	9002      	str	r0, [sp, #8]
   12ebe:	4608      	mov	r0, r1
   12ec0:	f000 f834 	bl	12f2c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>
   12ec4:	f88d 1011 	strb.w	r1, [sp, #17]
   12ec8:	f88d 0010 	strb.w	r0, [sp, #16]
   12ecc:	e7ff      	b.n	12ece <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x1a>
   12ece:	f89d 0010 	ldrb.w	r0, [sp, #16]
   12ed2:	07c1      	lsls	r1, r0, #31
   12ed4:	2900      	cmp	r1, #0
   12ed6:	d005      	beq.n	12ee4 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x30>
   12ed8:	e7ff      	b.n	12eda <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x26>
   12eda:	2000      	movs	r0, #0
   12edc:	f88d 000c 	strb.w	r0, [sp, #12]
   12ee0:	e011      	b.n	12f06 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12ee2:	defe      	udf	#254	; 0xfe
   12ee4:	f89d 0011 	ldrb.w	r0, [sp, #17]
   12ee8:	f88d 001f 	strb.w	r0, [sp, #31]
   12eec:	9902      	ldr	r1, [sp, #8]
   12eee:	780a      	ldrb	r2, [r1, #0]
   12ef0:	9001      	str	r0, [sp, #4]
   12ef2:	4610      	mov	r0, r2
   12ef4:	9901      	ldr	r1, [sp, #4]
   12ef6:	f7ff fe4f 	bl	12b98 <_ZN4core3num20_$LT$impl$u20$u8$GT$11checked_add17hcbf5f5d7300753c0E>
   12efa:	f88d 100d 	strb.w	r1, [sp, #13]
   12efe:	f88d 000c 	strb.w	r0, [sp, #12]
   12f02:	e7ff      	b.n	12f04 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x50>
   12f04:	e7ff      	b.n	12f06 <_ZN46_$LT$u8$u20$as$u20$core..iter..range..Step$GT$9add_usize17he8fdf73f3aae9658E+0x52>
   12f06:	f89d 000c 	ldrb.w	r0, [sp, #12]
   12f0a:	f89d 100d 	ldrb.w	r1, [sp, #13]
   12f0e:	b008      	add	sp, #32
   12f10:	bd80      	pop	{r7, pc}

00012f12 <_ZN4core3ptr13drop_in_place17h8a25dee97102e103E>:
   12f12:	b081      	sub	sp, #4
   12f14:	9000      	str	r0, [sp, #0]
   12f16:	b001      	add	sp, #4
   12f18:	4770      	bx	lr

00012f1a <_ZN4core3mem4swap17h9f9b2c00c891c39bE>:
   12f1a:	b580      	push	{r7, lr}
   12f1c:	b082      	sub	sp, #8
   12f1e:	9000      	str	r0, [sp, #0]
   12f20:	9101      	str	r1, [sp, #4]
   12f22:	f003 f80c 	bl	15f3e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>
   12f26:	e7ff      	b.n	12f28 <_ZN4core3mem4swap17h9f9b2c00c891c39bE+0xe>
   12f28:	b002      	add	sp, #8
   12f2a:	bd80      	pop	{r7, pc}

00012f2c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE>:
   12f2c:	b083      	sub	sp, #12
   12f2e:	9002      	str	r0, [sp, #8]
   12f30:	9000      	str	r0, [sp, #0]
   12f32:	e7ff      	b.n	12f34 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x8>
   12f34:	9800      	ldr	r0, [sp, #0]
   12f36:	28ff      	cmp	r0, #255	; 0xff
   12f38:	d807      	bhi.n	12f4a <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x1e>
   12f3a:	e7ff      	b.n	12f3c <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x10>
   12f3c:	9800      	ldr	r0, [sp, #0]
   12f3e:	f88d 0005 	strb.w	r0, [sp, #5]
   12f42:	2100      	movs	r1, #0
   12f44:	f88d 1004 	strb.w	r1, [sp, #4]
   12f48:	e003      	b.n	12f52 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12f4a:	2001      	movs	r0, #1
   12f4c:	f88d 0004 	strb.w	r0, [sp, #4]
   12f50:	e7ff      	b.n	12f52 <_ZN4core7convert3num18ptr_try_from_impls68_$LT$impl$u20$core..convert..TryFrom$LT$usize$GT$$u20$for$u20$u8$GT$8try_from17h596b752459f440bdE+0x26>
   12f52:	f89d 0004 	ldrb.w	r0, [sp, #4]
   12f56:	f89d 1005 	ldrb.w	r1, [sp, #5]
   12f5a:	b003      	add	sp, #12
   12f5c:	4770      	bx	lr

00012f5e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>:
   12f5e:	b084      	sub	sp, #16
   12f60:	9001      	str	r0, [sp, #4]
   12f62:	9102      	str	r1, [sp, #8]
   12f64:	4408      	add	r0, r1
   12f66:	9003      	str	r0, [sp, #12]
   12f68:	9803      	ldr	r0, [sp, #12]
   12f6a:	9000      	str	r0, [sp, #0]
   12f6c:	e7ff      	b.n	12f6e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E+0x10>
   12f6e:	9800      	ldr	r0, [sp, #0]
   12f70:	b004      	add	sp, #16
   12f72:	4770      	bx	lr

00012f74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>:
   12f74:	b082      	sub	sp, #8
   12f76:	9001      	str	r0, [sp, #4]
   12f78:	9000      	str	r0, [sp, #0]
   12f7a:	e7ff      	b.n	12f7c <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE+0x8>
   12f7c:	9800      	ldr	r0, [sp, #0]
   12f7e:	fab0 f180 	clz	r1, r0
   12f82:	0948      	lsrs	r0, r1, #5
   12f84:	b002      	add	sp, #8
   12f86:	4770      	bx	lr

00012f88 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>:
   12f88:	b082      	sub	sp, #8
   12f8a:	9001      	str	r0, [sp, #4]
   12f8c:	9000      	str	r0, [sp, #0]
   12f8e:	9800      	ldr	r0, [sp, #0]
   12f90:	b002      	add	sp, #8
   12f92:	4770      	bx	lr

00012f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>:
   12f94:	b081      	sub	sp, #4
   12f96:	9000      	str	r0, [sp, #0]
   12f98:	b001      	add	sp, #4
   12f9a:	4770      	bx	lr

00012f9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>:
   12f9c:	b580      	push	{r7, lr}
   12f9e:	b084      	sub	sp, #16
   12fa0:	9002      	str	r0, [sp, #8]
   12fa2:	9103      	str	r1, [sp, #12]
   12fa4:	f000 f805 	bl	12fb2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   12fa8:	9001      	str	r0, [sp, #4]
   12faa:	e7ff      	b.n	12fac <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E+0x10>
   12fac:	9801      	ldr	r0, [sp, #4]
   12fae:	b004      	add	sp, #16
   12fb0:	bd80      	pop	{r7, pc}

00012fb2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>:
   12fb2:	b084      	sub	sp, #16
   12fb4:	9001      	str	r0, [sp, #4]
   12fb6:	9102      	str	r1, [sp, #8]
   12fb8:	4408      	add	r0, r1
   12fba:	9003      	str	r0, [sp, #12]
   12fbc:	9803      	ldr	r0, [sp, #12]
   12fbe:	9000      	str	r0, [sp, #0]
   12fc0:	e7ff      	b.n	12fc2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E+0x10>
   12fc2:	9800      	ldr	r0, [sp, #0]
   12fc4:	b004      	add	sp, #16
   12fc6:	4770      	bx	lr

00012fc8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>:
   12fc8:	b082      	sub	sp, #8
   12fca:	9001      	str	r0, [sp, #4]
   12fcc:	9000      	str	r0, [sp, #0]
   12fce:	e7ff      	b.n	12fd0 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE+0x8>
   12fd0:	9800      	ldr	r0, [sp, #0]
   12fd2:	fab0 f180 	clz	r1, r0
   12fd6:	0948      	lsrs	r0, r1, #5
   12fd8:	b002      	add	sp, #8
   12fda:	4770      	bx	lr

00012fdc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E>:
   12fdc:	b580      	push	{r7, lr}
   12fde:	b090      	sub	sp, #64	; 0x40
   12fe0:	900c      	str	r0, [sp, #48]	; 0x30
   12fe2:	910d      	str	r1, [sp, #52]	; 0x34
   12fe4:	9007      	str	r0, [sp, #28]
   12fe6:	9106      	str	r1, [sp, #24]
   12fe8:	f000 f935 	bl	13256 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>
   12fec:	4601      	mov	r1, r0
   12fee:	900e      	str	r0, [sp, #56]	; 0x38
   12ff0:	9105      	str	r1, [sp, #20]
   12ff2:	e7ff      	b.n	12ff4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x18>
   12ff4:	9805      	ldr	r0, [sp, #20]
   12ff6:	f7ff ffe7 	bl	12fc8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   12ffa:	e7ff      	b.n	12ffc <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x20>
   12ffc:	e7ff      	b.n	12ffe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x22>
   12ffe:	2001      	movs	r0, #1
   13000:	900f      	str	r0, [sp, #60]	; 0x3c
   13002:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13004:	9004      	str	r0, [sp, #16]
   13006:	e7ff      	b.n	13008 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x2c>
   13008:	9804      	ldr	r0, [sp, #16]
   1300a:	2800      	cmp	r0, #0
   1300c:	d006      	beq.n	1301c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x40>
   1300e:	e7ff      	b.n	13010 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x34>
   13010:	9807      	ldr	r0, [sp, #28]
   13012:	9906      	ldr	r1, [sp, #24]
   13014:	f000 f917 	bl	13246 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   13018:	9003      	str	r0, [sp, #12]
   1301a:	e00e      	b.n	1303a <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x5e>
   1301c:	9807      	ldr	r0, [sp, #28]
   1301e:	9906      	ldr	r1, [sp, #24]
   13020:	f000 f911 	bl	13246 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>
   13024:	9002      	str	r0, [sp, #8]
   13026:	e7ff      	b.n	13028 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x4c>
   13028:	9805      	ldr	r0, [sp, #20]
   1302a:	9902      	ldr	r1, [sp, #8]
   1302c:	f7ff ffb6 	bl	12f9c <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h152605890cc5c164E>
   13030:	9001      	str	r0, [sp, #4]
   13032:	e7ff      	b.n	13034 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x58>
   13034:	9801      	ldr	r0, [sp, #4]
   13036:	900a      	str	r0, [sp, #40]	; 0x28
   13038:	e006      	b.n	13048 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   1303a:	9805      	ldr	r0, [sp, #20]
   1303c:	9903      	ldr	r1, [sp, #12]
   1303e:	f000 f8df 	bl	13200 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>
   13042:	900a      	str	r0, [sp, #40]	; 0x28
   13044:	e7ff      	b.n	13046 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6a>
   13046:	e7ff      	b.n	13048 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x6c>
   13048:	9805      	ldr	r0, [sp, #20]
   1304a:	f7ff ff9d 	bl	12f88 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   1304e:	9000      	str	r0, [sp, #0]
   13050:	e7ff      	b.n	13052 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h7eefb8c4998d1734E+0x76>
   13052:	980a      	ldr	r0, [sp, #40]	; 0x28
   13054:	9900      	ldr	r1, [sp, #0]
   13056:	9108      	str	r1, [sp, #32]
   13058:	9009      	str	r0, [sp, #36]	; 0x24
   1305a:	9808      	ldr	r0, [sp, #32]
   1305c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1305e:	b010      	add	sp, #64	; 0x40
   13060:	bd80      	pop	{r7, pc}

00013062 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17ha60bf5f309186985E>:
   13062:	b081      	sub	sp, #4
   13064:	b001      	add	sp, #4
   13066:	4770      	bx	lr

00013068 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>:
   13068:	b580      	push	{r7, lr}
   1306a:	b08e      	sub	sp, #56	; 0x38
   1306c:	9007      	str	r0, [sp, #28]
   1306e:	6801      	ldr	r1, [r0, #0]
   13070:	9005      	str	r0, [sp, #20]
   13072:	4608      	mov	r0, r1
   13074:	f7ff ff8e 	bl	12f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13078:	9004      	str	r0, [sp, #16]
   1307a:	e7ff      	b.n	1307c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x14>
   1307c:	9804      	ldr	r0, [sp, #16]
   1307e:	f7ff ff79 	bl	12f74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17hbf94d7baae33305dE>
   13082:	e7ff      	b.n	13084 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1c>
   13084:	e7ff      	b.n	13086 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x1e>
   13086:	2001      	movs	r0, #1
   13088:	9008      	str	r0, [sp, #32]
   1308a:	9808      	ldr	r0, [sp, #32]
   1308c:	9003      	str	r0, [sp, #12]
   1308e:	e7ff      	b.n	13090 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x28>
   13090:	9803      	ldr	r0, [sp, #12]
   13092:	2800      	cmp	r0, #0
   13094:	d007      	beq.n	130a6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   13096:	e7ff      	b.n	13098 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x30>
   13098:	9805      	ldr	r0, [sp, #20]
   1309a:	6840      	ldr	r0, [r0, #4]
   1309c:	f7ff ff94 	bl	12fc8 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17hec4092b05dc6cc8dE>
   130a0:	e7ff      	b.n	130a2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3a>
   130a2:	e7ff      	b.n	130a4 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3c>
   130a4:	e7ff      	b.n	130a6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x3e>
   130a6:	9805      	ldr	r0, [sp, #20]
   130a8:	6800      	ldr	r0, [r0, #0]
   130aa:	f7ff ff73 	bl	12f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   130ae:	9002      	str	r0, [sp, #8]
   130b0:	e7ff      	b.n	130b2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x4a>
   130b2:	9805      	ldr	r0, [sp, #20]
   130b4:	6841      	ldr	r1, [r0, #4]
   130b6:	9a02      	ldr	r2, [sp, #8]
   130b8:	428a      	cmp	r2, r1
   130ba:	d02e      	beq.n	1311a <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb2>
   130bc:	e7ff      	b.n	130be <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x56>
   130be:	9805      	ldr	r0, [sp, #20]
   130c0:	900a      	str	r0, [sp, #40]	; 0x28
   130c2:	2101      	movs	r1, #1
   130c4:	910b      	str	r1, [sp, #44]	; 0x2c
   130c6:	910d      	str	r1, [sp, #52]	; 0x34
   130c8:	990d      	ldr	r1, [sp, #52]	; 0x34
   130ca:	2900      	cmp	r1, #0
   130cc:	d015      	beq.n	130fa <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x92>
   130ce:	e7ff      	b.n	130d0 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0x68>
   130d0:	9805      	ldr	r0, [sp, #20]
   130d2:	6800      	ldr	r0, [r0, #0]
   130d4:	f7ff ff5e 	bl	12f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   130d8:	900c      	str	r0, [sp, #48]	; 0x30
   130da:	9905      	ldr	r1, [sp, #20]
   130dc:	680a      	ldr	r2, [r1, #0]
   130de:	9001      	str	r0, [sp, #4]
   130e0:	4610      	mov	r0, r2
   130e2:	f7ff ff57 	bl	12f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   130e6:	2101      	movs	r1, #1
   130e8:	f7ff ff39 	bl	12f5e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb975a042146068d0E>
   130ec:	f7ff ff4c 	bl	12f88 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h493375e87758feb2E>
   130f0:	9905      	ldr	r1, [sp, #20]
   130f2:	6008      	str	r0, [r1, #0]
   130f4:	9801      	ldr	r0, [sp, #4]
   130f6:	9009      	str	r0, [sp, #36]	; 0x24
   130f8:	e00c      	b.n	13114 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   130fa:	9805      	ldr	r0, [sp, #20]
   130fc:	6840      	ldr	r0, [r0, #4]
   130fe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   13102:	f7ff ff56 	bl	12fb2 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h06dcbba9a1446e77E>
   13106:	9905      	ldr	r1, [sp, #20]
   13108:	6048      	str	r0, [r1, #4]
   1310a:	6808      	ldr	r0, [r1, #0]
   1310c:	f7ff ff42 	bl	12f94 <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17haec553e73abd8f39E>
   13110:	9009      	str	r0, [sp, #36]	; 0x24
   13112:	e7ff      	b.n	13114 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xac>
   13114:	9809      	ldr	r0, [sp, #36]	; 0x24
   13116:	9000      	str	r0, [sp, #0]
   13118:	e002      	b.n	13120 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xb8>
   1311a:	2000      	movs	r0, #0
   1311c:	9006      	str	r0, [sp, #24]
   1311e:	e002      	b.n	13126 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13120:	9800      	ldr	r0, [sp, #0]
   13122:	9006      	str	r0, [sp, #24]
   13124:	e7ff      	b.n	13126 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E+0xbe>
   13126:	9806      	ldr	r0, [sp, #24]
   13128:	b00e      	add	sp, #56	; 0x38
   1312a:	bd80      	pop	{r7, pc}

0001312c <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17h02d9d360acb5b8f7E>:
   1312c:	b081      	sub	sp, #4
   1312e:	b001      	add	sp, #4
   13130:	4770      	bx	lr

00013132 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E>:
   13132:	b580      	push	{r7, lr}
   13134:	b084      	sub	sp, #16
   13136:	9002      	str	r0, [sp, #8]
   13138:	9103      	str	r1, [sp, #12]
   1313a:	6800      	ldr	r0, [r0, #0]
   1313c:	f000 f81c 	bl	13178 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>
   13140:	9001      	str	r0, [sp, #4]
   13142:	e7ff      	b.n	13144 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h8762bad20c5e6b65E+0x12>
   13144:	9801      	ldr	r0, [sp, #4]
   13146:	f000 0001 	and.w	r0, r0, #1
   1314a:	b004      	add	sp, #16
   1314c:	bd80      	pop	{r7, pc}

0001314e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E>:
   1314e:	b089      	sub	sp, #36	; 0x24
   13150:	9005      	str	r0, [sp, #20]
   13152:	9106      	str	r1, [sp, #24]
   13154:	9107      	str	r1, [sp, #28]
   13156:	9907      	ldr	r1, [sp, #28]
   13158:	9002      	str	r0, [sp, #8]
   1315a:	9101      	str	r1, [sp, #4]
   1315c:	e7ff      	b.n	1315e <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x10>
   1315e:	9802      	ldr	r0, [sp, #8]
   13160:	9008      	str	r0, [sp, #32]
   13162:	9908      	ldr	r1, [sp, #32]
   13164:	9100      	str	r1, [sp, #0]
   13166:	e7ff      	b.n	13168 <_ZN4core3fmt10ArgumentV13new17h46392bc187a1bcf6E+0x1a>
   13168:	9800      	ldr	r0, [sp, #0]
   1316a:	9003      	str	r0, [sp, #12]
   1316c:	9901      	ldr	r1, [sp, #4]
   1316e:	9104      	str	r1, [sp, #16]
   13170:	9803      	ldr	r0, [sp, #12]
   13172:	9904      	ldr	r1, [sp, #16]
   13174:	b009      	add	sp, #36	; 0x24
   13176:	4770      	bx	lr

00013178 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE>:
   13178:	b580      	push	{r7, lr}
   1317a:	b088      	sub	sp, #32
   1317c:	9006      	str	r0, [sp, #24]
   1317e:	9107      	str	r1, [sp, #28]
   13180:	9004      	str	r0, [sp, #16]
   13182:	4608      	mov	r0, r1
   13184:	9103      	str	r1, [sp, #12]
   13186:	f004 fb2e 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1318a:	9002      	str	r0, [sp, #8]
   1318c:	e7ff      	b.n	1318e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x16>
   1318e:	9802      	ldr	r0, [sp, #8]
   13190:	07c1      	lsls	r1, r0, #31
   13192:	2900      	cmp	r1, #0
   13194:	d105      	bne.n	131a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x2a>
   13196:	e7ff      	b.n	13198 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x20>
   13198:	9803      	ldr	r0, [sp, #12]
   1319a:	f004 fb28 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1319e:	9001      	str	r0, [sp, #4]
   131a0:	e007      	b.n	131b2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x3a>
   131a2:	9804      	ldr	r0, [sp, #16]
   131a4:	9903      	ldr	r1, [sp, #12]
   131a6:	f005 f948 	bl	1843a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   131aa:	f88d 0017 	strb.w	r0, [sp, #23]
   131ae:	e7ff      	b.n	131b0 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x38>
   131b0:	e015      	b.n	131de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   131b2:	9801      	ldr	r0, [sp, #4]
   131b4:	07c1      	lsls	r1, r0, #31
   131b6:	2900      	cmp	r1, #0
   131b8:	d107      	bne.n	131ca <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x52>
   131ba:	e7ff      	b.n	131bc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x44>
   131bc:	9804      	ldr	r0, [sp, #16]
   131be:	9903      	ldr	r1, [sp, #12]
   131c0:	f005 fb30 	bl	18824 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   131c4:	f88d 0017 	strb.w	r0, [sp, #23]
   131c8:	e007      	b.n	131da <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x62>
   131ca:	9804      	ldr	r0, [sp, #16]
   131cc:	9903      	ldr	r1, [sp, #12]
   131ce:	f005 f99f 	bl	18510 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   131d2:	f88d 0017 	strb.w	r0, [sp, #23]
   131d6:	e7ff      	b.n	131d8 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x60>
   131d8:	e000      	b.n	131dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   131da:	e7ff      	b.n	131dc <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x64>
   131dc:	e7ff      	b.n	131de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17hb983405a2b90d02cE+0x66>
   131de:	f89d 0017 	ldrb.w	r0, [sp, #23]
   131e2:	b008      	add	sp, #32
   131e4:	bd80      	pop	{r7, pc}

000131e6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>:
   131e6:	b086      	sub	sp, #24
   131e8:	9004      	str	r0, [sp, #16]
   131ea:	9105      	str	r1, [sp, #20]
   131ec:	9002      	str	r0, [sp, #8]
   131ee:	9103      	str	r1, [sp, #12]
   131f0:	9802      	ldr	r0, [sp, #8]
   131f2:	9903      	ldr	r1, [sp, #12]
   131f4:	9000      	str	r0, [sp, #0]
   131f6:	9101      	str	r1, [sp, #4]
   131f8:	9800      	ldr	r0, [sp, #0]
   131fa:	9901      	ldr	r1, [sp, #4]
   131fc:	b006      	add	sp, #24
   131fe:	4770      	bx	lr

00013200 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE>:
   13200:	b580      	push	{r7, lr}
   13202:	b084      	sub	sp, #16
   13204:	9002      	str	r0, [sp, #8]
   13206:	9103      	str	r1, [sp, #12]
   13208:	f000 f805 	bl	13216 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>
   1320c:	9001      	str	r0, [sp, #4]
   1320e:	e7ff      	b.n	13210 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17h041e21ab95c1a2feE+0x10>
   13210:	9801      	ldr	r0, [sp, #4]
   13212:	b004      	add	sp, #16
   13214:	bd80      	pop	{r7, pc}

00013216 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E>:
   13216:	b084      	sub	sp, #16
   13218:	9001      	str	r0, [sp, #4]
   1321a:	9102      	str	r1, [sp, #8]
   1321c:	4408      	add	r0, r1
   1321e:	9003      	str	r0, [sp, #12]
   13220:	9803      	ldr	r0, [sp, #12]
   13222:	9000      	str	r0, [sp, #0]
   13224:	e7ff      	b.n	13226 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17h8200a5e9089c8603E+0x10>
   13226:	9800      	ldr	r0, [sp, #0]
   13228:	b004      	add	sp, #16
   1322a:	4770      	bx	lr

0001322c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>:
   1322c:	b580      	push	{r7, lr}
   1322e:	b084      	sub	sp, #16
   13230:	9002      	str	r0, [sp, #8]
   13232:	9103      	str	r1, [sp, #12]
   13234:	f7ff ffd7 	bl	131e6 <_ZN4core3ptr20slice_from_raw_parts17h8df4dc89faa9e8f4E>
   13238:	9001      	str	r0, [sp, #4]
   1323a:	9100      	str	r1, [sp, #0]
   1323c:	e7ff      	b.n	1323e <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E+0x12>
   1323e:	9801      	ldr	r0, [sp, #4]
   13240:	9900      	ldr	r1, [sp, #0]
   13242:	b004      	add	sp, #16
   13244:	bd80      	pop	{r7, pc}

00013246 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h4d857498b2d3e3a8E>:
   13246:	b084      	sub	sp, #16
   13248:	9002      	str	r0, [sp, #8]
   1324a:	9103      	str	r1, [sp, #12]
   1324c:	9000      	str	r0, [sp, #0]
   1324e:	9101      	str	r1, [sp, #4]
   13250:	9801      	ldr	r0, [sp, #4]
   13252:	b004      	add	sp, #16
   13254:	4770      	bx	lr

00013256 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h93891876cf25558cE>:
   13256:	b082      	sub	sp, #8
   13258:	9000      	str	r0, [sp, #0]
   1325a:	9101      	str	r1, [sp, #4]
   1325c:	b002      	add	sp, #8
   1325e:	4770      	bx	lr

00013260 <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E>:
        fn from(num: i32) -> Self {
   13260:	b083      	sub	sp, #12
   13262:	9001      	str	r0, [sp, #4]
                ::core::mem::transmute::
   13264:	9002      	str	r0, [sp, #8]
   13266:	9802      	ldr	r0, [sp, #8]
   13268:	9000      	str	r0, [sp, #0]
   1326a:	e7ff      	b.n	1326c <_ZN78_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$i32$GT$$GT$4from17h2ac374975a853162E+0xc>
        }
   1326c:	9800      	ldr	r0, [sp, #0]
   1326e:	b003      	add	sp, #12
   13270:	4770      	bx	lr

00013272 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>:
        fn from(_: ()) -> Self {
   13272:	b081      	sub	sp, #4
   13274:	f06f 000c 	mvn.w	r0, #12
        }
   13278:	b001      	add	sp, #4
   1327a:	4770      	bx	lr

0001327c <_ZN64_$LT$mynewt..result..MynewtError$u20$as$u20$core..fmt..Debug$GT$3fmt17hc827a019d77ab2a6E>:
        fn fmt(&self, _fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
   1327c:	b082      	sub	sp, #8
   1327e:	9000      	str	r0, [sp, #0]
   13280:	9101      	str	r1, [sp, #4]
   13282:	2000      	movs	r0, #0
        }
   13284:	b002      	add	sp, #8
   13286:	4770      	bx	lr

00013288 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>:
   13288:	b082      	sub	sp, #8
   1328a:	9000      	str	r0, [sp, #0]
   1328c:	9101      	str	r1, [sp, #4]
   1328e:	7800      	ldrb	r0, [r0, #0]
   13290:	7809      	ldrb	r1, [r1, #0]
   13292:	1a40      	subs	r0, r0, r1
   13294:	fab0 f080 	clz	r0, r0
   13298:	0940      	lsrs	r0, r0, #5
   1329a:	b002      	add	sp, #8
   1329c:	4770      	bx	lr

0001329e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>:
where
    N: ArrayLength<T>,
{
    type Target = [T];

    fn deref(&self) -> &[T] {
   1329e:	b580      	push	{r7, lr}
   132a0:	b084      	sub	sp, #16
   132a2:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   132a4:	f002 ffc4 	bl	16230 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>
   132a8:	9002      	str	r0, [sp, #8]
   132aa:	9101      	str	r1, [sp, #4]
   132ac:	e7ff      	b.n	132ae <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE+0x10>
    }
   132ae:	9802      	ldr	r0, [sp, #8]
   132b0:	9901      	ldr	r1, [sp, #4]
   132b2:	b004      	add	sp, #16
   132b4:	bd80      	pop	{r7, pc}

000132b6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>:
    fn deref(&self) -> &[T] {
   132b6:	b580      	push	{r7, lr}
   132b8:	b084      	sub	sp, #16
   132ba:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   132bc:	f002 ffcd 	bl	1625a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>
   132c0:	9002      	str	r0, [sp, #8]
   132c2:	9101      	str	r1, [sp, #4]
   132c4:	e7ff      	b.n	132c6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE+0x10>
    }
   132c6:	9802      	ldr	r0, [sp, #8]
   132c8:	9901      	ldr	r1, [sp, #4]
   132ca:	b004      	add	sp, #16
   132cc:	bd80      	pop	{r7, pc}

000132ce <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   132ce:	b580      	push	{r7, lr}
   132d0:	b084      	sub	sp, #16
   132d2:	9001      	str	r0, [sp, #4]
   132d4:	9102      	str	r1, [sp, #8]
   132d6:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   132d8:	f002 ff0c 	bl	160f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>
   132dc:	9000      	str	r0, [sp, #0]
   132de:	e7ff      	b.n	132e0 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E+0x12>
    }
   132e0:	9800      	ldr	r0, [sp, #0]
   132e2:	f000 0001 	and.w	r0, r0, #1
   132e6:	b004      	add	sp, #16
   132e8:	bd80      	pop	{r7, pc}

000132ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   132ea:	b580      	push	{r7, lr}
   132ec:	b086      	sub	sp, #24
   132ee:	460a      	mov	r2, r1
   132f0:	9004      	str	r0, [sp, #16]
   132f2:	f88d 1017 	strb.w	r1, [sp, #23]
        self.0.push(item)
   132f6:	9203      	str	r2, [sp, #12]
   132f8:	f002 ff5f 	bl	161ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>
   132fc:	9002      	str	r0, [sp, #8]
   132fe:	9101      	str	r1, [sp, #4]
   13300:	e7ff      	b.n	13302 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E+0x18>
    }
   13302:	9802      	ldr	r0, [sp, #8]
   13304:	f000 0001 	and.w	r0, r0, #1
   13308:	9901      	ldr	r1, [sp, #4]
   1330a:	b006      	add	sp, #24
   1330c:	bd80      	pop	{r7, pc}

0001330e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>:
    pub fn clear(&mut self) {
   1330e:	b580      	push	{r7, lr}
   13310:	b082      	sub	sp, #8
   13312:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13314:	f002 ff83 	bl	1621e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>
   13318:	e7ff      	b.n	1331a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E+0xc>
    }
   1331a:	b002      	add	sp, #8
   1331c:	bd80      	pop	{r7, pc}

0001331e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>:
    pub fn clear(&mut self) {
   1331e:	b580      	push	{r7, lr}
   13320:	b082      	sub	sp, #8
   13322:	9001      	str	r0, [sp, #4]
        self.0.clear()
   13324:	f002 ff72 	bl	1620c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>
   13328:	e7ff      	b.n	1332a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E+0xc>
    }
   1332a:	b002      	add	sp, #8
   1332c:	bd80      	pop	{r7, pc}

0001332e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E>:
   1332e:	b580      	push	{r7, lr}
   13330:	b088      	sub	sp, #32
   13332:	9006      	str	r0, [sp, #24]
   13334:	9107      	str	r1, [sp, #28]
   13336:	9004      	str	r0, [sp, #16]
   13338:	4608      	mov	r0, r1
   1333a:	9103      	str	r1, [sp, #12]
   1333c:	f004 fa53 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   13340:	9002      	str	r0, [sp, #8]
   13342:	e7ff      	b.n	13344 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x16>
   13344:	9802      	ldr	r0, [sp, #8]
   13346:	07c1      	lsls	r1, r0, #31
   13348:	2900      	cmp	r1, #0
   1334a:	d105      	bne.n	13358 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x2a>
   1334c:	e7ff      	b.n	1334e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x20>
   1334e:	9803      	ldr	r0, [sp, #12]
   13350:	f004 fa4d 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13354:	9001      	str	r0, [sp, #4]
   13356:	e007      	b.n	13368 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x3a>
   13358:	9804      	ldr	r0, [sp, #16]
   1335a:	9903      	ldr	r1, [sp, #12]
   1335c:	f004 ff51 	bl	18202 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>
   13360:	f88d 0017 	strb.w	r0, [sp, #23]
   13364:	e7ff      	b.n	13366 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x38>
   13366:	e015      	b.n	13394 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13368:	9801      	ldr	r0, [sp, #4]
   1336a:	07c1      	lsls	r1, r0, #31
   1336c:	2900      	cmp	r1, #0
   1336e:	d107      	bne.n	13380 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x52>
   13370:	e7ff      	b.n	13372 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x44>
   13372:	9804      	ldr	r0, [sp, #16]
   13374:	9903      	ldr	r1, [sp, #12]
   13376:	f005 f936 	bl	185e6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>
   1337a:	f88d 0017 	strb.w	r0, [sp, #23]
   1337e:	e007      	b.n	13390 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x62>
   13380:	9804      	ldr	r0, [sp, #16]
   13382:	9903      	ldr	r1, [sp, #12]
   13384:	f004 ff6c 	bl	18260 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>
   13388:	f88d 0017 	strb.w	r0, [sp, #23]
   1338c:	e7ff      	b.n	1338e <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x60>
   1338e:	e000      	b.n	13392 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13390:	e7ff      	b.n	13392 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x64>
   13392:	e7ff      	b.n	13394 <_ZN4core3fmt3num49_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u8$GT$3fmt17h681e1c39d3389cb9E+0x66>
   13394:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13398:	b008      	add	sp, #32
   1339a:	bd80      	pop	{r7, pc}

0001339c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE>:
   1339c:	b580      	push	{r7, lr}
   1339e:	b088      	sub	sp, #32
   133a0:	9006      	str	r0, [sp, #24]
   133a2:	9107      	str	r1, [sp, #28]
   133a4:	9004      	str	r0, [sp, #16]
   133a6:	4608      	mov	r0, r1
   133a8:	9103      	str	r1, [sp, #12]
   133aa:	f004 fa1c 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   133ae:	9002      	str	r0, [sp, #8]
   133b0:	e7ff      	b.n	133b2 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x16>
   133b2:	9802      	ldr	r0, [sp, #8]
   133b4:	07c1      	lsls	r1, r0, #31
   133b6:	2900      	cmp	r1, #0
   133b8:	d105      	bne.n	133c6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x2a>
   133ba:	e7ff      	b.n	133bc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x20>
   133bc:	9803      	ldr	r0, [sp, #12]
   133be:	f004 fa16 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   133c2:	9001      	str	r0, [sp, #4]
   133c4:	e007      	b.n	133d6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x3a>
   133c6:	9804      	ldr	r0, [sp, #16]
   133c8:	9903      	ldr	r1, [sp, #12]
   133ca:	f005 f836 	bl	1843a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   133ce:	f88d 0017 	strb.w	r0, [sp, #23]
   133d2:	e7ff      	b.n	133d4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x38>
   133d4:	e015      	b.n	13402 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   133d6:	9801      	ldr	r0, [sp, #4]
   133d8:	07c1      	lsls	r1, r0, #31
   133da:	2900      	cmp	r1, #0
   133dc:	d107      	bne.n	133ee <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x52>
   133de:	e7ff      	b.n	133e0 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x44>
   133e0:	9804      	ldr	r0, [sp, #16]
   133e2:	9903      	ldr	r1, [sp, #12]
   133e4:	f005 f9a4 	bl	18730 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>
   133e8:	f88d 0017 	strb.w	r0, [sp, #23]
   133ec:	e007      	b.n	133fe <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x62>
   133ee:	9804      	ldr	r0, [sp, #16]
   133f0:	9903      	ldr	r1, [sp, #12]
   133f2:	f005 f88d 	bl	18510 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   133f6:	f88d 0017 	strb.w	r0, [sp, #23]
   133fa:	e7ff      	b.n	133fc <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x60>
   133fc:	e000      	b.n	13400 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   133fe:	e7ff      	b.n	13400 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x64>
   13400:	e7ff      	b.n	13402 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$i32$GT$3fmt17h2b712f189181683dE+0x66>
   13402:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13406:	b008      	add	sp, #32
   13408:	bd80      	pop	{r7, pc}

0001340a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E>:
   1340a:	b580      	push	{r7, lr}
   1340c:	b088      	sub	sp, #32
   1340e:	9006      	str	r0, [sp, #24]
   13410:	9107      	str	r1, [sp, #28]
   13412:	9004      	str	r0, [sp, #16]
   13414:	4608      	mov	r0, r1
   13416:	9103      	str	r1, [sp, #12]
   13418:	f004 f9e5 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   1341c:	9002      	str	r0, [sp, #8]
   1341e:	e7ff      	b.n	13420 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x16>
   13420:	9802      	ldr	r0, [sp, #8]
   13422:	07c1      	lsls	r1, r0, #31
   13424:	2900      	cmp	r1, #0
   13426:	d105      	bne.n	13434 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x2a>
   13428:	e7ff      	b.n	1342a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x20>
   1342a:	9803      	ldr	r0, [sp, #12]
   1342c:	f004 f9df 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   13430:	9001      	str	r0, [sp, #4]
   13432:	e007      	b.n	13444 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x3a>
   13434:	9804      	ldr	r0, [sp, #16]
   13436:	9903      	ldr	r1, [sp, #12]
   13438:	f004 ffff 	bl	1843a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>
   1343c:	f88d 0017 	strb.w	r0, [sp, #23]
   13440:	e7ff      	b.n	13442 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x38>
   13442:	e015      	b.n	13470 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13444:	9801      	ldr	r0, [sp, #4]
   13446:	07c1      	lsls	r1, r0, #31
   13448:	2900      	cmp	r1, #0
   1344a:	d107      	bne.n	1345c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x52>
   1344c:	e7ff      	b.n	1344e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x44>
   1344e:	9804      	ldr	r0, [sp, #16]
   13450:	9903      	ldr	r1, [sp, #12]
   13452:	f005 f9e7 	bl	18824 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>
   13456:	f88d 0017 	strb.w	r0, [sp, #23]
   1345a:	e007      	b.n	1346c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x62>
   1345c:	9804      	ldr	r0, [sp, #16]
   1345e:	9903      	ldr	r1, [sp, #12]
   13460:	f005 f856 	bl	18510 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>
   13464:	f88d 0017 	strb.w	r0, [sp, #23]
   13468:	e7ff      	b.n	1346a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x60>
   1346a:	e000      	b.n	1346e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1346c:	e7ff      	b.n	1346e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x64>
   1346e:	e7ff      	b.n	13470 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u32$GT$3fmt17h35b4df3eb0ba8cd0E+0x66>
   13470:	f89d 0017 	ldrb.w	r0, [sp, #23]
   13474:	b008      	add	sp, #32
   13476:	bd80      	pop	{r7, pc}

00013478 <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E>:
   13478:	b580      	push	{r7, lr}
   1347a:	b084      	sub	sp, #16
   1347c:	9002      	str	r0, [sp, #8]
   1347e:	9103      	str	r1, [sp, #12]
   13480:	6800      	ldr	r0, [r0, #0]
   13482:	6809      	ldr	r1, [r1, #0]
   13484:	f7ff ff00 	bl	13288 <_ZN4core3cmp5impls53_$LT$impl$u20$core..cmp..PartialEq$u20$for$u20$u8$GT$2eq17h3ed9982ef8c75b87E>
   13488:	9001      	str	r0, [sp, #4]
   1348a:	e7ff      	b.n	1348c <_ZN4core3cmp5impls69_$LT$impl$u20$core..cmp..PartialEq$LT$$RF$B$GT$$u20$for$u20$$RF$A$GT$2eq17h493cb46cadfa73e3E+0x14>
   1348c:	9801      	ldr	r0, [sp, #4]
   1348e:	f000 0001 	and.w	r0, r0, #1
   13492:	b004      	add	sp, #16
   13494:	bd80      	pop	{r7, pc}

00013496 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E>:

/// Non-blocking SPI transfer callback values (not used)
static mut SPI_CALLBACK: SpiCallback = SpiCallback {};

/// Init non-blocking SPI transfer
pub fn spi_noblock_init() -> MynewtResult<()> {
   13496:	b5b0      	push	{r4, r5, r7, lr}
   13498:	f5ad 6db5 	sub.w	sp, sp, #1448	; 0x5a8
   1349c:	2000      	movs	r0, #0
    //  Disable SPI port
    unsafe { hal::hal_spi_disable(SPI_NUM) };
   1349e:	f006 f8a3 	bl	195e8 <hal_spi_disable>
   134a2:	e7ff      	b.n	134a4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xe>

    //  Configure SPI port for non-blocking SPI
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   134a4:	f240 01f8 	movw	r1, #248	; 0xf8
   134a8:	f2c2 0100 	movt	r1, #8192	; 0x2000
   134ac:	2000      	movs	r0, #0
   134ae:	f006 f859 	bl	19564 <hal_spi_config>
   134b2:	906a      	str	r0, [sp, #424]	; 0x1a8
   134b4:	e7ff      	b.n	134b6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x20>
   134b6:	f24f 7058 	movw	r0, #63320	; 0xf758
   134ba:	f2c0 0001 	movt	r0, #1
   134be:	6800      	ldr	r0, [r0, #0]
   134c0:	a96a      	add	r1, sp, #424	; 0x1a8
   134c2:	916b      	str	r1, [sp, #428]	; 0x1ac
   134c4:	906c      	str	r0, [sp, #432]	; 0x1b0
   134c6:	986b      	ldr	r0, [sp, #428]	; 0x1ac
   134c8:	f8cd 04fc 	str.w	r0, [sp, #1276]	; 0x4fc
   134cc:	996c      	ldr	r1, [sp, #432]	; 0x1b0
   134ce:	f8cd 1500 	str.w	r1, [sp, #1280]	; 0x500
   134d2:	6802      	ldr	r2, [r0, #0]
   134d4:	680b      	ldr	r3, [r1, #0]
   134d6:	429a      	cmp	r2, r3
   134d8:	9068      	str	r0, [sp, #416]	; 0x1a0
   134da:	9167      	str	r1, [sp, #412]	; 0x19c
   134dc:	d10c      	bne.n	134f8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x62>
   134de:	e7ff      	b.n	134e0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4a>
    let arg = unsafe { core::mem::transmute(&mut SPI_CALLBACK) };
   134e0:	f244 7004 	movw	r0, #18180	; 0x4704
   134e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
   134e8:	f8cd 0510 	str.w	r0, [sp, #1296]	; 0x510
   134ec:	f8dd 0510 	ldr.w	r0, [sp, #1296]	; 0x510
   134f0:	f8cd 0514 	str.w	r0, [sp, #1300]	; 0x514
   134f4:	9066      	str	r0, [sp, #408]	; 0x198
   134f6:	e075      	b.n	135e4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x14e>
    let rc = unsafe { hal::hal_spi_config(SPI_NUM, &mut SPI_SETTINGS) }; assert_eq!(rc, 0, "spi config fail");  //  TODO: Map to MynewtResult
   134f8:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   134fc:	f2c0 0001 	movt	r0, #1
   13500:	6801      	ldr	r1, [r0, #0]
   13502:	9868      	ldr	r0, [sp, #416]	; 0x1a0
   13504:	907c      	str	r0, [sp, #496]	; 0x1f0
   13506:	9a67      	ldr	r2, [sp, #412]	; 0x19c
   13508:	927d      	str	r2, [sp, #500]	; 0x1f4
   1350a:	f24f 73cc 	movw	r3, #63436	; 0xf7cc
   1350e:	f2c0 0301 	movt	r3, #1
   13512:	681b      	ldr	r3, [r3, #0]
   13514:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13518:	f2c0 0c01 	movt	ip, #1
   1351c:	f8dc c000 	ldr.w	ip, [ip]
   13520:	46ee      	mov	lr, sp
   13522:	2400      	movs	r4, #0
   13524:	f8ce 4000 	str.w	r4, [lr]
   13528:	a87e      	add	r0, sp, #504	; 0x1f8
   1352a:	2201      	movs	r2, #1
   1352c:	9165      	str	r1, [sp, #404]	; 0x194
   1352e:	4619      	mov	r1, r3
   13530:	4663      	mov	r3, ip
   13532:	f7fb fe6e 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13536:	e7ff      	b.n	13538 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2>
   13538:	a87c      	add	r0, sp, #496	; 0x1f0
   1353a:	9079      	str	r0, [sp, #484]	; 0x1e4
   1353c:	a87d      	add	r0, sp, #500	; 0x1f4
   1353e:	907a      	str	r0, [sp, #488]	; 0x1e8
   13540:	a87e      	add	r0, sp, #504	; 0x1f8
   13542:	907b      	str	r0, [sp, #492]	; 0x1ec
   13544:	9879      	ldr	r0, [sp, #484]	; 0x1e4
   13546:	f8cd 0504 	str.w	r0, [sp, #1284]	; 0x504
   1354a:	997a      	ldr	r1, [sp, #488]	; 0x1e8
   1354c:	f8cd 1508 	str.w	r1, [sp, #1288]	; 0x508
   13550:	9a7b      	ldr	r2, [sp, #492]	; 0x1ec
   13552:	f8cd 250c 	str.w	r2, [sp, #1292]	; 0x50c
   13556:	f64f 739f 	movw	r3, #65439	; 0xff9f
   1355a:	f2c0 0300 	movt	r3, #0
   1355e:	9164      	str	r1, [sp, #400]	; 0x190
   13560:	4619      	mov	r1, r3
   13562:	9263      	str	r2, [sp, #396]	; 0x18c
   13564:	f7fc fd53 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13568:	9062      	str	r0, [sp, #392]	; 0x188
   1356a:	9161      	str	r1, [sp, #388]	; 0x184
   1356c:	e7ff      	b.n	1356e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xd8>
   1356e:	f64f 719f 	movw	r1, #65439	; 0xff9f
   13572:	f2c0 0100 	movt	r1, #0
   13576:	9864      	ldr	r0, [sp, #400]	; 0x190
   13578:	f7fc fd49 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   1357c:	9060      	str	r0, [sp, #384]	; 0x180
   1357e:	915f      	str	r1, [sp, #380]	; 0x17c
   13580:	e7ff      	b.n	13582 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xec>
   13582:	f247 0173 	movw	r1, #28787	; 0x7073
   13586:	f2c0 0101 	movt	r1, #1
   1358a:	9863      	ldr	r0, [sp, #396]	; 0x18c
   1358c:	f7fc fd7e 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13590:	905e      	str	r0, [sp, #376]	; 0x178
   13592:	915d      	str	r1, [sp, #372]	; 0x174
   13594:	e7ff      	b.n	13596 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x100>
   13596:	9862      	ldr	r0, [sp, #392]	; 0x188
   13598:	9073      	str	r0, [sp, #460]	; 0x1cc
   1359a:	9961      	ldr	r1, [sp, #388]	; 0x184
   1359c:	9174      	str	r1, [sp, #464]	; 0x1d0
   1359e:	9a60      	ldr	r2, [sp, #384]	; 0x180
   135a0:	9275      	str	r2, [sp, #468]	; 0x1d4
   135a2:	9b5f      	ldr	r3, [sp, #380]	; 0x17c
   135a4:	9376      	str	r3, [sp, #472]	; 0x1d8
   135a6:	f8dd c178 	ldr.w	ip, [sp, #376]	; 0x178
   135aa:	f8cd c1dc 	str.w	ip, [sp, #476]	; 0x1dc
   135ae:	f8dd e174 	ldr.w	lr, [sp, #372]	; 0x174
   135b2:	f8cd e1e0 	str.w	lr, [sp, #480]	; 0x1e0
   135b6:	466c      	mov	r4, sp
   135b8:	2503      	movs	r5, #3
   135ba:	6025      	str	r5, [r4, #0]
   135bc:	a86d      	add	r0, sp, #436	; 0x1b4
   135be:	ab73      	add	r3, sp, #460	; 0x1cc
   135c0:	9965      	ldr	r1, [sp, #404]	; 0x194
   135c2:	462a      	mov	r2, r5
   135c4:	f7fb fe25 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   135c8:	e7ff      	b.n	135ca <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x134>
   135ca:	f24f 70ec 	movw	r0, #63468	; 0xf7ec
   135ce:	f2c0 0001 	movt	r0, #1
   135d2:	f003 fa60 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   135d6:	905c      	str	r0, [sp, #368]	; 0x170
   135d8:	e7ff      	b.n	135da <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x144>
   135da:	a86d      	add	r0, sp, #436	; 0x1b4
   135dc:	995c      	ldr	r1, [sp, #368]	; 0x170
   135de:	f003 fa97 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   135e2:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
        SPI_NUM, 
        Some(spi_noblock_handler), 
   135e4:	f644 10ad 	movw	r0, #18861	; 0x49ad
   135e8:	f2c0 0001 	movt	r0, #1
   135ec:	9085      	str	r0, [sp, #532]	; 0x214
    let rc = unsafe { hal::hal_spi_set_txrx_cb(
   135ee:	9985      	ldr	r1, [sp, #532]	; 0x214
   135f0:	2000      	movs	r0, #0
   135f2:	9a66      	ldr	r2, [sp, #408]	; 0x198
   135f4:	f006 f85c 	bl	196b0 <hal_spi_set_txrx_cb>
   135f8:	9084      	str	r0, [sp, #528]	; 0x210
   135fa:	e7ff      	b.n	135fc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x166>
        arg
    ) };
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   135fc:	f24f 7058 	movw	r0, #63320	; 0xf758
   13600:	f2c0 0001 	movt	r0, #1
   13604:	6800      	ldr	r0, [r0, #0]
   13606:	a984      	add	r1, sp, #528	; 0x210
   13608:	9186      	str	r1, [sp, #536]	; 0x218
   1360a:	9087      	str	r0, [sp, #540]	; 0x21c
   1360c:	9886      	ldr	r0, [sp, #536]	; 0x218
   1360e:	f8cd 0518 	str.w	r0, [sp, #1304]	; 0x518
   13612:	9987      	ldr	r1, [sp, #540]	; 0x21c
   13614:	f8cd 151c 	str.w	r1, [sp, #1308]	; 0x51c
   13618:	6802      	ldr	r2, [r0, #0]
   1361a:	680b      	ldr	r3, [r1, #0]
   1361c:	429a      	cmp	r2, r3
   1361e:	905b      	str	r0, [sp, #364]	; 0x16c
   13620:	915a      	str	r1, [sp, #360]	; 0x168
   13622:	d105      	bne.n	13630 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x19a>
   13624:	e7ff      	b.n	13626 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x190>
   13626:	2000      	movs	r0, #0

    //  Enable SPI port and set SS to high to disable SPI device
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13628:	f005 ffb8 	bl	1959c <hal_spi_enable>
   1362c:	909f      	str	r0, [sp, #636]	; 0x27c
   1362e:	e075      	b.n	1371c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x286>
    assert_eq!(rc, 0, "spi cb fail");  //  TODO: Map to MynewtResult
   13630:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13634:	f2c0 0001 	movt	r0, #1
   13638:	6801      	ldr	r1, [r0, #0]
   1363a:	985b      	ldr	r0, [sp, #364]	; 0x16c
   1363c:	9097      	str	r0, [sp, #604]	; 0x25c
   1363e:	9a5a      	ldr	r2, [sp, #360]	; 0x168
   13640:	9298      	str	r2, [sp, #608]	; 0x260
   13642:	f64f 0310 	movw	r3, #63504	; 0xf810
   13646:	f2c0 0301 	movt	r3, #1
   1364a:	681b      	ldr	r3, [r3, #0]
   1364c:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13650:	f2c0 0c01 	movt	ip, #1
   13654:	f8dc c000 	ldr.w	ip, [ip]
   13658:	46ee      	mov	lr, sp
   1365a:	2400      	movs	r4, #0
   1365c:	f8ce 4000 	str.w	r4, [lr]
   13660:	a899      	add	r0, sp, #612	; 0x264
   13662:	2201      	movs	r2, #1
   13664:	9159      	str	r1, [sp, #356]	; 0x164
   13666:	4619      	mov	r1, r3
   13668:	4663      	mov	r3, ip
   1366a:	f7fb fdd2 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1366e:	e7ff      	b.n	13670 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x1da>
   13670:	a897      	add	r0, sp, #604	; 0x25c
   13672:	9094      	str	r0, [sp, #592]	; 0x250
   13674:	a898      	add	r0, sp, #608	; 0x260
   13676:	9095      	str	r0, [sp, #596]	; 0x254
   13678:	a899      	add	r0, sp, #612	; 0x264
   1367a:	9096      	str	r0, [sp, #600]	; 0x258
   1367c:	9894      	ldr	r0, [sp, #592]	; 0x250
   1367e:	f8cd 0520 	str.w	r0, [sp, #1312]	; 0x520
   13682:	9995      	ldr	r1, [sp, #596]	; 0x254
   13684:	f8cd 1524 	str.w	r1, [sp, #1316]	; 0x524
   13688:	9a96      	ldr	r2, [sp, #600]	; 0x258
   1368a:	f8cd 2528 	str.w	r2, [sp, #1320]	; 0x528
   1368e:	f64f 739f 	movw	r3, #65439	; 0xff9f
   13692:	f2c0 0300 	movt	r3, #0
   13696:	9158      	str	r1, [sp, #352]	; 0x160
   13698:	4619      	mov	r1, r3
   1369a:	9257      	str	r2, [sp, #348]	; 0x15c
   1369c:	f7fc fcb7 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136a0:	9056      	str	r0, [sp, #344]	; 0x158
   136a2:	9155      	str	r1, [sp, #340]	; 0x154
   136a4:	e7ff      	b.n	136a6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x210>
   136a6:	f64f 719f 	movw	r1, #65439	; 0xff9f
   136aa:	f2c0 0100 	movt	r1, #0
   136ae:	9858      	ldr	r0, [sp, #352]	; 0x160
   136b0:	f7fc fcad 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   136b4:	9054      	str	r0, [sp, #336]	; 0x150
   136b6:	9153      	str	r1, [sp, #332]	; 0x14c
   136b8:	e7ff      	b.n	136ba <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x224>
   136ba:	f247 0173 	movw	r1, #28787	; 0x7073
   136be:	f2c0 0101 	movt	r1, #1
   136c2:	9857      	ldr	r0, [sp, #348]	; 0x15c
   136c4:	f7fc fce2 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   136c8:	9052      	str	r0, [sp, #328]	; 0x148
   136ca:	9151      	str	r1, [sp, #324]	; 0x144
   136cc:	e7ff      	b.n	136ce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x238>
   136ce:	9856      	ldr	r0, [sp, #344]	; 0x158
   136d0:	908e      	str	r0, [sp, #568]	; 0x238
   136d2:	9955      	ldr	r1, [sp, #340]	; 0x154
   136d4:	918f      	str	r1, [sp, #572]	; 0x23c
   136d6:	9a54      	ldr	r2, [sp, #336]	; 0x150
   136d8:	9290      	str	r2, [sp, #576]	; 0x240
   136da:	9b53      	ldr	r3, [sp, #332]	; 0x14c
   136dc:	9391      	str	r3, [sp, #580]	; 0x244
   136de:	f8dd c148 	ldr.w	ip, [sp, #328]	; 0x148
   136e2:	f8cd c248 	str.w	ip, [sp, #584]	; 0x248
   136e6:	f8dd e144 	ldr.w	lr, [sp, #324]	; 0x144
   136ea:	f8cd e24c 	str.w	lr, [sp, #588]	; 0x24c
   136ee:	466c      	mov	r4, sp
   136f0:	2503      	movs	r5, #3
   136f2:	6025      	str	r5, [r4, #0]
   136f4:	a888      	add	r0, sp, #544	; 0x220
   136f6:	ab8e      	add	r3, sp, #568	; 0x238
   136f8:	9959      	ldr	r1, [sp, #356]	; 0x164
   136fa:	462a      	mov	r2, r5
   136fc:	f7fb fd89 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13700:	e7ff      	b.n	13702 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x26c>
   13702:	f64f 0014 	movw	r0, #63508	; 0xf814
   13706:	f2c0 0001 	movt	r0, #1
   1370a:	f003 f9c4 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1370e:	9050      	str	r0, [sp, #320]	; 0x140
   13710:	e7ff      	b.n	13712 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x27c>
   13712:	a888      	add	r0, sp, #544	; 0x220
   13714:	9950      	ldr	r1, [sp, #320]	; 0x140
   13716:	f003 f9fb 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1371a:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   1371c:	f24f 7058 	movw	r0, #63320	; 0xf758
   13720:	f2c0 0001 	movt	r0, #1
   13724:	6800      	ldr	r0, [r0, #0]
   13726:	a99f      	add	r1, sp, #636	; 0x27c
   13728:	91a0      	str	r1, [sp, #640]	; 0x280
   1372a:	90a1      	str	r0, [sp, #644]	; 0x284
   1372c:	98a0      	ldr	r0, [sp, #640]	; 0x280
   1372e:	f8cd 052c 	str.w	r0, [sp, #1324]	; 0x52c
   13732:	99a1      	ldr	r1, [sp, #644]	; 0x284
   13734:	f8cd 1530 	str.w	r1, [sp, #1328]	; 0x530
   13738:	6802      	ldr	r2, [r0, #0]
   1373a:	680b      	ldr	r3, [r1, #0]
   1373c:	429a      	cmp	r2, r3
   1373e:	904f      	str	r0, [sp, #316]	; 0x13c
   13740:	914e      	str	r1, [sp, #312]	; 0x138
   13742:	d106      	bne.n	13752 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2bc>
   13744:	e7ff      	b.n	13746 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2b0>
   13746:	2019      	movs	r0, #25
   13748:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1374a:	f005 fafd 	bl	18d48 <hal_gpio_init_out>
   1374e:	90b9      	str	r0, [sp, #740]	; 0x2e4
   13750:	e075      	b.n	1383e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3a8>
    let rc = unsafe { hal::hal_spi_enable(SPI_NUM) }; assert_eq!(rc, 0, "spi enable fail");  //  TODO: Map to MynewtResult
   13752:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13756:	f2c0 0001 	movt	r0, #1
   1375a:	6801      	ldr	r1, [r0, #0]
   1375c:	984f      	ldr	r0, [sp, #316]	; 0x13c
   1375e:	90b1      	str	r0, [sp, #708]	; 0x2c4
   13760:	9a4e      	ldr	r2, [sp, #312]	; 0x138
   13762:	92b2      	str	r2, [sp, #712]	; 0x2c8
   13764:	f64f 033c 	movw	r3, #63548	; 0xf83c
   13768:	f2c0 0301 	movt	r3, #1
   1376c:	681b      	ldr	r3, [r3, #0]
   1376e:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13772:	f2c0 0c01 	movt	ip, #1
   13776:	f8dc c000 	ldr.w	ip, [ip]
   1377a:	46ee      	mov	lr, sp
   1377c:	2400      	movs	r4, #0
   1377e:	f8ce 4000 	str.w	r4, [lr]
   13782:	a8b3      	add	r0, sp, #716	; 0x2cc
   13784:	2201      	movs	r2, #1
   13786:	914d      	str	r1, [sp, #308]	; 0x134
   13788:	4619      	mov	r1, r3
   1378a:	4663      	mov	r3, ip
   1378c:	f7fb fd41 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13790:	e7ff      	b.n	13792 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x2fc>
   13792:	a8b1      	add	r0, sp, #708	; 0x2c4
   13794:	90ae      	str	r0, [sp, #696]	; 0x2b8
   13796:	a8b2      	add	r0, sp, #712	; 0x2c8
   13798:	90af      	str	r0, [sp, #700]	; 0x2bc
   1379a:	a8b3      	add	r0, sp, #716	; 0x2cc
   1379c:	90b0      	str	r0, [sp, #704]	; 0x2c0
   1379e:	98ae      	ldr	r0, [sp, #696]	; 0x2b8
   137a0:	f8cd 0534 	str.w	r0, [sp, #1332]	; 0x534
   137a4:	99af      	ldr	r1, [sp, #700]	; 0x2bc
   137a6:	f8cd 1538 	str.w	r1, [sp, #1336]	; 0x538
   137aa:	9ab0      	ldr	r2, [sp, #704]	; 0x2c0
   137ac:	f8cd 253c 	str.w	r2, [sp, #1340]	; 0x53c
   137b0:	f64f 739f 	movw	r3, #65439	; 0xff9f
   137b4:	f2c0 0300 	movt	r3, #0
   137b8:	914c      	str	r1, [sp, #304]	; 0x130
   137ba:	4619      	mov	r1, r3
   137bc:	924b      	str	r2, [sp, #300]	; 0x12c
   137be:	f7fc fc26 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   137c2:	904a      	str	r0, [sp, #296]	; 0x128
   137c4:	9149      	str	r1, [sp, #292]	; 0x124
   137c6:	e7ff      	b.n	137c8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x332>
   137c8:	f64f 719f 	movw	r1, #65439	; 0xff9f
   137cc:	f2c0 0100 	movt	r1, #0
   137d0:	984c      	ldr	r0, [sp, #304]	; 0x130
   137d2:	f7fc fc1c 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   137d6:	9048      	str	r0, [sp, #288]	; 0x120
   137d8:	9147      	str	r1, [sp, #284]	; 0x11c
   137da:	e7ff      	b.n	137dc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x346>
   137dc:	f247 0173 	movw	r1, #28787	; 0x7073
   137e0:	f2c0 0101 	movt	r1, #1
   137e4:	984b      	ldr	r0, [sp, #300]	; 0x12c
   137e6:	f7fc fc51 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   137ea:	9046      	str	r0, [sp, #280]	; 0x118
   137ec:	9145      	str	r1, [sp, #276]	; 0x114
   137ee:	e7ff      	b.n	137f0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x35a>
   137f0:	984a      	ldr	r0, [sp, #296]	; 0x128
   137f2:	90a8      	str	r0, [sp, #672]	; 0x2a0
   137f4:	9949      	ldr	r1, [sp, #292]	; 0x124
   137f6:	91a9      	str	r1, [sp, #676]	; 0x2a4
   137f8:	9a48      	ldr	r2, [sp, #288]	; 0x120
   137fa:	92aa      	str	r2, [sp, #680]	; 0x2a8
   137fc:	9b47      	ldr	r3, [sp, #284]	; 0x11c
   137fe:	93ab      	str	r3, [sp, #684]	; 0x2ac
   13800:	f8dd c118 	ldr.w	ip, [sp, #280]	; 0x118
   13804:	f8cd c2b0 	str.w	ip, [sp, #688]	; 0x2b0
   13808:	f8dd e114 	ldr.w	lr, [sp, #276]	; 0x114
   1380c:	f8cd e2b4 	str.w	lr, [sp, #692]	; 0x2b4
   13810:	466c      	mov	r4, sp
   13812:	2503      	movs	r5, #3
   13814:	6025      	str	r5, [r4, #0]
   13816:	a8a2      	add	r0, sp, #648	; 0x288
   13818:	aba8      	add	r3, sp, #672	; 0x2a0
   1381a:	994d      	ldr	r1, [sp, #308]	; 0x134
   1381c:	462a      	mov	r2, r5
   1381e:	f7fb fcf8 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13822:	e7ff      	b.n	13824 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x38e>
   13824:	f64f 0040 	movw	r0, #63552	; 0xf840
   13828:	f2c0 0001 	movt	r0, #1
   1382c:	f003 f933 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13830:	9044      	str	r0, [sp, #272]	; 0x110
   13832:	e7ff      	b.n	13834 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x39e>
   13834:	a8a2      	add	r0, sp, #648	; 0x288
   13836:	9944      	ldr	r1, [sp, #272]	; 0x110
   13838:	f003 f96a 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1383c:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1383e:	f24f 7058 	movw	r0, #63320	; 0xf758
   13842:	f2c0 0001 	movt	r0, #1
   13846:	6800      	ldr	r0, [r0, #0]
   13848:	a9b9      	add	r1, sp, #740	; 0x2e4
   1384a:	91ba      	str	r1, [sp, #744]	; 0x2e8
   1384c:	90bb      	str	r0, [sp, #748]	; 0x2ec
   1384e:	98ba      	ldr	r0, [sp, #744]	; 0x2e8
   13850:	f8cd 0540 	str.w	r0, [sp, #1344]	; 0x540
   13854:	99bb      	ldr	r1, [sp, #748]	; 0x2ec
   13856:	f8cd 1544 	str.w	r1, [sp, #1348]	; 0x544
   1385a:	6802      	ldr	r2, [r0, #0]
   1385c:	680b      	ldr	r3, [r1, #0]
   1385e:	429a      	cmp	r2, r3
   13860:	9043      	str	r0, [sp, #268]	; 0x10c
   13862:	9142      	str	r1, [sp, #264]	; 0x108
   13864:	d106      	bne.n	13874 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3de>
   13866:	e7ff      	b.n	13868 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x3d2>
   13868:	2012      	movs	r0, #18
   1386a:	2101      	movs	r1, #1
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   1386c:	f005 fa6c 	bl	18d48 <hal_gpio_init_out>
   13870:	90d3      	str	r0, [sp, #844]	; 0x34c
   13872:	e075      	b.n	13960 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4ca>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_SS_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13874:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13878:	f2c0 0001 	movt	r0, #1
   1387c:	6801      	ldr	r1, [r0, #0]
   1387e:	9843      	ldr	r0, [sp, #268]	; 0x10c
   13880:	90cb      	str	r0, [sp, #812]	; 0x32c
   13882:	9a42      	ldr	r2, [sp, #264]	; 0x108
   13884:	92cc      	str	r2, [sp, #816]	; 0x330
   13886:	f64f 0364 	movw	r3, #63588	; 0xf864
   1388a:	f2c0 0301 	movt	r3, #1
   1388e:	681b      	ldr	r3, [r3, #0]
   13890:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13894:	f2c0 0c01 	movt	ip, #1
   13898:	f8dc c000 	ldr.w	ip, [ip]
   1389c:	46ee      	mov	lr, sp
   1389e:	2400      	movs	r4, #0
   138a0:	f8ce 4000 	str.w	r4, [lr]
   138a4:	a8cd      	add	r0, sp, #820	; 0x334
   138a6:	2201      	movs	r2, #1
   138a8:	9141      	str	r1, [sp, #260]	; 0x104
   138aa:	4619      	mov	r1, r3
   138ac:	4663      	mov	r3, ip
   138ae:	f7fb fcb0 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   138b2:	e7ff      	b.n	138b4 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x41e>
   138b4:	a8cb      	add	r0, sp, #812	; 0x32c
   138b6:	90c8      	str	r0, [sp, #800]	; 0x320
   138b8:	a8cc      	add	r0, sp, #816	; 0x330
   138ba:	90c9      	str	r0, [sp, #804]	; 0x324
   138bc:	a8cd      	add	r0, sp, #820	; 0x334
   138be:	90ca      	str	r0, [sp, #808]	; 0x328
   138c0:	98c8      	ldr	r0, [sp, #800]	; 0x320
   138c2:	f8cd 0548 	str.w	r0, [sp, #1352]	; 0x548
   138c6:	99c9      	ldr	r1, [sp, #804]	; 0x324
   138c8:	f8cd 154c 	str.w	r1, [sp, #1356]	; 0x54c
   138cc:	9aca      	ldr	r2, [sp, #808]	; 0x328
   138ce:	f8cd 2550 	str.w	r2, [sp, #1360]	; 0x550
   138d2:	f64f 739f 	movw	r3, #65439	; 0xff9f
   138d6:	f2c0 0300 	movt	r3, #0
   138da:	9140      	str	r1, [sp, #256]	; 0x100
   138dc:	4619      	mov	r1, r3
   138de:	923f      	str	r2, [sp, #252]	; 0xfc
   138e0:	f7fc fb95 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   138e4:	903e      	str	r0, [sp, #248]	; 0xf8
   138e6:	913d      	str	r1, [sp, #244]	; 0xf4
   138e8:	e7ff      	b.n	138ea <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x454>
   138ea:	f64f 719f 	movw	r1, #65439	; 0xff9f
   138ee:	f2c0 0100 	movt	r1, #0
   138f2:	9840      	ldr	r0, [sp, #256]	; 0x100
   138f4:	f7fc fb8b 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   138f8:	903c      	str	r0, [sp, #240]	; 0xf0
   138fa:	913b      	str	r1, [sp, #236]	; 0xec
   138fc:	e7ff      	b.n	138fe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x468>
   138fe:	f247 0173 	movw	r1, #28787	; 0x7073
   13902:	f2c0 0101 	movt	r1, #1
   13906:	983f      	ldr	r0, [sp, #252]	; 0xfc
   13908:	f7fc fbc0 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1390c:	903a      	str	r0, [sp, #232]	; 0xe8
   1390e:	9139      	str	r1, [sp, #228]	; 0xe4
   13910:	e7ff      	b.n	13912 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x47c>
   13912:	983e      	ldr	r0, [sp, #248]	; 0xf8
   13914:	90c2      	str	r0, [sp, #776]	; 0x308
   13916:	993d      	ldr	r1, [sp, #244]	; 0xf4
   13918:	91c3      	str	r1, [sp, #780]	; 0x30c
   1391a:	9a3c      	ldr	r2, [sp, #240]	; 0xf0
   1391c:	92c4      	str	r2, [sp, #784]	; 0x310
   1391e:	9b3b      	ldr	r3, [sp, #236]	; 0xec
   13920:	93c5      	str	r3, [sp, #788]	; 0x314
   13922:	f8dd c0e8 	ldr.w	ip, [sp, #232]	; 0xe8
   13926:	f8cd c318 	str.w	ip, [sp, #792]	; 0x318
   1392a:	f8dd e0e4 	ldr.w	lr, [sp, #228]	; 0xe4
   1392e:	f8cd e31c 	str.w	lr, [sp, #796]	; 0x31c
   13932:	466c      	mov	r4, sp
   13934:	2503      	movs	r5, #3
   13936:	6025      	str	r5, [r4, #0]
   13938:	a8bc      	add	r0, sp, #752	; 0x2f0
   1393a:	abc2      	add	r3, sp, #776	; 0x308
   1393c:	9941      	ldr	r1, [sp, #260]	; 0x104
   1393e:	462a      	mov	r2, r5
   13940:	f7fb fc67 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13944:	e7ff      	b.n	13946 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4b0>
   13946:	f64f 0068 	movw	r0, #63592	; 0xf868
   1394a:	f2c0 0001 	movt	r0, #1
   1394e:	f003 f8a2 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13952:	9038      	str	r0, [sp, #224]	; 0xe0
   13954:	e7ff      	b.n	13956 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4c0>
   13956:	a8bc      	add	r0, sp, #752	; 0x2f0
   13958:	9938      	ldr	r1, [sp, #224]	; 0xe0
   1395a:	f003 f8d9 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1395e:	defe      	udf	#254	; 0xfe
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13960:	f24f 7058 	movw	r0, #63320	; 0xf758
   13964:	f2c0 0001 	movt	r0, #1
   13968:	6800      	ldr	r0, [r0, #0]
   1396a:	a9d3      	add	r1, sp, #844	; 0x34c
   1396c:	91d4      	str	r1, [sp, #848]	; 0x350
   1396e:	90d5      	str	r0, [sp, #852]	; 0x354
   13970:	98d4      	ldr	r0, [sp, #848]	; 0x350
   13972:	f8cd 0554 	str.w	r0, [sp, #1364]	; 0x554
   13976:	99d5      	ldr	r1, [sp, #852]	; 0x354
   13978:	f8cd 1558 	str.w	r1, [sp, #1368]	; 0x558
   1397c:	6802      	ldr	r2, [r0, #0]
   1397e:	680b      	ldr	r3, [r1, #0]
   13980:	429a      	cmp	r2, r3
   13982:	9037      	str	r0, [sp, #220]	; 0xdc
   13984:	9136      	str	r1, [sp, #216]	; 0xd8
   13986:	d107      	bne.n	13998 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x502>
   13988:	e7ff      	b.n	1398a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x4f4>

    //  Create Event Queue and Mbuf (Data) Queue that will store the SPI requests
    unsafe { os::os_eventq_init(&mut SPI_EVENT_QUEUE) };
   1398a:	f244 20a4 	movw	r0, #17060	; 0x42a4
   1398e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13992:	f006 fae3 	bl	19f5c <os_eventq_init>
   13996:	e075      	b.n	13a84 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5ee>
    let rc = unsafe { hal::hal_gpio_init_out(SPI_DC_PIN, 1) }; assert_eq!(rc, 0, "gpio fail");  //  TODO: Map to MynewtResult
   13998:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   1399c:	f2c0 0001 	movt	r0, #1
   139a0:	6801      	ldr	r1, [r0, #0]
   139a2:	9837      	ldr	r0, [sp, #220]	; 0xdc
   139a4:	90e5      	str	r0, [sp, #916]	; 0x394
   139a6:	9a36      	ldr	r2, [sp, #216]	; 0xd8
   139a8:	92e6      	str	r2, [sp, #920]	; 0x398
   139aa:	f64f 0364 	movw	r3, #63588	; 0xf864
   139ae:	f2c0 0301 	movt	r3, #1
   139b2:	681b      	ldr	r3, [r3, #0]
   139b4:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   139b8:	f2c0 0c01 	movt	ip, #1
   139bc:	f8dc c000 	ldr.w	ip, [ip]
   139c0:	46ee      	mov	lr, sp
   139c2:	2400      	movs	r4, #0
   139c4:	f8ce 4000 	str.w	r4, [lr]
   139c8:	a8e7      	add	r0, sp, #924	; 0x39c
   139ca:	2201      	movs	r2, #1
   139cc:	9135      	str	r1, [sp, #212]	; 0xd4
   139ce:	4619      	mov	r1, r3
   139d0:	4663      	mov	r3, ip
   139d2:	f7fb fc1e 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   139d6:	e7ff      	b.n	139d8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x542>
   139d8:	a8e5      	add	r0, sp, #916	; 0x394
   139da:	90e2      	str	r0, [sp, #904]	; 0x388
   139dc:	a8e6      	add	r0, sp, #920	; 0x398
   139de:	90e3      	str	r0, [sp, #908]	; 0x38c
   139e0:	a8e7      	add	r0, sp, #924	; 0x39c
   139e2:	90e4      	str	r0, [sp, #912]	; 0x390
   139e4:	98e2      	ldr	r0, [sp, #904]	; 0x388
   139e6:	f8cd 055c 	str.w	r0, [sp, #1372]	; 0x55c
   139ea:	99e3      	ldr	r1, [sp, #908]	; 0x38c
   139ec:	f8cd 1560 	str.w	r1, [sp, #1376]	; 0x560
   139f0:	9ae4      	ldr	r2, [sp, #912]	; 0x390
   139f2:	f8cd 2564 	str.w	r2, [sp, #1380]	; 0x564
   139f6:	f64f 739f 	movw	r3, #65439	; 0xff9f
   139fa:	f2c0 0300 	movt	r3, #0
   139fe:	9134      	str	r1, [sp, #208]	; 0xd0
   13a00:	4619      	mov	r1, r3
   13a02:	9233      	str	r2, [sp, #204]	; 0xcc
   13a04:	f7fc fb03 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a08:	9032      	str	r0, [sp, #200]	; 0xc8
   13a0a:	9131      	str	r1, [sp, #196]	; 0xc4
   13a0c:	e7ff      	b.n	13a0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x578>
   13a0e:	f64f 719f 	movw	r1, #65439	; 0xff9f
   13a12:	f2c0 0100 	movt	r1, #0
   13a16:	9834      	ldr	r0, [sp, #208]	; 0xd0
   13a18:	f7fc faf9 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13a1c:	9030      	str	r0, [sp, #192]	; 0xc0
   13a1e:	912f      	str	r1, [sp, #188]	; 0xbc
   13a20:	e7ff      	b.n	13a22 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x58c>
   13a22:	f247 0173 	movw	r1, #28787	; 0x7073
   13a26:	f2c0 0101 	movt	r1, #1
   13a2a:	9833      	ldr	r0, [sp, #204]	; 0xcc
   13a2c:	f7fc fb2e 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13a30:	902e      	str	r0, [sp, #184]	; 0xb8
   13a32:	912d      	str	r1, [sp, #180]	; 0xb4
   13a34:	e7ff      	b.n	13a36 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5a0>
   13a36:	9832      	ldr	r0, [sp, #200]	; 0xc8
   13a38:	90dc      	str	r0, [sp, #880]	; 0x370
   13a3a:	9931      	ldr	r1, [sp, #196]	; 0xc4
   13a3c:	91dd      	str	r1, [sp, #884]	; 0x374
   13a3e:	9a30      	ldr	r2, [sp, #192]	; 0xc0
   13a40:	92de      	str	r2, [sp, #888]	; 0x378
   13a42:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   13a44:	93df      	str	r3, [sp, #892]	; 0x37c
   13a46:	f8dd c0b8 	ldr.w	ip, [sp, #184]	; 0xb8
   13a4a:	f8cd c380 	str.w	ip, [sp, #896]	; 0x380
   13a4e:	f8dd e0b4 	ldr.w	lr, [sp, #180]	; 0xb4
   13a52:	f8cd e384 	str.w	lr, [sp, #900]	; 0x384
   13a56:	466c      	mov	r4, sp
   13a58:	2503      	movs	r5, #3
   13a5a:	6025      	str	r5, [r4, #0]
   13a5c:	a8d6      	add	r0, sp, #856	; 0x358
   13a5e:	abdc      	add	r3, sp, #880	; 0x370
   13a60:	9935      	ldr	r1, [sp, #212]	; 0xd4
   13a62:	462a      	mov	r2, r5
   13a64:	f7fb fbd5 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13a68:	e7ff      	b.n	13a6a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5d4>
   13a6a:	f64f 0078 	movw	r0, #63608	; 0xf878
   13a6e:	f2c0 0001 	movt	r0, #1
   13a72:	f003 f810 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13a76:	902c      	str	r0, [sp, #176]	; 0xb0
   13a78:	e7ff      	b.n	13a7a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x5e4>
   13a7a:	a8d6      	add	r0, sp, #856	; 0x358
   13a7c:	992c      	ldr	r1, [sp, #176]	; 0xb0
   13a7e:	f003 f847 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13a82:	defe      	udf	#254	; 0xfe
    let rc = unsafe { os::os_mqueue_init(
        &mut SPI_DATA_QUEUE, 
        Some(spi_event_callback), 
   13a84:	f244 308f 	movw	r0, #17295	; 0x438f
   13a88:	f2c0 0001 	movt	r0, #1
   13a8c:	90ee      	str	r0, [sp, #952]	; 0x3b8
    let rc = unsafe { os::os_mqueue_init(
   13a8e:	99ee      	ldr	r1, [sp, #952]	; 0x3b8
   13a90:	f244 208c 	movw	r0, #17036	; 0x428c
   13a94:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13a98:	2200      	movs	r2, #0
   13a9a:	f006 fb0d 	bl	1a0b8 <os_mqueue_init>
   13a9e:	90ed      	str	r0, [sp, #948]	; 0x3b4
   13aa0:	e7ff      	b.n	13aa2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x60c>
        NULL
    ) };
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13aa2:	f24f 7058 	movw	r0, #63320	; 0xf758
   13aa6:	f2c0 0001 	movt	r0, #1
   13aaa:	6800      	ldr	r0, [r0, #0]
   13aac:	a9ed      	add	r1, sp, #948	; 0x3b4
   13aae:	91ef      	str	r1, [sp, #956]	; 0x3bc
   13ab0:	90f0      	str	r0, [sp, #960]	; 0x3c0
   13ab2:	98ef      	ldr	r0, [sp, #956]	; 0x3bc
   13ab4:	f8cd 0568 	str.w	r0, [sp, #1384]	; 0x568
   13ab8:	99f0      	ldr	r1, [sp, #960]	; 0x3c0
   13aba:	f8cd 156c 	str.w	r1, [sp, #1388]	; 0x56c
   13abe:	6802      	ldr	r2, [r0, #0]
   13ac0:	680b      	ldr	r3, [r1, #0]
   13ac2:	429a      	cmp	r2, r3
   13ac4:	902b      	str	r0, [sp, #172]	; 0xac
   13ac6:	912a      	str	r1, [sp, #168]	; 0xa8
   13ac8:	d10a      	bne.n	13ae0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x64a>
   13aca:	e7ff      	b.n	13acc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x636>

    //  Create the Semaphore that will signal whether the SPI request has completed
    let rc = unsafe { os::os_sem_init(&mut SPI_SEM, 0) };  //  Init to 0 tokens, so caller will block until SPI request is completed.
   13acc:	f244 207c 	movw	r0, #17020	; 0x427c
   13ad0:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13ad4:	2100      	movs	r1, #0
   13ad6:	f006 ffe9 	bl	1aaac <os_sem_init>
   13ada:	f8cd 0420 	str.w	r0, [sp, #1056]	; 0x420
   13ade:	e07b      	b.n	13bd8 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x742>
    assert_eq!(rc, 0, "mqueue fail");  //  TODO: Map to MynewtResult
   13ae0:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13ae4:	f2c0 0001 	movt	r0, #1
   13ae8:	6801      	ldr	r1, [r0, #0]
   13aea:	982b      	ldr	r0, [sp, #172]	; 0xac
   13aec:	f8cd 0400 	str.w	r0, [sp, #1024]	; 0x400
   13af0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   13af2:	f8cd 2404 	str.w	r2, [sp, #1028]	; 0x404
   13af6:	f64f 039c 	movw	r3, #63644	; 0xf89c
   13afa:	f2c0 0301 	movt	r3, #1
   13afe:	681b      	ldr	r3, [r3, #0]
   13b00:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13b04:	f2c0 0c01 	movt	ip, #1
   13b08:	f8dc c000 	ldr.w	ip, [ip]
   13b0c:	46ee      	mov	lr, sp
   13b0e:	2400      	movs	r4, #0
   13b10:	f8ce 4000 	str.w	r4, [lr]
   13b14:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13b18:	2201      	movs	r2, #1
   13b1a:	9129      	str	r1, [sp, #164]	; 0xa4
   13b1c:	4619      	mov	r1, r3
   13b1e:	4663      	mov	r3, ip
   13b20:	f7fb fb77 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13b24:	e7ff      	b.n	13b26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x690>
   13b26:	f50d 6080 	add.w	r0, sp, #1024	; 0x400
   13b2a:	90fd      	str	r0, [sp, #1012]	; 0x3f4
   13b2c:	f20d 4004 	addw	r0, sp, #1028	; 0x404
   13b30:	90fe      	str	r0, [sp, #1016]	; 0x3f8
   13b32:	f50d 6081 	add.w	r0, sp, #1032	; 0x408
   13b36:	90ff      	str	r0, [sp, #1020]	; 0x3fc
   13b38:	98fd      	ldr	r0, [sp, #1012]	; 0x3f4
   13b3a:	f8cd 0570 	str.w	r0, [sp, #1392]	; 0x570
   13b3e:	99fe      	ldr	r1, [sp, #1016]	; 0x3f8
   13b40:	f8cd 1574 	str.w	r1, [sp, #1396]	; 0x574
   13b44:	9aff      	ldr	r2, [sp, #1020]	; 0x3fc
   13b46:	f8cd 2578 	str.w	r2, [sp, #1400]	; 0x578
   13b4a:	f64f 739f 	movw	r3, #65439	; 0xff9f
   13b4e:	f2c0 0300 	movt	r3, #0
   13b52:	9128      	str	r1, [sp, #160]	; 0xa0
   13b54:	4619      	mov	r1, r3
   13b56:	9227      	str	r2, [sp, #156]	; 0x9c
   13b58:	f7fc fa59 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b5c:	9026      	str	r0, [sp, #152]	; 0x98
   13b5e:	9125      	str	r1, [sp, #148]	; 0x94
   13b60:	e7ff      	b.n	13b62 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6cc>
   13b62:	f64f 719f 	movw	r1, #65439	; 0xff9f
   13b66:	f2c0 0100 	movt	r1, #0
   13b6a:	9828      	ldr	r0, [sp, #160]	; 0xa0
   13b6c:	f7fc fa4f 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   13b70:	9024      	str	r0, [sp, #144]	; 0x90
   13b72:	9123      	str	r1, [sp, #140]	; 0x8c
   13b74:	e7ff      	b.n	13b76 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6e0>
   13b76:	f247 0173 	movw	r1, #28787	; 0x7073
   13b7a:	f2c0 0101 	movt	r1, #1
   13b7e:	9827      	ldr	r0, [sp, #156]	; 0x9c
   13b80:	f7fc fa84 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13b84:	9022      	str	r0, [sp, #136]	; 0x88
   13b86:	9121      	str	r1, [sp, #132]	; 0x84
   13b88:	e7ff      	b.n	13b8a <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x6f4>
   13b8a:	9826      	ldr	r0, [sp, #152]	; 0x98
   13b8c:	90f7      	str	r0, [sp, #988]	; 0x3dc
   13b8e:	9925      	ldr	r1, [sp, #148]	; 0x94
   13b90:	91f8      	str	r1, [sp, #992]	; 0x3e0
   13b92:	9a24      	ldr	r2, [sp, #144]	; 0x90
   13b94:	92f9      	str	r2, [sp, #996]	; 0x3e4
   13b96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   13b98:	93fa      	str	r3, [sp, #1000]	; 0x3e8
   13b9a:	f8dd c088 	ldr.w	ip, [sp, #136]	; 0x88
   13b9e:	f8cd c3ec 	str.w	ip, [sp, #1004]	; 0x3ec
   13ba2:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
   13ba6:	f8cd e3f0 	str.w	lr, [sp, #1008]	; 0x3f0
   13baa:	466c      	mov	r4, sp
   13bac:	2503      	movs	r5, #3
   13bae:	6025      	str	r5, [r4, #0]
   13bb0:	a8f1      	add	r0, sp, #964	; 0x3c4
   13bb2:	abf7      	add	r3, sp, #988	; 0x3dc
   13bb4:	9929      	ldr	r1, [sp, #164]	; 0xa4
   13bb6:	462a      	mov	r2, r5
   13bb8:	f7fb fb2b 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13bbc:	e7ff      	b.n	13bbe <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x728>
   13bbe:	f64f 00a0 	movw	r0, #63648	; 0xf8a0
   13bc2:	f2c0 0001 	movt	r0, #1
   13bc6:	f002 ff66 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13bca:	9020      	str	r0, [sp, #128]	; 0x80
   13bcc:	e7ff      	b.n	13bce <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x738>
   13bce:	a8f1      	add	r0, sp, #964	; 0x3c4
   13bd0:	9920      	ldr	r1, [sp, #128]	; 0x80
   13bd2:	f002 ff9d 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13bd6:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13bd8:	f24f 7058 	movw	r0, #63320	; 0xf758
   13bdc:	f2c0 0001 	movt	r0, #1
   13be0:	6800      	ldr	r0, [r0, #0]
   13be2:	f50d 6184 	add.w	r1, sp, #1056	; 0x420
   13be6:	f8cd 1424 	str.w	r1, [sp, #1060]	; 0x424
   13bea:	f8cd 0428 	str.w	r0, [sp, #1064]	; 0x428
   13bee:	f8dd 0424 	ldr.w	r0, [sp, #1060]	; 0x424
   13bf2:	f8cd 057c 	str.w	r0, [sp, #1404]	; 0x57c
   13bf6:	f8dd 1428 	ldr.w	r1, [sp, #1064]	; 0x428
   13bfa:	f8cd 1580 	str.w	r1, [sp, #1408]	; 0x580
   13bfe:	6802      	ldr	r2, [r0, #0]
   13c00:	680b      	ldr	r3, [r1, #0]
   13c02:	429a      	cmp	r2, r3
   13c04:	901f      	str	r0, [sp, #124]	; 0x7c
   13c06:	911e      	str	r1, [sp, #120]	; 0x78
   13c08:	d10a      	bne.n	13c20 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x78a>
   13c0a:	e7ff      	b.n	13c0c <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x776>

    //  Create the Semaphore that will throttle the number of queued SPI requests
    let rc = unsafe { os::os_sem_init(&mut SPI_THROTTLE_SEM, 2) };  //  Only max 2 requests queued, the next request will block
   13c0c:	f244 2084 	movw	r0, #17028	; 0x4284
   13c10:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13c14:	2102      	movs	r1, #2
   13c16:	f006 ff49 	bl	1aaac <os_sem_init>
   13c1a:	f8cd 0488 	str.w	r0, [sp, #1160]	; 0x488
   13c1e:	e088      	b.n	13d32 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x89c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13c20:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13c24:	f2c0 0001 	movt	r0, #1
   13c28:	6801      	ldr	r1, [r0, #0]
   13c2a:	981f      	ldr	r0, [sp, #124]	; 0x7c
   13c2c:	f8cd 0468 	str.w	r0, [sp, #1128]	; 0x468
   13c30:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   13c32:	f8cd 246c 	str.w	r2, [sp, #1132]	; 0x46c
   13c36:	f64f 03c8 	movw	r3, #63688	; 0xf8c8
   13c3a:	f2c0 0301 	movt	r3, #1
   13c3e:	681b      	ldr	r3, [r3, #0]
   13c40:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13c44:	f2c0 0c01 	movt	ip, #1
   13c48:	f8dc c000 	ldr.w	ip, [ip]
   13c4c:	46ee      	mov	lr, sp
   13c4e:	2400      	movs	r4, #0
   13c50:	f8ce 4000 	str.w	r4, [lr]
   13c54:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13c58:	2201      	movs	r2, #1
   13c5a:	911d      	str	r1, [sp, #116]	; 0x74
   13c5c:	4619      	mov	r1, r3
   13c5e:	4663      	mov	r3, ip
   13c60:	f7fb fad7 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13c64:	e7ff      	b.n	13c66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x7d0>
   13c66:	f50d 608d 	add.w	r0, sp, #1128	; 0x468
   13c6a:	f8cd 045c 	str.w	r0, [sp, #1116]	; 0x45c
   13c6e:	f20d 406c 	addw	r0, sp, #1132	; 0x46c
   13c72:	f8cd 0460 	str.w	r0, [sp, #1120]	; 0x460
   13c76:	f50d 608e 	add.w	r0, sp, #1136	; 0x470
   13c7a:	f8cd 0464 	str.w	r0, [sp, #1124]	; 0x464
   13c7e:	f8dd 045c 	ldr.w	r0, [sp, #1116]	; 0x45c
   13c82:	f8cd 0584 	str.w	r0, [sp, #1412]	; 0x584
   13c86:	f8dd 1460 	ldr.w	r1, [sp, #1120]	; 0x460
   13c8a:	f8cd 1588 	str.w	r1, [sp, #1416]	; 0x588
   13c8e:	f8dd 2464 	ldr.w	r2, [sp, #1124]	; 0x464
   13c92:	f8cd 258c 	str.w	r2, [sp, #1420]	; 0x58c
   13c96:	f64f 73f3 	movw	r3, #65523	; 0xfff3
   13c9a:	f2c0 0300 	movt	r3, #0
   13c9e:	911c      	str	r1, [sp, #112]	; 0x70
   13ca0:	4619      	mov	r1, r3
   13ca2:	921b      	str	r2, [sp, #108]	; 0x6c
   13ca4:	f7fc f9dd 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13ca8:	901a      	str	r0, [sp, #104]	; 0x68
   13caa:	9119      	str	r1, [sp, #100]	; 0x64
   13cac:	e7ff      	b.n	13cae <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x818>
   13cae:	f64f 71f3 	movw	r1, #65523	; 0xfff3
   13cb2:	f2c0 0100 	movt	r1, #0
   13cb6:	981c      	ldr	r0, [sp, #112]	; 0x70
   13cb8:	f7fc f9d3 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13cbc:	9018      	str	r0, [sp, #96]	; 0x60
   13cbe:	9117      	str	r1, [sp, #92]	; 0x5c
   13cc0:	e7ff      	b.n	13cc2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x82c>
   13cc2:	f247 0173 	movw	r1, #28787	; 0x7073
   13cc6:	f2c0 0101 	movt	r1, #1
   13cca:	981b      	ldr	r0, [sp, #108]	; 0x6c
   13ccc:	f7fc f9de 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13cd0:	9016      	str	r0, [sp, #88]	; 0x58
   13cd2:	9115      	str	r1, [sp, #84]	; 0x54
   13cd4:	e7ff      	b.n	13cd6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x840>
   13cd6:	981a      	ldr	r0, [sp, #104]	; 0x68
   13cd8:	f8cd 0444 	str.w	r0, [sp, #1092]	; 0x444
   13cdc:	9919      	ldr	r1, [sp, #100]	; 0x64
   13cde:	f8cd 1448 	str.w	r1, [sp, #1096]	; 0x448
   13ce2:	9a18      	ldr	r2, [sp, #96]	; 0x60
   13ce4:	f8cd 244c 	str.w	r2, [sp, #1100]	; 0x44c
   13ce8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   13cea:	f8cd 3450 	str.w	r3, [sp, #1104]	; 0x450
   13cee:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
   13cf2:	f8cd c454 	str.w	ip, [sp, #1108]	; 0x454
   13cf6:	f8dd e054 	ldr.w	lr, [sp, #84]	; 0x54
   13cfa:	f8cd e458 	str.w	lr, [sp, #1112]	; 0x458
   13cfe:	466c      	mov	r4, sp
   13d00:	2503      	movs	r5, #3
   13d02:	6025      	str	r5, [r4, #0]
   13d04:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13d08:	f20d 4344 	addw	r3, sp, #1092	; 0x444
   13d0c:	991d      	ldr	r1, [sp, #116]	; 0x74
   13d0e:	462a      	mov	r2, r5
   13d10:	f7fb fa7f 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13d14:	e7ff      	b.n	13d16 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x880>
   13d16:	f64f 00cc 	movw	r0, #63692	; 0xf8cc
   13d1a:	f2c0 0001 	movt	r0, #1
   13d1e:	f002 feba 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13d22:	9014      	str	r0, [sp, #80]	; 0x50
   13d24:	e7ff      	b.n	13d26 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x890>
   13d26:	f20d 402c 	addw	r0, sp, #1068	; 0x42c
   13d2a:	9914      	ldr	r1, [sp, #80]	; 0x50
   13d2c:	f002 fef0 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13d30:	defe      	udf	#254	; 0xfe
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13d32:	f24f 7058 	movw	r0, #63320	; 0xf758
   13d36:	f2c0 0001 	movt	r0, #1
   13d3a:	6800      	ldr	r0, [r0, #0]
   13d3c:	f50d 6191 	add.w	r1, sp, #1160	; 0x488
   13d40:	f8cd 148c 	str.w	r1, [sp, #1164]	; 0x48c
   13d44:	f8cd 0490 	str.w	r0, [sp, #1168]	; 0x490
   13d48:	f8dd 048c 	ldr.w	r0, [sp, #1164]	; 0x48c
   13d4c:	f8cd 0590 	str.w	r0, [sp, #1424]	; 0x590
   13d50:	f8dd 1490 	ldr.w	r1, [sp, #1168]	; 0x490
   13d54:	f8cd 1594 	str.w	r1, [sp, #1428]	; 0x594
   13d58:	6802      	ldr	r2, [r0, #0]
   13d5a:	680b      	ldr	r3, [r1, #0]
   13d5c:	429a      	cmp	r2, r3
   13d5e:	9013      	str	r0, [sp, #76]	; 0x4c
   13d60:	9112      	str	r1, [sp, #72]	; 0x48
   13d62:	d125      	bne.n	13db0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x91a>
   13d64:	e7ff      	b.n	13d66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x8d0>
    
    //  Create a task to send SPI requests sequentially from the SPI Event Queue and Mbuf Queue
    os::task_init(                //  Create a new task and start it...
        unsafe { &mut SPI_TASK }, //  Task object will be saved here
        &init_strn!( "spi" ),     //  Name of task
   13d66:	f64f 00f8 	movw	r0, #63736	; 0xf8f8
   13d6a:	f2c0 0001 	movt	r0, #1
   13d6e:	6801      	ldr	r1, [r0, #0]
        Some( spi_task_func ),    //  Function to execute when task starts
   13d70:	f643 7011 	movw	r0, #16145	; 0x3f11
   13d74:	f2c0 0001 	movt	r0, #1
   13d78:	f8cd 04f4 	str.w	r0, [sp, #1268]	; 0x4f4
    os::task_init(                //  Create a new task and start it...
   13d7c:	f8dd 24f4 	ldr.w	r2, [sp, #1268]	; 0x4f4
   13d80:	4668      	mov	r0, sp
   13d82:	f44f 7380 	mov.w	r3, #256	; 0x100
   13d86:	6103      	str	r3, [r0, #16]
   13d88:	60c3      	str	r3, [r0, #12]
   13d8a:	f244 3304 	movw	r3, #17156	; 0x4304
   13d8e:	f2c2 0300 	movt	r3, #8192	; 0x2000
   13d92:	6083      	str	r3, [r0, #8]
   13d94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   13d98:	6043      	str	r3, [r0, #4]
   13d9a:	230a      	movs	r3, #10
   13d9c:	6003      	str	r3, [r0, #0]
   13d9e:	f244 20b4 	movw	r0, #17076	; 0x42b4
   13da2:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13da6:	2300      	movs	r3, #0
   13da8:	f7fb fb31 	bl	f40e <_ZN6mynewt6kernel2os9task_init17h460903b2eb6e32b5E>
   13dac:	9011      	str	r0, [sp, #68]	; 0x44
   13dae:	e088      	b.n	13ec2 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa2c>
    assert_eq!(rc, 0, "sem fail");  //  TODO: Map to MynewtResult
   13db0:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   13db4:	f2c0 0001 	movt	r0, #1
   13db8:	6801      	ldr	r1, [r0, #0]
   13dba:	9813      	ldr	r0, [sp, #76]	; 0x4c
   13dbc:	f8cd 04d0 	str.w	r0, [sp, #1232]	; 0x4d0
   13dc0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   13dc2:	f8cd 24d4 	str.w	r2, [sp, #1236]	; 0x4d4
   13dc6:	f64f 03c8 	movw	r3, #63688	; 0xf8c8
   13dca:	f2c0 0301 	movt	r3, #1
   13dce:	681b      	ldr	r3, [r3, #0]
   13dd0:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   13dd4:	f2c0 0c01 	movt	ip, #1
   13dd8:	f8dc c000 	ldr.w	ip, [ip]
   13ddc:	46ee      	mov	lr, sp
   13dde:	2400      	movs	r4, #0
   13de0:	f8ce 4000 	str.w	r4, [lr]
   13de4:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13de8:	2201      	movs	r2, #1
   13dea:	9110      	str	r1, [sp, #64]	; 0x40
   13dec:	4619      	mov	r1, r3
   13dee:	4663      	mov	r3, ip
   13df0:	f7fb fa0f 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13df4:	e7ff      	b.n	13df6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x960>
   13df6:	f50d 609a 	add.w	r0, sp, #1232	; 0x4d0
   13dfa:	f8cd 04c4 	str.w	r0, [sp, #1220]	; 0x4c4
   13dfe:	f20d 40d4 	addw	r0, sp, #1236	; 0x4d4
   13e02:	f8cd 04c8 	str.w	r0, [sp, #1224]	; 0x4c8
   13e06:	f50d 609b 	add.w	r0, sp, #1240	; 0x4d8
   13e0a:	f8cd 04cc 	str.w	r0, [sp, #1228]	; 0x4cc
   13e0e:	f8dd 04c4 	ldr.w	r0, [sp, #1220]	; 0x4c4
   13e12:	f8cd 0598 	str.w	r0, [sp, #1432]	; 0x598
   13e16:	f8dd 14c8 	ldr.w	r1, [sp, #1224]	; 0x4c8
   13e1a:	f8cd 159c 	str.w	r1, [sp, #1436]	; 0x59c
   13e1e:	f8dd 24cc 	ldr.w	r2, [sp, #1228]	; 0x4cc
   13e22:	f8cd 25a0 	str.w	r2, [sp, #1440]	; 0x5a0
   13e26:	f64f 73f3 	movw	r3, #65523	; 0xfff3
   13e2a:	f2c0 0300 	movt	r3, #0
   13e2e:	910f      	str	r1, [sp, #60]	; 0x3c
   13e30:	4619      	mov	r1, r3
   13e32:	920e      	str	r2, [sp, #56]	; 0x38
   13e34:	f7fc f915 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13e38:	900d      	str	r0, [sp, #52]	; 0x34
   13e3a:	910c      	str	r1, [sp, #48]	; 0x30
   13e3c:	e7ff      	b.n	13e3e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9a8>
   13e3e:	f64f 71f3 	movw	r1, #65523	; 0xfff3
   13e42:	f2c0 0100 	movt	r1, #0
   13e46:	980f      	ldr	r0, [sp, #60]	; 0x3c
   13e48:	f7fc f90b 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   13e4c:	900b      	str	r0, [sp, #44]	; 0x2c
   13e4e:	910a      	str	r1, [sp, #40]	; 0x28
   13e50:	e7ff      	b.n	13e52 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9bc>
   13e52:	f247 0173 	movw	r1, #28787	; 0x7073
   13e56:	f2c0 0101 	movt	r1, #1
   13e5a:	980e      	ldr	r0, [sp, #56]	; 0x38
   13e5c:	f7fc f916 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   13e60:	9009      	str	r0, [sp, #36]	; 0x24
   13e62:	9108      	str	r1, [sp, #32]
   13e64:	e7ff      	b.n	13e66 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0x9d0>
   13e66:	980d      	ldr	r0, [sp, #52]	; 0x34
   13e68:	f8cd 04ac 	str.w	r0, [sp, #1196]	; 0x4ac
   13e6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   13e6e:	f8cd 14b0 	str.w	r1, [sp, #1200]	; 0x4b0
   13e72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   13e74:	f8cd 24b4 	str.w	r2, [sp, #1204]	; 0x4b4
   13e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13e7a:	f8cd 34b8 	str.w	r3, [sp, #1208]	; 0x4b8
   13e7e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   13e82:	f8cd c4bc 	str.w	ip, [sp, #1212]	; 0x4bc
   13e86:	f8dd e020 	ldr.w	lr, [sp, #32]
   13e8a:	f8cd e4c0 	str.w	lr, [sp, #1216]	; 0x4c0
   13e8e:	466c      	mov	r4, sp
   13e90:	2503      	movs	r5, #3
   13e92:	6025      	str	r5, [r4, #0]
   13e94:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13e98:	f20d 43ac 	addw	r3, sp, #1196	; 0x4ac
   13e9c:	9910      	ldr	r1, [sp, #64]	; 0x40
   13e9e:	462a      	mov	r2, r5
   13ea0:	f7fb f9b7 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   13ea4:	e7ff      	b.n	13ea6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa10>
   13ea6:	f64f 00dc 	movw	r0, #63708	; 0xf8dc
   13eaa:	f2c0 0001 	movt	r0, #1
   13eae:	f002 fdf2 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   13eb2:	9007      	str	r0, [sp, #28]
   13eb4:	e7ff      	b.n	13eb6 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa20>
   13eb6:	f20d 4094 	addw	r0, sp, #1172	; 0x494
   13eba:	9907      	ldr	r1, [sp, #28]
   13ebc:	f002 fe28 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   13ec0:	defe      	udf	#254	; 0xfe
    os::task_init(                //  Create a new task and start it...
   13ec2:	9811      	ldr	r0, [sp, #68]	; 0x44
   13ec4:	f7fb fa13 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13ec8:	f8cd 04f0 	str.w	r0, [sp, #1264]	; 0x4f0
   13ecc:	e7ff      	b.n	13ece <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa38>
        NULL,  //  Argument to be passed to above function
        10,    //  Task priority: highest is 0, lowest is 255 (main task is 127)
        os::OS_WAIT_FOREVER as u32,     //  Don't do sanity / watchdog checking
        unsafe { &mut SPI_TASK_STACK }, //  Stack space for the task
        SPI_TASK_STACK_SIZE as u16      //  Size of the stack (in 4-byte units)
    ) ? ;                               //  `?` means check for error
   13ece:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13ed2:	1e41      	subs	r1, r0, #1
   13ed4:	bf18      	it	ne
   13ed6:	2101      	movne	r1, #1
   13ed8:	2801      	cmp	r0, #1
   13eda:	d001      	beq.n	13ee0 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa4a>
   13edc:	e7ff      	b.n	13ede <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa48>
   13ede:	e005      	b.n	13eec <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa56>
   13ee0:	2000      	movs	r0, #0
    Ok(())
   13ee2:	9069      	str	r0, [sp, #420]	; 0x1a4
   13ee4:	2001      	movs	r0, #1
   13ee6:	9069      	str	r0, [sp, #420]	; 0x1a4
}
   13ee8:	e008      	b.n	13efc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>
    os::task_init(                //  Create a new task and start it...
   13eea:	defe      	udf	#254	; 0xfe
    ) ? ;                               //  `?` means check for error
   13eec:	f8dd 04f0 	ldr.w	r0, [sp, #1264]	; 0x4f0
   13ef0:	f8cd 05a4 	str.w	r0, [sp, #1444]	; 0x5a4
   13ef4:	f7fb fa6e 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13ef8:	9006      	str	r0, [sp, #24]
   13efa:	e003      	b.n	13f04 <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa6e>
}
   13efc:	9869      	ldr	r0, [sp, #420]	; 0x1a4
   13efe:	f50d 6db5 	add.w	sp, sp, #1448	; 0x5a8
   13f02:	bdb0      	pop	{r4, r5, r7, pc}
    ) ? ;                               //  `?` means check for error
   13f04:	9806      	ldr	r0, [sp, #24]
   13f06:	f7fb f9e6 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13f0a:	9069      	str	r0, [sp, #420]	; 0x1a4
   13f0c:	e7ff      	b.n	13f0e <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa78>
   13f0e:	e7f5      	b.n	13efc <_ZN6mynewt3spi16spi_noblock_init17h7964cfaedeed9d74E+0xa66>

00013f10 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E>:

/// SPI Task Function.  Execute sequentially each SPI request posted to our Event Queue.  When there are no requests to process, block until one arrives.
extern "C" fn spi_task_func(_arg: Ptr) {
   13f10:	b580      	push	{r7, lr}
   13f12:	b082      	sub	sp, #8
   13f14:	9001      	str	r0, [sp, #4]
    loop {
   13f16:	e7ff      	b.n	13f18 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>
        //  Forever read SPI requests and execute them. Will call spi_event_callback().
        os::eventq_run(
   13f18:	f244 20a4 	movw	r0, #17060	; 0x42a4
   13f1c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f20:	f7fb fa5c 	bl	f3dc <_ZN6mynewt6kernel2os10eventq_run17h986d57c277f556feE>
   13f24:	9000      	str	r0, [sp, #0]
   13f26:	e7ff      	b.n	13f28 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x18>
   13f28:	f64f 01fc 	movw	r1, #63740	; 0xf8fc
   13f2c:	f2c0 0101 	movt	r1, #1
   13f30:	f64f 1308 	movw	r3, #63752	; 0xf908
   13f34:	f2c0 0301 	movt	r3, #1
   13f38:	220b      	movs	r2, #11
   13f3a:	9800      	ldr	r0, [sp, #0]
   13f3c:	f7fb f998 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   13f40:	e7ff      	b.n	13f42 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x32>
            unsafe { &mut SPI_EVENT_QUEUE }
        ).expect("eventq fail");

        //  Tickle the watchdog so that the Watchdog Timer doesn't expire. Mynewt assumes the process is hung if we don't tickle the watchdog.
        unsafe { hal_watchdog_tickle() };
   13f42:	f005 fced 	bl	19920 <hal_watchdog_tickle>
   13f46:	e7ff      	b.n	13f48 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x38>
    loop {
   13f48:	e7e6      	b.n	13f18 <_ZN6mynewt3spi13spi_task_func17hb0d95965cb6db407E+0x8>

00013f4a <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E>:
    }
}

/// Set pending request for non-blocking SPI write for Command Byte. Returns without waiting for write to complete.
pub fn spi_noblock_write_command(cmd: u8) -> MynewtResult<()> {
   13f4a:	b580      	push	{r7, lr}
   13f4c:	b08c      	sub	sp, #48	; 0x30
   13f4e:	4601      	mov	r1, r0
   13f50:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    //  If there is a pending Command Byte, enqueue it.
    spi_noblock_write_flush() ? ;
   13f54:	9104      	str	r1, [sp, #16]
   13f56:	f000 f892 	bl	1407e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>
   13f5a:	9003      	str	r0, [sp, #12]
   13f5c:	e7ff      	b.n	13f5e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x14>
   13f5e:	9803      	ldr	r0, [sp, #12]
   13f60:	f7fb f9c5 	bl	f2ee <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17ha15b77dd95ec9865E>
   13f64:	9006      	str	r0, [sp, #24]
   13f66:	e7ff      	b.n	13f68 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x1e>
   13f68:	9806      	ldr	r0, [sp, #24]
   13f6a:	1e41      	subs	r1, r0, #1
   13f6c:	bf18      	it	ne
   13f6e:	2101      	movne	r1, #1
   13f70:	2801      	cmp	r0, #1
   13f72:	d001      	beq.n	13f78 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2e>
   13f74:	e7ff      	b.n	13f76 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x2c>
   13f76:	e00c      	b.n	13f92 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x48>
    //  Set the pending Command Byte.
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13f78:	f643 2070 	movw	r0, #14960	; 0x3a70
   13f7c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   13f80:	9904      	ldr	r1, [sp, #16]
   13f82:	f7ff f9b2 	bl	132ea <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17hf99b4b9aabbc32b3E>
   13f86:	f88d 101d 	strb.w	r1, [sp, #29]
   13f8a:	f88d 001c 	strb.w	r0, [sp, #28]
   13f8e:	e00f      	b.n	13fb0 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x66>
    spi_noblock_write_flush() ? ;
   13f90:	defe      	udf	#254	; 0xfe
   13f92:	9806      	ldr	r0, [sp, #24]
   13f94:	900b      	str	r0, [sp, #44]	; 0x2c
   13f96:	f7fb fa1d 	bl	f3d4 <_ZN50_$LT$T$u20$as$u20$core..convert..From$LT$T$GT$$GT$4from17hdbf2c8a9ee313977E>
   13f9a:	9002      	str	r0, [sp, #8]
   13f9c:	e002      	b.n	13fa4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x5a>
        return Err(MynewtError::SYS_EINVAL);
    }
    Ok(())
}
   13f9e:	9805      	ldr	r0, [sp, #20]
   13fa0:	b00c      	add	sp, #48	; 0x30
   13fa2:	bd80      	pop	{r7, pc}
    spi_noblock_write_flush() ? ;
   13fa4:	9802      	ldr	r0, [sp, #8]
   13fa6:	f7fb f996 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   13faa:	9005      	str	r0, [sp, #20]
   13fac:	e7ff      	b.n	13fae <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x64>
   13fae:	e7f6      	b.n	13f9e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13fb0:	a807      	add	r0, sp, #28
    if unsafe { PENDING_CMD.push(cmd).is_err() } {
   13fb2:	f7fb f984 	bl	f2be <_ZN4core6result19Result$LT$T$C$E$GT$6is_err17h8687115d4d068098E>
   13fb6:	9001      	str	r0, [sp, #4]
   13fb8:	e7ff      	b.n	13fba <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x70>
   13fba:	9801      	ldr	r0, [sp, #4]
   13fbc:	07c1      	lsls	r1, r0, #31
   13fbe:	2900      	cmp	r1, #0
   13fc0:	d105      	bne.n	13fce <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x84>
   13fc2:	e7ff      	b.n	13fc4 <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x7a>
   13fc4:	2000      	movs	r0, #0
    Ok(())
   13fc6:	9005      	str	r0, [sp, #20]
   13fc8:	2001      	movs	r0, #1
   13fca:	9005      	str	r0, [sp, #20]
}
   13fcc:	e7e7      	b.n	13f9e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>
   13fce:	f06f 0001 	mvn.w	r0, #1
        return Err(MynewtError::SYS_EINVAL);
   13fd2:	9008      	str	r0, [sp, #32]
   13fd4:	9808      	ldr	r0, [sp, #32]
   13fd6:	9005      	str	r0, [sp, #20]
   13fd8:	e7e1      	b.n	13f9e <_ZN6mynewt3spi25spi_noblock_write_command17h60d3de2c33986ba3E+0x54>

00013fda <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE>:

/// Set pending request for non-blocking SPI write for Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_data(data: &[u8]) -> MynewtResult<()> {
   13fda:	b580      	push	{r7, lr}
   13fdc:	b08e      	sub	sp, #56	; 0x38
   13fde:	900a      	str	r0, [sp, #40]	; 0x28
   13fe0:	910b      	str	r1, [sp, #44]	; 0x2c
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   13fe2:	f643 2270 	movw	r2, #14960	; 0x3a70
   13fe6:	f2c2 0200 	movt	r2, #8192	; 0x2000
   13fea:	9007      	str	r0, [sp, #28]
   13fec:	4610      	mov	r0, r2
   13fee:	9106      	str	r1, [sp, #24]
   13ff0:	f7ff f961 	bl	132b6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   13ff4:	9005      	str	r0, [sp, #20]
   13ff6:	9104      	str	r1, [sp, #16]
   13ff8:	e7ff      	b.n	13ffa <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x20>
   13ffa:	9805      	ldr	r0, [sp, #20]
   13ffc:	9904      	ldr	r1, [sp, #16]
   13ffe:	f7fa fcab 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   14002:	9003      	str	r0, [sp, #12]
   14004:	e7ff      	b.n	14006 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x2c>
   14006:	9803      	ldr	r0, [sp, #12]
   14008:	2800      	cmp	r0, #0
   1400a:	d00a      	beq.n	14022 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x48>
   1400c:	e7ff      	b.n	1400e <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x34>
    //  Append Data Bytes to Pending Data Bytes.
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1400e:	f643 2078 	movw	r0, #14968	; 0x3a78
   14012:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14016:	9907      	ldr	r1, [sp, #28]
   14018:	9a06      	ldr	r2, [sp, #24]
   1401a:	f7ff f958 	bl	132ce <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h5310f2928696ef27E>
   1401e:	9002      	str	r0, [sp, #8]
   14020:	e00b      	b.n	1403a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x60>
    assert!(unsafe { PENDING_CMD.len() } > 0);  //  Must have Command Byte before Data Bytes
   14022:	f64f 1018 	movw	r0, #63768	; 0xf918
   14026:	f2c0 0001 	movt	r0, #1
   1402a:	f64f 124c 	movw	r2, #63820	; 0xf94c
   1402e:	f2c0 0201 	movt	r2, #1
   14032:	2132      	movs	r1, #50	; 0x32
   14034:	f002 fd36 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14038:	defe      	udf	#254	; 0xfe
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   1403a:	9802      	ldr	r0, [sp, #8]
   1403c:	f000 0001 	and.w	r0, r0, #1
   14040:	f7fb f94f 	bl	f2e2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$11into_result17h7ee176cd86d4663fE>
   14044:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
   14048:	e7ff      	b.n	1404a <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x70>
   1404a:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   1404e:	07c1      	lsls	r1, r0, #31
   14050:	2900      	cmp	r1, #0
   14052:	d001      	beq.n	14058 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7e>
   14054:	e7ff      	b.n	14056 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x7c>
   14056:	e005      	b.n	14064 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x8a>
   14058:	2000      	movs	r0, #0
    Ok(())
   1405a:	9008      	str	r0, [sp, #32]
   1405c:	2001      	movs	r0, #1
   1405e:	9008      	str	r0, [sp, #32]
}
   14060:	e004      	b.n	1406c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14062:	defe      	udf	#254	; 0xfe
   14064:	f7ff f905 	bl	13272 <_ZN83_$LT$mynewt..result..MynewtError$u20$as$u20$core..convert..From$LT$$LP$$RP$$GT$$GT$4from17h608a6da5814220deE>
   14068:	9001      	str	r0, [sp, #4]
   1406a:	e002      	b.n	14072 <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x98>
}
   1406c:	9808      	ldr	r0, [sp, #32]
   1406e:	b00e      	add	sp, #56	; 0x38
   14070:	bd80      	pop	{r7, pc}
    unsafe { PENDING_DATA.extend_from_slice(data) } ? ;
   14072:	9801      	ldr	r0, [sp, #4]
   14074:	f7fb f92f 	bl	f2d6 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17h898f780b3d51a84dE>
   14078:	9008      	str	r0, [sp, #32]
   1407a:	e7ff      	b.n	1407c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0xa2>
   1407c:	e7f6      	b.n	1406c <_ZN6mynewt3spi22spi_noblock_write_data17hd76aa1996353d1eeE+0x92>

0001407e <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E>:

/// Enqueue any pending request for non-blocking SPI write for Command Byte and Data Bytes. Returns without waiting for write to complete.
pub fn spi_noblock_write_flush() -> MynewtResult<()> {
   1407e:	b580      	push	{r7, lr}
   14080:	b090      	sub	sp, #64	; 0x40
    //  If no pending request, quit.
    if unsafe { PENDING_CMD.len() } == 0 &&
   14082:	f643 2070 	movw	r0, #14960	; 0x3a70
   14086:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1408a:	f7ff f914 	bl	132b6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   1408e:	900b      	str	r0, [sp, #44]	; 0x2c
   14090:	910a      	str	r1, [sp, #40]	; 0x28
   14092:	e016      	b.n	140c2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x44>
   14094:	2001      	movs	r0, #1
   14096:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   1409a:	e00c      	b.n	140b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
   1409c:	2000      	movs	r0, #0
   1409e:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
   140a2:	e008      	b.n	140b6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x38>
        unsafe { PENDING_DATA.len() } == 0 {
   140a4:	f643 2078 	movw	r0, #14968	; 0x3a78
   140a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140ac:	f7ff f8f7 	bl	1329e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   140b0:	9009      	str	r0, [sp, #36]	; 0x24
   140b2:	9108      	str	r1, [sp, #32]
   140b4:	e00f      	b.n	140d6 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x58>
    if unsafe { PENDING_CMD.len() } == 0 &&
   140b6:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   140ba:	07c0      	lsls	r0, r0, #31
   140bc:	2800      	cmp	r0, #0
   140be:	d11d      	bne.n	140fc <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x7e>
   140c0:	e013      	b.n	140ea <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x6c>
   140c2:	980b      	ldr	r0, [sp, #44]	; 0x2c
   140c4:	990a      	ldr	r1, [sp, #40]	; 0x28
   140c6:	f7fa fc47 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140ca:	9007      	str	r0, [sp, #28]
   140cc:	e7ff      	b.n	140ce <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x50>
   140ce:	9807      	ldr	r0, [sp, #28]
   140d0:	2800      	cmp	r0, #0
   140d2:	d0e7      	beq.n	140a4 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x26>
   140d4:	e7e2      	b.n	1409c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        unsafe { PENDING_DATA.len() } == 0 {
   140d6:	9809      	ldr	r0, [sp, #36]	; 0x24
   140d8:	9908      	ldr	r1, [sp, #32]
   140da:	f7fa fc3d 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   140de:	9006      	str	r0, [sp, #24]
   140e0:	e7ff      	b.n	140e2 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x64>
    if unsafe { PENDING_CMD.len() } == 0 &&
   140e2:	9806      	ldr	r0, [sp, #24]
   140e4:	2800      	cmp	r0, #0
   140e6:	d0d5      	beq.n	14094 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x16>
   140e8:	e7d8      	b.n	1409c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x1e>
        return Ok(());
    }
    //  Enqueue the pending SPI request into the Mbuf Queue
    if let Err(e) = spi_noblock_write(
        unsafe { PENDING_CMD[0] },  //  Command Byte
   140ea:	f643 2070 	movw	r0, #14960	; 0x3a70
   140ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
   140f2:	f7ff f8e0 	bl	132b6 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hcb7d30591624cc2cE>
   140f6:	9005      	str	r0, [sp, #20]
   140f8:	9104      	str	r1, [sp, #16]
   140fa:	e007      	b.n	1410c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x8e>
   140fc:	2000      	movs	r0, #0
        return Ok(());
   140fe:	900c      	str	r0, [sp, #48]	; 0x30
   14100:	2001      	movs	r0, #1
   14102:	900c      	str	r0, [sp, #48]	; 0x30
   14104:	e7ff      	b.n	14106 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    }
    //  Else clear the pending request and return Ok.
    unsafe { PENDING_CMD.clear() };
    unsafe { PENDING_DATA.clear() };
    Ok(())
}
   14106:	980c      	ldr	r0, [sp, #48]	; 0x30
   14108:	b010      	add	sp, #64	; 0x40
   1410a:	bd80      	pop	{r7, pc}
        unsafe { PENDING_CMD[0] },  //  Command Byte
   1410c:	9804      	ldr	r0, [sp, #16]
   1410e:	2800      	cmp	r0, #0
   14110:	d03f      	beq.n	14192 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x114>
   14112:	e7ff      	b.n	14114 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x96>
   14114:	9805      	ldr	r0, [sp, #20]
   14116:	7801      	ldrb	r1, [r0, #0]
        unsafe { &PENDING_DATA }    //  Data Bytes
   14118:	f643 2078 	movw	r0, #14968	; 0x3a78
   1411c:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14120:	9103      	str	r1, [sp, #12]
   14122:	f7ff f8bc 	bl	1329e <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17hc03b439e09ebac7fE>
   14126:	9002      	str	r0, [sp, #8]
   14128:	9101      	str	r1, [sp, #4]
   1412a:	e7ff      	b.n	1412c <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xae>
    if let Err(e) = spi_noblock_write(
   1412c:	9803      	ldr	r0, [sp, #12]
   1412e:	9902      	ldr	r1, [sp, #8]
   14130:	9a01      	ldr	r2, [sp, #4]
   14132:	f000 f837 	bl	141a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>
   14136:	900e      	str	r0, [sp, #56]	; 0x38
   14138:	e7ff      	b.n	1413a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xbc>
   1413a:	980e      	ldr	r0, [sp, #56]	; 0x38
   1413c:	2801      	cmp	r0, #1
   1413e:	d107      	bne.n	14150 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xd2>
   14140:	e7ff      	b.n	14142 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xc4>
    unsafe { PENDING_CMD.clear() };
   14142:	f643 2070 	movw	r0, #14960	; 0x3a70
   14146:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1414a:	f7ff f8e8 	bl	1331e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   1414e:	e014      	b.n	1417a <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xfc>
    if let Err(e) = spi_noblock_write(
   14150:	980e      	ldr	r0, [sp, #56]	; 0x38
   14152:	900f      	str	r0, [sp, #60]	; 0x3c
        unsafe { PENDING_CMD.clear() };
   14154:	f643 2170 	movw	r1, #14960	; 0x3a70
   14158:	f2c2 0100 	movt	r1, #8192	; 0x2000
   1415c:	9000      	str	r0, [sp, #0]
   1415e:	4608      	mov	r0, r1
   14160:	f7ff f8dd 	bl	1331e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd59268c17c0e0918E>
   14164:	e7ff      	b.n	14166 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xe8>
        unsafe { PENDING_DATA.clear() };    
   14166:	f643 2078 	movw	r0, #14968	; 0x3a78
   1416a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1416e:	f7ff f8ce 	bl	1330e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   14172:	e7ff      	b.n	14174 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0xf6>
        return Err(e);
   14174:	9800      	ldr	r0, [sp, #0]
   14176:	900c      	str	r0, [sp, #48]	; 0x30
   14178:	e7c5      	b.n	14106 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
    unsafe { PENDING_DATA.clear() };
   1417a:	f643 2078 	movw	r0, #14968	; 0x3a78
   1417e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14182:	f7ff f8c4 	bl	1330e <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hd10db62fd26673a3E>
   14186:	e7ff      	b.n	14188 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x10a>
   14188:	2000      	movs	r0, #0
    Ok(())
   1418a:	900c      	str	r0, [sp, #48]	; 0x30
   1418c:	2001      	movs	r0, #1
   1418e:	900c      	str	r0, [sp, #48]	; 0x30
}
   14190:	e7b9      	b.n	14106 <_ZN6mynewt3spi23spi_noblock_write_flush17hc0d4d276fba2a236E+0x88>
        unsafe { PENDING_CMD[0] },  //  Command Byte
   14192:	f64f 105c 	movw	r0, #63836	; 0xf95c
   14196:	f2c0 0001 	movt	r0, #1
   1419a:	2100      	movs	r1, #0
   1419c:	9a04      	ldr	r2, [sp, #16]
   1419e:	f002 fc97 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   141a2:	defe      	udf	#254	; 0xfe

000141a4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E>:

/// Enqueue request for non-blocking SPI write. Returns without waiting for write to complete.
/// Request must have a Command Byte, followed by optional Data Bytes.
fn spi_noblock_write(cmd: u8, data: &[u8]) -> MynewtResult<()> {
   141a4:	b580      	push	{r7, lr}
   141a6:	b0a0      	sub	sp, #128	; 0x80
   141a8:	4603      	mov	r3, r0
   141aa:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   141ae:	9116      	str	r1, [sp, #88]	; 0x58
   141b0:	9217      	str	r2, [sp, #92]	; 0x5c
   141b2:	f247 5030 	movw	r0, #30000	; 0x7530
    console::print("spi data "); ////
    console::dump(data.as_ptr(), data.len() as u32); console::print("\n"); ////
    console::flush(); */

    //  Throttle the number of queued SPI requests.
    let timeout = 30_000;
   141b6:	9018      	str	r0, [sp, #96]	; 0x60
   141b8:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   141bc:	fba0 0c0c 	umull	r0, ip, r0, ip
   141c0:	f1bc 0f00 	cmp.w	ip, #0
   141c4:	920f      	str	r2, [sp, #60]	; 0x3c
   141c6:	910e      	str	r1, [sp, #56]	; 0x38
   141c8:	900d      	str	r0, [sp, #52]	; 0x34
   141ca:	f040 80c8 	bne.w	1435e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ba>
   141ce:	e7ff      	b.n	141d0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x2c>
   141d0:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   141d4:	f2c1 0062 	movt	r0, #4194	; 0x1062
   141d8:	990d      	ldr	r1, [sp, #52]	; 0x34
   141da:	fba1 0200 	umull	r0, r2, r1, r0
   141de:	0991      	lsrs	r1, r2, #6
   141e0:	f244 2284 	movw	r2, #17028	; 0x4284
   141e4:	f2c2 0200 	movt	r2, #8192	; 0x2000
   141e8:	900c      	str	r0, [sp, #48]	; 0x30
   141ea:	4610      	mov	r0, r2
   141ec:	f006 fc98 	bl	1ab20 <os_sem_pend>
   141f0:	e7ff      	b.n	141f2 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x4e>

    //  Allocate a new mbuf chain to copy the data to be sent.
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   141f2:	980e      	ldr	r0, [sp, #56]	; 0x38
   141f4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   141f6:	f7fa fbaf 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   141fa:	900b      	str	r0, [sp, #44]	; 0x2c
   141fc:	e7ff      	b.n	141fe <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x5a>
   141fe:	2001      	movs	r0, #1
   14200:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14202:	fa10 f081 	uxtah	r0, r0, r1
   14206:	b282      	uxth	r2, r0
   14208:	4603      	mov	r3, r0
   1420a:	4282      	cmp	r2, r0
   1420c:	930a      	str	r3, [sp, #40]	; 0x28
   1420e:	f040 80b2 	bne.w	14376 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1d2>
   14212:	e7ff      	b.n	14214 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x70>
   14214:	980a      	ldr	r0, [sp, #40]	; 0x28
   14216:	f8ad 0066 	strh.w	r0, [sp, #102]	; 0x66
    let mbuf = unsafe { os::os_msys_get_pkthdr(len, 0) };
   1421a:	b280      	uxth	r0, r0
   1421c:	2100      	movs	r1, #0
   1421e:	f006 f98d 	bl	1a53c <os_msys_get_pkthdr>
   14222:	4601      	mov	r1, r0
   14224:	901a      	str	r0, [sp, #104]	; 0x68
   14226:	9109      	str	r1, [sp, #36]	; 0x24
   14228:	e7ff      	b.n	1422a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x86>
    if mbuf.is_null() {  //  If out of memory, quit.
   1422a:	9809      	ldr	r0, [sp, #36]	; 0x24
   1422c:	f000 fc7c 	bl	14b28 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   14230:	9008      	str	r0, [sp, #32]
   14232:	e7ff      	b.n	14234 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x90>
   14234:	9808      	ldr	r0, [sp, #32]
   14236:	07c1      	lsls	r1, r0, #31
   14238:	2900      	cmp	r1, #0
   1423a:	d106      	bne.n	1424a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xa6>
   1423c:	e7ff      	b.n	1423e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x9a>
   1423e:	f10d 0043 	add.w	r0, sp, #67	; 0x43
    }

    //  Append the Command Byte to the mbuf chain.
    let rc = unsafe { os::os_mbuf_append(
        mbuf, 
        core::mem::transmute(&cmd), 
   14242:	901b      	str	r0, [sp, #108]	; 0x6c
   14244:	991b      	ldr	r1, [sp, #108]	; 0x6c
   14246:	9107      	str	r1, [sp, #28]
   14248:	e010      	b.n	1426c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc8>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1424a:	f244 2084 	movw	r0, #17028	; 0x4284
   1424e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14252:	f006 fc33 	bl	1aabc <os_sem_release>
   14256:	e7ff      	b.n	14258 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xb4>
   14258:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   1425c:	9012      	str	r0, [sp, #72]	; 0x48
   1425e:	9812      	ldr	r0, [sp, #72]	; 0x48
   14260:	9011      	str	r0, [sp, #68]	; 0x44
   14262:	e002      	b.n	1426a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
        return Err(MynewtError::SYS_EUNKNOWN); 
    }
    Ok(())
}
   14264:	9811      	ldr	r0, [sp, #68]	; 0x44
   14266:	b020      	add	sp, #128	; 0x80
   14268:	bd80      	pop	{r7, pc}
        return Err(MynewtError::SYS_ENOMEM); 
   1426a:	e7fb      	b.n	14264 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
   1426c:	2201      	movs	r2, #1
    let rc = unsafe { os::os_mbuf_append(
   1426e:	9809      	ldr	r0, [sp, #36]	; 0x24
   14270:	9907      	ldr	r1, [sp, #28]
   14272:	f005 ffbb 	bl	1a1ec <os_mbuf_append>
   14276:	4601      	mov	r1, r0
   14278:	901c      	str	r0, [sp, #112]	; 0x70
   1427a:	9106      	str	r1, [sp, #24]
   1427c:	e7ff      	b.n	1427e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xda>
    if rc != 0 {  //  If out of memory, quit.
   1427e:	9806      	ldr	r0, [sp, #24]
   14280:	2800      	cmp	r0, #0
   14282:	d106      	bne.n	14292 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xee>
   14284:	e7ff      	b.n	14286 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xe2>
        core::mem::transmute(data.as_ptr()), 
   14286:	980e      	ldr	r0, [sp, #56]	; 0x38
   14288:	990f      	ldr	r1, [sp, #60]	; 0x3c
   1428a:	f7fa fb6d 	bl	e968 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17h0182d012b226d16bE>
   1428e:	9005      	str	r0, [sp, #20]
   14290:	e011      	b.n	142b6 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x112>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14292:	9809      	ldr	r0, [sp, #36]	; 0x24
   14294:	f005 ff8e 	bl	1a1b4 <os_mbuf_free_chain>
   14298:	e7ff      	b.n	1429a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xf6>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1429a:	f244 2084 	movw	r0, #17028	; 0x4284
   1429e:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142a2:	f006 fc0b 	bl	1aabc <os_sem_release>
   142a6:	e7ff      	b.n	142a8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x104>
   142a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   142ac:	9013      	str	r0, [sp, #76]	; 0x4c
   142ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
   142b0:	9011      	str	r0, [sp, #68]	; 0x44
   142b2:	e7ff      	b.n	142b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
   142b4:	e7d9      	b.n	1426a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc6>
        core::mem::transmute(data.as_ptr()), 
   142b6:	9805      	ldr	r0, [sp, #20]
   142b8:	901d      	str	r0, [sp, #116]	; 0x74
   142ba:	991d      	ldr	r1, [sp, #116]	; 0x74
   142bc:	9104      	str	r1, [sp, #16]
   142be:	e7ff      	b.n	142c0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x11c>
        data.len() as u16
   142c0:	980e      	ldr	r0, [sp, #56]	; 0x38
   142c2:	990f      	ldr	r1, [sp, #60]	; 0x3c
   142c4:	f7fa fb48 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   142c8:	9003      	str	r0, [sp, #12]
   142ca:	e7ff      	b.n	142cc <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x128>
    let rc = unsafe { os::os_mbuf_append(
   142cc:	9803      	ldr	r0, [sp, #12]
   142ce:	b282      	uxth	r2, r0
   142d0:	9809      	ldr	r0, [sp, #36]	; 0x24
   142d2:	9904      	ldr	r1, [sp, #16]
   142d4:	f005 ff8a 	bl	1a1ec <os_mbuf_append>
   142d8:	4601      	mov	r1, r0
   142da:	901e      	str	r0, [sp, #120]	; 0x78
   142dc:	9102      	str	r1, [sp, #8]
   142de:	e7ff      	b.n	142e0 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x13c>
    if rc != 0 {  //  If out of memory, quit.
   142e0:	9802      	ldr	r0, [sp, #8]
   142e2:	2800      	cmp	r0, #0
   142e4:	d10f      	bne.n	14306 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x162>
   142e6:	e7ff      	b.n	142e8 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x144>
    let rc = unsafe { os::os_mqueue_put(
   142e8:	f244 208c 	movw	r0, #17036	; 0x428c
   142ec:	f2c2 0000 	movt	r0, #8192	; 0x2000
   142f0:	f244 21a4 	movw	r1, #17060	; 0x42a4
   142f4:	f2c2 0100 	movt	r1, #8192	; 0x2000
   142f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   142fa:	f005 fef9 	bl	1a0f0 <os_mqueue_put>
   142fe:	4601      	mov	r1, r0
   14300:	901f      	str	r0, [sp, #124]	; 0x7c
   14302:	9101      	str	r1, [sp, #4]
   14304:	e011      	b.n	1432a <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x186>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   14306:	9809      	ldr	r0, [sp, #36]	; 0x24
   14308:	f005 ff54 	bl	1a1b4 <os_mbuf_free_chain>
   1430c:	e7ff      	b.n	1430e <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x16a>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   1430e:	f244 2084 	movw	r0, #17028	; 0x4284
   14312:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14316:	f006 fbd1 	bl	1aabc <os_sem_release>
   1431a:	e7ff      	b.n	1431c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x178>
   1431c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        return Err(MynewtError::SYS_ENOMEM); 
   14320:	9014      	str	r0, [sp, #80]	; 0x50
   14322:	9814      	ldr	r0, [sp, #80]	; 0x50
   14324:	9011      	str	r0, [sp, #68]	; 0x44
   14326:	e7ff      	b.n	14328 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
   14328:	e7c4      	b.n	142b4 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x110>
    if rc != 0 {  //  If out of memory, quit.
   1432a:	9801      	ldr	r0, [sp, #4]
   1432c:	2800      	cmp	r0, #0
   1432e:	d105      	bne.n	1433c <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x198>
   14330:	e7ff      	b.n	14332 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x18e>
   14332:	2000      	movs	r0, #0
    Ok(())
   14334:	9011      	str	r0, [sp, #68]	; 0x44
   14336:	2001      	movs	r0, #1
   14338:	9011      	str	r0, [sp, #68]	; 0x44
}
   1433a:	e793      	b.n	14264 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0xc0>
        unsafe { os::os_mbuf_free_chain(mbuf) };               //  Deallocate the mbuf chain
   1433c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1433e:	f005 ff39 	bl	1a1b4 <os_mbuf_free_chain>
   14342:	e7ff      	b.n	14344 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1a0>
        unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };  //  Release the throttle
   14344:	f244 2084 	movw	r0, #17028	; 0x4284
   14348:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1434c:	f006 fbb6 	bl	1aabc <os_sem_release>
   14350:	e7ff      	b.n	14352 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x1ae>
   14352:	f06f 000c 	mvn.w	r0, #12
        return Err(MynewtError::SYS_EUNKNOWN); 
   14356:	9015      	str	r0, [sp, #84]	; 0x54
   14358:	9815      	ldr	r0, [sp, #84]	; 0x54
   1435a:	9011      	str	r0, [sp, #68]	; 0x44
   1435c:	e7e4      	b.n	14328 <_ZN6mynewt3spi17spi_noblock_write17h0553f187c373a700E+0x184>
    unsafe { os::os_sem_pend(&mut SPI_THROTTLE_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   1435e:	f64f 1080 	movw	r0, #63872	; 0xf980
   14362:	f2c0 0001 	movt	r0, #1
   14366:	f64f 126c 	movw	r2, #63852	; 0xf96c
   1436a:	f2c0 0201 	movt	r2, #1
   1436e:	2121      	movs	r1, #33	; 0x21
   14370:	f002 fb98 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14374:	defe      	udf	#254	; 0xfe
    let len = data.len() as u16 + 1;  //  1 Command Byte + Multiple Data Bytes
   14376:	f64f 10c0 	movw	r0, #63936	; 0xf9c0
   1437a:	f2c0 0001 	movt	r0, #1
   1437e:	f64f 12a4 	movw	r2, #63908	; 0xf9a4
   14382:	f2c0 0201 	movt	r2, #1
   14386:	211c      	movs	r1, #28
   14388:	f002 fb8c 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1438c:	defe      	udf	#254	; 0xfe

0001438e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E>:

/// Callback for the event that is triggered when an SPI request is added to the queue.
extern "C" fn spi_event_callback(_event: *mut os::os_event) {    
   1438e:	b5b0      	push	{r4, r5, r7, lr}
   14390:	b0c4      	sub	sp, #272	; 0x110
   14392:	9038      	str	r0, [sp, #224]	; 0xe0
   14394:	e7ff      	b.n	14396 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
    loop {  //  For each mbuf chain found...
        //  Get the next SPI request, stored as an mbuf chain.
        let om = unsafe { os::os_mqueue_get(&mut SPI_DATA_QUEUE) };
   14396:	f244 208c 	movw	r0, #17036	; 0x428c
   1439a:	f2c2 0000 	movt	r0, #8192	; 0x2000
   1439e:	f005 fe94 	bl	1a0ca <os_mqueue_get>
   143a2:	4601      	mov	r1, r0
   143a4:	9039      	str	r0, [sp, #228]	; 0xe4
   143a6:	911b      	str	r1, [sp, #108]	; 0x6c
   143a8:	e7ff      	b.n	143aa <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c>
        if om.is_null() { break; }
   143aa:	981b      	ldr	r0, [sp, #108]	; 0x6c
   143ac:	f000 fbbc 	bl	14b28 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   143b0:	901a      	str	r0, [sp, #104]	; 0x68
   143b2:	e7ff      	b.n	143b4 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26>
   143b4:	981a      	ldr	r0, [sp, #104]	; 0x68
   143b6:	07c1      	lsls	r1, r0, #31
   143b8:	2900      	cmp	r1, #0
   143ba:	d106      	bne.n	143ca <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x3c>
   143bc:	e7ff      	b.n	143be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x30>

        //  Send the mbuf chain.
        let mut m = om;
   143be:	981b      	ldr	r0, [sp, #108]	; 0x6c
   143c0:	901c      	str	r0, [sp, #112]	; 0x70
   143c2:	2101      	movs	r1, #1
        let mut first_byte = true;
   143c4:	f88d 1075 	strb.w	r1, [sp, #117]	; 0x75
        while !m.is_null() {  //  For each mbuf in the chain...
   143c8:	e001      	b.n	143ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>

        //  Release the throttle semaphore to allow next request to be queued.
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
        assert_eq!(rc, 0, "sem fail");    
    }
}
   143ca:	b044      	add	sp, #272	; 0x110
   143cc:	bdb0      	pop	{r4, r5, r7, pc}
        while !m.is_null() {  //  For each mbuf in the chain...
   143ce:	981c      	ldr	r0, [sp, #112]	; 0x70
   143d0:	f000 fbaa 	bl	14b28 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>
   143d4:	9019      	str	r0, [sp, #100]	; 0x64
   143d6:	e7ff      	b.n	143d8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x4a>
   143d8:	9819      	ldr	r0, [sp, #100]	; 0x64
   143da:	07c1      	lsls	r1, r0, #31
   143dc:	2900      	cmp	r1, #0
   143de:	d004      	beq.n	143ea <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x5c>
   143e0:	e7ff      	b.n	143e2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x54>
        unsafe { os::os_mbuf_free_chain(om) };
   143e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
   143e4:	f005 fee6 	bl	1a1b4 <os_mbuf_free_chain>
   143e8:	e0aa      	b.n	14540 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1b2>
            let data = unsafe { (*m).om_data };  //  Fetch the data
   143ea:	981c      	ldr	r0, [sp, #112]	; 0x70
   143ec:	6800      	ldr	r0, [r0, #0]
   143ee:	903a      	str	r0, [sp, #232]	; 0xe8
            let len = unsafe { (*m).om_len };    //  Fetch the length
   143f0:	991c      	ldr	r1, [sp, #112]	; 0x70
   143f2:	88c9      	ldrh	r1, [r1, #6]
   143f4:	460a      	mov	r2, r1
   143f6:	f8ad 10ee 	strh.w	r1, [sp, #238]	; 0xee
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   143fa:	f89d 1075 	ldrb.w	r1, [sp, #117]	; 0x75
   143fe:	07c9      	lsls	r1, r1, #31
   14400:	2900      	cmp	r1, #0
   14402:	9018      	str	r0, [sp, #96]	; 0x60
   14404:	9217      	str	r2, [sp, #92]	; 0x5c
   14406:	d105      	bne.n	14414 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x86>
   14408:	e7ff      	b.n	1440a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x7c>
                    unsafe { core::mem::transmute(data) }, 
   1440a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1440c:	903e      	str	r0, [sp, #248]	; 0xf8
   1440e:	983e      	ldr	r0, [sp, #248]	; 0xf8
   14410:	9016      	str	r0, [sp, #88]	; 0x58
   14412:	e07b      	b.n	1450c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17e>
   14414:	2000      	movs	r0, #0
                first_byte = false;
   14416:	f88d 0075 	strb.w	r0, [sp, #117]	; 0x75
                    unsafe { core::mem::transmute(data) }, 
   1441a:	9818      	ldr	r0, [sp, #96]	; 0x60
   1441c:	903c      	str	r0, [sp, #240]	; 0xf0
   1441e:	983c      	ldr	r0, [sp, #240]	; 0xf0
   14420:	9015      	str	r0, [sp, #84]	; 0x54
   14422:	e7ff      	b.n	14424 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x96>
   14424:	2001      	movs	r0, #1
                internal_spi_noblock_write(
   14426:	9915      	ldr	r1, [sp, #84]	; 0x54
   14428:	9014      	str	r0, [sp, #80]	; 0x50
   1442a:	4608      	mov	r0, r1
   1442c:	9914      	ldr	r1, [sp, #80]	; 0x50
   1442e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   14430:	f000 f921 	bl	14676 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14434:	9013      	str	r0, [sp, #76]	; 0x4c
   14436:	e7ff      	b.n	14438 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xaa>
   14438:	f64f 11dc 	movw	r1, #63964	; 0xf9dc
   1443c:	f2c0 0101 	movt	r1, #1
   14440:	f64f 13e8 	movw	r3, #63976	; 0xf9e8
   14444:	f2c0 0301 	movt	r3, #1
   14448:	220c      	movs	r2, #12
   1444a:	9813      	ldr	r0, [sp, #76]	; 0x4c
   1444c:	f7fa ff10 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14450:	e7ff      	b.n	14452 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xc4>
                if  unsafe { *data } == 0x01 || //  SWRESET
   14452:	9818      	ldr	r0, [sp, #96]	; 0x60
   14454:	7801      	ldrb	r1, [r0, #0]
   14456:	2901      	cmp	r1, #1
   14458:	d013      	beq.n	14482 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1445a:	e01a      	b.n	14492 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x104>
   1445c:	2001      	movs	r0, #1
   1445e:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   14462:	e008      	b.n	14476 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
   14464:	2000      	movs	r0, #0
   14466:	f88d 0076 	strb.w	r0, [sp, #118]	; 0x76
   1446a:	e004      	b.n	14476 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xe8>
                    unsafe { *data } == 0x29 {  //  DISPON
   1446c:	9818      	ldr	r0, [sp, #96]	; 0x60
   1446e:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14470:	2929      	cmp	r1, #41	; 0x29
   14472:	d0f3      	beq.n	1445c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   14474:	e7f6      	b.n	14464 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xd6>
   14476:	f89d 0076 	ldrb.w	r0, [sp, #118]	; 0x76
   1447a:	07c0      	lsls	r0, r0, #31
   1447c:	2800      	cmp	r0, #0
   1447e:	d113      	bne.n	144a8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x11a>
   14480:	e017      	b.n	144b2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   14482:	2001      	movs	r0, #1
   14484:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14488:	e008      	b.n	1449c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
   1448a:	2000      	movs	r0, #0
   1448c:	f88d 0077 	strb.w	r0, [sp, #119]	; 0x77
   14490:	e004      	b.n	1449c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x10e>
                    unsafe { *data } == 0x11 || //  SLPOUT
   14492:	9818      	ldr	r0, [sp, #96]	; 0x60
   14494:	7801      	ldrb	r1, [r0, #0]
                if  unsafe { *data } == 0x01 || //  SWRESET
   14496:	2911      	cmp	r1, #17
   14498:	d0f3      	beq.n	14482 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xf4>
   1449a:	e7f6      	b.n	1448a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xfc>
   1449c:	f89d 0077 	ldrb.w	r0, [sp, #119]	; 0x77
   144a0:	07c0      	lsls	r0, r0, #31
   144a2:	2800      	cmp	r0, #0
   144a4:	d1da      	bne.n	1445c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xce>
   144a6:	e7e1      	b.n	1446c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0xde>
   144a8:	20c8      	movs	r0, #200	; 0xc8
                    delay_ms(200);
   144aa:	f000 fb13 	bl	14ad4 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>
   144ae:	e7ff      	b.n	144b0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x122>
                if  unsafe { *data } == 0x01 || //  SWRESET
   144b0:	e7ff      	b.n	144b2 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x124>
   144b2:	2101      	movs	r1, #1
                    unsafe { core::mem::transmute(data.add(1)) }, 
   144b4:	9818      	ldr	r0, [sp, #96]	; 0x60
   144b6:	f7fa f9bf 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   144ba:	9012      	str	r0, [sp, #72]	; 0x48
   144bc:	e7ff      	b.n	144be <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x130>
   144be:	9812      	ldr	r0, [sp, #72]	; 0x48
   144c0:	903d      	str	r0, [sp, #244]	; 0xf4
   144c2:	983d      	ldr	r0, [sp, #244]	; 0xf4
   144c4:	9011      	str	r0, [sp, #68]	; 0x44
   144c6:	e7ff      	b.n	144c8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x13a>
   144c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   144cc:	9917      	ldr	r1, [sp, #92]	; 0x5c
   144ce:	fa10 f081 	uxtah	r0, r0, r1
   144d2:	b282      	uxth	r2, r0
   144d4:	4603      	mov	r3, r0
   144d6:	4282      	cmp	r2, r0
   144d8:	9310      	str	r3, [sp, #64]	; 0x40
   144da:	f040 80c0 	bne.w	1465e <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2d0>
   144de:	e7ff      	b.n	144e0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x152>
   144e0:	9810      	ldr	r0, [sp, #64]	; 0x40
   144e2:	b281      	uxth	r1, r0
   144e4:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   144e6:	9811      	ldr	r0, [sp, #68]	; 0x44
   144e8:	f000 f8c5 	bl	14676 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   144ec:	900f      	str	r0, [sp, #60]	; 0x3c
   144ee:	e7ff      	b.n	144f0 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x162>
   144f0:	f64f 11dc 	movw	r1, #63964	; 0xf9dc
   144f4:	f2c0 0101 	movt	r1, #1
   144f8:	f64f 2334 	movw	r3, #64052	; 0xfa34
   144fc:	f2c0 0301 	movt	r3, #1
   14500:	220c      	movs	r2, #12
   14502:	980f      	ldr	r0, [sp, #60]	; 0x3c
   14504:	f7fa feb4 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14508:	e7ff      	b.n	1450a <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x17c>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   1450a:	e015      	b.n	14538 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
                    len as i32,  //  Write all Data Bytes
   1450c:	9817      	ldr	r0, [sp, #92]	; 0x5c
   1450e:	b281      	uxth	r1, r0
   14510:	2200      	movs	r2, #0
                internal_spi_noblock_write(
   14512:	9816      	ldr	r0, [sp, #88]	; 0x58
   14514:	f000 f8af 	bl	14676 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>
   14518:	900e      	str	r0, [sp, #56]	; 0x38
   1451a:	e7ff      	b.n	1451c <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x18e>
   1451c:	f64f 11dc 	movw	r1, #63964	; 0xf9dc
   14520:	f2c0 0101 	movt	r1, #1
   14524:	f64f 2344 	movw	r3, #64068	; 0xfa44
   14528:	f2c0 0301 	movt	r3, #1
   1452c:	220c      	movs	r2, #12
   1452e:	980e      	ldr	r0, [sp, #56]	; 0x38
   14530:	f7fa fe9e 	bl	f270 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h8a4edeb1fa1ae08eE>
   14534:	e7ff      	b.n	14536 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1a8>
            if first_byte {  //  First byte of the mbuf chain is always Command Byte
   14536:	e7ff      	b.n	14538 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1aa>
            m = unsafe { (*m).om_next.sle_next };  //  Fetch next mbuf in the chain.
   14538:	981c      	ldr	r0, [sp, #112]	; 0x70
   1453a:	68c0      	ldr	r0, [r0, #12]
   1453c:	901c      	str	r0, [sp, #112]	; 0x70
        while !m.is_null() {  //  For each mbuf in the chain...
   1453e:	e746      	b.n	143ce <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x40>
        let rc = unsafe { os::os_sem_release(&mut SPI_THROTTLE_SEM) };
   14540:	f244 2084 	movw	r0, #17028	; 0x4284
   14544:	f2c2 0000 	movt	r0, #8192	; 0x2000
   14548:	f006 fab8 	bl	1aabc <os_sem_release>
   1454c:	901e      	str	r0, [sp, #120]	; 0x78
   1454e:	e7ff      	b.n	14550 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1c2>
        assert_eq!(rc, 0, "sem fail");    
   14550:	f24f 7058 	movw	r0, #63320	; 0xf758
   14554:	f2c0 0001 	movt	r0, #1
   14558:	6800      	ldr	r0, [r0, #0]
   1455a:	a91e      	add	r1, sp, #120	; 0x78
   1455c:	911f      	str	r1, [sp, #124]	; 0x7c
   1455e:	9020      	str	r0, [sp, #128]	; 0x80
   14560:	981f      	ldr	r0, [sp, #124]	; 0x7c
   14562:	903f      	str	r0, [sp, #252]	; 0xfc
   14564:	9920      	ldr	r1, [sp, #128]	; 0x80
   14566:	9140      	str	r1, [sp, #256]	; 0x100
   14568:	6802      	ldr	r2, [r0, #0]
   1456a:	680b      	ldr	r3, [r1, #0]
   1456c:	429a      	cmp	r2, r3
   1456e:	900d      	str	r0, [sp, #52]	; 0x34
   14570:	910c      	str	r1, [sp, #48]	; 0x30
   14572:	d101      	bne.n	14578 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1ea>
   14574:	e7ff      	b.n	14576 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x1e8>
    loop {  //  For each mbuf chain found...
   14576:	e70e      	b.n	14396 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x8>
        assert_eq!(rc, 0, "sem fail");    
   14578:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   1457c:	f2c0 0001 	movt	r0, #1
   14580:	6801      	ldr	r1, [r0, #0]
   14582:	980d      	ldr	r0, [sp, #52]	; 0x34
   14584:	9030      	str	r0, [sp, #192]	; 0xc0
   14586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14588:	9231      	str	r2, [sp, #196]	; 0xc4
   1458a:	f64f 03c8 	movw	r3, #63688	; 0xf8c8
   1458e:	f2c0 0301 	movt	r3, #1
   14592:	681b      	ldr	r3, [r3, #0]
   14594:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   14598:	f2c0 0c01 	movt	ip, #1
   1459c:	f8dc c000 	ldr.w	ip, [ip]
   145a0:	46ee      	mov	lr, sp
   145a2:	2400      	movs	r4, #0
   145a4:	f8ce 4000 	str.w	r4, [lr]
   145a8:	a832      	add	r0, sp, #200	; 0xc8
   145aa:	2201      	movs	r2, #1
   145ac:	910b      	str	r1, [sp, #44]	; 0x2c
   145ae:	4619      	mov	r1, r3
   145b0:	4663      	mov	r3, ip
   145b2:	f7fa fe2e 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   145b6:	e7ff      	b.n	145b8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x22a>
   145b8:	a830      	add	r0, sp, #192	; 0xc0
   145ba:	902d      	str	r0, [sp, #180]	; 0xb4
   145bc:	a831      	add	r0, sp, #196	; 0xc4
   145be:	902e      	str	r0, [sp, #184]	; 0xb8
   145c0:	a832      	add	r0, sp, #200	; 0xc8
   145c2:	902f      	str	r0, [sp, #188]	; 0xbc
   145c4:	982d      	ldr	r0, [sp, #180]	; 0xb4
   145c6:	9041      	str	r0, [sp, #260]	; 0x104
   145c8:	992e      	ldr	r1, [sp, #184]	; 0xb8
   145ca:	9142      	str	r1, [sp, #264]	; 0x108
   145cc:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
   145ce:	9243      	str	r2, [sp, #268]	; 0x10c
   145d0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
   145d4:	f2c0 0300 	movt	r3, #0
   145d8:	910a      	str	r1, [sp, #40]	; 0x28
   145da:	4619      	mov	r1, r3
   145dc:	9209      	str	r2, [sp, #36]	; 0x24
   145de:	f7fb fd40 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   145e2:	9008      	str	r0, [sp, #32]
   145e4:	9107      	str	r1, [sp, #28]
   145e6:	e7ff      	b.n	145e8 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x25a>
   145e8:	f64f 71f3 	movw	r1, #65523	; 0xfff3
   145ec:	f2c0 0100 	movt	r1, #0
   145f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   145f2:	f7fb fd36 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   145f6:	9006      	str	r0, [sp, #24]
   145f8:	9105      	str	r1, [sp, #20]
   145fa:	e7ff      	b.n	145fc <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x26e>
   145fc:	f247 0173 	movw	r1, #28787	; 0x7073
   14600:	f2c0 0101 	movt	r1, #1
   14604:	9809      	ldr	r0, [sp, #36]	; 0x24
   14606:	f7fb fd41 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   1460a:	9004      	str	r0, [sp, #16]
   1460c:	9103      	str	r1, [sp, #12]
   1460e:	e7ff      	b.n	14610 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x282>
   14610:	9808      	ldr	r0, [sp, #32]
   14612:	9027      	str	r0, [sp, #156]	; 0x9c
   14614:	9907      	ldr	r1, [sp, #28]
   14616:	9128      	str	r1, [sp, #160]	; 0xa0
   14618:	9a06      	ldr	r2, [sp, #24]
   1461a:	9229      	str	r2, [sp, #164]	; 0xa4
   1461c:	9b05      	ldr	r3, [sp, #20]
   1461e:	932a      	str	r3, [sp, #168]	; 0xa8
   14620:	f8dd c010 	ldr.w	ip, [sp, #16]
   14624:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
   14628:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1462c:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
   14630:	466c      	mov	r4, sp
   14632:	2503      	movs	r5, #3
   14634:	6025      	str	r5, [r4, #0]
   14636:	a821      	add	r0, sp, #132	; 0x84
   14638:	ab27      	add	r3, sp, #156	; 0x9c
   1463a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1463c:	462a      	mov	r2, r5
   1463e:	f7fa fde8 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14642:	e7ff      	b.n	14644 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2b6>
   14644:	f64f 2054 	movw	r0, #64084	; 0xfa54
   14648:	f2c0 0001 	movt	r0, #1
   1464c:	f002 fa23 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14650:	9002      	str	r0, [sp, #8]
   14652:	e7ff      	b.n	14654 <_ZN6mynewt3spi18spi_event_callback17hdab18d317e54d886E+0x2c6>
   14654:	a821      	add	r0, sp, #132	; 0x84
   14656:	9902      	ldr	r1, [sp, #8]
   14658:	f002 fa5a 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1465c:	defe      	udf	#254	; 0xfe
                    (len - 1) as i32,  //  Then write 0 or more Data Bytes
   1465e:	f64f 2010 	movw	r0, #64016	; 0xfa10
   14662:	f2c0 0001 	movt	r0, #1
   14666:	f64f 12f8 	movw	r2, #63992	; 0xf9f8
   1466a:	f2c0 0201 	movt	r2, #1
   1466e:	2121      	movs	r1, #33	; 0x21
   14670:	f002 fa18 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14674:	defe      	udf	#254	; 0xfe

00014676 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E>:

/// Perform non-blocking SPI write in Mynewt OS.  Blocks until SPI write completes.
fn internal_spi_noblock_write(buf: &'static u8, len: i32, is_command: bool) -> MynewtResult<()> {
   14676:	b5b0      	push	{r4, r5, r7, lr}
   14678:	b0e8      	sub	sp, #416	; 0x1a0
   1467a:	4613      	mov	r3, r2
   1467c:	9058      	str	r0, [sp, #352]	; 0x160
   1467e:	9159      	str	r1, [sp, #356]	; 0x164
   14680:	f88d 216b 	strb.w	r2, [sp, #363]	; 0x16b
    if len == 0 { return Ok(()); }
   14684:	2900      	cmp	r1, #0
   14686:	9121      	str	r1, [sp, #132]	; 0x84
   14688:	9020      	str	r0, [sp, #128]	; 0x80
   1468a:	931f      	str	r3, [sp, #124]	; 0x7c
   1468c:	d004      	beq.n	14698 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x22>
   1468e:	e7ff      	b.n	14690 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a>
    assert!(len > 0, "bad spi len");
   14690:	9821      	ldr	r0, [sp, #132]	; 0x84
   14692:	2801      	cmp	r0, #1
   14694:	db0d      	blt.n	146b2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x3c>
   14696:	e007      	b.n	146a8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x32>
   14698:	2000      	movs	r0, #0
    if len == 0 { return Ok(()); }
   1469a:	9022      	str	r0, [sp, #136]	; 0x88
   1469c:	2001      	movs	r0, #1
   1469e:	9022      	str	r0, [sp, #136]	; 0x88
   146a0:	e7ff      	b.n	146a2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
    }

    //  Set SS Pin to high to stop the transfer.
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
    Ok(())
}
   146a2:	9822      	ldr	r0, [sp, #136]	; 0x88
   146a4:	b068      	add	sp, #416	; 0x1a0
   146a6:	bdb0      	pop	{r4, r5, r7, pc}
        if is_command { 0 }
   146a8:	981f      	ldr	r0, [sp, #124]	; 0x7c
   146aa:	07c1      	lsls	r1, r0, #31
   146ac:	2900      	cmp	r1, #0
   146ae:	d10f      	bne.n	146d0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x5a>
   146b0:	e00b      	b.n	146ca <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x54>
    assert!(len > 0, "bad spi len");
   146b2:	f64f 2064 	movw	r0, #64100	; 0xfa64
   146b6:	f2c0 0001 	movt	r0, #1
   146ba:	f64f 2270 	movw	r2, #64112	; 0xfa70
   146be:	f2c0 0201 	movt	r2, #1
   146c2:	210b      	movs	r1, #11
   146c4:	f002 f9ee 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   146c8:	defe      	udf	#254	; 0xfe
   146ca:	2001      	movs	r0, #1
        else { 1 }
   146cc:	9023      	str	r0, [sp, #140]	; 0x8c
        if is_command { 0 }
   146ce:	e002      	b.n	146d6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
   146d0:	2000      	movs	r0, #0
   146d2:	9023      	str	r0, [sp, #140]	; 0x8c
   146d4:	e7ff      	b.n	146d6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x60>
    unsafe { hal::hal_gpio_write(
   146d6:	9923      	ldr	r1, [sp, #140]	; 0x8c
   146d8:	2012      	movs	r0, #18
   146da:	f004 fb51 	bl	18d80 <hal_gpio_write>
   146de:	e7ff      	b.n	146e0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x6a>
   146e0:	2019      	movs	r0, #25
   146e2:	2100      	movs	r1, #0
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 0) };
   146e4:	f004 fb4c 	bl	18d80 <hal_gpio_write>
   146e8:	e7ff      	b.n	146ea <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x74>
    if len == 1 {  //  If writing only 1 byte...
   146ea:	9821      	ldr	r0, [sp, #132]	; 0x84
   146ec:	2801      	cmp	r0, #1
   146ee:	d005      	beq.n	146fc <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x86>
   146f0:	e7ff      	b.n	146f2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x7c>
            core::mem::transmute(buf), //  TX Buffer
   146f2:	9820      	ldr	r0, [sp, #128]	; 0x80
   146f4:	9061      	str	r0, [sp, #388]	; 0x184
   146f6:	9961      	ldr	r1, [sp, #388]	; 0x184
   146f8:	911e      	str	r1, [sp, #120]	; 0x78
   146fa:	e094      	b.n	14826 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1b0>
            core::mem::transmute(buf), //  TX Buffer
   146fc:	9820      	ldr	r0, [sp, #128]	; 0x80
   146fe:	905b      	str	r0, [sp, #364]	; 0x16c
   14700:	995b      	ldr	r1, [sp, #364]	; 0x16c
   14702:	911d      	str	r1, [sp, #116]	; 0x74
   14704:	e7ff      	b.n	14706 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x90>
   14706:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx(
   14708:	901c      	str	r0, [sp, #112]	; 0x70
   1470a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1470c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
   1470e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14710:	f004 ffe4 	bl	196dc <hal_spi_txrx>
   14714:	9024      	str	r0, [sp, #144]	; 0x90
   14716:	e7ff      	b.n	14718 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xa2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14718:	f24f 7058 	movw	r0, #63320	; 0xf758
   1471c:	f2c0 0001 	movt	r0, #1
   14720:	6800      	ldr	r0, [r0, #0]
   14722:	a924      	add	r1, sp, #144	; 0x90
   14724:	9125      	str	r1, [sp, #148]	; 0x94
   14726:	9026      	str	r0, [sp, #152]	; 0x98
   14728:	9825      	ldr	r0, [sp, #148]	; 0x94
   1472a:	905c      	str	r0, [sp, #368]	; 0x170
   1472c:	9926      	ldr	r1, [sp, #152]	; 0x98
   1472e:	915d      	str	r1, [sp, #372]	; 0x174
   14730:	6802      	ldr	r2, [r0, #0]
   14732:	680b      	ldr	r3, [r1, #0]
   14734:	429a      	cmp	r2, r3
   14736:	901b      	str	r0, [sp, #108]	; 0x6c
   14738:	911a      	str	r1, [sp, #104]	; 0x68
   1473a:	d101      	bne.n	14740 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xca>
   1473c:	e7ff      	b.n	1473e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0xc8>
    if len == 1 {  //  If writing only 1 byte...
   1473e:	e11f      	b.n	14980 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14740:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   14744:	f2c0 0001 	movt	r0, #1
   14748:	6801      	ldr	r1, [r0, #0]
   1474a:	981b      	ldr	r0, [sp, #108]	; 0x6c
   1474c:	9036      	str	r0, [sp, #216]	; 0xd8
   1474e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   14750:	9237      	str	r2, [sp, #220]	; 0xdc
   14752:	f64f 2388 	movw	r3, #64136	; 0xfa88
   14756:	f2c0 0301 	movt	r3, #1
   1475a:	681b      	ldr	r3, [r3, #0]
   1475c:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   14760:	f2c0 0c01 	movt	ip, #1
   14764:	f8dc c000 	ldr.w	ip, [ip]
   14768:	46ee      	mov	lr, sp
   1476a:	2400      	movs	r4, #0
   1476c:	f8ce 4000 	str.w	r4, [lr]
   14770:	a838      	add	r0, sp, #224	; 0xe0
   14772:	2201      	movs	r2, #1
   14774:	9119      	str	r1, [sp, #100]	; 0x64
   14776:	4619      	mov	r1, r3
   14778:	4663      	mov	r3, ip
   1477a:	f7fa fd4a 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1477e:	e7ff      	b.n	14780 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x10a>
   14780:	a836      	add	r0, sp, #216	; 0xd8
   14782:	9033      	str	r0, [sp, #204]	; 0xcc
   14784:	a837      	add	r0, sp, #220	; 0xdc
   14786:	9034      	str	r0, [sp, #208]	; 0xd0
   14788:	a838      	add	r0, sp, #224	; 0xe0
   1478a:	9035      	str	r0, [sp, #212]	; 0xd4
   1478c:	9833      	ldr	r0, [sp, #204]	; 0xcc
   1478e:	905e      	str	r0, [sp, #376]	; 0x178
   14790:	9934      	ldr	r1, [sp, #208]	; 0xd0
   14792:	915f      	str	r1, [sp, #380]	; 0x17c
   14794:	9a35      	ldr	r2, [sp, #212]	; 0xd4
   14796:	9260      	str	r2, [sp, #384]	; 0x180
   14798:	f64f 739f 	movw	r3, #65439	; 0xff9f
   1479c:	f2c0 0300 	movt	r3, #0
   147a0:	9118      	str	r1, [sp, #96]	; 0x60
   147a2:	4619      	mov	r1, r3
   147a4:	9217      	str	r2, [sp, #92]	; 0x5c
   147a6:	f7fb fc32 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   147aa:	9016      	str	r0, [sp, #88]	; 0x58
   147ac:	9115      	str	r1, [sp, #84]	; 0x54
   147ae:	e7ff      	b.n	147b0 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x13a>
   147b0:	f64f 719f 	movw	r1, #65439	; 0xff9f
   147b4:	f2c0 0100 	movt	r1, #0
   147b8:	9818      	ldr	r0, [sp, #96]	; 0x60
   147ba:	f7fb fc28 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   147be:	9014      	str	r0, [sp, #80]	; 0x50
   147c0:	9113      	str	r1, [sp, #76]	; 0x4c
   147c2:	e7ff      	b.n	147c4 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x14e>
   147c4:	f247 0173 	movw	r1, #28787	; 0x7073
   147c8:	f2c0 0101 	movt	r1, #1
   147cc:	9817      	ldr	r0, [sp, #92]	; 0x5c
   147ce:	f7fb fc5d 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   147d2:	9012      	str	r0, [sp, #72]	; 0x48
   147d4:	9111      	str	r1, [sp, #68]	; 0x44
   147d6:	e7ff      	b.n	147d8 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x162>
   147d8:	9816      	ldr	r0, [sp, #88]	; 0x58
   147da:	902d      	str	r0, [sp, #180]	; 0xb4
   147dc:	9915      	ldr	r1, [sp, #84]	; 0x54
   147de:	912e      	str	r1, [sp, #184]	; 0xb8
   147e0:	9a14      	ldr	r2, [sp, #80]	; 0x50
   147e2:	922f      	str	r2, [sp, #188]	; 0xbc
   147e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   147e6:	9330      	str	r3, [sp, #192]	; 0xc0
   147e8:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
   147ec:	f8cd c0c4 	str.w	ip, [sp, #196]	; 0xc4
   147f0:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
   147f4:	f8cd e0c8 	str.w	lr, [sp, #200]	; 0xc8
   147f8:	466c      	mov	r4, sp
   147fa:	2503      	movs	r5, #3
   147fc:	6025      	str	r5, [r4, #0]
   147fe:	a827      	add	r0, sp, #156	; 0x9c
   14800:	ab2d      	add	r3, sp, #180	; 0xb4
   14802:	9919      	ldr	r1, [sp, #100]	; 0x64
   14804:	462a      	mov	r2, r5
   14806:	f7fa fd04 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   1480a:	e7ff      	b.n	1480c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x196>
   1480c:	f64f 208c 	movw	r0, #64140	; 0xfa8c
   14810:	f2c0 0001 	movt	r0, #1
   14814:	f002 f93f 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14818:	9010      	str	r0, [sp, #64]	; 0x40
   1481a:	e7ff      	b.n	1481c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1a6>
   1481c:	a827      	add	r0, sp, #156	; 0x9c
   1481e:	9910      	ldr	r1, [sp, #64]	; 0x40
   14820:	f002 f976 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14824:	defe      	udf	#254	; 0xfe
   14826:	2000      	movs	r0, #0
        let rc = unsafe { hal::hal_spi_txrx_noblock(
   14828:	900f      	str	r0, [sp, #60]	; 0x3c
   1482a:	991e      	ldr	r1, [sp, #120]	; 0x78
   1482c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1482e:	9b21      	ldr	r3, [sp, #132]	; 0x84
   14830:	f004 ffaa 	bl	19788 <hal_spi_txrx_noblock>
   14834:	903e      	str	r0, [sp, #248]	; 0xf8
   14836:	e7ff      	b.n	14838 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1c2>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14838:	f24f 7058 	movw	r0, #63320	; 0xf758
   1483c:	f2c0 0001 	movt	r0, #1
   14840:	6800      	ldr	r0, [r0, #0]
   14842:	a93e      	add	r1, sp, #248	; 0xf8
   14844:	913f      	str	r1, [sp, #252]	; 0xfc
   14846:	9040      	str	r0, [sp, #256]	; 0x100
   14848:	983f      	ldr	r0, [sp, #252]	; 0xfc
   1484a:	9062      	str	r0, [sp, #392]	; 0x188
   1484c:	9940      	ldr	r1, [sp, #256]	; 0x100
   1484e:	9163      	str	r1, [sp, #396]	; 0x18c
   14850:	6802      	ldr	r2, [r0, #0]
   14852:	680b      	ldr	r3, [r1, #0]
   14854:	429a      	cmp	r2, r3
   14856:	900e      	str	r0, [sp, #56]	; 0x38
   14858:	910d      	str	r1, [sp, #52]	; 0x34
   1485a:	d10c      	bne.n	14876 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x200>
   1485c:	e7ff      	b.n	1485e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x1e8>
   1485e:	f247 5030 	movw	r0, #30000	; 0x7530
        let timeout = 30_000;
   14862:	9067      	str	r0, [sp, #412]	; 0x19c
   14864:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14868:	fba0 0101 	umull	r0, r1, r0, r1
   1486c:	2900      	cmp	r1, #0
   1486e:	900c      	str	r0, [sp, #48]	; 0x30
   14870:	f040 8090 	bne.w	14994 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x31e>
   14874:	e072      	b.n	1495c <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2e6>
        assert_eq!(rc, 0, "spi fail");  //  TODO: Map to MynewtResult
   14876:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   1487a:	f2c0 0001 	movt	r0, #1
   1487e:	6801      	ldr	r1, [r0, #0]
   14880:	980e      	ldr	r0, [sp, #56]	; 0x38
   14882:	9050      	str	r0, [sp, #320]	; 0x140
   14884:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   14886:	9251      	str	r2, [sp, #324]	; 0x144
   14888:	f64f 2388 	movw	r3, #64136	; 0xfa88
   1488c:	f2c0 0301 	movt	r3, #1
   14890:	681b      	ldr	r3, [r3, #0]
   14892:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   14896:	f2c0 0c01 	movt	ip, #1
   1489a:	f8dc c000 	ldr.w	ip, [ip]
   1489e:	46ee      	mov	lr, sp
   148a0:	2400      	movs	r4, #0
   148a2:	f8ce 4000 	str.w	r4, [lr]
   148a6:	a852      	add	r0, sp, #328	; 0x148
   148a8:	2201      	movs	r2, #1
   148aa:	910b      	str	r1, [sp, #44]	; 0x2c
   148ac:	4619      	mov	r1, r3
   148ae:	4663      	mov	r3, ip
   148b0:	f7fa fcaf 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   148b4:	e7ff      	b.n	148b6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x240>
   148b6:	a850      	add	r0, sp, #320	; 0x140
   148b8:	904d      	str	r0, [sp, #308]	; 0x134
   148ba:	a851      	add	r0, sp, #324	; 0x144
   148bc:	904e      	str	r0, [sp, #312]	; 0x138
   148be:	a852      	add	r0, sp, #328	; 0x148
   148c0:	904f      	str	r0, [sp, #316]	; 0x13c
   148c2:	984d      	ldr	r0, [sp, #308]	; 0x134
   148c4:	9064      	str	r0, [sp, #400]	; 0x190
   148c6:	994e      	ldr	r1, [sp, #312]	; 0x138
   148c8:	9165      	str	r1, [sp, #404]	; 0x194
   148ca:	9a4f      	ldr	r2, [sp, #316]	; 0x13c
   148cc:	9266      	str	r2, [sp, #408]	; 0x198
   148ce:	f64f 739f 	movw	r3, #65439	; 0xff9f
   148d2:	f2c0 0300 	movt	r3, #0
   148d6:	910a      	str	r1, [sp, #40]	; 0x28
   148d8:	4619      	mov	r1, r3
   148da:	9209      	str	r2, [sp, #36]	; 0x24
   148dc:	f7fb fb97 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   148e0:	9008      	str	r0, [sp, #32]
   148e2:	9107      	str	r1, [sp, #28]
   148e4:	e7ff      	b.n	148e6 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x270>
   148e6:	f64f 719f 	movw	r1, #65439	; 0xff9f
   148ea:	f2c0 0100 	movt	r1, #0
   148ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   148f0:	f7fb fb8d 	bl	1000e <_ZN4core3fmt10ArgumentV13new17h4775deab82f97fcdE>
   148f4:	9006      	str	r0, [sp, #24]
   148f6:	9105      	str	r1, [sp, #20]
   148f8:	e7ff      	b.n	148fa <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x284>
   148fa:	f247 0173 	movw	r1, #28787	; 0x7073
   148fe:	f2c0 0101 	movt	r1, #1
   14902:	9809      	ldr	r0, [sp, #36]	; 0x24
   14904:	f7fb fbc2 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14908:	9004      	str	r0, [sp, #16]
   1490a:	9103      	str	r1, [sp, #12]
   1490c:	e7ff      	b.n	1490e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x298>
   1490e:	9808      	ldr	r0, [sp, #32]
   14910:	9047      	str	r0, [sp, #284]	; 0x11c
   14912:	9907      	ldr	r1, [sp, #28]
   14914:	9148      	str	r1, [sp, #288]	; 0x120
   14916:	9a06      	ldr	r2, [sp, #24]
   14918:	9249      	str	r2, [sp, #292]	; 0x124
   1491a:	9b05      	ldr	r3, [sp, #20]
   1491c:	934a      	str	r3, [sp, #296]	; 0x128
   1491e:	f8dd c010 	ldr.w	ip, [sp, #16]
   14922:	f8cd c12c 	str.w	ip, [sp, #300]	; 0x12c
   14926:	f8dd e00c 	ldr.w	lr, [sp, #12]
   1492a:	f8cd e130 	str.w	lr, [sp, #304]	; 0x130
   1492e:	466c      	mov	r4, sp
   14930:	2503      	movs	r5, #3
   14932:	6025      	str	r5, [r4, #0]
   14934:	a841      	add	r0, sp, #260	; 0x104
   14936:	ab47      	add	r3, sp, #284	; 0x11c
   14938:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1493a:	462a      	mov	r2, r5
   1493c:	f7fa fc69 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14940:	e7ff      	b.n	14942 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2cc>
   14942:	f64f 209c 	movw	r0, #64156	; 0xfa9c
   14946:	f2c0 0001 	movt	r0, #1
   1494a:	f002 f8a4 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   1494e:	9002      	str	r0, [sp, #8]
   14950:	e7ff      	b.n	14952 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2dc>
   14952:	a841      	add	r0, sp, #260	; 0x104
   14954:	9902      	ldr	r1, [sp, #8]
   14956:	f002 f8db 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1495a:	defe      	udf	#254	; 0xfe
   1495c:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14960:	f2c1 0062 	movt	r0, #4194	; 0x1062
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14964:	990c      	ldr	r1, [sp, #48]	; 0x30
   14966:	fba1 0200 	umull	r0, r2, r1, r0
   1496a:	0991      	lsrs	r1, r2, #6
   1496c:	f244 227c 	movw	r2, #17020	; 0x427c
   14970:	f2c2 0200 	movt	r2, #8192	; 0x2000
   14974:	9001      	str	r0, [sp, #4]
   14976:	4610      	mov	r0, r2
   14978:	f006 f8d2 	bl	1ab20 <os_sem_pend>
   1497c:	e7ff      	b.n	1497e <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x308>
    if len == 1 {  //  If writing only 1 byte...
   1497e:	e7ff      	b.n	14980 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x30a>
   14980:	2019      	movs	r0, #25
   14982:	2101      	movs	r1, #1
    unsafe { hal::hal_gpio_write(SPI_SS_PIN, 1) };
   14984:	f004 f9fc 	bl	18d80 <hal_gpio_write>
   14988:	e7ff      	b.n	1498a <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x314>
   1498a:	2000      	movs	r0, #0
    Ok(())
   1498c:	9022      	str	r0, [sp, #136]	; 0x88
   1498e:	2001      	movs	r0, #1
   14990:	9022      	str	r0, [sp, #136]	; 0x88
}
   14992:	e686      	b.n	146a2 <_ZN6mynewt3spi26internal_spi_noblock_write17hd2832cf50bee2778E+0x2c>
        unsafe { os::os_sem_pend(&mut SPI_SEM, timeout * OS_TICKS_PER_SEC / 1000) };
   14994:	f64f 1080 	movw	r0, #63872	; 0xf980
   14998:	f2c0 0001 	movt	r0, #1
   1499c:	f64f 22ac 	movw	r2, #64172	; 0xfaac
   149a0:	f2c0 0201 	movt	r2, #1
   149a4:	2121      	movs	r1, #33	; 0x21
   149a6:	f002 f87d 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   149aa:	defe      	udf	#254	; 0xfe

000149ac <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E>:

/// Called by interrupt handler after Non-blocking SPI transfer has completed
extern "C" fn spi_noblock_handler(_arg: Ptr, _len: i32) {
   149ac:	b5b0      	push	{r4, r5, r7, lr}
   149ae:	b0ae      	sub	sp, #184	; 0xb8
   149b0:	9027      	str	r0, [sp, #156]	; 0x9c
   149b2:	9128      	str	r1, [sp, #160]	; 0xa0
    //  Signal to internal_spi_noblock_write() that SPI request has been completed.
    let rc = unsafe { os::os_sem_release(&mut SPI_SEM) };
   149b4:	f244 207c 	movw	r0, #17020	; 0x427c
   149b8:	f2c2 0000 	movt	r0, #8192	; 0x2000
   149bc:	f006 f87e 	bl	1aabc <os_sem_release>
   149c0:	900d      	str	r0, [sp, #52]	; 0x34
   149c2:	e7ff      	b.n	149c4 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x18>
    assert_eq!(rc, 0, "sem fail");
   149c4:	f24f 7058 	movw	r0, #63320	; 0xf758
   149c8:	f2c0 0001 	movt	r0, #1
   149cc:	6800      	ldr	r0, [r0, #0]
   149ce:	a90d      	add	r1, sp, #52	; 0x34
   149d0:	910e      	str	r1, [sp, #56]	; 0x38
   149d2:	900f      	str	r0, [sp, #60]	; 0x3c
   149d4:	980e      	ldr	r0, [sp, #56]	; 0x38
   149d6:	9029      	str	r0, [sp, #164]	; 0xa4
   149d8:	990f      	ldr	r1, [sp, #60]	; 0x3c
   149da:	912a      	str	r1, [sp, #168]	; 0xa8
   149dc:	6802      	ldr	r2, [r0, #0]
   149de:	680b      	ldr	r3, [r1, #0]
   149e0:	429a      	cmp	r2, r3
   149e2:	900c      	str	r0, [sp, #48]	; 0x30
   149e4:	910b      	str	r1, [sp, #44]	; 0x2c
   149e6:	d102      	bne.n	149ee <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x42>
   149e8:	e7ff      	b.n	149ea <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x3e>
}
   149ea:	b02e      	add	sp, #184	; 0xb8
   149ec:	bdb0      	pop	{r4, r5, r7, pc}
    assert_eq!(rc, 0, "sem fail");
   149ee:	f24f 70b0 	movw	r0, #63408	; 0xf7b0
   149f2:	f2c0 0001 	movt	r0, #1
   149f6:	6801      	ldr	r1, [r0, #0]
   149f8:	980c      	ldr	r0, [sp, #48]	; 0x30
   149fa:	901f      	str	r0, [sp, #124]	; 0x7c
   149fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   149fe:	9220      	str	r2, [sp, #128]	; 0x80
   14a00:	f64f 03c8 	movw	r3, #63688	; 0xf8c8
   14a04:	f2c0 0301 	movt	r3, #1
   14a08:	681b      	ldr	r3, [r3, #0]
   14a0a:	f24f 7cd0 	movw	ip, #63440	; 0xf7d0
   14a0e:	f2c0 0c01 	movt	ip, #1
   14a12:	f8dc c000 	ldr.w	ip, [ip]
   14a16:	46ee      	mov	lr, sp
   14a18:	2400      	movs	r4, #0
   14a1a:	f8ce 4000 	str.w	r4, [lr]
   14a1e:	a821      	add	r0, sp, #132	; 0x84
   14a20:	2201      	movs	r2, #1
   14a22:	910a      	str	r1, [sp, #40]	; 0x28
   14a24:	4619      	mov	r1, r3
   14a26:	4663      	mov	r3, ip
   14a28:	f7fa fbf3 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14a2c:	e7ff      	b.n	14a2e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x82>
   14a2e:	a81f      	add	r0, sp, #124	; 0x7c
   14a30:	901c      	str	r0, [sp, #112]	; 0x70
   14a32:	a820      	add	r0, sp, #128	; 0x80
   14a34:	901d      	str	r0, [sp, #116]	; 0x74
   14a36:	a821      	add	r0, sp, #132	; 0x84
   14a38:	901e      	str	r0, [sp, #120]	; 0x78
   14a3a:	981c      	ldr	r0, [sp, #112]	; 0x70
   14a3c:	902b      	str	r0, [sp, #172]	; 0xac
   14a3e:	991d      	ldr	r1, [sp, #116]	; 0x74
   14a40:	912c      	str	r1, [sp, #176]	; 0xb0
   14a42:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   14a44:	922d      	str	r2, [sp, #180]	; 0xb4
   14a46:	f64f 73f3 	movw	r3, #65523	; 0xfff3
   14a4a:	f2c0 0300 	movt	r3, #0
   14a4e:	9109      	str	r1, [sp, #36]	; 0x24
   14a50:	4619      	mov	r1, r3
   14a52:	9208      	str	r2, [sp, #32]
   14a54:	f7fb fb05 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14a58:	9007      	str	r0, [sp, #28]
   14a5a:	9106      	str	r1, [sp, #24]
   14a5c:	e7ff      	b.n	14a5e <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xb2>
   14a5e:	f64f 71f3 	movw	r1, #65523	; 0xfff3
   14a62:	f2c0 0100 	movt	r1, #0
   14a66:	9809      	ldr	r0, [sp, #36]	; 0x24
   14a68:	f7fb fafb 	bl	10062 <_ZN4core3fmt10ArgumentV13new17had883e363867a05eE>
   14a6c:	9005      	str	r0, [sp, #20]
   14a6e:	9104      	str	r1, [sp, #16]
   14a70:	e7ff      	b.n	14a72 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xc6>
   14a72:	f247 0173 	movw	r1, #28787	; 0x7073
   14a76:	f2c0 0101 	movt	r1, #1
   14a7a:	9808      	ldr	r0, [sp, #32]
   14a7c:	f7fb fb06 	bl	1008c <_ZN4core3fmt10ArgumentV13new17hcc7023231bfd020dE>
   14a80:	9003      	str	r0, [sp, #12]
   14a82:	9102      	str	r1, [sp, #8]
   14a84:	e7ff      	b.n	14a86 <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0xda>
   14a86:	9807      	ldr	r0, [sp, #28]
   14a88:	9016      	str	r0, [sp, #88]	; 0x58
   14a8a:	9906      	ldr	r1, [sp, #24]
   14a8c:	9117      	str	r1, [sp, #92]	; 0x5c
   14a8e:	9a05      	ldr	r2, [sp, #20]
   14a90:	9218      	str	r2, [sp, #96]	; 0x60
   14a92:	9b04      	ldr	r3, [sp, #16]
   14a94:	9319      	str	r3, [sp, #100]	; 0x64
   14a96:	f8dd c00c 	ldr.w	ip, [sp, #12]
   14a9a:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
   14a9e:	f8dd e008 	ldr.w	lr, [sp, #8]
   14aa2:	f8cd e06c 	str.w	lr, [sp, #108]	; 0x6c
   14aa6:	466c      	mov	r4, sp
   14aa8:	2503      	movs	r5, #3
   14aaa:	6025      	str	r5, [r4, #0]
   14aac:	a810      	add	r0, sp, #64	; 0x40
   14aae:	ab16      	add	r3, sp, #88	; 0x58
   14ab0:	990a      	ldr	r1, [sp, #40]	; 0x28
   14ab2:	462a      	mov	r2, r5
   14ab4:	f7fa fbad 	bl	f212 <_ZN4core3fmt9Arguments6new_v117h1fbb7837cd5cb202E>
   14ab8:	e7ff      	b.n	14aba <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x10e>
   14aba:	f64f 20bc 	movw	r0, #64188	; 0xfabc
   14abe:	f2c0 0001 	movt	r0, #1
   14ac2:	f001 ffe8 	bl	16a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>
   14ac6:	9001      	str	r0, [sp, #4]
   14ac8:	e7ff      	b.n	14aca <_ZN6mynewt3spi19spi_noblock_handler17hd073b54469bb6849E+0x11e>
   14aca:	a810      	add	r0, sp, #64	; 0x40
   14acc:	9901      	ldr	r1, [sp, #4]
   14ace:	f002 f81f 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   14ad2:	defe      	udf	#254	; 0xfe

00014ad4 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E>:

/// Sleep for the specified number of milliseconds
fn delay_ms(ms: u8) {
   14ad4:	b580      	push	{r7, lr}
   14ad6:	b084      	sub	sp, #16
   14ad8:	4601      	mov	r1, r0
   14ada:	f88d 000b 	strb.w	r0, [sp, #11]
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14ade:	b2c0      	uxtb	r0, r0
   14ae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14ae4:	fba0 0202 	umull	r0, r2, r0, r2
   14ae8:	2a00      	cmp	r2, #0
   14aea:	9001      	str	r0, [sp, #4]
   14aec:	d110      	bne.n	14b10 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x3c>
   14aee:	e7ff      	b.n	14af0 <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x1c>
   14af0:	f644 50d3 	movw	r0, #19923	; 0x4dd3
   14af4:	f2c1 0062 	movt	r0, #4194	; 0x1062
   14af8:	9901      	ldr	r1, [sp, #4]
   14afa:	fba1 0200 	umull	r0, r2, r1, r0
   14afe:	0992      	lsrs	r2, r2, #6
   14b00:	9203      	str	r2, [sp, #12]
    unsafe { os::os_time_delay(delay_ticks) };
   14b02:	9000      	str	r0, [sp, #0]
   14b04:	4610      	mov	r0, r2
   14b06:	f006 f959 	bl	1adbc <os_time_delay>
   14b0a:	e7ff      	b.n	14b0c <_ZN6mynewt3spi8delay_ms17h884ff5ed8d9e3926E+0x38>
}
   14b0c:	b004      	add	sp, #16
   14b0e:	bd80      	pop	{r7, pc}
    let delay_ticks = (ms as u32) * OS_TICKS_PER_SEC / 1000;
   14b10:	f64f 1080 	movw	r0, #63872	; 0xf980
   14b14:	f2c0 0001 	movt	r0, #1
   14b18:	f64f 22cc 	movw	r2, #64204	; 0xfacc
   14b1c:	f2c0 0201 	movt	r2, #1
   14b20:	2121      	movs	r1, #33	; 0x21
   14b22:	f001 ffbf 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14b26:	defe      	udf	#254	; 0xfe

00014b28 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E>:
   14b28:	b082      	sub	sp, #8
   14b2a:	9001      	str	r0, [sp, #4]
   14b2c:	9000      	str	r0, [sp, #0]
   14b2e:	e7ff      	b.n	14b30 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h867621c57b3ac302E+0x8>
   14b30:	9800      	ldr	r0, [sp, #0]
   14b32:	fab0 f180 	clz	r1, r0
   14b36:	0948      	lsrs	r0, r1, #5
   14b38:	b002      	add	sp, #8
   14b3a:	4770      	bx	lr

00014b3c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE>:

macro_rules! impl_to_primitive_uint_to_uint {
    ($SrcT:ident : $( $(#[$cfg:meta])* fn $method:ident -> $DstT:ident ; )*) => {$(
        #[inline]
        $(#[$cfg])*
        fn $method(&self) -> Option<$DstT> {
   14b3c:	b08a      	sub	sp, #40	; 0x28
   14b3e:	9005      	str	r0, [sp, #20]
   14b40:	2100      	movs	r1, #0
            let max = $DstT::MAX as $SrcT;
   14b42:	9107      	str	r1, [sp, #28]
   14b44:	21ff      	movs	r1, #255	; 0xff
   14b46:	9106      	str	r1, [sp, #24]
   14b48:	2108      	movs	r1, #8
   14b4a:	9108      	str	r1, [sp, #32]
   14b4c:	9908      	ldr	r1, [sp, #32]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14b4e:	9003      	str	r0, [sp, #12]
   14b50:	9102      	str	r1, [sp, #8]
   14b52:	e016      	b.n	14b82 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x46>
   14b54:	2001      	movs	r0, #1
   14b56:	f88d 0013 	strb.w	r0, [sp, #19]
   14b5a:	e00c      	b.n	14b76 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14b5c:	2000      	movs	r0, #0
   14b5e:	f88d 0013 	strb.w	r0, [sp, #19]
   14b62:	e008      	b.n	14b76 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x3a>
   14b64:	9803      	ldr	r0, [sp, #12]
   14b66:	6801      	ldr	r1, [r0, #0]
   14b68:	6842      	ldr	r2, [r0, #4]
   14b6a:	f5b1 7180 	subs.w	r1, r1, #256	; 0x100
   14b6e:	f172 0200 	sbcs.w	r2, r2, #0
   14b72:	d3ef      	bcc.n	14b54 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14b74:	e7f2      	b.n	14b5c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x20>
   14b76:	f89d 0013 	ldrb.w	r0, [sp, #19]
   14b7a:	07c0      	lsls	r0, r0, #31
   14b7c:	2800      	cmp	r0, #0
   14b7e:	d10e      	bne.n	14b9e <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x62>
   14b80:	e009      	b.n	14b96 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x5a>
   14b82:	2001      	movs	r0, #1
   14b84:	9009      	str	r0, [sp, #36]	; 0x24
   14b86:	9809      	ldr	r0, [sp, #36]	; 0x24
   14b88:	9001      	str	r0, [sp, #4]
   14b8a:	e7ff      	b.n	14b8c <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x50>
   14b8c:	9802      	ldr	r0, [sp, #8]
   14b8e:	9901      	ldr	r1, [sp, #4]
   14b90:	4288      	cmp	r0, r1
   14b92:	d9df      	bls.n	14b54 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x18>
   14b94:	e7e6      	b.n	14b64 <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x28>
   14b96:	2000      	movs	r0, #0
                Some(*self as $DstT)
            } else {
                None
   14b98:	f88d 0010 	strb.w	r0, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14b9c:	e007      	b.n	14bae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
                Some(*self as $DstT)
   14b9e:	9803      	ldr	r0, [sp, #12]
   14ba0:	7801      	ldrb	r1, [r0, #0]
   14ba2:	f88d 1011 	strb.w	r1, [sp, #17]
   14ba6:	2101      	movs	r1, #1
   14ba8:	f88d 1010 	strb.w	r1, [sp, #16]
            if size_of::<$SrcT>() <= size_of::<$DstT>() || *self <= max {
   14bac:	e7ff      	b.n	14bae <_ZN53_$LT$u64$u20$as$u20$num_traits..cast..ToPrimitive$GT$5to_u817hc98c139cf59bd64eE+0x72>
            }
        }
   14bae:	f89d 0010 	ldrb.w	r0, [sp, #16]
   14bb2:	f89d 1011 	ldrb.w	r1, [sp, #17]
   14bb6:	b00a      	add	sp, #40	; 0x28
   14bb8:	4770      	bx	lr

00014bba <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE>:
   14bba:	b580      	push	{r7, lr}
   14bbc:	b090      	sub	sp, #64	; 0x40
   14bbe:	2200      	movs	r2, #0
   14bc0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14bc4:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14bc8:	2201      	movs	r2, #1
   14bca:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   14bce:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
   14bd2:	680a      	ldr	r2, [r1, #0]
   14bd4:	2a00      	cmp	r2, #0
   14bd6:	9101      	str	r1, [sp, #4]
   14bd8:	9000      	str	r0, [sp, #0]
   14bda:	d001      	beq.n	14be0 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x26>
   14bdc:	e7ff      	b.n	14bde <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x24>
   14bde:	e004      	b.n	14bea <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x30>
   14be0:	2000      	movs	r0, #0
   14be2:	9900      	ldr	r1, [sp, #0]
   14be4:	6008      	str	r0, [r1, #0]
   14be6:	e032      	b.n	14c4e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14be8:	defe      	udf	#254	; 0xfe
   14bea:	2000      	movs	r0, #0
   14bec:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14bf0:	9901      	ldr	r1, [sp, #4]
   14bf2:	684a      	ldr	r2, [r1, #4]
   14bf4:	688b      	ldr	r3, [r1, #8]
   14bf6:	f8d1 c00c 	ldr.w	ip, [r1, #12]
   14bfa:	f8cd c010 	str.w	ip, [sp, #16]
   14bfe:	9303      	str	r3, [sp, #12]
   14c00:	9202      	str	r2, [sp, #8]
   14c02:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14c06:	9802      	ldr	r0, [sp, #8]
   14c08:	9a03      	ldr	r2, [sp, #12]
   14c0a:	9b04      	ldr	r3, [sp, #16]
   14c0c:	930d      	str	r3, [sp, #52]	; 0x34
   14c0e:	920c      	str	r2, [sp, #48]	; 0x30
   14c10:	900b      	str	r0, [sp, #44]	; 0x2c
   14c12:	980b      	ldr	r0, [sp, #44]	; 0x2c
   14c14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   14c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14c18:	930a      	str	r3, [sp, #40]	; 0x28
   14c1a:	9209      	str	r2, [sp, #36]	; 0x24
   14c1c:	9008      	str	r0, [sp, #32]
   14c1e:	a805      	add	r0, sp, #20
   14c20:	a908      	add	r1, sp, #32
   14c22:	f7fd fc17 	bl	12454 <_ZN127_$LT$embedded_graphics..primitives..rectangle..RectangleIterator$LT$C$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next28_$u7b$$u7b$closure$u7d$$u7d$17h47da50532ef98622E>
   14c26:	e7ff      	b.n	14c28 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x6e>
   14c28:	9805      	ldr	r0, [sp, #20]
   14c2a:	9906      	ldr	r1, [sp, #24]
   14c2c:	9a07      	ldr	r2, [sp, #28]
   14c2e:	9b00      	ldr	r3, [sp, #0]
   14c30:	60da      	str	r2, [r3, #12]
   14c32:	6099      	str	r1, [r3, #8]
   14c34:	6058      	str	r0, [r3, #4]
   14c36:	2001      	movs	r0, #1
   14c38:	6018      	str	r0, [r3, #0]
   14c3a:	e008      	b.n	14c4e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x94>
   14c3c:	9801      	ldr	r0, [sp, #4]
   14c3e:	6801      	ldr	r1, [r0, #0]
   14c40:	2901      	cmp	r1, #1
   14c42:	d00c      	beq.n	14c5e <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa4>
   14c44:	e015      	b.n	14c72 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb8>
   14c46:	2000      	movs	r0, #0
   14c48:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
   14c4c:	e7f6      	b.n	14c3c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14c4e:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
   14c52:	07c0      	lsls	r0, r0, #31
   14c54:	2800      	cmp	r0, #0
   14c56:	d1f6      	bne.n	14c46 <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x8c>
   14c58:	e7f0      	b.n	14c3c <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0x82>
   14c5a:	b010      	add	sp, #64	; 0x40
   14c5c:	bd80      	pop	{r7, pc}
   14c5e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   14c62:	07c0      	lsls	r0, r0, #31
   14c64:	2800      	cmp	r0, #0
   14c66:	d0f8      	beq.n	14c5a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14c68:	e7ff      	b.n	14c6a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xb0>
   14c6a:	2000      	movs	r0, #0
   14c6c:	f88d 003b 	strb.w	r0, [sp, #59]	; 0x3b
   14c70:	e7f3      	b.n	14c5a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>
   14c72:	e7f2      	b.n	14c5a <_ZN4core6option15Option$LT$T$GT$3map17h35c87b4fd512e37dE+0xa0>

00014c74 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE>:
   14c74:	b084      	sub	sp, #16
   14c76:	9002      	str	r0, [sp, #8]
   14c78:	6801      	ldr	r1, [r0, #0]
   14c7a:	2900      	cmp	r1, #0
   14c7c:	9000      	str	r0, [sp, #0]
   14c7e:	d001      	beq.n	14c84 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x10>
   14c80:	e7ff      	b.n	14c82 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0xe>
   14c82:	e003      	b.n	14c8c <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x18>
   14c84:	2000      	movs	r0, #0
   14c86:	9001      	str	r0, [sp, #4]
   14c88:	e006      	b.n	14c98 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14c8a:	defe      	udf	#254	; 0xfe
   14c8c:	9800      	ldr	r0, [sp, #0]
   14c8e:	f100 0108 	add.w	r1, r0, #8
   14c92:	9103      	str	r1, [sp, #12]
   14c94:	9101      	str	r1, [sp, #4]
   14c96:	e7ff      	b.n	14c98 <_ZN4core6option15Option$LT$T$GT$6as_ref17h8fabac108eb312deE+0x24>
   14c98:	9801      	ldr	r0, [sp, #4]
   14c9a:	b004      	add	sp, #16
   14c9c:	4770      	bx	lr

00014c9e <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE>:
   14c9e:	b510      	push	{r4, lr}
   14ca0:	b088      	sub	sp, #32
   14ca2:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   14ca6:	468e      	mov	lr, r1
   14ca8:	4604      	mov	r4, r0
   14caa:	f8ad 0010 	strh.w	r0, [sp, #16]
   14cae:	f8ad 1012 	strh.w	r1, [sp, #18]
   14cb2:	9205      	str	r2, [sp, #20]
   14cb4:	9306      	str	r3, [sp, #24]
   14cb6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14cba:	4601      	mov	r1, r0
   14cbc:	2800      	cmp	r0, #0
   14cbe:	9303      	str	r3, [sp, #12]
   14cc0:	9202      	str	r2, [sp, #8]
   14cc2:	f8cd c004 	str.w	ip, [sp, #4]
   14cc6:	d001      	beq.n	14ccc <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2e>
   14cc8:	e7ff      	b.n	14cca <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x2c>
   14cca:	e006      	b.n	14cda <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x3c>
   14ccc:	9802      	ldr	r0, [sp, #8]
   14cce:	9903      	ldr	r1, [sp, #12]
   14cd0:	9a01      	ldr	r2, [sp, #4]
   14cd2:	f001 fe9d 	bl	16a10 <_ZN4core6option13expect_failed17had6579abaad447b4E>
   14cd6:	defe      	udf	#254	; 0xfe
   14cd8:	defe      	udf	#254	; 0xfe
   14cda:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   14cde:	4601      	mov	r1, r0
   14ce0:	f8ad 001e 	strh.w	r0, [sp, #30]
   14ce4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
   14ce8:	2801      	cmp	r0, #1
   14cea:	9100      	str	r1, [sp, #0]
   14cec:	d103      	bne.n	14cf6 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x58>
   14cee:	e7ff      	b.n	14cf0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>
   14cf0:	9800      	ldr	r0, [sp, #0]
   14cf2:	b008      	add	sp, #32
   14cf4:	bd10      	pop	{r4, pc}
   14cf6:	e7fb      	b.n	14cf0 <_ZN4core6option15Option$LT$T$GT$6expect17he7ec4bffa72929feE+0x52>

00014cf8 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E>:
   14cf8:	b084      	sub	sp, #16
   14cfa:	460b      	mov	r3, r1
   14cfc:	4684      	mov	ip, r0
   14cfe:	f88d 000c 	strb.w	r0, [sp, #12]
   14d02:	f88d 100d 	strb.w	r1, [sp, #13]
   14d06:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14d0a:	07c1      	lsls	r1, r0, #31
   14d0c:	2900      	cmp	r1, #0
   14d0e:	9202      	str	r2, [sp, #8]
   14d10:	d001      	beq.n	14d16 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1e>
   14d12:	e7ff      	b.n	14d14 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x1c>
   14d14:	e009      	b.n	14d2a <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x32>
   14d16:	f64f 20dc 	movw	r0, #64220	; 0xfadc
   14d1a:	f2c0 0001 	movt	r0, #1
   14d1e:	212b      	movs	r1, #43	; 0x2b
   14d20:	9a02      	ldr	r2, [sp, #8]
   14d22:	f001 febf 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d26:	defe      	udf	#254	; 0xfe
   14d28:	defe      	udf	#254	; 0xfe
   14d2a:	f89d 000d 	ldrb.w	r0, [sp, #13]
   14d2e:	4601      	mov	r1, r0
   14d30:	f88d 000f 	strb.w	r0, [sp, #15]
   14d34:	f89d 000c 	ldrb.w	r0, [sp, #12]
   14d38:	07c0      	lsls	r0, r0, #31
   14d3a:	2800      	cmp	r0, #0
   14d3c:	9101      	str	r1, [sp, #4]
   14d3e:	d003      	beq.n	14d48 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x50>
   14d40:	e7ff      	b.n	14d42 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>
   14d42:	9801      	ldr	r0, [sp, #4]
   14d44:	b004      	add	sp, #16
   14d46:	4770      	bx	lr
   14d48:	e7fb      	b.n	14d42 <_ZN4core6option15Option$LT$T$GT$6unwrap17h9e4a5c8cc26cecc8E+0x4a>

00014d4a <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E>:
   14d4a:	b088      	sub	sp, #32
   14d4c:	9004      	str	r0, [sp, #16]
   14d4e:	9105      	str	r1, [sp, #20]
   14d50:	9804      	ldr	r0, [sp, #16]
   14d52:	2800      	cmp	r0, #0
   14d54:	4601      	mov	r1, r0
   14d56:	bf18      	it	ne
   14d58:	2101      	movne	r1, #1
   14d5a:	2800      	cmp	r0, #0
   14d5c:	9203      	str	r2, [sp, #12]
   14d5e:	d001      	beq.n	14d64 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x1a>
   14d60:	e7ff      	b.n	14d62 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x18>
   14d62:	e009      	b.n	14d78 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x2e>
   14d64:	f64f 20dc 	movw	r0, #64220	; 0xfadc
   14d68:	f2c0 0001 	movt	r0, #1
   14d6c:	212b      	movs	r1, #43	; 0x2b
   14d6e:	9a03      	ldr	r2, [sp, #12]
   14d70:	f001 fe98 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   14d74:	defe      	udf	#254	; 0xfe
   14d76:	defe      	udf	#254	; 0xfe
   14d78:	9804      	ldr	r0, [sp, #16]
   14d7a:	9905      	ldr	r1, [sp, #20]
   14d7c:	9006      	str	r0, [sp, #24]
   14d7e:	9107      	str	r1, [sp, #28]
   14d80:	9a04      	ldr	r2, [sp, #16]
   14d82:	2a00      	cmp	r2, #0
   14d84:	9002      	str	r0, [sp, #8]
   14d86:	9101      	str	r1, [sp, #4]
   14d88:	d004      	beq.n	14d94 <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x4a>
   14d8a:	e7ff      	b.n	14d8c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>
   14d8c:	9802      	ldr	r0, [sp, #8]
   14d8e:	9901      	ldr	r1, [sp, #4]
   14d90:	b008      	add	sp, #32
   14d92:	4770      	bx	lr
   14d94:	e7fa      	b.n	14d8c <_ZN4core6option15Option$LT$T$GT$6unwrap17hb3560bf2e0afb1a5E+0x42>

00014d96 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E>:
   14d96:	b580      	push	{r7, lr}
   14d98:	b082      	sub	sp, #8
   14d9a:	9001      	str	r0, [sp, #4]
   14d9c:	f000 f82b 	bl	14df6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>
   14da0:	9000      	str	r0, [sp, #0]
   14da2:	e7ff      	b.n	14da4 <_ZN4core6option15Option$LT$T$GT$7is_none17h6be1171fb0660be8E+0xe>
   14da4:	2001      	movs	r0, #1
   14da6:	9900      	ldr	r1, [sp, #0]
   14da8:	4388      	bics	r0, r1
   14daa:	b002      	add	sp, #8
   14dac:	bd80      	pop	{r7, pc}

00014dae <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E>:
   14dae:	b082      	sub	sp, #8
   14db0:	9001      	str	r0, [sp, #4]
   14db2:	6800      	ldr	r0, [r0, #0]
   14db4:	2800      	cmp	r0, #0
   14db6:	d104      	bne.n	14dc2 <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x14>
   14db8:	e7ff      	b.n	14dba <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0xc>
   14dba:	2000      	movs	r0, #0
   14dbc:	f88d 0003 	strb.w	r0, [sp, #3]
   14dc0:	e003      	b.n	14dca <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14dc2:	2001      	movs	r0, #1
   14dc4:	f88d 0003 	strb.w	r0, [sp, #3]
   14dc8:	e7ff      	b.n	14dca <_ZN4core6option15Option$LT$T$GT$7is_some17h72a503f5a1dccab6E+0x1c>
   14dca:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14dce:	b002      	add	sp, #8
   14dd0:	4770      	bx	lr

00014dd2 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E>:
   14dd2:	b082      	sub	sp, #8
   14dd4:	9001      	str	r0, [sp, #4]
   14dd6:	6800      	ldr	r0, [r0, #0]
   14dd8:	2801      	cmp	r0, #1
   14dda:	d004      	beq.n	14de6 <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x14>
   14ddc:	e7ff      	b.n	14dde <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0xc>
   14dde:	2000      	movs	r0, #0
   14de0:	f88d 0003 	strb.w	r0, [sp, #3]
   14de4:	e003      	b.n	14dee <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14de6:	2001      	movs	r0, #1
   14de8:	f88d 0003 	strb.w	r0, [sp, #3]
   14dec:	e7ff      	b.n	14dee <_ZN4core6option15Option$LT$T$GT$7is_some17h9907799025835c34E+0x1c>
   14dee:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14df2:	b002      	add	sp, #8
   14df4:	4770      	bx	lr

00014df6 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE>:
   14df6:	b082      	sub	sp, #8
   14df8:	9001      	str	r0, [sp, #4]
   14dfa:	8800      	ldrh	r0, [r0, #0]
   14dfc:	2801      	cmp	r0, #1
   14dfe:	d004      	beq.n	14e0a <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x14>
   14e00:	e7ff      	b.n	14e02 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0xc>
   14e02:	2000      	movs	r0, #0
   14e04:	f88d 0003 	strb.w	r0, [sp, #3]
   14e08:	e003      	b.n	14e12 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14e0a:	2001      	movs	r0, #1
   14e0c:	f88d 0003 	strb.w	r0, [sp, #3]
   14e10:	e7ff      	b.n	14e12 <_ZN4core6option15Option$LT$T$GT$7is_some17hf5a249c3c3997ccdE+0x1c>
   14e12:	f89d 0003 	ldrb.w	r0, [sp, #3]
   14e16:	b002      	add	sp, #8
   14e18:	4770      	bx	lr

00014e1a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E>:
   14e1a:	b580      	push	{r7, lr}
   14e1c:	b086      	sub	sp, #24
   14e1e:	9000      	str	r0, [sp, #0]
   14e20:	2000      	movs	r0, #0
   14e22:	f88d 000f 	strb.w	r0, [sp, #15]
   14e26:	f88d 000e 	strb.w	r0, [sp, #14]
   14e2a:	2001      	movs	r0, #1
   14e2c:	f88d 000f 	strb.w	r0, [sp, #15]
   14e30:	f88d 000e 	strb.w	r0, [sp, #14]
   14e34:	9800      	ldr	r0, [sp, #0]
   14e36:	2800      	cmp	r0, #0
   14e38:	4601      	mov	r1, r0
   14e3a:	bf18      	it	ne
   14e3c:	2101      	movne	r1, #1
   14e3e:	2800      	cmp	r0, #0
   14e40:	d001      	beq.n	14e46 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2c>
   14e42:	e7ff      	b.n	14e44 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x2a>
   14e44:	e004      	b.n	14e50 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x36>
   14e46:	2000      	movs	r0, #0
   14e48:	f88d 0004 	strb.w	r0, [sp, #4]
   14e4c:	e019      	b.n	14e82 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14e4e:	defe      	udf	#254	; 0xfe
   14e50:	2000      	movs	r0, #0
   14e52:	f88d 000f 	strb.w	r0, [sp, #15]
   14e56:	9900      	ldr	r1, [sp, #0]
   14e58:	9105      	str	r1, [sp, #20]
   14e5a:	f88d 000e 	strb.w	r0, [sp, #14]
   14e5e:	9102      	str	r1, [sp, #8]
   14e60:	9802      	ldr	r0, [sp, #8]
   14e62:	f7fc ff1e 	bl	11ca2 <_ZN4core3ops8function6FnOnce9call_once17h975509b840c7fb0aE>
   14e66:	f88d 1005 	strb.w	r1, [sp, #5]
   14e6a:	f88d 0004 	strb.w	r0, [sp, #4]
   14e6e:	e7ff      	b.n	14e70 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x56>
   14e70:	e007      	b.n	14e82 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x68>
   14e72:	9800      	ldr	r0, [sp, #0]
   14e74:	2800      	cmp	r0, #0
   14e76:	d110      	bne.n	14e9a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x80>
   14e78:	e019      	b.n	14eae <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x94>
   14e7a:	2000      	movs	r0, #0
   14e7c:	f88d 000e 	strb.w	r0, [sp, #14]
   14e80:	e7f7      	b.n	14e72 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14e82:	f89d 000e 	ldrb.w	r0, [sp, #14]
   14e86:	07c0      	lsls	r0, r0, #31
   14e88:	2800      	cmp	r0, #0
   14e8a:	d1f6      	bne.n	14e7a <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x60>
   14e8c:	e7f1      	b.n	14e72 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x58>
   14e8e:	f89d 0004 	ldrb.w	r0, [sp, #4]
   14e92:	f89d 1005 	ldrb.w	r1, [sp, #5]
   14e96:	b006      	add	sp, #24
   14e98:	bd80      	pop	{r7, pc}
   14e9a:	f89d 000f 	ldrb.w	r0, [sp, #15]
   14e9e:	07c0      	lsls	r0, r0, #31
   14ea0:	2800      	cmp	r0, #0
   14ea2:	d0f4      	beq.n	14e8e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14ea4:	e7ff      	b.n	14ea6 <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x8c>
   14ea6:	2000      	movs	r0, #0
   14ea8:	f88d 000f 	strb.w	r0, [sp, #15]
   14eac:	e7ef      	b.n	14e8e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>
   14eae:	e7ee      	b.n	14e8e <_ZN4core6option15Option$LT$T$GT$8and_then17h6d972e74cf09fb88E+0x74>

00014eb0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE>:
    fn clone(&self) -> Self {
   14eb0:	b580      	push	{r7, lr}
   14eb2:	b09c      	sub	sp, #112	; 0x70
   14eb4:	911b      	str	r1, [sp, #108]	; 0x6c
   14eb6:	aa01      	add	r2, sp, #4
        Vec(self.0.clone())
   14eb8:	9000      	str	r0, [sp, #0]
   14eba:	4610      	mov	r0, r2
   14ebc:	f000 fafc 	bl	154b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>
   14ec0:	e7ff      	b.n	14ec2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h79ac4fe7609a483eE+0x12>
   14ec2:	a901      	add	r1, sp, #4
   14ec4:	2268      	movs	r2, #104	; 0x68
   14ec6:	9800      	ldr	r0, [sp, #0]
   14ec8:	f008 f9c0 	bl	1d24c <__aeabi_memcpy>
    }
   14ecc:	b01c      	add	sp, #112	; 0x70
   14ece:	bd80      	pop	{r7, pc}

00014ed0 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E>:
    fn clone(&self) -> Self {
   14ed0:	b580      	push	{r7, lr}
   14ed2:	b0b6      	sub	sp, #216	; 0xd8
   14ed4:	9135      	str	r1, [sp, #212]	; 0xd4
   14ed6:	aa02      	add	r2, sp, #8
        Vec(self.0.clone())
   14ed8:	9001      	str	r0, [sp, #4]
   14eda:	4610      	mov	r0, r2
   14edc:	f000 fb14 	bl	15508 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>
   14ee0:	e7ff      	b.n	14ee2 <_ZN70_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..clone..Clone$GT$5clone17h981a0821bc906ce6E+0x12>
   14ee2:	a902      	add	r1, sp, #8
   14ee4:	22cc      	movs	r2, #204	; 0xcc
   14ee6:	9801      	ldr	r0, [sp, #4]
   14ee8:	f008 f9b0 	bl	1d24c <__aeabi_memcpy>
    }
   14eec:	b036      	add	sp, #216	; 0xd8
   14eee:	bd80      	pop	{r7, pc}

00014ef0 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E>:
    fn drop(&mut self) {
   14ef0:	b580      	push	{r7, lr}
   14ef2:	b084      	sub	sp, #16
   14ef4:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14ef6:	f000 f84c 	bl	14f92 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>
   14efa:	9002      	str	r0, [sp, #8]
   14efc:	9101      	str	r1, [sp, #4]
   14efe:	e7ff      	b.n	14f00 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x10>
   14f00:	9802      	ldr	r0, [sp, #8]
   14f02:	9901      	ldr	r1, [sp, #4]
   14f04:	f000 ff10 	bl	15d28 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14f08:	e7ff      	b.n	14f0a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1a>
   14f0a:	e7ff      	b.n	14f0c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h41956c19cd17e236E+0x1c>
    }
   14f0c:	b004      	add	sp, #16
   14f0e:	bd80      	pop	{r7, pc}

00014f10 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E>:
    fn drop(&mut self) {
   14f10:	b580      	push	{r7, lr}
   14f12:	b084      	sub	sp, #16
   14f14:	9003      	str	r0, [sp, #12]
        unsafe { ptr::drop_in_place(&mut self[..]) }
   14f16:	f000 f848 	bl	14faa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14f1a:	9002      	str	r0, [sp, #8]
   14f1c:	9101      	str	r1, [sp, #4]
   14f1e:	e7ff      	b.n	14f20 <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x10>
   14f20:	9802      	ldr	r0, [sp, #8]
   14f22:	9901      	ldr	r1, [sp, #4]
   14f24:	f000 ff00 	bl	15d28 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>
   14f28:	e7ff      	b.n	14f2a <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1a>
   14f2a:	e7ff      	b.n	14f2c <_ZN73_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h60a2aa5306462590E+0x1c>
    }
   14f2c:	b004      	add	sp, #16
   14f2e:	bd80      	pop	{r7, pc}

00014f30 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E>:
    fn deref(&self) -> &[T] {
   14f30:	b580      	push	{r7, lr}
   14f32:	b084      	sub	sp, #16
   14f34:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14f36:	f000 fb0f 	bl	15558 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   14f3a:	9002      	str	r0, [sp, #8]
   14f3c:	9101      	str	r1, [sp, #4]
   14f3e:	e7ff      	b.n	14f40 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h162fb541a3af02e1E+0x10>
    }
   14f40:	9802      	ldr	r0, [sp, #8]
   14f42:	9901      	ldr	r1, [sp, #4]
   14f44:	b004      	add	sp, #16
   14f46:	bd80      	pop	{r7, pc}

00014f48 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>:
    fn deref(&self) -> &[T] {
   14f48:	b580      	push	{r7, lr}
   14f4a:	b084      	sub	sp, #16
   14f4c:	9003      	str	r0, [sp, #12]
        self.0.as_slice()
   14f4e:	f000 fb18 	bl	15582 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   14f52:	9002      	str	r0, [sp, #8]
   14f54:	9101      	str	r1, [sp, #4]
   14f56:	e7ff      	b.n	14f58 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E+0x10>
    }
   14f58:	9802      	ldr	r0, [sp, #8]
   14f5a:	9901      	ldr	r1, [sp, #4]
   14f5c:	b004      	add	sp, #16
   14f5e:	bd80      	pop	{r7, pc}

00014f60 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E>:
    fn drop(&mut self) {
   14f60:	b580      	push	{r7, lr}
   14f62:	b086      	sub	sp, #24
   14f64:	9005      	str	r0, [sp, #20]
            ptr::drop_in_place(&mut self.vec[self.next..]);
   14f66:	9003      	str	r0, [sp, #12]
   14f68:	f000 f81f 	bl	14faa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>
   14f6c:	9002      	str	r0, [sp, #8]
   14f6e:	9101      	str	r1, [sp, #4]
   14f70:	e7ff      	b.n	14f72 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x12>
   14f72:	9803      	ldr	r0, [sp, #12]
   14f74:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   14f78:	9104      	str	r1, [sp, #16]
   14f7a:	9a04      	ldr	r2, [sp, #16]
   14f7c:	9802      	ldr	r0, [sp, #8]
   14f7e:	9901      	ldr	r1, [sp, #4]
   14f80:	f000 fedf 	bl	15d42 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>
   14f84:	e7ff      	b.n	14f86 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x26>
   14f86:	e7ff      	b.n	14f88 <_ZN78_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..ops..drop..Drop$GT$4drop17h3d5255c3776ae3c8E+0x28>
   14f88:	2000      	movs	r0, #0
            self.vec.0.len = 0;
   14f8a:	9903      	ldr	r1, [sp, #12]
   14f8c:	6008      	str	r0, [r1, #0]
    }
   14f8e:	b006      	add	sp, #24
   14f90:	bd80      	pop	{r7, pc}

00014f92 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E>:

impl<T, N> ops::DerefMut for Vec<T, N>
where
    N: ArrayLength<T>,
{
    fn deref_mut(&mut self) -> &mut [T] {
   14f92:	b580      	push	{r7, lr}
   14f94:	b084      	sub	sp, #16
   14f96:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14f98:	f000 f8ff 	bl	1519a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   14f9c:	9002      	str	r0, [sp, #8]
   14f9e:	9101      	str	r1, [sp, #4]
   14fa0:	e7ff      	b.n	14fa2 <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h281b751ace1304f5E+0x10>
    }
   14fa2:	9802      	ldr	r0, [sp, #8]
   14fa4:	9901      	ldr	r1, [sp, #4]
   14fa6:	b004      	add	sp, #16
   14fa8:	bd80      	pop	{r7, pc}

00014faa <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E>:
    fn deref_mut(&mut self) -> &mut [T] {
   14faa:	b580      	push	{r7, lr}
   14fac:	b084      	sub	sp, #16
   14fae:	9003      	str	r0, [sp, #12]
        self.0.as_mut_slice()
   14fb0:	f000 f908 	bl	151c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   14fb4:	9002      	str	r0, [sp, #8]
   14fb6:	9101      	str	r1, [sp, #4]
   14fb8:	e7ff      	b.n	14fba <_ZN78_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..DerefMut$GT$9deref_mut17h7cb47aa5f3c591d7E+0x10>
    }
   14fba:	9802      	ldr	r0, [sp, #8]
   14fbc:	9901      	ldr	r1, [sp, #4]
   14fbe:	b004      	add	sp, #16
   14fc0:	bd80      	pop	{r7, pc}

00014fc2 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE>:
    pub fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   14fc2:	b580      	push	{r7, lr}
   14fc4:	b084      	sub	sp, #16
   14fc6:	9001      	str	r0, [sp, #4]
   14fc8:	9102      	str	r1, [sp, #8]
   14fca:	9203      	str	r2, [sp, #12]
        self.0.extend_from_slice(other)
   14fcc:	f000 f973 	bl	152b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   14fd0:	9000      	str	r0, [sp, #0]
   14fd2:	e7ff      	b.n	14fd4 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$17extend_from_slice17h334a9092bb57887cE+0x12>
    }
   14fd4:	9800      	ldr	r0, [sp, #0]
   14fd6:	f000 0001 	and.w	r0, r0, #1
   14fda:	b004      	add	sp, #16
   14fdc:	bd80      	pop	{r7, pc}

00014fde <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E>:
    pub fn new() -> Self {
   14fde:	b580      	push	{r7, lr}
   14fe0:	b09c      	sub	sp, #112	; 0x70
   14fe2:	a902      	add	r1, sp, #8
        Vec(crate::i::Vec::new())
   14fe4:	9001      	str	r0, [sp, #4]
   14fe6:	4608      	mov	r0, r1
   14fe8:	f000 f8c8 	bl	1517c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   14fec:	e7ff      	b.n	14fee <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17h925564e07e6cdf89E+0x10>
   14fee:	a902      	add	r1, sp, #8
   14ff0:	2268      	movs	r2, #104	; 0x68
   14ff2:	9801      	ldr	r0, [sp, #4]
   14ff4:	f008 f92a 	bl	1d24c <__aeabi_memcpy>
    }
   14ff8:	b01c      	add	sp, #112	; 0x70
   14ffa:	bd80      	pop	{r7, pc}

00014ffc <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE>:
    pub fn new() -> Self {
   14ffc:	b580      	push	{r7, lr}
   14ffe:	b0b4      	sub	sp, #208	; 0xd0
   15000:	a901      	add	r1, sp, #4
        Vec(crate::i::Vec::new())
   15002:	9000      	str	r0, [sp, #0]
   15004:	4608      	mov	r0, r1
   15006:	f000 f8aa 	bl	1515e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   1500a:	e7ff      	b.n	1500c <_ZN8heapless3vec16Vec$LT$T$C$N$GT$3new17he656892de29e05bfE+0x10>
   1500c:	a901      	add	r1, sp, #4
   1500e:	22cc      	movs	r2, #204	; 0xcc
   15010:	9800      	ldr	r0, [sp, #0]
   15012:	f008 f91b 	bl	1d24c <__aeabi_memcpy>
    }
   15016:	b034      	add	sp, #208	; 0xd0
   15018:	bd80      	pop	{r7, pc}

0001501a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE>:
    pub fn push(&mut self, item: T) -> Result<(), T> {
   1501a:	b580      	push	{r7, lr}
   1501c:	b086      	sub	sp, #24
   1501e:	460a      	mov	r2, r1
   15020:	9004      	str	r0, [sp, #16]
   15022:	f8ad 1016 	strh.w	r1, [sp, #22]
        self.0.push(item)
   15026:	9203      	str	r2, [sp, #12]
   15028:	f000 fa0b 	bl	15442 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>
   1502c:	9002      	str	r0, [sp, #8]
   1502e:	9101      	str	r1, [sp, #4]
   15030:	e7ff      	b.n	15032 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$4push17h4eeabc68bbbea08aE+0x18>
    }
   15032:	9802      	ldr	r0, [sp, #8]
   15034:	9901      	ldr	r1, [sp, #4]
   15036:	b006      	add	sp, #24
   15038:	bd80      	pop	{r7, pc}

0001503a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E>:
    pub fn clear(&mut self) {
   1503a:	b580      	push	{r7, lr}
   1503c:	b082      	sub	sp, #8
   1503e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   15040:	f000 fa28 	bl	15494 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>
   15044:	e7ff      	b.n	15046 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17h9d4d2ad5be7ce7a0E+0xc>
    }
   15046:	b002      	add	sp, #8
   15048:	bd80      	pop	{r7, pc}

0001504a <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E>:
    pub fn clear(&mut self) {
   1504a:	b580      	push	{r7, lr}
   1504c:	b082      	sub	sp, #8
   1504e:	9001      	str	r0, [sp, #4]
        self.0.clear()
   15050:	f000 fa29 	bl	154a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>
   15054:	e7ff      	b.n	15056 <_ZN8heapless3vec16Vec$LT$T$C$N$GT$5clear17hf6b0f2fc8b85f3c8E+0xc>
    }
   15056:	b002      	add	sp, #8
   15058:	bd80      	pop	{r7, pc}

0001505a <_ZN93_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..collect..IntoIterator$GT$9into_iter17hdef833bae519429bE>:
    fn into_iter(self) -> Self::IntoIter {
   1505a:	b580      	push	{r7, lr}
   1505c:	b0b6      	sub	sp, #216	; 0xd8
   1505e:	aa03      	add	r2, sp, #12
   15060:	23cc      	movs	r3, #204	; 0xcc
        IntoIter { vec: self, next: 0 }
   15062:	9002      	str	r0, [sp, #8]
   15064:	4610      	mov	r0, r2
   15066:	9201      	str	r2, [sp, #4]
   15068:	461a      	mov	r2, r3
   1506a:	9300      	str	r3, [sp, #0]
   1506c:	f008 f8ee 	bl	1d24c <__aeabi_memcpy>
   15070:	9802      	ldr	r0, [sp, #8]
   15072:	9901      	ldr	r1, [sp, #4]
   15074:	9a00      	ldr	r2, [sp, #0]
   15076:	f008 f8e9 	bl	1d24c <__aeabi_memcpy>
   1507a:	2000      	movs	r0, #0
   1507c:	9902      	ldr	r1, [sp, #8]
   1507e:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
    }
   15082:	b036      	add	sp, #216	; 0xd8
   15084:	bd80      	pop	{r7, pc}

00015086 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E>:
    fn next(&mut self) -> Option<Self::Item> {
   15086:	b580      	push	{r7, lr}
   15088:	b08e      	sub	sp, #56	; 0x38
   1508a:	900a      	str	r0, [sp, #40]	; 0x28
        if self.next < self.vec.len() {
   1508c:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   15090:	9008      	str	r0, [sp, #32]
   15092:	9107      	str	r1, [sp, #28]
   15094:	f7ff ff58 	bl	14f48 <_ZN75_$LT$heapless..vec..Vec$LT$T$C$N$GT$$u20$as$u20$core..ops..deref..Deref$GT$5deref17h300d04c86eca3a29E>
   15098:	9006      	str	r0, [sp, #24]
   1509a:	9105      	str	r1, [sp, #20]
   1509c:	e7ff      	b.n	1509e <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x18>
   1509e:	9806      	ldr	r0, [sp, #24]
   150a0:	9905      	ldr	r1, [sp, #20]
   150a2:	f000 fdee 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   150a6:	9004      	str	r0, [sp, #16]
   150a8:	e7ff      	b.n	150aa <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x24>
   150aa:	9807      	ldr	r0, [sp, #28]
   150ac:	9904      	ldr	r1, [sp, #16]
   150ae:	4288      	cmp	r0, r1
   150b0:	d304      	bcc.n	150bc <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x36>
   150b2:	e7ff      	b.n	150b4 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x2e>
   150b4:	2000      	movs	r0, #0
            None
   150b6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   150ba:	e029      	b.n	15110 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
                (self.vec.0.buffer.as_ptr() as *const T)
   150bc:	9808      	ldr	r0, [sp, #32]
   150be:	1d01      	adds	r1, r0, #4
   150c0:	910c      	str	r1, [sp, #48]	; 0x30
   150c2:	910d      	str	r1, [sp, #52]	; 0x34
   150c4:	9103      	str	r1, [sp, #12]
   150c6:	e7ff      	b.n	150c8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x42>
                    .add(self.next)
   150c8:	9808      	ldr	r0, [sp, #32]
   150ca:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
                (self.vec.0.buffer.as_ptr() as *const T)
   150ce:	9803      	ldr	r0, [sp, #12]
   150d0:	f001 fa8d 	bl	165ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   150d4:	9002      	str	r0, [sp, #8]
   150d6:	e7ff      	b.n	150d8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x52>
   150d8:	9802      	ldr	r0, [sp, #8]
   150da:	f001 fa93 	bl	16604 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>
   150de:	4601      	mov	r1, r0
   150e0:	f8ad 002e 	strh.w	r0, [sp, #46]	; 0x2e
   150e4:	9101      	str	r1, [sp, #4]
   150e6:	e7ff      	b.n	150e8 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x62>
            self.next += 1;
   150e8:	9808      	ldr	r0, [sp, #32]
   150ea:	f8d0 10cc 	ldr.w	r1, [r0, #204]	; 0xcc
   150ee:	1c4a      	adds	r2, r1, #1
   150f0:	4613      	mov	r3, r2
   150f2:	428a      	cmp	r2, r1
   150f4:	9300      	str	r3, [sp, #0]
   150f6:	d311      	bcc.n	1511c <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x96>
   150f8:	e7ff      	b.n	150fa <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x74>
   150fa:	9800      	ldr	r0, [sp, #0]
   150fc:	9908      	ldr	r1, [sp, #32]
   150fe:	f8c1 00cc 	str.w	r0, [r1, #204]	; 0xcc
            Some(item)
   15102:	9a01      	ldr	r2, [sp, #4]
   15104:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
   15108:	2301      	movs	r3, #1
   1510a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
        if self.next < self.vec.len() {
   1510e:	e7ff      	b.n	15110 <_ZN95_$LT$heapless..vec..IntoIter$LT$T$C$N$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h39b3385318fd4727E+0x8a>
    }
   15110:	f8bd 0024 	ldrh.w	r0, [sp, #36]	; 0x24
   15114:	f8bd 1026 	ldrh.w	r1, [sp, #38]	; 0x26
   15118:	b00e      	add	sp, #56	; 0x38
   1511a:	bd80      	pop	{r7, pc}
            self.next += 1;
   1511c:	f64f 3070 	movw	r0, #64368	; 0xfb70
   15120:	f2c0 0001 	movt	r0, #1
   15124:	f64f 3260 	movw	r2, #64352	; 0xfb60
   15128:	f2c0 0201 	movt	r2, #1
   1512c:	211c      	movs	r1, #28
   1512e:	f001 fcb9 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15132:	defe      	udf	#254	; 0xfe

00015134 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE>:
   15134:	b580      	push	{r7, lr}
   15136:	b084      	sub	sp, #16
   15138:	9002      	str	r0, [sp, #8]
   1513a:	9103      	str	r1, [sp, #12]
   1513c:	f64f 308c 	movw	r0, #64396	; 0xfb8c
   15140:	f2c0 0001 	movt	r0, #1
   15144:	2202      	movs	r2, #2
   15146:	9001      	str	r0, [sp, #4]
   15148:	4608      	mov	r0, r1
   1514a:	9901      	ldr	r1, [sp, #4]
   1514c:	f002 f9ca 	bl	174e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
   15150:	9000      	str	r0, [sp, #0]
   15152:	e7ff      	b.n	15154 <_ZN45_$LT$$LP$$RP$$u20$as$u20$core..fmt..Debug$GT$3fmt17h5ddf593023653a4eE+0x20>
   15154:	9800      	ldr	r0, [sp, #0]
   15156:	f000 0001 	and.w	r0, r0, #1
   1515a:	b004      	add	sp, #16
   1515c:	bd80      	pop	{r7, pc}

0001515e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>:
    pub const fn new() -> Self {
   1515e:	b580      	push	{r7, lr}
   15160:	b0b4      	sub	sp, #208	; 0xd0
            buffer: MaybeUninit::uninit(),
   15162:	9001      	str	r0, [sp, #4]
   15164:	e7ff      	b.n	15166 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE+0x8>
        Self {
   15166:	9801      	ldr	r0, [sp, #4]
   15168:	3004      	adds	r0, #4
   1516a:	a902      	add	r1, sp, #8
   1516c:	22c8      	movs	r2, #200	; 0xc8
   1516e:	f008 f86d 	bl	1d24c <__aeabi_memcpy>
   15172:	2100      	movs	r1, #0
   15174:	9a01      	ldr	r2, [sp, #4]
   15176:	6011      	str	r1, [r2, #0]
    }
   15178:	b034      	add	sp, #208	; 0xd0
   1517a:	bd80      	pop	{r7, pc}

0001517c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>:
    pub const fn new() -> Self {
   1517c:	b580      	push	{r7, lr}
   1517e:	b09a      	sub	sp, #104	; 0x68
            buffer: MaybeUninit::uninit(),
   15180:	9000      	str	r0, [sp, #0]
   15182:	e7ff      	b.n	15184 <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE+0x8>
        Self {
   15184:	9800      	ldr	r0, [sp, #0]
   15186:	3004      	adds	r0, #4
   15188:	a901      	add	r1, sp, #4
   1518a:	2264      	movs	r2, #100	; 0x64
   1518c:	f008 f85e 	bl	1d24c <__aeabi_memcpy>
   15190:	2100      	movs	r1, #0
   15192:	9a00      	ldr	r2, [sp, #0]
   15194:	6011      	str	r1, [r2, #0]
    }
   15196:	b01a      	add	sp, #104	; 0x68
   15198:	bd80      	pop	{r7, pc}

0001519a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   1519a:	b580      	push	{r7, lr}
   1519c:	b088      	sub	sp, #32
   1519e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   151a0:	1d01      	adds	r1, r0, #4
   151a2:	9106      	str	r1, [sp, #24]
   151a4:	9107      	str	r1, [sp, #28]
   151a6:	9004      	str	r0, [sp, #16]
   151a8:	9103      	str	r1, [sp, #12]
   151aa:	e7ff      	b.n	151ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x12>
   151ac:	9804      	ldr	r0, [sp, #16]
   151ae:	6801      	ldr	r1, [r0, #0]
   151b0:	9803      	ldr	r0, [sp, #12]
   151b2:	f000 fd42 	bl	15c3a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   151b6:	9002      	str	r0, [sp, #8]
   151b8:	9101      	str	r1, [sp, #4]
   151ba:	e7ff      	b.n	151bc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E+0x22>
    }
   151bc:	9802      	ldr	r0, [sp, #8]
   151be:	9901      	ldr	r1, [sp, #4]
   151c0:	b008      	add	sp, #32
   151c2:	bd80      	pop	{r7, pc}

000151c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   151c4:	b580      	push	{r7, lr}
   151c6:	b088      	sub	sp, #32
   151c8:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   151ca:	1d01      	adds	r1, r0, #4
   151cc:	9106      	str	r1, [sp, #24]
   151ce:	9107      	str	r1, [sp, #28]
   151d0:	9004      	str	r0, [sp, #16]
   151d2:	9103      	str	r1, [sp, #12]
   151d4:	e7ff      	b.n	151d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x12>
   151d6:	9804      	ldr	r0, [sp, #16]
   151d8:	6801      	ldr	r1, [r0, #0]
   151da:	9803      	ldr	r0, [sp, #12]
   151dc:	f000 fd2d 	bl	15c3a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   151e0:	9002      	str	r0, [sp, #8]
   151e2:	9101      	str	r1, [sp, #4]
   151e4:	e7ff      	b.n	151e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE+0x22>
    }
   151e6:	9802      	ldr	r0, [sp, #8]
   151e8:	9901      	ldr	r1, [sp, #4]
   151ea:	b008      	add	sp, #32
   151ec:	bd80      	pop	{r7, pc}

000151ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   151ee:	b580      	push	{r7, lr}
   151f0:	b08a      	sub	sp, #40	; 0x28
   151f2:	460a      	mov	r2, r1
   151f4:	9006      	str	r0, [sp, #24]
   151f6:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   151fa:	1d01      	adds	r1, r0, #4
   151fc:	9108      	str	r1, [sp, #32]
   151fe:	9109      	str	r1, [sp, #36]	; 0x24
   15200:	9005      	str	r0, [sp, #20]
   15202:	9204      	str	r2, [sp, #16]
   15204:	9103      	str	r1, [sp, #12]
   15206:	e7ff      	b.n	15208 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x1a>
            .add(self.len)
   15208:	9805      	ldr	r0, [sp, #20]
   1520a:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1520c:	9803      	ldr	r0, [sp, #12]
   1520e:	f000 fe31 	bl	15e74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15212:	9002      	str	r0, [sp, #8]
   15214:	e7ff      	b.n	15216 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x28>
   15216:	9802      	ldr	r0, [sp, #8]
   15218:	9904      	ldr	r1, [sp, #16]
   1521a:	f000 fe36 	bl	15e8a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   1521e:	e7ff      	b.n	15220 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x32>
        self.len += 1;
   15220:	9805      	ldr	r0, [sp, #20]
   15222:	6801      	ldr	r1, [r0, #0]
   15224:	1c4a      	adds	r2, r1, #1
   15226:	4613      	mov	r3, r2
   15228:	428a      	cmp	r2, r1
   1522a:	9301      	str	r3, [sp, #4]
   1522c:	d305      	bcc.n	1523a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x4c>
   1522e:	e7ff      	b.n	15230 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE+0x42>
   15230:	9801      	ldr	r0, [sp, #4]
   15232:	9905      	ldr	r1, [sp, #20]
   15234:	6008      	str	r0, [r1, #0]
    }
   15236:	b00a      	add	sp, #40	; 0x28
   15238:	bd80      	pop	{r7, pc}
        self.len += 1;
   1523a:	f64f 4030 	movw	r0, #64560	; 0xfc30
   1523e:	f2c0 0001 	movt	r0, #1
   15242:	f64f 4214 	movw	r2, #64532	; 0xfc14
   15246:	f2c0 0201 	movt	r2, #1
   1524a:	211c      	movs	r1, #28
   1524c:	f001 fc2a 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15250:	defe      	udf	#254	; 0xfe

00015252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   15252:	b580      	push	{r7, lr}
   15254:	b08a      	sub	sp, #40	; 0x28
   15256:	460a      	mov	r2, r1
   15258:	9006      	str	r0, [sp, #24]
   1525a:	f8ad 101e 	strh.w	r1, [sp, #30]
        (self.buffer.as_mut_ptr() as *mut T)
   1525e:	1d01      	adds	r1, r0, #4
   15260:	9108      	str	r1, [sp, #32]
   15262:	9109      	str	r1, [sp, #36]	; 0x24
   15264:	9005      	str	r0, [sp, #20]
   15266:	9204      	str	r2, [sp, #16]
   15268:	9103      	str	r1, [sp, #12]
   1526a:	e7ff      	b.n	1526c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x1a>
            .add(self.len)
   1526c:	9805      	ldr	r0, [sp, #20]
   1526e:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   15270:	9803      	ldr	r0, [sp, #12]
   15272:	f000 fdff 	bl	15e74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15276:	9002      	str	r0, [sp, #8]
   15278:	e7ff      	b.n	1527a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x28>
   1527a:	9802      	ldr	r0, [sp, #8]
   1527c:	9904      	ldr	r1, [sp, #16]
   1527e:	f000 fe04 	bl	15e8a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>
   15282:	e7ff      	b.n	15284 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x32>
        self.len += 1;
   15284:	9805      	ldr	r0, [sp, #20]
   15286:	6801      	ldr	r1, [r0, #0]
   15288:	1c4a      	adds	r2, r1, #1
   1528a:	4613      	mov	r3, r2
   1528c:	428a      	cmp	r2, r1
   1528e:	9301      	str	r3, [sp, #4]
   15290:	d305      	bcc.n	1529e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x4c>
   15292:	e7ff      	b.n	15294 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE+0x42>
   15294:	9801      	ldr	r0, [sp, #4]
   15296:	9905      	ldr	r1, [sp, #20]
   15298:	6008      	str	r0, [r1, #0]
    }
   1529a:	b00a      	add	sp, #40	; 0x28
   1529c:	bd80      	pop	{r7, pc}
        self.len += 1;
   1529e:	f64f 4030 	movw	r0, #64560	; 0xfc30
   152a2:	f2c0 0001 	movt	r0, #1
   152a6:	f64f 4214 	movw	r2, #64532	; 0xfc14
   152aa:	f2c0 0201 	movt	r2, #1
   152ae:	211c      	movs	r1, #28
   152b0:	f001 fbf8 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   152b4:	defe      	udf	#254	; 0xfe

000152b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   152b6:	b580      	push	{r7, lr}
   152b8:	b094      	sub	sp, #80	; 0x50
   152ba:	900e      	str	r0, [sp, #56]	; 0x38
   152bc:	910f      	str	r1, [sp, #60]	; 0x3c
   152be:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   152c0:	6803      	ldr	r3, [r0, #0]
   152c2:	9009      	str	r0, [sp, #36]	; 0x24
   152c4:	4608      	mov	r0, r1
   152c6:	9108      	str	r1, [sp, #32]
   152c8:	4611      	mov	r1, r2
   152ca:	9207      	str	r2, [sp, #28]
   152cc:	9306      	str	r3, [sp, #24]
   152ce:	f000 fcd8 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   152d2:	9005      	str	r0, [sp, #20]
   152d4:	e7ff      	b.n	152d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x20>
   152d6:	9806      	ldr	r0, [sp, #24]
   152d8:	9905      	ldr	r1, [sp, #20]
   152da:	1842      	adds	r2, r0, r1
   152dc:	4613      	mov	r3, r2
   152de:	4282      	cmp	r2, r0
   152e0:	9304      	str	r3, [sp, #16]
   152e2:	d33f      	bcc.n	15364 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xae>
   152e4:	e7ff      	b.n	152e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x30>
   152e6:	9809      	ldr	r0, [sp, #36]	; 0x24
   152e8:	f000 f96a 	bl	155c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>
   152ec:	9003      	str	r0, [sp, #12]
   152ee:	e7ff      	b.n	152f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x3a>
   152f0:	9804      	ldr	r0, [sp, #16]
   152f2:	9903      	ldr	r1, [sp, #12]
   152f4:	4288      	cmp	r0, r1
   152f6:	d807      	bhi.n	15308 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x52>
   152f8:	e7ff      	b.n	152fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x44>
            for elem in other {
   152fa:	9808      	ldr	r0, [sp, #32]
   152fc:	9907      	ldr	r1, [sp, #28]
   152fe:	f000 fd34 	bl	15d6a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   15302:	9002      	str	r0, [sp, #8]
   15304:	9101      	str	r1, [sp, #4]
   15306:	e003      	b.n	15310 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x5a>
   15308:	2001      	movs	r0, #1
            Err(())
   1530a:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1530e:	e025      	b.n	1535c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   15310:	9802      	ldr	r0, [sp, #8]
   15312:	900b      	str	r0, [sp, #44]	; 0x2c
   15314:	9901      	ldr	r1, [sp, #4]
   15316:	910c      	str	r1, [sp, #48]	; 0x30
   15318:	e7ff      	b.n	1531a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
   1531a:	a80b      	add	r0, sp, #44	; 0x2c
   1531c:	f000 fd47 	bl	15dae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   15320:	900d      	str	r0, [sp, #52]	; 0x34
   15322:	e7ff      	b.n	15324 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x6e>
   15324:	980d      	ldr	r0, [sp, #52]	; 0x34
   15326:	2800      	cmp	r0, #0
   15328:	4601      	mov	r1, r0
   1532a:	bf18      	it	ne
   1532c:	2101      	movne	r1, #1
   1532e:	2800      	cmp	r0, #0
   15330:	d001      	beq.n	15336 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x80>
   15332:	e7ff      	b.n	15334 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x7e>
   15334:	e004      	b.n	15340 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x8a>
   15336:	2000      	movs	r0, #0
            Ok(())
   15338:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1533c:	e00e      	b.n	1535c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa6>
            for elem in other {
   1533e:	defe      	udf	#254	; 0xfe
   15340:	980d      	ldr	r0, [sp, #52]	; 0x34
   15342:	9011      	str	r0, [sp, #68]	; 0x44
   15344:	9012      	str	r0, [sp, #72]	; 0x48
   15346:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   15348:	f000 fbeb 	bl	15b22 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   1534c:	9000      	str	r0, [sp, #0]
   1534e:	e7ff      	b.n	15350 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x9a>
   15350:	9809      	ldr	r0, [sp, #36]	; 0x24
   15352:	9900      	ldr	r1, [sp, #0]
   15354:	f7ff ff4b 	bl	151ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17hdf6e6b5a0b4975aeE>
   15358:	e7ff      	b.n	1535a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0xa4>
            for elem in other {
   1535a:	e7de      	b.n	1531a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E+0x64>
    }
   1535c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15360:	b014      	add	sp, #80	; 0x50
   15362:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   15364:	f64f 4030 	movw	r0, #64560	; 0xfc30
   15368:	f2c0 0001 	movt	r0, #1
   1536c:	f64f 424c 	movw	r2, #64588	; 0xfc4c
   15370:	f2c0 0201 	movt	r2, #1
   15374:	211c      	movs	r1, #28
   15376:	f001 fb95 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1537a:	defe      	udf	#254	; 0xfe

0001537c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   1537c:	b580      	push	{r7, lr}
   1537e:	b094      	sub	sp, #80	; 0x50
   15380:	900e      	str	r0, [sp, #56]	; 0x38
   15382:	910f      	str	r1, [sp, #60]	; 0x3c
   15384:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   15386:	6803      	ldr	r3, [r0, #0]
   15388:	9009      	str	r0, [sp, #36]	; 0x24
   1538a:	4608      	mov	r0, r1
   1538c:	9108      	str	r1, [sp, #32]
   1538e:	4611      	mov	r1, r2
   15390:	9207      	str	r2, [sp, #28]
   15392:	9306      	str	r3, [sp, #24]
   15394:	f000 fc75 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15398:	9005      	str	r0, [sp, #20]
   1539a:	e7ff      	b.n	1539c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x20>
   1539c:	9806      	ldr	r0, [sp, #24]
   1539e:	9905      	ldr	r1, [sp, #20]
   153a0:	1842      	adds	r2, r0, r1
   153a2:	4613      	mov	r3, r2
   153a4:	4282      	cmp	r2, r0
   153a6:	9304      	str	r3, [sp, #16]
   153a8:	d33f      	bcc.n	1542a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xae>
   153aa:	e7ff      	b.n	153ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x30>
   153ac:	9809      	ldr	r0, [sp, #36]	; 0x24
   153ae:	f000 f8fd 	bl	155ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   153b2:	9003      	str	r0, [sp, #12]
   153b4:	e7ff      	b.n	153b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x3a>
   153b6:	9804      	ldr	r0, [sp, #16]
   153b8:	9903      	ldr	r1, [sp, #12]
   153ba:	4288      	cmp	r0, r1
   153bc:	d807      	bhi.n	153ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x52>
   153be:	e7ff      	b.n	153c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x44>
            for elem in other {
   153c0:	9808      	ldr	r0, [sp, #32]
   153c2:	9907      	ldr	r1, [sp, #28]
   153c4:	f000 fcd1 	bl	15d6a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>
   153c8:	9002      	str	r0, [sp, #8]
   153ca:	9101      	str	r1, [sp, #4]
   153cc:	e003      	b.n	153d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x5a>
   153ce:	2001      	movs	r0, #1
            Err(())
   153d0:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   153d4:	e025      	b.n	15422 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   153d6:	9802      	ldr	r0, [sp, #8]
   153d8:	900b      	str	r0, [sp, #44]	; 0x2c
   153da:	9901      	ldr	r1, [sp, #4]
   153dc:	910c      	str	r1, [sp, #48]	; 0x30
   153de:	e7ff      	b.n	153e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
   153e0:	a80b      	add	r0, sp, #44	; 0x2c
   153e2:	f000 fce4 	bl	15dae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>
   153e6:	900d      	str	r0, [sp, #52]	; 0x34
   153e8:	e7ff      	b.n	153ea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x6e>
   153ea:	980d      	ldr	r0, [sp, #52]	; 0x34
   153ec:	2800      	cmp	r0, #0
   153ee:	4601      	mov	r1, r0
   153f0:	bf18      	it	ne
   153f2:	2101      	movne	r1, #1
   153f4:	2800      	cmp	r0, #0
   153f6:	d001      	beq.n	153fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x80>
   153f8:	e7ff      	b.n	153fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x7e>
   153fa:	e004      	b.n	15406 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x8a>
   153fc:	2000      	movs	r0, #0
            Ok(())
   153fe:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   15402:	e00e      	b.n	15422 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa6>
            for elem in other {
   15404:	defe      	udf	#254	; 0xfe
   15406:	980d      	ldr	r0, [sp, #52]	; 0x34
   15408:	9011      	str	r0, [sp, #68]	; 0x44
   1540a:	9012      	str	r0, [sp, #72]	; 0x48
   1540c:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   1540e:	f000 fb88 	bl	15b22 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>
   15412:	9000      	str	r0, [sp, #0]
   15414:	e7ff      	b.n	15416 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x9a>
   15416:	9809      	ldr	r0, [sp, #36]	; 0x24
   15418:	9900      	ldr	r1, [sp, #0]
   1541a:	f7ff ff1a 	bl	15252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1541e:	e7ff      	b.n	15420 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0xa4>
            for elem in other {
   15420:	e7de      	b.n	153e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE+0x64>
    }
   15422:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   15426:	b014      	add	sp, #80	; 0x50
   15428:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   1542a:	f64f 4030 	movw	r0, #64560	; 0xfc30
   1542e:	f2c0 0001 	movt	r0, #1
   15432:	f64f 424c 	movw	r2, #64588	; 0xfc4c
   15436:	f2c0 0201 	movt	r2, #1
   1543a:	211c      	movs	r1, #28
   1543c:	f001 fb32 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   15440:	defe      	udf	#254	; 0xfe

00015442 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   15442:	b580      	push	{r7, lr}
   15444:	b088      	sub	sp, #32
   15446:	460a      	mov	r2, r1
   15448:	9006      	str	r0, [sp, #24]
   1544a:	f8ad 101e 	strh.w	r1, [sp, #30]
        if self.len < self.capacity() {
   1544e:	6801      	ldr	r1, [r0, #0]
   15450:	9004      	str	r0, [sp, #16]
   15452:	9203      	str	r2, [sp, #12]
   15454:	9102      	str	r1, [sp, #8]
   15456:	f000 f8a9 	bl	155ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>
   1545a:	9001      	str	r0, [sp, #4]
   1545c:	e7ff      	b.n	1545e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x1c>
   1545e:	9802      	ldr	r0, [sp, #8]
   15460:	9901      	ldr	r1, [sp, #4]
   15462:	4288      	cmp	r0, r1
   15464:	d307      	bcc.n	15476 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x34>
   15466:	e7ff      	b.n	15468 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x26>
            Err(item)
   15468:	9803      	ldr	r0, [sp, #12]
   1546a:	f8ad 0016 	strh.w	r0, [sp, #22]
   1546e:	2101      	movs	r1, #1
   15470:	f8ad 1014 	strh.w	r1, [sp, #20]
        if self.len < self.capacity() {
   15474:	e008      	b.n	15488 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
            unsafe { self.push_unchecked(item) }
   15476:	9804      	ldr	r0, [sp, #16]
   15478:	9903      	ldr	r1, [sp, #12]
   1547a:	f7ff feea 	bl	15252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17he573de04b89912bbE>
   1547e:	e7ff      	b.n	15480 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x3e>
   15480:	2000      	movs	r0, #0
            Ok(())
   15482:	f8ad 0014 	strh.w	r0, [sp, #20]
        if self.len < self.capacity() {
   15486:	e7ff      	b.n	15488 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h2cdc17d9364c1691E+0x46>
    }
   15488:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1548c:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   15490:	b008      	add	sp, #32
   15492:	bd80      	pop	{r7, pc}

00015494 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE>:
    pub(crate) fn clear(&mut self) {
   15494:	b580      	push	{r7, lr}
   15496:	b082      	sub	sp, #8
   15498:	9001      	str	r0, [sp, #4]
   1549a:	2100      	movs	r1, #0
        self.truncate(0);
   1549c:	f000 f8d0 	bl	15640 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>
   154a0:	e7ff      	b.n	154a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h08bc7e1ffa01842aE+0xe>
    }
   154a2:	b002      	add	sp, #8
   154a4:	bd80      	pop	{r7, pc}

000154a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E>:
    pub(crate) fn clear(&mut self) {
   154a6:	b580      	push	{r7, lr}
   154a8:	b082      	sub	sp, #8
   154aa:	9001      	str	r0, [sp, #4]
   154ac:	2100      	movs	r1, #0
        self.truncate(0);
   154ae:	f000 f891 	bl	155d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>
   154b2:	e7ff      	b.n	154b4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h1a57c17483c78e39E+0xe>
    }
   154b4:	b002      	add	sp, #8
   154b6:	bd80      	pop	{r7, pc}

000154b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE>:
    pub(crate) fn clone(&self) -> Self
   154b8:	b580      	push	{r7, lr}
   154ba:	b0a0      	sub	sp, #128	; 0x80
   154bc:	911f      	str	r1, [sp, #124]	; 0x7c
   154be:	aa05      	add	r2, sp, #20
        let mut new = Self::new();
   154c0:	9004      	str	r0, [sp, #16]
   154c2:	4610      	mov	r0, r2
   154c4:	9103      	str	r1, [sp, #12]
   154c6:	f7ff fe59 	bl	1517c <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17hfa6aa857e4945d4eE>
   154ca:	e7ff      	b.n	154cc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   154cc:	9803      	ldr	r0, [sp, #12]
   154ce:	f000 f843 	bl	15558 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>
   154d2:	9002      	str	r0, [sp, #8]
   154d4:	9101      	str	r1, [sp, #4]
   154d6:	e7ff      	b.n	154d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x20>
   154d8:	a805      	add	r0, sp, #20
   154da:	9902      	ldr	r1, [sp, #8]
   154dc:	9a01      	ldr	r2, [sp, #4]
   154de:	f7ff ff4d 	bl	1537c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h18ef23bee3a6d90aE>
   154e2:	9000      	str	r0, [sp, #0]
   154e4:	e7ff      	b.n	154e6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x2e>
   154e6:	9800      	ldr	r0, [sp, #0]
   154e8:	f000 0001 	and.w	r0, r0, #1
   154ec:	f64f 415c 	movw	r1, #64604	; 0xfc5c
   154f0:	f2c0 0101 	movt	r1, #1
   154f4:	f000 f959 	bl	157aa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   154f8:	e7ff      	b.n	154fa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h88826487e7b3f63fE+0x42>
   154fa:	a905      	add	r1, sp, #20
   154fc:	2268      	movs	r2, #104	; 0x68
        new
   154fe:	9804      	ldr	r0, [sp, #16]
   15500:	f007 fea4 	bl	1d24c <__aeabi_memcpy>
    }
   15504:	b020      	add	sp, #128	; 0x80
   15506:	bd80      	pop	{r7, pc}

00015508 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E>:
    pub(crate) fn clone(&self) -> Self
   15508:	b580      	push	{r7, lr}
   1550a:	b0ba      	sub	sp, #232	; 0xe8
   1550c:	9139      	str	r1, [sp, #228]	; 0xe4
   1550e:	aa06      	add	r2, sp, #24
        let mut new = Self::new();
   15510:	9005      	str	r0, [sp, #20]
   15512:	4610      	mov	r0, r2
   15514:	9104      	str	r1, [sp, #16]
   15516:	f7ff fe22 	bl	1515e <_ZN8heapless3vec43_$LT$impl$u20$heapless..i..Vec$LT$A$GT$$GT$3new17ha348a487a5c2167cE>
   1551a:	e7ff      	b.n	1551c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x14>
        new.extend_from_slice(self.as_slice()).unwrap();
   1551c:	9804      	ldr	r0, [sp, #16]
   1551e:	f000 f830 	bl	15582 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>
   15522:	9003      	str	r0, [sp, #12]
   15524:	9102      	str	r1, [sp, #8]
   15526:	e7ff      	b.n	15528 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x20>
   15528:	a806      	add	r0, sp, #24
   1552a:	9903      	ldr	r1, [sp, #12]
   1552c:	9a02      	ldr	r2, [sp, #8]
   1552e:	f7ff fec2 	bl	152b6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h0d9a71633b916be2E>
   15532:	9001      	str	r0, [sp, #4]
   15534:	e7ff      	b.n	15536 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x2e>
   15536:	9801      	ldr	r0, [sp, #4]
   15538:	f000 0001 	and.w	r0, r0, #1
   1553c:	f64f 415c 	movw	r1, #64604	; 0xfc5c
   15540:	f2c0 0101 	movt	r1, #1
   15544:	f000 f931 	bl	157aa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>
   15548:	e7ff      	b.n	1554a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clone17h9ae75c967b9ec692E+0x42>
   1554a:	a906      	add	r1, sp, #24
   1554c:	22cc      	movs	r2, #204	; 0xcc
        new
   1554e:	9805      	ldr	r0, [sp, #20]
   15550:	f007 fe7c 	bl	1d24c <__aeabi_memcpy>
    }
   15554:	b03a      	add	sp, #232	; 0xe8
   15556:	bd80      	pop	{r7, pc}

00015558 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15558:	b580      	push	{r7, lr}
   1555a:	b088      	sub	sp, #32
   1555c:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   1555e:	1d01      	adds	r1, r0, #4
   15560:	9106      	str	r1, [sp, #24]
   15562:	9107      	str	r1, [sp, #28]
   15564:	9004      	str	r0, [sp, #16]
   15566:	9103      	str	r1, [sp, #12]
   15568:	e7ff      	b.n	1556a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x12>
   1556a:	9804      	ldr	r0, [sp, #16]
   1556c:	6801      	ldr	r1, [r0, #0]
   1556e:	9803      	ldr	r0, [sp, #12]
   15570:	f000 fb56 	bl	15c20 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   15574:	9002      	str	r0, [sp, #8]
   15576:	9101      	str	r1, [sp, #4]
   15578:	e7ff      	b.n	1557a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h54fe71acb99bc87aE+0x22>
    }
   1557a:	9802      	ldr	r0, [sp, #8]
   1557c:	9901      	ldr	r1, [sp, #4]
   1557e:	b008      	add	sp, #32
   15580:	bd80      	pop	{r7, pc}

00015582 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E>:
    pub(crate) fn as_slice(&self) -> &[T] {
   15582:	b580      	push	{r7, lr}
   15584:	b088      	sub	sp, #32
   15586:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   15588:	1d01      	adds	r1, r0, #4
   1558a:	9106      	str	r1, [sp, #24]
   1558c:	9107      	str	r1, [sp, #28]
   1558e:	9004      	str	r0, [sp, #16]
   15590:	9103      	str	r1, [sp, #12]
   15592:	e7ff      	b.n	15594 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x12>
   15594:	9804      	ldr	r0, [sp, #16]
   15596:	6801      	ldr	r1, [r0, #0]
   15598:	9803      	ldr	r0, [sp, #12]
   1559a:	f000 fb41 	bl	15c20 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>
   1559e:	9002      	str	r0, [sp, #8]
   155a0:	9101      	str	r1, [sp, #4]
   155a2:	e7ff      	b.n	155a4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17hfa6799d86382f557E+0x22>
    }
   155a4:	9802      	ldr	r0, [sp, #8]
   155a6:	9901      	ldr	r1, [sp, #4]
   155a8:	b008      	add	sp, #32
   155aa:	bd80      	pop	{r7, pc}

000155ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E>:
    pub(crate) fn capacity(&self) -> usize {
   155ac:	b580      	push	{r7, lr}
   155ae:	b082      	sub	sp, #8
   155b0:	9001      	str	r0, [sp, #4]
        N::to_usize()
   155b2:	f000 fa26 	bl	15a02 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   155b6:	9000      	str	r0, [sp, #0]
   155b8:	e7ff      	b.n	155ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h4ff96d780f873c26E+0xe>
    }
   155ba:	9800      	ldr	r0, [sp, #0]
   155bc:	b002      	add	sp, #8
   155be:	bd80      	pop	{r7, pc}

000155c0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E>:
    pub(crate) fn capacity(&self) -> usize {
   155c0:	b580      	push	{r7, lr}
   155c2:	b082      	sub	sp, #8
   155c4:	9001      	str	r0, [sp, #4]
        N::to_usize()
   155c6:	f000 fa34 	bl	15a32 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>
   155ca:	9000      	str	r0, [sp, #0]
   155cc:	e7ff      	b.n	155ce <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17h85da89fbbd792562E+0xe>
    }
   155ce:	9800      	ldr	r0, [sp, #0]
   155d0:	b002      	add	sp, #8
   155d2:	bd80      	pop	{r7, pc}

000155d4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   155d4:	b580      	push	{r7, lr}
   155d6:	b08a      	sub	sp, #40	; 0x28
   155d8:	9007      	str	r0, [sp, #28]
   155da:	9108      	str	r1, [sp, #32]
   155dc:	9106      	str	r1, [sp, #24]
   155de:	9005      	str	r0, [sp, #20]
   155e0:	e7ff      	b.n	155e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
            while len < self.len {
   155e2:	9805      	ldr	r0, [sp, #20]
   155e4:	6801      	ldr	r1, [r0, #0]
   155e6:	9a06      	ldr	r2, [sp, #24]
   155e8:	428a      	cmp	r2, r1
   155ea:	d302      	bcc.n	155f2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1e>
   155ec:	e7ff      	b.n	155ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x1a>
    }
   155ee:	b00a      	add	sp, #40	; 0x28
   155f0:	bd80      	pop	{r7, pc}
                self.len -= 1;
   155f2:	9805      	ldr	r0, [sp, #20]
   155f4:	6801      	ldr	r1, [r0, #0]
   155f6:	1e4a      	subs	r2, r1, #1
   155f8:	2901      	cmp	r1, #1
   155fa:	9204      	str	r2, [sp, #16]
   155fc:	d314      	bcc.n	15628 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x54>
   155fe:	e7ff      	b.n	15600 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x2c>
   15600:	9804      	ldr	r0, [sp, #16]
   15602:	9905      	ldr	r1, [sp, #20]
   15604:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15606:	680a      	ldr	r2, [r1, #0]
   15608:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1560a:	4608      	mov	r0, r1
   1560c:	9203      	str	r2, [sp, #12]
   1560e:	f7ff fdd9 	bl	151c4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hed351d4560a281afE>
   15612:	9002      	str	r0, [sp, #8]
   15614:	9101      	str	r1, [sp, #4]
   15616:	e7ff      	b.n	15618 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x44>
   15618:	9802      	ldr	r0, [sp, #8]
   1561a:	9901      	ldr	r1, [sp, #4]
   1561c:	9a03      	ldr	r2, [sp, #12]
   1561e:	f000 fb1e 	bl	15c5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   15622:	e7ff      	b.n	15624 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x50>
   15624:	e7ff      	b.n	15626 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0x52>
            while len < self.len {
   15626:	e7dc      	b.n	155e2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h253b72f923ec193bE+0xe>
                self.len -= 1;
   15628:	f64f 30f0 	movw	r0, #64496	; 0xfbf0
   1562c:	f2c0 0001 	movt	r0, #1
   15630:	f64f 426c 	movw	r2, #64620	; 0xfc6c
   15634:	f2c0 0201 	movt	r2, #1
   15638:	2121      	movs	r1, #33	; 0x21
   1563a:	f001 fa33 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1563e:	defe      	udf	#254	; 0xfe

00015640 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   15640:	b580      	push	{r7, lr}
   15642:	b08a      	sub	sp, #40	; 0x28
   15644:	9007      	str	r0, [sp, #28]
   15646:	9108      	str	r1, [sp, #32]
   15648:	9106      	str	r1, [sp, #24]
   1564a:	9005      	str	r0, [sp, #20]
   1564c:	e7ff      	b.n	1564e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
            while len < self.len {
   1564e:	9805      	ldr	r0, [sp, #20]
   15650:	6801      	ldr	r1, [r0, #0]
   15652:	9a06      	ldr	r2, [sp, #24]
   15654:	428a      	cmp	r2, r1
   15656:	d302      	bcc.n	1565e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1e>
   15658:	e7ff      	b.n	1565a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x1a>
    }
   1565a:	b00a      	add	sp, #40	; 0x28
   1565c:	bd80      	pop	{r7, pc}
                self.len -= 1;
   1565e:	9805      	ldr	r0, [sp, #20]
   15660:	6801      	ldr	r1, [r0, #0]
   15662:	1e4a      	subs	r2, r1, #1
   15664:	2901      	cmp	r1, #1
   15666:	9204      	str	r2, [sp, #16]
   15668:	d314      	bcc.n	15694 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x54>
   1566a:	e7ff      	b.n	1566c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x2c>
   1566c:	9804      	ldr	r0, [sp, #16]
   1566e:	9905      	ldr	r1, [sp, #20]
   15670:	6008      	str	r0, [r1, #0]
                let len = self.len;
   15672:	680a      	ldr	r2, [r1, #0]
   15674:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   15676:	4608      	mov	r0, r1
   15678:	9203      	str	r2, [sp, #12]
   1567a:	f7ff fd8e 	bl	1519a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hddd87a70c72e0332E>
   1567e:	9002      	str	r0, [sp, #8]
   15680:	9101      	str	r1, [sp, #4]
   15682:	e7ff      	b.n	15684 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x44>
   15684:	9802      	ldr	r0, [sp, #8]
   15686:	9901      	ldr	r1, [sp, #4]
   15688:	9a03      	ldr	r2, [sp, #12]
   1568a:	f000 fae8 	bl	15c5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>
   1568e:	e7ff      	b.n	15690 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x50>
   15690:	e7ff      	b.n	15692 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0x52>
            while len < self.len {
   15692:	e7dc      	b.n	1564e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17he7b7240522c80b00E+0xe>
                self.len -= 1;
   15694:	f64f 30f0 	movw	r0, #64496	; 0xfbf0
   15698:	f2c0 0001 	movt	r0, #1
   1569c:	f64f 426c 	movw	r2, #64620	; 0xfc6c
   156a0:	f2c0 0201 	movt	r2, #1
   156a4:	2121      	movs	r1, #33	; 0x21
   156a6:	f001 f9fd 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   156aa:	defe      	udf	#254	; 0xfe

000156ac <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE>:
   156ac:	b082      	sub	sp, #8
   156ae:	9001      	str	r0, [sp, #4]
   156b0:	8800      	ldrh	r0, [r0, #0]
   156b2:	2800      	cmp	r0, #0
   156b4:	d004      	beq.n	156c0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x14>
   156b6:	e7ff      	b.n	156b8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0xc>
   156b8:	2000      	movs	r0, #0
   156ba:	f88d 0003 	strb.w	r0, [sp, #3]
   156be:	e003      	b.n	156c8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   156c0:	2001      	movs	r0, #1
   156c2:	f88d 0003 	strb.w	r0, [sp, #3]
   156c6:	e7ff      	b.n	156c8 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17h685d1053cc11818bE+0x1c>
   156c8:	f89d 0003 	ldrb.w	r0, [sp, #3]
   156cc:	b002      	add	sp, #8
   156ce:	4770      	bx	lr

000156d0 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E>:
   156d0:	b082      	sub	sp, #8
   156d2:	9001      	str	r0, [sp, #4]
   156d4:	7800      	ldrb	r0, [r0, #0]
   156d6:	07c0      	lsls	r0, r0, #31
   156d8:	2800      	cmp	r0, #0
   156da:	d004      	beq.n	156e6 <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x16>
   156dc:	e7ff      	b.n	156de <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0xe>
   156de:	2000      	movs	r0, #0
   156e0:	f88d 0003 	strb.w	r0, [sp, #3]
   156e4:	e003      	b.n	156ee <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   156e6:	2001      	movs	r0, #1
   156e8:	f88d 0003 	strb.w	r0, [sp, #3]
   156ec:	e7ff      	b.n	156ee <_ZN4core6result19Result$LT$T$C$E$GT$5is_ok17ha1af9c18815f3fc6E+0x1e>
   156ee:	f89d 0003 	ldrb.w	r0, [sp, #3]
   156f2:	b002      	add	sp, #8
   156f4:	4770      	bx	lr

000156f6 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E>:
   156f6:	b510      	push	{r4, lr}
   156f8:	b08a      	sub	sp, #40	; 0x28
   156fa:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   156fe:	468e      	mov	lr, r1
   15700:	4604      	mov	r4, r0
   15702:	f8ad 0014 	strh.w	r0, [sp, #20]
   15706:	f8ad 1016 	strh.w	r1, [sp, #22]
   1570a:	9207      	str	r2, [sp, #28]
   1570c:	9308      	str	r3, [sp, #32]
   1570e:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   15712:	4601      	mov	r1, r0
   15714:	2800      	cmp	r0, #0
   15716:	9304      	str	r3, [sp, #16]
   15718:	9203      	str	r2, [sp, #12]
   1571a:	f8cd c008 	str.w	ip, [sp, #8]
   1571e:	d013      	beq.n	15748 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x52>
   15720:	e7ff      	b.n	15722 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x2c>
   15722:	f8bd 0016 	ldrh.w	r0, [sp, #22]
   15726:	f8ad 001a 	strh.w	r0, [sp, #26]
   1572a:	4668      	mov	r0, sp
   1572c:	9902      	ldr	r1, [sp, #8]
   1572e:	6001      	str	r1, [r0, #0]
   15730:	f64f 438c 	movw	r3, #64652	; 0xfc8c
   15734:	f2c0 0301 	movt	r3, #1
   15738:	f10d 021a 	add.w	r2, sp, #26
   1573c:	9803      	ldr	r0, [sp, #12]
   1573e:	9904      	ldr	r1, [sp, #16]
   15740:	f001 f982 	bl	16a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15744:	defe      	udf	#254	; 0xfe
   15746:	defe      	udf	#254	; 0xfe
   15748:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   1574c:	2800      	cmp	r0, #0
   1574e:	d102      	bne.n	15756 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x60>
   15750:	e7ff      	b.n	15752 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>
   15752:	b00a      	add	sp, #40	; 0x28
   15754:	bd10      	pop	{r4, pc}
   15756:	e7fc      	b.n	15752 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17h4e7393af23997633E+0x5c>

00015758 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E>:
   15758:	b580      	push	{r7, lr}
   1575a:	b08a      	sub	sp, #40	; 0x28
   1575c:	4684      	mov	ip, r0
   1575e:	f88d 0017 	strb.w	r0, [sp, #23]
   15762:	9107      	str	r1, [sp, #28]
   15764:	9208      	str	r2, [sp, #32]
   15766:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1576a:	ea4f 7ec0 	mov.w	lr, r0, lsl #31
   1576e:	f1be 0f00 	cmp.w	lr, #0
   15772:	9304      	str	r3, [sp, #16]
   15774:	9203      	str	r2, [sp, #12]
   15776:	9102      	str	r1, [sp, #8]
   15778:	d00e      	beq.n	15798 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x40>
   1577a:	e7ff      	b.n	1577c <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x24>
   1577c:	4668      	mov	r0, sp
   1577e:	9904      	ldr	r1, [sp, #16]
   15780:	6001      	str	r1, [r0, #0]
   15782:	f64f 437c 	movw	r3, #64636	; 0xfc7c
   15786:	f2c0 0301 	movt	r3, #1
   1578a:	aa06      	add	r2, sp, #24
   1578c:	9802      	ldr	r0, [sp, #8]
   1578e:	9903      	ldr	r1, [sp, #12]
   15790:	f001 f95a 	bl	16a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   15794:	defe      	udf	#254	; 0xfe
   15796:	defe      	udf	#254	; 0xfe
   15798:	f89d 0017 	ldrb.w	r0, [sp, #23]
   1579c:	07c0      	lsls	r0, r0, #31
   1579e:	2800      	cmp	r0, #0
   157a0:	d102      	bne.n	157a8 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x50>
   157a2:	e7ff      	b.n	157a4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>
   157a4:	b00a      	add	sp, #40	; 0x28
   157a6:	bd80      	pop	{r7, pc}
   157a8:	e7fc      	b.n	157a4 <_ZN4core6result19Result$LT$T$C$E$GT$6expect17heb3612b3324a1499E+0x4c>

000157aa <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E>:
   157aa:	b086      	sub	sp, #24
   157ac:	4602      	mov	r2, r0
   157ae:	f88d 000f 	strb.w	r0, [sp, #15]
   157b2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   157b6:	07c3      	lsls	r3, r0, #31
   157b8:	2b00      	cmp	r3, #0
   157ba:	9102      	str	r1, [sp, #8]
   157bc:	d011      	beq.n	157e2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x38>
   157be:	e7ff      	b.n	157c0 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x16>
   157c0:	4668      	mov	r0, sp
   157c2:	9902      	ldr	r1, [sp, #8]
   157c4:	6001      	str	r1, [r0, #0]
   157c6:	f64f 409c 	movw	r0, #64668	; 0xfc9c
   157ca:	f2c0 0001 	movt	r0, #1
   157ce:	f64f 437c 	movw	r3, #64636	; 0xfc7c
   157d2:	f2c0 0301 	movt	r3, #1
   157d6:	212b      	movs	r1, #43	; 0x2b
   157d8:	aa04      	add	r2, sp, #16
   157da:	f001 f935 	bl	16a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>
   157de:	defe      	udf	#254	; 0xfe
   157e0:	defe      	udf	#254	; 0xfe
   157e2:	f89d 000f 	ldrb.w	r0, [sp, #15]
   157e6:	07c0      	lsls	r0, r0, #31
   157e8:	2800      	cmp	r0, #0
   157ea:	d102      	bne.n	157f2 <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x48>
   157ec:	e7ff      	b.n	157ee <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>
   157ee:	b006      	add	sp, #24
   157f0:	4770      	bx	lr
   157f2:	e7fc      	b.n	157ee <_ZN4core6result19Result$LT$T$C$E$GT$6unwrap17ha86864e01a385543E+0x44>

000157f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE>:
   157f4:	b580      	push	{r7, lr}
   157f6:	b088      	sub	sp, #32
   157f8:	9001      	str	r0, [sp, #4]
   157fa:	2000      	movs	r0, #0
   157fc:	f88d 0013 	strb.w	r0, [sp, #19]
   15800:	f88d 0011 	strb.w	r0, [sp, #17]
   15804:	f88d 0012 	strb.w	r0, [sp, #18]
   15808:	2001      	movs	r0, #1
   1580a:	f88d 0012 	strb.w	r0, [sp, #18]
   1580e:	f88d 0013 	strb.w	r0, [sp, #19]
   15812:	f88d 0011 	strb.w	r0, [sp, #17]
   15816:	9801      	ldr	r0, [sp, #4]
   15818:	1e41      	subs	r1, r0, #1
   1581a:	bf18      	it	ne
   1581c:	2101      	movne	r1, #1
   1581e:	2801      	cmp	r0, #1
   15820:	d00d      	beq.n	1583e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x4a>
   15822:	e7ff      	b.n	15824 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x30>
   15824:	2000      	movs	r0, #0
   15826:	f88d 0013 	strb.w	r0, [sp, #19]
   1582a:	9901      	ldr	r1, [sp, #4]
   1582c:	9107      	str	r1, [sp, #28]
   1582e:	f88d 0011 	strb.w	r0, [sp, #17]
   15832:	9103      	str	r1, [sp, #12]
   15834:	9803      	ldr	r0, [sp, #12]
   15836:	f7fb fab7 	bl	10da8 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17he7064768fe0d958eE>
   1583a:	e006      	b.n	1584a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x56>
   1583c:	defe      	udf	#254	; 0xfe
   1583e:	2000      	movs	r0, #0
   15840:	f88d 0012 	strb.w	r0, [sp, #18]
   15844:	f88d 000b 	strb.w	r0, [sp, #11]
   15848:	e003      	b.n	15852 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   1584a:	2001      	movs	r0, #1
   1584c:	f88d 000b 	strb.w	r0, [sp, #11]
   15850:	e7ff      	b.n	15852 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x5e>
   15852:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15856:	07c0      	lsls	r0, r0, #31
   15858:	2800      	cmp	r0, #0
   1585a:	d104      	bne.n	15866 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x72>
   1585c:	e7ff      	b.n	1585e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1585e:	9801      	ldr	r0, [sp, #4]
   15860:	2801      	cmp	r0, #1
   15862:	d008      	beq.n	15876 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x82>
   15864:	e011      	b.n	1588a <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x96>
   15866:	2000      	movs	r0, #0
   15868:	f88d 0011 	strb.w	r0, [sp, #17]
   1586c:	e7f7      	b.n	1585e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x6a>
   1586e:	f89d 000b 	ldrb.w	r0, [sp, #11]
   15872:	b008      	add	sp, #32
   15874:	bd80      	pop	{r7, pc}
   15876:	f89d 0012 	ldrb.w	r0, [sp, #18]
   1587a:	07c0      	lsls	r0, r0, #31
   1587c:	2800      	cmp	r0, #0
   1587e:	d0f6      	beq.n	1586e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15880:	e7ff      	b.n	15882 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x8e>
   15882:	2000      	movs	r0, #0
   15884:	f88d 0012 	strb.w	r0, [sp, #18]
   15888:	e7f1      	b.n	1586e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   1588a:	f89d 0013 	ldrb.w	r0, [sp, #19]
   1588e:	07c0      	lsls	r0, r0, #31
   15890:	2800      	cmp	r0, #0
   15892:	d0ec      	beq.n	1586e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>
   15894:	e7ff      	b.n	15896 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0xa2>
   15896:	2000      	movs	r0, #0
   15898:	f88d 0013 	strb.w	r0, [sp, #19]
   1589c:	e7e7      	b.n	1586e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h205edca38c335b5eE+0x7a>

0001589e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE>:
   1589e:	b580      	push	{r7, lr}
   158a0:	b088      	sub	sp, #32
   158a2:	9001      	str	r0, [sp, #4]
   158a4:	2000      	movs	r0, #0
   158a6:	f88d 0013 	strb.w	r0, [sp, #19]
   158aa:	f88d 0011 	strb.w	r0, [sp, #17]
   158ae:	f88d 0012 	strb.w	r0, [sp, #18]
   158b2:	2001      	movs	r0, #1
   158b4:	f88d 0012 	strb.w	r0, [sp, #18]
   158b8:	f88d 0013 	strb.w	r0, [sp, #19]
   158bc:	f88d 0011 	strb.w	r0, [sp, #17]
   158c0:	9801      	ldr	r0, [sp, #4]
   158c2:	1e41      	subs	r1, r0, #1
   158c4:	bf18      	it	ne
   158c6:	2101      	movne	r1, #1
   158c8:	2801      	cmp	r0, #1
   158ca:	d00d      	beq.n	158e8 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x4a>
   158cc:	e7ff      	b.n	158ce <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x30>
   158ce:	2000      	movs	r0, #0
   158d0:	f88d 0013 	strb.w	r0, [sp, #19]
   158d4:	9901      	ldr	r1, [sp, #4]
   158d6:	9107      	str	r1, [sp, #28]
   158d8:	f88d 0011 	strb.w	r0, [sp, #17]
   158dc:	9103      	str	r1, [sp, #12]
   158de:	9803      	ldr	r0, [sp, #12]
   158e0:	f7fb fa58 	bl	10d94 <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h715abc3d704df52cE>
   158e4:	e006      	b.n	158f4 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x56>
   158e6:	defe      	udf	#254	; 0xfe
   158e8:	2000      	movs	r0, #0
   158ea:	f88d 0012 	strb.w	r0, [sp, #18]
   158ee:	f88d 000b 	strb.w	r0, [sp, #11]
   158f2:	e003      	b.n	158fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   158f4:	2001      	movs	r0, #1
   158f6:	f88d 000b 	strb.w	r0, [sp, #11]
   158fa:	e7ff      	b.n	158fc <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x5e>
   158fc:	f89d 0011 	ldrb.w	r0, [sp, #17]
   15900:	07c0      	lsls	r0, r0, #31
   15902:	2800      	cmp	r0, #0
   15904:	d104      	bne.n	15910 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x72>
   15906:	e7ff      	b.n	15908 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15908:	9801      	ldr	r0, [sp, #4]
   1590a:	2801      	cmp	r0, #1
   1590c:	d008      	beq.n	15920 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x82>
   1590e:	e011      	b.n	15934 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x96>
   15910:	2000      	movs	r0, #0
   15912:	f88d 0011 	strb.w	r0, [sp, #17]
   15916:	e7f7      	b.n	15908 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x6a>
   15918:	f89d 000b 	ldrb.w	r0, [sp, #11]
   1591c:	b008      	add	sp, #32
   1591e:	bd80      	pop	{r7, pc}
   15920:	f89d 0012 	ldrb.w	r0, [sp, #18]
   15924:	07c0      	lsls	r0, r0, #31
   15926:	2800      	cmp	r0, #0
   15928:	d0f6      	beq.n	15918 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1592a:	e7ff      	b.n	1592c <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x8e>
   1592c:	2000      	movs	r0, #0
   1592e:	f88d 0012 	strb.w	r0, [sp, #18]
   15932:	e7f1      	b.n	15918 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   15934:	f89d 0013 	ldrb.w	r0, [sp, #19]
   15938:	07c0      	lsls	r0, r0, #31
   1593a:	2800      	cmp	r0, #0
   1593c:	d0ec      	beq.n	15918 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>
   1593e:	e7ff      	b.n	15940 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0xa2>
   15940:	2000      	movs	r0, #0
   15942:	f88d 0013 	strb.w	r0, [sp, #19]
   15946:	e7e7      	b.n	15918 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h53114c83f534f53eE+0x7a>

00015948 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE>:
   15948:	b580      	push	{r7, lr}
   1594a:	b088      	sub	sp, #32
   1594c:	9001      	str	r0, [sp, #4]
   1594e:	2000      	movs	r0, #0
   15950:	f88d 0013 	strb.w	r0, [sp, #19]
   15954:	f88d 0011 	strb.w	r0, [sp, #17]
   15958:	f88d 0012 	strb.w	r0, [sp, #18]
   1595c:	2001      	movs	r0, #1
   1595e:	f88d 0012 	strb.w	r0, [sp, #18]
   15962:	f88d 0013 	strb.w	r0, [sp, #19]
   15966:	f88d 0011 	strb.w	r0, [sp, #17]
   1596a:	9801      	ldr	r0, [sp, #4]
   1596c:	1e41      	subs	r1, r0, #1
   1596e:	bf18      	it	ne
   15970:	2101      	movne	r1, #1
   15972:	2801      	cmp	r0, #1
   15974:	d00d      	beq.n	15992 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x4a>
   15976:	e7ff      	b.n	15978 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x30>
   15978:	2000      	movs	r0, #0
   1597a:	f88d 0013 	strb.w	r0, [sp, #19]
   1597e:	9901      	ldr	r1, [sp, #4]
   15980:	9107      	str	r1, [sp, #28]
   15982:	f88d 0011 	strb.w	r0, [sp, #17]
   15986:	9103      	str	r1, [sp, #12]
   15988:	9803      	ldr	r0, [sp, #12]
   1598a:	f7fb fa08 	bl	10d9e <_ZN10st7735_lcd28ST7735$LT$SPI$C$DC$C$RST$GT$10hard_reset28_$u7b$$u7b$closure$u7d$$u7d$17h76cf6b8a1769fdedE>
   1598e:	e006      	b.n	1599e <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x56>
   15990:	defe      	udf	#254	; 0xfe
   15992:	2000      	movs	r0, #0
   15994:	f88d 0012 	strb.w	r0, [sp, #18]
   15998:	f88d 000b 	strb.w	r0, [sp, #11]
   1599c:	e003      	b.n	159a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   1599e:	2001      	movs	r0, #1
   159a0:	f88d 000b 	strb.w	r0, [sp, #11]
   159a4:	e7ff      	b.n	159a6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x5e>
   159a6:	f89d 0011 	ldrb.w	r0, [sp, #17]
   159aa:	07c0      	lsls	r0, r0, #31
   159ac:	2800      	cmp	r0, #0
   159ae:	d104      	bne.n	159ba <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x72>
   159b0:	e7ff      	b.n	159b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   159b2:	9801      	ldr	r0, [sp, #4]
   159b4:	2801      	cmp	r0, #1
   159b6:	d008      	beq.n	159ca <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x82>
   159b8:	e011      	b.n	159de <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x96>
   159ba:	2000      	movs	r0, #0
   159bc:	f88d 0011 	strb.w	r0, [sp, #17]
   159c0:	e7f7      	b.n	159b2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x6a>
   159c2:	f89d 000b 	ldrb.w	r0, [sp, #11]
   159c6:	b008      	add	sp, #32
   159c8:	bd80      	pop	{r7, pc}
   159ca:	f89d 0012 	ldrb.w	r0, [sp, #18]
   159ce:	07c0      	lsls	r0, r0, #31
   159d0:	2800      	cmp	r0, #0
   159d2:	d0f6      	beq.n	159c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   159d4:	e7ff      	b.n	159d6 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x8e>
   159d6:	2000      	movs	r0, #0
   159d8:	f88d 0012 	strb.w	r0, [sp, #18]
   159dc:	e7f1      	b.n	159c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   159de:	f89d 0013 	ldrb.w	r0, [sp, #19]
   159e2:	07c0      	lsls	r0, r0, #31
   159e4:	2800      	cmp	r0, #0
   159e6:	d0ec      	beq.n	159c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>
   159e8:	e7ff      	b.n	159ea <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0xa2>
   159ea:	2000      	movs	r0, #0
   159ec:	f88d 0013 	strb.w	r0, [sp, #19]
   159f0:	e7e7      	b.n	159c2 <_ZN4core6result19Result$LT$T$C$E$GT$7map_err17h58c859efc10e5d9fE+0x7a>

000159f2 <_ZN73_$LT$core..result..Result$LT$T$C$E$GT$$u20$as$u20$core..ops..try..Try$GT$10from_error17ha64bcc484fb483e3E>:
   159f2:	b082      	sub	sp, #8
   159f4:	2001      	movs	r0, #1
   159f6:	f88d 0003 	strb.w	r0, [sp, #3]
   159fa:	f89d 0003 	ldrb.w	r0, [sp, #3]
   159fe:	b002      	add	sp, #8
   15a00:	4770      	bx	lr

00015a02 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>:
    #[inline]
    fn to_u128() -> u128 {
        u128::from(B::to_u8()) | U::to_u128() << 1
    }
    #[inline]
    fn to_usize() -> usize {
   15a02:	b580      	push	{r7, lr}
   15a04:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a06:	f000 fdee 	bl	165e6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a0a:	9003      	str	r0, [sp, #12]
   15a0c:	e7ff      	b.n	15a0e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0xc>
   15a0e:	9803      	ldr	r0, [sp, #12]
   15a10:	f000 fe4f 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a14:	9002      	str	r0, [sp, #8]
   15a16:	e7ff      	b.n	15a18 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x16>
   15a18:	f000 f823 	bl	15a62 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>
   15a1c:	9001      	str	r0, [sp, #4]
   15a1e:	e7ff      	b.n	15a20 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x1e>
   15a20:	9801      	ldr	r0, [sp, #4]
   15a22:	0041      	lsls	r1, r0, #1
   15a24:	9100      	str	r1, [sp, #0]
   15a26:	e7ff      	b.n	15a28 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE+0x26>
   15a28:	9802      	ldr	r0, [sp, #8]
   15a2a:	9900      	ldr	r1, [sp, #0]
   15a2c:	4308      	orrs	r0, r1
    }
   15a2e:	b004      	add	sp, #16
   15a30:	bd80      	pop	{r7, pc}

00015a32 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE>:
    fn to_usize() -> usize {
   15a32:	b580      	push	{r7, lr}
   15a34:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a36:	f000 fdd6 	bl	165e6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a3a:	9003      	str	r0, [sp, #12]
   15a3c:	e7ff      	b.n	15a3e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0xc>
   15a3e:	9803      	ldr	r0, [sp, #12]
   15a40:	f000 fe37 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a44:	9002      	str	r0, [sp, #8]
   15a46:	e7ff      	b.n	15a48 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x16>
   15a48:	f7ff ffdb 	bl	15a02 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h557c2fcd5a1fe14fE>
   15a4c:	9001      	str	r0, [sp, #4]
   15a4e:	e7ff      	b.n	15a50 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x1e>
   15a50:	9801      	ldr	r0, [sp, #4]
   15a52:	0041      	lsls	r1, r0, #1
   15a54:	9100      	str	r1, [sp, #0]
   15a56:	e7ff      	b.n	15a58 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h874533f88a49044cE+0x26>
   15a58:	9802      	ldr	r0, [sp, #8]
   15a5a:	9900      	ldr	r1, [sp, #0]
   15a5c:	4308      	orrs	r0, r1
    }
   15a5e:	b004      	add	sp, #16
   15a60:	bd80      	pop	{r7, pc}

00015a62 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E>:
    fn to_usize() -> usize {
   15a62:	b580      	push	{r7, lr}
   15a64:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a66:	f000 fdc0 	bl	165ea <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15a6a:	9003      	str	r0, [sp, #12]
   15a6c:	e7ff      	b.n	15a6e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0xc>
   15a6e:	9803      	ldr	r0, [sp, #12]
   15a70:	f000 fe1f 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15a74:	9002      	str	r0, [sp, #8]
   15a76:	e7ff      	b.n	15a78 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x16>
   15a78:	f000 f83b 	bl	15af2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>
   15a7c:	9001      	str	r0, [sp, #4]
   15a7e:	e7ff      	b.n	15a80 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x1e>
   15a80:	9801      	ldr	r0, [sp, #4]
   15a82:	0041      	lsls	r1, r0, #1
   15a84:	9100      	str	r1, [sp, #0]
   15a86:	e7ff      	b.n	15a88 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h9aec71aac04d1661E+0x26>
   15a88:	9802      	ldr	r0, [sp, #8]
   15a8a:	9900      	ldr	r1, [sp, #0]
   15a8c:	4308      	orrs	r0, r1
    }
   15a8e:	b004      	add	sp, #16
   15a90:	bd80      	pop	{r7, pc}

00015a92 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>:
    fn to_usize() -> usize {
   15a92:	b580      	push	{r7, lr}
   15a94:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15a96:	f000 fda6 	bl	165e6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15a9a:	9003      	str	r0, [sp, #12]
   15a9c:	e7ff      	b.n	15a9e <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0xc>
   15a9e:	9803      	ldr	r0, [sp, #12]
   15aa0:	f000 fe07 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15aa4:	9002      	str	r0, [sp, #8]
   15aa6:	e7ff      	b.n	15aa8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x16>
   15aa8:	f000 f80b 	bl	15ac2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>
   15aac:	9001      	str	r0, [sp, #4]
   15aae:	e7ff      	b.n	15ab0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x1e>
   15ab0:	9801      	ldr	r0, [sp, #4]
   15ab2:	0041      	lsls	r1, r0, #1
   15ab4:	9100      	str	r1, [sp, #0]
   15ab6:	e7ff      	b.n	15ab8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E+0x26>
   15ab8:	9802      	ldr	r0, [sp, #8]
   15aba:	9900      	ldr	r1, [sp, #0]
   15abc:	4308      	orrs	r0, r1
    }
   15abe:	b004      	add	sp, #16
   15ac0:	bd80      	pop	{r7, pc}

00015ac2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE>:
    fn to_usize() -> usize {
   15ac2:	b580      	push	{r7, lr}
   15ac4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15ac6:	f000 fd90 	bl	165ea <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>
   15aca:	9003      	str	r0, [sp, #12]
   15acc:	e7ff      	b.n	15ace <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0xc>
   15ace:	9803      	ldr	r0, [sp, #12]
   15ad0:	f000 fdef 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15ad4:	9002      	str	r0, [sp, #8]
   15ad6:	e7ff      	b.n	15ad8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x16>
   15ad8:	f000 fd25 	bl	16526 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   15adc:	9001      	str	r0, [sp, #4]
   15ade:	e7ff      	b.n	15ae0 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x1e>
   15ae0:	9801      	ldr	r0, [sp, #4]
   15ae2:	0041      	lsls	r1, r0, #1
   15ae4:	9100      	str	r1, [sp, #0]
   15ae6:	e7ff      	b.n	15ae8 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hec69a4e5236ece5dE+0x26>
   15ae8:	9802      	ldr	r0, [sp, #8]
   15aea:	9900      	ldr	r1, [sp, #0]
   15aec:	4308      	orrs	r0, r1
    }
   15aee:	b004      	add	sp, #16
   15af0:	bd80      	pop	{r7, pc}

00015af2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E>:
    fn to_usize() -> usize {
   15af2:	b580      	push	{r7, lr}
   15af4:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   15af6:	f000 fd76 	bl	165e6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>
   15afa:	9003      	str	r0, [sp, #12]
   15afc:	e7ff      	b.n	15afe <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0xc>
   15afe:	9803      	ldr	r0, [sp, #12]
   15b00:	f000 fdd7 	bl	166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>
   15b04:	9002      	str	r0, [sp, #8]
   15b06:	e7ff      	b.n	15b08 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x16>
   15b08:	f7ff ffc3 	bl	15a92 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd130905a26cee184E>
   15b0c:	9001      	str	r0, [sp, #4]
   15b0e:	e7ff      	b.n	15b10 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x1e>
   15b10:	9801      	ldr	r0, [sp, #4]
   15b12:	0041      	lsls	r1, r0, #1
   15b14:	9100      	str	r1, [sp, #0]
   15b16:	e7ff      	b.n	15b18 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hfb80020064588514E+0x26>
   15b18:	9802      	ldr	r0, [sp, #8]
   15b1a:	9900      	ldr	r1, [sp, #0]
   15b1c:	4308      	orrs	r0, r1
    }
   15b1e:	b004      	add	sp, #16
   15b20:	bd80      	pop	{r7, pc}

00015b22 <_ZN4core5clone5impls52_$LT$impl$u20$core..clone..Clone$u20$for$u20$u16$GT$5clone17hf8d55a0b7215d61bE>:
   15b22:	b081      	sub	sp, #4
   15b24:	9000      	str	r0, [sp, #0]
   15b26:	8800      	ldrh	r0, [r0, #0]
   15b28:	b001      	add	sp, #4
   15b2a:	4770      	bx	lr

00015b2c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>:
   15b2c:	b580      	push	{r7, lr}
   15b2e:	b08c      	sub	sp, #48	; 0x30
   15b30:	9009      	str	r0, [sp, #36]	; 0x24
   15b32:	910a      	str	r1, [sp, #40]	; 0x28
   15b34:	920b      	str	r2, [sp, #44]	; 0x2c
   15b36:	9006      	str	r0, [sp, #24]
   15b38:	4608      	mov	r0, r1
   15b3a:	9105      	str	r1, [sp, #20]
   15b3c:	4611      	mov	r1, r2
   15b3e:	9204      	str	r2, [sp, #16]
   15b40:	f000 f89f 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15b44:	9003      	str	r0, [sp, #12]
   15b46:	e7ff      	b.n	15b48 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x1c>
   15b48:	9806      	ldr	r0, [sp, #24]
   15b4a:	9007      	str	r0, [sp, #28]
   15b4c:	9903      	ldr	r1, [sp, #12]
   15b4e:	9108      	str	r1, [sp, #32]
   15b50:	9807      	ldr	r0, [sp, #28]
   15b52:	9908      	ldr	r1, [sp, #32]
   15b54:	9a05      	ldr	r2, [sp, #20]
   15b56:	9b04      	ldr	r3, [sp, #16]
   15b58:	f000 f82d 	bl	15bb6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>
   15b5c:	9002      	str	r0, [sp, #8]
   15b5e:	9101      	str	r1, [sp, #4]
   15b60:	e7ff      	b.n	15b62 <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE+0x36>
   15b62:	9802      	ldr	r0, [sp, #8]
   15b64:	9901      	ldr	r1, [sp, #4]
   15b66:	b00c      	add	sp, #48	; 0x30
   15b68:	bd80      	pop	{r7, pc}

00015b6a <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>:
   15b6a:	b083      	sub	sp, #12
   15b6c:	9001      	str	r0, [sp, #4]
   15b6e:	9102      	str	r1, [sp, #8]
   15b70:	b003      	add	sp, #12
   15b72:	4770      	bx	lr

00015b74 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>:
   15b74:	b580      	push	{r7, lr}
   15b76:	b08a      	sub	sp, #40	; 0x28
   15b78:	9006      	str	r0, [sp, #24]
   15b7a:	9107      	str	r1, [sp, #28]
   15b7c:	9208      	str	r2, [sp, #32]
   15b7e:	9309      	str	r3, [sp, #36]	; 0x24
   15b80:	9005      	str	r0, [sp, #20]
   15b82:	4610      	mov	r0, r2
   15b84:	9104      	str	r1, [sp, #16]
   15b86:	4619      	mov	r1, r3
   15b88:	f000 f864 	bl	15c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15b8c:	9003      	str	r0, [sp, #12]
   15b8e:	e7ff      	b.n	15b90 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x1c>
   15b90:	9803      	ldr	r0, [sp, #12]
   15b92:	9905      	ldr	r1, [sp, #20]
   15b94:	f000 f96e 	bl	15e74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15b98:	9002      	str	r0, [sp, #8]
   15b9a:	e7ff      	b.n	15b9c <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x28>
   15b9c:	9804      	ldr	r0, [sp, #16]
   15b9e:	9905      	ldr	r1, [sp, #20]
   15ba0:	1a41      	subs	r1, r0, r1
   15ba2:	9802      	ldr	r0, [sp, #8]
   15ba4:	f000 f849 	bl	15c3a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>
   15ba8:	9001      	str	r0, [sp, #4]
   15baa:	9100      	str	r1, [sp, #0]
   15bac:	e7ff      	b.n	15bae <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E+0x3a>
   15bae:	9801      	ldr	r0, [sp, #4]
   15bb0:	9900      	ldr	r1, [sp, #0]
   15bb2:	b00a      	add	sp, #40	; 0x28
   15bb4:	bd80      	pop	{r7, pc}

00015bb6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE>:
   15bb6:	b580      	push	{r7, lr}
   15bb8:	b08c      	sub	sp, #48	; 0x30
   15bba:	9008      	str	r0, [sp, #32]
   15bbc:	9109      	str	r1, [sp, #36]	; 0x24
   15bbe:	920a      	str	r2, [sp, #40]	; 0x28
   15bc0:	930b      	str	r3, [sp, #44]	; 0x2c
   15bc2:	4288      	cmp	r0, r1
   15bc4:	9307      	str	r3, [sp, #28]
   15bc6:	9206      	str	r2, [sp, #24]
   15bc8:	9105      	str	r1, [sp, #20]
   15bca:	9004      	str	r0, [sp, #16]
   15bcc:	d806      	bhi.n	15bdc <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x26>
   15bce:	e7ff      	b.n	15bd0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x1a>
   15bd0:	9806      	ldr	r0, [sp, #24]
   15bd2:	9907      	ldr	r1, [sp, #28]
   15bd4:	f000 f855 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15bd8:	9003      	str	r0, [sp, #12]
   15bda:	e004      	b.n	15be6 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x30>
   15bdc:	9804      	ldr	r0, [sp, #16]
   15bde:	9905      	ldr	r1, [sp, #20]
   15be0:	f001 fed5 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   15be4:	defe      	udf	#254	; 0xfe
   15be6:	9805      	ldr	r0, [sp, #20]
   15be8:	9903      	ldr	r1, [sp, #12]
   15bea:	4288      	cmp	r0, r1
   15bec:	d809      	bhi.n	15c02 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x4c>
   15bee:	e7ff      	b.n	15bf0 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x3a>
   15bf0:	9804      	ldr	r0, [sp, #16]
   15bf2:	9905      	ldr	r1, [sp, #20]
   15bf4:	9a06      	ldr	r2, [sp, #24]
   15bf6:	9b07      	ldr	r3, [sp, #28]
   15bf8:	f7ff ffbc 	bl	15b74 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17hf55208e25e080ee1E>
   15bfc:	9002      	str	r0, [sp, #8]
   15bfe:	9101      	str	r1, [sp, #4]
   15c00:	e00a      	b.n	15c18 <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x62>
   15c02:	9806      	ldr	r0, [sp, #24]
   15c04:	9907      	ldr	r1, [sp, #28]
   15c06:	f000 f83c 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15c0a:	9000      	str	r0, [sp, #0]
   15c0c:	e7ff      	b.n	15c0e <_ZN99_$LT$core..ops..range..Range$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h87b51dcfb6436f8fE+0x58>
   15c0e:	9805      	ldr	r0, [sp, #20]
   15c10:	9900      	ldr	r1, [sp, #0]
   15c12:	f001 fe9a 	bl	1794a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   15c16:	defe      	udf	#254	; 0xfe
   15c18:	9802      	ldr	r0, [sp, #8]
   15c1a:	9901      	ldr	r1, [sp, #4]
   15c1c:	b00c      	add	sp, #48	; 0x30
   15c1e:	bd80      	pop	{r7, pc}

00015c20 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE>:
   15c20:	b580      	push	{r7, lr}
   15c22:	b084      	sub	sp, #16
   15c24:	9002      	str	r0, [sp, #8]
   15c26:	9103      	str	r1, [sp, #12]
   15c28:	f000 fd4a 	bl	166c0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>
   15c2c:	9001      	str	r0, [sp, #4]
   15c2e:	9100      	str	r1, [sp, #0]
   15c30:	e7ff      	b.n	15c32 <_ZN4core5slice14from_raw_parts17h1425df913744b73aE+0x12>
   15c32:	9801      	ldr	r0, [sp, #4]
   15c34:	9900      	ldr	r1, [sp, #0]
   15c36:	b004      	add	sp, #16
   15c38:	bd80      	pop	{r7, pc}

00015c3a <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E>:
   15c3a:	b580      	push	{r7, lr}
   15c3c:	b084      	sub	sp, #16
   15c3e:	9002      	str	r0, [sp, #8]
   15c40:	9103      	str	r1, [sp, #12]
   15c42:	f000 fd4a 	bl	166da <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>
   15c46:	9001      	str	r0, [sp, #4]
   15c48:	9100      	str	r1, [sp, #0]
   15c4a:	e7ff      	b.n	15c4c <_ZN4core5slice18from_raw_parts_mut17h6e3cafaec5dd9a29E+0x12>
   15c4c:	9801      	ldr	r0, [sp, #4]
   15c4e:	9900      	ldr	r1, [sp, #0]
   15c50:	b004      	add	sp, #16
   15c52:	bd80      	pop	{r7, pc}

00015c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>:
   15c54:	b082      	sub	sp, #8
   15c56:	9000      	str	r0, [sp, #0]
   15c58:	9101      	str	r1, [sp, #4]
   15c5a:	b002      	add	sp, #8
   15c5c:	4770      	bx	lr

00015c5e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE>:
   15c5e:	b580      	push	{r7, lr}
   15c60:	b086      	sub	sp, #24
   15c62:	9003      	str	r0, [sp, #12]
   15c64:	9104      	str	r1, [sp, #16]
   15c66:	9205      	str	r2, [sp, #20]
   15c68:	9002      	str	r0, [sp, #8]
   15c6a:	4610      	mov	r0, r2
   15c6c:	9a02      	ldr	r2, [sp, #8]
   15c6e:	9101      	str	r1, [sp, #4]
   15c70:	4611      	mov	r1, r2
   15c72:	9a01      	ldr	r2, [sp, #4]
   15c74:	f000 f886 	bl	15d84 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>
   15c78:	9000      	str	r0, [sp, #0]
   15c7a:	e7ff      	b.n	15c7c <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17h519035affabbde9aE+0x1e>
   15c7c:	9800      	ldr	r0, [sp, #0]
   15c7e:	b006      	add	sp, #24
   15c80:	bd80      	pop	{r7, pc}

00015c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>:
   15c82:	b084      	sub	sp, #16
   15c84:	9002      	str	r0, [sp, #8]
   15c86:	9103      	str	r1, [sp, #12]
   15c88:	9000      	str	r0, [sp, #0]
   15c8a:	9101      	str	r1, [sp, #4]
   15c8c:	9801      	ldr	r0, [sp, #4]
   15c8e:	b004      	add	sp, #16
   15c90:	4770      	bx	lr

00015c92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>:
   15c92:	b580      	push	{r7, lr}
   15c94:	b092      	sub	sp, #72	; 0x48
   15c96:	900e      	str	r0, [sp, #56]	; 0x38
   15c98:	910f      	str	r1, [sp, #60]	; 0x3c
   15c9a:	9009      	str	r0, [sp, #36]	; 0x24
   15c9c:	9108      	str	r1, [sp, #32]
   15c9e:	f000 f83e 	bl	15d1e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>
   15ca2:	4601      	mov	r1, r0
   15ca4:	9010      	str	r0, [sp, #64]	; 0x40
   15ca6:	9107      	str	r1, [sp, #28]
   15ca8:	e7ff      	b.n	15caa <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x18>
   15caa:	9807      	ldr	r0, [sp, #28]
   15cac:	f000 fcc0 	bl	16630 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15cb0:	e7ff      	b.n	15cb2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x20>
   15cb2:	e7ff      	b.n	15cb4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x22>
   15cb4:	2002      	movs	r0, #2
   15cb6:	9011      	str	r0, [sp, #68]	; 0x44
   15cb8:	9811      	ldr	r0, [sp, #68]	; 0x44
   15cba:	9006      	str	r0, [sp, #24]
   15cbc:	e7ff      	b.n	15cbe <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x2c>
   15cbe:	9806      	ldr	r0, [sp, #24]
   15cc0:	2800      	cmp	r0, #0
   15cc2:	d006      	beq.n	15cd2 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x40>
   15cc4:	e7ff      	b.n	15cc6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x34>
   15cc6:	9809      	ldr	r0, [sp, #36]	; 0x24
   15cc8:	9908      	ldr	r1, [sp, #32]
   15cca:	f7ff ffda 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15cce:	9005      	str	r0, [sp, #20]
   15cd0:	e011      	b.n	15cf6 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x64>
   15cd2:	9807      	ldr	r0, [sp, #28]
   15cd4:	9909      	ldr	r1, [sp, #36]	; 0x24
   15cd6:	9004      	str	r0, [sp, #16]
   15cd8:	4608      	mov	r0, r1
   15cda:	9908      	ldr	r1, [sp, #32]
   15cdc:	f7ff ffd1 	bl	15c82 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17hf7d267c874d9c3feE>
   15ce0:	9003      	str	r0, [sp, #12]
   15ce2:	e7ff      	b.n	15ce4 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x52>
   15ce4:	9804      	ldr	r0, [sp, #16]
   15ce6:	9903      	ldr	r1, [sp, #12]
   15ce8:	f7fa fa26 	bl	10138 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$12wrapping_add17h8f8863d7a457f80fE>
   15cec:	9002      	str	r0, [sp, #8]
   15cee:	e7ff      	b.n	15cf0 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x5e>
   15cf0:	9802      	ldr	r0, [sp, #8]
   15cf2:	900c      	str	r0, [sp, #48]	; 0x30
   15cf4:	e006      	b.n	15d04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15cf6:	9807      	ldr	r0, [sp, #28]
   15cf8:	9905      	ldr	r1, [sp, #20]
   15cfa:	f000 fc78 	bl	165ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>
   15cfe:	900c      	str	r0, [sp, #48]	; 0x30
   15d00:	e7ff      	b.n	15d02 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x70>
   15d02:	e7ff      	b.n	15d04 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x72>
   15d04:	9807      	ldr	r0, [sp, #28]
   15d06:	f000 f8e2 	bl	15ece <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15d0a:	9001      	str	r0, [sp, #4]
   15d0c:	e7ff      	b.n	15d0e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE+0x7c>
   15d0e:	980c      	ldr	r0, [sp, #48]	; 0x30
   15d10:	9901      	ldr	r1, [sp, #4]
   15d12:	910a      	str	r1, [sp, #40]	; 0x28
   15d14:	900b      	str	r0, [sp, #44]	; 0x2c
   15d16:	980a      	ldr	r0, [sp, #40]	; 0x28
   15d18:	990b      	ldr	r1, [sp, #44]	; 0x2c
   15d1a:	b012      	add	sp, #72	; 0x48
   15d1c:	bd80      	pop	{r7, pc}

00015d1e <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$6as_ptr17hd46910a655ee29b7E>:
   15d1e:	b082      	sub	sp, #8
   15d20:	9000      	str	r0, [sp, #0]
   15d22:	9101      	str	r1, [sp, #4]
   15d24:	b002      	add	sp, #8
   15d26:	4770      	bx	lr

00015d28 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E>:
   15d28:	b580      	push	{r7, lr}
   15d2a:	b086      	sub	sp, #24
   15d2c:	9003      	str	r0, [sp, #12]
   15d2e:	9104      	str	r1, [sp, #16]
   15d30:	f7ff ff1b 	bl	15b6a <_ZN90_$LT$core..ops..range..RangeFull$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17hb4eb9d6922ce8225E>
   15d34:	9002      	str	r0, [sp, #8]
   15d36:	9101      	str	r1, [sp, #4]
   15d38:	e7ff      	b.n	15d3a <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17ha5cb7412ab372e80E+0x12>
   15d3a:	9802      	ldr	r0, [sp, #8]
   15d3c:	9901      	ldr	r1, [sp, #4]
   15d3e:	b006      	add	sp, #24
   15d40:	bd80      	pop	{r7, pc}

00015d42 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E>:
   15d42:	b580      	push	{r7, lr}
   15d44:	b088      	sub	sp, #32
   15d46:	9005      	str	r0, [sp, #20]
   15d48:	9106      	str	r1, [sp, #24]
   15d4a:	9207      	str	r2, [sp, #28]
   15d4c:	9004      	str	r0, [sp, #16]
   15d4e:	4610      	mov	r0, r2
   15d50:	9a04      	ldr	r2, [sp, #16]
   15d52:	9103      	str	r1, [sp, #12]
   15d54:	4611      	mov	r1, r2
   15d56:	9a03      	ldr	r2, [sp, #12]
   15d58:	f7ff fee8 	bl	15b2c <_ZN103_$LT$core..ops..range..RangeFrom$LT$usize$GT$$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$9index_mut17h92abc06b7f1a9c3dE>
   15d5c:	9002      	str	r0, [sp, #8]
   15d5e:	9101      	str	r1, [sp, #4]
   15d60:	e7ff      	b.n	15d62 <_ZN4core5slice77_$LT$impl$u20$core..ops..index..IndexMut$LT$I$GT$$u20$for$u20$$u5b$T$u5d$$GT$9index_mut17had5aa6ee6ad8e854E+0x20>
   15d62:	9802      	ldr	r0, [sp, #8]
   15d64:	9901      	ldr	r1, [sp, #4]
   15d66:	b008      	add	sp, #32
   15d68:	bd80      	pop	{r7, pc}

00015d6a <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE>:
   15d6a:	b580      	push	{r7, lr}
   15d6c:	b084      	sub	sp, #16
   15d6e:	9002      	str	r0, [sp, #8]
   15d70:	9103      	str	r1, [sp, #12]
   15d72:	f7ff ff8e 	bl	15c92 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$4iter17h745675ce0bad76ebE>
   15d76:	9001      	str	r0, [sp, #4]
   15d78:	9100      	str	r1, [sp, #0]
   15d7a:	e7ff      	b.n	15d7c <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17hed7f2b76c31c4d9bE+0x12>
   15d7c:	9801      	ldr	r0, [sp, #4]
   15d7e:	9900      	ldr	r1, [sp, #0]
   15d80:	b004      	add	sp, #16
   15d82:	bd80      	pop	{r7, pc}

00015d84 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E>:
   15d84:	b580      	push	{r7, lr}
   15d86:	b086      	sub	sp, #24
   15d88:	9003      	str	r0, [sp, #12]
   15d8a:	9104      	str	r1, [sp, #16]
   15d8c:	9205      	str	r2, [sp, #20]
   15d8e:	9002      	str	r0, [sp, #8]
   15d90:	4608      	mov	r0, r1
   15d92:	4611      	mov	r1, r2
   15d94:	f7ff ff5e 	bl	15c54 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$10as_mut_ptr17hb9cee94614ec587eE>
   15d98:	9001      	str	r0, [sp, #4]
   15d9a:	e7ff      	b.n	15d9c <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x18>
   15d9c:	9801      	ldr	r0, [sp, #4]
   15d9e:	9902      	ldr	r1, [sp, #8]
   15da0:	f000 f868 	bl	15e74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>
   15da4:	9000      	str	r0, [sp, #0]
   15da6:	e7ff      	b.n	15da8 <_ZN68_$LT$usize$u20$as$u20$core..slice..SliceIndex$LT$$u5b$T$u5d$$GT$$GT$17get_unchecked_mut17h7a451e5c122e93f5E+0x24>
   15da8:	9800      	ldr	r0, [sp, #0]
   15daa:	b006      	add	sp, #24
   15dac:	bd80      	pop	{r7, pc}

00015dae <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE>:
   15dae:	b580      	push	{r7, lr}
   15db0:	b08e      	sub	sp, #56	; 0x38
   15db2:	9007      	str	r0, [sp, #28]
   15db4:	6801      	ldr	r1, [r0, #0]
   15db6:	9005      	str	r0, [sp, #20]
   15db8:	4608      	mov	r0, r1
   15dba:	f000 f88e 	bl	15eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15dbe:	9004      	str	r0, [sp, #16]
   15dc0:	e7ff      	b.n	15dc2 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x14>
   15dc2:	9804      	ldr	r0, [sp, #16]
   15dc4:	f000 f879 	bl	15eba <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>
   15dc8:	e7ff      	b.n	15dca <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1c>
   15dca:	e7ff      	b.n	15dcc <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x1e>
   15dcc:	2002      	movs	r0, #2
   15dce:	9008      	str	r0, [sp, #32]
   15dd0:	9808      	ldr	r0, [sp, #32]
   15dd2:	9003      	str	r0, [sp, #12]
   15dd4:	e7ff      	b.n	15dd6 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x28>
   15dd6:	9803      	ldr	r0, [sp, #12]
   15dd8:	2800      	cmp	r0, #0
   15dda:	d007      	beq.n	15dec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15ddc:	e7ff      	b.n	15dde <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x30>
   15dde:	9805      	ldr	r0, [sp, #20]
   15de0:	6840      	ldr	r0, [r0, #4]
   15de2:	f000 fc25 	bl	16630 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>
   15de6:	e7ff      	b.n	15de8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3a>
   15de8:	e7ff      	b.n	15dea <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3c>
   15dea:	e7ff      	b.n	15dec <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x3e>
   15dec:	9805      	ldr	r0, [sp, #20]
   15dee:	6800      	ldr	r0, [r0, #0]
   15df0:	f000 f873 	bl	15eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15df4:	9002      	str	r0, [sp, #8]
   15df6:	e7ff      	b.n	15df8 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x4a>
   15df8:	9805      	ldr	r0, [sp, #20]
   15dfa:	6841      	ldr	r1, [r0, #4]
   15dfc:	9a02      	ldr	r2, [sp, #8]
   15dfe:	428a      	cmp	r2, r1
   15e00:	d02f      	beq.n	15e62 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xb4>
   15e02:	e7ff      	b.n	15e04 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x56>
   15e04:	9805      	ldr	r0, [sp, #20]
   15e06:	900a      	str	r0, [sp, #40]	; 0x28
   15e08:	2101      	movs	r1, #1
   15e0a:	910b      	str	r1, [sp, #44]	; 0x2c
   15e0c:	2102      	movs	r1, #2
   15e0e:	910d      	str	r1, [sp, #52]	; 0x34
   15e10:	990d      	ldr	r1, [sp, #52]	; 0x34
   15e12:	2900      	cmp	r1, #0
   15e14:	d015      	beq.n	15e42 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x94>
   15e16:	e7ff      	b.n	15e18 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0x6a>
   15e18:	9805      	ldr	r0, [sp, #20]
   15e1a:	6800      	ldr	r0, [r0, #0]
   15e1c:	f000 f85d 	bl	15eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15e20:	900c      	str	r0, [sp, #48]	; 0x30
   15e22:	9905      	ldr	r1, [sp, #20]
   15e24:	680a      	ldr	r2, [r1, #0]
   15e26:	9001      	str	r0, [sp, #4]
   15e28:	4610      	mov	r0, r2
   15e2a:	f000 f856 	bl	15eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15e2e:	2101      	movs	r1, #1
   15e30:	f000 f837 	bl	15ea2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15e34:	f000 f84b 	bl	15ece <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>
   15e38:	9905      	ldr	r1, [sp, #20]
   15e3a:	6008      	str	r0, [r1, #0]
   15e3c:	9801      	ldr	r0, [sp, #4]
   15e3e:	9009      	str	r0, [sp, #36]	; 0x24
   15e40:	e00c      	b.n	15e5c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15e42:	9805      	ldr	r0, [sp, #20]
   15e44:	6840      	ldr	r0, [r0, #4]
   15e46:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   15e4a:	f7fa f980 	bl	1014e <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$15wrapping_offset17h322e2b23ce8789bfE>
   15e4e:	9905      	ldr	r1, [sp, #20]
   15e50:	6048      	str	r0, [r1, #4]
   15e52:	6808      	ldr	r0, [r1, #0]
   15e54:	f000 f841 	bl	15eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>
   15e58:	9009      	str	r0, [sp, #36]	; 0x24
   15e5a:	e7ff      	b.n	15e5c <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xae>
   15e5c:	9809      	ldr	r0, [sp, #36]	; 0x24
   15e5e:	9000      	str	r0, [sp, #0]
   15e60:	e002      	b.n	15e68 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xba>
   15e62:	2000      	movs	r0, #0
   15e64:	9006      	str	r0, [sp, #24]
   15e66:	e002      	b.n	15e6e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15e68:	9800      	ldr	r0, [sp, #0]
   15e6a:	9006      	str	r0, [sp, #24]
   15e6c:	e7ff      	b.n	15e6e <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h6a0a551e6caeb2ddE+0xc0>
   15e6e:	9806      	ldr	r0, [sp, #24]
   15e70:	b00e      	add	sp, #56	; 0x38
   15e72:	bd80      	pop	{r7, pc}

00015e74 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E>:
   15e74:	b580      	push	{r7, lr}
   15e76:	b084      	sub	sp, #16
   15e78:	9002      	str	r0, [sp, #8]
   15e7a:	9103      	str	r1, [sp, #12]
   15e7c:	f000 f811 	bl	15ea2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>
   15e80:	9001      	str	r0, [sp, #4]
   15e82:	e7ff      	b.n	15e84 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h252fb81380fb6ec0E+0x10>
   15e84:	9801      	ldr	r0, [sp, #4]
   15e86:	b004      	add	sp, #16
   15e88:	bd80      	pop	{r7, pc}

00015e8a <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E>:
   15e8a:	b580      	push	{r7, lr}
   15e8c:	b084      	sub	sp, #16
   15e8e:	460a      	mov	r2, r1
   15e90:	9002      	str	r0, [sp, #8]
   15e92:	f8ad 100e 	strh.w	r1, [sp, #14]
   15e96:	9201      	str	r2, [sp, #4]
   15e98:	f000 fc4d 	bl	16736 <_ZN4core3ptr5write17h147d4643d861e927E>
   15e9c:	e7ff      	b.n	15e9e <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hd704cb894e8b6842E+0x14>
   15e9e:	b004      	add	sp, #16
   15ea0:	bd80      	pop	{r7, pc}

00015ea2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE>:
   15ea2:	b084      	sub	sp, #16
   15ea4:	9001      	str	r0, [sp, #4]
   15ea6:	9102      	str	r1, [sp, #8]
   15ea8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   15eac:	9003      	str	r0, [sp, #12]
   15eae:	9803      	ldr	r0, [sp, #12]
   15eb0:	9000      	str	r0, [sp, #0]
   15eb2:	e7ff      	b.n	15eb4 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$6offset17hb9c66d047b11fe8fE+0x12>
   15eb4:	9800      	ldr	r0, [sp, #0]
   15eb6:	b004      	add	sp, #16
   15eb8:	4770      	bx	lr

00015eba <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE>:
   15eba:	b082      	sub	sp, #8
   15ebc:	9001      	str	r0, [sp, #4]
   15ebe:	9000      	str	r0, [sp, #0]
   15ec0:	e7ff      	b.n	15ec2 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$7is_null17h6f0535a736c5cd7eE+0x8>
   15ec2:	9800      	ldr	r0, [sp, #0]
   15ec4:	fab0 f180 	clz	r1, r0
   15ec8:	0948      	lsrs	r0, r1, #5
   15eca:	b002      	add	sp, #8
   15ecc:	4770      	bx	lr

00015ece <_ZN4core3ptr8non_null16NonNull$LT$T$GT$13new_unchecked17h31c6399a49385b9bE>:
   15ece:	b082      	sub	sp, #8
   15ed0:	9001      	str	r0, [sp, #4]
   15ed2:	9000      	str	r0, [sp, #0]
   15ed4:	9800      	ldr	r0, [sp, #0]
   15ed6:	b002      	add	sp, #8
   15ed8:	4770      	bx	lr

00015eda <_ZN4core3ptr8non_null16NonNull$LT$T$GT$6as_ptr17h46d040ed8bec7353E>:
   15eda:	b081      	sub	sp, #4
   15edc:	9000      	str	r0, [sp, #0]
   15ede:	b001      	add	sp, #4
   15ee0:	4770      	bx	lr

00015ee2 <_ZN10st7735_lcd37_IMPL_NUM_ToPrimitive_FOR_Orientation83_$LT$impl$u20$num_traits..cast..ToPrimitive$u20$for$u20$st7735_lcd..Orientation$GT$6to_u6428_$u7b$$u7b$closure$u7d$$u7d$17h5bd1e9e699a89583E>:
   15ee2:	b084      	sub	sp, #16
   15ee4:	460a      	mov	r2, r1
   15ee6:	4603      	mov	r3, r0
   15ee8:	9103      	str	r1, [sp, #12]
   15eea:	9002      	str	r0, [sp, #8]
   15eec:	b004      	add	sp, #16
   15eee:	4770      	bx	lr

00015ef0 <_ZN4core3cmp5impls54_$LT$impl$u20$core..cmp..PartialOrd$u20$for$u20$u8$GT$2lt17h751b32771630458fE>:
   15ef0:	b082      	sub	sp, #8
   15ef2:	9000      	str	r0, [sp, #0]
   15ef4:	9101      	str	r1, [sp, #4]
   15ef6:	7800      	ldrb	r0, [r0, #0]
   15ef8:	7809      	ldrb	r1, [r1, #0]
   15efa:	2200      	movs	r2, #0
   15efc:	4288      	cmp	r0, r1
   15efe:	bf38      	it	cc
   15f00:	2201      	movcc	r2, #1
   15f02:	4610      	mov	r0, r2
   15f04:	b002      	add	sp, #8
   15f06:	4770      	bx	lr

00015f08 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>:
   15f08:	b580      	push	{r7, lr}
   15f0a:	b08c      	sub	sp, #48	; 0x30
   15f0c:	9005      	str	r0, [sp, #20]
   15f0e:	9106      	str	r1, [sp, #24]
   15f10:	9207      	str	r2, [sp, #28]
   15f12:	9008      	str	r0, [sp, #32]
   15f14:	9109      	str	r1, [sp, #36]	; 0x24
   15f16:	2301      	movs	r3, #1
   15f18:	930b      	str	r3, [sp, #44]	; 0x2c
   15f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15f1c:	9204      	str	r2, [sp, #16]
   15f1e:	9103      	str	r1, [sp, #12]
   15f20:	9002      	str	r0, [sp, #8]
   15f22:	9301      	str	r3, [sp, #4]
   15f24:	e7ff      	b.n	15f26 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x1e>
   15f26:	9801      	ldr	r0, [sp, #4]
   15f28:	9904      	ldr	r1, [sp, #16]
   15f2a:	fb00 f201 	mul.w	r2, r0, r1
   15f2e:	920a      	str	r2, [sp, #40]	; 0x28
   15f30:	9802      	ldr	r0, [sp, #8]
   15f32:	9903      	ldr	r1, [sp, #12]
   15f34:	f000 fc07 	bl	16746 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>
   15f38:	e7ff      	b.n	15f3a <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E+0x32>
   15f3a:	b00c      	add	sp, #48	; 0x30
   15f3c:	bd80      	pop	{r7, pc}

00015f3e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E>:
   15f3e:	b580      	push	{r7, lr}
   15f40:	b088      	sub	sp, #32
   15f42:	9004      	str	r0, [sp, #16]
   15f44:	9105      	str	r1, [sp, #20]
   15f46:	2201      	movs	r2, #1
   15f48:	9207      	str	r2, [sp, #28]
   15f4a:	9a07      	ldr	r2, [sp, #28]
   15f4c:	9103      	str	r1, [sp, #12]
   15f4e:	9002      	str	r0, [sp, #8]
   15f50:	9201      	str	r2, [sp, #4]
   15f52:	e7ff      	b.n	15f54 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x16>
   15f54:	9801      	ldr	r0, [sp, #4]
   15f56:	2820      	cmp	r0, #32
   15f58:	d306      	bcc.n	15f68 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x2a>
   15f5a:	e7ff      	b.n	15f5c <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x1e>
   15f5c:	2201      	movs	r2, #1
   15f5e:	9802      	ldr	r0, [sp, #8]
   15f60:	9903      	ldr	r1, [sp, #12]
   15f62:	f7ff ffd1 	bl	15f08 <_ZN4core3ptr19swap_nonoverlapping17hd7afcc643b1b5b34E>
   15f66:	e013      	b.n	15f90 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x52>
   15f68:	9802      	ldr	r0, [sp, #8]
   15f6a:	f000 f814 	bl	15f96 <_ZN4core3ptr4read17h10ae8fa070723038E>
   15f6e:	4601      	mov	r1, r0
   15f70:	f88d 001b 	strb.w	r0, [sp, #27]
   15f74:	9100      	str	r1, [sp, #0]
   15f76:	e7ff      	b.n	15f78 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x3a>
   15f78:	2201      	movs	r2, #1
   15f7a:	9803      	ldr	r0, [sp, #12]
   15f7c:	9902      	ldr	r1, [sp, #8]
   15f7e:	f7f8 faf7 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15f82:	e7ff      	b.n	15f84 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x46>
   15f84:	9803      	ldr	r0, [sp, #12]
   15f86:	9900      	ldr	r1, [sp, #0]
   15f88:	f7f9 fc49 	bl	f81e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   15f8c:	e7ff      	b.n	15f8e <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x50>
   15f8e:	e000      	b.n	15f92 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15f90:	e7ff      	b.n	15f92 <_ZN4core3ptr23swap_nonoverlapping_one17hc3f61491275449f5E+0x54>
   15f92:	b008      	add	sp, #32
   15f94:	bd80      	pop	{r7, pc}

00015f96 <_ZN4core3ptr4read17h10ae8fa070723038E>:
   15f96:	b580      	push	{r7, lr}
   15f98:	b088      	sub	sp, #32
   15f9a:	9004      	str	r0, [sp, #16]
   15f9c:	f89d 1015 	ldrb.w	r1, [sp, #21]
   15fa0:	f88d 100f 	strb.w	r1, [sp, #15]
   15fa4:	9002      	str	r0, [sp, #8]
   15fa6:	e7ff      	b.n	15fa8 <_ZN4core3ptr4read17h10ae8fa070723038E+0x12>
   15fa8:	f10d 000f 	add.w	r0, sp, #15
   15fac:	9006      	str	r0, [sp, #24]
   15fae:	9007      	str	r0, [sp, #28]
   15fb0:	e7ff      	b.n	15fb2 <_ZN4core3ptr4read17h10ae8fa070723038E+0x1c>
   15fb2:	f10d 010f 	add.w	r1, sp, #15
   15fb6:	2201      	movs	r2, #1
   15fb8:	9802      	ldr	r0, [sp, #8]
   15fba:	f7f8 fad9 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   15fbe:	e7ff      	b.n	15fc0 <_ZN4core3ptr4read17h10ae8fa070723038E+0x2a>
   15fc0:	f89d 000f 	ldrb.w	r0, [sp, #15]
   15fc4:	4601      	mov	r1, r0
   15fc6:	f88d 0016 	strb.w	r0, [sp, #22]
   15fca:	f88d 0017 	strb.w	r0, [sp, #23]
   15fce:	9101      	str	r1, [sp, #4]
   15fd0:	e7ff      	b.n	15fd2 <_ZN4core3ptr4read17h10ae8fa070723038E+0x3c>
   15fd2:	9801      	ldr	r0, [sp, #4]
   15fd4:	b008      	add	sp, #32
   15fd6:	bd80      	pop	{r7, pc}

00015fd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   15fd8:	b580      	push	{r7, lr}
   15fda:	b088      	sub	sp, #32
   15fdc:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   15fde:	1d01      	adds	r1, r0, #4
   15fe0:	9106      	str	r1, [sp, #24]
   15fe2:	9107      	str	r1, [sp, #28]
   15fe4:	9004      	str	r0, [sp, #16]
   15fe6:	9103      	str	r1, [sp, #12]
   15fe8:	e7ff      	b.n	15fea <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x12>
   15fea:	9804      	ldr	r0, [sp, #16]
   15fec:	6801      	ldr	r1, [r0, #0]
   15fee:	9803      	ldr	r0, [sp, #12]
   15ff0:	f7f9 fa6f 	bl	f4d2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   15ff4:	9002      	str	r0, [sp, #8]
   15ff6:	9101      	str	r1, [sp, #4]
   15ff8:	e7ff      	b.n	15ffa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE+0x22>
    }
   15ffa:	9802      	ldr	r0, [sp, #8]
   15ffc:	9901      	ldr	r1, [sp, #4]
   15ffe:	b008      	add	sp, #32
   16000:	bd80      	pop	{r7, pc}

00016002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>:
    pub(crate) fn as_mut_slice(&mut self) -> &mut [T] {
   16002:	b580      	push	{r7, lr}
   16004:	b088      	sub	sp, #32
   16006:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts_mut(self.buffer.as_mut_ptr() as *mut T, self.len) }
   16008:	1d01      	adds	r1, r0, #4
   1600a:	9106      	str	r1, [sp, #24]
   1600c:	9107      	str	r1, [sp, #28]
   1600e:	9004      	str	r0, [sp, #16]
   16010:	9103      	str	r1, [sp, #12]
   16012:	e7ff      	b.n	16014 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x12>
   16014:	9804      	ldr	r0, [sp, #16]
   16016:	6801      	ldr	r1, [r0, #0]
   16018:	9803      	ldr	r0, [sp, #12]
   1601a:	f7f9 fa5a 	bl	f4d2 <_ZN4core5slice18from_raw_parts_mut17hf19c8624e2c38cbaE>
   1601e:	9002      	str	r0, [sp, #8]
   16020:	9101      	str	r1, [sp, #4]
   16022:	e7ff      	b.n	16024 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE+0x22>
    }
   16024:	9802      	ldr	r0, [sp, #8]
   16026:	9901      	ldr	r1, [sp, #4]
   16028:	b008      	add	sp, #32
   1602a:	bd80      	pop	{r7, pc}

0001602c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   1602c:	b580      	push	{r7, lr}
   1602e:	b08a      	sub	sp, #40	; 0x28
   16030:	460a      	mov	r2, r1
   16032:	9006      	str	r0, [sp, #24]
   16034:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   16038:	1d01      	adds	r1, r0, #4
   1603a:	9108      	str	r1, [sp, #32]
   1603c:	9109      	str	r1, [sp, #36]	; 0x24
   1603e:	9005      	str	r0, [sp, #20]
   16040:	9204      	str	r2, [sp, #16]
   16042:	9103      	str	r1, [sp, #12]
   16044:	e7ff      	b.n	16046 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x1a>
            .add(self.len)
   16046:	9805      	ldr	r0, [sp, #20]
   16048:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   1604a:	9803      	ldr	r0, [sp, #12]
   1604c:	f7f8 fbf4 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   16050:	9002      	str	r0, [sp, #8]
   16052:	e7ff      	b.n	16054 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x28>
   16054:	9802      	ldr	r0, [sp, #8]
   16056:	9904      	ldr	r1, [sp, #16]
   16058:	f000 f994 	bl	16384 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   1605c:	e7ff      	b.n	1605e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x32>
        self.len += 1;
   1605e:	9805      	ldr	r0, [sp, #20]
   16060:	6801      	ldr	r1, [r0, #0]
   16062:	1c4a      	adds	r2, r1, #1
   16064:	4613      	mov	r3, r2
   16066:	428a      	cmp	r2, r1
   16068:	9301      	str	r3, [sp, #4]
   1606a:	d305      	bcc.n	16078 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x4c>
   1606c:	e7ff      	b.n	1606e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE+0x42>
   1606e:	9801      	ldr	r0, [sp, #4]
   16070:	9905      	ldr	r1, [sp, #20]
   16072:	6008      	str	r0, [r1, #0]
    }
   16074:	b00a      	add	sp, #40	; 0x28
   16076:	bd80      	pop	{r7, pc}
        self.len += 1;
   16078:	f64f 5030 	movw	r0, #64816	; 0xfd30
   1607c:	f2c0 0001 	movt	r0, #1
   16080:	f64f 5220 	movw	r2, #64800	; 0xfd20
   16084:	f2c0 0201 	movt	r2, #1
   16088:	211c      	movs	r1, #28
   1608a:	f000 fd0b 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   1608e:	defe      	udf	#254	; 0xfe

00016090 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>:
    pub(crate) unsafe fn push_unchecked(&mut self, item: T) {
   16090:	b580      	push	{r7, lr}
   16092:	b08a      	sub	sp, #40	; 0x28
   16094:	460a      	mov	r2, r1
   16096:	9006      	str	r0, [sp, #24]
   16098:	f88d 101f 	strb.w	r1, [sp, #31]
        (self.buffer.as_mut_ptr() as *mut T)
   1609c:	1d01      	adds	r1, r0, #4
   1609e:	9108      	str	r1, [sp, #32]
   160a0:	9109      	str	r1, [sp, #36]	; 0x24
   160a2:	9005      	str	r0, [sp, #20]
   160a4:	9204      	str	r2, [sp, #16]
   160a6:	9103      	str	r1, [sp, #12]
   160a8:	e7ff      	b.n	160aa <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x1a>
            .add(self.len)
   160aa:	9805      	ldr	r0, [sp, #20]
   160ac:	6801      	ldr	r1, [r0, #0]
        (self.buffer.as_mut_ptr() as *mut T)
   160ae:	9803      	ldr	r0, [sp, #12]
   160b0:	f7f8 fbc2 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   160b4:	9002      	str	r0, [sp, #8]
   160b6:	e7ff      	b.n	160b8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x28>
   160b8:	9802      	ldr	r0, [sp, #8]
   160ba:	9904      	ldr	r1, [sp, #16]
   160bc:	f000 f962 	bl	16384 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>
   160c0:	e7ff      	b.n	160c2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x32>
        self.len += 1;
   160c2:	9805      	ldr	r0, [sp, #20]
   160c4:	6801      	ldr	r1, [r0, #0]
   160c6:	1c4a      	adds	r2, r1, #1
   160c8:	4613      	mov	r3, r2
   160ca:	428a      	cmp	r2, r1
   160cc:	9301      	str	r3, [sp, #4]
   160ce:	d305      	bcc.n	160dc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x4c>
   160d0:	e7ff      	b.n	160d2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E+0x42>
   160d2:	9801      	ldr	r0, [sp, #4]
   160d4:	9905      	ldr	r1, [sp, #20]
   160d6:	6008      	str	r0, [r1, #0]
    }
   160d8:	b00a      	add	sp, #40	; 0x28
   160da:	bd80      	pop	{r7, pc}
        self.len += 1;
   160dc:	f64f 5030 	movw	r0, #64816	; 0xfd30
   160e0:	f2c0 0001 	movt	r0, #1
   160e4:	f64f 5220 	movw	r2, #64800	; 0xfd20
   160e8:	f2c0 0201 	movt	r2, #1
   160ec:	211c      	movs	r1, #28
   160ee:	f000 fcd9 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   160f2:	defe      	udf	#254	; 0xfe

000160f4 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E>:
    pub(crate) fn extend_from_slice(&mut self, other: &[T]) -> Result<(), ()>
   160f4:	b580      	push	{r7, lr}
   160f6:	b094      	sub	sp, #80	; 0x50
   160f8:	900e      	str	r0, [sp, #56]	; 0x38
   160fa:	910f      	str	r1, [sp, #60]	; 0x3c
   160fc:	9210      	str	r2, [sp, #64]	; 0x40
        if self.len + other.len() > self.capacity() {
   160fe:	6803      	ldr	r3, [r0, #0]
   16100:	9009      	str	r0, [sp, #36]	; 0x24
   16102:	4608      	mov	r0, r1
   16104:	9108      	str	r1, [sp, #32]
   16106:	4611      	mov	r1, r2
   16108:	9207      	str	r2, [sp, #28]
   1610a:	9306      	str	r3, [sp, #24]
   1610c:	f7f8 fc24 	bl	e958 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$3len17h745ebc9dbe6c3bb7E>
   16110:	9005      	str	r0, [sp, #20]
   16112:	e7ff      	b.n	16114 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x20>
   16114:	9806      	ldr	r0, [sp, #24]
   16116:	9905      	ldr	r1, [sp, #20]
   16118:	1842      	adds	r2, r0, r1
   1611a:	4613      	mov	r3, r2
   1611c:	4282      	cmp	r2, r0
   1611e:	9304      	str	r3, [sp, #16]
   16120:	d33f      	bcc.n	161a2 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xae>
   16122:	e7ff      	b.n	16124 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x30>
   16124:	9809      	ldr	r0, [sp, #36]	; 0x24
   16126:	f000 f8ad 	bl	16284 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>
   1612a:	9003      	str	r0, [sp, #12]
   1612c:	e7ff      	b.n	1612e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x3a>
   1612e:	9804      	ldr	r0, [sp, #16]
   16130:	9903      	ldr	r1, [sp, #12]
   16132:	4288      	cmp	r0, r1
   16134:	d807      	bhi.n	16146 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x52>
   16136:	e7ff      	b.n	16138 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x44>
            for elem in other {
   16138:	9808      	ldr	r0, [sp, #32]
   1613a:	9907      	ldr	r1, [sp, #28]
   1613c:	f7f9 fae7 	bl	f70e <_ZN4core5slice87_$LT$impl$u20$core..iter..traits..collect..IntoIterator$u20$for$u20$$RF$$u5b$T$u5d$$GT$9into_iter17h0dec07d498ffea89E>
   16140:	9002      	str	r0, [sp, #8]
   16142:	9101      	str	r1, [sp, #4]
   16144:	e003      	b.n	1614e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x5a>
   16146:	2001      	movs	r0, #1
            Err(())
   16148:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1614c:	e025      	b.n	1619a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1614e:	9802      	ldr	r0, [sp, #8]
   16150:	900b      	str	r0, [sp, #44]	; 0x2c
   16152:	9901      	ldr	r1, [sp, #4]
   16154:	910c      	str	r1, [sp, #48]	; 0x30
   16156:	e7ff      	b.n	16158 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
   16158:	a80b      	add	r0, sp, #44	; 0x2c
   1615a:	f7fc ff85 	bl	13068 <_ZN85_$LT$core..slice..Iter$LT$T$GT$$u20$as$u20$core..iter..traits..iterator..Iterator$GT$4next17h013428dbdb2040e5E>
   1615e:	900d      	str	r0, [sp, #52]	; 0x34
   16160:	e7ff      	b.n	16162 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x6e>
   16162:	980d      	ldr	r0, [sp, #52]	; 0x34
   16164:	2800      	cmp	r0, #0
   16166:	4601      	mov	r1, r0
   16168:	bf18      	it	ne
   1616a:	2101      	movne	r1, #1
   1616c:	2800      	cmp	r0, #0
   1616e:	d001      	beq.n	16174 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x80>
   16170:	e7ff      	b.n	16172 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x7e>
   16172:	e004      	b.n	1617e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x8a>
   16174:	2000      	movs	r0, #0
            Ok(())
   16176:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
        if self.len + other.len() > self.capacity() {
   1617a:	e00e      	b.n	1619a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa6>
            for elem in other {
   1617c:	defe      	udf	#254	; 0xfe
   1617e:	980d      	ldr	r0, [sp, #52]	; 0x34
   16180:	9011      	str	r0, [sp, #68]	; 0x44
   16182:	9012      	str	r0, [sp, #72]	; 0x48
   16184:	9013      	str	r0, [sp, #76]	; 0x4c
                    self.push_unchecked(elem.clone());
   16186:	f000 f909 	bl	1639c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>
   1618a:	9000      	str	r0, [sp, #0]
   1618c:	e7ff      	b.n	1618e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x9a>
   1618e:	9809      	ldr	r0, [sp, #36]	; 0x24
   16190:	9900      	ldr	r1, [sp, #0]
   16192:	f7ff ff4b 	bl	1602c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h13914cd35bfc47bcE>
   16196:	e7ff      	b.n	16198 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0xa4>
            for elem in other {
   16198:	e7de      	b.n	16158 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$17extend_from_slice17h2d8f0a1591fde883E+0x64>
    }
   1619a:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
   1619e:	b014      	add	sp, #80	; 0x50
   161a0:	bd80      	pop	{r7, pc}
        if self.len + other.len() > self.capacity() {
   161a2:	f64f 5030 	movw	r0, #64816	; 0xfd30
   161a6:	f2c0 0001 	movt	r0, #1
   161aa:	f64f 524c 	movw	r2, #64844	; 0xfd4c
   161ae:	f2c0 0201 	movt	r2, #1
   161b2:	211c      	movs	r1, #28
   161b4:	f000 fc76 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   161b8:	defe      	udf	#254	; 0xfe

000161ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE>:
    pub(crate) fn push(&mut self, item: T) -> Result<(), T> {
   161ba:	b580      	push	{r7, lr}
   161bc:	b088      	sub	sp, #32
   161be:	460a      	mov	r2, r1
   161c0:	9006      	str	r0, [sp, #24]
   161c2:	f88d 101f 	strb.w	r1, [sp, #31]
        if self.len < self.capacity() {
   161c6:	6801      	ldr	r1, [r0, #0]
   161c8:	9004      	str	r0, [sp, #16]
   161ca:	9203      	str	r2, [sp, #12]
   161cc:	9102      	str	r1, [sp, #8]
   161ce:	f000 f863 	bl	16298 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>
   161d2:	9001      	str	r0, [sp, #4]
   161d4:	e7ff      	b.n	161d6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x1c>
   161d6:	9802      	ldr	r0, [sp, #8]
   161d8:	9901      	ldr	r1, [sp, #4]
   161da:	4288      	cmp	r0, r1
   161dc:	d307      	bcc.n	161ee <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x34>
   161de:	e7ff      	b.n	161e0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x26>
            Err(item)
   161e0:	9803      	ldr	r0, [sp, #12]
   161e2:	f88d 0015 	strb.w	r0, [sp, #21]
   161e6:	2101      	movs	r1, #1
   161e8:	f88d 1014 	strb.w	r1, [sp, #20]
        if self.len < self.capacity() {
   161ec:	e008      	b.n	16200 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
            unsafe { self.push_unchecked(item) }
   161ee:	9804      	ldr	r0, [sp, #16]
   161f0:	9903      	ldr	r1, [sp, #12]
   161f2:	f7ff ff4d 	bl	16090 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$14push_unchecked17h859ca9123a68db20E>
   161f6:	e7ff      	b.n	161f8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x3e>
   161f8:	2000      	movs	r0, #0
            Ok(())
   161fa:	f88d 0014 	strb.w	r0, [sp, #20]
        if self.len < self.capacity() {
   161fe:	e7ff      	b.n	16200 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$4push17h4805bd34f28b544fE+0x46>
    }
   16200:	f89d 0014 	ldrb.w	r0, [sp, #20]
   16204:	f89d 1015 	ldrb.w	r1, [sp, #21]
   16208:	b008      	add	sp, #32
   1620a:	bd80      	pop	{r7, pc}

0001620c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E>:
    pub(crate) fn clear(&mut self) {
   1620c:	b580      	push	{r7, lr}
   1620e:	b082      	sub	sp, #8
   16210:	9001      	str	r0, [sp, #4]
   16212:	2100      	movs	r1, #0
        self.truncate(0);
   16214:	f000 f880 	bl	16318 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>
   16218:	e7ff      	b.n	1621a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h4e8dfc3201276444E+0xe>
    }
   1621a:	b002      	add	sp, #8
   1621c:	bd80      	pop	{r7, pc}

0001621e <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E>:
    pub(crate) fn clear(&mut self) {
   1621e:	b580      	push	{r7, lr}
   16220:	b082      	sub	sp, #8
   16222:	9001      	str	r0, [sp, #4]
   16224:	2100      	movs	r1, #0
        self.truncate(0);
   16226:	f000 f841 	bl	162ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>
   1622a:	e7ff      	b.n	1622c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$5clear17h923903211635af18E+0xe>
    }
   1622c:	b002      	add	sp, #8
   1622e:	bd80      	pop	{r7, pc}

00016230 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   16230:	b580      	push	{r7, lr}
   16232:	b088      	sub	sp, #32
   16234:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16236:	1d01      	adds	r1, r0, #4
   16238:	9106      	str	r1, [sp, #24]
   1623a:	9107      	str	r1, [sp, #28]
   1623c:	9004      	str	r0, [sp, #16]
   1623e:	9103      	str	r1, [sp, #12]
   16240:	e7ff      	b.n	16242 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x12>
   16242:	9804      	ldr	r0, [sp, #16]
   16244:	6801      	ldr	r1, [r0, #0]
   16246:	9803      	ldr	r0, [sp, #12]
   16248:	f7fc fff0 	bl	1322c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   1624c:	9002      	str	r0, [sp, #8]
   1624e:	9101      	str	r1, [sp, #4]
   16250:	e7ff      	b.n	16252 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h0b01a2fd807adb5bE+0x22>
    }
   16252:	9802      	ldr	r0, [sp, #8]
   16254:	9901      	ldr	r1, [sp, #4]
   16256:	b008      	add	sp, #32
   16258:	bd80      	pop	{r7, pc}

0001625a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE>:
    pub(crate) fn as_slice(&self) -> &[T] {
   1625a:	b580      	push	{r7, lr}
   1625c:	b088      	sub	sp, #32
   1625e:	9005      	str	r0, [sp, #20]
        unsafe { slice::from_raw_parts(self.buffer.as_ptr() as *const T, self.len) }
   16260:	1d01      	adds	r1, r0, #4
   16262:	9106      	str	r1, [sp, #24]
   16264:	9107      	str	r1, [sp, #28]
   16266:	9004      	str	r0, [sp, #16]
   16268:	9103      	str	r1, [sp, #12]
   1626a:	e7ff      	b.n	1626c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x12>
   1626c:	9804      	ldr	r0, [sp, #16]
   1626e:	6801      	ldr	r1, [r0, #0]
   16270:	9803      	ldr	r0, [sp, #12]
   16272:	f7fc ffdb 	bl	1322c <_ZN4core5slice14from_raw_parts17h423e2fc36ac16e30E>
   16276:	9002      	str	r0, [sp, #8]
   16278:	9101      	str	r1, [sp, #4]
   1627a:	e7ff      	b.n	1627c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8as_slice17h63a2c307ff0c2d7fE+0x22>
    }
   1627c:	9802      	ldr	r0, [sp, #8]
   1627e:	9901      	ldr	r1, [sp, #4]
   16280:	b008      	add	sp, #32
   16282:	bd80      	pop	{r7, pc}

00016284 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE>:
    pub(crate) fn capacity(&self) -> usize {
   16284:	b580      	push	{r7, lr}
   16286:	b082      	sub	sp, #8
   16288:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1628a:	f000 f91c 	bl	164c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>
   1628e:	9000      	str	r0, [sp, #0]
   16290:	e7ff      	b.n	16292 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17haf8f4e41d032be2dE+0xe>
    }
   16292:	9800      	ldr	r0, [sp, #0]
   16294:	b002      	add	sp, #8
   16296:	bd80      	pop	{r7, pc}

00016298 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E>:
    pub(crate) fn capacity(&self) -> usize {
   16298:	b580      	push	{r7, lr}
   1629a:	b082      	sub	sp, #8
   1629c:	9001      	str	r0, [sp, #4]
        N::to_usize()
   1629e:	f000 f942 	bl	16526 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   162a2:	9000      	str	r0, [sp, #0]
   162a4:	e7ff      	b.n	162a6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8capacity17hb00822eb5dd66210E+0xe>
    }
   162a6:	9800      	ldr	r0, [sp, #0]
   162a8:	b002      	add	sp, #8
   162aa:	bd80      	pop	{r7, pc}

000162ac <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE>:
    pub(crate) fn truncate(&mut self, len: usize) {
   162ac:	b580      	push	{r7, lr}
   162ae:	b08a      	sub	sp, #40	; 0x28
   162b0:	9007      	str	r0, [sp, #28]
   162b2:	9108      	str	r1, [sp, #32]
   162b4:	9106      	str	r1, [sp, #24]
   162b6:	9005      	str	r0, [sp, #20]
   162b8:	e7ff      	b.n	162ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
            while len < self.len {
   162ba:	9805      	ldr	r0, [sp, #20]
   162bc:	6801      	ldr	r1, [r0, #0]
   162be:	9a06      	ldr	r2, [sp, #24]
   162c0:	428a      	cmp	r2, r1
   162c2:	d302      	bcc.n	162ca <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1e>
   162c4:	e7ff      	b.n	162c6 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x1a>
    }
   162c6:	b00a      	add	sp, #40	; 0x28
   162c8:	bd80      	pop	{r7, pc}
                self.len -= 1;
   162ca:	9805      	ldr	r0, [sp, #20]
   162cc:	6801      	ldr	r1, [r0, #0]
   162ce:	1e4a      	subs	r2, r1, #1
   162d0:	2901      	cmp	r1, #1
   162d2:	9204      	str	r2, [sp, #16]
   162d4:	d314      	bcc.n	16300 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x54>
   162d6:	e7ff      	b.n	162d8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x2c>
   162d8:	9804      	ldr	r0, [sp, #16]
   162da:	9905      	ldr	r1, [sp, #20]
   162dc:	6008      	str	r0, [r1, #0]
                let len = self.len;
   162de:	680a      	ldr	r2, [r1, #0]
   162e0:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   162e2:	4608      	mov	r0, r1
   162e4:	9203      	str	r2, [sp, #12]
   162e6:	f7ff fe8c 	bl	16002 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17hf8294d47b4b1c78dE>
   162ea:	9002      	str	r0, [sp, #8]
   162ec:	9101      	str	r1, [sp, #4]
   162ee:	e7ff      	b.n	162f0 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x44>
   162f0:	9802      	ldr	r0, [sp, #8]
   162f2:	9901      	ldr	r1, [sp, #4]
   162f4:	9a03      	ldr	r2, [sp, #12]
   162f6:	f7f8 fb1d 	bl	e934 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   162fa:	e7ff      	b.n	162fc <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x50>
   162fc:	e7ff      	b.n	162fe <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0x52>
            while len < self.len {
   162fe:	e7dc      	b.n	162ba <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17h686edf3379b8cfedE+0xe>
                self.len -= 1;
   16300:	f64f 5070 	movw	r0, #64880	; 0xfd70
   16304:	f2c0 0001 	movt	r0, #1
   16308:	f64f 525c 	movw	r2, #64860	; 0xfd5c
   1630c:	f2c0 0201 	movt	r2, #1
   16310:	2121      	movs	r1, #33	; 0x21
   16312:	f000 fbc7 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16316:	defe      	udf	#254	; 0xfe

00016318 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E>:
    pub(crate) fn truncate(&mut self, len: usize) {
   16318:	b580      	push	{r7, lr}
   1631a:	b08a      	sub	sp, #40	; 0x28
   1631c:	9007      	str	r0, [sp, #28]
   1631e:	9108      	str	r1, [sp, #32]
   16320:	9106      	str	r1, [sp, #24]
   16322:	9005      	str	r0, [sp, #20]
   16324:	e7ff      	b.n	16326 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
            while len < self.len {
   16326:	9805      	ldr	r0, [sp, #20]
   16328:	6801      	ldr	r1, [r0, #0]
   1632a:	9a06      	ldr	r2, [sp, #24]
   1632c:	428a      	cmp	r2, r1
   1632e:	d302      	bcc.n	16336 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1e>
   16330:	e7ff      	b.n	16332 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x1a>
    }
   16332:	b00a      	add	sp, #40	; 0x28
   16334:	bd80      	pop	{r7, pc}
                self.len -= 1;
   16336:	9805      	ldr	r0, [sp, #20]
   16338:	6801      	ldr	r1, [r0, #0]
   1633a:	1e4a      	subs	r2, r1, #1
   1633c:	2901      	cmp	r1, #1
   1633e:	9204      	str	r2, [sp, #16]
   16340:	d314      	bcc.n	1636c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x54>
   16342:	e7ff      	b.n	16344 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x2c>
   16344:	9804      	ldr	r0, [sp, #16]
   16346:	9905      	ldr	r1, [sp, #20]
   16348:	6008      	str	r0, [r1, #0]
                let len = self.len;
   1634a:	680a      	ldr	r2, [r1, #0]
   1634c:	9209      	str	r2, [sp, #36]	; 0x24
                ptr::drop_in_place(self.as_mut_slice().get_unchecked_mut(len));
   1634e:	4608      	mov	r0, r1
   16350:	9203      	str	r2, [sp, #12]
   16352:	f7ff fe41 	bl	15fd8 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$12as_mut_slice17h88001644462fdd8eE>
   16356:	9002      	str	r0, [sp, #8]
   16358:	9101      	str	r1, [sp, #4]
   1635a:	e7ff      	b.n	1635c <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x44>
   1635c:	9802      	ldr	r0, [sp, #8]
   1635e:	9901      	ldr	r1, [sp, #4]
   16360:	9a03      	ldr	r2, [sp, #12]
   16362:	f7f8 fae7 	bl	e934 <_ZN4core5slice29_$LT$impl$u20$$u5b$T$u5d$$GT$17get_unchecked_mut17ha0d310f255238666E>
   16366:	e7ff      	b.n	16368 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x50>
   16368:	e7ff      	b.n	1636a <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0x52>
            while len < self.len {
   1636a:	e7dc      	b.n	16326 <_ZN8heapless3vec82_$LT$impl$u20$heapless..i..Vec$LT$generic_array..GenericArray$LT$T$C$N$GT$$GT$$GT$8truncate17hc765bc0a8ccaa9e9E+0xe>
                self.len -= 1;
   1636c:	f64f 5070 	movw	r0, #64880	; 0xfd70
   16370:	f2c0 0001 	movt	r0, #1
   16374:	f64f 525c 	movw	r2, #64860	; 0xfd5c
   16378:	f2c0 0201 	movt	r2, #1
   1637c:	2121      	movs	r1, #33	; 0x21
   1637e:	f000 fb91 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   16382:	defe      	udf	#254	; 0xfe

00016384 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE>:
   16384:	b580      	push	{r7, lr}
   16386:	b084      	sub	sp, #16
   16388:	460a      	mov	r2, r1
   1638a:	9002      	str	r0, [sp, #8]
   1638c:	f88d 100f 	strb.w	r1, [sp, #15]
   16390:	9201      	str	r2, [sp, #4]
   16392:	f7f9 fa44 	bl	f81e <_ZN4core3ptr5write17h7ef3fa6b6f80daebE>
   16396:	e7ff      	b.n	16398 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$5write17hb2669022d1a0709aE+0x14>
   16398:	b004      	add	sp, #16
   1639a:	bd80      	pop	{r7, pc}

0001639c <_ZN4core5clone5impls51_$LT$impl$u20$core..clone..Clone$u20$for$u20$u8$GT$5clone17h415ba42ccb7d32baE>:
   1639c:	b081      	sub	sp, #4
   1639e:	9000      	str	r0, [sp, #0]
   163a0:	7800      	ldrb	r0, [r0, #0]
   163a2:	b001      	add	sp, #4
   163a4:	4770      	bx	lr

000163a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>:
    fn to_usize() -> usize {
   163a6:	b580      	push	{r7, lr}
   163a8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163aa:	f000 fa5a 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163ae:	9003      	str	r0, [sp, #12]
   163b0:	e7ff      	b.n	163b2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0xc>
   163b2:	9803      	ldr	r0, [sp, #12]
   163b4:	f000 fa5b 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163b8:	9002      	str	r0, [sp, #8]
   163ba:	e7ff      	b.n	163bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x16>
   163bc:	f000 f8b3 	bl	16526 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>
   163c0:	9001      	str	r0, [sp, #4]
   163c2:	e7ff      	b.n	163c4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x1e>
   163c4:	9801      	ldr	r0, [sp, #4]
   163c6:	0041      	lsls	r1, r0, #1
   163c8:	9100      	str	r1, [sp, #0]
   163ca:	e7ff      	b.n	163cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E+0x26>
   163cc:	9802      	ldr	r0, [sp, #8]
   163ce:	9900      	ldr	r1, [sp, #0]
   163d0:	4308      	orrs	r0, r1
    }
   163d2:	b004      	add	sp, #16
   163d4:	bd80      	pop	{r7, pc}

000163d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>:
    fn to_usize() -> usize {
   163d6:	b580      	push	{r7, lr}
   163d8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   163da:	f000 fa42 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   163de:	9003      	str	r0, [sp, #12]
   163e0:	e7ff      	b.n	163e2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0xc>
   163e2:	9803      	ldr	r0, [sp, #12]
   163e4:	f000 fa43 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   163e8:	9002      	str	r0, [sp, #8]
   163ea:	e7ff      	b.n	163ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x16>
   163ec:	f000 f853 	bl	16496 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>
   163f0:	9001      	str	r0, [sp, #4]
   163f2:	e7ff      	b.n	163f4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x1e>
   163f4:	9801      	ldr	r0, [sp, #4]
   163f6:	0041      	lsls	r1, r0, #1
   163f8:	9100      	str	r1, [sp, #0]
   163fa:	e7ff      	b.n	163fc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E+0x26>
   163fc:	9802      	ldr	r0, [sp, #8]
   163fe:	9900      	ldr	r1, [sp, #0]
   16400:	4308      	orrs	r0, r1
    }
   16402:	b004      	add	sp, #16
   16404:	bd80      	pop	{r7, pc}

00016406 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>:
    fn to_usize() -> usize {
   16406:	b580      	push	{r7, lr}
   16408:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1640a:	f000 fa2a 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1640e:	9003      	str	r0, [sp, #12]
   16410:	e7ff      	b.n	16412 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0xc>
   16412:	9803      	ldr	r0, [sp, #12]
   16414:	f000 fa2b 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16418:	9002      	str	r0, [sp, #8]
   1641a:	e7ff      	b.n	1641c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x16>
   1641c:	f000 f80b 	bl	16436 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>
   16420:	9001      	str	r0, [sp, #4]
   16422:	e7ff      	b.n	16424 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x1e>
   16424:	9801      	ldr	r0, [sp, #4]
   16426:	0041      	lsls	r1, r0, #1
   16428:	9100      	str	r1, [sp, #0]
   1642a:	e7ff      	b.n	1642c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E+0x26>
   1642c:	9802      	ldr	r0, [sp, #8]
   1642e:	9900      	ldr	r1, [sp, #0]
   16430:	4308      	orrs	r0, r1
    }
   16432:	b004      	add	sp, #16
   16434:	bd80      	pop	{r7, pc}

00016436 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E>:
    fn to_usize() -> usize {
   16436:	b580      	push	{r7, lr}
   16438:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1643a:	f000 fa12 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1643e:	9003      	str	r0, [sp, #12]
   16440:	e7ff      	b.n	16442 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0xc>
   16442:	9803      	ldr	r0, [sp, #12]
   16444:	f000 fa13 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16448:	9002      	str	r0, [sp, #8]
   1644a:	e7ff      	b.n	1644c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x16>
   1644c:	f000 f89b 	bl	16586 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>
   16450:	9001      	str	r0, [sp, #4]
   16452:	e7ff      	b.n	16454 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x1e>
   16454:	9801      	ldr	r0, [sp, #4]
   16456:	0041      	lsls	r1, r0, #1
   16458:	9100      	str	r1, [sp, #0]
   1645a:	e7ff      	b.n	1645c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h80b1ce889aae2166E+0x26>
   1645c:	9802      	ldr	r0, [sp, #8]
   1645e:	9900      	ldr	r1, [sp, #0]
   16460:	4308      	orrs	r0, r1
    }
   16462:	b004      	add	sp, #16
   16464:	bd80      	pop	{r7, pc}

00016466 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>:
    fn to_usize() -> usize {
   16466:	b580      	push	{r7, lr}
   16468:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1646a:	f000 f9fa 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1646e:	9003      	str	r0, [sp, #12]
   16470:	e7ff      	b.n	16472 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0xc>
   16472:	9803      	ldr	r0, [sp, #12]
   16474:	f000 f9fb 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16478:	9002      	str	r0, [sp, #8]
   1647a:	e7ff      	b.n	1647c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x16>
   1647c:	f7ff ff93 	bl	163a6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h01d098fc9d953b35E>
   16480:	9001      	str	r0, [sp, #4]
   16482:	e7ff      	b.n	16484 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x1e>
   16484:	9801      	ldr	r0, [sp, #4]
   16486:	0041      	lsls	r1, r0, #1
   16488:	9100      	str	r1, [sp, #0]
   1648a:	e7ff      	b.n	1648c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE+0x26>
   1648c:	9802      	ldr	r0, [sp, #8]
   1648e:	9900      	ldr	r1, [sp, #0]
   16490:	4308      	orrs	r0, r1
    }
   16492:	b004      	add	sp, #16
   16494:	bd80      	pop	{r7, pc}

00016496 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E>:
    fn to_usize() -> usize {
   16496:	b580      	push	{r7, lr}
   16498:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1649a:	f000 f9e2 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1649e:	9003      	str	r0, [sp, #12]
   164a0:	e7ff      	b.n	164a2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0xc>
   164a2:	9803      	ldr	r0, [sp, #12]
   164a4:	f000 f9e3 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164a8:	9002      	str	r0, [sp, #8]
   164aa:	e7ff      	b.n	164ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x16>
   164ac:	f000 f823 	bl	164f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>
   164b0:	9001      	str	r0, [sp, #4]
   164b2:	e7ff      	b.n	164b4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x1e>
   164b4:	9801      	ldr	r0, [sp, #4]
   164b6:	0041      	lsls	r1, r0, #1
   164b8:	9100      	str	r1, [sp, #0]
   164ba:	e7ff      	b.n	164bc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h8c0dd0f18ad786a2E+0x26>
   164bc:	9802      	ldr	r0, [sp, #8]
   164be:	9900      	ldr	r1, [sp, #0]
   164c0:	4308      	orrs	r0, r1
    }
   164c2:	b004      	add	sp, #16
   164c4:	bd80      	pop	{r7, pc}

000164c6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E>:
    fn to_usize() -> usize {
   164c6:	b580      	push	{r7, lr}
   164c8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164ca:	f000 f9ca 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164ce:	9003      	str	r0, [sp, #12]
   164d0:	e7ff      	b.n	164d2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0xc>
   164d2:	9803      	ldr	r0, [sp, #12]
   164d4:	f000 f9cb 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   164d8:	9002      	str	r0, [sp, #8]
   164da:	e7ff      	b.n	164dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x16>
   164dc:	f000 f86b 	bl	165b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>
   164e0:	9001      	str	r0, [sp, #4]
   164e2:	e7ff      	b.n	164e4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x1e>
   164e4:	9801      	ldr	r0, [sp, #4]
   164e6:	0041      	lsls	r1, r0, #1
   164e8:	9100      	str	r1, [sp, #0]
   164ea:	e7ff      	b.n	164ec <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17haea84a73a55d5298E+0x26>
   164ec:	9802      	ldr	r0, [sp, #8]
   164ee:	9900      	ldr	r1, [sp, #0]
   164f0:	4308      	orrs	r0, r1
    }
   164f2:	b004      	add	sp, #16
   164f4:	bd80      	pop	{r7, pc}

000164f6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E>:
    fn to_usize() -> usize {
   164f6:	b580      	push	{r7, lr}
   164f8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   164fa:	f000 f9b2 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   164fe:	9003      	str	r0, [sp, #12]
   16500:	e7ff      	b.n	16502 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0xc>
   16502:	9803      	ldr	r0, [sp, #12]
   16504:	f000 f9b3 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16508:	9002      	str	r0, [sp, #8]
   1650a:	e7ff      	b.n	1650c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x16>
   1650c:	f000 f823 	bl	16556 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>
   16510:	9001      	str	r0, [sp, #4]
   16512:	e7ff      	b.n	16514 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x1e>
   16514:	9801      	ldr	r0, [sp, #4]
   16516:	0041      	lsls	r1, r0, #1
   16518:	9100      	str	r1, [sp, #0]
   1651a:	e7ff      	b.n	1651c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb8c673d7f44defc0E+0x26>
   1651c:	9802      	ldr	r0, [sp, #8]
   1651e:	9900      	ldr	r1, [sp, #0]
   16520:	4308      	orrs	r0, r1
    }
   16522:	b004      	add	sp, #16
   16524:	bd80      	pop	{r7, pc}

00016526 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE>:
    fn to_usize() -> usize {
   16526:	b580      	push	{r7, lr}
   16528:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1652a:	f000 f99c 	bl	16866 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>
   1652e:	9003      	str	r0, [sp, #12]
   16530:	e7ff      	b.n	16532 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0xc>
   16532:	9803      	ldr	r0, [sp, #12]
   16534:	f000 f99b 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16538:	9002      	str	r0, [sp, #8]
   1653a:	e7ff      	b.n	1653c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x16>
   1653c:	f000 f995 	bl	1686a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>
   16540:	9001      	str	r0, [sp, #4]
   16542:	e7ff      	b.n	16544 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x1e>
   16544:	9801      	ldr	r0, [sp, #4]
   16546:	0041      	lsls	r1, r0, #1
   16548:	9100      	str	r1, [sp, #0]
   1654a:	e7ff      	b.n	1654c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hb936bb5cd70e23aeE+0x26>
   1654c:	9802      	ldr	r0, [sp, #8]
   1654e:	9900      	ldr	r1, [sp, #0]
   16550:	4308      	orrs	r0, r1
    }
   16552:	b004      	add	sp, #16
   16554:	bd80      	pop	{r7, pc}

00016556 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE>:
    fn to_usize() -> usize {
   16556:	b580      	push	{r7, lr}
   16558:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1655a:	f000 f982 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1655e:	9003      	str	r0, [sp, #12]
   16560:	e7ff      	b.n	16562 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0xc>
   16562:	9803      	ldr	r0, [sp, #12]
   16564:	f000 f983 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16568:	9002      	str	r0, [sp, #8]
   1656a:	e7ff      	b.n	1656c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x16>
   1656c:	f7ff ff7b 	bl	16466 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h843e064d98118fbdE>
   16570:	9001      	str	r0, [sp, #4]
   16572:	e7ff      	b.n	16574 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x1e>
   16574:	9801      	ldr	r0, [sp, #4]
   16576:	0041      	lsls	r1, r0, #1
   16578:	9100      	str	r1, [sp, #0]
   1657a:	e7ff      	b.n	1657c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hbe0b13d178f1b83dE+0x26>
   1657c:	9802      	ldr	r0, [sp, #8]
   1657e:	9900      	ldr	r1, [sp, #0]
   16580:	4308      	orrs	r0, r1
    }
   16582:	b004      	add	sp, #16
   16584:	bd80      	pop	{r7, pc}

00016586 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E>:
    fn to_usize() -> usize {
   16586:	b580      	push	{r7, lr}
   16588:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   1658a:	f000 f96a 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   1658e:	9003      	str	r0, [sp, #12]
   16590:	e7ff      	b.n	16592 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0xc>
   16592:	9803      	ldr	r0, [sp, #12]
   16594:	f000 f96b 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   16598:	9002      	str	r0, [sp, #8]
   1659a:	e7ff      	b.n	1659c <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x16>
   1659c:	f7ff ff1b 	bl	163d6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h0db95b71aca207d1E>
   165a0:	9001      	str	r0, [sp, #4]
   165a2:	e7ff      	b.n	165a4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x1e>
   165a4:	9801      	ldr	r0, [sp, #4]
   165a6:	0041      	lsls	r1, r0, #1
   165a8:	9100      	str	r1, [sp, #0]
   165aa:	e7ff      	b.n	165ac <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hcf926a820b8397e3E+0x26>
   165ac:	9802      	ldr	r0, [sp, #8]
   165ae:	9900      	ldr	r1, [sp, #0]
   165b0:	4308      	orrs	r0, r1
    }
   165b2:	b004      	add	sp, #16
   165b4:	bd80      	pop	{r7, pc}

000165b6 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E>:
    fn to_usize() -> usize {
   165b6:	b580      	push	{r7, lr}
   165b8:	b084      	sub	sp, #16
        usize::from(B::to_u8()) | U::to_usize() << 1
   165ba:	f000 f952 	bl	16862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>
   165be:	9003      	str	r0, [sp, #12]
   165c0:	e7ff      	b.n	165c2 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0xc>
   165c2:	9803      	ldr	r0, [sp, #12]
   165c4:	f000 f953 	bl	1686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>
   165c8:	9002      	str	r0, [sp, #8]
   165ca:	e7ff      	b.n	165cc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x16>
   165cc:	f7ff ff1b 	bl	16406 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17h6703636fe0afd772E>
   165d0:	9001      	str	r0, [sp, #4]
   165d2:	e7ff      	b.n	165d4 <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x1e>
   165d4:	9801      	ldr	r0, [sp, #4]
   165d6:	0041      	lsls	r1, r0, #1
   165d8:	9100      	str	r1, [sp, #0]
   165da:	e7ff      	b.n	165dc <_ZN85_$LT$typenum..uint..UInt$LT$U$C$B$GT$$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd81d54785812fe16E+0x26>
   165dc:	9802      	ldr	r0, [sp, #8]
   165de:	9900      	ldr	r1, [sp, #0]
   165e0:	4308      	orrs	r0, r1
    }
   165e2:	b004      	add	sp, #16
   165e4:	bd80      	pop	{r7, pc}

000165e6 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h43e501c6c198e052E>:
impl Bit for B0 {
    const U8: u8 = 0;
    const BOOL: bool = false;

    #[inline]
    fn to_u8() -> u8 {
   165e6:	2000      	movs	r0, #0
        0
    }
   165e8:	4770      	bx	lr

000165ea <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h7b50fe118bdc8801E>:
impl Bit for B1 {
    const U8: u8 = 1;
    const BOOL: bool = true;

    #[inline]
    fn to_u8() -> u8 {
   165ea:	2001      	movs	r0, #1
        1
    }
   165ec:	4770      	bx	lr

000165ee <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E>:
   165ee:	b580      	push	{r7, lr}
   165f0:	b084      	sub	sp, #16
   165f2:	9002      	str	r0, [sp, #8]
   165f4:	9103      	str	r1, [sp, #12]
   165f6:	f000 f80f 	bl	16618 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>
   165fa:	9001      	str	r0, [sp, #4]
   165fc:	e7ff      	b.n	165fe <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$3add17hdd9cb37e64278cd3E+0x10>
   165fe:	9801      	ldr	r0, [sp, #4]
   16600:	b004      	add	sp, #16
   16602:	bd80      	pop	{r7, pc}

00016604 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E>:
   16604:	b580      	push	{r7, lr}
   16606:	b082      	sub	sp, #8
   16608:	9001      	str	r0, [sp, #4]
   1660a:	f000 f873 	bl	166f4 <_ZN4core3ptr4read17h27a035d1812d8297E>
   1660e:	9000      	str	r0, [sp, #0]
   16610:	e7ff      	b.n	16612 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$4read17hec76802c793efa75E+0xe>
   16612:	9800      	ldr	r0, [sp, #0]
   16614:	b002      	add	sp, #8
   16616:	bd80      	pop	{r7, pc}

00016618 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE>:
   16618:	b084      	sub	sp, #16
   1661a:	9001      	str	r0, [sp, #4]
   1661c:	9102      	str	r1, [sp, #8]
   1661e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
   16622:	9003      	str	r0, [sp, #12]
   16624:	9803      	ldr	r0, [sp, #12]
   16626:	9000      	str	r0, [sp, #0]
   16628:	e7ff      	b.n	1662a <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$6offset17hffceec081fc5cd6fE+0x12>
   1662a:	9800      	ldr	r0, [sp, #0]
   1662c:	b004      	add	sp, #16
   1662e:	4770      	bx	lr

00016630 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E>:
   16630:	b082      	sub	sp, #8
   16632:	9001      	str	r0, [sp, #4]
   16634:	9000      	str	r0, [sp, #0]
   16636:	e7ff      	b.n	16638 <_ZN4core3ptr9const_ptr33_$LT$impl$u20$$BP$const$u20$T$GT$7is_null17h594267d3dba06845E+0x8>
   16638:	9800      	ldr	r0, [sp, #0]
   1663a:	fab0 f180 	clz	r1, r0
   1663e:	0948      	lsrs	r0, r1, #5
   16640:	b002      	add	sp, #8
   16642:	4770      	bx	lr

00016644 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE>:
   16644:	b580      	push	{r7, lr}
   16646:	b088      	sub	sp, #32
   16648:	9006      	str	r0, [sp, #24]
   1664a:	9107      	str	r1, [sp, #28]
   1664c:	9004      	str	r0, [sp, #16]
   1664e:	4608      	mov	r0, r1
   16650:	9103      	str	r1, [sp, #12]
   16652:	f001 f8c8 	bl	177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>
   16656:	9002      	str	r0, [sp, #8]
   16658:	e7ff      	b.n	1665a <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x16>
   1665a:	9802      	ldr	r0, [sp, #8]
   1665c:	07c1      	lsls	r1, r0, #31
   1665e:	2900      	cmp	r1, #0
   16660:	d105      	bne.n	1666e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x2a>
   16662:	e7ff      	b.n	16664 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x20>
   16664:	9803      	ldr	r0, [sp, #12]
   16666:	f001 f8c2 	bl	177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>
   1666a:	9001      	str	r0, [sp, #4]
   1666c:	e007      	b.n	1667e <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x3a>
   1666e:	9804      	ldr	r0, [sp, #16]
   16670:	9903      	ldr	r1, [sp, #12]
   16672:	f001 fe24 	bl	182be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>
   16676:	f88d 0017 	strb.w	r0, [sp, #23]
   1667a:	e7ff      	b.n	1667c <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x38>
   1667c:	e015      	b.n	166aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   1667e:	9801      	ldr	r0, [sp, #4]
   16680:	07c1      	lsls	r1, r0, #31
   16682:	2900      	cmp	r1, #0
   16684:	d107      	bne.n	16696 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x52>
   16686:	e7ff      	b.n	16688 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x44>
   16688:	9804      	ldr	r0, [sp, #16]
   1668a:	9903      	ldr	r1, [sp, #12]
   1668c:	f001 ffe8 	bl	18660 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>
   16690:	f88d 0017 	strb.w	r0, [sp, #23]
   16694:	e007      	b.n	166a6 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x62>
   16696:	9804      	ldr	r0, [sp, #16]
   16698:	9903      	ldr	r1, [sp, #12]
   1669a:	f001 fe6f 	bl	1837c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>
   1669e:	f88d 0017 	strb.w	r0, [sp, #23]
   166a2:	e7ff      	b.n	166a4 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x60>
   166a4:	e000      	b.n	166a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   166a6:	e7ff      	b.n	166a8 <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x64>
   166a8:	e7ff      	b.n	166aa <_ZN4core3fmt3num50_$LT$impl$u20$core..fmt..Debug$u20$for$u20$u16$GT$3fmt17hbfcb67c4d9e8174dE+0x66>
   166aa:	f89d 0017 	ldrb.w	r0, [sp, #23]
   166ae:	b008      	add	sp, #32
   166b0:	bd80      	pop	{r7, pc}

000166b2 <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17hfd1c1b150fed78e6E>:
   166b2:	b081      	sub	sp, #4
   166b4:	4601      	mov	r1, r0
   166b6:	f88d 0003 	strb.w	r0, [sp, #3]
   166ba:	b2c0      	uxtb	r0, r0
   166bc:	b001      	add	sp, #4
   166be:	4770      	bx	lr

000166c0 <_ZN4core3ptr20slice_from_raw_parts17h2a31e40bcd780333E>:
   166c0:	b086      	sub	sp, #24
   166c2:	9004      	str	r0, [sp, #16]
   166c4:	9105      	str	r1, [sp, #20]
   166c6:	9002      	str	r0, [sp, #8]
   166c8:	9103      	str	r1, [sp, #12]
   166ca:	9802      	ldr	r0, [sp, #8]
   166cc:	9903      	ldr	r1, [sp, #12]
   166ce:	9000      	str	r0, [sp, #0]
   166d0:	9101      	str	r1, [sp, #4]
   166d2:	9800      	ldr	r0, [sp, #0]
   166d4:	9901      	ldr	r1, [sp, #4]
   166d6:	b006      	add	sp, #24
   166d8:	4770      	bx	lr

000166da <_ZN4core3ptr24slice_from_raw_parts_mut17hc3822fdc6434fecdE>:
   166da:	b086      	sub	sp, #24
   166dc:	9004      	str	r0, [sp, #16]
   166de:	9105      	str	r1, [sp, #20]
   166e0:	9002      	str	r0, [sp, #8]
   166e2:	9103      	str	r1, [sp, #12]
   166e4:	9802      	ldr	r0, [sp, #8]
   166e6:	9903      	ldr	r1, [sp, #12]
   166e8:	9000      	str	r0, [sp, #0]
   166ea:	9101      	str	r1, [sp, #4]
   166ec:	9800      	ldr	r0, [sp, #0]
   166ee:	9901      	ldr	r1, [sp, #4]
   166f0:	b006      	add	sp, #24
   166f2:	4770      	bx	lr

000166f4 <_ZN4core3ptr4read17h27a035d1812d8297E>:
   166f4:	b580      	push	{r7, lr}
   166f6:	b088      	sub	sp, #32
   166f8:	9003      	str	r0, [sp, #12]
   166fa:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   166fe:	f8ad 100a 	strh.w	r1, [sp, #10]
   16702:	9001      	str	r0, [sp, #4]
   16704:	e7ff      	b.n	16706 <_ZN4core3ptr4read17h27a035d1812d8297E+0x12>
   16706:	f10d 000a 	add.w	r0, sp, #10
   1670a:	9006      	str	r0, [sp, #24]
   1670c:	9007      	str	r0, [sp, #28]
   1670e:	e7ff      	b.n	16710 <_ZN4core3ptr4read17h27a035d1812d8297E+0x1c>
   16710:	f10d 010a 	add.w	r1, sp, #10
   16714:	2201      	movs	r2, #1
   16716:	9801      	ldr	r0, [sp, #4]
   16718:	f000 f8b0 	bl	1687c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>
   1671c:	e7ff      	b.n	1671e <_ZN4core3ptr4read17h27a035d1812d8297E+0x2a>
   1671e:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   16722:	4601      	mov	r1, r0
   16724:	f8ad 0014 	strh.w	r0, [sp, #20]
   16728:	f8ad 0016 	strh.w	r0, [sp, #22]
   1672c:	9100      	str	r1, [sp, #0]
   1672e:	e7ff      	b.n	16730 <_ZN4core3ptr4read17h27a035d1812d8297E+0x3c>
   16730:	9800      	ldr	r0, [sp, #0]
   16732:	b008      	add	sp, #32
   16734:	bd80      	pop	{r7, pc}

00016736 <_ZN4core3ptr5write17h147d4643d861e927E>:
   16736:	b082      	sub	sp, #8
   16738:	460a      	mov	r2, r1
   1673a:	9000      	str	r0, [sp, #0]
   1673c:	f8ad 1006 	strh.w	r1, [sp, #6]
   16740:	8001      	strh	r1, [r0, #0]
   16742:	b002      	add	sp, #8
   16744:	4770      	bx	lr

00016746 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E>:
   16746:	b5d0      	push	{r4, r6, r7, lr}
   16748:	af02      	add	r7, sp, #8
   1674a:	b0b4      	sub	sp, #208	; 0xd0
   1674c:	466c      	mov	r4, sp
   1674e:	f36f 0404 	bfc	r4, #0, #5
   16752:	46a5      	mov	sp, r4
   16754:	9024      	str	r0, [sp, #144]	; 0x90
   16756:	9125      	str	r1, [sp, #148]	; 0x94
   16758:	9226      	str	r2, [sp, #152]	; 0x98
   1675a:	2320      	movs	r3, #32
   1675c:	932f      	str	r3, [sp, #188]	; 0xbc
   1675e:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
   16760:	9327      	str	r3, [sp, #156]	; 0x9c
   16762:	920e      	str	r2, [sp, #56]	; 0x38
   16764:	910d      	str	r1, [sp, #52]	; 0x34
   16766:	900c      	str	r0, [sp, #48]	; 0x30
   16768:	930b      	str	r3, [sp, #44]	; 0x2c
   1676a:	e7ff      	b.n	1676c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x26>
   1676c:	2000      	movs	r0, #0
   1676e:	900f      	str	r0, [sp, #60]	; 0x3c
   16770:	e7ff      	b.n	16772 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   16772:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16774:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16776:	4408      	add	r0, r1
   16778:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1677a:	4290      	cmp	r0, r2
   1677c:	d905      	bls.n	1678a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x44>
   1677e:	e7ff      	b.n	16780 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x3a>
   16780:	980f      	ldr	r0, [sp, #60]	; 0x3c
   16782:	990e      	ldr	r1, [sp, #56]	; 0x38
   16784:	4288      	cmp	r0, r1
   16786:	d334      	bcc.n	167f2 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xac>
   16788:	e067      	b.n	1685a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   1678a:	e7ff      	b.n	1678c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x46>
   1678c:	a810      	add	r0, sp, #64	; 0x40
   1678e:	9032      	str	r0, [sp, #200]	; 0xc8
   16790:	9033      	str	r0, [sp, #204]	; 0xcc
   16792:	e7ff      	b.n	16794 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x4e>
   16794:	a810      	add	r0, sp, #64	; 0x40
   16796:	4601      	mov	r1, r0
   16798:	9028      	str	r0, [sp, #160]	; 0xa0
   1679a:	980f      	ldr	r0, [sp, #60]	; 0x3c
   1679c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1679e:	900a      	str	r0, [sp, #40]	; 0x28
   167a0:	4610      	mov	r0, r2
   167a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   167a4:	9109      	str	r1, [sp, #36]	; 0x24
   167a6:	4619      	mov	r1, r3
   167a8:	f7f8 f846 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   167ac:	4601      	mov	r1, r0
   167ae:	9029      	str	r0, [sp, #164]	; 0xa4
   167b0:	9108      	str	r1, [sp, #32]
   167b2:	e7ff      	b.n	167b4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x6e>
   167b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
   167b6:	980d      	ldr	r0, [sp, #52]	; 0x34
   167b8:	f7f8 f83e 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   167bc:	4601      	mov	r1, r0
   167be:	902a      	str	r0, [sp, #168]	; 0xa8
   167c0:	9107      	str	r1, [sp, #28]
   167c2:	e7ff      	b.n	167c4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x7e>
   167c4:	9808      	ldr	r0, [sp, #32]
   167c6:	9909      	ldr	r1, [sp, #36]	; 0x24
   167c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   167ca:	f7f7 fed1 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167ce:	e7ff      	b.n	167d0 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x8a>
   167d0:	9807      	ldr	r0, [sp, #28]
   167d2:	9908      	ldr	r1, [sp, #32]
   167d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   167d6:	f7f7 fecb 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167da:	e7ff      	b.n	167dc <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x96>
   167dc:	9809      	ldr	r0, [sp, #36]	; 0x24
   167de:	9907      	ldr	r1, [sp, #28]
   167e0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   167e2:	f7f7 fec5 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   167e6:	e7ff      	b.n	167e8 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xa2>
   167e8:	980f      	ldr	r0, [sp, #60]	; 0x3c
   167ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
   167ec:	4408      	add	r0, r1
   167ee:	900f      	str	r0, [sp, #60]	; 0x3c
   167f0:	e7bf      	b.n	16772 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x2c>
   167f2:	e7ff      	b.n	167f4 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xae>
   167f4:	980f      	ldr	r0, [sp, #60]	; 0x3c
   167f6:	990e      	ldr	r1, [sp, #56]	; 0x38
   167f8:	1a08      	subs	r0, r1, r0
   167fa:	4602      	mov	r2, r0
   167fc:	902b      	str	r0, [sp, #172]	; 0xac
   167fe:	a81c      	add	r0, sp, #112	; 0x70
   16800:	9030      	str	r0, [sp, #192]	; 0xc0
   16802:	9031      	str	r0, [sp, #196]	; 0xc4
   16804:	9206      	str	r2, [sp, #24]
   16806:	9005      	str	r0, [sp, #20]
   16808:	e7ff      	b.n	1680a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xc4>
   1680a:	9805      	ldr	r0, [sp, #20]
   1680c:	9905      	ldr	r1, [sp, #20]
   1680e:	912c      	str	r1, [sp, #176]	; 0xb0
   16810:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16812:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   16814:	9004      	str	r0, [sp, #16]
   16816:	4610      	mov	r0, r2
   16818:	f7f8 f80e 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1681c:	4601      	mov	r1, r0
   1681e:	902d      	str	r0, [sp, #180]	; 0xb4
   16820:	9103      	str	r1, [sp, #12]
   16822:	e7ff      	b.n	16824 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xde>
   16824:	990f      	ldr	r1, [sp, #60]	; 0x3c
   16826:	980d      	ldr	r0, [sp, #52]	; 0x34
   16828:	f7f8 f806 	bl	e838 <_ZN4core3ptr7mut_ptr31_$LT$impl$u20$$BP$mut$u20$T$GT$3add17h1021f098fb133933E>
   1682c:	4601      	mov	r1, r0
   1682e:	902e      	str	r0, [sp, #184]	; 0xb8
   16830:	9102      	str	r1, [sp, #8]
   16832:	e7ff      	b.n	16834 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xee>
   16834:	9803      	ldr	r0, [sp, #12]
   16836:	9904      	ldr	r1, [sp, #16]
   16838:	9a06      	ldr	r2, [sp, #24]
   1683a:	f7f7 fe99 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1683e:	e7ff      	b.n	16840 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0xfa>
   16840:	9802      	ldr	r0, [sp, #8]
   16842:	9903      	ldr	r1, [sp, #12]
   16844:	9a06      	ldr	r2, [sp, #24]
   16846:	f7f7 fe93 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   1684a:	e7ff      	b.n	1684c <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x106>
   1684c:	9804      	ldr	r0, [sp, #16]
   1684e:	9902      	ldr	r1, [sp, #8]
   16850:	9a06      	ldr	r2, [sp, #24]
   16852:	f7f7 fe8d 	bl	e570 <_ZN4core10intrinsics19copy_nonoverlapping17h04de39735078082dE>
   16856:	e7ff      	b.n	16858 <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x112>
   16858:	e7ff      	b.n	1685a <_ZN4core3ptr25swap_nonoverlapping_bytes17he87de9b4aa330e20E+0x114>
   1685a:	f1a7 0408 	sub.w	r4, r7, #8
   1685e:	46a5      	mov	sp, r4
   16860:	bdd0      	pop	{r4, r6, r7, pc}

00016862 <_ZN64_$LT$typenum..bit..B0$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817hab09d34f4ff700fbE>:
    fn to_u8() -> u8 {
   16862:	2000      	movs	r0, #0
    }
   16864:	4770      	bx	lr

00016866 <_ZN64_$LT$typenum..bit..B1$u20$as$u20$typenum..marker_traits..Bit$GT$5to_u817h3c5941c960185fd3E>:
    fn to_u8() -> u8 {
   16866:	2001      	movs	r0, #1
    }
   16868:	4770      	bx	lr

0001686a <_ZN73_$LT$typenum..uint..UTerm$u20$as$u20$typenum..marker_traits..Unsigned$GT$8to_usize17hd35e06c2ec7e618fE>:
    fn to_usize() -> usize {
   1686a:	2000      	movs	r0, #0
    }
   1686c:	4770      	bx	lr

0001686e <_ZN4core7convert3num65_$LT$impl$u20$core..convert..From$LT$u8$GT$$u20$for$u20$usize$GT$4from17h4dbcda73130bbb99E>:
   1686e:	b081      	sub	sp, #4
   16870:	4601      	mov	r1, r0
   16872:	f88d 0003 	strb.w	r0, [sp, #3]
   16876:	b2c0      	uxtb	r0, r0
   16878:	b001      	add	sp, #4
   1687a:	4770      	bx	lr

0001687c <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E>:
   1687c:	b580      	push	{r7, lr}
   1687e:	b084      	sub	sp, #16
   16880:	9001      	str	r0, [sp, #4]
   16882:	9102      	str	r1, [sp, #8]
   16884:	9203      	str	r2, [sp, #12]
   16886:	0052      	lsls	r2, r2, #1
   16888:	9000      	str	r0, [sp, #0]
   1688a:	4608      	mov	r0, r1
   1688c:	9900      	ldr	r1, [sp, #0]
   1688e:	f006 fcdd 	bl	1d24c <__aeabi_memcpy>
   16892:	e7ff      	b.n	16894 <_ZN4core10intrinsics19copy_nonoverlapping17h7ecce2c29c1bf260E+0x18>
   16894:	b004      	add	sp, #16
   16896:	bd80      	pop	{r7, pc}

00016898 <_ZN4core3ptr13drop_in_place17h000c7c147ade2111E>:
   16898:	4770      	bx	lr

0001689a <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE>:
   1689a:	b5b0      	push	{r4, r5, r7, lr}
   1689c:	b086      	sub	sp, #24
   1689e:	460c      	mov	r4, r1
   168a0:	4605      	mov	r5, r0
   168a2:	f001 fb88 	bl	17fb6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>
   168a6:	b9a8      	cbnz	r0, 168d4 <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x3a>
   168a8:	f64f 5394 	movw	r3, #64916	; 0xfd94
   168ac:	2200      	movs	r2, #0
   168ae:	f2c0 0301 	movt	r3, #1
   168b2:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   168b6:	9205      	str	r2, [sp, #20]
   168b8:	9304      	str	r3, [sp, #16]
   168ba:	e9cd 2202 	strd	r2, r2, [sp, #8]
   168be:	2201      	movs	r2, #1
   168c0:	9201      	str	r2, [sp, #4]
   168c2:	f64f 6258 	movw	r2, #65112	; 0xfe58
   168c6:	f2c0 0201 	movt	r2, #1
   168ca:	9200      	str	r2, [sp, #0]
   168cc:	466a      	mov	r2, sp
   168ce:	f000 fbe1 	bl	17094 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   168d2:	b110      	cbz	r0, 168da <_ZN71_$LT$core..ops..range..Range$LT$Idx$GT$$u20$as$u20$core..fmt..Debug$GT$3fmt17h60c4b1928b2cf50aE+0x40>
   168d4:	2001      	movs	r0, #1
   168d6:	b006      	add	sp, #24
   168d8:	bdb0      	pop	{r4, r5, r7, pc}
   168da:	1d28      	adds	r0, r5, #4
   168dc:	4621      	mov	r1, r4
   168de:	b006      	add	sp, #24
   168e0:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
   168e4:	f001 bb67 	b.w	17fb6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>

000168e8 <_ZN36_$LT$T$u20$as$u20$core..any..Any$GT$7type_id17h41fd256ea5f98fdbE>:
   168e8:	f642 20e1 	movw	r0, #10977	; 0x2ae1
   168ec:	f243 6134 	movw	r1, #13876	; 0x3634
   168f0:	f6c9 405d 	movt	r0, #40029	; 0x9c5d
   168f4:	f6cd 0131 	movt	r1, #55345	; 0xd831
   168f8:	4770      	bx	lr
	...

000168fc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>:
   168fc:	b570      	push	{r4, r5, r6, lr}
   168fe:	460e      	mov	r6, r1
   16900:	3909      	subs	r1, #9
   16902:	4604      	mov	r4, r0
   16904:	291e      	cmp	r1, #30
   16906:	d818      	bhi.n	1693a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x3e>
   16908:	2002      	movs	r0, #2
   1690a:	2574      	movs	r5, #116	; 0x74
   1690c:	e8df f001 	tbb	[pc, r1]
   16910:	1c1c1019 	.word	0x1c1c1019
   16914:	1c1c1c29 	.word	0x1c1c1c29
   16918:	1c1c1c1c 	.word	0x1c1c1c1c
   1691c:	1c1c1c1c 	.word	0x1c1c1c1c
   16920:	1c1c1c1c 	.word	0x1c1c1c1c
   16924:	1c1c1c1c 	.word	0x1c1c1c1c
   16928:	1c1c171c 	.word	0x1c1c171c
   1692c:	00171c1c 	.word	0x00171c1c
   16930:	2002      	movs	r0, #2
   16932:	256e      	movs	r5, #110	; 0x6e
   16934:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16938:	bd70      	pop	{r4, r5, r6, pc}
   1693a:	2e5c      	cmp	r6, #92	; 0x5c
   1693c:	d104      	bne.n	16948 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x4c>
   1693e:	2002      	movs	r0, #2
   16940:	4635      	mov	r5, r6
   16942:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   16946:	bd70      	pop	{r4, r5, r6, pc}
   16948:	2a00      	cmp	r2, #0
   1694a:	d040      	beq.n	169ce <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1694c:	f3c6 1083 	ubfx	r0, r6, #6, #4
   16950:	0ab1      	lsrs	r1, r6, #10
   16952:	f5b6 3ff6 	cmp.w	r6, #125952	; 0x1ec00
   16956:	d309      	bcc.n	1696c <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x70>
   16958:	f5b1 7f60 	cmp.w	r1, #896	; 0x380
   1695c:	d137      	bne.n	169ce <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xd2>
   1695e:	211e      	movs	r1, #30
   16960:	e00b      	b.n	1697a <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x7e>
   16962:	2002      	movs	r0, #2
   16964:	2572      	movs	r5, #114	; 0x72
   16966:	e884 5021 	stmia.w	r4, {r0, r5, ip, lr}
   1696a:	bd70      	pop	{r4, r5, r6, pc}
   1696c:	f640 02cc 	movw	r2, #2252	; 0x8cc
   16970:	f2c0 0202 	movt	r2, #2
   16974:	5c51      	ldrb	r1, [r2, r1]
   16976:	291e      	cmp	r1, #30
   16978:	d842      	bhi.n	16a00 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x104>
   1697a:	f640 1247 	movw	r2, #2375	; 0x947
   1697e:	f2c0 0202 	movt	r2, #2
   16982:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   16986:	5c09      	ldrb	r1, [r1, r0]
   16988:	298b      	cmp	r1, #139	; 0x8b
   1698a:	d231      	bcs.n	169f0 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xf4>
   1698c:	f640 3038 	movw	r0, #2872	; 0xb38
   16990:	2301      	movs	r3, #1
   16992:	f2c0 0002 	movt	r0, #2
   16996:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
   1699a:	f850 0031 	ldr.w	r0, [r0, r1, lsl #3]
   1699e:	f006 013f 	and.w	r1, r6, #63	; 0x3f
   169a2:	f8d2 c004 	ldr.w	ip, [r2, #4]
   169a6:	fa03 f501 	lsl.w	r5, r3, r1
   169aa:	f1b1 0220 	subs.w	r2, r1, #32
   169ae:	f1c1 0120 	rsb	r1, r1, #32
   169b2:	bf58      	it	pl
   169b4:	2500      	movpl	r5, #0
   169b6:	2a00      	cmp	r2, #0
   169b8:	ea00 0005 	and.w	r0, r0, r5
   169bc:	fa23 f101 	lsr.w	r1, r3, r1
   169c0:	bf58      	it	pl
   169c2:	fa03 f102 	lslpl.w	r1, r3, r2
   169c6:	ea01 010c 	and.w	r1, r1, ip
   169ca:	4308      	orrs	r0, r1
   169cc:	d105      	bne.n	169da <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   169ce:	4630      	mov	r0, r6
   169d0:	f001 f9a5 	bl	17d1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>
   169d4:	b108      	cbz	r0, 169da <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0xde>
   169d6:	2001      	movs	r0, #1
   169d8:	e7b2      	b.n	16940 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   169da:	f046 0001 	orr.w	r0, r6, #1
   169de:	2107      	movs	r1, #7
   169e0:	fab0 f080 	clz	r0, r0
   169e4:	f04f 0e05 	mov.w	lr, #5
   169e8:	ea81 0c90 	eor.w	ip, r1, r0, lsr #2
   169ec:	2003      	movs	r0, #3
   169ee:	e7a7      	b.n	16940 <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E+0x44>
   169f0:	f640 00bc 	movw	r0, #2236	; 0x8bc
   169f4:	228b      	movs	r2, #139	; 0x8b
   169f6:	f2c0 0002 	movt	r0, #2
   169fa:	f000 f869 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   169fe:	defe      	udf	#254	; 0xfe
   16a00:	f640 00ac 	movw	r0, #2220	; 0x8ac
   16a04:	221f      	movs	r2, #31
   16a06:	f2c0 0002 	movt	r0, #2
   16a0a:	f000 f861 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   16a0e:	defe      	udf	#254	; 0xfe

00016a10 <_ZN4core6option13expect_failed17had6579abaad447b4E>:
   16a10:	b08a      	sub	sp, #40	; 0x28
   16a12:	e9cd 0100 	strd	r0, r1, [sp]
   16a16:	2001      	movs	r0, #1
   16a18:	a908      	add	r1, sp, #32
   16a1a:	9007      	str	r0, [sp, #28]
   16a1c:	9106      	str	r1, [sp, #24]
   16a1e:	2100      	movs	r1, #0
   16a20:	9105      	str	r1, [sp, #20]
   16a22:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16a26:	f64f 705c 	movw	r0, #65372	; 0xff5c
   16a2a:	f2c0 0001 	movt	r0, #1
   16a2e:	4611      	mov	r1, r2
   16a30:	9002      	str	r0, [sp, #8]
   16a32:	f648 1013 	movw	r0, #35091	; 0x8913
   16a36:	f2c0 0001 	movt	r0, #1
   16a3a:	9009      	str	r0, [sp, #36]	; 0x24
   16a3c:	4668      	mov	r0, sp
   16a3e:	9008      	str	r0, [sp, #32]
   16a40:	a802      	add	r0, sp, #8
   16a42:	f000 f865 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a46:	defe      	udf	#254	; 0xfe

00016a48 <_ZN4core6option18expect_none_failed17h54d938081af97677E>:
   16a48:	b08e      	sub	sp, #56	; 0x38
   16a4a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
   16a4e:	2002      	movs	r0, #2
   16a50:	a90a      	add	r1, sp, #40	; 0x28
   16a52:	9009      	str	r0, [sp, #36]	; 0x24
   16a54:	9108      	str	r1, [sp, #32]
   16a56:	2100      	movs	r1, #0
   16a58:	9107      	str	r1, [sp, #28]
   16a5a:	e9cd 0105 	strd	r0, r1, [sp, #20]
   16a5e:	f64f 7068 	movw	r0, #65384	; 0xff68
   16a62:	f2c0 0001 	movt	r0, #1
   16a66:	f8dd c038 	ldr.w	ip, [sp, #56]	; 0x38
   16a6a:	9004      	str	r0, [sp, #16]
   16a6c:	f648 1009 	movw	r0, #35081	; 0x8909
   16a70:	f2c0 0001 	movt	r0, #1
   16a74:	900d      	str	r0, [sp, #52]	; 0x34
   16a76:	a802      	add	r0, sp, #8
   16a78:	900c      	str	r0, [sp, #48]	; 0x30
   16a7a:	f648 1013 	movw	r0, #35091	; 0x8913
   16a7e:	f2c0 0001 	movt	r0, #1
   16a82:	4661      	mov	r1, ip
   16a84:	900b      	str	r0, [sp, #44]	; 0x2c
   16a86:	4668      	mov	r0, sp
   16a88:	900a      	str	r0, [sp, #40]	; 0x28
   16a8a:	a804      	add	r0, sp, #16
   16a8c:	f000 f840 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16a90:	defe      	udf	#254	; 0xfe

00016a92 <_ZN4core5panic9PanicInfo8location17h5b3ed03b79ebf331E>:
   16a92:	68c0      	ldr	r0, [r0, #12]
   16a94:	4770      	bx	lr

00016a96 <_ZN4core5panic8Location6caller17h4b6b61f9498709a3E>:
   16a96:	4770      	bx	lr

00016a98 <_ZN4core5panic8Location4file17h61e77cb122865fdbE>:
   16a98:	e9d0 2100 	ldrd	r2, r1, [r0]
   16a9c:	4610      	mov	r0, r2
   16a9e:	4770      	bx	lr

00016aa0 <_ZN4core5panic8Location4line17h650a566d9637c91dE>:
   16aa0:	6880      	ldr	r0, [r0, #8]
   16aa2:	4770      	bx	lr

00016aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>:
   16aa4:	b088      	sub	sp, #32
   16aa6:	4694      	mov	ip, r2
   16aa8:	f64f 5294 	movw	r2, #64916	; 0xfd94
   16aac:	2300      	movs	r3, #0
   16aae:	f2c0 0201 	movt	r2, #1
   16ab2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   16ab6:	4668      	mov	r0, sp
   16ab8:	9305      	str	r3, [sp, #20]
   16aba:	4661      	mov	r1, ip
   16abc:	9204      	str	r2, [sp, #16]
   16abe:	2201      	movs	r2, #1
   16ac0:	e9cd 3302 	strd	r3, r3, [sp, #8]
   16ac4:	9201      	str	r2, [sp, #4]
   16ac6:	aa06      	add	r2, sp, #24
   16ac8:	9200      	str	r2, [sp, #0]
   16aca:	f000 f821 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16ace:	defe      	udf	#254	; 0xfe

00016ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>:
   16ad0:	b08c      	sub	sp, #48	; 0x30
   16ad2:	4603      	mov	r3, r0
   16ad4:	e9cd 1200 	strd	r1, r2, [sp]
   16ad8:	2002      	movs	r0, #2
   16ada:	a908      	add	r1, sp, #32
   16adc:	9007      	str	r0, [sp, #28]
   16ade:	9106      	str	r1, [sp, #24]
   16ae0:	2100      	movs	r1, #0
   16ae2:	9105      	str	r1, [sp, #20]
   16ae4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   16ae8:	f64f 709c 	movw	r0, #65436	; 0xff9c
   16aec:	f2c0 0001 	movt	r0, #1
   16af0:	4669      	mov	r1, sp
   16af2:	9002      	str	r0, [sp, #8]
   16af4:	f648 0025 	movw	r0, #34853	; 0x8825
   16af8:	f2c0 0001 	movt	r0, #1
   16afc:	900b      	str	r0, [sp, #44]	; 0x2c
   16afe:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   16b02:	a801      	add	r0, sp, #4
   16b04:	9008      	str	r0, [sp, #32]
   16b06:	a802      	add	r0, sp, #8
   16b08:	4619      	mov	r1, r3
   16b0a:	f000 f801 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   16b0e:	defe      	udf	#254	; 0xfe

00016b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>:
   16b10:	b084      	sub	sp, #16
   16b12:	e9cd 0102 	strd	r0, r1, [sp, #8]
   16b16:	f64f 7078 	movw	r0, #65400	; 0xff78
   16b1a:	f2c0 0001 	movt	r0, #1
   16b1e:	9001      	str	r0, [sp, #4]
   16b20:	f64f 5094 	movw	r0, #64916	; 0xfd94
   16b24:	f2c0 0001 	movt	r0, #1
   16b28:	9000      	str	r0, [sp, #0]
   16b2a:	4668      	mov	r0, sp
   16b2c:	f7f1 fdd0 	bl	86d0 <rust_begin_unwind>
   16b30:	defe      	udf	#254	; 0xfe

00016b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>:
   16b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b36:	b081      	sub	sp, #4
   16b38:	2a00      	cmp	r2, #0
   16b3a:	f000 80fe 	beq.w	16d3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16b3e:	4690      	mov	r8, r2
   16b40:	468a      	mov	sl, r1
   16b42:	4681      	mov	r9, r0
   16b44:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16b48:	7800      	ldrb	r0, [r0, #0]
   16b4a:	b948      	cbnz	r0, 16b60 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x2e>
   16b4c:	e014      	b.n	16b78 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16b4e:	44da      	add	sl, fp
   16b50:	2c00      	cmp	r4, #0
   16b52:	46a0      	mov	r8, r4
   16b54:	f000 80f1 	beq.w	16d3a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x208>
   16b58:	f8d9 0008 	ldr.w	r0, [r9, #8]
   16b5c:	7800      	ldrb	r0, [r0, #0]
   16b5e:	b158      	cbz	r0, 16b78 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x46>
   16b60:	e9d9 0100 	ldrd	r0, r1, [r9]
   16b64:	2204      	movs	r2, #4
   16b66:	68cb      	ldr	r3, [r1, #12]
   16b68:	f64f 61b4 	movw	r1, #65204	; 0xfeb4
   16b6c:	f2c0 0101 	movt	r1, #1
   16b70:	4798      	blx	r3
   16b72:	2800      	cmp	r0, #0
   16b74:	f040 80e5 	bne.w	16d42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16b78:	f04f 0b00 	mov.w	fp, #0
   16b7c:	4641      	mov	r1, r8
   16b7e:	e008      	b.n	16b92 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x60>
   16b80:	ebb8 010b 	subs.w	r1, r8, fp
   16b84:	f04f 0000 	mov.w	r0, #0
   16b88:	bf38      	it	cc
   16b8a:	4601      	movcc	r1, r0
   16b8c:	45c3      	cmp	fp, r8
   16b8e:	f200 80a5 	bhi.w	16cdc <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1aa>
   16b92:	eb0a 0e0b 	add.w	lr, sl, fp
   16b96:	2000      	movs	r0, #0
   16b98:	f01e 0203 	ands.w	r2, lr, #3
   16b9c:	bf18      	it	ne
   16b9e:	f1d2 0c04 	rsbsne	ip, r2, #4
   16ba2:	d120      	bne.n	16be6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xb4>
   16ba4:	2908      	cmp	r1, #8
   16ba6:	d357      	bcc.n	16c58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16ba8:	f1a1 0208 	sub.w	r2, r1, #8
   16bac:	4290      	cmp	r0, r2
   16bae:	d853      	bhi.n	16c58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16bb0:	f85e 3000 	ldr.w	r3, [lr, r0]
   16bb4:	eb0e 0700 	add.w	r7, lr, r0
   16bb8:	687f      	ldr	r7, [r7, #4]
   16bba:	f083 360a 	eor.w	r6, r3, #168430090	; 0xa0a0a0a
   16bbe:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16bc2:	ea26 0303 	bic.w	r3, r6, r3
   16bc6:	f087 360a 	eor.w	r6, r7, #168430090	; 0xa0a0a0a
   16bca:	f1a6 3601 	sub.w	r6, r6, #16843009	; 0x1010101
   16bce:	ea26 0707 	bic.w	r7, r6, r7
   16bd2:	433b      	orrs	r3, r7
   16bd4:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   16bd8:	d102      	bne.n	16be0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xae>
   16bda:	3008      	adds	r0, #8
   16bdc:	4290      	cmp	r0, r2
   16bde:	d9e7      	bls.n	16bb0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x7e>
   16be0:	4288      	cmp	r0, r1
   16be2:	d939      	bls.n	16c58 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x126>
   16be4:	e0b1      	b.n	16d4a <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x218>
   16be6:	458c      	cmp	ip, r1
   16be8:	bf88      	it	hi
   16bea:	468c      	movhi	ip, r1
   16bec:	eb0e 060c 	add.w	r6, lr, ip
   16bf0:	2000      	movs	r0, #0
   16bf2:	4663      	mov	r3, ip
   16bf4:	4677      	mov	r7, lr
   16bf6:	b363      	cbz	r3, 16c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16bf8:	463a      	mov	r2, r7
   16bfa:	f812 4b01 	ldrb.w	r4, [r2], #1
   16bfe:	f1b4 050a 	subs.w	r5, r4, #10
   16c02:	bf18      	it	ne
   16c04:	2501      	movne	r5, #1
   16c06:	4428      	add	r0, r5
   16c08:	2c0a      	cmp	r4, #10
   16c0a:	d059      	beq.n	16cc0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16c0c:	42b2      	cmp	r2, r6
   16c0e:	d020      	beq.n	16c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16c10:	787a      	ldrb	r2, [r7, #1]
   16c12:	f1b2 040a 	subs.w	r4, r2, #10
   16c16:	bf18      	it	ne
   16c18:	2401      	movne	r4, #1
   16c1a:	4420      	add	r0, r4
   16c1c:	2a0a      	cmp	r2, #10
   16c1e:	d04f      	beq.n	16cc0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16c20:	1cba      	adds	r2, r7, #2
   16c22:	42b2      	cmp	r2, r6
   16c24:	d015      	beq.n	16c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16c26:	78ba      	ldrb	r2, [r7, #2]
   16c28:	f1b2 040a 	subs.w	r4, r2, #10
   16c2c:	bf18      	it	ne
   16c2e:	2401      	movne	r4, #1
   16c30:	4420      	add	r0, r4
   16c32:	2a0a      	cmp	r2, #10
   16c34:	d044      	beq.n	16cc0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16c36:	1cfa      	adds	r2, r7, #3
   16c38:	42b2      	cmp	r2, r6
   16c3a:	d00a      	beq.n	16c52 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x120>
   16c3c:	78fa      	ldrb	r2, [r7, #3]
   16c3e:	3b04      	subs	r3, #4
   16c40:	3704      	adds	r7, #4
   16c42:	f1b2 040a 	subs.w	r4, r2, #10
   16c46:	bf18      	it	ne
   16c48:	2401      	movne	r4, #1
   16c4a:	4420      	add	r0, r4
   16c4c:	2a0a      	cmp	r2, #10
   16c4e:	d1d2      	bne.n	16bf6 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0xc4>
   16c50:	e036      	b.n	16cc0 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18e>
   16c52:	4660      	mov	r0, ip
   16c54:	2908      	cmp	r1, #8
   16c56:	d2a7      	bcs.n	16ba8 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x76>
   16c58:	eb0e 0700 	add.w	r7, lr, r0
   16c5c:	eb0e 0201 	add.w	r2, lr, r1
   16c60:	1a0e      	subs	r6, r1, r0
   16c62:	2100      	movs	r1, #0
   16c64:	b3ce      	cbz	r6, 16cda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c66:	463b      	mov	r3, r7
   16c68:	f813 5b01 	ldrb.w	r5, [r3], #1
   16c6c:	f1b5 040a 	subs.w	r4, r5, #10
   16c70:	bf18      	it	ne
   16c72:	2401      	movne	r4, #1
   16c74:	4421      	add	r1, r4
   16c76:	2d0a      	cmp	r5, #10
   16c78:	d021      	beq.n	16cbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16c7a:	4293      	cmp	r3, r2
   16c7c:	d02d      	beq.n	16cda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c7e:	787b      	ldrb	r3, [r7, #1]
   16c80:	f1b3 050a 	subs.w	r5, r3, #10
   16c84:	bf18      	it	ne
   16c86:	2501      	movne	r5, #1
   16c88:	4429      	add	r1, r5
   16c8a:	2b0a      	cmp	r3, #10
   16c8c:	d017      	beq.n	16cbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16c8e:	1cbb      	adds	r3, r7, #2
   16c90:	4293      	cmp	r3, r2
   16c92:	d022      	beq.n	16cda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16c94:	78bb      	ldrb	r3, [r7, #2]
   16c96:	f1b3 050a 	subs.w	r5, r3, #10
   16c9a:	bf18      	it	ne
   16c9c:	2501      	movne	r5, #1
   16c9e:	4429      	add	r1, r5
   16ca0:	2b0a      	cmp	r3, #10
   16ca2:	d00c      	beq.n	16cbe <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x18c>
   16ca4:	1cfb      	adds	r3, r7, #3
   16ca6:	4293      	cmp	r3, r2
   16ca8:	d017      	beq.n	16cda <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1a8>
   16caa:	78fb      	ldrb	r3, [r7, #3]
   16cac:	3e04      	subs	r6, #4
   16cae:	3704      	adds	r7, #4
   16cb0:	f1b3 050a 	subs.w	r5, r3, #10
   16cb4:	bf18      	it	ne
   16cb6:	2501      	movne	r5, #1
   16cb8:	4429      	add	r1, r5
   16cba:	2b0a      	cmp	r3, #10
   16cbc:	d1d2      	bne.n	16c64 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x132>
   16cbe:	4408      	add	r0, r1
   16cc0:	4458      	add	r0, fp
   16cc2:	f100 0b01 	add.w	fp, r0, #1
   16cc6:	4540      	cmp	r0, r8
   16cc8:	f4bf af5a 	bcs.w	16b80 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16ccc:	f81a 0000 	ldrb.w	r0, [sl, r0]
   16cd0:	280a      	cmp	r0, #10
   16cd2:	f47f af55 	bne.w	16b80 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x4e>
   16cd6:	2001      	movs	r0, #1
   16cd8:	e001      	b.n	16cde <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1ac>
   16cda:	2000      	movs	r0, #0
   16cdc:	46c3      	mov	fp, r8
   16cde:	f8d9 1008 	ldr.w	r1, [r9, #8]
   16ce2:	eba8 040b 	sub.w	r4, r8, fp
   16ce6:	7008      	strb	r0, [r1, #0]
   16ce8:	fab4 f084 	clz	r0, r4
   16cec:	0942      	lsrs	r2, r0, #5
   16cee:	fabb f08b 	clz	r0, fp
   16cf2:	0943      	lsrs	r3, r0, #5
   16cf4:	e9d9 0100 	ldrd	r0, r1, [r9]
   16cf8:	ea53 0602 	orrs.w	r6, r3, r2
   16cfc:	d106      	bne.n	16d0c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1da>
   16cfe:	45d8      	cmp	r8, fp
   16d00:	d926      	bls.n	16d50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16d02:	f91a 200b 	ldrsb.w	r2, [sl, fp]
   16d06:	f112 0f41 	cmn.w	r2, #65	; 0x41
   16d0a:	dd21      	ble.n	16d50 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x21e>
   16d0c:	68cb      	ldr	r3, [r1, #12]
   16d0e:	4651      	mov	r1, sl
   16d10:	465a      	mov	r2, fp
   16d12:	4798      	blx	r3
   16d14:	b9a8      	cbnz	r0, 16d42 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x210>
   16d16:	2e00      	cmp	r6, #0
   16d18:	f47f af19 	bne.w	16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16d1c:	45d8      	cmp	r8, fp
   16d1e:	d905      	bls.n	16d2c <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1fa>
   16d20:	f91a 000b 	ldrsb.w	r0, [sl, fp]
   16d24:	f110 0f41 	cmn.w	r0, #65	; 0x41
   16d28:	f73f af11 	bgt.w	16b4e <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE+0x1c>
   16d2c:	4650      	mov	r0, sl
   16d2e:	4641      	mov	r1, r8
   16d30:	465a      	mov	r2, fp
   16d32:	4643      	mov	r3, r8
   16d34:	f000 fe4d 	bl	179d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16d38:	defe      	udf	#254	; 0xfe
   16d3a:	2000      	movs	r0, #0
   16d3c:	b001      	add	sp, #4
   16d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d42:	2001      	movs	r0, #1
   16d44:	b001      	add	sp, #4
   16d46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d4a:	f000 fe20 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   16d4e:	defe      	udf	#254	; 0xfe
   16d50:	4650      	mov	r0, sl
   16d52:	4641      	mov	r1, r8
   16d54:	2200      	movs	r2, #0
   16d56:	465b      	mov	r3, fp
   16d58:	f000 fe3b 	bl	179d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>
   16d5c:	defe      	udf	#254	; 0xfe

00016d5e <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E>:
   16d5e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16d60:	b08d      	sub	sp, #52	; 0x34
   16d62:	4604      	mov	r4, r0
   16d64:	7a00      	ldrb	r0, [r0, #8]
   16d66:	b138      	cbz	r0, 16d78 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x1a>
   16d68:	2001      	movs	r0, #1
   16d6a:	6861      	ldr	r1, [r4, #4]
   16d6c:	7220      	strb	r0, [r4, #8]
   16d6e:	1c48      	adds	r0, r1, #1
   16d70:	6060      	str	r0, [r4, #4]
   16d72:	4620      	mov	r0, r4
   16d74:	b00d      	add	sp, #52	; 0x34
   16d76:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16d78:	4616      	mov	r6, r2
   16d7a:	460d      	mov	r5, r1
   16d7c:	e9d4 1200 	ldrd	r1, r2, [r4]
   16d80:	7808      	ldrb	r0, [r1, #0]
   16d82:	0740      	lsls	r0, r0, #29
   16d84:	d419      	bmi.n	16dba <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x5c>
   16d86:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
   16d8a:	f64f 71c6 	movw	r1, #65478	; 0xffc6
   16d8e:	f64f 7cca 	movw	ip, #65482	; 0xffca
   16d92:	f2c0 0101 	movt	r1, #1
   16d96:	2a00      	cmp	r2, #0
   16d98:	f2c0 0c01 	movt	ip, #1
   16d9c:	bf08      	it	eq
   16d9e:	4661      	moveq	r1, ip
   16da0:	68db      	ldr	r3, [r3, #12]
   16da2:	f04f 0202 	mov.w	r2, #2
   16da6:	bf08      	it	eq
   16da8:	2201      	moveq	r2, #1
   16daa:	4798      	blx	r3
   16dac:	2800      	cmp	r0, #0
   16dae:	d1db      	bne.n	16d68 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16db0:	68f2      	ldr	r2, [r6, #12]
   16db2:	4628      	mov	r0, r5
   16db4:	6821      	ldr	r1, [r4, #0]
   16db6:	4790      	blx	r2
   16db8:	e7d7      	b.n	16d6a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>
   16dba:	b95a      	cbnz	r2, 16dd4 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0x76>
   16dbc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16dc0:	2202      	movs	r2, #2
   16dc2:	68cb      	ldr	r3, [r1, #12]
   16dc4:	f64f 71c8 	movw	r1, #65480	; 0xffc8
   16dc8:	f2c0 0101 	movt	r1, #1
   16dcc:	4798      	blx	r3
   16dce:	2800      	cmp	r0, #0
   16dd0:	d1ca      	bne.n	16d68 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16dd2:	6821      	ldr	r1, [r4, #0]
   16dd4:	2001      	movs	r0, #1
   16dd6:	f10d 030f 	add.w	r3, sp, #15
   16dda:	f88d 000f 	strb.w	r0, [sp, #15]
   16dde:	e9d1 0206 	ldrd	r0, r2, [r1, #24]
   16de2:	e88d 000d 	stmia.w	sp, {r0, r2, r3}
   16de6:	e891 5005 	ldmia.w	r1, {r0, r2, ip, lr}
   16dea:	e9d1 3704 	ldrd	r3, r7, [r1, #16]
   16dee:	f891 1020 	ldrb.w	r1, [r1, #32]
   16df2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
   16df6:	a904      	add	r1, sp, #16
   16df8:	e9cd 0204 	strd	r0, r2, [sp, #16]
   16dfc:	f64f 70ac 	movw	r0, #65452	; 0xffac
   16e00:	f2c0 0001 	movt	r0, #1
   16e04:	68f2      	ldr	r2, [r6, #12]
   16e06:	900b      	str	r0, [sp, #44]	; 0x2c
   16e08:	4668      	mov	r0, sp
   16e0a:	900a      	str	r0, [sp, #40]	; 0x28
   16e0c:	4628      	mov	r0, r5
   16e0e:	e9cd 3708 	strd	r3, r7, [sp, #32]
   16e12:	e9cd ce06 	strd	ip, lr, [sp, #24]
   16e16:	4790      	blx	r2
   16e18:	2800      	cmp	r0, #0
   16e1a:	d1a5      	bne.n	16d68 <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xa>
   16e1c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   16e20:	2202      	movs	r2, #2
   16e22:	68cb      	ldr	r3, [r1, #12]
   16e24:	f64f 71c4 	movw	r1, #65476	; 0xffc4
   16e28:	f2c0 0101 	movt	r1, #1
   16e2c:	4798      	blx	r3
   16e2e:	e79c      	b.n	16d6a <_ZN4core3fmt8builders10DebugTuple5field17h6e6848819308b703E+0xc>

00016e30 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE>:
   16e30:	b5b0      	push	{r4, r5, r7, lr}
   16e32:	4604      	mov	r4, r0
   16e34:	7a05      	ldrb	r5, [r0, #8]
   16e36:	6840      	ldr	r0, [r0, #4]
   16e38:	b308      	cbz	r0, 16e7e <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4e>
   16e3a:	b10d      	cbz	r5, 16e40 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x10>
   16e3c:	2501      	movs	r5, #1
   16e3e:	e01d      	b.n	16e7c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16e40:	2801      	cmp	r0, #1
   16e42:	d110      	bne.n	16e66 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16e44:	7a60      	ldrb	r0, [r4, #9]
   16e46:	b170      	cbz	r0, 16e66 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16e48:	6821      	ldr	r1, [r4, #0]
   16e4a:	7808      	ldrb	r0, [r1, #0]
   16e4c:	0740      	lsls	r0, r0, #29
   16e4e:	d40a      	bmi.n	16e66 <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x36>
   16e50:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16e54:	2201      	movs	r2, #1
   16e56:	68cb      	ldr	r3, [r1, #12]
   16e58:	f64f 71cb 	movw	r1, #65483	; 0xffcb
   16e5c:	f2c0 0101 	movt	r1, #1
   16e60:	2501      	movs	r5, #1
   16e62:	4798      	blx	r3
   16e64:	b950      	cbnz	r0, 16e7c <_ZN4core3fmt8builders10DebugTuple6finish17h03a3c41f60073d7dE+0x4c>
   16e66:	6821      	ldr	r1, [r4, #0]
   16e68:	2201      	movs	r2, #1
   16e6a:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   16e6e:	68cb      	ldr	r3, [r1, #12]
   16e70:	f64f 71cc 	movw	r1, #65484	; 0xffcc
   16e74:	f2c0 0101 	movt	r1, #1
   16e78:	4798      	blx	r3
   16e7a:	4605      	mov	r5, r0
   16e7c:	7225      	strb	r5, [r4, #8]
   16e7e:	2d00      	cmp	r5, #0
   16e80:	bf18      	it	ne
   16e82:	2501      	movne	r5, #1
   16e84:	4628      	mov	r0, r5
   16e86:	bdb0      	pop	{r4, r5, r7, pc}

00016e88 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>:
   16e88:	b580      	push	{r7, lr}
   16e8a:	b082      	sub	sp, #8
   16e8c:	468c      	mov	ip, r1
   16e8e:	2100      	movs	r1, #0
   16e90:	f1bc 0f80 	cmp.w	ip, #128	; 0x80
   16e94:	9101      	str	r1, [sp, #4]
   16e96:	d207      	bcs.n	16ea8 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x20>
   16e98:	f88d c004 	strb.w	ip, [sp, #4]
   16e9c:	a901      	add	r1, sp, #4
   16e9e:	2201      	movs	r2, #1
   16ea0:	f7ff fe47 	bl	16b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16ea4:	b002      	add	sp, #8
   16ea6:	bd80      	pop	{r7, pc}
   16ea8:	f5bc 6f00 	cmp.w	ip, #2048	; 0x800
   16eac:	d210      	bcs.n	16ed0 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x48>
   16eae:	ea4f 119c 	mov.w	r1, ip, lsr #6
   16eb2:	2306      	movs	r3, #6
   16eb4:	2202      	movs	r2, #2
   16eb6:	f363 115f 	bfi	r1, r3, #5, #27
   16eba:	f362 1c9f 	bfi	ip, r2, #6, #26
   16ebe:	f88d c005 	strb.w	ip, [sp, #5]
   16ec2:	f88d 1004 	strb.w	r1, [sp, #4]
   16ec6:	a901      	add	r1, sp, #4
   16ec8:	f7ff fe33 	bl	16b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16ecc:	b002      	add	sp, #8
   16ece:	bd80      	pop	{r7, pc}
   16ed0:	2202      	movs	r2, #2
   16ed2:	4663      	mov	r3, ip
   16ed4:	a901      	add	r1, sp, #4
   16ed6:	f362 139f 	bfi	r3, r2, #6, #26
   16eda:	f5bc 3f80 	cmp.w	ip, #65536	; 0x10000
   16ede:	d213      	bcs.n	16f08 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E+0x80>
   16ee0:	f88d 3006 	strb.w	r3, [sp, #6]
   16ee4:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16ee8:	f362 139f 	bfi	r3, r2, #6, #26
   16eec:	f88d 3005 	strb.w	r3, [sp, #5]
   16ef0:	ea4f 321c 	mov.w	r2, ip, lsr #12
   16ef4:	230e      	movs	r3, #14
   16ef6:	f363 121f 	bfi	r2, r3, #4, #28
   16efa:	f88d 2004 	strb.w	r2, [sp, #4]
   16efe:	2203      	movs	r2, #3
   16f00:	f7ff fe17 	bl	16b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16f04:	b002      	add	sp, #8
   16f06:	bd80      	pop	{r7, pc}
   16f08:	f88d 3007 	strb.w	r3, [sp, #7]
   16f0c:	ea4f 139c 	mov.w	r3, ip, lsr #6
   16f10:	f362 139f 	bfi	r3, r2, #6, #26
   16f14:	f88d 3006 	strb.w	r3, [sp, #6]
   16f18:	ea4f 331c 	mov.w	r3, ip, lsr #12
   16f1c:	f362 139f 	bfi	r3, r2, #6, #26
   16f20:	22f0      	movs	r2, #240	; 0xf0
   16f22:	ea42 429c 	orr.w	r2, r2, ip, lsr #18
   16f26:	f88d 3005 	strb.w	r3, [sp, #5]
   16f2a:	f88d 2004 	strb.w	r2, [sp, #4]
   16f2e:	2204      	movs	r2, #4
   16f30:	f7ff fdff 	bl	16b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>
   16f34:	b002      	add	sp, #8
   16f36:	bd80      	pop	{r7, pc}

00016f38 <_ZN4core3fmt5Write9write_fmt17hae6d791d74acb8fdE>:
   16f38:	b570      	push	{r4, r5, r6, lr}
   16f3a:	b088      	sub	sp, #32
   16f3c:	9001      	str	r0, [sp, #4]
   16f3e:	aa02      	add	r2, sp, #8
   16f40:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16f44:	f240 0198 	movw	r1, #152	; 0x98
   16f48:	4610      	mov	r0, r2
   16f4a:	f2c0 0102 	movt	r1, #2
   16f4e:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16f52:	a801      	add	r0, sp, #4
   16f54:	f000 f89e 	bl	17094 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16f58:	b008      	add	sp, #32
   16f5a:	bd70      	pop	{r4, r5, r6, pc}

00016f5c <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_str17h7c7f70bd9dfb2e85E>:
   16f5c:	6800      	ldr	r0, [r0, #0]
   16f5e:	f7ff bde8 	b.w	16b32 <_ZN68_$LT$core..fmt..builders..PadAdapter$u20$as$u20$core..fmt..Write$GT$9write_str17h25ea0db33f22d11cE>

00016f62 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$10write_char17h9db12dfd2570c42dE>:
   16f62:	6800      	ldr	r0, [r0, #0]
   16f64:	f7ff bf90 	b.w	16e88 <_ZN4core3fmt5Write10write_char17hd95a61f71b4d68b5E>

00016f68 <_ZN50_$LT$$RF$mut$u20$W$u20$as$u20$core..fmt..Write$GT$9write_fmt17h131e42afdd5f325dE>:
   16f68:	b570      	push	{r4, r5, r6, lr}
   16f6a:	b088      	sub	sp, #32
   16f6c:	6800      	ldr	r0, [r0, #0]
   16f6e:	aa02      	add	r2, sp, #8
   16f70:	9001      	str	r0, [sp, #4]
   16f72:	e891 5078 	ldmia.w	r1, {r3, r4, r5, r6, ip, lr}
   16f76:	4610      	mov	r0, r2
   16f78:	f240 0198 	movw	r1, #152	; 0x98
   16f7c:	f2c0 0102 	movt	r1, #2
   16f80:	e880 5078 	stmia.w	r0, {r3, r4, r5, r6, ip, lr}
   16f84:	a801      	add	r0, sp, #4
   16f86:	f000 f885 	bl	17094 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   16f8a:	b008      	add	sp, #32
   16f8c:	bd70      	pop	{r4, r5, r6, pc}

00016f8e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE>:
   16f8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f92:	b08d      	sub	sp, #52	; 0x34
   16f94:	468c      	mov	ip, r1
   16f96:	6801      	ldr	r1, [r0, #0]
   16f98:	f248 5e1f 	movw	lr, #34079	; 0x851f
   16f9c:	f64f 70cf 	movw	r0, #65487	; 0xffcf
   16fa0:	f242 7810 	movw	r8, #10000	; 0x2710
   16fa4:	4541      	cmp	r1, r8
   16fa6:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   16faa:	f2c0 0001 	movt	r0, #1
   16fae:	d337      	bcc.n	17020 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x92>
   16fb0:	f241 7959 	movw	r9, #5977	; 0x1759
   16fb4:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   16fb8:	f10d 0b0c 	add.w	fp, sp, #12
   16fbc:	2300      	movs	r3, #0
   16fbe:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   16fc2:	f04f 0a64 	mov.w	sl, #100	; 0x64
   16fc6:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   16fca:	fba1 2409 	umull	r2, r4, r1, r9
   16fce:	42b9      	cmp	r1, r7
   16fd0:	ea4f 3254 	mov.w	r2, r4, lsr #13
   16fd4:	fb02 1418 	mls	r4, r2, r8, r1
   16fd8:	4611      	mov	r1, r2
   16fda:	b2a5      	uxth	r5, r4
   16fdc:	fba5 560e 	umull	r5, r6, r5, lr
   16fe0:	ea4f 1556 	mov.w	r5, r6, lsr #5
   16fe4:	eb0b 0603 	add.w	r6, fp, r3
   16fe8:	fb05 441a 	mls	r4, r5, sl, r4
   16fec:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   16ff0:	f1a3 0304 	sub.w	r3, r3, #4
   16ff4:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   16ff8:	b2a4      	uxth	r4, r4
   16ffa:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   16ffe:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   17002:	d8e2      	bhi.n	16fca <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x3c>
   17004:	f103 0427 	add.w	r4, r3, #39	; 0x27
   17008:	4611      	mov	r1, r2
   1700a:	2963      	cmp	r1, #99	; 0x63
   1700c:	dc0b      	bgt.n	17026 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x98>
   1700e:	460b      	mov	r3, r1
   17010:	2b0a      	cmp	r3, #10
   17012:	db17      	blt.n	17044 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xb6>
   17014:	1ea1      	subs	r1, r4, #2
   17016:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   1701a:	aa03      	add	r2, sp, #12
   1701c:	5250      	strh	r0, [r2, r1]
   1701e:	e016      	b.n	1704e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0xc0>
   17020:	2427      	movs	r4, #39	; 0x27
   17022:	2963      	cmp	r1, #99	; 0x63
   17024:	ddf3      	ble.n	1700e <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x80>
   17026:	b28a      	uxth	r2, r1
   17028:	3c02      	subs	r4, #2
   1702a:	fba2 230e 	umull	r2, r3, r2, lr
   1702e:	2264      	movs	r2, #100	; 0x64
   17030:	095b      	lsrs	r3, r3, #5
   17032:	fb03 1112 	mls	r1, r3, r2, r1
   17036:	aa03      	add	r2, sp, #12
   17038:	b289      	uxth	r1, r1
   1703a:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   1703e:	5311      	strh	r1, [r2, r4]
   17040:	2b0a      	cmp	r3, #10
   17042:	dae7      	bge.n	17014 <_ZN4core3fmt10ArgumentV110show_usize17hc890ee94b065c26dE+0x86>
   17044:	1e61      	subs	r1, r4, #1
   17046:	aa03      	add	r2, sp, #12
   17048:	f103 0030 	add.w	r0, r3, #48	; 0x30
   1704c:	5450      	strb	r0, [r2, r1]
   1704e:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   17052:	aa03      	add	r2, sp, #12
   17054:	4411      	add	r1, r2
   17056:	f64f 5294 	movw	r2, #64916	; 0xfd94
   1705a:	e9cd 1000 	strd	r1, r0, [sp]
   1705e:	f2c0 0201 	movt	r2, #1
   17062:	4660      	mov	r0, ip
   17064:	2101      	movs	r1, #1
   17066:	2300      	movs	r3, #0
   17068:	f000 f8f4 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1706c:	b00d      	add	sp, #52	; 0x34
   1706e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00017072 <_ZN59_$LT$core..fmt..Arguments$u20$as$u20$core..fmt..Display$GT$3fmt17h0640cedb2172c219E>:
   17072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17076:	b086      	sub	sp, #24
   17078:	e9d1 c106 	ldrd	ip, r1, [r1, #24]
   1707c:	466a      	mov	r2, sp
   1707e:	e890 41f0 	ldmia.w	r0, {r4, r5, r6, r7, r8, lr}
   17082:	4613      	mov	r3, r2
   17084:	4660      	mov	r0, ip
   17086:	e883 41f0 	stmia.w	r3, {r4, r5, r6, r7, r8, lr}
   1708a:	f000 f803 	bl	17094 <_ZN4core3fmt5write17hd95ac78ed22a2252E>
   1708e:	b006      	add	sp, #24
   17090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00017094 <_ZN4core3fmt5write17hd95ac78ed22a2252E>:
   17094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17098:	b08b      	sub	sp, #44	; 0x2c
   1709a:	2303      	movs	r3, #3
   1709c:	6897      	ldr	r7, [r2, #8]
   1709e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   170a2:	2320      	movs	r3, #32
   170a4:	9303      	str	r3, [sp, #12]
   170a6:	2300      	movs	r3, #0
   170a8:	2f00      	cmp	r7, #0
   170aa:	9302      	str	r3, [sp, #8]
   170ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
   170b0:	9306      	str	r3, [sp, #24]
   170b2:	9304      	str	r3, [sp, #16]
   170b4:	d07c      	beq.n	171b0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x11c>
   170b6:	f8d2 b00c 	ldr.w	fp, [r2, #12]
   170ba:	e9d2 9400 	ldrd	r9, r4, [r2]
   170be:	45a3      	cmp	fp, r4
   170c0:	bf88      	it	hi
   170c2:	46a3      	movhi	fp, r4
   170c4:	f1bb 0f00 	cmp.w	fp, #0
   170c8:	f000 809b 	beq.w	17202 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   170cc:	e9d2 6204 	ldrd	r6, r2, [r2, #16]
   170d0:	68cd      	ldr	r5, [r1, #12]
   170d2:	9201      	str	r2, [sp, #4]
   170d4:	e9d9 3200 	ldrd	r3, r2, [r9]
   170d8:	4619      	mov	r1, r3
   170da:	47a8      	blx	r5
   170dc:	2800      	cmp	r0, #0
   170de:	f040 809e 	bne.w	1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   170e2:	464d      	mov	r5, r9
   170e4:	f04f 0a01 	mov.w	sl, #1
   170e8:	f04f 0800 	mov.w	r8, #0
   170ec:	f04f 0910 	mov.w	r9, #16
   170f0:	eb07 0088 	add.w	r0, r7, r8, lsl #2
   170f4:	6841      	ldr	r1, [r0, #4]
   170f6:	9103      	str	r1, [sp, #12]
   170f8:	7f01      	ldrb	r1, [r0, #28]
   170fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   170fe:	6881      	ldr	r1, [r0, #8]
   17100:	9102      	str	r1, [sp, #8]
   17102:	e9d0 2105 	ldrd	r2, r1, [r0, #20]
   17106:	b18a      	cbz	r2, 1712c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x98>
   17108:	2a02      	cmp	r2, #2
   1710a:	d011      	beq.n	17130 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   1710c:	9a01      	ldr	r2, [sp, #4]
   1710e:	4291      	cmp	r1, r2
   17110:	f080 8098 	bcs.w	17244 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17114:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
   17118:	f646 738f 	movw	r3, #28559	; 0x6f8f
   1711c:	f2c0 0301 	movt	r3, #1
   17120:	6852      	ldr	r2, [r2, #4]
   17122:	429a      	cmp	r2, r3
   17124:	d104      	bne.n	17130 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9c>
   17126:	f856 1031 	ldr.w	r1, [r6, r1, lsl #3]
   1712a:	6809      	ldr	r1, [r1, #0]
   1712c:	2201      	movs	r2, #1
   1712e:	e000      	b.n	17132 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x9e>
   17130:	2200      	movs	r2, #0
   17132:	e9cd 2104 	strd	r2, r1, [sp, #16]
   17136:	f857 1009 	ldr.w	r1, [r7, r9]
   1713a:	68c0      	ldr	r0, [r0, #12]
   1713c:	b180      	cbz	r0, 17160 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xcc>
   1713e:	2802      	cmp	r0, #2
   17140:	d010      	beq.n	17164 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   17142:	9801      	ldr	r0, [sp, #4]
   17144:	4281      	cmp	r1, r0
   17146:	d27d      	bcs.n	17244 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1b0>
   17148:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
   1714c:	f646 728f 	movw	r2, #28559	; 0x6f8f
   17150:	f2c0 0201 	movt	r2, #1
   17154:	6840      	ldr	r0, [r0, #4]
   17156:	4290      	cmp	r0, r2
   17158:	d104      	bne.n	17164 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd0>
   1715a:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1715e:	6801      	ldr	r1, [r0, #0]
   17160:	2001      	movs	r0, #1
   17162:	e000      	b.n	17166 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0xd2>
   17164:	2000      	movs	r0, #0
   17166:	eb07 0209 	add.w	r2, r7, r9
   1716a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1716e:	9801      	ldr	r0, [sp, #4]
   17170:	f852 1c10 	ldr.w	r1, [r2, #-16]
   17174:	4281      	cmp	r1, r0
   17176:	d25d      	bcs.n	17234 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x1a0>
   17178:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
   1717c:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
   17180:	684a      	ldr	r2, [r1, #4]
   17182:	a902      	add	r1, sp, #8
   17184:	4790      	blx	r2
   17186:	2800      	cmp	r0, #0
   17188:	d149      	bne.n	1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   1718a:	45da      	cmp	sl, fp
   1718c:	d24b      	bcs.n	17226 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x192>
   1718e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17192:	eb05 0208 	add.w	r2, r5, r8
   17196:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   1719a:	68db      	ldr	r3, [r3, #12]
   1719c:	4798      	blx	r3
   1719e:	f109 0920 	add.w	r9, r9, #32
   171a2:	f108 0808 	add.w	r8, r8, #8
   171a6:	f10a 0a01 	add.w	sl, sl, #1
   171aa:	2800      	cmp	r0, #0
   171ac:	d0a0      	beq.n	170f0 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x5c>
   171ae:	e036      	b.n	1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   171b0:	6956      	ldr	r6, [r2, #20]
   171b2:	e9d2 9400 	ldrd	r9, r4, [r2]
   171b6:	42a6      	cmp	r6, r4
   171b8:	bf88      	it	hi
   171ba:	4626      	movhi	r6, r4
   171bc:	b30e      	cbz	r6, 17202 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x16e>
   171be:	6917      	ldr	r7, [r2, #16]
   171c0:	e9d9 3200 	ldrd	r3, r2, [r9]
   171c4:	68cd      	ldr	r5, [r1, #12]
   171c6:	4619      	mov	r1, r3
   171c8:	47a8      	blx	r5
   171ca:	bb40      	cbnz	r0, 1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   171cc:	f10d 0808 	add.w	r8, sp, #8
   171d0:	2500      	movs	r5, #0
   171d2:	eb07 01c5 	add.w	r1, r7, r5, lsl #3
   171d6:	f857 0035 	ldr.w	r0, [r7, r5, lsl #3]
   171da:	684a      	ldr	r2, [r1, #4]
   171dc:	4641      	mov	r1, r8
   171de:	4790      	blx	r2
   171e0:	b9e8      	cbnz	r0, 1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   171e2:	f105 0a01 	add.w	sl, r5, #1
   171e6:	45b2      	cmp	sl, r6
   171e8:	d20d      	bcs.n	17206 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x172>
   171ea:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   171ee:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
   171f2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
   171f6:	68db      	ldr	r3, [r3, #12]
   171f8:	4798      	blx	r3
   171fa:	2800      	cmp	r0, #0
   171fc:	4655      	mov	r5, sl
   171fe:	d0e8      	beq.n	171d2 <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x13e>
   17200:	e00d      	b.n	1721e <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x18a>
   17202:	f04f 0a00 	mov.w	sl, #0
   17206:	4554      	cmp	r4, sl
   17208:	d910      	bls.n	1722c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1720a:	eb09 02ca 	add.w	r2, r9, sl, lsl #3
   1720e:	e9dd 0308 	ldrd	r0, r3, [sp, #32]
   17212:	f859 103a 	ldr.w	r1, [r9, sl, lsl #3]
   17216:	6852      	ldr	r2, [r2, #4]
   17218:	68db      	ldr	r3, [r3, #12]
   1721a:	4798      	blx	r3
   1721c:	b130      	cbz	r0, 1722c <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x198>
   1721e:	2001      	movs	r0, #1
   17220:	b00b      	add	sp, #44	; 0x2c
   17222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17226:	46a9      	mov	r9, r5
   17228:	4554      	cmp	r4, sl
   1722a:	d8ee      	bhi.n	1720a <_ZN4core3fmt5write17hd95ac78ed22a2252E+0x176>
   1722c:	2000      	movs	r0, #0
   1722e:	b00b      	add	sp, #44	; 0x2c
   17230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17234:	f240 00c8 	movw	r0, #200	; 0xc8
   17238:	f2c0 0002 	movt	r0, #2
   1723c:	9a01      	ldr	r2, [sp, #4]
   1723e:	f7ff fc47 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17242:	defe      	udf	#254	; 0xfe
   17244:	f240 00d8 	movw	r0, #216	; 0xd8
   17248:	f2c0 0002 	movt	r0, #2
   1724c:	9a01      	ldr	r2, [sp, #4]
   1724e:	f7ff fc3f 	bl	16ad0 <_ZN4core9panicking18panic_bounds_check17h9ce40546618114b6E>
   17252:	defe      	udf	#254	; 0xfe

00017254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>:
   17254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17258:	b083      	sub	sp, #12
   1725a:	e9dd 570c 	ldrd	r5, r7, [sp, #48]	; 0x30
   1725e:	469a      	mov	sl, r3
   17260:	4604      	mov	r4, r0
   17262:	b1e1      	cbz	r1, 1729e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x4a>
   17264:	f8d4 e000 	ldr.w	lr, [r4]
   17268:	f04f 082b 	mov.w	r8, #43	; 0x2b
   1726c:	f01e 0101 	ands.w	r1, lr, #1
   17270:	bf08      	it	eq
   17272:	f44f 1888 	moveq.w	r8, #1114112	; 0x110000
   17276:	eb01 0907 	add.w	r9, r1, r7
   1727a:	ea5f 714e 	movs.w	r1, lr, lsl #29
   1727e:	d517      	bpl.n	172b0 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x5c>
   17280:	f1ba 0f00 	cmp.w	sl, #0
   17284:	d033      	beq.n	172ee <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9a>
   17286:	f1aa 0101 	sub.w	r1, sl, #1
   1728a:	f00a 0c03 	and.w	ip, sl, #3
   1728e:	2903      	cmp	r1, #3
   17290:	d22f      	bcs.n	172f2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x9e>
   17292:	2100      	movs	r1, #0
   17294:	4613      	mov	r3, r2
   17296:	f1bc 0f00 	cmp.w	ip, #0
   1729a:	d152      	bne.n	17342 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xee>
   1729c:	e069      	b.n	17372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   1729e:	f8d4 e000 	ldr.w	lr, [r4]
   172a2:	f107 0901 	add.w	r9, r7, #1
   172a6:	f04f 082d 	mov.w	r8, #45	; 0x2d
   172aa:	ea5f 714e 	movs.w	r1, lr, lsl #29
   172ae:	d4e7      	bmi.n	17280 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x2c>
   172b0:	f04f 0a00 	mov.w	sl, #0
   172b4:	2200      	movs	r2, #0
   172b6:	68a0      	ldr	r0, [r4, #8]
   172b8:	2801      	cmp	r0, #1
   172ba:	d161      	bne.n	17380 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   172bc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   172c0:	45cb      	cmp	fp, r9
   172c2:	d95d      	bls.n	17380 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x12c>
   172c4:	ea5f 700e 	movs.w	r0, lr, lsl #28
   172c8:	d46e      	bmi.n	173a8 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x154>
   172ca:	9202      	str	r2, [sp, #8]
   172cc:	ebab 0109 	sub.w	r1, fp, r9
   172d0:	f894 2020 	ldrb.w	r2, [r4, #32]
   172d4:	2000      	movs	r0, #0
   172d6:	46a9      	mov	r9, r5
   172d8:	460e      	mov	r6, r1
   172da:	2a03      	cmp	r2, #3
   172dc:	bf08      	it	eq
   172de:	2201      	moveq	r2, #1
   172e0:	e8df f002 	tbb	[pc, r2]
   172e4:	02840287 	.word	0x02840287
   172e8:	2600      	movs	r6, #0
   172ea:	4608      	mov	r0, r1
   172ec:	e081      	b.n	173f2 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x19e>
   172ee:	2100      	movs	r1, #0
   172f0:	e03f      	b.n	17372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   172f2:	ebac 060a 	sub.w	r6, ip, sl
   172f6:	2100      	movs	r1, #0
   172f8:	4693      	mov	fp, r2
   172fa:	4613      	mov	r3, r2
   172fc:	e9cd 7501 	strd	r7, r5, [sp, #4]
   17300:	781a      	ldrb	r2, [r3, #0]
   17302:	785d      	ldrb	r5, [r3, #1]
   17304:	7898      	ldrb	r0, [r3, #2]
   17306:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1730a:	78df      	ldrb	r7, [r3, #3]
   1730c:	2a80      	cmp	r2, #128	; 0x80
   1730e:	f005 02c0 	and.w	r2, r5, #192	; 0xc0
   17312:	bf08      	it	eq
   17314:	3101      	addeq	r1, #1
   17316:	2a80      	cmp	r2, #128	; 0x80
   17318:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1731c:	bf08      	it	eq
   1731e:	3101      	addeq	r1, #1
   17320:	2880      	cmp	r0, #128	; 0x80
   17322:	f007 00c0 	and.w	r0, r7, #192	; 0xc0
   17326:	bf08      	it	eq
   17328:	3101      	addeq	r1, #1
   1732a:	2880      	cmp	r0, #128	; 0x80
   1732c:	bf08      	it	eq
   1732e:	3101      	addeq	r1, #1
   17330:	3304      	adds	r3, #4
   17332:	3604      	adds	r6, #4
   17334:	d1e4      	bne.n	17300 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0xac>
   17336:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   1733a:	465a      	mov	r2, fp
   1733c:	f1bc 0f00 	cmp.w	ip, #0
   17340:	d017      	beq.n	17372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17342:	7818      	ldrb	r0, [r3, #0]
   17344:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   17348:	2880      	cmp	r0, #128	; 0x80
   1734a:	bf08      	it	eq
   1734c:	3101      	addeq	r1, #1
   1734e:	f1bc 0f01 	cmp.w	ip, #1
   17352:	d00e      	beq.n	17372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17354:	7858      	ldrb	r0, [r3, #1]
   17356:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1735a:	2880      	cmp	r0, #128	; 0x80
   1735c:	bf08      	it	eq
   1735e:	3101      	addeq	r1, #1
   17360:	f1bc 0f02 	cmp.w	ip, #2
   17364:	d005      	beq.n	17372 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x11e>
   17366:	7898      	ldrb	r0, [r3, #2]
   17368:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1736c:	2880      	cmp	r0, #128	; 0x80
   1736e:	bf08      	it	eq
   17370:	3101      	addeq	r1, #1
   17372:	eb09 000a 	add.w	r0, r9, sl
   17376:	eba0 0901 	sub.w	r9, r0, r1
   1737a:	68a0      	ldr	r0, [r4, #8]
   1737c:	2801      	cmp	r0, #1
   1737e:	d09d      	beq.n	172bc <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x68>
   17380:	4620      	mov	r0, r4
   17382:	4641      	mov	r1, r8
   17384:	4653      	mov	r3, sl
   17386:	f000 f893 	bl	174b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   1738a:	b120      	cbz	r0, 17396 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x142>
   1738c:	2601      	movs	r6, #1
   1738e:	4630      	mov	r0, r6
   17390:	b003      	add	sp, #12
   17392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17396:	69e1      	ldr	r1, [r4, #28]
   17398:	463a      	mov	r2, r7
   1739a:	69a0      	ldr	r0, [r4, #24]
   1739c:	68cb      	ldr	r3, [r1, #12]
   1739e:	4629      	mov	r1, r5
   173a0:	b003      	add	sp, #12
   173a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   173a6:	4718      	bx	r3
   173a8:	6860      	ldr	r0, [r4, #4]
   173aa:	2601      	movs	r6, #1
   173ac:	9002      	str	r0, [sp, #8]
   173ae:	2030      	movs	r0, #48	; 0x30
   173b0:	f894 1020 	ldrb.w	r1, [r4, #32]
   173b4:	4653      	mov	r3, sl
   173b6:	6060      	str	r0, [r4, #4]
   173b8:	4620      	mov	r0, r4
   173ba:	9101      	str	r1, [sp, #4]
   173bc:	4641      	mov	r1, r8
   173be:	f884 6020 	strb.w	r6, [r4, #32]
   173c2:	f000 f875 	bl	174b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   173c6:	2800      	cmp	r0, #0
   173c8:	d1e1      	bne.n	1738e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   173ca:	f894 2020 	ldrb.w	r2, [r4, #32]
   173ce:	ebab 0109 	sub.w	r1, fp, r9
   173d2:	2000      	movs	r0, #0
   173d4:	46a9      	mov	r9, r5
   173d6:	2a03      	cmp	r2, #3
   173d8:	bf08      	it	eq
   173da:	2201      	moveq	r2, #1
   173dc:	460e      	mov	r6, r1
   173de:	e8df f002 	tbb	[pc, r2]
   173e2:	0235      	.short	0x0235
   173e4:	0232      	.short	0x0232
   173e6:	2600      	movs	r6, #0
   173e8:	4608      	mov	r0, r1
   173ea:	e02f      	b.n	1744c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1f8>
   173ec:	0848      	lsrs	r0, r1, #1
   173ee:	3101      	adds	r1, #1
   173f0:	084e      	lsrs	r6, r1, #1
   173f2:	1c45      	adds	r5, r0, #1
   173f4:	3d01      	subs	r5, #1
   173f6:	d007      	beq.n	17408 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1b4>
   173f8:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   173fc:	6861      	ldr	r1, [r4, #4]
   173fe:	6912      	ldr	r2, [r2, #16]
   17400:	4790      	blx	r2
   17402:	2800      	cmp	r0, #0
   17404:	d0f6      	beq.n	173f4 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1a0>
   17406:	e7c1      	b.n	1738c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17408:	9a02      	ldr	r2, [sp, #8]
   1740a:	4620      	mov	r0, r4
   1740c:	4641      	mov	r1, r8
   1740e:	4653      	mov	r3, sl
   17410:	f8d4 b004 	ldr.w	fp, [r4, #4]
   17414:	f000 f84c 	bl	174b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>
   17418:	2800      	cmp	r0, #0
   1741a:	d1b7      	bne.n	1738c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1741c:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17420:	463a      	mov	r2, r7
   17422:	68cb      	ldr	r3, [r1, #12]
   17424:	4649      	mov	r1, r9
   17426:	4798      	blx	r3
   17428:	2800      	cmp	r0, #0
   1742a:	d1af      	bne.n	1738c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   1742c:	e9d4 5406 	ldrd	r5, r4, [r4, #24]
   17430:	1c77      	adds	r7, r6, #1
   17432:	2601      	movs	r6, #1
   17434:	3f01      	subs	r7, #1
   17436:	d02c      	beq.n	17492 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x23e>
   17438:	6922      	ldr	r2, [r4, #16]
   1743a:	4628      	mov	r0, r5
   1743c:	4659      	mov	r1, fp
   1743e:	4790      	blx	r2
   17440:	2800      	cmp	r0, #0
   17442:	d0f7      	beq.n	17434 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1e0>
   17444:	e7a3      	b.n	1738e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17446:	0848      	lsrs	r0, r1, #1
   17448:	3101      	adds	r1, #1
   1744a:	084e      	lsrs	r6, r1, #1
   1744c:	1c45      	adds	r5, r0, #1
   1744e:	3d01      	subs	r5, #1
   17450:	d007      	beq.n	17462 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x20e>
   17452:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17456:	6861      	ldr	r1, [r4, #4]
   17458:	6912      	ldr	r2, [r2, #16]
   1745a:	4790      	blx	r2
   1745c:	2800      	cmp	r0, #0
   1745e:	d0f6      	beq.n	1744e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x1fa>
   17460:	e794      	b.n	1738c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17462:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   17466:	463a      	mov	r2, r7
   17468:	68cb      	ldr	r3, [r1, #12]
   1746a:	4649      	mov	r1, r9
   1746c:	f8d4 8004 	ldr.w	r8, [r4, #4]
   17470:	4798      	blx	r3
   17472:	2800      	cmp	r0, #0
   17474:	f47f af8a 	bne.w	1738c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x138>
   17478:	e9d4 9506 	ldrd	r9, r5, [r4, #24]
   1747c:	1c77      	adds	r7, r6, #1
   1747e:	2601      	movs	r6, #1
   17480:	3f01      	subs	r7, #1
   17482:	d00b      	beq.n	1749c <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x248>
   17484:	692a      	ldr	r2, [r5, #16]
   17486:	4648      	mov	r0, r9
   17488:	4641      	mov	r1, r8
   1748a:	4790      	blx	r2
   1748c:	2800      	cmp	r0, #0
   1748e:	d0f7      	beq.n	17480 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x22c>
   17490:	e77d      	b.n	1738e <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E+0x13a>
   17492:	2600      	movs	r6, #0
   17494:	4630      	mov	r0, r6
   17496:	b003      	add	sp, #12
   17498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1749c:	9801      	ldr	r0, [sp, #4]
   1749e:	2600      	movs	r6, #0
   174a0:	f884 0020 	strb.w	r0, [r4, #32]
   174a4:	9802      	ldr	r0, [sp, #8]
   174a6:	6060      	str	r0, [r4, #4]
   174a8:	4630      	mov	r0, r6
   174aa:	b003      	add	sp, #12
   174ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000174b0 <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E>:
   174b0:	b570      	push	{r4, r5, r6, lr}
   174b2:	461c      	mov	r4, r3
   174b4:	4615      	mov	r5, r2
   174b6:	4606      	mov	r6, r0
   174b8:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
   174bc:	d006      	beq.n	174cc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   174be:	e9d6 0206 	ldrd	r0, r2, [r6, #24]
   174c2:	6912      	ldr	r2, [r2, #16]
   174c4:	4790      	blx	r2
   174c6:	b108      	cbz	r0, 174cc <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x1c>
   174c8:	2001      	movs	r0, #1
   174ca:	bd70      	pop	{r4, r5, r6, pc}
   174cc:	b13d      	cbz	r5, 174de <_ZN4core3fmt9Formatter12pad_integral12write_prefix17hcbb45039ae744c84E+0x2e>
   174ce:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
   174d2:	4622      	mov	r2, r4
   174d4:	68cb      	ldr	r3, [r1, #12]
   174d6:	4629      	mov	r1, r5
   174d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   174dc:	4718      	bx	r3
   174de:	2000      	movs	r0, #0
   174e0:	bd70      	pop	{r4, r5, r6, pc}
	...

000174e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>:
   174e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   174e8:	b081      	sub	sp, #4
   174ea:	f8d0 e008 	ldr.w	lr, [r0, #8]
   174ee:	4682      	mov	sl, r0
   174f0:	6900      	ldr	r0, [r0, #16]
   174f2:	4691      	mov	r9, r2
   174f4:	4688      	mov	r8, r1
   174f6:	f1be 0f01 	cmp.w	lr, #1
   174fa:	d111      	bne.n	17520 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x3c>
   174fc:	2801      	cmp	r0, #1
   174fe:	d012      	beq.n	17526 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x42>
   17500:	f1b9 0f00 	cmp.w	r9, #0
   17504:	f000 80c5 	beq.w	17692 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1ae>
   17508:	f1a9 0101 	sub.w	r1, r9, #1
   1750c:	f009 0003 	and.w	r0, r9, #3
   17510:	2903      	cmp	r1, #3
   17512:	d267      	bcs.n	175e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x100>
   17514:	2100      	movs	r1, #0
   17516:	4642      	mov	r2, r8
   17518:	2800      	cmp	r0, #0
   1751a:	f040 8083 	bne.w	17624 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x140>
   1751e:	e097      	b.n	17650 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17520:	2801      	cmp	r0, #1
   17522:	f040 80bd 	bne.w	176a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   17526:	f1b9 0f00 	cmp.w	r9, #0
   1752a:	d054      	beq.n	175d6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xf2>
   1752c:	f8da 0014 	ldr.w	r0, [sl, #20]
   17530:	eb08 0109 	add.w	r1, r8, r9
   17534:	2200      	movs	r2, #0
   17536:	4647      	mov	r7, r8
   17538:	1c43      	adds	r3, r0, #1
   1753a:	4646      	mov	r6, r8
   1753c:	463c      	mov	r4, r7
   1753e:	f914 5b01 	ldrsb.w	r5, [r4], #1
   17542:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   17546:	b2e8      	uxtb	r0, r5
   17548:	dc2e      	bgt.n	175a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   1754a:	428c      	cmp	r4, r1
   1754c:	d01a      	beq.n	17584 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xa0>
   1754e:	787d      	ldrb	r5, [r7, #1]
   17550:	1cbc      	adds	r4, r7, #2
   17552:	f005 053f 	and.w	r5, r5, #63	; 0x3f
   17556:	4627      	mov	r7, r4
   17558:	f000 0b1f 	and.w	fp, r0, #31
   1755c:	28df      	cmp	r0, #223	; 0xdf
   1755e:	d917      	bls.n	17590 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xac>
   17560:	428f      	cmp	r7, r1
   17562:	d018      	beq.n	17596 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xb2>
   17564:	f817 4b01 	ldrb.w	r4, [r7], #1
   17568:	f004 0c3f 	and.w	ip, r4, #63	; 0x3f
   1756c:	463c      	mov	r4, r7
   1756e:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   17572:	28f0      	cmp	r0, #240	; 0xf0
   17574:	d316      	bcc.n	175a4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc0>
   17576:	428f      	cmp	r7, r1
   17578:	d020      	beq.n	175bc <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xd8>
   1757a:	f817 0b01 	ldrb.w	r0, [r7], #1
   1757e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   17582:	e01d      	b.n	175c0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xdc>
   17584:	2500      	movs	r5, #0
   17586:	460f      	mov	r7, r1
   17588:	f000 0b1f 	and.w	fp, r0, #31
   1758c:	28df      	cmp	r0, #223	; 0xdf
   1758e:	d8e7      	bhi.n	17560 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x7c>
   17590:	ea45 108b 	orr.w	r0, r5, fp, lsl #6
   17594:	e008      	b.n	175a8 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc4>
   17596:	f04f 0c00 	mov.w	ip, #0
   1759a:	460f      	mov	r7, r1
   1759c:	ea4c 1585 	orr.w	r5, ip, r5, lsl #6
   175a0:	28f0      	cmp	r0, #240	; 0xf0
   175a2:	d2e8      	bcs.n	17576 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x92>
   175a4:	ea45 300b 	orr.w	r0, r5, fp, lsl #12
   175a8:	4627      	mov	r7, r4
   175aa:	3b01      	subs	r3, #1
   175ac:	d065      	beq.n	1767a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x196>
   175ae:	1b90      	subs	r0, r2, r6
   175b0:	42b9      	cmp	r1, r7
   175b2:	eb00 0207 	add.w	r2, r0, r7
   175b6:	463e      	mov	r6, r7
   175b8:	d1c0      	bne.n	1753c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x58>
   175ba:	e061      	b.n	17680 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   175bc:	2000      	movs	r0, #0
   175be:	4627      	mov	r7, r4
   175c0:	f44f 14e0 	mov.w	r4, #1835008	; 0x1c0000
   175c4:	ea04 448b 	and.w	r4, r4, fp, lsl #18
   175c8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   175cc:	4428      	add	r0, r5
   175ce:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   175d2:	d1ea      	bne.n	175aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xc6>
   175d4:	e054      	b.n	17680 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x19c>
   175d6:	2200      	movs	r2, #0
   175d8:	f1be 0f01 	cmp.w	lr, #1
   175dc:	d054      	beq.n	17688 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   175de:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   175e2:	e062      	b.n	176aa <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1c6>
   175e4:	eba0 0309 	sub.w	r3, r0, r9
   175e8:	2100      	movs	r1, #0
   175ea:	4642      	mov	r2, r8
   175ec:	7817      	ldrb	r7, [r2, #0]
   175ee:	7856      	ldrb	r6, [r2, #1]
   175f0:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
   175f4:	7895      	ldrb	r5, [r2, #2]
   175f6:	78d4      	ldrb	r4, [r2, #3]
   175f8:	2f80      	cmp	r7, #128	; 0x80
   175fa:	f006 07c0 	and.w	r7, r6, #192	; 0xc0
   175fe:	bf08      	it	eq
   17600:	3101      	addeq	r1, #1
   17602:	2f80      	cmp	r7, #128	; 0x80
   17604:	f005 07c0 	and.w	r7, r5, #192	; 0xc0
   17608:	bf08      	it	eq
   1760a:	3101      	addeq	r1, #1
   1760c:	2f80      	cmp	r7, #128	; 0x80
   1760e:	f004 07c0 	and.w	r7, r4, #192	; 0xc0
   17612:	bf08      	it	eq
   17614:	3101      	addeq	r1, #1
   17616:	2f80      	cmp	r7, #128	; 0x80
   17618:	bf08      	it	eq
   1761a:	3101      	addeq	r1, #1
   1761c:	3204      	adds	r2, #4
   1761e:	3304      	adds	r3, #4
   17620:	d1e4      	bne.n	175ec <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x108>
   17622:	b1a8      	cbz	r0, 17650 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17624:	7813      	ldrb	r3, [r2, #0]
   17626:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1762a:	2b80      	cmp	r3, #128	; 0x80
   1762c:	bf08      	it	eq
   1762e:	3101      	addeq	r1, #1
   17630:	2801      	cmp	r0, #1
   17632:	d00d      	beq.n	17650 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17634:	7853      	ldrb	r3, [r2, #1]
   17636:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1763a:	2b80      	cmp	r3, #128	; 0x80
   1763c:	bf08      	it	eq
   1763e:	3101      	addeq	r1, #1
   17640:	2802      	cmp	r0, #2
   17642:	d005      	beq.n	17650 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x16c>
   17644:	7890      	ldrb	r0, [r2, #2]
   17646:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
   1764a:	2880      	cmp	r0, #128	; 0x80
   1764c:	bf08      	it	eq
   1764e:	3101      	addeq	r1, #1
   17650:	f8da 000c 	ldr.w	r0, [sl, #12]
   17654:	eba9 0101 	sub.w	r1, r9, r1
   17658:	4281      	cmp	r1, r0
   1765a:	d221      	bcs.n	176a0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1bc>
   1765c:	f1b9 0f00 	cmp.w	r9, #0
   17660:	d029      	beq.n	176b6 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d2>
   17662:	f1a9 0101 	sub.w	r1, r9, #1
   17666:	f009 0c03 	and.w	ip, r9, #3
   1766a:	2903      	cmp	r1, #3
   1766c:	d225      	bcs.n	176ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1d6>
   1766e:	2100      	movs	r1, #0
   17670:	4643      	mov	r3, r8
   17672:	f1bc 0f00 	cmp.w	ip, #0
   17676:	d142      	bne.n	176fe <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x21a>
   17678:	e059      	b.n	1772e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   1767a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   1767e:	d167      	bne.n	17750 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x26c>
   17680:	464a      	mov	r2, r9
   17682:	f1be 0f01 	cmp.w	lr, #1
   17686:	d1aa      	bne.n	175de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   17688:	4691      	mov	r9, r2
   1768a:	f1b9 0f00 	cmp.w	r9, #0
   1768e:	f47f af3b 	bne.w	17508 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24>
   17692:	2100      	movs	r1, #0
   17694:	f8da 000c 	ldr.w	r0, [sl, #12]
   17698:	eba9 0101 	sub.w	r1, r9, r1
   1769c:	4281      	cmp	r1, r0
   1769e:	d3dd      	bcc.n	1765c <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x178>
   176a0:	f8da 101c 	ldr.w	r1, [sl, #28]
   176a4:	464a      	mov	r2, r9
   176a6:	f8da 0018 	ldr.w	r0, [sl, #24]
   176aa:	68cb      	ldr	r3, [r1, #12]
   176ac:	4641      	mov	r1, r8
   176ae:	b001      	add	sp, #4
   176b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   176b4:	4718      	bx	r3
   176b6:	2100      	movs	r1, #0
   176b8:	e039      	b.n	1772e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   176ba:	ebac 0709 	sub.w	r7, ip, r9
   176be:	2100      	movs	r1, #0
   176c0:	4643      	mov	r3, r8
   176c2:	781e      	ldrb	r6, [r3, #0]
   176c4:	785d      	ldrb	r5, [r3, #1]
   176c6:	f006 06c0 	and.w	r6, r6, #192	; 0xc0
   176ca:	789c      	ldrb	r4, [r3, #2]
   176cc:	78da      	ldrb	r2, [r3, #3]
   176ce:	2e80      	cmp	r6, #128	; 0x80
   176d0:	f005 06c0 	and.w	r6, r5, #192	; 0xc0
   176d4:	bf08      	it	eq
   176d6:	3101      	addeq	r1, #1
   176d8:	2e80      	cmp	r6, #128	; 0x80
   176da:	f004 06c0 	and.w	r6, r4, #192	; 0xc0
   176de:	bf08      	it	eq
   176e0:	3101      	addeq	r1, #1
   176e2:	2e80      	cmp	r6, #128	; 0x80
   176e4:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   176e8:	bf08      	it	eq
   176ea:	3101      	addeq	r1, #1
   176ec:	2a80      	cmp	r2, #128	; 0x80
   176ee:	bf08      	it	eq
   176f0:	3101      	addeq	r1, #1
   176f2:	3304      	adds	r3, #4
   176f4:	3704      	adds	r7, #4
   176f6:	d1e4      	bne.n	176c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1de>
   176f8:	f1bc 0f00 	cmp.w	ip, #0
   176fc:	d017      	beq.n	1772e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   176fe:	781a      	ldrb	r2, [r3, #0]
   17700:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17704:	2a80      	cmp	r2, #128	; 0x80
   17706:	bf08      	it	eq
   17708:	3101      	addeq	r1, #1
   1770a:	f1bc 0f01 	cmp.w	ip, #1
   1770e:	d00e      	beq.n	1772e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17710:	785a      	ldrb	r2, [r3, #1]
   17712:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17716:	2a80      	cmp	r2, #128	; 0x80
   17718:	bf08      	it	eq
   1771a:	3101      	addeq	r1, #1
   1771c:	f1bc 0f02 	cmp.w	ip, #2
   17720:	d005      	beq.n	1772e <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x24a>
   17722:	789a      	ldrb	r2, [r3, #2]
   17724:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   17728:	2a80      	cmp	r2, #128	; 0x80
   1772a:	bf08      	it	eq
   1772c:	3101      	addeq	r1, #1
   1772e:	f89a 3020 	ldrb.w	r3, [sl, #32]
   17732:	eba1 0109 	sub.w	r1, r1, r9
   17736:	4401      	add	r1, r0
   17738:	2000      	movs	r0, #0
   1773a:	1eda      	subs	r2, r3, #3
   1773c:	bf18      	it	ne
   1773e:	461a      	movne	r2, r3
   17740:	460e      	mov	r6, r1
   17742:	e8df f002 	tbb	[pc, r2]
   17746:	0216      	.short	0x0216
   17748:	0213      	.short	0x0213
   1774a:	2600      	movs	r6, #0
   1774c:	4608      	mov	r0, r1
   1774e:	e010      	b.n	17772 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x28e>
   17750:	2a00      	cmp	r2, #0
   17752:	bf18      	it	ne
   17754:	454a      	cmpne	r2, r9
   17756:	d134      	bne.n	177c2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2de>
   17758:	4640      	mov	r0, r8
   1775a:	2800      	cmp	r0, #0
   1775c:	bf0c      	ite	eq
   1775e:	464a      	moveq	r2, r9
   17760:	4680      	movne	r8, r0
   17762:	f1be 0f01 	cmp.w	lr, #1
   17766:	f43f af8f 	beq.w	17688 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   1776a:	e738      	b.n	175de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>
   1776c:	0848      	lsrs	r0, r1, #1
   1776e:	3101      	adds	r1, #1
   17770:	084e      	lsrs	r6, r1, #1
   17772:	1c44      	adds	r4, r0, #1
   17774:	3c01      	subs	r4, #1
   17776:	d008      	beq.n	1778a <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2a6>
   17778:	e9da 0206 	ldrd	r0, r2, [sl, #24]
   1777c:	f8da 1004 	ldr.w	r1, [sl, #4]
   17780:	6912      	ldr	r2, [r2, #16]
   17782:	4790      	blx	r2
   17784:	2800      	cmp	r0, #0
   17786:	d0f5      	beq.n	17774 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x290>
   17788:	e013      	b.n	177b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1778a:	e9da 0106 	ldrd	r0, r1, [sl, #24]
   1778e:	464a      	mov	r2, r9
   17790:	68cb      	ldr	r3, [r1, #12]
   17792:	4641      	mov	r1, r8
   17794:	f8da 7004 	ldr.w	r7, [sl, #4]
   17798:	4798      	blx	r3
   1779a:	b950      	cbnz	r0, 177b2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ce>
   1779c:	e9da 4506 	ldrd	r4, r5, [sl, #24]
   177a0:	3601      	adds	r6, #1
   177a2:	3e01      	subs	r6, #1
   177a4:	d009      	beq.n	177ba <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2d6>
   177a6:	692a      	ldr	r2, [r5, #16]
   177a8:	4620      	mov	r0, r4
   177aa:	4639      	mov	r1, r7
   177ac:	4790      	blx	r2
   177ae:	2800      	cmp	r0, #0
   177b0:	d0f7      	beq.n	177a2 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2be>
   177b2:	2001      	movs	r0, #1
   177b4:	b001      	add	sp, #4
   177b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177ba:	2000      	movs	r0, #0
   177bc:	b001      	add	sp, #4
   177be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177c2:	454a      	cmp	r2, r9
   177c4:	d204      	bcs.n	177d0 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x2ec>
   177c6:	f918 0002 	ldrsb.w	r0, [r8, r2]
   177ca:	f110 0f40 	cmn.w	r0, #64	; 0x40
   177ce:	dac3      	bge.n	17758 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x274>
   177d0:	2000      	movs	r0, #0
   177d2:	2200      	movs	r2, #0
   177d4:	2800      	cmp	r0, #0
   177d6:	bf0c      	ite	eq
   177d8:	464a      	moveq	r2, r9
   177da:	4680      	movne	r8, r0
   177dc:	f1be 0f01 	cmp.w	lr, #1
   177e0:	f43f af52 	beq.w	17688 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0x1a4>
   177e4:	e6fb      	b.n	175de <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE+0xfa>

000177e6 <_ZN4core3fmt9Formatter15debug_lower_hex17hac429f2fab63058eE>:
   177e6:	7800      	ldrb	r0, [r0, #0]
   177e8:	f3c0 1000 	ubfx	r0, r0, #4, #1
   177ec:	4770      	bx	lr

000177ee <_ZN4core3fmt9Formatter15debug_upper_hex17ha3d9dc61ebdc705aE>:
   177ee:	7800      	ldrb	r0, [r0, #0]
   177f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
   177f4:	4770      	bx	lr

000177f6 <_ZN4core3fmt9Formatter11debug_tuple17h5dc93811435155bfE>:
   177f6:	b570      	push	{r4, r5, r6, lr}
   177f8:	460d      	mov	r5, r1
   177fa:	4606      	mov	r6, r0
   177fc:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   17800:	461c      	mov	r4, r3
   17802:	68cb      	ldr	r3, [r1, #12]
   17804:	4611      	mov	r1, r2
   17806:	4622      	mov	r2, r4
   17808:	4798      	blx	r3
   1780a:	7230      	strb	r0, [r6, #8]
   1780c:	fab4 f084 	clz	r0, r4
   17810:	0940      	lsrs	r0, r0, #5
   17812:	7270      	strb	r0, [r6, #9]
   17814:	2000      	movs	r0, #0
   17816:	e9c6 5000 	strd	r5, r0, [r6]
   1781a:	bd70      	pop	{r4, r5, r6, pc}

0001781c <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E>:
   1781c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17820:	b085      	sub	sp, #20
   17822:	460c      	mov	r4, r1
   17824:	4605      	mov	r5, r0
   17826:	e9d1 0106 	ldrd	r0, r1, [r1, #24]
   1782a:	690a      	ldr	r2, [r1, #16]
   1782c:	2127      	movs	r1, #39	; 0x27
   1782e:	4790      	blx	r2
   17830:	b118      	cbz	r0, 1783a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x1e>
   17832:	2001      	movs	r0, #1
   17834:	b005      	add	sp, #20
   17836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1783a:	6829      	ldr	r1, [r5, #0]
   1783c:	a801      	add	r0, sp, #4
   1783e:	2201      	movs	r2, #1
   17840:	f7ff f85c 	bl	168fc <_ZN4core4char7methods22_$LT$impl$u20$char$GT$16escape_debug_ext17hd972b61bdbb4a5b2E>
   17844:	e9dd 7501 	ldrd	r7, r5, [sp, #4]
   17848:	f04f 091c 	mov.w	r9, #28
   1784c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   17850:	f5b5 1f88 	cmp.w	r5, #1114112	; 0x110000
   17854:	f89d 6010 	ldrb.w	r6, [sp, #16]
   17858:	d139      	bne.n	178ce <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xb2>
   1785a:	f44f 1588 	mov.w	r5, #1114112	; 0x110000
   1785e:	2f02      	cmp	r7, #2
   17860:	f0c0 806b 	bcc.w	1793a <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x11e>
   17864:	d00c      	beq.n	17880 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x64>
   17866:	b2f0      	uxtb	r0, r6
   17868:	2604      	movs	r6, #4
   1786a:	2703      	movs	r7, #3
   1786c:	215c      	movs	r1, #92	; 0x5c
   1786e:	e8df f000 	tbb	[pc, r0]
   17872:	0364      	.short	0x0364
   17874:	09242010 	.word	0x09242010
   17878:	2600      	movs	r6, #0
   1787a:	2703      	movs	r7, #3
   1787c:	217d      	movs	r1, #125	; 0x7d
   1787e:	e001      	b.n	17884 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   17880:	2701      	movs	r7, #1
   17882:	215c      	movs	r1, #92	; 0x5c
   17884:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   17888:	6912      	ldr	r2, [r2, #16]
   1788a:	4790      	blx	r2
   1788c:	2800      	cmp	r0, #0
   1788e:	d0e6      	beq.n	1785e <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x42>
   17890:	e7cf      	b.n	17832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   17892:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17896:	2602      	movs	r6, #2
   17898:	2703      	movs	r7, #3
   1789a:	f1b8 0f00 	cmp.w	r8, #0
   1789e:	fa25 f100 	lsr.w	r1, r5, r0
   178a2:	bf08      	it	eq
   178a4:	2601      	moveq	r6, #1
   178a6:	bf18      	it	ne
   178a8:	f1a8 0801 	subne.w	r8, r8, #1
   178ac:	f367 111f 	bfi	r1, r7, #4, #28
   178b0:	e7e8      	b.n	17884 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   178b2:	2602      	movs	r6, #2
   178b4:	2703      	movs	r7, #3
   178b6:	217b      	movs	r1, #123	; 0x7b
   178b8:	e7e4      	b.n	17884 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   178ba:	2703      	movs	r7, #3
   178bc:	2175      	movs	r1, #117	; 0x75
   178be:	2603      	movs	r6, #3
   178c0:	e7e0      	b.n	17884 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x68>
   178c2:	e9d4 0206 	ldrd	r0, r2, [r4, #24]
   178c6:	6912      	ldr	r2, [r2, #16]
   178c8:	4790      	blx	r2
   178ca:	2800      	cmp	r0, #0
   178cc:	d1b1      	bne.n	17832 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0x16>
   178ce:	4638      	mov	r0, r7
   178d0:	2701      	movs	r7, #1
   178d2:	215c      	movs	r1, #92	; 0x5c
   178d4:	e8df f000 	tbb	[pc, r0]
   178d8:	06020331 	.word	0x06020331
   178dc:	e7f1      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178de:	2700      	movs	r7, #0
   178e0:	4629      	mov	r1, r5
   178e2:	e7ee      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178e4:	b2f0      	uxtb	r0, r6
   178e6:	2604      	movs	r6, #4
   178e8:	2703      	movs	r7, #3
   178ea:	215c      	movs	r1, #92	; 0x5c
   178ec:	e8df f000 	tbb	[pc, r0]
   178f0:	1d080425 	.word	0x1d080425
   178f4:	0321      	.short	0x0321
   178f6:	e7e4      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   178f8:	2600      	movs	r6, #0
   178fa:	2703      	movs	r7, #3
   178fc:	217d      	movs	r1, #125	; 0x7d
   178fe:	e7e0      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17900:	ea09 0088 	and.w	r0, r9, r8, lsl #2
   17904:	2602      	movs	r6, #2
   17906:	2703      	movs	r7, #3
   17908:	fa25 f000 	lsr.w	r0, r5, r0
   1790c:	f000 000f 	and.w	r0, r0, #15
   17910:	f100 0157 	add.w	r1, r0, #87	; 0x57
   17914:	280a      	cmp	r0, #10
   17916:	bf38      	it	cc
   17918:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1791c:	f1b8 0f00 	cmp.w	r8, #0
   17920:	bf0c      	ite	eq
   17922:	2601      	moveq	r6, #1
   17924:	f1a8 0801 	subne.w	r8, r8, #1
   17928:	e7cb      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1792a:	2602      	movs	r6, #2
   1792c:	2703      	movs	r7, #3
   1792e:	217b      	movs	r1, #123	; 0x7b
   17930:	e7c7      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   17932:	2703      	movs	r7, #3
   17934:	2175      	movs	r1, #117	; 0x75
   17936:	2603      	movs	r6, #3
   17938:	e7c3      	b.n	178c2 <_ZN41_$LT$char$u20$as$u20$core..fmt..Debug$GT$3fmt17h1d9e4322c6423016E+0xa6>
   1793a:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
   1793e:	690a      	ldr	r2, [r1, #16]
   17940:	2127      	movs	r1, #39	; 0x27
   17942:	b005      	add	sp, #20
   17944:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17948:	4710      	bx	r2

0001794a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>:
   1794a:	b08c      	sub	sp, #48	; 0x30
   1794c:	e9cd 0100 	strd	r0, r1, [sp]
   17950:	2002      	movs	r0, #2
   17952:	a908      	add	r1, sp, #32
   17954:	9007      	str	r0, [sp, #28]
   17956:	9106      	str	r1, [sp, #24]
   17958:	2100      	movs	r1, #0
   1795a:	9105      	str	r1, [sp, #20]
   1795c:	e9cd 0103 	strd	r0, r1, [sp, #12]
   17960:	f240 1028 	movw	r0, #296	; 0x128
   17964:	f2c0 0002 	movt	r0, #2
   17968:	a901      	add	r1, sp, #4
   1796a:	9002      	str	r0, [sp, #8]
   1796c:	f648 0025 	movw	r0, #34853	; 0x8825
   17970:	f2c0 0001 	movt	r0, #1
   17974:	900b      	str	r0, [sp, #44]	; 0x2c
   17976:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   1797a:	4668      	mov	r0, sp
   1797c:	f240 1138 	movw	r1, #312	; 0x138
   17980:	9008      	str	r0, [sp, #32]
   17982:	a802      	add	r0, sp, #8
   17984:	f2c0 0102 	movt	r1, #2
   17988:	f7ff f8c2 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   1798c:	defe      	udf	#254	; 0xfe

0001798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>:
   1798e:	b08c      	sub	sp, #48	; 0x30
   17990:	e9cd 0100 	strd	r0, r1, [sp]
   17994:	2002      	movs	r0, #2
   17996:	a908      	add	r1, sp, #32
   17998:	9007      	str	r0, [sp, #28]
   1799a:	9106      	str	r1, [sp, #24]
   1799c:	2100      	movs	r1, #0
   1799e:	9105      	str	r1, [sp, #20]
   179a0:	e9cd 0103 	strd	r0, r1, [sp, #12]
   179a4:	f240 106c 	movw	r0, #364	; 0x16c
   179a8:	f2c0 0002 	movt	r0, #2
   179ac:	a901      	add	r1, sp, #4
   179ae:	9002      	str	r0, [sp, #8]
   179b0:	f648 0025 	movw	r0, #34853	; 0x8825
   179b4:	f2c0 0001 	movt	r0, #1
   179b8:	900b      	str	r0, [sp, #44]	; 0x2c
   179ba:	e9cd 0109 	strd	r0, r1, [sp, #36]	; 0x24
   179be:	4668      	mov	r0, sp
   179c0:	f240 117c 	movw	r1, #380	; 0x17c
   179c4:	9008      	str	r0, [sp, #32]
   179c6:	a802      	add	r0, sp, #8
   179c8:	f2c0 0102 	movt	r1, #2
   179cc:	f7ff f8a0 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   179d0:	defe      	udf	#254	; 0xfe

000179d2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E>:
   179d2:	b09a      	sub	sp, #104	; 0x68
   179d4:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   179d8:	e9cd 2300 	strd	r2, r3, [sp]
   179dc:	d802      	bhi.n	179e4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12>
   179de:	2501      	movs	r5, #1
   179e0:	468c      	mov	ip, r1
   179e2:	e03e      	b.n	17a62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   179e4:	f1c1 0e00 	rsb	lr, r1, #0
   179e8:	f44f 7c80 	mov.w	ip, #256	; 0x100
   179ec:	458c      	cmp	ip, r1
   179ee:	d205      	bcs.n	179fc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2a>
   179f0:	f910 400c 	ldrsb.w	r4, [r0, ip]
   179f4:	f114 0f41 	cmn.w	r4, #65	; 0x41
   179f8:	f300 8108 	bgt.w	17c0c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23a>
   179fc:	eb0e 040c 	add.w	r4, lr, ip
   17a00:	f1ac 0601 	sub.w	r6, ip, #1
   17a04:	2c01      	cmp	r4, #1
   17a06:	d02a      	beq.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a08:	428e      	cmp	r6, r1
   17a0a:	d206      	bcs.n	17a1a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x48>
   17a0c:	eb00 050c 	add.w	r5, r0, ip
   17a10:	f915 5c01 	ldrsb.w	r5, [r5, #-1]
   17a14:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17a18:	dc21      	bgt.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a1a:	f1ac 0602 	sub.w	r6, ip, #2
   17a1e:	2c02      	cmp	r4, #2
   17a20:	d01d      	beq.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a22:	428e      	cmp	r6, r1
   17a24:	d206      	bcs.n	17a34 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x62>
   17a26:	eb00 050c 	add.w	r5, r0, ip
   17a2a:	f915 5c02 	ldrsb.w	r5, [r5, #-2]
   17a2e:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17a32:	dc14      	bgt.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a34:	f1ac 0603 	sub.w	r6, ip, #3
   17a38:	2c03      	cmp	r4, #3
   17a3a:	d010      	beq.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a3c:	428e      	cmp	r6, r1
   17a3e:	d206      	bcs.n	17a4e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x7c>
   17a40:	eb00 050c 	add.w	r5, r0, ip
   17a44:	f915 5c03 	ldrsb.w	r5, [r5, #-3]
   17a48:	f115 0f41 	cmn.w	r5, #65	; 0x41
   17a4c:	dc07      	bgt.n	17a5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x8c>
   17a4e:	f1bc 0c04 	subs.w	ip, ip, #4
   17a52:	f04f 0500 	mov.w	r5, #0
   17a56:	d004      	beq.n	17a62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17a58:	2c04      	cmp	r4, #4
   17a5a:	d1c7      	bne.n	179ec <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1a>
   17a5c:	e001      	b.n	17a62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17a5e:	2500      	movs	r5, #0
   17a60:	46b4      	mov	ip, r6
   17a62:	2605      	movs	r6, #5
   17a64:	2d00      	cmp	r5, #0
   17a66:	f240 254a 	movw	r5, #586	; 0x24a
   17a6a:	e9cd 0c02 	strd	r0, ip, [sp, #8]
   17a6e:	bf18      	it	ne
   17a70:	2600      	movne	r6, #0
   17a72:	9605      	str	r6, [sp, #20]
   17a74:	f64f 5694 	movw	r6, #64916	; 0xfd94
   17a78:	f2c0 0502 	movt	r5, #2
   17a7c:	f2c0 0601 	movt	r6, #1
   17a80:	bf18      	it	ne
   17a82:	4635      	movne	r5, r6
   17a84:	428a      	cmp	r2, r1
   17a86:	9504      	str	r5, [sp, #16]
   17a88:	bf98      	it	ls
   17a8a:	428b      	cmpls	r3, r1
   17a8c:	d92a      	bls.n	17ae4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x112>
   17a8e:	428a      	cmp	r2, r1
   17a90:	f04f 0003 	mov.w	r0, #3
   17a94:	a910      	add	r1, sp, #64	; 0x40
   17a96:	bf88      	it	hi
   17a98:	4613      	movhi	r3, r2
   17a9a:	900f      	str	r0, [sp, #60]	; 0x3c
   17a9c:	910e      	str	r1, [sp, #56]	; 0x38
   17a9e:	2100      	movs	r1, #0
   17aa0:	910d      	str	r1, [sp, #52]	; 0x34
   17aa2:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17aa6:	f240 2070 	movw	r0, #624	; 0x270
   17aaa:	f2c0 0002 	movt	r0, #2
   17aae:	a904      	add	r1, sp, #16
   17ab0:	900a      	str	r0, [sp, #40]	; 0x28
   17ab2:	f648 1013 	movw	r0, #35091	; 0x8913
   17ab6:	f2c0 0001 	movt	r0, #1
   17aba:	9308      	str	r3, [sp, #32]
   17abc:	9015      	str	r0, [sp, #84]	; 0x54
   17abe:	e9cd 0113 	strd	r0, r1, [sp, #76]	; 0x4c
   17ac2:	a802      	add	r0, sp, #8
   17ac4:	f240 2188 	movw	r1, #648	; 0x288
   17ac8:	9012      	str	r0, [sp, #72]	; 0x48
   17aca:	f648 0025 	movw	r0, #34853	; 0x8825
   17ace:	f2c0 0102 	movt	r1, #2
   17ad2:	f2c0 0001 	movt	r0, #1
   17ad6:	9011      	str	r0, [sp, #68]	; 0x44
   17ad8:	a808      	add	r0, sp, #32
   17ada:	9010      	str	r0, [sp, #64]	; 0x40
   17adc:	a80a      	add	r0, sp, #40	; 0x28
   17ade:	f7ff f817 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17ae2:	defe      	udf	#254	; 0xfe
   17ae4:	429a      	cmp	r2, r3
   17ae6:	f200 80f1 	bhi.w	17ccc <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x2fa>
   17aea:	2a00      	cmp	r2, #0
   17aec:	bf18      	it	ne
   17aee:	4291      	cmpne	r1, r2
   17af0:	d109      	bne.n	17b06 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x134>
   17af2:	461a      	mov	r2, r3
   17af4:	2a00      	cmp	r2, #0
   17af6:	9206      	str	r2, [sp, #24]
   17af8:	bf18      	it	ne
   17afa:	428a      	cmpne	r2, r1
   17afc:	d10e      	bne.n	17b1c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x14a>
   17afe:	4613      	mov	r3, r2
   17b00:	428b      	cmp	r3, r1
   17b02:	d047      	beq.n	17b94 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17b04:	e052      	b.n	17bac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17b06:	d9f5      	bls.n	17af4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x122>
   17b08:	5686      	ldrsb	r6, [r0, r2]
   17b0a:	f116 0f40 	cmn.w	r6, #64	; 0x40
   17b0e:	bfa8      	it	ge
   17b10:	461a      	movge	r2, r3
   17b12:	2a00      	cmp	r2, #0
   17b14:	9206      	str	r2, [sp, #24]
   17b16:	bf18      	it	ne
   17b18:	428a      	cmpne	r2, r1
   17b1a:	d0f0      	beq.n	17afe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17b1c:	f1a0 0c01 	sub.w	ip, r0, #1
   17b20:	f101 0e02 	add.w	lr, r1, #2
   17b24:	1ccc      	adds	r4, r1, #3
   17b26:	1c4d      	adds	r5, r1, #1
   17b28:	1d0e      	adds	r6, r1, #4
   17b2a:	428a      	cmp	r2, r1
   17b2c:	d206      	bcs.n	17b3c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x16a>
   17b2e:	eb0c 0302 	add.w	r3, ip, r2
   17b32:	f993 3001 	ldrsb.w	r3, [r3, #1]
   17b36:	f113 0f41 	cmn.w	r3, #65	; 0x41
   17b3a:	dce0      	bgt.n	17afe <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x12c>
   17b3c:	1e53      	subs	r3, r2, #1
   17b3e:	bf18      	it	ne
   17b40:	4295      	cmpne	r5, r2
   17b42:	d025      	beq.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b44:	428b      	cmp	r3, r1
   17b46:	d204      	bcs.n	17b52 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x180>
   17b48:	f91c 7002 	ldrsb.w	r7, [ip, r2]
   17b4c:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17b50:	dc1e      	bgt.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b52:	1e93      	subs	r3, r2, #2
   17b54:	bf18      	it	ne
   17b56:	4596      	cmpne	lr, r2
   17b58:	d01a      	beq.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b5a:	428b      	cmp	r3, r1
   17b5c:	d206      	bcs.n	17b6c <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x19a>
   17b5e:	eb0c 0702 	add.w	r7, ip, r2
   17b62:	f917 7c01 	ldrsb.w	r7, [r7, #-1]
   17b66:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17b6a:	dc11      	bgt.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b6c:	1ed3      	subs	r3, r2, #3
   17b6e:	bf18      	it	ne
   17b70:	4294      	cmpne	r4, r2
   17b72:	d00d      	beq.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b74:	428b      	cmp	r3, r1
   17b76:	d206      	bcs.n	17b86 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1b4>
   17b78:	eb0c 0702 	add.w	r7, ip, r2
   17b7c:	f917 7c02 	ldrsb.w	r7, [r7, #-2]
   17b80:	f117 0f41 	cmn.w	r7, #65	; 0x41
   17b84:	dc04      	bgt.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b86:	1f13      	subs	r3, r2, #4
   17b88:	d002      	beq.n	17b90 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1be>
   17b8a:	4296      	cmp	r6, r2
   17b8c:	461a      	mov	r2, r3
   17b8e:	d1cc      	bne.n	17b2a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x158>
   17b90:	428b      	cmp	r3, r1
   17b92:	d10b      	bne.n	17bac <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1da>
   17b94:	f64f 7030 	movw	r0, #65328	; 0xff30
   17b98:	f240 22d8 	movw	r2, #728	; 0x2d8
   17b9c:	f2c0 0001 	movt	r0, #1
   17ba0:	f2c0 0202 	movt	r2, #2
   17ba4:	212b      	movs	r1, #43	; 0x2b
   17ba6:	f7fe ff7d 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17baa:	defe      	udf	#254	; 0xfe
   17bac:	18c5      	adds	r5, r0, r3
   17bae:	462e      	mov	r6, r5
   17bb0:	f916 4b01 	ldrsb.w	r4, [r6], #1
   17bb4:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
   17bb8:	b2e2      	uxtb	r2, r4
   17bba:	dd02      	ble.n	17bc2 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1f0>
   17bbc:	9207      	str	r2, [sp, #28]
   17bbe:	2101      	movs	r1, #1
   17bc0:	e04d      	b.n	17c5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17bc2:	4408      	add	r0, r1
   17bc4:	4286      	cmp	r6, r0
   17bc6:	d10b      	bne.n	17be0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x20e>
   17bc8:	2500      	movs	r5, #0
   17bca:	4606      	mov	r6, r0
   17bcc:	f002 011f 	and.w	r1, r2, #31
   17bd0:	2adf      	cmp	r2, #223	; 0xdf
   17bd2:	d80d      	bhi.n	17bf0 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x21e>
   17bd4:	ea45 1081 	orr.w	r0, r5, r1, lsl #6
   17bd8:	2880      	cmp	r0, #128	; 0x80
   17bda:	9007      	str	r0, [sp, #28]
   17bdc:	d333      	bcc.n	17c46 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17bde:	e034      	b.n	17c4a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17be0:	7869      	ldrb	r1, [r5, #1]
   17be2:	1cae      	adds	r6, r5, #2
   17be4:	f001 053f 	and.w	r5, r1, #63	; 0x3f
   17be8:	f002 011f 	and.w	r1, r2, #31
   17bec:	2adf      	cmp	r2, #223	; 0xdf
   17bee:	d9f1      	bls.n	17bd4 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x202>
   17bf0:	4286      	cmp	r6, r0
   17bf2:	d10d      	bne.n	17c10 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x23e>
   17bf4:	2400      	movs	r4, #0
   17bf6:	4606      	mov	r6, r0
   17bf8:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17bfc:	2af0      	cmp	r2, #240	; 0xf0
   17bfe:	d20f      	bcs.n	17c20 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x24e>
   17c00:	ea45 3001 	orr.w	r0, r5, r1, lsl #12
   17c04:	2880      	cmp	r0, #128	; 0x80
   17c06:	9007      	str	r0, [sp, #28]
   17c08:	d31d      	bcc.n	17c46 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x274>
   17c0a:	e01e      	b.n	17c4a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17c0c:	2500      	movs	r5, #0
   17c0e:	e728      	b.n	17a62 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x90>
   17c10:	f816 4b01 	ldrb.w	r4, [r6], #1
   17c14:	f004 043f 	and.w	r4, r4, #63	; 0x3f
   17c18:	ea44 1585 	orr.w	r5, r4, r5, lsl #6
   17c1c:	2af0      	cmp	r2, #240	; 0xf0
   17c1e:	d3ef      	bcc.n	17c00 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x22e>
   17c20:	f44f 12e0 	mov.w	r2, #1835008	; 0x1c0000
   17c24:	ea02 4181 	and.w	r1, r2, r1, lsl #18
   17c28:	4286      	cmp	r6, r0
   17c2a:	bf1a      	itte	ne
   17c2c:	7830      	ldrbne	r0, [r6, #0]
   17c2e:	f000 003f 	andne.w	r0, r0, #63	; 0x3f
   17c32:	2000      	moveq	r0, #0
   17c34:	ea41 1185 	orr.w	r1, r1, r5, lsl #6
   17c38:	4408      	add	r0, r1
   17c3a:	f5b0 1f88 	cmp.w	r0, #1114112	; 0x110000
   17c3e:	d0a9      	beq.n	17b94 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x1c2>
   17c40:	2880      	cmp	r0, #128	; 0x80
   17c42:	9007      	str	r0, [sp, #28]
   17c44:	d201      	bcs.n	17c4a <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x278>
   17c46:	2101      	movs	r1, #1
   17c48:	e009      	b.n	17c5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17c4a:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   17c4e:	d201      	bcs.n	17c54 <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x282>
   17c50:	2102      	movs	r1, #2
   17c52:	e004      	b.n	17c5e <_ZN4core3str16slice_error_fail17h232f9181d55b3da9E+0x28c>
   17c54:	2104      	movs	r1, #4
   17c56:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17c5a:	bf38      	it	cc
   17c5c:	2103      	movcc	r1, #3
   17c5e:	4419      	add	r1, r3
   17c60:	aa10      	add	r2, sp, #64	; 0x40
   17c62:	a808      	add	r0, sp, #32
   17c64:	e9cd 3108 	strd	r3, r1, [sp, #32]
   17c68:	2105      	movs	r1, #5
   17c6a:	910f      	str	r1, [sp, #60]	; 0x3c
   17c6c:	920e      	str	r2, [sp, #56]	; 0x38
   17c6e:	2200      	movs	r2, #0
   17c70:	920d      	str	r2, [sp, #52]	; 0x34
   17c72:	e9cd 120b 	strd	r1, r2, [sp, #44]	; 0x2c
   17c76:	f240 3114 	movw	r1, #788	; 0x314
   17c7a:	f2c0 0102 	movt	r1, #2
   17c7e:	aa04      	add	r2, sp, #16
   17c80:	910a      	str	r1, [sp, #40]	; 0x28
   17c82:	f648 1113 	movw	r1, #35091	; 0x8913
   17c86:	f2c0 0101 	movt	r1, #1
   17c8a:	9119      	str	r1, [sp, #100]	; 0x64
   17c8c:	e9cd 1217 	strd	r1, r2, [sp, #92]	; 0x5c
   17c90:	a902      	add	r1, sp, #8
   17c92:	9116      	str	r1, [sp, #88]	; 0x58
   17c94:	f646 019b 	movw	r1, #26779	; 0x689b
   17c98:	f2c0 0101 	movt	r1, #1
   17c9c:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   17ca0:	f647 001d 	movw	r0, #30749	; 0x781d
   17ca4:	f2c0 0001 	movt	r0, #1
   17ca8:	f240 313c 	movw	r1, #828	; 0x33c
   17cac:	9013      	str	r0, [sp, #76]	; 0x4c
   17cae:	a807      	add	r0, sp, #28
   17cb0:	9012      	str	r0, [sp, #72]	; 0x48
   17cb2:	f648 0025 	movw	r0, #34853	; 0x8825
   17cb6:	f2c0 0001 	movt	r0, #1
   17cba:	f2c0 0102 	movt	r1, #2
   17cbe:	9011      	str	r0, [sp, #68]	; 0x44
   17cc0:	a806      	add	r0, sp, #24
   17cc2:	9010      	str	r0, [sp, #64]	; 0x40
   17cc4:	a80a      	add	r0, sp, #40	; 0x28
   17cc6:	f7fe ff23 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17cca:	defe      	udf	#254	; 0xfe
   17ccc:	2004      	movs	r0, #4
   17cce:	a910      	add	r1, sp, #64	; 0x40
   17cd0:	900f      	str	r0, [sp, #60]	; 0x3c
   17cd2:	910e      	str	r1, [sp, #56]	; 0x38
   17cd4:	2100      	movs	r1, #0
   17cd6:	910d      	str	r1, [sp, #52]	; 0x34
   17cd8:	e9cd 010b 	strd	r0, r1, [sp, #44]	; 0x2c
   17cdc:	f240 20a8 	movw	r0, #680	; 0x2a8
   17ce0:	f2c0 0002 	movt	r0, #2
   17ce4:	a904      	add	r1, sp, #16
   17ce6:	900a      	str	r0, [sp, #40]	; 0x28
   17ce8:	f648 1013 	movw	r0, #35091	; 0x8913
   17cec:	f2c0 0001 	movt	r0, #1
   17cf0:	9017      	str	r0, [sp, #92]	; 0x5c
   17cf2:	e9cd 0115 	strd	r0, r1, [sp, #84]	; 0x54
   17cf6:	a802      	add	r0, sp, #8
   17cf8:	9014      	str	r0, [sp, #80]	; 0x50
   17cfa:	f648 0025 	movw	r0, #34853	; 0x8825
   17cfe:	a901      	add	r1, sp, #4
   17d00:	f2c0 0001 	movt	r0, #1
   17d04:	9013      	str	r0, [sp, #76]	; 0x4c
   17d06:	e9cd 0111 	strd	r0, r1, [sp, #68]	; 0x44
   17d0a:	f240 21c8 	movw	r1, #712	; 0x2c8
   17d0e:	4668      	mov	r0, sp
   17d10:	f2c0 0102 	movt	r1, #2
   17d14:	9010      	str	r0, [sp, #64]	; 0x40
   17d16:	a80a      	add	r0, sp, #40	; 0x28
   17d18:	f7fe fefa 	bl	16b10 <_ZN4core9panicking9panic_fmt17hc4f61a3091cbab92E>
   17d1c:	defe      	udf	#254	; 0xfe

00017d1e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE>:
   17d1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17d22:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
   17d26:	d270      	bcs.n	17e0a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xec>
   17d28:	f240 3e5c 	movw	lr, #860	; 0x35c
   17d2c:	f240 38ae 	movw	r8, #942	; 0x3ae
   17d30:	fa1f f980 	uxth.w	r9, r0
   17d34:	f2c0 0e02 	movt	lr, #2
   17d38:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17d3c:	f04f 0a00 	mov.w	sl, #0
   17d40:	f2c0 0802 	movt	r8, #2
   17d44:	4675      	mov	r5, lr
   17d46:	786e      	ldrb	r6, [r5, #1]
   17d48:	4652      	mov	r2, sl
   17d4a:	782b      	ldrb	r3, [r5, #0]
   17d4c:	3502      	adds	r5, #2
   17d4e:	44b2      	add	sl, r6
   17d50:	4563      	cmp	r3, ip
   17d52:	d129      	bne.n	17da8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x8a>
   17d54:	4592      	cmp	sl, r2
   17d56:	f0c0 8112 	bcc.w	17f7e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17d5a:	ea4f 035a 	mov.w	r3, sl, lsr #1
   17d5e:	2b92      	cmp	r3, #146	; 0x92
   17d60:	f200 8112 	bhi.w	17f88 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x26a>
   17d64:	eb08 0302 	add.w	r3, r8, r2
   17d68:	199a      	adds	r2, r3, r6
   17d6a:	b31e      	cbz	r6, 17db4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d6c:	461f      	mov	r7, r3
   17d6e:	b2c4      	uxtb	r4, r0
   17d70:	f817 1b01 	ldrb.w	r1, [r7], #1
   17d74:	42a1      	cmp	r1, r4
   17d76:	f000 80b6 	beq.w	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d7a:	4297      	cmp	r7, r2
   17d7c:	d01a      	beq.n	17db4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d7e:	7859      	ldrb	r1, [r3, #1]
   17d80:	42a1      	cmp	r1, r4
   17d82:	f000 80b0 	beq.w	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d86:	1c99      	adds	r1, r3, #2
   17d88:	4291      	cmp	r1, r2
   17d8a:	d013      	beq.n	17db4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d8c:	7899      	ldrb	r1, [r3, #2]
   17d8e:	42a1      	cmp	r1, r4
   17d90:	f000 80a9 	beq.w	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17d94:	1cd9      	adds	r1, r3, #3
   17d96:	4291      	cmp	r1, r2
   17d98:	d00c      	beq.n	17db4 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x96>
   17d9a:	1d19      	adds	r1, r3, #4
   17d9c:	78db      	ldrb	r3, [r3, #3]
   17d9e:	3e04      	subs	r6, #4
   17da0:	42a3      	cmp	r3, r4
   17da2:	460b      	mov	r3, r1
   17da4:	d1e1      	bne.n	17d6a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x4c>
   17da6:	e09e      	b.n	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17da8:	d808      	bhi.n	17dbc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17daa:	f10e 0252 	add.w	r2, lr, #82	; 0x52
   17dae:	4295      	cmp	r5, r2
   17db0:	d1c9      	bne.n	17d46 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17db2:	e003      	b.n	17dbc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x9e>
   17db4:	f10e 0152 	add.w	r1, lr, #82	; 0x52
   17db8:	428d      	cmp	r5, r1
   17dba:	d1c4      	bne.n	17d46 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x28>
   17dbc:	f240 45d3 	movw	r5, #1235	; 0x4d3
   17dc0:	2101      	movs	r1, #1
   17dc2:	f2c0 0502 	movt	r5, #2
   17dc6:	4628      	mov	r0, r5
   17dc8:	4602      	mov	r2, r0
   17dca:	f812 7b01 	ldrb.w	r7, [r2], #1
   17dce:	b27e      	sxtb	r6, r7
   17dd0:	2e00      	cmp	r6, #0
   17dd2:	d404      	bmi.n	17dde <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xc0>
   17dd4:	4610      	mov	r0, r2
   17dd6:	ebb9 0907 	subs.w	r9, r9, r7
   17dda:	d50f      	bpl.n	17dfc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xde>
   17ddc:	e0bd      	b.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17dde:	f505 739d 	add.w	r3, r5, #314	; 0x13a
   17de2:	429a      	cmp	r2, r3
   17de4:	f000 80db 	beq.w	17f9e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17de8:	7842      	ldrb	r2, [r0, #1]
   17dea:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17dee:	3002      	adds	r0, #2
   17df0:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17df4:	ebb9 0907 	subs.w	r9, r9, r7
   17df8:	f100 80af 	bmi.w	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17dfc:	f505 729d 	add.w	r2, r5, #314	; 0x13a
   17e00:	f081 0101 	eor.w	r1, r1, #1
   17e04:	4290      	cmp	r0, r2
   17e06:	d1df      	bne.n	17dc8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0xaa>
   17e08:	e0a7      	b.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17e0a:	f5b0 3f00 	cmp.w	r0, #131072	; 0x20000
   17e0e:	d26f      	bcs.n	17ef0 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1d2>
   17e10:	f240 6e0d 	movw	lr, #1549	; 0x60d
   17e14:	f240 6853 	movw	r8, #1619	; 0x653
   17e18:	fa1f f980 	uxth.w	r9, r0
   17e1c:	f2c0 0e02 	movt	lr, #2
   17e20:	ea4f 2c19 	mov.w	ip, r9, lsr #8
   17e24:	f04f 0a00 	mov.w	sl, #0
   17e28:	f2c0 0802 	movt	r8, #2
   17e2c:	4675      	mov	r5, lr
   17e2e:	786e      	ldrb	r6, [r5, #1]
   17e30:	4652      	mov	r2, sl
   17e32:	782b      	ldrb	r3, [r5, #0]
   17e34:	3502      	adds	r5, #2
   17e36:	44b2      	add	sl, r6
   17e38:	4563      	cmp	r3, ip
   17e3a:	d125      	bne.n	17e88 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x16a>
   17e3c:	4592      	cmp	sl, r2
   17e3e:	f0c0 809e 	bcc.w	17f7e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x260>
   17e42:	f1ba 0fa6 	cmp.w	sl, #166	; 0xa6
   17e46:	f200 80a5 	bhi.w	17f94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x276>
   17e4a:	eb08 0302 	add.w	r3, r8, r2
   17e4e:	199a      	adds	r2, r3, r6
   17e50:	b306      	cbz	r6, 17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17e52:	461f      	mov	r7, r3
   17e54:	b2c4      	uxtb	r4, r0
   17e56:	f817 1b01 	ldrb.w	r1, [r7], #1
   17e5a:	42a1      	cmp	r1, r4
   17e5c:	d043      	beq.n	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e5e:	4297      	cmp	r7, r2
   17e60:	d018      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17e62:	7859      	ldrb	r1, [r3, #1]
   17e64:	42a1      	cmp	r1, r4
   17e66:	d03e      	beq.n	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e68:	1c99      	adds	r1, r3, #2
   17e6a:	4291      	cmp	r1, r2
   17e6c:	d012      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17e6e:	7899      	ldrb	r1, [r3, #2]
   17e70:	42a1      	cmp	r1, r4
   17e72:	d038      	beq.n	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e74:	1cd9      	adds	r1, r3, #3
   17e76:	4291      	cmp	r1, r2
   17e78:	d00c      	beq.n	17e94 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x176>
   17e7a:	1d19      	adds	r1, r3, #4
   17e7c:	78db      	ldrb	r3, [r3, #3]
   17e7e:	3e04      	subs	r6, #4
   17e80:	42a3      	cmp	r3, r4
   17e82:	460b      	mov	r3, r1
   17e84:	d1e4      	bne.n	17e50 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x132>
   17e86:	e02e      	b.n	17ee6 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1c8>
   17e88:	d808      	bhi.n	17e9c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17e8a:	f10e 0246 	add.w	r2, lr, #70	; 0x46
   17e8e:	4295      	cmp	r5, r2
   17e90:	d1cd      	bne.n	17e2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17e92:	e003      	b.n	17e9c <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x17e>
   17e94:	f10e 0146 	add.w	r1, lr, #70	; 0x46
   17e98:	428d      	cmp	r5, r1
   17e9a:	d1c8      	bne.n	17e2e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x110>
   17e9c:	f240 65f9 	movw	r5, #1785	; 0x6f9
   17ea0:	2101      	movs	r1, #1
   17ea2:	f2c0 0502 	movt	r5, #2
   17ea6:	4628      	mov	r0, r5
   17ea8:	4602      	mov	r2, r0
   17eaa:	f812 7b01 	ldrb.w	r7, [r2], #1
   17eae:	b27e      	sxtb	r6, r7
   17eb0:	2e00      	cmp	r6, #0
   17eb2:	d40a      	bmi.n	17eca <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x1ac>
   17eb4:	4610      	mov	r0, r2
   17eb6:	ebb9 0907 	subs.w	r9, r9, r7
   17eba:	d44e      	bmi.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17ebc:	f505 72cc 	add.w	r2, r5, #408	; 0x198
   17ec0:	f081 0101 	eor.w	r1, r1, #1
   17ec4:	4290      	cmp	r0, r2
   17ec6:	d1ef      	bne.n	17ea8 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x18a>
   17ec8:	e047      	b.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17eca:	f505 73cc 	add.w	r3, r5, #408	; 0x198
   17ece:	429a      	cmp	r2, r3
   17ed0:	d065      	beq.n	17f9e <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x280>
   17ed2:	7842      	ldrb	r2, [r0, #1]
   17ed4:	f006 037f 	and.w	r3, r6, #127	; 0x7f
   17ed8:	3002      	adds	r0, #2
   17eda:	ea42 2703 	orr.w	r7, r2, r3, lsl #8
   17ede:	ebb9 0907 	subs.w	r9, r9, r7
   17ee2:	d5eb      	bpl.n	17ebc <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x19e>
   17ee4:	e039      	b.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17ee6:	2100      	movs	r1, #0
   17ee8:	f001 0001 	and.w	r0, r1, #1
   17eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17ef0:	f240 51e2 	movw	r1, #1506	; 0x5e2
   17ef4:	f240 63e2 	movw	r3, #1762	; 0x6e2
   17ef8:	f6cf 71fd 	movt	r1, #65533	; 0xfffd
   17efc:	1842      	adds	r2, r0, r1
   17efe:	f2c0 030b 	movt	r3, #11
   17f02:	2100      	movs	r1, #0
   17f04:	429a      	cmp	r2, r3
   17f06:	d328      	bcc.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17f08:	f241 421f 	movw	r2, #5151	; 0x141f
   17f0c:	f640 431f 	movw	r3, #3103	; 0xc1f
   17f10:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17f14:	4402      	add	r2, r0
   17f16:	429a      	cmp	r2, r3
   17f18:	bf21      	itttt	cs
   17f1a:	f243 125e 	movwcs	r2, #12638	; 0x315e
   17f1e:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17f22:	4402      	addcs	r2, r0
   17f24:	2a0e      	cmpcs	r2, #14
   17f26:	d318      	bcc.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17f28:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   17f2c:	f64b 031e 	movw	r3, #47134	; 0xb81e
   17f30:	f2c0 021f 	movt	r2, #31
   17f34:	f2c0 0302 	movt	r3, #2
   17f38:	4002      	ands	r2, r0
   17f3a:	429a      	cmp	r2, r3
   17f3c:	d00d      	beq.n	17f5a <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x23c>
   17f3e:	f645 1229 	movw	r2, #22825	; 0x5929
   17f42:	f6cf 72fd 	movt	r2, #65533	; 0xfffd
   17f46:	4402      	add	r2, r0
   17f48:	2a29      	cmp	r2, #41	; 0x29
   17f4a:	bf21      	itttt	cs
   17f4c:	f644 02cb 	movwcs	r2, #18635	; 0x48cb
   17f50:	f6cf 72fd 	movtcs	r2, #65533	; 0xfffd
   17f54:	4402      	addcs	r2, r0
   17f56:	2a0b      	cmpcs	r2, #11
   17f58:	d203      	bcs.n	17f62 <_ZN4core7unicode9printable12is_printable17h5f3187a32a6fa24eE+0x244>
   17f5a:	f001 0001 	and.w	r0, r1, #1
   17f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f62:	f5a0 2060 	sub.w	r0, r0, #917504	; 0xe0000
   17f66:	f64f 620f 	movw	r2, #65039	; 0xfe0f
   17f6a:	f5a0 71f8 	sub.w	r1, r0, #496	; 0x1f0
   17f6e:	2000      	movs	r0, #0
   17f70:	f2c0 0202 	movt	r2, #2
   17f74:	4291      	cmp	r1, r2
   17f76:	bf88      	it	hi
   17f78:	2001      	movhi	r0, #1
   17f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   17f7e:	4610      	mov	r0, r2
   17f80:	4651      	mov	r1, sl
   17f82:	f7ff fd04 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   17f86:	defe      	udf	#254	; 0xfe
   17f88:	4650      	mov	r0, sl
   17f8a:	f240 1125 	movw	r1, #293	; 0x125
   17f8e:	f7ff fcdc 	bl	1794a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17f92:	defe      	udf	#254	; 0xfe
   17f94:	4650      	mov	r0, sl
   17f96:	21a6      	movs	r1, #166	; 0xa6
   17f98:	f7ff fcd7 	bl	1794a <_ZN4core5slice20slice_index_len_fail17h4b4f54c4bea2355fE>
   17f9c:	defe      	udf	#254	; 0xfe
   17f9e:	f64f 7030 	movw	r0, #65328	; 0xff30
   17fa2:	f240 324c 	movw	r2, #844	; 0x34c
   17fa6:	f2c0 0001 	movt	r0, #1
   17faa:	f2c0 0202 	movt	r2, #2
   17fae:	212b      	movs	r1, #43	; 0x2b
   17fb0:	f7fe fd78 	bl	16aa4 <_ZN4core9panicking5panic17h24d1dd0a9d540834E>
   17fb4:	defe      	udf	#254	; 0xfe

00017fb6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE>:
   17fb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fba:	b0a3      	sub	sp, #140	; 0x8c
   17fbc:	468c      	mov	ip, r1
   17fbe:	6809      	ldr	r1, [r1, #0]
   17fc0:	06ca      	lsls	r2, r1, #27
   17fc2:	d44a      	bmi.n	1805a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xa4>
   17fc4:	6804      	ldr	r4, [r0, #0]
   17fc6:	0688      	lsls	r0, r1, #26
   17fc8:	f100 8089 	bmi.w	180de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x128>
   17fcc:	f248 5e1f 	movw	lr, #34079	; 0x851f
   17fd0:	f64f 72cf 	movw	r2, #65487	; 0xffcf
   17fd4:	f242 7810 	movw	r8, #10000	; 0x2710
   17fd8:	4544      	cmp	r4, r8
   17fda:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   17fde:	f2c0 0201 	movt	r2, #1
   17fe2:	f0c0 80e3 	bcc.w	181ac <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1f6>
   17fe6:	f241 7959 	movw	r9, #5977	; 0x1759
   17fea:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   17fee:	f10d 0b0c 	add.w	fp, sp, #12
   17ff2:	2300      	movs	r3, #0
   17ff4:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   17ff8:	f04f 0a64 	mov.w	sl, #100	; 0x64
   17ffc:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18000:	fba4 0109 	umull	r0, r1, r4, r9
   18004:	42bc      	cmp	r4, r7
   18006:	ea4f 3051 	mov.w	r0, r1, lsr #13
   1800a:	fb00 4118 	mls	r1, r0, r8, r4
   1800e:	4604      	mov	r4, r0
   18010:	b28d      	uxth	r5, r1
   18012:	fba5 560e 	umull	r5, r6, r5, lr
   18016:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1801a:	eb0b 0603 	add.w	r6, fp, r3
   1801e:	fb05 111a 	mls	r1, r5, sl, r1
   18022:	f832 5015 	ldrh.w	r5, [r2, r5, lsl #1]
   18026:	f1a3 0304 	sub.w	r3, r3, #4
   1802a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1802e:	b289      	uxth	r1, r1
   18030:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
   18034:	f8a6 1025 	strh.w	r1, [r6, #37]	; 0x25
   18038:	d8e2      	bhi.n	18000 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x4a>
   1803a:	f103 0127 	add.w	r1, r3, #39	; 0x27
   1803e:	4604      	mov	r4, r0
   18040:	2c63      	cmp	r4, #99	; 0x63
   18042:	f300 80b7 	bgt.w	181b4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1fe>
   18046:	4623      	mov	r3, r4
   18048:	2b0a      	cmp	r3, #10
   1804a:	f2c0 80c3 	blt.w	181d4 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x21e>
   1804e:	1e88      	subs	r0, r1, #2
   18050:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   18054:	aa03      	add	r2, sp, #12
   18056:	5211      	strh	r1, [r2, r0]
   18058:	e0c1      	b.n	181de <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x228>
   1805a:	6800      	ldr	r0, [r0, #0]
   1805c:	f10d 0e0c 	add.w	lr, sp, #12
   18060:	2381      	movs	r3, #129	; 0x81
   18062:	2100      	movs	r1, #0
   18064:	f000 020f 	and.w	r2, r0, #15
   18068:	f102 0457 	add.w	r4, r2, #87	; 0x57
   1806c:	2a0a      	cmp	r2, #10
   1806e:	bf38      	it	cc
   18070:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18074:	eb0e 0203 	add.w	r2, lr, r3
   18078:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   1807c:	f802 4c02 	strb.w	r4, [r2, #-2]
   18080:	d071      	beq.n	18166 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18082:	0904      	lsrs	r4, r0, #4
   18084:	f004 040f 	and.w	r4, r4, #15
   18088:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1808c:	2c0a      	cmp	r4, #10
   1808e:	bf38      	it	cc
   18090:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18094:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18098:	f802 5c03 	strb.w	r5, [r2, #-3]
   1809c:	d079      	beq.n	18192 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   1809e:	0a04      	lsrs	r4, r0, #8
   180a0:	f004 040f 	and.w	r4, r4, #15
   180a4:	f104 0557 	add.w	r5, r4, #87	; 0x57
   180a8:	2c0a      	cmp	r4, #10
   180aa:	bf38      	it	cc
   180ac:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   180b0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   180b4:	f802 5c04 	strb.w	r5, [r2, #-4]
   180b8:	d073      	beq.n	181a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   180ba:	0b04      	lsrs	r4, r0, #12
   180bc:	3b04      	subs	r3, #4
   180be:	f004 040f 	and.w	r4, r4, #15
   180c2:	f104 0557 	add.w	r5, r4, #87	; 0x57
   180c6:	2c0a      	cmp	r4, #10
   180c8:	bf38      	it	cc
   180ca:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   180ce:	f802 5c05 	strb.w	r5, [r2, #-5]
   180d2:	0c02      	lsrs	r2, r0, #16
   180d4:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   180d8:	4610      	mov	r0, r2
   180da:	d1c3      	bne.n	18064 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0xae>
   180dc:	e03f      	b.n	1815e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1a8>
   180de:	f10d 0e0c 	add.w	lr, sp, #12
   180e2:	2381      	movs	r3, #129	; 0x81
   180e4:	2100      	movs	r1, #0
   180e6:	f004 000f 	and.w	r0, r4, #15
   180ea:	eb0e 0203 	add.w	r2, lr, r3
   180ee:	f100 0537 	add.w	r5, r0, #55	; 0x37
   180f2:	280a      	cmp	r0, #10
   180f4:	bf38      	it	cc
   180f6:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   180fa:	ebb1 1f14 	cmp.w	r1, r4, lsr #4
   180fe:	f802 5c02 	strb.w	r5, [r2, #-2]
   18102:	d030      	beq.n	18166 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1b0>
   18104:	0920      	lsrs	r0, r4, #4
   18106:	f000 000f 	and.w	r0, r0, #15
   1810a:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1810e:	280a      	cmp	r0, #10
   18110:	bf38      	it	cc
   18112:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18116:	ebb1 2f14 	cmp.w	r1, r4, lsr #8
   1811a:	f802 5c03 	strb.w	r5, [r2, #-3]
   1811e:	d038      	beq.n	18192 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1dc>
   18120:	0a20      	lsrs	r0, r4, #8
   18122:	f000 000f 	and.w	r0, r0, #15
   18126:	f100 0537 	add.w	r5, r0, #55	; 0x37
   1812a:	280a      	cmp	r0, #10
   1812c:	bf38      	it	cc
   1812e:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18132:	ebb1 3f14 	cmp.w	r1, r4, lsr #12
   18136:	f802 5c04 	strb.w	r5, [r2, #-4]
   1813a:	d032      	beq.n	181a2 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ec>
   1813c:	0b20      	lsrs	r0, r4, #12
   1813e:	3b04      	subs	r3, #4
   18140:	f000 000f 	and.w	r0, r0, #15
   18144:	f100 0537 	add.w	r5, r0, #55	; 0x37
   18148:	280a      	cmp	r0, #10
   1814a:	bf38      	it	cc
   1814c:	f100 0530 	addcc.w	r5, r0, #48	; 0x30
   18150:	0c20      	lsrs	r0, r4, #16
   18152:	ebb1 4f14 	cmp.w	r1, r4, lsr #16
   18156:	4604      	mov	r4, r0
   18158:	f802 5c05 	strb.w	r5, [r2, #-5]
   1815c:	d1c3      	bne.n	180e6 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x130>
   1815e:	1e58      	subs	r0, r3, #1
   18160:	2881      	cmp	r0, #129	; 0x81
   18162:	d305      	bcc.n	18170 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   18164:	e019      	b.n	1819a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18166:	1e59      	subs	r1, r3, #1
   18168:	1e98      	subs	r0, r3, #2
   1816a:	460b      	mov	r3, r1
   1816c:	2881      	cmp	r0, #129	; 0x81
   1816e:	d214      	bcs.n	1819a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   18170:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   18174:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   18178:	4470      	add	r0, lr
   1817a:	f2c0 0201 	movt	r2, #1
   1817e:	e9cd 0100 	strd	r0, r1, [sp]
   18182:	4660      	mov	r0, ip
   18184:	2101      	movs	r1, #1
   18186:	2302      	movs	r3, #2
   18188:	f7ff f864 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1818c:	b023      	add	sp, #140	; 0x8c
   1818e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18192:	1ed8      	subs	r0, r3, #3
   18194:	3b02      	subs	r3, #2
   18196:	2881      	cmp	r0, #129	; 0x81
   18198:	d3ea      	bcc.n	18170 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   1819a:	2180      	movs	r1, #128	; 0x80
   1819c:	f7ff fbf7 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   181a0:	defe      	udf	#254	; 0xfe
   181a2:	1f18      	subs	r0, r3, #4
   181a4:	3b03      	subs	r3, #3
   181a6:	2881      	cmp	r0, #129	; 0x81
   181a8:	d3e2      	bcc.n	18170 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1ba>
   181aa:	e7f6      	b.n	1819a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x1e4>
   181ac:	2127      	movs	r1, #39	; 0x27
   181ae:	2c63      	cmp	r4, #99	; 0x63
   181b0:	f77f af49 	ble.w	18046 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x90>
   181b4:	b2a0      	uxth	r0, r4
   181b6:	3902      	subs	r1, #2
   181b8:	fba0 030e 	umull	r0, r3, r0, lr
   181bc:	af03      	add	r7, sp, #12
   181be:	2064      	movs	r0, #100	; 0x64
   181c0:	095b      	lsrs	r3, r3, #5
   181c2:	fb03 4010 	mls	r0, r3, r0, r4
   181c6:	b280      	uxth	r0, r0
   181c8:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   181cc:	5278      	strh	r0, [r7, r1]
   181ce:	2b0a      	cmp	r3, #10
   181d0:	f6bf af3d 	bge.w	1804e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..Debug$u20$for$u20$usize$GT$3fmt17h794a098dcc31626dE+0x98>
   181d4:	1e48      	subs	r0, r1, #1
   181d6:	aa03      	add	r2, sp, #12
   181d8:	f103 0130 	add.w	r1, r3, #48	; 0x30
   181dc:	5411      	strb	r1, [r2, r0]
   181de:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   181e2:	aa03      	add	r2, sp, #12
   181e4:	4410      	add	r0, r2
   181e6:	f64f 5294 	movw	r2, #64916	; 0xfd94
   181ea:	e9cd 0100 	strd	r0, r1, [sp]
   181ee:	f2c0 0201 	movt	r2, #1
   181f2:	4660      	mov	r0, ip
   181f4:	2101      	movs	r1, #1
   181f6:	2300      	movs	r3, #0
   181f8:	f7ff f82c 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   181fc:	b023      	add	sp, #140	; 0x8c
   181fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018202 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE>:
   18202:	b580      	push	{r7, lr}
   18204:	b0a2      	sub	sp, #136	; 0x88
   18206:	7802      	ldrb	r2, [r0, #0]
   18208:	468c      	mov	ip, r1
   1820a:	f002 030f 	and.w	r3, r2, #15
   1820e:	f103 0057 	add.w	r0, r3, #87	; 0x57
   18212:	2b0a      	cmp	r3, #10
   18214:	bf38      	it	cc
   18216:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   1821a:	2300      	movs	r3, #0
   1821c:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   18220:	d00b      	beq.n	1823a <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x38>
   18222:	0913      	lsrs	r3, r2, #4
   18224:	f103 0157 	add.w	r1, r3, #87	; 0x57
   18228:	2aa0      	cmp	r2, #160	; 0xa0
   1822a:	bf38      	it	cc
   1822c:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   18230:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18234:	227e      	movs	r2, #126	; 0x7e
   18236:	2302      	movs	r3, #2
   18238:	e001      	b.n	1823e <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i8$GT$3fmt17he73cb7020cb9b23fE+0x3c>
   1823a:	227f      	movs	r2, #127	; 0x7f
   1823c:	2301      	movs	r3, #1
   1823e:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   18242:	a802      	add	r0, sp, #8
   18244:	4410      	add	r0, r2
   18246:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   1824a:	e9cd 0300 	strd	r0, r3, [sp]
   1824e:	f2c0 0201 	movt	r2, #1
   18252:	4660      	mov	r0, ip
   18254:	2101      	movs	r1, #1
   18256:	2302      	movs	r3, #2
   18258:	f7fe fffc 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1825c:	b022      	add	sp, #136	; 0x88
   1825e:	bd80      	pop	{r7, pc}

00018260 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E>:
   18260:	b580      	push	{r7, lr}
   18262:	b0a2      	sub	sp, #136	; 0x88
   18264:	7802      	ldrb	r2, [r0, #0]
   18266:	468c      	mov	ip, r1
   18268:	f002 030f 	and.w	r3, r2, #15
   1826c:	f103 0037 	add.w	r0, r3, #55	; 0x37
   18270:	2b0a      	cmp	r3, #10
   18272:	bf38      	it	cc
   18274:	f103 0030 	addcc.w	r0, r3, #48	; 0x30
   18278:	2300      	movs	r3, #0
   1827a:	ebb3 1f12 	cmp.w	r3, r2, lsr #4
   1827e:	d00b      	beq.n	18298 <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x38>
   18280:	0913      	lsrs	r3, r2, #4
   18282:	f103 0137 	add.w	r1, r3, #55	; 0x37
   18286:	2aa0      	cmp	r2, #160	; 0xa0
   18288:	bf38      	it	cc
   1828a:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   1828e:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   18292:	227e      	movs	r2, #126	; 0x7e
   18294:	2302      	movs	r3, #2
   18296:	e001      	b.n	1829c <_ZN4core3fmt3num52_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i8$GT$3fmt17h9a2bfb5aa54d9245E+0x3c>
   18298:	227f      	movs	r2, #127	; 0x7f
   1829a:	2301      	movs	r3, #1
   1829c:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
   182a0:	a802      	add	r0, sp, #8
   182a2:	4410      	add	r0, r2
   182a4:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   182a8:	e9cd 0300 	strd	r0, r3, [sp]
   182ac:	f2c0 0201 	movt	r2, #1
   182b0:	4660      	mov	r0, ip
   182b2:	2101      	movs	r1, #1
   182b4:	2302      	movs	r3, #2
   182b6:	f7fe ffcd 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   182ba:	b022      	add	sp, #136	; 0x88
   182bc:	bd80      	pop	{r7, pc}

000182be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E>:
   182be:	b580      	push	{r7, lr}
   182c0:	b0a2      	sub	sp, #136	; 0x88
   182c2:	8800      	ldrh	r0, [r0, #0]
   182c4:	468c      	mov	ip, r1
   182c6:	f000 020f 	and.w	r2, r0, #15
   182ca:	f102 0357 	add.w	r3, r2, #87	; 0x57
   182ce:	2a0a      	cmp	r2, #10
   182d0:	bf38      	it	cc
   182d2:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   182d6:	2200      	movs	r2, #0
   182d8:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   182dc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   182e0:	d02a      	beq.n	18338 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x7a>
   182e2:	0903      	lsrs	r3, r0, #4
   182e4:	f003 030f 	and.w	r3, r3, #15
   182e8:	f103 0157 	add.w	r1, r3, #87	; 0x57
   182ec:	2b0a      	cmp	r3, #10
   182ee:	bf38      	it	cc
   182f0:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   182f4:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   182f8:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   182fc:	d031      	beq.n	18362 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xa4>
   182fe:	0a01      	lsrs	r1, r0, #8
   18300:	f001 010f 	and.w	r1, r1, #15
   18304:	f101 0257 	add.w	r2, r1, #87	; 0x57
   18308:	290a      	cmp	r1, #10
   1830a:	bf38      	it	cc
   1830c:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   18310:	2100      	movs	r1, #0
   18312:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18316:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   1831a:	d027      	beq.n	1836c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xae>
   1831c:	0b00      	lsrs	r0, r0, #12
   1831e:	f100 0157 	add.w	r1, r0, #87	; 0x57
   18322:	280a      	cmp	r0, #10
   18324:	bf38      	it	cc
   18326:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   1832a:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   1832e:	227d      	movs	r2, #125	; 0x7d
   18330:	207c      	movs	r0, #124	; 0x7c
   18332:	2881      	cmp	r0, #129	; 0x81
   18334:	d304      	bcc.n	18340 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18336:	e01d      	b.n	18374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18338:	2280      	movs	r2, #128	; 0x80
   1833a:	207f      	movs	r0, #127	; 0x7f
   1833c:	2881      	cmp	r0, #129	; 0x81
   1833e:	d219      	bcs.n	18374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   18340:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18344:	ab02      	add	r3, sp, #8
   18346:	4418      	add	r0, r3
   18348:	2101      	movs	r1, #1
   1834a:	e9cd 0200 	strd	r0, r2, [sp]
   1834e:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   18352:	f2c0 0201 	movt	r2, #1
   18356:	4660      	mov	r0, ip
   18358:	2302      	movs	r3, #2
   1835a:	f7fe ff7b 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1835e:	b022      	add	sp, #136	; 0x88
   18360:	bd80      	pop	{r7, pc}
   18362:	207e      	movs	r0, #126	; 0x7e
   18364:	227f      	movs	r2, #127	; 0x7f
   18366:	2881      	cmp	r0, #129	; 0x81
   18368:	d3ea      	bcc.n	18340 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   1836a:	e003      	b.n	18374 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0xb6>
   1836c:	207d      	movs	r0, #125	; 0x7d
   1836e:	227e      	movs	r2, #126	; 0x7e
   18370:	2881      	cmp	r0, #129	; 0x81
   18372:	d3e5      	bcc.n	18340 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i16$GT$3fmt17h9e3fb34d27043d27E+0x82>
   18374:	2180      	movs	r1, #128	; 0x80
   18376:	f7ff fb0a 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1837a:	defe      	udf	#254	; 0xfe

0001837c <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE>:
   1837c:	b580      	push	{r7, lr}
   1837e:	b0a2      	sub	sp, #136	; 0x88
   18380:	8800      	ldrh	r0, [r0, #0]
   18382:	468c      	mov	ip, r1
   18384:	f000 020f 	and.w	r2, r0, #15
   18388:	f102 0337 	add.w	r3, r2, #55	; 0x37
   1838c:	2a0a      	cmp	r2, #10
   1838e:	bf38      	it	cc
   18390:	f102 0330 	addcc.w	r3, r2, #48	; 0x30
   18394:	2200      	movs	r2, #0
   18396:	ebb2 1f10 	cmp.w	r2, r0, lsr #4
   1839a:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   1839e:	d02a      	beq.n	183f6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x7a>
   183a0:	0903      	lsrs	r3, r0, #4
   183a2:	f003 030f 	and.w	r3, r3, #15
   183a6:	f103 0137 	add.w	r1, r3, #55	; 0x37
   183aa:	2b0a      	cmp	r3, #10
   183ac:	bf38      	it	cc
   183ae:	f103 0130 	addcc.w	r1, r3, #48	; 0x30
   183b2:	ebb2 2f10 	cmp.w	r2, r0, lsr #8
   183b6:	f88d 1086 	strb.w	r1, [sp, #134]	; 0x86
   183ba:	d031      	beq.n	18420 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xa4>
   183bc:	0a01      	lsrs	r1, r0, #8
   183be:	f001 010f 	and.w	r1, r1, #15
   183c2:	f101 0237 	add.w	r2, r1, #55	; 0x37
   183c6:	290a      	cmp	r1, #10
   183c8:	bf38      	it	cc
   183ca:	f101 0230 	addcc.w	r2, r1, #48	; 0x30
   183ce:	2100      	movs	r1, #0
   183d0:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   183d4:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   183d8:	d027      	beq.n	1842a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xae>
   183da:	0b00      	lsrs	r0, r0, #12
   183dc:	f100 0137 	add.w	r1, r0, #55	; 0x37
   183e0:	280a      	cmp	r0, #10
   183e2:	bf38      	it	cc
   183e4:	f100 0130 	addcc.w	r1, r0, #48	; 0x30
   183e8:	f88d 1084 	strb.w	r1, [sp, #132]	; 0x84
   183ec:	227d      	movs	r2, #125	; 0x7d
   183ee:	207c      	movs	r0, #124	; 0x7c
   183f0:	2881      	cmp	r0, #129	; 0x81
   183f2:	d304      	bcc.n	183fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   183f4:	e01d      	b.n	18432 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   183f6:	2280      	movs	r2, #128	; 0x80
   183f8:	207f      	movs	r0, #127	; 0x7f
   183fa:	2881      	cmp	r0, #129	; 0x81
   183fc:	d219      	bcs.n	18432 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   183fe:	f1c2 0281 	rsb	r2, r2, #129	; 0x81
   18402:	ab02      	add	r3, sp, #8
   18404:	4418      	add	r0, r3
   18406:	2101      	movs	r1, #1
   18408:	e9cd 0200 	strd	r0, r2, [sp]
   1840c:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   18410:	f2c0 0201 	movt	r2, #1
   18414:	4660      	mov	r0, ip
   18416:	2302      	movs	r3, #2
   18418:	f7fe ff1c 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1841c:	b022      	add	sp, #136	; 0x88
   1841e:	bd80      	pop	{r7, pc}
   18420:	207e      	movs	r0, #126	; 0x7e
   18422:	227f      	movs	r2, #127	; 0x7f
   18424:	2881      	cmp	r0, #129	; 0x81
   18426:	d3ea      	bcc.n	183fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18428:	e003      	b.n	18432 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0xb6>
   1842a:	207d      	movs	r0, #125	; 0x7d
   1842c:	227e      	movs	r2, #126	; 0x7e
   1842e:	2881      	cmp	r0, #129	; 0x81
   18430:	d3e5      	bcc.n	183fe <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i16$GT$3fmt17h68c29c2ea3dc9adfE+0x82>
   18432:	2180      	movs	r1, #128	; 0x80
   18434:	f7ff faab 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   18438:	defe      	udf	#254	; 0xfe

0001843a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE>:
   1843a:	b5b0      	push	{r4, r5, r7, lr}
   1843c:	b0a2      	sub	sp, #136	; 0x88
   1843e:	6800      	ldr	r0, [r0, #0]
   18440:	f10d 0e08 	add.w	lr, sp, #8
   18444:	468c      	mov	ip, r1
   18446:	2381      	movs	r3, #129	; 0x81
   18448:	2100      	movs	r1, #0
   1844a:	f000 020f 	and.w	r2, r0, #15
   1844e:	f102 0457 	add.w	r4, r2, #87	; 0x57
   18452:	2a0a      	cmp	r2, #10
   18454:	bf38      	it	cc
   18456:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   1845a:	eb0e 0203 	add.w	r2, lr, r3
   1845e:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18462:	f802 4c02 	strb.w	r4, [r2, #-2]
   18466:	d030      	beq.n	184ca <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x90>
   18468:	0904      	lsrs	r4, r0, #4
   1846a:	f004 040f 	and.w	r4, r4, #15
   1846e:	f104 0557 	add.w	r5, r4, #87	; 0x57
   18472:	2c0a      	cmp	r4, #10
   18474:	bf38      	it	cc
   18476:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1847a:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   1847e:	f802 5c03 	strb.w	r5, [r2, #-3]
   18482:	d028      	beq.n	184d6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x9c>
   18484:	0a04      	lsrs	r4, r0, #8
   18486:	f004 040f 	and.w	r4, r4, #15
   1848a:	f104 0557 	add.w	r5, r4, #87	; 0x57
   1848e:	2c0a      	cmp	r4, #10
   18490:	bf38      	it	cc
   18492:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18496:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   1849a:	f802 5c04 	strb.w	r5, [r2, #-4]
   1849e:	d01f      	beq.n	184e0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xa6>
   184a0:	0b04      	lsrs	r4, r0, #12
   184a2:	3b04      	subs	r3, #4
   184a4:	f004 040f 	and.w	r4, r4, #15
   184a8:	f104 0557 	add.w	r5, r4, #87	; 0x57
   184ac:	2c0a      	cmp	r4, #10
   184ae:	bf38      	it	cc
   184b0:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   184b4:	f802 5c05 	strb.w	r5, [r2, #-5]
   184b8:	0c02      	lsrs	r2, r0, #16
   184ba:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   184be:	4610      	mov	r0, r2
   184c0:	d1c3      	bne.n	1844a <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0x10>
   184c2:	1e58      	subs	r0, r3, #1
   184c4:	2881      	cmp	r0, #129	; 0x81
   184c6:	d30f      	bcc.n	184e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   184c8:	e01e      	b.n	18508 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   184ca:	1e59      	subs	r1, r3, #1
   184cc:	1e98      	subs	r0, r3, #2
   184ce:	460b      	mov	r3, r1
   184d0:	2881      	cmp	r0, #129	; 0x81
   184d2:	d309      	bcc.n	184e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   184d4:	e018      	b.n	18508 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   184d6:	1ed8      	subs	r0, r3, #3
   184d8:	3b02      	subs	r3, #2
   184da:	2881      	cmp	r0, #129	; 0x81
   184dc:	d304      	bcc.n	184e8 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xae>
   184de:	e013      	b.n	18508 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   184e0:	1f18      	subs	r0, r3, #4
   184e2:	3b03      	subs	r3, #3
   184e4:	2881      	cmp	r0, #129	; 0x81
   184e6:	d20f      	bcs.n	18508 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..LowerHex$u20$for$u20$i32$GT$3fmt17hdeaa78122b93ca2fE+0xce>
   184e8:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   184ec:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   184f0:	4470      	add	r0, lr
   184f2:	f2c0 0201 	movt	r2, #1
   184f6:	e9cd 0100 	strd	r0, r1, [sp]
   184fa:	4660      	mov	r0, ip
   184fc:	2101      	movs	r1, #1
   184fe:	2302      	movs	r3, #2
   18500:	f7fe fea8 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18504:	b022      	add	sp, #136	; 0x88
   18506:	bdb0      	pop	{r4, r5, r7, pc}
   18508:	2180      	movs	r1, #128	; 0x80
   1850a:	f7ff fa40 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   1850e:	defe      	udf	#254	; 0xfe

00018510 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E>:
   18510:	b5b0      	push	{r4, r5, r7, lr}
   18512:	b0a2      	sub	sp, #136	; 0x88
   18514:	6800      	ldr	r0, [r0, #0]
   18516:	f10d 0e08 	add.w	lr, sp, #8
   1851a:	468c      	mov	ip, r1
   1851c:	2381      	movs	r3, #129	; 0x81
   1851e:	2100      	movs	r1, #0
   18520:	f000 020f 	and.w	r2, r0, #15
   18524:	f102 0437 	add.w	r4, r2, #55	; 0x37
   18528:	2a0a      	cmp	r2, #10
   1852a:	bf38      	it	cc
   1852c:	f102 0430 	addcc.w	r4, r2, #48	; 0x30
   18530:	eb0e 0203 	add.w	r2, lr, r3
   18534:	ebb1 1f10 	cmp.w	r1, r0, lsr #4
   18538:	f802 4c02 	strb.w	r4, [r2, #-2]
   1853c:	d030      	beq.n	185a0 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x90>
   1853e:	0904      	lsrs	r4, r0, #4
   18540:	f004 040f 	and.w	r4, r4, #15
   18544:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18548:	2c0a      	cmp	r4, #10
   1854a:	bf38      	it	cc
   1854c:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   18550:	ebb1 2f10 	cmp.w	r1, r0, lsr #8
   18554:	f802 5c03 	strb.w	r5, [r2, #-3]
   18558:	d028      	beq.n	185ac <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x9c>
   1855a:	0a04      	lsrs	r4, r0, #8
   1855c:	f004 040f 	and.w	r4, r4, #15
   18560:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18564:	2c0a      	cmp	r4, #10
   18566:	bf38      	it	cc
   18568:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1856c:	ebb1 3f10 	cmp.w	r1, r0, lsr #12
   18570:	f802 5c04 	strb.w	r5, [r2, #-4]
   18574:	d01f      	beq.n	185b6 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xa6>
   18576:	0b04      	lsrs	r4, r0, #12
   18578:	3b04      	subs	r3, #4
   1857a:	f004 040f 	and.w	r4, r4, #15
   1857e:	f104 0537 	add.w	r5, r4, #55	; 0x37
   18582:	2c0a      	cmp	r4, #10
   18584:	bf38      	it	cc
   18586:	f104 0530 	addcc.w	r5, r4, #48	; 0x30
   1858a:	f802 5c05 	strb.w	r5, [r2, #-5]
   1858e:	0c02      	lsrs	r2, r0, #16
   18590:	ebb1 4f10 	cmp.w	r1, r0, lsr #16
   18594:	4610      	mov	r0, r2
   18596:	d1c3      	bne.n	18520 <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0x10>
   18598:	1e58      	subs	r0, r3, #1
   1859a:	2881      	cmp	r0, #129	; 0x81
   1859c:	d30f      	bcc.n	185be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   1859e:	e01e      	b.n	185de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   185a0:	1e59      	subs	r1, r3, #1
   185a2:	1e98      	subs	r0, r3, #2
   185a4:	460b      	mov	r3, r1
   185a6:	2881      	cmp	r0, #129	; 0x81
   185a8:	d309      	bcc.n	185be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   185aa:	e018      	b.n	185de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   185ac:	1ed8      	subs	r0, r3, #3
   185ae:	3b02      	subs	r3, #2
   185b0:	2881      	cmp	r0, #129	; 0x81
   185b2:	d304      	bcc.n	185be <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xae>
   185b4:	e013      	b.n	185de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   185b6:	1f18      	subs	r0, r3, #4
   185b8:	3b03      	subs	r3, #3
   185ba:	2881      	cmp	r0, #129	; 0x81
   185bc:	d20f      	bcs.n	185de <_ZN4core3fmt3num53_$LT$impl$u20$core..fmt..UpperHex$u20$for$u20$i32$GT$3fmt17h7a6a6ea081af3641E+0xce>
   185be:	f1c3 0181 	rsb	r1, r3, #129	; 0x81
   185c2:	f64f 72cd 	movw	r2, #65485	; 0xffcd
   185c6:	4470      	add	r0, lr
   185c8:	f2c0 0201 	movt	r2, #1
   185cc:	e9cd 0100 	strd	r0, r1, [sp]
   185d0:	4660      	mov	r0, ip
   185d2:	2101      	movs	r1, #1
   185d4:	2302      	movs	r3, #2
   185d6:	f7fe fe3d 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   185da:	b022      	add	sp, #136	; 0x88
   185dc:	bdb0      	pop	{r4, r5, r7, pc}
   185de:	2180      	movs	r1, #128	; 0x80
   185e0:	f7ff f9d5 	bl	1798e <_ZN4core5slice22slice_index_order_fail17hc356bacdcbe68e29E>
   185e4:	defe      	udf	#254	; 0xfe

000185e6 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E>:
   185e6:	b580      	push	{r7, lr}
   185e8:	b08c      	sub	sp, #48	; 0x30
   185ea:	7802      	ldrb	r2, [r0, #0]
   185ec:	2a64      	cmp	r2, #100	; 0x64
   185ee:	d314      	bcc.n	1861a <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x34>
   185f0:	f248 501f 	movw	r0, #34079	; 0x851f
   185f4:	f2c5 10eb 	movt	r0, #20971	; 0x51eb
   185f8:	fba2 0300 	umull	r0, r3, r2, r0
   185fc:	2064      	movs	r0, #100	; 0x64
   185fe:	095b      	lsrs	r3, r3, #5
   18600:	fb03 2010 	mls	r0, r3, r0, r2
   18604:	f64f 72cf 	movw	r2, #65487	; 0xffcf
   18608:	f2c0 0201 	movt	r2, #1
   1860c:	b2c0      	uxtb	r0, r0
   1860e:	f832 0010 	ldrh.w	r0, [r2, r0, lsl #1]
   18612:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   18616:	2024      	movs	r0, #36	; 0x24
   18618:	e003      	b.n	18622 <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x3c>
   1861a:	2a0a      	cmp	r2, #10
   1861c:	d206      	bcs.n	1862c <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x46>
   1861e:	2026      	movs	r0, #38	; 0x26
   18620:	4613      	mov	r3, r2
   18622:	f103 0230 	add.w	r2, r3, #48	; 0x30
   18626:	ab02      	add	r3, sp, #8
   18628:	541a      	strb	r2, [r3, r0]
   1862a:	e008      	b.n	1863e <_ZN4core3fmt3num3imp51_$LT$impl$u20$core..fmt..Display$u20$for$u20$u8$GT$3fmt17h5fa421703af75db0E+0x58>
   1862c:	f64f 70cf 	movw	r0, #65487	; 0xffcf
   18630:	f2c0 0001 	movt	r0, #1
   18634:	f830 0012 	ldrh.w	r0, [r0, r2, lsl #1]
   18638:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   1863c:	2025      	movs	r0, #37	; 0x25
   1863e:	f1c0 0227 	rsb	r2, r0, #39	; 0x27
   18642:	ab02      	add	r3, sp, #8
   18644:	4418      	add	r0, r3
   18646:	2300      	movs	r3, #0
   18648:	e9cd 0200 	strd	r0, r2, [sp]
   1864c:	f64f 5294 	movw	r2, #64916	; 0xfd94
   18650:	4608      	mov	r0, r1
   18652:	f2c0 0201 	movt	r2, #1
   18656:	2101      	movs	r1, #1
   18658:	f7fe fdfc 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1865c:	b00c      	add	sp, #48	; 0x30
   1865e:	bd80      	pop	{r7, pc}

00018660 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E>:
   18660:	b580      	push	{r7, lr}
   18662:	b08c      	sub	sp, #48	; 0x30
   18664:	8800      	ldrh	r0, [r0, #0]
   18666:	f242 720f 	movw	r2, #9999	; 0x270f
   1866a:	468e      	mov	lr, r1
   1866c:	4290      	cmp	r0, r2
   1866e:	d924      	bls.n	186ba <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x5a>
   18670:	f241 7259 	movw	r2, #5977	; 0x1759
   18674:	f248 511f 	movw	r1, #34079	; 0x851f
   18678:	f2cd 12b7 	movt	r2, #53687	; 0xd1b7
   1867c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   18680:	fba0 2302 	umull	r2, r3, r0, r2
   18684:	0b5a      	lsrs	r2, r3, #13
   18686:	f242 7310 	movw	r3, #10000	; 0x2710
   1868a:	fb02 0013 	mls	r0, r2, r3, r0
   1868e:	b283      	uxth	r3, r0
   18690:	fba3 1301 	umull	r1, r3, r3, r1
   18694:	0959      	lsrs	r1, r3, #5
   18696:	2364      	movs	r3, #100	; 0x64
   18698:	fb01 0013 	mls	r0, r1, r3, r0
   1869c:	f64f 73cf 	movw	r3, #65487	; 0xffcf
   186a0:	f2c0 0301 	movt	r3, #1
   186a4:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
   186a8:	f8ad 102b 	strh.w	r1, [sp, #43]	; 0x2b
   186ac:	b280      	uxth	r0, r0
   186ae:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   186b2:	2323      	movs	r3, #35	; 0x23
   186b4:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   186b8:	e024      	b.n	18704 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa4>
   186ba:	f64f 7ccf 	movw	ip, #65487	; 0xffcf
   186be:	2863      	cmp	r0, #99	; 0x63
   186c0:	f2c0 0c01 	movt	ip, #1
   186c4:	d919      	bls.n	186fa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x9a>
   186c6:	f248 511f 	movw	r1, #34079	; 0x851f
   186ca:	2325      	movs	r3, #37	; 0x25
   186cc:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
   186d0:	fba0 1201 	umull	r1, r2, r0, r1
   186d4:	0951      	lsrs	r1, r2, #5
   186d6:	2264      	movs	r2, #100	; 0x64
   186d8:	fb01 0012 	mls	r0, r1, r2, r0
   186dc:	b280      	uxth	r0, r0
   186de:	f83c 0010 	ldrh.w	r0, [ip, r0, lsl #1]
   186e2:	f8ad 002d 	strh.w	r0, [sp, #45]	; 0x2d
   186e6:	4608      	mov	r0, r1
   186e8:	b282      	uxth	r2, r0
   186ea:	2a0a      	cmp	r2, #10
   186ec:	d309      	bcc.n	18702 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xa2>
   186ee:	f83c 1012 	ldrh.w	r1, [ip, r2, lsl #1]
   186f2:	1e98      	subs	r0, r3, #2
   186f4:	aa02      	add	r2, sp, #8
   186f6:	5211      	strh	r1, [r2, r0]
   186f8:	e009      	b.n	1870e <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0xae>
   186fa:	2327      	movs	r3, #39	; 0x27
   186fc:	b282      	uxth	r2, r0
   186fe:	2a0a      	cmp	r2, #10
   18700:	d2f5      	bcs.n	186ee <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u16$GT$3fmt17h0cf1e2e99cc07671E+0x8e>
   18702:	4602      	mov	r2, r0
   18704:	1e58      	subs	r0, r3, #1
   18706:	f102 0130 	add.w	r1, r2, #48	; 0x30
   1870a:	aa02      	add	r2, sp, #8
   1870c:	5411      	strb	r1, [r2, r0]
   1870e:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18712:	aa02      	add	r2, sp, #8
   18714:	4410      	add	r0, r2
   18716:	f64f 5294 	movw	r2, #64916	; 0xfd94
   1871a:	e9cd 0100 	strd	r0, r1, [sp]
   1871e:	f2c0 0201 	movt	r2, #1
   18722:	4670      	mov	r0, lr
   18724:	2101      	movs	r1, #1
   18726:	2300      	movs	r3, #0
   18728:	f7fe fd94 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1872c:	b00c      	add	sp, #48	; 0x30
   1872e:	bd80      	pop	{r7, pc}

00018730 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E>:
   18730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18734:	b08f      	sub	sp, #60	; 0x3c
   18736:	6805      	ldr	r5, [r0, #0]
   18738:	f248 581f 	movw	r8, #34079	; 0x851f
   1873c:	460e      	mov	r6, r1
   1873e:	f64f 71cf 	movw	r1, #65487	; 0xffcf
   18742:	2d00      	cmp	r5, #0
   18744:	f242 7910 	movw	r9, #10000	; 0x2710
   18748:	462b      	mov	r3, r5
   1874a:	f2c5 18eb 	movt	r8, #20971	; 0x51eb
   1874e:	bf48      	it	mi
   18750:	426b      	negmi	r3, r5
   18752:	454b      	cmp	r3, r9
   18754:	f2c0 0101 	movt	r1, #1
   18758:	d33a      	bcc.n	187d0 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa0>
   1875a:	f241 7a59 	movw	sl, #5977	; 0x1759
   1875e:	f24e 00ff 	movw	r0, #57599	; 0xe0ff
   18762:	f10d 0e14 	add.w	lr, sp, #20
   18766:	2400      	movs	r4, #0
   18768:	f2cd 1ab7 	movt	sl, #53687	; 0xd1b7
   1876c:	f04f 0b64 	mov.w	fp, #100	; 0x64
   18770:	f2c0 50f5 	movt	r0, #1525	; 0x5f5
   18774:	e9cd 5603 	strd	r5, r6, [sp, #12]
   18778:	fba3 250a 	umull	r2, r5, r3, sl
   1877c:	eb0e 0704 	add.w	r7, lr, r4
   18780:	3c04      	subs	r4, #4
   18782:	4283      	cmp	r3, r0
   18784:	ea4f 3255 	mov.w	r2, r5, lsr #13
   18788:	fb02 3519 	mls	r5, r2, r9, r3
   1878c:	4613      	mov	r3, r2
   1878e:	b2ae      	uxth	r6, r5
   18790:	fba6 6c08 	umull	r6, ip, r6, r8
   18794:	ea4f 165c 	mov.w	r6, ip, lsr #5
   18798:	fb06 551b 	mls	r5, r6, fp, r5
   1879c:	f831 6016 	ldrh.w	r6, [r1, r6, lsl #1]
   187a0:	f8a7 6023 	strh.w	r6, [r7, #35]	; 0x23
   187a4:	b2ad      	uxth	r5, r5
   187a6:	f831 5015 	ldrh.w	r5, [r1, r5, lsl #1]
   187aa:	f8a7 5025 	strh.w	r5, [r7, #37]	; 0x25
   187ae:	d8e3      	bhi.n	18778 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x48>
   187b0:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
   187b4:	f104 0027 	add.w	r0, r4, #39	; 0x27
   187b8:	4613      	mov	r3, r2
   187ba:	2b63      	cmp	r3, #99	; 0x63
   187bc:	dc0b      	bgt.n	187d6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xa6>
   187be:	461a      	mov	r2, r3
   187c0:	2a0a      	cmp	r2, #10
   187c2:	db17      	blt.n	187f4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xc4>
   187c4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
   187c8:	3802      	subs	r0, #2
   187ca:	aa05      	add	r2, sp, #20
   187cc:	5211      	strh	r1, [r2, r0]
   187ce:	e016      	b.n	187fe <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0xce>
   187d0:	2027      	movs	r0, #39	; 0x27
   187d2:	2b63      	cmp	r3, #99	; 0x63
   187d4:	ddf3      	ble.n	187be <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x8e>
   187d6:	b29a      	uxth	r2, r3
   187d8:	3802      	subs	r0, #2
   187da:	fba2 2708 	umull	r2, r7, r2, r8
   187de:	097a      	lsrs	r2, r7, #5
   187e0:	2764      	movs	r7, #100	; 0x64
   187e2:	fb02 3317 	mls	r3, r2, r7, r3
   187e6:	af05      	add	r7, sp, #20
   187e8:	b29b      	uxth	r3, r3
   187ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
   187ee:	523b      	strh	r3, [r7, r0]
   187f0:	2a0a      	cmp	r2, #10
   187f2:	dae7      	bge.n	187c4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$i32$GT$3fmt17hda538fea5da2fce1E+0x94>
   187f4:	3801      	subs	r0, #1
   187f6:	f102 0130 	add.w	r1, r2, #48	; 0x30
   187fa:	aa05      	add	r2, sp, #20
   187fc:	5411      	strb	r1, [r2, r0]
   187fe:	f1c0 0127 	rsb	r1, r0, #39	; 0x27
   18802:	aa05      	add	r2, sp, #20
   18804:	4410      	add	r0, r2
   18806:	f64f 5294 	movw	r2, #64916	; 0xfd94
   1880a:	e9cd 0100 	strd	r0, r1, [sp]
   1880e:	43e8      	mvns	r0, r5
   18810:	0fc1      	lsrs	r1, r0, #31
   18812:	f2c0 0201 	movt	r2, #1
   18816:	4630      	mov	r0, r6
   18818:	2300      	movs	r3, #0
   1881a:	f7fe fd1b 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   1881e:	b00f      	add	sp, #60	; 0x3c
   18820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018824 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE>:
   18824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18828:	b08d      	sub	sp, #52	; 0x34
   1882a:	468c      	mov	ip, r1
   1882c:	6801      	ldr	r1, [r0, #0]
   1882e:	f248 5e1f 	movw	lr, #34079	; 0x851f
   18832:	f64f 70cf 	movw	r0, #65487	; 0xffcf
   18836:	f242 7810 	movw	r8, #10000	; 0x2710
   1883a:	4541      	cmp	r1, r8
   1883c:	f2c5 1eeb 	movt	lr, #20971	; 0x51eb
   18840:	f2c0 0001 	movt	r0, #1
   18844:	d337      	bcc.n	188b6 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x92>
   18846:	f241 7959 	movw	r9, #5977	; 0x1759
   1884a:	f24e 07ff 	movw	r7, #57599	; 0xe0ff
   1884e:	f10d 0b0c 	add.w	fp, sp, #12
   18852:	2300      	movs	r3, #0
   18854:	f2cd 19b7 	movt	r9, #53687	; 0xd1b7
   18858:	f04f 0a64 	mov.w	sl, #100	; 0x64
   1885c:	f2c0 57f5 	movt	r7, #1525	; 0x5f5
   18860:	fba1 2409 	umull	r2, r4, r1, r9
   18864:	42b9      	cmp	r1, r7
   18866:	ea4f 3254 	mov.w	r2, r4, lsr #13
   1886a:	fb02 1418 	mls	r4, r2, r8, r1
   1886e:	4611      	mov	r1, r2
   18870:	b2a5      	uxth	r5, r4
   18872:	fba5 560e 	umull	r5, r6, r5, lr
   18876:	ea4f 1556 	mov.w	r5, r6, lsr #5
   1887a:	eb0b 0603 	add.w	r6, fp, r3
   1887e:	fb05 441a 	mls	r4, r5, sl, r4
   18882:	f830 5015 	ldrh.w	r5, [r0, r5, lsl #1]
   18886:	f1a3 0304 	sub.w	r3, r3, #4
   1888a:	f8a6 5023 	strh.w	r5, [r6, #35]	; 0x23
   1888e:	b2a4      	uxth	r4, r4
   18890:	f830 4014 	ldrh.w	r4, [r0, r4, lsl #1]
   18894:	f8a6 4025 	strh.w	r4, [r6, #37]	; 0x25
   18898:	d8e2      	bhi.n	18860 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x3c>
   1889a:	f103 0427 	add.w	r4, r3, #39	; 0x27
   1889e:	4611      	mov	r1, r2
   188a0:	2963      	cmp	r1, #99	; 0x63
   188a2:	dc0b      	bgt.n	188bc <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x98>
   188a4:	460b      	mov	r3, r1
   188a6:	2b0a      	cmp	r3, #10
   188a8:	db17      	blt.n	188da <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xb6>
   188aa:	1ea1      	subs	r1, r4, #2
   188ac:	f830 0013 	ldrh.w	r0, [r0, r3, lsl #1]
   188b0:	aa03      	add	r2, sp, #12
   188b2:	5250      	strh	r0, [r2, r1]
   188b4:	e016      	b.n	188e4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0xc0>
   188b6:	2427      	movs	r4, #39	; 0x27
   188b8:	2963      	cmp	r1, #99	; 0x63
   188ba:	ddf3      	ble.n	188a4 <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x80>
   188bc:	b28a      	uxth	r2, r1
   188be:	3c02      	subs	r4, #2
   188c0:	fba2 230e 	umull	r2, r3, r2, lr
   188c4:	2264      	movs	r2, #100	; 0x64
   188c6:	095b      	lsrs	r3, r3, #5
   188c8:	fb03 1112 	mls	r1, r3, r2, r1
   188cc:	aa03      	add	r2, sp, #12
   188ce:	b289      	uxth	r1, r1
   188d0:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
   188d4:	5311      	strh	r1, [r2, r4]
   188d6:	2b0a      	cmp	r3, #10
   188d8:	dae7      	bge.n	188aa <_ZN4core3fmt3num3imp52_$LT$impl$u20$core..fmt..Display$u20$for$u20$u32$GT$3fmt17hd4159f5408b7d33dE+0x86>
   188da:	1e61      	subs	r1, r4, #1
   188dc:	aa03      	add	r2, sp, #12
   188de:	f103 0030 	add.w	r0, r3, #48	; 0x30
   188e2:	5450      	strb	r0, [r2, r1]
   188e4:	f1c1 0027 	rsb	r0, r1, #39	; 0x27
   188e8:	aa03      	add	r2, sp, #12
   188ea:	4411      	add	r1, r2
   188ec:	f64f 5294 	movw	r2, #64916	; 0xfd94
   188f0:	e9cd 1000 	strd	r1, r0, [sp]
   188f4:	f2c0 0201 	movt	r2, #1
   188f8:	4660      	mov	r0, ip
   188fa:	2101      	movs	r1, #1
   188fc:	2300      	movs	r3, #0
   188fe:	f7fe fca9 	bl	17254 <_ZN4core3fmt9Formatter12pad_integral17hed5385fb7c53ef73E>
   18902:	b00d      	add	sp, #52	; 0x34
   18904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00018908 <_ZN42_$LT$$RF$T$u20$as$u20$core..fmt..Debug$GT$3fmt17h15e189c4c6f4a0a5E>:
   18908:	e9d0 2000 	ldrd	r2, r0, [r0]
   1890c:	68c3      	ldr	r3, [r0, #12]
   1890e:	4610      	mov	r0, r2
   18910:	4718      	bx	r3

00018912 <_ZN44_$LT$$RF$T$u20$as$u20$core..fmt..Display$GT$3fmt17h56db6a8fcd223d19E>:
   18912:	460b      	mov	r3, r1
   18914:	e9d0 1200 	ldrd	r1, r2, [r0]
   18918:	4618      	mov	r0, r3
   1891a:	f7fe bde3 	b.w	174e4 <_ZN4core3fmt9Formatter3pad17ha8b552b919fcc31bE>
	...

00018920 <__semihost>:
	//    openocd -f interface/stlink-v2.cfg -f target/stm32f1x.cfg -f scripts/debug.ocd

	//  Warning: This code will trigger a breakpoint and hang unless a debugger is connected.
	//  That's how ARM Semihosting sends a command to the debugger to print a message.
	//  This code MUST be disabled on production devices.
    if (!log_enabled) return -1;
   18920:	4b07      	ldr	r3, [pc, #28]	; (18940 <__semihost+0x20>)
   18922:	781b      	ldrb	r3, [r3, #0]
   18924:	b14b      	cbz	r3, 1893a <__semihost+0x1a>
static int __semihost(int command, void* message) {
   18926:	b410      	push	{r4}
   18928:	4602      	mov	r2, r0
   1892a:	460c      	mov	r4, r1
    __asm( 
   1892c:	4610      	mov	r0, r2
   1892e:	4621      	mov	r1, r4
   18930:	beab      	bkpt	0x00ab
		[cmd] "r" (command), 
		[msg] "r" (message)
	:  //  Clobbered register list:
		"r0", "r1", "memory"
	);
	return 0;  //  TODO
   18932:	2000      	movs	r0, #0
}
   18934:	f85d 4b04 	ldr.w	r4, [sp], #4
   18938:	4770      	bx	lr
    if (!log_enabled) return -1;
   1893a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1893e:	4770      	bx	lr
   18940:	20000100 	.word	0x20000100

00018944 <debugger_connected>:
// #define SYS_RENAME (0xf)
// #define SYS_EXIT   (0x18)

static int debugger_connected(void) {
    //  Return non-zero if debugger is connected. From repos/apache-mynewt-core/hw/mcu/ambiq/apollo2/src/hal_system.c
    return CoreDebug->DHCSR & CoreDebug_DHCSR_C_DEBUGEN_Msk;
   18944:	4b02      	ldr	r3, [pc, #8]	; (18950 <debugger_connected+0xc>)
   18946:	6818      	ldr	r0, [r3, #0]
}
   18948:	f000 0001 	and.w	r0, r0, #1
   1894c:	4770      	bx	lr
   1894e:	bf00      	nop
   18950:	e000edf0 	.word	0xe000edf0

00018954 <semihost_write>:
#endif  //  !DISABLE_SEMIHOSTING

// We normally set the file handle to 2 to write to the debugger's stderr output.
#define SEMIHOST_HANDLE 2

static int semihost_write(uint32_t fh, const unsigned char *buffer, unsigned int length) {
   18954:	b570      	push	{r4, r5, r6, lr}
   18956:	b084      	sub	sp, #16
   18958:	4606      	mov	r6, r0
   1895a:	460d      	mov	r5, r1
   1895c:	4614      	mov	r4, r2
    //  Write "length" number of bytes from "buffer" to the debugger's file handle fh.
    //  We normally set fh=2 to write to the debugger's stderr output.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return 0;               //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    if (!debugger_connected()) { return 0; }  //  If debugger is not connected, quit.
   1895e:	f7ff fff1 	bl	18944 <debugger_connected>
   18962:	4603      	mov	r3, r0
   18964:	b108      	cbz	r0, 1896a <semihost_write+0x16>
    if (length == 0) { return 0; }
   18966:	b91c      	cbnz	r4, 18970 <semihost_write+0x1c>
   18968:	2300      	movs	r3, #0
    args[0] = (uint32_t)fh;
    args[1] = (uint32_t)buffer;
    args[2] = (uint32_t)length;
    return __semihost(SYS_WRITE, args);
#endif  //  DISABLE_SEMIHOSTING
}
   1896a:	4618      	mov	r0, r3
   1896c:	b004      	add	sp, #16
   1896e:	bd70      	pop	{r4, r5, r6, pc}
    args[0] = (uint32_t)fh;
   18970:	9601      	str	r6, [sp, #4]
    args[1] = (uint32_t)buffer;
   18972:	9502      	str	r5, [sp, #8]
    args[2] = (uint32_t)length;
   18974:	9403      	str	r4, [sp, #12]
    return __semihost(SYS_WRITE, args);
   18976:	a901      	add	r1, sp, #4
   18978:	2005      	movs	r0, #5
   1897a:	f7ff ffd1 	bl	18920 <__semihost>
   1897e:	4603      	mov	r3, r0
   18980:	e7f3      	b.n	1896a <semihost_write+0x16>
	...

00018984 <console_flush>:

static struct os_mbuf *semihost_mbuf = NULL;

void console_flush(void) {
   18984:	b538      	push	{r3, r4, r5, lr}
    //  Flush output buffer to the console log.  This will be slow.
    if (!log_enabled) { return; }       //  Skip if log not enabled.
   18986:	4b0e      	ldr	r3, [pc, #56]	; (189c0 <console_flush+0x3c>)
   18988:	781b      	ldrb	r3, [r3, #0]
   1898a:	b1bb      	cbz	r3, 189bc <console_flush+0x38>
    if (!semihost_mbuf) { return; }     //  Buffer is empty, nothing to write.
   1898c:	4b0d      	ldr	r3, [pc, #52]	; (189c4 <console_flush+0x40>)
   1898e:	681d      	ldr	r5, [r3, #0]
   18990:	b1a5      	cbz	r5, 189bc <console_flush+0x38>
#endif

static inline int
os_arch_in_isr(void)
{
    return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   18992:	4b0d      	ldr	r3, [pc, #52]	; (189c8 <console_flush+0x44>)
   18994:	685b      	ldr	r3, [r3, #4]
   18996:	f3c3 0308 	ubfx	r3, r3, #0, #9
    if (os_arch_in_isr()) { return; }   //  Don't flush if we are called during an interrupt.
   1899a:	b97b      	cbnz	r3, 189bc <console_flush+0x38>

    //  Swap mbufs first to prevent concurrency problems.
    struct os_mbuf *old = semihost_mbuf;
    semihost_mbuf = NULL;
   1899c:	4b09      	ldr	r3, [pc, #36]	; (189c4 <console_flush+0x40>)
   1899e:	2200      	movs	r2, #0
   189a0:	601a      	str	r2, [r3, #0]

    struct os_mbuf *m = old;
   189a2:	462c      	mov	r4, r5
    while (m) {  //  For each mbuf in the chain...
   189a4:	e005      	b.n	189b2 <console_flush+0x2e>
        const unsigned char *data = OS_MBUF_DATA(m, const unsigned char *);  //  Fetch the data.
        int size = m->om_len;                         //  Fetch the size.
        semihost_write(SEMIHOST_HANDLE, data, size);  //  Write the data to Semihosting output.
   189a6:	88e2      	ldrh	r2, [r4, #6]
   189a8:	6821      	ldr	r1, [r4, #0]
   189aa:	2002      	movs	r0, #2
   189ac:	f7ff ffd2 	bl	18954 <semihost_write>
        m = m->om_next.sle_next;                      //  Fetch next mbuf in the chain.
   189b0:	68e4      	ldr	r4, [r4, #12]
    while (m) {  //  For each mbuf in the chain...
   189b2:	2c00      	cmp	r4, #0
   189b4:	d1f7      	bne.n	189a6 <console_flush+0x22>
    }
    if (old) { os_mbuf_free_chain(old); }  //  Deallocate the old chain.
   189b6:	4628      	mov	r0, r5
   189b8:	f001 fbfc 	bl	1a1b4 <os_mbuf_free_chain>
}
   189bc:	bd38      	pop	{r3, r4, r5, pc}
   189be:	bf00      	nop
   189c0:	20000100 	.word	0x20000100
   189c4:	20004704 	.word	0x20004704
   189c8:	e000ed00 	.word	0xe000ed00

000189cc <disable_buffer>:
void disable_buffer(void) { buffer_enabled = false; console_flush(); }  //  Disable buffering.
   189cc:	b508      	push	{r3, lr}
   189ce:	f7ff ffd9 	bl	18984 <console_flush>
   189d2:	bd08      	pop	{r3, pc}

000189d4 <console_buffer>:

void console_buffer(const char *buffer, unsigned int length) {
   189d4:	b538      	push	{r3, r4, r5, lr}
    //  Append "length" number of bytes from "buffer" to the output buffer.
#ifdef DISABLE_SEMIHOSTING  //  If Arm Semihosting is disabled...
    return;                 //  Don't write debug messages.
#else                       //  If Arm Semihosting is enabled...
    int rc;
    if (!log_enabled) { return; }           //  Skip if log not enabled.
   189d6:	4b12      	ldr	r3, [pc, #72]	; (18a20 <console_buffer+0x4c>)
   189d8:	781b      	ldrb	r3, [r3, #0]
   189da:	b903      	cbnz	r3, 189de <console_buffer+0xa>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
    //  Append the data to the mbuf chain.  This may increase the numbere of mbufs in the chain.
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
    if (rc) { return; }  //  If out of memory, quit.
#endif  //  DISABLE_SEMIHOSTING
}
   189dc:	bd38      	pop	{r3, r4, r5, pc}
   189de:	460d      	mov	r5, r1
   189e0:	4604      	mov	r4, r0
    if (!debugger_connected()) { return; }  //  If debugger is not connected, quit.
   189e2:	f7ff ffaf 	bl	18944 <debugger_connected>
   189e6:	2800      	cmp	r0, #0
   189e8:	d0f8      	beq.n	189dc <console_buffer+0x8>
    if (!semihost_mbuf) {                   //  Allocate mbuf if not already allocated.
   189ea:	4b0e      	ldr	r3, [pc, #56]	; (18a24 <console_buffer+0x50>)
   189ec:	681b      	ldr	r3, [r3, #0]
   189ee:	b173      	cbz	r3, 18a0e <console_buffer+0x3a>
    if (os_mbuf_len(semihost_mbuf) + length >= OUTPUT_BUFFER_SIZE) { return; }
   189f0:	4b0c      	ldr	r3, [pc, #48]	; (18a24 <console_buffer+0x50>)
   189f2:	6818      	ldr	r0, [r3, #0]
   189f4:	f001 fbf0 	bl	1a1d8 <os_mbuf_len>
   189f8:	4428      	add	r0, r5
   189fa:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
   189fe:	d2ed      	bcs.n	189dc <console_buffer+0x8>
    rc = os_mbuf_append(semihost_mbuf, buffer, length);
   18a00:	b2aa      	uxth	r2, r5
   18a02:	4621      	mov	r1, r4
   18a04:	4b07      	ldr	r3, [pc, #28]	; (18a24 <console_buffer+0x50>)
   18a06:	6818      	ldr	r0, [r3, #0]
   18a08:	f001 fbf0 	bl	1a1ec <os_mbuf_append>
   18a0c:	e7e6      	b.n	189dc <console_buffer+0x8>
        semihost_mbuf = os_msys_get_pkthdr(length, 0);
   18a0e:	2100      	movs	r1, #0
   18a10:	b2a8      	uxth	r0, r5
   18a12:	f001 fd93 	bl	1a53c <os_msys_get_pkthdr>
   18a16:	4b03      	ldr	r3, [pc, #12]	; (18a24 <console_buffer+0x50>)
   18a18:	6018      	str	r0, [r3, #0]
        if (!semihost_mbuf) { return; }  //  If out of memory, quit.
   18a1a:	2800      	cmp	r0, #0
   18a1c:	d1e8      	bne.n	189f0 <console_buffer+0x1c>
   18a1e:	e7dd      	b.n	189dc <console_buffer+0x8>
   18a20:	20000100 	.word	0x20000100
   18a24:	20004704 	.word	0x20004704

00018a28 <semihosting_console_write_ch>:
    float f_abs = *neg ? -f : f;          //  Absolute value of f
    *i = (int) f_abs;                     //  Integer part
    *d = ((int) (1000000.0f * f_abs)) % 1000000;  //  6 decimal places
}

static void semihosting_console_write_ch(char c) {
   18a28:	b500      	push	{lr}
   18a2a:	b083      	sub	sp, #12
   18a2c:	f88d 0007 	strb.w	r0, [sp, #7]
    if (c == '\r') { return; }  //  Don't display \r.
   18a30:	280d      	cmp	r0, #13
   18a32:	d004      	beq.n	18a3e <semihosting_console_write_ch+0x16>
    console_buffer(&c, 1);  //  Append the char to the output buffer.
   18a34:	2101      	movs	r1, #1
   18a36:	f10d 0007 	add.w	r0, sp, #7
   18a3a:	f7ff ffcb 	bl	189d4 <console_buffer>
    //  if (c == '\n') { console_flush(); }  //  If we see a newline, flush the buffer.
}
   18a3e:	b003      	add	sp, #12
   18a40:	f85d fb04 	ldr.w	pc, [sp], #4

00018a44 <console_printhex>:
void console_printhex(uint8_t v) {
   18a44:	b510      	push	{r4, lr}
   18a46:	b082      	sub	sp, #8
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18a48:	2310      	movs	r3, #16
    int length = 0;
   18a4a:	2200      	movs	r2, #0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18a4c:	e005      	b.n	18a5a <console_printhex+0x16>
        v = v % divisor;
   18a4e:	fbb0 f1f3 	udiv	r1, r0, r3
   18a52:	fb03 0011 	mls	r0, r3, r1, r0
   18a56:	b2c0      	uxtb	r0, r0
    for(uint8_t divisor = 16; divisor >= 1; divisor = divisor / 16) {
   18a58:	091b      	lsrs	r3, r3, #4
   18a5a:	b18b      	cbz	r3, 18a80 <console_printhex+0x3c>
        char digit = '0' + (char)(v / divisor);
   18a5c:	fbb0 f4f3 	udiv	r4, r0, r3
   18a60:	f104 0130 	add.w	r1, r4, #48	; 0x30
   18a64:	b2c9      	uxtb	r1, r1
        if (digit > '9') { digit = digit - 10 - '0' + 'a'; }
   18a66:	2939      	cmp	r1, #57	; 0x39
   18a68:	d902      	bls.n	18a70 <console_printhex+0x2c>
   18a6a:	f104 0157 	add.w	r1, r4, #87	; 0x57
   18a6e:	b2c9      	uxtb	r1, r1
            if (length < size) {
   18a70:	2a02      	cmp	r2, #2
   18a72:	dcec      	bgt.n	18a4e <console_printhex+0xa>
                buffer[length++] = digit;
   18a74:	ac02      	add	r4, sp, #8
   18a76:	4414      	add	r4, r2
   18a78:	f804 1c04 	strb.w	r1, [r4, #-4]
   18a7c:	3201      	adds	r2, #1
   18a7e:	e7e6      	b.n	18a4e <console_printhex+0xa>
    if (length == 0) { buffer[length++] = '0'; };
   18a80:	b92a      	cbnz	r2, 18a8e <console_printhex+0x4a>
   18a82:	ab02      	add	r3, sp, #8
   18a84:	4413      	add	r3, r2
   18a86:	2130      	movs	r1, #48	; 0x30
   18a88:	f803 1c04 	strb.w	r1, [r3, #-4]
   18a8c:	3201      	adds	r2, #1
    if (length < size) buffer[length] = 0;
   18a8e:	2a02      	cmp	r2, #2
   18a90:	dc04      	bgt.n	18a9c <console_printhex+0x58>
   18a92:	ab02      	add	r3, sp, #8
   18a94:	441a      	add	r2, r3
   18a96:	2300      	movs	r3, #0
   18a98:	f802 3c04 	strb.w	r3, [r2, #-4]
    buffer[size - 1] = 0;  //  Terminate in case of overflow.
   18a9c:	2300      	movs	r3, #0
   18a9e:	f88d 3006 	strb.w	r3, [sp, #6]
    console_buffer(buffer, strlen(buffer));
   18aa2:	a801      	add	r0, sp, #4
   18aa4:	f002 fb73 	bl	1b18e <strlen>
   18aa8:	4601      	mov	r1, r0
   18aaa:	a801      	add	r0, sp, #4
   18aac:	f7ff ff92 	bl	189d4 <console_buffer>
}
   18ab0:	b002      	add	sp, #8
   18ab2:	bd10      	pop	{r4, pc}

00018ab4 <console_printint>:
void console_printint(int i) {
   18ab4:	b508      	push	{r3, lr}
    console_printf("%d", i);
   18ab6:	4601      	mov	r1, r0
   18ab8:	4801      	ldr	r0, [pc, #4]	; (18ac0 <console_printint+0xc>)
   18aba:	f000 f873 	bl	18ba4 <console_printf>
}
   18abe:	bd08      	pop	{r3, pc}
   18ac0:	00020f94 	.word	0x00020f94

00018ac4 <console_dump>:
    if (buffer == NULL || len == 0) { return; }
   18ac4:	b180      	cbz	r0, 18ae8 <console_dump+0x24>
void console_dump(const uint8_t *buffer, unsigned int len) {
   18ac6:	b570      	push	{r4, r5, r6, lr}
   18ac8:	4606      	mov	r6, r0
    if (buffer == NULL || len == 0) { return; }
   18aca:	b161      	cbz	r1, 18ae6 <console_dump+0x22>
   18acc:	460d      	mov	r5, r1
	for (int i = 0; i < len; i++) { console_printhex(buffer[i]); console_buffer(" ", 1); } 
   18ace:	2400      	movs	r4, #0
   18ad0:	e007      	b.n	18ae2 <console_dump+0x1e>
   18ad2:	5d30      	ldrb	r0, [r6, r4]
   18ad4:	f7ff ffb6 	bl	18a44 <console_printhex>
   18ad8:	2101      	movs	r1, #1
   18ada:	4804      	ldr	r0, [pc, #16]	; (18aec <console_dump+0x28>)
   18adc:	f7ff ff7a 	bl	189d4 <console_buffer>
   18ae0:	3401      	adds	r4, #1
   18ae2:	42ac      	cmp	r4, r5
   18ae4:	d3f5      	bcc.n	18ad2 <console_dump+0xe>
}
   18ae6:	bd70      	pop	{r4, r5, r6, pc}
   18ae8:	4770      	bx	lr
   18aea:	bf00      	nop
   18aec:	00020f90 	.word	0x00020f90

00018af0 <console_out_nolock>:

int console_out_nolock(int character) {
   18af0:	b538      	push	{r3, r4, r5, lr}
    char c = (char)character;
   18af2:	b2c5      	uxtb	r5, r0
    if (g_silence_console) { return c; }
   18af4:	4b0b      	ldr	r3, [pc, #44]	; (18b24 <console_out_nolock+0x34>)
   18af6:	781b      	ldrb	r3, [r3, #0]
   18af8:	b953      	cbnz	r3, 18b10 <console_out_nolock+0x20>
   18afa:	4604      	mov	r4, r0
    if ('\n' == c) {
   18afc:	2d0a      	cmp	r5, #10
   18afe:	d009      	beq.n	18b14 <console_out_nolock+0x24>
        semihosting_console_write_ch('\r');
        console_is_midline = 0;
    } else {
        console_is_midline = 1;
   18b00:	4b09      	ldr	r3, [pc, #36]	; (18b28 <console_out_nolock+0x38>)
   18b02:	2201      	movs	r2, #1
   18b04:	601a      	str	r2, [r3, #0]
    }
    semihosting_console_write_ch(c);
   18b06:	4628      	mov	r0, r5
   18b08:	f7ff ff8e 	bl	18a28 <semihosting_console_write_ch>
    return character;
   18b0c:	4620      	mov	r0, r4
}
   18b0e:	bd38      	pop	{r3, r4, r5, pc}
   18b10:	4628      	mov	r0, r5
    if (g_silence_console) { return c; }
   18b12:	e7fc      	b.n	18b0e <console_out_nolock+0x1e>
        semihosting_console_write_ch('\r');
   18b14:	200d      	movs	r0, #13
   18b16:	f7ff ff87 	bl	18a28 <semihosting_console_write_ch>
        console_is_midline = 0;
   18b1a:	4b03      	ldr	r3, [pc, #12]	; (18b28 <console_out_nolock+0x38>)
   18b1c:	2200      	movs	r2, #0
   18b1e:	601a      	str	r2, [r3, #0]
   18b20:	e7f1      	b.n	18b06 <console_out_nolock+0x16>
   18b22:	bf00      	nop
   18b24:	2000d5b4 	.word	0x2000d5b4
   18b28:	2000d5b8 	.word	0x2000d5b8

00018b2c <semihosting_console_init>:

void console_rx_restart(void) {}

int semihosting_console_is_init(void) { return 1; }

int semihosting_console_init(void) { return 0; }
   18b2c:	2000      	movs	r0, #0
   18b2e:	4770      	bx	lr

00018b30 <console_write>:

int console_unlock(void) { return OS_OK; }

int console_out(int c) { return console_out_nolock(c); }

void console_write(const char *str, int cnt) {
   18b30:	b570      	push	{r4, r5, r6, lr}
   18b32:	4606      	mov	r6, r0
   18b34:	460d      	mov	r5, r1
    int i;
    for (i = 0; i < cnt; i++) {
   18b36:	2400      	movs	r4, #0
   18b38:	42ac      	cmp	r4, r5
   18b3a:	da07      	bge.n	18b4c <console_write+0x1c>
        if (console_out_nolock((int)str[i]) == EOF) { break; }
   18b3c:	5d30      	ldrb	r0, [r6, r4]
   18b3e:	f7ff ffd7 	bl	18af0 <console_out_nolock>
   18b42:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   18b46:	d001      	beq.n	18b4c <console_write+0x1c>
    for (i = 0; i < cnt; i++) {
   18b48:	3401      	adds	r4, #1
   18b4a:	e7f5      	b.n	18b38 <console_write+0x8>
    }
}
   18b4c:	bd70      	pop	{r4, r5, r6, pc}

00018b4e <console_blocking_mode>:

void console_blocking_mode(void) {
   18b4e:	b508      	push	{r3, lr}
    disable_buffer();
   18b50:	f7ff ff3c 	bl	189cc <disable_buffer>
}
   18b54:	bd08      	pop	{r3, pc}
	...

00018b58 <console_pkg_init>:

void console_deinit(void) {}

void console_reinit(void) {}

void console_pkg_init(void) {
   18b58:	b510      	push	{r4, lr}
   18b5a:	b082      	sub	sp, #8
    int rc = 0;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   18b5c:	4b0d      	ldr	r3, [pc, #52]	; (18b94 <console_pkg_init+0x3c>)
   18b5e:	781b      	ldrb	r3, [r3, #0]
   18b60:	b193      	cbz	r3, 18b88 <console_pkg_init+0x30>

    os_eventq_init(&avail_queue);
   18b62:	480d      	ldr	r0, [pc, #52]	; (18b98 <console_pkg_init+0x40>)
   18b64:	f001 f9fa 	bl	19f5c <os_eventq_init>
    os_mutex_init(&console_write_lock);
   18b68:	480c      	ldr	r0, [pc, #48]	; (18b9c <console_pkg_init+0x44>)
   18b6a:	f001 fd15 	bl	1a598 <os_mutex_init>

#if MYNEWT_VAL(CONSOLE_SEMIHOSTING)
    rc = semihosting_console_init();
   18b6e:	f7ff ffdd 	bl	18b2c <semihosting_console_init>
#endif
    SYSINIT_PANIC_ASSERT(rc == 0);
   18b72:	b138      	cbz	r0, 18b84 <console_pkg_init+0x2c>
   18b74:	2000      	movs	r0, #0
   18b76:	9000      	str	r0, [sp, #0]
   18b78:	4b09      	ldr	r3, [pc, #36]	; (18ba0 <console_pkg_init+0x48>)
   18b7a:	681c      	ldr	r4, [r3, #0]
   18b7c:	4603      	mov	r3, r0
   18b7e:	4602      	mov	r2, r0
   18b80:	4601      	mov	r1, r0
   18b82:	47a0      	blx	r4
}
   18b84:	b002      	add	sp, #8
   18b86:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   18b88:	461a      	mov	r2, r3
   18b8a:	4619      	mov	r1, r3
   18b8c:	4618      	mov	r0, r3
   18b8e:	f000 fed1 	bl	19934 <__assert_func>
   18b92:	bf00      	nop
   18b94:	2000d5bc 	.word	0x2000d5bc
   18b98:	20004708 	.word	0x20004708
   18b9c:	20004718 	.word	0x20004718
   18ba0:	20000104 	.word	0x20000104

00018ba4 <console_printf>:
 *                                  unlimited.  This return value is analogous
 *                                  to that of snprintf.
 */
int
console_printf(const char *fmt, ...)
{
   18ba4:	b40f      	push	{r0, r1, r2, r3}
   18ba6:	b510      	push	{r4, lr}
   18ba8:	b082      	sub	sp, #8
    va_list args;
    int num_chars;

    num_chars = 0;

    if (console_get_ticks()) {
   18baa:	f000 f81f 	bl	18bec <console_get_ticks>
   18bae:	b160      	cbz	r0, 18bca <console_printf+0x26>
        /* Prefix each line with a timestamp. */
        if (!console_is_midline) {
   18bb0:	4b0c      	ldr	r3, [pc, #48]	; (18be4 <console_printf+0x40>)
   18bb2:	681b      	ldr	r3, [r3, #0]
   18bb4:	b10b      	cbz	r3, 18bba <console_printf+0x16>
    num_chars = 0;
   18bb6:	2400      	movs	r4, #0
   18bb8:	e008      	b.n	18bcc <console_printf+0x28>
            num_chars += printf("%06lu ", (unsigned long)os_time_get());
   18bba:	f002 f8d9 	bl	1ad70 <os_time_get>
   18bbe:	4601      	mov	r1, r0
   18bc0:	4809      	ldr	r0, [pc, #36]	; (18be8 <console_printf+0x44>)
   18bc2:	f002 fd97 	bl	1b6f4 <printf>
   18bc6:	4604      	mov	r4, r0
   18bc8:	e000      	b.n	18bcc <console_printf+0x28>
    num_chars = 0;
   18bca:	2400      	movs	r4, #0
        }
    }

    va_start(args, fmt);
   18bcc:	a905      	add	r1, sp, #20
   18bce:	9101      	str	r1, [sp, #4]
    num_chars += vprintf(fmt, args);
   18bd0:	9804      	ldr	r0, [sp, #16]
   18bd2:	f002 fdbf 	bl	1b754 <vprintf>
    va_end(args);

    return num_chars;
}
   18bd6:	4420      	add	r0, r4
   18bd8:	b002      	add	sp, #8
   18bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18bde:	b004      	add	sp, #16
   18be0:	4770      	bx	lr
   18be2:	bf00      	nop
   18be4:	2000d5b8 	.word	0x2000d5b8
   18be8:	00020f98 	.word	0x00020f98

00018bec <console_get_ticks>:

/* return value of CONSOLE_TICKS */
char console_get_ticks(void)
{
    return do_ticks;
}
   18bec:	4b01      	ldr	r3, [pc, #4]	; (18bf4 <console_get_ticks+0x8>)
   18bee:	7818      	ldrb	r0, [r3, #0]
   18bf0:	4770      	bx	lr
   18bf2:	bf00      	nop
   18bf4:	20004724 	.word	0x20004724

00018bf8 <sysinit_dflt_panic_cb>:
#include "os/mynewt.h"

static void
sysinit_dflt_panic_cb(const char *file, int line, const char *func,
                      const char *expr, const char *msg)
{
   18bf8:	b508      	push	{r3, lr}
    if (msg != NULL) {
        fprintf(stderr, "sysinit failure: %s\n", msg);
    }
#endif

    __assert_func(file, line, func, expr);
   18bfa:	f000 fe9b 	bl	19934 <__assert_func>
	...

00018c00 <sysinit_start>:
}

void
sysinit_start(void)
{
    sysinit_active = 1;
   18c00:	4b01      	ldr	r3, [pc, #4]	; (18c08 <sysinit_start+0x8>)
   18c02:	2201      	movs	r2, #1
   18c04:	701a      	strb	r2, [r3, #0]
}
   18c06:	4770      	bx	lr
   18c08:	2000d5bc 	.word	0x2000d5bc

00018c0c <sysinit_end>:

void
sysinit_end(void)
{
    sysinit_active = 0;
   18c0c:	4b01      	ldr	r3, [pc, #4]	; (18c14 <sysinit_end+0x8>)
   18c0e:	2200      	movs	r2, #0
   18c10:	701a      	strb	r2, [r3, #0]
}
   18c12:	4770      	bx	lr
   18c14:	2000d5bc 	.word	0x2000d5bc

00018c18 <NVIC_Relocate>:
     * designated in the linker script.
     */
    current_location = (uint32_t *)&__isr_vector;
    new_location = (uint32_t *)&__vector_tbl_reloc__;

    if (new_location != current_location) {
   18c18:	4a09      	ldr	r2, [pc, #36]	; (18c40 <NVIC_Relocate+0x28>)
   18c1a:	4b0a      	ldr	r3, [pc, #40]	; (18c44 <NVIC_Relocate+0x2c>)
   18c1c:	429a      	cmp	r2, r3
   18c1e:	d00a      	beq.n	18c36 <NVIC_Relocate+0x1e>
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18c20:	2300      	movs	r3, #0
   18c22:	e006      	b.n	18c32 <NVIC_Relocate+0x1a>
            new_location[i] = current_location[i];
   18c24:	4a07      	ldr	r2, [pc, #28]	; (18c44 <NVIC_Relocate+0x2c>)
   18c26:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
   18c2a:	4a05      	ldr	r2, [pc, #20]	; (18c40 <NVIC_Relocate+0x28>)
   18c2c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (i = 0; i < NVIC_NUM_VECTORS; i++) {
   18c30:	3301      	adds	r3, #1
   18c32:	2b35      	cmp	r3, #53	; 0x35
   18c34:	ddf6      	ble.n	18c24 <NVIC_Relocate+0xc>
    }

    /* Set VTOR except for M0 */
#if ((__CORTEX_M == 0) && (__VTOR_PRESENT == 0))
#else
    SCB->VTOR = (uint32_t)&__vector_tbl_reloc__;
   18c36:	4a02      	ldr	r2, [pc, #8]	; (18c40 <NVIC_Relocate+0x28>)
   18c38:	4b03      	ldr	r3, [pc, #12]	; (18c48 <NVIC_Relocate+0x30>)
   18c3a:	609a      	str	r2, [r3, #8]
#endif
}
   18c3c:	4770      	bx	lr
   18c3e:	bf00      	nop
   18c40:	20000000 	.word	0x20000000
   18c44:	00008020 	.word	0x00008020
   18c48:	e000ed00 	.word	0xe000ed00

00018c4c <hal_gpio_irq_handler>:
 *
 * @param index
 */
static void
hal_gpio_irq_handler(void)
{
   18c4c:	b510      	push	{r4, lr}
#if NRF52840_XXAA
    gpio_state |= (uint64_t)NRF_P1->IN << 32;
#endif
#endif

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18c4e:	2400      	movs	r4, #0
   18c50:	e000      	b.n	18c54 <hal_gpio_irq_handler+0x8>
   18c52:	3401      	adds	r4, #1
   18c54:	2c07      	cmp	r4, #7
   18c56:	dc1c      	bgt.n	18c92 <hal_gpio_irq_handler+0x46>
        if ((hal_gpio_irqs[i].sense_trig == HAL_GPIO_SENSE_TRIG_BOTH) ||
            (hal_gpio_irqs[i].sense_trig == sense_trig)) {
            hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
        }
#else
        if (NRF_GPIOTE->EVENTS_IN[i] && (NRF_GPIOTE->INTENSET & (1 << i))) {
   18c58:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18c5c:	4a0d      	ldr	r2, [pc, #52]	; (18c94 <hal_gpio_irq_handler+0x48>)
   18c5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18c62:	2b00      	cmp	r3, #0
   18c64:	d0f5      	beq.n	18c52 <hal_gpio_irq_handler+0x6>
   18c66:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
   18c6a:	2301      	movs	r3, #1
   18c6c:	40a3      	lsls	r3, r4
   18c6e:	421a      	tst	r2, r3
   18c70:	d0ef      	beq.n	18c52 <hal_gpio_irq_handler+0x6>
            NRF_GPIOTE->EVENTS_IN[i] = 0;
   18c72:	f104 0340 	add.w	r3, r4, #64	; 0x40
   18c76:	4a07      	ldr	r2, [pc, #28]	; (18c94 <hal_gpio_irq_handler+0x48>)
   18c78:	2100      	movs	r1, #0
   18c7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            if (hal_gpio_irqs[i].func) {
   18c7e:	4b06      	ldr	r3, [pc, #24]	; (18c98 <hal_gpio_irq_handler+0x4c>)
   18c80:	f853 2034 	ldr.w	r2, [r3, r4, lsl #3]
   18c84:	2a00      	cmp	r2, #0
   18c86:	d0e4      	beq.n	18c52 <hal_gpio_irq_handler+0x6>
                hal_gpio_irqs[i].func(hal_gpio_irqs[i].arg);
   18c88:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18c8c:	6858      	ldr	r0, [r3, #4]
   18c8e:	4790      	blx	r2
   18c90:	e7df      	b.n	18c52 <hal_gpio_irq_handler+0x6>
        }
#endif
    }

    os_trace_isr_exit();
}
   18c92:	bd10      	pop	{r4, pc}
   18c94:	40006000 	.word	0x40006000
   18c98:	20004728 	.word	0x20004728

00018c9c <hal_gpio_irq_setup>:
static void
hal_gpio_irq_setup(void)
{
    static uint8_t irq_setup = 0;

    if (!irq_setup) {
   18c9c:	4b06      	ldr	r3, [pc, #24]	; (18cb8 <hal_gpio_irq_setup+0x1c>)
   18c9e:	781b      	ldrb	r3, [r3, #0]
   18ca0:	b94b      	cbnz	r3, 18cb6 <hal_gpio_irq_setup+0x1a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   18ca2:	4b06      	ldr	r3, [pc, #24]	; (18cbc <hal_gpio_irq_setup+0x20>)
   18ca4:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   18ca6:	4a06      	ldr	r2, [pc, #24]	; (18cc0 <hal_gpio_irq_setup+0x24>)
   18ca8:	659a      	str	r2, [r3, #88]	; 0x58
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   18caa:	4b06      	ldr	r3, [pc, #24]	; (18cc4 <hal_gpio_irq_setup+0x28>)
   18cac:	2240      	movs	r2, #64	; 0x40
   18cae:	601a      	str	r2, [r3, #0]
        NVIC_SetVector(GPIOTE_IRQn, (uint32_t)hal_gpio_irq_handler);
        NVIC_EnableIRQ(GPIOTE_IRQn);
        irq_setup = 1;
   18cb0:	4b01      	ldr	r3, [pc, #4]	; (18cb8 <hal_gpio_irq_setup+0x1c>)
   18cb2:	2201      	movs	r2, #1
   18cb4:	701a      	strb	r2, [r3, #0]
#if MYNEWT_VAL(MCU_GPIO_USE_PORT_EVENT)
        NRF_GPIOTE->INTENCLR = GPIOTE_INTENCLR_PORT_Msk;
        NRF_GPIOTE->EVENTS_PORT = 0;
#endif
    }
}
   18cb6:	4770      	bx	lr
   18cb8:	20004768 	.word	0x20004768
   18cbc:	e000ed00 	.word	0xe000ed00
   18cc0:	00018c4d 	.word	0x00018c4d
   18cc4:	e000e100 	.word	0xe000e100

00018cc8 <hal_gpio_find_empty_slot>:
static int
hal_gpio_find_empty_slot(void)
{
    int i;

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18cc8:	2000      	movs	r0, #0
   18cca:	2807      	cmp	r0, #7
   18ccc:	dc05      	bgt.n	18cda <hal_gpio_find_empty_slot+0x12>
        if (hal_gpio_irqs[i].func == NULL) {
   18cce:	4b04      	ldr	r3, [pc, #16]	; (18ce0 <hal_gpio_find_empty_slot+0x18>)
   18cd0:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18cd4:	b11b      	cbz	r3, 18cde <hal_gpio_find_empty_slot+0x16>
    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18cd6:	3001      	adds	r0, #1
   18cd8:	e7f7      	b.n	18cca <hal_gpio_find_empty_slot+0x2>
            return i;
        }
    }
    return -1;
   18cda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18cde:	4770      	bx	lr
   18ce0:	20004728 	.word	0x20004728

00018ce4 <hal_gpio_find_pin>:
        if (hal_gpio_irqs[i].func && hal_gpio_irqs[i].pin == pin) {
            return i;
        }
    }
#else
    pin = pin << GPIOTE_CONFIG_PSEL_Pos;
   18ce4:	0201      	lsls	r1, r0, #8

    for (i = 0; i < HAL_GPIO_MAX_IRQ; i++) {
   18ce6:	2000      	movs	r0, #0
   18ce8:	e000      	b.n	18cec <hal_gpio_find_pin+0x8>
   18cea:	3001      	adds	r0, #1
   18cec:	2807      	cmp	r0, #7
   18cee:	dc0e      	bgt.n	18d0e <hal_gpio_find_pin+0x2a>
        if (hal_gpio_irqs[i].func &&
   18cf0:	4b08      	ldr	r3, [pc, #32]	; (18d14 <hal_gpio_find_pin+0x30>)
   18cf2:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
   18cf6:	2b00      	cmp	r3, #0
   18cf8:	d0f7      	beq.n	18cea <hal_gpio_find_pin+0x6>
           (NRF_GPIOTE->CONFIG[i] & HAL_GPIOTE_PIN_MASK) == pin) {
   18cfa:	f500 73a2 	add.w	r3, r0, #324	; 0x144
   18cfe:	4a06      	ldr	r2, [pc, #24]	; (18d18 <hal_gpio_find_pin+0x34>)
   18d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   18d04:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
        if (hal_gpio_irqs[i].func &&
   18d08:	428b      	cmp	r3, r1
   18d0a:	d1ee      	bne.n	18cea <hal_gpio_find_pin+0x6>
   18d0c:	e001      	b.n	18d12 <hal_gpio_find_pin+0x2e>
            return i;
        }
    }
#endif

    return -1;
   18d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   18d12:	4770      	bx	lr
   18d14:	20004728 	.word	0x20004728
   18d18:	40006000 	.word	0x40006000

00018d1c <hal_gpio_init_in>:
    switch (pull) {
   18d1c:	2901      	cmp	r1, #1
   18d1e:	d003      	beq.n	18d28 <hal_gpio_init_in+0xc>
   18d20:	2902      	cmp	r1, #2
   18d22:	d00f      	beq.n	18d44 <hal_gpio_init_in+0x28>
        conf = 0;
   18d24:	2100      	movs	r1, #0
        break;
   18d26:	e000      	b.n	18d2a <hal_gpio_init_in+0xe>
        conf = GPIO_PIN_CNF_PULL_Pullup << GPIO_PIN_CNF_PULL_Pos;
   18d28:	210c      	movs	r1, #12
    port->PIN_CNF[pin_index] = conf;
   18d2a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d2e:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18d32:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRCLR = HAL_GPIO_MASK(pin);
   18d36:	2301      	movs	r3, #1
   18d38:	fa03 f000 	lsl.w	r0, r3, r0
   18d3c:	f8c2 051c 	str.w	r0, [r2, #1308]	; 0x51c
}
   18d40:	2000      	movs	r0, #0
   18d42:	4770      	bx	lr
        conf = GPIO_PIN_CNF_PULL_Pulldown << GPIO_PIN_CNF_PULL_Pos;
   18d44:	2104      	movs	r1, #4
   18d46:	e7f0      	b.n	18d2a <hal_gpio_init_in+0xe>

00018d48 <hal_gpio_init_out>:
    if (val) {
   18d48:	b999      	cbnz	r1, 18d72 <hal_gpio_init_out+0x2a>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18d4a:	2301      	movs	r3, #1
   18d4c:	4083      	lsls	r3, r0
   18d4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d52:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
    port->PIN_CNF[pin_index] = GPIO_PIN_CNF_DIR_Output |
   18d56:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d5a:	f500 73e0 	add.w	r3, r0, #448	; 0x1c0
   18d5e:	2103      	movs	r1, #3
   18d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    port->DIRSET = HAL_GPIO_MASK(pin);
   18d64:	2301      	movs	r3, #1
   18d66:	fa03 f000 	lsl.w	r0, r3, r0
   18d6a:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
}
   18d6e:	2000      	movs	r0, #0
   18d70:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18d72:	2301      	movs	r3, #1
   18d74:	4083      	lsls	r3, r0
   18d76:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   18d7a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   18d7e:	e7ea      	b.n	18d56 <hal_gpio_init_out+0xe>

00018d80 <hal_gpio_write>:
    if (val) {
   18d80:	b939      	cbnz	r1, 18d92 <hal_gpio_write+0x12>
        port->OUTCLR = HAL_GPIO_MASK(pin);
   18d82:	2301      	movs	r3, #1
   18d84:	fa03 f000 	lsl.w	r0, r3, r0
   18d88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d8c:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   18d90:	4770      	bx	lr
        port->OUTSET = HAL_GPIO_MASK(pin);
   18d92:	2301      	movs	r3, #1
   18d94:	fa03 f000 	lsl.w	r0, r3, r0
   18d98:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18d9c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
   18da0:	4770      	bx	lr

00018da2 <hal_gpio_read>:
    return (port->DIR & HAL_GPIO_MASK(pin)) ?
   18da2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18da6:	f8d3 2514 	ldr.w	r2, [r3, #1300]	; 0x514
   18daa:	2301      	movs	r3, #1
   18dac:	4083      	lsls	r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18dae:	421a      	tst	r2, r3
   18db0:	d108      	bne.n	18dc4 <hal_gpio_read+0x22>
        (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18db2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18db6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18dba:	fa23 f000 	lsr.w	r0, r3, r0
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18dbe:	f000 0001 	and.w	r0, r0, #1
}
   18dc2:	4770      	bx	lr
        (port->OUT >> HAL_GPIO_INDEX(pin)) & 1UL :
   18dc4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18dc8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
   18dcc:	fa23 f000 	lsr.w	r0, r3, r0
   18dd0:	f000 0001 	and.w	r0, r0, #1
   18dd4:	4770      	bx	lr
	...

00018dd8 <hal_gpio_irq_init>:
 * @return int
 */
int
hal_gpio_irq_init(int pin, hal_gpio_irq_handler_t handler, void *arg,
                  hal_gpio_irq_trig_t trig, hal_gpio_pull_t pull)
{
   18dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ddc:	4680      	mov	r8, r0
   18dde:	460f      	mov	r7, r1
   18de0:	4616      	mov	r6, r2
   18de2:	461c      	mov	r4, r3
    uint32_t conf;
    int i;

    hal_gpio_irq_setup();
   18de4:	f7ff ff5a 	bl	18c9c <hal_gpio_irq_setup>
    i = hal_gpio_find_empty_slot();
   18de8:	f7ff ff6e 	bl	18cc8 <hal_gpio_find_empty_slot>
    if (i < 0) {
   18dec:	1e05      	subs	r5, r0, #0
   18dee:	db27      	blt.n	18e40 <hal_gpio_irq_init+0x68>
        return -1;
    }
    hal_gpio_init_in(pin, pull);
   18df0:	f89d 1018 	ldrb.w	r1, [sp, #24]
   18df4:	4640      	mov	r0, r8
   18df6:	f7ff ff91 	bl	18d1c <hal_gpio_init_in>
    default:
        hal_gpio_irqs[i].sense_trig = HAL_GPIO_SENSE_TRIG_NONE;
        return -1;
    }
#else
    switch (trig) {
   18dfa:	2c02      	cmp	r4, #2
   18dfc:	d01d      	beq.n	18e3a <hal_gpio_irq_init+0x62>
   18dfe:	2c03      	cmp	r4, #3
   18e00:	d018      	beq.n	18e34 <hal_gpio_irq_init+0x5c>
   18e02:	2c01      	cmp	r4, #1
   18e04:	d002      	beq.n	18e0c <hal_gpio_irq_init+0x34>
        break;
    case HAL_GPIO_TRIG_BOTH:
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
        break;
    default:
        return -1;
   18e06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e0a:	e011      	b.n	18e30 <hal_gpio_irq_init+0x58>
        conf = GPIOTE_CONFIG_POLARITY_LoToHi << GPIOTE_CONFIG_POLARITY_Pos;
   18e0c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    }

    conf |= pin << GPIOTE_CONFIG_PSEL_Pos;
   18e10:	ea40 2008 	orr.w	r0, r0, r8, lsl #8
    conf |= GPIOTE_CONFIG_MODE_Event << GPIOTE_CONFIG_MODE_Pos;
   18e14:	f040 0001 	orr.w	r0, r0, #1

    NRF_GPIOTE->CONFIG[i] = conf;
   18e18:	f505 72a2 	add.w	r2, r5, #324	; 0x144
   18e1c:	4b0a      	ldr	r3, [pc, #40]	; (18e48 <hal_gpio_irq_init+0x70>)
   18e1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
#endif

    hal_gpio_irqs[i].func = handler;
   18e22:	4b0a      	ldr	r3, [pc, #40]	; (18e4c <hal_gpio_irq_init+0x74>)
   18e24:	f843 7035 	str.w	r7, [r3, r5, lsl #3]
    hal_gpio_irqs[i].arg = arg;
   18e28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   18e2c:	605e      	str	r6, [r3, #4]

    return 0;
   18e2e:	2000      	movs	r0, #0
}
   18e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        conf = GPIOTE_CONFIG_POLARITY_Toggle << GPIOTE_CONFIG_POLARITY_Pos;
   18e34:	f44f 3040 	mov.w	r0, #196608	; 0x30000
        break;
   18e38:	e7ea      	b.n	18e10 <hal_gpio_irq_init+0x38>
        conf = GPIOTE_CONFIG_POLARITY_HiToLo << GPIOTE_CONFIG_POLARITY_Pos;
   18e3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
   18e3e:	e7e7      	b.n	18e10 <hal_gpio_irq_init+0x38>
        return -1;
   18e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18e44:	e7f4      	b.n	18e30 <hal_gpio_irq_init+0x58>
   18e46:	bf00      	nop
   18e48:	40006000 	.word	0x40006000
   18e4c:	20004728 	.word	0x20004728

00018e50 <hal_gpio_irq_enable>:
 *
 * @param pin
 */
void
hal_gpio_irq_enable(int pin)
{
   18e50:	b508      	push	{r3, lr}
    NRF_GPIO_Type *nrf_gpio;
    int pin_index;
#endif
    int i;

    i = hal_gpio_find_pin(pin);
   18e52:	f7ff ff47 	bl	18ce4 <hal_gpio_find_pin>
    if (i < 0) {
   18e56:	2800      	cmp	r0, #0
   18e58:	db0a      	blt.n	18e70 <hal_gpio_irq_enable+0x20>
        nrf_gpio->PIN_CNF[pin_index] |= GPIO_PIN_CNF_SENSE_High << GPIO_PIN_CNF_SENSE_Pos;
    }

    NRF_GPIOTE->INTENSET = GPIOTE_INTENSET_PORT_Msk;
#else
    NRF_GPIOTE->EVENTS_IN[i] = 0;
   18e5a:	4a06      	ldr	r2, [pc, #24]	; (18e74 <hal_gpio_irq_enable+0x24>)
   18e5c:	f100 0340 	add.w	r3, r0, #64	; 0x40
   18e60:	2100      	movs	r1, #0
   18e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    NRF_GPIOTE->INTENSET = 1 << i;
   18e66:	2301      	movs	r3, #1
   18e68:	fa03 f000 	lsl.w	r0, r3, r0
   18e6c:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
#endif
}
   18e70:	bd08      	pop	{r3, pc}
   18e72:	bf00      	nop
   18e74:	40006000 	.word	0x40006000

00018e78 <hal_i2c_delay_us>:

static void
hal_i2c_delay_us(uint32_t number_of_us)
{
register uint32_t delay __ASM ("r0") = number_of_us;
__ASM volatile (
   18e78:	3801      	subs	r0, #1
   18e7a:	bf00      	nop
   18e7c:	bf00      	nop
   18e7e:	bf00      	nop
   18e80:	bf00      	nop
   18e82:	bf00      	nop
   18e84:	bf00      	nop
   18e86:	bf00      	nop
   18e88:	bf00      	nop
   18e8a:	bf00      	nop
   18e8c:	bf00      	nop
   18e8e:	bf00      	nop
   18e90:	bf00      	nop
   18e92:	bf00      	nop
   18e94:	bf00      	nop
   18e96:	bf00      	nop
   18e98:	bf00      	nop
   18e9a:	bf00      	nop
   18e9c:	bf00      	nop
   18e9e:	bf00      	nop
   18ea0:	bf00      	nop
   18ea2:	bf00      	nop
   18ea4:	bf00      	nop
   18ea6:	bf00      	nop
   18ea8:	bf00      	nop
   18eaa:	bf00      	nop
   18eac:	bf00      	nop
   18eae:	bf00      	nop
   18eb0:	bf00      	nop
   18eb2:	bf00      	nop
   18eb4:	bf00      	nop
   18eb6:	bf00      	nop
   18eb8:	bf00      	nop
   18eba:	bf00      	nop
   18ebc:	bf00      	nop
   18ebe:	bf00      	nop
   18ec0:	bf00      	nop
   18ec2:	bf00      	nop
   18ec4:	bf00      	nop
   18ec6:	bf00      	nop
   18ec8:	bf00      	nop
   18eca:	bf00      	nop
   18ecc:	bf00      	nop
   18ece:	bf00      	nop
   18ed0:	bf00      	nop
   18ed2:	bf00      	nop
   18ed4:	bf00      	nop
   18ed6:	bf00      	nop
   18ed8:	bf00      	nop
   18eda:	bf00      	nop
   18edc:	bf00      	nop
   18ede:	bf00      	nop
   18ee0:	bf00      	nop
   18ee2:	bf00      	nop
   18ee4:	bf00      	nop
   18ee6:	bf00      	nop
   18ee8:	bf00      	nop
   18eea:	bf00      	nop
   18eec:	bf00      	nop
   18eee:	d1c3      	bne.n	18e78 <hal_i2c_delay_us>
    " BNE 1b\n"
#ifdef NRF51
    ".syntax divided\n"
#endif
    : "+r" (delay));
}
   18ef0:	4770      	bx	lr
	...

00018ef4 <hal_i2c_resolve>:

static int
hal_i2c_resolve(uint8_t i2c_num, struct nrf52_hal_i2c **out_i2c)
{
    if (i2c_num >= NRF52_HAL_I2C_MAX) {
   18ef4:	2801      	cmp	r0, #1
   18ef6:	d806      	bhi.n	18f06 <hal_i2c_resolve+0x12>
        *out_i2c = NULL;
        return HAL_I2C_ERR_INVAL;
    }

    *out_i2c = nrf52_hal_i2cs[i2c_num];
   18ef8:	4b06      	ldr	r3, [pc, #24]	; (18f14 <hal_i2c_resolve+0x20>)
   18efa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   18efe:	600b      	str	r3, [r1, #0]
    if (*out_i2c == NULL) {
   18f00:	b12b      	cbz	r3, 18f0e <hal_i2c_resolve+0x1a>
        return HAL_I2C_ERR_INVAL;
    }

    return 0;
   18f02:	2000      	movs	r0, #0
}
   18f04:	4770      	bx	lr
        *out_i2c = NULL;
   18f06:	2300      	movs	r3, #0
   18f08:	600b      	str	r3, [r1, #0]
        return HAL_I2C_ERR_INVAL;
   18f0a:	2002      	movs	r0, #2
   18f0c:	4770      	bx	lr
        return HAL_I2C_ERR_INVAL;
   18f0e:	2002      	movs	r0, #2
   18f10:	4770      	bx	lr
   18f12:	bf00      	nop
   18f14:	00020fa0 	.word	0x00020fa0

00018f18 <hal_i2c_convert_status>:
 * Converts an nRF SDK I2C status to a HAL I2C error code.
 */
static int
hal_i2c_convert_status(int nrf_status)
{
    if (nrf_status == 0) {
   18f18:	b148      	cbz	r0, 18f2e <hal_i2c_convert_status+0x16>
        return 0;
    } else if (nrf_status & NRF_TWIM_ERROR_DATA_NACK) {
   18f1a:	f010 0f04 	tst.w	r0, #4
   18f1e:	d107      	bne.n	18f30 <hal_i2c_convert_status+0x18>
        return HAL_I2C_ERR_DATA_NACK;
    } else if (nrf_status & NRF_TWIM_ERROR_ADDRESS_NACK) {
   18f20:	f010 0f02 	tst.w	r0, #2
   18f24:	d101      	bne.n	18f2a <hal_i2c_convert_status+0x12>
        return HAL_I2C_ERR_ADDR_NACK;
    } else {
        return HAL_I2C_ERR_UNKNOWN;
   18f26:	2001      	movs	r0, #1
    }
}
   18f28:	4770      	bx	lr
        return HAL_I2C_ERR_ADDR_NACK;
   18f2a:	2004      	movs	r0, #4
   18f2c:	4770      	bx	lr
   18f2e:	4770      	bx	lr
        return HAL_I2C_ERR_DATA_NACK;
   18f30:	2005      	movs	r0, #5
   18f32:	4770      	bx	lr

00018f34 <read_gpio_inbuffer>:
read_gpio_inbuffer(int pin)
{
    NRF_GPIO_Type *port;
    port = HAL_GPIO_PORT(pin);

    return (port->IN >> HAL_GPIO_INDEX(pin)) & 1UL;
   18f34:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18f38:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
   18f3c:	fa23 f000 	lsr.w	r0, r3, r0
}
   18f40:	f000 0001 	and.w	r0, r0, #1
   18f44:	4770      	bx	lr

00018f46 <hal_i2c_clear_bus>:
 * Clear the bus after reset by clocking 9 bits manually.
 * This should reset state from (most of) the devices on the other end.
 */
static void
hal_i2c_clear_bus(int scl_pin, int sda_pin)
{
   18f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18f4a:	4605      	mov	r5, r0
   18f4c:	460e      	mov	r6, r1
    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(scl_pin);
    sda_port = HAL_GPIO_PORT(sda_pin);

    /* Input connected, standard-low disconnected-high, pull-ups */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18f4e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   18f52:	f500 78e0 	add.w	r8, r0, #448	; 0x1c0
   18f56:	f240 630c 	movw	r3, #1548	; 0x60c
   18f5a:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18f5e:	f501 77e0 	add.w	r7, r1, #448	; 0x1c0
   18f62:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_gpio_write(scl_pin, 1);
   18f66:	2101      	movs	r1, #1
   18f68:	f7ff ff0a 	bl	18d80 <hal_gpio_write>
    hal_gpio_write(sda_pin, 1);
   18f6c:	2101      	movs	r1, #1
   18f6e:	4630      	mov	r0, r6
   18f70:	f7ff ff06 	bl	18d80 <hal_gpio_write>

    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF_CLR;
   18f74:	f240 630d 	movw	r3, #1549	; 0x60d
   18f78:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF_CLR;
   18f7c:	f844 3027 	str.w	r3, [r4, r7, lsl #2]

    hal_i2c_delay_us(4);
   18f80:	2004      	movs	r0, #4
   18f82:	f7ff ff79 	bl	18e78 <hal_i2c_delay_us>

    for (i = 0; i < 9; i++) {
   18f86:	2400      	movs	r4, #0
   18f88:	2c08      	cmp	r4, #8
   18f8a:	dc14      	bgt.n	18fb6 <hal_i2c_clear_bus+0x70>
        if (read_gpio_inbuffer(sda_pin)) {
   18f8c:	4630      	mov	r0, r6
   18f8e:	f7ff ffd1 	bl	18f34 <read_gpio_inbuffer>
   18f92:	b978      	cbnz	r0, 18fb4 <hal_i2c_clear_bus+0x6e>
                goto ret;
            } else {
                break;
            }
        }
        hal_gpio_write(scl_pin, 0);
   18f94:	2100      	movs	r1, #0
   18f96:	4628      	mov	r0, r5
   18f98:	f7ff fef2 	bl	18d80 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18f9c:	2004      	movs	r0, #4
   18f9e:	f7ff ff6b 	bl	18e78 <hal_i2c_delay_us>
        hal_gpio_write(scl_pin, 1);
   18fa2:	2101      	movs	r1, #1
   18fa4:	4628      	mov	r0, r5
   18fa6:	f7ff feeb 	bl	18d80 <hal_gpio_write>
        hal_i2c_delay_us(4);
   18faa:	2004      	movs	r0, #4
   18fac:	f7ff ff64 	bl	18e78 <hal_i2c_delay_us>
    for (i = 0; i < 9; i++) {
   18fb0:	3401      	adds	r4, #1
   18fb2:	e7e9      	b.n	18f88 <hal_i2c_clear_bus+0x42>
            if (i == 0) {
   18fb4:	b154      	cbz	r4, 18fcc <hal_i2c_clear_bus+0x86>
    }

    /*
     * Send STOP.
     */
    hal_gpio_write(sda_pin, 0);
   18fb6:	2100      	movs	r1, #0
   18fb8:	4630      	mov	r0, r6
   18fba:	f7ff fee1 	bl	18d80 <hal_gpio_write>
    hal_i2c_delay_us(4);
   18fbe:	2004      	movs	r0, #4
   18fc0:	f7ff ff5a 	bl	18e78 <hal_i2c_delay_us>
    hal_gpio_write(sda_pin, 1);
   18fc4:	2101      	movs	r1, #1
   18fc6:	4630      	mov	r0, r6
   18fc8:	f7ff feda 	bl	18d80 <hal_gpio_write>

ret:
    /* Restore GPIO config */
    scl_port->PIN_CNF[scl_pin] = NRF52_SCL_PIN_CONF;
   18fcc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   18fd0:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   18fd4:	f240 620c 	movw	r2, #1548	; 0x60c
   18fd8:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
    sda_port->PIN_CNF[sda_pin] = NRF52_SDA_PIN_CONF;
   18fdc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
   18fe0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
}
   18fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00018fe8 <hal_i2c_init>:

int
hal_i2c_init(uint8_t i2c_num, void *usercfg)
{
   18fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   18fea:	b083      	sub	sp, #12
    struct nrf52_hal_i2c_cfg *cfg;
    uint32_t freq;
    int rc;
    NRF_GPIO_Type *scl_port, *sda_port;

    assert(usercfg != NULL);
   18fec:	b1a1      	cbz	r1, 19018 <hal_i2c_init+0x30>
   18fee:	460c      	mov	r4, r1

    rc = hal_i2c_resolve(i2c_num, &i2c);
   18ff0:	a901      	add	r1, sp, #4
   18ff2:	f7ff ff7f 	bl	18ef4 <hal_i2c_resolve>
    if (rc != 0) {
   18ff6:	4606      	mov	r6, r0
   18ff8:	bba8      	cbnz	r0, 19066 <hal_i2c_init+0x7e>
        goto err;
    }

    cfg = (struct nrf52_hal_i2c_cfg *) usercfg;
    regs = i2c->nhi_regs;
   18ffa:	9b01      	ldr	r3, [sp, #4]
   18ffc:	681d      	ldr	r5, [r3, #0]

    switch (cfg->i2c_frequency) {
   18ffe:	68a3      	ldr	r3, [r4, #8]
   19000:	2bfa      	cmp	r3, #250	; 0xfa
   19002:	d035      	beq.n	19070 <hal_i2c_init+0x88>
   19004:	d90e      	bls.n	19024 <hal_i2c_init+0x3c>
   19006:	f5b3 7fbe 	cmp.w	r3, #380	; 0x17c
   1900a:	d02f      	beq.n	1906c <hal_i2c_init+0x84>
   1900c:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
   19010:	d131      	bne.n	19076 <hal_i2c_init+0x8e>
        break;
    case 380:
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
        break;
    case 400:
        freq = TWI_FREQUENCY_FREQUENCY_K400;
   19012:	f04f 67cd 	mov.w	r7, #107479040	; 0x6680000
        break;
   19016:	e009      	b.n	1902c <hal_i2c_init+0x44>
    assert(usercfg != NULL);
   19018:	2300      	movs	r3, #0
   1901a:	461a      	mov	r2, r3
   1901c:	4619      	mov	r1, r3
   1901e:	4618      	mov	r0, r3
   19020:	f000 fc88 	bl	19934 <__assert_func>
    switch (cfg->i2c_frequency) {
   19024:	2b64      	cmp	r3, #100	; 0x64
   19026:	d126      	bne.n	19076 <hal_i2c_init+0x8e>
        freq = TWI_FREQUENCY_FREQUENCY_K100;
   19028:	f04f 77cc 	mov.w	r7, #26738688	; 0x1980000
    default:
        rc = HAL_I2C_ERR_INVAL;
        goto err;
    }

    hal_i2c_clear_bus(cfg->scl_pin, cfg->sda_pin);
   1902c:	6861      	ldr	r1, [r4, #4]
   1902e:	6820      	ldr	r0, [r4, #0]
   19030:	f7ff ff89 	bl	18f46 <hal_i2c_clear_bus>

    /* Resolve which GPIO port these pins belong to */
    scl_port = HAL_GPIO_PORT(cfg->scl_pin);
    sda_port = HAL_GPIO_PORT(cfg->sda_pin);

    scl_port->PIN_CNF[HAL_GPIO_INDEX(cfg->scl_pin)] = NRF52_SCL_PIN_CONF;
   19034:	6823      	ldr	r3, [r4, #0]
   19036:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
   1903a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1903e:	f240 610c 	movw	r1, #1548	; 0x60c
   19042:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    sda_port->PIN_CNF[HAL_GPIO_INDEX(cfg->sda_pin)] = NRF52_SDA_PIN_CONF;
   19046:	6863      	ldr	r3, [r4, #4]
   19048:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1904c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

    regs->PSELSCL = cfg->scl_pin;
   19050:	6823      	ldr	r3, [r4, #0]
   19052:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    regs->PSELSDA = cfg->sda_pin;
   19056:	6863      	ldr	r3, [r4, #4]
   19058:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    regs->FREQUENCY = freq;
   1905c:	f8c5 7524 	str.w	r7, [r5, #1316]	; 0x524
    regs->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19060:	2305      	movs	r3, #5
   19062:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500

    return (0);
err:
    return (rc);
}
   19066:	4630      	mov	r0, r6
   19068:	b003      	add	sp, #12
   1906a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        freq = TWI_CUSTOM_FREQUENCY_FREQUENCY_K380;
   1906c:	4f03      	ldr	r7, [pc, #12]	; (1907c <hal_i2c_init+0x94>)
        break;
   1906e:	e7dd      	b.n	1902c <hal_i2c_init+0x44>
        freq = TWI_FREQUENCY_FREQUENCY_K250;
   19070:	f04f 6780 	mov.w	r7, #67108864	; 0x4000000
   19074:	e7da      	b.n	1902c <hal_i2c_init+0x44>
        rc = HAL_I2C_ERR_INVAL;
   19076:	2602      	movs	r6, #2
   19078:	e7f5      	b.n	19066 <hal_i2c_init+0x7e>
   1907a:	bf00      	nop
   1907c:	06147ae9 	.word	0x06147ae9

00019080 <hal_i2c_master_write>:
}

int
hal_i2c_master_write(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                     uint32_t timo, uint8_t last_op)
{
   19080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19084:	b083      	sub	sp, #12
   19086:	4688      	mov	r8, r1
   19088:	4615      	mov	r5, r2
   1908a:	469a      	mov	sl, r3
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   1908c:	a901      	add	r1, sp, #4
   1908e:	f7ff ff31 	bl	18ef4 <hal_i2c_resolve>
    if (rc != 0) {
   19092:	4681      	mov	r9, r0
   19094:	b118      	cbz	r0, 1909e <hal_i2c_master_write+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   19096:	4648      	mov	r0, r9
   19098:	b003      	add	sp, #12
   1909a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   1909e:	9b01      	ldr	r3, [sp, #4]
   190a0:	681c      	ldr	r4, [r3, #0]
    regs->ADDRESS = pdata->address;
   190a2:	f898 3000 	ldrb.w	r3, [r8]
   190a6:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    regs->EVENTS_ERROR = 0;
   190aa:	2300      	movs	r3, #0
   190ac:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   190b0:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   190b4:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->SHORTS = 0;
   190b8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTTX);
   190bc:	f104 0708 	add.w	r7, r4, #8
    int retry = 2;
   190c0:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   190c4:	2300      	movs	r3, #0
   190c6:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   190ca:	2301      	movs	r3, #1
   190cc:	603b      	str	r3, [r7, #0]
        end_ticks = os_cputime_get32() +
   190ce:	f000 fe61 	bl	19d94 <os_cputime_get32>
   190d2:	f100 0664 	add.w	r6, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   190d6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   190da:	f7ff fe62 	bl	18da2 <hal_gpio_read>
   190de:	b1b0      	cbz	r0, 1910e <hal_i2c_master_write+0x8e>
   190e0:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   190e4:	b99b      	cbnz	r3, 1910e <hal_i2c_master_write+0x8e>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   190e6:	f000 fe55 	bl	19d94 <os_cputime_get32>
   190ea:	1b80      	subs	r0, r0, r6
   190ec:	2800      	cmp	r0, #0
   190ee:	dbf2      	blt.n	190d6 <hal_i2c_master_write+0x56>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   190f0:	2300      	movs	r3, #0
   190f2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   190f6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   190fa:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   190fe:	f7ff ff22 	bl	18f46 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   19102:	2305      	movs	r3, #5
   19104:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19108:	f1bb 0b01 	subs.w	fp, fp, #1
   1910c:	d1da      	bne.n	190c4 <hal_i2c_master_write+0x44>
    start = os_time_get();
   1910e:	f001 fe2f 	bl	1ad70 <os_time_get>
   19112:	4606      	mov	r6, r0
    for (i = 0; i < pdata->len; i++) {
   19114:	464f      	mov	r7, r9
   19116:	e003      	b.n	19120 <hal_i2c_master_write+0xa0>
        if (regs->EVENTS_ERROR) {
   19118:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1911c:	b9db      	cbnz	r3, 19156 <hal_i2c_master_write+0xd6>
    for (i = 0; i < pdata->len; i++) {
   1911e:	3701      	adds	r7, #1
   19120:	f8b8 3002 	ldrh.w	r3, [r8, #2]
   19124:	42bb      	cmp	r3, r7
   19126:	dd24      	ble.n	19172 <hal_i2c_master_write+0xf2>
        regs->EVENTS_TXDSENT = 0;
   19128:	2300      	movs	r3, #0
   1912a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
        regs->TXD = pdata->buffer[i];
   1912e:	f8d8 3004 	ldr.w	r3, [r8, #4]
   19132:	5ddb      	ldrb	r3, [r3, r7]
   19134:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
        while (!regs->EVENTS_TXDSENT && !regs->EVENTS_ERROR) {
   19138:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
   1913c:	2b00      	cmp	r3, #0
   1913e:	d1eb      	bne.n	19118 <hal_i2c_master_write+0x98>
   19140:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   19144:	2b00      	cmp	r3, #0
   19146:	d1e7      	bne.n	19118 <hal_i2c_master_write+0x98>
            if (os_time_get() - start > timo) {
   19148:	f001 fe12 	bl	1ad70 <os_time_get>
   1914c:	1b80      	subs	r0, r0, r6
   1914e:	42a8      	cmp	r0, r5
   19150:	d9f2      	bls.n	19138 <hal_i2c_master_write+0xb8>
                rc = HAL_I2C_ERR_TIMEOUT;
   19152:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   19156:	2301      	movs	r3, #1
   19158:	6163      	str	r3, [r4, #20]
    if (regs->EVENTS_ERROR) {
   1915a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1915e:	2b00      	cmp	r3, #0
   19160:	d099      	beq.n	19096 <hal_i2c_master_write+0x16>
        nrf_status = regs->ERRORSRC;
   19162:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   19166:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   1916a:	f7ff fed5 	bl	18f18 <hal_i2c_convert_status>
   1916e:	4681      	mov	r9, r0
   19170:	e791      	b.n	19096 <hal_i2c_master_write+0x16>
    if (last_op) {
   19172:	f1ba 0f00 	cmp.w	sl, #0
   19176:	d08e      	beq.n	19096 <hal_i2c_master_write+0x16>
        regs->EVENTS_STOPPED = 0;
   19178:	2300      	movs	r3, #0
   1917a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
        regs->TASKS_STOP = 1;
   1917e:	2301      	movs	r3, #1
   19180:	6163      	str	r3, [r4, #20]
        while (!regs->EVENTS_STOPPED && !regs->EVENTS_ERROR) {
   19182:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
   19186:	b953      	cbnz	r3, 1919e <hal_i2c_master_write+0x11e>
   19188:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1918c:	b93b      	cbnz	r3, 1919e <hal_i2c_master_write+0x11e>
            if (os_time_get() - start > timo) {
   1918e:	f001 fdef 	bl	1ad70 <os_time_get>
   19192:	1b80      	subs	r0, r0, r6
   19194:	42a8      	cmp	r0, r5
   19196:	d9f4      	bls.n	19182 <hal_i2c_master_write+0x102>
                rc = HAL_I2C_ERR_TIMEOUT;
   19198:	f04f 0903 	mov.w	r9, #3
   1919c:	e7db      	b.n	19156 <hal_i2c_master_write+0xd6>
        if (regs->EVENTS_ERROR) {
   1919e:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   191a2:	2b00      	cmp	r3, #0
   191a4:	d1d7      	bne.n	19156 <hal_i2c_master_write+0xd6>
   191a6:	e776      	b.n	19096 <hal_i2c_master_write+0x16>

000191a8 <hal_i2c_master_read>:

int
hal_i2c_master_read(uint8_t i2c_num, struct hal_i2c_master_data *pdata,
                    uint32_t timo, uint8_t last_op)
{
   191a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191ac:	b085      	sub	sp, #20
   191ae:	460f      	mov	r7, r1
   191b0:	4615      	mov	r5, r2
   191b2:	9301      	str	r3, [sp, #4]
    int nrf_status;
    int rc;
    int i;
    uint32_t start;

    rc = hal_i2c_resolve(i2c_num, &i2c);
   191b4:	a903      	add	r1, sp, #12
   191b6:	f7ff fe9d 	bl	18ef4 <hal_i2c_resolve>
    if (rc != 0) {
   191ba:	4681      	mov	r9, r0
   191bc:	b118      	cbz	r0, 191c6 <hal_i2c_master_read+0x1e>
        regs->ERRORSRC = nrf_status;
        rc = hal_i2c_convert_status(nrf_status);
    }

    return (rc);
}
   191be:	4648      	mov	r0, r9
   191c0:	b005      	add	sp, #20
   191c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    regs = i2c->nhi_regs;
   191c6:	9b03      	ldr	r3, [sp, #12]
   191c8:	681c      	ldr	r4, [r3, #0]
    start = os_time_get();
   191ca:	f001 fdd1 	bl	1ad70 <os_time_get>
   191ce:	4606      	mov	r6, r0
    if (regs->EVENTS_RXDREADY) {
   191d0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   191d4:	b11b      	cbz	r3, 191de <hal_i2c_master_read+0x36>
        (void)regs->RXD;
   191d6:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
        (void)regs->RXD;
   191da:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
    regs->EVENTS_ERROR = 0;
   191de:	2300      	movs	r3, #0
   191e0:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    regs->EVENTS_STOPPED = 0;
   191e4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    regs->EVENTS_SUSPENDED = 0;
   191e8:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
    regs->EVENTS_RXDREADY = 0;
   191ec:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    regs->ADDRESS = pdata->address;
   191f0:	783b      	ldrb	r3, [r7, #0]
   191f2:	f8c4 3588 	str.w	r3, [r4, #1416]	; 0x588
    if (pdata->len == 1 && last_op) {
   191f6:	887b      	ldrh	r3, [r7, #2]
   191f8:	2b01      	cmp	r3, #1
   191fa:	d02e      	beq.n	1925a <hal_i2c_master_read+0xb2>
        regs->SHORTS = TWI_SHORTS_BB_SUSPEND_Msk;
   191fc:	2301      	movs	r3, #1
   191fe:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    hal_i2c_trigger_start(regs, &regs->TASKS_STARTRX);
   19202:	46a2      	mov	sl, r4
    int retry = 2;
   19204:	f04f 0b02 	mov.w	fp, #2
        twi->EVENTS_BB = 0;
   19208:	2300      	movs	r3, #0
   1920a:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
        *task = 1;
   1920e:	2301      	movs	r3, #1
   19210:	f8ca 3000 	str.w	r3, [sl]
        end_ticks = os_cputime_get32() +
   19214:	f000 fdbe 	bl	19d94 <os_cputime_get32>
   19218:	f100 0864 	add.w	r8, r0, #100	; 0x64
            if (!hal_gpio_read(twi->PSELSCL) || twi->EVENTS_BB) {
   1921c:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19220:	f7ff fdbf 	bl	18da2 <hal_gpio_read>
   19224:	b1b8      	cbz	r0, 19256 <hal_i2c_master_read+0xae>
   19226:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
   1922a:	b9a3      	cbnz	r3, 19256 <hal_i2c_master_read+0xae>
        } while (CPUTIME_LT(os_cputime_get32(), end_ticks));
   1922c:	f000 fdb2 	bl	19d94 <os_cputime_get32>
   19230:	eba0 0008 	sub.w	r0, r0, r8
   19234:	2800      	cmp	r0, #0
   19236:	dbf1      	blt.n	1921c <hal_i2c_master_read+0x74>
        twi->ENABLE = TWI_ENABLE_ENABLE_Disabled;
   19238:	2300      	movs	r3, #0
   1923a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        hal_i2c_clear_bus(twi->PSELSCL, twi->PSELSDA);
   1923e:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
   19242:	f8d4 150c 	ldr.w	r1, [r4, #1292]	; 0x50c
   19246:	f7ff fe7e 	bl	18f46 <hal_i2c_clear_bus>
        twi->ENABLE = TWI_ENABLE_ENABLE_Enabled;
   1924a:	2305      	movs	r3, #5
   1924c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    } while (--retry);
   19250:	f1bb 0b01 	subs.w	fp, fp, #1
   19254:	d1d8      	bne.n	19208 <hal_i2c_master_read+0x60>
    int retry = 2;
   19256:	46c8      	mov	r8, r9
   19258:	e017      	b.n	1928a <hal_i2c_master_read+0xe2>
    if (pdata->len == 1 && last_op) {
   1925a:	9b01      	ldr	r3, [sp, #4]
   1925c:	2b00      	cmp	r3, #0
   1925e:	d0cd      	beq.n	191fc <hal_i2c_master_read+0x54>
        regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   19260:	2302      	movs	r3, #2
   19262:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   19266:	e7cc      	b.n	19202 <hal_i2c_master_read+0x5a>
        if (regs->EVENTS_ERROR) {
   19268:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   1926c:	bb0b      	cbnz	r3, 192b2 <hal_i2c_master_read+0x10a>
        pdata->buffer[i] = regs->RXD;
   1926e:	f8d4 2518 	ldr.w	r2, [r4, #1304]	; 0x518
   19272:	687b      	ldr	r3, [r7, #4]
   19274:	f803 2008 	strb.w	r2, [r3, r8]
        if (i == pdata->len - 2) {
   19278:	887b      	ldrh	r3, [r7, #2]
   1927a:	3b02      	subs	r3, #2
   1927c:	4543      	cmp	r3, r8
   1927e:	d02a      	beq.n	192d6 <hal_i2c_master_read+0x12e>
        regs->EVENTS_RXDREADY = 0;
   19280:	2300      	movs	r3, #0
   19282:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    for (i = 0; i < pdata->len; i++) {
   19286:	f108 0801 	add.w	r8, r8, #1
   1928a:	887b      	ldrh	r3, [r7, #2]
   1928c:	4543      	cmp	r3, r8
   1928e:	dd96      	ble.n	191be <hal_i2c_master_read+0x16>
        regs->TASKS_RESUME = 1;
   19290:	2301      	movs	r3, #1
   19292:	6223      	str	r3, [r4, #32]
        while (!regs->EVENTS_RXDREADY && !regs->EVENTS_ERROR) {
   19294:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19298:	2b00      	cmp	r3, #0
   1929a:	d1e5      	bne.n	19268 <hal_i2c_master_read+0xc0>
   1929c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192a0:	2b00      	cmp	r3, #0
   192a2:	d1e1      	bne.n	19268 <hal_i2c_master_read+0xc0>
            if (os_time_get() - start > timo) {
   192a4:	f001 fd64 	bl	1ad70 <os_time_get>
   192a8:	1b80      	subs	r0, r0, r6
   192aa:	42a8      	cmp	r0, r5
   192ac:	d9f2      	bls.n	19294 <hal_i2c_master_read+0xec>
                rc = HAL_I2C_ERR_TIMEOUT;
   192ae:	f04f 0903 	mov.w	r9, #3
    regs->TASKS_STOP = 1;
   192b2:	2301      	movs	r3, #1
   192b4:	6163      	str	r3, [r4, #20]
    regs->SHORTS = 0;
   192b6:	2300      	movs	r3, #0
   192b8:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    if (regs->EVENTS_ERROR) {
   192bc:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
   192c0:	2b00      	cmp	r3, #0
   192c2:	f43f af7c 	beq.w	191be <hal_i2c_master_read+0x16>
        nrf_status = regs->ERRORSRC;
   192c6:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
        regs->ERRORSRC = nrf_status;
   192ca:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
        rc = hal_i2c_convert_status(nrf_status);
   192ce:	f7ff fe23 	bl	18f18 <hal_i2c_convert_status>
   192d2:	4681      	mov	r9, r0
   192d4:	e773      	b.n	191be <hal_i2c_master_read+0x16>
            if (last_op) {
   192d6:	9b01      	ldr	r3, [sp, #4]
   192d8:	2b00      	cmp	r3, #0
   192da:	d0d1      	beq.n	19280 <hal_i2c_master_read+0xd8>
                regs->SHORTS = TWI_SHORTS_BB_STOP_Msk;
   192dc:	2302      	movs	r3, #2
   192de:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
   192e2:	e7cd      	b.n	19280 <hal_i2c_master_read+0xd8>

000192e4 <nrf52_irqm_handler>:
    }

#if (MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_1_MASTER) || MYNEWT_VAL(SPI_2_MASTER))
static void
nrf52_irqm_handler(struct nrf52_hal_spi *spi)
{
   192e4:	b538      	push	{r3, r4, r5, lr}
    NRF_SPIM_Type *spim;
    uint16_t xfr_bytes;
    uint16_t len;

    spim = spi->nhs_spi.spim;
   192e6:	6905      	ldr	r5, [r0, #16]
    if (spim->EVENTS_END) {
   192e8:	f8d5 3118 	ldr.w	r3, [r5, #280]	; 0x118
   192ec:	b32b      	cbz	r3, 1933a <nrf52_irqm_handler+0x56>
        spim->EVENTS_END = 0;
   192ee:	2300      	movs	r3, #0
   192f0:	f8c5 3118 	str.w	r3, [r5, #280]	; 0x118

        /* Should not occur but if no transfer just leave  */
        if (spi->spi_xfr_flag == 0) {
   192f4:	7843      	ldrb	r3, [r0, #1]
   192f6:	b303      	cbz	r3, 1933a <nrf52_irqm_handler+0x56>
            return;
        }

        /* Are there more bytes to send? */
        xfr_bytes = spim->TXD.AMOUNT;
   192f8:	f8d5 254c 	ldr.w	r2, [r5, #1356]	; 0x54c
        spi->nhs_bytes_txd += xfr_bytes;
   192fc:	88c3      	ldrh	r3, [r0, #6]
   192fe:	fa13 f382 	uxtah	r3, r3, r2
   19302:	b29b      	uxth	r3, r3
   19304:	80c3      	strh	r3, [r0, #6]
        if (spi->nhs_bytes_txd < spi->nhs_buflen) {
   19306:	8881      	ldrh	r1, [r0, #4]
   19308:	428b      	cmp	r3, r1
   1930a:	d217      	bcs.n	1933c <nrf52_irqm_handler+0x58>
   1930c:	b292      	uxth	r2, r2
            spi->nhs_txbuf += xfr_bytes;
   1930e:	6984      	ldr	r4, [r0, #24]
   19310:	4414      	add	r4, r2
   19312:	6184      	str	r4, [r0, #24]
            len = spi->nhs_buflen - spi->nhs_bytes_txd;
   19314:	1acb      	subs	r3, r1, r3
   19316:	b29b      	uxth	r3, r3
            len = min(SPIM_TXD_MAXCNT_MAX, len);
   19318:	2bff      	cmp	r3, #255	; 0xff
   1931a:	bf28      	it	cs
   1931c:	23ff      	movcs	r3, #255	; 0xff
            spim->TXD.PTR = (uint32_t)spi->nhs_txbuf;
   1931e:	f8c5 4544 	str.w	r4, [r5, #1348]	; 0x544
            spim->TXD.MAXCNT = len;
   19322:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548

            /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
            if (spi->nhs_rxbuf) {
   19326:	69c1      	ldr	r1, [r0, #28]
   19328:	b129      	cbz	r1, 19336 <nrf52_irqm_handler+0x52>
                spi->nhs_rxbuf += xfr_bytes;
   1932a:	440a      	add	r2, r1
   1932c:	61c2      	str	r2, [r0, #28]
                spim->RXD.PTR    = (uint32_t)spi->nhs_rxbuf;
   1932e:	f8c5 2534 	str.w	r2, [r5, #1332]	; 0x534
                spim->RXD.MAXCNT = len;
   19332:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
            }
            spim->TASKS_START = 1;
   19336:	2301      	movs	r3, #1
   19338:	612b      	str	r3, [r5, #16]
            }
            spi->spi_xfr_flag = 0;
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
        }
    }
}
   1933a:	bd38      	pop	{r3, r4, r5, pc}
   1933c:	4604      	mov	r4, r0
            if (spi->txrx_cb_func) {
   1933e:	6a03      	ldr	r3, [r0, #32]
   19340:	b10b      	cbz	r3, 19346 <nrf52_irqm_handler+0x62>
                spi->txrx_cb_func(spi->txrx_cb_arg, spi->nhs_buflen);
   19342:	6a40      	ldr	r0, [r0, #36]	; 0x24
   19344:	4798      	blx	r3
            spi->spi_xfr_flag = 0;
   19346:	2300      	movs	r3, #0
   19348:	7063      	strb	r3, [r4, #1]
            spim->INTENCLR = SPIM_INTENSET_END_Msk;
   1934a:	2340      	movs	r3, #64	; 0x40
   1934c:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
   19350:	e7f3      	b.n	1933a <nrf52_irqm_handler+0x56>
	...

00019354 <nrf52_spi0_irq_handler>:

/* Interrupt handlers for SPI ports */
#if MYNEWT_VAL(SPI_0_MASTER) || MYNEWT_VAL(SPI_0_SLAVE)
void
nrf52_spi0_irq_handler(void)
{
   19354:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (nrf52_hal_spi0.spi_type == HAL_SPI_TYPE_MASTER) {
   19356:	4b04      	ldr	r3, [pc, #16]	; (19368 <nrf52_spi0_irq_handler+0x14>)
   19358:	781b      	ldrb	r3, [r3, #0]
   1935a:	b103      	cbz	r3, 1935e <nrf52_spi0_irq_handler+0xa>
#if MYNEWT_VAL(SPI_0_SLAVE)
        nrf52_irqs_handler(&nrf52_hal_spi0);
#endif
    }
    os_trace_isr_exit();
}
   1935c:	bd08      	pop	{r3, pc}
        nrf52_irqm_handler(&nrf52_hal_spi0);
   1935e:	4802      	ldr	r0, [pc, #8]	; (19368 <nrf52_spi0_irq_handler+0x14>)
   19360:	f7ff ffc0 	bl	192e4 <nrf52_irqm_handler>
}
   19364:	e7fa      	b.n	1935c <nrf52_spi0_irq_handler+0x8>
   19366:	bf00      	nop
   19368:	2000d5c0 	.word	0x2000d5c0

0001936c <hal_spi_stop_transfer>:
#endif

static void
hal_spi_stop_transfer(NRF_SPIM_Type *spim)
{
    spim->TASKS_STOP = 1;
   1936c:	2301      	movs	r3, #1
   1936e:	6143      	str	r3, [r0, #20]
    while (!spim->EVENTS_STOPPED) {}
   19370:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
   19374:	2b00      	cmp	r3, #0
   19376:	d0fb      	beq.n	19370 <hal_spi_stop_transfer+0x4>
    spim->EVENTS_STOPPED = 0;
   19378:	2300      	movs	r3, #0
   1937a:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
}
   1937e:	4770      	bx	lr

00019380 <hal_spi_config_slave>:
}

static int
hal_spi_config_slave(struct nrf52_hal_spi *spi,
                     struct hal_spi_settings *settings)
{
   19380:	b410      	push	{r4}
    int rc;
    uint32_t nrf_config;
    NRF_SPIS_Type *spis;

    spis = spi->nhs_spi.spis;
   19382:	6902      	ldr	r2, [r0, #16]

    rc = 0;
    switch (settings->data_mode) {
   19384:	780b      	ldrb	r3, [r1, #0]
   19386:	2b03      	cmp	r3, #3
   19388:	d80c      	bhi.n	193a4 <hal_spi_config_slave+0x24>
   1938a:	e8df f003 	tbb	[pc, r3]
   1938e:	0e02      	.short	0x0e02
   19390:	0805      	.short	0x0805
        case HAL_SPI_MODE0:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   19392:	2300      	movs	r3, #0
    rc = 0;
   19394:	4618      	mov	r0, r3
   19396:	e00a      	b.n	193ae <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE1:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
        case HAL_SPI_MODE2:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   19398:	2304      	movs	r3, #4
    rc = 0;
   1939a:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Leading << SPIS_CONFIG_CPHA_Pos);
            break;
   1939c:	e007      	b.n	193ae <hal_spi_config_slave+0x2e>
        case HAL_SPI_MODE3:
            nrf_config = (SPIS_CONFIG_CPOL_ActiveLow << SPIS_CONFIG_CPOL_Pos) |
   1939e:	2306      	movs	r3, #6
    rc = 0;
   193a0:	2000      	movs	r0, #0
                         (SPIS_CONFIG_CPHA_Trailing << SPIS_CONFIG_CPHA_Pos);
            break;
   193a2:	e004      	b.n	193ae <hal_spi_config_slave+0x2e>
        default:
            nrf_config = 0;
   193a4:	2300      	movs	r3, #0
            rc = EINVAL;
   193a6:	2016      	movs	r0, #22
            break;
   193a8:	e001      	b.n	193ae <hal_spi_config_slave+0x2e>
            nrf_config = (SPIS_CONFIG_CPOL_ActiveHigh << SPIS_CONFIG_CPOL_Pos) |
   193aa:	2302      	movs	r3, #2
    rc = 0;
   193ac:	2000      	movs	r0, #0
    }

    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   193ae:	784c      	ldrb	r4, [r1, #1]
   193b0:	2c01      	cmp	r4, #1
   193b2:	d006      	beq.n	193c2 <hal_spi_config_slave+0x42>
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
    }
    spis->CONFIG = nrf_config;
   193b4:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554

    /* Only 8-bit word sizes supported. */
    switch (settings->word_size) {
   193b8:	788b      	ldrb	r3, [r1, #2]
   193ba:	b92b      	cbnz	r3, 193c8 <hal_spi_config_slave+0x48>
            rc = EINVAL;
            break;
    }

    return rc;
}
   193bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   193c0:	4770      	bx	lr
        nrf_config |= SPIS_CONFIG_ORDER_LsbFirst;
   193c2:	f043 0301 	orr.w	r3, r3, #1
   193c6:	e7f5      	b.n	193b4 <hal_spi_config_slave+0x34>
            rc = EINVAL;
   193c8:	2016      	movs	r0, #22
    return rc;
   193ca:	e7f7      	b.n	193bc <hal_spi_config_slave+0x3c>

000193cc <hal_spi_init_master>:

static int
hal_spi_init_master(struct nrf52_hal_spi *spi,
                    struct nrf52_hal_spi_cfg *cfg,
                    nrf52_spi_irq_handler_t handler)
{
   193cc:	b430      	push	{r4, r5}
    NRF_GPIO_Type *port;
    uint32_t pin;

    /*  Configure MOSI */
    port = HAL_GPIO_PORT(cfg->mosi_pin);
    pin = HAL_GPIO_INDEX(cfg->mosi_pin);
   193ce:	784b      	ldrb	r3, [r1, #1]
    port->OUTCLR = (1UL << pin);
   193d0:	2501      	movs	r5, #1
   193d2:	409d      	lsls	r5, r3
   193d4:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   193d8:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
    port->PIN_CNF[pin] =
   193dc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   193e0:	2503      	movs	r5, #3
   193e2:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Disconnect << GPIO_PIN_CNF_INPUT_Pos);

    /* Configure MISO */
    port = HAL_GPIO_PORT(cfg->miso_pin);
    pin = HAL_GPIO_INDEX(cfg->miso_pin);
   193e6:	788b      	ldrb	r3, [r1, #2]
    port->PIN_CNF[pin] =
   193e8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   193ec:	2500      	movs	r5, #0
   193ee:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
        ((uint32_t)GPIO_PIN_CNF_DIR_Input << GPIO_PIN_CNF_DIR_Pos) |
        ((uint32_t)GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos);

    spim = (NRF_SPIM_Type *)spi->nhs_spi.spim;
   193f2:	6903      	ldr	r3, [r0, #16]
    spim->PSEL.SCK = cfg->sck_pin;
   193f4:	780c      	ldrb	r4, [r1, #0]
   193f6:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    spim->PSEL.MOSI = cfg->mosi_pin;
   193fa:	784c      	ldrb	r4, [r1, #1]
   193fc:	f8c3 450c 	str.w	r4, [r3, #1292]	; 0x50c
    spim->PSEL.MISO = cfg->miso_pin;
   19400:	7889      	ldrb	r1, [r1, #2]
   19402:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510

    spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19406:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1940a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    NVIC_SetVector(spi->irq_num, (uint32_t)handler);
   1940e:	f990 3014 	ldrsb.w	r3, [r0, #20]
  uint32_t vectors = (uint32_t )SCB->VTOR;
   19412:	4919      	ldr	r1, [pc, #100]	; (19478 <hal_spi_init_master+0xac>)
   19414:	6889      	ldr	r1, [r1, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   19416:	3310      	adds	r3, #16
   19418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_SetPriority(spi->irq_num, (1 << __NVIC_PRIO_BITS) - 1);
   1941c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19420:	42ab      	cmp	r3, r5
   19422:	db22      	blt.n	1946a <hal_spi_init_master+0x9e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   19424:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   19428:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   1942c:	22e0      	movs	r2, #224	; 0xe0
   1942e:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    NVIC_ClearPendingIRQ(spi->irq_num);
   19432:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19436:	2b00      	cmp	r3, #0
   19438:	db08      	blt.n	1944c <hal_spi_init_master+0x80>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1943a:	f003 011f 	and.w	r1, r3, #31
   1943e:	095b      	lsrs	r3, r3, #5
   19440:	2201      	movs	r2, #1
   19442:	408a      	lsls	r2, r1
   19444:	3360      	adds	r3, #96	; 0x60
   19446:	490d      	ldr	r1, [pc, #52]	; (1947c <hal_spi_init_master+0xb0>)
   19448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    NVIC_EnableIRQ(spi->irq_num);
   1944c:	f990 3014 	ldrsb.w	r3, [r0, #20]
  if ((int32_t)(IRQn) >= 0)
   19450:	2b00      	cmp	r3, #0
   19452:	db07      	blt.n	19464 <hal_spi_init_master+0x98>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   19454:	f003 011f 	and.w	r1, r3, #31
   19458:	095b      	lsrs	r3, r3, #5
   1945a:	2201      	movs	r2, #1
   1945c:	408a      	lsls	r2, r1
   1945e:	4907      	ldr	r1, [pc, #28]	; (1947c <hal_spi_init_master+0xb0>)
   19460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    return 0;
}
   19464:	2000      	movs	r0, #0
   19466:	bc30      	pop	{r4, r5}
   19468:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1946a:	f003 030f 	and.w	r3, r3, #15
   1946e:	4a04      	ldr	r2, [pc, #16]	; (19480 <hal_spi_init_master+0xb4>)
   19470:	441a      	add	r2, r3
   19472:	23e0      	movs	r3, #224	; 0xe0
   19474:	7613      	strb	r3, [r2, #24]
   19476:	e7dc      	b.n	19432 <hal_spi_init_master+0x66>
   19478:	e000ed00 	.word	0xe000ed00
   1947c:	e000e100 	.word	0xe000e100
   19480:	e000ecfc 	.word	0xe000ecfc

00019484 <hal_spi_config_master>:
{
   19484:	b410      	push	{r4}
    spim = spi->nhs_spi.spim;
   19486:	6902      	ldr	r2, [r0, #16]
    memcpy(&spi->spi_cfg, settings, sizeof(*settings));
   19488:	680c      	ldr	r4, [r1, #0]
   1948a:	684b      	ldr	r3, [r1, #4]
   1948c:	6084      	str	r4, [r0, #8]
   1948e:	60c3      	str	r3, [r0, #12]
    pin = spim->PSEL.SCK & SPIM_PSEL_SCK_PIN_Msk;
   19490:	f8d2 3508 	ldr.w	r3, [r2, #1288]	; 0x508
   19494:	f003 031f 	and.w	r3, r3, #31
    if (settings->data_mode <= HAL_SPI_MODE1) {
   19498:	7808      	ldrb	r0, [r1, #0]
   1949a:	2801      	cmp	r0, #1
   1949c:	d916      	bls.n	194cc <hal_spi_config_master+0x48>
        port->OUTSET = (1UL << pin);
   1949e:	2001      	movs	r0, #1
   194a0:	4098      	lsls	r0, r3
   194a2:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   194a6:	f8c4 0508 	str.w	r0, [r4, #1288]	; 0x508
    port->PIN_CNF[pin] =
   194aa:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   194ae:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
   194b2:	2403      	movs	r4, #3
   194b4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    switch (settings->word_size) {
   194b8:	788b      	ldrb	r3, [r1, #2]
   194ba:	b973      	cbnz	r3, 194da <hal_spi_config_master+0x56>
    rc = 0;
   194bc:	2000      	movs	r0, #0
    switch (settings->data_mode) {
   194be:	780b      	ldrb	r3, [r1, #0]
   194c0:	2b03      	cmp	r3, #3
   194c2:	d812      	bhi.n	194ea <hal_spi_config_master+0x66>
   194c4:	e8df f003 	tbb	[pc, r3]
   194c8:	0f0d140b 	.word	0x0f0d140b
        port->OUTCLR = (1UL << pin);
   194cc:	2001      	movs	r0, #1
   194ce:	4098      	lsls	r0, r3
   194d0:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
   194d4:	f8c4 050c 	str.w	r0, [r4, #1292]	; 0x50c
   194d8:	e7e7      	b.n	194aa <hal_spi_config_master+0x26>
            rc = EINVAL;
   194da:	2016      	movs	r0, #22
   194dc:	e7ef      	b.n	194be <hal_spi_config_master+0x3a>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   194de:	2300      	movs	r3, #0
   194e0:	e007      	b.n	194f2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   194e2:	2304      	movs	r3, #4
            break;
   194e4:	e005      	b.n	194f2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveLow << SPIM_CONFIG_CPOL_Pos) |
   194e6:	2306      	movs	r3, #6
            break;
   194e8:	e003      	b.n	194f2 <hal_spi_config_master+0x6e>
            nrf_config = 0;
   194ea:	2300      	movs	r3, #0
            rc = EINVAL;
   194ec:	2016      	movs	r0, #22
            break;
   194ee:	e000      	b.n	194f2 <hal_spi_config_master+0x6e>
            nrf_config = (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
   194f0:	2302      	movs	r3, #2
    if (settings->data_order == HAL_SPI_LSB_FIRST) {
   194f2:	784c      	ldrb	r4, [r1, #1]
   194f4:	2c01      	cmp	r4, #1
   194f6:	d010      	beq.n	1951a <hal_spi_config_master+0x96>
    spim->CONFIG = nrf_config;
   194f8:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
    switch (settings->baudrate) {
   194fc:	684b      	ldr	r3, [r1, #4]
   194fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
   19502:	d023      	beq.n	1954c <hal_spi_config_master+0xc8>
   19504:	d80c      	bhi.n	19520 <hal_spi_config_master+0x9c>
   19506:	2bfa      	cmp	r3, #250	; 0xfa
   19508:	d029      	beq.n	1955e <hal_spi_config_master+0xda>
   1950a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   1950e:	d01a      	beq.n	19546 <hal_spi_config_master+0xc2>
   19510:	2b7d      	cmp	r3, #125	; 0x7d
   19512:	d011      	beq.n	19538 <hal_spi_config_master+0xb4>
            frequency = 0;
   19514:	2300      	movs	r3, #0
            rc = EINVAL;
   19516:	2016      	movs	r0, #22
            break;
   19518:	e010      	b.n	1953c <hal_spi_config_master+0xb8>
        nrf_config |= SPIM_CONFIG_ORDER_LsbFirst;
   1951a:	f043 0301 	orr.w	r3, r3, #1
   1951e:	e7eb      	b.n	194f8 <hal_spi_config_master+0x74>
    switch (settings->baudrate) {
   19520:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
   19524:	d015      	beq.n	19552 <hal_spi_config_master+0xce>
   19526:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
   1952a:	d015      	beq.n	19558 <hal_spi_config_master+0xd4>
   1952c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
   19530:	d1f0      	bne.n	19514 <hal_spi_config_master+0x90>
            frequency = SPIM_FREQUENCY_FREQUENCY_M2;
   19532:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
            break;
   19536:	e001      	b.n	1953c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K125;
   19538:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    spim->FREQUENCY = frequency;
   1953c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
}
   19540:	f85d 4b04 	ldr.w	r4, [sp], #4
   19544:	4770      	bx	lr
            frequency = SPIM_FREQUENCY_FREQUENCY_K500;
   19546:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
            break;
   1954a:	e7f7      	b.n	1953c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M1;
   1954c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            break;
   19550:	e7f4      	b.n	1953c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M4;
   19552:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
            break;
   19556:	e7f1      	b.n	1953c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_M8;
   19558:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
            break;
   1955c:	e7ee      	b.n	1953c <hal_spi_config_master+0xb8>
            frequency = SPIM_FREQUENCY_FREQUENCY_K250;
   1955e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   19562:	e7eb      	b.n	1953c <hal_spi_config_master+0xb8>

00019564 <hal_spi_config>:
{
    int rc;
    struct nrf52_hal_spi *spi;
    NRF_SPIM_Type *spim;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19564:	2802      	cmp	r0, #2
   19566:	dc10      	bgt.n	1958a <hal_spi_config+0x26>
{
   19568:	b508      	push	{r3, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1956a:	4b0b      	ldr	r3, [pc, #44]	; (19598 <hal_spi_config+0x34>)
   1956c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   19570:	b168      	cbz	r0, 1958e <hal_spi_config+0x2a>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   19572:	6903      	ldr	r3, [r0, #16]
    if (spim->ENABLE != 0) {
   19574:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
   19578:	b95b      	cbnz	r3, 19592 <hal_spi_config+0x2e>
        return -1;
    }

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   1957a:	7803      	ldrb	r3, [r0, #0]
   1957c:	b113      	cbz	r3, 19584 <hal_spi_config+0x20>
        rc = hal_spi_config_master(spi, settings);
    } else {
        rc = hal_spi_config_slave(spi, settings);
   1957e:	f7ff feff 	bl	19380 <hal_spi_config_slave>
    }

err:
    return (rc);
}
   19582:	bd08      	pop	{r3, pc}
        rc = hal_spi_config_master(spi, settings);
   19584:	f7ff ff7e 	bl	19484 <hal_spi_config_master>
   19588:	e7fb      	b.n	19582 <hal_spi_config+0x1e>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1958a:	2016      	movs	r0, #22
}
   1958c:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1958e:	2016      	movs	r0, #22
   19590:	e7f7      	b.n	19582 <hal_spi_config+0x1e>
        return -1;
   19592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19596:	e7f4      	b.n	19582 <hal_spi_config+0x1e>
   19598:	00020fa8 	.word	0x00020fa8

0001959c <hal_spi_enable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPI_Type *nrf_spi;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1959c:	2802      	cmp	r0, #2
   1959e:	dc1b      	bgt.n	195d8 <hal_spi_enable+0x3c>
   195a0:	4b10      	ldr	r3, [pc, #64]	; (195e4 <hal_spi_enable+0x48>)
   195a2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   195a6:	b1cb      	cbz	r3, 195dc <hal_spi_enable+0x40>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   195a8:	781a      	ldrb	r2, [r3, #0]
   195aa:	b17a      	cbz	r2, 195cc <hal_spi_enable+0x30>
        /* For now, enable this in normal SPI mode (not spim) */
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
    } else {
        if (spi->txrx_cb_func == NULL) {
   195ac:	6a1a      	ldr	r2, [r3, #32]
   195ae:	b1ba      	cbz	r2, 195e0 <hal_spi_enable+0x44>
            rc = EINVAL;
            goto err;
        }

        spis = spi->nhs_spi.spis;
   195b0:	691b      	ldr	r3, [r3, #16]
        spis->EVENTS_END = 0;
   195b2:	2000      	movs	r0, #0
   195b4:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   195b8:	f8c3 0128 	str.w	r0, [r3, #296]	; 0x128
        spis->INTENSET = SPIS_INTENSET_END_Msk | SPIS_INTENSET_ACQUIRED_Msk;
   195bc:	f240 4202 	movw	r2, #1026	; 0x402
   195c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
        spis->ENABLE = (SPIS_ENABLE_ENABLE_Enabled << SPIS_ENABLE_ENABLE_Pos);
   195c4:	2202      	movs	r2, #2
   195c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
   195ca:	4770      	bx	lr
        nrf_spi = (NRF_SPI_Type *)spi->nhs_spi.spim;
   195cc:	691b      	ldr	r3, [r3, #16]
        nrf_spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   195ce:	2201      	movs	r2, #1
   195d0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    }
    rc = 0;
   195d4:	2000      	movs	r0, #0
   195d6:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195d8:	2016      	movs	r0, #22
   195da:	4770      	bx	lr
   195dc:	2016      	movs	r0, #22
   195de:	4770      	bx	lr
            rc = EINVAL;
   195e0:	2016      	movs	r0, #22

err:
    return rc;
}
   195e2:	4770      	bx	lr
   195e4:	00020fa8 	.word	0x00020fa8

000195e8 <hal_spi_disable>:
    int rc;
    NRF_SPIS_Type *spis;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195e8:	2802      	cmp	r0, #2
   195ea:	dc2a      	bgt.n	19642 <hal_spi_disable+0x5a>
{
   195ec:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   195ee:	4b17      	ldr	r3, [pc, #92]	; (1964c <hal_spi_disable+0x64>)
   195f0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   195f4:	b33c      	cbz	r4, 19646 <hal_spi_disable+0x5e>

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   195f6:	7823      	ldrb	r3, [r4, #0]
   195f8:	b9ab      	cbnz	r3, 19626 <hal_spi_disable+0x3e>
        spim = spi->nhs_spi.spim;
   195fa:	6925      	ldr	r5, [r4, #16]
        spim->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   195fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19600:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308

        if (spi->spi_xfr_flag) {
   19604:	7863      	ldrb	r3, [r4, #1]
   19606:	b943      	cbnz	r3, 1961a <hal_spi_disable+0x32>
            hal_spi_stop_transfer(spim);
            spi->spi_xfr_flag = 0;
        }
        spim->ENABLE = 0;
   19608:	2300      	movs	r3, #0
   1960a:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
        spis->EVENTS_ACQUIRED = 0;
        spis->ENABLE = 0;
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
    }

    spi->nhs_txbuf = NULL;
   1960e:	2000      	movs	r0, #0
   19610:	61a0      	str	r0, [r4, #24]
    spi->nhs_rxbuf = NULL;
   19612:	61e0      	str	r0, [r4, #28]
    spi->nhs_buflen = 0;
   19614:	80a0      	strh	r0, [r4, #4]
    spi->nhs_bytes_txd = 0;
   19616:	80e0      	strh	r0, [r4, #6]

    rc = 0;

err:
    return rc;
}
   19618:	bd38      	pop	{r3, r4, r5, pc}
            hal_spi_stop_transfer(spim);
   1961a:	4628      	mov	r0, r5
   1961c:	f7ff fea6 	bl	1936c <hal_spi_stop_transfer>
            spi->spi_xfr_flag = 0;
   19620:	2300      	movs	r3, #0
   19622:	7063      	strb	r3, [r4, #1]
   19624:	e7f0      	b.n	19608 <hal_spi_disable+0x20>
        spis = spi->nhs_spi.spis;
   19626:	6922      	ldr	r2, [r4, #16]
        spis->INTENCLR = NRF_SPI_IRQ_DISABLE_ALL;
   19628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1962c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        spis->EVENTS_END = 0;
   19630:	2300      	movs	r3, #0
   19632:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
        spis->EVENTS_ACQUIRED = 0;
   19636:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
        spis->ENABLE = 0;
   1963a:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
        spi->slave_state = HAL_SPI_SLAVE_STATE_IDLE;
   1963e:	70e3      	strb	r3, [r4, #3]
   19640:	e7e5      	b.n	1960e <hal_spi_disable+0x26>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19642:	2016      	movs	r0, #22
}
   19644:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19646:	2016      	movs	r0, #22
    return rc;
   19648:	e7e6      	b.n	19618 <hal_spi_disable+0x30>
   1964a:	bf00      	nop
   1964c:	00020fa8 	.word	0x00020fa8

00019650 <hal_spi_init>:
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19650:	2802      	cmp	r0, #2
   19652:	dc1d      	bgt.n	19690 <hal_spi_init+0x40>
{
   19654:	b538      	push	{r3, r4, r5, lr}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19656:	4b13      	ldr	r3, [pc, #76]	; (196a4 <hal_spi_init+0x54>)
   19658:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   1965c:	b1d4      	cbz	r4, 19694 <hal_spi_init+0x44>
    if (cfg == NULL) {
   1965e:	b1d9      	cbz	r1, 19698 <hal_spi_init+0x48>
    if ((spi_type != HAL_SPI_TYPE_MASTER) && (spi_type != HAL_SPI_TYPE_SLAVE)) {
   19660:	2a01      	cmp	r2, #1
   19662:	d81b      	bhi.n	1969c <hal_spi_init+0x4c>
    spi->spi_type  = spi_type;
   19664:	7022      	strb	r2, [r4, #0]
    if (spi_num == 0) {
   19666:	b9d8      	cbnz	r0, 196a0 <hal_spi_init+0x50>
   19668:	460d      	mov	r5, r1
        spi->irq_num = SPIM0_SPIS0_TWIM0_TWIS0_SPI0_TWI0_IRQn;
   1966a:	2303      	movs	r3, #3
   1966c:	7523      	strb	r3, [r4, #20]
        if (spi_type == HAL_SPI_TYPE_MASTER) {
   1966e:	b94a      	cbnz	r2, 19684 <hal_spi_init+0x34>
            spi->nhs_spi.spim = NRF_SPIM0;
   19670:	4b0d      	ldr	r3, [pc, #52]	; (196a8 <hal_spi_init+0x58>)
   19672:	6123      	str	r3, [r4, #16]
    hal_spi_disable(spi_num);
   19674:	f7ff ffb8 	bl	195e8 <hal_spi_disable>
        rc = hal_spi_init_master(spi, (struct nrf52_hal_spi_cfg *)cfg,
   19678:	4a0c      	ldr	r2, [pc, #48]	; (196ac <hal_spi_init+0x5c>)
   1967a:	4629      	mov	r1, r5
   1967c:	4620      	mov	r0, r4
   1967e:	f7ff fea5 	bl	193cc <hal_spi_init_master>
   19682:	e00c      	b.n	1969e <hal_spi_init+0x4e>
            assert(0);
   19684:	2300      	movs	r3, #0
   19686:	461a      	mov	r2, r3
   19688:	4619      	mov	r1, r3
   1968a:	4618      	mov	r0, r3
   1968c:	f000 f952 	bl	19934 <__assert_func>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19690:	2016      	movs	r0, #22
}
   19692:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19694:	2016      	movs	r0, #22
   19696:	e002      	b.n	1969e <hal_spi_init+0x4e>
    rc = EINVAL;
   19698:	2016      	movs	r0, #22
   1969a:	e000      	b.n	1969e <hal_spi_init+0x4e>
   1969c:	2016      	movs	r0, #22
}
   1969e:	bd38      	pop	{r3, r4, r5, pc}
    rc = EINVAL;
   196a0:	2016      	movs	r0, #22
    return (rc);
   196a2:	e7fc      	b.n	1969e <hal_spi_init+0x4e>
   196a4:	00020fa8 	.word	0x00020fa8
   196a8:	40003000 	.word	0x40003000
   196ac:	00019355 	.word	0x00019355

000196b0 <hal_spi_set_txrx_cb>:
{
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196b0:	2802      	cmp	r0, #2
   196b2:	dc0a      	bgt.n	196ca <hal_spi_set_txrx_cb+0x1a>
   196b4:	4b08      	ldr	r3, [pc, #32]	; (196d8 <hal_spi_set_txrx_cb+0x28>)
   196b6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   196ba:	b143      	cbz	r3, 196ce <hal_spi_set_txrx_cb+0x1e>

    /*
     * This looks odd, but the ENABLE register is in the same location for
     * SPIM, SPI and SPIS
     */
    spim = spi->nhs_spi.spim;
   196bc:	6918      	ldr	r0, [r3, #16]
    if (spim->ENABLE != 0) {
   196be:	f8d0 0500 	ldr.w	r0, [r0, #1280]	; 0x500
   196c2:	b930      	cbnz	r0, 196d2 <hal_spi_set_txrx_cb+0x22>
        rc = -1;
    } else {
        spi->txrx_cb_func = txrx_cb;
   196c4:	6219      	str	r1, [r3, #32]
        spi->txrx_cb_arg = arg;
   196c6:	625a      	str	r2, [r3, #36]	; 0x24
   196c8:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   196ca:	2016      	movs	r0, #22
   196cc:	4770      	bx	lr
   196ce:	2016      	movs	r0, #22
   196d0:	4770      	bx	lr
        rc = -1;
   196d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
        rc = 0;
    }

err:
    return rc;
}
   196d6:	4770      	bx	lr
   196d8:	00020fa8 	.word	0x00020fa8

000196dc <hal_spi_txrx>:
    NRF_SPI_Type *spi;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *hal_spi;

    rc = EINVAL;
    if (!len) {
   196dc:	2b00      	cmp	r3, #0
   196de:	d046      	beq.n	1976e <hal_spi_txrx+0x92>
{
   196e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196e2:	460d      	mov	r5, r1
   196e4:	4617      	mov	r7, r2
   196e6:	461e      	mov	r6, r3
        goto err;
    }

    NRF52_HAL_SPI_RESOLVE(spi_num, hal_spi);
   196e8:	2802      	cmp	r0, #2
   196ea:	dc42      	bgt.n	19772 <hal_spi_txrx+0x96>
   196ec:	4b25      	ldr	r3, [pc, #148]	; (19784 <hal_spi_txrx+0xa8>)
   196ee:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   196f2:	2b00      	cmp	r3, #0
   196f4:	d03f      	beq.n	19776 <hal_spi_txrx+0x9a>

    if (hal_spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   196f6:	781a      	ldrb	r2, [r3, #0]
   196f8:	2a00      	cmp	r2, #0
   196fa:	d13e      	bne.n	1977a <hal_spi_txrx+0x9e>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   196fc:	2900      	cmp	r1, #0
   196fe:	d03e      	beq.n	1977e <hal_spi_txrx+0xa2>

        /*
         * If SPIM is enabled, we want to stop, disable, then enable
         * the legacy SPI interface.
         */
        spim = hal_spi->nhs_spi.spim;
   19700:	691c      	ldr	r4, [r3, #16]
        enabled = spim->ENABLE;
   19702:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
        if (enabled == SPIM_ENABLE_ENABLE_Enabled) {
   19706:	2b07      	cmp	r3, #7
   19708:	d004      	beq.n	19714 <hal_spi_txrx+0x38>
            hal_spi_disable(spi_num);
            enabled = 0;
        }

        spi = (NRF_SPI_Type *)spim;
        if (enabled == 0) {
   1970a:	b95b      	cbnz	r3, 19724 <hal_spi_txrx+0x48>
            spi->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1970c:	2301      	movs	r3, #1
   1970e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
   19712:	e007      	b.n	19724 <hal_spi_txrx+0x48>
            hal_spi_disable(spi_num);
   19714:	f7ff ff68 	bl	195e8 <hal_spi_disable>
   19718:	e7f8      	b.n	1970c <hal_spi_txrx+0x30>
        }

        while (spi->EVENTS_READY) {
            rxval = (uint8_t)spi->RXD;
   1971a:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
            spi->EVENTS_READY = 0;
   1971e:	2300      	movs	r3, #0
   19720:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
        while (spi->EVENTS_READY) {
   19724:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   19728:	2b00      	cmp	r3, #0
   1972a:	d1f6      	bne.n	1971a <hal_spi_txrx+0x3e>
        }
        txd = (uint8_t *)txbuf;
        spi->TXD = *txd;
   1972c:	782b      	ldrb	r3, [r5, #0]
   1972e:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c

        txcnt = len - 1;
   19732:	1e71      	subs	r1, r6, #1
        rxd = (uint8_t *)rxbuf;
   19734:	4638      	mov	r0, r7
        for (i = 0; i < len; ++i) {
   19736:	2200      	movs	r2, #0
   19738:	e00d      	b.n	19756 <hal_spi_txrx+0x7a>
            if (txcnt) {
                ++txd;
                spi->TXD = *txd;
                --txcnt;
            }
            while (!spi->EVENTS_READY) {}
   1973a:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
   1973e:	2b00      	cmp	r3, #0
   19740:	d0fb      	beq.n	1973a <hal_spi_txrx+0x5e>
            spi->EVENTS_READY = 0;
   19742:	2300      	movs	r3, #0
   19744:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
            rxval = (uint8_t)spi->RXD;
   19748:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518
   1974c:	b2db      	uxtb	r3, r3
            if (rxbuf) {
   1974e:	b10f      	cbz	r7, 19754 <hal_spi_txrx+0x78>
                *rxd = rxval;
   19750:	f800 3b01 	strb.w	r3, [r0], #1
        for (i = 0; i < len; ++i) {
   19754:	3201      	adds	r2, #1
   19756:	42b2      	cmp	r2, r6
   19758:	da07      	bge.n	1976a <hal_spi_txrx+0x8e>
            if (txcnt) {
   1975a:	2900      	cmp	r1, #0
   1975c:	d0ed      	beq.n	1973a <hal_spi_txrx+0x5e>
                spi->TXD = *txd;
   1975e:	786b      	ldrb	r3, [r5, #1]
   19760:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
                --txcnt;
   19764:	3901      	subs	r1, #1
                ++txd;
   19766:	3501      	adds	r5, #1
   19768:	e7e7      	b.n	1973a <hal_spi_txrx+0x5e>
                ++rxd;
            }
        }
        return 0;
   1976a:	2000      	movs	r0, #0
    }

err:
    return rc;
}
   1976c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return rc;
   1976e:	2016      	movs	r0, #22
}
   19770:	4770      	bx	lr
    return rc;
   19772:	2016      	movs	r0, #22
   19774:	e7fa      	b.n	1976c <hal_spi_txrx+0x90>
   19776:	2016      	movs	r0, #22
   19778:	e7f8      	b.n	1976c <hal_spi_txrx+0x90>
   1977a:	2016      	movs	r0, #22
   1977c:	e7f6      	b.n	1976c <hal_spi_txrx+0x90>
   1977e:	2016      	movs	r0, #22
   19780:	e7f4      	b.n	1976c <hal_spi_txrx+0x90>
   19782:	bf00      	nop
   19784:	00020fa8 	.word	0x00020fa8

00019788 <hal_spi_txrx_noblock>:
    int rc;
    NRF_SPIM_Type *spim;
    struct nrf52_hal_spi *spi;

    rc = EINVAL;
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19788:	2802      	cmp	r0, #2
   1978a:	dc57      	bgt.n	1983c <hal_spi_txrx_noblock+0xb4>
{
   1978c:	b430      	push	{r4, r5}
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1978e:	4c35      	ldr	r4, [pc, #212]	; (19864 <hal_spi_txrx_noblock+0xdc>)
   19790:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
   19794:	2800      	cmp	r0, #0
   19796:	d053      	beq.n	19840 <hal_spi_txrx_noblock+0xb8>

    if ((spi->txrx_cb_func == NULL) || (len == 0)) {
   19798:	6a04      	ldr	r4, [r0, #32]
   1979a:	2c00      	cmp	r4, #0
   1979c:	d052      	beq.n	19844 <hal_spi_txrx_noblock+0xbc>
   1979e:	2b00      	cmp	r3, #0
   197a0:	d052      	beq.n	19848 <hal_spi_txrx_noblock+0xc0>
        }
        return rc;
    }
#endif

    if (spi->spi_type  == HAL_SPI_TYPE_MASTER) {
   197a2:	7804      	ldrb	r4, [r0, #0]
   197a4:	2c00      	cmp	r4, #0
   197a6:	d137      	bne.n	19818 <hal_spi_txrx_noblock+0x90>
        /* Must have a txbuf for master! */
        if (txbuf == NULL) {
   197a8:	2900      	cmp	r1, #0
   197aa:	d050      	beq.n	1984e <hal_spi_txrx_noblock+0xc6>
            goto err;
        }

        /* Not allowed if transfer in progress */
        if (spi->spi_xfr_flag) {
   197ac:	7844      	ldrb	r4, [r0, #1]
   197ae:	2c00      	cmp	r4, #0
   197b0:	d14f      	bne.n	19852 <hal_spi_txrx_noblock+0xca>
            rc = -1;
            goto err;
        }
        spim = spi->nhs_spi.spim;
   197b2:	6904      	ldr	r4, [r0, #16]
        spim->INTENCLR = SPIM_INTENCLR_END_Msk;
   197b4:	2540      	movs	r5, #64	; 0x40
   197b6:	f8c4 5308 	str.w	r5, [r4, #776]	; 0x308
        spi->spi_xfr_flag = 1;
   197ba:	2501      	movs	r5, #1
   197bc:	7045      	strb	r5, [r0, #1]

        /* Must be enabled for SPIM as opposed to SPI */
        if (spim->ENABLE != SPIM_ENABLE_ENABLE_Enabled) {
   197be:	f8d4 5500 	ldr.w	r5, [r4, #1280]	; 0x500
   197c2:	2d07      	cmp	r5, #7
   197c4:	d005      	beq.n	197d2 <hal_spi_txrx_noblock+0x4a>
            spim->ENABLE = 0;
   197c6:	2500      	movs	r5, #0
   197c8:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
            spim->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
   197cc:	2507      	movs	r5, #7
   197ce:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
        }

        /* Set internal data structure information */
        spi->nhs_bytes_txd = 0;
   197d2:	2500      	movs	r5, #0
   197d4:	80c5      	strh	r5, [r0, #6]
        spi->nhs_buflen = len;
   197d6:	8083      	strh	r3, [r0, #4]
        spi->nhs_txbuf = txbuf;
   197d8:	6181      	str	r1, [r0, #24]

        len = min(SPIM_TXD_MAXCNT_MAX, len);
   197da:	2bff      	cmp	r3, #255	; 0xff
   197dc:	bfa8      	it	ge
   197de:	23ff      	movge	r3, #255	; 0xff

        /* Set chip registers */
        spim->TXD.PTR = (uint32_t)txbuf;
   197e0:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
        spim->TXD.MAXCNT = len;
   197e4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548

        /* If no rxbuf, we need to set rxbuf and maxcnt to 1 */
        spi->nhs_rxbuf = rxbuf;
   197e8:	61c2      	str	r2, [r0, #28]
        if (rxbuf == NULL) {
   197ea:	b172      	cbz	r2, 1980a <hal_spi_txrx_noblock+0x82>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
            spim->RXD.MAXCNT = 1;
        } else {
            spim->RXD.PTR = (uint32_t)rxbuf;
   197ec:	f8c4 2534 	str.w	r2, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = len;
   197f0:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        }

        spim->EVENTS_END = 0;
   197f4:	2000      	movs	r0, #0
   197f6:	f8c4 0118 	str.w	r0, [r4, #280]	; 0x118
        spim->EVENTS_STOPPED = 0;
   197fa:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
        spim->TASKS_START = 1;
   197fe:	2301      	movs	r3, #1
   19800:	6123      	str	r3, [r4, #16]
        spim->INTENSET = SPIM_INTENSET_END_Msk;
   19802:	2340      	movs	r3, #64	; 0x40
   19804:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   19808:	e01f      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
            spim->RXD.PTR = (uint32_t)&spi->dummy_rx;
   1980a:	3002      	adds	r0, #2
   1980c:	f8c4 0534 	str.w	r0, [r4, #1332]	; 0x534
            spim->RXD.MAXCNT = 1;
   19810:	2301      	movs	r3, #1
   19812:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
   19816:	e7ed      	b.n	197f4 <hal_spi_txrx_noblock+0x6c>
    } else {
        /* Must have txbuf or rxbuf */
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19818:	b161      	cbz	r1, 19834 <hal_spi_txrx_noblock+0xac>
            goto err;
        }

        /* XXX: what to do here? */
        if (len > 255) {
   1981a:	2bff      	cmp	r3, #255	; 0xff
   1981c:	dc1c      	bgt.n	19858 <hal_spi_txrx_noblock+0xd0>
        /*
         * Ready the slave for a transfer. Do not allow this to be called
         * if the slave has already been readied or is requesting the
         * semaphore
         */
        if (spi->slave_state != HAL_SPI_SLAVE_STATE_IDLE) {
   1981e:	78c4      	ldrb	r4, [r0, #3]
   19820:	b9e4      	cbnz	r4, 1985c <hal_spi_txrx_noblock+0xd4>
            rc = -1;
            goto err;
        }

        spi->nhs_rxbuf = rxbuf;
   19822:	61c2      	str	r2, [r0, #28]
        spi->nhs_txbuf = txbuf;
   19824:	6181      	str	r1, [r0, #24]
        spi->nhs_buflen = len;
   19826:	8083      	strh	r3, [r0, #4]
        spi->slave_state = HAL_SPI_SLAVE_STATE_ACQ_SEM;
   19828:	2301      	movs	r3, #1
   1982a:	70c3      	strb	r3, [r0, #3]
        spi->nhs_spi.spis->TASKS_ACQUIRE = 1;
   1982c:	6902      	ldr	r2, [r0, #16]
   1982e:	6253      	str	r3, [r2, #36]	; 0x24
    }
    return 0;
   19830:	2000      	movs	r0, #0
   19832:	e00a      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
        if ((txbuf == NULL) && (rxbuf == NULL)) {
   19834:	2a00      	cmp	r2, #0
   19836:	d1f0      	bne.n	1981a <hal_spi_txrx_noblock+0x92>
    rc = EINVAL;
   19838:	2016      	movs	r0, #22
   1983a:	e006      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   1983c:	2016      	movs	r0, #22

err:
    return rc;
}
   1983e:	4770      	bx	lr
    NRF52_HAL_SPI_RESOLVE(spi_num, spi);
   19840:	2016      	movs	r0, #22
   19842:	e002      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19844:	2016      	movs	r0, #22
   19846:	e000      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
   19848:	2016      	movs	r0, #22
}
   1984a:	bc30      	pop	{r4, r5}
   1984c:	4770      	bx	lr
    rc = EINVAL;
   1984e:	2016      	movs	r0, #22
   19850:	e7fb      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   19852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19856:	e7f8      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
    rc = EINVAL;
   19858:	2016      	movs	r0, #22
   1985a:	e7f6      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
            rc = -1;
   1985c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19860:	e7f3      	b.n	1984a <hal_spi_txrx_noblock+0xc2>
   19862:	bf00      	nop
   19864:	00020fa8 	.word	0x00020fa8

00019868 <nrf52_hal_wdt_default_handler>:
#include "mcu/cmsis_nvic.h"
#include "nrf.h"

static void
nrf52_hal_wdt_default_handler(void)
{
   19868:	b508      	push	{r3, lr}
    assert(0);
   1986a:	2300      	movs	r3, #0
   1986c:	461a      	mov	r2, r3
   1986e:	4619      	mov	r1, r3
   19870:	4618      	mov	r0, r3
   19872:	f000 f85f 	bl	19934 <__assert_func>
	...

00019878 <nrf52_wdt_irq_handler>:
}

/**@brief WDT interrupt handler. */
static void
nrf52_wdt_irq_handler(void)
{
   19878:	b508      	push	{r3, lr}
    os_trace_isr_enter();
    if (NRF_WDT->INTENSET & WDT_INTENSET_TIMEOUT_Msk) {
   1987a:	4b06      	ldr	r3, [pc, #24]	; (19894 <nrf52_wdt_irq_handler+0x1c>)
   1987c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   19880:	f013 0f01 	tst.w	r3, #1
   19884:	d100      	bne.n	19888 <nrf52_wdt_irq_handler+0x10>
        NRF_WDT->EVENTS_TIMEOUT = 0;
        nrf52_hal_wdt_default_handler();
    }
    os_trace_isr_exit();
}
   19886:	bd08      	pop	{r3, pc}
        NRF_WDT->EVENTS_TIMEOUT = 0;
   19888:	4b02      	ldr	r3, [pc, #8]	; (19894 <nrf52_wdt_irq_handler+0x1c>)
   1988a:	2200      	movs	r2, #0
   1988c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
        nrf52_hal_wdt_default_handler();
   19890:	f7ff ffea 	bl	19868 <nrf52_hal_wdt_default_handler>
   19894:	40010000 	.word	0x40010000

00019898 <hal_watchdog_init>:

int
hal_watchdog_init(uint32_t expire_msecs)
{
   19898:	b508      	push	{r3, lr}
    NRF_WDT->CONFIG = WDT_CONFIG_SLEEP_Msk;
   1989a:	4b17      	ldr	r3, [pc, #92]	; (198f8 <hal_watchdog_init+0x60>)
   1989c:	2201      	movs	r2, #1
   1989e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c

    if (expire_msecs >= 44739243) {
   198a2:	4b16      	ldr	r3, [pc, #88]	; (198fc <hal_watchdog_init+0x64>)
   198a4:	4298      	cmp	r0, r3
   198a6:	d821      	bhi.n	198ec <hal_watchdog_init+0x54>
        /* maximum allowed time is near 12.5 hours! */
        assert(0);
    } else {
        NRF_WDT->CRV = (expire_msecs * 32) + ((expire_msecs * 96) / 125);
   198a8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   198ac:	0153      	lsls	r3, r2, #5
   198ae:	4a14      	ldr	r2, [pc, #80]	; (19900 <hal_watchdog_init+0x68>)
   198b0:	fba2 2303 	umull	r2, r3, r2, r3
   198b4:	08db      	lsrs	r3, r3, #3
   198b6:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   198ba:	4b0f      	ldr	r3, [pc, #60]	; (198f8 <hal_watchdog_init+0x60>)
   198bc:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
  uint32_t vectors = (uint32_t )SCB->VTOR;
   198c0:	4a10      	ldr	r2, [pc, #64]	; (19904 <hal_watchdog_init+0x6c>)
   198c2:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   198c4:	4910      	ldr	r1, [pc, #64]	; (19908 <hal_watchdog_init+0x70>)
   198c6:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   198ca:	4a10      	ldr	r2, [pc, #64]	; (1990c <hal_watchdog_init+0x74>)
   198cc:	21e0      	movs	r1, #224	; 0xe0
   198ce:	f882 1310 	strb.w	r1, [r2, #784]	; 0x310
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   198d2:	f44f 3180 	mov.w	r1, #65536	; 0x10000
   198d6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   198da:	6011      	str	r1, [r2, #0]

    NVIC_SetVector(WDT_IRQn, (uint32_t) nrf52_wdt_irq_handler);
    NVIC_SetPriority(WDT_IRQn, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_ClearPendingIRQ(WDT_IRQn);
    NVIC_EnableIRQ(WDT_IRQn);
    NRF_WDT->RREN |= 0x1;
   198dc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
   198e0:	f042 0201 	orr.w	r2, r2, #1
   198e4:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508

    return (0);
}
   198e8:	2000      	movs	r0, #0
   198ea:	bd08      	pop	{r3, pc}
        assert(0);
   198ec:	2300      	movs	r3, #0
   198ee:	461a      	mov	r2, r3
   198f0:	4619      	mov	r1, r3
   198f2:	4618      	mov	r0, r3
   198f4:	f000 f81e 	bl	19934 <__assert_func>
   198f8:	40010000 	.word	0x40010000
   198fc:	02aaaaaa 	.word	0x02aaaaaa
   19900:	10624dd3 	.word	0x10624dd3
   19904:	e000ed00 	.word	0xe000ed00
   19908:	00019879 	.word	0x00019879
   1990c:	e000e100 	.word	0xe000e100

00019910 <hal_watchdog_enable>:

void
hal_watchdog_enable(void)
{
    NRF_WDT->INTENSET = WDT_INTENSET_TIMEOUT_Msk;
   19910:	4b02      	ldr	r3, [pc, #8]	; (1991c <hal_watchdog_enable+0xc>)
   19912:	2201      	movs	r2, #1
   19914:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    NRF_WDT->TASKS_START = 1;
   19918:	601a      	str	r2, [r3, #0]
}
   1991a:	4770      	bx	lr
   1991c:	40010000 	.word	0x40010000

00019920 <hal_watchdog_tickle>:

void
hal_watchdog_tickle(void)
{
    NRF_WDT->RR[0] = WDT_RR_RR_Reload;
   19920:	4b02      	ldr	r3, [pc, #8]	; (1992c <hal_watchdog_tickle+0xc>)
   19922:	4a03      	ldr	r2, [pc, #12]	; (19930 <hal_watchdog_tickle+0x10>)
   19924:	f8c3 2600 	str.w	r2, [r3, #1536]	; 0x600
}
   19928:	4770      	bx	lr
   1992a:	bf00      	nop
   1992c:	40010000 	.word	0x40010000
   19930:	6e524635 	.word	0x6e524635

00019934 <__assert_func>:
}
#endif

void
__assert_func(const char *file, int line, const char *func, const char *e)
{
   19934:	b508      	push	{r3, lr}
   19936:	4675      	mov	r5, lr
   19938:	4604      	mov	r4, r0
   1993a:	460e      	mov	r6, r1
#if MYNEWT_VAL(OS_CRASH_LOG)
    struct log_reboot_info lri;
#endif
    int sr;

    OS_ENTER_CRITICAL(sr);
   1993c:	f001 fa90 	bl	1ae60 <os_arch_save_sr>
    (void)sr;
    console_blocking_mode();
   19940:	f7ff f905 	bl	18b4e <console_blocking_mode>
    OS_PRINT_ASSERT(file, line, func, e);
   19944:	b18c      	cbz	r4, 1996a <__assert_func+0x36>
   19946:	4633      	mov	r3, r6
   19948:	4622      	mov	r2, r4
   1994a:	4629      	mov	r1, r5
   1994c:	4809      	ldr	r0, [pc, #36]	; (19974 <__assert_func+0x40>)
   1994e:	f7ff f929 	bl	18ba4 <console_printf>

#if MYNEWT_VAL(OS_ASSERT_CB)
    os_assert_cb();
#endif

    if (hal_debugger_connected()) {
   19952:	f7ee fc17 	bl	8184 <hal_debugger_connected>
   19956:	b100      	cbz	r0, 1995a <__assert_func+0x26>
       /*
        * If debugger is attached, breakpoint before the trap.
        */
#if !MYNEWT_VAL(MCU_DEBUG_IGNORE_BKPT)
       asm("bkpt");
   19958:	be00      	bkpt	0x0000
#endif
    }
    SCB->ICSR = SCB_ICSR_NMIPENDSET_Msk;
   1995a:	4b07      	ldr	r3, [pc, #28]	; (19978 <__assert_func+0x44>)
   1995c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   19960:	605a      	str	r2, [r3, #4]
    asm("isb");
   19962:	f3bf 8f6f 	isb	sy
    hal_system_reset();
   19966:	f7ee fc15 	bl	8194 <hal_system_reset>
    OS_PRINT_ASSERT(file, line, func, e);
   1996a:	4629      	mov	r1, r5
   1996c:	4803      	ldr	r0, [pc, #12]	; (1997c <__assert_func+0x48>)
   1996e:	f7ff f919 	bl	18ba4 <console_printf>
   19972:	e7ee      	b.n	19952 <__assert_func+0x1e>
   19974:	00020fc4 	.word	0x00020fc4
   19978:	e000ed00 	.word	0xe000ed00
   1997c:	00020fb4 	.word	0x00020fb4

00019980 <os_default_irq>:
}

void
os_default_irq(struct trap_frame *tf)
{
   19980:	b500      	push	{lr}
   19982:	b083      	sub	sp, #12
   19984:	4604      	mov	r4, r0
#endif
#if MYNEWT_VAL(OS_CRASH_RESTORE_REGS)
    uint32_t orig_sp;
#endif

    console_blocking_mode();
   19986:	f7ff f8e2 	bl	18b4e <console_blocking_mode>
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
      SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk, (uint32_t)tf->ef);
   1998a:	4d1b      	ldr	r5, [pc, #108]	; (199f8 <os_default_irq+0x78>)
   1998c:	6869      	ldr	r1, [r5, #4]
    console_printf("Unhandled interrupt (%ld), exception sp 0x%08lx\n",
   1998e:	6822      	ldr	r2, [r4, #0]
   19990:	f3c1 0108 	ubfx	r1, r1, #0, #9
   19994:	4819      	ldr	r0, [pc, #100]	; (199fc <os_default_irq+0x7c>)
   19996:	f7ff f905 	bl	18ba4 <console_printf>
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
      tf->ef->r0, tf->ef->r1, tf->ef->r2, tf->ef->r3);
   1999a:	6820      	ldr	r0, [r4, #0]
    console_printf(" r0:0x%08lx  r1:0x%08lx  r2:0x%08lx  r3:0x%08lx\n",
   1999c:	6883      	ldr	r3, [r0, #8]
   1999e:	6842      	ldr	r2, [r0, #4]
   199a0:	6801      	ldr	r1, [r0, #0]
   199a2:	68c0      	ldr	r0, [r0, #12]
   199a4:	9000      	str	r0, [sp, #0]
   199a6:	4816      	ldr	r0, [pc, #88]	; (19a00 <os_default_irq+0x80>)
   199a8:	f7ff f8fc 	bl	18ba4 <console_printf>
    console_printf(" r4:0x%08lx  r5:0x%08lx  r6:0x%08lx  r7:0x%08lx\n",
   199ac:	6923      	ldr	r3, [r4, #16]
   199ae:	9300      	str	r3, [sp, #0]
   199b0:	68e3      	ldr	r3, [r4, #12]
   199b2:	68a2      	ldr	r2, [r4, #8]
   199b4:	6861      	ldr	r1, [r4, #4]
   199b6:	4813      	ldr	r0, [pc, #76]	; (19a04 <os_default_irq+0x84>)
   199b8:	f7ff f8f4 	bl	18ba4 <console_printf>
      tf->r4, tf->r5, tf->r6, tf->r7);
    console_printf(" r8:0x%08lx  r9:0x%08lx r10:0x%08lx r11:0x%08lx\n",
   199bc:	6a23      	ldr	r3, [r4, #32]
   199be:	9300      	str	r3, [sp, #0]
   199c0:	69e3      	ldr	r3, [r4, #28]
   199c2:	69a2      	ldr	r2, [r4, #24]
   199c4:	6961      	ldr	r1, [r4, #20]
   199c6:	4810      	ldr	r0, [pc, #64]	; (19a08 <os_default_irq+0x88>)
   199c8:	f7ff f8ec 	bl	18ba4 <console_printf>
      tf->r8, tf->r9, tf->r10, tf->r11);
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
      tf->ef->r12, tf->ef->lr, tf->ef->pc, tf->ef->psr);
   199cc:	6820      	ldr	r0, [r4, #0]
    console_printf("r12:0x%08lx  lr:0x%08lx  pc:0x%08lx psr:0x%08lx\n",
   199ce:	6983      	ldr	r3, [r0, #24]
   199d0:	6942      	ldr	r2, [r0, #20]
   199d2:	6901      	ldr	r1, [r0, #16]
   199d4:	69c0      	ldr	r0, [r0, #28]
   199d6:	9000      	str	r0, [sp, #0]
   199d8:	480c      	ldr	r0, [pc, #48]	; (19a0c <os_default_irq+0x8c>)
   199da:	f7ff f8e3 	bl	18ba4 <console_printf>
    console_printf("ICSR:0x%08lx HFSR:0x%08lx CFSR:0x%08lx\n",
   199de:	6869      	ldr	r1, [r5, #4]
   199e0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
   199e2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   199e4:	480a      	ldr	r0, [pc, #40]	; (19a10 <os_default_irq+0x90>)
   199e6:	f7ff f8dd 	bl	18ba4 <console_printf>
      SCB->ICSR, SCB->HFSR, SCB->CFSR);
    console_printf("BFAR:0x%08lx MMFAR:0x%08lx\n", SCB->BFAR, SCB->MMFAR);
   199ea:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   199ec:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   199ee:	4809      	ldr	r0, [pc, #36]	; (19a14 <os_default_irq+0x94>)
   199f0:	f7ff f8d8 	bl	18ba4 <console_printf>
            : "r0"
        );
    }
#endif

    hal_system_reset();
   199f4:	f7ee fbce 	bl	8194 <hal_system_reset>
   199f8:	e000ed00 	.word	0xe000ed00
   199fc:	00020fdc 	.word	0x00020fdc
   19a00:	00021010 	.word	0x00021010
   19a04:	00021044 	.word	0x00021044
   19a08:	00021078 	.word	0x00021078
   19a0c:	000210ac 	.word	0x000210ac
   19a10:	000210e0 	.word	0x000210e0
   19a14:	00021108 	.word	0x00021108

00019a18 <os_idle_task>:
 *
 * @param arg unused
 */
void
os_idle_task(void *arg)
{
   19a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_time_t sanity_itvl_ticks;

    sanity_itvl_ticks = (MYNEWT_VAL(SANITY_INTERVAL) * OS_TICKS_PER_SEC) / 1000;
    sanity_last = 0;

    hal_watchdog_tickle();
   19a1a:	f7ff ff81 	bl	19920 <hal_watchdog_tickle>
    sanity_last = 0;
   19a1e:	2500      	movs	r5, #0
   19a20:	e00b      	b.n	19a3a <os_idle_task+0x22>
    while (1) {
        ++g_os_idle_ctr;

        now = os_time_get();
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
            os_sanity_run();
   19a22:	f000 fec7 	bl	1a7b4 <os_sanity_run>
            /* Tickle the watchdog after successfully running sanity */
            hal_watchdog_tickle();
   19a26:	f7ff ff7b 	bl	19920 <hal_watchdog_tickle>
#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
            os_cputime_timer_stop(&os_wdog_monitor);
            os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
            sanity_last = now;
   19a2a:	4625      	mov	r5, r4
   19a2c:	e011      	b.n	19a52 <os_idle_task+0x3a>
         * as the idle task does not schedule itself.
         */
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));

        if (iticks < MIN_IDLE_TICKS) {
            iticks = 0;
   19a2e:	2000      	movs	r0, #0
        /* Tell the architecture specific support to put the processor to sleep
         * for 'n' ticks.
         */

        os_trace_idle();
        os_tick_idle(iticks);
   19a30:	f002 f842 	bl	1bab8 <os_tick_idle>
        OS_EXIT_CRITICAL(sr);
   19a34:	4638      	mov	r0, r7
   19a36:	f001 fa19 	bl	1ae6c <os_arch_restore_sr>
        ++g_os_idle_ctr;
   19a3a:	4a14      	ldr	r2, [pc, #80]	; (19a8c <os_idle_task+0x74>)
   19a3c:	6813      	ldr	r3, [r2, #0]
   19a3e:	3301      	adds	r3, #1
   19a40:	6013      	str	r3, [r2, #0]
        now = os_time_get();
   19a42:	f001 f995 	bl	1ad70 <os_time_get>
   19a46:	4604      	mov	r4, r0
        if (OS_TIME_TICK_GT(now, sanity_last + sanity_itvl_ticks)) {
   19a48:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19a4c:	1ac3      	subs	r3, r0, r3
   19a4e:	2b00      	cmp	r3, #0
   19a50:	dce7      	bgt.n	19a22 <os_idle_task+0xa>
        OS_ENTER_CRITICAL(sr);
   19a52:	f001 fa05 	bl	1ae60 <os_arch_save_sr>
   19a56:	4607      	mov	r7, r0
        now = os_time_get();
   19a58:	f001 f98a 	bl	1ad70 <os_time_get>
   19a5c:	4606      	mov	r6, r0
        sticks = os_sched_wakeup_ticks(now);
   19a5e:	f000 ffd7 	bl	1aa10 <os_sched_wakeup_ticks>
   19a62:	4604      	mov	r4, r0
        cticks = os_callout_wakeup_ticks(now);
   19a64:	4630      	mov	r0, r6
   19a66:	f000 f975 	bl	19d54 <os_callout_wakeup_ticks>
        iticks = min(sticks, cticks);
   19a6a:	42a0      	cmp	r0, r4
   19a6c:	bf28      	it	cs
   19a6e:	4620      	movcs	r0, r4
        iticks = min(iticks, ((sanity_last + sanity_itvl_ticks) - now));
   19a70:	f505 63f0 	add.w	r3, r5, #1920	; 0x780
   19a74:	1b9b      	subs	r3, r3, r6
   19a76:	4298      	cmp	r0, r3
   19a78:	bf28      	it	cs
   19a7a:	4618      	movcs	r0, r3
        if (iticks < MIN_IDLE_TICKS) {
   19a7c:	280b      	cmp	r0, #11
   19a7e:	d9d6      	bls.n	19a2e <os_idle_task+0x16>
        } else if (iticks > MAX_IDLE_TICKS) {
   19a80:	f5b0 3f96 	cmp.w	r0, #76800	; 0x12c00
   19a84:	d9d4      	bls.n	19a30 <os_idle_task+0x18>
            iticks = MAX_IDLE_TICKS;
   19a86:	f44f 3096 	mov.w	r0, #76800	; 0x12c00
   19a8a:	e7d1      	b.n	19a30 <os_idle_task+0x18>
   19a8c:	2000d68c 	.word	0x2000d68c

00019a90 <os_main>:
    return (g_os_started);
}

static void
os_main(void *arg)
{
   19a90:	b508      	push	{r3, lr}
   19a92:	4603      	mov	r3, r0
    int (*fn)(int argc, char **argv) = arg;

#if !MYNEWT_VAL(SELFTEST)
    fn(0, NULL);
   19a94:	2100      	movs	r1, #0
   19a96:	4608      	mov	r0, r1
   19a98:	4798      	blx	r3
    (void)fn;
    while (1) {
        os_eventq_run(os_eventq_dflt_get());
    }
#endif
    assert(0);
   19a9a:	2300      	movs	r3, #0
   19a9c:	461a      	mov	r2, r3
   19a9e:	4619      	mov	r1, r3
   19aa0:	4618      	mov	r0, r3
   19aa2:	f7ff ff47 	bl	19934 <__assert_func>
	...

00019aa8 <os_started>:
}
   19aa8:	4b01      	ldr	r3, [pc, #4]	; (19ab0 <os_started+0x8>)
   19aaa:	6818      	ldr	r0, [r3, #0]
   19aac:	4770      	bx	lr
   19aae:	bf00      	nop
   19ab0:	2000d688 	.word	0x2000d688

00019ab4 <os_init_idle_task>:
}
#endif

void
os_init_idle_task(void)
{
   19ab4:	b500      	push	{lr}
   19ab6:	b085      	sub	sp, #20
    int rc;

    rc = os_task_init(&g_idle_task, "idle", os_idle_task, NULL,
   19ab8:	2340      	movs	r3, #64	; 0x40
   19aba:	9303      	str	r3, [sp, #12]
   19abc:	4b15      	ldr	r3, [pc, #84]	; (19b14 <os_init_idle_task+0x60>)
   19abe:	9302      	str	r3, [sp, #8]
   19ac0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19ac4:	9301      	str	r3, [sp, #4]
   19ac6:	23ff      	movs	r3, #255	; 0xff
   19ac8:	9300      	str	r3, [sp, #0]
   19aca:	2300      	movs	r3, #0
   19acc:	4a12      	ldr	r2, [pc, #72]	; (19b18 <os_init_idle_task+0x64>)
   19ace:	4913      	ldr	r1, [pc, #76]	; (19b1c <os_init_idle_task+0x68>)
   19ad0:	4813      	ldr	r0, [pc, #76]	; (19b20 <os_init_idle_task+0x6c>)
   19ad2:	f001 f88d 	bl	1abf0 <os_task_init>
            OS_IDLE_PRIO, OS_WAIT_FOREVER, g_idle_task_stack,
            OS_STACK_ALIGN(OS_IDLE_STACK_SIZE));
    assert(rc == 0);
   19ad6:	b950      	cbnz	r0, 19aee <os_init_idle_task+0x3a>

    /* Initialize sanity */
    rc = os_sanity_init();
   19ad8:	f000 fea2 	bl	1a820 <os_sanity_init>
    assert(rc == 0);
   19adc:	b968      	cbnz	r0, 19afa <os_init_idle_task+0x46>

    rc = hal_watchdog_init(MYNEWT_VAL(WATCHDOG_INTERVAL));
   19ade:	f247 5030 	movw	r0, #30000	; 0x7530
   19ae2:	f7ff fed9 	bl	19898 <hal_watchdog_init>
    assert(rc == 0);
   19ae6:	b970      	cbnz	r0, 19b06 <os_init_idle_task+0x52>

#if MYNEWT_VAL(OS_WATCHDOG_MONITOR)
    os_cputime_timer_init(&os_wdog_monitor, os_wdog_monitor_tmo, NULL);
    os_cputime_timer_relative(&os_wdog_monitor, OS_WDOG_MONITOR_TMO);
#endif
}
   19ae8:	b005      	add	sp, #20
   19aea:	f85d fb04 	ldr.w	pc, [sp], #4
    assert(rc == 0);
   19aee:	2300      	movs	r3, #0
   19af0:	461a      	mov	r2, r3
   19af2:	4619      	mov	r1, r3
   19af4:	4618      	mov	r0, r3
   19af6:	f7ff ff1d 	bl	19934 <__assert_func>
    assert(rc == 0);
   19afa:	2300      	movs	r3, #0
   19afc:	461a      	mov	r2, r3
   19afe:	4619      	mov	r1, r3
   19b00:	4618      	mov	r0, r3
   19b02:	f7ff ff17 	bl	19934 <__assert_func>
    assert(rc == 0);
   19b06:	2300      	movs	r3, #0
   19b08:	461a      	mov	r2, r3
   19b0a:	4619      	mov	r1, r3
   19b0c:	4618      	mov	r0, r3
   19b0e:	f7ff ff11 	bl	19934 <__assert_func>
   19b12:	bf00      	nop
   19b14:	20004770 	.word	0x20004770
   19b18:	00019a19 	.word	0x00019a19
   19b1c:	0002112c 	.word	0x0002112c
   19b20:	2000d5e8 	.word	0x2000d5e8

00019b24 <os_init>:

void
os_init(int (*main_fn)(int argc, char **arg))
{
   19b24:	b510      	push	{r4, lr}
   19b26:	b084      	sub	sp, #16
   19b28:	4604      	mov	r4, r0
#if MYNEWT_VAL(RTT)
    memset(&_SEGGER_RTT, 0, sizeof(_SEGGER_RTT));
    SEGGER_RTT_Init();
#endif

    TAILQ_INIT(&g_callout_list);
   19b2a:	4b24      	ldr	r3, [pc, #144]	; (19bbc <os_init+0x98>)
   19b2c:	2200      	movs	r2, #0
   19b2e:	601a      	str	r2, [r3, #0]
   19b30:	605b      	str	r3, [r3, #4]
    STAILQ_INIT(&g_os_task_list);
   19b32:	4b23      	ldr	r3, [pc, #140]	; (19bc0 <os_init+0x9c>)
   19b34:	601a      	str	r2, [r3, #0]
   19b36:	605b      	str	r3, [r3, #4]
    os_eventq_init(os_eventq_dflt_get());
   19b38:	f000 faba 	bl	1a0b0 <os_eventq_dflt_get>
   19b3c:	f000 fa0e 	bl	19f5c <os_eventq_init>

    /* Initialize device list. */
    os_dev_reset();
   19b40:	f000 fa04 	bl	19f4c <os_dev_reset>

    err = os_arch_os_init();
   19b44:	f001 f9c6 	bl	1aed4 <os_arch_os_init>
    assert(err == OS_OK);
   19b48:	bb00      	cbnz	r0, 19b8c <os_init+0x68>

    if (main_fn) {
   19b4a:	b18c      	cbz	r4, 19b70 <os_init+0x4c>
        err = os_task_init(&g_os_main_task, "main", os_main, main_fn,
   19b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   19b50:	9303      	str	r3, [sp, #12]
   19b52:	4b1c      	ldr	r3, [pc, #112]	; (19bc4 <os_init+0xa0>)
   19b54:	9302      	str	r3, [sp, #8]
   19b56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19b5a:	9301      	str	r3, [sp, #4]
   19b5c:	237f      	movs	r3, #127	; 0x7f
   19b5e:	9300      	str	r3, [sp, #0]
   19b60:	4623      	mov	r3, r4
   19b62:	4a19      	ldr	r2, [pc, #100]	; (19bc8 <os_init+0xa4>)
   19b64:	4919      	ldr	r1, [pc, #100]	; (19bcc <os_init+0xa8>)
   19b66:	481a      	ldr	r0, [pc, #104]	; (19bd0 <os_init+0xac>)
   19b68:	f001 f842 	bl	1abf0 <os_task_init>
   19b6c:	b2c0      	uxtb	r0, r0
                   OS_MAIN_TASK_PRIO,
                   (OS_MAIN_TASK_TIMER_TICKS == 0) ? OS_WAIT_FOREVER : OS_MAIN_TASK_TIMER_TICKS,
                   g_os_main_stack, OS_STACK_ALIGN(OS_MAIN_STACK_SIZE));
        assert(err == 0);
   19b6e:	b998      	cbnz	r0, 19b98 <os_init+0x74>
    }

    /* Call bsp related OS initializations */
    hal_bsp_init();
   19b70:	f001 fe72 	bl	1b858 <hal_bsp_init>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_PRIMARY);
   19b74:	2001      	movs	r0, #1
   19b76:	f000 f985 	bl	19e84 <os_dev_initialize_all>
   19b7a:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b7c:	b990      	cbnz	r0, 19ba4 <os_init+0x80>

    err = (os_error_t) os_dev_initialize_all(OS_DEV_INIT_SECONDARY);
   19b7e:	2002      	movs	r0, #2
   19b80:	f000 f980 	bl	19e84 <os_dev_initialize_all>
   19b84:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19b86:	b998      	cbnz	r0, 19bb0 <os_init+0x8c>
}
   19b88:	b004      	add	sp, #16
   19b8a:	bd10      	pop	{r4, pc}
    assert(err == OS_OK);
   19b8c:	2300      	movs	r3, #0
   19b8e:	461a      	mov	r2, r3
   19b90:	4619      	mov	r1, r3
   19b92:	4618      	mov	r0, r3
   19b94:	f7ff fece 	bl	19934 <__assert_func>
        assert(err == 0);
   19b98:	2300      	movs	r3, #0
   19b9a:	461a      	mov	r2, r3
   19b9c:	4619      	mov	r1, r3
   19b9e:	4618      	mov	r0, r3
   19ba0:	f7ff fec8 	bl	19934 <__assert_func>
    assert(err == OS_OK);
   19ba4:	2300      	movs	r3, #0
   19ba6:	461a      	mov	r2, r3
   19ba8:	4619      	mov	r1, r3
   19baa:	4618      	mov	r0, r3
   19bac:	f7ff fec2 	bl	19934 <__assert_func>
    assert(err == OS_OK);
   19bb0:	2300      	movs	r3, #0
   19bb2:	461a      	mov	r2, r3
   19bb4:	4619      	mov	r1, r3
   19bb6:	4618      	mov	r0, r3
   19bb8:	f7ff febc 	bl	19934 <__assert_func>
   19bbc:	2000d690 	.word	0x2000d690
   19bc0:	2000d6b8 	.word	0x2000d6b8
   19bc4:	20004870 	.word	0x20004870
   19bc8:	00019a91 	.word	0x00019a91
   19bcc:	00021124 	.word	0x00021124
   19bd0:	2000d638 	.word	0x2000d638

00019bd4 <os_start>:

void
os_start(void)
{
   19bd4:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_SCHEDULING)
    os_error_t err;

    /* Enable the watchdog prior to starting the OS */
    hal_watchdog_enable();
   19bd6:	f7ff fe9b 	bl	19910 <hal_watchdog_enable>

    err = os_arch_os_start();
   19bda:	f001 f9db 	bl	1af94 <os_arch_os_start>
    assert(err == OS_OK);
   19bde:	b900      	cbnz	r0, 19be2 <os_start+0xe>
#else
    assert(0);
#endif
}
   19be0:	bd08      	pop	{r3, pc}
    assert(err == OS_OK);
   19be2:	2300      	movs	r3, #0
   19be4:	461a      	mov	r2, r3
   19be6:	4619      	mov	r1, r3
   19be8:	4618      	mov	r0, r3
   19bea:	f7ff fea3 	bl	19934 <__assert_func>
	...

00019bf0 <os_pkg_init>:
    hal_system_reset();
}

void
os_pkg_init(void)
{
   19bf0:	b508      	push	{r3, lr}
    os_error_t err;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   19bf2:	4b0c      	ldr	r3, [pc, #48]	; (19c24 <os_pkg_init+0x34>)
   19bf4:	781b      	ldrb	r3, [r3, #0]
   19bf6:	b14b      	cbz	r3, 19c0c <os_pkg_init+0x1c>

    err = os_dev_initialize_all(OS_DEV_INIT_KERNEL);
   19bf8:	2003      	movs	r0, #3
   19bfa:	f000 f943 	bl	19e84 <os_dev_initialize_all>
   19bfe:	b2c0      	uxtb	r0, r0
    assert(err == OS_OK);
   19c00:	b948      	cbnz	r0, 19c16 <os_pkg_init+0x26>

    os_mempool_module_init();
   19c02:	f000 fc25 	bl	1a450 <os_mempool_module_init>
    os_msys_init();
   19c06:	f000 fcad 	bl	1a564 <os_msys_init>
}
   19c0a:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   19c0c:	461a      	mov	r2, r3
   19c0e:	4619      	mov	r1, r3
   19c10:	4618      	mov	r0, r3
   19c12:	f7ff fe8f 	bl	19934 <__assert_func>
    assert(err == OS_OK);
   19c16:	2300      	movs	r3, #0
   19c18:	461a      	mov	r2, r3
   19c1a:	4619      	mov	r1, r3
   19c1c:	4618      	mov	r0, r3
   19c1e:	f7ff fe89 	bl	19934 <__assert_func>
   19c22:	bf00      	nop
   19c24:	2000d5bc 	.word	0x2000d5bc

00019c28 <os_callout_init>:

struct os_callout_list g_callout_list;

void os_callout_init(struct os_callout *c, struct os_eventq *evq,
                     os_event_fn *ev_cb, void *ev_arg)
{
   19c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19c2a:	4604      	mov	r4, r0
   19c2c:	460d      	mov	r5, r1
   19c2e:	4617      	mov	r7, r2
   19c30:	461e      	mov	r6, r3
    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_INIT, (uint32_t)c, (uint32_t)evq);

    memset(c, 0, sizeof(*c));
   19c32:	2220      	movs	r2, #32
   19c34:	2100      	movs	r1, #0
   19c36:	f001 fa80 	bl	1b13a <memset>
    c->c_ev.ev_cb = ev_cb;
   19c3a:	6067      	str	r7, [r4, #4]
    c->c_ev.ev_arg = ev_arg;
   19c3c:	60a6      	str	r6, [r4, #8]
    c->c_evq = evq;
   19c3e:	6125      	str	r5, [r4, #16]

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_INIT);
}
   19c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00019c44 <os_callout_stop>:

void
os_callout_stop(struct os_callout *c)
{
   19c44:	b538      	push	{r3, r4, r5, lr}
   19c46:	4604      	mov	r4, r0
    os_sr_t sr;

    os_trace_api_u32(OS_TRACE_ID_CALLOUT_STOP, (uint32_t)c);

    OS_ENTER_CRITICAL(sr);
   19c48:	f001 f90a 	bl	1ae60 <os_arch_save_sr>
   19c4c:	4605      	mov	r5, r0
 * @return 1 if queued, 0 if not queued.
 */
static inline int
os_callout_queued(struct os_callout *c)
{
    return c->c_next.tqe_prev != NULL;
   19c4e:	69e3      	ldr	r3, [r4, #28]

    if (os_callout_queued(c)) {
   19c50:	b13b      	cbz	r3, 19c62 <os_callout_stop+0x1e>
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c52:	69a2      	ldr	r2, [r4, #24]
   19c54:	b172      	cbz	r2, 19c74 <os_callout_stop+0x30>
   19c56:	61d3      	str	r3, [r2, #28]
   19c58:	69e3      	ldr	r3, [r4, #28]
   19c5a:	69a2      	ldr	r2, [r4, #24]
   19c5c:	601a      	str	r2, [r3, #0]
        c->c_next.tqe_prev = NULL;
   19c5e:	2300      	movs	r3, #0
   19c60:	61e3      	str	r3, [r4, #28]
    }

    if (c->c_evq) {
   19c62:	6920      	ldr	r0, [r4, #16]
   19c64:	b110      	cbz	r0, 19c6c <os_callout_stop+0x28>
        os_eventq_remove(c->c_evq, &c->c_ev);
   19c66:	4621      	mov	r1, r4
   19c68:	f000 fa02 	bl	1a070 <os_eventq_remove>
    }

    OS_EXIT_CRITICAL(sr);
   19c6c:	4628      	mov	r0, r5
   19c6e:	f001 f8fd 	bl	1ae6c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_STOP);
}
   19c72:	bd38      	pop	{r3, r4, r5, pc}
        TAILQ_REMOVE(&g_callout_list, c, c_next);
   19c74:	4a01      	ldr	r2, [pc, #4]	; (19c7c <os_callout_stop+0x38>)
   19c76:	6053      	str	r3, [r2, #4]
   19c78:	e7ee      	b.n	19c58 <os_callout_stop+0x14>
   19c7a:	bf00      	nop
   19c7c:	2000d690 	.word	0x2000d690

00019c80 <os_callout_reset>:

int
os_callout_reset(struct os_callout *c, os_time_t ticks)
{
   19c80:	b570      	push	{r4, r5, r6, lr}
    struct os_callout *entry;
    os_sr_t sr;
    int ret;

    /* Ensure this callout has been initialized. */
    assert(c->c_evq != NULL);
   19c82:	6903      	ldr	r3, [r0, #16]
   19c84:	b1c3      	cbz	r3, 19cb8 <os_callout_reset+0x38>
   19c86:	4605      	mov	r5, r0
   19c88:	460c      	mov	r4, r1

    os_trace_api_u32x2(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)c, (uint32_t)ticks);

    if (ticks > INT32_MAX) {
   19c8a:	2900      	cmp	r1, #0
   19c8c:	db2f      	blt.n	19cee <os_callout_reset+0x6e>
        ret = OS_EINVAL;
        goto err;
    }

    OS_ENTER_CRITICAL(sr);
   19c8e:	f001 f8e7 	bl	1ae60 <os_arch_save_sr>
   19c92:	4606      	mov	r6, r0

    os_callout_stop(c);
   19c94:	4628      	mov	r0, r5
   19c96:	f7ff ffd5 	bl	19c44 <os_callout_stop>

    if (ticks == 0) {
   19c9a:	b904      	cbnz	r4, 19c9e <os_callout_reset+0x1e>
        ticks = 1;
   19c9c:	2401      	movs	r4, #1
    }

    c->c_ticks = os_time_get() + ticks;
   19c9e:	f001 f867 	bl	1ad70 <os_time_get>
   19ca2:	4420      	add	r0, r4
   19ca4:	6168      	str	r0, [r5, #20]

    entry = NULL;
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19ca6:	4b13      	ldr	r3, [pc, #76]	; (19cf4 <os_callout_reset+0x74>)
   19ca8:	681b      	ldr	r3, [r3, #0]
   19caa:	b153      	cbz	r3, 19cc2 <os_callout_reset+0x42>
        if (OS_TIME_TICK_LT(c->c_ticks, entry->c_ticks)) {
   19cac:	695a      	ldr	r2, [r3, #20]
   19cae:	1a82      	subs	r2, r0, r2
   19cb0:	2a00      	cmp	r2, #0
   19cb2:	db06      	blt.n	19cc2 <os_callout_reset+0x42>
    TAILQ_FOREACH(entry, &g_callout_list, c_next) {
   19cb4:	699b      	ldr	r3, [r3, #24]
   19cb6:	e7f8      	b.n	19caa <os_callout_reset+0x2a>
    assert(c->c_evq != NULL);
   19cb8:	461a      	mov	r2, r3
   19cba:	4619      	mov	r1, r3
   19cbc:	4618      	mov	r0, r3
   19cbe:	f7ff fe39 	bl	19934 <__assert_func>
            break;
        }
    }

    if (entry) {
   19cc2:	b15b      	cbz	r3, 19cdc <os_callout_reset+0x5c>
        TAILQ_INSERT_BEFORE(entry, c, c_next);
   19cc4:	69da      	ldr	r2, [r3, #28]
   19cc6:	61ea      	str	r2, [r5, #28]
   19cc8:	61ab      	str	r3, [r5, #24]
   19cca:	69da      	ldr	r2, [r3, #28]
   19ccc:	6015      	str	r5, [r2, #0]
   19cce:	3518      	adds	r5, #24
   19cd0:	61dd      	str	r5, [r3, #28]
    } else {
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
    }

    OS_EXIT_CRITICAL(sr);
   19cd2:	4630      	mov	r0, r6
   19cd4:	f001 f8ca 	bl	1ae6c <os_arch_restore_sr>

    ret = OS_OK;
   19cd8:	2000      	movs	r0, #0

err:
    os_trace_api_ret_u32(OS_TRACE_ID_CALLOUT_RESET, (uint32_t)ret);
    return ret;
}
   19cda:	bd70      	pop	{r4, r5, r6, pc}
        TAILQ_INSERT_TAIL(&g_callout_list, c, c_next);
   19cdc:	2300      	movs	r3, #0
   19cde:	61ab      	str	r3, [r5, #24]
   19ce0:	4b04      	ldr	r3, [pc, #16]	; (19cf4 <os_callout_reset+0x74>)
   19ce2:	685a      	ldr	r2, [r3, #4]
   19ce4:	61ea      	str	r2, [r5, #28]
   19ce6:	6015      	str	r5, [r2, #0]
   19ce8:	3518      	adds	r5, #24
   19cea:	605d      	str	r5, [r3, #4]
   19cec:	e7f1      	b.n	19cd2 <os_callout_reset+0x52>
        ret = OS_EINVAL;
   19cee:	2002      	movs	r0, #2
    return ret;
   19cf0:	e7f3      	b.n	19cda <os_callout_reset+0x5a>
   19cf2:	bf00      	nop
   19cf4:	2000d690 	.word	0x2000d690

00019cf8 <os_callout_tick>:
 * to run, it posts an event for each callout that's ready to run,
 * to the event queue provided to os_callout_init().
 */
void
os_callout_tick(void)
{
   19cf8:	b538      	push	{r3, r4, r5, lr}
    struct os_callout *c;
    uint32_t now;

    os_trace_api_void(OS_TRACE_ID_CALLOUT_TICK);

    now = os_time_get();
   19cfa:	f001 f839 	bl	1ad70 <os_time_get>
   19cfe:	4605      	mov	r5, r0
   19d00:	e00f      	b.n	19d22 <os_callout_tick+0x2a>
    while (1) {
        OS_ENTER_CRITICAL(sr);
        c = TAILQ_FIRST(&g_callout_list);
        if (c) {
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19d02:	69e2      	ldr	r2, [r4, #28]
   19d04:	4b12      	ldr	r3, [pc, #72]	; (19d50 <os_callout_tick+0x58>)
   19d06:	605a      	str	r2, [r3, #4]
   19d08:	69e3      	ldr	r3, [r4, #28]
   19d0a:	69a2      	ldr	r2, [r4, #24]
   19d0c:	601a      	str	r2, [r3, #0]
                c->c_next.tqe_prev = NULL;
   19d0e:	2300      	movs	r3, #0
   19d10:	61e3      	str	r3, [r4, #28]
            } else {
                c = NULL;
            }
        }
        OS_EXIT_CRITICAL(sr);
   19d12:	f001 f8ab 	bl	1ae6c <os_arch_restore_sr>

        if (c) {
   19d16:	b1d4      	cbz	r4, 19d4e <os_callout_tick+0x56>
            if (c->c_evq) {
   19d18:	6920      	ldr	r0, [r4, #16]
   19d1a:	b9a0      	cbnz	r0, 19d46 <os_callout_tick+0x4e>
                os_eventq_put(c->c_evq, &c->c_ev);
            } else {
                c->c_ev.ev_cb(&c->c_ev);
   19d1c:	6863      	ldr	r3, [r4, #4]
   19d1e:	4620      	mov	r0, r4
   19d20:	4798      	blx	r3
        OS_ENTER_CRITICAL(sr);
   19d22:	f001 f89d 	bl	1ae60 <os_arch_save_sr>
        c = TAILQ_FIRST(&g_callout_list);
   19d26:	4b0a      	ldr	r3, [pc, #40]	; (19d50 <os_callout_tick+0x58>)
   19d28:	681c      	ldr	r4, [r3, #0]
        if (c) {
   19d2a:	2c00      	cmp	r4, #0
   19d2c:	d0f1      	beq.n	19d12 <os_callout_tick+0x1a>
            if (OS_TIME_TICK_GEQ(now, c->c_ticks)) {
   19d2e:	6963      	ldr	r3, [r4, #20]
   19d30:	1aeb      	subs	r3, r5, r3
   19d32:	2b00      	cmp	r3, #0
   19d34:	db05      	blt.n	19d42 <os_callout_tick+0x4a>
                TAILQ_REMOVE(&g_callout_list, c, c_next);
   19d36:	69a3      	ldr	r3, [r4, #24]
   19d38:	2b00      	cmp	r3, #0
   19d3a:	d0e2      	beq.n	19d02 <os_callout_tick+0xa>
   19d3c:	69e2      	ldr	r2, [r4, #28]
   19d3e:	61da      	str	r2, [r3, #28]
   19d40:	e7e2      	b.n	19d08 <os_callout_tick+0x10>
                c = NULL;
   19d42:	2400      	movs	r4, #0
   19d44:	e7e5      	b.n	19d12 <os_callout_tick+0x1a>
                os_eventq_put(c->c_evq, &c->c_ev);
   19d46:	4621      	mov	r1, r4
   19d48:	f000 f915 	bl	19f76 <os_eventq_put>
   19d4c:	e7e9      	b.n	19d22 <os_callout_tick+0x2a>
            break;
        }
    }

    os_trace_api_ret(OS_TRACE_ID_CALLOUT_TICK);
}
   19d4e:	bd38      	pop	{r3, r4, r5, pc}
   19d50:	2000d690 	.word	0x2000d690

00019d54 <os_callout_wakeup_ticks>:
 *
 * @return Number of ticks to first pending callout
 */
os_time_t
os_callout_wakeup_ticks(os_time_t now)
{
   19d54:	b510      	push	{r4, lr}
   19d56:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_callout *c;

    OS_ASSERT_CRITICAL();
   19d58:	f001 f88b 	bl	1ae72 <os_arch_in_critical>
   19d5c:	b130      	cbz	r0, 19d6c <os_callout_wakeup_ticks+0x18>

    c = TAILQ_FIRST(&g_callout_list);
   19d5e:	4b09      	ldr	r3, [pc, #36]	; (19d84 <os_callout_wakeup_ticks+0x30>)
   19d60:	681b      	ldr	r3, [r3, #0]
    if (c != NULL) {
   19d62:	b15b      	cbz	r3, 19d7c <os_callout_wakeup_ticks+0x28>
        if (OS_TIME_TICK_GEQ(c->c_ticks, now)) {
   19d64:	6958      	ldr	r0, [r3, #20]
   19d66:	1b00      	subs	r0, r0, r4
   19d68:	d406      	bmi.n	19d78 <os_callout_wakeup_ticks+0x24>
    } else {
        rt = OS_TIMEOUT_NEVER;
    }

    return (rt);
}
   19d6a:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   19d6c:	2300      	movs	r3, #0
   19d6e:	461a      	mov	r2, r3
   19d70:	4619      	mov	r1, r3
   19d72:	4618      	mov	r0, r3
   19d74:	f7ff fdde 	bl	19934 <__assert_func>
            rt = 0;     /* callout time is in the past */
   19d78:	2000      	movs	r0, #0
   19d7a:	e7f6      	b.n	19d6a <os_callout_wakeup_ticks+0x16>
        rt = OS_TIMEOUT_NEVER;
   19d7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   19d80:	e7f3      	b.n	19d6a <os_callout_wakeup_ticks+0x16>
   19d82:	bf00      	nop
   19d84:	2000d690 	.word	0x2000d690

00019d88 <os_cputime_init>:
struct os_cputime_data g_os_cputime;
#endif

int
os_cputime_init(uint32_t clock_freq)
{
   19d88:	b508      	push	{r3, lr}

    /* Set the ticks per microsecond. */
#if defined(OS_CPUTIME_FREQ_HIGH)
    g_os_cputime.ticks_per_usec = clock_freq / 1000000U;
#endif
    rc = hal_timer_config(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM), clock_freq);
   19d8a:	4601      	mov	r1, r0
   19d8c:	2000      	movs	r0, #0
   19d8e:	f002 f84d 	bl	1be2c <hal_timer_config>
    return rc;
}
   19d92:	bd08      	pop	{r3, pc}

00019d94 <os_cputime_get32>:
    hal_timer_stop(timer);
}

uint32_t
os_cputime_get32(void)
{
   19d94:	b508      	push	{r3, lr}
    uint32_t cpu_time;

    cpu_time = hal_timer_read(MYNEWT_VAL(OS_CPUTIME_TIMER_NUM));
   19d96:	2000      	movs	r0, #0
   19d98:	f002 f8c4 	bl	1bf24 <hal_timer_read>
    return cpu_time;
}
   19d9c:	bd08      	pop	{r3, pc}
	...

00019da0 <os_dev_add>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_add(struct os_dev *dev)
{
   19da0:	b430      	push	{r4, r5}
    struct os_dev *cur_dev;
    struct os_dev *prev_dev;

    /* If no devices present, insert into head */
    if (STAILQ_FIRST(&g_os_dev_list) == NULL) {
   19da2:	4b15      	ldr	r3, [pc, #84]	; (19df8 <os_dev_add+0x58>)
   19da4:	681d      	ldr	r5, [r3, #0]
   19da6:	b115      	cbz	r5, 19dae <os_dev_add+0xe>
    /* Add devices to the list, sorted first by stage, then by
     * priority.  Keep sorted in this order for initialization
     * stage.
     */
    prev_dev = NULL;
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19da8:	462b      	mov	r3, r5
    prev_dev = NULL;
   19daa:	2400      	movs	r4, #0
   19dac:	e008      	b.n	19dc0 <os_dev_add+0x20>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19dae:	4603      	mov	r3, r0
   19db0:	f843 5f20 	str.w	r5, [r3, #32]!
   19db4:	4a10      	ldr	r2, [pc, #64]	; (19df8 <os_dev_add+0x58>)
   19db6:	6053      	str	r3, [r2, #4]
   19db8:	6010      	str	r0, [r2, #0]
        return (0);
   19dba:	e010      	b.n	19dde <os_dev_add+0x3e>
        if (dev->od_stage < cur_dev->od_stage ||
            ((dev->od_stage == cur_dev->od_stage) &&
             (dev->od_priority < cur_dev->od_priority))) {
            break;
        }
        prev_dev = cur_dev;
   19dbc:	461c      	mov	r4, r3
    STAILQ_FOREACH(cur_dev, &g_os_dev_list, od_next) {
   19dbe:	6a1b      	ldr	r3, [r3, #32]
   19dc0:	b143      	cbz	r3, 19dd4 <os_dev_add+0x34>
        if (dev->od_stage < cur_dev->od_stage ||
   19dc2:	7e01      	ldrb	r1, [r0, #24]
   19dc4:	7e1a      	ldrb	r2, [r3, #24]
   19dc6:	4291      	cmp	r1, r2
   19dc8:	d304      	bcc.n	19dd4 <os_dev_add+0x34>
   19dca:	d1f7      	bne.n	19dbc <os_dev_add+0x1c>
             (dev->od_priority < cur_dev->od_priority))) {
   19dcc:	7e41      	ldrb	r1, [r0, #25]
   19dce:	7e5a      	ldrb	r2, [r3, #25]
            ((dev->od_stage == cur_dev->od_stage) &&
   19dd0:	4291      	cmp	r1, r2
   19dd2:	d2f3      	bcs.n	19dbc <os_dev_add+0x1c>
    }

    if (prev_dev) {
   19dd4:	b15c      	cbz	r4, 19dee <os_dev_add+0x4e>
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19dd6:	6a23      	ldr	r3, [r4, #32]
   19dd8:	6203      	str	r3, [r0, #32]
   19dda:	b11b      	cbz	r3, 19de4 <os_dev_add+0x44>
   19ddc:	6220      	str	r0, [r4, #32]
    } else {
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
    }

    return (0);
}
   19dde:	2000      	movs	r0, #0
   19de0:	bc30      	pop	{r4, r5}
   19de2:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_os_dev_list, prev_dev, dev, od_next);
   19de4:	f100 0320 	add.w	r3, r0, #32
   19de8:	4a03      	ldr	r2, [pc, #12]	; (19df8 <os_dev_add+0x58>)
   19dea:	6053      	str	r3, [r2, #4]
   19dec:	e7f6      	b.n	19ddc <os_dev_add+0x3c>
        STAILQ_INSERT_HEAD(&g_os_dev_list, dev, od_next);
   19dee:	6205      	str	r5, [r0, #32]
   19df0:	4b01      	ldr	r3, [pc, #4]	; (19df8 <os_dev_add+0x58>)
   19df2:	6018      	str	r0, [r3, #0]
   19df4:	e7f3      	b.n	19dde <os_dev_add+0x3e>
   19df6:	bf00      	nop
   19df8:	20008870 	.word	0x20008870

00019dfc <os_dev_initialize>:
 *
 * @return 0 on success, non-zero on failure.
 */
static int
os_dev_initialize(struct os_dev *dev)
{
   19dfc:	b510      	push	{r4, lr}
   19dfe:	4604      	mov	r4, r0
    int rc;

    rc = dev->od_init(dev, dev->od_init_arg);
   19e00:	6903      	ldr	r3, [r0, #16]
   19e02:	6941      	ldr	r1, [r0, #20]
   19e04:	4798      	blx	r3
    if (rc != 0) {
   19e06:	4603      	mov	r3, r0
   19e08:	b128      	cbz	r0, 19e16 <os_dev_initialize+0x1a>
        if (dev->od_flags & OS_DEV_F_INIT_CRITICAL) {
   19e0a:	7ee2      	ldrb	r2, [r4, #27]
   19e0c:	f012 0f08 	tst.w	r2, #8
   19e10:	d105      	bne.n	19e1e <os_dev_initialize+0x22>
            goto err;
        }
    } else {
        dev->od_flags |= OS_DEV_F_STATUS_READY;
    }
    return 0;
   19e12:	2300      	movs	r3, #0
   19e14:	e003      	b.n	19e1e <os_dev_initialize+0x22>
        dev->od_flags |= OS_DEV_F_STATUS_READY;
   19e16:	7ee2      	ldrb	r2, [r4, #27]
   19e18:	f042 0201 	orr.w	r2, r2, #1
   19e1c:	76e2      	strb	r2, [r4, #27]
err:
    return rc;
}
   19e1e:	4618      	mov	r0, r3
   19e20:	bd10      	pop	{r4, pc}

00019e22 <os_dev_init>:
    dev->od_name = name;
   19e22:	61c1      	str	r1, [r0, #28]
    dev->od_stage = stage;
   19e24:	7602      	strb	r2, [r0, #24]
    dev->od_priority = priority;
   19e26:	7643      	strb	r3, [r0, #25]
    dev->od_flags = 0;
   19e28:	2300      	movs	r3, #0
   19e2a:	76c3      	strb	r3, [r0, #27]
    dev->od_open_ref = 0;
   19e2c:	7683      	strb	r3, [r0, #26]
    dev->od_init = od_init;
   19e2e:	9a00      	ldr	r2, [sp, #0]
   19e30:	6102      	str	r2, [r0, #16]
    dev->od_init_arg = arg;
   19e32:	9a01      	ldr	r2, [sp, #4]
   19e34:	6142      	str	r2, [r0, #20]
    memset(&dev->od_handlers, 0, sizeof(dev->od_handlers));
   19e36:	6003      	str	r3, [r0, #0]
   19e38:	6043      	str	r3, [r0, #4]
   19e3a:	6083      	str	r3, [r0, #8]
   19e3c:	60c3      	str	r3, [r0, #12]
}
   19e3e:	4618      	mov	r0, r3
   19e40:	4770      	bx	lr
	...

00019e44 <os_dev_create>:

int
os_dev_create(struct os_dev *dev, const char *name, uint8_t stage,
        uint8_t priority, os_dev_init_func_t od_init, void *arg)
{
   19e44:	b530      	push	{r4, r5, lr}
   19e46:	b083      	sub	sp, #12
   19e48:	4605      	mov	r5, r0
    int rc;

    rc = os_dev_init(dev, name, stage, priority, od_init, arg);
   19e4a:	9c07      	ldr	r4, [sp, #28]
   19e4c:	9401      	str	r4, [sp, #4]
   19e4e:	9c06      	ldr	r4, [sp, #24]
   19e50:	9400      	str	r4, [sp, #0]
   19e52:	f7ff ffe6 	bl	19e22 <os_dev_init>
    if (rc != 0) {
   19e56:	4603      	mov	r3, r0
   19e58:	b110      	cbz	r0, 19e60 <os_dev_create+0x1c>
    if (g_os_started) {
        rc = os_dev_initialize(dev);
    }
err:
    return (rc);
}
   19e5a:	4618      	mov	r0, r3
   19e5c:	b003      	add	sp, #12
   19e5e:	bd30      	pop	{r4, r5, pc}
    rc = os_dev_add(dev);
   19e60:	4628      	mov	r0, r5
   19e62:	f7ff ff9d 	bl	19da0 <os_dev_add>
    if (rc != 0) {
   19e66:	4603      	mov	r3, r0
   19e68:	2800      	cmp	r0, #0
   19e6a:	d1f6      	bne.n	19e5a <os_dev_create+0x16>
    if (g_os_started) {
   19e6c:	4a04      	ldr	r2, [pc, #16]	; (19e80 <os_dev_create+0x3c>)
   19e6e:	6812      	ldr	r2, [r2, #0]
   19e70:	2a00      	cmp	r2, #0
   19e72:	d0f2      	beq.n	19e5a <os_dev_create+0x16>
        rc = os_dev_initialize(dev);
   19e74:	4628      	mov	r0, r5
   19e76:	f7ff ffc1 	bl	19dfc <os_dev_initialize>
   19e7a:	4603      	mov	r3, r0
    return (rc);
   19e7c:	e7ed      	b.n	19e5a <os_dev_create+0x16>
   19e7e:	bf00      	nop
   19e80:	2000d688 	.word	0x2000d688

00019e84 <os_dev_initialize_all>:

int
os_dev_initialize_all(uint8_t stage)
{
   19e84:	b538      	push	{r3, r4, r5, lr}
   19e86:	4605      	mov	r5, r0
    struct os_dev *dev;
    int rc = 0;

    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e88:	4b08      	ldr	r3, [pc, #32]	; (19eac <os_dev_initialize_all+0x28>)
   19e8a:	681c      	ldr	r4, [r3, #0]
    int rc = 0;
   19e8c:	2200      	movs	r2, #0
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19e8e:	e000      	b.n	19e92 <os_dev_initialize_all+0xe>
   19e90:	6a24      	ldr	r4, [r4, #32]
   19e92:	b144      	cbz	r4, 19ea6 <os_dev_initialize_all+0x22>
        if (dev->od_stage == stage) {
   19e94:	7e23      	ldrb	r3, [r4, #24]
   19e96:	42ab      	cmp	r3, r5
   19e98:	d1fa      	bne.n	19e90 <os_dev_initialize_all+0xc>
            rc = os_dev_initialize(dev);
   19e9a:	4620      	mov	r0, r4
   19e9c:	f7ff ffae 	bl	19dfc <os_dev_initialize>
            if (rc) {
   19ea0:	4602      	mov	r2, r0
   19ea2:	2800      	cmp	r0, #0
   19ea4:	d0f4      	beq.n	19e90 <os_dev_initialize_all+0xc>
            }
        }
    }

    return (rc);
}
   19ea6:	4610      	mov	r0, r2
   19ea8:	bd38      	pop	{r3, r4, r5, pc}
   19eaa:	bf00      	nop
   19eac:	20008870 	.word	0x20008870

00019eb0 <os_dev_lookup>:
    return (rc);
}

struct os_dev *
os_dev_lookup(const char *name)
{
   19eb0:	b538      	push	{r3, r4, r5, lr}
   19eb2:	4605      	mov	r5, r0
    struct os_dev *dev;

    dev = NULL;
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19eb4:	4b05      	ldr	r3, [pc, #20]	; (19ecc <os_dev_lookup+0x1c>)
   19eb6:	681c      	ldr	r4, [r3, #0]
   19eb8:	b134      	cbz	r4, 19ec8 <os_dev_lookup+0x18>
        if (!strcmp(dev->od_name, name)) {
   19eba:	4629      	mov	r1, r5
   19ebc:	69e0      	ldr	r0, [r4, #28]
   19ebe:	f001 f958 	bl	1b172 <strcmp>
   19ec2:	b108      	cbz	r0, 19ec8 <os_dev_lookup+0x18>
    STAILQ_FOREACH(dev, &g_os_dev_list, od_next) {
   19ec4:	6a24      	ldr	r4, [r4, #32]
   19ec6:	e7f7      	b.n	19eb8 <os_dev_lookup+0x8>
            break;
        }
    }
    return (dev);
}
   19ec8:	4620      	mov	r0, r4
   19eca:	bd38      	pop	{r3, r4, r5, pc}
   19ecc:	20008870 	.word	0x20008870

00019ed0 <os_dev_open>:

struct os_dev *
os_dev_open(const char *devname, uint32_t timo, void *arg)
{
   19ed0:	b570      	push	{r4, r5, r6, lr}
   19ed2:	460d      	mov	r5, r1
   19ed4:	4616      	mov	r6, r2
    struct os_dev *dev;
    os_sr_t sr;
    int rc;

    dev = os_dev_lookup(devname);
   19ed6:	f7ff ffeb 	bl	19eb0 <os_dev_lookup>
    if (dev == NULL) {
   19eda:	4604      	mov	r4, r0
   19edc:	b1a0      	cbz	r0, 19f08 <os_dev_open+0x38>
        return (NULL);
    }

    /* Device is not ready to be opened. */
    if ((dev->od_flags & OS_DEV_F_STATUS_READY) == 0) {
   19ede:	7ec3      	ldrb	r3, [r0, #27]
   19ee0:	f013 0f01 	tst.w	r3, #1
   19ee4:	d012      	beq.n	19f0c <os_dev_open+0x3c>
        return (NULL);
    }

    if (dev->od_handlers.od_open) {
   19ee6:	6803      	ldr	r3, [r0, #0]
   19ee8:	b11b      	cbz	r3, 19ef2 <os_dev_open+0x22>
        rc = dev->od_handlers.od_open(dev, timo, arg);
   19eea:	4632      	mov	r2, r6
   19eec:	4629      	mov	r1, r5
   19eee:	4798      	blx	r3
        if (rc != 0) {
   19ef0:	b970      	cbnz	r0, 19f10 <os_dev_open+0x40>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19ef2:	f000 ffb5 	bl	1ae60 <os_arch_save_sr>
    ++dev->od_open_ref;
   19ef6:	7ea3      	ldrb	r3, [r4, #26]
   19ef8:	3301      	adds	r3, #1
   19efa:	76a3      	strb	r3, [r4, #26]
    dev->od_flags |= OS_DEV_F_STATUS_OPEN;
   19efc:	7ee3      	ldrb	r3, [r4, #27]
   19efe:	f043 0302 	orr.w	r3, r3, #2
   19f02:	76e3      	strb	r3, [r4, #27]
    OS_EXIT_CRITICAL(sr);
   19f04:	f000 ffb2 	bl	1ae6c <os_arch_restore_sr>

    return (dev);
err:
    return (NULL);
}
   19f08:	4620      	mov	r0, r4
   19f0a:	bd70      	pop	{r4, r5, r6, pc}
        return (NULL);
   19f0c:	2400      	movs	r4, #0
   19f0e:	e7fb      	b.n	19f08 <os_dev_open+0x38>
    return (NULL);
   19f10:	2400      	movs	r4, #0
   19f12:	e7f9      	b.n	19f08 <os_dev_open+0x38>

00019f14 <os_dev_close>:
os_dev_close(struct os_dev *dev)
{
    int rc;
    os_sr_t sr;

    if (dev == NULL) {
   19f14:	b1b0      	cbz	r0, 19f44 <os_dev_close+0x30>
{
   19f16:	b510      	push	{r4, lr}
   19f18:	4604      	mov	r4, r0
        rc = OS_EINVAL;
        goto err;
    }

    if (dev->od_handlers.od_close) {
   19f1a:	68c3      	ldr	r3, [r0, #12]
   19f1c:	b113      	cbz	r3, 19f24 <os_dev_close+0x10>
        rc = dev->od_handlers.od_close(dev);
   19f1e:	4798      	blx	r3
        if (rc != 0) {
   19f20:	4603      	mov	r3, r0
   19f22:	b968      	cbnz	r0, 19f40 <os_dev_close+0x2c>
            goto err;
        }
    }

    OS_ENTER_CRITICAL(sr);
   19f24:	f000 ff9c 	bl	1ae60 <os_arch_save_sr>
    if (--dev->od_open_ref == 0) {
   19f28:	7ea3      	ldrb	r3, [r4, #26]
   19f2a:	3b01      	subs	r3, #1
   19f2c:	b2db      	uxtb	r3, r3
   19f2e:	76a3      	strb	r3, [r4, #26]
   19f30:	b91b      	cbnz	r3, 19f3a <os_dev_close+0x26>
        dev->od_flags &= ~(OS_DEV_F_STATUS_OPEN | OS_DEV_F_STATUS_SUSPENDED);
   19f32:	7ee3      	ldrb	r3, [r4, #27]
   19f34:	f023 0306 	bic.w	r3, r3, #6
   19f38:	76e3      	strb	r3, [r4, #27]
    }
    OS_EXIT_CRITICAL(sr);
   19f3a:	f000 ff97 	bl	1ae6c <os_arch_restore_sr>

    return (0);
   19f3e:	2300      	movs	r3, #0
err:
    return (rc);
}
   19f40:	4618      	mov	r0, r3
   19f42:	bd10      	pop	{r4, pc}
        rc = OS_EINVAL;
   19f44:	2302      	movs	r3, #2
}
   19f46:	4618      	mov	r0, r3
   19f48:	4770      	bx	lr
	...

00019f4c <os_dev_reset>:
}

void
os_dev_reset(void)
{
    STAILQ_INIT(&g_os_dev_list);
   19f4c:	4b02      	ldr	r3, [pc, #8]	; (19f58 <os_dev_reset+0xc>)
   19f4e:	2200      	movs	r2, #0
   19f50:	601a      	str	r2, [r3, #0]
   19f52:	605b      	str	r3, [r3, #4]
}
   19f54:	4770      	bx	lr
   19f56:	bf00      	nop
   19f58:	20008870 	.word	0x20008870

00019f5c <os_eventq_init>:
static struct os_eventq os_eventq_main;

void
os_eventq_init(struct os_eventq *evq)
{
    memset(evq, 0, sizeof(*evq));
   19f5c:	2200      	movs	r2, #0
   19f5e:	6002      	str	r2, [r0, #0]
   19f60:	6042      	str	r2, [r0, #4]
    STAILQ_INIT(&evq->evq_list);
   19f62:	4603      	mov	r3, r0
   19f64:	f843 2f08 	str.w	r2, [r3, #8]!
   19f68:	60c3      	str	r3, [r0, #12]
}
   19f6a:	4770      	bx	lr

00019f6c <os_eventq_inited>:

int
os_eventq_inited(const struct os_eventq *evq)
{
    return evq->evq_list.stqh_last != NULL;
   19f6c:	68c0      	ldr	r0, [r0, #12]
}
   19f6e:	3000      	adds	r0, #0
   19f70:	bf18      	it	ne
   19f72:	2001      	movne	r0, #1
   19f74:	4770      	bx	lr

00019f76 <os_eventq_put>:

void
os_eventq_put(struct os_eventq *evq, struct os_event *ev)
{
   19f76:	b570      	push	{r4, r5, r6, lr}
    int resched;
    os_sr_t sr;

    assert(evq != NULL && os_eventq_inited(evq));
   19f78:	b1f0      	cbz	r0, 19fb8 <os_eventq_put+0x42>
   19f7a:	460c      	mov	r4, r1
   19f7c:	4605      	mov	r5, r0
   19f7e:	f7ff fff5 	bl	19f6c <os_eventq_inited>
   19f82:	b1c8      	cbz	r0, 19fb8 <os_eventq_put+0x42>

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_PUT, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   19f84:	f000 ff6c 	bl	1ae60 <os_arch_save_sr>
   19f88:	4606      	mov	r6, r0

    /* Do not queue if already queued */
    if (OS_EVENT_QUEUED(ev)) {
   19f8a:	7823      	ldrb	r3, [r4, #0]
   19f8c:	b9d3      	cbnz	r3, 19fc4 <os_eventq_put+0x4e>
        os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
        return;
    }

    /* Queue the event */
    ev->ev_queued = 1;
   19f8e:	2301      	movs	r3, #1
   19f90:	7023      	strb	r3, [r4, #0]
    STAILQ_INSERT_TAIL(&evq->evq_list, ev, ev_next);
   19f92:	2300      	movs	r3, #0
   19f94:	60e3      	str	r3, [r4, #12]
   19f96:	68eb      	ldr	r3, [r5, #12]
   19f98:	601c      	str	r4, [r3, #0]
   19f9a:	340c      	adds	r4, #12
   19f9c:	60ec      	str	r4, [r5, #12]

    resched = 0;
    if (evq->evq_task) {
   19f9e:	6868      	ldr	r0, [r5, #4]
   19fa0:	b1b8      	cbz	r0, 19fd2 <os_eventq_put+0x5c>
        /* If task waiting on event, wake it up.
         * Check if task is sleeping, because another event
         * queue may have woken this task up beforehand.
         */
        if (evq->evq_task->t_state == OS_TASK_SLEEP) {
   19fa2:	7b03      	ldrb	r3, [r0, #12]
   19fa4:	2b02      	cmp	r3, #2
   19fa6:	d010      	beq.n	19fca <os_eventq_put+0x54>
    resched = 0;
   19fa8:	2400      	movs	r4, #0
            resched = 1;
        }
        /* Either way, NULL out the task, because the task will
         * be awake upon exit of this function.
         */
        evq->evq_task = NULL;
   19faa:	2300      	movs	r3, #0
   19fac:	606b      	str	r3, [r5, #4]
    }

    OS_EXIT_CRITICAL(sr);
   19fae:	4630      	mov	r0, r6
   19fb0:	f000 ff5c 	bl	1ae6c <os_arch_restore_sr>

    if (resched) {
   19fb4:	b97c      	cbnz	r4, 19fd6 <os_eventq_put+0x60>
        os_sched(NULL);
    }

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_PUT);
}
   19fb6:	bd70      	pop	{r4, r5, r6, pc}
    assert(evq != NULL && os_eventq_inited(evq));
   19fb8:	2300      	movs	r3, #0
   19fba:	461a      	mov	r2, r3
   19fbc:	4619      	mov	r1, r3
   19fbe:	4618      	mov	r0, r3
   19fc0:	f7ff fcb8 	bl	19934 <__assert_func>
        OS_EXIT_CRITICAL(sr);
   19fc4:	f000 ff52 	bl	1ae6c <os_arch_restore_sr>
   19fc8:	e7f5      	b.n	19fb6 <os_eventq_put+0x40>
            os_sched_wakeup(evq->evq_task);
   19fca:	f000 fcc7 	bl	1a95c <os_sched_wakeup>
            resched = 1;
   19fce:	2401      	movs	r4, #1
   19fd0:	e7eb      	b.n	19faa <os_eventq_put+0x34>
    resched = 0;
   19fd2:	2400      	movs	r4, #0
   19fd4:	e7eb      	b.n	19fae <os_eventq_put+0x38>
        os_sched(NULL);
   19fd6:	2000      	movs	r0, #0
   19fd8:	f000 fd40 	bl	1aa5c <os_sched>
   19fdc:	e7eb      	b.n	19fb6 <os_eventq_put+0x40>

00019fde <os_eventq_get>:
    return ev;
}

struct os_event *
os_eventq_get(struct os_eventq *evq)
{
   19fde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19fe0:	4605      	mov	r5, r0
    os_sr_t sr;
    struct os_task *t;

    os_trace_api_u32(OS_TRACE_ID_EVENTQ_GET, (uint32_t)evq);

    t = os_sched_get_current_task();
   19fe2:	f000 fc67 	bl	1a8b4 <os_sched_get_current_task>
   19fe6:	4604      	mov	r4, r0
    if (evq->evq_owner != t) {
   19fe8:	682b      	ldr	r3, [r5, #0]
   19fea:	4283      	cmp	r3, r0
   19fec:	d001      	beq.n	19ff2 <os_eventq_get+0x14>
        if (evq->evq_owner == NULL) {
   19fee:	b9db      	cbnz	r3, 1a028 <os_eventq_get+0x4a>
            evq->evq_owner = t;
   19ff0:	6028      	str	r0, [r5, #0]
             * by another.
             */
            assert(0);
        }
    }
    OS_ENTER_CRITICAL(sr);
   19ff2:	f000 ff35 	bl	1ae60 <os_arch_save_sr>
   19ff6:	4607      	mov	r7, r0
pull_one:
    ev = STAILQ_FIRST(&evq->evq_list);
   19ff8:	68ae      	ldr	r6, [r5, #8]
    if (ev) {
   19ffa:	b9de      	cbnz	r6, 1a034 <os_eventq_get+0x56>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
        ev->ev_queued = 0;
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
    } else {
        evq->evq_task = t;
   19ffc:	606c      	str	r4, [r5, #4]
        os_sched_sleep(evq->evq_task, OS_TIMEOUT_NEVER);
   19ffe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a002:	4620      	mov	r0, r4
   1a004:	f000 fc62 	bl	1a8cc <os_sched_sleep>
        t->t_flags |= OS_TASK_FLAG_EVQ_WAIT;
   1a008:	7b63      	ldrb	r3, [r4, #13]
   1a00a:	f043 0308 	orr.w	r3, r3, #8
   1a00e:	7363      	strb	r3, [r4, #13]
        OS_EXIT_CRITICAL(sr);
   1a010:	4638      	mov	r0, r7
   1a012:	f000 ff2b 	bl	1ae6c <os_arch_restore_sr>

        os_sched(NULL);
   1a016:	2000      	movs	r0, #0
   1a018:	f000 fd20 	bl	1aa5c <os_sched>

        OS_ENTER_CRITICAL(sr);
   1a01c:	f000 ff20 	bl	1ae60 <os_arch_save_sr>
   1a020:	4607      	mov	r7, r0
        evq->evq_task = NULL;
   1a022:	2300      	movs	r3, #0
   1a024:	606b      	str	r3, [r5, #4]
        goto pull_one;
   1a026:	e7e7      	b.n	19ff8 <os_eventq_get+0x1a>
            assert(0);
   1a028:	2300      	movs	r3, #0
   1a02a:	461a      	mov	r2, r3
   1a02c:	4619      	mov	r1, r3
   1a02e:	4618      	mov	r0, r3
   1a030:	f7ff fc80 	bl	19934 <__assert_func>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a034:	68f3      	ldr	r3, [r6, #12]
   1a036:	60ab      	str	r3, [r5, #8]
   1a038:	b153      	cbz	r3, 1a050 <os_eventq_get+0x72>
        ev->ev_queued = 0;
   1a03a:	2300      	movs	r3, #0
   1a03c:	7033      	strb	r3, [r6, #0]
        t->t_flags &= ~OS_TASK_FLAG_EVQ_WAIT;
   1a03e:	7b63      	ldrb	r3, [r4, #13]
   1a040:	f023 0308 	bic.w	r3, r3, #8
   1a044:	7363      	strb	r3, [r4, #13]
    }
    OS_EXIT_CRITICAL(sr);
   1a046:	4638      	mov	r0, r7
   1a048:	f000 ff10 	bl	1ae6c <os_arch_restore_sr>
#if MYNEWT_VAL(OS_EVENTQ_DEBUG)
    evq->evq_prev = ev;
#endif

    return (ev);
}
   1a04c:	4630      	mov	r0, r6
   1a04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a050:	f105 0308 	add.w	r3, r5, #8
   1a054:	60eb      	str	r3, [r5, #12]
   1a056:	e7f0      	b.n	1a03a <os_eventq_get+0x5c>

0001a058 <os_eventq_run>:
}
#endif

void
os_eventq_run(struct os_eventq *evq)
{
   1a058:	b508      	push	{r3, lr}
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    struct os_eventq_mon *mon;
    uint32_t ticks;
#endif

    ev = os_eventq_get(evq);
   1a05a:	f7ff ffc0 	bl	19fde <os_eventq_get>
    assert(ev->ev_cb != NULL);
   1a05e:	6843      	ldr	r3, [r0, #4]
   1a060:	b10b      	cbz	r3, 1a066 <os_eventq_run+0xe>
#if MYNEWT_VAL(OS_EVENTQ_MONITOR)
    ticks = os_cputime_get32();
#endif
    ev->ev_cb(ev);
   1a062:	4798      	blx	r3
        if (ticks > mon->em_max) {
            mon->em_max = ticks;
        }
    }
#endif
}
   1a064:	bd08      	pop	{r3, pc}
    assert(ev->ev_cb != NULL);
   1a066:	461a      	mov	r2, r3
   1a068:	4619      	mov	r1, r3
   1a06a:	4618      	mov	r0, r3
   1a06c:	f7ff fc62 	bl	19934 <__assert_func>

0001a070 <os_eventq_remove>:
    return (ev);
}

void
os_eventq_remove(struct os_eventq *evq, struct os_event *ev)
{
   1a070:	b538      	push	{r3, r4, r5, lr}
   1a072:	4605      	mov	r5, r0
   1a074:	460c      	mov	r4, r1
    os_sr_t sr;

    os_trace_api_u32x2(OS_TRACE_ID_EVENTQ_REMOVE, (uint32_t)evq, (uint32_t)ev);

    OS_ENTER_CRITICAL(sr);
   1a076:	f000 fef3 	bl	1ae60 <os_arch_save_sr>
    if (OS_EVENT_QUEUED(ev)) {
   1a07a:	7823      	ldrb	r3, [r4, #0]
   1a07c:	b183      	cbz	r3, 1a0a0 <os_eventq_remove+0x30>
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a07e:	68aa      	ldr	r2, [r5, #8]
   1a080:	42a2      	cmp	r2, r4
   1a082:	d107      	bne.n	1a094 <os_eventq_remove+0x24>
   1a084:	68d3      	ldr	r3, [r2, #12]
   1a086:	60ab      	str	r3, [r5, #8]
   1a088:	b953      	cbnz	r3, 1a0a0 <os_eventq_remove+0x30>
   1a08a:	f105 0308 	add.w	r3, r5, #8
   1a08e:	60eb      	str	r3, [r5, #12]
   1a090:	e006      	b.n	1a0a0 <os_eventq_remove+0x30>
   1a092:	461a      	mov	r2, r3
   1a094:	68d3      	ldr	r3, [r2, #12]
   1a096:	42a3      	cmp	r3, r4
   1a098:	d1fb      	bne.n	1a092 <os_eventq_remove+0x22>
   1a09a:	68db      	ldr	r3, [r3, #12]
   1a09c:	60d3      	str	r3, [r2, #12]
   1a09e:	b123      	cbz	r3, 1a0aa <os_eventq_remove+0x3a>
    }
    ev->ev_queued = 0;
   1a0a0:	2300      	movs	r3, #0
   1a0a2:	7023      	strb	r3, [r4, #0]
    OS_EXIT_CRITICAL(sr);
   1a0a4:	f000 fee2 	bl	1ae6c <os_arch_restore_sr>

    os_trace_api_ret(OS_TRACE_ID_EVENTQ_REMOVE);
}
   1a0a8:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE(&evq->evq_list, ev, os_event, ev_next);
   1a0aa:	320c      	adds	r2, #12
   1a0ac:	60ea      	str	r2, [r5, #12]
   1a0ae:	e7f7      	b.n	1a0a0 <os_eventq_remove+0x30>

0001a0b0 <os_eventq_dflt_get>:

struct os_eventq *
os_eventq_dflt_get(void)
{
    return &os_eventq_main;
}
   1a0b0:	4800      	ldr	r0, [pc, #0]	; (1a0b4 <os_eventq_dflt_get+0x4>)
   1a0b2:	4770      	bx	lr
   1a0b4:	20008878 	.word	0x20008878

0001a0b8 <os_mqueue_init>:
#endif
#include "os/mynewt.h"

int
os_mqueue_init(struct os_mqueue *mq, os_event_fn *ev_cb, void *arg)
{
   1a0b8:	4603      	mov	r3, r0
    struct os_event *ev;

    STAILQ_INIT(&mq->mq_head);
   1a0ba:	2000      	movs	r0, #0
   1a0bc:	6018      	str	r0, [r3, #0]
   1a0be:	605b      	str	r3, [r3, #4]

    ev = &mq->mq_ev;
    memset(ev, 0, sizeof(*ev));
   1a0c0:	6098      	str	r0, [r3, #8]
   1a0c2:	6158      	str	r0, [r3, #20]
    ev->ev_cb = ev_cb;
   1a0c4:	60d9      	str	r1, [r3, #12]
    ev->ev_arg = arg;
   1a0c6:	611a      	str	r2, [r3, #16]

    return (0);
}
   1a0c8:	4770      	bx	lr

0001a0ca <os_mqueue_get>:

struct os_mbuf *
os_mqueue_get(struct os_mqueue *mq)
{
   1a0ca:	b538      	push	{r3, r4, r5, lr}
   1a0cc:	4605      	mov	r5, r0
    struct os_mbuf_pkthdr *mp;
    struct os_mbuf *m;
    os_sr_t sr;

    OS_ENTER_CRITICAL(sr);
   1a0ce:	f000 fec7 	bl	1ae60 <os_arch_save_sr>
    mp = STAILQ_FIRST(&mq->mq_head);
   1a0d2:	682c      	ldr	r4, [r5, #0]
    if (mp) {
   1a0d4:	b114      	cbz	r4, 1a0dc <os_mqueue_get+0x12>
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a0d6:	6863      	ldr	r3, [r4, #4]
   1a0d8:	602b      	str	r3, [r5, #0]
   1a0da:	b12b      	cbz	r3, 1a0e8 <os_mqueue_get+0x1e>
    }
    OS_EXIT_CRITICAL(sr);
   1a0dc:	f000 fec6 	bl	1ae6c <os_arch_restore_sr>

    if (mp) {
   1a0e0:	b124      	cbz	r4, 1a0ec <os_mqueue_get+0x22>
        m = OS_MBUF_PKTHDR_TO_MBUF(mp);
   1a0e2:	f1a4 0010 	sub.w	r0, r4, #16
    } else {
        m = NULL;
    }

    return (m);
}
   1a0e6:	bd38      	pop	{r3, r4, r5, pc}
        STAILQ_REMOVE_HEAD(&mq->mq_head, omp_next);
   1a0e8:	606d      	str	r5, [r5, #4]
   1a0ea:	e7f7      	b.n	1a0dc <os_mqueue_get+0x12>
        m = NULL;
   1a0ec:	2000      	movs	r0, #0
    return (m);
   1a0ee:	e7fa      	b.n	1a0e6 <os_mqueue_get+0x1c>

0001a0f0 <os_mqueue_put>:

int
os_mqueue_put(struct os_mqueue *mq, struct os_eventq *evq, struct os_mbuf *m)
{
   1a0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    struct os_mbuf_pkthdr *mp;
    os_sr_t sr;
    int rc;

    /* Can only place the head of a chained mbuf on the queue. */
    if (!OS_MBUF_IS_PKTHDR(m)) {
   1a0f2:	7953      	ldrb	r3, [r2, #5]
   1a0f4:	2b07      	cmp	r3, #7
   1a0f6:	d916      	bls.n	1a126 <os_mqueue_put+0x36>
   1a0f8:	4614      	mov	r4, r2
   1a0fa:	460e      	mov	r6, r1
   1a0fc:	4605      	mov	r5, r0
        rc = OS_EINVAL;
        goto err;
    }

    mp = OS_MBUF_PKTHDR(m);
   1a0fe:	f102 0710 	add.w	r7, r2, #16

    OS_ENTER_CRITICAL(sr);
   1a102:	f000 fead 	bl	1ae60 <os_arch_save_sr>
    STAILQ_INSERT_TAIL(&mq->mq_head, mp, omp_next);
   1a106:	2300      	movs	r3, #0
   1a108:	f844 3f14 	str.w	r3, [r4, #20]!
   1a10c:	686b      	ldr	r3, [r5, #4]
   1a10e:	601f      	str	r7, [r3, #0]
   1a110:	606c      	str	r4, [r5, #4]
    OS_EXIT_CRITICAL(sr);
   1a112:	f000 feab 	bl	1ae6c <os_arch_restore_sr>

    /* Only post an event to the queue if its specified */
    if (evq) {
   1a116:	b146      	cbz	r6, 1a12a <os_mqueue_put+0x3a>
        os_eventq_put(evq, &mq->mq_ev);
   1a118:	f105 0108 	add.w	r1, r5, #8
   1a11c:	4630      	mov	r0, r6
   1a11e:	f7ff ff2a 	bl	19f76 <os_eventq_put>
    }

    return (0);
   1a122:	2000      	movs	r0, #0
   1a124:	e000      	b.n	1a128 <os_mqueue_put+0x38>
err:
    return (rc);
   1a126:	2002      	movs	r0, #2
}
   1a128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (0);
   1a12a:	2000      	movs	r0, #0
   1a12c:	e7fc      	b.n	1a128 <os_mqueue_put+0x38>

0001a12e <os_mbuf_pool_init>:

int
os_mbuf_pool_init(struct os_mbuf_pool *omp, struct os_mempool *mp,
                  uint16_t buf_len, uint16_t nbufs)
{
    omp->omp_databuf_len = buf_len - sizeof(struct os_mbuf);
   1a12e:	3a10      	subs	r2, #16
   1a130:	8002      	strh	r2, [r0, #0]
    omp->omp_pool = mp;
   1a132:	6041      	str	r1, [r0, #4]

    return (0);
}
   1a134:	2000      	movs	r0, #0
   1a136:	4770      	bx	lr

0001a138 <os_mbuf_get>:

struct os_mbuf *
os_mbuf_get(struct os_mbuf_pool *omp, uint16_t leadingspace)
{
   1a138:	b538      	push	{r3, r4, r5, lr}
    struct os_mbuf *om;

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET, (uint32_t)omp,
                       (uint32_t)leadingspace);

    if (leadingspace > omp->omp_databuf_len) {
   1a13a:	8803      	ldrh	r3, [r0, #0]
   1a13c:	428b      	cmp	r3, r1
   1a13e:	d312      	bcc.n	1a166 <os_mbuf_get+0x2e>
   1a140:	460d      	mov	r5, r1
   1a142:	4604      	mov	r4, r0
        om = NULL;
        goto done;
    }

    om = os_memblock_get(omp->omp_pool);
   1a144:	6840      	ldr	r0, [r0, #4]
   1a146:	f000 f947 	bl	1a3d8 <os_memblock_get>
    if (!om) {
   1a14a:	4603      	mov	r3, r0
   1a14c:	b148      	cbz	r0, 1a162 <os_mbuf_get+0x2a>
        goto done;
    }

    SLIST_NEXT(om, om_next) = NULL;
   1a14e:	2200      	movs	r2, #0
   1a150:	60c2      	str	r2, [r0, #12]
    om->om_flags = 0;
   1a152:	7102      	strb	r2, [r0, #4]
    om->om_pkthdr_len = 0;
   1a154:	7142      	strb	r2, [r0, #5]
    om->om_len = 0;
   1a156:	80c2      	strh	r2, [r0, #6]
    om->om_data = (&om->om_databuf[0] + leadingspace);
   1a158:	f100 0110 	add.w	r1, r0, #16
   1a15c:	4429      	add	r1, r5
   1a15e:	6001      	str	r1, [r0, #0]
    om->om_omp = omp;
   1a160:	6084      	str	r4, [r0, #8]

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET, (uint32_t)om);
    return om;
}
   1a162:	4618      	mov	r0, r3
   1a164:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a166:	2300      	movs	r3, #0
    return om;
   1a168:	e7fb      	b.n	1a162 <os_mbuf_get+0x2a>

0001a16a <os_mbuf_get_pkthdr>:

struct os_mbuf *
os_mbuf_get_pkthdr(struct os_mbuf_pool *omp, uint8_t user_pkthdr_len)
{
   1a16a:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32x2(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)omp,
                       (uint32_t)user_pkthdr_len);

    /* User packet header must fit inside mbuf */
    pkthdr_len = user_pkthdr_len + sizeof(struct os_mbuf_pkthdr);
   1a16c:	f101 0508 	add.w	r5, r1, #8
    if ((pkthdr_len > omp->omp_databuf_len) || (pkthdr_len > 255)) {
   1a170:	8803      	ldrh	r3, [r0, #0]
   1a172:	42ab      	cmp	r3, r5
   1a174:	d310      	bcc.n	1a198 <os_mbuf_get_pkthdr+0x2e>
   1a176:	2dff      	cmp	r5, #255	; 0xff
   1a178:	d810      	bhi.n	1a19c <os_mbuf_get_pkthdr+0x32>
        om = NULL;
        goto done;
    }

    om = os_mbuf_get(omp, 0);
   1a17a:	2100      	movs	r1, #0
   1a17c:	f7ff ffdc 	bl	1a138 <os_mbuf_get>
    if (om) {
   1a180:	4603      	mov	r3, r0
   1a182:	b138      	cbz	r0, 1a194 <os_mbuf_get_pkthdr+0x2a>
        om->om_pkthdr_len = pkthdr_len;
   1a184:	715d      	strb	r5, [r3, #5]
        om->om_data += pkthdr_len;
   1a186:	6802      	ldr	r2, [r0, #0]
   1a188:	4415      	add	r5, r2
   1a18a:	6005      	str	r5, [r0, #0]

        pkthdr = OS_MBUF_PKTHDR(om);
        pkthdr->omp_len = 0;
   1a18c:	2200      	movs	r2, #0
   1a18e:	8202      	strh	r2, [r0, #16]
        pkthdr->omp_flags = 0;
   1a190:	8242      	strh	r2, [r0, #18]
        STAILQ_NEXT(pkthdr, omp_next) = NULL;
   1a192:	6142      	str	r2, [r0, #20]
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_GET_PKTHDR, (uint32_t)om);
    return om;
}
   1a194:	4618      	mov	r0, r3
   1a196:	bd38      	pop	{r3, r4, r5, pc}
        om = NULL;
   1a198:	2300      	movs	r3, #0
   1a19a:	e7fb      	b.n	1a194 <os_mbuf_get_pkthdr+0x2a>
   1a19c:	2300      	movs	r3, #0
    return om;
   1a19e:	e7f9      	b.n	1a194 <os_mbuf_get_pkthdr+0x2a>

0001a1a0 <os_mbuf_free>:

int
os_mbuf_free(struct os_mbuf *om)
{
   1a1a0:	b508      	push	{r3, lr}
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)om);

    if (om->om_omp != NULL) {
   1a1a2:	6883      	ldr	r3, [r0, #8]
   1a1a4:	b123      	cbz	r3, 1a1b0 <os_mbuf_free+0x10>
   1a1a6:	4601      	mov	r1, r0
        rc = os_memblock_put(om->om_omp->omp_pool, om);
   1a1a8:	6858      	ldr	r0, [r3, #4]
   1a1aa:	f000 f93d 	bl	1a428 <os_memblock_put>
    rc = 0;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE, (uint32_t)rc);
    return (rc);
}
   1a1ae:	bd08      	pop	{r3, pc}
    rc = 0;
   1a1b0:	2000      	movs	r0, #0
    return (rc);
   1a1b2:	e7fc      	b.n	1a1ae <os_mbuf_free+0xe>

0001a1b4 <os_mbuf_free_chain>:

int
os_mbuf_free_chain(struct os_mbuf *om)
{
   1a1b4:	4603      	mov	r3, r0
    struct os_mbuf *next;
    int rc;

    os_trace_api_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)om);

    while (om != NULL) {
   1a1b6:	b160      	cbz	r0, 1a1d2 <os_mbuf_free_chain+0x1e>
{
   1a1b8:	b510      	push	{r4, lr}
        next = SLIST_NEXT(om, om_next);
   1a1ba:	68dc      	ldr	r4, [r3, #12]

        rc = os_mbuf_free(om);
   1a1bc:	4618      	mov	r0, r3
   1a1be:	f7ff ffef 	bl	1a1a0 <os_mbuf_free>
        if (rc != 0) {
            goto done;
        }

        om = next;
   1a1c2:	4623      	mov	r3, r4
        if (rc != 0) {
   1a1c4:	4602      	mov	r2, r0
   1a1c6:	b910      	cbnz	r0, 1a1ce <os_mbuf_free_chain+0x1a>
    while (om != NULL) {
   1a1c8:	2c00      	cmp	r4, #0
   1a1ca:	d1f6      	bne.n	1a1ba <os_mbuf_free_chain+0x6>
    }

    rc = 0;
   1a1cc:	2200      	movs	r2, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MBUF_FREE_CHAIN, (uint32_t)rc);
    return (rc);
}
   1a1ce:	4610      	mov	r0, r2
   1a1d0:	bd10      	pop	{r4, pc}
    rc = 0;
   1a1d2:	2200      	movs	r2, #0
}
   1a1d4:	4610      	mov	r0, r2
   1a1d6:	4770      	bx	lr

0001a1d8 <os_mbuf_len>:
uint16_t
os_mbuf_len(const struct os_mbuf *om)
{
    uint16_t len;

    len = 0;
   1a1d8:	2300      	movs	r3, #0
    while (om != NULL) {
   1a1da:	e003      	b.n	1a1e4 <os_mbuf_len+0xc>
        len += om->om_len;
   1a1dc:	88c2      	ldrh	r2, [r0, #6]
   1a1de:	4413      	add	r3, r2
   1a1e0:	b29b      	uxth	r3, r3
        om = SLIST_NEXT(om, om_next);
   1a1e2:	68c0      	ldr	r0, [r0, #12]
    while (om != NULL) {
   1a1e4:	2800      	cmp	r0, #0
   1a1e6:	d1f9      	bne.n	1a1dc <os_mbuf_len+0x4>
    }

    return len;
}
   1a1e8:	4618      	mov	r0, r3
   1a1ea:	4770      	bx	lr

0001a1ec <os_mbuf_append>:

int
os_mbuf_append(struct os_mbuf *om, const void *data,  uint16_t len)
{
   1a1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    struct os_mbuf *new;
    int remainder;
    int space;
    int rc;

    if (om == NULL) {
   1a1f0:	2800      	cmp	r0, #0
   1a1f2:	d04d      	beq.n	1a290 <os_mbuf_append+0xa4>
   1a1f4:	460f      	mov	r7, r1
   1a1f6:	4691      	mov	r9, r2
   1a1f8:	4682      	mov	sl, r0
        rc = OS_EINVAL;
        goto err;
    }

    omp = om->om_omp;
   1a1fa:	f8d0 8008 	ldr.w	r8, [r0, #8]

    /* Scroll to last mbuf in the chain */
    last = om;
   1a1fe:	4605      	mov	r5, r0
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a200:	e000      	b.n	1a204 <os_mbuf_append+0x18>
        last = SLIST_NEXT(last, om_next);
   1a202:	461d      	mov	r5, r3
    while (SLIST_NEXT(last, om_next) != NULL) {
   1a204:	68eb      	ldr	r3, [r5, #12]
   1a206:	2b00      	cmp	r3, #0
   1a208:	d1fb      	bne.n	1a202 <os_mbuf_append+0x16>
    }

    remainder = len;
   1a20a:	464e      	mov	r6, r9
static inline uint16_t
_os_mbuf_trailingspace(struct os_mbuf *om)
{
    struct os_mbuf_pool *omp;

    omp = om->om_omp;
   1a20c:	68ab      	ldr	r3, [r5, #8]

    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a20e:	f105 0410 	add.w	r4, r5, #16
   1a212:	881b      	ldrh	r3, [r3, #0]
   1a214:	441c      	add	r4, r3
      (om->om_data + om->om_len);
   1a216:	6828      	ldr	r0, [r5, #0]
   1a218:	88eb      	ldrh	r3, [r5, #6]
   1a21a:	4418      	add	r0, r3
    return (&om->om_databuf[0] + omp->omp_databuf_len) -
   1a21c:	1a24      	subs	r4, r4, r0
   1a21e:	b2a4      	uxth	r4, r4
    space = OS_MBUF_TRAILINGSPACE(last);

    /* If room in current mbuf, copy the first part of the data into the
     * remaining space in that mbuf.
     */
    if (space > 0) {
   1a220:	b164      	cbz	r4, 1a23c <os_mbuf_append+0x50>
        if (space > remainder) {
   1a222:	454c      	cmp	r4, r9
   1a224:	dd00      	ble.n	1a228 <os_mbuf_append+0x3c>
            space = remainder;
   1a226:	464c      	mov	r4, r9
        }

        memcpy(OS_MBUF_DATA(last, uint8_t *) + last->om_len , data, space);
   1a228:	4622      	mov	r2, r4
   1a22a:	4639      	mov	r1, r7
   1a22c:	f000 ff78 	bl	1b120 <memcpy>

        last->om_len += space;
   1a230:	88eb      	ldrh	r3, [r5, #6]
   1a232:	4423      	add	r3, r4
   1a234:	80eb      	strh	r3, [r5, #6]
        data += space;
   1a236:	4427      	add	r7, r4
        remainder -= space;
   1a238:	eba9 0604 	sub.w	r6, r9, r4
    }

    /* Take the remaining data, and keep allocating new mbufs and copying
     * data into it, until data is exhausted.
     */
    while (remainder > 0) {
   1a23c:	2e00      	cmp	r6, #0
   1a23e:	dd16      	ble.n	1a26e <os_mbuf_append+0x82>
        new = os_mbuf_get(omp, 0);
   1a240:	2100      	movs	r1, #0
   1a242:	4640      	mov	r0, r8
   1a244:	f7ff ff78 	bl	1a138 <os_mbuf_get>
        if (!new) {
   1a248:	4604      	mov	r4, r0
   1a24a:	b180      	cbz	r0, 1a26e <os_mbuf_append+0x82>
            break;
        }

        new->om_len = min(omp->omp_databuf_len, remainder);
   1a24c:	f8b8 2000 	ldrh.w	r2, [r8]
   1a250:	42b2      	cmp	r2, r6
   1a252:	bfa8      	it	ge
   1a254:	4632      	movge	r2, r6
   1a256:	b292      	uxth	r2, r2
   1a258:	80c2      	strh	r2, [r0, #6]
        memcpy(OS_MBUF_DATA(new, void *), data, new->om_len);
   1a25a:	4639      	mov	r1, r7
   1a25c:	6800      	ldr	r0, [r0, #0]
   1a25e:	f000 ff5f 	bl	1b120 <memcpy>
        data += new->om_len;
   1a262:	88e3      	ldrh	r3, [r4, #6]
   1a264:	441f      	add	r7, r3
        remainder -= new->om_len;
   1a266:	1af6      	subs	r6, r6, r3
        SLIST_NEXT(last, om_next) = new;
   1a268:	60ec      	str	r4, [r5, #12]
        last = new;
   1a26a:	4625      	mov	r5, r4
   1a26c:	e7e6      	b.n	1a23c <os_mbuf_append+0x50>
    }

    /* Adjust the packet header length in the buffer */
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a26e:	f89a 3005 	ldrb.w	r3, [sl, #5]
   1a272:	2b07      	cmp	r3, #7
   1a274:	d907      	bls.n	1a286 <os_mbuf_append+0x9a>
        OS_MBUF_PKTHDR(om)->omp_len += len - remainder;
   1a276:	eba9 0906 	sub.w	r9, r9, r6
   1a27a:	f8ba 3010 	ldrh.w	r3, [sl, #16]
   1a27e:	fa13 f989 	uxtah	r9, r3, r9
   1a282:	f8aa 9010 	strh.w	r9, [sl, #16]
    }

    if (remainder != 0) {
   1a286:	b106      	cbz	r6, 1a28a <os_mbuf_append+0x9e>
        rc = OS_ENOMEM;
   1a288:	2601      	movs	r6, #1


    return (0);
err:
    return (rc);
}
   1a28a:	4630      	mov	r0, r6
   1a28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        rc = OS_EINVAL;
   1a290:	2602      	movs	r6, #2
   1a292:	e7fa      	b.n	1a28a <os_mbuf_append+0x9e>

0001a294 <os_mbuf_dup>:
    return 0;
}

struct os_mbuf *
os_mbuf_dup(struct os_mbuf *om)
{
   1a294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a298:	4604      	mov	r4, r0
    struct os_mbuf_pool *omp;
    struct os_mbuf *head;
    struct os_mbuf *copy;

    omp = om->om_omp;
   1a29a:	f8d0 8008 	ldr.w	r8, [r0, #8]

    head = NULL;
    copy = NULL;
   1a29e:	2700      	movs	r7, #0
    head = NULL;
   1a2a0:	463e      	mov	r6, r7

    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a2a2:	e017      	b.n	1a2d4 <os_mbuf_dup+0x40>
    startoff = 0;
   1a2a4:	2100      	movs	r1, #0
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a2a6:	4623      	mov	r3, r4
   1a2a8:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a2ac:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a2ae:	1ad3      	subs	r3, r2, r3
        if (head) {
            SLIST_NEXT(copy, om_next) = os_mbuf_get(omp,
   1a2b0:	b299      	uxth	r1, r3
   1a2b2:	4640      	mov	r0, r8
   1a2b4:	f7ff ff40 	bl	1a138 <os_mbuf_get>
   1a2b8:	4605      	mov	r5, r0
   1a2ba:	60f8      	str	r0, [r7, #12]
                    OS_MBUF_LEADINGSPACE(om));
            if (!SLIST_NEXT(copy, om_next)) {
   1a2bc:	b188      	cbz	r0, 1a2e2 <os_mbuf_dup+0x4e>
            if (OS_MBUF_IS_PKTHDR(om)) {
                _os_mbuf_copypkthdr(head, om);
            }
            copy = head;
        }
        copy->om_flags = om->om_flags;
   1a2be:	7923      	ldrb	r3, [r4, #4]
   1a2c0:	712b      	strb	r3, [r5, #4]
        copy->om_len = om->om_len;
   1a2c2:	88e3      	ldrh	r3, [r4, #6]
   1a2c4:	80eb      	strh	r3, [r5, #6]
        memcpy(OS_MBUF_DATA(copy, uint8_t *), OS_MBUF_DATA(om, uint8_t *),
   1a2c6:	88e2      	ldrh	r2, [r4, #6]
   1a2c8:	6821      	ldr	r1, [r4, #0]
   1a2ca:	6828      	ldr	r0, [r5, #0]
   1a2cc:	f000 ff28 	bl	1b120 <memcpy>
    for (; om != NULL; om = SLIST_NEXT(om, om_next)) {
   1a2d0:	68e4      	ldr	r4, [r4, #12]
   1a2d2:	462f      	mov	r7, r5
   1a2d4:	b14c      	cbz	r4, 1a2ea <os_mbuf_dup+0x56>
        if (head) {
   1a2d6:	b15e      	cbz	r6, 1a2f0 <os_mbuf_dup+0x5c>
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a2d8:	7963      	ldrb	r3, [r4, #5]
   1a2da:	2b07      	cmp	r3, #7
   1a2dc:	d9e2      	bls.n	1a2a4 <os_mbuf_dup+0x10>
        startoff = om->om_pkthdr_len;
   1a2de:	b299      	uxth	r1, r3
   1a2e0:	e7e1      	b.n	1a2a6 <os_mbuf_dup+0x12>
                os_mbuf_free_chain(head);
   1a2e2:	4630      	mov	r0, r6
   1a2e4:	f7ff ff66 	bl	1a1b4 <os_mbuf_free_chain>
                om->om_len);
    }

    return (head);
err:
    return (NULL);
   1a2e8:	462e      	mov	r6, r5
}
   1a2ea:	4630      	mov	r0, r6
   1a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (OS_MBUF_IS_PKTHDR(om)) {
   1a2f0:	7963      	ldrb	r3, [r4, #5]
   1a2f2:	2b07      	cmp	r3, #7
   1a2f4:	d911      	bls.n	1a31a <os_mbuf_dup+0x86>
        startoff = om->om_pkthdr_len;
   1a2f6:	b299      	uxth	r1, r3
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a2f8:	4623      	mov	r3, r4
   1a2fa:	f853 2b10 	ldr.w	r2, [r3], #16
        ((uint8_t *) &om->om_databuf[0] + startoff));
   1a2fe:	440b      	add	r3, r1
    leadingspace = (uint16_t) (OS_MBUF_DATA(om, uint8_t *) -
   1a300:	1ad3      	subs	r3, r2, r3
            head = os_mbuf_get(omp, OS_MBUF_LEADINGSPACE(om));
   1a302:	b299      	uxth	r1, r3
   1a304:	4640      	mov	r0, r8
   1a306:	f7ff ff17 	bl	1a138 <os_mbuf_get>
            if (!head) {
   1a30a:	4606      	mov	r6, r0
   1a30c:	2800      	cmp	r0, #0
   1a30e:	d0ec      	beq.n	1a2ea <os_mbuf_dup+0x56>
            if (OS_MBUF_IS_PKTHDR(om)) {
   1a310:	7963      	ldrb	r3, [r4, #5]
   1a312:	2b07      	cmp	r3, #7
   1a314:	d803      	bhi.n	1a31e <os_mbuf_dup+0x8a>
            copy = head;
   1a316:	4605      	mov	r5, r0
   1a318:	e7d1      	b.n	1a2be <os_mbuf_dup+0x2a>
    startoff = 0;
   1a31a:	2100      	movs	r1, #0
   1a31c:	e7ec      	b.n	1a2f8 <os_mbuf_dup+0x64>
    assert(new_buf->om_len == 0);
   1a31e:	88c3      	ldrh	r3, [r0, #6]
   1a320:	b973      	cbnz	r3, 1a340 <os_mbuf_dup+0xac>
    memcpy(&new_buf->om_databuf[0], &old_buf->om_databuf[0],
   1a322:	f100 0510 	add.w	r5, r0, #16
   1a326:	7962      	ldrb	r2, [r4, #5]
   1a328:	f104 0110 	add.w	r1, r4, #16
   1a32c:	4628      	mov	r0, r5
   1a32e:	f000 fef7 	bl	1b120 <memcpy>
    new_buf->om_pkthdr_len = old_buf->om_pkthdr_len;
   1a332:	7963      	ldrb	r3, [r4, #5]
   1a334:	7173      	strb	r3, [r6, #5]
    new_buf->om_data = new_buf->om_databuf + old_buf->om_pkthdr_len;
   1a336:	7963      	ldrb	r3, [r4, #5]
   1a338:	441d      	add	r5, r3
   1a33a:	6035      	str	r5, [r6, #0]
            copy = head;
   1a33c:	4635      	mov	r5, r6
   1a33e:	e7be      	b.n	1a2be <os_mbuf_dup+0x2a>
    assert(new_buf->om_len == 0);
   1a340:	2300      	movs	r3, #0
   1a342:	461a      	mov	r2, r3
   1a344:	4619      	mov	r1, r3
   1a346:	4618      	mov	r0, r3
   1a348:	f7ff faf4 	bl	19934 <__assert_func>

0001a34c <os_mempool_init_internal>:
    int i;
    uint8_t *block_addr;
    struct os_memblock *block_ptr;

    /* Check for valid parameters */
    if (!mp || (block_size == 0)) {
   1a34c:	2800      	cmp	r0, #0
   1a34e:	d031      	beq.n	1a3b4 <os_mempool_init_internal+0x68>
{
   1a350:	b430      	push	{r4, r5}
   1a352:	4604      	mov	r4, r0
    if (!mp || (block_size == 0)) {
   1a354:	2a00      	cmp	r2, #0
   1a356:	d02f      	beq.n	1a3b8 <os_mempool_init_internal+0x6c>
        return OS_INVALID_PARM;
    }

    if ((!membuf) && (blocks != 0)) {
   1a358:	b1bb      	cbz	r3, 1a38a <os_mempool_init_internal+0x3e>
        return OS_INVALID_PARM;
    }

    if (membuf != NULL) {
   1a35a:	b113      	cbz	r3, 1a362 <os_mempool_init_internal+0x16>
        /* Blocks need to be sized properly and memory buffer should be
         * aligned
         */
        if (((uint32_t)membuf & (OS_ALIGNMENT - 1)) != 0) {
   1a35c:	f013 0f03 	tst.w	r3, #3
   1a360:	d12c      	bne.n	1a3bc <os_mempool_init_internal+0x70>
            return OS_MEM_NOT_ALIGNED;
        }
    }

    /* Initialize the memory pool structure */
    mp->mp_block_size = block_size;
   1a362:	6022      	str	r2, [r4, #0]
    mp->mp_num_free = blocks;
   1a364:	80e1      	strh	r1, [r4, #6]
    mp->mp_min_free = blocks;
   1a366:	8121      	strh	r1, [r4, #8]
    mp->mp_flags = flags;
   1a368:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1a36c:	72a0      	strb	r0, [r4, #10]
    mp->mp_num_blocks = blocks;
   1a36e:	80a1      	strh	r1, [r4, #4]
    mp->mp_membuf_addr = (uint32_t)membuf;
   1a370:	60e3      	str	r3, [r4, #12]
    mp->name = name;
   1a372:	9802      	ldr	r0, [sp, #8]
   1a374:	61a0      	str	r0, [r4, #24]
    SLIST_FIRST(mp) = membuf;
   1a376:	6163      	str	r3, [r4, #20]

    if (blocks > 0) {
   1a378:	b199      	cbz	r1, 1a3a2 <os_mempool_init_internal+0x56>
        os_mempool_poison(mp, membuf);
        os_mempool_guard(mp, membuf);
        true_block_size = OS_MEMPOOL_TRUE_BLOCK_SIZE(mp);
   1a37a:	f012 0f03 	tst.w	r2, #3
   1a37e:	d002      	beq.n	1a386 <os_mempool_init_internal+0x3a>
   1a380:	f022 0203 	bic.w	r2, r2, #3
   1a384:	3204      	adds	r2, #4

        /* Chain the memory blocks to the free list */
        block_addr = (uint8_t *)membuf;
        block_ptr = (struct os_memblock *)block_addr;
        for (i = 1; i < blocks; i++) {
   1a386:	2001      	movs	r0, #1
   1a388:	e007      	b.n	1a39a <os_mempool_init_internal+0x4e>
    if ((!membuf) && (blocks != 0)) {
   1a38a:	2900      	cmp	r1, #0
   1a38c:	d0e5      	beq.n	1a35a <os_mempool_init_internal+0xe>
        return OS_INVALID_PARM;
   1a38e:	2003      	movs	r0, #3
   1a390:	e00e      	b.n	1a3b0 <os_mempool_init_internal+0x64>
            block_addr += true_block_size;
   1a392:	189d      	adds	r5, r3, r2
            os_mempool_poison(mp, block_addr);
            os_mempool_guard(mp, block_addr);
            SLIST_NEXT(block_ptr, mb_next) = (struct os_memblock *)block_addr;
   1a394:	601d      	str	r5, [r3, #0]
        for (i = 1; i < blocks; i++) {
   1a396:	3001      	adds	r0, #1
            block_addr += true_block_size;
   1a398:	462b      	mov	r3, r5
        for (i = 1; i < blocks; i++) {
   1a39a:	4281      	cmp	r1, r0
   1a39c:	dcf9      	bgt.n	1a392 <os_mempool_init_internal+0x46>
            block_ptr = (struct os_memblock *)block_addr;
        }

        /* Last one in the list should be NULL */
        SLIST_NEXT(block_ptr, mb_next) = NULL;
   1a39e:	2200      	movs	r2, #0
   1a3a0:	601a      	str	r2, [r3, #0]
    }

    STAILQ_INSERT_TAIL(&g_os_mempool_list, mp, mp_list);
   1a3a2:	2000      	movs	r0, #0
   1a3a4:	6120      	str	r0, [r4, #16]
   1a3a6:	4b06      	ldr	r3, [pc, #24]	; (1a3c0 <os_mempool_init_internal+0x74>)
   1a3a8:	685a      	ldr	r2, [r3, #4]
   1a3aa:	6014      	str	r4, [r2, #0]
   1a3ac:	3410      	adds	r4, #16
   1a3ae:	605c      	str	r4, [r3, #4]

    return OS_OK;
}
   1a3b0:	bc30      	pop	{r4, r5}
   1a3b2:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a3b4:	2003      	movs	r0, #3
}
   1a3b6:	4770      	bx	lr
        return OS_INVALID_PARM;
   1a3b8:	2003      	movs	r0, #3
   1a3ba:	e7f9      	b.n	1a3b0 <os_mempool_init_internal+0x64>
            return OS_MEM_NOT_ALIGNED;
   1a3bc:	2004      	movs	r0, #4
   1a3be:	e7f7      	b.n	1a3b0 <os_mempool_init_internal+0x64>
   1a3c0:	2000d698 	.word	0x2000d698

0001a3c4 <os_mempool_init>:

os_error_t
os_mempool_init(struct os_mempool *mp, uint16_t blocks, uint32_t block_size,
                void *membuf, char *name)
{
   1a3c4:	b510      	push	{r4, lr}
   1a3c6:	b082      	sub	sp, #8
    return os_mempool_init_internal(mp, blocks, block_size, membuf, name, 0);
   1a3c8:	2400      	movs	r4, #0
   1a3ca:	9401      	str	r4, [sp, #4]
   1a3cc:	9c04      	ldr	r4, [sp, #16]
   1a3ce:	9400      	str	r4, [sp, #0]
   1a3d0:	f7ff ffbc 	bl	1a34c <os_mempool_init_internal>
}
   1a3d4:	b002      	add	sp, #8
   1a3d6:	bd10      	pop	{r4, pc}

0001a3d8 <os_memblock_get>:
    return 1;
}

void *
os_memblock_get(struct os_mempool *mp)
{
   1a3d8:	b538      	push	{r3, r4, r5, lr}

    os_trace_api_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)mp);

    /* Check to make sure they passed in a memory pool (or something) */
    block = NULL;
    if (mp) {
   1a3da:	b1a0      	cbz	r0, 1a406 <os_memblock_get+0x2e>
   1a3dc:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1a3de:	f000 fd3f 	bl	1ae60 <os_arch_save_sr>
        /* Check for any free */
        if (mp->mp_num_free) {
   1a3e2:	88e3      	ldrh	r3, [r4, #6]
   1a3e4:	b153      	cbz	r3, 1a3fc <os_memblock_get+0x24>
            /* Get a free block */
            block = SLIST_FIRST(mp);
   1a3e6:	6965      	ldr	r5, [r4, #20]

            /* Set new free list head */
            SLIST_FIRST(mp) = SLIST_NEXT(block, mb_next);
   1a3e8:	682a      	ldr	r2, [r5, #0]
   1a3ea:	6162      	str	r2, [r4, #20]

            /* Decrement number free by 1 */
            mp->mp_num_free--;
   1a3ec:	3b01      	subs	r3, #1
   1a3ee:	b29b      	uxth	r3, r3
   1a3f0:	80e3      	strh	r3, [r4, #6]
            if (mp->mp_min_free > mp->mp_num_free) {
   1a3f2:	8922      	ldrh	r2, [r4, #8]
   1a3f4:	4293      	cmp	r3, r2
   1a3f6:	d202      	bcs.n	1a3fe <os_memblock_get+0x26>
                mp->mp_min_free = mp->mp_num_free;
   1a3f8:	8123      	strh	r3, [r4, #8]
   1a3fa:	e000      	b.n	1a3fe <os_memblock_get+0x26>
    block = NULL;
   1a3fc:	2500      	movs	r5, #0
            }
        }
        OS_EXIT_CRITICAL(sr);
   1a3fe:	f000 fd35 	bl	1ae6c <os_arch_restore_sr>
    }

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_GET, (uint32_t)block);

    return (void *)block;
}
   1a402:	4628      	mov	r0, r5
   1a404:	bd38      	pop	{r3, r4, r5, pc}
    block = NULL;
   1a406:	2500      	movs	r5, #0
    return (void *)block;
   1a408:	e7fb      	b.n	1a402 <os_memblock_get+0x2a>

0001a40a <os_memblock_put_from_cb>:

os_error_t
os_memblock_put_from_cb(struct os_mempool *mp, void *block_addr)
{
   1a40a:	b538      	push	{r3, r4, r5, lr}
   1a40c:	4604      	mov	r4, r0
   1a40e:	460d      	mov	r5, r1

    os_mempool_guard_check(mp, block_addr);
    os_mempool_poison(mp, block_addr);

    block = (struct os_memblock *)block_addr;
    OS_ENTER_CRITICAL(sr);
   1a410:	f000 fd26 	bl	1ae60 <os_arch_save_sr>

    /* Chain current free list pointer to this block; make this block head */
    SLIST_NEXT(block, mb_next) = SLIST_FIRST(mp);
   1a414:	6963      	ldr	r3, [r4, #20]
   1a416:	602b      	str	r3, [r5, #0]
    SLIST_FIRST(mp) = block;
   1a418:	6165      	str	r5, [r4, #20]

    /* XXX: Should we check that the number free <= number blocks? */
    /* Increment number free */
    mp->mp_num_free++;
   1a41a:	88e3      	ldrh	r3, [r4, #6]
   1a41c:	3301      	adds	r3, #1
   1a41e:	80e3      	strh	r3, [r4, #6]

    OS_EXIT_CRITICAL(sr);
   1a420:	f000 fd24 	bl	1ae6c <os_arch_restore_sr>

    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT_FROM_CB, (uint32_t)OS_OK);

    return OS_OK;
}
   1a424:	2000      	movs	r0, #0
   1a426:	bd38      	pop	{r3, r4, r5, pc}

0001a428 <os_memblock_put>:

    os_trace_api_u32x2(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)mp,
                       (uint32_t)block_addr);

    /* Make sure parameters are valid */
    if ((mp == NULL) || (block_addr == NULL)) {
   1a428:	b168      	cbz	r0, 1a446 <os_memblock_put+0x1e>
{
   1a42a:	b508      	push	{r3, lr}
    if ((mp == NULL) || (block_addr == NULL)) {
   1a42c:	b169      	cbz	r1, 1a44a <os_memblock_put+0x22>
    }
#endif
    /* If this is an extended mempool with a put callback, call the callback
     * instead of freeing the block directly.
     */
    if (mp->mp_flags & OS_MEMPOOL_F_EXT) {
   1a42e:	7a83      	ldrb	r3, [r0, #10]
   1a430:	f013 0f01 	tst.w	r3, #1
   1a434:	d004      	beq.n	1a440 <os_memblock_put+0x18>
        mpe = (struct os_mempool_ext *)mp;
        if (mpe->mpe_put_cb != NULL) {
   1a436:	69c3      	ldr	r3, [r0, #28]
   1a438:	b113      	cbz	r3, 1a440 <os_memblock_put+0x18>
            ret = mpe->mpe_put_cb(mpe, block_addr, mpe->mpe_put_arg);
   1a43a:	6a02      	ldr	r2, [r0, #32]
   1a43c:	4798      	blx	r3
    ret = os_memblock_put_from_cb(mp, block_addr);

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MEMBLOCK_PUT, (uint32_t)ret);
    return ret;
}
   1a43e:	bd08      	pop	{r3, pc}
    ret = os_memblock_put_from_cb(mp, block_addr);
   1a440:	f7ff ffe3 	bl	1a40a <os_memblock_put_from_cb>
   1a444:	e7fb      	b.n	1a43e <os_memblock_put+0x16>
        ret = OS_INVALID_PARM;
   1a446:	2003      	movs	r0, #3
}
   1a448:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a44a:	2003      	movs	r0, #3
   1a44c:	e7f7      	b.n	1a43e <os_memblock_put+0x16>
	...

0001a450 <os_mempool_module_init>:
}

void
os_mempool_module_init(void)
{
    STAILQ_INIT(&g_os_mempool_list);
   1a450:	4b02      	ldr	r3, [pc, #8]	; (1a45c <os_mempool_module_init+0xc>)
   1a452:	2200      	movs	r2, #0
   1a454:	601a      	str	r2, [r3, #0]
   1a456:	605b      	str	r3, [r3, #4]
}
   1a458:	4770      	bx	lr
   1a45a:	bf00      	nop
   1a45c:	2000d698 	.word	0x2000d698

0001a460 <os_msys_find_biggest_pool>:

static struct os_mbuf_pool *
os_msys_find_biggest_pool(void)
{
    /* Mempools are sorted by the blocksize, so just return last one */
    return STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a460:	4b02      	ldr	r3, [pc, #8]	; (1a46c <os_msys_find_biggest_pool+0xc>)
   1a462:	6818      	ldr	r0, [r3, #0]
   1a464:	b108      	cbz	r0, 1a46a <os_msys_find_biggest_pool+0xa>
   1a466:	6858      	ldr	r0, [r3, #4]
   1a468:	3808      	subs	r0, #8
}
   1a46a:	4770      	bx	lr
   1a46c:	2000010c 	.word	0x2000010c

0001a470 <os_msys_find_pool>:
os_msys_find_pool(uint16_t dsize)
{
    struct os_mbuf_pool *pool;

    pool = NULL;
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a470:	4b09      	ldr	r3, [pc, #36]	; (1a498 <os_msys_find_pool+0x28>)
   1a472:	6819      	ldr	r1, [r3, #0]
   1a474:	460b      	mov	r3, r1
   1a476:	b123      	cbz	r3, 1a482 <os_msys_find_pool+0x12>
        if (dsize <= pool->omp_databuf_len) {
   1a478:	881a      	ldrh	r2, [r3, #0]
   1a47a:	4282      	cmp	r2, r0
   1a47c:	d201      	bcs.n	1a482 <os_msys_find_pool+0x12>
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a47e:	689b      	ldr	r3, [r3, #8]
   1a480:	e7f9      	b.n	1a476 <os_msys_find_pool+0x6>
            break;
        }
    }

    if (!pool) {
   1a482:	b10b      	cbz	r3, 1a488 <os_msys_find_pool+0x18>
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
    }

    return (pool);
}
   1a484:	4618      	mov	r0, r3
   1a486:	4770      	bx	lr
        pool = STAILQ_LAST(&g_msys_pool_list, os_mbuf_pool, omp_next);
   1a488:	b119      	cbz	r1, 1a492 <os_msys_find_pool+0x22>
   1a48a:	4b03      	ldr	r3, [pc, #12]	; (1a498 <os_msys_find_pool+0x28>)
   1a48c:	685b      	ldr	r3, [r3, #4]
   1a48e:	3b08      	subs	r3, #8
   1a490:	e7f8      	b.n	1a484 <os_msys_find_pool+0x14>
   1a492:	460b      	mov	r3, r1
    return (pool);
   1a494:	e7f6      	b.n	1a484 <os_msys_find_pool+0x14>
   1a496:	bf00      	nop
   1a498:	2000010c 	.word	0x2000010c

0001a49c <os_msys_register>:
{
   1a49c:	b430      	push	{r4, r5}
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a49e:	4b11      	ldr	r3, [pc, #68]	; (1a4e4 <os_msys_register+0x48>)
   1a4a0:	681d      	ldr	r5, [r3, #0]
   1a4a2:	462b      	mov	r3, r5
    prev = NULL;
   1a4a4:	2400      	movs	r4, #0
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a4a6:	b133      	cbz	r3, 1a4b6 <os_msys_register+0x1a>
        if (new_pool->omp_databuf_len < pool->omp_databuf_len) {
   1a4a8:	8801      	ldrh	r1, [r0, #0]
   1a4aa:	881a      	ldrh	r2, [r3, #0]
   1a4ac:	4291      	cmp	r1, r2
   1a4ae:	d302      	bcc.n	1a4b6 <os_msys_register+0x1a>
        prev = pool;
   1a4b0:	461c      	mov	r4, r3
    STAILQ_FOREACH(pool, &g_msys_pool_list, omp_next) {
   1a4b2:	689b      	ldr	r3, [r3, #8]
   1a4b4:	e7f7      	b.n	1a4a6 <os_msys_register+0xa>
    if (prev) {
   1a4b6:	b15c      	cbz	r4, 1a4d0 <os_msys_register+0x34>
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a4b8:	68a3      	ldr	r3, [r4, #8]
   1a4ba:	6083      	str	r3, [r0, #8]
   1a4bc:	b11b      	cbz	r3, 1a4c6 <os_msys_register+0x2a>
   1a4be:	60a0      	str	r0, [r4, #8]
}
   1a4c0:	2000      	movs	r0, #0
   1a4c2:	bc30      	pop	{r4, r5}
   1a4c4:	4770      	bx	lr
        STAILQ_INSERT_AFTER(&g_msys_pool_list, prev, new_pool, omp_next);
   1a4c6:	f100 0308 	add.w	r3, r0, #8
   1a4ca:	4a06      	ldr	r2, [pc, #24]	; (1a4e4 <os_msys_register+0x48>)
   1a4cc:	6053      	str	r3, [r2, #4]
   1a4ce:	e7f6      	b.n	1a4be <os_msys_register+0x22>
        STAILQ_INSERT_HEAD(&g_msys_pool_list, new_pool, omp_next);
   1a4d0:	6085      	str	r5, [r0, #8]
   1a4d2:	b115      	cbz	r5, 1a4da <os_msys_register+0x3e>
   1a4d4:	4b03      	ldr	r3, [pc, #12]	; (1a4e4 <os_msys_register+0x48>)
   1a4d6:	6018      	str	r0, [r3, #0]
   1a4d8:	e7f2      	b.n	1a4c0 <os_msys_register+0x24>
   1a4da:	f100 0308 	add.w	r3, r0, #8
   1a4de:	4a01      	ldr	r2, [pc, #4]	; (1a4e4 <os_msys_register+0x48>)
   1a4e0:	6053      	str	r3, [r2, #4]
   1a4e2:	e7f7      	b.n	1a4d4 <os_msys_register+0x38>
   1a4e4:	2000010c 	.word	0x2000010c

0001a4e8 <os_msys_init_once>:

static void
os_msys_init_once(void *data, struct os_mempool *mempool,
                  struct os_mbuf_pool *mbuf_pool,
                  int block_count, int block_size, char *name)
{
   1a4e8:	b530      	push	{r4, r5, lr}
   1a4ea:	b083      	sub	sp, #12
   1a4ec:	4614      	mov	r4, r2
    int rc;

    rc = mem_init_mbuf_pool(data, mempool, mbuf_pool, block_count, block_size,
   1a4ee:	9d07      	ldr	r5, [sp, #28]
   1a4f0:	9501      	str	r5, [sp, #4]
   1a4f2:	9d06      	ldr	r5, [sp, #24]
   1a4f4:	9500      	str	r5, [sp, #0]
   1a4f6:	f001 f96d 	bl	1b7d4 <mem_init_mbuf_pool>
                            name);
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a4fa:	b138      	cbz	r0, 1a50c <os_msys_init_once+0x24>
   1a4fc:	2000      	movs	r0, #0
   1a4fe:	9000      	str	r0, [sp, #0]
   1a500:	4b09      	ldr	r3, [pc, #36]	; (1a528 <os_msys_init_once+0x40>)
   1a502:	681d      	ldr	r5, [r3, #0]
   1a504:	4603      	mov	r3, r0
   1a506:	4602      	mov	r2, r0
   1a508:	4601      	mov	r1, r0
   1a50a:	47a8      	blx	r5

    rc = os_msys_register(mbuf_pool);
   1a50c:	4620      	mov	r0, r4
   1a50e:	f7ff ffc5 	bl	1a49c <os_msys_register>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1a512:	b138      	cbz	r0, 1a524 <os_msys_init_once+0x3c>
   1a514:	2000      	movs	r0, #0
   1a516:	9000      	str	r0, [sp, #0]
   1a518:	4b03      	ldr	r3, [pc, #12]	; (1a528 <os_msys_init_once+0x40>)
   1a51a:	681c      	ldr	r4, [r3, #0]
   1a51c:	4603      	mov	r3, r0
   1a51e:	4602      	mov	r2, r0
   1a520:	4601      	mov	r1, r0
   1a522:	47a0      	blx	r4
}
   1a524:	b003      	add	sp, #12
   1a526:	bd30      	pop	{r4, r5, pc}
   1a528:	20000104 	.word	0x20000104

0001a52c <os_msys_reset>:
    STAILQ_INIT(&g_msys_pool_list);
   1a52c:	4b02      	ldr	r3, [pc, #8]	; (1a538 <os_msys_reset+0xc>)
   1a52e:	2200      	movs	r2, #0
   1a530:	601a      	str	r2, [r3, #0]
   1a532:	605b      	str	r3, [r3, #4]
}
   1a534:	4770      	bx	lr
   1a536:	bf00      	nop
   1a538:	2000010c 	.word	0x2000010c

0001a53c <os_msys_get_pkthdr>:
{
   1a53c:	b510      	push	{r4, lr}
   1a53e:	460c      	mov	r4, r1
    if (dsize == 0) {
   1a540:	b930      	cbnz	r0, 1a550 <os_msys_get_pkthdr+0x14>
        pool = os_msys_find_biggest_pool();
   1a542:	f7ff ff8d 	bl	1a460 <os_msys_find_biggest_pool>
    if (!pool) {
   1a546:	b158      	cbz	r0, 1a560 <os_msys_get_pkthdr+0x24>
    m = os_mbuf_get_pkthdr(pool, user_hdr_len);
   1a548:	b2e1      	uxtb	r1, r4
   1a54a:	f7ff fe0e 	bl	1a16a <os_mbuf_get_pkthdr>
}
   1a54e:	bd10      	pop	{r4, pc}
   1a550:	f101 0308 	add.w	r3, r1, #8
   1a554:	b29b      	uxth	r3, r3
        pool = os_msys_find_pool(dsize + total_pkthdr_len);
   1a556:	4403      	add	r3, r0
   1a558:	b298      	uxth	r0, r3
   1a55a:	f7ff ff89 	bl	1a470 <os_msys_find_pool>
   1a55e:	e7f2      	b.n	1a546 <os_msys_get_pkthdr+0xa>
    return (NULL);
   1a560:	2000      	movs	r0, #0
   1a562:	e7f4      	b.n	1a54e <os_msys_get_pkthdr+0x12>

0001a564 <os_msys_init>:

void
os_msys_init(void)
{
   1a564:	b500      	push	{lr}
   1a566:	b083      	sub	sp, #12
    int rc;

    os_msys_reset();
   1a568:	f7ff ffe0 	bl	1a52c <os_msys_reset>

    (void)os_msys_init_once;
    (void)rc;

#if MYNEWT_VAL(MSYS_1_BLOCK_COUNT) > 0
    os_msys_init_once(os_msys_1_data,
   1a56c:	4b06      	ldr	r3, [pc, #24]	; (1a588 <os_msys_init+0x24>)
   1a56e:	9301      	str	r3, [sp, #4]
   1a570:	f44f 7392 	mov.w	r3, #292	; 0x124
   1a574:	9300      	str	r3, [sp, #0]
   1a576:	2340      	movs	r3, #64	; 0x40
   1a578:	4a04      	ldr	r2, [pc, #16]	; (1a58c <os_msys_init+0x28>)
   1a57a:	4905      	ldr	r1, [pc, #20]	; (1a590 <os_msys_init+0x2c>)
   1a57c:	4805      	ldr	r0, [pc, #20]	; (1a594 <os_msys_init+0x30>)
   1a57e:	f7ff ffb3 	bl	1a4e8 <os_msys_init_once>
    os_msys_sc.sc_checkin_itvl =
        OS_TICKS_PER_SEC * MYNEWT_VAL(MSYS_SANITY_TIMEOUT) / 1000;
    rc = os_sanity_check_register(&os_msys_sc);
    SYSINIT_PANIC_ASSERT(rc == 0);
#endif
}
   1a582:	b003      	add	sp, #12
   1a584:	f85d fb04 	ldr.w	pc, [sp], #4
   1a588:	00021134 	.word	0x00021134
   1a58c:	2000d188 	.word	0x2000d188
   1a590:	2000d194 	.word	0x2000d194
   1a594:	20008888 	.word	0x20008888

0001a598 <os_mutex_init>:
os_error_t
os_mutex_init(struct os_mutex *mu)
{
    os_error_t ret;

    if (!mu) {
   1a598:	4603      	mov	r3, r0
   1a59a:	b128      	cbz	r0, 1a5a8 <os_mutex_init+0x10>
    }

    os_trace_api_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)mu);

    /* Initialize to 0 */
    mu->mu_prio = 0;
   1a59c:	2000      	movs	r0, #0
   1a59e:	7158      	strb	r0, [r3, #5]
    mu->mu_level = 0;
   1a5a0:	80d8      	strh	r0, [r3, #6]
    mu->mu_owner = NULL;
   1a5a2:	6098      	str	r0, [r3, #8]
    SLIST_FIRST(&mu->mu_head) = NULL;
   1a5a4:	6018      	str	r0, [r3, #0]
   1a5a6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a5a8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_INIT, (uint32_t)ret);
    return ret;
}
   1a5aa:	4770      	bx	lr

0001a5ac <os_mutex_release>:

os_error_t
os_mutex_release(struct os_mutex *mu)
{
   1a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)mu);

    /* Check if OS is started */
    if (!g_os_started) {
   1a5ae:	4b2c      	ldr	r3, [pc, #176]	; (1a660 <os_mutex_release+0xb4>)
   1a5b0:	681b      	ldr	r3, [r3, #0]
   1a5b2:	2b00      	cmp	r3, #0
   1a5b4:	d04d      	beq.n	1a652 <os_mutex_release+0xa6>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a5b6:	2800      	cmp	r0, #0
   1a5b8:	d04d      	beq.n	1a656 <os_mutex_release+0xaa>
   1a5ba:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    /* We better own this mutex! */
    current = os_sched_get_current_task();
   1a5bc:	f000 f97a 	bl	1a8b4 <os_sched_get_current_task>
   1a5c0:	4605      	mov	r5, r0
    if ((mu->mu_level == 0) || (mu->mu_owner != current)) {
   1a5c2:	88e3      	ldrh	r3, [r4, #6]
   1a5c4:	2b00      	cmp	r3, #0
   1a5c6:	d048      	beq.n	1a65a <os_mutex_release+0xae>
   1a5c8:	68a2      	ldr	r2, [r4, #8]
   1a5ca:	4282      	cmp	r2, r0
   1a5cc:	d001      	beq.n	1a5d2 <os_mutex_release+0x26>
        ret = OS_BAD_MUTEX;
   1a5ce:	2005      	movs	r0, #5
   1a5d0:	e040      	b.n	1a654 <os_mutex_release+0xa8>
        goto done;
    }

    /* Don't release if nested, just decrement nesting level */
    if (mu->mu_level != 1) {
   1a5d2:	2b01      	cmp	r3, #1
   1a5d4:	d003      	beq.n	1a5de <os_mutex_release+0x32>
        --mu->mu_level;
   1a5d6:	3b01      	subs	r3, #1
   1a5d8:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1a5da:	2000      	movs	r0, #0
        goto done;
   1a5dc:	e03a      	b.n	1a654 <os_mutex_release+0xa8>
    }

    OS_ENTER_CRITICAL(sr);
   1a5de:	f000 fc3f 	bl	1ae60 <os_arch_save_sr>
   1a5e2:	4607      	mov	r7, r0

    /* Decrement nesting level (this effectively sets nesting level to 0) */
    --mu->mu_level;
   1a5e4:	88e3      	ldrh	r3, [r4, #6]
   1a5e6:	3b01      	subs	r3, #1
   1a5e8:	80e3      	strh	r3, [r4, #6]

    /* Restore owner task's priority; resort list if different  */
    if (current->t_prio != mu->mu_prio) {
   1a5ea:	7aea      	ldrb	r2, [r5, #11]
   1a5ec:	7963      	ldrb	r3, [r4, #5]
   1a5ee:	429a      	cmp	r2, r3
   1a5f0:	d11e      	bne.n	1a630 <os_mutex_release+0x84>
        current->t_prio = mu->mu_prio;
        os_sched_resort(current);
    }

    /* Check if tasks are waiting for the mutex */
    rdy = SLIST_FIRST(&mu->mu_head);
   1a5f2:	6826      	ldr	r6, [r4, #0]
    if (rdy) {
   1a5f4:	b146      	cbz	r6, 1a608 <os_mutex_release+0x5c>
        /* There is one waiting. Wake it up */
        assert(rdy->t_obj);
   1a5f6:	69f3      	ldr	r3, [r6, #28]
   1a5f8:	b1fb      	cbz	r3, 1a63a <os_mutex_release+0x8e>
        os_sched_wakeup(rdy);
   1a5fa:	4630      	mov	r0, r6
   1a5fc:	f000 f9ae 	bl	1a95c <os_sched_wakeup>

        /* Set mutex internals */
        mu->mu_level = 1;
   1a600:	2301      	movs	r3, #1
   1a602:	80e3      	strh	r3, [r4, #6]
        mu->mu_prio = rdy->t_prio;
   1a604:	7af3      	ldrb	r3, [r6, #11]
   1a606:	7163      	strb	r3, [r4, #5]
    }

    /* Set new owner of mutex (or NULL if not owned) */
    mu->mu_owner = rdy;
   1a608:	60a6      	str	r6, [r4, #8]
    if (rdy) {
   1a60a:	b116      	cbz	r6, 1a612 <os_mutex_release+0x66>
        rdy->t_lockcnt++;
   1a60c:	7bb3      	ldrb	r3, [r6, #14]
   1a60e:	3301      	adds	r3, #1
   1a610:	73b3      	strb	r3, [r6, #14]
    }
    --current->t_lockcnt;
   1a612:	7bab      	ldrb	r3, [r5, #14]
   1a614:	3b01      	subs	r3, #1
   1a616:	73ab      	strb	r3, [r5, #14]

    /* Do we need to re-schedule? */
    resched = 0;
    rdy = os_sched_next_task();
   1a618:	f000 fa1a 	bl	1aa50 <os_sched_next_task>
   1a61c:	4604      	mov	r4, r0
    if (rdy != current) {
   1a61e:	4285      	cmp	r5, r0
   1a620:	d010      	beq.n	1a644 <os_mutex_release+0x98>
        resched = 1;
   1a622:	2501      	movs	r5, #1
    }
    OS_EXIT_CRITICAL(sr);
   1a624:	4638      	mov	r0, r7
   1a626:	f000 fc21 	bl	1ae6c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1a62a:	b96d      	cbnz	r5, 1a648 <os_mutex_release+0x9c>
        os_sched(rdy);
    }

    ret = OS_OK;
   1a62c:	2000      	movs	r0, #0
   1a62e:	e011      	b.n	1a654 <os_mutex_release+0xa8>
        current->t_prio = mu->mu_prio;
   1a630:	72eb      	strb	r3, [r5, #11]
        os_sched_resort(current);
   1a632:	4628      	mov	r0, r5
   1a634:	f000 fa24 	bl	1aa80 <os_sched_resort>
   1a638:	e7db      	b.n	1a5f2 <os_mutex_release+0x46>
        assert(rdy->t_obj);
   1a63a:	461a      	mov	r2, r3
   1a63c:	4619      	mov	r1, r3
   1a63e:	4618      	mov	r0, r3
   1a640:	f7ff f978 	bl	19934 <__assert_func>
    resched = 0;
   1a644:	2500      	movs	r5, #0
   1a646:	e7ed      	b.n	1a624 <os_mutex_release+0x78>
        os_sched(rdy);
   1a648:	4620      	mov	r0, r4
   1a64a:	f000 fa07 	bl	1aa5c <os_sched>
    ret = OS_OK;
   1a64e:	2000      	movs	r0, #0
   1a650:	e000      	b.n	1a654 <os_mutex_release+0xa8>
        ret = OS_NOT_STARTED;
   1a652:	2009      	movs	r0, #9

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_RELEASE, (uint32_t)ret);
    return ret;
}
   1a654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        ret = OS_INVALID_PARM;
   1a656:	2003      	movs	r0, #3
   1a658:	e7fc      	b.n	1a654 <os_mutex_release+0xa8>
        ret = OS_BAD_MUTEX;
   1a65a:	2005      	movs	r0, #5
   1a65c:	e7fa      	b.n	1a654 <os_mutex_release+0xa8>
   1a65e:	bf00      	nop
   1a660:	2000d688 	.word	0x2000d688

0001a664 <os_mutex_pend>:
    struct os_task *last;

    os_trace_api_u32x2(OS_TRACE_ID_MUTEX_PEND, (uint32_t)mu, (uint32_t)timeout);

    /* OS must be started when calling this function */
    if (!g_os_started) {
   1a664:	4b36      	ldr	r3, [pc, #216]	; (1a740 <os_mutex_pend+0xdc>)
   1a666:	681b      	ldr	r3, [r3, #0]
   1a668:	2b00      	cmp	r3, #0
   1a66a:	d065      	beq.n	1a738 <os_mutex_pend+0xd4>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid mutex */
    if (!mu) {
   1a66c:	2800      	cmp	r0, #0
   1a66e:	d065      	beq.n	1a73c <os_mutex_pend+0xd8>
{
   1a670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a674:	460f      	mov	r7, r1
   1a676:	4604      	mov	r4, r0
        ret = OS_INVALID_PARM;
        goto done;
    }

    OS_ENTER_CRITICAL(sr);
   1a678:	f000 fbf2 	bl	1ae60 <os_arch_save_sr>
   1a67c:	4680      	mov	r8, r0

    /* Is this owned? */
    current = os_sched_get_current_task();
   1a67e:	f000 f919 	bl	1a8b4 <os_sched_get_current_task>
   1a682:	4605      	mov	r5, r0
    if (mu->mu_level == 0) {
   1a684:	88e3      	ldrh	r3, [r4, #6]
   1a686:	b19b      	cbz	r3, 1a6b0 <os_mutex_pend+0x4c>
        ret = OS_OK;
        goto done;
    }

    /* Are we owner? */
    if (mu->mu_owner == current) {
   1a688:	68a2      	ldr	r2, [r4, #8]
   1a68a:	4282      	cmp	r2, r0
   1a68c:	d01e      	beq.n	1a6cc <os_mutex_pend+0x68>
        ret = OS_OK;
        goto done;
    }

    /* Mutex is not owned by us. If timeout is 0, return immediately */
    if (timeout == 0) {
   1a68e:	b327      	cbz	r7, 1a6da <os_mutex_pend+0x76>
        ret = OS_TIMEOUT;
        goto done;
    }

    /* Change priority of owner if needed */
    if (mu->mu_owner->t_prio > current->t_prio) {
   1a690:	7ad1      	ldrb	r1, [r2, #11]
   1a692:	7ac3      	ldrb	r3, [r0, #11]
   1a694:	4299      	cmp	r1, r3
   1a696:	d825      	bhi.n	1a6e4 <os_mutex_pend+0x80>
        os_sched_resort(mu->mu_owner);
    }

    /* Link current task to tasks waiting for mutex */
    last = NULL;
    if (!SLIST_EMPTY(&mu->mu_head)) {
   1a698:	6821      	ldr	r1, [r4, #0]
   1a69a:	b369      	cbz	r1, 1a6f8 <os_mutex_pend+0x94>
        /* Insert in priority order */
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a69c:	460b      	mov	r3, r1
    last = NULL;
   1a69e:	2600      	movs	r6, #0
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a6a0:	b32b      	cbz	r3, 1a6ee <os_mutex_pend+0x8a>
            if (current->t_prio < entry->t_prio) {
   1a6a2:	7ae8      	ldrb	r0, [r5, #11]
   1a6a4:	7ada      	ldrb	r2, [r3, #11]
   1a6a6:	4290      	cmp	r0, r2
   1a6a8:	d321      	bcc.n	1a6ee <os_mutex_pend+0x8a>
                break;
            }
            last = entry;
   1a6aa:	461e      	mov	r6, r3
        SLIST_FOREACH(entry, &mu->mu_head, t_obj_list) {
   1a6ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a6ae:	e7f7      	b.n	1a6a0 <os_mutex_pend+0x3c>
        mu->mu_owner = current;
   1a6b0:	60a0      	str	r0, [r4, #8]
        mu->mu_prio  = current->t_prio;
   1a6b2:	7ac3      	ldrb	r3, [r0, #11]
   1a6b4:	7163      	strb	r3, [r4, #5]
        current->t_lockcnt++;
   1a6b6:	7b83      	ldrb	r3, [r0, #14]
   1a6b8:	3301      	adds	r3, #1
   1a6ba:	7383      	strb	r3, [r0, #14]
        mu->mu_level = 1;
   1a6bc:	2301      	movs	r3, #1
   1a6be:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a6c0:	4640      	mov	r0, r8
   1a6c2:	f000 fbd3 	bl	1ae6c <os_arch_restore_sr>
        ret = OS_OK;
   1a6c6:	2000      	movs	r0, #0
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_MUTEX_PEND, (uint32_t)ret);
    return ret;
}
   1a6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ++mu->mu_level;
   1a6cc:	3301      	adds	r3, #1
   1a6ce:	80e3      	strh	r3, [r4, #6]
        OS_EXIT_CRITICAL(sr);
   1a6d0:	4640      	mov	r0, r8
   1a6d2:	f000 fbcb 	bl	1ae6c <os_arch_restore_sr>
        ret = OS_OK;
   1a6d6:	2000      	movs	r0, #0
        goto done;
   1a6d8:	e7f6      	b.n	1a6c8 <os_mutex_pend+0x64>
        OS_EXIT_CRITICAL(sr);
   1a6da:	4640      	mov	r0, r8
   1a6dc:	f000 fbc6 	bl	1ae6c <os_arch_restore_sr>
        ret = OS_TIMEOUT;
   1a6e0:	2006      	movs	r0, #6
        goto done;
   1a6e2:	e7f1      	b.n	1a6c8 <os_mutex_pend+0x64>
        mu->mu_owner->t_prio = current->t_prio;
   1a6e4:	72d3      	strb	r3, [r2, #11]
        os_sched_resort(mu->mu_owner);
   1a6e6:	68a0      	ldr	r0, [r4, #8]
   1a6e8:	f000 f9ca 	bl	1aa80 <os_sched_resort>
   1a6ec:	e7d4      	b.n	1a698 <os_mutex_pend+0x34>
    if (last) {
   1a6ee:	b11e      	cbz	r6, 1a6f8 <os_mutex_pend+0x94>
        SLIST_INSERT_AFTER(last, current, t_obj_list);
   1a6f0:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
   1a6f2:	64eb      	str	r3, [r5, #76]	; 0x4c
   1a6f4:	64f5      	str	r5, [r6, #76]	; 0x4c
   1a6f6:	e001      	b.n	1a6fc <os_mutex_pend+0x98>
        SLIST_INSERT_HEAD(&mu->mu_head, current, t_obj_list);
   1a6f8:	64e9      	str	r1, [r5, #76]	; 0x4c
   1a6fa:	6025      	str	r5, [r4, #0]
    current->t_obj = mu;
   1a6fc:	61ec      	str	r4, [r5, #28]
    current->t_flags |= OS_TASK_FLAG_MUTEX_WAIT;
   1a6fe:	7b6b      	ldrb	r3, [r5, #13]
   1a700:	f043 0304 	orr.w	r3, r3, #4
   1a704:	736b      	strb	r3, [r5, #13]
    os_sched_sleep(current, timeout);
   1a706:	4639      	mov	r1, r7
   1a708:	4628      	mov	r0, r5
   1a70a:	f000 f8df 	bl	1a8cc <os_sched_sleep>
    OS_EXIT_CRITICAL(sr);
   1a70e:	4640      	mov	r0, r8
   1a710:	f000 fbac 	bl	1ae6c <os_arch_restore_sr>
    os_sched(NULL);
   1a714:	2000      	movs	r0, #0
   1a716:	f000 f9a1 	bl	1aa5c <os_sched>
    OS_ENTER_CRITICAL(sr);
   1a71a:	f000 fba1 	bl	1ae60 <os_arch_save_sr>
    current->t_flags &= ~OS_TASK_FLAG_MUTEX_WAIT;
   1a71e:	7b6b      	ldrb	r3, [r5, #13]
   1a720:	f023 0304 	bic.w	r3, r3, #4
   1a724:	736b      	strb	r3, [r5, #13]
    OS_EXIT_CRITICAL(sr);
   1a726:	f000 fba1 	bl	1ae6c <os_arch_restore_sr>
    if (mu->mu_owner == current) {
   1a72a:	68a3      	ldr	r3, [r4, #8]
   1a72c:	42ab      	cmp	r3, r5
   1a72e:	d001      	beq.n	1a734 <os_mutex_pend+0xd0>
        ret = OS_TIMEOUT;
   1a730:	2006      	movs	r0, #6
   1a732:	e7c9      	b.n	1a6c8 <os_mutex_pend+0x64>
        ret = OS_OK;
   1a734:	2000      	movs	r0, #0
   1a736:	e7c7      	b.n	1a6c8 <os_mutex_pend+0x64>
        ret = OS_NOT_STARTED;
   1a738:	2009      	movs	r0, #9
   1a73a:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1a73c:	2003      	movs	r0, #3
}
   1a73e:	4770      	bx	lr
   1a740:	2000d688 	.word	0x2000d688

0001a744 <os_sanity_check_list_lock>:
 *
 * @return 0 on success, error code on failure.
 */
static int
os_sanity_check_list_lock(void)
{
   1a744:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a746:	4b05      	ldr	r3, [pc, #20]	; (1a75c <os_sanity_check_list_lock+0x18>)
   1a748:	6818      	ldr	r0, [r3, #0]
   1a74a:	b900      	cbnz	r0, 1a74e <os_sanity_check_list_lock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a74c:	bd08      	pop	{r3, pc}
    rc = os_mutex_pend(&g_os_sanity_check_mu, OS_WAIT_FOREVER);
   1a74e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a752:	4803      	ldr	r0, [pc, #12]	; (1a760 <os_sanity_check_list_lock+0x1c>)
   1a754:	f7ff ff86 	bl	1a664 <os_mutex_pend>
err:
   1a758:	e7f8      	b.n	1a74c <os_sanity_check_list_lock+0x8>
   1a75a:	bf00      	nop
   1a75c:	2000d688 	.word	0x2000d688
   1a760:	2000d6a0 	.word	0x2000d6a0

0001a764 <os_sanity_check_list_unlock>:
 *
 * @return 0 on success, error code on failure
 */
static int
os_sanity_check_list_unlock(void)
{
   1a764:	b508      	push	{r3, lr}
    int rc;

    if (!g_os_started) {
   1a766:	4b04      	ldr	r3, [pc, #16]	; (1a778 <os_sanity_check_list_unlock+0x14>)
   1a768:	6818      	ldr	r0, [r3, #0]
   1a76a:	b900      	cbnz	r0, 1a76e <os_sanity_check_list_unlock+0xa>
    }

    return (0);
err:
    return (rc);
}
   1a76c:	bd08      	pop	{r3, pc}
    rc = os_mutex_release(&g_os_sanity_check_mu);
   1a76e:	4803      	ldr	r0, [pc, #12]	; (1a77c <os_sanity_check_list_unlock+0x18>)
   1a770:	f7ff ff1c 	bl	1a5ac <os_mutex_release>
err:
   1a774:	e7fa      	b.n	1a76c <os_sanity_check_list_unlock+0x8>
   1a776:	bf00      	nop
   1a778:	2000d688 	.word	0x2000d688
   1a77c:	2000d6a0 	.word	0x2000d6a0

0001a780 <os_sanity_check_init>:
    memset(sc, 0, sizeof(*sc));
   1a780:	2300      	movs	r3, #0
   1a782:	6003      	str	r3, [r0, #0]
   1a784:	6043      	str	r3, [r0, #4]
   1a786:	6083      	str	r3, [r0, #8]
   1a788:	60c3      	str	r3, [r0, #12]
   1a78a:	6103      	str	r3, [r0, #16]
}
   1a78c:	4618      	mov	r0, r3
   1a78e:	4770      	bx	lr

0001a790 <os_sanity_check_register>:
}


int
os_sanity_check_register(struct os_sanity_check *sc)
{
   1a790:	b510      	push	{r4, lr}
   1a792:	4604      	mov	r4, r0
    int rc;

    rc = os_sanity_check_list_lock();
   1a794:	f7ff ffd6 	bl	1a744 <os_sanity_check_list_lock>
    if (rc != OS_OK) {
   1a798:	4603      	mov	r3, r0
   1a79a:	b108      	cbz	r0, 1a7a0 <os_sanity_check_register+0x10>
    }

    return (0);
err:
    return (rc);
}
   1a79c:	4618      	mov	r0, r3
   1a79e:	bd10      	pop	{r4, pc}
    SLIST_INSERT_HEAD(&g_os_sanity_check_list, sc, sc_next);
   1a7a0:	4b03      	ldr	r3, [pc, #12]	; (1a7b0 <os_sanity_check_register+0x20>)
   1a7a2:	681a      	ldr	r2, [r3, #0]
   1a7a4:	6122      	str	r2, [r4, #16]
   1a7a6:	601c      	str	r4, [r3, #0]
    rc = os_sanity_check_list_unlock();
   1a7a8:	f7ff ffdc 	bl	1a764 <os_sanity_check_list_unlock>
   1a7ac:	4603      	mov	r3, r0
err:
   1a7ae:	e7f5      	b.n	1a79c <os_sanity_check_register+0xc>
   1a7b0:	2000d1b0 	.word	0x2000d1b0

0001a7b4 <os_sanity_run>:
 * Goes through the sanity check list, and performs sanity checks.  If any of
 * these checks failed, or tasks have not checked in, it resets the processor.
 */
void
os_sanity_run(void)
{
   1a7b4:	b510      	push	{r4, lr}
    struct os_sanity_check *sc;
    int rc;

    rc = os_sanity_check_list_lock();
   1a7b6:	f7ff ffc5 	bl	1a744 <os_sanity_check_list_lock>
    if (rc != 0) {
   1a7ba:	b910      	cbnz	r0, 1a7c2 <os_sanity_run+0xe>
        assert(0);
    }

    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a7bc:	4b17      	ldr	r3, [pc, #92]	; (1a81c <os_sanity_run+0x68>)
   1a7be:	681c      	ldr	r4, [r3, #0]
   1a7c0:	e00e      	b.n	1a7e0 <os_sanity_run+0x2c>
        assert(0);
   1a7c2:	2300      	movs	r3, #0
   1a7c4:	461a      	mov	r2, r3
   1a7c6:	4619      	mov	r1, r3
   1a7c8:	4618      	mov	r0, r3
   1a7ca:	f7ff f8b3 	bl	19934 <__assert_func>
                sc->sc_checkin_last = os_time_get();
                continue;
            }
        }

        if (OS_TIME_TICK_GT(os_time_get(),
   1a7ce:	f000 facf 	bl	1ad70 <os_time_get>
   1a7d2:	6823      	ldr	r3, [r4, #0]
   1a7d4:	6862      	ldr	r2, [r4, #4]
   1a7d6:	4413      	add	r3, r2
   1a7d8:	1ac3      	subs	r3, r0, r3
   1a7da:	2b00      	cmp	r3, #0
   1a7dc:	dc0d      	bgt.n	1a7fa <os_sanity_run+0x46>
    SLIST_FOREACH(sc, &g_os_sanity_check_list, sc_next) {
   1a7de:	6924      	ldr	r4, [r4, #16]
   1a7e0:	b18c      	cbz	r4, 1a806 <os_sanity_run+0x52>
        if (sc->sc_func) {
   1a7e2:	68a3      	ldr	r3, [r4, #8]
   1a7e4:	2b00      	cmp	r3, #0
   1a7e6:	d0f2      	beq.n	1a7ce <os_sanity_run+0x1a>
            rc = sc->sc_func(sc, sc->sc_arg);
   1a7e8:	68e1      	ldr	r1, [r4, #12]
   1a7ea:	4620      	mov	r0, r4
   1a7ec:	4798      	blx	r3
            if (rc == OS_OK) {
   1a7ee:	2800      	cmp	r0, #0
   1a7f0:	d1ed      	bne.n	1a7ce <os_sanity_run+0x1a>
                sc->sc_checkin_last = os_time_get();
   1a7f2:	f000 fabd 	bl	1ad70 <os_time_get>
   1a7f6:	6020      	str	r0, [r4, #0]
                continue;
   1a7f8:	e7f1      	b.n	1a7de <os_sanity_run+0x2a>
                    sc->sc_checkin_last + sc->sc_checkin_itvl)) {
            assert(0);
   1a7fa:	2300      	movs	r3, #0
   1a7fc:	461a      	mov	r2, r3
   1a7fe:	4619      	mov	r1, r3
   1a800:	4618      	mov	r0, r3
   1a802:	f7ff f897 	bl	19934 <__assert_func>
        }
    }

    rc = os_sanity_check_list_unlock();
   1a806:	f7ff ffad 	bl	1a764 <os_sanity_check_list_unlock>
    if (rc != 0) {
   1a80a:	b900      	cbnz	r0, 1a80e <os_sanity_run+0x5a>
        assert(0);
    }
}
   1a80c:	bd10      	pop	{r4, pc}
        assert(0);
   1a80e:	2300      	movs	r3, #0
   1a810:	461a      	mov	r2, r3
   1a812:	4619      	mov	r1, r3
   1a814:	4618      	mov	r0, r3
   1a816:	f7ff f88d 	bl	19934 <__assert_func>
   1a81a:	bf00      	nop
   1a81c:	2000d1b0 	.word	0x2000d1b0

0001a820 <os_sanity_init>:

int
os_sanity_init(void)
{
   1a820:	b508      	push	{r3, lr}
    int rc;

    rc = os_mutex_init(&g_os_sanity_check_mu);
   1a822:	4802      	ldr	r0, [pc, #8]	; (1a82c <os_sanity_init+0xc>)
   1a824:	f7ff feb8 	bl	1a598 <os_mutex_init>
    }

    return (0);
err:
    return (rc);
}
   1a828:	bd08      	pop	{r3, pc}
   1a82a:	bf00      	nop
   1a82c:	2000d6a0 	.word	0x2000d6a0

0001a830 <os_sched_insert>:
{
    struct os_task *entry;
    os_sr_t sr;
    os_error_t rc;

    if (t->t_state != OS_TASK_READY) {
   1a830:	7b03      	ldrb	r3, [r0, #12]
   1a832:	2b01      	cmp	r3, #1
   1a834:	d001      	beq.n	1a83a <os_sched_insert+0xa>
    }
    OS_EXIT_CRITICAL(sr);

    return (0);
err:
    return (rc);
   1a836:	2002      	movs	r0, #2
}
   1a838:	4770      	bx	lr
{
   1a83a:	b510      	push	{r4, lr}
   1a83c:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1a83e:	f000 fb0f 	bl	1ae60 <os_arch_save_sr>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a842:	4b0f      	ldr	r3, [pc, #60]	; (1a880 <os_sched_insert+0x50>)
   1a844:	681b      	ldr	r3, [r3, #0]
   1a846:	b12b      	cbz	r3, 1a854 <os_sched_insert+0x24>
        if (t->t_prio < entry->t_prio) {
   1a848:	7ae1      	ldrb	r1, [r4, #11]
   1a84a:	7ada      	ldrb	r2, [r3, #11]
   1a84c:	4291      	cmp	r1, r2
   1a84e:	d301      	bcc.n	1a854 <os_sched_insert+0x24>
    TAILQ_FOREACH(entry, &g_os_run_list, t_os_list) {
   1a850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a852:	e7f8      	b.n	1a846 <os_sched_insert+0x16>
    if (entry) {
   1a854:	b153      	cbz	r3, 1a86c <os_sched_insert+0x3c>
        TAILQ_INSERT_BEFORE(entry, (struct os_task *) t, t_os_list);
   1a856:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a858:	64a2      	str	r2, [r4, #72]	; 0x48
   1a85a:	6463      	str	r3, [r4, #68]	; 0x44
   1a85c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a85e:	6014      	str	r4, [r2, #0]
   1a860:	3444      	adds	r4, #68	; 0x44
   1a862:	649c      	str	r4, [r3, #72]	; 0x48
    OS_EXIT_CRITICAL(sr);
   1a864:	f000 fb02 	bl	1ae6c <os_arch_restore_sr>
    return (0);
   1a868:	2000      	movs	r0, #0
}
   1a86a:	bd10      	pop	{r4, pc}
        TAILQ_INSERT_TAIL(&g_os_run_list, (struct os_task *) t, t_os_list);
   1a86c:	2300      	movs	r3, #0
   1a86e:	6463      	str	r3, [r4, #68]	; 0x44
   1a870:	4b03      	ldr	r3, [pc, #12]	; (1a880 <os_sched_insert+0x50>)
   1a872:	685a      	ldr	r2, [r3, #4]
   1a874:	64a2      	str	r2, [r4, #72]	; 0x48
   1a876:	6014      	str	r4, [r2, #0]
   1a878:	3444      	adds	r4, #68	; 0x44
   1a87a:	605c      	str	r4, [r3, #4]
   1a87c:	e7f2      	b.n	1a864 <os_sched_insert+0x34>
   1a87e:	bf00      	nop
   1a880:	20000114 	.word	0x20000114

0001a884 <os_sched_ctx_sw_hook>:

void
os_sched_ctx_sw_hook(struct os_task *next_t)
{
   1a884:	b410      	push	{r4}
    top = g_current_task->t_stacktop - g_current_task->t_stacksize;
    for (i = 0; i < MYNEWT_VAL(OS_CTX_SW_STACK_GUARD); i++) {
        assert(top[i] == OS_STACK_PATTERN);
    }
#endif
    next_t->t_ctx_sw_cnt++;
   1a886:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1a888:	3301      	adds	r3, #1
   1a88a:	63c3      	str	r3, [r0, #60]	; 0x3c
    g_current_task->t_run_time += g_os_time - g_os_last_ctx_sw_time;
   1a88c:	4b06      	ldr	r3, [pc, #24]	; (1a8a8 <os_sched_ctx_sw_hook+0x24>)
   1a88e:	681c      	ldr	r4, [r3, #0]
   1a890:	4b06      	ldr	r3, [pc, #24]	; (1a8ac <os_sched_ctx_sw_hook+0x28>)
   1a892:	6818      	ldr	r0, [r3, #0]
   1a894:	4906      	ldr	r1, [pc, #24]	; (1a8b0 <os_sched_ctx_sw_hook+0x2c>)
   1a896:	680b      	ldr	r3, [r1, #0]
   1a898:	1ac2      	subs	r2, r0, r3
   1a89a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1a89c:	4413      	add	r3, r2
   1a89e:	63a3      	str	r3, [r4, #56]	; 0x38
    g_os_last_ctx_sw_time = g_os_time;
   1a8a0:	6008      	str	r0, [r1, #0]
}
   1a8a2:	f85d 4b04 	ldr.w	r4, [sp], #4
   1a8a6:	4770      	bx	lr
   1a8a8:	2000d6b0 	.word	0x2000d6b0
   1a8ac:	2000d6c0 	.word	0x2000d6c0
   1a8b0:	2000d6ac 	.word	0x2000d6ac

0001a8b4 <os_sched_get_current_task>:

struct os_task *
os_sched_get_current_task(void)
{
    return (g_current_task);
}
   1a8b4:	4b01      	ldr	r3, [pc, #4]	; (1a8bc <os_sched_get_current_task+0x8>)
   1a8b6:	6818      	ldr	r0, [r3, #0]
   1a8b8:	4770      	bx	lr
   1a8ba:	bf00      	nop
   1a8bc:	2000d6b0 	.word	0x2000d6b0

0001a8c0 <os_sched_set_current_task>:
 * @param t Pointer to currently running task.
 */
void
os_sched_set_current_task(struct os_task *t)
{
    g_current_task = t;
   1a8c0:	4b01      	ldr	r3, [pc, #4]	; (1a8c8 <os_sched_set_current_task+0x8>)
   1a8c2:	6018      	str	r0, [r3, #0]
}
   1a8c4:	4770      	bx	lr
   1a8c6:	bf00      	nop
   1a8c8:	2000d6b0 	.word	0x2000d6b0

0001a8cc <os_sched_sleep>:
 * NOTE: must be called with interrupts disabled! This function does not call
 * the scheduler
 */
int
os_sched_sleep(struct os_task *t, os_time_t nticks)
{
   1a8cc:	b538      	push	{r3, r4, r5, lr}
   1a8ce:	4604      	mov	r4, r0
   1a8d0:	460d      	mov	r5, r1
    struct os_task *entry;

    entry = NULL;

    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a8d2:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a8d4:	b1d3      	cbz	r3, 1a90c <os_sched_sleep+0x40>
   1a8d6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a8d8:	649a      	str	r2, [r3, #72]	; 0x48
   1a8da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a8dc:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1a8de:	601a      	str	r2, [r3, #0]
    t->t_state = OS_TASK_SLEEP;
   1a8e0:	2302      	movs	r3, #2
   1a8e2:	7323      	strb	r3, [r4, #12]
    t->t_next_wakeup = os_time_get() + nticks;
   1a8e4:	f000 fa44 	bl	1ad70 <os_time_get>
   1a8e8:	4428      	add	r0, r5
   1a8ea:	6360      	str	r0, [r4, #52]	; 0x34
    if (nticks == OS_TIMEOUT_NEVER) {
   1a8ec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   1a8f0:	d010      	beq.n	1a914 <os_sched_sleep+0x48>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
    } else {
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a8f2:	4b18      	ldr	r3, [pc, #96]	; (1a954 <os_sched_sleep+0x88>)
   1a8f4:	681b      	ldr	r3, [r3, #0]
   1a8f6:	b1d3      	cbz	r3, 1a92e <os_sched_sleep+0x62>
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a8f8:	7b5a      	ldrb	r2, [r3, #13]
   1a8fa:	f012 0f01 	tst.w	r2, #1
   1a8fe:	d116      	bne.n	1a92e <os_sched_sleep+0x62>
                    OS_TIME_TICK_GT(entry->t_next_wakeup, t->t_next_wakeup)) {
   1a900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   1a902:	1a12      	subs	r2, r2, r0
            if ((entry->t_flags & OS_TASK_FLAG_NO_TIMEOUT) ||
   1a904:	2a00      	cmp	r2, #0
   1a906:	dc12      	bgt.n	1a92e <os_sched_sleep+0x62>
        TAILQ_FOREACH(entry, &g_os_sleep_list, t_os_list) {
   1a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   1a90a:	e7f4      	b.n	1a8f6 <os_sched_sleep+0x2a>
    TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1a90c:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a90e:	4b12      	ldr	r3, [pc, #72]	; (1a958 <os_sched_sleep+0x8c>)
   1a910:	605a      	str	r2, [r3, #4]
   1a912:	e7e2      	b.n	1a8da <os_sched_sleep+0xe>
        t->t_flags |= OS_TASK_FLAG_NO_TIMEOUT;
   1a914:	7b63      	ldrb	r3, [r4, #13]
   1a916:	f043 0301 	orr.w	r3, r3, #1
   1a91a:	7363      	strb	r3, [r4, #13]
        TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a91c:	2300      	movs	r3, #0
   1a91e:	6463      	str	r3, [r4, #68]	; 0x44
   1a920:	4b0c      	ldr	r3, [pc, #48]	; (1a954 <os_sched_sleep+0x88>)
   1a922:	685a      	ldr	r2, [r3, #4]
   1a924:	64a2      	str	r2, [r4, #72]	; 0x48
   1a926:	6014      	str	r4, [r2, #0]
   1a928:	3444      	adds	r4, #68	; 0x44
   1a92a:	605c      	str	r4, [r3, #4]
   1a92c:	e007      	b.n	1a93e <os_sched_sleep+0x72>
                break;
            }
        }
        if (entry) {
   1a92e:	b143      	cbz	r3, 1a942 <os_sched_sleep+0x76>
            TAILQ_INSERT_BEFORE(entry, t, t_os_list);
   1a930:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a932:	64a2      	str	r2, [r4, #72]	; 0x48
   1a934:	6463      	str	r3, [r4, #68]	; 0x44
   1a936:	6c9a      	ldr	r2, [r3, #72]	; 0x48
   1a938:	6014      	str	r4, [r2, #0]
   1a93a:	3444      	adds	r4, #68	; 0x44
   1a93c:	649c      	str	r4, [r3, #72]	; 0x48
        }
    }

    os_trace_task_stop_ready(t, OS_TASK_SLEEP);
    return (0);
}
   1a93e:	2000      	movs	r0, #0
   1a940:	bd38      	pop	{r3, r4, r5, pc}
            TAILQ_INSERT_TAIL(&g_os_sleep_list, t, t_os_list);
   1a942:	2300      	movs	r3, #0
   1a944:	6463      	str	r3, [r4, #68]	; 0x44
   1a946:	4b03      	ldr	r3, [pc, #12]	; (1a954 <os_sched_sleep+0x88>)
   1a948:	685a      	ldr	r2, [r3, #4]
   1a94a:	64a2      	str	r2, [r4, #72]	; 0x48
   1a94c:	6014      	str	r4, [r2, #0]
   1a94e:	3444      	adds	r4, #68	; 0x44
   1a950:	605c      	str	r4, [r3, #4]
   1a952:	e7f4      	b.n	1a93e <os_sched_sleep+0x72>
   1a954:	2000011c 	.word	0x2000011c
   1a958:	20000114 	.word	0x20000114

0001a95c <os_sched_wakeup>:
 *
 * NOTE: This function must be called with interrupts disabled.
 */
int
os_sched_wakeup(struct os_task *t)
{
   1a95c:	b508      	push	{r3, lr}
    struct os_task_obj *os_obj;

    assert(t->t_state == OS_TASK_SLEEP);
   1a95e:	7b03      	ldrb	r3, [r0, #12]
   1a960:	2b02      	cmp	r3, #2
   1a962:	d108      	bne.n	1a976 <os_sched_wakeup+0x1a>

    /* Remove self from object list if waiting on one */
    if (t->t_obj) {
   1a964:	69c3      	ldr	r3, [r0, #28]
   1a966:	b1db      	cbz	r3, 1a9a0 <os_sched_wakeup+0x44>
        os_obj = (struct os_task_obj *)t->t_obj;
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a968:	681a      	ldr	r2, [r3, #0]
   1a96a:	b152      	cbz	r2, 1a982 <os_sched_wakeup+0x26>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a96c:	4282      	cmp	r2, r0
   1a96e:	d10f      	bne.n	1a990 <os_sched_wakeup+0x34>
   1a970:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
   1a972:	601a      	str	r2, [r3, #0]
   1a974:	e011      	b.n	1a99a <os_sched_wakeup+0x3e>
    assert(t->t_state == OS_TASK_SLEEP);
   1a976:	2300      	movs	r3, #0
   1a978:	461a      	mov	r2, r3
   1a97a:	4619      	mov	r1, r3
   1a97c:	4618      	mov	r0, r3
   1a97e:	f7fe ffd9 	bl	19934 <__assert_func>
        assert(!SLIST_EMPTY(&os_obj->obj_head));
   1a982:	2300      	movs	r3, #0
   1a984:	461a      	mov	r2, r3
   1a986:	4619      	mov	r1, r3
   1a988:	4618      	mov	r0, r3
   1a98a:	f7fe ffd3 	bl	19934 <__assert_func>
        SLIST_REMOVE(&os_obj->obj_head, t, os_task, t_obj_list);
   1a98e:	461a      	mov	r2, r3
   1a990:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1a992:	4283      	cmp	r3, r0
   1a994:	d1fb      	bne.n	1a98e <os_sched_wakeup+0x32>
   1a996:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1a998:	64d3      	str	r3, [r2, #76]	; 0x4c
        SLIST_NEXT(t, t_obj_list) = NULL;
   1a99a:	2300      	movs	r3, #0
   1a99c:	64c3      	str	r3, [r0, #76]	; 0x4c
        t->t_obj = NULL;
   1a99e:	61c3      	str	r3, [r0, #28]
    }

    /* Remove task from sleep list */
    t->t_state = OS_TASK_READY;
   1a9a0:	2301      	movs	r3, #1
   1a9a2:	7303      	strb	r3, [r0, #12]
    t->t_next_wakeup = 0;
   1a9a4:	2300      	movs	r3, #0
   1a9a6:	6343      	str	r3, [r0, #52]	; 0x34
    t->t_flags &= ~OS_TASK_FLAG_NO_TIMEOUT;
   1a9a8:	7b43      	ldrb	r3, [r0, #13]
   1a9aa:	f023 0301 	bic.w	r3, r3, #1
   1a9ae:	7343      	strb	r3, [r0, #13]
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a9b0:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1a9b2:	b143      	cbz	r3, 1a9c6 <os_sched_wakeup+0x6a>
   1a9b4:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9b6:	649a      	str	r2, [r3, #72]	; 0x48
   1a9b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1a9ba:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1a9bc:	601a      	str	r2, [r3, #0]
    os_sched_insert(t);
   1a9be:	f7ff ff37 	bl	1a830 <os_sched_insert>

    os_trace_task_start_ready(t);

    return (0);
}
   1a9c2:	2000      	movs	r0, #0
   1a9c4:	bd08      	pop	{r3, pc}
    TAILQ_REMOVE(&g_os_sleep_list, t, t_os_list);
   1a9c6:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1a9c8:	4b01      	ldr	r3, [pc, #4]	; (1a9d0 <os_sched_wakeup+0x74>)
   1a9ca:	605a      	str	r2, [r3, #4]
   1a9cc:	e7f4      	b.n	1a9b8 <os_sched_wakeup+0x5c>
   1a9ce:	bf00      	nop
   1a9d0:	2000011c 	.word	0x2000011c

0001a9d4 <os_sched_os_timer_exp>:
 * removed from the sleep list and added to the run list.
 *
 */
void
os_sched_os_timer_exp(void)
{
   1a9d4:	b570      	push	{r4, r5, r6, lr}
    struct os_task *t;
    struct os_task *next;
    os_time_t now;
    os_sr_t sr;

    now = os_time_get();
   1a9d6:	f000 f9cb 	bl	1ad70 <os_time_get>
   1a9da:	4605      	mov	r5, r0

    OS_ENTER_CRITICAL(sr);
   1a9dc:	f000 fa40 	bl	1ae60 <os_arch_save_sr>
   1a9e0:	4606      	mov	r6, r0

    /*
     * Wakeup any tasks that have their sleep timer expired
     */
    t = TAILQ_FIRST(&g_os_sleep_list);
   1a9e2:	4b0a      	ldr	r3, [pc, #40]	; (1aa0c <os_sched_os_timer_exp+0x38>)
   1a9e4:	6818      	ldr	r0, [r3, #0]
    while (t) {
   1a9e6:	b160      	cbz	r0, 1aa02 <os_sched_os_timer_exp+0x2e>
        /* If task waiting forever, do not check next wakeup time */
        if (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT) {
   1a9e8:	7b43      	ldrb	r3, [r0, #13]
   1a9ea:	f013 0f01 	tst.w	r3, #1
   1a9ee:	d108      	bne.n	1aa02 <os_sched_os_timer_exp+0x2e>
            break;
        }
        next = TAILQ_NEXT(t, t_os_list);
   1a9f0:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (OS_TIME_TICK_GEQ(now, t->t_next_wakeup)) {
   1a9f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   1a9f4:	1aeb      	subs	r3, r5, r3
   1a9f6:	2b00      	cmp	r3, #0
   1a9f8:	db03      	blt.n	1aa02 <os_sched_os_timer_exp+0x2e>
            os_sched_wakeup(t);
   1a9fa:	f7ff ffaf 	bl	1a95c <os_sched_wakeup>
        } else {
            break;
        }
        t = next;
   1a9fe:	4620      	mov	r0, r4
   1aa00:	e7f1      	b.n	1a9e6 <os_sched_os_timer_exp+0x12>
    }

    OS_EXIT_CRITICAL(sr);
   1aa02:	4630      	mov	r0, r6
   1aa04:	f000 fa32 	bl	1ae6c <os_arch_restore_sr>
}
   1aa08:	bd70      	pop	{r4, r5, r6, pc}
   1aa0a:	bf00      	nop
   1aa0c:	2000011c 	.word	0x2000011c

0001aa10 <os_sched_wakeup_ticks>:
 * Return the number of ticks until the first sleep timer expires.If there are
 * no such tasks then return OS_TIMEOUT_NEVER instead.
 */
os_time_t
os_sched_wakeup_ticks(os_time_t now)
{
   1aa10:	b510      	push	{r4, lr}
   1aa12:	4604      	mov	r4, r0
    os_time_t rt;
    struct os_task *t;

    OS_ASSERT_CRITICAL();
   1aa14:	f000 fa2d 	bl	1ae72 <os_arch_in_critical>
   1aa18:	b150      	cbz	r0, 1aa30 <os_sched_wakeup_ticks+0x20>

    t = TAILQ_FIRST(&g_os_sleep_list);
   1aa1a:	4b0c      	ldr	r3, [pc, #48]	; (1aa4c <os_sched_wakeup_ticks+0x3c>)
   1aa1c:	681b      	ldr	r3, [r3, #0]
    if (t == NULL || (t->t_flags & OS_TASK_FLAG_NO_TIMEOUT)) {
   1aa1e:	b17b      	cbz	r3, 1aa40 <os_sched_wakeup_ticks+0x30>
   1aa20:	7b5a      	ldrb	r2, [r3, #13]
   1aa22:	f012 0f01 	tst.w	r2, #1
   1aa26:	d10e      	bne.n	1aa46 <os_sched_wakeup_ticks+0x36>
        rt = OS_TIMEOUT_NEVER;
    } else if (OS_TIME_TICK_GEQ(t->t_next_wakeup, now)) {
   1aa28:	6b58      	ldr	r0, [r3, #52]	; 0x34
   1aa2a:	1b00      	subs	r0, r0, r4
   1aa2c:	d406      	bmi.n	1aa3c <os_sched_wakeup_ticks+0x2c>
        rt = t->t_next_wakeup - now;
    } else {
        rt = 0;     /* wakeup time was in the past */
    }
    return (rt);
}
   1aa2e:	bd10      	pop	{r4, pc}
    OS_ASSERT_CRITICAL();
   1aa30:	2300      	movs	r3, #0
   1aa32:	461a      	mov	r2, r3
   1aa34:	4619      	mov	r1, r3
   1aa36:	4618      	mov	r0, r3
   1aa38:	f7fe ff7c 	bl	19934 <__assert_func>
        rt = 0;     /* wakeup time was in the past */
   1aa3c:	2000      	movs	r0, #0
   1aa3e:	e7f6      	b.n	1aa2e <os_sched_wakeup_ticks+0x1e>
        rt = OS_TIMEOUT_NEVER;
   1aa40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aa44:	e7f3      	b.n	1aa2e <os_sched_wakeup_ticks+0x1e>
   1aa46:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    return (rt);
   1aa4a:	e7f0      	b.n	1aa2e <os_sched_wakeup_ticks+0x1e>
   1aa4c:	2000011c 	.word	0x2000011c

0001aa50 <os_sched_next_task>:
 */
struct os_task *
os_sched_next_task(void)
{
    return (TAILQ_FIRST(&g_os_run_list));
}
   1aa50:	4b01      	ldr	r3, [pc, #4]	; (1aa58 <os_sched_next_task+0x8>)
   1aa52:	6818      	ldr	r0, [r3, #0]
   1aa54:	4770      	bx	lr
   1aa56:	bf00      	nop
   1aa58:	20000114 	.word	0x20000114

0001aa5c <os_sched>:
{
   1aa5c:	b538      	push	{r3, r4, r5, lr}
   1aa5e:	4604      	mov	r4, r0
    OS_ENTER_CRITICAL(sr);
   1aa60:	f000 f9fe 	bl	1ae60 <os_arch_save_sr>
   1aa64:	4605      	mov	r5, r0
    if (!next_t) {
   1aa66:	b134      	cbz	r4, 1aa76 <os_sched+0x1a>
    os_arch_ctx_sw(next_t);
   1aa68:	4620      	mov	r0, r4
   1aa6a:	f000 f9ef 	bl	1ae4c <os_arch_ctx_sw>
    OS_EXIT_CRITICAL(sr);
   1aa6e:	4628      	mov	r0, r5
   1aa70:	f000 f9fc 	bl	1ae6c <os_arch_restore_sr>
}
   1aa74:	bd38      	pop	{r3, r4, r5, pc}
        next_t = os_sched_next_task();
   1aa76:	f7ff ffeb 	bl	1aa50 <os_sched_next_task>
   1aa7a:	4604      	mov	r4, r0
   1aa7c:	e7f4      	b.n	1aa68 <os_sched+0xc>
	...

0001aa80 <os_sched_resort>:
 * NOTE: this function expects interrupts to be disabled so they
 * are not disabled here.
 */
void
os_sched_resort(struct os_task *t)
{
   1aa80:	b508      	push	{r3, lr}
    if (t->t_state == OS_TASK_READY) {
   1aa82:	7b03      	ldrb	r3, [r0, #12]
   1aa84:	2b01      	cmp	r3, #1
   1aa86:	d000      	beq.n	1aa8a <os_sched_resort+0xa>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
        os_sched_insert(t);
    }
}
   1aa88:	bd08      	pop	{r3, pc}
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1aa8a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   1aa8c:	b13b      	cbz	r3, 1aa9e <os_sched_resort+0x1e>
   1aa8e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aa90:	649a      	str	r2, [r3, #72]	; 0x48
   1aa92:	6c83      	ldr	r3, [r0, #72]	; 0x48
   1aa94:	6c42      	ldr	r2, [r0, #68]	; 0x44
   1aa96:	601a      	str	r2, [r3, #0]
        os_sched_insert(t);
   1aa98:	f7ff feca 	bl	1a830 <os_sched_insert>
}
   1aa9c:	e7f4      	b.n	1aa88 <os_sched_resort+0x8>
        TAILQ_REMOVE(&g_os_run_list, t, t_os_list);
   1aa9e:	6c82      	ldr	r2, [r0, #72]	; 0x48
   1aaa0:	4b01      	ldr	r3, [pc, #4]	; (1aaa8 <os_sched_resort+0x28>)
   1aaa2:	605a      	str	r2, [r3, #4]
   1aaa4:	e7f5      	b.n	1aa92 <os_sched_resort+0x12>
   1aaa6:	bf00      	nop
   1aaa8:	20000114 	.word	0x20000114

0001aaac <os_sem_init>:
{
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_INIT, (uint32_t)sem, (uint32_t)tokens);

    if (!sem) {
   1aaac:	4603      	mov	r3, r0
   1aaae:	b118      	cbz	r0, 1aab8 <os_sem_init+0xc>
        ret = OS_INVALID_PARM;
        goto done;
    }

    sem->sem_tokens = tokens;
   1aab0:	80c1      	strh	r1, [r0, #6]
    SLIST_FIRST(&sem->sem_head) = NULL;
   1aab2:	2000      	movs	r0, #0
   1aab4:	6018      	str	r0, [r3, #0]
   1aab6:	4770      	bx	lr
        ret = OS_INVALID_PARM;
   1aab8:	2003      	movs	r0, #3
    ret = OS_OK;

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_INIT, (uint32_t)ret);
    return ret;
}
   1aaba:	4770      	bx	lr

0001aabc <os_sem_release>:

os_error_t
os_sem_release(struct os_sem *sem)
{
   1aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)sem);

    /* OS must be started to release semaphores */
    if (!g_os_started) {
   1aabe:	4b17      	ldr	r3, [pc, #92]	; (1ab1c <os_sem_release+0x60>)
   1aac0:	681b      	ldr	r3, [r3, #0]
   1aac2:	b33b      	cbz	r3, 1ab14 <os_sem_release+0x58>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1aac4:	b340      	cbz	r0, 1ab18 <os_sem_release+0x5c>
   1aac6:	4604      	mov	r4, r0
        goto done;
    }

    /* Get current task */
    resched = 0;
    current = os_sched_get_current_task();
   1aac8:	f7ff fef4 	bl	1a8b4 <os_sched_get_current_task>
   1aacc:	4607      	mov	r7, r0

    OS_ENTER_CRITICAL(sr);
   1aace:	f000 f9c7 	bl	1ae60 <os_arch_save_sr>
   1aad2:	4606      	mov	r6, r0

    /* Check if tasks are waiting for the semaphore */
    rdy = SLIST_FIRST(&sem->sem_head);
   1aad4:	6825      	ldr	r5, [r4, #0]
    if (rdy) {
   1aad6:	b165      	cbz	r5, 1aaf2 <os_sem_release+0x36>
        /* Clear flag that we are waiting on the semaphore; wake up task */
        rdy->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1aad8:	7b6b      	ldrb	r3, [r5, #13]
   1aada:	f023 0302 	bic.w	r3, r3, #2
   1aade:	736b      	strb	r3, [r5, #13]
        os_sched_wakeup(rdy);
   1aae0:	4628      	mov	r0, r5
   1aae2:	f7ff ff3b 	bl	1a95c <os_sched_wakeup>

        /* Schedule if waiting task higher priority */
        if (current->t_prio > rdy->t_prio) {
   1aae6:	7afa      	ldrb	r2, [r7, #11]
   1aae8:	7aeb      	ldrb	r3, [r5, #11]
   1aaea:	429a      	cmp	r2, r3
   1aaec:	d80b      	bhi.n	1ab06 <os_sem_release+0x4a>
    resched = 0;
   1aaee:	2400      	movs	r4, #0
   1aaf0:	e003      	b.n	1aafa <os_sem_release+0x3e>
            resched = 1;
        }
    } else {
        /* Add to the number of tokens */
        sem->sem_tokens++;
   1aaf2:	88e3      	ldrh	r3, [r4, #6]
   1aaf4:	3301      	adds	r3, #1
   1aaf6:	80e3      	strh	r3, [r4, #6]
    resched = 0;
   1aaf8:	2400      	movs	r4, #0
    }

    OS_EXIT_CRITICAL(sr);
   1aafa:	4630      	mov	r0, r6
   1aafc:	f000 f9b6 	bl	1ae6c <os_arch_restore_sr>

    /* Re-schedule if needed */
    if (resched) {
   1ab00:	b91c      	cbnz	r4, 1ab0a <os_sem_release+0x4e>
        os_sched(rdy);
    }

    ret = OS_OK;
   1ab02:	2000      	movs	r0, #0

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_RELEASE, (uint32_t)ret);
    return ret;
}
   1ab04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            resched = 1;
   1ab06:	2401      	movs	r4, #1
   1ab08:	e7f7      	b.n	1aafa <os_sem_release+0x3e>
        os_sched(rdy);
   1ab0a:	4628      	mov	r0, r5
   1ab0c:	f7ff ffa6 	bl	1aa5c <os_sched>
    ret = OS_OK;
   1ab10:	2000      	movs	r0, #0
   1ab12:	e7f7      	b.n	1ab04 <os_sem_release+0x48>
        ret = OS_NOT_STARTED;
   1ab14:	2009      	movs	r0, #9
   1ab16:	e7f5      	b.n	1ab04 <os_sem_release+0x48>
        ret = OS_INVALID_PARM;
   1ab18:	2003      	movs	r0, #3
   1ab1a:	e7f3      	b.n	1ab04 <os_sem_release+0x48>
   1ab1c:	2000d688 	.word	0x2000d688

0001ab20 <os_sem_pend>:

os_error_t
os_sem_pend(struct os_sem *sem, os_time_t timeout)
{
   1ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    os_error_t ret;

    os_trace_api_u32x2(OS_TRACE_ID_SEM_PEND, (uint32_t)sem, (uint32_t)timeout);

    /* Check if OS is started */
    if (!g_os_started) {
   1ab22:	4b2c      	ldr	r3, [pc, #176]	; (1abd4 <os_sem_pend+0xb4>)
   1ab24:	681b      	ldr	r3, [r3, #0]
   1ab26:	2b00      	cmp	r3, #0
   1ab28:	d04f      	beq.n	1abca <os_sem_pend+0xaa>
        ret = OS_NOT_STARTED;
        goto done;
    }

    /* Check for valid semaphore */
    if (!sem) {
   1ab2a:	2800      	cmp	r0, #0
   1ab2c:	d04f      	beq.n	1abce <os_sem_pend+0xae>
   1ab2e:	460d      	mov	r5, r1
   1ab30:	4604      	mov	r4, r0
        goto done;
    }

    /* Assume we dont have to put task to sleep; get current task */
    sched = 0;
    current = os_sched_get_current_task();
   1ab32:	f7ff febf 	bl	1a8b4 <os_sched_get_current_task>
   1ab36:	4606      	mov	r6, r0

    OS_ENTER_CRITICAL(sr);
   1ab38:	f000 f992 	bl	1ae60 <os_arch_save_sr>
   1ab3c:	4607      	mov	r7, r0

    /*
     * If there is a token available, take it. If no token, either return
     * with error if timeout was 0 or put this task to sleep.
     */
    if (sem->sem_tokens != 0) {
   1ab3e:	88e3      	ldrh	r3, [r4, #6]
   1ab40:	b14b      	cbz	r3, 1ab56 <os_sem_pend+0x36>
        sem->sem_tokens--;
   1ab42:	3b01      	subs	r3, #1
   1ab44:	80e3      	strh	r3, [r4, #6]
        ret = OS_OK;
   1ab46:	2400      	movs	r4, #0
    sched = 0;
   1ab48:	4625      	mov	r5, r4
        /* We will put this task to sleep */
        sched = 1;
        os_sched_sleep(current, timeout);
    }

    OS_EXIT_CRITICAL(sr);
   1ab4a:	4638      	mov	r0, r7
   1ab4c:	f000 f98e 	bl	1ae6c <os_arch_restore_sr>

    if (sched) {
   1ab50:	bb45      	cbnz	r5, 1aba4 <os_sem_pend+0x84>
    }

done:
    os_trace_api_ret_u32(OS_TRACE_ID_SEM_PEND, (uint32_t)ret);
    return ret;
}
   1ab52:	4620      	mov	r0, r4
   1ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (timeout == 0) {
   1ab56:	b315      	cbz	r5, 1ab9e <os_sem_pend+0x7e>
        current->t_obj = sem;
   1ab58:	61f4      	str	r4, [r6, #28]
        current->t_flags |= OS_TASK_FLAG_SEM_WAIT;
   1ab5a:	7b73      	ldrb	r3, [r6, #13]
   1ab5c:	f043 0302 	orr.w	r3, r3, #2
   1ab60:	7373      	strb	r3, [r6, #13]
        if (!SLIST_EMPTY(&sem->sem_head)) {
   1ab62:	f8d4 c000 	ldr.w	ip, [r4]
   1ab66:	f1bc 0f00 	cmp.w	ip, #0
   1ab6a:	d00e      	beq.n	1ab8a <os_sem_pend+0x6a>
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab6c:	4663      	mov	r3, ip
        last = NULL;
   1ab6e:	2000      	movs	r0, #0
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab70:	b133      	cbz	r3, 1ab80 <os_sem_pend+0x60>
                if (current->t_prio < entry->t_prio) {
   1ab72:	7af1      	ldrb	r1, [r6, #11]
   1ab74:	7ada      	ldrb	r2, [r3, #11]
   1ab76:	4291      	cmp	r1, r2
   1ab78:	d302      	bcc.n	1ab80 <os_sem_pend+0x60>
                last = entry;
   1ab7a:	4618      	mov	r0, r3
            SLIST_FOREACH(entry, &sem->sem_head, t_obj_list) {
   1ab7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1ab7e:	e7f7      	b.n	1ab70 <os_sem_pend+0x50>
        if (last) {
   1ab80:	b118      	cbz	r0, 1ab8a <os_sem_pend+0x6a>
            SLIST_INSERT_AFTER(last, current, t_obj_list);
   1ab82:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   1ab84:	64f3      	str	r3, [r6, #76]	; 0x4c
   1ab86:	64c6      	str	r6, [r0, #76]	; 0x4c
   1ab88:	e002      	b.n	1ab90 <os_sem_pend+0x70>
            SLIST_INSERT_HEAD(&sem->sem_head, current, t_obj_list);
   1ab8a:	f8c6 c04c 	str.w	ip, [r6, #76]	; 0x4c
   1ab8e:	6026      	str	r6, [r4, #0]
        os_sched_sleep(current, timeout);
   1ab90:	4629      	mov	r1, r5
   1ab92:	4630      	mov	r0, r6
   1ab94:	f7ff fe9a 	bl	1a8cc <os_sched_sleep>
        ret = OS_OK;
   1ab98:	2400      	movs	r4, #0
        sched = 1;
   1ab9a:	2501      	movs	r5, #1
   1ab9c:	e7d5      	b.n	1ab4a <os_sem_pend+0x2a>
        ret = OS_TIMEOUT;
   1ab9e:	2406      	movs	r4, #6
    sched = 0;
   1aba0:	2500      	movs	r5, #0
   1aba2:	e7d2      	b.n	1ab4a <os_sem_pend+0x2a>
        os_sched(NULL);
   1aba4:	2000      	movs	r0, #0
   1aba6:	f7ff ff59 	bl	1aa5c <os_sched>
        if (current->t_flags & OS_TASK_FLAG_SEM_WAIT) {
   1abaa:	7b73      	ldrb	r3, [r6, #13]
   1abac:	f013 0f02 	tst.w	r3, #2
   1abb0:	d101      	bne.n	1abb6 <os_sem_pend+0x96>
            ret = OS_OK;
   1abb2:	2400      	movs	r4, #0
   1abb4:	e7cd      	b.n	1ab52 <os_sem_pend+0x32>
            OS_ENTER_CRITICAL(sr);
   1abb6:	f000 f953 	bl	1ae60 <os_arch_save_sr>
            current->t_flags &= ~OS_TASK_FLAG_SEM_WAIT;
   1abba:	7b73      	ldrb	r3, [r6, #13]
   1abbc:	f023 0302 	bic.w	r3, r3, #2
   1abc0:	7373      	strb	r3, [r6, #13]
            OS_EXIT_CRITICAL(sr);
   1abc2:	f000 f953 	bl	1ae6c <os_arch_restore_sr>
            ret = OS_TIMEOUT;
   1abc6:	2406      	movs	r4, #6
   1abc8:	e7c3      	b.n	1ab52 <os_sem_pend+0x32>
        ret = OS_NOT_STARTED;
   1abca:	2409      	movs	r4, #9
   1abcc:	e7c1      	b.n	1ab52 <os_sem_pend+0x32>
        ret = OS_INVALID_PARM;
   1abce:	2403      	movs	r4, #3
   1abd0:	e7bf      	b.n	1ab52 <os_sem_pend+0x32>
   1abd2:	bf00      	nop
   1abd4:	2000d688 	.word	0x2000d688

0001abd8 <_clear_stack>:
static void
_clear_stack(os_stack_t *stack_bottom, int size)
{
    int i;

    for (i = 0; i < size; i++) {
   1abd8:	2300      	movs	r3, #0
   1abda:	e003      	b.n	1abe4 <_clear_stack+0xc>
        stack_bottom[i] = OS_STACK_PATTERN;
   1abdc:	4a03      	ldr	r2, [pc, #12]	; (1abec <_clear_stack+0x14>)
   1abde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < size; i++) {
   1abe2:	3301      	adds	r3, #1
   1abe4:	428b      	cmp	r3, r1
   1abe6:	dbf9      	blt.n	1abdc <_clear_stack+0x4>
    }
}
   1abe8:	4770      	bx	lr
   1abea:	bf00      	nop
   1abec:	deadbeef 	.word	0xdeadbeef

0001abf0 <os_task_init>:

int
os_task_init(struct os_task *t, const char *name, os_task_func_t func,
        void *arg, uint8_t prio, os_time_t sanity_itvl,
        os_stack_t *stack_bottom, uint16_t stack_size)
{
   1abf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abf4:	4604      	mov	r4, r0
   1abf6:	460f      	mov	r7, r1
   1abf8:	4690      	mov	r8, r2
   1abfa:	461d      	mov	r5, r3
   1abfc:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    struct os_sanity_check *sc;
    int rc;
    struct os_task *task;

    memset(t, 0, sizeof(*t));
   1ac00:	2250      	movs	r2, #80	; 0x50
   1ac02:	2100      	movs	r1, #0
   1ac04:	f000 fa99 	bl	1b13a <memset>

    t->t_func = func;
   1ac08:	f8c4 8014 	str.w	r8, [r4, #20]
    t->t_arg = arg;
   1ac0c:	61a5      	str	r5, [r4, #24]
    OS_ENTER_CRITICAL(sr);
   1ac0e:	f000 f927 	bl	1ae60 <os_arch_save_sr>
    rc = g_task_id;
   1ac12:	4b2b      	ldr	r3, [pc, #172]	; (1acc0 <os_task_init+0xd0>)
   1ac14:	781d      	ldrb	r5, [r3, #0]
    g_task_id++;
   1ac16:	1c6a      	adds	r2, r5, #1
   1ac18:	701a      	strb	r2, [r3, #0]
    OS_EXIT_CRITICAL(sr);
   1ac1a:	f000 f927 	bl	1ae6c <os_arch_restore_sr>

    t->t_taskid = os_task_next_id();
   1ac1e:	72a5      	strb	r5, [r4, #10]
    t->t_prio = prio;
   1ac20:	f89d 3018 	ldrb.w	r3, [sp, #24]
   1ac24:	72e3      	strb	r3, [r4, #11]

    t->t_state = OS_TASK_READY;
   1ac26:	2301      	movs	r3, #1
   1ac28:	7323      	strb	r3, [r4, #12]
    t->t_name = name;
   1ac2a:	6127      	str	r7, [r4, #16]
    t->t_next_wakeup = 0;
   1ac2c:	2300      	movs	r3, #0
   1ac2e:	6363      	str	r3, [r4, #52]	; 0x34

    rc = os_sanity_check_init(&t->t_sanity_check);
   1ac30:	f104 0720 	add.w	r7, r4, #32
   1ac34:	4638      	mov	r0, r7
   1ac36:	f7ff fda3 	bl	1a780 <os_sanity_check_init>
    if (rc != OS_OK) {
   1ac3a:	4605      	mov	r5, r0
   1ac3c:	2800      	cmp	r0, #0
   1ac3e:	d132      	bne.n	1aca6 <os_task_init+0xb6>
        goto err;
    }

    if (sanity_itvl != OS_WAIT_FOREVER) {
   1ac40:	9b07      	ldr	r3, [sp, #28]
   1ac42:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   1ac46:	d005      	beq.n	1ac54 <os_task_init+0x64>
        sc = (struct os_sanity_check *) &t->t_sanity_check;
        sc->sc_checkin_itvl = sanity_itvl;
   1ac48:	6263      	str	r3, [r4, #36]	; 0x24

        rc = os_sanity_check_register(sc);
   1ac4a:	4638      	mov	r0, r7
   1ac4c:	f7ff fda0 	bl	1a790 <os_sanity_check_register>
        if (rc != OS_OK) {
   1ac50:	4605      	mov	r5, r0
   1ac52:	bb40      	cbnz	r0, 1aca6 <os_task_init+0xb6>
            goto err;
        }
    }

    _clear_stack(stack_bottom, stack_size);
   1ac54:	4631      	mov	r1, r6
   1ac56:	9808      	ldr	r0, [sp, #32]
   1ac58:	f7ff ffbe 	bl	1abd8 <_clear_stack>
    t->t_stacktop = &stack_bottom[stack_size];
   1ac5c:	9b08      	ldr	r3, [sp, #32]
   1ac5e:	eb03 0186 	add.w	r1, r3, r6, lsl #2
   1ac62:	6061      	str	r1, [r4, #4]
    t->t_stacksize = stack_size;
   1ac64:	8126      	strh	r6, [r4, #8]
    t->t_stackptr = os_arch_task_stack_init(t, t->t_stacktop,
   1ac66:	4632      	mov	r2, r6
   1ac68:	4620      	mov	r0, r4
   1ac6a:	f000 f907 	bl	1ae7c <os_arch_task_stack_init>
   1ac6e:	6020      	str	r0, [r4, #0]
            t->t_stacksize);

    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ac70:	4b14      	ldr	r3, [pc, #80]	; (1acc4 <os_task_init+0xd4>)
   1ac72:	681b      	ldr	r3, [r3, #0]
   1ac74:	b15b      	cbz	r3, 1ac8e <os_task_init+0x9e>
        assert(t->t_prio != task->t_prio);
   1ac76:	7ae1      	ldrb	r1, [r4, #11]
   1ac78:	7ada      	ldrb	r2, [r3, #11]
   1ac7a:	4291      	cmp	r1, r2
   1ac7c:	d001      	beq.n	1ac82 <os_task_init+0x92>
    STAILQ_FOREACH(task, &g_os_task_list, t_os_task_list) {
   1ac7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1ac80:	e7f8      	b.n	1ac74 <os_task_init+0x84>
        assert(t->t_prio != task->t_prio);
   1ac82:	2300      	movs	r3, #0
   1ac84:	461a      	mov	r2, r3
   1ac86:	4619      	mov	r1, r3
   1ac88:	4618      	mov	r0, r3
   1ac8a:	f7fe fe53 	bl	19934 <__assert_func>
    }

    /* insert this task into the task list */
    STAILQ_INSERT_TAIL(&g_os_task_list, t, t_os_task_list);
   1ac8e:	6423      	str	r3, [r4, #64]	; 0x40
   1ac90:	4b0c      	ldr	r3, [pc, #48]	; (1acc4 <os_task_init+0xd4>)
   1ac92:	685a      	ldr	r2, [r3, #4]
   1ac94:	6014      	str	r4, [r2, #0]
   1ac96:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1ac9a:	605a      	str	r2, [r3, #4]

    /* insert this task into the scheduler list */
    rc = os_sched_insert(t);
   1ac9c:	4620      	mov	r0, r4
   1ac9e:	f7ff fdc7 	bl	1a830 <os_sched_insert>
   1aca2:	4605      	mov	r5, r0
    if (rc != OS_OK) {
   1aca4:	b110      	cbz	r0, 1acac <os_task_init+0xbc>
    }

    return (0);
err:
    return (rc);
}
   1aca6:	4628      	mov	r0, r5
   1aca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (os_started()) {
   1acac:	f7fe fefc 	bl	19aa8 <os_started>
   1acb0:	b908      	cbnz	r0, 1acb6 <os_task_init+0xc6>
    return (0);
   1acb2:	4605      	mov	r5, r0
   1acb4:	e7f7      	b.n	1aca6 <os_task_init+0xb6>
        os_sched(NULL);
   1acb6:	2000      	movs	r0, #0
   1acb8:	f7ff fed0 	bl	1aa5c <os_sched>
   1acbc:	e7f3      	b.n	1aca6 <os_task_init+0xb6>
   1acbe:	bf00      	nop
   1acc0:	2000d6b4 	.word	0x2000d6b4
   1acc4:	2000d6b8 	.word	0x2000d6b8

0001acc8 <os_deltatime>:
} basetod;

static void
os_deltatime(os_time_t delta, const struct os_timeval *base,
    struct os_timeval *result)
{
   1acc8:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
    struct os_timeval tvdelta;

    tvdelta.tv_sec = delta / OS_TICKS_PER_SEC;
   1accc:	09c3      	lsrs	r3, r0, #7
    tvdelta.tv_usec = (delta % OS_TICKS_PER_SEC) * OS_USEC_PER_TICK;
   1acce:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    os_timeradd(base, &tvdelta, result);
   1acd2:	e9d1 4500 	ldrd	r4, r5, [r1]
   1acd6:	eb14 0b03 	adds.w	fp, r4, r3
   1acda:	f145 0c00 	adc.w	ip, r5, #0
   1acde:	e9c2 bc00 	strd	fp, ip, [r2]
   1ace2:	688b      	ldr	r3, [r1, #8]
   1ace4:	f641 6184 	movw	r1, #7812	; 0x1e84
   1ace8:	fb01 3000 	mla	r0, r1, r0, r3
   1acec:	6090      	str	r0, [r2, #8]
   1acee:	4b08      	ldr	r3, [pc, #32]	; (1ad10 <os_deltatime+0x48>)
   1acf0:	4298      	cmp	r0, r3
   1acf2:	dd0a      	ble.n	1ad0a <os_deltatime+0x42>
   1acf4:	f11b 0401 	adds.w	r4, fp, #1
   1acf8:	f14c 0500 	adc.w	r5, ip, #0
   1acfc:	e9c2 4500 	strd	r4, r5, [r2]
   1ad00:	f5a0 2074 	sub.w	r0, r0, #999424	; 0xf4000
   1ad04:	f5a0 7010 	sub.w	r0, r0, #576	; 0x240
   1ad08:	6090      	str	r0, [r2, #8]
}
   1ad0a:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1ad0e:	4770      	bx	lr
   1ad10:	000f423f 	.word	0x000f423f

0001ad14 <os_time_tick>:
}

#if MYNEWT_VAL(OS_SCHEDULING)
static void
os_time_tick(int ticks)
{
   1ad14:	b570      	push	{r4, r5, r6, lr}
    os_sr_t sr;
    os_time_t delta, prev_os_time;

    assert(ticks >= 0);
   1ad16:	1e04      	subs	r4, r0, #0
   1ad18:	db0d      	blt.n	1ad36 <os_time_tick+0x22>

    OS_ENTER_CRITICAL(sr);
   1ad1a:	f000 f8a1 	bl	1ae60 <os_arch_save_sr>
   1ad1e:	4605      	mov	r5, r0
    prev_os_time = g_os_time;
   1ad20:	4a11      	ldr	r2, [pc, #68]	; (1ad68 <os_time_tick+0x54>)
   1ad22:	6813      	ldr	r3, [r2, #0]
    g_os_time += ticks;
   1ad24:	18e0      	adds	r0, r4, r3
   1ad26:	6010      	str	r0, [r2, #0]

    /*
     * Update 'basetod' when 'g_os_time' crosses the 0x00000000 and
     * 0x80000000 thresholds.
     */
    if ((prev_os_time ^ g_os_time) >> 31) {
   1ad28:	ea90 0f03 	teq	r0, r3
   1ad2c:	d409      	bmi.n	1ad42 <os_time_tick+0x2e>
        delta = g_os_time - basetod.ostime;
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
        basetod.ostime = g_os_time;
    }
    OS_EXIT_CRITICAL(sr);
   1ad2e:	4628      	mov	r0, r5
   1ad30:	f000 f89c 	bl	1ae6c <os_arch_restore_sr>
}
   1ad34:	bd70      	pop	{r4, r5, r6, pc}
    assert(ticks >= 0);
   1ad36:	2300      	movs	r3, #0
   1ad38:	461a      	mov	r2, r3
   1ad3a:	4619      	mov	r1, r3
   1ad3c:	4618      	mov	r0, r3
   1ad3e:	f7fe fdf9 	bl	19934 <__assert_func>
        delta = g_os_time - basetod.ostime;
   1ad42:	4e0a      	ldr	r6, [pc, #40]	; (1ad6c <os_time_tick+0x58>)
   1ad44:	4631      	mov	r1, r6
   1ad46:	f851 4b08 	ldr.w	r4, [r1], #8
   1ad4a:	1b04      	subs	r4, r0, r4
        os_deltatime(delta, &basetod.uptime, &basetod.uptime);
   1ad4c:	460a      	mov	r2, r1
   1ad4e:	4620      	mov	r0, r4
   1ad50:	f7ff ffba 	bl	1acc8 <os_deltatime>
        os_deltatime(delta, &basetod.utctime, &basetod.utctime);
   1ad54:	f106 0118 	add.w	r1, r6, #24
   1ad58:	460a      	mov	r2, r1
   1ad5a:	4620      	mov	r0, r4
   1ad5c:	f7ff ffb4 	bl	1acc8 <os_deltatime>
        basetod.ostime = g_os_time;
   1ad60:	4b01      	ldr	r3, [pc, #4]	; (1ad68 <os_time_tick+0x54>)
   1ad62:	681b      	ldr	r3, [r3, #0]
   1ad64:	6033      	str	r3, [r6, #0]
   1ad66:	e7e2      	b.n	1ad2e <os_time_tick+0x1a>
   1ad68:	2000d6c0 	.word	0x2000d6c0
   1ad6c:	2000d1b8 	.word	0x2000d1b8

0001ad70 <os_time_get>:
}
   1ad70:	4b01      	ldr	r3, [pc, #4]	; (1ad78 <os_time_get+0x8>)
   1ad72:	6818      	ldr	r0, [r3, #0]
   1ad74:	4770      	bx	lr
   1ad76:	bf00      	nop
   1ad78:	2000d6c0 	.word	0x2000d6c0

0001ad7c <os_time_advance>:

void
os_time_advance(int ticks)
{
   1ad7c:	b510      	push	{r4, lr}
    assert(ticks >= 0);
   1ad7e:	1e04      	subs	r4, r0, #0
   1ad80:	db09      	blt.n	1ad96 <os_time_advance+0x1a>

    if (ticks > 0) {
   1ad82:	2c00      	cmp	r4, #0
   1ad84:	dd06      	ble.n	1ad94 <os_time_advance+0x18>
        if (!os_started()) {
   1ad86:	f7fe fe8f 	bl	19aa8 <os_started>
   1ad8a:	b950      	cbnz	r0, 1ada2 <os_time_advance+0x26>
            g_os_time += ticks;
   1ad8c:	4a0a      	ldr	r2, [pc, #40]	; (1adb8 <os_time_advance+0x3c>)
   1ad8e:	6813      	ldr	r3, [r2, #0]
   1ad90:	441c      	add	r4, r3
   1ad92:	6014      	str	r4, [r2, #0]
            os_callout_tick();
            os_sched_os_timer_exp();
            os_sched(NULL);
        }
    }
}
   1ad94:	bd10      	pop	{r4, pc}
    assert(ticks >= 0);
   1ad96:	2300      	movs	r3, #0
   1ad98:	461a      	mov	r2, r3
   1ad9a:	4619      	mov	r1, r3
   1ad9c:	4618      	mov	r0, r3
   1ad9e:	f7fe fdc9 	bl	19934 <__assert_func>
            os_time_tick(ticks);
   1ada2:	4620      	mov	r0, r4
   1ada4:	f7ff ffb6 	bl	1ad14 <os_time_tick>
            os_callout_tick();
   1ada8:	f7fe ffa6 	bl	19cf8 <os_callout_tick>
            os_sched_os_timer_exp();
   1adac:	f7ff fe12 	bl	1a9d4 <os_sched_os_timer_exp>
            os_sched(NULL);
   1adb0:	2000      	movs	r0, #0
   1adb2:	f7ff fe53 	bl	1aa5c <os_sched>
}
   1adb6:	e7ed      	b.n	1ad94 <os_time_advance+0x18>
   1adb8:	2000d6c0 	.word	0x2000d6c0

0001adbc <os_time_delay>:
void
os_time_delay(os_time_t osticks)
{
    os_sr_t sr;

    if (osticks > 0) {
   1adbc:	b900      	cbnz	r0, 1adc0 <os_time_delay+0x4>
   1adbe:	4770      	bx	lr
{
   1adc0:	b538      	push	{r3, r4, r5, lr}
   1adc2:	4604      	mov	r4, r0
        OS_ENTER_CRITICAL(sr);
   1adc4:	f000 f84c 	bl	1ae60 <os_arch_save_sr>
   1adc8:	4605      	mov	r5, r0
        os_sched_sleep(os_sched_get_current_task(), (os_time_t)osticks);
   1adca:	f7ff fd73 	bl	1a8b4 <os_sched_get_current_task>
   1adce:	4621      	mov	r1, r4
   1add0:	f7ff fd7c 	bl	1a8cc <os_sched_sleep>
        OS_EXIT_CRITICAL(sr);
   1add4:	4628      	mov	r0, r5
   1add6:	f000 f849 	bl	1ae6c <os_arch_restore_sr>
        os_sched(NULL);
   1adda:	2000      	movs	r0, #0
   1addc:	f7ff fe3e 	bl	1aa5c <os_sched>
    }
}
   1ade0:	bd38      	pop	{r3, r4, r5, pc}
	...

0001ade4 <os_gettimeofday>:
    return (0);
}

int
os_gettimeofday(struct os_timeval *tv, struct os_timezone *tz)
{
   1ade4:	b570      	push	{r4, r5, r6, lr}
   1ade6:	4605      	mov	r5, r0
   1ade8:	460c      	mov	r4, r1
    os_sr_t sr;
    os_time_t delta;

    OS_ENTER_CRITICAL(sr);
   1adea:	f000 f839 	bl	1ae60 <os_arch_save_sr>
   1adee:	4606      	mov	r6, r0
    if (tv != NULL) {
   1adf0:	b145      	cbz	r5, 1ae04 <os_gettimeofday+0x20>
        delta = os_time_get() - basetod.ostime;
   1adf2:	f7ff ffbd 	bl	1ad70 <os_time_get>
   1adf6:	4908      	ldr	r1, [pc, #32]	; (1ae18 <os_gettimeofday+0x34>)
   1adf8:	f851 3b18 	ldr.w	r3, [r1], #24
        os_deltatime(delta, &basetod.utctime, tv);
   1adfc:	462a      	mov	r2, r5
   1adfe:	1ac0      	subs	r0, r0, r3
   1ae00:	f7ff ff62 	bl	1acc8 <os_deltatime>
    }

    if (tz != NULL) {
   1ae04:	b114      	cbz	r4, 1ae0c <os_gettimeofday+0x28>
        *tz = basetod.timezone;
   1ae06:	4b04      	ldr	r3, [pc, #16]	; (1ae18 <os_gettimeofday+0x34>)
   1ae08:	6a98      	ldr	r0, [r3, #40]	; 0x28
   1ae0a:	6020      	str	r0, [r4, #0]
    }
    OS_EXIT_CRITICAL(sr);
   1ae0c:	4630      	mov	r0, r6
   1ae0e:	f000 f82d 	bl	1ae6c <os_arch_restore_sr>

    return (0);
}
   1ae12:	2000      	movs	r0, #0
   1ae14:	bd70      	pop	{r4, r5, r6, pc}
   1ae16:	bf00      	nop
   1ae18:	2000d1b8 	.word	0x2000d1b8

0001ae1c <os_time_ms_to_ticks>:
  return (tv.tv_sec * 1000000 + tv.tv_usec);
}

int
os_time_ms_to_ticks(uint32_t ms, os_time_t *out_ticks)
{
   1ae1c:	b538      	push	{r3, r4, r5, lr}
   1ae1e:	4604      	mov	r4, r0
   1ae20:	460d      	mov	r5, r1
#endif

    static_assert(OS_TICKS_PER_SEC <= UINT32_MAX,
                  "OS_TICKS_PER_SEC must be <= UINT32_MAX");

    ticks = ((uint64_t)ms * OS_TICKS_PER_SEC) / 1000;
   1ae22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1ae26:	2300      	movs	r3, #0
   1ae28:	01c0      	lsls	r0, r0, #7
   1ae2a:	0e61      	lsrs	r1, r4, #25
   1ae2c:	f002 f88a 	bl	1cf44 <__aeabi_uldivmod>
    if (ticks > UINT32_MAX) {
   1ae30:	2901      	cmp	r1, #1
   1ae32:	bf08      	it	eq
   1ae34:	2800      	cmpeq	r0, #0
   1ae36:	d202      	bcs.n	1ae3e <os_time_ms_to_ticks+0x22>
        return OS_EINVAL;
    }

    *out_ticks = ticks;
   1ae38:	6028      	str	r0, [r5, #0]
    return 0;
   1ae3a:	2000      	movs	r0, #0
}
   1ae3c:	bd38      	pop	{r3, r4, r5, pc}
        return OS_EINVAL;
   1ae3e:	2002      	movs	r0, #2
   1ae40:	e7fc      	b.n	1ae3c <os_time_ms_to_ticks+0x20>

0001ae42 <timer_handler>:
/* XXX: determine how we will deal with running un-privileged */
uint32_t os_flags = OS_RUN_PRIV;

void
timer_handler(void)
{
   1ae42:	b508      	push	{r3, lr}
    os_time_advance(1);
   1ae44:	2001      	movs	r0, #1
   1ae46:	f7ff ff99 	bl	1ad7c <os_time_advance>
}
   1ae4a:	bd08      	pop	{r3, pc}

0001ae4c <os_arch_ctx_sw>:

void
os_arch_ctx_sw(struct os_task *t)
{
   1ae4c:	b508      	push	{r3, lr}
    os_sched_ctx_sw_hook(t);
   1ae4e:	f7ff fd19 	bl	1a884 <os_sched_ctx_sw_hook>

    /* Set PendSV interrupt pending bit to force context switch */
    SCB->ICSR = SCB_ICSR_PENDSVSET_Msk;
   1ae52:	4b02      	ldr	r3, [pc, #8]	; (1ae5c <os_arch_ctx_sw+0x10>)
   1ae54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ae58:	605a      	str	r2, [r3, #4]
}
   1ae5a:	bd08      	pop	{r3, pc}
   1ae5c:	e000ed00 	.word	0xe000ed00

0001ae60 <os_arch_save_sr>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ae60:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1ae64:	b672      	cpsid	i
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    __disable_irq();
    return (isr_ctx & 1);
}
   1ae66:	f000 0001 	and.w	r0, r0, #1
   1ae6a:	4770      	bx	lr

0001ae6c <os_arch_restore_sr>:

void
os_arch_restore_sr(os_sr_t isr_ctx)
{
    if (!isr_ctx) {
   1ae6c:	b900      	cbnz	r0, 1ae70 <os_arch_restore_sr+0x4>
  __ASM volatile ("cpsie i" : : : "memory");
   1ae6e:	b662      	cpsie	i
        __enable_irq();
    }
}
   1ae70:	4770      	bx	lr

0001ae72 <os_arch_in_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1ae72:	f3ef 8010 	mrs	r0, PRIMASK
{
    uint32_t isr_ctx;

    isr_ctx = __get_PRIMASK();
    return (isr_ctx & 1);
}
   1ae76:	f000 0001 	and.w	r0, r0, #1
   1ae7a:	4770      	bx	lr

0001ae7c <os_arch_task_stack_init>:

os_stack_t *
os_arch_task_stack_init(struct os_task *t, os_stack_t *stack_top, int size)
{
   1ae7c:	b570      	push	{r4, r5, r6, lr}
   1ae7e:	4606      	mov	r6, r0
   1ae80:	460d      	mov	r5, r1
    int i;
    os_stack_t *s;
    struct stack_frame *sf;

    /* Get stack frame pointer */
    s = (os_stack_t *) ((uint8_t *) stack_top - sizeof(*sf));
   1ae82:	f1a1 0444 	sub.w	r4, r1, #68	; 0x44

    /* Zero out R1-R3, R12, LR */
    for (i = 9; i < 14; ++i) {
   1ae86:	2309      	movs	r3, #9
   1ae88:	e003      	b.n	1ae92 <os_arch_task_stack_init+0x16>
        s[i] = 0;
   1ae8a:	2200      	movs	r2, #0
   1ae8c:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
    for (i = 9; i < 14; ++i) {
   1ae90:	3301      	adds	r3, #1
   1ae92:	2b0d      	cmp	r3, #13
   1ae94:	ddf9      	ble.n	1ae8a <os_arch_task_stack_init+0xe>
    }

    /* Set registers R4 - R11 on stack. */
    os_arch_init_task_stack(s);
   1ae96:	4620      	mov	r0, r4
   1ae98:	f000 f8b6 	bl	1b008 <os_arch_init_task_stack>

    /* Set remaining portions of stack frame */
    sf = (struct stack_frame *) s;
    sf->xpsr = INITIAL_xPSR;
   1ae9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1aea0:	f845 3c04 	str.w	r3, [r5, #-4]
    sf->pc = (uint32_t)t->t_func;
   1aea4:	6973      	ldr	r3, [r6, #20]
   1aea6:	f845 3c08 	str.w	r3, [r5, #-8]
    sf->r0 = (uint32_t)t->t_arg;
   1aeaa:	69b3      	ldr	r3, [r6, #24]
   1aeac:	f845 3c20 	str.w	r3, [r5, #-32]
#if MYNEWT_VAL(HARDFLOAT)
    sf->exc_lr = INITIAL_LR;
   1aeb0:	f06f 0302 	mvn.w	r3, #2
   1aeb4:	f845 3c24 	str.w	r3, [r5, #-36]
#endif

    return (s);
}
   1aeb8:	4620      	mov	r0, r4
   1aeba:	bd70      	pop	{r4, r5, r6, pc}

0001aebc <os_arch_init>:

void
os_arch_init(void)
{
   1aebc:	b508      	push	{r3, lr}
    /*
     * Trap on divide-by-zero.
     */
    SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   1aebe:	4a04      	ldr	r2, [pc, #16]	; (1aed0 <os_arch_init+0x14>)
   1aec0:	6953      	ldr	r3, [r2, #20]
   1aec2:	f043 0310 	orr.w	r3, r3, #16
   1aec6:	6153      	str	r3, [r2, #20]
    os_init_idle_task();
   1aec8:	f7fe fdf4 	bl	19ab4 <os_init_idle_task>
}
   1aecc:	bd08      	pop	{r3, pc}
   1aece:	bf00      	nop
   1aed0:	e000ed00 	.word	0xe000ed00

0001aed4 <os_arch_os_init>:
    SVC_Call(os_arch_init);
}

os_error_t
os_arch_os_init(void)
{
   1aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1aed6:	f3ef 8405 	mrs	r4, IPSR
    os_error_t err;
    int i;

    /* Cannot be called within an ISR */
    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1aeda:	b90c      	cbnz	r4, 1aee0 <os_arch_os_init+0xc>
        err = OS_OK;

        /* Drop priority for all interrupts */
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1aedc:	2400      	movs	r4, #0
   1aede:	e009      	b.n	1aef4 <os_arch_os_init+0x20>
    err = OS_ERR_IN_ISR;
   1aee0:	2007      	movs	r0, #7
   1aee2:	e02e      	b.n	1af42 <os_arch_os_init+0x6e>
            NVIC->IP[i] = -1;
   1aee4:	f104 4560 	add.w	r5, r4, #3758096384	; 0xe0000000
   1aee8:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
   1aeec:	26ff      	movs	r6, #255	; 0xff
   1aeee:	f885 6300 	strb.w	r6, [r5, #768]	; 0x300
        for (i = 0; i < sizeof(NVIC->IP); i++) {
   1aef2:	3401      	adds	r4, #1
   1aef4:	2cef      	cmp	r4, #239	; 0xef
   1aef6:	d9f5      	bls.n	1aee4 <os_arch_os_init+0x10>
         * Install default interrupt handler for all interrupts except Reset,
         * which'll print out system state at the time of the interrupt, and
         * few other regs which should help in trying to figure out what went
         * wrong.
         */
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1aef8:	f06f 040d 	mvn.w	r4, #13
   1aefc:	e007      	b.n	1af0e <os_arch_os_init+0x3a>
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
            NVIC_SetVector(i, (uint32_t)os_default_irq_asm);
   1aefe:	b265      	sxtb	r5, r4
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1af00:	4e12      	ldr	r6, [pc, #72]	; (1af4c <os_arch_os_init+0x78>)
   1af02:	68b6      	ldr	r6, [r6, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1af04:	3510      	adds	r5, #16
   1af06:	4f12      	ldr	r7, [pc, #72]	; (1af50 <os_arch_os_init+0x7c>)
   1af08:	f846 7025 	str.w	r7, [r6, r5, lsl #2]
             i < NVIC_NUM_VECTORS - NVIC_USER_IRQ_OFFSET; i++) {
   1af0c:	3401      	adds	r4, #1
        for (i = -NVIC_USER_IRQ_OFFSET + 2;
   1af0e:	2c25      	cmp	r4, #37	; 0x25
   1af10:	ddf5      	ble.n	1aefe <os_arch_os_init+0x2a>
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1af12:	4c0e      	ldr	r4, [pc, #56]	; (1af4c <os_arch_os_init+0x78>)
   1af14:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1af16:	4e0f      	ldr	r6, [pc, #60]	; (1af54 <os_arch_os_init+0x80>)
   1af18:	62ee      	str	r6, [r5, #44]	; 0x2c
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1af1a:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1af1c:	4e0e      	ldr	r6, [pc, #56]	; (1af58 <os_arch_os_init+0x84>)
   1af1e:	63ae      	str	r6, [r5, #56]	; 0x38
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1af20:	68a5      	ldr	r5, [r4, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1af22:	4e0e      	ldr	r6, [pc, #56]	; (1af5c <os_arch_os_init+0x88>)
   1af24:	63ee      	str	r6, [r5, #60]	; 0x3c
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1af26:	25e0      	movs	r5, #224	; 0xe0
   1af28:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
   1af2c:	2520      	movs	r5, #32
   1af2e:	77e5      	strb	r5, [r4, #31]
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1af30:	f3ef 8414 	mrs	r4, CONTROL

        /* Set the SVC interrupt to priority 0 (highest configurable) */
        NVIC_SetPriority(SVCall_IRQn, SVC_PRIO);

        /* Check if privileged or not */
        if ((__get_CONTROL() & 1) == 0) {
   1af34:	f014 0f01 	tst.w	r4, #1
   1af38:	d004      	beq.n	1af44 <os_arch_os_init+0x70>
    SVC_Call(os_arch_init);
   1af3a:	f8df c024 	ldr.w	ip, [pc, #36]	; 1af60 <os_arch_os_init+0x8c>
   1af3e:	df00      	svc	0
        err = OS_OK;
   1af40:	2000      	movs	r0, #0
            svc_os_arch_init();
        }
    }

    return err;
}
   1af42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            os_arch_init();
   1af44:	f7ff ffba 	bl	1aebc <os_arch_init>
        err = OS_OK;
   1af48:	2000      	movs	r0, #0
   1af4a:	e7fa      	b.n	1af42 <os_arch_os_init+0x6e>
   1af4c:	e000ed00 	.word	0xe000ed00
   1af50:	0001b0a7 	.word	0x0001b0a7
   1af54:	0001b00f 	.word	0x0001b00f
   1af58:	0001b055 	.word	0x0001b055
   1af5c:	0001b09b 	.word	0x0001b09b
   1af60:	0001aebd 	.word	0x0001aebd

0001af64 <os_arch_start>:

uint32_t
os_arch_start(void)
{
   1af64:	b510      	push	{r4, lr}
    struct os_task *t;

    /* Get the highest priority ready to run to set the current task */
    t = os_sched_next_task();
   1af66:	f7ff fd73 	bl	1aa50 <os_sched_next_task>
   1af6a:	4604      	mov	r4, r0
    os_sched_set_current_task(t);
   1af6c:	f7ff fca8 	bl	1a8c0 <os_sched_set_current_task>

    /* Adjust PSP so it looks like this task just took an exception */
    __set_PSP((uint32_t)t->t_stackptr + offsetof(struct stack_frame, r0));
   1af70:	6823      	ldr	r3, [r4, #0]
   1af72:	3324      	adds	r3, #36	; 0x24
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1af74:	f383 8809 	msr	PSP, r3

    /* Intitialize and start system clock timer */
    os_tick_init(OS_TICKS_PER_SEC, OS_TICK_PRIO);
   1af78:	2106      	movs	r1, #6
   1af7a:	2080      	movs	r0, #128	; 0x80
   1af7c:	f000 fde8 	bl	1bb50 <os_tick_init>

    /* Mark the OS as started, right before we run our first task */
    g_os_started = 1;
   1af80:	4b03      	ldr	r3, [pc, #12]	; (1af90 <os_arch_start+0x2c>)
   1af82:	2201      	movs	r2, #1
   1af84:	601a      	str	r2, [r3, #0]

    /* Perform context switch */
    os_arch_ctx_sw(t);
   1af86:	4620      	mov	r0, r4
   1af88:	f7ff ff60 	bl	1ae4c <os_arch_ctx_sw>

    return (uint32_t)(t->t_arg);
}
   1af8c:	69a0      	ldr	r0, [r4, #24]
   1af8e:	bd10      	pop	{r4, pc}
   1af90:	2000d688 	.word	0x2000d688

0001af94 <os_arch_os_start>:
 *
 * @return os_error_t
 */
os_error_t
os_arch_os_start(void)
{
   1af94:	b510      	push	{r4, lr}
     * privileged or un-privileged mode.
     *
     * We switch to using "empty" part of idle task's stack until
     * the svc_os_arch_start() executes SVC, and we will never return.
     */
    os_set_env(g_idle_task.t_stackptr - 1);
   1af96:	4814      	ldr	r0, [pc, #80]	; (1afe8 <os_arch_os_start+0x54>)
   1af98:	6800      	ldr	r0, [r0, #0]
   1af9a:	3804      	subs	r0, #4
   1af9c:	f000 f82a 	bl	1aff4 <os_set_env>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1afa0:	f3ef 8405 	mrs	r4, IPSR

    err = OS_ERR_IN_ISR;
    if (__get_IPSR() == 0) {
   1afa4:	b9d4      	cbnz	r4, 1afdc <os_arch_os_start+0x48>
  __ASM volatile ("MRS %0, control" : "=r" (result) );
   1afa6:	f3ef 8414 	mrs	r4, CONTROL
         * The following switch statement is really just a sanity check to
         * insure that the os initialization routine was called prior to the
         * os start routine.
         */
        err = OS_OK;
        switch (__get_CONTROL() & 0x03) {
   1afaa:	f004 0403 	and.w	r4, r4, #3
   1afae:	2c03      	cmp	r4, #3
   1afb0:	d808      	bhi.n	1afc4 <os_arch_os_start+0x30>
   1afb2:	e8df f004 	tbb	[pc, r4]
   1afb6:	1515      	.short	0x1515
   1afb8:	0c02      	.short	0x0c02
        case 0x02:
            /*
             * We are running in Privileged Thread mode w/SP = PSP but we
             * are supposed to be un-privileged.
             */
            if ((os_flags & 1) == OS_RUN_UNPRIV) {
   1afba:	4c0c      	ldr	r4, [pc, #48]	; (1afec <os_arch_os_start+0x58>)
   1afbc:	6824      	ldr	r4, [r4, #0]
   1afbe:	f014 0f01 	tst.w	r4, #1
   1afc2:	d10f      	bne.n	1afe4 <os_arch_os_start+0x50>
    SVC_Call(os_arch_start);
   1afc4:	f8df c028 	ldr.w	ip, [pc, #40]	; 1aff0 <os_arch_os_start+0x5c>
   1afc8:	df00      	svc	0
   1afca:	2000      	movs	r0, #0
            svc_os_arch_start();
        }
    }

    return err;
}
   1afcc:	bd10      	pop	{r4, pc}
            if  ((os_flags & 1) == OS_RUN_PRIV) {
   1afce:	4c07      	ldr	r4, [pc, #28]	; (1afec <os_arch_os_start+0x58>)
   1afd0:	6824      	ldr	r4, [r4, #0]
   1afd2:	f014 0f01 	tst.w	r4, #1
   1afd6:	d1f5      	bne.n	1afc4 <os_arch_os_start+0x30>
                err = OS_ERR_PRIV;
   1afd8:	2008      	movs	r0, #8
   1afda:	e7f7      	b.n	1afcc <os_arch_os_start+0x38>
    err = OS_ERR_IN_ISR;
   1afdc:	2007      	movs	r0, #7
   1afde:	e7f5      	b.n	1afcc <os_arch_os_start+0x38>
            err = OS_ERR_PRIV;
   1afe0:	2008      	movs	r0, #8
   1afe2:	e7f3      	b.n	1afcc <os_arch_os_start+0x38>
                err = OS_ERR_PRIV;
   1afe4:	2008      	movs	r0, #8
   1afe6:	e7f1      	b.n	1afcc <os_arch_os_start+0x38>
   1afe8:	2000d5e8 	.word	0x2000d5e8
   1afec:	2000d1e8 	.word	0x2000d1e8
   1aff0:	0001af65 	.word	0x0001af65

0001aff4 <os_set_env>:
        .global os_set_env
os_set_env:
        .fnstart
        .cantunwind

        MSR     PSP,R0
   1aff4:	f380 8809 	msr	PSP, r0
        LDR     R0,=os_flags
   1aff8:	4832      	ldr	r0, [pc, #200]	; (1b0c4 <os_default_irq_asm+0x1e>)
        LDRB    R0,[R0]
   1affa:	7800      	ldrb	r0, [r0, #0]
        ADDS    R0, R0, #2
   1affc:	3002      	adds	r0, #2
        MSR     CONTROL,R0
   1affe:	f380 8814 	msr	CONTROL, r0
        ISB
   1b002:	f3bf 8f6f 	isb	sy
        BX      LR
   1b006:	4770      	bx	lr

0001b008 <os_arch_init_task_stack>:
        .type   os_arch_init_task_stack, %function
        .global os_arch_init_task_stack
os_arch_init_task_stack:
        .fnstart

        STMIA   R0,{R4-R11}
   1b008:	e880 0ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp}
        BX      LR
   1b00c:	4770      	bx	lr

0001b00e <SVC_Handler>:
        PUSH    {R4,LR}
        BL      os_trace_isr_enter
        POP     {R4,LR}
#endif

        MRS     R0,PSP                  /* Read PSP */
   1b00e:	f3ef 8009 	mrs	r0, PSP
        LDR     R1,[R0,#24]             /* Read Saved PC from Stack */
   1b012:	6981      	ldr	r1, [r0, #24]
        LDRB    R1,[R1,#-2]             /* Load SVC Number */
   1b014:	f811 1c02 	ldrb.w	r1, [r1, #-2]
        CBNZ    R1,SVC_User
   1b018:	b951      	cbnz	r1, 1b030 <SVC_User>

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b01a:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b01e:	b510      	push	{r4, lr}
        BLX     R12                     /* Call SVC Function */
   1b020:	47e0      	blx	ip
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

        MRS     R12,PSP                 /* Read PSP */
   1b026:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R2}             /* Store return values */
   1b02a:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR                      /* Return from interrupt */
   1b02e:	4770      	bx	lr

0001b030 <SVC_User>:

        /*------------------- User SVC ------------------------------*/
SVC_User:
        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b030:	b510      	push	{r4, lr}
        LDR     R2,=SVC_Count
   1b032:	4a25      	ldr	r2, [pc, #148]	; (1b0c8 <os_default_irq_asm+0x22>)
        LDR     R2,[R2]
   1b034:	6812      	ldr	r2, [r2, #0]
        CMP     R1,R2
   1b036:	4291      	cmp	r1, r2
        BHI     SVC_Done                /* Overflow */
   1b038:	d809      	bhi.n	1b04e <SVC_Done>

        LDR     R4,=SVC_Table-4
   1b03a:	4c24      	ldr	r4, [pc, #144]	; (1b0cc <os_default_irq_asm+0x26>)
        LDR     R4,[R4,R1,LSL #2]       /* Load SVC Function Address */
   1b03c:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]

        LDM     R0,{R0-R3,R12}          /* Read R0-R3,R12 from stack */
   1b040:	e890 100f 	ldmia.w	r0, {r0, r1, r2, r3, ip}
        BLX     R4                      /* Call SVC Function */
   1b044:	47a0      	blx	r4

        MRS     R12,PSP
   1b046:	f3ef 8c09 	mrs	ip, PSP
        STM     R12,{R0-R3}             /* Function return values */
   1b04a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

0001b04e <SVC_Done>:
SVC_Done:
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b04e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR                      /* Return from interrupt */
   1b052:	4770      	bx	lr

0001b054 <PendSV_Handler>:
        .global PendSV_Handler
PendSV_Handler:
        .fnstart
        .cantunwind

        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b054:	4b1e      	ldr	r3, [pc, #120]	; (1b0d0 <os_default_irq_asm+0x2a>)
        LDR     R2,[R3]                 /* Store in R2 */
   1b056:	681a      	ldr	r2, [r3, #0]
        LDR     R3,=g_current_task      /* Get current task */
   1b058:	4b1e      	ldr	r3, [pc, #120]	; (1b0d4 <os_default_irq_asm+0x2e>)
        LDR     R1,[R3]                 /* Current task in R1 */
   1b05a:	6819      	ldr	r1, [r3, #0]
        CMP     R1,R2
   1b05c:	4291      	cmp	r1, r2
        IT      EQ
   1b05e:	bf08      	it	eq
        BXEQ    LR                      /* RETI, no task switch */
   1b060:	4770      	bxeq	lr

        MRS     R12,PSP                 /* Read PSP */
   1b062:	f3ef 8c09 	mrs	ip, PSP
#if MYNEWT_VAL(HARDFLOAT)
        TST     LR,#0x10                /* is it extended frame? */
   1b066:	f01e 0f10 	tst.w	lr, #16
        IT      EQ
   1b06a:	bf08      	it	eq
        VSTMDBEQ R12!,{S16-S31}         /* yes; push the regs */
   1b06c:	ed2c 8a10 	vstmdbeq	ip!, {s16-s31}
        STMDB   R12!,{R4-R11,LR}        /* Save Old context */
   1b070:	e92c 4ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#else
        STMDB   R12!,{R4-R11}           /* Save Old context */
#endif
        STR     R12,[R1,#0]             /* Update stack pointer in current task */
   1b074:	f8c1 c000 	str.w	ip, [r1]
        STR     R2,[R3]                 /* g_current_task = highest ready */
   1b078:	601a      	str	r2, [r3, #0]

        LDR     R12,[R2,#0]             /* get stack pointer of task we will start */
   1b07a:	f8d2 c000 	ldr.w	ip, [r2]
#if MYNEWT_VAL(HARDFLOAT)
        LDMIA   R12!,{R4-R11,LR}        /* Restore New Context */
   1b07e:	e8bc 4ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        TST     LR,#0x10                /* is it extended frame? */
   1b082:	f01e 0f10 	tst.w	lr, #16
        ITTE    EQ
   1b086:	bf06      	itte	eq
        VLDMIAEQ R12!,{S16-S31}         /* yes; pull the regs */
   1b088:	ecbc 8a10 	vldmiaeq	ip!, {s16-s31}
        MVNEQ   LR,#~0xFFFFFFED         /* BX treats it as extended */
   1b08c:	f06f 0e12 	mvneq.w	lr, #18
        MVNNE   LR,#~0xFFFFFFFD         /* BX treats is as basic frame */
   1b090:	f06f 0e02 	mvnne.w	lr, #2
#else
        LDMIA   R12!,{R4-R11}           /* Restore New Context */
#endif
        MSR     PSP,R12                 /* Write PSP */
   1b094:	f38c 8809 	msr	PSP, ip
        MOV     R0, R2
        BL      os_trace_task_start_exec
        POP     {R4,LR}
#endif

        BX      LR                      /* Return to Thread Mode */
   1b098:	4770      	bx	lr

0001b09a <SysTick_Handler>:
        .global SysTick_Handler
SysTick_Handler:
        .fnstart
        .cantunwind

        PUSH    {R4,LR}                 /* Save EXC_RETURN */
   1b09a:	b510      	push	{r4, lr}
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_enter
#endif
        BL      timer_handler
   1b09c:	f7ff fed1 	bl	1ae42 <timer_handler>
#if MYNEWT_VAL(OS_SYSVIEW)
        BL      os_trace_isr_exit
#endif
        POP     {R4,LR}                 /* Restore EXC_RETURN */
   1b0a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        BX      LR
   1b0a4:	4770      	bx	lr

0001b0a6 <os_default_irq_asm>:

        /*
         * LR = 0xfffffff9 if we were using MSP as SP
         * LR = 0xfffffffd if we were using PSP as SP
         */
        TST     LR,#4
   1b0a6:	f01e 0f04 	tst.w	lr, #4
        ITE     EQ
   1b0aa:	bf0c      	ite	eq
        MRSEQ   R3,MSP
   1b0ac:	f3ef 8308 	mrseq	r3, MSP
        MRSNE   R3,PSP
   1b0b0:	f3ef 8309 	mrsne	r3, PSP
        PUSH    {R3-R11,LR}
   1b0b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        MOV     R0, SP
   1b0b8:	4668      	mov	r0, sp
        BL      os_default_irq
   1b0ba:	f7fe fc61 	bl	19980 <os_default_irq>
        POP     {R3-R11,LR}                 /* Restore EXC_RETURN */
   1b0be:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        PUSH    {R4,LR}
        BL      os_trace_isr_exit
        POP     {R4,LR}
#endif

        BX      LR
   1b0c2:	4770      	bx	lr
        LDR     R0,=os_flags
   1b0c4:	2000d1e8 	.word	0x2000d1e8
        LDR     R2,=SVC_Count
   1b0c8:	00000000 	.word	0x00000000
        LDR     R4,=SVC_Table-4
   1b0cc:	fffffffc 	.word	0xfffffffc
        LDR     R3,=g_os_run_list       /* Get highest priority task ready to run */
   1b0d0:	20000114 	.word	0x20000114
        LDR     R3,=g_current_task      /* Get current task */
   1b0d4:	2000d6b0 	.word	0x2000d6b0

0001b0d8 <memcmp>:
int memcmp(const void *s1, const void *s2, size_t n)
{
    int d = 0;

#if defined(ARCH_cortex_m3) || defined(ARCH_cortex_m4) || defined(ARCH_cortex_m7)
    asm (".syntax unified                   \n"
   1b0d8:	b470      	push	{r4, r5, r6}
   1b0da:	f04f 0500 	mov.w	r5, #0
   1b0de:	f022 0603 	bic.w	r6, r2, #3
   1b0e2:	e005      	b.n	1b0f0 <test1>

0001b0e4 <loop1>:
   1b0e4:	5943      	ldr	r3, [r0, r5]
   1b0e6:	594c      	ldr	r4, [r1, r5]
   1b0e8:	42a3      	cmp	r3, r4
   1b0ea:	d104      	bne.n	1b0f6 <res1>
   1b0ec:	f105 0504 	add.w	r5, r5, #4

0001b0f0 <test1>:
   1b0f0:	42b5      	cmp	r5, r6
   1b0f2:	d1f7      	bne.n	1b0e4 <loop1>
   1b0f4:	e00d      	b.n	1b112 <test2>

0001b0f6 <res1>:
   1b0f6:	ba1b      	rev	r3, r3
   1b0f8:	ba24      	rev	r4, r4
   1b0fa:	1b1b      	subs	r3, r3, r4
   1b0fc:	bf8c      	ite	hi
   1b0fe:	2301      	movhi	r3, #1
   1b100:	f04f 33ff 	movls.w	r3, #4294967295	; 0xffffffff
   1b104:	e009      	b.n	1b11a <done>

0001b106 <loop2>:
   1b106:	5d43      	ldrb	r3, [r0, r5]
   1b108:	5d4c      	ldrb	r4, [r1, r5]
   1b10a:	1b1b      	subs	r3, r3, r4
   1b10c:	d105      	bne.n	1b11a <done>
   1b10e:	f105 0501 	add.w	r5, r5, #1

0001b112 <test2>:
   1b112:	4295      	cmp	r5, r2
   1b114:	d1f7      	bne.n	1b106 <loop2>
   1b116:	f04f 0300 	mov.w	r3, #0

0001b11a <done>:
   1b11a:	4618      	mov	r0, r3
   1b11c:	bc70      	pop	{r4, r5, r6}
			break;
	}
#endif

	return d;
}
   1b11e:	4770      	bx	lr

0001b120 <memcpy>:
#if defined(__ARM_FEATURE_UNALIGNED)
        /*
         * We can speed up a bit by moving 32-bit words if unaligned access is
         * supported (e.g. Cortex-M3/4/7/33).
         */
        asm (".syntax unified           \n"
   1b120:	e001      	b.n	1b126 <test1>

0001b122 <loop1>:
   1b122:	588b      	ldr	r3, [r1, r2]
   1b124:	5083      	str	r3, [r0, r2]

0001b126 <test1>:
   1b126:	3a04      	subs	r2, #4
   1b128:	d5fb      	bpl.n	1b122 <loop1>
   1b12a:	f102 0204 	add.w	r2, r2, #4
             "       bpl  loop1         \n"
             "       add  r2, #4        \n"
            );
#endif

        asm (".syntax unified           \n"
   1b12e:	e001      	b.n	1b134 <test2>

0001b130 <loop2>:
   1b130:	5c8b      	ldrb	r3, [r1, r2]
   1b132:	5483      	strb	r3, [r0, r2]

0001b134 <test2>:
   1b134:	3a01      	subs	r2, #1
   1b136:	d5fb      	bpl.n	1b130 <loop2>
		*q++ = *p++;
	}
#endif

	return dst;
}
   1b138:	4770      	bx	lr

0001b13a <memset>:
#if defined(__arm__)
#include <mcu/cmsis_nvic.h>
#endif

void *memset(void *dst, int c, size_t n)
{
   1b13a:	b430      	push	{r4, r5}
	asm volatile ("cld ; rep ; stosq ; movl %3,%%ecx ; rep ; stosb"
		      :"+c" (nq), "+D" (q)
		      : "a" ((unsigned char)c * 0x0101010101010101U),
			"r" ((uint32_t) n & 7));
#elif defined(__arm__)
    asm volatile (".syntax unified                          \n"
   1b13c:	4605      	mov	r5, r0
   1b13e:	b2c9      	uxtb	r1, r1
   1b140:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   1b144:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   1b148:	18ab      	adds	r3, r5, r2
   1b14a:	2403      	movs	r4, #3
   1b14c:	4023      	ands	r3, r4
   1b14e:	1ad3      	subs	r3, r2, r3
   1b150:	d40b      	bmi.n	1b16a <memset+0x30>
   1b152:	e001      	b.n	1b158 <memset+0x1e>
   1b154:	3a01      	subs	r2, #1
   1b156:	54a9      	strb	r1, [r5, r2]
   1b158:	429a      	cmp	r2, r3
   1b15a:	d1fb      	bne.n	1b154 <memset+0x1a>
   1b15c:	e000      	b.n	1b160 <memset+0x26>
   1b15e:	50a9      	str	r1, [r5, r2]
   1b160:	3a04      	subs	r2, #4
   1b162:	d5fc      	bpl.n	1b15e <memset+0x24>
   1b164:	3204      	adds	r2, #4
   1b166:	e000      	b.n	1b16a <memset+0x30>
   1b168:	54a9      	strb	r1, [r5, r2]
   1b16a:	3a01      	subs	r2, #1
   1b16c:	d5fc      	bpl.n	1b168 <memset+0x2e>
		*q++ = c;
	}
#endif

	return dst;
}
   1b16e:	bc30      	pop	{r4, r5}
   1b170:	4770      	bx	lr

0001b172 <strcmp>:
 */

#include <string.h>

int strcmp(const char *s1, const char *s2)
{
   1b172:	b430      	push	{r4, r5}
   1b174:	4602      	mov	r2, r0
	const unsigned char *c2 = (const unsigned char *)s2;
	unsigned char ch;
	int d = 0;

	while (1) {
		d = (int)(ch = *c1++) - (int)*c2++;
   1b176:	1c55      	adds	r5, r2, #1
   1b178:	7813      	ldrb	r3, [r2, #0]
   1b17a:	1c4c      	adds	r4, r1, #1
   1b17c:	7808      	ldrb	r0, [r1, #0]
		if (d || !ch)
   1b17e:	1a18      	subs	r0, r3, r0
   1b180:	d103      	bne.n	1b18a <strcmp+0x18>
		d = (int)(ch = *c1++) - (int)*c2++;
   1b182:	462a      	mov	r2, r5
   1b184:	4621      	mov	r1, r4
		if (d || !ch)
   1b186:	2b00      	cmp	r3, #0
   1b188:	d1f5      	bne.n	1b176 <strcmp+0x4>
			break;
	}

	return d;
}
   1b18a:	bc30      	pop	{r4, r5}
   1b18c:	4770      	bx	lr

0001b18e <strlen>:

#include <string.h>

size_t strlen(const char *s)
{
	const char *ss = s;
   1b18e:	4603      	mov	r3, r0
	while (*ss)
   1b190:	e000      	b.n	1b194 <strlen+0x6>
		ss++;
   1b192:	3301      	adds	r3, #1
	while (*ss)
   1b194:	781a      	ldrb	r2, [r3, #0]
   1b196:	2a00      	cmp	r2, #0
   1b198:	d1fb      	bne.n	1b192 <strlen+0x4>
	return ss - s;
}
   1b19a:	1a18      	subs	r0, r3, r0
   1b19c:	4770      	bx	lr

0001b19e <ui2a>:
    char base;  /**<  number base (e.g.: 8, 10, 16) */
    char *bf;           /**<  Buffer to output */
};

static void ui2a(unsigned long long int num, struct param *p)
{
   1b19e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b1a2:	b082      	sub	sp, #8
   1b1a4:	e9cd 0100 	strd	r0, r1, [sp]
   1b1a8:	4691      	mov	r9, r2
    int n = 0;
    unsigned long long int d = 1;
    char *bf = p->bf;
   1b1aa:	f8d2 8004 	ldr.w	r8, [r2, #4]
    unsigned long long int d = 1;
   1b1ae:	2401      	movs	r4, #1
   1b1b0:	2500      	movs	r5, #0
    while (num / d >= p->base)
   1b1b2:	e004      	b.n	1b1be <ui2a+0x20>
        d *= p->base;
   1b1b4:	fb06 f305 	mul.w	r3, r6, r5
   1b1b8:	fba4 4506 	umull	r4, r5, r4, r6
   1b1bc:	441d      	add	r5, r3
    while (num / d >= p->base)
   1b1be:	4622      	mov	r2, r4
   1b1c0:	462b      	mov	r3, r5
   1b1c2:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b1c6:	f001 febd 	bl	1cf44 <__aeabi_uldivmod>
   1b1ca:	f899 6003 	ldrb.w	r6, [r9, #3]
   1b1ce:	2700      	movs	r7, #0
   1b1d0:	42b9      	cmp	r1, r7
   1b1d2:	bf08      	it	eq
   1b1d4:	42b0      	cmpeq	r0, r6
   1b1d6:	d2ed      	bcs.n	1b1b4 <ui2a+0x16>
    int n = 0;
   1b1d8:	f04f 0a00 	mov.w	sl, #0
   1b1dc:	e007      	b.n	1b1ee <ui2a+0x50>
    while (d != 0) {
        unsigned long long  dgt = num / d;
        num %= d;
        d /= p->base;
        if (n || dgt > 0 || d == 0) {
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b1de:	2330      	movs	r3, #48	; 0x30
   1b1e0:	441e      	add	r6, r3
   1b1e2:	f888 6000 	strb.w	r6, [r8]
            ++n;
   1b1e6:	f10a 0a01 	add.w	sl, sl, #1
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b1ea:	f108 0801 	add.w	r8, r8, #1
    while (d != 0) {
   1b1ee:	ea54 0305 	orrs.w	r3, r4, r5
   1b1f2:	d02e      	beq.n	1b252 <ui2a+0xb4>
        unsigned long long  dgt = num / d;
   1b1f4:	4622      	mov	r2, r4
   1b1f6:	462b      	mov	r3, r5
   1b1f8:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b1fc:	f001 fea2 	bl	1cf44 <__aeabi_uldivmod>
   1b200:	4606      	mov	r6, r0
   1b202:	460f      	mov	r7, r1
        num %= d;
   1b204:	4622      	mov	r2, r4
   1b206:	462b      	mov	r3, r5
   1b208:	e9dd 0100 	ldrd	r0, r1, [sp]
   1b20c:	f001 fe9a 	bl	1cf44 <__aeabi_uldivmod>
   1b210:	e9cd 2300 	strd	r2, r3, [sp]
        d /= p->base;
   1b214:	f899 2003 	ldrb.w	r2, [r9, #3]
   1b218:	2300      	movs	r3, #0
   1b21a:	4620      	mov	r0, r4
   1b21c:	4629      	mov	r1, r5
   1b21e:	f001 fe91 	bl	1cf44 <__aeabi_uldivmod>
   1b222:	4604      	mov	r4, r0
   1b224:	460d      	mov	r5, r1
        if (n || dgt > 0 || d == 0) {
   1b226:	f1ba 0f00 	cmp.w	sl, #0
   1b22a:	d105      	bne.n	1b238 <ui2a+0x9a>
   1b22c:	ea56 0307 	orrs.w	r3, r6, r7
   1b230:	d102      	bne.n	1b238 <ui2a+0x9a>
   1b232:	ea54 0305 	orrs.w	r3, r4, r5
   1b236:	d1da      	bne.n	1b1ee <ui2a+0x50>
            *bf++ = dgt + (dgt < 10 ? '0' : (p->uc ? 'A' : 'a') - 10);
   1b238:	2f00      	cmp	r7, #0
   1b23a:	bf08      	it	eq
   1b23c:	2e0a      	cmpeq	r6, #10
   1b23e:	d3ce      	bcc.n	1b1de <ui2a+0x40>
   1b240:	f899 3002 	ldrb.w	r3, [r9, #2]
   1b244:	f013 0f04 	tst.w	r3, #4
   1b248:	d001      	beq.n	1b24e <ui2a+0xb0>
   1b24a:	2337      	movs	r3, #55	; 0x37
   1b24c:	e7c8      	b.n	1b1e0 <ui2a+0x42>
   1b24e:	2357      	movs	r3, #87	; 0x57
   1b250:	e7c6      	b.n	1b1e0 <ui2a+0x42>
        }
    }
    *bf = 0;
   1b252:	2300      	movs	r3, #0
   1b254:	f888 3000 	strb.w	r3, [r8]
}
   1b258:	b002      	add	sp, #8
   1b25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b25e <i2a>:

static void i2a(long long int num, struct param *p)
{
   1b25e:	b508      	push	{r3, lr}
    if (num < 0) {
   1b260:	2800      	cmp	r0, #0
   1b262:	f171 0300 	sbcs.w	r3, r1, #0
   1b266:	db02      	blt.n	1b26e <i2a+0x10>
        num = -num;
        p->sign = 1;
    }
    ui2a(num, p);
   1b268:	f7ff ff99 	bl	1b19e <ui2a>
}
   1b26c:	bd08      	pop	{r3, pc}
        num = -num;
   1b26e:	4240      	negs	r0, r0
   1b270:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
        p->sign = 1;
   1b274:	7893      	ldrb	r3, [r2, #2]
   1b276:	f043 0301 	orr.w	r3, r3, #1
   1b27a:	7093      	strb	r3, [r2, #2]
   1b27c:	e7f4      	b.n	1b268 <i2a+0xa>

0001b27e <a2d>:

static int a2d(char ch)
{
    if (ch >= '0' && ch <= '9')
   1b27e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b282:	b2db      	uxtb	r3, r3
   1b284:	2b09      	cmp	r3, #9
   1b286:	d90b      	bls.n	1b2a0 <a2d+0x22>
        return ch - '0';
    else if (ch >= 'a' && ch <= 'f')
   1b288:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   1b28c:	b2db      	uxtb	r3, r3
   1b28e:	2b05      	cmp	r3, #5
   1b290:	d908      	bls.n	1b2a4 <a2d+0x26>
        return ch - 'a' + 10;
    else if (ch >= 'A' && ch <= 'F')
   1b292:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   1b296:	b2db      	uxtb	r3, r3
   1b298:	2b05      	cmp	r3, #5
   1b29a:	d805      	bhi.n	1b2a8 <a2d+0x2a>
        return ch - 'A' + 10;
   1b29c:	3837      	subs	r0, #55	; 0x37
   1b29e:	4770      	bx	lr
        return ch - '0';
   1b2a0:	3830      	subs	r0, #48	; 0x30
   1b2a2:	4770      	bx	lr
        return ch - 'a' + 10;
   1b2a4:	3857      	subs	r0, #87	; 0x57
   1b2a6:	4770      	bx	lr
    else
        return -1;
   1b2a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   1b2ac:	4770      	bx	lr

0001b2ae <a2i>:

static char a2i(char ch, const char **src, int base, unsigned char *nump)
{
   1b2ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b2b2:	4605      	mov	r5, r0
   1b2b4:	4688      	mov	r8, r1
   1b2b6:	4617      	mov	r7, r2
   1b2b8:	4699      	mov	r9, r3
    const char *p = *src;
   1b2ba:	680c      	ldr	r4, [r1, #0]
    int num = 0;
   1b2bc:	2600      	movs	r6, #0
    int digit;
    while ((digit = a2d(ch)) >= 0) {
   1b2be:	4628      	mov	r0, r5
   1b2c0:	f7ff ffdd 	bl	1b27e <a2d>
   1b2c4:	2800      	cmp	r0, #0
   1b2c6:	db06      	blt.n	1b2d6 <a2i+0x28>
        if (digit > base)
   1b2c8:	42b8      	cmp	r0, r7
   1b2ca:	dc04      	bgt.n	1b2d6 <a2i+0x28>
            break;
        num = num * base + digit;
   1b2cc:	fb07 0606 	mla	r6, r7, r6, r0
        ch = *p++;
   1b2d0:	7825      	ldrb	r5, [r4, #0]
   1b2d2:	3401      	adds	r4, #1
   1b2d4:	e7f3      	b.n	1b2be <a2i+0x10>
    }
    *src = p;
   1b2d6:	f8c8 4000 	str.w	r4, [r8]
    *nump = num;
   1b2da:	f889 6000 	strb.w	r6, [r9]
    return ch;
}
   1b2de:	4628      	mov	r0, r5
   1b2e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001b2e4 <putf>:

static int putf(FILE *putp, char c)
{
   1b2e4:	b500      	push	{lr}
   1b2e6:	b083      	sub	sp, #12
	return fwrite(s, 1, strlen(s), stdout) + fwrite("\n", 1, 1, stdout);
}

__extern_inline int fputc(int c, FILE *f)
{
	unsigned char ch = c;
   1b2e8:	f88d 1007 	strb.w	r1, [sp, #7]
    if (stream->vmt->write == NULL) return 0;
   1b2ec:	6803      	ldr	r3, [r0, #0]
   1b2ee:	681b      	ldr	r3, [r3, #0]
   1b2f0:	b14b      	cbz	r3, 1b306 <putf+0x22>
    return stream->vmt->write(stream, (char*)buf, size*nmemb) / size;
   1b2f2:	2201      	movs	r2, #1
   1b2f4:	f10d 0107 	add.w	r1, sp, #7
   1b2f8:	4798      	blx	r3
	return fwrite(&ch, 1, 1, f) == 1 ? ch : EOF;
   1b2fa:	2801      	cmp	r0, #1
   1b2fc:	d005      	beq.n	1b30a <putf+0x26>
    if (fputc(c, putp) == EOF)
        return 0;
   1b2fe:	2000      	movs	r0, #0
    else
        return 1;
}
   1b300:	b003      	add	sp, #12
   1b302:	f85d fb04 	ldr.w	pc, [sp], #4
        return 0;
   1b306:	2000      	movs	r0, #0
   1b308:	e7fa      	b.n	1b300 <putf+0x1c>
        return 1;
   1b30a:	2001      	movs	r0, #1
   1b30c:	e7f8      	b.n	1b300 <putf+0x1c>
	...

0001b310 <putchw>:

static unsigned putchw(FILE *putp, struct param *p)
{
   1b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b314:	4606      	mov	r6, r0
   1b316:	460f      	mov	r7, r1
    unsigned written = 0;
    char ch;
    int n = p->width;
   1b318:	780c      	ldrb	r4, [r1, #0]
    char *bf = p->bf;
   1b31a:	684b      	ldr	r3, [r1, #4]

    /* Number of filling characters */
    while (*bf++ && n > 0)
   1b31c:	e001      	b.n	1b322 <putchw+0x12>
        n--;
   1b31e:	3c01      	subs	r4, #1
    while (*bf++ && n > 0)
   1b320:	4613      	mov	r3, r2
   1b322:	1c5a      	adds	r2, r3, #1
   1b324:	781b      	ldrb	r3, [r3, #0]
   1b326:	b10b      	cbz	r3, 1b32c <putchw+0x1c>
   1b328:	2c00      	cmp	r4, #0
   1b32a:	dcf8      	bgt.n	1b31e <putchw+0xe>
    if (p->sign)
   1b32c:	78bb      	ldrb	r3, [r7, #2]
   1b32e:	f013 0f01 	tst.w	r3, #1
   1b332:	d000      	beq.n	1b336 <putchw+0x26>
        n--;
   1b334:	3c01      	subs	r4, #1
    if (p->alt && p->base == 16)
   1b336:	887b      	ldrh	r3, [r7, #2]
   1b338:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b33c:	b29b      	uxth	r3, r3
   1b33e:	f241 0202 	movw	r2, #4098	; 0x1002
   1b342:	4293      	cmp	r3, r2
   1b344:	d01c      	beq.n	1b380 <putchw+0x70>
        n -= 2;
    else if (p->alt && p->base == 8)
   1b346:	f640 0202 	movw	r2, #2050	; 0x802
   1b34a:	4293      	cmp	r3, r2
   1b34c:	d01a      	beq.n	1b384 <putchw+0x74>
        n--;

    /* Unless left-aligned, fill with space, before alternate or sign */
    if (!p->lz && !p->left) {
   1b34e:	683b      	ldr	r3, [r7, #0]
   1b350:	4d35      	ldr	r5, [pc, #212]	; (1b428 <putchw+0x118>)
   1b352:	401d      	ands	r5, r3
   1b354:	b1f5      	cbz	r5, 1b394 <putchw+0x84>
    unsigned written = 0;
   1b356:	2500      	movs	r5, #0
        while (n-- > 0)
            written += putf(putp, ' ');
    }

    /* print sign */
    if (p->sign)
   1b358:	78bb      	ldrb	r3, [r7, #2]
   1b35a:	f013 0f01 	tst.w	r3, #1
   1b35e:	d11f      	bne.n	1b3a0 <putchw+0x90>
        written += putf(putp, '-');

    /* Alternate */
    if (p->alt && p->base == 16) {
   1b360:	887b      	ldrh	r3, [r7, #2]
   1b362:	f023 03fd 	bic.w	r3, r3, #253	; 0xfd
   1b366:	b29b      	uxth	r3, r3
   1b368:	f241 0202 	movw	r2, #4098	; 0x1002
   1b36c:	4293      	cmp	r3, r2
   1b36e:	d01d      	beq.n	1b3ac <putchw+0x9c>
        written += putf(putp, '0');
        written += putf(putp, (p->uc ? 'X' : 'x'));
    } else if (p->alt && p->base == 8) {
   1b370:	f640 0202 	movw	r2, #2050	; 0x802
   1b374:	4293      	cmp	r3, r2
   1b376:	d02a      	beq.n	1b3ce <putchw+0xbe>
        written += putf(putp, '0');
    }

    /* Fill with zeros, after alternate or sign */
    if (p->lz) {
   1b378:	787b      	ldrb	r3, [r7, #1]
   1b37a:	bba3      	cbnz	r3, 1b3e6 <putchw+0xd6>
        while (n-- > 0)
            written += putf(putp, '0');
    }

    /* Put actual buffer */
    bf = p->bf;
   1b37c:	687b      	ldr	r3, [r7, #4]
    while ((ch = *bf++))
   1b37e:	e03d      	b.n	1b3fc <putchw+0xec>
        n -= 2;
   1b380:	3c02      	subs	r4, #2
   1b382:	e7e4      	b.n	1b34e <putchw+0x3e>
        n--;
   1b384:	3c01      	subs	r4, #1
   1b386:	e7e2      	b.n	1b34e <putchw+0x3e>
            written += putf(putp, ' ');
   1b388:	2120      	movs	r1, #32
   1b38a:	4630      	mov	r0, r6
   1b38c:	f7ff ffaa 	bl	1b2e4 <putf>
   1b390:	4405      	add	r5, r0
        while (n-- > 0)
   1b392:	4644      	mov	r4, r8
   1b394:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b398:	2c00      	cmp	r4, #0
   1b39a:	dcf5      	bgt.n	1b388 <putchw+0x78>
   1b39c:	4644      	mov	r4, r8
   1b39e:	e7db      	b.n	1b358 <putchw+0x48>
        written += putf(putp, '-');
   1b3a0:	212d      	movs	r1, #45	; 0x2d
   1b3a2:	4630      	mov	r0, r6
   1b3a4:	f7ff ff9e 	bl	1b2e4 <putf>
   1b3a8:	4405      	add	r5, r0
   1b3aa:	e7d9      	b.n	1b360 <putchw+0x50>
        written += putf(putp, '0');
   1b3ac:	2130      	movs	r1, #48	; 0x30
   1b3ae:	4630      	mov	r0, r6
   1b3b0:	f7ff ff98 	bl	1b2e4 <putf>
   1b3b4:	4405      	add	r5, r0
        written += putf(putp, (p->uc ? 'X' : 'x'));
   1b3b6:	78bb      	ldrb	r3, [r7, #2]
   1b3b8:	f013 0f04 	tst.w	r3, #4
   1b3bc:	d005      	beq.n	1b3ca <putchw+0xba>
   1b3be:	2158      	movs	r1, #88	; 0x58
   1b3c0:	4630      	mov	r0, r6
   1b3c2:	f7ff ff8f 	bl	1b2e4 <putf>
   1b3c6:	4405      	add	r5, r0
   1b3c8:	e7d6      	b.n	1b378 <putchw+0x68>
   1b3ca:	2178      	movs	r1, #120	; 0x78
   1b3cc:	e7f8      	b.n	1b3c0 <putchw+0xb0>
        written += putf(putp, '0');
   1b3ce:	2130      	movs	r1, #48	; 0x30
   1b3d0:	4630      	mov	r0, r6
   1b3d2:	f7ff ff87 	bl	1b2e4 <putf>
   1b3d6:	4405      	add	r5, r0
   1b3d8:	e7ce      	b.n	1b378 <putchw+0x68>
            written += putf(putp, '0');
   1b3da:	2130      	movs	r1, #48	; 0x30
   1b3dc:	4630      	mov	r0, r6
   1b3de:	f7ff ff81 	bl	1b2e4 <putf>
   1b3e2:	4405      	add	r5, r0
        while (n-- > 0)
   1b3e4:	4644      	mov	r4, r8
   1b3e6:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
   1b3ea:	2c00      	cmp	r4, #0
   1b3ec:	dcf5      	bgt.n	1b3da <putchw+0xca>
   1b3ee:	4644      	mov	r4, r8
   1b3f0:	e7c4      	b.n	1b37c <putchw+0x6c>
        written += putf(putp, ch);
   1b3f2:	4630      	mov	r0, r6
   1b3f4:	f7ff ff76 	bl	1b2e4 <putf>
   1b3f8:	4405      	add	r5, r0
    while ((ch = *bf++))
   1b3fa:	4643      	mov	r3, r8
   1b3fc:	f103 0801 	add.w	r8, r3, #1
   1b400:	7819      	ldrb	r1, [r3, #0]
   1b402:	2900      	cmp	r1, #0
   1b404:	d1f5      	bne.n	1b3f2 <putchw+0xe2>

    /* If left-aligned, pad the end with spaces. */
    if (p->left) {
   1b406:	78bb      	ldrb	r3, [r7, #2]
   1b408:	f013 0f08 	tst.w	r3, #8
   1b40c:	d106      	bne.n	1b41c <putchw+0x10c>
   1b40e:	e008      	b.n	1b422 <putchw+0x112>
        while (n-- > 0)
            written += putf(putp, ' ');
   1b410:	2120      	movs	r1, #32
   1b412:	4630      	mov	r0, r6
   1b414:	f7ff ff66 	bl	1b2e4 <putf>
   1b418:	4405      	add	r5, r0
        while (n-- > 0)
   1b41a:	463c      	mov	r4, r7
   1b41c:	1e67      	subs	r7, r4, #1
   1b41e:	2c00      	cmp	r4, #0
   1b420:	dcf6      	bgt.n	1b410 <putchw+0x100>
    }
    
    return written;
}
   1b422:	4628      	mov	r0, r5
   1b424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b428:	0008ff00 	.word	0x0008ff00

0001b42c <intarg>:
static unsigned long long
intarg(int lng, int sign, va_list *va)
{
    unsigned long long val;

    switch (lng) {
   1b42c:	b160      	cbz	r0, 1b448 <intarg+0x1c>
   1b42e:	2801      	cmp	r0, #1
   1b430:	d017      	beq.n	1b462 <intarg+0x36>
        }
        break;

    case 2:
    default:
        if (sign) {
   1b432:	bb19      	cbnz	r1, 1b47c <intarg+0x50>
            val = va_arg(*va, long long);
        } else {
            val = va_arg(*va, unsigned long long);
   1b434:	6813      	ldr	r3, [r2, #0]
   1b436:	3307      	adds	r3, #7
   1b438:	f023 0307 	bic.w	r3, r3, #7
   1b43c:	f103 0108 	add.w	r1, r3, #8
   1b440:	6011      	str	r1, [r2, #0]
   1b442:	e9d3 0100 	ldrd	r0, r1, [r3]
        }
        break;
    }

    return val;
}
   1b446:	4770      	bx	lr
        if (sign) {
   1b448:	b129      	cbz	r1, 1b456 <intarg+0x2a>
            val = va_arg(*va, int);
   1b44a:	6813      	ldr	r3, [r2, #0]
   1b44c:	1d19      	adds	r1, r3, #4
   1b44e:	6011      	str	r1, [r2, #0]
   1b450:	6818      	ldr	r0, [r3, #0]
   1b452:	17c1      	asrs	r1, r0, #31
   1b454:	4770      	bx	lr
            val = va_arg(*va, unsigned int);
   1b456:	6813      	ldr	r3, [r2, #0]
   1b458:	1d19      	adds	r1, r3, #4
   1b45a:	6011      	str	r1, [r2, #0]
   1b45c:	6818      	ldr	r0, [r3, #0]
   1b45e:	2100      	movs	r1, #0
   1b460:	4770      	bx	lr
        if (sign) {
   1b462:	b129      	cbz	r1, 1b470 <intarg+0x44>
            val = va_arg(*va, long);
   1b464:	6813      	ldr	r3, [r2, #0]
   1b466:	1d19      	adds	r1, r3, #4
   1b468:	6011      	str	r1, [r2, #0]
   1b46a:	6818      	ldr	r0, [r3, #0]
   1b46c:	17c1      	asrs	r1, r0, #31
   1b46e:	4770      	bx	lr
            val = va_arg(*va, unsigned long);
   1b470:	6813      	ldr	r3, [r2, #0]
   1b472:	1d19      	adds	r1, r3, #4
   1b474:	6011      	str	r1, [r2, #0]
   1b476:	6818      	ldr	r0, [r3, #0]
   1b478:	2100      	movs	r1, #0
   1b47a:	4770      	bx	lr
            val = va_arg(*va, long long);
   1b47c:	6813      	ldr	r3, [r2, #0]
   1b47e:	3307      	adds	r3, #7
   1b480:	f023 0307 	bic.w	r3, r3, #7
   1b484:	f103 0108 	add.w	r1, r3, #8
   1b488:	6011      	str	r1, [r2, #0]
   1b48a:	e9d3 0100 	ldrd	r0, r1, [r3]
   1b48e:	4770      	bx	lr

0001b490 <tfp_format>:

size_t tfp_format(FILE *putp, const char *fmt, va_list va)
{
   1b490:	b570      	push	{r4, r5, r6, lr}
   1b492:	b08a      	sub	sp, #40	; 0x28
   1b494:	4605      	mov	r5, r0
   1b496:	9101      	str	r1, [sp, #4]
   1b498:	9200      	str	r2, [sp, #0]
    double d;
    int n;
#endif
    int i;

    p.bf = bf;
   1b49a:	ab02      	add	r3, sp, #8
   1b49c:	9309      	str	r3, [sp, #36]	; 0x24
    size_t written = 0;
   1b49e:	2400      	movs	r4, #0

    while ((ch = *(fmt++))) {
   1b4a0:	9b01      	ldr	r3, [sp, #4]
   1b4a2:	1c5a      	adds	r2, r3, #1
   1b4a4:	9201      	str	r2, [sp, #4]
   1b4a6:	7819      	ldrb	r1, [r3, #0]
   1b4a8:	2900      	cmp	r1, #0
   1b4aa:	f000 811c 	beq.w	1b6e6 <tfp_format+0x256>
        if (ch != '%') {
   1b4ae:	2925      	cmp	r1, #37	; 0x25
   1b4b0:	d004      	beq.n	1b4bc <tfp_format+0x2c>
            written += putf(putp, ch);
   1b4b2:	4628      	mov	r0, r5
   1b4b4:	f7ff ff16 	bl	1b2e4 <putf>
   1b4b8:	4404      	add	r4, r0
   1b4ba:	e7f1      	b.n	1b4a0 <tfp_format+0x10>
        } else {
            /* Init parameter struct */
            p.lz = 0;
   1b4bc:	2200      	movs	r2, #0
   1b4be:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
            p.alt = 0;
   1b4c2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
            p.width = 0;
   1b4c6:	f88d 2020 	strb.w	r2, [sp, #32]
            p.sign = 0;
            p.left = 0;
            p.uc = 0;
   1b4ca:	f003 03f4 	and.w	r3, r3, #244	; 0xf4
   1b4ce:	f362 0382 	bfi	r3, r2, #2, #1
   1b4d2:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
            lng = 0;

            /* Flags */
            while ((ch = *(fmt++))) {
   1b4d6:	9b01      	ldr	r3, [sp, #4]
   1b4d8:	1c5a      	adds	r2, r3, #1
   1b4da:	9201      	str	r2, [sp, #4]
   1b4dc:	7818      	ldrb	r0, [r3, #0]
   1b4de:	b128      	cbz	r0, 1b4ec <tfp_format+0x5c>
                switch (ch) {
   1b4e0:	282d      	cmp	r0, #45	; 0x2d
   1b4e2:	d04e      	beq.n	1b582 <tfp_format+0xf2>
   1b4e4:	2830      	cmp	r0, #48	; 0x30
   1b4e6:	d03c      	beq.n	1b562 <tfp_format+0xd2>
   1b4e8:	2823      	cmp	r0, #35	; 0x23
   1b4ea:	d043      	beq.n	1b574 <tfp_format+0xe4>
                }
                break;
            }

            /* Width */
            if (ch == '*') {
   1b4ec:	282a      	cmp	r0, #42	; 0x2a
   1b4ee:	d052      	beq.n	1b596 <tfp_format+0x106>
                    p.width = UCHAR_MAX;
                } else if (i > 0) {
                    p.width = i;
                }
                ch = *(fmt++);
            } else if (ch >= '0' && ch <= '9') {
   1b4f0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   1b4f4:	b2db      	uxtb	r3, r3
   1b4f6:	2b09      	cmp	r3, #9
   1b4f8:	d961      	bls.n	1b5be <tfp_format+0x12e>
                ch = a2i(ch, &fmt, 10, &(p.width));
            }
            if (ch == 'l') {
   1b4fa:	286c      	cmp	r0, #108	; 0x6c
   1b4fc:	d065      	beq.n	1b5ca <tfp_format+0x13a>
            lng = 0;
   1b4fe:	2600      	movs	r6, #0
                    ch = *(fmt++);
                    lng = 2;
                }
            }

            if (ch == 'z') {
   1b500:	287a      	cmp	r0, #122	; 0x7a
   1b502:	d06f      	beq.n	1b5e4 <tfp_format+0x154>
                ch = *(fmt++);
            }

            switch (ch) {
   1b504:	2869      	cmp	r0, #105	; 0x69
   1b506:	f000 808e 	beq.w	1b626 <tfp_format+0x196>
   1b50a:	d970      	bls.n	1b5ee <tfp_format+0x15e>
   1b50c:	2873      	cmp	r0, #115	; 0x73
   1b50e:	f000 80dd 	beq.w	1b6cc <tfp_format+0x23c>
   1b512:	f200 8099 	bhi.w	1b648 <tfp_format+0x1b8>
   1b516:	286f      	cmp	r0, #111	; 0x6f
   1b518:	f000 80c7 	beq.w	1b6aa <tfp_format+0x21a>
   1b51c:	2870      	cmp	r0, #112	; 0x70
   1b51e:	d1bf      	bne.n	1b4a0 <tfp_format+0x10>
                p.base = 8;
                ui2a(intarg(lng, 0, &va), &p);
                written += putchw(putp, &p);
                break;
            case 'p':
                v = va_arg(va, void *);
   1b520:	9b00      	ldr	r3, [sp, #0]
   1b522:	1d1a      	adds	r2, r3, #4
   1b524:	9200      	str	r2, [sp, #0]
   1b526:	6818      	ldr	r0, [r3, #0]
                p.base = 16;
   1b528:	2310      	movs	r3, #16
   1b52a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a((uintptr_t)v, &p);
   1b52e:	aa08      	add	r2, sp, #32
   1b530:	2100      	movs	r1, #0
   1b532:	f7ff fe34 	bl	1b19e <ui2a>
                p.width = 2 * sizeof(void*);
   1b536:	2308      	movs	r3, #8
   1b538:	f88d 3020 	strb.w	r3, [sp, #32]
                p.lz = 1;
   1b53c:	2301      	movs	r3, #1
   1b53e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                written += putf(putp, '0');
   1b542:	2130      	movs	r1, #48	; 0x30
   1b544:	4628      	mov	r0, r5
   1b546:	f7ff fecd 	bl	1b2e4 <putf>
   1b54a:	4404      	add	r4, r0
                written += putf(putp, 'x');
   1b54c:	2178      	movs	r1, #120	; 0x78
   1b54e:	4628      	mov	r0, r5
   1b550:	f7ff fec8 	bl	1b2e4 <putf>
   1b554:	4404      	add	r4, r0
                written += putchw(putp, &p);
   1b556:	a908      	add	r1, sp, #32
   1b558:	4628      	mov	r0, r5
   1b55a:	f7ff fed9 	bl	1b310 <putchw>
   1b55e:	4404      	add	r4, r0
                break;
   1b560:	e79e      	b.n	1b4a0 <tfp_format+0x10>
                    if (!p.left) {
   1b562:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b566:	f013 0f08 	tst.w	r3, #8
   1b56a:	d1b4      	bne.n	1b4d6 <tfp_format+0x46>
                        p.lz = 1;
   1b56c:	2301      	movs	r3, #1
   1b56e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b572:	e7b0      	b.n	1b4d6 <tfp_format+0x46>
                    p.alt = 1;
   1b574:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b578:	f043 0302 	orr.w	r3, r3, #2
   1b57c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    continue;
   1b580:	e7a9      	b.n	1b4d6 <tfp_format+0x46>
                    p.left = 1;
   1b582:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   1b586:	f043 0308 	orr.w	r3, r3, #8
   1b58a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                    p.lz = 0;
   1b58e:	2300      	movs	r3, #0
   1b590:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                    continue;
   1b594:	e79f      	b.n	1b4d6 <tfp_format+0x46>
                i = intarg(0, 1, &va);
   1b596:	466a      	mov	r2, sp
   1b598:	2101      	movs	r1, #1
   1b59a:	2000      	movs	r0, #0
   1b59c:	f7ff ff46 	bl	1b42c <intarg>
                if (i > UCHAR_MAX) {
   1b5a0:	28ff      	cmp	r0, #255	; 0xff
   1b5a2:	dd07      	ble.n	1b5b4 <tfp_format+0x124>
                    p.width = UCHAR_MAX;
   1b5a4:	23ff      	movs	r3, #255	; 0xff
   1b5a6:	f88d 3020 	strb.w	r3, [sp, #32]
                ch = *(fmt++);
   1b5aa:	9b01      	ldr	r3, [sp, #4]
   1b5ac:	1c5a      	adds	r2, r3, #1
   1b5ae:	9201      	str	r2, [sp, #4]
   1b5b0:	7818      	ldrb	r0, [r3, #0]
   1b5b2:	e7a2      	b.n	1b4fa <tfp_format+0x6a>
                } else if (i > 0) {
   1b5b4:	2800      	cmp	r0, #0
   1b5b6:	ddf8      	ble.n	1b5aa <tfp_format+0x11a>
                    p.width = i;
   1b5b8:	f88d 0020 	strb.w	r0, [sp, #32]
   1b5bc:	e7f5      	b.n	1b5aa <tfp_format+0x11a>
                ch = a2i(ch, &fmt, 10, &(p.width));
   1b5be:	ab08      	add	r3, sp, #32
   1b5c0:	220a      	movs	r2, #10
   1b5c2:	a901      	add	r1, sp, #4
   1b5c4:	f7ff fe73 	bl	1b2ae <a2i>
   1b5c8:	e797      	b.n	1b4fa <tfp_format+0x6a>
                ch = *(fmt++);
   1b5ca:	9b01      	ldr	r3, [sp, #4]
   1b5cc:	1c5a      	adds	r2, r3, #1
   1b5ce:	9201      	str	r2, [sp, #4]
   1b5d0:	7818      	ldrb	r0, [r3, #0]
                if (ch == 'l') {
   1b5d2:	286c      	cmp	r0, #108	; 0x6c
   1b5d4:	d001      	beq.n	1b5da <tfp_format+0x14a>
                lng = 1;
   1b5d6:	2601      	movs	r6, #1
   1b5d8:	e792      	b.n	1b500 <tfp_format+0x70>
                    ch = *(fmt++);
   1b5da:	1c9a      	adds	r2, r3, #2
   1b5dc:	9201      	str	r2, [sp, #4]
   1b5de:	7858      	ldrb	r0, [r3, #1]
                    lng = 2;
   1b5e0:	2602      	movs	r6, #2
   1b5e2:	e78d      	b.n	1b500 <tfp_format+0x70>
                ch = *(fmt++);
   1b5e4:	9b01      	ldr	r3, [sp, #4]
   1b5e6:	1c5a      	adds	r2, r3, #1
   1b5e8:	9201      	str	r2, [sp, #4]
   1b5ea:	7818      	ldrb	r0, [r3, #0]
   1b5ec:	e78a      	b.n	1b504 <tfp_format+0x74>
            switch (ch) {
   1b5ee:	2858      	cmp	r0, #88	; 0x58
   1b5f0:	d040      	beq.n	1b674 <tfp_format+0x1e4>
   1b5f2:	d80a      	bhi.n	1b60a <tfp_format+0x17a>
   1b5f4:	2800      	cmp	r0, #0
   1b5f6:	d076      	beq.n	1b6e6 <tfp_format+0x256>
   1b5f8:	2825      	cmp	r0, #37	; 0x25
   1b5fa:	f47f af51 	bne.w	1b4a0 <tfp_format+0x10>
                /* Output the decimal part. */
                written += putchw(putp, &p);
                break;
#endif
            case '%':
                written += putf(putp, ch);
   1b5fe:	4601      	mov	r1, r0
   1b600:	4628      	mov	r0, r5
   1b602:	f7ff fe6f 	bl	1b2e4 <putf>
   1b606:	4404      	add	r4, r0
                break;
   1b608:	e74a      	b.n	1b4a0 <tfp_format+0x10>
            switch (ch) {
   1b60a:	2863      	cmp	r0, #99	; 0x63
   1b60c:	d108      	bne.n	1b620 <tfp_format+0x190>
                written += putf(putp, (char)(va_arg(va, int)));
   1b60e:	9b00      	ldr	r3, [sp, #0]
   1b610:	1d1a      	adds	r2, r3, #4
   1b612:	9200      	str	r2, [sp, #0]
   1b614:	7819      	ldrb	r1, [r3, #0]
   1b616:	4628      	mov	r0, r5
   1b618:	f7ff fe64 	bl	1b2e4 <putf>
   1b61c:	4404      	add	r4, r0
                break;
   1b61e:	e73f      	b.n	1b4a0 <tfp_format+0x10>
            switch (ch) {
   1b620:	2864      	cmp	r0, #100	; 0x64
   1b622:	f47f af3d 	bne.w	1b4a0 <tfp_format+0x10>
                p.base = 10;
   1b626:	230a      	movs	r3, #10
   1b628:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                i2a(intarg(lng, 1, &va), &p);
   1b62c:	466a      	mov	r2, sp
   1b62e:	2101      	movs	r1, #1
   1b630:	4630      	mov	r0, r6
   1b632:	f7ff fefb 	bl	1b42c <intarg>
   1b636:	aa08      	add	r2, sp, #32
   1b638:	f7ff fe11 	bl	1b25e <i2a>
                written += putchw(putp, &p);
   1b63c:	a908      	add	r1, sp, #32
   1b63e:	4628      	mov	r0, r5
   1b640:	f7ff fe66 	bl	1b310 <putchw>
   1b644:	4404      	add	r4, r0
                break;
   1b646:	e72b      	b.n	1b4a0 <tfp_format+0x10>
            switch (ch) {
   1b648:	2875      	cmp	r0, #117	; 0x75
   1b64a:	d110      	bne.n	1b66e <tfp_format+0x1de>
                p.base = 10;
   1b64c:	230a      	movs	r3, #10
   1b64e:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b652:	466a      	mov	r2, sp
   1b654:	2100      	movs	r1, #0
   1b656:	4630      	mov	r0, r6
   1b658:	f7ff fee8 	bl	1b42c <intarg>
   1b65c:	aa08      	add	r2, sp, #32
   1b65e:	f7ff fd9e 	bl	1b19e <ui2a>
                written += putchw(putp, &p);
   1b662:	a908      	add	r1, sp, #32
   1b664:	4628      	mov	r0, r5
   1b666:	f7ff fe53 	bl	1b310 <putchw>
   1b66a:	4404      	add	r4, r0
                break;
   1b66c:	e718      	b.n	1b4a0 <tfp_format+0x10>
            switch (ch) {
   1b66e:	2878      	cmp	r0, #120	; 0x78
   1b670:	f47f af16 	bne.w	1b4a0 <tfp_format+0x10>
                p.base = 16;
   1b674:	2310      	movs	r3, #16
   1b676:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                p.uc = (ch == 'X');
   1b67a:	2858      	cmp	r0, #88	; 0x58
   1b67c:	bf14      	ite	ne
   1b67e:	2300      	movne	r3, #0
   1b680:	2301      	moveq	r3, #1
   1b682:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
   1b686:	f363 0282 	bfi	r2, r3, #2, #1
   1b68a:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
                ui2a(intarg(lng, 0, &va), &p);
   1b68e:	466a      	mov	r2, sp
   1b690:	2100      	movs	r1, #0
   1b692:	4630      	mov	r0, r6
   1b694:	f7ff feca 	bl	1b42c <intarg>
   1b698:	aa08      	add	r2, sp, #32
   1b69a:	f7ff fd80 	bl	1b19e <ui2a>
                written += putchw(putp, &p);
   1b69e:	a908      	add	r1, sp, #32
   1b6a0:	4628      	mov	r0, r5
   1b6a2:	f7ff fe35 	bl	1b310 <putchw>
   1b6a6:	4404      	add	r4, r0
                break;
   1b6a8:	e6fa      	b.n	1b4a0 <tfp_format+0x10>
                p.base = 8;
   1b6aa:	2308      	movs	r3, #8
   1b6ac:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
                ui2a(intarg(lng, 0, &va), &p);
   1b6b0:	466a      	mov	r2, sp
   1b6b2:	2100      	movs	r1, #0
   1b6b4:	4630      	mov	r0, r6
   1b6b6:	f7ff feb9 	bl	1b42c <intarg>
   1b6ba:	aa08      	add	r2, sp, #32
   1b6bc:	f7ff fd6f 	bl	1b19e <ui2a>
                written += putchw(putp, &p);
   1b6c0:	a908      	add	r1, sp, #32
   1b6c2:	4628      	mov	r0, r5
   1b6c4:	f7ff fe24 	bl	1b310 <putchw>
   1b6c8:	4404      	add	r4, r0
                break;
   1b6ca:	e6e9      	b.n	1b4a0 <tfp_format+0x10>
                p.bf = va_arg(va, char *);
   1b6cc:	9b00      	ldr	r3, [sp, #0]
   1b6ce:	1d1a      	adds	r2, r3, #4
   1b6d0:	9200      	str	r2, [sp, #0]
   1b6d2:	681b      	ldr	r3, [r3, #0]
   1b6d4:	9309      	str	r3, [sp, #36]	; 0x24
                written += putchw(putp, &p);
   1b6d6:	a908      	add	r1, sp, #32
   1b6d8:	4628      	mov	r0, r5
   1b6da:	f7ff fe19 	bl	1b310 <putchw>
   1b6de:	4404      	add	r4, r0
                p.bf = bf;
   1b6e0:	ab02      	add	r3, sp, #8
   1b6e2:	9309      	str	r3, [sp, #36]	; 0x24
                break;
   1b6e4:	e6dc      	b.n	1b4a0 <tfp_format+0x10>
        }
    }
 abort:;
 
 return written;
}
   1b6e6:	4620      	mov	r0, r4
   1b6e8:	b00a      	add	sp, #40	; 0x28
   1b6ea:	bd70      	pop	{r4, r5, r6, pc}

0001b6ec <vfprintf>:

int vfprintf(FILE *f, const char *fmt, va_list va)
{
   1b6ec:	b508      	push	{r3, lr}
    return tfp_format(f, fmt, va);
   1b6ee:	f7ff fecf 	bl	1b490 <tfp_format>
}
   1b6f2:	bd08      	pop	{r3, pc}

0001b6f4 <printf>:
    va_end(va);
    return rv;
}

int printf(const char *fmt, ...)
{
   1b6f4:	b40f      	push	{r0, r1, r2, r3}
   1b6f6:	b500      	push	{lr}
   1b6f8:	b083      	sub	sp, #12
   1b6fa:	aa04      	add	r2, sp, #16
   1b6fc:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list va;
    va_start(va, fmt);
   1b700:	9201      	str	r2, [sp, #4]
    int rv = vfprintf(stdout, fmt, va);
   1b702:	4b04      	ldr	r3, [pc, #16]	; (1b714 <printf+0x20>)
   1b704:	6818      	ldr	r0, [r3, #0]
   1b706:	f7ff fff1 	bl	1b6ec <vfprintf>
    va_end(va);
    return rv;
}
   1b70a:	b003      	add	sp, #12
   1b70c:	f85d eb04 	ldr.w	lr, [sp], #4
   1b710:	b004      	add	sp, #16
   1b712:	4770      	bx	lr
   1b714:	00021144 	.word	0x00021144

0001b718 <vsnprintf>:

int vsnprintf(char *str, size_t size, const char *fmt, va_list va)
{
   1b718:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b71a:	b085      	sub	sp, #20
   1b71c:	4605      	mov	r5, r0
   1b71e:	460c      	mov	r4, r1
   1b720:	4616      	mov	r6, r2
   1b722:	461f      	mov	r7, r3
    struct MemFile state;
    FILE *f = fmemopen_w(&state, str, size);
   1b724:	460a      	mov	r2, r1
   1b726:	4601      	mov	r1, r0
   1b728:	4668      	mov	r0, sp
   1b72a:	f000 f835 	bl	1b798 <fmemopen_w>
    tfp_format(f, fmt, va);
   1b72e:	463a      	mov	r2, r7
   1b730:	4631      	mov	r1, r6
   1b732:	f7ff fead 	bl	1b490 <tfp_format>
    if (size > 0) {
   1b736:	b12c      	cbz	r4, 1b744 <vsnprintf+0x2c>
        if (state.bytes_written < size) {
   1b738:	9b02      	ldr	r3, [sp, #8]
   1b73a:	42a3      	cmp	r3, r4
   1b73c:	d305      	bcc.n	1b74a <vsnprintf+0x32>
            *(state.buffer) = '\0';
        } else {
            str[size - 1] = '\0';
   1b73e:	3c01      	subs	r4, #1
   1b740:	2300      	movs	r3, #0
   1b742:	552b      	strb	r3, [r5, r4]
        }
    }
    return state.bytes_written;
}
   1b744:	9802      	ldr	r0, [sp, #8]
   1b746:	b005      	add	sp, #20
   1b748:	bdf0      	pop	{r4, r5, r6, r7, pc}
            *(state.buffer) = '\0';
   1b74a:	9b01      	ldr	r3, [sp, #4]
   1b74c:	2200      	movs	r2, #0
   1b74e:	701a      	strb	r2, [r3, #0]
   1b750:	e7f8      	b.n	1b744 <vsnprintf+0x2c>
	...

0001b754 <vprintf>:

#include <stdio.h>
#include <stdarg.h>

int vprintf(const char *format, va_list ap)
{
   1b754:	b508      	push	{r3, lr}
	return vfprintf(stdout, format, ap);
   1b756:	460a      	mov	r2, r1
   1b758:	4601      	mov	r1, r0
   1b75a:	4b02      	ldr	r3, [pc, #8]	; (1b764 <vprintf+0x10>)
   1b75c:	6818      	ldr	r0, [r3, #0]
   1b75e:	f7ff ffc5 	bl	1b6ec <vfprintf>
}
   1b762:	bd08      	pop	{r3, pc}
   1b764:	00021144 	.word	0x00021144

0001b768 <memfile_write>:
#include <stdio.h>

size_t memfile_write(FILE *instance, const char *bp, size_t n)
{
   1b768:	b430      	push	{r4, r5}
    struct MemFile *f = (struct MemFile*)instance;
    size_t i = 0;
   1b76a:	2500      	movs	r5, #0
    
    while (n--)
   1b76c:	e000      	b.n	1b770 <memfile_write+0x8>
    {
        f->bytes_written++;
        if (f->bytes_written <= f->size)
        {
            *f->buffer++ = *bp++;
   1b76e:	4622      	mov	r2, r4
    while (n--)
   1b770:	1e54      	subs	r4, r2, #1
   1b772:	b16a      	cbz	r2, 1b790 <memfile_write+0x28>
        f->bytes_written++;
   1b774:	6883      	ldr	r3, [r0, #8]
   1b776:	3301      	adds	r3, #1
   1b778:	6083      	str	r3, [r0, #8]
        if (f->bytes_written <= f->size)
   1b77a:	68c2      	ldr	r2, [r0, #12]
   1b77c:	4293      	cmp	r3, r2
   1b77e:	d8f6      	bhi.n	1b76e <memfile_write+0x6>
            *f->buffer++ = *bp++;
   1b780:	6843      	ldr	r3, [r0, #4]
   1b782:	1c5a      	adds	r2, r3, #1
   1b784:	6042      	str	r2, [r0, #4]
   1b786:	780a      	ldrb	r2, [r1, #0]
   1b788:	701a      	strb	r2, [r3, #0]
            i++;
   1b78a:	3501      	adds	r5, #1
            *f->buffer++ = *bp++;
   1b78c:	3101      	adds	r1, #1
   1b78e:	e7ee      	b.n	1b76e <memfile_write+0x6>
        }
    }
    
    return i;
}
   1b790:	4628      	mov	r0, r5
   1b792:	bc30      	pop	{r4, r5}
   1b794:	4770      	bx	lr
	...

0001b798 <fmemopen_w>:
    &memfile_write,
    NULL
};

FILE *fmemopen_w(struct MemFile* storage, char *buffer, size_t size)
{
   1b798:	b410      	push	{r4}
    storage->file.vmt = &MemFile_methods;
   1b79a:	4c04      	ldr	r4, [pc, #16]	; (1b7ac <fmemopen_w+0x14>)
   1b79c:	6004      	str	r4, [r0, #0]
    storage->buffer = buffer;
   1b79e:	6041      	str	r1, [r0, #4]
    storage->bytes_written = 0;
   1b7a0:	2100      	movs	r1, #0
   1b7a2:	6081      	str	r1, [r0, #8]
    storage->size = size;
   1b7a4:	60c2      	str	r2, [r0, #12]
    return (FILE*)storage;
}
   1b7a6:	f85d 4b04 	ldr.w	r4, [sp], #4
   1b7aa:	4770      	bx	lr
   1b7ac:	0002113c 	.word	0x0002113c

0001b7b0 <stdin_read>:

static size_t
stdin_read(FILE *fp, char *bp, size_t n)
{
    return 0;
}
   1b7b0:	2000      	movs	r0, #0
   1b7b2:	4770      	bx	lr

0001b7b4 <stdout_write>:

static size_t
stdout_write(FILE *fp, const char *bp, size_t n)
{
   1b7b4:	b510      	push	{r4, lr}
   1b7b6:	4608      	mov	r0, r1
   1b7b8:	4614      	mov	r4, r2
    console_write(bp, n);
   1b7ba:	4611      	mov	r1, r2
   1b7bc:	f7fd f9b8 	bl	18b30 <console_write>
    return n;
}
   1b7c0:	4620      	mov	r0, r4
   1b7c2:	bd10      	pop	{r4, pc}

0001b7c4 <rust_sysinit>:
#include <mynewt_rust/mynewt_rust.h>
#include <mynewt_rust/sensor_helper.h>
#include <mynewt_rust/json_helper.h>

///  Initialise the Mynewt system.  Start the Mynewt drivers and libraries.  Equivalent to `sysinit()` macro in C.
void rust_sysinit() {
   1b7c4:	b508      	push	{r3, lr}
    sysinit();
   1b7c6:	f7fd fa1b 	bl	18c00 <sysinit_start>
   1b7ca:	f000 f81b 	bl	1b804 <sysinit_app>
   1b7ce:	f7fd fa1d 	bl	18c0c <sysinit_end>
}
   1b7d2:	bd08      	pop	{r3, pc}

0001b7d4 <mem_init_mbuf_pool>:

int
mem_init_mbuf_pool(void *mem, struct os_mempool *mempool,
                   struct os_mbuf_pool *mbuf_pool, int num_blocks,
                   int block_size, char *name)
{
   1b7d4:	b570      	push	{r4, r5, r6, lr}
   1b7d6:	b082      	sub	sp, #8
   1b7d8:	460c      	mov	r4, r1
   1b7da:	4616      	mov	r6, r2
    int rc;

    rc = os_mempool_init(mempool, num_blocks, block_size, mem, name);
   1b7dc:	b29d      	uxth	r5, r3
   1b7de:	9b07      	ldr	r3, [sp, #28]
   1b7e0:	9300      	str	r3, [sp, #0]
   1b7e2:	4603      	mov	r3, r0
   1b7e4:	9a06      	ldr	r2, [sp, #24]
   1b7e6:	4629      	mov	r1, r5
   1b7e8:	4620      	mov	r0, r4
   1b7ea:	f7fe fdeb 	bl	1a3c4 <os_mempool_init>
    if (rc != 0) {
   1b7ee:	b108      	cbz	r0, 1b7f4 <mem_init_mbuf_pool+0x20>
    if (rc != 0) {
        return rc;
    }

    return 0;
}
   1b7f0:	b002      	add	sp, #8
   1b7f2:	bd70      	pop	{r4, r5, r6, pc}
    rc = os_mbuf_pool_init(mbuf_pool, mempool, block_size, num_blocks);
   1b7f4:	462b      	mov	r3, r5
   1b7f6:	9a06      	ldr	r2, [sp, #24]
   1b7f8:	b292      	uxth	r2, r2
   1b7fa:	4621      	mov	r1, r4
   1b7fc:	4630      	mov	r0, r6
   1b7fe:	f7fe fc96 	bl	1a12e <os_mbuf_pool_init>
   1b802:	e7f5      	b.n	1b7f0 <mem_init_mbuf_pool+0x1c>

0001b804 <sysinit_app>:
void sensor_network_init(void);
void init_sensor_coap(void);

void
sysinit_app(void)
{
   1b804:	b508      	push	{r3, lr}
    /*** Stage 0 */
    /* 0.0: os_pkg_init (kernel/os) */
    os_pkg_init();
   1b806:	f7fe f9f3 	bl	19bf0 <os_pkg_init>

    /*** Stage 2 */
    /* 2.0: flash_map_init (sys/flash_map) */
    flash_map_init();
   1b80a:	f001 f985 	bl	1cb18 <flash_map_init>

    /*** Stage 20 */
    /* 20.0: console_pkg_init (libs/semihosting_console) */
    console_pkg_init();
   1b80e:	f7fd f9a3 	bl	18b58 <console_pkg_init>

    /*** Stage 100 */
    /* 100.0: mfg_init (sys/mfg) */
    mfg_init();
   1b812:	f001 fac7 	bl	1cda4 <mfg_init>
    /* 100.1: modlog_init (sys/log/modlog) */
    modlog_init();
   1b816:	f001 f9b7 	bl	1cb88 <modlog_init>

    /*** Stage 300 */
    /* 300.0: oc_init (net/oic) */
    oc_init();
   1b81a:	f001 f8e1 	bl	1c9e0 <oc_init>

    /*** Stage 301 */
    /* 301.0: oc_register_gatt (net/oic) */
    oc_register_gatt();
   1b81e:	f001 f8f1 	bl	1ca04 <oc_register_gatt>
    /* 301.1: oc_register_ip4 (net/oic) */
    oc_register_ip4();
   1b822:	f001 f8f0 	bl	1ca06 <oc_register_ip4>
    /* 301.2: oc_register_ip6 (net/oic) */
    oc_register_ip6();
   1b826:	f001 f8ef 	bl	1ca08 <oc_register_ip6>
    /* 301.3: oc_register_lora (net/oic) */
    oc_register_lora();
   1b82a:	f001 f8ee 	bl	1ca0a <oc_register_lora>
    /* 301.4: oc_register_serial (net/oic) */
    oc_register_serial();
   1b82e:	f001 f8ed 	bl	1ca0c <oc_register_serial>

    /*** Stage 500 */
    /* 500.0: sensor_dev_create (hw/sensor/creator) */
    sensor_dev_create();
   1b832:	f000 fbd1 	bl	1bfd8 <sensor_dev_create>

    /*** Stage 501 */
    /* 501.0: sensor_pkg_init (hw/sensor) */
    sensor_pkg_init();
   1b836:	f000 fd1f 	bl	1c278 <sensor_pkg_init>

    /*** Stage 620 */
    /* 620.0: temp_stub_create (libs/temp_stub) */
    temp_stub_create();
   1b83a:	f000 ff3d 	bl	1c6b8 <temp_stub_create>

    /*** Stage 640 */
    /* 640.0: sensor_network_init (libs/sensor_network) */
    sensor_network_init();
   1b83e:	f000 feb3 	bl	1c5a8 <sensor_network_init>

    /*** Stage 660 */
    /* 660.0: init_sensor_coap (libs/sensor_coap) */
    init_sensor_coap();
   1b842:	f000 fe3d 	bl	1c4c0 <init_sensor_coap>
}
   1b846:	bd08      	pop	{r3, pc}

0001b848 <hal_bsp_flash_dev>:
hal_bsp_flash_dev(uint8_t id)
{
    /*
     * Internal flash mapped to id 0.
     */
    if (id == 0) {
   1b848:	b908      	cbnz	r0, 1b84e <hal_bsp_flash_dev+0x6>
        return &nrf52k_flash_dev;
   1b84a:	4802      	ldr	r0, [pc, #8]	; (1b854 <hal_bsp_flash_dev+0xc>)
   1b84c:	4770      	bx	lr
    }

    return NULL;
   1b84e:	2000      	movs	r0, #0
}
   1b850:	4770      	bx	lr
   1b852:	bf00      	nop
   1b854:	00021148 	.word	0x00021148

0001b858 <hal_bsp_init>:
    return cfg_pri;
}

void
hal_bsp_init(void)
{
   1b858:	b508      	push	{r3, lr}
    /* Make sure system clocks have started */
    hal_system_clock_start();
   1b85a:	f7ec fcb1 	bl	81c0 <hal_system_clock_start>

    /* Create all available nRF52840 peripherals */
    nrf52_periph_create();
   1b85e:	f000 fbb3 	bl	1bfc8 <nrf52_periph_create>
}
   1b862:	bd08      	pop	{r3, pc}

0001b864 <nrf52k_flash_wait_ready>:
static int
nrf52k_flash_wait_ready(void)
{
    int i;

    for (i = 0; i < 100000; i++) {
   1b864:	2300      	movs	r3, #0
   1b866:	4a07      	ldr	r2, [pc, #28]	; (1b884 <nrf52k_flash_wait_ready+0x20>)
   1b868:	4293      	cmp	r3, r2
   1b86a:	dc06      	bgt.n	1b87a <nrf52k_flash_wait_ready+0x16>
        if (NRF_NVMC->READY == NVMC_READY_READY_Ready) {
   1b86c:	4a06      	ldr	r2, [pc, #24]	; (1b888 <nrf52k_flash_wait_ready+0x24>)
   1b86e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
   1b872:	2a01      	cmp	r2, #1
   1b874:	d004      	beq.n	1b880 <nrf52k_flash_wait_ready+0x1c>
    for (i = 0; i < 100000; i++) {
   1b876:	3301      	adds	r3, #1
   1b878:	e7f5      	b.n	1b866 <nrf52k_flash_wait_ready+0x2>
            return 0;
        }
    }
    return -1;
   1b87a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b87e:	4770      	bx	lr
            return 0;
   1b880:	2000      	movs	r0, #0
}
   1b882:	4770      	bx	lr
   1b884:	0001869f 	.word	0x0001869f
   1b888:	4001e000 	.word	0x4001e000

0001b88c <nrf52k_flash_erase_sector>:
    return rc;
}

static int
nrf52k_flash_erase_sector(const struct hal_flash *dev, uint32_t sector_address)
{
   1b88c:	b538      	push	{r3, r4, r5, lr}
   1b88e:	460d      	mov	r5, r1
    int sr;
    int rc = -1;

    if (nrf52k_flash_wait_ready()) {
   1b890:	f7ff ffe8 	bl	1b864 <nrf52k_flash_wait_ready>
   1b894:	b9f0      	cbnz	r0, 1b8d4 <nrf52k_flash_erase_sector+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b896:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b89a:	b672      	cpsid	i
        return -1;
    }
    __HAL_DISABLE_INTERRUPTS(sr);
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Een; /* Enable erase OP */
   1b89c:	4b0f      	ldr	r3, [pc, #60]	; (1b8dc <nrf52k_flash_erase_sector+0x50>)
   1b89e:	2202      	movs	r2, #2
   1b8a0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (nrf52k_flash_wait_ready()) {
   1b8a4:	f7ff ffde 	bl	1b864 <nrf52k_flash_wait_ready>
   1b8a8:	b148      	cbz	r0, 1b8be <nrf52k_flash_erase_sector+0x32>
    int rc = -1;
   1b8aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    if (nrf52k_flash_wait_ready()) {
        goto out;
    }
    rc = 0;
out:
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren; /* Disable erase OP */
   1b8ae:	4a0b      	ldr	r2, [pc, #44]	; (1b8dc <nrf52k_flash_erase_sector+0x50>)
   1b8b0:	2100      	movs	r1, #0
   1b8b2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b8b6:	b904      	cbnz	r4, 1b8ba <nrf52k_flash_erase_sector+0x2e>
  __ASM volatile ("cpsie i" : : : "memory");
   1b8b8:	b662      	cpsie	i
    return rc;
}
   1b8ba:	4618      	mov	r0, r3
   1b8bc:	bd38      	pop	{r3, r4, r5, pc}
    NRF_NVMC->ERASEPAGE = sector_address;
   1b8be:	4b07      	ldr	r3, [pc, #28]	; (1b8dc <nrf52k_flash_erase_sector+0x50>)
   1b8c0:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
    if (nrf52k_flash_wait_ready()) {
   1b8c4:	f7ff ffce 	bl	1b864 <nrf52k_flash_wait_ready>
   1b8c8:	4603      	mov	r3, r0
   1b8ca:	2800      	cmp	r0, #0
   1b8cc:	d0ef      	beq.n	1b8ae <nrf52k_flash_erase_sector+0x22>
    int rc = -1;
   1b8ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8d2:	e7ec      	b.n	1b8ae <nrf52k_flash_erase_sector+0x22>
        return -1;
   1b8d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b8d8:	e7ef      	b.n	1b8ba <nrf52k_flash_erase_sector+0x2e>
   1b8da:	bf00      	nop
   1b8dc:	4001e000 	.word	0x4001e000

0001b8e0 <nrf52k_flash_init>:

static int
nrf52k_flash_init(const struct hal_flash *dev)
{
    return 0;
}
   1b8e0:	2000      	movs	r0, #0
   1b8e2:	4770      	bx	lr

0001b8e4 <nrf52k_flash_sector_info>:
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b8e4:	297f      	cmp	r1, #127	; 0x7f
   1b8e6:	dc06      	bgt.n	1b8f6 <nrf52k_flash_sector_info+0x12>
    *address = idx * NRF52K_FLASH_SECTOR_SZ;
   1b8e8:	0309      	lsls	r1, r1, #12
   1b8ea:	6011      	str	r1, [r2, #0]
    *sz = NRF52K_FLASH_SECTOR_SZ;
   1b8ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   1b8f0:	601a      	str	r2, [r3, #0]
}
   1b8f2:	2000      	movs	r0, #0
   1b8f4:	4770      	bx	lr
{
   1b8f6:	b508      	push	{r3, lr}
    assert(idx < nrf52k_flash_dev.hf_sector_cnt);
   1b8f8:	2300      	movs	r3, #0
   1b8fa:	461a      	mov	r2, r3
   1b8fc:	4619      	mov	r1, r3
   1b8fe:	4618      	mov	r0, r3
   1b900:	f7fe f818 	bl	19934 <__assert_func>

0001b904 <nrf52k_flash_write>:
{
   1b904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b908:	b082      	sub	sp, #8
   1b90a:	460d      	mov	r5, r1
   1b90c:	4616      	mov	r6, r2
   1b90e:	461c      	mov	r4, r3
    if (nrf52k_flash_wait_ready()) {
   1b910:	f7ff ffa8 	bl	1b864 <nrf52k_flash_wait_ready>
   1b914:	2800      	cmp	r0, #0
   1b916:	d158      	bne.n	1b9ca <nrf52k_flash_write+0xc6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1b918:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1b91c:	b672      	cpsid	i
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen; /* Enable erase OP */
   1b91e:	4b2c      	ldr	r3, [pc, #176]	; (1b9d0 <nrf52k_flash_write+0xcc>)
   1b920:	2201      	movs	r2, #1
   1b922:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    if (tmp) {
   1b926:	f015 0803 	ands.w	r8, r5, #3
   1b92a:	d10b      	bne.n	1b944 <nrf52k_flash_write+0x40>
    while (num_bytes >= sizeof(uint32_t)) {
   1b92c:	2c03      	cmp	r4, #3
   1b92e:	d925      	bls.n	1b97c <nrf52k_flash_write+0x78>
        if (nrf52k_flash_wait_ready()) {
   1b930:	f7ff ff98 	bl	1b864 <nrf52k_flash_wait_ready>
   1b934:	2800      	cmp	r0, #0
   1b936:	d139      	bne.n	1b9ac <nrf52k_flash_write+0xa8>
        *(uint32_t *)address = *(uint32_t *)src;
   1b938:	f856 3b04 	ldr.w	r3, [r6], #4
   1b93c:	f845 3b04 	str.w	r3, [r5], #4
        num_bytes -= sizeof(uint32_t);
   1b940:	3c04      	subs	r4, #4
   1b942:	e7f3      	b.n	1b92c <nrf52k_flash_write+0x28>
        if (nrf52k_flash_wait_ready()) {
   1b944:	f7ff ff8e 	bl	1b864 <nrf52k_flash_wait_ready>
   1b948:	bb68      	cbnz	r0, 1b9a6 <nrf52k_flash_write+0xa2>
        val = *(uint32_t *)(address & ~0x3);
   1b94a:	f025 0a03 	bic.w	sl, r5, #3
   1b94e:	f8da 3000 	ldr.w	r3, [sl]
   1b952:	9301      	str	r3, [sp, #4]
        cnt = 4 - tmp;
   1b954:	f1c8 0904 	rsb	r9, r8, #4
        if (cnt > num_bytes) {
   1b958:	45a1      	cmp	r9, r4
   1b95a:	d900      	bls.n	1b95e <nrf52k_flash_write+0x5a>
            cnt = num_bytes;
   1b95c:	46a1      	mov	r9, r4
        memcpy((uint8_t *)&val + tmp, src, cnt);
   1b95e:	464a      	mov	r2, r9
   1b960:	4631      	mov	r1, r6
   1b962:	ab01      	add	r3, sp, #4
   1b964:	eb03 0008 	add.w	r0, r3, r8
   1b968:	f7ff fbda 	bl	1b120 <memcpy>
        *(uint32_t *)(address & ~0x3) = val;
   1b96c:	9b01      	ldr	r3, [sp, #4]
   1b96e:	f8ca 3000 	str.w	r3, [sl]
        address += cnt;
   1b972:	444d      	add	r5, r9
        num_bytes -= cnt;
   1b974:	eba4 0409 	sub.w	r4, r4, r9
        src += cnt;
   1b978:	444e      	add	r6, r9
   1b97a:	e7d7      	b.n	1b92c <nrf52k_flash_write+0x28>
    if (num_bytes) {
   1b97c:	b164      	cbz	r4, 1b998 <nrf52k_flash_write+0x94>
        val = *(uint32_t *)address;
   1b97e:	682b      	ldr	r3, [r5, #0]
   1b980:	a802      	add	r0, sp, #8
   1b982:	f840 3d04 	str.w	r3, [r0, #-4]!
        memcpy(&val, src, num_bytes);
   1b986:	4622      	mov	r2, r4
   1b988:	4631      	mov	r1, r6
   1b98a:	f7ff fbc9 	bl	1b120 <memcpy>
        if (nrf52k_flash_wait_ready()) {
   1b98e:	f7ff ff69 	bl	1b864 <nrf52k_flash_wait_ready>
   1b992:	b9b8      	cbnz	r0, 1b9c4 <nrf52k_flash_write+0xc0>
        *(uint32_t *)address = val;
   1b994:	9b01      	ldr	r3, [sp, #4]
   1b996:	602b      	str	r3, [r5, #0]
    if (nrf52k_flash_wait_ready()) {
   1b998:	f7ff ff64 	bl	1b864 <nrf52k_flash_wait_ready>
   1b99c:	4603      	mov	r3, r0
   1b99e:	b138      	cbz	r0, 1b9b0 <nrf52k_flash_write+0xac>
        rc = -1;
   1b9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9a4:	e004      	b.n	1b9b0 <nrf52k_flash_write+0xac>
    int rc = -1;
   1b9a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9aa:	e001      	b.n	1b9b0 <nrf52k_flash_write+0xac>
   1b9ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren;
   1b9b0:	4a07      	ldr	r2, [pc, #28]	; (1b9d0 <nrf52k_flash_write+0xcc>)
   1b9b2:	2100      	movs	r1, #0
   1b9b4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
    __HAL_ENABLE_INTERRUPTS(sr);
   1b9b8:	b907      	cbnz	r7, 1b9bc <nrf52k_flash_write+0xb8>
  __ASM volatile ("cpsie i" : : : "memory");
   1b9ba:	b662      	cpsie	i
}
   1b9bc:	4618      	mov	r0, r3
   1b9be:	b002      	add	sp, #8
   1b9c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    int rc = -1;
   1b9c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9c8:	e7f2      	b.n	1b9b0 <nrf52k_flash_write+0xac>
        return -1;
   1b9ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1b9ce:	e7f5      	b.n	1b9bc <nrf52k_flash_write+0xb8>
   1b9d0:	4001e000 	.word	0x4001e000

0001b9d4 <nrf52k_flash_read>:
{
   1b9d4:	b508      	push	{r3, lr}
   1b9d6:	4610      	mov	r0, r2
    memcpy(dst, (void *)address, num_bytes);
   1b9d8:	461a      	mov	r2, r3
   1b9da:	f7ff fba1 	bl	1b120 <memcpy>
}
   1b9de:	2000      	movs	r0, #0
   1b9e0:	bd08      	pop	{r3, pc}
	...

0001b9e4 <nrf52_timer_handler>:
    }
}

static void
nrf52_timer_handler(void)
{
   1b9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int ticks;
    os_sr_t sr;
    uint32_t counter;

    os_trace_isr_enter();
    OS_ENTER_CRITICAL(sr);
   1b9e6:	f7ff fa3b 	bl	1ae60 <os_arch_save_sr>
    return OS_TICK_TIMER->COUNTER;
   1b9ea:	4b31      	ldr	r3, [pc, #196]	; (1bab0 <nrf52_timer_handler+0xcc>)
   1b9ec:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504

    /* Calculate elapsed ticks and advance OS time. */

    counter = nrf52_os_tick_counter();
    delta = sub24(counter, g_hal_os_tick.lastocmp);
   1b9f0:	4b30      	ldr	r3, [pc, #192]	; (1bab4 <nrf52_timer_handler+0xd0>)
   1b9f2:	689b      	ldr	r3, [r3, #8]
    assert(x <= 0xffffff);
   1b9f4:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
   1b9f8:	d225      	bcs.n	1ba46 <nrf52_timer_handler+0x62>
   1b9fa:	4606      	mov	r6, r0
    assert(y <= 0xffffff);
   1b9fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1ba00:	d227      	bcs.n	1ba52 <nrf52_timer_handler+0x6e>
    result = x - y;
   1ba02:	1aed      	subs	r5, r5, r3
    if (result & 0x800000) {
   1ba04:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
   1ba08:	d129      	bne.n	1ba5e <nrf52_timer_handler+0x7a>
        return (result & 0x007fffff);
   1ba0a:	f3c5 0516 	ubfx	r5, r5, #0, #23
    ticks = delta / g_hal_os_tick.ticks_per_ostick;
   1ba0e:	4f29      	ldr	r7, [pc, #164]	; (1bab4 <nrf52_timer_handler+0xd0>)
   1ba10:	683c      	ldr	r4, [r7, #0]
   1ba12:	fb95 f5f4 	sdiv	r5, r5, r4
    os_time_advance(ticks);
   1ba16:	4628      	mov	r0, r5
   1ba18:	f7ff f9b0 	bl	1ad7c <os_time_advance>

    /* Clear timer interrupt */
    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1ba1c:	4b24      	ldr	r3, [pc, #144]	; (1bab0 <nrf52_timer_handler+0xcc>)
   1ba1e:	2200      	movs	r2, #0
   1ba20:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

    /* Update the time associated with the most recent tick */
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ba24:	68bb      	ldr	r3, [r7, #8]
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ba26:	683c      	ldr	r4, [r7, #0]
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ba28:	fb05 3304 	mla	r3, r5, r4, r3
        (ticks * g_hal_os_tick.ticks_per_ostick)) & 0xffffff;
   1ba2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    g_hal_os_tick.lastocmp = (g_hal_os_tick.lastocmp +
   1ba30:	60bb      	str	r3, [r7, #8]

    /* Update the output compare to interrupt at the next tick */
    nrf52_os_tick_set_ocmp(g_hal_os_tick.lastocmp + g_hal_os_tick.ticks_per_ostick);
   1ba32:	441c      	add	r4, r3
    OS_ASSERT_CRITICAL();
   1ba34:	f7ff fa1d 	bl	1ae72 <os_arch_in_critical>
   1ba38:	bb28      	cbnz	r0, 1ba86 <nrf52_timer_handler+0xa2>
   1ba3a:	2300      	movs	r3, #0
   1ba3c:	461a      	mov	r2, r3
   1ba3e:	4619      	mov	r1, r3
   1ba40:	4618      	mov	r0, r3
   1ba42:	f7fd ff77 	bl	19934 <__assert_func>
    assert(x <= 0xffffff);
   1ba46:	2300      	movs	r3, #0
   1ba48:	461a      	mov	r2, r3
   1ba4a:	4619      	mov	r1, r3
   1ba4c:	4618      	mov	r0, r3
   1ba4e:	f7fd ff71 	bl	19934 <__assert_func>
    assert(y <= 0xffffff);
   1ba52:	2300      	movs	r3, #0
   1ba54:	461a      	mov	r2, r3
   1ba56:	4619      	mov	r1, r3
   1ba58:	4618      	mov	r0, r3
   1ba5a:	f7fd ff6b 	bl	19934 <__assert_func>
        return (result | 0xff800000);
   1ba5e:	ea6f 2545 	mvn.w	r5, r5, lsl #9
   1ba62:	ea6f 2555 	mvn.w	r5, r5, lsr #9
   1ba66:	e7d2      	b.n	1ba0e <nrf52_timer_handler+0x2a>
    assert(y <= 0xffffff);
   1ba68:	2300      	movs	r3, #0
   1ba6a:	461a      	mov	r2, r3
   1ba6c:	4619      	mov	r1, r3
   1ba6e:	4618      	mov	r0, r3
   1ba70:	f7fd ff60 	bl	19934 <__assert_func>
        return (result | 0xff800000);
   1ba74:	ea6f 2242 	mvn.w	r2, r2, lsl #9
   1ba78:	ea6f 2252 	mvn.w	r2, r2, lsr #9
        if (delta > 2) {
   1ba7c:	2a02      	cmp	r2, #2
   1ba7e:	dc13      	bgt.n	1baa8 <nrf52_timer_handler+0xc4>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1ba80:	4a0c      	ldr	r2, [pc, #48]	; (1bab4 <nrf52_timer_handler+0xd0>)
   1ba82:	6814      	ldr	r4, [r2, #0]
   1ba84:	441c      	add	r4, r3
        ocmp &= 0xffffff;
   1ba86:	f024 437f 	bic.w	r3, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1ba8a:	4a09      	ldr	r2, [pc, #36]	; (1bab0 <nrf52_timer_handler+0xcc>)
   1ba8c:	f8c2 354c 	str.w	r3, [r2, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1ba90:	f8d2 2504 	ldr.w	r2, [r2, #1284]	; 0x504
    assert(y <= 0xffffff);
   1ba94:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
   1ba98:	d2e6      	bcs.n	1ba68 <nrf52_timer_handler+0x84>
    result = x - y;
   1ba9a:	1a9a      	subs	r2, r3, r2
    if (result & 0x800000) {
   1ba9c:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
   1baa0:	d1e8      	bne.n	1ba74 <nrf52_timer_handler+0x90>
        return (result & 0x007fffff);
   1baa2:	f3c2 0216 	ubfx	r2, r2, #0, #23
   1baa6:	e7e9      	b.n	1ba7c <nrf52_timer_handler+0x98>

    OS_EXIT_CRITICAL(sr);
   1baa8:	4630      	mov	r0, r6
   1baaa:	f7ff f9df 	bl	1ae6c <os_arch_restore_sr>
    os_trace_isr_exit();
}
   1baae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bab0:	40011000 	.word	0x40011000
   1bab4:	2000d6c4 	.word	0x2000d6c4

0001bab8 <os_tick_idle>:

void
os_tick_idle(os_time_t ticks)
{
   1bab8:	b538      	push	{r3, r4, r5, lr}
   1baba:	4605      	mov	r5, r0
    uint32_t ocmp;

    OS_ASSERT_CRITICAL();
   1babc:	f7ff f9d9 	bl	1ae72 <os_arch_in_critical>
   1bac0:	b1a0      	cbz	r0, 1baec <os_tick_idle+0x34>

    if (ticks > 0) {
   1bac2:	2d00      	cmp	r5, #0
   1bac4:	d038      	beq.n	1bb38 <os_tick_idle+0x80>
        /*
         * Enter tickless regime during long idle durations.
         */
        if (ticks > g_hal_os_tick.max_idle_ticks) {
   1bac6:	4b20      	ldr	r3, [pc, #128]	; (1bb48 <os_tick_idle+0x90>)
   1bac8:	685b      	ldr	r3, [r3, #4]
   1baca:	42ab      	cmp	r3, r5
   1bacc:	d200      	bcs.n	1bad0 <os_tick_idle+0x18>
            ticks = g_hal_os_tick.max_idle_ticks;
   1bace:	461d      	mov	r5, r3
        }
        ocmp = g_hal_os_tick.lastocmp + (ticks*g_hal_os_tick.ticks_per_ostick);
   1bad0:	4b1d      	ldr	r3, [pc, #116]	; (1bb48 <os_tick_idle+0x90>)
   1bad2:	689c      	ldr	r4, [r3, #8]
   1bad4:	681a      	ldr	r2, [r3, #0]
   1bad6:	fb05 4402 	mla	r4, r5, r2, r4
    OS_ASSERT_CRITICAL();
   1bada:	f7ff f9ca 	bl	1ae72 <os_arch_in_critical>
   1bade:	b9d0      	cbnz	r0, 1bb16 <os_tick_idle+0x5e>
   1bae0:	2300      	movs	r3, #0
   1bae2:	461a      	mov	r2, r3
   1bae4:	4619      	mov	r1, r3
   1bae6:	4618      	mov	r0, r3
   1bae8:	f7fd ff24 	bl	19934 <__assert_func>
    OS_ASSERT_CRITICAL();
   1baec:	2300      	movs	r3, #0
   1baee:	461a      	mov	r2, r3
   1baf0:	4619      	mov	r1, r3
   1baf2:	4618      	mov	r0, r3
   1baf4:	f7fd ff1e 	bl	19934 <__assert_func>
    assert(y <= 0xffffff);
   1baf8:	2300      	movs	r3, #0
   1bafa:	461a      	mov	r2, r3
   1bafc:	4619      	mov	r1, r3
   1bafe:	4618      	mov	r0, r3
   1bb00:	f7fd ff18 	bl	19934 <__assert_func>
        return (result | 0xff800000);
   1bb04:	ea6f 2343 	mvn.w	r3, r3, lsl #9
   1bb08:	ea6f 2353 	mvn.w	r3, r3, lsr #9
        if (delta > 2) {
   1bb0c:	2b02      	cmp	r3, #2
   1bb0e:	dc13      	bgt.n	1bb38 <os_tick_idle+0x80>
        ocmp += g_hal_os_tick.ticks_per_ostick;
   1bb10:	4b0d      	ldr	r3, [pc, #52]	; (1bb48 <os_tick_idle+0x90>)
   1bb12:	681c      	ldr	r4, [r3, #0]
   1bb14:	4414      	add	r4, r2
        ocmp &= 0xffffff;
   1bb16:	f024 427f 	bic.w	r2, r4, #4278190080	; 0xff000000
        OS_TICK_TIMER->CC[OS_TICK_CMPREG] = ocmp;
   1bb1a:	4b0c      	ldr	r3, [pc, #48]	; (1bb4c <os_tick_idle+0x94>)
   1bb1c:	f8c3 254c 	str.w	r2, [r3, #1356]	; 0x54c
    return OS_TICK_TIMER->COUNTER;
   1bb20:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    assert(y <= 0xffffff);
   1bb24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bb28:	d2e6      	bcs.n	1baf8 <os_tick_idle+0x40>
    result = x - y;
   1bb2a:	1ad3      	subs	r3, r2, r3
    if (result & 0x800000) {
   1bb2c:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
   1bb30:	d1e8      	bne.n	1bb04 <os_tick_idle+0x4c>
        return (result & 0x007fffff);
   1bb32:	f3c3 0316 	ubfx	r3, r3, #0, #23
   1bb36:	e7e9      	b.n	1bb0c <os_tick_idle+0x54>
  __ASM volatile ("dsb 0xF":::"memory");
   1bb38:	f3bf 8f4f 	dsb	sy
        nrf52_os_tick_set_ocmp(ocmp);
    }

    __DSB();
    __WFI();
   1bb3c:	bf30      	wfi

    if (ticks > 0) {
   1bb3e:	b905      	cbnz	r5, 1bb42 <os_tick_idle+0x8a>
         * Update OS time before anything else when coming out of
         * the tickless regime.
         */
        nrf52_timer_handler();
    }
}
   1bb40:	bd38      	pop	{r3, r4, r5, pc}
        nrf52_timer_handler();
   1bb42:	f7ff ff4f 	bl	1b9e4 <nrf52_timer_handler>
}
   1bb46:	e7fb      	b.n	1bb40 <os_tick_idle+0x88>
   1bb48:	2000d6c4 	.word	0x2000d6c4
   1bb4c:	40011000 	.word	0x40011000

0001bb50 <os_tick_init>:

void
os_tick_init(uint32_t os_ticks_per_sec, int prio)
{
   1bb50:	b570      	push	{r4, r5, r6, lr}
    uint32_t sr;

    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bb52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bb56:	fbb3 f3f0 	udiv	r3, r3, r0
   1bb5a:	fb00 f303 	mul.w	r3, r0, r3
   1bb5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1bb62:	d136      	bne.n	1bbd2 <os_tick_init+0x82>
   1bb64:	460c      	mov	r4, r1

    g_hal_os_tick.lastocmp = 0;
   1bb66:	4d1e      	ldr	r5, [pc, #120]	; (1bbe0 <os_tick_init+0x90>)
   1bb68:	2600      	movs	r6, #0
   1bb6a:	60ae      	str	r6, [r5, #8]
    g_hal_os_tick.ticks_per_ostick = RTC_FREQ / os_ticks_per_sec;
   1bb6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1bb70:	fbb3 f0f0 	udiv	r0, r3, r0
   1bb74:	6028      	str	r0, [r5, #0]
    /*
     * The maximum number of OS ticks allowed to elapse during idle is
     * limited to 1/4th the number of timer ticks before the 24-bit counter
     * rolls over.
     */
    g_hal_os_tick.max_idle_ticks = (1UL << 22) / g_hal_os_tick.ticks_per_ostick;
   1bb76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1bb7a:	fbb3 f0f0 	udiv	r0, r3, r0
   1bb7e:	6068      	str	r0, [r5, #4]

    /* disable interrupts */
    OS_ENTER_CRITICAL(sr);
   1bb80:	f7ff f96e 	bl	1ae60 <os_arch_save_sr>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bb84:	0164      	lsls	r4, r4, #5
   1bb86:	b2e4      	uxtb	r4, r4
   1bb88:	4b16      	ldr	r3, [pc, #88]	; (1bbe4 <os_tick_init+0x94>)
   1bb8a:	f883 4311 	strb.w	r4, [r3, #785]	; 0x311
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bb8e:	4a16      	ldr	r2, [pc, #88]	; (1bbe8 <os_tick_init+0x98>)
   1bb90:	6892      	ldr	r2, [r2, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1bb92:	4916      	ldr	r1, [pc, #88]	; (1bbec <os_tick_init+0x9c>)
   1bb94:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bb98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
   1bb9c:	601a      	str	r2, [r3, #0]

    /*
     * Program the OS_TICK_TIMER to operate at 32KHz and trigger an output
     * compare interrupt at a rate of 'os_ticks_per_sec'.
     */
    OS_TICK_TIMER->TASKS_STOP = 1;
   1bb9e:	f103 43c0 	add.w	r3, r3, #1610612736	; 0x60000000
   1bba2:	f503 533c 	add.w	r3, r3, #12032	; 0x2f00
   1bba6:	2201      	movs	r2, #1
   1bba8:	605a      	str	r2, [r3, #4]
    OS_TICK_TIMER->TASKS_CLEAR = 1;
   1bbaa:	609a      	str	r2, [r3, #8]

    OS_TICK_TIMER->EVTENCLR = 0xffffffff;
   1bbac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1bbb0:	f8c3 1348 	str.w	r1, [r3, #840]	; 0x348
    OS_TICK_TIMER->INTENCLR = 0xffffffff;
   1bbb4:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    OS_TICK_TIMER->INTENSET = RTC_COMPARE_INT_MASK(OS_TICK_CMPREG);
   1bbb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   1bbbc:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

    OS_TICK_TIMER->EVENTS_COMPARE[OS_TICK_CMPREG] = 0;
   1bbc0:	f8c3 614c 	str.w	r6, [r3, #332]	; 0x14c
    OS_TICK_TIMER->CC[OS_TICK_CMPREG] = g_hal_os_tick.ticks_per_ostick;
   1bbc4:	6829      	ldr	r1, [r5, #0]
   1bbc6:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c

    OS_TICK_TIMER->TASKS_START = 1;
   1bbca:	601a      	str	r2, [r3, #0]

    OS_EXIT_CRITICAL(sr);
   1bbcc:	f7ff f94e 	bl	1ae6c <os_arch_restore_sr>
}
   1bbd0:	bd70      	pop	{r4, r5, r6, pc}
    assert(RTC_FREQ % os_ticks_per_sec == 0);
   1bbd2:	2300      	movs	r3, #0
   1bbd4:	461a      	mov	r2, r3
   1bbd6:	4619      	mov	r1, r3
   1bbd8:	4618      	mov	r0, r3
   1bbda:	f7fd feab 	bl	19934 <__assert_func>
   1bbde:	bf00      	nop
   1bbe0:	2000d6c4 	.word	0x2000d6c4
   1bbe4:	e000e100 	.word	0xe000e100
   1bbe8:	e000ed00 	.word	0xe000ed00
   1bbec:	0001b9e5 	.word	0x0001b9e5

0001bbf0 <nrf_read_timer_cntr>:
nrf_read_timer_cntr(NRF_TIMER_Type *hwtimer)
{
    uint32_t tcntr;

    /* Force a capture of the timer into 'cntr' capture channel; read it */
    hwtimer->TASKS_CAPTURE[NRF_TIMER_CC_READ] = 1;
   1bbf0:	2301      	movs	r3, #1
   1bbf2:	6483      	str	r3, [r0, #72]	; 0x48
    tcntr = hwtimer->CC[NRF_TIMER_CC_READ];
   1bbf4:	f8d0 0548 	ldr.w	r0, [r0, #1352]	; 0x548

    return tcntr;
}
   1bbf8:	4770      	bx	lr
	...

0001bbfc <nrf_timer_set_ocmp>:
 *
 * @param timer Pointer to timer.
 */
static void
nrf_timer_set_ocmp(struct nrf52_hal_timer *bsptimer, uint32_t expiry)
{
   1bbfc:	b538      	push	{r3, r4, r5, lr}
    uint32_t temp;
    uint32_t cntr;
    NRF_TIMER_Type *hwtimer;
    NRF_RTC_Type *rtctimer;

    if (bsptimer->tmr_rtc) {
   1bbfe:	7883      	ldrb	r3, [r0, #2]
   1bc00:	b393      	cbz	r3, 1bc68 <nrf_timer_set_ocmp+0x6c>
        rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bc02:	6902      	ldr	r2, [r0, #16]
        rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bc04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bc08:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
        temp = bsptimer->tmr_cntr;
   1bc0c:	6843      	ldr	r3, [r0, #4]
        cntr = rtctimer->COUNTER;
   1bc0e:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        if (rtctimer->EVENTS_OVRFLW) {
   1bc12:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bc16:	b11d      	cbz	r5, 1bc20 <nrf_timer_set_ocmp+0x24>
            temp += (1UL << 24);
   1bc18:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
            cntr = rtctimer->COUNTER;
   1bc1c:	f8d2 4504 	ldr.w	r4, [r2, #1284]	; 0x504
        }
        temp |= cntr;
   1bc20:	4323      	orrs	r3, r4
        delta_t = (int32_t)(expiry - temp);
   1bc22:	1acb      	subs	r3, r1, r3
         * The nrf documentation states that you must set the output
         * compare to 2 greater than the counter to guarantee an interrupt.
         * Since the counter can tick once while we check, we make sure
         * it is greater than 2.
         */
        if (delta_t < 3) {
   1bc24:	2b02      	cmp	r3, #2
   1bc26:	dc0e      	bgt.n	1bc46 <nrf_timer_set_ocmp+0x4a>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bc28:	7842      	ldrb	r2, [r0, #1]
   1bc2a:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bc2c:	2b00      	cmp	r3, #0
   1bc2e:	db15      	blt.n	1bc5c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc30:	f002 021f 	and.w	r2, r2, #31
   1bc34:	095b      	lsrs	r3, r3, #5
   1bc36:	2101      	movs	r1, #1
   1bc38:	fa01 f202 	lsl.w	r2, r1, r2
   1bc3c:	3340      	adds	r3, #64	; 0x40
   1bc3e:	491b      	ldr	r1, [pc, #108]	; (1bcac <nrf_timer_set_ocmp+0xb0>)
   1bc40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   1bc44:	e00a      	b.n	1bc5c <nrf_timer_set_ocmp+0x60>
        } else  {
            if (delta_t < (1UL << 24)) {
   1bc46:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   1bc4a:	d208      	bcs.n	1bc5e <nrf_timer_set_ocmp+0x62>
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = expiry & 0x00ffffff;
   1bc4c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   1bc50:	f8c2 1548 	str.w	r1, [r2, #1352]	; 0x548
            } else {
                /* CC too far ahead. Just make sure we set compare far ahead */
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
            }
            rtctimer->INTENSET = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bc54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bc58:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
        /* Force interrupt to occur as we may have missed it */
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
        }
    }
}
   1bc5c:	bd38      	pop	{r3, r4, r5, pc}
                rtctimer->CC[NRF_RTC_TIMER_CC_INT] = cntr + (1UL << 23);
   1bc5e:	f504 0400 	add.w	r4, r4, #8388608	; 0x800000
   1bc62:	f8c2 4548 	str.w	r4, [r2, #1352]	; 0x548
   1bc66:	e7f5      	b.n	1bc54 <nrf_timer_set_ocmp+0x58>
   1bc68:	460d      	mov	r5, r1
   1bc6a:	4604      	mov	r4, r0
        hwtimer = bsptimer->tmr_reg;
   1bc6c:	6900      	ldr	r0, [r0, #16]
        hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bc6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bc72:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
        hwtimer->CC[NRF_TIMER_CC_INT] = expiry;
   1bc76:	f8c0 154c 	str.w	r1, [r0, #1356]	; 0x54c
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bc7a:	2200      	movs	r2, #0
   1bc7c:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
        hwtimer->INTENSET = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bc80:	f8c0 3304 	str.w	r3, [r0, #772]	; 0x304
        if ((int32_t)(nrf_read_timer_cntr(hwtimer) - expiry) >= 0) {
   1bc84:	f7ff ffb4 	bl	1bbf0 <nrf_read_timer_cntr>
   1bc88:	1b40      	subs	r0, r0, r5
   1bc8a:	2800      	cmp	r0, #0
   1bc8c:	dbe6      	blt.n	1bc5c <nrf_timer_set_ocmp+0x60>
            NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bc8e:	7862      	ldrb	r2, [r4, #1]
   1bc90:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bc92:	2b00      	cmp	r3, #0
   1bc94:	dbe2      	blt.n	1bc5c <nrf_timer_set_ocmp+0x60>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bc96:	f002 021f 	and.w	r2, r2, #31
   1bc9a:	095b      	lsrs	r3, r3, #5
   1bc9c:	2101      	movs	r1, #1
   1bc9e:	fa01 f202 	lsl.w	r2, r1, r2
   1bca2:	3340      	adds	r3, #64	; 0x40
   1bca4:	4901      	ldr	r1, [pc, #4]	; (1bcac <nrf_timer_set_ocmp+0xb0>)
   1bca6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
   1bcaa:	e7d7      	b.n	1bc5c <nrf_timer_set_ocmp+0x60>
   1bcac:	e000e100 	.word	0xe000e100

0001bcb0 <nrf_timer_disable_ocmp>:

/* Disable output compare used for timer */
static void
nrf_timer_disable_ocmp(NRF_TIMER_Type *hwtimer)
{
    hwtimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT);
   1bcb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   1bcb4:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bcb8:	4770      	bx	lr

0001bcba <nrf_rtc_disable_ocmp>:

static void
nrf_rtc_disable_ocmp(NRF_RTC_Type *rtctimer)
{
    rtctimer->INTENCLR = NRF_TIMER_INT_MASK(NRF_RTC_TIMER_CC_INT);
   1bcba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   1bcbe:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
}
   1bcc2:	4770      	bx	lr

0001bcc4 <hal_timer_read_bsptimer>:

static uint32_t
hal_timer_read_bsptimer(struct nrf52_hal_timer *bsptimer)
{
   1bcc4:	b430      	push	{r4, r5}
    uint32_t low32;
    uint32_t ctx;
    uint32_t tcntr;
    NRF_RTC_Type *rtctimer;

    rtctimer = (NRF_RTC_Type *)bsptimer->tmr_reg;
   1bcc6:	6902      	ldr	r2, [r0, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bcc8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bccc:	b672      	cpsid	i
    __HAL_DISABLE_INTERRUPTS(ctx);
    tcntr = bsptimer->tmr_cntr;
   1bcce:	6841      	ldr	r1, [r0, #4]
    low32 = rtctimer->COUNTER;
   1bcd0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
    if (rtctimer->EVENTS_OVRFLW) {
   1bcd4:	f8d2 5104 	ldr.w	r5, [r2, #260]	; 0x104
   1bcd8:	b1ad      	cbz	r5, 1bd06 <hal_timer_read_bsptimer+0x42>
        tcntr += (1UL << 24);
   1bcda:	f101 7180 	add.w	r1, r1, #16777216	; 0x1000000
        bsptimer->tmr_cntr = tcntr;
   1bcde:	6041      	str	r1, [r0, #4]
        low32 = rtctimer->COUNTER;
   1bce0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
        rtctimer->EVENTS_OVRFLW = 0;
   1bce4:	2500      	movs	r5, #0
   1bce6:	f8c2 5104 	str.w	r5, [r2, #260]	; 0x104
        NVIC_SetPendingIRQ(bsptimer->tmr_irq_num);
   1bcea:	7840      	ldrb	r0, [r0, #1]
   1bcec:	b242      	sxtb	r2, r0
  if ((int32_t)(IRQn) >= 0)
   1bcee:	42aa      	cmp	r2, r5
   1bcf0:	db09      	blt.n	1bd06 <hal_timer_read_bsptimer+0x42>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bcf2:	f000 001f 	and.w	r0, r0, #31
   1bcf6:	0952      	lsrs	r2, r2, #5
   1bcf8:	2501      	movs	r5, #1
   1bcfa:	fa05 f000 	lsl.w	r0, r5, r0
   1bcfe:	3240      	adds	r2, #64	; 0x40
   1bd00:	4d04      	ldr	r5, [pc, #16]	; (1bd14 <hal_timer_read_bsptimer+0x50>)
   1bd02:	f845 0022 	str.w	r0, [r5, r2, lsl #2]
    }
    tcntr |= low32;
   1bd06:	ea43 0001 	orr.w	r0, r3, r1
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bd0a:	b904      	cbnz	r4, 1bd0e <hal_timer_read_bsptimer+0x4a>
  __ASM volatile ("cpsie i" : : : "memory");
   1bd0c:	b662      	cpsie	i

    return tcntr;
}
   1bd0e:	bc30      	pop	{r4, r5}
   1bd10:	4770      	bx	lr
   1bd12:	bf00      	nop
   1bd14:	e000e100 	.word	0xe000e100

0001bd18 <hal_timer_chk_queue>:
 *
 * @param bsptimer
 */
static void
hal_timer_chk_queue(struct nrf52_hal_timer *bsptimer)
{
   1bd18:	b570      	push	{r4, r5, r6, lr}
   1bd1a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1bd1c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1bd20:	b672      	cpsid	i
   1bd22:	e013      	b.n	1bd4c <hal_timer_chk_queue+0x34>
             * If we are within 3 ticks of RTC, we wont be able to set compare.
             * Thus, we have to service this timer early.
             */
            delta = -3;
        } else {
            tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bd24:	6928      	ldr	r0, [r5, #16]
   1bd26:	f7ff ff63 	bl	1bbf0 <nrf_read_timer_cntr>
            delta = 0;
   1bd2a:	2200      	movs	r2, #0
        }
        if ((int32_t)(tcntr - timer->expiry) >= delta) {
   1bd2c:	68e3      	ldr	r3, [r4, #12]
   1bd2e:	1ac0      	subs	r0, r0, r3
   1bd30:	4290      	cmp	r0, r2
   1bd32:	db19      	blt.n	1bd68 <hal_timer_chk_queue+0x50>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bd34:	6923      	ldr	r3, [r4, #16]
   1bd36:	b1a3      	cbz	r3, 1bd62 <hal_timer_chk_queue+0x4a>
   1bd38:	6962      	ldr	r2, [r4, #20]
   1bd3a:	615a      	str	r2, [r3, #20]
   1bd3c:	6963      	ldr	r3, [r4, #20]
   1bd3e:	6922      	ldr	r2, [r4, #16]
   1bd40:	601a      	str	r2, [r3, #0]
            timer->link.tqe_prev = NULL;
   1bd42:	2300      	movs	r3, #0
   1bd44:	6163      	str	r3, [r4, #20]
            timer->cb_func(timer->cb_arg);
   1bd46:	6863      	ldr	r3, [r4, #4]
   1bd48:	68a0      	ldr	r0, [r4, #8]
   1bd4a:	4798      	blx	r3
    while ((timer = TAILQ_FIRST(&bsptimer->hal_timer_q)) != NULL) {
   1bd4c:	696c      	ldr	r4, [r5, #20]
   1bd4e:	b15c      	cbz	r4, 1bd68 <hal_timer_chk_queue+0x50>
        if (bsptimer->tmr_rtc) {
   1bd50:	78ab      	ldrb	r3, [r5, #2]
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	d0e6      	beq.n	1bd24 <hal_timer_chk_queue+0xc>
            tcntr = hal_timer_read_bsptimer(bsptimer);
   1bd56:	4628      	mov	r0, r5
   1bd58:	f7ff ffb4 	bl	1bcc4 <hal_timer_read_bsptimer>
            delta = -3;
   1bd5c:	f06f 0202 	mvn.w	r2, #2
   1bd60:	e7e4      	b.n	1bd2c <hal_timer_chk_queue+0x14>
            TAILQ_REMOVE(&bsptimer->hal_timer_q, timer, link);
   1bd62:	6963      	ldr	r3, [r4, #20]
   1bd64:	61ab      	str	r3, [r5, #24]
   1bd66:	e7e9      	b.n	1bd3c <hal_timer_chk_queue+0x24>
            break;
        }
    }

    /* Any timers left on queue? If so, we need to set OCMP */
    timer = TAILQ_FIRST(&bsptimer->hal_timer_q);
   1bd68:	696b      	ldr	r3, [r5, #20]
    if (timer) {
   1bd6a:	b133      	cbz	r3, 1bd7a <hal_timer_chk_queue+0x62>
        nrf_timer_set_ocmp(bsptimer, timer->expiry);
   1bd6c:	68d9      	ldr	r1, [r3, #12]
   1bd6e:	4628      	mov	r0, r5
   1bd70:	f7ff ff44 	bl	1bbfc <nrf_timer_set_ocmp>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
        } else {
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
        }
    }
    __HAL_ENABLE_INTERRUPTS(ctx);
   1bd74:	b906      	cbnz	r6, 1bd78 <hal_timer_chk_queue+0x60>
  __ASM volatile ("cpsie i" : : : "memory");
   1bd76:	b662      	cpsie	i
}
   1bd78:	bd70      	pop	{r4, r5, r6, pc}
        if (bsptimer->tmr_rtc) {
   1bd7a:	78ab      	ldrb	r3, [r5, #2]
   1bd7c:	b11b      	cbz	r3, 1bd86 <hal_timer_chk_queue+0x6e>
            nrf_rtc_disable_ocmp((NRF_RTC_Type *)bsptimer->tmr_reg);
   1bd7e:	6928      	ldr	r0, [r5, #16]
   1bd80:	f7ff ff9b 	bl	1bcba <nrf_rtc_disable_ocmp>
   1bd84:	e7f6      	b.n	1bd74 <hal_timer_chk_queue+0x5c>
            nrf_timer_disable_ocmp(bsptimer->tmr_reg);
   1bd86:	6928      	ldr	r0, [r5, #16]
   1bd88:	f7ff ff92 	bl	1bcb0 <nrf_timer_disable_ocmp>
   1bd8c:	e7f2      	b.n	1bd74 <hal_timer_chk_queue+0x5c>

0001bd8e <hal_timer_irq_handler>:
#if (MYNEWT_VAL(TIMER_0) || MYNEWT_VAL(TIMER_1) || MYNEWT_VAL(TIMER_2) || \
     MYNEWT_VAL(TIMER_3) || MYNEWT_VAL(TIMER_4))

static void
hal_timer_irq_handler(struct nrf52_hal_timer *bsptimer)
{
   1bd8e:	b510      	push	{r4, lr}
    NRF_TIMER_Type *hwtimer;

    os_trace_isr_enter();

    /* Check interrupt source. If set, clear them */
    hwtimer = bsptimer->tmr_reg;
   1bd90:	6904      	ldr	r4, [r0, #16]
    compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bd92:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
    if (compare) {
   1bd96:	b113      	cbz	r3, 1bd9e <hal_timer_irq_handler+0x10>
        hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT] = 0;
   1bd98:	2300      	movs	r3, #0
   1bd9a:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
    }

    /* XXX: make these stats? */
    /* Count # of timer isrs */
    ++bsptimer->timer_isrs;
   1bd9e:	6883      	ldr	r3, [r0, #8]
   1bda0:	3301      	adds	r3, #1
   1bda2:	6083      	str	r3, [r0, #8]
     * counter is already passed the output compare value), we use the NVIC
     * to set a pending interrupt. This means that there will be no compare
     * flag set, so all we do is check to see if the compare interrupt is
     * enabled.
     */
    if (hwtimer->INTENCLR & NRF_TIMER_INT_MASK(NRF_TIMER_CC_INT)) {
   1bda4:	f8d4 3308 	ldr.w	r3, [r4, #776]	; 0x308
   1bda8:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   1bdac:	d100      	bne.n	1bdb0 <hal_timer_irq_handler+0x22>
        /* XXX: Recommended by nordic to make sure interrupts are cleared */
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
    }

    os_trace_isr_exit();
}
   1bdae:	bd10      	pop	{r4, pc}
        hal_timer_chk_queue(bsptimer);
   1bdb0:	f7ff ffb2 	bl	1bd18 <hal_timer_chk_queue>
        compare = hwtimer->EVENTS_COMPARE[NRF_TIMER_CC_INT];
   1bdb4:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
}
   1bdb8:	e7f9      	b.n	1bdae <hal_timer_irq_handler+0x20>
	...

0001bdbc <nrf52_timer0_irq_handler>:
#endif

#if MYNEWT_VAL(TIMER_0)
void
nrf52_timer0_irq_handler(void)
{
   1bdbc:	b508      	push	{r3, lr}
    hal_timer_irq_handler(&nrf52_hal_timer0);
   1bdbe:	4802      	ldr	r0, [pc, #8]	; (1bdc8 <nrf52_timer0_irq_handler+0xc>)
   1bdc0:	f7ff ffe5 	bl	1bd8e <hal_timer_irq_handler>
}
   1bdc4:	bd08      	pop	{r3, pc}
   1bdc6:	bf00      	nop
   1bdc8:	2000d6d0 	.word	0x2000d6d0

0001bdcc <hal_timer_init>:
    uint8_t irq_num;
    struct nrf52_hal_timer *bsptimer;
    void *hwtimer;
    hal_timer_irq_handler_t irq_isr;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bdcc:	2805      	cmp	r0, #5
   1bdce:	dc1c      	bgt.n	1be0a <hal_timer_init+0x3e>
   1bdd0:	4b12      	ldr	r3, [pc, #72]	; (1be1c <hal_timer_init+0x50>)
   1bdd2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
   1bdd6:	b1d3      	cbz	r3, 1be0e <hal_timer_init+0x42>

    /* If timer is enabled do not allow init */
    if (bsptimer->tmr_enabled) {
   1bdd8:	781a      	ldrb	r2, [r3, #0]
   1bdda:	b9d2      	cbnz	r2, 1be12 <hal_timer_init+0x46>
        rc = EINVAL;
        goto err;
    }

    switch (timer_num) {
   1bddc:	b9d8      	cbnz	r0, 1be16 <hal_timer_init+0x4a>
    if (hwtimer == NULL) {
        rc = EINVAL;
        goto err;
    }

    bsptimer->tmr_reg = hwtimer;
   1bdde:	4a10      	ldr	r2, [pc, #64]	; (1be20 <hal_timer_init+0x54>)
   1bde0:	611a      	str	r2, [r3, #16]
    bsptimer->tmr_irq_num = irq_num;
   1bde2:	2208      	movs	r2, #8
   1bde4:	705a      	strb	r2, [r3, #1]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bde6:	4b0f      	ldr	r3, [pc, #60]	; (1be24 <hal_timer_init+0x58>)
   1bde8:	f44f 7280 	mov.w	r2, #256	; 0x100
   1bdec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   1bdf0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   1bdf4:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1bdf8:	22e0      	movs	r2, #224	; 0xe0
   1bdfa:	f883 2308 	strb.w	r2, [r3, #776]	; 0x308
  uint32_t vectors = (uint32_t )SCB->VTOR;
   1bdfe:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
   1be02:	689b      	ldr	r3, [r3, #8]
  (* (int *) (vectors + ((int32_t)IRQn + NVIC_USER_IRQ_OFFSET) * 4)) = vector;
   1be04:	4a08      	ldr	r2, [pc, #32]	; (1be28 <hal_timer_init+0x5c>)
   1be06:	661a      	str	r2, [r3, #96]	; 0x60
    /* Disable IRQ, set priority and set vector in table */
    NVIC_DisableIRQ(irq_num);
    NVIC_SetPriority(irq_num, (1 << __NVIC_PRIO_BITS) - 1);
    NVIC_SetVector(irq_num, (uint32_t)irq_isr);

    return 0;
   1be08:	4770      	bx	lr

err:
    return rc;
   1be0a:	2016      	movs	r0, #22
   1be0c:	4770      	bx	lr
   1be0e:	2016      	movs	r0, #22
   1be10:	4770      	bx	lr
   1be12:	2016      	movs	r0, #22
   1be14:	4770      	bx	lr
   1be16:	2016      	movs	r0, #22
}
   1be18:	4770      	bx	lr
   1be1a:	bf00      	nop
   1be1c:	0002117c 	.word	0x0002117c
   1be20:	40008000 	.word	0x40008000
   1be24:	e000e100 	.word	0xe000e100
   1be28:	0001bdbd 	.word	0x0001bdbd

0001be2c <hal_timer_config>:
    NRF_TIMER_Type *hwtimer;
#if MYNEWT_VAL(TIMER_5)
    NRF_RTC_Type *rtctimer;
#endif

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1be2c:	2805      	cmp	r0, #5
   1be2e:	dc65      	bgt.n	1befc <hal_timer_config+0xd0>
   1be30:	4b39      	ldr	r3, [pc, #228]	; (1bf18 <hal_timer_config+0xec>)
   1be32:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1be36:	2800      	cmp	r0, #0
   1be38:	d062      	beq.n	1bf00 <hal_timer_config+0xd4>
        return 0;
    }
#endif

    /* Set timer to desired frequency */
    div = NRF52_MAX_TIMER_FREQ / freq_hz;
   1be3a:	4b38      	ldr	r3, [pc, #224]	; (1bf1c <hal_timer_config+0xf0>)
   1be3c:	fbb3 f1f1 	udiv	r1, r3, r1
    /*
     * Largest prescaler is 2^9 and must make sure frequency not too high.
     * If hwtimer is NULL it means that the timer was not initialized prior
     * to call.
     */
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1be40:	7803      	ldrb	r3, [r0, #0]
   1be42:	2b00      	cmp	r3, #0
   1be44:	d15e      	bne.n	1bf04 <hal_timer_config+0xd8>
   1be46:	2900      	cmp	r1, #0
   1be48:	d05e      	beq.n	1bf08 <hal_timer_config+0xdc>
   1be4a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   1be4e:	d85d      	bhi.n	1bf0c <hal_timer_config+0xe0>
        (bsptimer->tmr_reg == NULL)) {
   1be50:	6902      	ldr	r2, [r0, #16]
    if (bsptimer->tmr_enabled || (div == 0) || (div > 512) ||
   1be52:	2a00      	cmp	r2, #0
   1be54:	d05c      	beq.n	1bf10 <hal_timer_config+0xe4>
{
   1be56:	b430      	push	{r4, r5}
        rc = EINVAL;
        goto err;
    }

    if (div == 1) {
   1be58:	2901      	cmp	r1, #1
   1be5a:	d013      	beq.n	1be84 <hal_timer_config+0x58>
        prescaler = 0;
    } else {
        /* Find closest prescaler */
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1be5c:	2301      	movs	r3, #1
   1be5e:	2b09      	cmp	r3, #9
   1be60:	d810      	bhi.n	1be84 <hal_timer_config+0x58>
            if (div <= (1 << prescaler)) {
   1be62:	2201      	movs	r2, #1
   1be64:	409a      	lsls	r2, r3
   1be66:	428a      	cmp	r2, r1
   1be68:	d202      	bcs.n	1be70 <hal_timer_config+0x44>
        for (prescaler = 1; prescaler < 10; ++prescaler) {
   1be6a:	3301      	adds	r3, #1
   1be6c:	b2db      	uxtb	r3, r3
   1be6e:	e7f6      	b.n	1be5e <hal_timer_config+0x32>
                min_delta = div - (1 << (prescaler - 1));
   1be70:	1e5c      	subs	r4, r3, #1
   1be72:	2501      	movs	r5, #1
   1be74:	fa05 f404 	lsl.w	r4, r5, r4
   1be78:	1b0c      	subs	r4, r1, r4
                max_delta = (1 << prescaler) - div;
   1be7a:	1a51      	subs	r1, r2, r1
                if (min_delta < max_delta) {
   1be7c:	428c      	cmp	r4, r1
   1be7e:	d201      	bcs.n	1be84 <hal_timer_config+0x58>
                    prescaler -= 1;
   1be80:	3b01      	subs	r3, #1
   1be82:	b2db      	uxtb	r3, r3
            }
        }
    }

    /* Now set the actual frequency */
    bsptimer->tmr_freq = NRF52_MAX_TIMER_FREQ / (1 << prescaler);
   1be84:	4a25      	ldr	r2, [pc, #148]	; (1bf1c <hal_timer_config+0xf0>)
   1be86:	411a      	asrs	r2, r3
   1be88:	60c2      	str	r2, [r0, #12]
    bsptimer->tmr_enabled = 1;
   1be8a:	2201      	movs	r2, #1
   1be8c:	7002      	strb	r2, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   1be8e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   1be92:	b672      	cpsid	i

    /* disable interrupts */
    __HAL_DISABLE_INTERRUPTS(ctx);

    /* Make sure HFXO is started */
    if ((NRF_CLOCK->HFCLKSTAT &
   1be94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1be98:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
   1be9c:	f002 1201 	and.w	r2, r2, #65537	; 0x10001
   1bea0:	f1b2 1f01 	cmp.w	r2, #65537	; 0x10001
   1bea4:	d00c      	beq.n	1bec0 <hal_timer_config+0x94>
         (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) !=
        (CLOCK_HFCLKSTAT_SRC_Msk | CLOCK_HFCLKSTAT_STATE_Msk)) {
        NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
   1bea6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1beaa:	2100      	movs	r1, #0
   1beac:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
        NRF_CLOCK->TASKS_HFCLKSTART = 1;
   1beb0:	2101      	movs	r1, #1
   1beb2:	6011      	str	r1, [r2, #0]
        while (1) {
            if ((NRF_CLOCK->EVENTS_HFCLKSTARTED) != 0) {
   1beb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   1beb8:	f8d2 2100 	ldr.w	r2, [r2, #256]	; 0x100
   1bebc:	2a00      	cmp	r2, #0
   1bebe:	d0f9      	beq.n	1beb4 <hal_timer_config+0x88>
                break;
            }
        }
    }
    hwtimer = bsptimer->tmr_reg;
   1bec0:	6902      	ldr	r2, [r0, #16]

    /* Stop the timer first */
    hwtimer->TASKS_STOP = 1;
   1bec2:	2101      	movs	r1, #1
   1bec4:	6051      	str	r1, [r2, #4]
    hwtimer->TASKS_CLEAR = 1;
   1bec6:	60d1      	str	r1, [r2, #12]

    /* Put the timer in timer mode using 32 bits. */
    hwtimer->MODE = TIMER_MODE_MODE_Timer;
   1bec8:	2500      	movs	r5, #0
   1beca:	f8c2 5504 	str.w	r5, [r2, #1284]	; 0x504
    hwtimer->BITMODE = TIMER_BITMODE_BITMODE_32Bit;
   1bece:	2503      	movs	r5, #3
   1bed0:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508

    /* Set the pre-scalar */
    hwtimer->PRESCALER = prescaler;
   1bed4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

    /* Start the timer */
    hwtimer->TASKS_START = 1;
   1bed8:	6011      	str	r1, [r2, #0]

    NVIC_EnableIRQ(bsptimer->tmr_irq_num);
   1beda:	7842      	ldrb	r2, [r0, #1]
   1bedc:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
   1bede:	2b00      	cmp	r3, #0
   1bee0:	db07      	blt.n	1bef2 <hal_timer_config+0xc6>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1bee2:	f002 021f 	and.w	r2, r2, #31
   1bee6:	095b      	lsrs	r3, r3, #5
   1bee8:	fa01 f202 	lsl.w	r2, r1, r2
   1beec:	490c      	ldr	r1, [pc, #48]	; (1bf20 <hal_timer_config+0xf4>)
   1beee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

    __HAL_ENABLE_INTERRUPTS(ctx);
   1bef2:	b97c      	cbnz	r4, 1bf14 <hal_timer_config+0xe8>
  __ASM volatile ("cpsie i" : : : "memory");
   1bef4:	b662      	cpsie	i

    return 0;
   1bef6:	2000      	movs	r0, #0

err:
    return rc;
}
   1bef8:	bc30      	pop	{r4, r5}
   1befa:	4770      	bx	lr
    return rc;
   1befc:	2016      	movs	r0, #22
   1befe:	4770      	bx	lr
   1bf00:	2016      	movs	r0, #22
   1bf02:	4770      	bx	lr
   1bf04:	2016      	movs	r0, #22
   1bf06:	4770      	bx	lr
   1bf08:	2016      	movs	r0, #22
   1bf0a:	4770      	bx	lr
   1bf0c:	2016      	movs	r0, #22
   1bf0e:	4770      	bx	lr
   1bf10:	2016      	movs	r0, #22
}
   1bf12:	4770      	bx	lr
    return 0;
   1bf14:	2000      	movs	r0, #0
   1bf16:	e7ef      	b.n	1bef8 <hal_timer_config+0xcc>
   1bf18:	0002117c 	.word	0x0002117c
   1bf1c:	00f42400 	.word	0x00f42400
   1bf20:	e000e100 	.word	0xe000e100

0001bf24 <hal_timer_read>:
 *
 * @return uint32_t The timer counter register.
 */
uint32_t
hal_timer_read(int timer_num)
{
   1bf24:	b508      	push	{r3, lr}
    int rc;
    uint32_t tcntr;
    struct nrf52_hal_timer *bsptimer;

    NRF52_HAL_TIMER_RESOLVE(timer_num, bsptimer);
   1bf26:	2805      	cmp	r0, #5
   1bf28:	dc0c      	bgt.n	1bf44 <hal_timer_read+0x20>
   1bf2a:	4b09      	ldr	r3, [pc, #36]	; (1bf50 <hal_timer_read+0x2c>)
   1bf2c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   1bf30:	b140      	cbz	r0, 1bf44 <hal_timer_read+0x20>
    if (bsptimer->tmr_rtc) {
   1bf32:	7883      	ldrb	r3, [r0, #2]
   1bf34:	b91b      	cbnz	r3, 1bf3e <hal_timer_read+0x1a>
        tcntr = hal_timer_read_bsptimer(bsptimer);
    } else {
        tcntr = nrf_read_timer_cntr(bsptimer->tmr_reg);
   1bf36:	6900      	ldr	r0, [r0, #16]
   1bf38:	f7ff fe5a 	bl	1bbf0 <nrf_read_timer_cntr>
    /* Assert here since there is no invalid return code */
err:
    assert(0);
    rc = 0;
    return rc;
}
   1bf3c:	bd08      	pop	{r3, pc}
        tcntr = hal_timer_read_bsptimer(bsptimer);
   1bf3e:	f7ff fec1 	bl	1bcc4 <hal_timer_read_bsptimer>
   1bf42:	e7fb      	b.n	1bf3c <hal_timer_read+0x18>
    assert(0);
   1bf44:	2300      	movs	r3, #0
   1bf46:	461a      	mov	r2, r3
   1bf48:	4619      	mov	r1, r3
   1bf4a:	4618      	mov	r0, r3
   1bf4c:	f7fd fcf2 	bl	19934 <__assert_func>
   1bf50:	0002117c 	.word	0x0002117c

0001bf54 <nrf52_periph_create_timers>:
};
#endif

static void
nrf52_periph_create_timers(void)
{
   1bf54:	b508      	push	{r3, lr}
    int rc;

    (void)rc;

#if MYNEWT_VAL(TIMER_0)
    rc = hal_timer_init(0, NULL);
   1bf56:	2100      	movs	r1, #0
   1bf58:	4608      	mov	r0, r1
   1bf5a:	f7ff ff37 	bl	1bdcc <hal_timer_init>
    assert(rc == 0);
   1bf5e:	b920      	cbnz	r0, 1bf6a <nrf52_periph_create_timers+0x16>
    rc = hal_timer_init(5, NULL);
    assert(rc == 0);
#endif

#if MYNEWT_VAL(OS_CPUTIME_TIMER_NUM) >= 0
    rc = os_cputime_init(MYNEWT_VAL(OS_CPUTIME_FREQ));
   1bf60:	4808      	ldr	r0, [pc, #32]	; (1bf84 <nrf52_periph_create_timers+0x30>)
   1bf62:	f7fd ff11 	bl	19d88 <os_cputime_init>
    assert(rc == 0);
   1bf66:	b930      	cbnz	r0, 1bf76 <nrf52_periph_create_timers+0x22>
#endif
}
   1bf68:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bf6a:	2300      	movs	r3, #0
   1bf6c:	461a      	mov	r2, r3
   1bf6e:	4619      	mov	r1, r3
   1bf70:	4618      	mov	r0, r3
   1bf72:	f7fd fcdf 	bl	19934 <__assert_func>
    assert(rc == 0);
   1bf76:	2300      	movs	r3, #0
   1bf78:	461a      	mov	r2, r3
   1bf7a:	4619      	mov	r1, r3
   1bf7c:	4618      	mov	r0, r3
   1bf7e:	f7fd fcd9 	bl	19934 <__assert_func>
   1bf82:	bf00      	nop
   1bf84:	000f4240 	.word	0x000f4240

0001bf88 <nrf52_periph_create_i2c>:
#endif
}

static void
nrf52_periph_create_i2c(void)
{
   1bf88:	b508      	push	{r3, lr}
    rc = bus_i2c_hal_dev_create("i2c1", &i2c1_bus,
                                (struct bus_i2c_dev_cfg *)&i2c1_cfg);
    assert(rc == 0);
#endif
#else
    rc = hal_i2c_init(1, (void *)&hal_i2c1_cfg);
   1bf8a:	4906      	ldr	r1, [pc, #24]	; (1bfa4 <nrf52_periph_create_i2c+0x1c>)
   1bf8c:	2001      	movs	r0, #1
   1bf8e:	f7fd f82b 	bl	18fe8 <hal_i2c_init>
    assert(rc == 0);
   1bf92:	b900      	cbnz	r0, 1bf96 <nrf52_periph_create_i2c+0xe>
#endif
#endif
}
   1bf94:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bf96:	2300      	movs	r3, #0
   1bf98:	461a      	mov	r2, r3
   1bf9a:	4619      	mov	r1, r3
   1bf9c:	4618      	mov	r0, r3
   1bf9e:	f7fd fcc9 	bl	19934 <__assert_func>
   1bfa2:	bf00      	nop
   1bfa4:	00021194 	.word	0x00021194

0001bfa8 <nrf52_periph_create_spi>:

static void
nrf52_periph_create_spi(void)
{
   1bfa8:	b508      	push	{r3, lr}
#if MYNEWT_VAL(BUS_DRIVER_PRESENT)
    rc = bus_spi_hal_dev_create("spi0",
                                &spi0_bus, (struct bus_spi_dev_cfg *)&spi0_cfg);
    assert(rc == 0);
#else
    rc = hal_spi_init(0, (void *)&os_bsp_spi0m_cfg, HAL_SPI_TYPE_MASTER);
   1bfaa:	2200      	movs	r2, #0
   1bfac:	4905      	ldr	r1, [pc, #20]	; (1bfc4 <nrf52_periph_create_spi+0x1c>)
   1bfae:	4610      	mov	r0, r2
   1bfb0:	f7fd fb4e 	bl	19650 <hal_spi_init>
    assert(rc == 0);
   1bfb4:	b900      	cbnz	r0, 1bfb8 <nrf52_periph_create_spi+0x10>
#endif
#if MYNEWT_VAL(SPI_2_SLAVE)
    rc = hal_spi_init(2, (void *)&os_bsp_spi2s_cfg, HAL_SPI_TYPE_SLAVE);
    assert(rc == 0);
#endif
}
   1bfb6:	bd08      	pop	{r3, pc}
    assert(rc == 0);
   1bfb8:	2300      	movs	r3, #0
   1bfba:	461a      	mov	r2, r3
   1bfbc:	4619      	mov	r1, r3
   1bfbe:	4618      	mov	r0, r3
   1bfc0:	f7fd fcb8 	bl	19934 <__assert_func>
   1bfc4:	000211a0 	.word	0x000211a0

0001bfc8 <nrf52_periph_create>:

void
nrf52_periph_create(void)
{
   1bfc8:	b508      	push	{r3, lr}
    nrf52_periph_create_timers();
   1bfca:	f7ff ffc3 	bl	1bf54 <nrf52_periph_create_timers>
    nrf52_periph_create_adc();
    nrf52_periph_create_pwm();
    nrf52_periph_create_trng();
    nrf52_periph_create_crypto();
    nrf52_periph_create_uart();
    nrf52_periph_create_i2c();
   1bfce:	f7ff ffdb 	bl	1bf88 <nrf52_periph_create_i2c>
    nrf52_periph_create_spi();
   1bfd2:	f7ff ffe9 	bl	1bfa8 <nrf52_periph_create_spi>
}
   1bfd6:	bd08      	pop	{r3, pc}

0001bfd8 <sensor_dev_create>:
    assert(rc == 0);

    rc = config_icp10114_sensor();
    assert(rc == 0);
#endif
}
   1bfd8:	4770      	bx	lr
	...

0001bfdc <sensor_mgr_remove>:
}

static void
sensor_mgr_remove(struct sensor *sensor)
{
    SLIST_REMOVE(&sensor_mgr.mgr_sensor_list, sensor, sensor, s_next);
   1bfdc:	4b08      	ldr	r3, [pc, #32]	; (1c000 <sensor_mgr_remove+0x24>)
   1bfde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1bfe0:	4282      	cmp	r2, r0
   1bfe2:	d104      	bne.n	1bfee <sensor_mgr_remove+0x12>
   1bfe4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
   1bfe8:	631a      	str	r2, [r3, #48]	; 0x30
   1bfea:	4770      	bx	lr
   1bfec:	461a      	mov	r2, r3
   1bfee:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   1bff2:	4283      	cmp	r3, r0
   1bff4:	d1fa      	bne.n	1bfec <sensor_mgr_remove+0x10>
   1bff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1bffa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
   1bffe:	4770      	bx	lr
   1c000:	2000d6f0 	.word	0x2000d6f0

0001c004 <sensor_mgr_insert>:

static void
sensor_mgr_insert(struct sensor *sensor)
{
   1c004:	b410      	push	{r4}
    struct sensor *cursor, *prev;

    prev = cursor = NULL;
    if (!sensor->s_poll_rate) {
   1c006:	6a03      	ldr	r3, [r0, #32]
   1c008:	b993      	cbnz	r3, 1c030 <sensor_mgr_insert+0x2c>
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c00a:	4b15      	ldr	r3, [pc, #84]	; (1c060 <sensor_mgr_insert+0x5c>)
   1c00c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c00e:	2100      	movs	r1, #0
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c010:	e002      	b.n	1c018 <sensor_mgr_insert+0x14>
            prev = cursor;
   1c012:	4619      	mov	r1, r3
        SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c014:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c018:	2b00      	cmp	r3, #0
   1c01a:	d1fa      	bne.n	1c012 <sensor_mgr_insert+0xe>

        prev = cursor;
    }

insert:
    if (prev == NULL) {
   1c01c:	b1c9      	cbz	r1, 1c052 <sensor_mgr_insert+0x4e>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
    } else {
        SLIST_INSERT_AFTER(prev, sensor, s_next);
   1c01e:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
   1c022:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
   1c026:	f8c1 0080 	str.w	r0, [r1, #128]	; 0x80
    }
}
   1c02a:	f85d 4b04 	ldr.w	r4, [sp], #4
   1c02e:	4770      	bx	lr
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c030:	4b0b      	ldr	r3, [pc, #44]	; (1c060 <sensor_mgr_insert+0x5c>)
   1c032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    prev = cursor = NULL;
   1c034:	2100      	movs	r1, #0
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c036:	2b00      	cmp	r3, #0
   1c038:	d0f0      	beq.n	1c01c <sensor_mgr_insert+0x18>
        if (!cursor->s_poll_rate) {
   1c03a:	6a1a      	ldr	r2, [r3, #32]
   1c03c:	2a00      	cmp	r2, #0
   1c03e:	d0ed      	beq.n	1c01c <sensor_mgr_insert+0x18>
        if (OS_TIME_TICK_LT(sensor->s_next_run, cursor->s_next_run)) {
   1c040:	6a42      	ldr	r2, [r0, #36]	; 0x24
   1c042:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1c044:	1b12      	subs	r2, r2, r4
   1c046:	2a00      	cmp	r2, #0
   1c048:	dbe8      	blt.n	1c01c <sensor_mgr_insert+0x18>
        prev = cursor;
   1c04a:	4619      	mov	r1, r3
    SLIST_FOREACH(cursor, &sensor_mgr.mgr_sensor_list, s_next) {
   1c04c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
   1c050:	e7f1      	b.n	1c036 <sensor_mgr_insert+0x32>
        SLIST_INSERT_HEAD(&sensor_mgr.mgr_sensor_list, sensor, s_next);
   1c052:	4b03      	ldr	r3, [pc, #12]	; (1c060 <sensor_mgr_insert+0x5c>)
   1c054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   1c056:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   1c05a:	6318      	str	r0, [r3, #48]	; 0x30
   1c05c:	e7e5      	b.n	1c02a <sensor_mgr_insert+0x26>
   1c05e:	bf00      	nop
   1c060:	2000d6f0 	.word	0x2000d6f0

0001c064 <sensor_type_traits_empty>:
}

static uint8_t
sensor_type_traits_empty(struct sensor *sensor)
{
    return SLIST_EMPTY(&sensor->s_type_traits_list);
   1c064:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
}
   1c066:	fab0 f080 	clz	r0, r0
   1c06a:	0940      	lsrs	r0, r0, #5
   1c06c:	4770      	bx	lr
	...

0001c070 <sensor_mgr_evq_set>:
}

static void
sensor_mgr_evq_set(struct os_eventq *evq)
{
    sensor_mgr.mgr_eventq = evq;
   1c070:	4b01      	ldr	r3, [pc, #4]	; (1c078 <sensor_mgr_evq_set+0x8>)
   1c072:	62d8      	str	r0, [r3, #44]	; 0x2c
}
   1c074:	4770      	bx	lr
   1c076:	bf00      	nop
   1c078:	2000d6f0 	.word	0x2000d6f0

0001c07c <sensor_mgr_match_bytype>:
 *
 * @return 1 if matches, 0 if it doesn't match.
 */
int
sensor_mgr_match_bytype(struct sensor *sensor, void *arg)
{
   1c07c:	e92d 0830 	stmdb	sp!, {r4, r5, fp}
     * sensor, and type is the bitmask we're searching for. We also look at
     * the mask as the driver might be configured to work in a mode where only
     * some of the sensors are supported but not all. Compare the three,
     * and if there is a match, return 1. If it is not supported, return 0.
     */
    return (*type & sensor->s_types & sensor->s_mask) ? 1 : 0;
   1c080:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c084:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   1c088:	ea02 0b04 	and.w	fp, r2, r4
   1c08c:	ea03 0c05 	and.w	ip, r3, r5
   1c090:	e9d0 0106 	ldrd	r0, r1, [r0, #24]
   1c094:	ea0b 0200 	and.w	r2, fp, r0
   1c098:	ea0c 0301 	and.w	r3, ip, r1
   1c09c:	4313      	orrs	r3, r2
}
   1c09e:	bf14      	ite	ne
   1c0a0:	2001      	movne	r0, #1
   1c0a2:	2000      	moveq	r0, #0
   1c0a4:	e8bd 0830 	ldmia.w	sp!, {r4, r5, fp}
   1c0a8:	4770      	bx	lr

0001c0aa <sensor_read_data_func>:
}

static int
sensor_read_data_func(struct sensor *sensor, void *arg, void *data,
                      sensor_type_t type)
{
   1c0aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c0ae:	b083      	sub	sp, #12
   1c0b0:	4605      	mov	r5, r0
   1c0b2:	4689      	mov	r9, r1
   1c0b4:	4690      	mov	r8, r2
   1c0b6:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
    struct sensor_listener *listener;
    struct sensor_read_ctx *ctx;

    ctx = (struct sensor_read_ctx *) arg;

    if ((uint8_t)(uintptr_t)(ctx->user_arg) != SENSOR_IGN_LISTENER) {
   1c0ba:	790b      	ldrb	r3, [r1, #4]
   1c0bc:	2b01      	cmp	r3, #1
   1c0be:	d013      	beq.n	1c0e8 <sensor_read_data_func+0x3e>
        /* Notify all listeners first */
        SLIST_FOREACH(listener, &sensor->s_listener_list, sl_next) {
   1c0c0:	6ec4      	ldr	r4, [r0, #108]	; 0x6c
   1c0c2:	e000      	b.n	1c0c6 <sensor_read_data_func+0x1c>
   1c0c4:	6924      	ldr	r4, [r4, #16]
   1c0c6:	b17c      	cbz	r4, 1c0e8 <sensor_read_data_func+0x3e>
            if (listener->sl_sensor_type & type) {
   1c0c8:	e9d4 0100 	ldrd	r0, r1, [r4]
   1c0cc:	ea00 0206 	and.w	r2, r0, r6
   1c0d0:	ea01 0307 	and.w	r3, r1, r7
   1c0d4:	4313      	orrs	r3, r2
   1c0d6:	d0f5      	beq.n	1c0c4 <sensor_read_data_func+0x1a>
                listener->sl_func(sensor, listener->sl_arg, data, type);
   1c0d8:	68a3      	ldr	r3, [r4, #8]
   1c0da:	68e1      	ldr	r1, [r4, #12]
   1c0dc:	e9cd 6700 	strd	r6, r7, [sp]
   1c0e0:	4642      	mov	r2, r8
   1c0e2:	4628      	mov	r0, r5
   1c0e4:	4798      	blx	r3
   1c0e6:	e7ed      	b.n	1c0c4 <sensor_read_data_func+0x1a>
            }
        }
    }

    /* Call data function */
    if (ctx->user_func != NULL) {
   1c0e8:	f8d9 3000 	ldr.w	r3, [r9]
   1c0ec:	b14b      	cbz	r3, 1c102 <sensor_read_data_func+0x58>
        return (ctx->user_func(sensor, ctx->user_arg, data, type));
   1c0ee:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1c0f2:	e9cd 6700 	strd	r6, r7, [sp]
   1c0f6:	4642      	mov	r2, r8
   1c0f8:	4628      	mov	r0, r5
   1c0fa:	4798      	blx	r3
    }

    return (0);
}
   1c0fc:	b003      	add	sp, #12
   1c0fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return (0);
   1c102:	2000      	movs	r0, #0
   1c104:	e7fa      	b.n	1c0fc <sensor_read_data_func+0x52>
	...

0001c108 <sensor_base_ts_update_event>:
{
   1c108:	b530      	push	{r4, r5, lr}
   1c10a:	b087      	sub	sp, #28
    ticks = os_time_get();
   1c10c:	f7fe fe30 	bl	1ad70 <os_time_get>
   1c110:	4604      	mov	r4, r0
    rc = os_gettimeofday(&ostv, &ostz);
   1c112:	a901      	add	r1, sp, #4
   1c114:	a802      	add	r0, sp, #8
   1c116:	f7fe fe65 	bl	1ade4 <os_gettimeofday>
    if (rc) {
   1c11a:	b138      	cbz	r0, 1c12c <sensor_base_ts_update_event+0x24>
        ticks += OS_TICKS_PER_SEC * 600;
   1c11c:	f504 3496 	add.w	r4, r4, #76800	; 0x12c00
    os_callout_reset(&st_up_osco, ticks);
   1c120:	4621      	mov	r1, r4
   1c122:	4809      	ldr	r0, [pc, #36]	; (1c148 <sensor_base_ts_update_event+0x40>)
   1c124:	f7fd fdac 	bl	19c80 <os_callout_reset>
}
   1c128:	b007      	add	sp, #28
   1c12a:	bd30      	pop	{r4, r5, pc}
    ticks += OS_TICKS_PER_SEC * 2000;
   1c12c:	f504 347a 	add.w	r4, r4, #256000	; 0x3e800
    sensor_base_ts.st_ostv = ostv;
   1c130:	4d06      	ldr	r5, [pc, #24]	; (1c14c <sensor_base_ts_update_event+0x44>)
   1c132:	ab06      	add	r3, sp, #24
   1c134:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c138:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c13c:	9b01      	ldr	r3, [sp, #4]
   1c13e:	612b      	str	r3, [r5, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c140:	f7fd fe28 	bl	19d94 <os_cputime_get32>
   1c144:	6168      	str	r0, [r5, #20]
   1c146:	e7eb      	b.n	1c120 <sensor_base_ts_update_event+0x18>
   1c148:	2000d724 	.word	0x2000d724
   1c14c:	2000d748 	.word	0x2000d748

0001c150 <sensor_up_timestamp>:
    assert(rc == 0);
}

static void
sensor_up_timestamp(struct sensor *sensor)
{
   1c150:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   1c154:	4604      	mov	r4, r0
    uint32_t curr_ts_ticks;
    uint32_t ts;

    curr_ts_ticks = os_cputime_get32();
   1c156:	f7fd fe1d 	bl	19d94 <os_cputime_get32>

    ts = os_cputime_ticks_to_usecs(curr_ts_ticks -
   1c15a:	4a0e      	ldr	r2, [pc, #56]	; (1c194 <sensor_up_timestamp+0x44>)
   1c15c:	6955      	ldr	r5, [r2, #20]
   1c15e:	1b43      	subs	r3, r0, r5
             sensor_base_ts.st_cputime);

    /* Updating cputime */
    sensor_base_ts.st_cputime = sensor->s_sts.st_cputime = curr_ts_ticks;
   1c160:	6460      	str	r0, [r4, #68]	; 0x44
   1c162:	6150      	str	r0, [r2, #20]

    /* Updating seconds */
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c164:	e9d2 0100 	ldrd	r0, r1, [r2]
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c168:	6895      	ldr	r5, [r2, #8]
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c16a:	441d      	add	r5, r3
        sensor_base_ts.st_ostv.tv_usec)/1000000;
   1c16c:	4b0a      	ldr	r3, [pc, #40]	; (1c198 <sensor_up_timestamp+0x48>)
   1c16e:	fba3 c305 	umull	ip, r3, r3, r5
   1c172:	0c9b      	lsrs	r3, r3, #18
    sensor_base_ts.st_ostv.tv_sec  = sensor_base_ts.st_ostv.tv_sec + (ts +
   1c174:	eb10 0b03 	adds.w	fp, r0, r3
   1c178:	f141 0c00 	adc.w	ip, r1, #0
   1c17c:	e9c2 bc00 	strd	fp, ip, [r2]
    sensor->s_sts.st_ostv.tv_sec = sensor_base_ts.st_ostv.tv_sec;
   1c180:	e9c4 bc0c 	strd	fp, ip, [r4, #48]	; 0x30

    /* Updating Micro seconds */
    sensor_base_ts.st_ostv.tv_usec  =
        (sensor_base_ts.st_ostv.tv_usec + ts)%1000000;
   1c184:	4905      	ldr	r1, [pc, #20]	; (1c19c <sensor_up_timestamp+0x4c>)
   1c186:	fb01 5113 	mls	r1, r1, r3, r5
    sensor_base_ts.st_ostv.tv_usec  =
   1c18a:	6091      	str	r1, [r2, #8]
    sensor->s_sts.st_ostv.tv_usec = sensor_base_ts.st_ostv.tv_usec;
   1c18c:	63a1      	str	r1, [r4, #56]	; 0x38

}
   1c18e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   1c192:	bf00      	nop
   1c194:	2000d748 	.word	0x2000d748
   1c198:	431bde83 	.word	0x431bde83
   1c19c:	000f4240 	.word	0x000f4240

0001c1a0 <sensor_mgr_lock>:
{
   1c1a0:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor_mgr.mgr_lock, OS_TIMEOUT_NEVER);
   1c1a2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c1a6:	4804      	ldr	r0, [pc, #16]	; (1c1b8 <sensor_mgr_lock+0x18>)
   1c1a8:	f7fe fa5c 	bl	1a664 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c1ac:	b108      	cbz	r0, 1c1b2 <sensor_mgr_lock+0x12>
   1c1ae:	2809      	cmp	r0, #9
   1c1b0:	d000      	beq.n	1c1b4 <sensor_mgr_lock+0x14>
}
   1c1b2:	bd08      	pop	{r3, pc}
        return (0);
   1c1b4:	2000      	movs	r0, #0
   1c1b6:	e7fc      	b.n	1c1b2 <sensor_mgr_lock+0x12>
   1c1b8:	2000d6f0 	.word	0x2000d6f0

0001c1bc <sensor_mgr_unlock>:
{
   1c1bc:	b508      	push	{r3, lr}
    (void) os_mutex_release(&sensor_mgr.mgr_lock);
   1c1be:	4802      	ldr	r0, [pc, #8]	; (1c1c8 <sensor_mgr_unlock+0xc>)
   1c1c0:	f7fe f9f4 	bl	1a5ac <os_mutex_release>
}
   1c1c4:	bd08      	pop	{r3, pc}
   1c1c6:	bf00      	nop
   1c1c8:	2000d6f0 	.word	0x2000d6f0

0001c1cc <sensor_mgr_evq_get>:
}
   1c1cc:	4b01      	ldr	r3, [pc, #4]	; (1c1d4 <sensor_mgr_evq_get+0x8>)
   1c1ce:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   1c1d0:	4770      	bx	lr
   1c1d2:	bf00      	nop
   1c1d4:	2000d6f0 	.word	0x2000d6f0

0001c1d8 <sensor_mgr_init>:
{
   1c1d8:	b570      	push	{r4, r5, r6, lr}
   1c1da:	b088      	sub	sp, #32
    sensor_mgr_evq_set(os_eventq_dflt_get());
   1c1dc:	f7fd ff68 	bl	1a0b0 <os_eventq_dflt_get>
   1c1e0:	f7ff ff46 	bl	1c070 <sensor_mgr_evq_set>
    rc = os_mempool_init(&sensor_notify_evt_pool,
   1c1e4:	4b1c      	ldr	r3, [pc, #112]	; (1c258 <sensor_mgr_init+0x80>)
   1c1e6:	9300      	str	r3, [sp, #0]
   1c1e8:	4b1c      	ldr	r3, [pc, #112]	; (1c25c <sensor_mgr_init+0x84>)
   1c1ea:	2218      	movs	r2, #24
   1c1ec:	2105      	movs	r1, #5
   1c1ee:	481c      	ldr	r0, [pc, #112]	; (1c260 <sensor_mgr_init+0x88>)
   1c1f0:	f7fe f8e8 	bl	1a3c4 <os_mempool_init>
    assert(rc == OS_OK);
   1c1f4:	bb50      	cbnz	r0, 1c24c <sensor_mgr_init+0x74>
    os_callout_init(&sensor_mgr.mgr_wakeup_callout, sensor_mgr_evq_get(),
   1c1f6:	f7ff ffe9 	bl	1c1cc <sensor_mgr_evq_get>
   1c1fa:	4e1a      	ldr	r6, [pc, #104]	; (1c264 <sensor_mgr_init+0x8c>)
   1c1fc:	2300      	movs	r3, #0
   1c1fe:	4a1a      	ldr	r2, [pc, #104]	; (1c268 <sensor_mgr_init+0x90>)
   1c200:	4601      	mov	r1, r0
   1c202:	4630      	mov	r0, r6
   1c204:	f7fd fd10 	bl	19c28 <os_callout_init>
    os_gettimeofday(&ostv, &ostz);
   1c208:	ad04      	add	r5, sp, #16
   1c20a:	a903      	add	r1, sp, #12
   1c20c:	4628      	mov	r0, r5
   1c20e:	f7fe fde9 	bl	1ade4 <os_gettimeofday>
    sensor_base_ts.st_ostv = ostv;
   1c212:	4c16      	ldr	r4, [pc, #88]	; (1c26c <sensor_mgr_init+0x94>)
   1c214:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
   1c218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    sensor_base_ts.st_ostz = ostz;
   1c21c:	9b03      	ldr	r3, [sp, #12]
   1c21e:	6123      	str	r3, [r4, #16]
    sensor_base_ts.st_cputime = os_cputime_get32();
   1c220:	f7fd fdb8 	bl	19d94 <os_cputime_get32>
   1c224:	6160      	str	r0, [r4, #20]
    os_callout_init(&st_up_osco, sensor_mgr_evq_get(),
   1c226:	f7ff ffd1 	bl	1c1cc <sensor_mgr_evq_get>
   1c22a:	4c11      	ldr	r4, [pc, #68]	; (1c270 <sensor_mgr_init+0x98>)
   1c22c:	2300      	movs	r3, #0
   1c22e:	4a11      	ldr	r2, [pc, #68]	; (1c274 <sensor_mgr_init+0x9c>)
   1c230:	4601      	mov	r1, r0
   1c232:	4620      	mov	r0, r4
   1c234:	f7fd fcf8 	bl	19c28 <os_callout_init>
    os_callout_reset(&st_up_osco, OS_TICKS_PER_SEC);
   1c238:	2180      	movs	r1, #128	; 0x80
   1c23a:	4620      	mov	r0, r4
   1c23c:	f7fd fd20 	bl	19c80 <os_callout_reset>
    os_mutex_init(&sensor_mgr.mgr_lock);
   1c240:	f1a6 000c 	sub.w	r0, r6, #12
   1c244:	f7fe f9a8 	bl	1a598 <os_mutex_init>
}
   1c248:	b008      	add	sp, #32
   1c24a:	bd70      	pop	{r4, r5, r6, pc}
    assert(rc == OS_OK);
   1c24c:	2300      	movs	r3, #0
   1c24e:	461a      	mov	r2, r3
   1c250:	4619      	mov	r1, r3
   1c252:	4618      	mov	r0, r3
   1c254:	f7fd fb6e 	bl	19934 <__assert_func>
   1c258:	000211a4 	.word	0x000211a4
   1c25c:	2000d1ec 	.word	0x2000d1ec
   1c260:	2000d264 	.word	0x2000d264
   1c264:	2000d6fc 	.word	0x2000d6fc
   1c268:	0001c445 	.word	0x0001c445
   1c26c:	2000d748 	.word	0x2000d748
   1c270:	2000d724 	.word	0x2000d724
   1c274:	0001c109 	.word	0x0001c109

0001c278 <sensor_pkg_init>:
{
   1c278:	b508      	push	{r3, lr}
    sensor_mgr_init();
   1c27a:	f7ff ffad 	bl	1c1d8 <sensor_mgr_init>
}
   1c27e:	bd08      	pop	{r3, pc}

0001c280 <sensor_lock>:
{
   1c280:	b508      	push	{r3, lr}
    rc = os_mutex_pend(&sensor->s_lock, OS_TIMEOUT_NEVER);
   1c282:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c286:	3004      	adds	r0, #4
   1c288:	f7fe f9ec 	bl	1a664 <os_mutex_pend>
    if (rc == 0 || rc == OS_NOT_STARTED) {
   1c28c:	b108      	cbz	r0, 1c292 <sensor_lock+0x12>
   1c28e:	2809      	cmp	r0, #9
   1c290:	d000      	beq.n	1c294 <sensor_lock+0x14>
}
   1c292:	bd08      	pop	{r3, pc}
        return (0);
   1c294:	2000      	movs	r0, #0
   1c296:	e7fc      	b.n	1c292 <sensor_lock+0x12>

0001c298 <sensor_unlock>:
{
   1c298:	b508      	push	{r3, lr}
    os_mutex_release(&sensor->s_lock);
   1c29a:	3004      	adds	r0, #4
   1c29c:	f7fe f986 	bl	1a5ac <os_mutex_release>
}
   1c2a0:	bd08      	pop	{r3, pc}

0001c2a2 <sensor_update_nextrun>:
{
   1c2a2:	b530      	push	{r4, r5, lr}
   1c2a4:	b083      	sub	sp, #12
   1c2a6:	4604      	mov	r4, r0
   1c2a8:	460d      	mov	r5, r1
    os_time_ms_to_ticks(sensor->s_poll_rate, &sensor_ticks);
   1c2aa:	a901      	add	r1, sp, #4
   1c2ac:	6a00      	ldr	r0, [r0, #32]
   1c2ae:	f7fe fdb5 	bl	1ae1c <os_time_ms_to_ticks>
    sensor_lock(sensor);
   1c2b2:	4620      	mov	r0, r4
   1c2b4:	f7ff ffe4 	bl	1c280 <sensor_lock>
    sensor_mgr_remove(sensor);
   1c2b8:	4620      	mov	r0, r4
   1c2ba:	f7ff fe8f 	bl	1bfdc <sensor_mgr_remove>
    sensor->s_next_run = sensor_ticks + now;
   1c2be:	9b01      	ldr	r3, [sp, #4]
   1c2c0:	441d      	add	r5, r3
   1c2c2:	6265      	str	r5, [r4, #36]	; 0x24
    sensor_mgr_insert(sensor);
   1c2c4:	4620      	mov	r0, r4
   1c2c6:	f7ff fe9d 	bl	1c004 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c2ca:	4620      	mov	r0, r4
   1c2cc:	f7ff ffe4 	bl	1c298 <sensor_unlock>
}
   1c2d0:	b003      	add	sp, #12
   1c2d2:	bd30      	pop	{r4, r5, pc}

0001c2d4 <sensor_calc_nextrun_delta>:
{
   1c2d4:	b538      	push	{r3, r4, r5, lr}
   1c2d6:	4605      	mov	r5, r0
   1c2d8:	460c      	mov	r4, r1
    sensor_lock(sensor);
   1c2da:	f7ff ffd1 	bl	1c280 <sensor_lock>
    delta = (int32_t)(sensor->s_next_run - now);
   1c2de:	6a69      	ldr	r1, [r5, #36]	; 0x24
    if (delta < 0) {
   1c2e0:	1b0c      	subs	r4, r1, r4
   1c2e2:	d404      	bmi.n	1c2ee <sensor_calc_nextrun_delta+0x1a>
    sensor_unlock(sensor);
   1c2e4:	4628      	mov	r0, r5
   1c2e6:	f7ff ffd7 	bl	1c298 <sensor_unlock>
}
   1c2ea:	4620      	mov	r0, r4
   1c2ec:	bd38      	pop	{r3, r4, r5, pc}
        sensor_ticks = 0;
   1c2ee:	2400      	movs	r4, #0
   1c2f0:	e7f8      	b.n	1c2e4 <sensor_calc_nextrun_delta+0x10>
	...

0001c2f4 <sensor_find_min_nextrun_sensor>:
{
   1c2f4:	b570      	push	{r4, r5, r6, lr}
   1c2f6:	4606      	mov	r6, r0
   1c2f8:	460d      	mov	r5, r1
    sensor_mgr_lock();
   1c2fa:	f7ff ff51 	bl	1c1a0 <sensor_mgr_lock>
    head = SLIST_FIRST(&sensor_mgr.mgr_sensor_list);
   1c2fe:	4b05      	ldr	r3, [pc, #20]	; (1c314 <sensor_find_min_nextrun_sensor+0x20>)
   1c300:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    *min_nextrun = sensor_calc_nextrun_delta(head, now);
   1c302:	4631      	mov	r1, r6
   1c304:	4620      	mov	r0, r4
   1c306:	f7ff ffe5 	bl	1c2d4 <sensor_calc_nextrun_delta>
   1c30a:	6028      	str	r0, [r5, #0]
    sensor_mgr_unlock();
   1c30c:	f7ff ff56 	bl	1c1bc <sensor_mgr_unlock>
}
   1c310:	4620      	mov	r0, r4
   1c312:	bd70      	pop	{r4, r5, r6, pc}
   1c314:	2000d6f0 	.word	0x2000d6f0

0001c318 <sensor_mgr_register>:
{
   1c318:	b538      	push	{r3, r4, r5, lr}
   1c31a:	4605      	mov	r5, r0
    rc = sensor_mgr_lock();
   1c31c:	f7ff ff40 	bl	1c1a0 <sensor_mgr_lock>
    if (rc != 0) {
   1c320:	4604      	mov	r4, r0
   1c322:	b108      	cbz	r0, 1c328 <sensor_mgr_register+0x10>
}
   1c324:	4620      	mov	r0, r4
   1c326:	bd38      	pop	{r3, r4, r5, pc}
    rc = sensor_lock(sensor);
   1c328:	4628      	mov	r0, r5
   1c32a:	f7ff ffa9 	bl	1c280 <sensor_lock>
    if (rc != 0) {
   1c32e:	4604      	mov	r4, r0
   1c330:	2800      	cmp	r0, #0
   1c332:	d1f7      	bne.n	1c324 <sensor_mgr_register+0xc>
    sensor_mgr_insert(sensor);
   1c334:	4628      	mov	r0, r5
   1c336:	f7ff fe65 	bl	1c004 <sensor_mgr_insert>
    sensor_unlock(sensor);
   1c33a:	4628      	mov	r0, r5
   1c33c:	f7ff ffac 	bl	1c298 <sensor_unlock>
    sensor_mgr_unlock();
   1c340:	f7ff ff3c 	bl	1c1bc <sensor_mgr_unlock>
    return (0);
   1c344:	e7ee      	b.n	1c324 <sensor_mgr_register+0xc>

0001c346 <sensor_init>:
{
   1c346:	b538      	push	{r3, r4, r5, lr}
   1c348:	4604      	mov	r4, r0
   1c34a:	460d      	mov	r5, r1
    memset(sensor, 0, sizeof(*sensor));
   1c34c:	2288      	movs	r2, #136	; 0x88
   1c34e:	2100      	movs	r1, #0
   1c350:	f7fe fef3 	bl	1b13a <memset>
    rc = os_mutex_init(&sensor->s_lock);
   1c354:	1d20      	adds	r0, r4, #4
   1c356:	f7fe f91f 	bl	1a598 <os_mutex_init>
    if (rc != 0) {
   1c35a:	4603      	mov	r3, r0
   1c35c:	b900      	cbnz	r0, 1c360 <sensor_init+0x1a>
    sensor->s_dev = dev;
   1c35e:	6025      	str	r5, [r4, #0]
}
   1c360:	4618      	mov	r0, r3
   1c362:	bd38      	pop	{r3, r4, r5, pc}

0001c364 <sensor_read>:
 * @return 0 on success, non-zero on failure.
 */
int
sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *arg, uint32_t timeout)
{
   1c364:	b530      	push	{r4, r5, lr}
   1c366:	b089      	sub	sp, #36	; 0x24
   1c368:	4604      	mov	r4, r0
   1c36a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    struct sensor_read_ctx src;
    int rc;

    rc = sensor_lock(sensor);
   1c36e:	f7ff ff87 	bl	1c280 <sensor_lock>
    if (rc) {
   1c372:	4605      	mov	r5, r0
   1c374:	b9f8      	cbnz	r0, 1c3b6 <sensor_read+0x52>
        goto err;
    }

    src.user_func = data_func;
   1c376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c378:	9306      	str	r3, [sp, #24]
    src.user_arg = arg;
   1c37a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1c37c:	9307      	str	r3, [sp, #28]

    if (!sensor_mgr_match_bytype(sensor, (void *)&type)) {
   1c37e:	a904      	add	r1, sp, #16
   1c380:	4620      	mov	r0, r4
   1c382:	f7ff fe7b 	bl	1c07c <sensor_mgr_match_bytype>
   1c386:	b1e0      	cbz	r0, 1c3c2 <sensor_read+0x5e>
        rc = SYS_ENOENT;
        goto err;
    }

    sensor_up_timestamp(sensor);
   1c388:	4620      	mov	r0, r4
   1c38a:	f7ff fee1 	bl	1c150 <sensor_up_timestamp>

    rc = sensor->s_funcs->sd_read(sensor, type, sensor_read_data_func, &src,
   1c38e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c390:	6819      	ldr	r1, [r3, #0]
   1c392:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1c394:	9302      	str	r3, [sp, #8]
   1c396:	ab06      	add	r3, sp, #24
   1c398:	9301      	str	r3, [sp, #4]
   1c39a:	4b0b      	ldr	r3, [pc, #44]	; (1c3c8 <sensor_read+0x64>)
   1c39c:	9300      	str	r3, [sp, #0]
   1c39e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1c3a2:	4620      	mov	r0, r4
   1c3a4:	4788      	blx	r1
                                  timeout);
    if (rc) {
   1c3a6:	4605      	mov	r5, r0
   1c3a8:	b128      	cbz	r0, 1c3b6 <sensor_read+0x52>
        if (sensor->s_err_fn != NULL) {
   1c3aa:	6f23      	ldr	r3, [r4, #112]	; 0x70
   1c3ac:	b11b      	cbz	r3, 1c3b6 <sensor_read+0x52>
            sensor->s_err_fn(sensor, sensor->s_err_arg, rc);
   1c3ae:	4602      	mov	r2, r0
   1c3b0:	6f61      	ldr	r1, [r4, #116]	; 0x74
   1c3b2:	4620      	mov	r0, r4
   1c3b4:	4798      	blx	r3
        }
        goto err;
    }

err:
    sensor_unlock(sensor);
   1c3b6:	4620      	mov	r0, r4
   1c3b8:	f7ff ff6e 	bl	1c298 <sensor_unlock>
    return (rc);
}
   1c3bc:	4628      	mov	r0, r5
   1c3be:	b009      	add	sp, #36	; 0x24
   1c3c0:	bd30      	pop	{r4, r5, pc}
        rc = SYS_ENOENT;
   1c3c2:	f06f 0503 	mvn.w	r5, #3
   1c3c6:	e7f6      	b.n	1c3b6 <sensor_read+0x52>
   1c3c8:	0001c0ab 	.word	0x0001c0ab

0001c3cc <sensor_mgr_poll_bytype>:
{
   1c3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c3ce:	b085      	sub	sp, #20
   1c3d0:	4616      	mov	r6, r2
   1c3d2:	461f      	mov	r7, r3
   1c3d4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    if (!stt || !stt->stt_polls_left) {
   1c3d6:	b10c      	cbz	r4, 1c3dc <sensor_mgr_poll_bytype+0x10>
   1c3d8:	8aa3      	ldrh	r3, [r4, #20]
   1c3da:	b9cb      	cbnz	r3, 1c410 <sensor_mgr_poll_bytype+0x44>
   1c3dc:	4632      	mov	r2, r6
   1c3de:	463b      	mov	r3, r7
   1c3e0:	4605      	mov	r5, r0
        sensor_read(sensor, type, NULL, NULL, OS_TIMEOUT_NEVER);
   1c3e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c3e6:	9102      	str	r1, [sp, #8]
   1c3e8:	2100      	movs	r1, #0
   1c3ea:	9101      	str	r1, [sp, #4]
   1c3ec:	9100      	str	r1, [sp, #0]
   1c3ee:	f7ff ffb9 	bl	1c364 <sensor_read>
        sensor_lock(sensor);
   1c3f2:	4628      	mov	r0, r5
   1c3f4:	f7ff ff44 	bl	1c280 <sensor_lock>
        if (stt) {
   1c3f8:	b12c      	cbz	r4, 1c406 <sensor_mgr_poll_bytype+0x3a>
            if (!stt->stt_polls_left && stt->stt_poll_n) {
   1c3fa:	8aa3      	ldrh	r3, [r4, #20]
   1c3fc:	b91b      	cbnz	r3, 1c406 <sensor_mgr_poll_bytype+0x3a>
   1c3fe:	8a63      	ldrh	r3, [r4, #18]
   1c400:	b10b      	cbz	r3, 1c406 <sensor_mgr_poll_bytype+0x3a>
                stt->stt_polls_left--;
   1c402:	3b01      	subs	r3, #1
   1c404:	82a3      	strh	r3, [r4, #20]
        sensor_unlock(sensor);
   1c406:	4628      	mov	r0, r5
   1c408:	f7ff ff46 	bl	1c298 <sensor_unlock>
}
   1c40c:	b005      	add	sp, #20
   1c40e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        stt->stt_polls_left--;
   1c410:	3b01      	subs	r3, #1
   1c412:	82a3      	strh	r3, [r4, #20]
}
   1c414:	e7fa      	b.n	1c40c <sensor_mgr_poll_bytype+0x40>

0001c416 <sensor_poll_per_type_trait>:
{
   1c416:	b570      	push	{r4, r5, r6, lr}
   1c418:	b082      	sub	sp, #8
   1c41a:	4605      	mov	r5, r0
   1c41c:	460e      	mov	r6, r1
    sensor_lock(sensor);
   1c41e:	f7ff ff2f 	bl	1c280 <sensor_lock>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c422:	6fec      	ldr	r4, [r5, #124]	; 0x7c
   1c424:	e007      	b.n	1c436 <sensor_poll_per_type_trait+0x20>
        sensor_mgr_poll_bytype(sensor, stt->stt_sensor_type, stt,
   1c426:	e9d4 2300 	ldrd	r2, r3, [r4]
   1c42a:	9601      	str	r6, [sp, #4]
   1c42c:	9400      	str	r4, [sp, #0]
   1c42e:	4628      	mov	r0, r5
   1c430:	f7ff ffcc 	bl	1c3cc <sensor_mgr_poll_bytype>
    SLIST_FOREACH(stt, &sensor->s_type_traits_list, stt_next) {
   1c434:	6a24      	ldr	r4, [r4, #32]
   1c436:	2c00      	cmp	r4, #0
   1c438:	d1f5      	bne.n	1c426 <sensor_poll_per_type_trait+0x10>
    sensor_unlock(sensor);
   1c43a:	4628      	mov	r0, r5
   1c43c:	f7ff ff2c 	bl	1c298 <sensor_unlock>
}
   1c440:	b002      	add	sp, #8
   1c442:	bd70      	pop	{r4, r5, r6, pc}

0001c444 <sensor_mgr_wakeup_event>:
{
   1c444:	b570      	push	{r4, r5, r6, lr}
   1c446:	b084      	sub	sp, #16
    now = os_time_get();
   1c448:	f7fe fc92 	bl	1ad70 <os_time_get>
   1c44c:	4605      	mov	r5, r0
    sensor_mgr_lock();
   1c44e:	f7ff fea7 	bl	1c1a0 <sensor_mgr_lock>
   1c452:	e012      	b.n	1c47a <sensor_mgr_wakeup_event+0x36>
            sensor_unlock(cursor);
   1c454:	4620      	mov	r0, r4
   1c456:	f7ff ff1f 	bl	1c298 <sensor_unlock>
            sensor_mgr_unlock();
   1c45a:	f7ff feaf 	bl	1c1bc <sensor_mgr_unlock>
}
   1c45e:	b004      	add	sp, #16
   1c460:	bd70      	pop	{r4, r5, r6, pc}
            sensor_poll_per_type_trait(cursor, now, next_wakeup);
   1c462:	4632      	mov	r2, r6
   1c464:	4629      	mov	r1, r5
   1c466:	4620      	mov	r0, r4
   1c468:	f7ff ffd5 	bl	1c416 <sensor_poll_per_type_trait>
        sensor_update_nextrun(cursor, now);
   1c46c:	4629      	mov	r1, r5
   1c46e:	4620      	mov	r0, r4
   1c470:	f7ff ff17 	bl	1c2a2 <sensor_update_nextrun>
        sensor_unlock(cursor);
   1c474:	4620      	mov	r0, r4
   1c476:	f7ff ff0f 	bl	1c298 <sensor_unlock>
        cursor = sensor_find_min_nextrun_sensor(now, &next_wakeup);
   1c47a:	a903      	add	r1, sp, #12
   1c47c:	4628      	mov	r0, r5
   1c47e:	f7ff ff39 	bl	1c2f4 <sensor_find_min_nextrun_sensor>
   1c482:	4604      	mov	r4, r0
        sensor_lock(cursor);
   1c484:	f7ff fefc 	bl	1c280 <sensor_lock>
        if (!cursor->s_poll_rate) {
   1c488:	6a23      	ldr	r3, [r4, #32]
   1c48a:	2b00      	cmp	r3, #0
   1c48c:	d0e2      	beq.n	1c454 <sensor_mgr_wakeup_event+0x10>
        if (next_wakeup > 0) {
   1c48e:	9e03      	ldr	r6, [sp, #12]
   1c490:	b96e      	cbnz	r6, 1c4ae <sensor_mgr_wakeup_event+0x6a>
        if (sensor_type_traits_empty(cursor)) {
   1c492:	4620      	mov	r0, r4
   1c494:	f7ff fde6 	bl	1c064 <sensor_type_traits_empty>
   1c498:	2800      	cmp	r0, #0
   1c49a:	d0e2      	beq.n	1c462 <sensor_mgr_wakeup_event+0x1e>
            sensor_mgr_poll_bytype(cursor, cursor->s_mask, NULL, now);
   1c49c:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   1c4a0:	9501      	str	r5, [sp, #4]
   1c4a2:	2100      	movs	r1, #0
   1c4a4:	9100      	str	r1, [sp, #0]
   1c4a6:	4620      	mov	r0, r4
   1c4a8:	f7ff ff90 	bl	1c3cc <sensor_mgr_poll_bytype>
   1c4ac:	e7de      	b.n	1c46c <sensor_mgr_wakeup_event+0x28>
    sensor_mgr_unlock();
   1c4ae:	f7ff fe85 	bl	1c1bc <sensor_mgr_unlock>
    os_callout_reset(&sensor_mgr.mgr_wakeup_callout, next_wakeup);
   1c4b2:	9903      	ldr	r1, [sp, #12]
   1c4b4:	4801      	ldr	r0, [pc, #4]	; (1c4bc <sensor_mgr_wakeup_event+0x78>)
   1c4b6:	f7fd fbe3 	bl	19c80 <os_callout_reset>
   1c4ba:	e7d0      	b.n	1c45e <sensor_mgr_wakeup_event+0x1a>
   1c4bc:	2000d6fc 	.word	0x2000d6fc

0001c4c0 <init_sensor_coap>:

///////////////////////////////////////////////////////////////////////////////
//  CoAP Functions

///  Init the Sensor CoAP module. Called by sysinit() during startup, defined in pkg.yml.
void init_sensor_coap(void) {
   1c4c0:	b508      	push	{r3, lr}
    os_error_t rc = os_sem_init(&oc_sem, 1);  //  Init to 1 token, so only 1 caller will be allowed.
   1c4c2:	2101      	movs	r1, #1
   1c4c4:	4806      	ldr	r0, [pc, #24]	; (1c4e0 <init_sensor_coap+0x20>)
   1c4c6:	f7fe faf1 	bl	1aaac <os_sem_init>
    assert(rc == OS_OK);
   1c4ca:	b918      	cbnz	r0, 1c4d4 <init_sensor_coap+0x14>
    oc_sensor_coap_ready = true;
   1c4cc:	4b05      	ldr	r3, [pc, #20]	; (1c4e4 <init_sensor_coap+0x24>)
   1c4ce:	2201      	movs	r2, #1
   1c4d0:	701a      	strb	r2, [r3, #0]
}
   1c4d2:	bd08      	pop	{r3, pc}
    assert(rc == OS_OK);
   1c4d4:	2300      	movs	r3, #0
   1c4d6:	461a      	mov	r2, r3
   1c4d8:	4619      	mov	r1, r3
   1c4da:	4618      	mov	r0, r3
   1c4dc:	f7fd fa2a 	bl	19934 <__assert_func>
   1c4e0:	2000d280 	.word	0x2000d280
   1c4e4:	2000d288 	.word	0x2000d288

0001c4e8 <is_sensor_node>:
}

bool is_sensor_node(void) {
    //  Return true if this is a Sensor Node.
    //  This is a Sensor Node if the Hardware ID matches one of the Sensor Node Hardware IDs.
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c4e8:	4b04      	ldr	r3, [pc, #16]	; (1c4fc <is_sensor_node+0x14>)
   1c4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c4ee:	4313      	orrs	r3, r2
   1c4f0:	d101      	bne.n	1c4f6 <is_sensor_node+0xe>
    return false;
   1c4f2:	2000      	movs	r0, #0
}
   1c4f4:	4770      	bx	lr
    if (sensor_node_address) { return true; }  //  sensor_node_address is set in sensor_network_init().
   1c4f6:	2001      	movs	r0, #1
   1c4f8:	4770      	bx	lr
   1c4fa:	bf00      	nop
   1c4fc:	2000d2a0 	.word	0x2000d2a0

0001c500 <get_hardware_id>:
}

/////////////////////////////////////////////////////////
//  Sensor Network Addresses

const uint8_t *get_hardware_id(void) {
   1c500:	b508      	push	{r3, lr}
    //  Return the Hardware ID, which is unique across all microcontrollers.
    if (hw_id_len == 0) {
   1c502:	4b16      	ldr	r3, [pc, #88]	; (1c55c <get_hardware_id+0x5c>)
   1c504:	681b      	ldr	r3, [r3, #0]
   1c506:	b10b      	cbz	r3, 1c50c <get_hardware_id+0xc>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
    }
    return hw_id;
}
   1c508:	4815      	ldr	r0, [pc, #84]	; (1c560 <get_hardware_id+0x60>)
   1c50a:	bd08      	pop	{r3, pc}
        hw_id_len = hal_bsp_hw_id_len();     //  Fetch the length, i.e. 12
   1c50c:	f000 fcee 	bl	1ceec <hal_bsp_hw_id_len>
   1c510:	4b12      	ldr	r3, [pc, #72]	; (1c55c <get_hardware_id+0x5c>)
   1c512:	6018      	str	r0, [r3, #0]
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c514:	280b      	cmp	r0, #11
   1c516:	d914      	bls.n	1c542 <get_hardware_id+0x42>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c518:	210c      	movs	r1, #12
   1c51a:	4811      	ldr	r0, [pc, #68]	; (1c560 <get_hardware_id+0x60>)
   1c51c:	f000 fce8 	bl	1cef0 <hal_bsp_hw_id>
   1c520:	4b0e      	ldr	r3, [pc, #56]	; (1c55c <get_hardware_id+0x5c>)
   1c522:	6018      	str	r0, [r3, #0]
   1c524:	2800      	cmp	r0, #0
   1c526:	dd12      	ble.n	1c54e <get_hardware_id+0x4e>
        console_printf("%shwid ", _net);  console_dump(hw_id, hw_id_len);  console_printf("\n");
   1c528:	490e      	ldr	r1, [pc, #56]	; (1c564 <get_hardware_id+0x64>)
   1c52a:	480f      	ldr	r0, [pc, #60]	; (1c568 <get_hardware_id+0x68>)
   1c52c:	f7fc fb3a 	bl	18ba4 <console_printf>
   1c530:	4b0a      	ldr	r3, [pc, #40]	; (1c55c <get_hardware_id+0x5c>)
   1c532:	6819      	ldr	r1, [r3, #0]
   1c534:	480a      	ldr	r0, [pc, #40]	; (1c560 <get_hardware_id+0x60>)
   1c536:	f7fc fac5 	bl	18ac4 <console_dump>
   1c53a:	480c      	ldr	r0, [pc, #48]	; (1c56c <get_hardware_id+0x6c>)
   1c53c:	f7fc fb32 	bl	18ba4 <console_printf>
   1c540:	e7e2      	b.n	1c508 <get_hardware_id+0x8>
        assert((unsigned) hw_id_len >= sizeof(hw_id));  //  Hardware ID too short.
   1c542:	2300      	movs	r3, #0
   1c544:	461a      	mov	r2, r3
   1c546:	4619      	mov	r1, r3
   1c548:	4618      	mov	r0, r3
   1c54a:	f7fd f9f3 	bl	19934 <__assert_func>
        hw_id_len = hal_bsp_hw_id(hw_id, sizeof(hw_id));  assert(hw_id_len > 0);  //  Get the hardware ID.
   1c54e:	2300      	movs	r3, #0
   1c550:	461a      	mov	r2, r3
   1c552:	4619      	mov	r1, r3
   1c554:	4618      	mov	r0, r3
   1c556:	f7fd f9ed 	bl	19934 <__assert_func>
   1c55a:	bf00      	nop
   1c55c:	2000d298 	.word	0x2000d298
   1c560:	2000d28c 	.word	0x2000d28c
   1c564:	00021248 	.word	0x00021248
   1c568:	00021200 	.word	0x00021200
   1c56c:	00021360 	.word	0x00021360

0001c570 <is_collector_node>:
bool is_collector_node(void) {
   1c570:	b508      	push	{r3, lr}
    const uint8_t *hardware_id = get_hardware_id();
   1c572:	f7ff ffc5 	bl	1c500 <get_hardware_id>
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c576:	220c      	movs	r2, #12
   1c578:	4903      	ldr	r1, [pc, #12]	; (1c588 <is_collector_node+0x18>)
   1c57a:	f7fe fdad 	bl	1b0d8 <memcmp>
   1c57e:	b108      	cbz	r0, 1c584 <is_collector_node+0x14>
    return false; 
   1c580:	2000      	movs	r0, #0
}
   1c582:	bd08      	pop	{r3, pc}
    if (memcmp(hardware_id, COLLECTOR_NODE_HW_ID, HARDWARE_ID_LENGTH) == 0) { return true; }
   1c584:	2001      	movs	r0, #1
   1c586:	e7fc      	b.n	1c582 <is_collector_node+0x12>
   1c588:	000211b8 	.word	0x000211b8

0001c58c <is_standalone_node>:
bool is_standalone_node(void) {
   1c58c:	b510      	push	{r4, lr}
    if (!is_collector_node() && !is_sensor_node()) { return true; }
   1c58e:	f7ff ffef 	bl	1c570 <is_collector_node>
   1c592:	b928      	cbnz	r0, 1c5a0 <is_standalone_node+0x14>
   1c594:	4604      	mov	r4, r0
   1c596:	f7ff ffa7 	bl	1c4e8 <is_sensor_node>
   1c59a:	b910      	cbnz	r0, 1c5a2 <is_standalone_node+0x16>
   1c59c:	2401      	movs	r4, #1
   1c59e:	e000      	b.n	1c5a2 <is_standalone_node+0x16>
    return false;
   1c5a0:	2400      	movs	r4, #0
}
   1c5a2:	4620      	mov	r0, r4
   1c5a4:	bd10      	pop	{r4, pc}
	...

0001c5a8 <sensor_network_init>:
const char **get_sensor_node_names(void) { return sensor_node_names; }

/////////////////////////////////////////////////////////
//  Sensor Network Configuration

void sensor_network_init(void) {
   1c5a8:	b538      	push	{r3, r4, r5, lr}
    //  Allocate Sensor Node address for this node.

    //  Set the Sensor Node names for remote_sensor_create().
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c5aa:	2400      	movs	r4, #0
   1c5ac:	2c04      	cmp	r4, #4
   1c5ae:	dc15      	bgt.n	1c5dc <sensor_network_init+0x34>
        int len = sprintf((char *) sensor_node_names[i], "%010llx", sensor_node_addresses[i]);
   1c5b0:	4b23      	ldr	r3, [pc, #140]	; (1c640 <sensor_network_init+0x98>)
   1c5b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   1c5ba:	4922      	ldr	r1, [pc, #136]	; (1c644 <sensor_network_init+0x9c>)
   1c5bc:	4822      	ldr	r0, [pc, #136]	; (1c648 <sensor_network_init+0xa0>)
   1c5be:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
   1c5c2:	f000 fcaf 	bl	1cf24 <sprintf>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c5c6:	3001      	adds	r0, #1
   1c5c8:	280b      	cmp	r0, #11
   1c5ca:	dc01      	bgt.n	1c5d0 <sensor_network_init+0x28>
    for (int i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c5cc:	3401      	adds	r4, #1
   1c5ce:	e7ed      	b.n	1c5ac <sensor_network_init+0x4>
        assert(len + 1 <= NODE_NAME_LENGTH);
   1c5d0:	2300      	movs	r3, #0
   1c5d2:	461a      	mov	r2, r3
   1c5d4:	4619      	mov	r1, r3
   1c5d6:	4618      	mov	r0, r3
   1c5d8:	f7fd f9ac 	bl	19934 <__assert_func>
    }
    //  Get Sensor Node address if applicable.
    const uint8_t *hardware_id = get_hardware_id();
   1c5dc:	f7ff ff90 	bl	1c500 <get_hardware_id>
   1c5e0:	4605      	mov	r5, r0
    int i;
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c5e2:	2400      	movs	r4, #0
   1c5e4:	2c04      	cmp	r4, #4
   1c5e6:	dc19      	bgt.n	1c61c <sensor_network_init+0x74>
        if (memcmp(hardware_id, SENSOR_NODE_HW_IDS[i], HARDWARE_ID_LENGTH) == 0) {
   1c5e8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1c5ec:	0093      	lsls	r3, r2, #2
   1c5ee:	220c      	movs	r2, #12
   1c5f0:	4916      	ldr	r1, [pc, #88]	; (1c64c <sensor_network_init+0xa4>)
   1c5f2:	4419      	add	r1, r3
   1c5f4:	4628      	mov	r0, r5
   1c5f6:	f7fe fd6f 	bl	1b0d8 <memcmp>
   1c5fa:	b108      	cbz	r0, 1c600 <sensor_network_init+0x58>
    for (i = 0; i < SENSOR_NETWORK_SIZE; i++) {
   1c5fc:	3401      	adds	r4, #1
   1c5fe:	e7f1      	b.n	1c5e4 <sensor_network_init+0x3c>
            sensor_node_address = sensor_node_addresses[i];
   1c600:	4b0f      	ldr	r3, [pc, #60]	; (1c640 <sensor_network_init+0x98>)
   1c602:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   1c606:	e9d3 0100 	ldrd	r0, r1, [r3]
   1c60a:	4b11      	ldr	r3, [pc, #68]	; (1c650 <sensor_network_init+0xa8>)
   1c60c:	e9c3 0100 	strd	r0, r1, [r3]
            console_printf("%ssensor%s#%d\n", _net, _node, i + 1);
   1c610:	1c63      	adds	r3, r4, #1
   1c612:	4a10      	ldr	r2, [pc, #64]	; (1c654 <sensor_network_init+0xac>)
   1c614:	4910      	ldr	r1, [pc, #64]	; (1c658 <sensor_network_init+0xb0>)
   1c616:	4811      	ldr	r0, [pc, #68]	; (1c65c <sensor_network_init+0xb4>)
   1c618:	f7fc fac4 	bl	18ba4 <console_printf>
            break;
        }
    }
    //  Display the type of node.
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c61c:	f7ff ffa8 	bl	1c570 <is_collector_node>
   1c620:	b940      	cbnz	r0, 1c634 <sensor_network_init+0x8c>
    else if (is_standalone_node()) { console_printf("%sstandalone%s\n", _net, _node); }
   1c622:	f7ff ffb3 	bl	1c58c <is_standalone_node>
   1c626:	b150      	cbz	r0, 1c63e <sensor_network_init+0x96>
   1c628:	4a0a      	ldr	r2, [pc, #40]	; (1c654 <sensor_network_init+0xac>)
   1c62a:	490b      	ldr	r1, [pc, #44]	; (1c658 <sensor_network_init+0xb0>)
   1c62c:	480c      	ldr	r0, [pc, #48]	; (1c660 <sensor_network_init+0xb8>)
   1c62e:	f7fc fab9 	bl	18ba4 <console_printf>
}
   1c632:	e004      	b.n	1c63e <sensor_network_init+0x96>
    if (is_collector_node()) { console_printf("%scollector%s\n", _net, _node); }
   1c634:	4a07      	ldr	r2, [pc, #28]	; (1c654 <sensor_network_init+0xac>)
   1c636:	4908      	ldr	r1, [pc, #32]	; (1c658 <sensor_network_init+0xb0>)
   1c638:	480a      	ldr	r0, [pc, #40]	; (1c664 <sensor_network_init+0xbc>)
   1c63a:	f7fc fab3 	bl	18ba4 <console_printf>
}
   1c63e:	bd38      	pop	{r3, r4, r5, pc}
   1c640:	00021260 	.word	0x00021260
   1c644:	00021208 	.word	0x00021208
   1c648:	20000130 	.word	0x20000130
   1c64c:	000211c4 	.word	0x000211c4
   1c650:	2000d2a0 	.word	0x2000d2a0
   1c654:	00021210 	.word	0x00021210
   1c658:	00021248 	.word	0x00021248
   1c65c:	00021218 	.word	0x00021218
   1c660:	00021238 	.word	0x00021238
   1c664:	00021228 	.word	0x00021228

0001c668 <config_device>:

///////////////////////////////////////////////////////////////////////////////
//  Generic Device Creator Code based on repos\apache-mynewt-core\hw\sensor\creator\src\sensor_creator.c

//  Device configuration
static int config_device(void) {
   1c668:	b530      	push	{r4, r5, lr}
   1c66a:	b083      	sub	sp, #12
    int rc;
    struct os_dev *dev;
    struct DEVICE_CFG cfg;

    //  Fetch the device.
    dev = (struct os_dev *) os_dev_open(DEVICE_NAME, OS_TIMEOUT_NEVER, NULL);
   1c66c:	2200      	movs	r2, #0
   1c66e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c672:	4810      	ldr	r0, [pc, #64]	; (1c6b4 <config_device+0x4c>)
   1c674:	f7fd fc2c 	bl	19ed0 <os_dev_open>
    assert(dev != NULL);
   1c678:	b178      	cbz	r0, 1c69a <config_device+0x32>
   1c67a:	4604      	mov	r4, r0

    //  Get the default config for the device.
    rc = DEVICE_CFG_DEFAULT(&cfg);
   1c67c:	4668      	mov	r0, sp
   1c67e:	f000 f86c 	bl	1c75a <temp_stub_default_cfg>
    assert(rc == 0);
   1c682:	b980      	cbnz	r0, 1c6a6 <config_device+0x3e>

    //  Apply the device config.
    rc = DEVICE_CFG_FUNC((struct DEVICE_DEV *)dev, &cfg);
   1c684:	4669      	mov	r1, sp
   1c686:	4620      	mov	r0, r4
   1c688:	f000 f900 	bl	1c88c <temp_stub_config>
   1c68c:	4605      	mov	r5, r0
    os_dev_close(dev);
   1c68e:	4620      	mov	r0, r4
   1c690:	f7fd fc40 	bl	19f14 <os_dev_close>
    return rc;
}
   1c694:	4628      	mov	r0, r5
   1c696:	b003      	add	sp, #12
   1c698:	bd30      	pop	{r4, r5, pc}
    assert(dev != NULL);
   1c69a:	2300      	movs	r3, #0
   1c69c:	461a      	mov	r2, r3
   1c69e:	4619      	mov	r1, r3
   1c6a0:	4618      	mov	r0, r3
   1c6a2:	f7fd f947 	bl	19934 <__assert_func>
    assert(rc == 0);
   1c6a6:	2300      	movs	r3, #0
   1c6a8:	461a      	mov	r2, r3
   1c6aa:	4619      	mov	r1, r3
   1c6ac:	4618      	mov	r0, r3
   1c6ae:	f7fd f941 	bl	19934 <__assert_func>
   1c6b2:	bf00      	nop
   1c6b4:	00021288 	.word	0x00021288

0001c6b8 <temp_stub_create>:

//  Create the device instance and configure it. Called by sysinit() during startup, defined in pkg.yml.
void DEVICE_CREATE(void) {
   1c6b8:	b510      	push	{r4, lr}
   1c6ba:	b082      	sub	sp, #8
    console_printf("TMP create %s\n", DEVICE_NAME);
   1c6bc:	4c10      	ldr	r4, [pc, #64]	; (1c700 <temp_stub_create+0x48>)
   1c6be:	4621      	mov	r1, r4
   1c6c0:	4810      	ldr	r0, [pc, #64]	; (1c704 <temp_stub_create+0x4c>)
   1c6c2:	f7fc fa6f 	bl	18ba4 <console_printf>

    //  Create the device.
    int rc = os_dev_create((struct os_dev *) &DEVICE_INSTANCE, DEVICE_NAME,
   1c6c6:	4b10      	ldr	r3, [pc, #64]	; (1c708 <temp_stub_create+0x50>)
   1c6c8:	9301      	str	r3, [sp, #4]
   1c6ca:	4b10      	ldr	r3, [pc, #64]	; (1c70c <temp_stub_create+0x54>)
   1c6cc:	9300      	str	r3, [sp, #0]
   1c6ce:	2300      	movs	r3, #0
   1c6d0:	2201      	movs	r2, #1
   1c6d2:	4621      	mov	r1, r4
   1c6d4:	480e      	ldr	r0, [pc, #56]	; (1c710 <temp_stub_create+0x58>)
   1c6d6:	f7fd fbb5 	bl	19e44 <os_dev_create>
        OS_DEV_INIT_PRIMARY, 0, 
        DEVICE_INIT, (void *) &DEVICE_ITF);
    assert(rc == 0);
   1c6da:	b920      	cbnz	r0, 1c6e6 <temp_stub_create+0x2e>

    //  Configure the device.
    rc = config_device();
   1c6dc:	f7ff ffc4 	bl	1c668 <config_device>
    assert(rc == 0);
   1c6e0:	b938      	cbnz	r0, 1c6f2 <temp_stub_create+0x3a>
}
   1c6e2:	b002      	add	sp, #8
   1c6e4:	bd10      	pop	{r4, pc}
    assert(rc == 0);
   1c6e6:	2300      	movs	r3, #0
   1c6e8:	461a      	mov	r2, r3
   1c6ea:	4619      	mov	r1, r3
   1c6ec:	4618      	mov	r0, r3
   1c6ee:	f7fd f921 	bl	19934 <__assert_func>
    assert(rc == 0);
   1c6f2:	2300      	movs	r3, #0
   1c6f4:	461a      	mov	r2, r3
   1c6f6:	4619      	mov	r1, r3
   1c6f8:	4618      	mov	r0, r3
   1c6fa:	f7fd f91b 	bl	19934 <__assert_func>
   1c6fe:	bf00      	nop
   1c700:	00021288 	.word	0x00021288
   1c704:	00021294 	.word	0x00021294
   1c708:	2000d2e0 	.word	0x2000d2e0
   1c70c:	0001c769 	.word	0x0001c769
   1c710:	2000d2f8 	.word	0x2000d2f8

0001c714 <temp_stub_close>:
}

static int temp_stub_close(struct os_dev *dev0) {
    //  Close the sensor.  Return 0 if successful.
    return 0;
}
   1c714:	2000      	movs	r0, #0
   1c716:	4770      	bx	lr

0001c718 <temp_stub_sensor_get_config>:

static int temp_stub_sensor_get_config(struct sensor *sensor, sensor_type_t type,
    struct sensor_cfg *cfg) {
    //  Return the type of the sensor value returned by the sensor.
    int rc;
    if (!(type & TEMP_SENSOR_TYPE)) {
   1c718:	f002 6080 	and.w	r0, r2, #67108864	; 0x4000000
   1c71c:	2100      	movs	r1, #0
   1c71e:	ea50 0301 	orrs.w	r3, r0, r1
   1c722:	d004      	beq.n	1c72e <temp_stub_sensor_get_config+0x16>
        rc = SYS_EINVAL;
        goto err;
    }
    cfg->sc_valtype = TEMP_SENSOR_VALUE_TYPE;  //  We return float (computed values) or int (raw values).
   1c724:	9b00      	ldr	r3, [sp, #0]
   1c726:	2201      	movs	r2, #1
   1c728:	701a      	strb	r2, [r3, #0]
    return (0);
   1c72a:	2000      	movs	r0, #0
   1c72c:	4770      	bx	lr
err:
    return (rc);
   1c72e:	f06f 0001 	mvn.w	r0, #1
}
   1c732:	4770      	bx	lr

0001c734 <temp_stub_open>:
static int temp_stub_open(struct os_dev *dev0, uint32_t timeout, void *arg) {
   1c734:	b508      	push	{r3, lr}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c736:	b120      	cbz	r0, 1c742 <temp_stub_open+0xe>
    cfg = &dev->cfg; assert(cfg);
   1c738:	f110 0fb0 	cmn.w	r0, #176	; 0xb0
   1c73c:	d007      	beq.n	1c74e <temp_stub_open+0x1a>
}
   1c73e:	2000      	movs	r0, #0
   1c740:	bd08      	pop	{r3, pc}
    dev = (struct temp_stub *) dev0;  assert(dev);  
   1c742:	2300      	movs	r3, #0
   1c744:	461a      	mov	r2, r3
   1c746:	4619      	mov	r1, r3
   1c748:	4618      	mov	r0, r3
   1c74a:	f7fd f8f3 	bl	19934 <__assert_func>
    cfg = &dev->cfg; assert(cfg);
   1c74e:	2300      	movs	r3, #0
   1c750:	461a      	mov	r2, r3
   1c752:	4619      	mov	r1, r3
   1c754:	4618      	mov	r0, r3
   1c756:	f7fd f8ed 	bl	19934 <__assert_func>

0001c75a <temp_stub_default_cfg>:
    cfg->bc_s_mask       = SENSOR_TYPE_ALL;         //  Return all sensor values, i.e. temperature.
   1c75a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c75e:	2300      	movs	r3, #0
   1c760:	e9c0 2300 	strd	r2, r3, [r0]
}
   1c764:	2000      	movs	r0, #0
   1c766:	4770      	bx	lr

0001c768 <temp_stub_init>:
int temp_stub_init(struct os_dev *dev0, void *arg) {
   1c768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c76a:	b379      	cbz	r1, 1c7cc <temp_stub_init+0x64>
   1c76c:	460d      	mov	r5, r1
   1c76e:	b380      	cbz	r0, 1c7d2 <temp_stub_init+0x6a>
   1c770:	4604      	mov	r4, r0
    rc = temp_stub_default_cfg(&dev->cfg);
   1c772:	30b0      	adds	r0, #176	; 0xb0
   1c774:	f7ff fff1 	bl	1c75a <temp_stub_default_cfg>
    if (rc) { goto err; }
   1c778:	4603      	mov	r3, r0
   1c77a:	b108      	cbz	r0, 1c780 <temp_stub_init+0x18>
}
   1c77c:	4618      	mov	r0, r3
   1c77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    sensor = &dev->sensor;
   1c780:	f104 0628 	add.w	r6, r4, #40	; 0x28
    rc = sensor_init(sensor, dev0);
   1c784:	4621      	mov	r1, r4
   1c786:	4630      	mov	r0, r6
   1c788:	f7ff fddd 	bl	1c346 <sensor_init>
    if (rc != 0) { goto err; }
   1c78c:	4603      	mov	r3, r0
   1c78e:	2800      	cmp	r0, #0
   1c790:	d1f4      	bne.n	1c77c <temp_stub_init+0x14>
 */
static inline int
sensor_set_driver(struct sensor *sensor, sensor_type_t type,
        struct sensor_driver *driver)
{
    sensor->s_funcs = driver;
   1c792:	4b11      	ldr	r3, [pc, #68]	; (1c7d8 <temp_stub_init+0x70>)
   1c794:	6523      	str	r3, [r4, #80]	; 0x50
    sensor->s_types = type;
   1c796:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c79a:	2300      	movs	r3, #0
   1c79c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 * @param s_itf The interface type to set
 */
static inline int
sensor_set_interface(struct sensor *sensor, struct sensor_itf *s_itf)
{
    memcpy(&sensor->s_itf, s_itf, sizeof(*s_itf));
   1c7a0:	682a      	ldr	r2, [r5, #0]
   1c7a2:	686f      	ldr	r7, [r5, #4]
   1c7a4:	68a8      	ldr	r0, [r5, #8]
   1c7a6:	68e9      	ldr	r1, [r5, #12]
   1c7a8:	6722      	str	r2, [r4, #112]	; 0x70
   1c7aa:	6767      	str	r7, [r4, #116]	; 0x74
   1c7ac:	67a0      	str	r0, [r4, #120]	; 0x78
   1c7ae:	67e1      	str	r1, [r4, #124]	; 0x7c
   1c7b0:	692a      	ldr	r2, [r5, #16]
   1c7b2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
    rc = sensor_mgr_register(sensor);
   1c7b6:	4630      	mov	r0, r6
   1c7b8:	f7ff fdae 	bl	1c318 <sensor_mgr_register>
    if (rc != 0) { goto err; }
   1c7bc:	4603      	mov	r3, r0
   1c7be:	2800      	cmp	r0, #0
   1c7c0:	d1dc      	bne.n	1c77c <temp_stub_init+0x14>
    OS_DEV_SETHANDLERS(dev0, temp_stub_open, temp_stub_close);
   1c7c2:	4a06      	ldr	r2, [pc, #24]	; (1c7dc <temp_stub_init+0x74>)
   1c7c4:	6022      	str	r2, [r4, #0]
   1c7c6:	4a06      	ldr	r2, [pc, #24]	; (1c7e0 <temp_stub_init+0x78>)
   1c7c8:	60e2      	str	r2, [r4, #12]
    return (0);
   1c7ca:	e7d7      	b.n	1c77c <temp_stub_init+0x14>
    if (!arg || !dev0) { rc = SYS_ENODEV; goto err; }
   1c7cc:	f06f 0308 	mvn.w	r3, #8
   1c7d0:	e7d4      	b.n	1c77c <temp_stub_init+0x14>
   1c7d2:	f06f 0308 	mvn.w	r3, #8
   1c7d6:	e7d1      	b.n	1c77c <temp_stub_init+0x14>
   1c7d8:	000212a4 	.word	0x000212a4
   1c7dc:	0001c735 	.word	0x0001c735
   1c7e0:	0001c715 	.word	0x0001c715

0001c7e4 <temp_stub_get_raw_temperature>:
int temp_stub_get_raw_temperature(struct temp_stub *dev, int num_readings, int *temp_sum, uint8_t *temp_diff) {
   1c7e4:	b538      	push	{r3, r4, r5, lr}
   1c7e6:	460d      	mov	r5, r1
   1c7e8:	4614      	mov	r4, r2
    console_printf("STB read temp sensor\n");  ////
   1c7ea:	4808      	ldr	r0, [pc, #32]	; (1c80c <temp_stub_get_raw_temperature+0x28>)
   1c7ec:	f7fc f9da 	bl	18ba4 <console_printf>
    assert(temp_sum);
   1c7f0:	b134      	cbz	r4, 1c800 <temp_stub_get_raw_temperature+0x1c>
    *temp_sum = 1757 * num_readings;
   1c7f2:	f240 61dd 	movw	r1, #1757	; 0x6dd
   1c7f6:	fb01 f105 	mul.w	r1, r1, r5
   1c7fa:	6021      	str	r1, [r4, #0]
}
   1c7fc:	2000      	movs	r0, #0
   1c7fe:	bd38      	pop	{r3, r4, r5, pc}
    assert(temp_sum);
   1c800:	2300      	movs	r3, #0
   1c802:	461a      	mov	r2, r3
   1c804:	4619      	mov	r1, r3
   1c806:	4618      	mov	r0, r3
   1c808:	f7fd f894 	bl	19934 <__assert_func>
   1c80c:	000212cc 	.word	0x000212cc

0001c810 <temp_stub_sensor_read>:
    sensor_data_func_t data_func, void *data_arg, uint32_t timeout) {
   1c810:	b530      	push	{r4, r5, lr}
   1c812:	b087      	sub	sp, #28
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c814:	f002 6480 	and.w	r4, r2, #67108864	; 0x4000000
   1c818:	2500      	movs	r5, #0
   1c81a:	ea54 0305 	orrs.w	r3, r4, r5
   1c81e:	d032      	beq.n	1c886 <temp_stub_sensor_read+0x76>
   1c820:	4604      	mov	r4, r0
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c822:	6805      	ldr	r5, [r0, #0]
   1c824:	b165      	cbz	r5, 1c840 <temp_stub_sensor_read+0x30>
    rawtemp = -1;
   1c826:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c82a:	9303      	str	r3, [sp, #12]
        rc = temp_stub_open((struct os_dev *) dev, 0, NULL);
   1c82c:	2200      	movs	r2, #0
   1c82e:	4611      	mov	r1, r2
   1c830:	4628      	mov	r0, r5
   1c832:	f7ff ff7f 	bl	1c734 <temp_stub_open>
        if (rc) { goto err; }
   1c836:	4603      	mov	r3, r0
   1c838:	b140      	cbz	r0, 1c84c <temp_stub_sensor_read+0x3c>
}
   1c83a:	4618      	mov	r0, r3
   1c83c:	b007      	add	sp, #28
   1c83e:	bd30      	pop	{r4, r5, pc}
    dev = (struct temp_stub *) SENSOR_GET_DEVICE(sensor); assert(dev);
   1c840:	2300      	movs	r3, #0
   1c842:	461a      	mov	r2, r3
   1c844:	4619      	mov	r1, r3
   1c846:	4618      	mov	r0, r3
   1c848:	f7fd f874 	bl	19934 <__assert_func>
        rc = temp_stub_get_raw_temperature(dev, 1, &rawtemp, NULL);
   1c84c:	2300      	movs	r3, #0
   1c84e:	aa03      	add	r2, sp, #12
   1c850:	2101      	movs	r1, #1
   1c852:	4628      	mov	r0, r5
   1c854:	f7ff ffc6 	bl	1c7e4 <temp_stub_get_raw_temperature>
    if (rc) { goto err; }  //  console_printf("rawtemp: %d\n", rawtemp);  ////
   1c858:	4603      	mov	r3, r0
   1c85a:	2800      	cmp	r0, #0
   1c85c:	d1ed      	bne.n	1c83a <temp_stub_sensor_read+0x2a>
    temp_data->strd_temp_raw = rawtemp;  //  rawtemp must be between 0 and 4,095 (based on 12-bit ADC)
   1c85e:	9a03      	ldr	r2, [sp, #12]
   1c860:	9204      	str	r2, [sp, #16]
    temp_data->strd_temp_raw_is_valid = 1;
   1c862:	2201      	movs	r2, #1
   1c864:	f88d 2014 	strb.w	r2, [sp, #20]
    if (data_func) {  //  Call the Listener Function to process the sensor data.
   1c868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1c86a:	2a00      	cmp	r2, #0
   1c86c:	d0e5      	beq.n	1c83a <temp_stub_sensor_read+0x2a>
        rc = data_func(sensor, data_arg, temp_data, TEMP_SENSOR_TYPE);
   1c86e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
   1c872:	2300      	movs	r3, #0
   1c874:	e9cd 2300 	strd	r2, r3, [sp]
   1c878:	aa04      	add	r2, sp, #16
   1c87a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1c87c:	4620      	mov	r0, r4
   1c87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c880:	4798      	blx	r3
   1c882:	4603      	mov	r3, r0
   1c884:	e7d9      	b.n	1c83a <temp_stub_sensor_read+0x2a>
    if (!(type & TEMP_SENSOR_TYPE)) { rc = SYS_EINVAL; goto err; }
   1c886:	f06f 0301 	mvn.w	r3, #1
   1c88a:	e7d6      	b.n	1c83a <temp_stub_sensor_read+0x2a>

0001c88c <temp_stub_config>:
 * @param Sensor device temp_stub structure
 * @param Sensor device temp_stub_cfg config
 *
 * @return 0 on success, and non-zero error code on failure
 */
int temp_stub_config(struct temp_stub *dev, struct temp_stub_cfg *cfg) {
   1c88c:	b508      	push	{r3, lr}
    struct sensor_itf *itf;
    int rc;
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c88e:	f110 0f70 	cmn.w	r0, #112	; 0x70
   1c892:	d009      	beq.n	1c8a8 <temp_stub_config+0x1c>
    rc = sensor_set_type_mask(&(dev->sensor),  cfg->bc_s_mask);
   1c894:	e9d1 2300 	ldrd	r2, r3, [r1]
    sensor->s_mask = mask;
   1c898:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
    if (rc) { goto err; }

    dev->cfg.bc_s_mask = cfg->bc_s_mask;
   1c89c:	e9d1 2300 	ldrd	r2, r3, [r1]
   1c8a0:	e9c0 232c 	strd	r2, r3, [r0, #176]	; 0xb0
    return 0;
err:
    return (rc);
}
   1c8a4:	2000      	movs	r0, #0
   1c8a6:	bd08      	pop	{r3, pc}
    itf = SENSOR_GET_ITF(&(dev->sensor)); assert(itf);
   1c8a8:	2300      	movs	r3, #0
   1c8aa:	461a      	mov	r2, r3
   1c8ac:	4619      	mov	r1, r3
   1c8ae:	4618      	mov	r0, r3
   1c8b0:	f7fd f840 	bl	19934 <__assert_func>

0001c8b4 <oc_buffer_tx>:
    assert(rc == 0);
}

static void
oc_buffer_tx(struct os_event *ev)
{
   1c8b4:	b508      	push	{r3, lr}
    struct os_mbuf *m;

    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c8b6:	e002      	b.n	1c8be <oc_buffer_tx+0xa>
                                    oc_events[RI_TO_DTLS_EVENT], m);
                }
            } else
#endif
            {
                oc_send_buffer(m);
   1c8b8:	4618      	mov	r0, r3
   1c8ba:	f000 f85b 	bl	1c974 <oc_send_buffer>
    while ((m = os_mqueue_get(&oc_outq)) != NULL) {
   1c8be:	4808      	ldr	r0, [pc, #32]	; (1c8e0 <oc_buffer_tx+0x2c>)
   1c8c0:	f7fd fc03 	bl	1a0ca <os_mqueue_get>
   1c8c4:	4603      	mov	r3, r0
   1c8c6:	b148      	cbz	r0, 1c8dc <oc_buffer_tx+0x28>
        STAILQ_NEXT(OS_MBUF_PKTHDR(m), omp_next) = NULL;
   1c8c8:	2200      	movs	r2, #0
   1c8ca:	615a      	str	r2, [r3, #20]
        if (OC_MBUF_ENDPOINT(m)->ep.oe_flags & OC_ENDPOINT_MULTICAST) {
   1c8cc:	7e1a      	ldrb	r2, [r3, #24]
   1c8ce:	f012 0f08 	tst.w	r2, #8
   1c8d2:	d0f1      	beq.n	1c8b8 <oc_buffer_tx+0x4>
            oc_send_multicast_message(m);
   1c8d4:	4618      	mov	r0, r3
   1c8d6:	f000 f85d 	bl	1c994 <oc_send_multicast_message>
   1c8da:	e7f0      	b.n	1c8be <oc_buffer_tx+0xa>
            }
#ifdef OC_CLIENT
        }
#endif
    }
}
   1c8dc:	bd08      	pop	{r3, pc}
   1c8de:	bf00      	nop
   1c8e0:	2000d3d0 	.word	0x2000d3d0

0001c8e4 <oc_buffer_rx>:

static void
oc_buffer_rx(struct os_event *ev)
{
   1c8e4:	b500      	push	{lr}
   1c8e6:	b083      	sub	sp, #12
    struct os_mbuf *m;
#if defined(OC_SECURITY)
    uint8_t b;
#endif

    while ((m = os_mqueue_get(&oc_inq)) != NULL) {
   1c8e8:	4808      	ldr	r0, [pc, #32]	; (1c90c <oc_buffer_rx+0x28>)
   1c8ea:	f7fd fbee 	bl	1a0ca <os_mqueue_get>
   1c8ee:	9001      	str	r0, [sp, #4]
   1c8f0:	b140      	cbz	r0, 1c904 <oc_buffer_rx+0x20>
            oc_process_post(&oc_dtls_handler, oc_events[UDP_TO_DTLS_EVENT], m);
        } else {
            coap_receive(m);
        }
#else
        coap_receive(&m);
   1c8f2:	a801      	add	r0, sp, #4
   1c8f4:	f000 faa2 	bl	1ce3c <__wrap_coap_receive>
#endif
        if (m) {
   1c8f8:	9801      	ldr	r0, [sp, #4]
   1c8fa:	2800      	cmp	r0, #0
   1c8fc:	d0f4      	beq.n	1c8e8 <oc_buffer_rx+0x4>
            os_mbuf_free_chain(m);
   1c8fe:	f7fd fc59 	bl	1a1b4 <os_mbuf_free_chain>
   1c902:	e7f1      	b.n	1c8e8 <oc_buffer_rx+0x4>
        }
    }
}
   1c904:	b003      	add	sp, #12
   1c906:	f85d fb04 	ldr.w	pc, [sp], #4
   1c90a:	bf00      	nop
   1c90c:	2000d3b8 	.word	0x2000d3b8

0001c910 <oc_buffer_init>:

void
oc_buffer_init(void)
{
   1c910:	b508      	push	{r3, lr}
    os_mqueue_init(&oc_inq, oc_buffer_rx, NULL);
   1c912:	2200      	movs	r2, #0
   1c914:	4904      	ldr	r1, [pc, #16]	; (1c928 <oc_buffer_init+0x18>)
   1c916:	4805      	ldr	r0, [pc, #20]	; (1c92c <oc_buffer_init+0x1c>)
   1c918:	f7fd fbce 	bl	1a0b8 <os_mqueue_init>
    os_mqueue_init(&oc_outq, oc_buffer_tx, NULL);
   1c91c:	2200      	movs	r2, #0
   1c91e:	4904      	ldr	r1, [pc, #16]	; (1c930 <oc_buffer_init+0x20>)
   1c920:	4804      	ldr	r0, [pc, #16]	; (1c934 <oc_buffer_init+0x24>)
   1c922:	f7fd fbc9 	bl	1a0b8 <os_mqueue_init>
}
   1c926:	bd08      	pop	{r3, pc}
   1c928:	0001c8e5 	.word	0x0001c8e5
   1c92c:	2000d3b8 	.word	0x2000d3b8
   1c930:	0001c8b5 	.word	0x0001c8b5
   1c934:	2000d3d0 	.word	0x2000d3d0

0001c938 <oc_ri_mem_init>:
}
#endif

void
oc_ri_mem_init(void)
{
   1c938:	b500      	push	{lr}
   1c93a:	b083      	sub	sp, #12
#ifdef OC_SERVER
  os_mempool_init(&oc_resource_pool, MAX_APP_RESOURCES, sizeof(oc_resource_t),
                  oc_resource_area, "oc_res");
#endif
#ifdef OC_CLIENT
    os_mempool_init(&oc_client_cb_pool, MAX_NUM_CONCURRENT_REQUESTS,
   1c93c:	4b07      	ldr	r3, [pc, #28]	; (1c95c <oc_ri_mem_init+0x24>)
   1c93e:	9300      	str	r3, [sp, #0]
   1c940:	4b07      	ldr	r3, [pc, #28]	; (1c960 <oc_ri_mem_init+0x28>)
   1c942:	2264      	movs	r2, #100	; 0x64
   1c944:	2102      	movs	r1, #2
   1c946:	4807      	ldr	r0, [pc, #28]	; (1c964 <oc_ri_mem_init+0x2c>)
   1c948:	f7fd fd3c 	bl	1a3c4 <os_mempool_init>
      sizeof(oc_client_cb_t), oc_client_cb_area, "oc_cl_cbs");
    oc_rep_init();
   1c94c:	f000 f860 	bl	1ca10 <oc_rep_init>
#endif
    oc_buffer_init();
   1c950:	f7ff ffde 	bl	1c910 <oc_buffer_init>
}
   1c954:	b003      	add	sp, #12
   1c956:	f85d fb04 	ldr.w	pc, [sp], #4
   1c95a:	bf00      	nop
   1c95c:	000212e4 	.word	0x000212e4
   1c960:	2000d3e8 	.word	0x2000d3e8
   1c964:	2000d4b0 	.word	0x2000d4b0

0001c968 <oc_evq_set>:
}

void
oc_evq_set(struct os_eventq *evq)
{
    oc_evq = evq;
   1c968:	4b01      	ldr	r3, [pc, #4]	; (1c970 <oc_evq_set+0x8>)
   1c96a:	6018      	str	r0, [r3, #0]
}
   1c96c:	4770      	bx	lr
   1c96e:	bf00      	nop
   1c970:	2000d4cc 	.word	0x2000d4cc

0001c974 <oc_send_buffer>:
    }
}

void
oc_send_buffer(struct os_mbuf *m)
{
   1c974:	b508      	push	{r3, lr}
    struct oc_endpoint *oe;
    const struct oc_transport *ot;

    oe = OC_MBUF_ENDPOINT(m);

    ot = oc_transports[oe->ep.oe_type];
   1c976:	7e03      	ldrb	r3, [r0, #24]
   1c978:	f003 0307 	and.w	r3, r3, #7
   1c97c:	4a04      	ldr	r2, [pc, #16]	; (1c990 <oc_send_buffer+0x1c>)
   1c97e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    if (ot) {
   1c982:	b113      	cbz	r3, 1c98a <oc_send_buffer+0x16>
        ot->ot_tx_ucast(m);
   1c984:	68db      	ldr	r3, [r3, #12]
   1c986:	4798      	blx	r3
    } else {
        OC_LOG(ERROR, "Unknown transport option %u\n", oe->ep.oe_type);
        os_mbuf_free_chain(m);
    }
}
   1c988:	bd08      	pop	{r3, pc}
        os_mbuf_free_chain(m);
   1c98a:	f7fd fc13 	bl	1a1b4 <os_mbuf_free_chain>
}
   1c98e:	e7fb      	b.n	1c988 <oc_send_buffer+0x14>
   1c990:	2000d760 	.word	0x2000d760

0001c994 <oc_send_multicast_message>:
/*
 * Send on all the transports.
 */
void
oc_send_multicast_message(struct os_mbuf *m)
{
   1c994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c998:	4607      	mov	r7, r0
    const struct oc_transport *ot;
    const struct oc_transport *prev = NULL;
    struct os_mbuf *n;
    int i;

    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c99a:	2400      	movs	r4, #0
    const struct oc_transport *prev = NULL;
   1c99c:	4626      	mov	r6, r4
    for (i = 0; i < OC_TRANSPORT_MAX; i++) {
   1c99e:	e002      	b.n	1c9a6 <oc_send_multicast_message+0x12>
   1c9a0:	4635      	mov	r5, r6
   1c9a2:	3401      	adds	r4, #1
   1c9a4:	462e      	mov	r6, r5
   1c9a6:	2c07      	cmp	r4, #7
   1c9a8:	dc12      	bgt.n	1c9d0 <oc_send_multicast_message+0x3c>
        if (!oc_transports[i]) {
   1c9aa:	4b0c      	ldr	r3, [pc, #48]	; (1c9dc <oc_send_multicast_message+0x48>)
   1c9ac:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
   1c9b0:	2d00      	cmp	r5, #0
   1c9b2:	d0f5      	beq.n	1c9a0 <oc_send_multicast_message+0xc>
            continue;
        }

        ot = oc_transports[i];
        if (prev) {
   1c9b4:	2e00      	cmp	r6, #0
   1c9b6:	d0f4      	beq.n	1c9a2 <oc_send_multicast_message+0xe>
            n = os_mbuf_dup(m);
   1c9b8:	4638      	mov	r0, r7
   1c9ba:	f7fd fc6b 	bl	1a294 <os_mbuf_dup>
   1c9be:	4680      	mov	r8, r0
            prev->ot_tx_mcast(m);
   1c9c0:	6933      	ldr	r3, [r6, #16]
   1c9c2:	4638      	mov	r0, r7
   1c9c4:	4798      	blx	r3
            if (!n) {
   1c9c6:	f1b8 0f00 	cmp.w	r8, #0
   1c9ca:	d005      	beq.n	1c9d8 <oc_send_multicast_message+0x44>
                return;
            }
            m = n;
   1c9cc:	4647      	mov	r7, r8
   1c9ce:	e7e8      	b.n	1c9a2 <oc_send_multicast_message+0xe>
        }
        prev = ot;
    }
    if (prev) {
   1c9d0:	b116      	cbz	r6, 1c9d8 <oc_send_multicast_message+0x44>
        prev->ot_tx_mcast(m);
   1c9d2:	6933      	ldr	r3, [r6, #16]
   1c9d4:	4638      	mov	r0, r7
   1c9d6:	4798      	blx	r3
    }
}
   1c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c9dc:	2000d760 	.word	0x2000d760

0001c9e0 <oc_init>:
    return rc;
}

void
oc_init(void)
{
   1c9e0:	b508      	push	{r3, lr}
    SYSINIT_ASSERT_ACTIVE();
   1c9e2:	4b07      	ldr	r3, [pc, #28]	; (1ca00 <oc_init+0x20>)
   1c9e4:	781b      	ldrb	r3, [r3, #0]
   1c9e6:	b133      	cbz	r3, 1c9f6 <oc_init+0x16>
    oc_ri_mem_init();
   1c9e8:	f7ff ffa6 	bl	1c938 <oc_ri_mem_init>
    oc_evq_set(os_eventq_dflt_get());
   1c9ec:	f7fd fb60 	bl	1a0b0 <os_eventq_dflt_get>
   1c9f0:	f7ff ffba 	bl	1c968 <oc_evq_set>
}
   1c9f4:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1c9f6:	461a      	mov	r2, r3
   1c9f8:	4619      	mov	r1, r3
   1c9fa:	4618      	mov	r0, r3
   1c9fc:	f7fc ff9a 	bl	19934 <__assert_func>
   1ca00:	2000d5bc 	.word	0x2000d5bc

0001ca04 <oc_register_gatt>:
oc_register_gatt(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_GATT) == 1)
    oc_gatt_transport_id = oc_transport_register(&oc_gatt_transport);
#endif
}
   1ca04:	4770      	bx	lr

0001ca06 <oc_register_ip4>:
oc_register_ip4(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV4) == 1)
    oc_ip4_transport_id = oc_transport_register(&oc_ip4_transport);
#endif
}
   1ca06:	4770      	bx	lr

0001ca08 <oc_register_ip6>:
oc_register_ip6(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_IP) == 1) && (MYNEWT_VAL(OC_TRANSPORT_IPV6) == 1)
    oc_ip6_transport_id = oc_transport_register(&oc_ip6_transport);
#endif
}
   1ca08:	4770      	bx	lr

0001ca0a <oc_register_lora>:
oc_register_lora(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_LORA) == 1)
    oc_lora_transport_id = oc_transport_register(&oc_lora_transport);
#endif
}
   1ca0a:	4770      	bx	lr

0001ca0c <oc_register_serial>:
oc_register_serial(void)
{
#if (MYNEWT_VAL(OC_TRANSPORT_SERIAL) == 1)
    oc_serial_transport_id = oc_transport_register(&oc_serial_transport);
#endif
}
   1ca0c:	4770      	bx	lr
	...

0001ca10 <oc_rep_init>:
  return (uint16_t)err;
}

void
oc_rep_init(void)
{
   1ca10:	b500      	push	{lr}
   1ca12:	b083      	sub	sp, #12
    os_mempool_init(&oc_rep_objects, EST_NUM_REP_OBJECTS,
   1ca14:	4b05      	ldr	r3, [pc, #20]	; (1ca2c <oc_rep_init+0x1c>)
   1ca16:	9300      	str	r3, [sp, #0]
   1ca18:	4b05      	ldr	r3, [pc, #20]	; (1ca30 <oc_rep_init+0x20>)
   1ca1a:	2218      	movs	r2, #24
   1ca1c:	2102      	movs	r1, #2
   1ca1e:	4805      	ldr	r0, [pc, #20]	; (1ca34 <oc_rep_init+0x24>)
   1ca20:	f7fd fcd0 	bl	1a3c4 <os_mempool_init>
                    sizeof(oc_rep_t), oc_rep_objects_area, "oc_rep_o");
}
   1ca24:	b003      	add	sp, #12
   1ca26:	f85d fb04 	ldr.w	pc, [sp], #4
   1ca2a:	bf00      	nop
   1ca2c:	000212f0 	.word	0x000212f0
   1ca30:	2000d4ec 	.word	0x2000d4ec
   1ca34:	2000d4d0 	.word	0x2000d4d0

0001ca38 <flash_map_read_mfg>:
 * @return                      0 on success; nonzero on failure.
 */
static int
flash_map_read_mfg(int max_areas,
                   struct flash_area *out_areas, int *out_num_areas)
{
   1ca38:	b570      	push	{r4, r5, r6, lr}
   1ca3a:	b086      	sub	sp, #24
   1ca3c:	4605      	mov	r5, r0
   1ca3e:	460e      	mov	r6, r1
   1ca40:	4614      	mov	r4, r2
    struct mfg_meta_flash_area meta_flash_area;
    struct mfg_reader reader;
    struct flash_area *fap;
    int rc;

    *out_num_areas = 0;
   1ca42:	2300      	movs	r3, #0
   1ca44:	6013      	str	r3, [r2, #0]

    /* Ensure manufacturing meta region has been located in flash. */
    mfg_init();
   1ca46:	f000 f9ad 	bl	1cda4 <mfg_init>

    mfg_open(&reader);
   1ca4a:	a801      	add	r0, sp, #4
   1ca4c:	f000 f9c6 	bl	1cddc <mfg_open>

    while (1) {
        if (*out_num_areas >= max_areas) {
   1ca50:	6823      	ldr	r3, [r4, #0]
   1ca52:	42ab      	cmp	r3, r5
   1ca54:	da29      	bge.n	1caaa <flash_map_read_mfg+0x72>
            return -1;
        }

        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_FLASH_AREA);
   1ca56:	2102      	movs	r1, #2
   1ca58:	a801      	add	r0, sp, #4
   1ca5a:	f000 f98c 	bl	1cd76 <mfg_seek_next_with_type>
   1ca5e:	4603      	mov	r3, r0
        switch (rc) {
   1ca60:	f110 0f0f 	cmn.w	r0, #15
   1ca64:	d003      	beq.n	1ca6e <flash_map_read_mfg+0x36>
   1ca66:	b120      	cbz	r0, 1ca72 <flash_map_read_mfg+0x3a>
        fap->fa_off = meta_flash_area.offset;
        fap->fa_size = meta_flash_area.size;

        (*out_num_areas)++;
    }
}
   1ca68:	4618      	mov	r0, r3
   1ca6a:	b006      	add	sp, #24
   1ca6c:	bd70      	pop	{r4, r5, r6, pc}
            return 0;
   1ca6e:	2300      	movs	r3, #0
   1ca70:	e7fa      	b.n	1ca68 <flash_map_read_mfg+0x30>
        rc = mfg_read_tlv_flash_area(&reader, &meta_flash_area);
   1ca72:	a903      	add	r1, sp, #12
   1ca74:	a801      	add	r0, sp, #4
   1ca76:	f000 f98b 	bl	1cd90 <mfg_read_tlv_flash_area>
        if (rc != 0) {
   1ca7a:	4603      	mov	r3, r0
   1ca7c:	2800      	cmp	r0, #0
   1ca7e:	d1f3      	bne.n	1ca68 <flash_map_read_mfg+0x30>
        fap = out_areas + *out_num_areas;
   1ca80:	6823      	ldr	r3, [r4, #0]
   1ca82:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ca86:	009a      	lsls	r2, r3, #2
   1ca88:	18b3      	adds	r3, r6, r2
        fap->fa_id = meta_flash_area.area_id;
   1ca8a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1ca8e:	54b1      	strb	r1, [r6, r2]
        fap->fa_device_id = meta_flash_area.device_id;
   1ca90:	f89d 200d 	ldrb.w	r2, [sp, #13]
   1ca94:	705a      	strb	r2, [r3, #1]
        fap->fa_off = meta_flash_area.offset;
   1ca96:	f8dd 200e 	ldr.w	r2, [sp, #14]
   1ca9a:	605a      	str	r2, [r3, #4]
        fap->fa_size = meta_flash_area.size;
   1ca9c:	f8dd 2012 	ldr.w	r2, [sp, #18]
   1caa0:	609a      	str	r2, [r3, #8]
        (*out_num_areas)++;
   1caa2:	6823      	ldr	r3, [r4, #0]
   1caa4:	3301      	adds	r3, #1
   1caa6:	6023      	str	r3, [r4, #0]
        if (*out_num_areas >= max_areas) {
   1caa8:	e7d2      	b.n	1ca50 <flash_map_read_mfg+0x18>
            return -1;
   1caaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1caae:	e7db      	b.n	1ca68 <flash_map_read_mfg+0x30>

0001cab0 <flash_area_open>:
{
   1cab0:	b430      	push	{r4, r5}
    if (flash_map == NULL) {
   1cab2:	4b0d      	ldr	r3, [pc, #52]	; (1cae8 <flash_area_open+0x38>)
   1cab4:	681d      	ldr	r5, [r3, #0]
   1cab6:	b1a5      	cbz	r5, 1cae2 <flash_area_open+0x32>
    for (i = 0; i < flash_map_entries; i++) {
   1cab8:	2300      	movs	r3, #0
   1caba:	4a0c      	ldr	r2, [pc, #48]	; (1caec <flash_area_open+0x3c>)
   1cabc:	6812      	ldr	r2, [r2, #0]
   1cabe:	429a      	cmp	r2, r3
   1cac0:	dd0b      	ble.n	1cada <flash_area_open+0x2a>
        area = flash_map + i;
   1cac2:	eb03 0443 	add.w	r4, r3, r3, lsl #1
   1cac6:	00a2      	lsls	r2, r4, #2
   1cac8:	18ac      	adds	r4, r5, r2
        if (area->fa_id == id) {
   1caca:	5caa      	ldrb	r2, [r5, r2]
   1cacc:	4282      	cmp	r2, r0
   1cace:	d001      	beq.n	1cad4 <flash_area_open+0x24>
    for (i = 0; i < flash_map_entries; i++) {
   1cad0:	3301      	adds	r3, #1
   1cad2:	e7f2      	b.n	1caba <flash_area_open+0xa>
            *fap = area;
   1cad4:	600c      	str	r4, [r1, #0]
            return 0;
   1cad6:	2000      	movs	r0, #0
   1cad8:	e001      	b.n	1cade <flash_area_open+0x2e>
    return SYS_ENOENT;
   1cada:	f06f 0003 	mvn.w	r0, #3
}
   1cade:	bc30      	pop	{r4, r5}
   1cae0:	4770      	bx	lr
        return SYS_EACCES;
   1cae2:	f06f 0006 	mvn.w	r0, #6
   1cae6:	e7fa      	b.n	1cade <flash_area_open+0x2e>
   1cae8:	2000d784 	.word	0x2000d784
   1caec:	2000d780 	.word	0x2000d780

0001caf0 <flash_area_read>:
{
   1caf0:	b538      	push	{r3, r4, r5, lr}
    if (off > fa->fa_size || off + len > fa->fa_size) {
   1caf2:	6884      	ldr	r4, [r0, #8]
   1caf4:	428c      	cmp	r4, r1
   1caf6:	d308      	bcc.n	1cb0a <flash_area_read+0x1a>
   1caf8:	18cd      	adds	r5, r1, r3
   1cafa:	42ac      	cmp	r4, r5
   1cafc:	d308      	bcc.n	1cb10 <flash_area_read+0x20>
    return hal_flash_read(fa->fa_device_id, fa->fa_off + off, dst, len);
   1cafe:	6844      	ldr	r4, [r0, #4]
   1cb00:	4421      	add	r1, r4
   1cb02:	7840      	ldrb	r0, [r0, #1]
   1cb04:	f000 f9c8 	bl	1ce98 <hal_flash_read>
}
   1cb08:	bd38      	pop	{r3, r4, r5, pc}
        return -1;
   1cb0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb0e:	e7fb      	b.n	1cb08 <flash_area_read+0x18>
   1cb10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1cb14:	e7f8      	b.n	1cb08 <flash_area_read+0x18>
	...

0001cb18 <flash_map_init>:

void
flash_map_init(void)
{
   1cb18:	b510      	push	{r4, lr}
   1cb1a:	b084      	sub	sp, #16

    int num_areas;
    int rc;

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cb1c:	4b14      	ldr	r3, [pc, #80]	; (1cb70 <flash_map_init+0x58>)
   1cb1e:	781b      	ldrb	r3, [r3, #0]
   1cb20:	b303      	cbz	r3, 1cb64 <flash_map_init+0x4c>

    rc = hal_flash_init();
   1cb22:	f000 f9a5 	bl	1ce70 <hal_flash_init>
    SYSINIT_PANIC_ASSERT(rc == 0);
   1cb26:	b138      	cbz	r0, 1cb38 <flash_map_init+0x20>
   1cb28:	2000      	movs	r0, #0
   1cb2a:	9000      	str	r0, [sp, #0]
   1cb2c:	4b11      	ldr	r3, [pc, #68]	; (1cb74 <flash_map_init+0x5c>)
   1cb2e:	681c      	ldr	r4, [r3, #0]
   1cb30:	4603      	mov	r3, r0
   1cb32:	4602      	mov	r2, r0
   1cb34:	4601      	mov	r1, r0
   1cb36:	47a0      	blx	r4
     *    In particular, a FLASH_AREA_BOOTLOADER entry is required for the boot
     *    MMR, as well as an entry for each extended MMR.
     * 2. If we fail to read the flash map from the MMRs, the system continues
     *    to use the default flash map.
     */
    flash_map = sysflash_map_dflt;
   1cb38:	4b0f      	ldr	r3, [pc, #60]	; (1cb78 <flash_map_init+0x60>)
   1cb3a:	4a10      	ldr	r2, [pc, #64]	; (1cb7c <flash_map_init+0x64>)
   1cb3c:	601a      	str	r2, [r3, #0]
    flash_map_entries = sizeof sysflash_map_dflt / sizeof sysflash_map_dflt[0];
   1cb3e:	4b10      	ldr	r3, [pc, #64]	; (1cb80 <flash_map_init+0x68>)
   1cb40:	2206      	movs	r2, #6
   1cb42:	601a      	str	r2, [r3, #0]

    /* Attempt to read the flash map from the manufacturing meta regions.  On
     * success, use the new flash map instead of the default hardcoded one.
     */
    rc = flash_map_read_mfg(sizeof mfg_areas / sizeof mfg_areas[0],
   1cb44:	aa03      	add	r2, sp, #12
   1cb46:	490f      	ldr	r1, [pc, #60]	; (1cb84 <flash_map_init+0x6c>)
   1cb48:	200a      	movs	r0, #10
   1cb4a:	f7ff ff75 	bl	1ca38 <flash_map_read_mfg>
                            mfg_areas, &num_areas);
    if (rc == 0 && num_areas > 0) {
   1cb4e:	b938      	cbnz	r0, 1cb60 <flash_map_init+0x48>
   1cb50:	9b03      	ldr	r3, [sp, #12]
   1cb52:	2b00      	cmp	r3, #0
   1cb54:	dd04      	ble.n	1cb60 <flash_map_init+0x48>
        flash_map = mfg_areas;
   1cb56:	4a08      	ldr	r2, [pc, #32]	; (1cb78 <flash_map_init+0x60>)
   1cb58:	490a      	ldr	r1, [pc, #40]	; (1cb84 <flash_map_init+0x6c>)
   1cb5a:	6011      	str	r1, [r2, #0]
        flash_map_entries = num_areas;
   1cb5c:	4a08      	ldr	r2, [pc, #32]	; (1cb80 <flash_map_init+0x68>)
   1cb5e:	6013      	str	r3, [r2, #0]
    }
}
   1cb60:	b004      	add	sp, #16
   1cb62:	bd10      	pop	{r4, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cb64:	461a      	mov	r2, r3
   1cb66:	4619      	mov	r1, r3
   1cb68:	4618      	mov	r0, r3
   1cb6a:	f7fc fee3 	bl	19934 <__assert_func>
   1cb6e:	bf00      	nop
   1cb70:	2000d5bc 	.word	0x2000d5bc
   1cb74:	20000104 	.word	0x20000104
   1cb78:	2000d784 	.word	0x2000d784
   1cb7c:	000212fc 	.word	0x000212fc
   1cb80:	2000d780 	.word	0x2000d780
   1cb84:	2000d51c 	.word	0x2000d51c

0001cb88 <modlog_init>:

#else /* LOG_FULL */

void
modlog_init(void)
{ }
   1cb88:	4770      	bx	lr
	...

0001cb8c <mfg_seek_next_aux>:
 *                                  for reading.
 *                              Other MFG error code on failure.
 */
static int
mfg_seek_next_aux(struct mfg_reader *reader)
{
   1cb8c:	b530      	push	{r4, r5, lr}
   1cb8e:	b083      	sub	sp, #12
    const struct flash_area *fap;
    const struct mfg_mmr *mmr;
    int rc;

    if (reader->mmr_idx >= mfg_num_mmrs) {
   1cb90:	7885      	ldrb	r5, [r0, #2]
   1cb92:	4b21      	ldr	r3, [pc, #132]	; (1cc18 <mfg_seek_next_aux+0x8c>)
   1cb94:	681b      	ldr	r3, [r3, #0]
   1cb96:	429d      	cmp	r5, r3
   1cb98:	da32      	bge.n	1cc00 <mfg_seek_next_aux+0x74>
   1cb9a:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }

    mmr = &mfg_mmrs[reader->mmr_idx];

    rc = flash_area_open(mmr->area_id, &fap);
   1cb9c:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   1cba0:	0093      	lsls	r3, r2, #2
   1cba2:	a901      	add	r1, sp, #4
   1cba4:	4a1d      	ldr	r2, [pc, #116]	; (1cc1c <mfg_seek_next_aux+0x90>)
   1cba6:	5cd0      	ldrb	r0, [r2, r3]
   1cba8:	f7ff ff82 	bl	1cab0 <flash_area_open>
    if (rc != 0) {
   1cbac:	bb58      	cbnz	r0, 1cc06 <mfg_seek_next_aux+0x7a>
        return SYS_EIO;
    }

    if (reader->offset == 0) {
   1cbae:	6862      	ldr	r2, [r4, #4]
   1cbb0:	b9c2      	cbnz	r2, 1cbe4 <mfg_seek_next_aux+0x58>
        /* First seek; advance to the start of the MMR. */
        reader->offset = mmr->offset;
   1cbb2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   1cbb6:	00aa      	lsls	r2, r5, #2
   1cbb8:	4b18      	ldr	r3, [pc, #96]	; (1cc1c <mfg_seek_next_aux+0x90>)
   1cbba:	4413      	add	r3, r2
   1cbbc:	685b      	ldr	r3, [r3, #4]
   1cbbe:	6063      	str	r3, [r4, #4]
    } else {
        /* Follow-up seek; skip the current TLV. */
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
    }

    if (reader->offset >= fap->fa_size - MFG_META_FOOTER_SZ) {
   1cbc0:	6861      	ldr	r1, [r4, #4]
   1cbc2:	9801      	ldr	r0, [sp, #4]
   1cbc4:	6883      	ldr	r3, [r0, #8]
   1cbc6:	3b08      	subs	r3, #8
   1cbc8:	4299      	cmp	r1, r3
   1cbca:	d310      	bcc.n	1cbee <mfg_seek_next_aux+0x62>
        /* Reached end of the MMR; advance to the next MMR if one exists. */
        if (reader->mmr_idx + 1 >= mfg_num_mmrs) {
   1cbcc:	78a3      	ldrb	r3, [r4, #2]
   1cbce:	1c59      	adds	r1, r3, #1
   1cbd0:	4a11      	ldr	r2, [pc, #68]	; (1cc18 <mfg_seek_next_aux+0x8c>)
   1cbd2:	6812      	ldr	r2, [r2, #0]
   1cbd4:	4291      	cmp	r1, r2
   1cbd6:	da19      	bge.n	1cc0c <mfg_seek_next_aux+0x80>
            rc = SYS_EDONE;
        } else {
            reader->offset = 0;
   1cbd8:	2200      	movs	r2, #0
   1cbda:	6062      	str	r2, [r4, #4]
            reader->mmr_idx++;
   1cbdc:	70a1      	strb	r1, [r4, #2]
            rc = SYS_EAGAIN;
   1cbde:	f06f 0305 	mvn.w	r3, #5
   1cbe2:	e015      	b.n	1cc10 <mfg_seek_next_aux+0x84>
        reader->offset += MFG_META_TLV_SZ + reader->cur_tlv.size;
   1cbe4:	7863      	ldrb	r3, [r4, #1]
   1cbe6:	4413      	add	r3, r2
   1cbe8:	3302      	adds	r3, #2
   1cbea:	6063      	str	r3, [r4, #4]
   1cbec:	e7e8      	b.n	1cbc0 <mfg_seek_next_aux+0x34>
        }
        goto done;
    }

    /* Read current TLV header. */
    rc = flash_area_read(fap, reader->offset, &reader->cur_tlv,
   1cbee:	2302      	movs	r3, #2
   1cbf0:	4622      	mov	r2, r4
   1cbf2:	f7ff ff7d 	bl	1caf0 <flash_area_read>
                         MFG_META_TLV_SZ);
    if (rc != 0) {
   1cbf6:	4603      	mov	r3, r0
   1cbf8:	b150      	cbz	r0, 1cc10 <mfg_seek_next_aux+0x84>
        rc = SYS_EIO;
   1cbfa:	f06f 0304 	mvn.w	r3, #4
   1cbfe:	e007      	b.n	1cc10 <mfg_seek_next_aux+0x84>
        return SYS_EINVAL;
   1cc00:	f06f 0301 	mvn.w	r3, #1
   1cc04:	e004      	b.n	1cc10 <mfg_seek_next_aux+0x84>
        return SYS_EIO;
   1cc06:	f06f 0304 	mvn.w	r3, #4
   1cc0a:	e001      	b.n	1cc10 <mfg_seek_next_aux+0x84>
            rc = SYS_EDONE;
   1cc0c:	f06f 030e 	mvn.w	r3, #14
    }

done:
    flash_area_close(fap);
    return rc;
}
   1cc10:	4618      	mov	r0, r3
   1cc12:	b003      	add	sp, #12
   1cc14:	bd30      	pop	{r4, r5, pc}
   1cc16:	bf00      	nop
   1cc18:	2000d5b0 	.word	0x2000d5b0
   1cc1c:	2000d598 	.word	0x2000d598

0001cc20 <mfg_read_mmr>:
/**
 * Reads an MMR from the end of the specified flash area.
 */
static int
mfg_read_mmr(uint8_t area_id, struct mfg_mmr *out_mmr)
{
   1cc20:	b530      	push	{r4, r5, lr}
   1cc22:	b085      	sub	sp, #20
   1cc24:	4605      	mov	r5, r0
   1cc26:	460c      	mov	r4, r1
    const struct flash_area *fap;
    struct mfg_meta_footer ftr;
    int rc;

    rc = flash_area_open(area_id, &fap);
   1cc28:	a903      	add	r1, sp, #12
   1cc2a:	f7ff ff41 	bl	1cab0 <flash_area_open>
    if (rc != 0) {
   1cc2e:	b9e8      	cbnz	r0, 1cc6c <mfg_read_mmr+0x4c>
        return SYS_EIO;
    }

    /* Read the MMR footer. */
    rc = flash_area_read(fap, fap->fa_size - sizeof ftr, &ftr, sizeof ftr);
   1cc30:	9803      	ldr	r0, [sp, #12]
   1cc32:	6881      	ldr	r1, [r0, #8]
   1cc34:	2308      	movs	r3, #8
   1cc36:	aa01      	add	r2, sp, #4
   1cc38:	3908      	subs	r1, #8
   1cc3a:	f7ff ff59 	bl	1caf0 <flash_area_read>
    flash_area_close(fap);

    if (rc != 0) {
   1cc3e:	4601      	mov	r1, r0
   1cc40:	b9b8      	cbnz	r0, 1cc72 <mfg_read_mmr+0x52>
        return SYS_EIO;
    }

    if (ftr.magic != MFG_META_MAGIC) {
   1cc42:	9a02      	ldr	r2, [sp, #8]
   1cc44:	4b11      	ldr	r3, [pc, #68]	; (1cc8c <mfg_read_mmr+0x6c>)
   1cc46:	429a      	cmp	r2, r3
   1cc48:	d116      	bne.n	1cc78 <mfg_read_mmr+0x58>
        return SYS_ENODEV;
    }

    if (ftr.version != MFG_META_VERSION) {
   1cc4a:	f89d 3006 	ldrb.w	r3, [sp, #6]
   1cc4e:	2b02      	cmp	r3, #2
   1cc50:	d115      	bne.n	1cc7e <mfg_read_mmr+0x5e>
        return SYS_ENOTSUP;
    }

    if (ftr.size > fap->fa_size) {
   1cc52:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   1cc56:	9b03      	ldr	r3, [sp, #12]
   1cc58:	689b      	ldr	r3, [r3, #8]
   1cc5a:	429a      	cmp	r2, r3
   1cc5c:	d812      	bhi.n	1cc84 <mfg_read_mmr+0x64>
        return SYS_ENODEV;
    }

    *out_mmr = (struct mfg_mmr) {
        .area_id = area_id,
        .offset = fap->fa_size - ftr.size,
   1cc5e:	1a9b      	subs	r3, r3, r2
    *out_mmr = (struct mfg_mmr) {
   1cc60:	7025      	strb	r5, [r4, #0]
   1cc62:	6063      	str	r3, [r4, #4]
   1cc64:	60a2      	str	r2, [r4, #8]
        .size = ftr.size,
    };

    return 0;
}
   1cc66:	4608      	mov	r0, r1
   1cc68:	b005      	add	sp, #20
   1cc6a:	bd30      	pop	{r4, r5, pc}
        return SYS_EIO;
   1cc6c:	f06f 0104 	mvn.w	r1, #4
   1cc70:	e7f9      	b.n	1cc66 <mfg_read_mmr+0x46>
        return SYS_EIO;
   1cc72:	f06f 0104 	mvn.w	r1, #4
   1cc76:	e7f6      	b.n	1cc66 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cc78:	f06f 0108 	mvn.w	r1, #8
   1cc7c:	e7f3      	b.n	1cc66 <mfg_read_mmr+0x46>
        return SYS_ENOTSUP;
   1cc7e:	f06f 010b 	mvn.w	r1, #11
   1cc82:	e7f0      	b.n	1cc66 <mfg_read_mmr+0x46>
        return SYS_ENODEV;
   1cc84:	f06f 0108 	mvn.w	r1, #8
   1cc88:	e7ed      	b.n	1cc66 <mfg_read_mmr+0x46>
   1cc8a:	bf00      	nop
   1cc8c:	3bb2a269 	.word	0x3bb2a269

0001cc90 <mfg_read_next_mmr>:
 * Reads an MMR from the end of the specified flash area.  On success, the
 * global MMR list is populated with the result for subsequent reading.
 */
static int
mfg_read_next_mmr(uint8_t area_id)
{
   1cc90:	b508      	push	{r3, lr}
    int rc;
    int i;

    /* Detect if this MMR has already been read. */
    for (i = 0; i < mfg_num_mmrs; i++) {
   1cc92:	2300      	movs	r3, #0
   1cc94:	4a11      	ldr	r2, [pc, #68]	; (1ccdc <mfg_read_next_mmr+0x4c>)
   1cc96:	6812      	ldr	r2, [r2, #0]
   1cc98:	429a      	cmp	r2, r3
   1cc9a:	dd08      	ble.n	1ccae <mfg_read_next_mmr+0x1e>
        if (mfg_mmrs[i].area_id == area_id) {
   1cc9c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   1cca0:	008a      	lsls	r2, r1, #2
   1cca2:	490f      	ldr	r1, [pc, #60]	; (1cce0 <mfg_read_next_mmr+0x50>)
   1cca4:	5c8a      	ldrb	r2, [r1, r2]
   1cca6:	4282      	cmp	r2, r0
   1cca8:	d011      	beq.n	1ccce <mfg_read_next_mmr+0x3e>
    for (i = 0; i < mfg_num_mmrs; i++) {
   1ccaa:	3301      	adds	r3, #1
   1ccac:	e7f2      	b.n	1cc94 <mfg_read_next_mmr+0x4>
            return SYS_EALREADY;
        }
    }

    if (mfg_num_mmrs >= MYNEWT_VAL(MFG_MAX_MMRS)) {
   1ccae:	2a01      	cmp	r2, #1
   1ccb0:	dc11      	bgt.n	1ccd6 <mfg_read_next_mmr+0x46>
        return SYS_ENOMEM;
    }

    rc = mfg_read_mmr(area_id, &mfg_mmrs[mfg_num_mmrs]);
   1ccb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1ccb6:	0093      	lsls	r3, r2, #2
   1ccb8:	4909      	ldr	r1, [pc, #36]	; (1cce0 <mfg_read_next_mmr+0x50>)
   1ccba:	4419      	add	r1, r3
   1ccbc:	f7ff ffb0 	bl	1cc20 <mfg_read_mmr>
    if (rc != 0) {
   1ccc0:	4603      	mov	r3, r0
   1ccc2:	b930      	cbnz	r0, 1ccd2 <mfg_read_next_mmr+0x42>
        return rc;
    }

    mfg_num_mmrs++;
   1ccc4:	4905      	ldr	r1, [pc, #20]	; (1ccdc <mfg_read_next_mmr+0x4c>)
   1ccc6:	680a      	ldr	r2, [r1, #0]
   1ccc8:	3201      	adds	r2, #1
   1ccca:	600a      	str	r2, [r1, #0]
    return 0;
   1cccc:	e001      	b.n	1ccd2 <mfg_read_next_mmr+0x42>
            return SYS_EALREADY;
   1ccce:	f06f 030a 	mvn.w	r3, #10
}
   1ccd2:	4618      	mov	r0, r3
   1ccd4:	bd08      	pop	{r3, pc}
        return SYS_ENOMEM;
   1ccd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ccda:	e7fa      	b.n	1ccd2 <mfg_read_next_mmr+0x42>
   1ccdc:	2000d5b0 	.word	0x2000d5b0
   1cce0:	2000d598 	.word	0x2000d598

0001cce4 <mfg_open_flash_area>:
{
   1cce4:	b508      	push	{r3, lr}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cce6:	7883      	ldrb	r3, [r0, #2]
   1cce8:	4a0b      	ldr	r2, [pc, #44]	; (1cd18 <mfg_open_flash_area+0x34>)
   1ccea:	6812      	ldr	r2, [r2, #0]
   1ccec:	4293      	cmp	r3, r2
   1ccee:	da0a      	bge.n	1cd06 <mfg_open_flash_area+0x22>
    rc = flash_area_open(mmr->area_id, fap);
   1ccf0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1ccf4:	009a      	lsls	r2, r3, #2
   1ccf6:	4b09      	ldr	r3, [pc, #36]	; (1cd1c <mfg_open_flash_area+0x38>)
   1ccf8:	5c98      	ldrb	r0, [r3, r2]
   1ccfa:	f7ff fed9 	bl	1cab0 <flash_area_open>
    if (rc != 0) {
   1ccfe:	4603      	mov	r3, r0
   1cd00:	b938      	cbnz	r0, 1cd12 <mfg_open_flash_area+0x2e>
}
   1cd02:	4618      	mov	r0, r3
   1cd04:	bd08      	pop	{r3, pc}
    assert(reader->mmr_idx < mfg_num_mmrs);
   1cd06:	2300      	movs	r3, #0
   1cd08:	461a      	mov	r2, r3
   1cd0a:	4619      	mov	r1, r3
   1cd0c:	4618      	mov	r0, r3
   1cd0e:	f7fc fe11 	bl	19934 <__assert_func>
        return SYS_EIO;
   1cd12:	f06f 0304 	mvn.w	r3, #4
   1cd16:	e7f4      	b.n	1cd02 <mfg_open_flash_area+0x1e>
   1cd18:	2000d5b0 	.word	0x2000d5b0
   1cd1c:	2000d598 	.word	0x2000d598

0001cd20 <mfg_read_tlv_body>:
{
   1cd20:	b570      	push	{r4, r5, r6, lr}
   1cd22:	b082      	sub	sp, #8
   1cd24:	4606      	mov	r6, r0
   1cd26:	460c      	mov	r4, r1
   1cd28:	4615      	mov	r5, r2
    rc = mfg_open_flash_area(reader, &fap);
   1cd2a:	a901      	add	r1, sp, #4
   1cd2c:	f7ff ffda 	bl	1cce4 <mfg_open_flash_area>
    if (rc != 0) {
   1cd30:	4603      	mov	r3, r0
   1cd32:	b110      	cbz	r0, 1cd3a <mfg_read_tlv_body+0x1a>
}
   1cd34:	4618      	mov	r0, r3
   1cd36:	b002      	add	sp, #8
   1cd38:	bd70      	pop	{r4, r5, r6, pc}
    memset(dst, 0, max_size);
   1cd3a:	462a      	mov	r2, r5
   1cd3c:	2100      	movs	r1, #0
   1cd3e:	4620      	mov	r0, r4
   1cd40:	f7fe f9fb 	bl	1b13a <memset>
    read_sz = min(max_size, reader->cur_tlv.size);
   1cd44:	7873      	ldrb	r3, [r6, #1]
    rc = flash_area_read(fap, reader->offset + MFG_META_TLV_SZ, dst, read_sz);
   1cd46:	6871      	ldr	r1, [r6, #4]
   1cd48:	42ab      	cmp	r3, r5
   1cd4a:	bfa8      	it	ge
   1cd4c:	462b      	movge	r3, r5
   1cd4e:	4622      	mov	r2, r4
   1cd50:	3102      	adds	r1, #2
   1cd52:	9801      	ldr	r0, [sp, #4]
   1cd54:	f7ff fecc 	bl	1caf0 <flash_area_read>
    if (rc != 0) {
   1cd58:	4603      	mov	r3, r0
   1cd5a:	2800      	cmp	r0, #0
   1cd5c:	d0ea      	beq.n	1cd34 <mfg_read_tlv_body+0x14>
        return SYS_EIO;
   1cd5e:	f06f 0304 	mvn.w	r3, #4
   1cd62:	e7e7      	b.n	1cd34 <mfg_read_tlv_body+0x14>

0001cd64 <mfg_seek_next>:
{
   1cd64:	b510      	push	{r4, lr}
   1cd66:	4604      	mov	r4, r0
        rc = mfg_seek_next_aux(reader);
   1cd68:	4620      	mov	r0, r4
   1cd6a:	f7ff ff0f 	bl	1cb8c <mfg_seek_next_aux>
    } while (rc == SYS_EAGAIN);
   1cd6e:	f110 0f06 	cmn.w	r0, #6
   1cd72:	d0f9      	beq.n	1cd68 <mfg_seek_next+0x4>
}
   1cd74:	bd10      	pop	{r4, pc}

0001cd76 <mfg_seek_next_with_type>:
{
   1cd76:	b538      	push	{r3, r4, r5, lr}
   1cd78:	4604      	mov	r4, r0
   1cd7a:	460d      	mov	r5, r1
        rc = mfg_seek_next(reader);
   1cd7c:	4620      	mov	r0, r4
   1cd7e:	f7ff fff1 	bl	1cd64 <mfg_seek_next>
        if (rc != 0) {
   1cd82:	4602      	mov	r2, r0
   1cd84:	b910      	cbnz	r0, 1cd8c <mfg_seek_next_with_type+0x16>
        if (reader->cur_tlv.type == type) {
   1cd86:	7823      	ldrb	r3, [r4, #0]
   1cd88:	42ab      	cmp	r3, r5
   1cd8a:	d1f7      	bne.n	1cd7c <mfg_seek_next_with_type+0x6>
}
   1cd8c:	4610      	mov	r0, r2
   1cd8e:	bd38      	pop	{r3, r4, r5, pc}

0001cd90 <mfg_read_tlv_flash_area>:
{
   1cd90:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mfa, sizeof *out_mfa);
   1cd92:	220a      	movs	r2, #10
   1cd94:	f7ff ffc4 	bl	1cd20 <mfg_read_tlv_body>
}
   1cd98:	bd08      	pop	{r3, pc}

0001cd9a <mfg_read_tlv_mmr_ref>:
{
   1cd9a:	b508      	push	{r3, lr}
    return mfg_read_tlv_body(reader, out_mr, sizeof *out_mr);
   1cd9c:	2201      	movs	r2, #1
   1cd9e:	f7ff ffbf 	bl	1cd20 <mfg_read_tlv_body>
}
   1cda2:	bd08      	pop	{r3, pc}

0001cda4 <mfg_init>:
 * called before any TLVs can be read.  No-op if this function has already
 * executed successfully.
 */
void
mfg_init(void)
{
   1cda4:	b508      	push	{r3, lr}
    int rc;

    if (mfg_initialized) {
   1cda6:	4b0b      	ldr	r3, [pc, #44]	; (1cdd4 <mfg_init+0x30>)
   1cda8:	781b      	ldrb	r3, [r3, #0]
   1cdaa:	b94b      	cbnz	r3, 1cdc0 <mfg_init+0x1c>
        return;
    }
    mfg_initialized = true;
   1cdac:	4b09      	ldr	r3, [pc, #36]	; (1cdd4 <mfg_init+0x30>)
   1cdae:	2201      	movs	r2, #1
   1cdb0:	701a      	strb	r2, [r3, #0]

    /* Ensure this function only gets called by sysinit. */
    SYSINIT_ASSERT_ACTIVE();
   1cdb2:	4b09      	ldr	r3, [pc, #36]	; (1cdd8 <mfg_init+0x34>)
   1cdb4:	781b      	ldrb	r3, [r3, #0]
   1cdb6:	b123      	cbz	r3, 1cdc2 <mfg_init+0x1e>

    /* Read the first MMR from the boot loader area. */
    rc = mfg_read_next_mmr(FLASH_AREA_BOOTLOADER);
   1cdb8:	2000      	movs	r0, #0
   1cdba:	f7ff ff69 	bl	1cc90 <mfg_read_next_mmr>
    if (rc != 0) {
   1cdbe:	b128      	cbz	r0, 1cdcc <mfg_init+0x28>

    return;

err:
    MFG_LOG(ERROR, "failed to read MMRs: rc=%d", rc);
}
   1cdc0:	bd08      	pop	{r3, pc}
    SYSINIT_ASSERT_ACTIVE();
   1cdc2:	461a      	mov	r2, r3
   1cdc4:	4619      	mov	r1, r3
   1cdc6:	4618      	mov	r0, r3
   1cdc8:	f7fc fdb4 	bl	19934 <__assert_func>
    rc = mfg_read_mmr_refs();
   1cdcc:	f000 f80e 	bl	1cdec <mfg_read_mmr_refs>
err:
   1cdd0:	e7f6      	b.n	1cdc0 <mfg_init+0x1c>
   1cdd2:	bf00      	nop
   1cdd4:	2000d594 	.word	0x2000d594
   1cdd8:	2000d5bc 	.word	0x2000d5bc

0001cddc <mfg_open>:
{
   1cddc:	b510      	push	{r4, lr}
   1cdde:	4604      	mov	r4, r0
    mfg_init();
   1cde0:	f7ff ffe0 	bl	1cda4 <mfg_init>
    *out_reader = (struct mfg_reader) { 0 };
   1cde4:	2300      	movs	r3, #0
   1cde6:	6023      	str	r3, [r4, #0]
   1cde8:	6063      	str	r3, [r4, #4]
}
   1cdea:	bd10      	pop	{r4, pc}

0001cdec <mfg_read_mmr_refs>:
{
   1cdec:	b500      	push	{lr}
   1cdee:	b085      	sub	sp, #20
    mfg_open(&reader);
   1cdf0:	a801      	add	r0, sp, #4
   1cdf2:	f7ff fff3 	bl	1cddc <mfg_open>
        rc = mfg_seek_next_with_type(&reader, MFG_META_TLV_TYPE_MMR_REF);
   1cdf6:	2104      	movs	r1, #4
   1cdf8:	eb0d 0001 	add.w	r0, sp, r1
   1cdfc:	f7ff ffbb 	bl	1cd76 <mfg_seek_next_with_type>
   1ce00:	4603      	mov	r3, r0
        switch (rc) {
   1ce02:	f110 0f0f 	cmn.w	r0, #15
   1ce06:	d004      	beq.n	1ce12 <mfg_read_mmr_refs+0x26>
   1ce08:	b128      	cbz	r0, 1ce16 <mfg_read_mmr_refs+0x2a>
}
   1ce0a:	4618      	mov	r0, r3
   1ce0c:	b005      	add	sp, #20
   1ce0e:	f85d fb04 	ldr.w	pc, [sp], #4
            return 0;
   1ce12:	2300      	movs	r3, #0
   1ce14:	e7f9      	b.n	1ce0a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_tlv_mmr_ref(&reader, &mmr_ref);
   1ce16:	a903      	add	r1, sp, #12
   1ce18:	a801      	add	r0, sp, #4
   1ce1a:	f7ff ffbe 	bl	1cd9a <mfg_read_tlv_mmr_ref>
        if (rc != 0) {
   1ce1e:	4603      	mov	r3, r0
   1ce20:	2800      	cmp	r0, #0
   1ce22:	d1f2      	bne.n	1ce0a <mfg_read_mmr_refs+0x1e>
        rc = mfg_read_next_mmr(mmr_ref.area_id);
   1ce24:	f89d 000c 	ldrb.w	r0, [sp, #12]
   1ce28:	f7ff ff32 	bl	1cc90 <mfg_read_next_mmr>
        if (rc != 0 && rc != SYS_EALREADY) {
   1ce2c:	4603      	mov	r3, r0
   1ce2e:	2800      	cmp	r0, #0
   1ce30:	d0e1      	beq.n	1cdf6 <mfg_read_mmr_refs+0xa>
   1ce32:	f110 0f0b 	cmn.w	r0, #11
   1ce36:	d0de      	beq.n	1cdf6 <mfg_read_mmr_refs+0xa>
   1ce38:	e7e7      	b.n	1ce0a <mfg_read_mmr_refs+0x1e>
	...

0001ce3c <__wrap_coap_receive>:
}

///////////////////////////////////////////////////////////////////////////////
//  Other Functions

int __wrap_coap_receive(/* struct os_mbuf **mp */) {
   1ce3c:	b508      	push	{r3, lr}
    //  We override the default coap_receive() with an empty function so that we will 
    //  NOT link in any modules for receiving and parsing CoAP requests, to save ROM space.
    //  We only need to transmit CoAP requests.  The overriding is done via the Linker Flag
    //  "-Wl,-wrap,coap_receive" in apps/my_sensor_app/pkg.yml
    console_printf("coap_receive NOT IMPLEMENTED\n");
   1ce3e:	4803      	ldr	r0, [pc, #12]	; (1ce4c <__wrap_coap_receive+0x10>)
   1ce40:	f7fb feb0 	bl	18ba4 <console_printf>
    return -1;
}
   1ce44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1ce48:	bd08      	pop	{r3, pc}
   1ce4a:	bf00      	nop
   1ce4c:	00021344 	.word	0x00021344

0001ce50 <_fini>:
//  From https://arobenko.gitbooks.io/bare_metal_cpp/content/compiler_output/static.html.
void* __dso_handle = NULL;
int __aeabi_atexit(void *object, void (*destructor)(void *), void *dso_handle) { return 0; }

#ifndef ARCH_rv32imac  //  If not RISC-V...
void _fini(void) { }   //  Define the function to be called when main() exits
   1ce50:	4770      	bx	lr

0001ce52 <hal_flash_check_addr>:
}

static int
hal_flash_check_addr(const struct hal_flash *hf, uint32_t addr)
{
    if (addr < hf->hf_base_addr || addr > hf->hf_base_addr + hf->hf_size) {
   1ce52:	6843      	ldr	r3, [r0, #4]
   1ce54:	428b      	cmp	r3, r1
   1ce56:	d808      	bhi.n	1ce6a <hal_flash_check_addr+0x18>
   1ce58:	6882      	ldr	r2, [r0, #8]
   1ce5a:	4413      	add	r3, r2
   1ce5c:	428b      	cmp	r3, r1
   1ce5e:	d301      	bcc.n	1ce64 <hal_flash_check_addr+0x12>
        return SYS_EINVAL;
    }
    return 0;
   1ce60:	2000      	movs	r0, #0
}
   1ce62:	4770      	bx	lr
        return SYS_EINVAL;
   1ce64:	f06f 0001 	mvn.w	r0, #1
   1ce68:	4770      	bx	lr
   1ce6a:	f06f 0001 	mvn.w	r0, #1
   1ce6e:	4770      	bx	lr

0001ce70 <hal_flash_init>:
{
   1ce70:	b538      	push	{r3, r4, r5, lr}
    int rc = 0;
   1ce72:	2500      	movs	r5, #0
    for (i = 0; ; i++) {
   1ce74:	462c      	mov	r4, r5
   1ce76:	e001      	b.n	1ce7c <hal_flash_init+0xc>
   1ce78:	3401      	adds	r4, #1
   1ce7a:	b2e4      	uxtb	r4, r4
        hf = hal_bsp_flash_dev(i);
   1ce7c:	4620      	mov	r0, r4
   1ce7e:	f7fe fce3 	bl	1b848 <hal_bsp_flash_dev>
        if (!hf) {
   1ce82:	b138      	cbz	r0, 1ce94 <hal_flash_init+0x24>
        if (hf->hf_itf->hff_init(hf)) {
   1ce84:	6802      	ldr	r2, [r0, #0]
   1ce86:	6952      	ldr	r2, [r2, #20]
   1ce88:	4790      	blx	r2
   1ce8a:	2800      	cmp	r0, #0
   1ce8c:	d0f4      	beq.n	1ce78 <hal_flash_init+0x8>
            rc = SYS_EIO;
   1ce8e:	f06f 0504 	mvn.w	r5, #4
   1ce92:	e7f1      	b.n	1ce78 <hal_flash_init+0x8>
}
   1ce94:	4628      	mov	r0, r5
   1ce96:	bd38      	pop	{r3, r4, r5, pc}

0001ce98 <hal_flash_read>:

int
hal_flash_read(uint8_t id, uint32_t address, void *dst, uint32_t num_bytes)
{
   1ce98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ce9c:	460d      	mov	r5, r1
   1ce9e:	4690      	mov	r8, r2
   1cea0:	461e      	mov	r6, r3
    const struct hal_flash *hf;
    int rc;

    hf = hal_bsp_flash_dev(id);
   1cea2:	f7fe fcd1 	bl	1b848 <hal_bsp_flash_dev>
    if (!hf) {
   1cea6:	b1c0      	cbz	r0, 1ceda <hal_flash_read+0x42>
   1cea8:	4604      	mov	r4, r0
        return SYS_EINVAL;
    }
    if (hal_flash_check_addr(hf, address) ||
   1ceaa:	4629      	mov	r1, r5
   1ceac:	f7ff ffd1 	bl	1ce52 <hal_flash_check_addr>
   1ceb0:	b9b0      	cbnz	r0, 1cee0 <hal_flash_read+0x48>
      hal_flash_check_addr(hf, address + num_bytes)) {
   1ceb2:	19a9      	adds	r1, r5, r6
   1ceb4:	4620      	mov	r0, r4
   1ceb6:	f7ff ffcc 	bl	1ce52 <hal_flash_check_addr>
    if (hal_flash_check_addr(hf, address) ||
   1ceba:	b9a0      	cbnz	r0, 1cee6 <hal_flash_read+0x4e>
        return SYS_EINVAL;
    }

    rc = hf->hf_itf->hff_read(hf, address, dst, num_bytes);
   1cebc:	6823      	ldr	r3, [r4, #0]
   1cebe:	681f      	ldr	r7, [r3, #0]
   1cec0:	4633      	mov	r3, r6
   1cec2:	4642      	mov	r2, r8
   1cec4:	4629      	mov	r1, r5
   1cec6:	4620      	mov	r0, r4
   1cec8:	47b8      	blx	r7
    if (rc != 0) {
   1ceca:	4603      	mov	r3, r0
   1cecc:	b910      	cbnz	r0, 1ced4 <hal_flash_read+0x3c>
        return SYS_EIO;
    }

    return 0;
}
   1cece:	4618      	mov	r0, r3
   1ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return SYS_EIO;
   1ced4:	f06f 0304 	mvn.w	r3, #4
   1ced8:	e7f9      	b.n	1cece <hal_flash_read+0x36>
        return SYS_EINVAL;
   1ceda:	f06f 0301 	mvn.w	r3, #1
   1cede:	e7f6      	b.n	1cece <hal_flash_read+0x36>
        return SYS_EINVAL;
   1cee0:	f06f 0301 	mvn.w	r3, #1
   1cee4:	e7f3      	b.n	1cece <hal_flash_read+0x36>
   1cee6:	f06f 0301 	mvn.w	r3, #1
   1ceea:	e7f0      	b.n	1cece <hal_flash_read+0x36>

0001ceec <hal_bsp_hw_id_len>:

int
hal_bsp_hw_id_len(void)
{
    return sizeof(NRF_FICR->DEVICEID) + sizeof(NRF_FICR->DEVICEADDR);
}
   1ceec:	2010      	movs	r0, #16
   1ceee:	4770      	bx	lr

0001cef0 <hal_bsp_hw_id>:
 * These values are generated at random.
 * DEVICEID[0-1] and DEVICEADDR[0-1].
 */
int
hal_bsp_hw_id(uint8_t *id, int max_len)
{
   1cef0:	b570      	push	{r4, r5, r6, lr}
   1cef2:	4606      	mov	r6, r0
   1cef4:	460c      	mov	r4, r1
    int len, cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEID), max_len);
   1cef6:	460d      	mov	r5, r1
   1cef8:	2908      	cmp	r1, #8
   1cefa:	bf28      	it	cs
   1cefc:	2508      	movcs	r5, #8
    memcpy(id, (void *)NRF_FICR->DEVICEID, cnt);
   1cefe:	462a      	mov	r2, r5
   1cf00:	4906      	ldr	r1, [pc, #24]	; (1cf1c <hal_bsp_hw_id+0x2c>)
   1cf02:	f7fe f90d 	bl	1b120 <memcpy>
    len = cnt;

    cnt = min(sizeof(NRF_FICR->DEVICEADDR), max_len - len);
   1cf06:	1b64      	subs	r4, r4, r5
   1cf08:	2c08      	cmp	r4, #8
   1cf0a:	bf28      	it	cs
   1cf0c:	2408      	movcs	r4, #8
    memcpy(id + len, (void *)NRF_FICR->DEVICEADDR, cnt);
   1cf0e:	4622      	mov	r2, r4
   1cf10:	4903      	ldr	r1, [pc, #12]	; (1cf20 <hal_bsp_hw_id+0x30>)
   1cf12:	1970      	adds	r0, r6, r5
   1cf14:	f7fe f904 	bl	1b120 <memcpy>

    return len + cnt;
}
   1cf18:	1928      	adds	r0, r5, r4
   1cf1a:	bd70      	pop	{r4, r5, r6, pc}
   1cf1c:	10000060 	.word	0x10000060
   1cf20:	100000a4 	.word	0x100000a4

0001cf24 <sprintf>:
#include <stdio.h>
#include <unistd.h>
#include <stdint.h>

int sprintf(char *buffer, const char *format, ...)
{
   1cf24:	b40e      	push	{r1, r2, r3}
   1cf26:	b500      	push	{lr}
   1cf28:	b082      	sub	sp, #8
   1cf2a:	ab03      	add	r3, sp, #12
   1cf2c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list ap;
	int rv;

	va_start(ap, format);
   1cf30:	9301      	str	r3, [sp, #4]
	rv = vsnprintf(buffer, SIZE_MAX/2, format, ap);
   1cf32:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
   1cf36:	f7fe fbef 	bl	1b718 <vsnprintf>
	va_end(ap);

	return rv;
}
   1cf3a:	b002      	add	sp, #8
   1cf3c:	f85d eb04 	ldr.w	lr, [sp], #4
   1cf40:	b003      	add	sp, #12
   1cf42:	4770      	bx	lr

0001cf44 <__aeabi_uldivmod>:
   1cf44:	b953      	cbnz	r3, 1cf5c <__aeabi_uldivmod+0x18>
   1cf46:	b94a      	cbnz	r2, 1cf5c <__aeabi_uldivmod+0x18>
   1cf48:	2900      	cmp	r1, #0
   1cf4a:	bf08      	it	eq
   1cf4c:	2800      	cmpeq	r0, #0
   1cf4e:	bf1c      	itt	ne
   1cf50:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   1cf54:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1cf58:	f000 b972 	b.w	1d240 <__aeabi_idiv0>
   1cf5c:	f1ad 0c08 	sub.w	ip, sp, #8
   1cf60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1cf64:	f000 f806 	bl	1cf74 <__udivmoddi4>
   1cf68:	f8dd e004 	ldr.w	lr, [sp, #4]
   1cf6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1cf70:	b004      	add	sp, #16
   1cf72:	4770      	bx	lr

0001cf74 <__udivmoddi4>:
   1cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1cf78:	9e08      	ldr	r6, [sp, #32]
   1cf7a:	4604      	mov	r4, r0
   1cf7c:	4688      	mov	r8, r1
   1cf7e:	2b00      	cmp	r3, #0
   1cf80:	d14b      	bne.n	1d01a <__udivmoddi4+0xa6>
   1cf82:	428a      	cmp	r2, r1
   1cf84:	4615      	mov	r5, r2
   1cf86:	d967      	bls.n	1d058 <__udivmoddi4+0xe4>
   1cf88:	fab2 f282 	clz	r2, r2
   1cf8c:	b14a      	cbz	r2, 1cfa2 <__udivmoddi4+0x2e>
   1cf8e:	f1c2 0720 	rsb	r7, r2, #32
   1cf92:	fa01 f302 	lsl.w	r3, r1, r2
   1cf96:	fa20 f707 	lsr.w	r7, r0, r7
   1cf9a:	4095      	lsls	r5, r2
   1cf9c:	ea47 0803 	orr.w	r8, r7, r3
   1cfa0:	4094      	lsls	r4, r2
   1cfa2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1cfa6:	0c23      	lsrs	r3, r4, #16
   1cfa8:	fbb8 f7fe 	udiv	r7, r8, lr
   1cfac:	fa1f fc85 	uxth.w	ip, r5
   1cfb0:	fb0e 8817 	mls	r8, lr, r7, r8
   1cfb4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   1cfb8:	fb07 f10c 	mul.w	r1, r7, ip
   1cfbc:	4299      	cmp	r1, r3
   1cfbe:	d909      	bls.n	1cfd4 <__udivmoddi4+0x60>
   1cfc0:	18eb      	adds	r3, r5, r3
   1cfc2:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
   1cfc6:	f080 811b 	bcs.w	1d200 <__udivmoddi4+0x28c>
   1cfca:	4299      	cmp	r1, r3
   1cfcc:	f240 8118 	bls.w	1d200 <__udivmoddi4+0x28c>
   1cfd0:	3f02      	subs	r7, #2
   1cfd2:	442b      	add	r3, r5
   1cfd4:	1a5b      	subs	r3, r3, r1
   1cfd6:	b2a4      	uxth	r4, r4
   1cfd8:	fbb3 f0fe 	udiv	r0, r3, lr
   1cfdc:	fb0e 3310 	mls	r3, lr, r0, r3
   1cfe0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   1cfe4:	fb00 fc0c 	mul.w	ip, r0, ip
   1cfe8:	45a4      	cmp	ip, r4
   1cfea:	d909      	bls.n	1d000 <__udivmoddi4+0x8c>
   1cfec:	192c      	adds	r4, r5, r4
   1cfee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1cff2:	f080 8107 	bcs.w	1d204 <__udivmoddi4+0x290>
   1cff6:	45a4      	cmp	ip, r4
   1cff8:	f240 8104 	bls.w	1d204 <__udivmoddi4+0x290>
   1cffc:	3802      	subs	r0, #2
   1cffe:	442c      	add	r4, r5
   1d000:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   1d004:	eba4 040c 	sub.w	r4, r4, ip
   1d008:	2700      	movs	r7, #0
   1d00a:	b11e      	cbz	r6, 1d014 <__udivmoddi4+0xa0>
   1d00c:	40d4      	lsrs	r4, r2
   1d00e:	2300      	movs	r3, #0
   1d010:	e9c6 4300 	strd	r4, r3, [r6]
   1d014:	4639      	mov	r1, r7
   1d016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d01a:	428b      	cmp	r3, r1
   1d01c:	d909      	bls.n	1d032 <__udivmoddi4+0xbe>
   1d01e:	2e00      	cmp	r6, #0
   1d020:	f000 80eb 	beq.w	1d1fa <__udivmoddi4+0x286>
   1d024:	2700      	movs	r7, #0
   1d026:	e9c6 0100 	strd	r0, r1, [r6]
   1d02a:	4638      	mov	r0, r7
   1d02c:	4639      	mov	r1, r7
   1d02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d032:	fab3 f783 	clz	r7, r3
   1d036:	2f00      	cmp	r7, #0
   1d038:	d147      	bne.n	1d0ca <__udivmoddi4+0x156>
   1d03a:	428b      	cmp	r3, r1
   1d03c:	d302      	bcc.n	1d044 <__udivmoddi4+0xd0>
   1d03e:	4282      	cmp	r2, r0
   1d040:	f200 80fa 	bhi.w	1d238 <__udivmoddi4+0x2c4>
   1d044:	1a84      	subs	r4, r0, r2
   1d046:	eb61 0303 	sbc.w	r3, r1, r3
   1d04a:	2001      	movs	r0, #1
   1d04c:	4698      	mov	r8, r3
   1d04e:	2e00      	cmp	r6, #0
   1d050:	d0e0      	beq.n	1d014 <__udivmoddi4+0xa0>
   1d052:	e9c6 4800 	strd	r4, r8, [r6]
   1d056:	e7dd      	b.n	1d014 <__udivmoddi4+0xa0>
   1d058:	b902      	cbnz	r2, 1d05c <__udivmoddi4+0xe8>
   1d05a:	deff      	udf	#255	; 0xff
   1d05c:	fab2 f282 	clz	r2, r2
   1d060:	2a00      	cmp	r2, #0
   1d062:	f040 808f 	bne.w	1d184 <__udivmoddi4+0x210>
   1d066:	1b49      	subs	r1, r1, r5
   1d068:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d06c:	fa1f f885 	uxth.w	r8, r5
   1d070:	2701      	movs	r7, #1
   1d072:	fbb1 fcfe 	udiv	ip, r1, lr
   1d076:	0c23      	lsrs	r3, r4, #16
   1d078:	fb0e 111c 	mls	r1, lr, ip, r1
   1d07c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   1d080:	fb08 f10c 	mul.w	r1, r8, ip
   1d084:	4299      	cmp	r1, r3
   1d086:	d907      	bls.n	1d098 <__udivmoddi4+0x124>
   1d088:	18eb      	adds	r3, r5, r3
   1d08a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   1d08e:	d202      	bcs.n	1d096 <__udivmoddi4+0x122>
   1d090:	4299      	cmp	r1, r3
   1d092:	f200 80cd 	bhi.w	1d230 <__udivmoddi4+0x2bc>
   1d096:	4684      	mov	ip, r0
   1d098:	1a59      	subs	r1, r3, r1
   1d09a:	b2a3      	uxth	r3, r4
   1d09c:	fbb1 f0fe 	udiv	r0, r1, lr
   1d0a0:	fb0e 1410 	mls	r4, lr, r0, r1
   1d0a4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
   1d0a8:	fb08 f800 	mul.w	r8, r8, r0
   1d0ac:	45a0      	cmp	r8, r4
   1d0ae:	d907      	bls.n	1d0c0 <__udivmoddi4+0x14c>
   1d0b0:	192c      	adds	r4, r5, r4
   1d0b2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d0b6:	d202      	bcs.n	1d0be <__udivmoddi4+0x14a>
   1d0b8:	45a0      	cmp	r8, r4
   1d0ba:	f200 80b6 	bhi.w	1d22a <__udivmoddi4+0x2b6>
   1d0be:	4618      	mov	r0, r3
   1d0c0:	eba4 0408 	sub.w	r4, r4, r8
   1d0c4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   1d0c8:	e79f      	b.n	1d00a <__udivmoddi4+0x96>
   1d0ca:	f1c7 0c20 	rsb	ip, r7, #32
   1d0ce:	40bb      	lsls	r3, r7
   1d0d0:	fa22 fe0c 	lsr.w	lr, r2, ip
   1d0d4:	ea4e 0e03 	orr.w	lr, lr, r3
   1d0d8:	fa01 f407 	lsl.w	r4, r1, r7
   1d0dc:	fa20 f50c 	lsr.w	r5, r0, ip
   1d0e0:	fa21 f30c 	lsr.w	r3, r1, ip
   1d0e4:	ea4f 481e 	mov.w	r8, lr, lsr #16
   1d0e8:	4325      	orrs	r5, r4
   1d0ea:	fbb3 f9f8 	udiv	r9, r3, r8
   1d0ee:	0c2c      	lsrs	r4, r5, #16
   1d0f0:	fb08 3319 	mls	r3, r8, r9, r3
   1d0f4:	fa1f fa8e 	uxth.w	sl, lr
   1d0f8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
   1d0fc:	fb09 f40a 	mul.w	r4, r9, sl
   1d100:	429c      	cmp	r4, r3
   1d102:	fa02 f207 	lsl.w	r2, r2, r7
   1d106:	fa00 f107 	lsl.w	r1, r0, r7
   1d10a:	d90b      	bls.n	1d124 <__udivmoddi4+0x1b0>
   1d10c:	eb1e 0303 	adds.w	r3, lr, r3
   1d110:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   1d114:	f080 8087 	bcs.w	1d226 <__udivmoddi4+0x2b2>
   1d118:	429c      	cmp	r4, r3
   1d11a:	f240 8084 	bls.w	1d226 <__udivmoddi4+0x2b2>
   1d11e:	f1a9 0902 	sub.w	r9, r9, #2
   1d122:	4473      	add	r3, lr
   1d124:	1b1b      	subs	r3, r3, r4
   1d126:	b2ad      	uxth	r5, r5
   1d128:	fbb3 f0f8 	udiv	r0, r3, r8
   1d12c:	fb08 3310 	mls	r3, r8, r0, r3
   1d130:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
   1d134:	fb00 fa0a 	mul.w	sl, r0, sl
   1d138:	45a2      	cmp	sl, r4
   1d13a:	d908      	bls.n	1d14e <__udivmoddi4+0x1da>
   1d13c:	eb1e 0404 	adds.w	r4, lr, r4
   1d140:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   1d144:	d26b      	bcs.n	1d21e <__udivmoddi4+0x2aa>
   1d146:	45a2      	cmp	sl, r4
   1d148:	d969      	bls.n	1d21e <__udivmoddi4+0x2aa>
   1d14a:	3802      	subs	r0, #2
   1d14c:	4474      	add	r4, lr
   1d14e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   1d152:	fba0 8902 	umull	r8, r9, r0, r2
   1d156:	eba4 040a 	sub.w	r4, r4, sl
   1d15a:	454c      	cmp	r4, r9
   1d15c:	46c2      	mov	sl, r8
   1d15e:	464b      	mov	r3, r9
   1d160:	d354      	bcc.n	1d20c <__udivmoddi4+0x298>
   1d162:	d051      	beq.n	1d208 <__udivmoddi4+0x294>
   1d164:	2e00      	cmp	r6, #0
   1d166:	d069      	beq.n	1d23c <__udivmoddi4+0x2c8>
   1d168:	ebb1 050a 	subs.w	r5, r1, sl
   1d16c:	eb64 0403 	sbc.w	r4, r4, r3
   1d170:	fa04 fc0c 	lsl.w	ip, r4, ip
   1d174:	40fd      	lsrs	r5, r7
   1d176:	40fc      	lsrs	r4, r7
   1d178:	ea4c 0505 	orr.w	r5, ip, r5
   1d17c:	e9c6 5400 	strd	r5, r4, [r6]
   1d180:	2700      	movs	r7, #0
   1d182:	e747      	b.n	1d014 <__udivmoddi4+0xa0>
   1d184:	f1c2 0320 	rsb	r3, r2, #32
   1d188:	fa20 f703 	lsr.w	r7, r0, r3
   1d18c:	4095      	lsls	r5, r2
   1d18e:	fa01 f002 	lsl.w	r0, r1, r2
   1d192:	fa21 f303 	lsr.w	r3, r1, r3
   1d196:	ea4f 4e15 	mov.w	lr, r5, lsr #16
   1d19a:	4338      	orrs	r0, r7
   1d19c:	0c01      	lsrs	r1, r0, #16
   1d19e:	fbb3 f7fe 	udiv	r7, r3, lr
   1d1a2:	fa1f f885 	uxth.w	r8, r5
   1d1a6:	fb0e 3317 	mls	r3, lr, r7, r3
   1d1aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d1ae:	fb07 f308 	mul.w	r3, r7, r8
   1d1b2:	428b      	cmp	r3, r1
   1d1b4:	fa04 f402 	lsl.w	r4, r4, r2
   1d1b8:	d907      	bls.n	1d1ca <__udivmoddi4+0x256>
   1d1ba:	1869      	adds	r1, r5, r1
   1d1bc:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
   1d1c0:	d22f      	bcs.n	1d222 <__udivmoddi4+0x2ae>
   1d1c2:	428b      	cmp	r3, r1
   1d1c4:	d92d      	bls.n	1d222 <__udivmoddi4+0x2ae>
   1d1c6:	3f02      	subs	r7, #2
   1d1c8:	4429      	add	r1, r5
   1d1ca:	1acb      	subs	r3, r1, r3
   1d1cc:	b281      	uxth	r1, r0
   1d1ce:	fbb3 f0fe 	udiv	r0, r3, lr
   1d1d2:	fb0e 3310 	mls	r3, lr, r0, r3
   1d1d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   1d1da:	fb00 f308 	mul.w	r3, r0, r8
   1d1de:	428b      	cmp	r3, r1
   1d1e0:	d907      	bls.n	1d1f2 <__udivmoddi4+0x27e>
   1d1e2:	1869      	adds	r1, r5, r1
   1d1e4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   1d1e8:	d217      	bcs.n	1d21a <__udivmoddi4+0x2a6>
   1d1ea:	428b      	cmp	r3, r1
   1d1ec:	d915      	bls.n	1d21a <__udivmoddi4+0x2a6>
   1d1ee:	3802      	subs	r0, #2
   1d1f0:	4429      	add	r1, r5
   1d1f2:	1ac9      	subs	r1, r1, r3
   1d1f4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
   1d1f8:	e73b      	b.n	1d072 <__udivmoddi4+0xfe>
   1d1fa:	4637      	mov	r7, r6
   1d1fc:	4630      	mov	r0, r6
   1d1fe:	e709      	b.n	1d014 <__udivmoddi4+0xa0>
   1d200:	4607      	mov	r7, r0
   1d202:	e6e7      	b.n	1cfd4 <__udivmoddi4+0x60>
   1d204:	4618      	mov	r0, r3
   1d206:	e6fb      	b.n	1d000 <__udivmoddi4+0x8c>
   1d208:	4541      	cmp	r1, r8
   1d20a:	d2ab      	bcs.n	1d164 <__udivmoddi4+0x1f0>
   1d20c:	ebb8 0a02 	subs.w	sl, r8, r2
   1d210:	eb69 020e 	sbc.w	r2, r9, lr
   1d214:	3801      	subs	r0, #1
   1d216:	4613      	mov	r3, r2
   1d218:	e7a4      	b.n	1d164 <__udivmoddi4+0x1f0>
   1d21a:	4660      	mov	r0, ip
   1d21c:	e7e9      	b.n	1d1f2 <__udivmoddi4+0x27e>
   1d21e:	4618      	mov	r0, r3
   1d220:	e795      	b.n	1d14e <__udivmoddi4+0x1da>
   1d222:	4667      	mov	r7, ip
   1d224:	e7d1      	b.n	1d1ca <__udivmoddi4+0x256>
   1d226:	4681      	mov	r9, r0
   1d228:	e77c      	b.n	1d124 <__udivmoddi4+0x1b0>
   1d22a:	3802      	subs	r0, #2
   1d22c:	442c      	add	r4, r5
   1d22e:	e747      	b.n	1d0c0 <__udivmoddi4+0x14c>
   1d230:	f1ac 0c02 	sub.w	ip, ip, #2
   1d234:	442b      	add	r3, r5
   1d236:	e72f      	b.n	1d098 <__udivmoddi4+0x124>
   1d238:	4638      	mov	r0, r7
   1d23a:	e708      	b.n	1d04e <__udivmoddi4+0xda>
   1d23c:	4637      	mov	r7, r6
   1d23e:	e6e9      	b.n	1d014 <__udivmoddi4+0xa0>

0001d240 <__aeabi_idiv0>:
   1d240:	4770      	bx	lr
   1d242:	bf00      	nop

0001d244 <__aeabi_memclr>:
   1d244:	2200      	movs	r2, #0
   1d246:	f000 b803 	b.w	1d250 <__aeabi_memset>
   1d24a:	bf00      	nop

0001d24c <__aeabi_memcpy>:
   1d24c:	f7fd bf68 	b.w	1b120 <memcpy>

0001d250 <__aeabi_memset>:
   1d250:	b470      	push	{r4, r5, r6}
   1d252:	0784      	lsls	r4, r0, #30
   1d254:	d046      	beq.n	1d2e4 <__aeabi_memset+0x94>
   1d256:	1e4c      	subs	r4, r1, #1
   1d258:	2900      	cmp	r1, #0
   1d25a:	d041      	beq.n	1d2e0 <__aeabi_memset+0x90>
   1d25c:	b2d5      	uxtb	r5, r2
   1d25e:	4603      	mov	r3, r0
   1d260:	e002      	b.n	1d268 <__aeabi_memset+0x18>
   1d262:	1e61      	subs	r1, r4, #1
   1d264:	b3e4      	cbz	r4, 1d2e0 <__aeabi_memset+0x90>
   1d266:	460c      	mov	r4, r1
   1d268:	f803 5b01 	strb.w	r5, [r3], #1
   1d26c:	0799      	lsls	r1, r3, #30
   1d26e:	d1f8      	bne.n	1d262 <__aeabi_memset+0x12>
   1d270:	2c03      	cmp	r4, #3
   1d272:	d92e      	bls.n	1d2d2 <__aeabi_memset+0x82>
   1d274:	b2d5      	uxtb	r5, r2
   1d276:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   1d27a:	2c0f      	cmp	r4, #15
   1d27c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   1d280:	d919      	bls.n	1d2b6 <__aeabi_memset+0x66>
   1d282:	4626      	mov	r6, r4
   1d284:	f103 0110 	add.w	r1, r3, #16
   1d288:	3e10      	subs	r6, #16
   1d28a:	2e0f      	cmp	r6, #15
   1d28c:	f841 5c10 	str.w	r5, [r1, #-16]
   1d290:	f841 5c0c 	str.w	r5, [r1, #-12]
   1d294:	f841 5c08 	str.w	r5, [r1, #-8]
   1d298:	f841 5c04 	str.w	r5, [r1, #-4]
   1d29c:	f101 0110 	add.w	r1, r1, #16
   1d2a0:	d8f2      	bhi.n	1d288 <__aeabi_memset+0x38>
   1d2a2:	f1a4 0110 	sub.w	r1, r4, #16
   1d2a6:	f021 010f 	bic.w	r1, r1, #15
   1d2aa:	f004 040f 	and.w	r4, r4, #15
   1d2ae:	3110      	adds	r1, #16
   1d2b0:	2c03      	cmp	r4, #3
   1d2b2:	440b      	add	r3, r1
   1d2b4:	d90d      	bls.n	1d2d2 <__aeabi_memset+0x82>
   1d2b6:	461e      	mov	r6, r3
   1d2b8:	4621      	mov	r1, r4
   1d2ba:	3904      	subs	r1, #4
   1d2bc:	2903      	cmp	r1, #3
   1d2be:	f846 5b04 	str.w	r5, [r6], #4
   1d2c2:	d8fa      	bhi.n	1d2ba <__aeabi_memset+0x6a>
   1d2c4:	1f21      	subs	r1, r4, #4
   1d2c6:	f021 0103 	bic.w	r1, r1, #3
   1d2ca:	3104      	adds	r1, #4
   1d2cc:	440b      	add	r3, r1
   1d2ce:	f004 0403 	and.w	r4, r4, #3
   1d2d2:	b12c      	cbz	r4, 1d2e0 <__aeabi_memset+0x90>
   1d2d4:	b2d2      	uxtb	r2, r2
   1d2d6:	441c      	add	r4, r3
   1d2d8:	f803 2b01 	strb.w	r2, [r3], #1
   1d2dc:	42a3      	cmp	r3, r4
   1d2de:	d1fb      	bne.n	1d2d8 <__aeabi_memset+0x88>
   1d2e0:	bc70      	pop	{r4, r5, r6}
   1d2e2:	4770      	bx	lr
   1d2e4:	460c      	mov	r4, r1
   1d2e6:	4603      	mov	r3, r0
   1d2e8:	e7c2      	b.n	1d270 <__aeabi_memset+0x20>
   1d2ea:	5344      	.short	0x5344
   1d2ec:	61662050 	.word	0x61662050
   1d2f0:	43546c69 	.word	0x43546c69
   1d2f4:	61662048 	.word	0x61662048
   1d2f8:	45476c69 	.word	0x45476c69
   1d2fc:	61662054 	.word	0x61662054
   1d300:	55526c69 	.word	0x55526c69
   1d304:	6166204e 	.word	0x6166204e
   1d308:	6c69      	.short	0x6c69
   1d30a:	7572      	.short	0x7572
   1d30c:	612f7473 	.word	0x612f7473
   1d310:	732f7070 	.word	0x732f7070
   1d314:	6c2f6372 	.word	0x6c2f6372
   1d318:	722e6269 	.word	0x722e6269
   1d31c:	00000073 	.word	0x00000073
   1d320:	0001d30a 	.word	0x0001d30a
   1d324:	00000013 	.word	0x00000013
   1d328:	0000005b 	.word	0x0000005b
   1d32c:	00000005 	.word	0x00000005
   1d330:	0001d30a 	.word	0x0001d30a
   1d334:	00000013 	.word	0x00000013
   1d338:	00000064 	.word	0x00000064
   1d33c:	00000005 	.word	0x00000005
   1d340:	50494843 	.word	0x50494843
   1d344:	61662038 	.word	0x61662038
   1d348:	00006c69 	.word	0x00006c69
   1d34c:	0001d30a 	.word	0x0001d30a
   1d350:	00000013 	.word	0x00000013
   1d354:	00000076 	.word	0x00000076
   1d358:	00000005 	.word	0x00000005
   1d35c:	0001d30a 	.word	0x0001d30a
   1d360:	00000013 	.word	0x00000013
   1d364:	0000007c 	.word	0x0000007c
   1d368:	0000000d 	.word	0x0000000d
   1d36c:	0001d30a 	.word	0x0001d30a
   1d370:	00000013 	.word	0x00000013
   1d374:	0000007b 	.word	0x0000007b
   1d378:	00000009 	.word	0x00000009
   1d37c:	696e6170 	.word	0x696e6170
   1d380:	2063      	.short	0x2063
   1d382:	6f6e      	.short	0x6f6e
   1d384:	636f6c20 	.word	0x636f6c20
   1d388:	0a          	.byte	0x0a
   1d389:	61          	.byte	0x61
   1d38a:	2074      	.short	0x2074
   1d38c:	6e696c20 	.word	0x6e696c20
   1d390:	2065      	.short	0x2065
   1d392:	000a      	.short	0x000a
   1d394:	0001d30a 	.word	0x0001d30a
   1d398:	00000013 	.word	0x00000013
   1d39c:	00000094 	.word	0x00000094
   1d3a0:	00000014 	.word	0x00000014
   1d3a4:	74737552 	.word	0x74737552
   1d3a8:	756f7420 	.word	0x756f7420
   1d3ac:	73206863 	.word	0x73206863
   1d3b0:	6f736e65 	.word	0x6f736e65
   1d3b4:	00000a72 	.word	0x00000a72
   1d3b8:	00000000 	.word	0x00000000
   1d3bc:	0001d3b8 	.word	0x0001d3b8
   1d3c0:	65737361 	.word	0x65737361
   1d3c4:	6f697472 	.word	0x6f697472
   1d3c8:	6166206e 	.word	0x6166206e
   1d3cc:	64656c69 	.word	0x64656c69
   1d3d0:	2860203a 	.word	0x2860203a
   1d3d4:	7466656c 	.word	0x7466656c
   1d3d8:	203d3d20 	.word	0x203d3d20
   1d3dc:	68676972 	.word	0x68676972
   1d3e0:	0a602974 	.word	0x0a602974
   1d3e4:	656c2020 	.word	0x656c2020
   1d3e8:	203a7466 	.word	0x203a7466
   1d3ec:	60          	.byte	0x60
   1d3ed:	60          	.byte	0x60
   1d3ee:	0a2c      	.short	0x0a2c
   1d3f0:	67697220 	.word	0x67697220
   1d3f4:	203a7468 	.word	0x203a7468
   1d3f8:	60          	.byte	0x60
   1d3f9:	60          	.byte	0x60
   1d3fa:	203a      	.short	0x203a
   1d3fc:	0001d3c0 	.word	0x0001d3c0
   1d400:	0000002d 	.word	0x0000002d
   1d404:	0001d3ed 	.word	0x0001d3ed
   1d408:	0000000c 	.word	0x0000000c
   1d40c:	0001d3f9 	.word	0x0001d3f9
   1d410:	00000003 	.word	0x00000003
   1d414:	0001d3fc 	.word	0x0001d3fc
   1d418:	20515249 	.word	0x20515249
   1d41c:	74696e69 	.word	0x74696e69
   1d420:	69616620 	.word	0x69616620
   1d424:	0000006c 	.word	0x0000006c
   1d428:	0001d418 	.word	0x0001d418
   1d42c:	0000000d 	.word	0x0000000d
   1d430:	0001d428 	.word	0x0001d428
   1d434:	0001d434 	.word	0x0001d434
   1d438:	74737572 	.word	0x74737572
   1d43c:	7070612f 	.word	0x7070612f
   1d440:	6372732f 	.word	0x6372732f
   1d444:	756f742f 	.word	0x756f742f
   1d448:	735f6863 	.word	0x735f6863
   1d44c:	6f736e65 	.word	0x6f736e65
   1d450:	73722e72 	.word	0x73722e72
   1d454:	0001d438 	.word	0x0001d438
   1d458:	0000001c 	.word	0x0000001c
   1d45c:	0000003f 	.word	0x0000003f
   1d460:	00000005 	.word	0x00000005
   1d464:	20633269 	.word	0x20633269
   1d468:	72646461 	.word	0x72646461
   1d46c:	0001d438 	.word	0x0001d438
   1d470:	0000001c 	.word	0x0000001c
   1d474:	0000004b 	.word	0x0000004b
   1d478:	00000011 	.word	0x00000011
   1d47c:	63756f74 	.word	0x63756f74
   1d480:	74616468 	.word	0x74616468
   1d484:	61662061 	.word	0x61662061
   1d488:	00006c69 	.word	0x00006c69
   1d48c:	0001d438 	.word	0x0001d438
   1d490:	0000001c 	.word	0x0000001c
   1d494:	00000056 	.word	0x00000056
   1d498:	00000009 	.word	0x00000009
   1d49c:	0001d438 	.word	0x0001d438
   1d4a0:	0000001c 	.word	0x0000001c
   1d4a4:	0000005a 	.word	0x0000005a
   1d4a8:	00000031 	.word	0x00000031
   1d4ac:	64616572 	.word	0x64616572
   1d4b0:	756f7420 	.word	0x756f7420
   1d4b4:	61646863 	.word	0x61646863
   1d4b8:	66206174 	.word	0x66206174
   1d4bc:	006c6961 	.word	0x006c6961
   1d4c0:	0001d438 	.word	0x0001d438
   1d4c4:	0000001c 	.word	0x0000001c
   1d4c8:	00000089 	.word	0x00000089
   1d4cc:	00000005 	.word	0x00000005
   1d4d0:	0001d438 	.word	0x0001d438
   1d4d4:	0000001c 	.word	0x0000001c
   1d4d8:	00000095 	.word	0x00000095
   1d4dc:	00000037 	.word	0x00000037

0001d4e0 <str.0>:
   1d4e0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1d4f0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1d500:	00000077 0001d438 0000001c 00000095     w...8...........
   1d510:	00000024 00000000 00000000 00000000     $...............

0001d520 <str.1>:
   1d520:	65747461 2074706d 61206f74 77206464     attempt to add w
   1d530:	20687469 7265766f 776f6c66 0001d438     ith overflow8...
   1d540:	0000001c 00000095 00000020 0001d438     ........ ...8...
   1d550:	0000001c 00000099 00000009 0001d438     ............8...
   1d560:	0000001c 0000009a 00000037 0001d438     ........7...8...
   1d570:	0000001c 0000009a 00000023 0001d438     ........#...8...
   1d580:	0000001c 0000009a 0000001f 0001d438     ............8...
   1d590:	0000001c 0000009b 00000037 0001d438     ........7...8...
   1d5a0:	0000001c 0000009b 00000023 0001d438     ........#...8...
   1d5b0:	0000001c 0000009b 0000001f 0001d438     ............8...
   1d5c0:	0000001c 0000009c 00000009 0001d438     ............8...
   1d5d0:	0000001c 0000009e 00000037 0001d438     ........7...8...
   1d5e0:	0000001c 0000009e 00000023 0001d438     ........#...8...
   1d5f0:	0000001c 0000009e 0000001f 0001d438     ............8...
   1d600:	0000001c 0000009f 00000037 0001d438     ........7...8...
   1d610:	0000001c 0000009f 00000023 0001d438     ........#...8...
   1d620:	0000001c 0000009f 0000001f 0001d438     ............8...
   1d630:	0000001c 000000a0 00000009 0001d438     ............8...
   1d640:	0000001c 000000a4 00000030 0001d438     ........0...8...
   1d650:	0000001c 000000a4 0000001a 0001d438     ............8...
   1d660:	0000001c 000000a4 00000016 0001d438     ............8...
   1d670:	0000001c 000000a3 00000009 0001d438     ............8...
   1d680:	0000001c 000000a6 00000030 0001d438     ........0...8...
   1d690:	0000001c 000000a6 0000001a 0001d438     ............8...
   1d6a0:	0000001c 000000a6 00000016 0001d438     ............8...
   1d6b0:	0000001c 000000a5 00000009 0001d438     ............8...
   1d6c0:	0000001c 000000aa 0000002d 0001d438     ........-...8...
   1d6d0:	0000001c 000000aa 0000001a 0001d438     ............8...
   1d6e0:	0000001c 000000aa 00000016 0001d438     ............8...
   1d6f0:	0000001c 000000a9 00000009 0001d438     ............8...
   1d700:	0000001c 000000ac 0000002d 0001d438     ........-...8...
   1d710:	0000001c 000000ac 0000001a 0001d438     ............8...
   1d720:	0000001c 000000ac 00000016 0001d438     ............8...
   1d730:	0000001c 000000ab 00000009 0001d438     ............8...
   1d740:	0000001c 000000af 0000000d 0001d438     ............8...
   1d750:	0000001c 000000af 0000002c 20633269     ........,...i2c 
   1d760:	00667562 0001d438 0000001c 000000f1     buf.8...........
   1d770:	00000005 0001d438 0000001c 000000f2     ....8...........
   1d780:	0000000d 0001d438 0000001c 000000f2     ....8...........
   1d790:	00000005 20633269 6c696166 7375520a     ....i2c fail.Rus
   1d7a0:	48432074 0a385049 70696863 00000038     t CHIP8.chip8...
   1d7b0:	00000000 0001d7a8 00000006 0001d7b0     ................
   1d7c0:	50494843 74732038 65747261 25120a64     CHIP8 started..%
   1d7d0:	43415053 4e492045 45444156 30205352     SPACE INVADERS 0
   1d7e0:	2031392e 44207942 64697661 4e495720     .91 By David WIN
   1d7f0:	60524554 62006100 d0dda308 f2087118     TER`.a.b.....q..
   1d800:	1220311e 6108702d 12403000 6c05692d     .1 .-p.a.0@.-i.l
   1d810:	23006e15 f00a6091 3007f015 234b1200     .n.#.`.....0..K#
   1d820:	12017e91 68006645 6a00691c 6c0a6b04     .~..Ef.h.i.j.k.l
   1d830:	6e3c6d04 23e0000f fd512375 e0046015     .m<n...#u#Q..`..
   1d840:	237d129e 78003875 607523ff 129ee006     ..}#u8.x.#u`....
   1d850:	3875238b 23017839 12003675 e005609f     .#u89x.#u6...`..
   1d860:	66e9129e 841b6501 d4d9a380 d4d9a351     ...f.e......Q...
   1d870:	35ff7551 66ad12ff d4e91200 12013f51     Qu.5...f....Q?..
   1d880:	6651d4e9 73408300 62b58303 622283f8     ..Qf..@s...b.."b
   1d890:	12003308 827d23c9 12084306 121033d3     .3...#}..C...3..
   1d8a0:	827d23d5 12183306 827d23dd 12204306     .#}..3...#}..C .
   1d8b0:	122833e7 3e7d23e9 79071300 69184906     .3(..#}>...y.I.i
   1d8c0:	6b046a00 7d046c0a 000f6ef4 235123e0     .j.k.l.}.n...#Q#
   1d8d0:	1215fd75 3707f76f fd6f1200 8b512315     u...o..7..o..#Q.
   1d8e0:	13123ba4 6a027c1b 13023bfc 6a027c23     .;...|.j.;..#|.j
   1d8f0:	3c512304 006f1218 60dda4e0 62086114     .#Q<..o....`.a.b
   1d900:	701fd00f 301ef208 6033132c f015f0ff     ...p...0,.3`....
   1d910:	13003007 000af041 fe06a7e0 a3251265     .0..A.......e.%.
   1d920:	611ef9c1 81692308 81692306 81692306     ...a.#i..#i..#i.
   1d930:	7b692306 80ee00d0 301280e0 7bc6db00     .#i{.......0...{
   1d940:	a3ee000c d81c60d9 23ee0004 23238e51     .....`.....#Q.##
   1d950:	f0056051 f015f018 13003007 6aee0089     Q`.......0.....j
   1d960:	6be08d00 12a1e904 fd0ca657 3065f01e     ...k....W.....e0
   1d970:	6aaf13ff 6d046b00 13016e01 f00aa597     ...j.k.m.n......
   1d980:	7bc6db1e 7a017d08 13073a01 3cee0097     ...{.}.z.:.....<
   1d990:	99ffff7e ffff7e99 7ee72424 7e3c3cff     ~....~..$$.~.<<~
   1d9a0:	3c4281db 10dbff7e 00fe7c38 3f007f00     ..B<~...8|.....?
   1d9b0:	00007f00 01010100 03030303 203f0000     ..............? 
   1d9c0:	20202020 3f202020 00ff0808 fc00fe00            ?........
   1d9d0:	0000fe00 42427e00 62626262 00ff0000     .....~BBbbbb....
   1d9e0:	00000000 ff000000 00ff0000 7d41007d     ............}.A}
   1d9f0:	007d7d05 c6c2c200 38286c44 00ff0000     .}}.....Dl(8....
   1da00:	00000000 ff000000 00ff0000 f71410f7     ................
   1da10:	000404f7 fe447c00 c2c2c2c2 00ff0000     .....|D.........
   1da20:	00000000 ff000000 00ff0000 e82820ef     ............. (.
   1da30:	002f2fe8 c585f900 f9c5c5c5 00ff0000     .//.............
   1da40:	00000000 ff000000 00ff0000 302000be     .............. 0
   1da50:	00bebe20 e704f700 f4848585 00ff0000      ...............
   1da60:	00000000 ff000000 00ff0000 3f007f00     ...............?
   1da70:	00007f00 ef28ef00 6f60e000 00ff0000     ......(...`o....
   1da80:	00000000 ff000000 00ff0000 fc00fe00     ................
   1da90:	0000fe00 c000c000 c0c0c0c0 04fc0000     ................
   1daa0:	04040404 fc040404 f9ff1010 9a8bb981     ................
   1dab0:	fa00fa9a 9b9a9a8a 25e6f899 3434f425     ...........%%.44
   1dac0:	14170034 26363734 5050dfc7 dfd8d85c     4...476&..PP\...
   1dad0:	1f11df00 d9191b12 86fe447c 84fc8686     ........|D......
   1dae0:	fe8282fe c0c080fe 82fcfec0 fcc2c2c2     ................
   1daf0:	c0f880fe 80fefec0 c0c0c0f0 86be80fe     ................
   1db00:	8686fe86 868686fe 10101010 18181010     ................
   1db10:	78484818 c0b0909c 80809cb0 fec0c0c0     .HHx............
   1db20:	869292ee 82fe8686 86868686 8686827c     ............|...
   1db30:	82fe7c86 c0c0c0fe cac2827c 86fe7ac4     .|......|....z..
   1db40:	849c90fe 02fec0fe 10fefe02 30303030     ............0000
   1db50:	c2c28282 8282fec2 1038ee82 92968686     ..........8.....
   1db60:	4482ee92 82443838 30fe8282 02fe3030     ...D88D....000..
   1db70:	fe80f01e 00000000 00000606 c0606000     .............``.
   1db80:	00000000 18180000 18001818 180cc67c     ............|...
   1db90:	00001800 0000fefe 868682fe 0808fe86     ................
   1dba0:	18181808 c0fe02fe 02fefec0 fe06061e     ................
   1dbb0:	fec4c484 80fe0404 fe0606fe fec0c0c0     ................
   1dbc0:	02fefe82 06060602 86fe447c 82fefe86     ........|D......
   1dbd0:	060606fe 4444fe44 a8a844fe a8a8a8a8     ....D.DD.D......
   1dbe0:	005a6ca8 30a8180c 12007e4e a86c6618     .lZ....0N~...fl.
   1dbf0:	2454665a 48480066 06a81218 0012a890     ZfT$f.HH........
   1dc00:	a812307e 724e3084 a8a86618 a8a8a8a8     ~0...0Nr.f......
   1dc10:	a8785490 726c7848 6c1812a8 90546672     .Tx.Hxlr...lrfT.
   1dc20:	182a72a8 7e4e30a8 66181200 5472a86c     .r*..0N~...fl.rT
   1dc30:	18665aa8 724e187e 182a72a8 30a86630     .Zf.~.Nr.r*.0f.0
   1dc40:	6c007e4e 9c4e5430 a8a8a8a8 48a8a8a8     N~.l0TN........H
   1dc50:	a8187e54 66785490 302a6ca8 3084a85a     T~...Txf.l*0Z..0
   1dc60:	d8a82a72 124e00a8 a8a2e4a8 a8124e00     r*....N......N..
   1dc70:	54542a6c 3084a872 dea82a72 2a72a89c     l*TTr..0r*....r*
   1dc80:	540ca818 72785a48 66a86618 66545a18     ...THZxr.f.f.ZTf
   1dc90:	72a86c72 a872002a a8182a72 007e4e30     rl.r*.r.r*..0N~.
   1dca0:	6c661812 186600a8 0c4e30a8 6c001866     ..fl..f..0N.f..l
   1dcb0:	a8244e30 30182a72 541ea866 9c180c66     0N$.r*.0f..Tf...
   1dcc0:	545424a8 7842a812 aea83c0c a8a8a8a8     .$TT..Bx.<......
   1dcd0:	ffa8a8a8 00000000 00000000 00000000     ................
   1dce0:	43000000 38504948 6e6f6420 48430a65     ...CHIP8 done.CH
   1dcf0:	20385049 756f6873 6e20646c 6520746f     IP8 should not e
   1dd00:	7572646e 612f7473 732f7070 632f6372     ndrust/app/src/c
   1dd10:	38706968 0073722e 0001dd02 00000015     hip8.rs.........
   1dd20:	00000045 00000005 20746573 000a202c     E.......set , ..
   1dd30:	0001dd02 00000015 0000007a 00000015     ........z.......

0001dd40 <str.0>:
   1dd40:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1dd50:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1dd60:	00000077 0001dd02 00000015 0000007a     w...........z...
   1dd70:	00000011 00000000 00000000 00000000     ................

0001dd80 <str.1>:
   1dd80:	65747461 2074706d 61206f74 77206464     attempt to add w
   1dd90:	20687469 7265766f 776f6c66 0001dd02     ith overflow....
   1dda0:	00000015 0000007b 00000012 0001dd02     ....{...........
   1ddb0:	00000015 0000007c 0000001d 0001dd02     ....|...........
   1ddc0:	00000015 0000007d 0000001d 0001dd02     ....}...........
   1ddd0:	00000015 00000080 00000042 00000000     ........B.......

0001dde0 <str.2>:
   1dde0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1ddf0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1de00:	00000077 0001dd02 00000015 00000080     w...............
   1de10:	0000005d 0001dd02 00000015 0000008a     ]...............
   1de20:	00000015 0001dd02 00000015 0000008a     ................
   1de30:	00000011 0001dd02 00000015 0000008b     ................
   1de40:	00000012 0001dd02 00000015 000000b0     ................
   1de50:	00000009 50494843 6f742038 20686375     ....CHIP8 touch 
   1de60:	20746f6e 646e6168 0a64656c 6573552f     not handled./Use
   1de70:	4c2f7372 79707075 61632e2f 2f6f6772     rs/Luppy/.cargo/
   1de80:	69676572 79727473 6372732f 7469672f     registry/src/git
   1de90:	2e627568 2d6d6f63 63636531 39393236     hub.com-1ecc6299
   1dea0:	65396264 33323863 62696c2f 70696863     db9ec823/libchip
   1deb0:	2e302d38 2f322e31 2f637273 2e62696c     8-0.1.2/src/lib.
   1dec0:	00007372 0001de6c 00000056 0000009d     rs..l...V.......
   1ded0:	00000014 0001de6c 00000056 000000d4     ....l...V.......
   1dee0:	00000011 0001de6c 00000056 000000d5     ....l...V.......
   1def0:	0000001a 00000000 00000000 00000000     ................

0001df00 <str.0>:
   1df00:	65747461 2074706d 61206f74 77206464     attempt to add w
   1df10:	20687469 7265766f 776f6c66 0001de6c     ith overflowl...
   1df20:	00000056 000000d5 00000011 00000005     V...............
   1df30:	0001df2c 4c205d5b 78562044 495b202c     ,...[] LD Vx, [I
   1df40:	0000005d 0001df34 00000001 0001df35     ]...4.......5...
   1df50:	0000000c 0001df44 00000000 00000020     ....D....... ...
   1df60:	00000008 00000002 00000000 00000000     ................
   1df70:	00000004 00000003 0001df58 6362696c     ........X...libc
   1df80:	38706968 4b53205d 78562050 504a205d     hip8] SKP Vx] JP
   1df90:	6e6e6e20 00000040 00000020 0001df7c      nnn@... ...|...
   1dfa0:	00000008 0001df7c 00000008 0001de6c     ....|.......l...
   1dfb0:	00000056 000001a1 0001df9c 0001de6c     V...........l...
   1dfc0:	00000056 000001a3 0000001d 0001de6c     V...........l...
   1dfd0:	00000056 000001a4 0000002a 0001de6c     V.......*...l...
   1dfe0:	00000056 000001a4 00000021 0001de6c     V.......!...l...
   1dff0:	00000056 000001a4 00000015 444c205d     V...........] LD
   1e000:	5d495b20 7856202c 0001df34 00000001      [I], Vx4.......
   1e010:	0001dffc 0000000c 0001e008 0001df7c     ............|...
   1e020:	00000008 0001df7c 00000008 0001de6c     ....|.......l...
   1e030:	00000056 0000019a 0001e01c 0001de6c     V...........l...
   1e040:	00000056 0000019c 0000001d 0001de6c     V...........l...
   1e050:	00000056 0000019d 00000035 0001de6c     V.......5...l...
   1e060:	00000056 0000019d 0000001e 0001de6c     V...........l...
   1e070:	00000056 0000019d 00000015 444c205d     V...........] LD
   1e080:	202c4220 00007856 0001df34 00000001      B, Vx..4.......
   1e090:	0001e07c 0000000a 0001e088 0001df7c     |...........|...
   1e0a0:	00000008 0001df7c 00000008 0001de6c     ....|.......l...
   1e0b0:	00000056 00000193 0001e09c 0001de6c     V...........l...
   1e0c0:	00000056 00000194 0000001b 0001de6c     V...........l...
   1e0d0:	00000056 00000195 00000011 0001de6c     V...........l...
   1e0e0:	00000056 00000196 0000001a 0001de6c     V...........l...
   1e0f0:	00000056 00000196 00000011 0001de6c     V...........l...
   1e100:	00000056 00000197 0000001a 0001de6c     V...........l...
   1e110:	00000056 00000197 00000011 444c205d     V...........] LD
   1e120:	202c4620 00007856 0001df34 00000001      F, Vx..4.......
   1e130:	0001e11c 0000000a 0001e128 0001df7c     ........(...|...
   1e140:	00000008 0001df7c 00000008 0001de6c     ....|.......l...
   1e150:	00000056 0000018f 0001e13c 0001de6c     V.......<...l...
   1e160:	00000056 00000190 0000001b 0001de6c     V...........l...
   1e170:	00000056 00000190 0000001a 00000000     V...............

0001e180 <str.1>:
   1e180:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1e190:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1e1a0:	41205d77 49204444 7856202c 0001df34     w] ADD I, Vx4...
   1e1b0:	00000001 0001e1a1 0000000b 0001e1ac     ................
   1e1c0:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e1d0:	0001de6c 00000056 0000018b 0001e1c0     l...V...........
   1e1e0:	0001de6c 00000056 0000018c 0000002e     l...V...........
   1e1f0:	444c205d 2c545320 00785620 0001df34     ] LD ST, Vx.4...
   1e200:	00000001 0001e1f0 0000000b 0001e1fc     ................
   1e210:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e220:	0001de6c 00000056 00000187 0001e210     l...V...........
   1e230:	0001de6c 00000056 00000188 0000001b     l...V...........
   1e240:	444c205d 2c544420 00785620 0001df34     ] LD DT, Vx.4...
   1e250:	00000001 0001e240 0000000b 0001e24c     ....@.......L...
   1e260:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e270:	0001de6c 00000056 00000183 0001e260     l...V.......`...
   1e280:	0001de6c 00000056 00000184 0000001b     l...V...........
   1e290:	444c205d 2c785620 00004b20 0001df34     ] LD Vx, K..4...
   1e2a0:	00000001 0001e290 0000000a 0001e29c     ................
   1e2b0:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e2c0:	0001de6c 00000056 0000017f 0001e2b0     l...V...........
   1e2d0:	0001de6c 00000056 00000180 00000011     l...V...........
   1e2e0:	444c205d 2c785620 00544420 0001df34     ] LD Vx, DT.4...
   1e2f0:	00000001 0001e2e0 0000000b 0001e2ec     ................
   1e300:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e310:	0001de6c 00000056 0000017b 0001e300     l...V...{.......
   1e320:	0001de6c 00000056 0000017c 00000011     l...V...|.......
   1e330:	4b53205d 5620504e 00000078 0001df34     ] SKNP Vx...4...
   1e340:	00000001 0001e330 00000009 0001e33c     ....0.......<...
   1e350:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1e360:	0001de6c 00000056 00000175 0001e350     l...V...u...P...
   1e370:	0001de6c 00000056 00000176 00000021     l...V...v...!...
   1e380:	0001df34 00000001 0001df84 00000008     4...............
   1e390:	0001e380 0001df7c 00000008 0001df7c     ....|.......|...
   1e3a0:	00000008 0001de6c 00000056 0000016f     ....l...V...o...
   1e3b0:	0001e394 0001de6c 00000056 00000170     ....l...V...p...
   1e3c0:	00000020 5244205d 78562057 7956202c      ...] DRW Vx, Vy
   1e3d0:	006e202c 0001df34 00000001 0001e3c4     , n.4...........
   1e3e0:	0000000f 0001e3d4 0001df7c 00000008     ........|.......
   1e3f0:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e400:	00000156 0001e3e8 0001de6c 00000056     V.......l...V...
   1e410:	00000157 0000001d 0001de6c 00000056     W.......l...V...
   1e420:	00000158 0000001d 0001de6c 00000056     X.......l...V...
   1e430:	0000015e 00000026 0001de6c 00000056     ^...&...l...V...
   1e440:	0000015e 0000001d 0001de6c 00000056     ^.......l...V...
   1e450:	00000160 00000021 00000000 00000000     `...!...........

0001e460 <str.2>:
   1e460:	65747461 2074706d 63206f74 75636c61     attempt to calcu
   1e470:	6574616c 65687420 6d657220 646e6961     late the remaind
   1e480:	77207265 20687469 69642061 6f736976     er with a diviso
   1e490:	666f2072 72657a20 0000006f 0001de6c     r of zero...l...
   1e4a0:	00000056 00000163 00000025 0001de6c     V...c...%...l...
   1e4b0:	00000056 00000165 0000002d 00000000     V...e...-.......

0001e4c0 <str.3>:
   1e4c0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1e4d0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1e4e0:	00000077 0001de6c 00000056 00000165     w...l...V...e...
   1e4f0:	00000028 00000000 00000000 00000000     (...............

0001e500 <str.4>:
   1e500:	65747461 2074706d 73206f74 74666968     attempt to shift
   1e510:	66656c20 69772074 6f206874 66726576      left with overf
   1e520:	5d776f6c 444e5220 2c785620 006b6b20     low] RND Vx, kk.
   1e530:	0001df34 00000001 0001e523 0000000c     4.......#.......
   1e540:	0001e530 0001df7c 00000008 0001df7c     0...|.......|...
   1e550:	00000008 0001de6c 00000056 00000152     ....l...V...R...
   1e560:	0001e544 0001de6c 00000056 00000153     D...l...V...S...
   1e570:	00000011 504a205d 2c305620 6e6e6e20     ....] JP V0, nnn
   1e580:	0001df34 00000001 0001e574 0000000c     4.......t.......
   1e590:	0001e580 0001df7c 00000008 0001df7c     ....|.......|...
   1e5a0:	00000008 0001de6c 00000056 0000014e     ....l...V...N...
   1e5b0:	0001e594 444c205d 202c4920 006e6e6e     ....] LD I, nnn.
   1e5c0:	0001df34 00000001 0001e5b4 0000000b     4...............
   1e5d0:	0001e5c0 0001df7c 00000008 0001df7c     ....|.......|...
   1e5e0:	00000008 0001de6c 00000056 0000014a     ....l...V...J...
   1e5f0:	0001e5d4 4e53205d 78562045 7956202c     ....] SNE Vx, Vy
   1e600:	0001df34 00000001 0001e5f4 0000000c     4...............
   1e610:	0001e600 0001df7c 00000008 0001df7c     ....|.......|...
   1e620:	00000008 0001de6c 00000056 00000144     ....l...V...D...
   1e630:	0001e614 0001de6c 00000056 00000145     ....l...V...E...
   1e640:	00000014 0001de6c 00000056 00000145     ....l...V...E...
   1e650:	00000021 4853205d 7856204c 7956202c     !...] SHL Vx, Vy
   1e660:	0001df34 00000001 0001e654 0000000c     4.......T.......
   1e670:	0001e660 0001df7c 00000008 0001df7c     `...|.......|...
   1e680:	00000008 0001de6c 00000056 0000013f     ....l...V...?...
   1e690:	0001e674 0001de6c 00000056 00000140     t...l...V...@...
   1e6a0:	00000020 0001de6c 00000056 00000141      ...l...V...A...
   1e6b0:	0000001d 0001de6c 00000056 00000141     ....l...V...A...
   1e6c0:	00000011 5553205d 56204e42 56202c78     ....] SUBN Vx, V
   1e6d0:	00000079 0001df34 00000001 0001e6c4     y...4...........
   1e6e0:	0000000d 0001e6d4 0001df7c 00000008     ........|.......
   1e6f0:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e700:	00000139 0001e6e8 0001de6c 00000056     9.......l...V...
   1e710:	0000013a 0000001e 0001de6c 00000056     :.......l...V...
   1e720:	0000013a 00000038 0001de6c 00000056     :...8...l...V...
   1e730:	0000013b 00000011 4853205d 78562052     ;.......] SHR Vx
   1e740:	7956202c 0001df34 00000001 0001e738     , Vy4.......8...
   1e750:	0000000c 0001e744 0001df7c 00000008     ....D...|.......
   1e760:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e770:	00000134 0001e758 0001de6c 00000056     4...X...l...V...
   1e780:	00000135 0000001f 0001de6c 00000056     5.......l...V...
   1e790:	00000136 0000001d 0001de6c 00000056     6.......l...V...
   1e7a0:	00000136 00000011 5553205d 78562042     6.......] SUB Vx
   1e7b0:	7956202c 0001df34 00000001 0001e7a8     , Vy4...........
   1e7c0:	0000000c 0001e7b4 0001df7c 00000008     ........|.......
   1e7d0:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e7e0:	0000012e 0001e7c8 0001de6c 00000056     ........l...V...
   1e7f0:	0000012f 0000001e 0001de6c 00000056     /.......l...V...
   1e800:	0000012f 00000038 0001de6c 00000056     /...8...l...V...
   1e810:	00000130 00000011 4441205d 78562044     0.......] ADD Vx
   1e820:	7956202c 0001df34 00000001 0001e818     , Vy4...........
   1e830:	0000000c 0001e824 0001df7c 00000008     ....$...|.......
   1e840:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e850:	00000128 0001e838 0001de6c 00000056     (...8...l...V...
   1e860:	00000129 0000001e 0001de6c 00000056     ).......l...V...
   1e870:	00000129 00000038 0001de6c 00000056     )...8...l...V...
   1e880:	0000012a 00000011 4f58205d 78562052     *.......] XOR Vx
   1e890:	7956202c 0001df34 00000001 0001e888     , Vy4...........
   1e8a0:	0000000c 0001e894 0001df7c 00000008     ........|.......
   1e8b0:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e8c0:	00000124 0001e8a8 0001de6c 00000056     $.......l...V...
   1e8d0:	00000125 0000001e 0001de6c 00000056     %.......l...V...
   1e8e0:	00000125 00000011 4e41205d 78562044     %.......] AND Vx
   1e8f0:	7956202c 0001df34 00000001 0001e8e8     , Vy4...........
   1e900:	0000000c 0001e8f4 0001df7c 00000008     ........|.......
   1e910:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e920:	00000120 0001e908 0001de6c 00000056      .......l...V...
   1e930:	00000121 0000001e 0001de6c 00000056     !.......l...V...
   1e940:	00000121 00000011 524f205d 2c785620     !.......] OR Vx,
   1e950:	00795620 0001df34 00000001 0001e948      Vy.4.......H...
   1e960:	0000000b 0001e954 0001df7c 00000008     ....T...|.......
   1e970:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e980:	0000011c 0001e968 0001de6c 00000056     ....h...l...V...
   1e990:	0000011d 0000001e 0001de6c 00000056     ........l...V...
   1e9a0:	0000011d 00000011 444c205d 2c785620     ........] LD Vx,
   1e9b0:	00795620 0001df34 00000001 0001e9a8      Vy.4...........
   1e9c0:	0000000b 0001e9b4 0001df7c 00000008     ........|.......
   1e9d0:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1e9e0:	00000118 0001e9c8 0001de6c 00000056     ........l...V...
   1e9f0:	00000119 0000001d 0001de6c 00000056     ........l...V...
   1ea00:	00000119 00000011 4441205d 78562044     ........] ADD Vx
   1ea10:	6b6b202c 0001df34 00000001 0001ea08     , kk4...........
   1ea20:	0000000c 0001ea14 0001df7c 00000008     ........|.......
   1ea30:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1ea40:	00000114 0001ea28 0001de6c 00000056     ....(...l...V...
   1ea50:	00000115 0000001d 0001de6c 00000056     ........l...V...
   1ea60:	00000115 00000011 444c205d 2c785620     ........] LD Vx,
   1ea70:	006b6b20 0001df34 00000001 0001ea68      kk.4.......h...
   1ea80:	0000000b 0001ea74 0001df7c 00000008     ....t...|.......
   1ea90:	0001df7c 00000008 0001de6c 00000056     |.......l...V...
   1eaa0:	00000110 0001ea88 0001de6c 00000056     ........l...V...
   1eab0:	00000111 00000011 6e49205d 696c6176     ........] Invali
   1eac0:	706f2064 0000203a 0001df34 00000001     d op: ..4.......
   1ead0:	0001eab8 0000000e 0001eac8 00000000     ................
   1eae0:	00000020 00000008 00000002 00000000      ...............
   1eaf0:	00000000 00000004 00000003 00000001     ................
   1eb00:	00000020 00000008 00000002 00000000      ...............
   1eb10:	00000000 00000004 00000003 0001eadc     ................
   1eb20:	633a3a3c 3a65726f 63616d3a 3a736f72     <::core::macros:
   1eb30:	6e61703a 6d206369 6f726361 00003e73     :panic macros>..
   1eb40:	0001eb20 0000001e 00000005 00000032      ...........2...
   1eb50:	4553205d 2c785620 00795620 0001df34     ] SE Vx, Vy.4...
   1eb60:	00000001 0001eb50 0000000b 0001eb5c     ....P.......\...
   1eb70:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1eb80:	0001de6c 00000056 0000010a 0001eb70     l...V.......p...
   1eb90:	0001de6c 00000056 0000010b 00000014     l...V...........
   1eba0:	0001de6c 00000056 0000010b 00000021     l...V.......!...
   1ebb0:	4e53205d 78562045 6b6b202c 0001df34     ] SNE Vx, kk4...
   1ebc0:	00000001 0001ebb0 0000000c 0001ebbc     ................
   1ebd0:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1ebe0:	0001de6c 00000056 00000104 0001ebd0     l...V...........
   1ebf0:	0001de6c 00000056 00000105 00000014     l...V...........
   1ec00:	4553205d 20785620 00006b6b 0001df34     ] SE Vx kk..4...
   1ec10:	00000001 0001ec00 0000000a 0001ec0c     ................
   1ec20:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1ec30:	0001de6c 00000056 000000fe 0001ec20     l...V....... ...
   1ec40:	0001de6c 00000056 000000ff 00000014     l...V...........
   1ec50:	4143205d 6e204c4c 00006e6e 0001df34     ] CALL nnn..4...
   1ec60:	00000001 0001ec50 0000000a 0001ec5c     ....P.......\...
   1ec70:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1ec80:	0001de6c 00000056 000000f9 0001ec70     l...V.......p...
   1ec90:	0001df34 00000001 0001df8c 00000008     4...............
   1eca0:	0001ec90 0001df7c 00000008 0001df7c     ....|.......|...
   1ecb0:	00000008 0001de6c 00000056 000000f5     ....l...V.......
   1ecc0:	0001eca4 5953205d 6e6e2053 0000006e     ....] SYS nnn...
   1ecd0:	0001df34 00000001 0001ecc4 00000009     4...............
   1ece0:	0001ecd0 0001df7c 00000008 0001df7c     ....|.......|...
   1ecf0:	00000008 0001de6c 00000056 000000f1     ....l...V.......
   1ed00:	0001ece4 20746f6e 6c706d69 6e656d65     ....not implemen
   1ed10:	00646574 0001eb20 0000001e 00000002     ted. ...........
   1ed20:	00000002 4552205d 00000054 0001df34     ....] RET...4...
   1ed30:	00000001 0001ed24 00000005 0001ed2c     ....$.......,...
   1ed40:	0001df7c 00000008 0001df7c 00000008     |.......|.......
   1ed50:	0001de6c 00000056 000000ec 0001ed40     l...V.......@...
   1ed60:	4c43205d 00000053 0001df34 00000001     ] CLS...4.......
   1ed70:	0001ed60 00000005 0001ed68 0001df7c     `.......h...|...
   1ed80:	00000008 0001df7c 00000008 0001de6c     ....|.......l...
   1ed90:	00000056 000000e5 0001ed7c 0001de6c     V.......|...l...
   1eda0:	00000056 00000093 0000001b 0001de6c     V...........l...
   1edb0:	00000056 00000097 00000009 0001de6c     V...........l...
   1edc0:	00000056 000000bb 0000000d 0001de6c     V...........l...
   1edd0:	00000056 000000be 0000000d 6c6c6163     V...........call
   1ede0:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1edf0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1ee00:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1ee10:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1ee20:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1ee30:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1ee40:	2f333238 65626d65 64656464 6172672d     823/embedded-gra
   1ee50:	63696870 2e302d73 2f322e35 2f637273     phics-0.5.2/src/
   1ee60:	726f6f63 73722e64 65726e55 61686361     coord.rsUnreacha
   1ee70:	20656c62 65646e69 00002078 0001ee68     ble index ..h...
   1ee80:	00000012 0001ee7c 0001ee07 00000061     ....|.......a...
   1ee90:	00000070 00000016                       p.......

0001ee98 <_ZN8libchip87CHARBUF17h227c6d0d7e24574cE>:
   1ee98:	909090f0 206020f0 10f07020 f0f080f0     ..... `  p......
   1eea8:	f010f010 10f09090 f080f010 80f0f010     ................
   1eeb8:	f0f090f0 40402010 90f090f0 f090f0f0     ..... @@........
   1eec8:	90f0f010 e09090f0 e090e090 808080f0     ................
   1eed8:	9090e0f0 80f0e090 f0f080f0 8080f080     ................
   1eee8:	72656874 73692065 206f6e20 68637573     there is no such
   1eef8:	69687420 6120676e 6e612073 71636120      thing as an acq
   1ef08:	65726975 6c65722f 65736165 616f6c20     uire/release loa
   1ef18:	75722f64 2f637473 61376535 36363466     d/rustc/5e7af466
   1ef28:	30386639 36663565 34313238 35306631     9f80e5f682141f05
   1ef38:	33393130 37366261 64666139 31623462     0193ab679afdb4b1
   1ef48:	6372732f 62696c2f 65726f63 63616d2f     /src/libcore/mac
   1ef58:	2f736f72 2e646f6d 00007372 0001ef19     ros/mod.rs......
   1ef68:	00000049 0000000a 00000009 72656874     I...........ther
   1ef78:	73692065 206f6e20 68637573 69687420     e is no such thi
   1ef88:	6120676e 20612073 656c6572 20657361     ng as a release 
   1ef98:	64616f6c 0000ea53 00000000 00000001     loadS...........
   1efa8:	0000ee0f 0000ee1b 0000ee25 0001ef9c     ........%.......
   1efb8:	0000ea53 00000000 00000001 0000ee0f     S...............
   1efc8:	0000ee1b 0000ee25                       ....%...

0001efd0 <_ZN3log6logger3NOP17h5a3de47970f20990E>:
   1efd0:	00000000 0001efd0 0001efd4 65737361     ............asse
   1efe0:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1eff0:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f000:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f010:	203a7468 203a6060 0001efdc 0000002d     ht: ``: ....-...
   1f020:	0001f009 0000000c 0001f015 00000003     ................
   1f030:	0001f018 6e206f6e 006c6c75 0001f034     ....no null.4...
   1f040:	00000007 0001f03c 0001f048 74737572     ....<...H...rust
   1f050:	6e796d2f 2f747765 2f637273 2e62696c     /mynewt/src/lib.
   1f060:	00007372 0001f04c 00000016 000000db     rs..L...........
   1f070:	00000011 0000f4cb 00000004 00000004     ................
   1f080:	0001327d 65737361 6f697472 6166206e     }2..assertion fa
   1f090:	64656c69 2860203a 7466656c 203d3d20     iled: `(left == 
   1f0a0:	68676972 0a602974 656c2020 203a7466     right)`.  left: 
   1f0b0:	0a2c6060 67697220 203a7468 203a6060     ``,. right: ``: 
   1f0c0:	0001f084 0000002d 0001f0b1 0000000c     ....-...........
   1f0d0:	0001f0bd 00000003 0001f0c0 74736564     ............dest
   1f0e0:	74616e69 206e6f69 20646e61 72756f73     ination and sour
   1f0f0:	73206563 6563696c 61682073 64206576     ce slices have d
   1f100:	65666669 746e6572 6e656c20 73687467     ifferent lengths
   1f110:	0001f0dc 00000034 0001f110 0001f11c     ....4...........
   1f120:	7375722f 352f6374 66613765 39363634     /rustc/5e7af4669
   1f130:	65303866 38366635 31343132 30353066     f80e5f682141f050
   1f140:	61333931 39373662 62646661 2f316234     193ab679afdb4b1/
   1f150:	2f637273 6362696c 2f65726f 7263616d     src/libcore/macr
   1f160:	6d2f736f 722e646f 00000073 0001f120     os/mod.rs... ...
   1f170:	00000049 00000012 0000000d 0001d3b8     I...............
   1f180:	65737361 6f697472 6166206e 64656c69     assertion failed
   1f190:	2860203a 7466656c 203d3d20 68676972     : `(left == righ
   1f1a0:	0a602974 656c2020 203a7466 0a2c6060     t)`.  left: ``,.
   1f1b0:	67697220 203a7468 203a6060 0001f180      right: ``: ....
   1f1c0:	0000002d 0001f1ad 0000000c 0001f1b9     -...............
   1f1d0:	00000003 0001f1bc 20697073 666e6f63     ........spi conf
   1f1e0:	66206769 006c6961 0001f1d8 0000000f     ig fail.........
   1f1f0:	0001f1e8 0001f1f4 74737572 6e796d2f     ........rust/myn
   1f200:	2f747765 2f637273 2e6c6168 00007372     ewt/src/hal.rs..
   1f210:	0001f1f8 00000016 00000016 00000009     ................
   1f220:	20697073 62616e65 6620656c 006c6961     spi enable fail.
   1f230:	0001f220 0000000f 0001f230 0001f1f8      .......0.......
   1f240:	00000016 00000019 00000009 20697073     ............spi 
   1f250:	74696e69 69616620 0000006c 0001f24c     init fail...L...
   1f260:	0000000d 0001f25c 0001f1f8 00000016     ....\...........
   1f270:	0000001c 00000009 6f697067 69616620     ........gpio fai
   1f280:	0000006c 0001f278 00000009 0001f284     l...x...........
   1f290:	0001f1f8 00000016 00000045 00000009     ........E.......
   1f2a0:	0001f1f8 00000016 0000006c 0000001b     ........l.......

0001f2b0 <str.0>:
   1f2b0:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f2c0:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f2d0:	6d6f5377 6e6f4e65 00000065 0000f4c3     wSomeNone.......
   1f2e0:	00000004 00000004 0000ffd7 77617264     ............draw
   1f2f0:	6f6c6220 20736b63 6c696166 74737572      blocks failrust
   1f300:	6569702f 6d652d74 64646562 702f6465     /piet-embedded/p
   1f310:	2d746569 65626d65 64656464 6172672d     iet-embedded-gra
   1f320:	63696870 72732f73 69642f63 616c7073     phics/src/displa
   1f330:	73722e79 0001f2fc 00000038 00000080     y.rs....8.......
   1f340:	00000005 00000060 0001f344 6576656e     ....`...D...neve
   1f350:	73757272 69702f74 652d7465 6465626d     rrust/piet-embed
   1f360:	2f646564 74656970 626d652d 65646465     ded/piet-embedde
   1f370:	72672d64 69687061 732f7363 622f6372     d-graphics/src/b
   1f380:	68637461 0073722e 0001f351 00000036     atch.rs.Q...6...
   1f390:	000000be 00000019 0001f351 00000036     ........Q...6...
   1f3a0:	000000c3 0000001d 00000000 00000000     ................

0001f3b0 <str.0>:
   1f3b0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f3c0:	20687469 7265766f 776f6c66 0001f351     ith overflowQ...
   1f3d0:	00000036 000000d5 00000015 0001f351     6...........Q...
   1f3e0:	00000036 00000104 00000019 0001f351     6...........Q...
   1f3f0:	00000036 00000109 0000001d 0001f351     6...........Q...
   1f400:	00000036 0000011d 00000015 20697073     6...........spi 
   1f410:	73756c66 61662068 552f6c69 73726573     flush fail/Users
   1f420:	70754c2f 502f7970 54656e69 2f656d69     /Luppy/PineTime/
   1f430:	656e6970 656d6974 7375722d 796d2d74     pinetime-rust-my
   1f440:	7477656e 7375722f 74732f74 35333737     newt/rust/st7735
   1f450:	64636c2d 7461622d 722d6863 72732f73     -lcd-batch-rs/sr
   1f460:	696c2f63 73722e62 0001f41a 0000004e     c/lib.rs....N...
   1f470:	000000fe 00000009 20697073 61746164     ........spi data
   1f480:	69616620 0000006c 0001f41a 0000004e      fail.......N...
   1f490:	000000b0 00000009 0001f41a 0000004e     ............N...
   1f4a0:	000000f3 00000009 0001f41a 0000004e     ............N...
   1f4b0:	00000098 0000000d 20697073 20646d63     ........spi cmd 
   1f4c0:	6c696166 0001f41a 0000004e 00000097     fail....N.......
   1f4d0:	00000009 0001f41a 0000004e 0000009d     ........N.......
   1f4e0:	00000011 0001f41a 0000004e 0000009c     ........N.......
   1f4f0:	0000000d 0001f41a 0000004e 000000c5     ........N.......
   1f500:	0000002d 0001f41a 0000004e 000000c9     -.......N.......
   1f510:	0000002d 0001f41a 0000004e 000000d8     -.......N.......
   1f520:	00000019 00000000 00000000 00000000     ................

0001f530 <str.0>:
   1f530:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f540:	20687469 7265766f 776f6c66 0001f41a     ith overflow....
   1f550:	0000004e 000000d9 00000019 0001f41a     N...............
   1f560:	0000004e 000000db 00000019 0001f41a     N...............
   1f570:	0000004e 000000dc 00000019 20697073     N...........spi 
   1f580:	74696e69 69616620 0000006c 0001f41a     init fail.......
   1f590:	0000004e 00000066 00000009 002d2c01     N...f........,-.
   1f5a0:	0001f59c 012d2c01 00002d2c 0001f5a4     .....,-.,-......
   1f5b0:	00000007 0001f5b0 008402a2 0001f5b8     ................
   1f5c0:	000000c5 0001f5c0 0000000a 0001f5c8     ................
   1f5d0:	00002a8a 0001f5d0 0000ee8a 0001f5d8     .*..............
   1f5e0:	0000000e 0001f5e0 00000000 0001f5e8     ................
   1f5f0:	00000008 0001f5f0 00000005 0001f5f8     ................
   1f600:	0001f41a 0000004e 00000088 00000009     ....N...........
   1f610:	6573552f 4c2f7372 79707075 61632e2f     /Users/Luppy/.ca
   1f620:	2f6f6772 69676572 79727473 6372732f     rgo/registry/src
   1f630:	7469672f 2e627568 2d6d6f63 63636531     /github.com-1ecc
   1f640:	39393236 65396264 33323863 626d652f     6299db9ec823/emb
   1f650:	65646465 72672d64 69687061 302d7363     edded-graphics-0
   1f660:	322e352e 6372732f 6972702f 6974696d     .5.2/src/primiti
   1f670:	2f736576 74636572 6c676e61 73722e65     ves/rectangle.rs
   1f680:	0001f610 00000070 000000c0 00000032     ....p.......2...

0001f690 <str.0>:
   1f690:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f6a0:	20687469 7265766f 776f6c66 0001f610     ith overflow....
   1f6b0:	00000070 000000c2 00000031 00000000     p.......1.......

0001f6c0 <str.1>:
   1f6c0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1f6d0:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1f6e0:	00000077 0001f610 00000070 000000c4     w.......p.......
   1f6f0:	00000031 0001f610 00000070 000000c6     1.......p.......
   1f700:	00000031 65707845 64657463 72747320     1...Expected str
   1f710:	00656b6f 0001f610 00000070 000000cc     oke.....p.......
   1f720:	00000019 0001f610 00000070 000000d5     ........p.......
   1f730:	0000000d 0001f610 00000070 000000da     ........p.......
   1f740:	00000011 00012f13 00000004 00000004     ...../..........
   1f750:	0001327d 00697073 0001d3b8 65737361     }2..spi.....asse
   1f760:	6f697472 6166206e 64656c69 2860203a     rtion failed: `(
   1f770:	7466656c 203d3d20 68676972 0a602974     left == right)`.
   1f780:	656c2020 203a7466 0a2c6060 67697220       left: ``,. rig
   1f790:	203a7468 203a6060 0001f75c 0000002d     ht: ``: \...-...
   1f7a0:	0001f789 0000000c 0001f795 00000003     ................
   1f7b0:	0001f798 20697073 666e6f63 66206769     ....spi config f
   1f7c0:	006c6961 0001f7b4 0000000f 0001f7c4     ail.............
   1f7d0:	0001f7d0 74737572 6e796d2f 2f747765     ....rust/mynewt/
   1f7e0:	2f637273 2e697073 00007372 0001f7d4     src/spi.rs......
   1f7f0:	00000016 00000050 0000004a 20697073     ....P...J...spi 
   1f800:	66206263 006c6961 0001f7fc 0000000b     cb fail.........
   1f810:	0001f808 0001f7d4 00000016 00000057     ............W...
   1f820:	00000005 20697073 62616e65 6620656c     ....spi enable f
   1f830:	006c6961 0001f824 0000000f 0001f834     ail.$.......4...
   1f840:	0001f7d4 00000016 0000005a 00000037     ........Z...7...
   1f850:	6f697067 69616620 0000006c 0001f850     gpio fail...P...
   1f860:	00000009 0001f85c 0001f7d4 00000016     ....\...........
   1f870:	0000005b 00000040 0001f7d4 00000016     [...@...........
   1f880:	0000005c 00000040 6575716d 66206575     \...@...mqueue f
   1f890:	006c6961 0001f888 0000000b 0001f894     ail.............
   1f8a0:	0001f7d4 00000016 00000065 00000005     ........e.......
   1f8b0:	206d6573 6c696166 20697073 6c696166     sem failspi fail
   1f8c0:	0001f8b0 00000008 0001f8c0 0001f7d4     ................
   1f8d0:	00000016 00000069 00000005 0001f7d4     ....i...........
   1f8e0:	00000016 0000006d 00000005 00000000     ....m...........
   1f8f0:	0001f754 00000004 0001f8ec 6e657665     T...........even
   1f900:	66207174 006c6961 0001f7d4 00000016     tq fail.........
   1f910:	00000081 00000009 65737361 6f697472     ........assertio
   1f920:	6166206e 64656c69 6e75203a 65666173     n failed: unsafe
   1f930:	50207b20 49444e45 435f474e 6c2e444d      { PENDING_CMD.l
   1f940:	29286e65 3e207d20 00003020 0001f7d4     en() } > 0......
   1f950:	00000016 00000097 00000005 0001f7d4     ................
   1f960:	00000016 000000a6 00000012 0001f7d4     ................
   1f970:	00000016 000000bf 00000035 00000000     ........5.......

0001f980 <str.0>:
   1f980:	65747461 2074706d 6d206f74 69746c75     attempt to multi
   1f990:	20796c70 68746977 65766f20 6f6c6672     ply with overflo
   1f9a0:	00000077 0001f7d4 00000016 000000c2     w...............
   1f9b0:	0000000f 00000000 00000000 00000000     ................

0001f9c0 <str.1>:
   1f9c0:	65747461 2074706d 61206f74 77206464     attempt to add w
   1f9d0:	20687469 7265766f 776f6c66 20746e69     ith overflowint 
   1f9e0:	20697073 6c696166 0001f7d4 00000016     spi fail........
   1f9f0:	000000ff 00000011 0001f7d4 00000016     ................
   1fa00:	0000010f 00000015 00000000 00000000     ................

0001fa10 <str.2>:
   1fa10:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fa20:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fa30:	00000077 0001f7d4 00000016 0000010d     w...............
   1fa40:	00000011 0001f7d4 00000016 00000115     ................
   1fa50:	00000011 0001f7d4 00000016 00000122     ............"...
   1fa60:	00000009 20646162 20697073 006e656c     ....bad spi len.
   1fa70:	0001f7d4 00000016 00000129 00000005     ........).......
   1fa80:	0001f8b8 00000008 0001fa80 0001f7d4     ................
   1fa90:	00000016 0000013f 00000009 0001f7d4     ....?...........
   1faa0:	00000016 00000148 00000009 0001f7d4     ....H...........
   1fab0:	00000016 0000014c 00000030 0001f7d4     ....L...0.......
   1fac0:	00000016 00000158 00000005 0001f7d4     ....X...........
   1fad0:	00000016 0000015d 00000017 6c6c6163     ....].......call
   1fae0:	60206465 6974704f 3a3a6e6f 72776e75     ed `Option::unwr
   1faf0:	29287061 6e6f2060 60206120 656e6f4e     ap()` on a `None
   1fb00:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fb10:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fb20:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fb30:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fb40:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fb50:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fb60:	0001fb07 00000056 000001e8 0000000d     ....V...........

0001fb70 <str.0>:
   1fb70:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fb80:	20687469 7265766f 776f6c66 552f2928     ith overflow()/U
   1fb90:	73726573 70754c2f 2e2f7970 67726163     sers/Luppy/.carg
   1fba0:	65722f6f 74736967 732f7972 672f6372     o/registry/src/g
   1fbb0:	75687469 6f632e62 65312d6d 32366363     ithub.com-1ecc62
   1fbc0:	62643939 38636539 682f3332 6c706165     99db9ec823/heapl
   1fbd0:	2d737365 2e352e30 72732f31 65762f63     ess-0.5.1/src/ve
   1fbe0:	73722e63 00000000 00000000 00000000     c.rs............

0001fbf0 <str.0>:
   1fbf0:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fc00:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fc10:	00000077 0001fb8e 00000056 00000066     w.......V...f...
   1fc20:	00000009 00000000 00000000 00000000     ................

0001fc30 <str.1>:
   1fc30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fc40:	20687469 7265766f 776f6c66 0001fb8e     ith overflow....
   1fc50:	00000056 0000003e 0000000c 0001fb8e     V...>...........
   1fc60:	00000056 0000002d 00000009 0001fb8e     V...-...........
   1fc70:	00000056 0000007e 00000011 00011d7d     V...~.......}...
   1fc80:	00000000 00000001 00015135 00011cc1     ........5Q......
   1fc90:	00000002 00000002 00016645 6c6c6163     ........Ef..call
   1fca0:	60206465 75736552 3a3a746c 72776e75     ed `Result::unwr
   1fcb0:	29287061 6e6f2060 206e6120 72724560     ap()` on an `Err
   1fcc0:	61762060 2f65756c 72657355 754c2f73     ` value/Users/Lu
   1fcd0:	2f797070 7261632e 722f6f67 73696765     ppy/.cargo/regis
   1fce0:	2f797274 2f637273 68746967 632e6275     try/src/github.c
   1fcf0:	312d6d6f 36636365 64393932 63653962     om-1ecc6299db9ec
   1fd00:	2f333238 70616568 7373656c 352e302d     823/heapless-0.5
   1fd10:	732f312e 762f6372 722e6365 00000073     .1/src/vec.rs...
   1fd20:	0001fcc7 00000056 00000066 00000009     ....V...f.......

0001fd30 <str.0>:
   1fd30:	65747461 2074706d 61206f74 77206464     attempt to add w
   1fd40:	20687469 7265766f 776f6c66 0001fcc7     ith overflow....
   1fd50:	00000056 0000003e 0000000c 0001fcc7     V...>...........
   1fd60:	00000056 0000007e 00000011 00000000     V...~...........

0001fd70 <str.1>:
   1fd70:	65747461 2074706d 73206f74 72746275     attempt to subtr
   1fd80:	20746361 68746977 65766f20 6f6c6672     act with overflo
   1fd90:	00000077 2f637273 6362696c 2f65726f     w...src/libcore/
   1fda0:	2f6d756e 32636564 2f746c66 66776172     num/dec2flt/rawf
   1fdb0:	73722e70 65646e69 756f2078 666f2074     p.rsindex out of
   1fdc0:	756f6220 3a73646e 65687420 6e656c20      bounds: the len
   1fdd0:	20736920 00000000 00000020 00000008      is .... .......
   1fde0:	00000002 00000000 00000000 00000002     ................
   1fdf0:	00000003 2f637273 6362696c 2f65726f     ....src/libcore/
   1fe00:	63696e75 2f65646f 6e697270 6c626174     unicode/printabl
   1fe10:	73722e65 00000000 00000020 00000004     e.rs.... .......
   1fe20:	00000002 00000000 00000002 00000000     ................
   1fe30:	00000003 00000000 00000020 00000008     ........ .......
   1fe40:	00000002 00000000 00000001 00000001     ................
   1fe50:	00000003 002e2e60 0001fe55 00000002     ....`...U.......
   1fe60:	65726c61 20796461 72726f62 6465776f     already borrowed
   1fe70:	68772029 73206e65 6963696c 6020676e     ) when slicing `
   1fe80:	72616843 46797254 456d6f72 726f7272     CharTryFromError
   1fe90:	6f636544 74556564 45363166 726f7272     DecodeUtf16Error

0001fea0 <_ZN4core7unicode12unicode_data2cc19BITSET_INDEX_CHUNKS17hbc015fed27aef3baE>:
   1fea0:	00010201 00000000 00000000 00000000     ................
   1feb0:	72657469 20202020 2e2e202c 65757274     iter    , ..true
   1fec0:	72657449 203d3c20 61746164 646e696b     Iter <= datakind
   1fed0:	746e616d 73756c70 6f72655a 79706f43     mantplusZeroCopy
   1fee0:	7373654c 65646f63 65707954 656e6f44     LesscodeTypeDone
   1fef0:	72616843 6b636142 68746f42 6d657449     CharBackBothItem
   1ff00:	656c6966 656e696c 7466654c 6c696174     filelineLefttail
   1ff10:	656b6177 706f7264 32783875 32783869     wakedropu8x2i8x2
   1ff20:	34783875 34783869 38783875 38783869     u8x4i8x4u8x8i8x8
   1ff30:	6c6c6163 60206465 6974704f 3a3a6e6f     called `Option::
   1ff40:	72776e75 29287061 6e6f2060 60206120     unwrap()` on a `
   1ff50:	656e6f4e 61762060 0065756c 0001fd94     None` value.....
   1ff60:	00000000 0000203a 0001fd94 00000000     ....: ..........
   1ff70:	0001ff64 00000002 00016899 00000000     d........h......
   1ff80:	00000001 000168e9 74756220 65687420     .....h.. but the
   1ff90:	646e6920 69207865 00002073 0001fdb4      index is ......
   1ffa0:	00000020 0001ff88 00000012 00016899      ............h..
   1ffb0:	0000000c 00000004 00016b33 00016e89     ........3k...n..
   1ffc0:	00016f39 202c0a2c 2c280a28 30783029     9o..,., (.(,)0x0
   1ffd0:	30313030 30333032 30353034 30373036     0010203040506070
   1ffe0:	31393038 31313130 31333132 31353134     8091011121314151
   1fff0:	31373136 32393138 32313230 32333232     6171819202122232
   20000:	32353234 32373236 33393238 33313330     4252627282930313
   20010:	33333332 33353334 33373336 34393338     2333435363738394
   20020:	34313430 34333432 34353434 34373436     0414243444546474
   20030:	35393438 35313530 35333532 35353534     8495051525354555
   20040:	35373536 36393538 36313630 36333632     6575859606162636
   20050:	36353634 36373636 37393638 37313730     4656667686970717
   20060:	37333732 37353734 37373736 38393738     2737475767778798
   20070:	38313830 38333832 38353834 38373836     0818283848586878
   20080:	39393838 39313930 39333932 39353934     8899091929394959
   20090:	39373936 00393938 00016899 00000004     6979899..h......
   200a0:	00000004 00016f5d 00016f63 00016f69     ....]o..co..io..
   200b0:	2f637273 6362696c 2f65726f 2f746d66     src/libcore/fmt/
   200c0:	2e646f6d 00007372 000200b0 00000016     mod.rs..........
   200d0:	0000043b 00000011 000200b0 00000016     ;...............
   200e0:	00000445 00000024 2f637273 6362696c     E...$...src/libc
   200f0:	2f65726f 63696c73 6f6d2f65 73722e64     ore/slice/mod.rs
   20100:	65646e69 6f202078 6f207475 61722066     index  out of ra
   20110:	2065676e 20726f66 63696c73 666f2065     nge for slice of
   20120:	6e656c20 20687467 00020100 00000006      length ........
   20130:	00020106 00000022 000200e8 00000018     ...."...........
   20140:	00000a72 00000005 63696c73 6e692065     r.......slice in
   20150:	20786564 72617473 61207374 62202074     dex starts at  b
   20160:	65207475 2073646e 00207461 00020148     ut ends at .H...
   20170:	00000016 0002015e 0000000d 000200e8     ....^...........
   20180:	00000018 00000a78 00000005 696e6966     ....x.......fini
   20190:	64656873 73796168 6b636174 79622820     shedhaystack (by
   201a0:	20736574 6167654e 65766974 69736f50     tes NegativePosi
   201b0:	65766974 65746e69 6c617267 61706e55     tiveintegralUnpa
   201c0:	64656b63 69666e49 6574696e 756e694d     ckedInfiniteMinu
   201d0:	77615273 7265764f 776f6c66 6b636162     sRawOverflowback
   201e0:	72657469 6f746e49 72657449 61636f6c     iterIntoIterloca
   201f0:	6e6f6974 61636f4c 6e6f6974 72616573     tionLocationsear
   20200:	72656863 69736f70 6e6f6974 74697263     cherpositioncrit
   20210:	736f705f 656e694c 796e4173 57776152     _posLinesAnyRawW
   20220:	72656b61 6f6c6c41 72724563 38746e69     akerAllocErrint8
   20230:	745f3478 2f637273 6362696c 2f65726f     x4_tsrc/libcore/
   20240:	2f727473 2e646f6d 2e5b7372 625d2e2e     str/mod.rs[...]b
   20250:	20657479 65646e69 69202078 756f2073     yte index  is ou
   20260:	666f2074 756f6220 2073646e 6020666f     t of bounds of `
   20270:	0002024f 0000000b 0002025a 00000016     O.......Z.......
   20280:	0001fe54 00000001 00020234 00000016     T.......4.......
   20290:	00000853 00000009 69676562 3d3c206e     S.......begin <=
   202a0:	646e6520 00002820 00020298 0000000e      end (..........
   202b0:	0001fec4 00000004 0001fe70 00000010     ........p.......
   202c0:	0001fe54 00000001 00020234 00000016     T.......4.......
   202d0:	00000857 00000005 00020234 00000016     W.......4.......
   202e0:	00000868 0000000e 20736920 20746f6e     h....... is not 
   202f0:	68632061 62207261 646e756f 3b797261     a char boundary;
   20300:	20746920 69207369 6469736e 20292065      it is inside ) 
   20310:	6020666f 0002024f 0000000b 000202e8     of `O...........
   20320:	00000026 0002019c 00000008 0002030e     &...............
   20330:	00000006 0001fe54 00000001 00020234     ....T.......4...
   20340:	00000016 0000086a 00000005 0001fdf4     ....j...........
   20350:	00000020 0000001a 00000028 05030100      .......(.......
   20360:	03060605 08080607 1c0a1109 140c190b     ................
   20370:	0d0e120d 0310040f 09131212 05170116     ................
   20380:	03190218 021c071a 161f011d 042b0320     ............ .+.
   20390:	0b2d022c 0330012e 01320231 02a902a7     ,.-...0.1.2.....
   203a0:	08ab04aa 05fb02fa 03fe04fd 78ad09ff     ...............x
   203b0:	a28d8b79 8b585730 1d1c908c 4b0f0edd     y...0WX........K
   203c0:	2efcfb4c 5d5c3f2f 84e2b55f 92918e8d     L.../?\]_.......
   203d0:	bbbab1a9 cac9c6c5 ffe5e4de 12110400     ................
   203e0:	37343129 493d3b3a 8e845d4a b4b1a992     )147:;=IJ]......
   203f0:	cac6bbba e5e4cfce 0e0d0400 31291211     ..............)1
   20400:	453b3a34 5e4a4946 91846564 cec99d9b     4:;EFIJ^de......
   20410:	29110dcf 64574945 a9918d65 c5bbbab4     ...)EIWde.......
   20420:	e5e4dfc9 110d04f0 65644945 b2848180     ........EIde....
   20430:	d5bfbebc 83f1f0d7 a6a48b85 c7c5bfbe     ................
   20440:	dbdacfce cdbd9848 49cfcec6 59574f4e     ....H......INOWY
   20450:	8e895f5e b7b6b18f c7c6c1bf 171611d7     ^_..............
   20460:	f7f65c5b 0d80fffe dfde716d 6e1f0f0e     [\......mq.....n
   20470:	5f1d1c6f afae7e7d 16fabcbb 461f1e17     o.._}~.........F
   20480:	584f4e47 7e5e5c5a d4c5b57f f1f0dcd5     GNOXZ\^~........
   20490:	8f7372f5 97967574 2e265f2f b7afa72f     .rs.tu../_&./...
   204a0:	d7cfc7bf 97409adf 1f8f3098 ffcec1c0     ......@..0......
   204b0:	5b5a4f4e 100f0807 efee2f27 3d376f6e     NOZ[....'/..no7=
   204c0:	9045423f 53fffe91 c9c87567 d9d8d1d0     ?BE....Sgu......
   204d0:	00fffee7 82225f20 448204df 06041b08     .... _"....D....
   204e0:	0eac8111 1e35ab80 03e08015 04010819     ......5.........
   204f0:	0434042f 07010307 0a110706 07120f50     /.4.........P...
   20500:	04020855 03090a1c 03070308 03030302     U...............
   20510:	0305040c 0e01060b 033a0515 05060711     ..........:.....
   20520:	07570710 0d150702 03430450 0401032d     ..W.....P.C.-...
   20530:	0c0f0611 251d043a 046d205f c880256a     ....:..%_ m.j%..
   20540:	03b08205 fd82061a 15075903 1409170b     .........Y......
   20550:	6a0c140c 1a060a06 2b075906 2c0a4605     ...j.....Y.+.F.,
   20560:	01040c04 2c0b3103 0b061a04 06ac8003     .....1.,........
   20570:	411f060a 032d044c 033c0874 073c030f     ...AL.-.t.<...<.
   20580:	052b0838 1811ff82 2d112f08 21102003     8.+....../.-. .!
   20590:	048c800f 0b199782 05948815 073b052f     ............/.;.
   205a0:	09180e02 7430b080 1ad6800c ff80050c     ......0t........
   205b0:	05b68005 c69b0c24 1030d20a 37038d84     ....$.....0....7
   205c0:	145c8109 8008b880 043530c7 0838060a     ..\......05...8.
   205d0:	060c0846 031e0b74 0959045a 1c188380     F...t...Z.Y.....
   205e0:	4809160a 068a8008 170ca4ab 04a13104     ...H.........1..
   205f0:	0726da81 8005050c 6d8111a5 2a287810     ..&........m.x(*
   20600:	80044c06 be80048d 0f031b03 0106000d     .L..............
   20610:	04010301 09080802 0b050a02 11011002     ................
   20620:	13051204 15021411 19021702 1d051c04     ................
   20630:	6a012408 bc026b03 d402d102 d609d50c     .$.j.k..........
   20640:	da02d702 e105e001 ee02e802 f904f020     ............ ...
   20650:	0c02fa06 4e3e3b27 9e9e8f4f 0907069f     ....';>NO.......
   20660:	563e3d36 04d1d0f3 37361814 35bd5756     6=>V......67VW.5
   20670:	12e0cfce 9e8e8987 110e0d04 34312912     .............)14
   20680:	4946453a 644f4e4a b65c5a65 a81c1bb7     :EFIJNOdeZ\.....
   20690:	09d9d8a9 a8919037 3e3b0a07 928f6966     ....7.....;>fi..
   206a0:	efee5f6f 9b9a625a 9d552827 a4a3a1a0     o_..Zb..'(U.....
   206b0:	baada8a7 0b06c4bc 3a1d150c a651453f     ...........:?EQ.
   206c0:	a0cdcca7 221a1907 c53f3e25 232004c6     ......."%>?... #
   206d0:	33282625 4a483a38 5553504c 5c5a5856     %&(38:HJLPSUVXZ\
   206e0:	6563605e 78736b66 a48a7f7d c0b0afaa     ^`cefksx}.......
   206f0:	a3720cd0 6ecccba4 7b225e6f 2d040305     ..r....no^"{...-
   20700:	01046503 82802e2f 0f31031d 0924041c     .e../.....1...$.
   20710:	052b051e 2a0e0444 2406aa80 28042404     ..+.D..*...$.$.(
   20720:	010b3408 37819080 080a1609 03399880     .4.....7......9.
   20730:	30090863 03210516 4001051b 054b0438     c..0..!....@8.K.
   20740:	070a042f 20400709 090c0427 053a0336     /.....@ '...6.:.
   20750:	0c04071a 37495007 07330d33 810a082e     .....PI73.3.....
   20760:	81801f26 802a0828 4e091786 430f1e04     &...(.*....N...C
   20770:	0a07190e 27094706 3f0b7509 3b062a41     .....G.'.u.?A*.;
   20780:	51060a05 10050106 8b800503 08482060     ...Q........` H.
   20790:	5ea6800a 0a0b4522 39130d06 2c360a07     ...^"E.....9..6,
   207a0:	c0801004 0c53643c 45a08001 5308481b     ....<dS....E.H.S
   207b0:	0781391d 031d0a46 03374947 060a080e     .9..F...GI7.....
   207c0:	810a0739 c7801936 9b830d32 800b7566     9...6...2...fu..
   207d0:	84bc8ac4 82d18f2f 82b9a147 042a0739     ..../...G...9.*.
   207e0:	0a266002 05280a46 5bb08213 39044b65     .`&.F.(....[eK.9
   207f0:	04401107 08f8971c 0da5f382 03311f81     ..@...........1.
   20800:	81080411 6b04898c 09030d05 60931007     .......k.......`
   20810:	730af680 46176e08 0c149a80 80190957     ...s.n.F....W...
   20820:	03478187 150f4285 802b5085 1a032dd5     ..G..B...P+..-..
   20830:	70810204 8501053a 29d78000 040a044c     ...p:......)L...
   20840:	44118302 c2803d4c 0401063c 341b0555     ...DL=..<...U..4
   20850:	2c0e8102 560c6404 5d030d0a 1d393d03     ...,.d.V...].=9.
   20860:	09042c0d 060e0207 d6839a80 0b030d0a     .,..............
   20870:	590c7405 0c140c07 0a083804 1e082806     .t.Y.....8...(..
   20880:	31037752 0ca68003 05030414 85060d03     Rw.1............
   20890:	6372736a 62696c2f 65726f63 696e752f     jsrc/libcore/uni
   208a0:	65646f63 646f6d2f 0073722e 00020891     code/mod.rs.....
   208b0:	0000001a 00000038 0000000f 00020891     ....8...........
   208c0:	0000001a 00000039 00000010              ....9.......

000208cc <_ZN4core7unicode12unicode_data15grapheme_extend17BITSET_CHUNKS_MAP17h57ca90b8fd037459E>:
   208cc:	1b150f04 17120319 0e000011 00000016     ................
	...
   208f4:	00130600 00000000 00000000 00000000     ................
   20904:	00000000 07020000 0c08000a 1a181c1d     ................
	...
   20924:	01050000 00000000 00000000 00000000     ................
   20934:	00000000 10000000 00000000 0009000b     ................
   20944:	                                         ...

00020947 <_ZN4core7unicode12unicode_data15grapheme_extend19BITSET_INDEX_CHUNKS17h1b13e11840f43db4E>:
	...
   20963:	00120f00 00000000 00000000 00000000     ................
   20973:	0000001f 00000000 00000000 00000000     ................
   20983:	1d664649 00000000 00000000 00000000     IFf.............
   20993:	00003e8a 00000000 00000000 4b000000     .>.............K
   209a3:	00000053 00000000 00000000 42236700     S............g#B
	...
   209bf:	0000003d 00230000 00000000 00000000     =.....#.........
   209cf:	2d000075 00000000 00000000 00000000     u..-............
   209df:	003c4e82 00000000 00000000 63000000     .N<............c
   209ef:	25000000 00005a00 00000000 00368100     ...%.Z........6.
   209ff:	00000300 00000000 00000000 0000002f     ............/...
   20a0f:	00000000 00001000 13000000 00000800     ................
	...
   20a27:	43000000 89007200 00000000 00000000     ...C.r..........
   20a37:	00070000 057d0000 37003f18 64400987     ......}..?.7..@d
   20a47:	00210000 00000000 00000000 00000000     ..!.............
   20a57:	4100000a 00000000 00000000 00000000     ...A............
   20a67:	0030000c 0000005c 00717719 44354760     ..0.\....wq.`G5D
   20a77:	7400002e 2c651139 507f5e51 34000000     ...t9.e,Q^.P...4
   20a87:	00000031 00000053 3a000000 00000000     1...S......:....
   20a97:	88001a38 696b2b5f 845d4f5d 14682a80     8..._+ki]O]..*h.
   20aa7:	0017003b 00000000 00000000 00000000     ;...............
   20ab7:	57000055 83000000 00000000 00000000     U..W............
   20ac7:	00000059 26000000 00161b6e 00000000     Y......&n.......
   20ad7:	001c4a6d 00000000 00000000 00002400     mJ...........$..
   20ae7:	0052007c 0015067b 48000000 00000000     |.R.{......H....
   20af7:	2776287e 2200296c 0d610e5b 04627056     ~(v'l)."[.a.Vpb.
   20b07:	02782085 1e7a0000 00540179 00000033     . x...z.y.T.3...
   20b17:	00587386 0b6f454d 3200006a 00004c6c     .sX.MEo.j..2lL..
   20b27:	00008a89 3e8a8a8a 00000000 00000000     .......>........
	...

00020b38 <_ZN4core7unicode12unicode_data15grapheme_extend6BITSET17hd1cb5a4d1d451815E>:
	...
   20b40:	00000001 00000000 0000000d 00000000     ................
   20b50:	0000001c 00000000 00000040 00000000     ........@.......
   20b60:	000000b6 00000000 000000bf 00000000     ................
   20b70:	000003f8 00000000 000007f0 00000000     ................
   20b80:	000007ff 00000000 00001000 00000000     ................
   20b90:	00001e00 00000000 00003800 00000000     .........8......
   20ba0:	00003f00 00000000 00007f80 00000000     .?..............
   20bb0:	00008000 00000000 0001ffc0 00000000     ................
   20bc0:	0003ff80 00000000 00078000 00000000     ................
   20bd0:	007f0000 00000000 00802001 00000000     ......... ......
   20be0:	00a30000 00000000 037ffc00 00000000     ................
   20bf0:	06000000 00000000 07ff0000 00000000     ................
   20c00:	09800000 00000000 0e000000 00000000     ................
   20c10:	0e7e0080 00000000 20002064 00000000     ..~.....d . ....
   20c20:	200ffe40 00000000 30000001 00000000     @.. .......0....
   20c30:	40000000 00000000 4000005c 00000000     ...@....\..@....
   20c40:	60000000 00000000 805c8400 00000000     ...`......\.....
   20c50:	c0000000 00000000 e0000000 00000000     ................
   20c60:	00000000 00000001 0cf00000 00000001     ................
   20c70:	00603044 0000000c 00603dc1 0000000c     D0`......=`.....
   20c80:	0080201e 0000000c 00c0201e 0000000c     . ....... ......
   20c90:	00fe21fe 0000000c 00000000 00000020     .!.......... ...
   20ca0:	00000000 00000060 00000844 00000060     ....`...D...`...
   20cb0:	00000000 000000f0 00000060 00000200     ........`.......
   20cc0:	f9ffff7f 000007db 80000000 000007f8     ................
   20cd0:	e0000000 00000fbc 00000000 00002120     ............ !..
   20ce0:	00000003 00003b3c 00000fe7 00003c00     ....<;.......<..
   20cf0:	9fc00000 00003d9f fbc00000 00003eef     .....=.......>..
   20d00:	00000000 00003fc0 00000000 0000f000     .....?..........
   20d10:	00000000 0000fc00 f8000010 0000fffe     ................
   20d20:	0000ffff 0000ffff ffffffff 0000ffff     ................
   20d30:	fffff800 00010000 00000000 0001ffc0     ................
   20d40:	ffff0000 0001ffff 00000000 00030000     ................
   20d50:	00000000 00038000 00000000 0003a340     ............@...
   20d60:	00000000 00080000 000c0000 000c0000     ................
   20d70:	00000004 000ff800 00000000 00180000     ................
   20d80:	001c0000 001c0000 c3000000 001e0001     ................
   20d90:	00000000 001f0000 00800001 001f1fc0     ................
   20da0:	00000007 001fef80 ffffffff 00201fff     .............. .
   20db0:	00023986 00230000 00000002 00403000     .9....#......0@.
   20dc0:	00000000 00667e00 fffc0000 006dfcff     .....~f.......m.
   20dd0:	00000000 007f0000 00000000 00bf2800     .............(..
   20de0:	00000000 00cff000 03000000 02a00000     ................
   20df0:	fff70000 031021fd 00000003 06780000     .....!........x.
   20e00:	00000000 06ff8000 00000000 07c00000     ................
   20e10:	00000000 07f20000 00000000 0e040187     ................
   20e20:	00000006 10000000 00001008 10000000     ................
   20e30:	00000007 14000000 0000000f 17f00000     ................
   20e40:	00000000 1ff20000 feffe0df 1fffffff     ................
   20e50:	00000000 20000000 00000000 200ff800     ....... ....... 
   20e60:	00000007 33c80000 00000000 3fb00000     .......3.......?
   20e70:	00000000 3ff78000 00000004 40000000     .......?.......@
   20e80:	0080201e 4000000c 00000000 40d38000     . .....@.......@
   20e90:	00000002 50000000 00000003 58000000     .......P.......X
   20ea0:	00000000 66fde000 000007fe 79f80000     .......f.......y
   20eb0:	00000003 7fc00000 00000000 7ffe0000     ................
   20ec0:	00000000 7fff0000 00000000 80000000     ................
   20ed0:	0000007f 80000000 00000030 8003ffff     ........0.......
   20ee0:	0000f06e 87000000 00000002 90000000     n...............
   20ef0:	7f400000 9ff81fe5 00000000 a5f90000     ..@.............
   20f00:	00000000 a7f80000 00000000 b03c8000     ..............<.
   20f10:	00000000 b47e0000 00000000 bf7f0000     ......~.........
   20f20:	fffe0000 bfffffff 00000011 c0000000     ................
   20f30:	00000000 c19d0000 00000002 d0000000     ................
   20f40:	00000000 f807c3a0 ffffffff f87fffff     ................
   20f50:	ffffffff fbffffff 000021be fc00000c     .........!......
   20f60:	00000000 ff000000 00000002 ff000000     ................
   20f70:	00020000 ffff0000 fff80000 fffffffb     ................
   20f80:	00000000 ffffffff ffffffff ffffffff     ................
   20f90:	00000020 00006425 6c363025 00002075      ...%d..%06lu ..

00020fa0 <nrf52_hal_i2cs>:
   20fa0:	00000000 20000108                       ....... 

00020fa8 <nrf52_hal_spis>:
   20fa8:	2000d5c0 00000000 00000000 65737341     ... ........Asse
   20fb8:	40207472 25783020 00000a78 65737341     rt @ 0x%x...Asse
   20fc8:	40207472 25783020 202d2078 253a7325     rt @ 0x%x - %s:%
   20fd8:	00000a64 61686e55 656c646e 6e692064     d...Unhandled in
   20fe8:	72726574 20747075 646c2528 65202c29     terrupt (%ld), e
   20ff8:	70656378 6e6f6974 20707320 30257830     xception sp 0x%0
   21008:	0a786c38 00000000 3a307220 30257830     8lx..... r0:0x%0
   21018:	20786c38 3a317220 30257830 20786c38     8lx  r1:0x%08lx 
   21028:	3a327220 30257830 20786c38 3a337220      r2:0x%08lx  r3:
   21038:	30257830 0a786c38 00000000 3a347220     0x%08lx..... r4:
   21048:	30257830 20786c38 3a357220 30257830     0x%08lx  r5:0x%0
   21058:	20786c38 3a367220 30257830 20786c38     8lx  r6:0x%08lx 
   21068:	3a377220 30257830 0a786c38 00000000      r7:0x%08lx.....
   21078:	3a387220 30257830 20786c38 3a397220      r8:0x%08lx  r9:
   21088:	30257830 20786c38 3a303172 30257830     0x%08lx r10:0x%0
   21098:	20786c38 3a313172 30257830 0a786c38     8lx r11:0x%08lx.
   210a8:	00000000 3a323172 30257830 20786c38     ....r12:0x%08lx 
   210b8:	3a726c20 30257830 20786c38 3a637020      lr:0x%08lx  pc:
   210c8:	30257830 20786c38 3a727370 30257830     0x%08lx psr:0x%0
   210d8:	0a786c38 00000000 52534349 2578303a     8lx.....ICSR:0x%
   210e8:	786c3830 53464820 78303a52 6c383025     08lx HFSR:0x%08l
   210f8:	46432078 303a5253 38302578 000a786c     x CFSR:0x%08lx..
   21108:	52414642 2578303a 786c3830 464d4d20     BFAR:0x%08lx MMF
   21118:	303a5241 38302578 000a786c 6e69616d     AR:0x%08lx..main
   21128:	00000000 656c6469 00000000 7379736d     ....idle....msys
   21138:	0000315f                                _1..

0002113c <MemFile_methods>:
   2113c:	0001b769 00000000                       i.......

00021144 <stdout>:
   21144:	20000124                                $.. 

00021148 <nrf52k_flash_dev>:
   21148:	00021160 00000000 00080000 00000080     `...............
   21158:	00000001 000000ff                       ........

00021160 <nrf52k_flash_funcs>:
   21160:	0001b9d5 0001b905 0001b88d 0001b8e5     ................
   21170:	00000000 0001b8e1 00000000              ............

0002117c <nrf52_hal_timers>:
   2117c:	2000d6d0 00000000 00000000 00000000     ... ............
	...

00021194 <hal_i2c1_cfg>:
   21194:	00000007 00000006 00000064              ........d...

000211a0 <os_bsp_spi0m_cfg>:
   211a0:	001d0302 736e6573 6e5f726f 6669746f     ....sensor_notif
   211b0:	7476655f 00000073                       _evts...

000211b8 <COLLECTOR_NODE_HW_ID>:
   211b8:	066aff57 50547878 67242949              W.j.xxTPI)$g

000211c4 <SENSOR_NODE_HW_IDS>:
   211c4:	066dff38 3634574e 43085825 04030201     8.m.NW46%X.C....
   211d4:	08070605 020b0a09 04030201 08070605     ................
   211e4:	030b0a09 04030201 08070605 040b0a09     ................
   211f4:	04030201 08070605 050b0a09 77687325     ............%shw
   21204:	00206469 30313025 00786c6c 646f6e20     id .%010llx. nod
   21214:	00002065 65737325 726f736e 25237325     e ..%ssensor%s#%
   21224:	00000a64 6f637325 63656c6c 25726f74     d...%scollector%
   21234:	00000a73 74737325 61646e61 656e6f6c     s...%sstandalone
   21244:	000a7325 2054454e 00000000 73257325     %s..NET ....%s%s
   21254:	0a732520 00000000 00000000               %s.........

00021260 <sensor_node_addresses>:
   21260:	b4b5b6f1 000000b3 b4b5b6cd 000000b3     ................
   21270:	b4b5b6a3 000000b3 b4b5b60f 000000b3     ................
   21280:	b4b5b605 000000b3 706d6574 7574735f     ........temp_stu
   21290:	00305f62 20504d54 61657263 25206574     b_0.TMP create %
   212a0:	00000a73                                s...

000212a4 <g_temp_stub_sensor_driver>:
   212a4:	0001c811 0001c719 00000000 00000000     ................
	...
   212cc:	20425453 64616572 6d657420 65732070     STB read temp se
   212dc:	726f736e 0000000a 635f636f 62635f6c     nsor....oc_cl_cb
   212ec:	00000073 725f636f 6f5f7065 00000000     s...oc_rep_o....

000212fc <sysflash_map_dflt>:
	...
   21304:	00004000 00000001 00008000 00073c00     .@...........<..
   21314:	00000002 0007bc00 00000400 00000003     ................
   21324:	0007c000 00001000 00000010 00004000     .............@..
   21334:	00004000 00000011 0007d000 00003000     .@...........0..
   21344:	70616f63 6365725f 65766965 544f4e20     coap_receive NOT
   21354:	504d4920 454d454c 4445544e 0000000a      IMPLEMENTED....

/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf:     file format elf32-littlearm

arm-none-eabi-objdump: section '.rodata' mentioned in a -j option, but not found in any input file
   text	   data	    bss	    dec	    hex	filename
 103260	    108	  55096	 158464	  26b00	/Users/Luppy/PineTime/pinetime-rust-mynewt/bin/targets/nrf52_my_sensor/app/apps/my_sensor_app/my_sensor_app.elf
